% use lib 'lib';
% use Dissertacao;
% use List::Util qw ( uniq sum );
% my %dataset = %{ $_[0] };
% my %references = %{ $_[1] };
%= "\% dados do estudo1"
\newcommand{\PapersCount}{<%== papers_count %>}
\newcommand{\PapersASECount}{<%== count_total 'dataset/papers/filter-papers-ase.md' %>}
\newcommand{\PapersSCAMCount}{<%== count_total 'dataset/papers/filter-papers-scam.md' %>}
\newcommand{\PapersFilterCount}{<%== papers_filter_count %dataset %>}
\newcommand{\PapersFilterASECount}{<%== count_included 'dataset/papers/filter-papers-ase.md' %>}
\newcommand{\PapersFilterSCAMCount}{<%== count_included 'dataset/papers/filter-papers-scam.md' %>}
\newcommand{\PapersExtractionCount}{<%== papers_extraction_count %dataset %>}
\newcommand{\SoftwareCount}{<%== keys %dataset %>}
\newcommand{\SoftwareASECount}{<%== grep { $dataset{$_}{conference} eq 'ASE' } keys %dataset %>}
\newcommand{\SoftwareSCAMCount}{<%== grep { $dataset{$_}{conference} eq 'SCAM' } keys %dataset %>}
\newcommand{\SoftwareUrlNotAvailableCount}{<%== grep { $dataset{$_}{address}{url_available} eq 'no' } keys %dataset %>}
\newcommand{\SoftwareUrlNotAvailableSCAMCount}{<%== grep { $dataset{$_}{address}{url_available} eq 'no' && $dataset{$_}{conference} eq 'SCAM' } keys %dataset %>}
\newcommand{\UrlAvailableCount}{<%== grep { $dataset{$_}{address}{url_available} eq 'yes' } keys %dataset %>}
\newcommand{\SoftwareUrlAvailableSCAMCount}{<%== grep { $dataset{$_}{address}{url_available} eq 'yes' && $dataset{$_}{conference} eq 'SCAM' } keys %dataset %>}
\newcommand{\SoftwareDownloadNotAvailableCount}{<%== grep { $dataset{$_}{address}{download_available} eq 'no' } keys %dataset %>}
\newcommand{\SoftwareDownloadNotAvailableSCAMCount}{<%== grep { $dataset{$_}{address}{download_available} eq 'no' && $dataset{$_}{conference} eq 'SCAM' } keys %dataset %>}
\newcommand{\DownloadAvailableCount}{<%== grep { $dataset{$_}{address}{download_available} eq 'yes' } keys %dataset %>}
\newcommand{\SoftwareDownloadAvailableSCAMCount}{<%== grep { $dataset{$_}{address}{download_available} eq 'yes' && $dataset{$_}{conference} eq 'SCAM' } keys %dataset %>}
\newcommand{\SourceCodeAvailableCount}{<%== grep { $dataset{$_}{address}{download_available} eq 'yes' && $dataset{$_}{features}{source_code} ne 'undefined' } keys %dataset %>}
\newcommand{\SoftwareSourceCodeNotAvailableCount}{<%== grep { $dataset{$_}{address}{download_available} eq 'yes' && $dataset{$_}{features}{source_code} eq 'undefined' } keys %dataset %>}
\newcommand{\SoftwareSourceCodeNotAvailableSCAMCount}{<%== grep { $dataset{$_}{address}{download_available} eq 'yes' && $dataset{$_}{features}{source_code} eq 'undefined' && $dataset{$_}{conference} eq 'SCAM' } keys %dataset %>}
\newcommand{\FreeSoftwareCount}{<%== grep { $dataset{$_}{software}{distribution} eq 'foss' } keys %dataset %>}
\newcommand{\LicenseUndefinedCount}{<%== grep { $dataset{$_}{address}{download_available} eq 'yes' && $dataset{$_}{features}{source_code} ne 'undefined' && $dataset{$_}{software}{license} eq 'undefined' } keys %dataset %>}
%= "\% dados do estudo2"
% my @mentions = ();
% my %mentions_by_study = ();
% my %contribute_study2 = ();
% foreach my $k (keys %dataset) {
%   $mentions_by_study{1}{$k} //= 0;
%   $mentions_by_study{2}{$k} //= 0;
%   $contribute_study2{$k} = 0;
%   foreach my $id (keys %{ $dataset{$k}{references} }) {
%     if ($dataset{$k}{references}{$id}{is_software_mentioned} eq 'yes') {
%       push @mentions, $id;
%       if ($dataset{$k}{references}{$id}{step} && $dataset{$k}{references}{$id}{step} eq 'study1') {
%         $mentions_by_study{1}{$k}++;
%       }
%       else {
%         $mentions_by_study{2}{$k}++;
%         if ($dataset{$k}{references}{$id}{mention_type} eq 'contribute') {
%           $contribute_study2{$k}++;
%         }
%       }
%     }
%   }
% }
\newcommand{\SearchACMCount}{<%== sum map { $dataset{$_}{search}{acm}{results} } keys %dataset %>}
\newcommand{\SearchIEEECount}{<%== sum map { $dataset{$_}{search}{ieee}{results} } keys %dataset %>}
\newcommand{\SearchCount}{<%== search_count %dataset %>}
\newcommand{\SearchSCAMCount}{<%== sum map { $dataset{$_}{search}{acm}{results} + $dataset{$_}{search}{ieee}{results} } grep { $dataset{$_}{conference} eq 'SCAM' } keys %dataset %>}
\newcommand{\SearchASECount}{<%== sum map { $dataset{$_}{search}{acm}{results} + $dataset{$_}{search}{ieee}{results} } grep { $dataset{$_}{conference} eq 'ASE' } keys %dataset %>}
\newcommand{\SearchUniqueCount}{<%== search_unique_count %dataset %>}
\newcommand{\SearchUniqueSCAMCount}{<%== scalar uniq map { keys %{ $dataset{$_}{references} } } grep { $dataset{$_}{conference} eq 'SCAM' } keys %dataset %>}
\newcommand{\SearchUniqueASECount}{<%== scalar uniq map { keys %{ $dataset{$_}{references} } } grep { $dataset{$_}{conference} eq 'ASE' } keys %dataset %>}
\newcommand{\ScreeningCount}{<%== scalar @mentions %>}
% my @mentions_scam = ();
% foreach my $k (keys %dataset) {
%   if ($dataset{$k}{conference} eq 'SCAM') {
%     foreach my $id (keys %{ $dataset{$k}{references} }) {
%       if ($dataset{$k}{references}{$id}{is_software_mentioned} eq 'yes') {
%         push @mentions_scam, $id;
%       }
%     }
%   }
% }
\newcommand{\ScreeningSCAMCount}{<%== scalar @mentions_scam %>}
\newcommand{\ScreeningUniqueCount}{<%== screening_unique_count %dataset %>}
\newcommand{\ScreeningUniqueSCAMCount}{<%== scalar uniq @mentions_scam %>}
\newcommand{\MentionsCount}{<%== mentions_count %dataset %>}
\newcommand{\CiteCount}{<%== cite_count %dataset %>}
\newcommand{\UseCount}{<%== use_count %dataset %>}
\newcommand{\ContributeCount}{<%== contribute_count %dataset %>}
\newcommand{\CiteSCAMCount}{<%== sum map { count_mentions_by_type('cite', %{ $dataset{$_}{references} }) } grep { $dataset{$_}{conference} eq 'SCAM' } keys %dataset %>}
\newcommand{\UseSCAMCount}{<%== sum map { count_mentions_by_type('use', %{ $dataset{$_}{references} }) } grep { $dataset{$_}{conference} eq 'SCAM' } keys %dataset %>}
\newcommand{\SoftwareSCAMUseCount}{<%== count_software_mentioned_by_type_and_conf 'use', 'SCAM', %dataset %>}
\newcommand{\SoftwareUseCount}{<%== count_software_mentioned_by_type 'use', %dataset %>}
\newcommand{\ContributeSCAMCount}{<%== sum map { count_mentions_by_type('contribute', %{ $dataset{$_}{references} }) } grep { $dataset{$_}{conference} eq 'SCAM' } keys %dataset %>}
\newcommand{\CiteASECount}{<%== sum map { count_mentions_by_type('cite', %{ $dataset{$_}{references} }) } grep { $dataset{$_}{conference} eq 'ASE' } keys %dataset %>}
\newcommand{\UseASECount}{<%== sum map { count_mentions_by_type('use', %{ $dataset{$_}{references} }) } grep { $dataset{$_}{conference} eq 'ASE' } keys %dataset %>}
\newcommand{\ContributeASECount}{<%== sum map { count_mentions_by_type('contribute', %{ $dataset{$_}{references} }) } grep { $dataset{$_}{conference} eq 'ASE' } keys %dataset %>}
\newcommand{\SearchUniqueMean}{<%== sprintf("%.1f", scalar(keys %references) / scalar(keys %dataset)) %>}
\newcommand{\ScreeningMean}{<%== sprintf("%.1f", scalar(@mentions) / scalar(keys %dataset)) %>}
\newcommand{\ScreeningSCAMMean}{<%== sprintf("%.1f", scalar(@mentions) / scalar(grep { $dataset{$_}{conference} eq 'SCAM' } keys %dataset)) %>}
\newcommand{\ScreeningASEMean}{<%== sprintf("%.1f", scalar(@mentions) / scalar(grep { $dataset{$_}{conference} eq 'ASE' } keys %dataset)) %>}
\newcommand{\ScreeningUniqueMean}{<%== sprintf("%.1f", scalar(uniq @mentions) / scalar(keys %dataset)) %>}
\newcommand{\ScreeningUniqueSCAMMean}{<%== sprintf("%.1f", scalar(uniq @mentions) / scalar(grep { $dataset{$_}{conference} eq 'SCAM' } keys %dataset)) %>}
\newcommand{\ScreeningUniqueASEMean}{<%== sprintf("%.1f", scalar(uniq @mentions) / scalar(grep { $dataset{$_}{conference} eq 'ASE' } keys %dataset)) %>}
\newcommand{\MentionsStudyUm}{<%== grep { $mentions_by_study{1}{$_} > 0 } keys %{ $mentions_by_study{1} } %>}
\newcommand{\MentionsStudyDois}{<%== grep { $mentions_by_study{2}{$_} > 0 } keys %{ $mentions_by_study{2} } %>}
\newcommand{\MentionsStudyDoisASE}{<%== grep { $mentions_by_study{2}{$_} > 0 } grep { $dataset{$_}{conference} eq 'ASE' } keys %{ $mentions_by_study{2} } %>}
\newcommand{\MentionsStudyDoisSCAM}{<%== grep { $mentions_by_study{2}{$_} > 0 } grep { $dataset{$_}{conference} eq 'SCAM' } keys %{ $mentions_by_study{2} } %>}
\newcommand{\SoftwareNotMentionedCount}{<%== keys(%dataset) - grep({ $mentions_by_study{2}{$_} > 0 } keys %{ $mentions_by_study{2} }) %>}
\newcommand{\SoftwareNotMentionedSCAMCount}{<%== (grep { $dataset{$_}{conference} eq 'SCAM' } keys %dataset) - grep({ $mentions_by_study{2}{$_} > 0 } grep { $dataset{$_}{conference} eq 'SCAM' } keys %{ $mentions_by_study{2} }) %>}
\newcommand{\ContributeStudyDoisCount}{<%== sum map { $contribute_study2{$_} } keys %contribute_study2 %>}
\newcommand{\ContributeStudyDoisSCAMCount}{<%== sum map { $contribute_study2{$_} } grep { $dataset{$_}{conference} eq 'SCAM' } keys %contribute_study2 %>}
\newcommand{\ContributeStudyDoisSoftware}{<%== grep { $contribute_study2{$_} > 0 } keys %contribute_study2 %>}
\newcommand{\ContributeStudyDoisSoftwareSCAM}{<%== grep { $contribute_study2{$_} > 0 } grep { $dataset{$_}{conference} eq 'SCAM' } keys %contribute_study2 %>}
\newcommand{\SoftwareNotFoundOnSearch}{<%== grep { ($dataset{$_}{search}{acm}{results} + $dataset{$_}{search}{ieee}{results}) == 0 } keys %dataset %>}
\newcommand{\SoftwareNotFoundOnSearchSCAM}{<%== grep { ($dataset{$_}{search}{acm}{results} + $dataset{$_}{search}{ieee}{results}) == 0 } grep { $dataset{$_}{conference} eq 'SCAM' } keys %dataset %>}
%= "\% dados do estudo3"
% my %releases = (total => 0, available => 0, projects => 0, projects_analized => 0);
% my @years = ();
% foreach my $k (keys %dataset) {
%   $releases{total} += @{ $dataset{$k}{releases}{versions} };
%   if ($dataset{$k}{features}{source_code} ne 'undefined') {
%     $releases{available} += grep { $_->{source} !~ m/unavailable|unknown/ } @{ $dataset{$k}{releases}{versions} };
%   }
%   $releases{metrics} += keys %{ $dataset{$k}{metrics} };
%   if (keys %{ $dataset{$k}{metrics} } > 0) {
%     $releases{projects_analized}++;
%   }
%   if (@{ $dataset{$k}{releases}{versions} }) {
%     $releases{projects}++;
%   }
%   push @years, map { $_->{released_at} =~ /^(\d{4})/ ? $1 : undef } @{ $dataset{$k}{releases}{versions} };
% }
% @years = uniq sort grep { $_ } @years;
\newcommand{\ReleasesCount}{<%== $releases{total} %>}
\newcommand{\ReleasesAvailableCount}{<%== $releases{available} %>}
\newcommand{\ReleasesMetricsCount}{<%== $releases{metrics} %>}
\newcommand{\ProjectsWithReleasesCount}{<%== $releases{projects} %>}
\newcommand{\ProjectsAnalizedCount}{<%== $releases{projects_analized} %>}
\newcommand{\ReleasesYearFirst}{<%== $years[0] %>}
\newcommand{\ReleasesYearLast}{<%== $years[-1] %>}
%# vim: filetype=epl
