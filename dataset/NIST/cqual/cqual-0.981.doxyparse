file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cqual/cqual-0.981/examples/linux-lock.c
module linux-lock.c
   macro definition SPIN_LOCK_UNLOCKED in line 5
      protection public
   macro definition spin_lock in line 6
      protection public
   macro definition spin_unlock in line 7
      protection public
   variable rtc_lock in line 9
      protection public
   function main(void) in line 11
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses variable rtc_lock defined in linux-lock.c
      uses macro definition spin_lock defined in linux-lock.c
      uses macro definition spin_unlock defined in linux-lock.c
   variable spinlock_t::lock in line 2
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cqual/cqual-0.981/examples/linux-lock2.c
module linux-lock2.c
   macro definition SPIN_LOCK_UNLOCKED in line 5
      protection public
   macro definition spin_lock in line 6
      protection public
   macro definition spin_unlock in line 7
      protection public
   variable rtc_lock in line 9
      protection public
   function bar(void) in line 11
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses macro definition spin_lock defined in linux-lock2.c
      uses variable rtc_lock defined in linux-lock2.c
      uses macro definition spin_unlock defined in linux-lock2.c
   function foo(void) in line 16
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses macro definition spin_lock defined in linux-lock2.c
      uses variable rtc_lock defined in linux-lock2.c
      uses function bar(void) defined in linux-lock2.c
      uses macro definition spin_unlock defined in linux-lock2.c
   variable spinlock_t::lock in line 2
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cqual/cqual-0.981/examples/lock.c
module lock.c
   typedef lock_t in line 1
      protection public
   variable lock in line 3
      protection public
   function main(void) in line 5
      protection public
      9 lines of code
      1 parameters
      1 conditional paths
      uses variable lock defined in lock.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cqual/cqual-0.981/examples/lock2.c
module lock2.c
   typedef lock_t in line 1
      protection public
   variable lock in line 3
      protection public
   function main(void) in line 5
      protection public
      9 lines of code
      1 parameters
      1 conditional paths
      uses variable lock defined in lock2.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cqual/cqual-0.981/examples/lock3.c
module lock3.c
   variable rtc_lock in line 13
      protection public
   function spin_lock((null)) in line 5
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
      uses variable lock defined in lock.c
   function spin_unlock((null)) in line 9
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
      uses variable lock defined in lock.c
   function main(void) in line 15
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses variable rtc_lock defined in lock3.c
      uses function spin_lock((null)) defined in lock3.c
      uses function spin_unlock((null)) defined in lock3.c
   variable spinlock_t::lock in line 2
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cqual/cqual-0.981/examples/rcs1.c
module rcs1.c
   function _op_deref((null)) in line 1
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function printf(const char *$NONYEAR,(null)) in line 3
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function sprintf(char *,const char *,(null)) in line 4
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function date2str(char *$RCSYEAR,char *$NONYEAR) in line 6
      protection public
      10 lines of code
      2 parameters
      2 conditional paths
      uses function sprintf(char *,const char *,(null)) defined in rcs1.c
   function main(void) in line 16
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses function printf(const char *$NONYEAR,(null)) defined in rcs1.c
      uses function date2str(char *$RCSYEAR,char *$NONYEAR) defined in rcs1.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cqual/cqual-0.981/examples/rcs2.c
module rcs2.c
   function _op_deref((null)) in line 1
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function printf(const char *$NONYEAR,(null)) in line 3
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function sprintf(char *,const char *,(null)) in line 4
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function date2str(char *$RCSYEAR,char *$NONYEAR) in line 6
      protection public
      10 lines of code
      2 parameters
      2 conditional paths
      uses function sprintf(char *,const char *,(null)) defined in rcs2.c
   function main(void) in line 16
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses function printf(const char *$NONYEAR,(null)) defined in rcs2.c
      uses function date2str(char *$RCSYEAR,char *$NONYEAR) defined in rcs2.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cqual/cqual-0.981/examples/rcs3.c
module rcs3.c
   function _op_deref((null)) in line 1
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function printf(const char *,(null)) in line 3
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function sprintf(char *,const char *,(null)) in line 4
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function date2str(char *$RCSYEAR,char *$NONYEAR) in line 6
      protection public
      10 lines of code
      2 parameters
      2 conditional paths
      uses function sprintf(char *,const char *,(null)) defined in rcs3.c
   function main(void) in line 16
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses function printf(const char *,(null)) defined in rcs3.c
      uses function date2str(char *$RCSYEAR,char *$NONYEAR) defined in rcs3.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cqual/cqual-0.981/examples/taint-cast.c
module taint-cast.c
   function main(void) in line 1
      protection public
      9 lines of code
      1 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cqual/cqual-0.981/examples/taint-const-subtyping.c
module taint-const-subtyping.c
   function f(char *) in line 1
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function g(const char *) in line 2
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function main(void) in line 4
      protection public
      13 lines of code
      1 parameters
      1 conditional paths
      uses function f(char *) defined in taint-const-subtyping.c
      uses function g(const char *) defined in taint-const-subtyping.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cqual/cqual-0.981/examples/taint-poly.c
module taint-poly.c
   function strcat((null),(null)) in line 1
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function main(void) in line 3
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses function strcat((null),(null)) defined in taint-poly.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cqual/cqual-0.981/examples/taint-varargs.c
module taint-varargs.c
   function sprintf((null),(null),(null)) in line 1
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function main(void) in line 3
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses function sprintf((null),(null),(null)) defined in taint-varargs.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cqual/cqual-0.981/examples/taint0.c
module taint0.c
   function getenv(const char *) in line 1
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function printf(const char *,...) in line 2
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function main(void) in line 4
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses function getenv(const char *) defined in taint0.c
      uses function printf(const char *,...) defined in taint0.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cqual/cqual-0.981/examples/taint1.c
module taint1.c
   function getenv(const char *) in line 1
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function printf((null),...) in line 2
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function main(void) in line 4
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses function getenv(const char *) defined in taint1.c
      uses function printf((null),...) defined in taint1.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cqual/cqual-0.981/examples/taint2.c
module taint2.c
   function getenv(const char *) in line 1
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function printf((null),...) in line 2
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function f3(char *) in line 4
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function f2(char *) in line 5
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses function f3(char *) defined in taint2.c
   function f1(char *) in line 6
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses function f2(char *) defined in taint2.c
   function main(void) in line 8
      protection public
      9 lines of code
      1 parameters
      1 conditional paths
      uses function getenv(const char *) defined in taint2.c
      uses function f1(char *) defined in taint2.c
      uses function printf((null),...) defined in taint2.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cqual/cqual-0.981/examples/y2k1.c
module y2k1.c
   function printf(const char *,...) in line 1
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function pr_year(char *) in line 2
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
      uses function printf(const char *,...) defined in y2k1.c
   function main(void) in line 5
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function pr_year(char *) defined in y2k1.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cqual/cqual-0.981/examples/y2k2.c
module y2k2.c
   function printf(const char *,...) in line 1
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function pr_year(char *$YY) in line 2
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
      uses function printf(const char *,...) defined in y2k2.c
   function main(void) in line 5
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function pr_year(char *$YY) defined in y2k2.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cqual/cqual-0.981/examples/y2k3.c
module y2k3.c
   function main(void) in line 1
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cqual/cqual-0.981/examples/y2k4.c
module y2k4.c
   function _op_deref((null)) in line 1
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function main(void) in line 3
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cqual/cqual-0.981/src/alloca.c
module alloca.c
   variable alloca_region in line 23
      protection public
   function alloca(size_t) in line 24
      protection public
      15 lines of code
      1 parameters
      4 conditional paths
      uses variable alloca_region defined in alloca.c
      uses function newregion(void) defined in regions.c
      uses function deleteregion(region) defined in regions.c
      uses function typed_ralloc(region,size_t,type_t) defined in regions.c
      uses macro definition NULL defined in config.h
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cqual/cqual-0.981/src/analyze.c
module analyze.c
   macro definition is_op_name in line 526
      protection public
   macro definition exists_op_kind in line 528
      protection public
   enumeration context in line 33
      protection public
   enumeration @0 in line 109
      protection public
   typedef einfo in line 40
      protection public
   typedef sinfo in line 44
      protection public
   typedef dinfo in line 50
      protection public
   typedef operator in line 439
      protection public
   variable globals in line 99
      protection public
   variable global_effect in line 101
      protection public
   variable global_env in line 103
      protection public
   variable cur_cs in line 105
      protection public
   variable definitions in line 106
      protection public
   variable state in line 109
      protection public
   variable dummy_einfo in line 426
      protection public
   variable operators in line 426
      protection public
   variable fopen_count in line 3246
      protection public
   variable alloc_count in line 3247
      protection public
   variable have_stream_quals in line 3248
      protection public
   variable have_sleepy_quals in line 3249
      protection public
   variable open_unchecked_qual in line 3250
      protection public
   variable read_unchecked_qual in line 3251
      protection public
   variable write_unchecked_qual in line 3252
      protection public
   variable readwrite_unchecked_qual in line 3253
      protection public
   variable open_qual in line 3254
      protection public
   variable read_qual in line 3255
      protection public
   variable write_qual in line 3256
      protection public
   variable readwrite_qual in line 3257
      protection public
   variable closed_qual in line 3258
      protection public
   variable enabled_qual in line 3259
      protection public
   variable disabled_qual in line 3260
      protection public
   variable readonly_qual in line 3261
      protection public
   variable interrupt_status_qtype in line 3262
      protection public
   enumvalue lpos in line 33
      protection public
   enumvalue rpos in line 33
      protection public
   enumvalue apos in line 33
      protection public
   enumvalue state_orig in line 109
      protection public
   enumvalue state_init in line 109
      protection public
   enumvalue state_finish in line 109
      protection public
   function reset_operators(void) in line 52
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses variable operators defined in analyze.c
      uses variable operator::name defined in analyze.c
      uses variable einfo::qt defined in flow.c
      uses macro definition NULL defined in config.h
   function init_magic(void) in line 53
      protection public
      27 lines of code
      1 parameters
      1 conditional paths
      uses variable fopen_count defined in analyze.c
      uses variable alloc_count defined in analyze.c
      uses variable open_unchecked_qual defined in analyze.c
      uses function find_qual(const char *) defined in quals.c
      uses variable read_unchecked_qual defined in analyze.c
      uses variable write_unchecked_qual defined in analyze.c
      uses variable readwrite_unchecked_qual defined in analyze.c
      uses variable open_qual defined in analyze.c
      uses variable read_qual defined in analyze.c
      uses variable write_qual defined in analyze.c
      uses variable readwrite_qual defined in analyze.c
      uses variable closed_qual defined in analyze.c
      uses variable have_stream_quals defined in analyze.c
      uses variable enabled_qual defined in analyze.c
      uses variable disabled_qual defined in analyze.c
      uses variable have_sleepy_quals defined in analyze.c
      uses variable readonly_qual defined in analyze.c
   function add_declarator_overlay(declarator,qtype) in line 55
      protection public
      7 lines of code
      2 parameters
      1 conditional paths
      uses function get_id_declarator(declarator) defined in analyze.c
      uses function pam_add_overlay_file(location,const char *,qtype) defined in pam.c
      uses variable AST_identifier_declarator::loc defined in AST_defs.h
      uses variable cstring::data defined in cstring.h
      uses variable einfo::qt defined in flow.c
   function analyze(declaration) in line 56
      protection public
      26 lines of code
      1 parameters
      1 conditional paths
      uses function dd_new_list(region) defined in dd_list.c
      uses variable parse_region defined in c-parse.h
      uses variable interrupt_status_qtype defined in analyze.c
      uses macro definition NULL defined in config.h
      uses function unparse_start(FILE *) defined in analyze.c
      uses function pam_add_file(const char *) defined in pam.c
      uses variable AST_declaration::loc defined in AST_defs.h
      uses variable Location::filename defined in location.h
      uses function AST_set_parents(node) defined in AST.c
      uses macro definition CAST defined in AST.h
      uses macro definition scan_declaration defined in AST_defs.h
      uses function analyze_declaration(declaration,effect,dd_list) defined in analyze.c
      uses variable global_env defined in analyze.c
      uses function mkleq_effect(effect,effect) defined in effect.c
      uses variable dinfo::eff defined in flow.c
      uses variable global_effect defined in analyze.c
      uses variable dinfo::alocs defined in flow.c
   function analyze_declaration(declaration,effect,dd_list) in line 57
      protection public
      365 lines of code
      3 parameters
      41 conditional paths
      uses variable AST_declaration::kind defined in AST_defs.h
      uses enumvalue kind_asm_decl defined in AST_types.h
      uses function mkdinfo(effect,effect) defined in analyze.c
      uses variable effect_empty defined in effect.c
      uses enumvalue kind_data_decl defined in AST_types.h
      uses macro definition CAST defined in AST.h
      uses variable einfo::eff defined in flow.c
      uses macro definition scan_declaration defined in AST_defs.h
      uses variable AST_data_decl::decls defined in AST_defs.h
      uses function effect_union(effect,effect) defined in effect.c
      uses variable dinfo::alocs defined in flow.c
      uses variable dinfo::eff defined in flow.c
      uses variable AST_data_decl::modifiers defined in AST_defs.h
      uses macro definition is_tag_ref defined in AST_types.h
      uses function analyze_tag_ref(tag_ref) defined in analyze.c
      uses enumvalue kind_variable_decl defined in AST_types.h
      uses function root_ddecl(data_declaration) defined in analyze.c
      uses variable AST_variable_decl::ddecl defined in AST_defs.h
      uses macro definition is_op_name defined in analyze.c
      uses variable data_declaration::name defined in decls.h
      uses function analyze_operator_declaration(variable_decl) defined in analyze.c
      uses variable data_declaration::kind defined in decls.h
      uses enumvalue decl_typedef defined in decls.h
      uses function type_enum(type) defined in types.c
      uses variable data_declaration::type defined in decls.h
      uses function type_tag(type) defined in types.c
      uses variable tag_declaration::ast defined in decls.h
      uses function __add_ddecl_qtype(data_declaration,bool) defined in analyze.c
      uses macro definition TRUE defined in bool.h
      uses enumvalue decl_function defined in decls.h
      uses variable data_declaration::isexternalscope defined in decls.h
      uses variable data_declaration::vtype defined in decls.h
      uses variable data_declaration::qtype defined in decls.h
      uses function mkleq_effect(effect,effect) defined in effect.c
      uses function alocs_qtype(qtype) defined in qtype.c
      uses variable global_env defined in analyze.c
      uses function defn_effect_qtype(qtype) defined in qtype.c
      uses variable global_effect defined in analyze.c
      uses function restrict_variable_decl(variable_decl,bool) defined in analyze.c
      uses function mknin_effect(location,effect,effect) defined in effect.c
      uses variable AST_variable_decl::loc defined in AST_defs.h
      uses variable AST_variable_decl::rinfo defined in AST_defs.h
      uses variable Rinfo::flocs defined in analyze.h
      uses variable flag_flow_sensitive defined in flags.h
      uses variable Rinfo::flocs_alloc defined in analyze.h
      uses variable Rinfo::rlocs defined in analyze.h
      uses variable Rinfo::rlocs_alloc defined in analyze.h
      uses function enforce_var_decl_readonly(variable_decl,effect) defined in analyze.c
      uses variable AST_variable_decl::arg1 defined in AST_defs.h
      uses variable Rinfo::isglobal defined in analyze.h
      uses variable Rinfo::fqtype defined in analyze.h
      uses function qtype_array(qtype) defined in qtype.c
      uses function points_to_qtype(qtype) defined in qtype.c
      uses function analyze_init(location,qtype,expression,effect,dd_list) defined in analyze.c
      uses variable AST_variable_decl::arg1_eff defined in AST_defs.h
      uses variable sinfo::eff defined in flow.c
      uses variable Rinfo::rqtype defined in analyze.h
      uses variable data_declaration::alias defined in decls.h
      uses macro definition NULL defined in config.h
      uses function hash_table_lookup(hash_table,hash_key,hash_data *) defined in hash.c
      uses variable globals defined in analyze.c
      uses variable hash_key defined in hash.h
      uses function unify_qtype(location,qtype,qtype) defined in qtype.c
      uses variable have_sleepy_quals defined in analyze.c
      uses variable interrupt_status_qtype defined in analyze.c
      uses variable flag_pam_mode defined in flags.h
      uses variable flag_print_results defined in flags.h
      uses function add_declarator_overlay(declarator,qtype) defined in analyze.c
      uses variable AST_variable_decl::declarator defined in AST_defs.h
      uses enumvalue kind_function_decl defined in AST_types.h
      uses variable AST_function_decl::ddecl defined in AST_defs.h
      uses function dd_add_last(region,dd_list,void *) defined in dd_list.c
      uses variable parse_region defined in c-parse.h
      uses variable definitions defined in analyze.c
      uses variable data_declaration::global defined in decls.h
      uses variable data_declaration::in_prelude defined in decls.h
      uses function qtype_scheme(qtype) defined in qtype.c
      uses function report_qerror(location,severity,const char *,...) defined in analyze.c
      uses variable AST_function_decl::loc defined in AST_defs.h
      uses enumvalue sev_warn defined in qerror.h
      uses variable AST_function_decl::declarator defined in AST_defs.h
      uses variable current_function_decl defined in analyze.h
      uses function return_qtype(qtype) defined in qtype.c
      uses function effect_qtype(qtype) defined in qtype.c
      uses function qtypelist_scan(qtypelist,qtypelist_scanner *) defined in qtype.c
      uses function arg_qtypes(qtype) defined in qtype.c
      uses function is_void_parms(declaration) defined in analyze.c
      uses variable AST_function_decl::fdeclarator defined in AST_defs.h
      uses variable AST_function_declarator::parms defined in AST_defs.h
      uses macro definition is_ellipsis_decl defined in AST_types.h
      uses variable AST_variable_decl::next defined in AST_defs.h
      uses variable AST_oldidentifier_decl::ddecl defined in AST_defs.h
      uses macro definition FALSE defined in bool.h
      uses function qtypelist_next(qtypelist_scanner *) defined in qtype.c
      uses variable AST_declaration::loc defined in AST_defs.h
      uses enumvalue sev_err defined in qerror.h
      uses function pam_add_overlay_file(location,const char *,qtype) defined in pam.c
      uses variable AST_oldidentifier_decl::loc defined in AST_defs.h
      uses variable AST_oldidentifier_decl::cstring defined in AST_defs.h
      uses variable cstring::data defined in cstring.h
      uses macro definition is_compound_stmt defined in AST_types.h
      uses variable AST_function_decl::stmt defined in AST_defs.h
      uses function analyze_statement(statement,effect,dd_list) defined in analyze.c
      uses function enforce_restricts(declaration,effect,qtype) defined in analyze.c
      uses function enforce_readonly(declaration,effect) defined in analyze.c
      uses variable AST_function_decl::scope_env defined in AST_defs.h
      uses function filter_effects(qtype,effect) defined in analyze.c
      uses function mark_effect_interesting(effect) defined in effect.c
      uses function effect_inter(effect,effect) defined in effect.c
      uses enumvalue kind_extension_decl defined in AST_types.h
      uses variable AST_extension_decl::decl defined in AST_defs.h
      uses macro definition fail_loc defined in cqual.h
   function analyze_operator_declaration(variable_decl) in line 59
      protection public
      41 lines of code
      1 parameters
      6 conditional paths
      uses function root_ddecl(data_declaration) defined in analyze.c
      uses variable AST_variable_decl::ddecl defined in AST_defs.h
      uses macro definition is_op_name defined in analyze.c
      uses variable data_declaration::name defined in decls.h
      uses variable data_declaration::isexternalscope defined in decls.h
      uses function report_qerror(location,severity,const char *,...) defined in analyze.c
      uses variable AST_variable_decl::loc defined in AST_defs.h
      uses enumvalue sev_err defined in qerror.h
      uses function mkdinfo(effect,effect) defined in analyze.c
      uses variable effect_empty defined in effect.c
      uses function add_global_ddecl_qtype(data_declaration,bool) defined in analyze.c
      uses macro definition TRUE defined in bool.h
      uses function add_op_signature(operator,qtype,location) defined in analyze.c
      uses variable data_declaration::qtype defined in decls.h
      uses variable flag_pam_mode defined in flags.h
      uses variable flag_print_results defined in flags.h
      uses variable data_declaration::kind defined in decls.h
      uses enumvalue decl_typedef defined in decls.h
      uses function add_declarator_overlay(declarator,qtype) defined in analyze.c
      uses variable AST_variable_decl::declarator defined in AST_defs.h
   function analyze_tag_ref(tag_ref) in line 60
      protection public
      29 lines of code
      1 parameters
      1 conditional paths
      uses macro definition is_struct_ref defined in AST_types.h
      uses macro definition is_union_ref defined in AST_types.h
      uses macro definition scan_declaration defined in AST_defs.h
      uses variable AST_tag_ref::fields defined in AST_defs.h
      uses macro definition CAST defined in AST.h
      uses function root_ddecl(data_declaration) defined in analyze.c
      uses variable AST_enumerator::ddecl defined in AST_defs.h
      uses variable data_declaration::qtype defined in decls.h
      uses function __add_ddecl_qtype(data_declaration,bool) defined in analyze.c
      uses macro definition FALSE defined in bool.h
      uses variable flag_pam_mode defined in flags.h
      uses variable flag_print_results defined in flags.h
      uses function pam_add_overlay_file(location,const char *,qtype) defined in pam.c
      uses variable AST_enumerator::loc defined in AST_defs.h
      uses variable AST_enumerator::cstring defined in AST_defs.h
      uses variable cstring::data defined in cstring.h
   function analyze_init(location,qtype,expression,effect,dd_list) in line 61
      protection public
      131 lines of code
      5 parameters
      12 conditional paths
      uses variable AST_expression::kind defined in AST_defs.h
      uses enumvalue kind_string defined in AST_types.h
      uses function qtype_string(qtype) defined in qtype.c
      uses function analyze_expression(expression,context,effect,dd_list) defined in analyze.c
      uses enumvalue rpos defined in analyze.c
      uses function init_string(location,qtype,qtype) defined in analyze.c
      uses variable AST_expression::loc defined in AST_defs.h
      uses variable einfo::qt defined in flow.c
      uses function report_qerror(location,severity,const char *,...) defined in analyze.c
      uses enumvalue sev_err defined in qerror.h
      uses function mksinfo(effect) defined in analyze.c
      uses variable einfo::eff defined in flow.c
      uses enumvalue kind_init_list defined in AST_types.h
      uses function qtype_array(qtype) defined in qtype.c
      uses macro definition CAST defined in AST.h
      uses function array_of_qtype(qtype) defined in qtype.c
      uses variable effect_empty defined in effect.c
      uses macro definition scan_expression defined in AST_defs.h
      uses variable AST_init_list::args defined in AST_defs.h
      uses enumvalue kind_init_index defined in AST_types.h
      uses variable AST_init_index::arg1 defined in AST_defs.h
      uses function effect_union(effect,effect) defined in effect.c
      uses variable AST_init_index::arg2 defined in AST_defs.h
      uses variable AST_init_index::init_expr defined in AST_defs.h
      uses variable sinfo::eff defined in flow.c
      uses function qtype_struct(qtype) defined in qtype.c
      uses function qtype_union(qtype) defined in qtype.c
      uses macro definition NULL defined in config.h
      uses function field_scan(qtype,field_scanner *) defined in qtype.c
      uses enumvalue kind_init_field defined in AST_types.h
      uses function field_scan_at(qtype,cstring,field_scanner *) defined in qtype.c
      uses variable AST_init_field::word1 defined in AST_defs.h
      uses variable AST_word::cstring defined in AST_defs.h
      uses variable AST_init_field::init_expr defined in AST_defs.h
      uses function field_next(field_scanner *) defined in qtype.c
      uses function points_to_qtype(qtype) defined in qtype.c
      uses function mkleq_assign_convert(location,qtype,qtype) defined in qtype.c
   function analyze_statement(statement,effect,dd_list) in line 63
      protection public
      378 lines of code
      3 parameters
      29 conditional paths
      uses variable AST_statement::kind defined in AST_defs.h
      uses enumvalue kind_asm_stmt defined in AST_types.h
      uses function mksinfo(effect) defined in analyze.c
      uses variable effect_empty defined in effect.c
      uses enumvalue kind_compound_stmt defined in AST_types.h
      uses macro definition CAST defined in AST.h
      uses variable einfo::eff defined in flow.c
      uses function dd_copy(region,dd_list) defined in dd_list.c
      uses variable parse_region defined in c-parse.h
      uses variable AST_compound_stmt::enclosing_cs defined in AST_defs.h
      uses variable cur_cs defined in analyze.c
      uses macro definition scan_declaration defined in AST_defs.h
      uses variable AST_compound_stmt::decls defined in AST_defs.h
      uses variable AST_declaration::kind defined in AST_defs.h
      uses enumvalue kind_asm_decl defined in AST_types.h
      uses function analyze_declaration(declaration,effect,dd_list) defined in analyze.c
      uses function effect_union(effect,effect) defined in effect.c
      uses variable dinfo::eff defined in flow.c
      uses variable dinfo::alocs defined in flow.c
      uses variable AST_compound_stmt::scope_env defined in AST_defs.h
      uses function mark_effect_interesting(effect) defined in effect.c
      uses macro definition scan_statement defined in AST_defs.h
      uses variable AST_compound_stmt::stmts defined in AST_defs.h
      uses variable sinfo::eff defined in flow.c
      uses function enforce_restricts(declaration,effect,qtype) defined in analyze.c
      uses macro definition NULL defined in config.h
      uses function enforce_readonly(declaration,effect) defined in analyze.c
      uses variable AST_compound_stmt::filter_env defined in AST_defs.h
      uses function filter_effects(qtype,effect) defined in analyze.c
      uses function effect_inter(effect,effect) defined in effect.c
      uses enumvalue kind_if_stmt defined in AST_types.h
      uses function analyze_expression(expression,context,effect,dd_list) defined in analyze.c
      uses variable AST_if_stmt::condition defined in AST_defs.h
      uses enumvalue rpos defined in analyze.c
      uses variable AST_if_stmt::stmt1 defined in AST_defs.h
      uses variable AST_if_stmt::stmt2 defined in AST_defs.h
      uses enumvalue kind_labeled_stmt defined in AST_types.h
      uses variable AST_labeled_stmt::label defined in AST_defs.h
      uses variable AST_label::enclosing_cs defined in AST_defs.h
      uses variable AST_labeled_stmt::stmt defined in AST_defs.h
      uses enumvalue kind_expression_stmt defined in AST_types.h
      uses variable AST_expression_stmt::arg1 defined in AST_defs.h
      uses enumvalue kind_while_stmt defined in AST_types.h
      uses variable AST_conditional_stmt::enclosing_cs defined in AST_defs.h
      uses variable AST_conditional_stmt::condition defined in AST_defs.h
      uses variable AST_conditional_stmt::stmt defined in AST_defs.h
      uses enumvalue kind_dowhile_stmt defined in AST_types.h
      uses function definite_zero(expression) defined in constants.c
      uses enumvalue kind_switch_stmt defined in AST_types.h
      uses variable AST_switch_stmt::enclosing_cs defined in AST_defs.h
      uses variable AST_switch_stmt::condition defined in AST_defs.h
      uses variable AST_switch_stmt::stmt defined in AST_defs.h
      uses enumvalue kind_for_stmt defined in AST_types.h
      uses variable AST_for_stmt::enclosing_cs defined in AST_defs.h
      uses variable AST_for_stmt::arg1 defined in AST_defs.h
      uses variable AST_for_stmt::arg2 defined in AST_defs.h
      uses variable AST_for_stmt::stmt defined in AST_defs.h
      uses variable AST_for_stmt::arg3 defined in AST_defs.h
      uses enumvalue kind_return_stmt defined in AST_types.h
      uses function cur_return_qtype(void) defined in analyze.c
      uses variable AST_return_stmt::arg1 defined in AST_defs.h
      uses function mkleq_assign_convert(location,qtype,qtype) defined in qtype.c
      uses variable AST_return_stmt::loc defined in AST_defs.h
      uses variable einfo::qt defined in flow.c
      uses function report_qerror(location,severity,const char *,...) defined in analyze.c
      uses enumvalue sev_err defined in qerror.h
      uses enumvalue kind_computed_goto_stmt defined in AST_types.h
      uses variable AST_computed_goto_stmt::arg1 defined in AST_defs.h
      uses enumvalue kind_break_stmt defined in AST_types.h
      uses variable AST_break_stmt::enclosing_cs defined in AST_defs.h
      uses enumvalue kind_continue_stmt defined in AST_types.h
      uses variable AST_continue_stmt::enclosing_cs defined in AST_defs.h
      uses enumvalue kind_goto_stmt defined in AST_types.h
      uses variable AST_goto_stmt::enclosing_cs defined in AST_defs.h
      uses enumvalue kind_empty_stmt defined in AST_types.h
      uses enumvalue kind_change_type_stmt defined in AST_types.h
      uses variable AST_change_type_stmt::arg1 defined in AST_defs.h
      uses enumvalue lpos defined in analyze.c
      uses function qtype_mklhs_nonconst(location,qtype) defined in analyze.c
      uses variable AST_change_type_stmt::loc defined in AST_defs.h
      uses function type_to_qtype(type,const char *,location) defined in qtype.c
      uses variable AST_change_type_stmt::asttype defined in AST_defs.h
      uses variable AST_asttype::type defined in AST_defs.h
      uses variable AST_change_type_stmt::qtype defined in AST_defs.h
      uses function aloc_qtype(qtype) defined in qtype.c
      uses function mark_aloc_interesting(aloc) defined in effect.c
      uses function qtype_pointer(qtype) defined in qtype.c
      uses function mkleq_qtype(location,qtype,qtype) defined in qtype.c
      uses function points_to_qtype(qtype) defined in qtype.c
      uses function effect_wr(aloc) defined in effect.c
      uses enumvalue kind_assert_type_stmt defined in AST_types.h
      uses variable AST_assert_type_stmt::arg1 defined in AST_defs.h
      uses variable AST_assert_type_stmt::asttype defined in AST_defs.h
      uses variable AST_asttype::loc defined in AST_defs.h
      uses variable AST_assert_type_stmt::qtype defined in AST_defs.h
      uses variable AST_assert_type_stmt::loc defined in AST_defs.h
      uses enumvalue kind_deep_restrict_stmt defined in AST_types.h
      uses variable AST_deep_restrict_stmt::arg1 defined in AST_defs.h
      uses function make_aloc(const char *,qtype) defined in effect.c
      uses function rstrcat(region,const char *,const char *) defined in utils.c
      uses function name_aloc(aloc) defined in effect.c
      uses macro definition ralloc defined in regions.h
      uses variable Drinfo::qtype defined in analyze.h
      uses variable Drinfo::rqtype defined in analyze.h
      uses function mkqtype_pointer(qual,qtype,aloc) defined in qtype.c
      uses function qual_qtype(qtype) defined in qtype.c
      uses variable Drinfo::effect defined in analyze.h
      uses variable Drinfo::expression defined in analyze.h
      uses variable Drinfo::location defined in analyze.h
      uses variable AST_deep_restrict_stmt::loc defined in AST_defs.h
      uses variable AST_deep_restrict_stmt::drinfo defined in AST_defs.h
      uses function mknin_effect_qtype(location,effect,qtype) defined in qtype.c
      uses function effect_rwr(aloc) defined in effect.c
      uses function mknin_effect(location,effect,effect) defined in effect.c
      uses function effect_single(aloc) defined in effect.c
      uses variable flag_flow_sensitive defined in flags.h
      uses function effect_alloc(aloc) defined in effect.c
      uses function forall_aloc_mknin_effect(location,eff_kind,effect) defined in effect.c
      uses enumvalue eff_wr defined in cqual.h
      uses enumvalue eff_alloc defined in cqual.h
      uses function dd_add_first(region,dd_list,void *) defined in dd_list.c
      uses variable AST_deep_restrict_stmt::stmt defined in AST_defs.h
      uses function forall_aloc_in_effect_mknin_effect(location,eff_kind,effect,eff_kind,effect) defined in effect.c
      uses enumvalue eff_r defined in cqual.h
      uses macro definition fail_loc defined in cqual.h
      uses variable AST_statement::loc defined in AST_defs.h
   function analyze_expression(expression,context,effect,dd_list) in line 64
      protection public
      615 lines of code
      4 parameters
      60 conditional paths
      uses macro definition dd_scan defined in dd_list.h
      uses macro definition DD_GET defined in dd_list.h
      uses function equal_expressions(expression,expression) defined in analyze.c
      uses variable Drinfo::expression defined in analyze.h
      uses enumvalue rpos defined in analyze.c
      uses function qtype_pointer(qtype) defined in qtype.c
      uses variable Drinfo::rqtype defined in analyze.h
      uses variable AST_expression::drinfo defined in AST_defs.h
      uses variable AST_expression::qtype defined in AST_defs.h
      uses function points_to_qtype(qtype) defined in qtype.c
      uses function mkeinfo(qtype,effect,bool) defined in analyze.c
      uses function effect_r(aloc) defined in effect.c
      uses function aloc_qtype(qtype) defined in qtype.c
      uses macro definition FALSE defined in bool.h
      uses variable effect_empty defined in effect.c
      uses macro definition NULL defined in config.h
      uses variable AST_expression::kind defined in AST_defs.h
      uses enumvalue kind_comma defined in AST_types.h
      uses macro definition CAST defined in AST.h
      uses variable einfo::eff defined in flow.c
      uses macro definition scan_expression defined in AST_defs.h
      uses variable AST_comma::arg1 defined in AST_defs.h
      uses variable AST_expression::next defined in AST_defs.h
      uses function effect_union(effect,effect) defined in effect.c
      uses variable einfo::qt defined in flow.c
      uses macro definition fail_loc defined in cqual.h
      uses variable AST_comma::loc defined in AST_defs.h
      uses enumvalue kind_sizeof_type defined in AST_types.h
      uses function mkqtype_size_t(qual) defined in qtype.c
      uses function make_qvar(const char *,location,bool) defined in quals.c
      uses variable AST_expression::loc defined in AST_defs.h
      uses enumvalue kind_alignof_type defined in AST_types.h
      uses enumvalue kind_label_address defined in AST_types.h
      uses function mkqtype_void(qual) defined in qtype.c
      uses function make_aloc(const char *,qtype) defined in effect.c
      uses function mkleq_effect(effect,effect) defined in effect.c
      uses function effect_single(aloc) defined in effect.c
      uses variable global_env defined in analyze.c
      uses function mkqtype_pointer(qual,qtype,aloc) defined in qtype.c
      uses function effect_alloc(aloc) defined in effect.c
      uses variable global_effect defined in analyze.c
      uses enumvalue kind_cast defined in AST_types.h
      uses variable AST_cast::arg1 defined in AST_defs.h
      uses variable AST_cast::asttype defined in AST_defs.h
      uses variable AST_asttype::type defined in AST_defs.h
      uses enumvalue lpos defined in analyze.c
      uses enumvalue apos defined in analyze.c
      uses function type_function(type) defined in types.c
      uses function type_array(type) defined in types.c
      uses function make_pointer_type(type) defined in types.c
      uses function type_to_qtype(type,const char *,location) defined in qtype.c
      uses variable AST_cast::loc defined in AST_defs.h
      uses variable einfo::ismalloc defined in flow.c
      uses function defn_effect_qtype(qtype) defined in qtype.c
      uses variable flag_casts_preserve defined in flags.h
      uses function type_void(type) defined in types.c
      uses function type_contains_user_quals(type) defined in types.c
      uses function mkeq_qtype_cast(location,qtype,qtype) defined in qtype.c
      uses function report_qerror(location,severity,const char *,...) defined in analyze.c
      uses enumvalue sev_err defined in qerror.h
      uses enumvalue kind_cast_list defined in AST_types.h
      uses variable AST_cast_list::type defined in AST_defs.h
      uses variable AST_cast_list::loc defined in AST_defs.h
      uses variable AST_cast_list::astqtype defined in AST_defs.h
      uses function analyze_init(location,qtype,expression,effect,dd_list) defined in analyze.c
      uses variable AST_cast_list::init_expr defined in AST_defs.h
      uses function default_conversion_qtype(qtype) defined in qtype.c
      uses variable sinfo::eff defined in flow.c
      uses enumvalue kind_conditional defined in AST_types.h
      uses variable AST_conditional::condition defined in AST_defs.h
      uses variable AST_conditional::arg1 defined in AST_defs.h
      uses variable AST_conditional::arg2 defined in AST_defs.h
      uses variable AST_conditional::type defined in AST_defs.h
      uses variable AST_conditional::loc defined in AST_defs.h
      uses function qtype_void(qtype) defined in qtype.c
      uses function mkleq_assign_convert(location,qtype,qtype) defined in qtype.c
      uses enumvalue kind_identifier defined in AST_types.h
      uses function root_ddecl(data_declaration) defined in analyze.c
      uses variable AST_identifier::ddecl defined in AST_defs.h
      uses macro definition is_op_name defined in analyze.c
      uses variable data_declaration::name defined in decls.h
      uses variable AST_identifier::loc defined in AST_defs.h
      uses function mark_used(data_declaration) defined in analyze.c
      uses variable AST_identifier::parent defined in AST_defs.h
      uses variable AST_node::kind defined in AST_defs.h
      uses enumvalue kind_function_call defined in AST_types.h
      uses function mark_address_taken(data_declaration) defined in analyze.c
      uses variable data_declaration::qtype defined in decls.h
      uses variable data_declaration::type defined in decls.h
      uses variable data_declaration::ftype defined in decls.h
      uses function __add_ddecl_qtype(data_declaration,bool) defined in analyze.c
      uses macro definition TRUE defined in bool.h
      uses function qtype_scheme(qtype) defined in qtype.c
      uses function instantiate_qtype(qtype,location) defined in qtype.c
      uses variable flag_pam_mode defined in flags.h
      uses variable flag_print_results defined in flags.h
      uses function pam_add_overlay_file(location,const char *,qtype) defined in pam.c
      uses variable data_declaration::kind defined in decls.h
      uses enumvalue decl_constant defined in decls.h
      uses variable error_qtype defined in qtype.c
      uses function put_id_in_context(location,einfo,context) defined in analyze.c
      uses enumvalue kind_compound_expr defined in AST_types.h
      uses variable AST_compound_expr::stmt defined in AST_defs.h
      uses function dd_copy(region,dd_list) defined in dd_list.c
      uses variable parse_region defined in c-parse.h
      uses variable AST_compound_stmt::enclosing_cs defined in AST_defs.h
      uses variable cur_cs defined in analyze.c
      uses variable AST_compound_stmt::id_labels defined in AST_defs.h
      uses variable AST_compound_stmt::loc defined in AST_defs.h
      uses macro definition scan_declaration defined in AST_defs.h
      uses variable AST_compound_stmt::decls defined in AST_defs.h
      uses variable AST_declaration::kind defined in AST_defs.h
      uses enumvalue kind_asm_decl defined in AST_types.h
      uses function analyze_declaration(declaration,effect,dd_list) defined in analyze.c
      uses variable dinfo::eff defined in flow.c
      uses variable dinfo::alocs defined in flow.c
      uses variable AST_compound_stmt::scope_env defined in AST_defs.h
      uses function mark_effect_interesting(effect) defined in effect.c
      uses variable AST_compound_stmt::stmts defined in AST_defs.h
      uses variable AST_statement::next defined in AST_defs.h
      uses function analyze_statement(statement,effect,dd_list) defined in analyze.c
      uses macro definition is_expression_stmt defined in AST_types.h
      uses variable AST_compound_expr::loc defined in AST_defs.h
      uses function enforce_restricts(declaration,effect,qtype) defined in analyze.c
      uses function enforce_readonly(declaration,effect) defined in analyze.c
      uses variable AST_compound_expr::filter_env defined in AST_defs.h
      uses function filter_effects(qtype,effect) defined in analyze.c
      uses function effect_inter(effect,effect) defined in effect.c
      uses variable AST_function_call::va_arg_call defined in AST_defs.h
      uses variable AST_function_call::loc defined in AST_defs.h
      uses variable AST_function_call::arg1 defined in AST_defs.h
      uses function arg_qtypes(qtype) defined in qtype.c
      uses function analyze_magic_function_call(function_call,qtype,effect,dd_list) defined in analyze.c
      uses function effect_qtype(qtype) defined in qtype.c
      uses function qtypelist_scan(qtypelist,qtypelist_scanner *) defined in qtype.c
      uses variable AST_function_call::args defined in AST_defs.h
      uses function qtypelist_next(qtypelist_scanner *) defined in qtype.c
      uses function qtype_varargs(qtype) defined in qtype.c
      uses function qtype_oldstyle(qtype) defined in qtype.c
      uses variable AST_identifier::cstring defined in AST_defs.h
      uses variable cstring::data defined in cstring.h
      uses enumvalue sev_warn defined in qerror.h
      uses function vqual_qtype(qtype) defined in qtype.c
      uses function varargs_constrain_quals_qtype(location,qtype,qual) defined in qtype.c
      uses function return_qtype(qtype) defined in qtype.c
      uses enumvalue kind_array_ref defined in AST_types.h
      uses variable AST_array_ref::arg1 defined in AST_defs.h
      uses variable AST_expression::type defined in AST_defs.h
      uses variable AST_array_ref::arg2 defined in AST_defs.h
      uses function make_binary(location,int,expression,expression) defined in expr.c
      uses variable AST_array_ref::loc defined in AST_defs.h
      uses enumvalue kind_plus defined in AST_types.h
      uses function make_dereference(location,expression) defined in expr.c
      uses variable AST_array_ref::alt defined in AST_defs.h
      uses enumvalue kind_field_ref defined in AST_types.h
      uses variable AST_field_ref::arg1 defined in AST_defs.h
      uses function qtype_error(qtype) defined in qtype.c
      uses function qtype_aggregate(qtype) defined in qtype.c
      uses function field_qtype(qtype,cstring) defined in qtype.c
      uses variable AST_field_ref::cstring defined in AST_defs.h
      uses variable AST_field_ref::cstring_loc defined in AST_defs.h
      uses variable AST_field_ref::loc defined in AST_defs.h
      uses enumvalue kind_init_list defined in AST_types.h
      uses enumvalue kind_init_index defined in AST_types.h
      uses enumvalue kind_init_field defined in AST_types.h
      uses enumvalue kind_known_cst defined in AST_types.h
      uses enumvalue kind_lexical_cst defined in AST_types.h
      uses variable AST_lexical_cst::type defined in AST_defs.h
      uses variable AST_lexical_cst::loc defined in AST_defs.h
      uses enumvalue kind_string defined in AST_types.h
      uses function mkqtype_char(qual) defined in qtype.c
      uses macro definition is_unary defined in AST_types.h
      uses function analyze_unary_expression(unary,context,effect,dd_list) defined in analyze.c
      uses macro definition is_binary defined in AST_types.h
      uses function analyze_binary_expression(binary,context,effect,dd_list) defined in analyze.c
   function analyze_unary_expression(unary,context,effect,dd_list) in line 66
      protection public
      159 lines of code
      4 parameters
      26 conditional paths
      uses variable AST_unary::kind defined in AST_defs.h
      uses enumvalue kind_dereference defined in AST_types.h
      uses variable einfo::eff defined in flow.c
      uses function analyze_expression(expression,context,effect,dd_list) defined in analyze.c
      uses variable AST_unary::arg1 defined in AST_defs.h
      uses enumvalue rpos defined in analyze.c
      uses function qtype_pointer(qtype) defined in qtype.c
      uses variable einfo::qt defined in flow.c
      uses function report_qerror(location,severity,const char *,...) defined in analyze.c
      uses variable AST_unary::loc defined in AST_defs.h
      uses enumvalue sev_err defined in qerror.h
      uses function mkeinfo(qtype,effect,bool) defined in analyze.c
      uses variable error_qtype defined in qtype.c
      uses variable effect_empty defined in effect.c
      uses macro definition FALSE defined in bool.h
      uses function effect_union(effect,effect) defined in effect.c
      uses function effect_r(aloc) defined in effect.c
      uses function aloc_qtype(qtype) defined in qtype.c
      uses enumvalue lpos defined in analyze.c
      uses enumvalue apos defined in analyze.c
      uses function qtype_function(qtype) defined in qtype.c
      uses macro definition fail_loc defined in cqual.h
      uses function default_conversion_qtype(qtype) defined in qtype.c
      uses function points_to_qtype(qtype) defined in qtype.c
      uses function add_op_constraints(operator,einfo,einfo,einfo,location) defined in analyze.c
      uses variable dummy_einfo defined in analyze.c
      uses enumvalue kind_address_of defined in AST_types.h
      uses function type_function(type) defined in types.c
      uses variable AST_expression::type defined in AST_defs.h
      uses enumvalue kind_extension_expr defined in AST_types.h
      uses enumvalue kind_sizeof_expr defined in AST_types.h
      uses function mkqtype_size_t(qual) defined in qtype.c
      uses function make_qvar(const char *,location,bool) defined in quals.c
      uses enumvalue kind_alignof_expr defined in AST_types.h
      uses enumvalue kind_realpart defined in AST_types.h
      uses enumvalue kind_imagpart defined in AST_types.h
      uses function qtype_complex(qtype) defined in qtype.c
      uses function complex_base_qtype(qtype) defined in qtype.c
      uses enumvalue kind_unary_minus defined in AST_types.h
      uses enumvalue kind_unary_plus defined in AST_types.h
      uses enumvalue kind_conjugate defined in AST_types.h
      uses enumvalue kind_bitnot defined in AST_types.h
      uses enumvalue kind_not defined in AST_types.h
      uses function mkqtype_bool(qual) defined in qtype.c
      uses enumvalue kind_preincrement defined in AST_types.h
      uses enumvalue kind_postincrement defined in AST_types.h
      uses enumvalue kind_predecrement defined in AST_types.h
      uses enumvalue kind_postdecrement defined in AST_types.h
      uses function qtype_mklhs_nonconst(location,qtype) defined in analyze.c
      uses function effect_wr(aloc) defined in effect.c
   function analyze_binary_expression(binary,context,effect,dd_list) in line 68
      protection public
      180 lines of code
      4 parameters
      48 conditional paths
      uses variable einfo::eff defined in flow.c
      uses enumvalue rpos defined in analyze.c
      uses variable AST_binary::kind defined in AST_defs.h
      uses function isassignment(binary) defined in analyze.c
      uses function analyze_expression(expression,context,effect,dd_list) defined in analyze.c
      uses variable AST_binary::arg1 defined in AST_defs.h
      uses enumvalue lpos defined in analyze.c
      uses variable AST_binary::arg2 defined in AST_defs.h
      uses function effect_union(effect,effect) defined in effect.c
      uses function qtype_error(qtype) defined in qtype.c
      uses variable einfo::qt defined in flow.c
      uses function mkeinfo(qtype,effect,bool) defined in analyze.c
      uses variable error_qtype defined in qtype.c
      uses macro definition FALSE defined in bool.h
      uses enumvalue kind_plus defined in AST_types.h
      uses function qtype_pointer(qtype) defined in qtype.c
      uses macro definition fail_loc defined in cqual.h
      uses variable AST_binary::loc defined in AST_defs.h
      uses function mkeq_qtype(location,qtype,qtype) defined in qtype.c
      uses function report_qerror(location,severity,const char *,...) defined in analyze.c
      uses enumvalue sev_err defined in qerror.h
      uses function binary_op_name(ast_kind) defined in analyze.c
      uses enumvalue kind_minus defined in AST_types.h
      uses function mkqtype_ptrdiff_t(qual) defined in qtype.c
      uses function make_qvar(const char *,location,bool) defined in quals.c
      uses enumvalue kind_modulo defined in AST_types.h
      uses enumvalue kind_lshift defined in AST_types.h
      uses enumvalue kind_rshift defined in AST_types.h
      uses enumvalue kind_modulo_assign defined in AST_types.h
      uses enumvalue kind_lshift_assign defined in AST_types.h
      uses enumvalue kind_rshift_assign defined in AST_types.h
      uses function qtype_mklhs_nonconst(location,qtype) defined in analyze.c
      uses function points_to_qtype(qtype) defined in qtype.c
      uses function effect_wr(aloc) defined in effect.c
      uses function aloc_qtype(qtype) defined in qtype.c
      uses enumvalue kind_times defined in AST_types.h
      uses enumvalue kind_divide defined in AST_types.h
      uses enumvalue kind_bitand defined in AST_types.h
      uses enumvalue kind_bitor defined in AST_types.h
      uses enumvalue kind_bitxor defined in AST_types.h
      uses enumvalue kind_leq defined in AST_types.h
      uses enumvalue kind_geq defined in AST_types.h
      uses enumvalue kind_lt defined in AST_types.h
      uses enumvalue kind_gt defined in AST_types.h
      uses enumvalue kind_eq defined in AST_types.h
      uses enumvalue kind_ne defined in AST_types.h
      uses enumvalue kind_andand defined in AST_types.h
      uses enumvalue kind_oror defined in AST_types.h
      uses function mkqtype_bool(qual) defined in qtype.c
      uses function file_pointer_qtype(qtype) defined in analyze.c
      uses function definite_null(expression) defined in constants.c
      uses function mark_aloc_interesting(aloc) defined in effect.c
      uses function add_op_constraints(operator,einfo,einfo,einfo,location) defined in analyze.c
      uses enumvalue kind_plus_assign defined in AST_types.h
      uses enumvalue kind_minus_assign defined in AST_types.h
      uses enumvalue kind_times_assign defined in AST_types.h
      uses enumvalue kind_divide_assign defined in AST_types.h
      uses enumvalue kind_bitand_assign defined in AST_types.h
      uses enumvalue kind_bitor_assign defined in AST_types.h
      uses enumvalue kind_bitxor_assign defined in AST_types.h
      uses enumvalue kind_assign defined in AST_types.h
      uses variable einfo::ismalloc defined in flow.c
      uses function defn_effect_qtype(qtype) defined in qtype.c
      uses function mkleq_assign_convert(location,qtype,qtype) defined in qtype.c
   function analyze_magic_function_call(function_call,qtype,effect,dd_list) in line 70
      protection public
      92 lines of code
      4 parameters
      5 conditional paths
      uses variable AST_function_call::arg1 defined in AST_defs.h
      uses variable AST_expression::kind defined in AST_defs.h
      uses enumvalue kind_identifier defined in AST_types.h
      uses macro definition CAST defined in AST.h
      uses variable AST_identifier::cstring defined in AST_defs.h
      uses variable cstring::data defined in cstring.h
      uses variable have_stream_quals defined in analyze.c
      uses variable einfo::eff defined in flow.c
      uses variable count defined in qtype.c
      uses variable effect_empty defined in effect.c
      uses macro definition scan_expression defined in AST_defs.h
      uses variable AST_function_call::args defined in AST_defs.h
      uses function analyze_expression(expression,context,effect,dd_list) defined in analyze.c
      uses enumvalue rpos defined in analyze.c
      uses function effect_union(effect,effect) defined in effect.c
      uses function return_qtype(qtype) defined in qtype.c
      uses function points_to_qtype(qtype) defined in qtype.c
      uses function inttostr(region,int) defined in utils.c
      uses variable parse_region defined in c-parse.h
      uses variable fopen_count defined in analyze.c
      uses function rstrscat(region,...) defined in utils.c
      uses function name_aloc(aloc) defined in effect.c
      uses function aloc_qtype(qtype) defined in qtype.c
      uses macro definition NULL defined in config.h
      uses function name_qual(qual) defined in quals.c
      uses function qual_qtype(qtype) defined in qtype.c
      uses function make_aloc(const char *,qtype) defined in effect.c
      uses function mark_aloc_interesting(aloc) defined in effect.c
      uses function effect_alloc(aloc) defined in effect.c
      uses function make_qvar(const char *,location,bool) defined in quals.c
      uses variable AST_identifier::loc defined in AST_defs.h
      uses macro definition TRUE defined in bool.h
      uses function mkqtype_pointer(qual,qtype,aloc) defined in qtype.c
      uses function mkeinfo(qtype,effect,bool) defined in analyze.c
      uses macro definition FALSE defined in bool.h
      uses variable alloc_count defined in analyze.c
      uses function rstrcat(region,const char *,const char *) defined in utils.c
      uses function mkqtype_void(qual) defined in qtype.c
      uses variable AST_function_call::loc defined in AST_defs.h
      uses variable have_sleepy_quals defined in analyze.c
      uses variable interrupt_status_qtype defined in analyze.c
      uses function effect_wr(aloc) defined in effect.c
   function put_id_in_context(location,einfo,context) in line 72
      protection public
      50 lines of code
      3 parameters
      9 conditional paths
      uses variable einfo::eff defined in flow.c
      uses function qtype_error(qtype) defined in qtype.c
      uses variable einfo::qt defined in flow.c
      uses variable error_qtype defined in qtype.c
      uses function qtype_array(qtype) defined in qtype.c
      uses enumvalue rpos defined in analyze.c
      uses function default_conversion_qtype(qtype) defined in qtype.c
      uses enumvalue apos defined in analyze.c
      uses function mkqtype_pointer(qual,qtype,aloc) defined in qtype.c
      uses function make_fresh_qvar(const char *,location) defined in quals.c
      uses function array_aloc_qtype(qtype) defined in qtype.c
      uses function fail(const char *,...) defined in utils.c
      uses function qtype_function(qtype) defined in qtype.c
      uses enumvalue lpos defined in analyze.c
      uses function qtype_pointer(qtype) defined in qtype.c
      uses function points_to_qtype(qtype) defined in qtype.c
      uses function effect_union(effect,effect) defined in effect.c
      uses function effect_r(aloc) defined in effect.c
      uses function aloc_qtype(qtype) defined in qtype.c
      uses macro definition fail_loc defined in cqual.h
      uses function mkeinfo(qtype,effect,bool) defined in analyze.c
      uses macro definition FALSE defined in bool.h
   function qtype_mklhs_nonconst(location,qtype) in line 73
      protection public
      6 lines of code
      2 parameters
      2 conditional paths
      uses function mkNonConst_pointer(location,qtype) defined in analyze.c
      uses function report_qerror(location,severity,const char *,...) defined in analyze.c
      uses enumvalue sev_err defined in qerror.h
   function mkNonConst_qual(location,qual) in line 74
      protection public
      6 lines of code
      2 parameters
      2 conditional paths
      uses variable nonconst_qual defined in quals.c
      uses macro definition FALSE defined in bool.h
      uses function mkleq_qual(location,qual,qual) defined in quals.c
   function mkNonConst_pointer(location,qtype) in line 75
      protection public
      14 lines of code
      2 parameters
      3 conditional paths
      uses macro definition FALSE defined in bool.h
      uses variable nonconst_qual defined in quals.c
      uses function qtype_pointer(qtype) defined in qtype.c
      uses function mkNonConst_qual(location,qual) defined in analyze.c
      uses function qual_qtype(qtype) defined in qtype.c
      uses function points_to_qtype(qtype) defined in qtype.c
      uses function qtype_aggregate(qtype) defined in qtype.c
      uses function mkNonConst_aggregate(location,qtype) defined in analyze.c
   function mkNonConst_aggregate(location,qtype) in line 76
      protection public
      39 lines of code
      2 parameters
      6 conditional paths
      uses function field_qtype(qtype,cstring) defined in qtype.c
      uses macro definition FALSE defined in bool.h
      uses variable nonconst_qual defined in quals.c
      uses function field_scan(qtype,field_scanner *) defined in qtype.c
      uses function field_next(field_scanner *) defined in qtype.c
      uses function qtype_array(qtype) defined in qtype.c
      uses function array_of_qtype(qtype) defined in qtype.c
      uses function points_to_qtype(qtype) defined in qtype.c
      uses function mkNonConst_qual(location,qual) defined in analyze.c
      uses function qual_qtype(qtype) defined in qtype.c
      uses function qtype_aggregate(qtype) defined in qtype.c
   function mkConst_pointer(location,qtype) in line 77
      protection public
      11 lines of code
      2 parameters
      2 conditional paths
      uses macro definition FALSE defined in bool.h
      uses variable const_qual defined in quals.c
      uses function qtype_pointer(qtype) defined in qtype.c
      uses function mkleq_qual(location,qual,qual) defined in quals.c
      uses function qual_qtype(qtype) defined in qtype.c
   function assign_op_kind(binary) in line 78
      protection public
      18 lines of code
      1 parameters
      11 conditional paths
      uses variable AST_binary::kind defined in AST_defs.h
      uses enumvalue kind_plus_assign defined in AST_types.h
      uses enumvalue kind_plus defined in AST_types.h
      uses enumvalue kind_minus_assign defined in AST_types.h
      uses enumvalue kind_minus defined in AST_types.h
      uses enumvalue kind_times_assign defined in AST_types.h
      uses enumvalue kind_times defined in AST_types.h
      uses enumvalue kind_divide_assign defined in AST_types.h
      uses enumvalue kind_divide defined in AST_types.h
      uses enumvalue kind_modulo_assign defined in AST_types.h
      uses enumvalue kind_modulo defined in AST_types.h
      uses enumvalue kind_lshift_assign defined in AST_types.h
      uses enumvalue kind_lshift defined in AST_types.h
      uses enumvalue kind_rshift_assign defined in AST_types.h
      uses enumvalue kind_rshift defined in AST_types.h
      uses enumvalue kind_bitand_assign defined in AST_types.h
      uses enumvalue kind_bitand defined in AST_types.h
      uses enumvalue kind_bitor_assign defined in AST_types.h
      uses enumvalue kind_bitor defined in AST_types.h
      uses enumvalue kind_bitxor_assign defined in AST_types.h
      uses enumvalue kind_bitxor defined in AST_types.h
      uses macro definition fail_loc defined in cqual.h
      uses variable AST_binary::loc defined in AST_defs.h
   function restrict_variable_decl(variable_decl,bool) in line 79
      protection public
      98 lines of code
      2 parameters
      6 conditional paths
      uses function root_ddecl(data_declaration) defined in analyze.c
      uses variable AST_variable_decl::ddecl defined in AST_defs.h
      uses variable data_declaration::qtype defined in decls.h
      uses macro definition FALSE defined in bool.h
      uses function qtype_pointer(qtype) defined in qtype.c
      uses function points_to_qtype(qtype) defined in qtype.c
      uses variable restrict_qual defined in quals.c
      uses function has_qual_qtype(qtype,qual) defined in qtype.c
      uses variable const_qual defined in quals.c
      uses variable AST_variable_decl::rinfo defined in AST_defs.h
      uses function aloc_qtype(qtype) defined in qtype.c
      uses function make_aloc(const char *,qtype) defined in effect.c
      uses function rstrcat(region,const char *,const char *) defined in utils.c
      uses variable parse_region defined in c-parse.h
      uses function name_aloc(aloc) defined in effect.c
      uses function mkqtype_pointer(qual,qtype,aloc) defined in qtype.c
      uses function qual_qtype(qtype) defined in qtype.c
      uses macro definition ralloc defined in regions.h
      uses variable Rinfo::isglobal defined in analyze.h
      uses variable Rinfo::fs_fqtype defined in analyze.h
      uses macro definition NULL defined in config.h
      uses variable Rinfo::fs_rqtype defined in analyze.h
      uses variable Rinfo::lin defined in analyze.h
      uses variable Rinfo::flocs defined in analyze.h
      uses function effect_rwr(aloc) defined in effect.c
      uses variable Rinfo::flocs_alloc defined in analyze.h
      uses function effect_alloc(aloc) defined in effect.c
      uses variable Rinfo::fqtype defined in analyze.h
      uses variable Rinfo::rlocs defined in analyze.h
      uses variable Rinfo::rlocs_alloc defined in analyze.h
      uses variable Rinfo::rqtype defined in analyze.h
      uses function mark_aloc_interesting(aloc) defined in effect.c
      uses function mknin_effect_qtype(location,effect,qtype) defined in qtype.c
      uses variable AST_variable_decl::loc defined in AST_defs.h
      uses macro definition TRUE defined in bool.h
      uses function report_qerror(location,severity,const char *,...) defined in analyze.c
      uses enumvalue sev_err defined in qerror.h
   function enforce_restricts(declaration,effect,qtype) in line 80
      protection public
      32 lines of code
      3 parameters
      8 conditional paths
      uses macro definition NULL defined in config.h
      uses variable einfo::eff defined in flow.c
      uses macro definition CAST defined in AST.h
      uses variable AST_declaration::next defined in AST_defs.h
      uses variable einfo::qt defined in flow.c
      uses variable AST_declaration::kind defined in AST_defs.h
      uses enumvalue kind_asm_decl defined in AST_types.h
      uses enumvalue kind_function_decl defined in AST_types.h
      uses enumvalue kind_ellipsis_decl defined in AST_types.h
      uses enumvalue kind_oldidentifier_decl defined in AST_types.h
      uses enumvalue kind_extension_decl defined in AST_types.h
      uses variable AST_extension_decl::decl defined in AST_defs.h
      uses enumvalue kind_data_decl defined in AST_types.h
      uses macro definition scan_declaration defined in AST_defs.h
      uses function enforce_var_decl_restrict(variable_decl,effect,qtype) defined in analyze.c
      uses macro definition fail_loc defined in cqual.h
      uses variable AST_declaration::loc defined in AST_defs.h
   function enforce_var_decl_readonly(variable_decl,effect) in line 81
      protection public
      16 lines of code
      2 parameters
      4 conditional paths
      uses variable AST_variable_decl::ddecl defined in AST_defs.h
      uses function root_ddecl(data_declaration) defined in analyze.c
      uses variable data_declaration::qtype defined in decls.h
      uses function qtype_pointer(qtype) defined in qtype.c
      uses function points_to_qtype(qtype) defined in qtype.c
      uses variable readonly_qual defined in analyze.c
      uses function has_qual_qtype(qtype,qual) defined in qtype.c
      uses function mknin_effect(location,effect,effect) defined in effect.c
      uses variable AST_variable_decl::loc defined in AST_defs.h
      uses function effect_wr(aloc) defined in effect.c
      uses function aloc_qtype(qtype) defined in qtype.c
      uses variable einfo::eff defined in flow.c
   function enforce_readonly(declaration,effect) in line 82
      protection public
      33 lines of code
      2 parameters
      8 conditional paths
      uses macro definition NULL defined in config.h
      uses macro definition CAST defined in AST.h
      uses variable AST_declaration::next defined in AST_defs.h
      uses variable einfo::eff defined in flow.c
      uses variable AST_declaration::kind defined in AST_defs.h
      uses enumvalue kind_asm_decl defined in AST_types.h
      uses enumvalue kind_function_decl defined in AST_types.h
      uses enumvalue kind_ellipsis_decl defined in AST_types.h
      uses enumvalue kind_oldidentifier_decl defined in AST_types.h
      uses enumvalue kind_extension_decl defined in AST_types.h
      uses variable AST_extension_decl::decl defined in AST_defs.h
      uses enumvalue kind_data_decl defined in AST_types.h
      uses macro definition scan_declaration defined in AST_defs.h
      uses function enforce_var_decl_readonly(variable_decl,effect) defined in analyze.c
      uses macro definition fail_loc defined in cqual.h
      uses variable AST_declaration::loc defined in AST_defs.h
   function filter_effects(qtype,effect) in line 83
      protection public
      13 lines of code
      2 parameters
      3 conditional paths
      uses variable einfo::qt defined in flow.c
      uses function effect_union(effect,effect) defined in effect.c
      uses function alocs_qtype(qtype) defined in qtype.c
      uses variable current_function_decl defined in analyze.h
      uses function cur_return_qtype(void) defined in analyze.c
   function unparse_start(FILE *) in line 86
      protection public
      11 lines of code
      1 parameters
      1 conditional paths
   function prt_variable_decl(variable_decl) in line 87
      protection public
      13 lines of code
      1 parameters
      1 conditional paths
      uses function prt_declarator(declarator,type_element,attribute) defined in unparse.c
      uses variable AST_variable_decl::declarator defined in AST_defs.h
      uses macro definition NULL defined in config.h
      uses variable AST_variable_decl::attributes defined in AST_defs.h
      uses variable AST_variable_decl::asm_stmt defined in AST_defs.h
      uses function prt_asm_stmt_plain(asm_stmt) defined in unparse.c
      uses variable AST_variable_decl::arg1 defined in AST_defs.h
      uses function output(char *,...) defined in unparse.c
      uses function prt_expression(expression,int) defined in unparse.c
      uses macro definition P_ASSIGN defined in unparse.c
   function prt_expression(expression,int) in line 88
      protection public
      33 lines of code
      2 parameters
      1 conditional paths
   function binary_op_name(ast_kind) in line 89
      protection public
      36 lines of code
      1 parameters
      1 conditional paths
   function is_void_parms(declaration) in line 90
      protection public
      15 lines of code
      1 parameters
      1 conditional paths
   function equal_expressions(expression,expression) in line 91
      protection public
      90 lines of code
      2 parameters
      1 conditional paths
      uses variable AST_expression::kind defined in AST_defs.h
      uses macro definition FALSE defined in bool.h
      uses enumvalue kind_cast defined in AST_types.h
      uses macro definition CAST defined in AST.h
      uses variable AST_cast::arg1 defined in AST_defs.h
      uses enumvalue kind_conditional defined in AST_types.h
      uses variable AST_conditional::arg1 defined in AST_defs.h
      uses variable AST_conditional::condition defined in AST_defs.h
      uses variable AST_conditional::arg2 defined in AST_defs.h
      uses enumvalue kind_identifier defined in AST_types.h
      uses function root_ddecl(data_declaration) defined in analyze.c
      uses variable AST_identifier::ddecl defined in AST_defs.h
      uses enumvalue kind_function_call defined in AST_types.h
      uses variable AST_function_call::arg1 defined in AST_defs.h
      uses variable AST_function_call::args defined in AST_defs.h
      uses macro definition scan_expression defined in AST_defs.h
      uses variable AST_expression::next defined in AST_defs.h
      uses macro definition TRUE defined in bool.h
      uses enumvalue kind_field_ref defined in AST_types.h
      uses variable AST_field_ref::arg1 defined in AST_defs.h
      uses variable AST_field_ref::cstring defined in AST_defs.h
      uses variable cstring::data defined in cstring.h
      uses enumvalue kind_array_ref defined in AST_types.h
      uses variable AST_array_ref::arg1 defined in AST_defs.h
      uses variable AST_array_ref::arg2 defined in AST_defs.h
      uses enumvalue kind_lexical_cst defined in AST_types.h
      uses variable AST_lexical_cst::cstring defined in AST_defs.h
      uses macro definition is_unary defined in AST_types.h
      uses function equal_unary_expressions(unary,unary) defined in eq_expressions.c
      uses macro definition is_binary defined in AST_types.h
      uses function equal_binary_expressions(binary,binary) defined in eq_expressions.c
   function init_analyze(void) in line 112
      protection public
      16 lines of code
      1 parameters
      1 conditional paths
      uses variable globals defined in analyze.c
      uses function make_string_hash_table(region,int) defined in hash.c
      uses variable parse_region defined in c-parse.h
      uses variable cur_cs defined in analyze.c
      uses macro definition NULL defined in config.h
      uses variable current_function_decl defined in analyze.h
      uses variable global_effect defined in analyze.c
      uses function effect_var(const char *) defined in effect.c
      uses variable global_env defined in analyze.c
      uses variable definitions defined in analyze.c
      uses function dd_new_list(region) defined in dd_list.c
      uses variable restrict_qual defined in quals.c
      uses function fail(const char *,...) defined in utils.c
      uses function reset_operators(void) defined in analyze.c
      uses variable state defined in analyze.c
      uses enumvalue state_init defined in analyze.c
      uses function init_magic(void) defined in analyze.c
   function finish_analyze(void) in line 129
      protection public
      36 lines of code
      1 parameters
      1 conditional paths
      uses variable flag_pam_mode defined in flags.h
      uses variable flag_flow_sensitive defined in flags.h
      uses function traverse_globals(void(*)(data_declaration, void *),void *) defined in analyze.c
      uses function warn_if_dangerous_global(data_declaration,store) defined in analyze.c
      uses macro definition NULL defined in config.h
      uses variable init_qual defined in quals.c
      uses variable noninit_qual defined in quals.c
      uses macro definition dd_scan defined in dd_list.h
      uses variable definitions defined in analyze.c
      uses function root_ddecl(data_declaration) defined in analyze.c
      uses macro definition DD_GET defined in dd_list.h
      uses function leq_qual(qual,qual) defined in quals.c
      uses function qual_qtype(qtype) defined in qtype.c
      uses variable data_declaration::qtype defined in decls.h
      uses function has_ub_qual(qual,qual) defined in quals.c
      uses variable data_declaration::isinline defined in decls.h
      uses variable data_declaration::addresstaken defined in decls.h
      uses function report_qerror(location,severity,const char *,...) defined in analyze.c
      uses function location_declaration(declaration) defined in analyze.c
      uses variable data_declaration::ast defined in decls.h
      uses enumvalue sev_info defined in qerror.h
      uses function qtype_function(qtype) defined in qtype.c
      uses variable data_declaration::name defined in decls.h
      uses function check_nin(void) defined in effect.c
      uses variable state defined in analyze.c
      uses enumvalue state_finish defined in analyze.c
   function context_tostring(context) in line 172
      protection public
      10 lines of code
      1 parameters
      4 conditional paths
      uses enumvalue lpos defined in analyze.c
      uses enumvalue apos defined in analyze.c
      uses enumvalue rpos defined in analyze.c
   function root_ddecl(data_declaration) in line 184
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses variable data_declaration::shadowed defined in decls.h
   function static_ddecl(data_declaration) in line 193
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses function root_ddecl(data_declaration) defined in analyze.c
      uses variable data_declaration::kind defined in decls.h
      uses enumvalue decl_variable defined in decls.h
      uses variable data_declaration::vtype defined in decls.h
      uses enumvalue decl_function defined in decls.h
      uses variable data_declaration::ftype defined in decls.h
   function vreport_qerror(location,severity,const char *,va_list) in line 201
      protection public
      37 lines of code
      4 parameters
      10 conditional paths
      uses enumvalue sev_err defined in qerror.h
      uses enumvalue sev_warn defined in qerror.h
      uses variable warnings_are_errors defined in flags.h
      uses variable qerrors defined in qerror.c
      uses macro definition TRUE defined in bool.h
      uses variable flag_pam_mode defined in flags.h
      uses variable current_function_decl defined in analyze.h
      uses function pam_add_error(const char *,location,severity,const char *,va_list) defined in pam.c
      uses function root_ddecl(data_declaration) defined in analyze.c
      uses variable AST_function_decl::ddecl defined in AST_defs.h
      uses variable data_declaration::name defined in decls.h
      uses macro definition NULL defined in config.h
      uses variable Location::filename defined in location.h
      uses variable Location::lineno defined in location.h
      uses function growbuf_empty(growbuf) defined in buffer.c
      uses variable qual_error_detail defined in qerror.c
      uses variable qtype_error_detail defined in qerror.c
      uses function growbuf_contents(growbuf) defined in buffer.c
      uses function growbuf_reset(growbuf) defined in buffer.c
   function report_qerror(location,severity,const char *,...) in line 240
      protection public
      7 lines of code
      4 parameters
      1 conditional paths
   function get_id_declarator(declarator) in line 248
      protection public
      32 lines of code
      1 parameters
      1 conditional paths
      uses variable AST_declarator::kind defined in AST_defs.h
      uses enumvalue kind_function_declarator defined in AST_types.h
      uses macro definition CAST defined in AST.h
      uses function get_id_declarator(declarator) defined in analyze.c
      uses variable AST_function_declarator::declarator defined in AST_defs.h
      uses enumvalue kind_pointer_declarator defined in AST_types.h
      uses variable AST_pointer_declarator::declarator defined in AST_defs.h
      uses enumvalue kind_array_declarator defined in AST_types.h
      uses variable AST_array_declarator::declarator defined in AST_defs.h
      uses enumvalue kind_identifier_declarator defined in AST_types.h
      uses macro definition fail_loc defined in cqual.h
      uses variable AST_declarator::loc defined in AST_defs.h
   function location_declarator(declarator) in line 293
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function get_id_declarator(declarator) defined in analyze.c
   function location_declaration(declaration) in line 301
      protection public
      46 lines of code
      1 parameters
      1 conditional paths
      uses variable AST_declaration::kind defined in AST_defs.h
      uses enumvalue kind_variable_decl defined in AST_types.h
      uses macro definition CAST defined in AST.h
      uses function location_declarator(declarator) defined in analyze.c
      uses variable AST_variable_decl::declarator defined in AST_defs.h
      uses enumvalue kind_oldidentifier_decl defined in AST_types.h
      uses variable AST_declaration::loc defined in AST_defs.h
      uses enumvalue kind_function_decl defined in AST_types.h
      uses variable AST_function_decl::declarator defined in AST_defs.h
      uses enumvalue kind_field_decl defined in AST_types.h
      uses variable AST_field_decl::declarator defined in AST_defs.h
      uses variable AST_field_decl::loc defined in AST_defs.h
      uses enumvalue kind_enumerator defined in AST_types.h
      uses variable AST_enumerator::loc defined in AST_defs.h
      uses enumvalue kind_implicit_decl defined in AST_types.h
      uses enumvalue kind_error_decl defined in AST_types.h
      uses macro definition fail_loc defined in cqual.h
   function cur_return_qtype(void) in line 349
      protection public
      9 lines of code
      1 parameters
      1 conditional paths
      uses variable current_function_decl defined in analyze.h
      uses function root_ddecl(data_declaration) defined in analyze.c
      uses variable AST_function_decl::ddecl defined in AST_defs.h
      uses variable data_declaration::qtype defined in decls.h
      uses function return_qtype(qtype) defined in qtype.c
   function cur_function_qual(void) in line 360
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses variable current_function_decl defined in analyze.h
      uses function root_ddecl(data_declaration) defined in analyze.c
      uses variable AST_function_decl::ddecl defined in AST_defs.h
      uses variable data_declaration::qtype defined in decls.h
      uses function qual_qtype(qtype) defined in qtype.c
   function file_pointer_qtype(qtype) in line 388
      protection public
      13 lines of code
      1 parameters
      1 conditional paths
      uses function qtype_pointer(qtype) defined in qtype.c
      uses variable einfo::qt defined in flow.c
      uses function points_to_qtype(qtype) defined in qtype.c
      uses function qtype_struct(qtype) defined in qtype.c
      uses function tag_name_qtype(qtype) defined in qtype.c
      uses macro definition FALSE defined in bool.h
   function mkeinfo(qtype,effect,bool) in line 408
      protection public
      5 lines of code
      3 parameters
      1 conditional paths
      uses variable einfo::qt defined in flow.c
      uses variable einfo::eff defined in flow.c
      uses variable einfo::ismalloc defined in flow.c
   function mksinfo(effect) in line 414
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable einfo::eff defined in flow.c
   function mkdinfo(effect,effect) in line 420
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses variable einfo::eff defined in flow.c
      uses variable dinfo::alocs defined in flow.c
   function operator find_op_kind(ast_kind) in line 473
      protection public
      39 lines of code
      1 parameters
      23 conditional paths
      uses enumvalue kind_unary_minus defined in AST_types.h
      uses variable operators defined in analyze.c
      uses enumvalue kind_unary_plus defined in AST_types.h
      uses enumvalue kind_bitnot defined in AST_types.h
      uses enumvalue kind_not defined in AST_types.h
      uses enumvalue kind_times defined in AST_types.h
      uses enumvalue kind_divide defined in AST_types.h
      uses enumvalue kind_modulo defined in AST_types.h
      uses enumvalue kind_lshift defined in AST_types.h
      uses enumvalue kind_rshift defined in AST_types.h
      uses enumvalue kind_lt defined in AST_types.h
      uses enumvalue kind_gt defined in AST_types.h
      uses enumvalue kind_leq defined in AST_types.h
      uses enumvalue kind_geq defined in AST_types.h
      uses enumvalue kind_eq defined in AST_types.h
      uses enumvalue kind_ne defined in AST_types.h
      uses enumvalue kind_bitand defined in AST_types.h
      uses enumvalue kind_bitor defined in AST_types.h
      uses enumvalue kind_bitxor defined in AST_types.h
      uses enumvalue kind_andand defined in AST_types.h
      uses enumvalue kind_oror defined in AST_types.h
      uses enumvalue kind_dereference defined in AST_types.h
      uses macro definition NULL defined in config.h
   function operator find_op_name(const char *) in line 514
      protection public
      11 lines of code
      1 parameters
      3 conditional paths
      uses variable operators defined in analyze.c
      uses variable operator::name defined in analyze.c
      uses macro definition NULL defined in config.h
   function match_signature(enum sig_kind,qtype,location) in line 540
      protection public
      56 lines of code
      3 parameters
      8 conditional paths
      uses function qtype_function(qtype) defined in qtype.c
      uses variable einfo::qt defined in flow.c
      uses variable einfo::out defined in flow.c
      uses function return_qtype(qtype) defined in qtype.c
      uses function store_in_qtype(qtype) defined in qtype.c
      uses function store_out_qtype(qtype) defined in qtype.c
      uses function qtypelist_scan(qtypelist,qtypelist_scanner *) defined in qtype.c
      uses function arg_qtypes(qtype) defined in qtype.c
      uses function qtypelist_next(qtypelist_scanner *) defined in qtype.c
      uses function qtype_varargs(qtype) defined in qtype.c
      uses function qtype_oldstyle(qtype) defined in qtype.c
      uses macro definition FALSE defined in bool.h
      uses enumvalue operator::sig_deref defined in analyze.c
      uses enumvalue operator::sig_addr defined in analyze.c
      uses enumvalue operator::sig_unop defined in analyze.c
      uses function qtype_var(qtype) defined in qtype.c
      uses function qtype_pointer(qtype) defined in qtype.c
      uses function mkeq_qtype(location,qtype,qtype) defined in qtype.c
      uses function points_to_qtype(qtype) defined in qtype.c
      uses function qtype_int(qtype) defined in qtype.c
      uses enumvalue operator::sig_binop defined in analyze.c
      uses function fail(const char *,...) defined in utils.c
      uses macro definition TRUE defined in bool.h
   function add_op_signature(operator,qtype,location) in line 599
      protection public
      14 lines of code
      3 parameters
      3 conditional paths
      uses function qtype_scheme(qtype) defined in qtype.c
      uses variable einfo::qt defined in flow.c
      uses function instantiate_qtype(qtype,location) defined in qtype.c
      uses function match_signature(enum sig_kind,qtype,location) defined in analyze.c
      uses function generalize_qtype(qtype) defined in qtype.c
      uses macro definition FALSE defined in bool.h
      uses macro definition TRUE defined in bool.h
   function add_op_constraints(operator,einfo,einfo,einfo,location) in line 616
      protection public
      20 lines of code
      5 parameters
      2 conditional paths
      uses macro definition FALSE defined in bool.h
      uses function instantiate_qtype(qtype,location) defined in qtype.c
      uses macro definition NULL defined in config.h
      uses function mkeq_qtype(location,qtype,qtype) defined in qtype.c
      uses function return_qtype(qtype) defined in qtype.c
      uses variable einfo::qt defined in flow.c
      uses function qtypelist_scan(qtypelist,qtypelist_scanner *) defined in qtype.c
      uses function arg_qtypes(qtype) defined in qtype.c
      uses function qtypelist_next(qtypelist_scanner *) defined in qtype.c
   function add_global_ddecl_qtype(data_declaration,bool) in line 654
      protection public
      91 lines of code
      2 parameters
      9 conditional paths
      uses function root_ddecl(data_declaration) defined in analyze.c
      uses function location_declaration(declaration) defined in analyze.c
      uses variable data_declaration::ast defined in decls.h
      uses variable data_declaration::isexternalscope defined in decls.h
      uses variable data_declaration::qtype defined in decls.h
      uses function hash_table_lookup(hash_table,hash_key,hash_data *) defined in hash.c
      uses variable globals defined in analyze.c
      uses variable hash_key defined in hash.h
      uses variable data_declaration::name defined in decls.h
      uses variable data_declaration::in_prelude defined in decls.h
      uses variable data_declaration::global defined in decls.h
      uses function match_type(type,type) defined in qtype.c
      uses variable data_declaration::type defined in decls.h
      uses macro definition insist defined in utils.h
      uses function add_ddecl_qtype(data_declaration,bool) defined in qtype.c
      uses function qtype_scheme(qtype) defined in qtype.c
      uses function report_qerror(location,severity,const char *,...) defined in analyze.c
      uses enumvalue sev_warn defined in qerror.h
      uses function unify_qtype(location,qtype,qtype) defined in qtype.c
      uses enumvalue sev_err defined in qerror.h
      uses variable AST_declaration::loc defined in AST_defs.h
      uses enumvalue sev_info defined in qerror.h
      uses function qtype_function(qtype) defined in qtype.c
      uses function qtype_oldstyle(qtype) defined in qtype.c
      uses macro definition insistnot defined in utils.h
      uses function hash_table_insert(hash_table,hash_key,hash_data) defined in hash.c
      uses variable data_declaration::defined defined in decls.h
      uses variable data_declaration::isused defined in decls.h
      uses variable data_declaration::addresstaken defined in decls.h
      uses macro definition TRUE defined in bool.h
   function add_static_ddecl_qtype(data_declaration,bool) in line 749
      protection public
      35 lines of code
      2 parameters
      6 conditional paths
      uses function root_ddecl(data_declaration) defined in analyze.c
      uses function static_ddecl(data_declaration) defined in analyze.c
      uses variable data_declaration::qtype defined in decls.h
      uses function hash_table_lookup(hash_table,hash_key,hash_data *) defined in hash.c
      uses variable globals defined in analyze.c
      uses variable hash_key defined in hash.h
      uses variable data_declaration::name defined in decls.h
      uses variable data_declaration::in_prelude defined in decls.h
      uses variable data_declaration::global defined in decls.h
      uses function report_qerror(location,severity,const char *,...) defined in analyze.c
      uses function location_declaration(declaration) defined in analyze.c
      uses variable data_declaration::ast defined in decls.h
      uses enumvalue sev_err defined in qerror.h
      uses function add_ddecl_qtype(data_declaration,bool) defined in qtype.c
      uses variable data_declaration::defined defined in decls.h
      uses macro definition TRUE defined in bool.h
      uses macro definition insist defined in utils.h
      uses function hash_table_insert(hash_table,hash_key,hash_data) defined in hash.c
   function __add_ddecl_qtype(data_declaration,bool) in line 787
      protection public
      16 lines of code
      2 parameters
      4 conditional paths
      uses function root_ddecl(data_declaration) defined in analyze.c
      uses variable data_declaration::qtype defined in decls.h
      uses variable data_declaration::isexternalscope defined in decls.h
      uses function add_global_ddecl_qtype(data_declaration,bool) defined in analyze.c
      uses function static_ddecl(data_declaration) defined in analyze.c
      uses function add_static_ddecl_qtype(data_declaration,bool) defined in analyze.c
      uses function add_ddecl_qtype(data_declaration,bool) defined in qtype.c
   function mark_used(data_declaration) in line 806
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses function root_ddecl(data_declaration) defined in analyze.c
      uses variable data_declaration::isused defined in decls.h
      uses macro definition TRUE defined in bool.h
      uses variable data_declaration::isexternalscope defined in decls.h
      uses variable data_declaration::global defined in decls.h
   function mark_address_taken(data_declaration) in line 816
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses function root_ddecl(data_declaration) defined in analyze.c
      uses variable data_declaration::addresstaken defined in decls.h
      uses macro definition TRUE defined in bool.h
      uses variable data_declaration::isexternalscope defined in decls.h
      uses variable data_declaration::global defined in decls.h
   function traverse_globals(void(*)(data_declaration, void *),void *) in line 836
      protection public
      13 lines of code
      2 parameters
      1 conditional paths
      uses function hash_table_scan(hash_table,hash_table_scanner *) defined in hash.c
      uses variable globals defined in analyze.c
      uses function hash_table_next(hash_table_scanner *,hash_key *,hash_data *) defined in hash.c
      uses macro definition NULL defined in config.h
      uses variable data_declaration::shadowed defined in decls.h
      uses function f(char *) defined in taint-const-subtyping.c
   function is_undefined_global(data_declaration,store) in line 850
      protection public
      11 lines of code
      2 parameters
      1 conditional paths
      uses function root_ddecl(data_declaration) defined in analyze.c
      uses variable data_declaration::isused defined in decls.h
      uses variable data_declaration::defined defined in decls.h
      uses function nontriv_soln_qtype(qtype,store) defined in qtype.c
      uses variable data_declaration::qtype defined in decls.h
      uses macro definition NULL defined in config.h
      uses variable flag_flow_sensitive defined in flags.h
   function is_unannotated_global(data_declaration,store) in line 864
      protection public
      10 lines of code
      2 parameters
      1 conditional paths
      uses function root_ddecl(data_declaration) defined in analyze.c
      uses function is_undefined_global(data_declaration,store) defined in analyze.c
      uses variable data_declaration::isused defined in decls.h
      uses function qtype_function(qtype) defined in qtype.c
      uses variable data_declaration::qtype defined in decls.h
      uses function qtype_varargs(qtype) defined in qtype.c
      uses variable data_declaration::in_prelude defined in decls.h
   function warn_if_dangerous_global(data_declaration,store) in line 877
      protection public
      10 lines of code
      2 parameters
      1 conditional paths
      uses function is_undefined_global(data_declaration,store) defined in analyze.c
      uses function report_qerror(location,severity,const char *,...) defined in analyze.c
      uses function location_declaration(declaration) defined in analyze.c
      uses variable data_declaration::ast defined in decls.h
      uses enumvalue sev_err defined in qerror.h
      uses variable data_declaration::name defined in decls.h
      uses function is_unannotated_global(data_declaration,store) defined in analyze.c
      uses enumvalue sev_info defined in qerror.h
   function get_global_effect(void) in line 889
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable state defined in analyze.c
      uses enumvalue state_finish defined in analyze.c
      uses variable global_effect defined in analyze.c
   function get_main_ddecl(void) in line 896
      protection public
      10 lines of code
      1 parameters
      1 conditional paths
      uses variable state defined in analyze.c
      uses enumvalue state_finish defined in analyze.c
      uses function hash_table_lookup(hash_table,hash_key,hash_data *) defined in hash.c
      uses variable globals defined in analyze.c
      uses variable hash_key defined in hash.h
      uses function root_ddecl(data_declaration) defined in analyze.c
      uses macro definition NULL defined in config.h
   function analyze_field_declaration(const char *,field_declaration) in line 1353
      protection public
      13 lines of code
      2 parameters
      1 conditional paths
      uses function get_fdecl_qtype(const char *,field_declaration) defined in qtype.c
      uses variable operator::name defined in analyze.c
      uses variable flag_pam_mode defined in flags.h
      uses variable flag_print_results defined in flags.h
      uses variable field_declaration::name defined in decls.h
      uses function add_declarator_overlay(declarator,qtype) defined in analyze.c
      uses variable field_declaration::ast defined in decls.h
      uses variable AST_field_decl::declarator defined in AST_defs.h
      uses function mkleq_effect(effect,effect) defined in effect.c
      uses function defn_effect_qtype(qtype) defined in qtype.c
      uses variable global_effect defined in analyze.c
      uses function effect_single(aloc) defined in effect.c
      uses function aloc_qtype(qtype) defined in qtype.c
      uses variable global_env defined in analyze.c
   function init_string(location,qtype,qtype) in line 1398
      protection public
      16 lines of code
      3 parameters
      1 conditional paths
      uses macro definition FALSE defined in bool.h
      uses function array_of_qtype(qtype) defined in qtype.c
      uses function points_to_qtype(qtype) defined in qtype.c
      uses function mkleq_qual(location,qual,qual) defined in quals.c
      uses function qual_qtype(qtype) defined in qtype.c
   function isassignment(binary) in line 2706
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
      uses variable AST_binary::kind defined in AST_defs.h
      uses enumvalue kind_plus_assign defined in AST_types.h
      uses enumvalue kind_minus_assign defined in AST_types.h
      uses enumvalue kind_modulo_assign defined in AST_types.h
      uses enumvalue kind_lshift_assign defined in AST_types.h
      uses enumvalue kind_rshift_assign defined in AST_types.h
      uses enumvalue kind_times_assign defined in AST_types.h
      uses enumvalue kind_divide_assign defined in AST_types.h
      uses enumvalue kind_bitand_assign defined in AST_types.h
      uses enumvalue kind_bitor_assign defined in AST_types.h
      uses enumvalue kind_bitxor_assign defined in AST_types.h
      uses enumvalue kind_assign defined in AST_types.h
   function enforce_var_decl_restrict(variable_decl,effect,qtype) in line 3163
      protection public
      24 lines of code
      3 parameters
      3 conditional paths
      uses variable AST_variable_decl::rinfo defined in AST_defs.h
      uses function mknin_effect(location,effect,effect) defined in effect.c
      uses variable AST_variable_decl::loc defined in AST_defs.h
      uses variable Rinfo::flocs defined in analyze.h
      uses variable einfo::eff defined in flow.c
      uses variable einfo::qt defined in flow.c
      uses macro definition NULL defined in config.h
      uses function eq_effect(effect,effect) defined in effect.c
      uses variable Rinfo::rlocs defined in analyze.h
      uses variable effect_empty defined in effect.c
      uses function mknin_effect_qtype(location,effect,qtype) defined in qtype.c
      uses function effect_union(effect,effect) defined in effect.c
      uses variable AST_variable_decl::arg1_eff defined in AST_defs.h
   variable einfo::eff in line 38
      protection public
   variable einfo::false_out in line 52
      protection public
   variable einfo::ismalloc in line 39
      protection public
   variable einfo::out in line 50
      protection public
   variable einfo::qt in line 37
      protection public
   variable einfo::true_out in line 51
      protection public
   variable sinfo::eff in line 43
      protection public
   variable sinfo::out in line 59
      protection public
   variable dinfo::alocs in line 48
      protection public
   variable dinfo::drinfolist in line 49
      protection public
   variable dinfo::eff in line 47
      protection public
   variable dinfo::out in line 63
      protection public
   variable operator::name in line 436
      protection public
   variable operator::qt in line 438
      protection public
   variable operator::sig in line 437
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cqual/cqual-0.981/src/analyze.h
module analyze.h
   typedef traverse_global_fn in line 95
      protection public
   variable current_function_decl in line 68
      protection public
   variable have_stream_quals in line 113
      protection public
   variable open_unchecked_qual in line 114
      protection public
   variable read_unchecked_qual in line 115
      protection public
   variable write_unchecked_qual in line 116
      protection public
   variable readwrite_unchecked_qual in line 117
      protection public
   variable open_qual in line 118
      protection public
   variable read_qual in line 119
      protection public
   variable write_qual in line 120
      protection public
   variable readwrite_qual in line 121
      protection public
   variable closed_qual in line 122
      protection public
   variable have_sleepy_quals in line 123
      protection public
   variable enabled_qual in line 124
      protection public
   variable disabled_qual in line 125
      protection public
   variable interrupt_status_qtype in line 126
      protection public
   function analyze(declaration) in line 62
      protection public
      26 lines of code
      1 parameters
      1 conditional paths
      uses function dd_new_list(region) defined in dd_list.c
      uses variable parse_region defined in c-parse.h
      uses variable interrupt_status_qtype defined in analyze.c
      uses macro definition NULL defined in config.h
      uses function unparse_start(FILE *) defined in analyze.c
      uses function pam_add_file(const char *) defined in pam.c
      uses variable AST_declaration::loc defined in AST_defs.h
      uses variable Location::filename defined in location.h
      uses function AST_set_parents(node) defined in AST.c
      uses macro definition CAST defined in AST.h
      uses macro definition scan_declaration defined in AST_defs.h
      uses function mkleq_effect(effect,effect) defined in effect.c
      uses variable dinfo::eff defined in flow.c
      uses variable dinfo::alocs defined in flow.c
   function analyze_field_declaration(const char *,field_declaration) in line 63
      protection public
      13 lines of code
      2 parameters
      2 conditional paths
      uses function get_fdecl_qtype(const char *,field_declaration) defined in qtype.c
      uses variable operator::name defined in analyze.c
      uses variable flag_pam_mode defined in flags.h
      uses variable flag_print_results defined in flags.h
      uses variable field_declaration::name defined in decls.h
      uses variable field_declaration::ast defined in decls.h
      uses variable AST_field_decl::declarator defined in AST_defs.h
      uses function mkleq_effect(effect,effect) defined in effect.c
      uses function defn_effect_qtype(qtype) defined in qtype.c
      uses function effect_single(aloc) defined in effect.c
      uses function aloc_qtype(qtype) defined in qtype.c
   function analyze_tag_ref(tag_ref) in line 64
      protection public
      29 lines of code
      1 parameters
      4 conditional paths
      uses macro definition is_struct_ref defined in AST_types.h
      uses macro definition is_union_ref defined in AST_types.h
      uses macro definition scan_declaration defined in AST_defs.h
      uses variable AST_tag_ref::fields defined in AST_defs.h
      uses macro definition CAST defined in AST.h
      uses function root_ddecl(data_declaration) defined in analyze.c
      uses variable AST_enumerator::ddecl defined in AST_defs.h
      uses variable data_declaration::qtype defined in decls.h
      uses function __add_ddecl_qtype(data_declaration,bool) defined in analyze.c
      uses macro definition FALSE defined in bool.h
      uses variable flag_pam_mode defined in flags.h
      uses variable flag_print_results defined in flags.h
      uses function pam_add_overlay_file(location,const char *,qtype) defined in pam.c
      uses variable AST_enumerator::loc defined in AST_defs.h
      uses variable AST_enumerator::cstring defined in AST_defs.h
      uses variable cstring::data defined in cstring.h
   function init_analyze(void) in line 65
      protection public
      16 lines of code
      1 parameters
      2 conditional paths
      uses function make_string_hash_table(region,int) defined in hash.c
      uses variable parse_region defined in c-parse.h
      uses macro definition NULL defined in config.h
      uses variable current_function_decl defined in analyze.h
      uses function effect_var(const char *) defined in effect.c
      uses function dd_new_list(region) defined in dd_list.c
      uses variable restrict_qual defined in quals.c
      uses function fail(const char *,...) defined in utils.c
      uses enumvalue state_init defined in analyze.c
   function finish_analyze(void) in line 66
      protection public
      36 lines of code
      1 parameters
      4 conditional paths
      uses variable flag_pam_mode defined in flags.h
      uses variable flag_flow_sensitive defined in flags.h
      uses function traverse_globals(void(*)(data_declaration, void *),void *) defined in analyze.c
      uses function warn_if_dangerous_global(data_declaration,store) defined in analyze.c
      uses macro definition NULL defined in config.h
      uses variable init_qual defined in quals.c
      uses variable noninit_qual defined in quals.c
      uses macro definition dd_scan defined in dd_list.h
      uses function root_ddecl(data_declaration) defined in analyze.c
      uses macro definition DD_GET defined in dd_list.h
      uses function leq_qual(qual,qual) defined in quals.c
      uses function qual_qtype(qtype) defined in qtype.c
      uses variable data_declaration::qtype defined in decls.h
      uses function has_ub_qual(qual,qual) defined in quals.c
      uses variable data_declaration::isinline defined in decls.h
      uses variable data_declaration::addresstaken defined in decls.h
      uses function report_qerror(location,severity,const char *,...) defined in analyze.c
      uses function location_declaration(declaration) defined in analyze.c
      uses variable data_declaration::ast defined in decls.h
      uses enumvalue sev_info defined in qerror.h
      uses function qtype_function(qtype) defined in qtype.c
      uses variable data_declaration::name defined in decls.h
      uses function check_nin(void) defined in effect.c
      uses enumvalue state_finish defined in analyze.c
   function report_qerror(location,severity,const char *,...) in line 77
      protection public
      7 lines of code
      4 parameters
      1 conditional paths
      uses function vreport_qerror(location,severity,const char *,va_list) defined in analyze.c
   function location_declaration(declaration) in line 79
      protection public
      46 lines of code
      1 parameters
      9 conditional paths
      uses variable AST_declaration::kind defined in AST_defs.h
      uses enumvalue kind_variable_decl defined in AST_types.h
      uses macro definition CAST defined in AST.h
      uses function location_declarator(declarator) defined in analyze.c
      uses variable AST_variable_decl::declarator defined in AST_defs.h
      uses enumvalue kind_oldidentifier_decl defined in AST_types.h
      uses variable AST_declaration::loc defined in AST_defs.h
      uses enumvalue kind_function_decl defined in AST_types.h
      uses variable AST_function_decl::declarator defined in AST_defs.h
      uses enumvalue kind_field_decl defined in AST_types.h
      uses variable AST_field_decl::declarator defined in AST_defs.h
      uses variable AST_field_decl::loc defined in AST_defs.h
      uses enumvalue kind_enumerator defined in AST_types.h
      uses variable AST_enumerator::loc defined in AST_defs.h
      uses enumvalue kind_implicit_decl defined in AST_types.h
      uses enumvalue kind_error_decl defined in AST_types.h
      uses macro definition fail_loc defined in cqual.h
   function root_ddecl(data_declaration) in line 80
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses variable data_declaration::shadowed defined in decls.h
   function static_ddecl(data_declaration) in line 81
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses function root_ddecl(data_declaration) defined in analyze.c
      uses variable data_declaration::kind defined in decls.h
      uses enumvalue decl_variable defined in decls.h
      uses variable data_declaration::vtype defined in decls.h
      uses enumvalue decl_function defined in decls.h
      uses variable data_declaration::ftype defined in decls.h
   function get_id_declarator(declarator) in line 82
      protection public
      32 lines of code
      1 parameters
      5 conditional paths
      uses variable AST_declarator::kind defined in AST_defs.h
      uses enumvalue kind_function_declarator defined in AST_types.h
      uses macro definition CAST defined in AST.h
      uses function get_id_declarator(declarator) defined in analyze.c
      uses variable AST_function_declarator::declarator defined in AST_defs.h
      uses enumvalue kind_pointer_declarator defined in AST_types.h
      uses variable AST_pointer_declarator::declarator defined in AST_defs.h
      uses enumvalue kind_array_declarator defined in AST_types.h
      uses variable AST_array_declarator::declarator defined in AST_defs.h
      uses enumvalue kind_identifier_declarator defined in AST_types.h
      uses macro definition fail_loc defined in cqual.h
      uses variable AST_declarator::loc defined in AST_defs.h
   function is_undefined_global(data_declaration,store) in line 85
      protection public
      11 lines of code
      2 parameters
      1 conditional paths
      uses function root_ddecl(data_declaration) defined in analyze.c
      uses variable data_declaration::isused defined in decls.h
      uses variable data_declaration::defined defined in decls.h
      uses function nontriv_soln_qtype(qtype,store) defined in qtype.c
      uses variable data_declaration::qtype defined in decls.h
      uses macro definition NULL defined in config.h
      uses variable flag_flow_sensitive defined in flags.h
   function is_unannotated_global(data_declaration,store) in line 89
      protection public
      10 lines of code
      2 parameters
      1 conditional paths
      uses function root_ddecl(data_declaration) defined in analyze.c
      uses function is_undefined_global(data_declaration,store) defined in analyze.c
      uses variable data_declaration::isused defined in decls.h
      uses function qtype_function(qtype) defined in qtype.c
      uses variable data_declaration::qtype defined in decls.h
      uses function qtype_varargs(qtype) defined in qtype.c
      uses variable data_declaration::in_prelude defined in decls.h
   function warn_if_dangerous_global(data_declaration,store) in line 93
      protection public
      10 lines of code
      2 parameters
      3 conditional paths
      uses function is_undefined_global(data_declaration,store) defined in analyze.c
      uses function report_qerror(location,severity,const char *,...) defined in analyze.c
      uses function location_declaration(declaration) defined in analyze.c
      uses variable data_declaration::ast defined in decls.h
      uses enumvalue sev_err defined in qerror.h
      uses variable data_declaration::name defined in decls.h
      uses function is_unannotated_global(data_declaration,store) defined in analyze.c
      uses enumvalue sev_info defined in qerror.h
   function traverse_globals(traverse_global_fn,void *) in line 98
      protection public
      13 lines of code
      2 parameters
      2 conditional paths
      uses function hash_table_scan(hash_table,hash_table_scanner *) defined in hash.c
      uses function hash_table_next(hash_table_scanner *,hash_key *,hash_data *) defined in hash.c
      uses macro definition NULL defined in config.h
      uses variable data_declaration::shadowed defined in decls.h
      uses function f(char *) defined in taint-const-subtyping.c
   function get_global_effect(void) in line 101
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses enumvalue state_finish defined in analyze.c
   function get_main_ddecl(void) in line 104
      protection public
      10 lines of code
      1 parameters
      2 conditional paths
      uses enumvalue state_finish defined in analyze.c
      uses function hash_table_lookup(hash_table,hash_key,hash_data *) defined in hash.c
      uses variable hash_key defined in hash.h
      uses function root_ddecl(data_declaration) defined in analyze.c
      uses macro definition NULL defined in config.h
   function file_pointer_qtype(qtype) in line 128
      protection public
      13 lines of code
      1 parameters
      2 conditional paths
      uses function qtype_pointer(qtype) defined in qtype.c
      uses variable einfo::qt defined in flow.c
      uses function points_to_qtype(qtype) defined in qtype.c
      uses function qtype_struct(qtype) defined in qtype.c
      uses function tag_name_qtype(qtype) defined in qtype.c
      uses macro definition FALSE defined in bool.h
   variable Rinfo::arg1_eff in line 48
      protection public
   variable Rinfo::flocs in line 40
      protection public
   variable Rinfo::flocs_alloc in line 41
      protection public
   variable Rinfo::fqtype in line 42
      protection public
   variable Rinfo::fs_fqtype in line 43
      protection public
   variable Rinfo::fs_rqtype in line 47
      protection public
   variable Rinfo::isglobal in line 39
      protection public
   variable Rinfo::lin in line 49
      protection public
   variable Rinfo::rlocs in line 44
      protection public
   variable Rinfo::rlocs_alloc in line 45
      protection public
   variable Rinfo::rqtype in line 46
      protection public
   variable Drinfo::effect in line 53
      protection public
   variable Drinfo::expression in line 54
      protection public
   variable Drinfo::fs_qtype in line 57
      protection public
   variable Drinfo::fs_rqtype in line 58
      protection public
   variable Drinfo::location in line 59
      protection public
   variable Drinfo::qtype in line 55
      protection public
   variable Drinfo::rqtype in line 56
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cqual/cqual-0.981/src/array.c
module array.c
   function new_array(region,size_t,size_t,type_t) in line 32
      protection public
      14 lines of code
      4 parameters
      1 conditional paths
      uses macro definition ralloc defined in regions.h
      uses variable array::r defined in array.c
      uses variable array::data defined in array.c
      uses function typed_rarrayalloc(region,size_t,size_t,type_t) defined in regions.c
      uses variable array::elemsize defined in array.c
      uses variable array::elemtype defined in array.c
      uses variable array::nelems defined in array.c
      uses variable array::nalloc defined in array.c
   function array_extend(struct array *,int) in line 47
      protection public
      22 lines of code
      2 parameters
      1 conditional paths
      uses variable array::nelems defined in array.c
      uses variable array::nalloc defined in array.c
      uses function typed_rarrayalloc(region,size_t,size_t,type_t) defined in regions.c
      uses variable array::r defined in array.c
      uses variable array::elemsize defined in array.c
      uses variable array::elemtype defined in array.c
      uses function typed_rarraycopy(void *,void *,size_t,size_t,type_t) defined in regions.c
      uses variable array::data defined in array.c
   function array_reset(struct array *) in line 70
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable array::nelems defined in array.c
   function array_length(struct array *) in line 75
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable array::nelems defined in array.c
   function array_data(struct array *) in line 80
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable array::data defined in array.c
      uses macro definition DEFINE_ARRAY defined in array.h
   variable array::data in line 26
      protection public
   variable array::elemsize in line 27
      protection public
   variable array::elemtype in line 28
      protection public
   variable array::nalloc in line 29
      protection public
   variable array::nelems in line 29
      protection public
   variable array::r in line 25
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cqual/cqual-0.981/src/array.h
module array.h
   macro definition DECLARE_ARRAY in line 34
      protection public
   macro definition DEFINE_ARRAY in line 42
      protection public
   function new_array(region,size_t,size_t,type_t) in line 26
      protection public
      14 lines of code
      4 parameters
      1 conditional paths
      uses macro definition ralloc defined in regions.h
      uses variable array::r defined in array.c
      uses variable array::data defined in array.c
      uses function typed_rarrayalloc(region,size_t,size_t,type_t) defined in regions.c
      uses variable array::elemsize defined in array.c
      uses variable array::elemtype defined in array.c
      uses variable array::nelems defined in array.c
      uses variable array::nalloc defined in array.c
   function array_extend(struct array *,int) in line 28
      protection public
      22 lines of code
      2 parameters
      3 conditional paths
      uses variable array::nelems defined in array.c
      uses variable array::nalloc defined in array.c
      uses function typed_rarrayalloc(region,size_t,size_t,type_t) defined in regions.c
      uses variable array::r defined in array.c
      uses variable array::elemsize defined in array.c
      uses variable array::elemtype defined in array.c
      uses function typed_rarraycopy(void *,void *,size_t,size_t,type_t) defined in regions.c
      uses variable array::data defined in array.c
   function array_reset(struct array *) in line 29
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable array::nelems defined in array.c
   function array_length(struct array *) in line 30
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable array::nelems defined in array.c
   function array_data(struct array *) in line 31
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable array::data defined in array.c
      uses macro definition DEFINE_ARRAY defined in array.h
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cqual/cqual-0.981/src/AST.c
module AST.c
   variable the_program in line 22
      protection public
   function ast_chain(node,node) in line 24
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
      uses function last_node(node) defined in AST.c
      uses variable AST_node::next defined in AST_defs.h
   function last_node(node) in line 31
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses macro definition NULL defined in config.h
      uses variable AST_node::next defined in AST_defs.h
   function chain_length(node) in line 38
      protection public
      11 lines of code
      1 parameters
      1 conditional paths
      uses variable AST_node::next defined in AST_defs.h
   function ast_reverse(node) in line 50
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
      uses macro definition NULL defined in config.h
      uses variable AST_node::next defined in AST_defs.h
   function insert_before(node sameregion *,node,node) in line 65
      protection public
      7 lines of code
      3 parameters
      1 conditional paths
      uses variable List::next defined in profile.c
      uses variable AST_node::next defined in AST_defs.h
   function newkind_unary(region,ast_kind,location,expression) in line 74
      protection public
      8 lines of code
      4 parameters
      1 conditional paths
      uses function new_unary(region,location,expression) defined in AST_defs.h
      uses variable array::r defined in array.c
      uses variable AST_unary::kind defined in AST_defs.h
   function newkind_binary(region,ast_kind,location,expression,expression) in line 83
      protection public
      14 lines of code
      5 parameters
      1 conditional paths
      uses enumvalue kind_assign defined in AST_types.h
      uses macro definition CAST defined in AST.h
      uses function new_assign(region,location,expression,expression) defined in AST_defs.h
      uses variable array::r defined in array.c
      uses function new_binary(region,location,expression,expression) defined in AST_defs.h
      uses variable AST_binary::kind defined in AST_defs.h
   function newkind_tag_ref(region,ast_kind,location,word,attribute,declaration,bool) in line 98
      protection public
      8 lines of code
      7 parameters
      1 conditional paths
      uses function new_tag_ref(region,location,word,attribute,declaration,bool) defined in AST_defs.h
      uses variable array::r defined in array.c
      uses variable AST_tag_ref::kind defined in AST_defs.h
   function AST_set_parent(node sameregion *,node) in line 111
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function set_parent(node sameregion *,node) in line 116
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function set_parent_list(node sameregion *,node) in line 121
      protection public
      8 lines of code
      2 parameters
      2 conditional paths
      uses function set_parent(node sameregion *,node) defined in AST.c
      uses variable List::next defined in profile.c
      uses function AST_set_parent_list(void *,node) defined in AST.c
   function AST_set_parent_list(void *,node) in line 130
      protection public
      10 lines of code
      2 parameters
      2 conditional paths
      uses macro definition CASTSRPTR defined in AST.h
      uses function AST_set_parent1(node sameregion *,node) defined in AST.c
   function AST_set_parent1(node sameregion *,node) in line 132
      protection public
      23 lines of code
      2 parameters
      2 conditional paths
      uses function AST_set_parent(node sameregion *,node) defined in AST.c
      uses variable AST_node::kind defined in AST_defs.h
   function AST_set_parents(node) in line 167
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function AST_set_parent_list(void *,node) defined in AST.c
      uses macro definition NULL defined in config.h
      uses function AST_print_list(int,void *) defined in AST.c
   function AST_print_list(int,void *) in line 173
      protection public
      10 lines of code
      2 parameters
      2 conditional paths
      uses macro definition CAST defined in AST.h
      uses function AST_print1(int,node) defined in AST.c
      uses variable AST_node::next defined in AST_defs.h
   function pindent(int) in line 175
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
   function AST_print1(int,node) in line 183
      protection public
      71 lines of code
      2 parameters
      8 conditional paths
      uses function pindent(int) defined in AST.c
      uses variable AST_node::kind defined in AST_defs.h
      uses enumvalue kind_identifier defined in AST_types.h
      uses macro definition CAST defined in AST.h
      uses function printf(const char *$NONYEAR,(null)) defined in rcs1.c
      uses variable AST_identifier::ddecl defined in AST_defs.h
      uses variable data_declaration::name defined in decls.h
      uses enumvalue kind_lexical_cst defined in AST_types.h
      uses variable AST_lexical_cst::cstring defined in AST_defs.h
      uses variable cstring::data defined in cstring.h
      uses enumvalue kind_string_cst defined in AST_types.h
      uses variable AST_string_cst::cstring defined in AST_defs.h
      uses enumvalue kind_id_label defined in AST_types.h
      uses variable AST_id_label::cstring defined in AST_defs.h
      uses enumvalue kind_identifier_declarator defined in AST_types.h
      uses variable AST_identifier_declarator::cstring defined in AST_defs.h
      uses enumvalue kind_word defined in AST_types.h
      uses variable AST_word::cstring defined in AST_defs.h
      uses enumvalue kind_rid defined in AST_types.h
      uses function rid_name(rid) defined in semantics.c
   function AST_print(node) in line 266
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses function AST_print_list(int,void *) defined in AST.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cqual/cqual-0.981/src/AST.h
module AST.h
   macro definition CAST in line 56
      protection public
   macro definition CASTPTR in line 57
      protection public
   macro definition CASTSRPTR in line 58
      protection public
   macro definition AST_SET in line 77
      protection public
   macro definition AST_SET_FIELD in line 80
      protection public
   macro definition AST_SET_NEXT in line 83
      protection public
   macro definition AST_REPLACE in line 86
      protection public
   enumeration @1 in line 39
      protection public
   variable id_declaration_list in line 26
      protection public
   typedef typelist in line 27
      protection public
   typedef type in line 28
      protection public
   typedef ast_generic in line 48
      protection public
   variable the_program in line 61
      protection public
   enumvalue struct_type in line 39
      protection public
   enumvalue union_type in line 39
      protection public
   enumvalue enum_type in line 39
      protection public
   function newkind_unary(region,ast_kind,location,expression) in line 63
      protection public
      8 lines of code
      4 parameters
      1 conditional paths
      uses function new_unary(region,location,expression) defined in AST_defs.h
      uses variable array::r defined in array.c
      uses variable AST_unary::kind defined in AST_defs.h
   function newkind_binary(region,ast_kind,location,expression,expression) in line 64
      protection public
      14 lines of code
      5 parameters
      2 conditional paths
      uses enumvalue kind_assign defined in AST_types.h
      uses macro definition CAST defined in AST.h
      uses function new_assign(region,location,expression,expression) defined in AST_defs.h
      uses variable array::r defined in array.c
      uses function new_binary(region,location,expression,expression) defined in AST_defs.h
      uses variable AST_binary::kind defined in AST_defs.h
   function newkind_tag_ref(region,ast_kind,location,word,attribute,declaration,bool) in line 66
      protection public
      8 lines of code
      7 parameters
      1 conditional paths
      uses function new_tag_ref(region,location,word,attribute,declaration,bool) defined in AST_defs.h
      uses variable array::r defined in array.c
      uses variable AST_tag_ref::kind defined in AST_defs.h
   function last_node(node) in line 67
      protection public
      6 lines of code
      1 parameters
      3 conditional paths
      uses macro definition NULL defined in config.h
      uses variable AST_node::next defined in AST_defs.h
   function chain_length(node) in line 68
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses variable AST_node::next defined in AST_defs.h
   function ast_chain(node,node) in line 69
      protection public
      6 lines of code
      2 parameters
      2 conditional paths
      uses function last_node(node) defined in AST.c
      uses variable AST_node::next defined in AST_defs.h
   function insert_before(node sameregion *,node,node) in line 70
      protection public
      7 lines of code
      3 parameters
      2 conditional paths
      uses variable List::next defined in profile.c
      uses variable AST_node::next defined in AST_defs.h
   function ast_reverse(node) in line 71
      protection public
      14 lines of code
      1 parameters
      3 conditional paths
      uses macro definition NULL defined in config.h
      uses variable AST_node::next defined in AST_defs.h
   function AST_set_parents(node) in line 73
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses macro definition NULL defined in config.h
   function AST_print(node) in line 75
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   variable AST_ast_generic::kind in line 47
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cqual/cqual-0.981/src/AST_defs.h
module AST_defs.h
   macro definition scan_node in line 1159
      protection public
   macro definition scan_declaration in line 1161
      protection public
   macro definition scan_statement in line 1163
      protection public
   macro definition scan_expression in line 1165
      protection public
   macro definition scan_type_element in line 1167
      protection public
   macro definition scan_declarator in line 1169
      protection public
   macro definition scan_label in line 1171
      protection public
   macro definition scan_asm_decl in line 1173
      protection public
   macro definition scan_data_decl in line 1175
      protection public
   macro definition scan_extension_decl in line 1177
      protection public
   macro definition scan_ellipsis_decl in line 1179
      protection public
   macro definition scan_enumerator in line 1181
      protection public
   macro definition scan_oldidentifier_decl in line 1183
      protection public
   macro definition scan_function_decl in line 1185
      protection public
   macro definition scan_implicit_decl in line 1187
      protection public
   macro definition scan_variable_decl in line 1189
      protection public
   macro definition scan_field_decl in line 1191
      protection public
   macro definition scan_asttype in line 1193
      protection public
   macro definition scan_typename in line 1195
      protection public
   macro definition scan_type_variable in line 1197
      protection public
   macro definition scan_typeof_expr in line 1199
      protection public
   macro definition scan_typeof_type in line 1201
      protection public
   macro definition scan_attribute in line 1203
      protection public
   macro definition scan_rid in line 1205
      protection public
   macro definition scan_user_qual in line 1207
      protection public
   macro definition scan_qualifier in line 1209
      protection public
   macro definition scan_tag_ref in line 1211
      protection public
   macro definition scan_function_declarator in line 1213
      protection public
   macro definition scan_pointer_declarator in line 1215
      protection public
   macro definition scan_array_declarator in line 1217
      protection public
   macro definition scan_identifier_declarator in line 1219
      protection public
   macro definition scan_asm_stmt in line 1221
      protection public
   macro definition scan_compound_stmt in line 1223
      protection public
   macro definition scan_if_stmt in line 1225
      protection public
   macro definition scan_labeled_stmt in line 1227
      protection public
   macro definition scan_expression_stmt in line 1229
      protection public
   macro definition scan_breakable_stmt in line 1231
      protection public
   macro definition scan_conditional_stmt in line 1233
      protection public
   macro definition scan_switch_stmt in line 1235
      protection public
   macro definition scan_for_stmt in line 1237
      protection public
   macro definition scan_break_stmt in line 1239
      protection public
   macro definition scan_continue_stmt in line 1241
      protection public
   macro definition scan_return_stmt in line 1243
      protection public
   macro definition scan_goto_stmt in line 1245
      protection public
   macro definition scan_computed_goto_stmt in line 1247
      protection public
   macro definition scan_empty_stmt in line 1249
      protection public
   macro definition scan_assert_type_stmt in line 1251
      protection public
   macro definition scan_change_type_stmt in line 1253
      protection public
   macro definition scan_deep_restrict_stmt in line 1255
      protection public
   macro definition scan_unary in line 1257
      protection public
   macro definition scan_binary in line 1259
      protection public
   macro definition scan_comma in line 1261
      protection public
   macro definition scan_sizeof_type in line 1263
      protection public
   macro definition scan_alignof_type in line 1265
      protection public
   macro definition scan_label_address in line 1267
      protection public
   macro definition scan_cast in line 1269
      protection public
   macro definition scan_cast_list in line 1271
      protection public
   macro definition scan_conditional in line 1273
      protection public
   macro definition scan_identifier in line 1275
      protection public
   macro definition scan_compound_expr in line 1277
      protection public
   macro definition scan_function_call in line 1279
      protection public
   macro definition scan_array_ref in line 1281
      protection public
   macro definition scan_field_ref in line 1283
      protection public
   macro definition scan_init_list in line 1285
      protection public
   macro definition scan_init_index in line 1287
      protection public
   macro definition scan_init_field in line 1289
      protection public
   macro definition scan_known_cst in line 1291
      protection public
   macro definition scan_lexical_cst in line 1293
      protection public
   macro definition scan_string_cst in line 1295
      protection public
   macro definition scan_string in line 1297
      protection public
   macro definition scan_id_label in line 1299
      protection public
   macro definition scan_case_label in line 1301
      protection public
   macro definition scan_default_label in line 1303
      protection public
   macro definition scan_word in line 1305
      protection public
   macro definition scan_asm_operand in line 1307
      protection public
   macro definition scan_error_decl in line 1309
      protection public
   macro definition scan_struct_ref in line 1311
      protection public
   macro definition scan_union_ref in line 1313
      protection public
   macro definition scan_enum_ref in line 1315
      protection public
   macro definition scan_error_stmt in line 1317
      protection public
   macro definition scan_while_stmt in line 1319
      protection public
   macro definition scan_dowhile_stmt in line 1321
      protection public
   macro definition scan_error_expr in line 1323
      protection public
   macro definition scan_dereference in line 1325
      protection public
   macro definition scan_extension_expr in line 1327
      protection public
   macro definition scan_sizeof_expr in line 1329
      protection public
   macro definition scan_alignof_expr in line 1331
      protection public
   macro definition scan_realpart in line 1333
      protection public
   macro definition scan_imagpart in line 1335
      protection public
   macro definition scan_address_of in line 1337
      protection public
   macro definition scan_unary_minus in line 1339
      protection public
   macro definition scan_unary_plus in line 1341
      protection public
   macro definition scan_conjugate in line 1343
      protection public
   macro definition scan_preincrement in line 1345
      protection public
   macro definition scan_predecrement in line 1347
      protection public
   macro definition scan_postincrement in line 1349
      protection public
   macro definition scan_postdecrement in line 1351
      protection public
   macro definition scan_bitnot in line 1353
      protection public
   macro definition scan_not in line 1355
      protection public
   macro definition scan_plus in line 1357
      protection public
   macro definition scan_minus in line 1359
      protection public
   macro definition scan_times in line 1361
      protection public
   macro definition scan_divide in line 1363
      protection public
   macro definition scan_modulo in line 1365
      protection public
   macro definition scan_lshift in line 1367
      protection public
   macro definition scan_rshift in line 1369
      protection public
   macro definition scan_leq in line 1371
      protection public
   macro definition scan_geq in line 1373
      protection public
   macro definition scan_lt in line 1375
      protection public
   macro definition scan_gt in line 1377
      protection public
   macro definition scan_eq in line 1379
      protection public
   macro definition scan_ne in line 1381
      protection public
   macro definition scan_bitand in line 1383
      protection public
   macro definition scan_bitor in line 1385
      protection public
   macro definition scan_bitxor in line 1387
      protection public
   macro definition scan_andand in line 1389
      protection public
   macro definition scan_oror in line 1391
      protection public
   macro definition scan_assign in line 1393
      protection public
   macro definition scan_plus_assign in line 1395
      protection public
   macro definition scan_minus_assign in line 1397
      protection public
   macro definition scan_times_assign in line 1399
      protection public
   macro definition scan_divide_assign in line 1401
      protection public
   macro definition scan_modulo_assign in line 1403
      protection public
   macro definition scan_lshift_assign in line 1405
      protection public
   macro definition scan_rshift_assign in line 1407
      protection public
   macro definition scan_bitand_assign in line 1409
      protection public
   macro definition scan_bitor_assign in line 1411
      protection public
   macro definition scan_bitxor_assign in line 1413
      protection public
   function new_node(region,location) in line 5
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function new_declaration(region,location) in line 6
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function new_statement(region,location) in line 7
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function new_expression(region,location) in line 8
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function new_type_element(region,location) in line 9
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function new_declarator(region,location) in line 10
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function new_label(region,location) in line 11
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function new_asm_decl(region,location,asm_stmt) in line 12
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function new_data_decl(region,location,type_element,attribute,declaration) in line 13
      protection public
      1 lines of code
      5 parameters
      1 conditional paths
   function new_extension_decl(region,location,declaration) in line 14
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function new_ellipsis_decl(region,location,type_element) in line 15
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function new_enumerator(region,location,cstring,expression,data_declaration) in line 16
      protection public
      1 lines of code
      5 parameters
      1 conditional paths
   function new_oldidentifier_decl(region,location,cstring,data_declaration) in line 17
      protection public
      1 lines of code
      4 parameters
      1 conditional paths
   function new_function_decl(region,location,declarator,type_element,attribute,declaration,statement,function_decl,data_declaration) in line 18
      protection public
      1 lines of code
      9 parameters
      1 conditional paths
   function new_implicit_decl(region,location,identifier) in line 19
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function new_variable_decl(region,location,declarator,attribute,expression,asm_stmt,data_declaration) in line 20
      protection public
      1 lines of code
      7 parameters
      1 conditional paths
   function new_field_decl(region,location,declarator,attribute,expression) in line 21
      protection public
      1 lines of code
      5 parameters
      1 conditional paths
   function new_asttype(region,location,declarator,type_element) in line 22
      protection public
      1 lines of code
      4 parameters
      1 conditional paths
   function new_typename(region,location,data_declaration) in line 23
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function new_type_variable(region,location,cstring) in line 24
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function new_typeof_expr(region,location,expression) in line 25
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function new_typeof_type(region,location,asttype) in line 26
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function new_attribute(region,location,word,word,expression) in line 27
      protection public
      1 lines of code
      5 parameters
      1 conditional paths
   function new_rid(region,location,enum rid) in line 28
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function new_user_qual(region,location,cstring) in line 29
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function new_qualifier(region,location,enum rid) in line 30
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function new_tag_ref(region,location,word,attribute,declaration,bool) in line 31
      protection public
      1 lines of code
      6 parameters
      1 conditional paths
   function new_function_declarator(region,location,declarator,declaration,type_element,environment) in line 32
      protection public
      1 lines of code
      6 parameters
      1 conditional paths
   function new_pointer_declarator(region,location,declarator,type_element) in line 33
      protection public
      1 lines of code
      4 parameters
      1 conditional paths
   function new_array_declarator(region,location,declarator,expression) in line 34
      protection public
      1 lines of code
      4 parameters
      1 conditional paths
   function new_identifier_declarator(region,location,cstring) in line 35
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function new_asm_stmt(region,location,expression,asm_operand,asm_operand,string,type_element) in line 36
      protection public
      1 lines of code
      7 parameters
      1 conditional paths
   function new_compound_stmt(region,location,id_label,declaration,statement,environment) in line 37
      protection public
      1 lines of code
      6 parameters
      1 conditional paths
   function new_if_stmt(region,location,expression,statement,statement) in line 38
      protection public
      1 lines of code
      5 parameters
      1 conditional paths
   function new_labeled_stmt(region,location,label,statement) in line 39
      protection public
      1 lines of code
      4 parameters
      1 conditional paths
   function new_expression_stmt(region,location,expression) in line 40
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function new_breakable_stmt(region,location) in line 41
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function new_conditional_stmt(region,location,expression,statement) in line 42
      protection public
      1 lines of code
      4 parameters
      1 conditional paths
   function new_switch_stmt(region,location,expression,statement) in line 43
      protection public
      1 lines of code
      4 parameters
      1 conditional paths
   function new_for_stmt(region,location,expression,expression,expression,statement) in line 44
      protection public
      1 lines of code
      6 parameters
      1 conditional paths
   function new_break_stmt(region,location) in line 45
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function new_continue_stmt(region,location) in line 46
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function new_return_stmt(region,location,expression) in line 47
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function new_goto_stmt(region,location,id_label) in line 48
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function new_computed_goto_stmt(region,location,expression) in line 49
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function new_empty_stmt(region,location) in line 50
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function new_assert_type_stmt(region,location,expression,asttype) in line 51
      protection public
      1 lines of code
      4 parameters
      1 conditional paths
   function new_change_type_stmt(region,location,expression,asttype) in line 52
      protection public
      1 lines of code
      4 parameters
      1 conditional paths
   function new_deep_restrict_stmt(region,location,expression,statement) in line 53
      protection public
      1 lines of code
      4 parameters
      1 conditional paths
   function new_unary(region,location,expression) in line 54
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function new_binary(region,location,expression,expression) in line 55
      protection public
      1 lines of code
      4 parameters
      1 conditional paths
   function new_comma(region,location,expression) in line 56
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function new_sizeof_type(region,location,asttype) in line 57
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function new_alignof_type(region,location,asttype) in line 58
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function new_label_address(region,location,id_label) in line 59
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function new_cast(region,location,expression,asttype) in line 60
      protection public
      1 lines of code
      4 parameters
      1 conditional paths
   function new_cast_list(region,location,asttype,expression) in line 61
      protection public
      1 lines of code
      4 parameters
      1 conditional paths
   function new_conditional(region,location,expression,expression,expression) in line 62
      protection public
      1 lines of code
      5 parameters
      1 conditional paths
   function new_identifier(region,location,cstring,data_declaration) in line 63
      protection public
      1 lines of code
      4 parameters
      1 conditional paths
   function new_compound_expr(region,location,statement) in line 64
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function new_function_call(region,location,expression,expression,asttype) in line 65
      protection public
      1 lines of code
      5 parameters
      1 conditional paths
   function new_array_ref(region,location,expression,expression) in line 66
      protection public
      1 lines of code
      4 parameters
      1 conditional paths
   function new_field_ref(region,location,expression,cstring,location) in line 67
      protection public
      1 lines of code
      5 parameters
      1 conditional paths
   function new_init_list(region,location,expression) in line 68
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function new_init_index(region,location,expression,expression,expression) in line 69
      protection public
      1 lines of code
      5 parameters
      1 conditional paths
   function new_init_field(region,location,word,expression) in line 70
      protection public
      1 lines of code
      4 parameters
      1 conditional paths
   function new_known_cst(region,location,cval) in line 71
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function new_lexical_cst(region,location,cstring) in line 72
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function new_string_cst(region,location,cstring,wchar_t *,size_t) in line 73
      protection public
      1 lines of code
      5 parameters
      1 conditional paths
   function new_string(region,location,expression,data_declaration) in line 74
      protection public
      1 lines of code
      4 parameters
      1 conditional paths
   function new_id_label(region,location,cstring) in line 75
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function new_case_label(region,location,expression,expression) in line 76
      protection public
      1 lines of code
      4 parameters
      1 conditional paths
   function new_default_label(region,location) in line 77
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function new_word(region,location,cstring) in line 78
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function new_asm_operand(region,location,string,expression) in line 79
      protection public
      1 lines of code
      4 parameters
      1 conditional paths
   function new_error_decl(region,location) in line 80
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function new_struct_ref(region,location,word,attribute,declaration,bool) in line 81
      protection public
      1 lines of code
      6 parameters
      1 conditional paths
   function new_union_ref(region,location,word,attribute,declaration,bool) in line 82
      protection public
      1 lines of code
      6 parameters
      1 conditional paths
   function new_enum_ref(region,location,word,attribute,declaration,bool) in line 83
      protection public
      1 lines of code
      6 parameters
      1 conditional paths
   function new_error_stmt(region,location) in line 84
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function new_while_stmt(region,location,expression,statement) in line 85
      protection public
      1 lines of code
      4 parameters
      1 conditional paths
   function new_dowhile_stmt(region,location,expression,statement) in line 86
      protection public
      1 lines of code
      4 parameters
      1 conditional paths
   function new_error_expr(region,location) in line 87
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function new_dereference(region,location,expression) in line 88
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function new_extension_expr(region,location,expression) in line 89
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function new_sizeof_expr(region,location,expression) in line 90
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function new_alignof_expr(region,location,expression) in line 91
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function new_realpart(region,location,expression) in line 92
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function new_imagpart(region,location,expression) in line 93
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function new_address_of(region,location,expression) in line 94
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function new_unary_minus(region,location,expression) in line 95
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function new_unary_plus(region,location,expression) in line 96
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function new_conjugate(region,location,expression) in line 97
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function new_preincrement(region,location,expression) in line 98
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function new_predecrement(region,location,expression) in line 99
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function new_postincrement(region,location,expression) in line 100
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function new_postdecrement(region,location,expression) in line 101
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function new_bitnot(region,location,expression) in line 102
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function new_not(region,location,expression) in line 103
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function new_plus(region,location,expression,expression) in line 104
      protection public
      1 lines of code
      4 parameters
      1 conditional paths
   function new_minus(region,location,expression,expression) in line 105
      protection public
      1 lines of code
      4 parameters
      1 conditional paths
   function new_times(region,location,expression,expression) in line 106
      protection public
      1 lines of code
      4 parameters
      1 conditional paths
   function new_divide(region,location,expression,expression) in line 107
      protection public
      1 lines of code
      4 parameters
      1 conditional paths
   function new_modulo(region,location,expression,expression) in line 108
      protection public
      1 lines of code
      4 parameters
      1 conditional paths
   function new_lshift(region,location,expression,expression) in line 109
      protection public
      1 lines of code
      4 parameters
      1 conditional paths
   function new_rshift(region,location,expression,expression) in line 110
      protection public
      1 lines of code
      4 parameters
      1 conditional paths
   function new_leq(region,location,expression,expression) in line 111
      protection public
      1 lines of code
      4 parameters
      1 conditional paths
   function new_geq(region,location,expression,expression) in line 112
      protection public
      1 lines of code
      4 parameters
      1 conditional paths
   function new_lt(region,location,expression,expression) in line 113
      protection public
      1 lines of code
      4 parameters
      1 conditional paths
   function new_gt(region,location,expression,expression) in line 114
      protection public
      1 lines of code
      4 parameters
      1 conditional paths
   function new_eq(region,location,expression,expression) in line 115
      protection public
      1 lines of code
      4 parameters
      1 conditional paths
   function new_ne(region,location,expression,expression) in line 116
      protection public
      1 lines of code
      4 parameters
      1 conditional paths
   function new_bitand(region,location,expression,expression) in line 117
      protection public
      1 lines of code
      4 parameters
      1 conditional paths
   function new_bitor(region,location,expression,expression) in line 118
      protection public
      1 lines of code
      4 parameters
      1 conditional paths
   function new_bitxor(region,location,expression,expression) in line 119
      protection public
      1 lines of code
      4 parameters
      1 conditional paths
   function new_andand(region,location,expression,expression) in line 120
      protection public
      1 lines of code
      4 parameters
      1 conditional paths
   function new_oror(region,location,expression,expression) in line 121
      protection public
      1 lines of code
      4 parameters
      1 conditional paths
   function new_assign(region,location,expression,expression) in line 122
      protection public
      1 lines of code
      4 parameters
      1 conditional paths
   function new_plus_assign(region,location,expression,expression) in line 123
      protection public
      1 lines of code
      4 parameters
      1 conditional paths
   function new_minus_assign(region,location,expression,expression) in line 124
      protection public
      1 lines of code
      4 parameters
      1 conditional paths
   function new_times_assign(region,location,expression,expression) in line 125
      protection public
      1 lines of code
      4 parameters
      1 conditional paths
   function new_divide_assign(region,location,expression,expression) in line 126
      protection public
      1 lines of code
      4 parameters
      1 conditional paths
   function new_modulo_assign(region,location,expression,expression) in line 127
      protection public
      1 lines of code
      4 parameters
      1 conditional paths
   function new_lshift_assign(region,location,expression,expression) in line 128
      protection public
      1 lines of code
      4 parameters
      1 conditional paths
   function new_rshift_assign(region,location,expression,expression) in line 129
      protection public
      1 lines of code
      4 parameters
      1 conditional paths
   function new_bitand_assign(region,location,expression,expression) in line 130
      protection public
      1 lines of code
      4 parameters
      1 conditional paths
   function new_bitor_assign(region,location,expression,expression) in line 131
      protection public
      1 lines of code
      4 parameters
      1 conditional paths
   function new_bitxor_assign(region,location,expression,expression) in line 132
      protection public
      1 lines of code
      4 parameters
      1 conditional paths
   function node_chain(node,node) in line 1158
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function declaration_chain(declaration,declaration) in line 1160
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function statement_chain(statement,statement) in line 1162
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function expression_chain(expression,expression) in line 1164
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function type_element_chain(type_element,type_element) in line 1166
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function declarator_chain(declarator,declarator) in line 1168
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function label_chain(label,label) in line 1170
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function asm_decl_chain(asm_decl,asm_decl) in line 1172
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function data_decl_chain(data_decl,data_decl) in line 1174
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function extension_decl_chain(extension_decl,extension_decl) in line 1176
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function ellipsis_decl_chain(ellipsis_decl,ellipsis_decl) in line 1178
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function enumerator_chain(enumerator,enumerator) in line 1180
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function oldidentifier_decl_chain(oldidentifier_decl,oldidentifier_decl) in line 1182
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function function_decl_chain(function_decl,function_decl) in line 1184
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function implicit_decl_chain(implicit_decl,implicit_decl) in line 1186
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function variable_decl_chain(variable_decl,variable_decl) in line 1188
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function field_decl_chain(field_decl,field_decl) in line 1190
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function asttype_chain(asttype,asttype) in line 1192
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function typename_chain(typename l1,typename l2) in line 1194
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function type_variable_chain(type_variable,type_variable) in line 1196
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function typeof_expr_chain(typeof_expr,typeof_expr) in line 1198
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function typeof_type_chain(typeof_type,typeof_type) in line 1200
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function attribute_chain(attribute,attribute) in line 1202
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function rid_chain(rid,rid) in line 1204
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function user_qual_chain(user_qual,user_qual) in line 1206
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function qualifier_chain(qualifier,qualifier) in line 1208
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function tag_ref_chain(tag_ref,tag_ref) in line 1210
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function function_declarator_chain(function_declarator,function_declarator) in line 1212
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function pointer_declarator_chain(pointer_declarator,pointer_declarator) in line 1214
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function array_declarator_chain(array_declarator,array_declarator) in line 1216
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function identifier_declarator_chain(identifier_declarator,identifier_declarator) in line 1218
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function asm_stmt_chain(asm_stmt,asm_stmt) in line 1220
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function compound_stmt_chain(compound_stmt,compound_stmt) in line 1222
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function if_stmt_chain(if_stmt,if_stmt) in line 1224
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function labeled_stmt_chain(labeled_stmt,labeled_stmt) in line 1226
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function expression_stmt_chain(expression_stmt,expression_stmt) in line 1228
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function breakable_stmt_chain(breakable_stmt,breakable_stmt) in line 1230
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function conditional_stmt_chain(conditional_stmt,conditional_stmt) in line 1232
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function switch_stmt_chain(switch_stmt,switch_stmt) in line 1234
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function for_stmt_chain(for_stmt,for_stmt) in line 1236
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function break_stmt_chain(break_stmt,break_stmt) in line 1238
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function continue_stmt_chain(continue_stmt,continue_stmt) in line 1240
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function return_stmt_chain(return_stmt,return_stmt) in line 1242
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function goto_stmt_chain(goto_stmt,goto_stmt) in line 1244
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function computed_goto_stmt_chain(computed_goto_stmt,computed_goto_stmt) in line 1246
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function empty_stmt_chain(empty_stmt,empty_stmt) in line 1248
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function assert_type_stmt_chain(assert_type_stmt,assert_type_stmt) in line 1250
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function change_type_stmt_chain(change_type_stmt,change_type_stmt) in line 1252
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function deep_restrict_stmt_chain(deep_restrict_stmt,deep_restrict_stmt) in line 1254
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function unary_chain(unary,unary) in line 1256
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function binary_chain(binary,binary) in line 1258
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function comma_chain(comma,comma) in line 1260
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function sizeof_type_chain(sizeof_type,sizeof_type) in line 1262
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function alignof_type_chain(alignof_type,alignof_type) in line 1264
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function label_address_chain(label_address,label_address) in line 1266
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function cast_chain(cast,cast) in line 1268
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function cast_list_chain(cast_list,cast_list) in line 1270
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function conditional_chain(conditional,conditional) in line 1272
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function identifier_chain(identifier,identifier) in line 1274
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function compound_expr_chain(compound_expr,compound_expr) in line 1276
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function function_call_chain(function_call,function_call) in line 1278
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function array_ref_chain(array_ref,array_ref) in line 1280
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function field_ref_chain(field_ref,field_ref) in line 1282
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function init_list_chain(init_list,init_list) in line 1284
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function init_index_chain(init_index,init_index) in line 1286
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function init_field_chain(init_field,init_field) in line 1288
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function known_cst_chain(known_cst,known_cst) in line 1290
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function lexical_cst_chain(lexical_cst,lexical_cst) in line 1292
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function string_cst_chain(string_cst,string_cst) in line 1294
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function string_chain(string,string) in line 1296
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function id_label_chain(id_label,id_label) in line 1298
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function case_label_chain(case_label,case_label) in line 1300
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function default_label_chain(default_label,default_label) in line 1302
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function word_chain(word,word) in line 1304
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function asm_operand_chain(asm_operand,asm_operand) in line 1306
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function error_decl_chain(error_decl,error_decl) in line 1308
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function struct_ref_chain(struct_ref,struct_ref) in line 1310
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function union_ref_chain(union_ref,union_ref) in line 1312
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function enum_ref_chain(enum_ref,enum_ref) in line 1314
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function error_stmt_chain(error_stmt,error_stmt) in line 1316
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function while_stmt_chain(while_stmt,while_stmt) in line 1318
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function dowhile_stmt_chain(dowhile_stmt,dowhile_stmt) in line 1320
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function error_expr_chain(error_expr,error_expr) in line 1322
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function dereference_chain(dereference,dereference) in line 1324
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function extension_expr_chain(extension_expr,extension_expr) in line 1326
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function sizeof_expr_chain(sizeof_expr,sizeof_expr) in line 1328
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function alignof_expr_chain(alignof_expr,alignof_expr) in line 1330
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function realpart_chain(realpart,realpart) in line 1332
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function imagpart_chain(imagpart,imagpart) in line 1334
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function address_of_chain(address_of,address_of) in line 1336
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function unary_minus_chain(unary_minus,unary_minus) in line 1338
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function unary_plus_chain(unary_plus,unary_plus) in line 1340
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function conjugate_chain(conjugate,conjugate) in line 1342
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function preincrement_chain(preincrement,preincrement) in line 1344
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function predecrement_chain(predecrement,predecrement) in line 1346
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function postincrement_chain(postincrement,postincrement) in line 1348
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function postdecrement_chain(postdecrement,postdecrement) in line 1350
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function bitnot_chain(bitnot,bitnot) in line 1352
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function not_chain(not,not) in line 1354
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function plus_chain(plus,plus) in line 1356
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function minus_chain(minus,minus) in line 1358
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function times_chain(times,times) in line 1360
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function divide_chain(divide,divide) in line 1362
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function modulo_chain(modulo,modulo) in line 1364
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function lshift_chain(lshift,lshift) in line 1366
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function rshift_chain(rshift,rshift) in line 1368
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function leq_chain(leq,leq) in line 1370
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function geq_chain(geq,geq) in line 1372
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function lt_chain(lt,lt) in line 1374
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function gt_chain(gt,gt) in line 1376
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function eq_chain(eq,eq) in line 1378
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function ne_chain(ne,ne) in line 1380
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function bitand_chain(bitand,bitand) in line 1382
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function bitor_chain(bitor,bitor) in line 1384
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function bitxor_chain(bitxor,bitxor) in line 1386
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function andand_chain(andand,andand) in line 1388
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function oror_chain(oror,oror) in line 1390
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function assign_chain(assign,assign) in line 1392
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function plus_assign_chain(plus_assign,plus_assign) in line 1394
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function minus_assign_chain(minus_assign,minus_assign) in line 1396
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function times_assign_chain(times_assign,times_assign) in line 1398
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function divide_assign_chain(divide_assign,divide_assign) in line 1400
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function modulo_assign_chain(modulo_assign,modulo_assign) in line 1402
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function lshift_assign_chain(lshift_assign,lshift_assign) in line 1404
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function rshift_assign_chain(rshift_assign,rshift_assign) in line 1406
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function bitand_assign_chain(bitand_assign,bitand_assign) in line 1408
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function bitor_assign_chain(bitor_assign,bitor_assign) in line 1410
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function bitxor_assign_chain(bitxor_assign,bitxor_assign) in line 1412
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   variable AST_node::kind in line 137
      protection public
   variable AST_node::loc in line 138
      protection public
   variable AST_node::next in line 139
      protection public
   variable AST_node::parent in line 140
      protection public
   variable AST_declaration::kind in line 145
      protection public
   variable AST_declaration::loc in line 146
      protection public
   variable AST_declaration::next in line 147
      protection public
   variable AST_declaration::parent in line 148
      protection public
   variable AST_statement::kind in line 153
      protection public
   variable AST_statement::loc in line 154
      protection public
   variable AST_statement::next in line 155
      protection public
   variable AST_statement::parent in line 156
      protection public
   variable AST_expression::bitfield in line 177
      protection public
   variable AST_expression::cst in line 176
      protection public
   variable AST_expression::drinfo in line 181
      protection public
   variable AST_expression::isregister in line 178
      protection public
   variable AST_expression::kind in line 169
      protection public
   variable AST_expression::loc in line 170
      protection public
   variable AST_expression::lvalue in line 174
      protection public
   variable AST_expression::next in line 171
      protection public
   variable AST_expression::parent in line 172
      protection public
   variable AST_expression::qtype in line 180
      protection public
   variable AST_expression::side_effects in line 175
      protection public
   variable AST_expression::static_address in line 179
      protection public
   variable AST_expression::type in line 173
      protection public
   variable AST_type_element::kind in line 186
      protection public
   variable AST_type_element::loc in line 187
      protection public
   variable AST_type_element::next in line 188
      protection public
   variable AST_type_element::parent in line 189
      protection public
   variable AST_declarator::kind in line 194
      protection public
   variable AST_declarator::loc in line 195
      protection public
   variable AST_declarator::next in line 196
      protection public
   variable AST_declarator::parent in line 197
      protection public
   variable AST_label::enclosing_cs in line 209
      protection public
   variable AST_label::kind in line 204
      protection public
   variable AST_label::loc in line 205
      protection public
   variable AST_label::next in line 206
      protection public
   variable AST_label::next_label in line 208
      protection public
   variable AST_label::parent in line 207
      protection public
   variable AST_label::store_in in line 210
      protection public
   variable AST_asm_decl::asm_stmt in line 219
      protection public
   variable AST_asm_decl::kind in line 215
      protection public
   variable AST_asm_decl::loc in line 216
      protection public
   variable AST_asm_decl::next in line 217
      protection public
   variable AST_asm_decl::parent in line 218
      protection public
   variable AST_data_decl::attributes in line 230
      protection public
   variable AST_data_decl::decls in line 231
      protection public
   variable AST_data_decl::kind in line 225
      protection public
   variable AST_data_decl::loc in line 226
      protection public
   variable AST_data_decl::modifiers in line 229
      protection public
   variable AST_data_decl::next in line 227
      protection public
   variable AST_data_decl::parent in line 228
      protection public
   variable AST_extension_decl::decl in line 240
      protection public
   variable AST_extension_decl::kind in line 236
      protection public
   variable AST_extension_decl::loc in line 237
      protection public
   variable AST_extension_decl::next in line 238
      protection public
   variable AST_extension_decl::parent in line 239
      protection public
   variable AST_ellipsis_decl::kind in line 245
      protection public
   variable AST_ellipsis_decl::loc in line 246
      protection public
   variable AST_ellipsis_decl::next in line 247
      protection public
   variable AST_ellipsis_decl::parent in line 248
      protection public
   variable AST_ellipsis_decl::qualifiers in line 249
      protection public
   variable AST_enumerator::arg1 in line 259
      protection public
   variable AST_enumerator::cstring in line 258
      protection public
   variable AST_enumerator::ddecl in line 260
      protection public
   variable AST_enumerator::kind in line 254
      protection public
   variable AST_enumerator::loc in line 255
      protection public
   variable AST_enumerator::next in line 256
      protection public
   variable AST_enumerator::parent in line 257
      protection public
   variable AST_oldidentifier_decl::cstring in line 269
      protection public
   variable AST_oldidentifier_decl::ddecl in line 270
      protection public
   variable AST_oldidentifier_decl::kind in line 265
      protection public
   variable AST_oldidentifier_decl::loc in line 266
      protection public
   variable AST_oldidentifier_decl::next in line 267
      protection public
   variable AST_oldidentifier_decl::parent in line 268
      protection public
   variable AST_function_decl::attributes in line 282
      protection public
   variable AST_function_decl::base_labels in line 290
      protection public
   variable AST_function_decl::current_loop in line 292
      protection public
   variable AST_function_decl::ddecl in line 286
      protection public
   variable AST_function_decl::declarator in line 280
      protection public
   variable AST_function_decl::declared_type in line 288
      protection public
   variable AST_function_decl::fdeclarator in line 287
      protection public
   variable AST_function_decl::kind in line 276
      protection public
   variable AST_function_decl::loc in line 277
      protection public
   variable AST_function_decl::next in line 278
      protection public
   variable AST_function_decl::nlocals in line 293
      protection public
   variable AST_function_decl::old_parms in line 283
      protection public
   variable AST_function_decl::parent in line 279
      protection public
   variable AST_function_decl::parent_function in line 285
      protection public
   variable AST_function_decl::qualifiers in line 281
      protection public
   variable AST_function_decl::scope_env in line 294
      protection public
   variable AST_function_decl::scoped_labels in line 291
      protection public
   variable AST_function_decl::stmt in line 284
      protection public
   variable AST_function_decl::undeclared_variables in line 289
      protection public
   variable AST_implicit_decl::ident in line 304
      protection public
   variable AST_implicit_decl::kind in line 300
      protection public
   variable AST_implicit_decl::loc in line 301
      protection public
   variable AST_implicit_decl::next in line 302
      protection public
   variable AST_implicit_decl::parent in line 303
      protection public
   variable AST_variable_decl::arg1 in line 320
      protection public
   variable AST_variable_decl::arg1_eff in line 324
      protection public
   variable AST_variable_decl::asm_stmt in line 321
      protection public
   variable AST_variable_decl::attributes in line 319
      protection public
   variable AST_variable_decl::ddecl in line 322
      protection public
   variable AST_variable_decl::declarator in line 318
      protection public
   variable AST_variable_decl::declared_type in line 323
      protection public
   variable AST_variable_decl::drinfo in line 326
      protection public
   variable AST_variable_decl::kind in line 314
      protection public
   variable AST_variable_decl::loc in line 315
      protection public
   variable AST_variable_decl::next in line 316
      protection public
   variable AST_variable_decl::parent in line 317
      protection public
   variable AST_variable_decl::rinfo in line 325
      protection public
   variable AST_field_decl::arg1 in line 338
      protection public
   variable AST_field_decl::attributes in line 337
      protection public
   variable AST_field_decl::declarator in line 336
      protection public
   variable AST_field_decl::kind in line 332
      protection public
   variable AST_field_decl::loc in line 333
      protection public
   variable AST_field_decl::next in line 334
      protection public
   variable AST_field_decl::parent in line 335
      protection public
   variable AST_asttype::declarator in line 348
      protection public
   variable AST_asttype::kind in line 343
      protection public
   variable AST_asttype::loc in line 344
      protection public
   variable AST_asttype::next in line 345
      protection public
   variable AST_asttype::parent in line 346
      protection public
   variable AST_asttype::qualifiers in line 349
      protection public
   variable AST_asttype::type in line 347
      protection public
   variable AST_typename::ddecl in line 358
      protection public
   variable AST_typename::kind in line 354
      protection public
   variable AST_typename::loc in line 355
      protection public
   variable AST_typename::next in line 356
      protection public
   variable AST_typename::parent in line 357
      protection public
   variable AST_type_variable::cstring in line 367
      protection public
   variable AST_type_variable::kind in line 363
      protection public
   variable AST_type_variable::loc in line 364
      protection public
   variable AST_type_variable::next in line 365
      protection public
   variable AST_type_variable::parent in line 366
      protection public
   variable AST_typeof_expr::arg1 in line 376
      protection public
   variable AST_typeof_expr::kind in line 372
      protection public
   variable AST_typeof_expr::loc in line 373
      protection public
   variable AST_typeof_expr::next in line 374
      protection public
   variable AST_typeof_expr::parent in line 375
      protection public
   variable AST_typeof_type::asttype in line 385
      protection public
   variable AST_typeof_type::kind in line 381
      protection public
   variable AST_typeof_type::loc in line 382
      protection public
   variable AST_typeof_type::next in line 383
      protection public
   variable AST_typeof_type::parent in line 384
      protection public
   variable AST_attribute::args in line 396
      protection public
   variable AST_attribute::kind in line 390
      protection public
   variable AST_attribute::loc in line 391
      protection public
   variable AST_attribute::next in line 392
      protection public
   variable AST_attribute::parent in line 393
      protection public
   variable AST_attribute::word1 in line 394
      protection public
   variable AST_attribute::word2 in line 395
      protection public
   variable AST_rid::id in line 404
      protection public
   variable AST_rid::kind in line 401
      protection public
   variable AST_rid::loc in line 402
      protection public
   variable AST_rid::next in line 403
      protection public
   variable AST_rid::parent in line 404
      protection public
   variable AST_user_qual::cstring in line 414
      protection public
   variable AST_user_qual::kind in line 410
      protection public
   variable AST_user_qual::loc in line 411
      protection public
   variable AST_user_qual::next in line 412
      protection public
   variable AST_user_qual::parent in line 413
      protection public
   variable AST_qualifier::id in line 422
      protection public
   variable AST_qualifier::kind in line 419
      protection public
   variable AST_qualifier::loc in line 420
      protection public
   variable AST_qualifier::next in line 421
      protection public
   variable AST_qualifier::parent in line 422
      protection public
   variable AST_tag_ref::attributes in line 439
      protection public
   variable AST_tag_ref::defined in line 441
      protection public
   variable AST_tag_ref::fields in line 440
      protection public
   variable AST_tag_ref::kind in line 434
      protection public
   variable AST_tag_ref::loc in line 435
      protection public
   variable AST_tag_ref::next in line 436
      protection public
   variable AST_tag_ref::parent in line 437
      protection public
   variable AST_tag_ref::tdecl in line 442
      protection public
   variable AST_tag_ref::word1 in line 438
      protection public
   variable AST_function_declarator::declarator in line 452
      protection public
   variable AST_function_declarator::env in line 455
      protection public
   variable AST_function_declarator::kind in line 448
      protection public
   variable AST_function_declarator::loc in line 449
      protection public
   variable AST_function_declarator::next in line 450
      protection public
   variable AST_function_declarator::parent in line 451
      protection public
   variable AST_function_declarator::parms in line 453
      protection public
   variable AST_function_declarator::qualifiers in line 454
      protection public
   variable AST_pointer_declarator::declarator in line 464
      protection public
   variable AST_pointer_declarator::kind in line 460
      protection public
   variable AST_pointer_declarator::loc in line 461
      protection public
   variable AST_pointer_declarator::next in line 462
      protection public
   variable AST_pointer_declarator::parent in line 463
      protection public
   variable AST_pointer_declarator::qualifiers in line 465
      protection public
   variable AST_array_declarator::arg1 in line 475
      protection public
   variable AST_array_declarator::declarator in line 474
      protection public
   variable AST_array_declarator::kind in line 470
      protection public
   variable AST_array_declarator::loc in line 471
      protection public
   variable AST_array_declarator::next in line 472
      protection public
   variable AST_array_declarator::parent in line 473
      protection public
   variable AST_identifier_declarator::cstring in line 484
      protection public
   variable AST_identifier_declarator::kind in line 480
      protection public
   variable AST_identifier_declarator::loc in line 481
      protection public
   variable AST_identifier_declarator::next in line 482
      protection public
   variable AST_identifier_declarator::parent in line 483
      protection public
   variable AST_asm_stmt::arg1 in line 494
      protection public
   variable AST_asm_stmt::asm_clobbers in line 497
      protection public
   variable AST_asm_stmt::asm_operands1 in line 495
      protection public
   variable AST_asm_stmt::asm_operands2 in line 496
      protection public
   variable AST_asm_stmt::kind in line 490
      protection public
   variable AST_asm_stmt::loc in line 491
      protection public
   variable AST_asm_stmt::next in line 492
      protection public
   variable AST_asm_stmt::parent in line 493
      protection public
   variable AST_asm_stmt::qualifiers in line 498
      protection public
   variable AST_compound_stmt::decls in line 510
      protection public
   variable AST_compound_stmt::enclosing_cs in line 512
      protection public
   variable AST_compound_stmt::env in line 514
      protection public
   variable AST_compound_stmt::filter_env in line 516
      protection public
   variable AST_compound_stmt::id_labels in line 509
      protection public
   variable AST_compound_stmt::kind in line 505
      protection public
   variable AST_compound_stmt::loc in line 506
      protection public
   variable AST_compound_stmt::next in line 507
      protection public
   variable AST_compound_stmt::parent in line 508
      protection public
   variable AST_compound_stmt::scope_env in line 515
      protection public
   variable AST_compound_stmt::stmts in line 511
      protection public
   variable AST_compound_stmt::visited in line 513
      protection public
   variable AST_if_stmt::condition in line 525
      protection public
   variable AST_if_stmt::kind in line 521
      protection public
   variable AST_if_stmt::loc in line 522
      protection public
   variable AST_if_stmt::next in line 523
      protection public
   variable AST_if_stmt::parent in line 524
      protection public
   variable AST_if_stmt::stmt1 in line 526
      protection public
   variable AST_if_stmt::stmt2 in line 527
      protection public
   variable AST_labeled_stmt::kind in line 532
      protection public
   variable AST_labeled_stmt::label in line 536
      protection public
   variable AST_labeled_stmt::loc in line 533
      protection public
   variable AST_labeled_stmt::next in line 534
      protection public
   variable AST_labeled_stmt::parent in line 535
      protection public
   variable AST_labeled_stmt::stmt in line 537
      protection public
   variable AST_expression_stmt::arg1 in line 546
      protection public
   variable AST_expression_stmt::kind in line 542
      protection public
   variable AST_expression_stmt::loc in line 543
      protection public
   variable AST_expression_stmt::next in line 544
      protection public
   variable AST_expression_stmt::parent in line 545
      protection public
   variable AST_breakable_stmt::break_dest in line 557
      protection public
   variable AST_breakable_stmt::continue_dest in line 558
      protection public
   variable AST_breakable_stmt::enclosing_cs in line 555
      protection public
   variable AST_breakable_stmt::kind in line 551
      protection public
   variable AST_breakable_stmt::loc in line 552
      protection public
   variable AST_breakable_stmt::next in line 553
      protection public
   variable AST_breakable_stmt::parent in line 554
      protection public
   variable AST_breakable_stmt::parent_loop in line 556
      protection public
   variable AST_conditional_stmt::break_dest in line 569
      protection public
   variable AST_conditional_stmt::condition in line 571
      protection public
   variable AST_conditional_stmt::continue_dest in line 570
      protection public
   variable AST_conditional_stmt::enclosing_cs in line 567
      protection public
   variable AST_conditional_stmt::kind in line 563
      protection public
   variable AST_conditional_stmt::loc in line 564
      protection public
   variable AST_conditional_stmt::next in line 565
      protection public
   variable AST_conditional_stmt::parent in line 566
      protection public
   variable AST_conditional_stmt::parent_loop in line 568
      protection public
   variable AST_conditional_stmt::stmt in line 572
      protection public
   variable AST_switch_stmt::break_dest in line 584
      protection public
   variable AST_switch_stmt::condition in line 586
      protection public
   variable AST_switch_stmt::continue_dest in line 585
      protection public
   variable AST_switch_stmt::enclosing_cs in line 582
      protection public
   variable AST_switch_stmt::kind in line 578
      protection public
   variable AST_switch_stmt::loc in line 579
      protection public
   variable AST_switch_stmt::next in line 580
      protection public
   variable AST_switch_stmt::next_label in line 588
      protection public
   variable AST_switch_stmt::parent in line 581
      protection public
   variable AST_switch_stmt::parent_loop in line 583
      protection public
   variable AST_switch_stmt::stmt in line 587
      protection public
   variable AST_for_stmt::arg1 in line 601
      protection public
   variable AST_for_stmt::arg2 in line 602
      protection public
   variable AST_for_stmt::arg3 in line 603
      protection public
   variable AST_for_stmt::break_dest in line 599
      protection public
   variable AST_for_stmt::continue_dest in line 600
      protection public
   variable AST_for_stmt::enclosing_cs in line 597
      protection public
   variable AST_for_stmt::kind in line 593
      protection public
   variable AST_for_stmt::loc in line 594
      protection public
   variable AST_for_stmt::next in line 595
      protection public
   variable AST_for_stmt::parent in line 596
      protection public
   variable AST_for_stmt::parent_loop in line 598
      protection public
   variable AST_for_stmt::stmt in line 604
      protection public
   variable AST_break_stmt::enclosing_cs in line 614
      protection public
   variable AST_break_stmt::kind in line 609
      protection public
   variable AST_break_stmt::loc in line 610
      protection public
   variable AST_break_stmt::next in line 611
      protection public
   variable AST_break_stmt::parent in line 612
      protection public
   variable AST_break_stmt::parent_loop in line 613
      protection public
   variable AST_continue_stmt::enclosing_cs in line 624
      protection public
   variable AST_continue_stmt::kind in line 619
      protection public
   variable AST_continue_stmt::loc in line 620
      protection public
   variable AST_continue_stmt::next in line 621
      protection public
   variable AST_continue_stmt::parent in line 622
      protection public
   variable AST_continue_stmt::parent_loop in line 623
      protection public
   variable AST_return_stmt::arg1 in line 633
      protection public
   variable AST_return_stmt::kind in line 629
      protection public
   variable AST_return_stmt::loc in line 630
      protection public
   variable AST_return_stmt::next in line 631
      protection public
   variable AST_return_stmt::parent in line 632
      protection public
   variable AST_goto_stmt::enclosing_cs in line 643
      protection public
   variable AST_goto_stmt::id_label in line 642
      protection public
   variable AST_goto_stmt::kind in line 638
      protection public
   variable AST_goto_stmt::loc in line 639
      protection public
   variable AST_goto_stmt::next in line 640
      protection public
   variable AST_goto_stmt::parent in line 641
      protection public
   variable AST_computed_goto_stmt::arg1 in line 652
      protection public
   variable AST_computed_goto_stmt::kind in line 648
      protection public
   variable AST_computed_goto_stmt::loc in line 649
      protection public
   variable AST_computed_goto_stmt::next in line 650
      protection public
   variable AST_computed_goto_stmt::parent in line 651
      protection public
   variable AST_empty_stmt::kind in line 657
      protection public
   variable AST_empty_stmt::loc in line 658
      protection public
   variable AST_empty_stmt::next in line 659
      protection public
   variable AST_empty_stmt::parent in line 660
      protection public
   variable AST_assert_type_stmt::arg1 in line 669
      protection public
   variable AST_assert_type_stmt::asttype in line 670
      protection public
   variable AST_assert_type_stmt::kind in line 665
      protection public
   variable AST_assert_type_stmt::loc in line 666
      protection public
   variable AST_assert_type_stmt::next in line 667
      protection public
   variable AST_assert_type_stmt::parent in line 668
      protection public
   variable AST_assert_type_stmt::qtype in line 671
      protection public
   variable AST_change_type_stmt::arg1 in line 680
      protection public
   variable AST_change_type_stmt::asttype in line 681
      protection public
   variable AST_change_type_stmt::kind in line 676
      protection public
   variable AST_change_type_stmt::loc in line 677
      protection public
   variable AST_change_type_stmt::next in line 678
      protection public
   variable AST_change_type_stmt::parent in line 679
      protection public
   variable AST_change_type_stmt::qtype in line 682
      protection public
   variable AST_deep_restrict_stmt::arg1 in line 691
      protection public
   variable AST_deep_restrict_stmt::drinfo in line 693
      protection public
   variable AST_deep_restrict_stmt::kind in line 687
      protection public
   variable AST_deep_restrict_stmt::loc in line 688
      protection public
   variable AST_deep_restrict_stmt::next in line 689
      protection public
   variable AST_deep_restrict_stmt::parent in line 690
      protection public
   variable AST_deep_restrict_stmt::stmt in line 692
      protection public
   variable AST_unary::arg1 in line 711
      protection public
   variable AST_unary::bitfield in line 706
      protection public
   variable AST_unary::cst in line 705
      protection public
   variable AST_unary::drinfo in line 710
      protection public
   variable AST_unary::isregister in line 707
      protection public
   variable AST_unary::kind in line 698
      protection public
   variable AST_unary::loc in line 699
      protection public
   variable AST_unary::lvalue in line 703
      protection public
   variable AST_unary::next in line 700
      protection public
   variable AST_unary::parent in line 701
      protection public
   variable AST_unary::qtype in line 709
      protection public
   variable AST_unary::side_effects in line 704
      protection public
   variable AST_unary::static_address in line 708
      protection public
   variable AST_unary::type in line 702
      protection public
   variable AST_binary::arg1 in line 729
      protection public
   variable AST_binary::arg2 in line 730
      protection public
   variable AST_binary::bitfield in line 724
      protection public
   variable AST_binary::cst in line 723
      protection public
   variable AST_binary::drinfo in line 728
      protection public
   variable AST_binary::isregister in line 725
      protection public
   variable AST_binary::kind in line 716
      protection public
   variable AST_binary::loc in line 717
      protection public
   variable AST_binary::lvalue in line 721
      protection public
   variable AST_binary::next in line 718
      protection public
   variable AST_binary::parent in line 719
      protection public
   variable AST_binary::qtype in line 727
      protection public
   variable AST_binary::side_effects in line 722
      protection public
   variable AST_binary::static_address in line 726
      protection public
   variable AST_binary::type in line 720
      protection public
   variable AST_comma::arg1 in line 748
      protection public
   variable AST_comma::bitfield in line 743
      protection public
   variable AST_comma::cst in line 742
      protection public
   variable AST_comma::drinfo in line 747
      protection public
   variable AST_comma::isregister in line 744
      protection public
   variable AST_comma::kind in line 735
      protection public
   variable AST_comma::loc in line 736
      protection public
   variable AST_comma::lvalue in line 740
      protection public
   variable AST_comma::next in line 737
      protection public
   variable AST_comma::parent in line 738
      protection public
   variable AST_comma::qtype in line 746
      protection public
   variable AST_comma::side_effects in line 741
      protection public
   variable AST_comma::static_address in line 745
      protection public
   variable AST_comma::type in line 739
      protection public
   variable AST_sizeof_type::asttype in line 766
      protection public
   variable AST_sizeof_type::bitfield in line 761
      protection public
   variable AST_sizeof_type::cst in line 760
      protection public
   variable AST_sizeof_type::drinfo in line 765
      protection public
   variable AST_sizeof_type::isregister in line 762
      protection public
   variable AST_sizeof_type::kind in line 753
      protection public
   variable AST_sizeof_type::loc in line 754
      protection public
   variable AST_sizeof_type::lvalue in line 758
      protection public
   variable AST_sizeof_type::next in line 755
      protection public
   variable AST_sizeof_type::parent in line 756
      protection public
   variable AST_sizeof_type::qtype in line 764
      protection public
   variable AST_sizeof_type::side_effects in line 759
      protection public
   variable AST_sizeof_type::static_address in line 763
      protection public
   variable AST_sizeof_type::type in line 757
      protection public
   variable AST_alignof_type::asttype in line 784
      protection public
   variable AST_alignof_type::bitfield in line 779
      protection public
   variable AST_alignof_type::cst in line 778
      protection public
   variable AST_alignof_type::drinfo in line 783
      protection public
   variable AST_alignof_type::isregister in line 780
      protection public
   variable AST_alignof_type::kind in line 771
      protection public
   variable AST_alignof_type::loc in line 772
      protection public
   variable AST_alignof_type::lvalue in line 776
      protection public
   variable AST_alignof_type::next in line 773
      protection public
   variable AST_alignof_type::parent in line 774
      protection public
   variable AST_alignof_type::qtype in line 782
      protection public
   variable AST_alignof_type::side_effects in line 777
      protection public
   variable AST_alignof_type::static_address in line 781
      protection public
   variable AST_alignof_type::type in line 775
      protection public
   variable AST_label_address::bitfield in line 797
      protection public
   variable AST_label_address::cst in line 796
      protection public
   variable AST_label_address::drinfo in line 801
      protection public
   variable AST_label_address::id_label in line 802
      protection public
   variable AST_label_address::isregister in line 798
      protection public
   variable AST_label_address::kind in line 789
      protection public
   variable AST_label_address::loc in line 790
      protection public
   variable AST_label_address::lvalue in line 794
      protection public
   variable AST_label_address::next in line 791
      protection public
   variable AST_label_address::parent in line 792
      protection public
   variable AST_label_address::qtype in line 800
      protection public
   variable AST_label_address::side_effects in line 795
      protection public
   variable AST_label_address::static_address in line 799
      protection public
   variable AST_label_address::type in line 793
      protection public
   variable AST_cast::arg1 in line 820
      protection public
   variable AST_cast::asttype in line 821
      protection public
   variable AST_cast::bitfield in line 815
      protection public
   variable AST_cast::cst in line 814
      protection public
   variable AST_cast::drinfo in line 819
      protection public
   variable AST_cast::isregister in line 816
      protection public
   variable AST_cast::kind in line 807
      protection public
   variable AST_cast::loc in line 808
      protection public
   variable AST_cast::lvalue in line 812
      protection public
   variable AST_cast::next in line 809
      protection public
   variable AST_cast::parent in line 810
      protection public
   variable AST_cast::qtype in line 818
      protection public
   variable AST_cast::side_effects in line 813
      protection public
   variable AST_cast::static_address in line 817
      protection public
   variable AST_cast::type in line 811
      protection public
   variable AST_cast_list::astqtype in line 840
      protection public
   variable AST_cast_list::asttype in line 839
      protection public
   variable AST_cast_list::bitfield in line 834
      protection public
   variable AST_cast_list::cst in line 833
      protection public
   variable AST_cast_list::drinfo in line 838
      protection public
   variable AST_cast_list::init_expr in line 841
      protection public
   variable AST_cast_list::isregister in line 835
      protection public
   variable AST_cast_list::kind in line 826
      protection public
   variable AST_cast_list::loc in line 827
      protection public
   variable AST_cast_list::lvalue in line 831
      protection public
   variable AST_cast_list::next in line 828
      protection public
   variable AST_cast_list::parent in line 829
      protection public
   variable AST_cast_list::qtype in line 837
      protection public
   variable AST_cast_list::side_effects in line 832
      protection public
   variable AST_cast_list::static_address in line 836
      protection public
   variable AST_cast_list::type in line 830
      protection public
   variable AST_conditional::arg1 in line 861
      protection public
   variable AST_conditional::arg2 in line 862
      protection public
   variable AST_conditional::bitfield in line 855
      protection public
   variable AST_conditional::condition in line 860
      protection public
   variable AST_conditional::cst in line 854
      protection public
   variable AST_conditional::drinfo in line 859
      protection public
   variable AST_conditional::isregister in line 856
      protection public
   variable AST_conditional::kind in line 847
      protection public
   variable AST_conditional::loc in line 848
      protection public
   variable AST_conditional::lvalue in line 852
      protection public
   variable AST_conditional::next in line 849
      protection public
   variable AST_conditional::parent in line 850
      protection public
   variable AST_conditional::qtype in line 858
      protection public
   variable AST_conditional::side_effects in line 853
      protection public
   variable AST_conditional::static_address in line 857
      protection public
   variable AST_conditional::type in line 851
      protection public
   variable AST_identifier::bitfield in line 875
      protection public
   variable AST_identifier::cst in line 874
      protection public
   variable AST_identifier::cstring in line 880
      protection public
   variable AST_identifier::ddecl in line 881
      protection public
   variable AST_identifier::drinfo in line 879
      protection public
   variable AST_identifier::isregister in line 876
      protection public
   variable AST_identifier::kind in line 867
      protection public
   variable AST_identifier::loc in line 868
      protection public
   variable AST_identifier::lvalue in line 872
      protection public
   variable AST_identifier::next in line 869
      protection public
   variable AST_identifier::parent in line 870
      protection public
   variable AST_identifier::qtype in line 878
      protection public
   variable AST_identifier::side_effects in line 873
      protection public
   variable AST_identifier::static_address in line 877
      protection public
   variable AST_identifier::type in line 871
      protection public
   variable AST_compound_expr::bitfield in line 894
      protection public
   variable AST_compound_expr::cst in line 893
      protection public
   variable AST_compound_expr::drinfo in line 898
      protection public
   variable AST_compound_expr::filter_env in line 900
      protection public
   variable AST_compound_expr::isregister in line 895
      protection public
   variable AST_compound_expr::kind in line 886
      protection public
   variable AST_compound_expr::loc in line 887
      protection public
   variable AST_compound_expr::lvalue in line 891
      protection public
   variable AST_compound_expr::next in line 888
      protection public
   variable AST_compound_expr::parent in line 889
      protection public
   variable AST_compound_expr::qtype in line 897
      protection public
   variable AST_compound_expr::side_effects in line 892
      protection public
   variable AST_compound_expr::static_address in line 896
      protection public
   variable AST_compound_expr::stmt in line 899
      protection public
   variable AST_compound_expr::type in line 890
      protection public
   variable AST_function_call::arg1 in line 921
      protection public
   variable AST_function_call::args in line 922
      protection public
   variable AST_function_call::bitfield in line 916
      protection public
   variable AST_function_call::cst in line 915
      protection public
   variable AST_function_call::drinfo in line 920
      protection public
   variable AST_function_call::isregister in line 917
      protection public
   variable AST_function_call::kind in line 908
      protection public
   variable AST_function_call::loc in line 909
      protection public
   variable AST_function_call::lvalue in line 913
      protection public
   variable AST_function_call::next in line 910
      protection public
   variable AST_function_call::parent in line 911
      protection public
   variable AST_function_call::qtype in line 919
      protection public
   variable AST_function_call::side_effects in line 914
      protection public
   variable AST_function_call::static_address in line 918
      protection public
   variable AST_function_call::type in line 912
      protection public
   variable AST_function_call::va_arg_call in line 923
      protection public
   variable AST_array_ref::alt in line 943
      protection public
   variable AST_array_ref::arg1 in line 941
      protection public
   variable AST_array_ref::arg2 in line 942
      protection public
   variable AST_array_ref::bitfield in line 936
      protection public
   variable AST_array_ref::cst in line 935
      protection public
   variable AST_array_ref::drinfo in line 940
      protection public
   variable AST_array_ref::isregister in line 937
      protection public
   variable AST_array_ref::kind in line 928
      protection public
   variable AST_array_ref::loc in line 929
      protection public
   variable AST_array_ref::lvalue in line 933
      protection public
   variable AST_array_ref::next in line 930
      protection public
   variable AST_array_ref::parent in line 931
      protection public
   variable AST_array_ref::qtype in line 939
      protection public
   variable AST_array_ref::side_effects in line 934
      protection public
   variable AST_array_ref::static_address in line 938
      protection public
   variable AST_array_ref::type in line 932
      protection public
   variable AST_field_ref::arg1 in line 961
      protection public
   variable AST_field_ref::bitfield in line 956
      protection public
   variable AST_field_ref::cst in line 955
      protection public
   variable AST_field_ref::cstring in line 962
      protection public
   variable AST_field_ref::cstring_loc in line 963
      protection public
   variable AST_field_ref::drinfo in line 960
      protection public
   variable AST_field_ref::isregister in line 957
      protection public
   variable AST_field_ref::kind in line 948
      protection public
   variable AST_field_ref::loc in line 949
      protection public
   variable AST_field_ref::lvalue in line 953
      protection public
   variable AST_field_ref::next in line 950
      protection public
   variable AST_field_ref::parent in line 951
      protection public
   variable AST_field_ref::qtype in line 959
      protection public
   variable AST_field_ref::side_effects in line 954
      protection public
   variable AST_field_ref::static_address in line 958
      protection public
   variable AST_field_ref::type in line 952
      protection public
   variable AST_init_list::args in line 981
      protection public
   variable AST_init_list::bitfield in line 976
      protection public
   variable AST_init_list::cst in line 975
      protection public
   variable AST_init_list::drinfo in line 980
      protection public
   variable AST_init_list::isregister in line 977
      protection public
   variable AST_init_list::kind in line 968
      protection public
   variable AST_init_list::loc in line 969
      protection public
   variable AST_init_list::lvalue in line 973
      protection public
   variable AST_init_list::next in line 970
      protection public
   variable AST_init_list::parent in line 971
      protection public
   variable AST_init_list::qtype in line 979
      protection public
   variable AST_init_list::side_effects in line 974
      protection public
   variable AST_init_list::static_address in line 978
      protection public
   variable AST_init_list::type in line 972
      protection public
   variable AST_init_index::arg1 in line 999
      protection public
   variable AST_init_index::arg2 in line 1000
      protection public
   variable AST_init_index::bitfield in line 994
      protection public
   variable AST_init_index::cst in line 993
      protection public
   variable AST_init_index::drinfo in line 998
      protection public
   variable AST_init_index::init_expr in line 1001
      protection public
   variable AST_init_index::isregister in line 995
      protection public
   variable AST_init_index::kind in line 986
      protection public
   variable AST_init_index::loc in line 987
      protection public
   variable AST_init_index::lvalue in line 991
      protection public
   variable AST_init_index::next in line 988
      protection public
   variable AST_init_index::parent in line 989
      protection public
   variable AST_init_index::qtype in line 997
      protection public
   variable AST_init_index::side_effects in line 992
      protection public
   variable AST_init_index::static_address in line 996
      protection public
   variable AST_init_index::type in line 990
      protection public
   variable AST_init_field::bitfield in line 1014
      protection public
   variable AST_init_field::cst in line 1013
      protection public
   variable AST_init_field::drinfo in line 1018
      protection public
   variable AST_init_field::init_expr in line 1020
      protection public
   variable AST_init_field::isregister in line 1015
      protection public
   variable AST_init_field::kind in line 1006
      protection public
   variable AST_init_field::loc in line 1007
      protection public
   variable AST_init_field::lvalue in line 1011
      protection public
   variable AST_init_field::next in line 1008
      protection public
   variable AST_init_field::parent in line 1009
      protection public
   variable AST_init_field::qtype in line 1017
      protection public
   variable AST_init_field::side_effects in line 1012
      protection public
   variable AST_init_field::static_address in line 1016
      protection public
   variable AST_init_field::type in line 1010
      protection public
   variable AST_init_field::word1 in line 1019
      protection public
   variable AST_known_cst::bitfield in line 1034
      protection public
   variable AST_known_cst::cst in line 1033
      protection public
   variable AST_known_cst::cval in line 1039
      protection public
   variable AST_known_cst::drinfo in line 1038
      protection public
   variable AST_known_cst::isregister in line 1035
      protection public
   variable AST_known_cst::kind in line 1026
      protection public
   variable AST_known_cst::loc in line 1027
      protection public
   variable AST_known_cst::lvalue in line 1031
      protection public
   variable AST_known_cst::next in line 1028
      protection public
   variable AST_known_cst::parent in line 1029
      protection public
   variable AST_known_cst::qtype in line 1037
      protection public
   variable AST_known_cst::side_effects in line 1032
      protection public
   variable AST_known_cst::static_address in line 1036
      protection public
   variable AST_known_cst::type in line 1030
      protection public
   variable AST_lexical_cst::bitfield in line 1053
      protection public
   variable AST_lexical_cst::cst in line 1052
      protection public
   variable AST_lexical_cst::cstring in line 1058
      protection public
   variable AST_lexical_cst::drinfo in line 1057
      protection public
   variable AST_lexical_cst::isregister in line 1054
      protection public
   variable AST_lexical_cst::kind in line 1045
      protection public
   variable AST_lexical_cst::loc in line 1046
      protection public
   variable AST_lexical_cst::lvalue in line 1050
      protection public
   variable AST_lexical_cst::next in line 1047
      protection public
   variable AST_lexical_cst::parent in line 1048
      protection public
   variable AST_lexical_cst::qtype in line 1056
      protection public
   variable AST_lexical_cst::side_effects in line 1051
      protection public
   variable AST_lexical_cst::static_address in line 1055
      protection public
   variable AST_lexical_cst::type in line 1049
      protection public
   variable AST_string_cst::bitfield in line 1072
      protection public
   variable AST_string_cst::chars in line 1078
      protection public
   variable AST_string_cst::cst in line 1071
      protection public
   variable AST_string_cst::cstring in line 1077
      protection public
   variable AST_string_cst::drinfo in line 1076
      protection public
   variable AST_string_cst::isregister in line 1073
      protection public
   variable AST_string_cst::kind in line 1064
      protection public
   variable AST_string_cst::length in line 1079
      protection public
   variable AST_string_cst::loc in line 1065
      protection public
   variable AST_string_cst::lvalue in line 1069
      protection public
   variable AST_string_cst::next in line 1066
      protection public
   variable AST_string_cst::parent in line 1067
      protection public
   variable AST_string_cst::qtype in line 1075
      protection public
   variable AST_string_cst::side_effects in line 1070
      protection public
   variable AST_string_cst::static_address in line 1074
      protection public
   variable AST_string_cst::type in line 1068
      protection public
   variable AST_string::bitfield in line 1093
      protection public
   variable AST_string::cst in line 1092
      protection public
   variable AST_string::ddecl in line 1099
      protection public
   variable AST_string::drinfo in line 1097
      protection public
   variable AST_string::isregister in line 1094
      protection public
   variable AST_string::kind in line 1085
      protection public
   variable AST_string::loc in line 1086
      protection public
   variable AST_string::lvalue in line 1090
      protection public
   variable AST_string::next in line 1087
      protection public
   variable AST_string::parent in line 1088
      protection public
   variable AST_string::qtype in line 1096
      protection public
   variable AST_string::side_effects in line 1091
      protection public
   variable AST_string::static_address in line 1095
      protection public
   variable AST_string::strings in line 1098
      protection public
   variable AST_string::type in line 1089
      protection public
   variable AST_id_label::cstring in line 1111
      protection public
   variable AST_id_label::enclosing_cs in line 1109
      protection public
   variable AST_id_label::kind in line 1104
      protection public
   variable AST_id_label::ldecl in line 1112
      protection public
   variable AST_id_label::loc in line 1105
      protection public
   variable AST_id_label::next in line 1106
      protection public
   variable AST_id_label::next_label in line 1108
      protection public
   variable AST_id_label::parent in line 1107
      protection public
   variable AST_id_label::store_in in line 1110
      protection public
   variable AST_case_label::arg1 in line 1124
      protection public
   variable AST_case_label::arg2 in line 1125
      protection public
   variable AST_case_label::enclosing_cs in line 1122
      protection public
   variable AST_case_label::kind in line 1117
      protection public
   variable AST_case_label::loc in line 1118
      protection public
   variable AST_case_label::next in line 1119
      protection public
   variable AST_case_label::next_label in line 1121
      protection public
   variable AST_case_label::parent in line 1120
      protection public
   variable AST_case_label::store_in in line 1123
      protection public
   variable AST_default_label::enclosing_cs in line 1135
      protection public
   variable AST_default_label::kind in line 1130
      protection public
   variable AST_default_label::loc in line 1131
      protection public
   variable AST_default_label::next in line 1132
      protection public
   variable AST_default_label::next_label in line 1134
      protection public
   variable AST_default_label::parent in line 1133
      protection public
   variable AST_default_label::store_in in line 1136
      protection public
   variable AST_word::cstring in line 1145
      protection public
   variable AST_word::kind in line 1141
      protection public
   variable AST_word::loc in line 1142
      protection public
   variable AST_word::next in line 1143
      protection public
   variable AST_word::parent in line 1144
      protection public
   variable AST_asm_operand::arg1 in line 1155
      protection public
   variable AST_asm_operand::kind in line 1150
      protection public
   variable AST_asm_operand::loc in line 1151
      protection public
   variable AST_asm_operand::next in line 1152
      protection public
   variable AST_asm_operand::parent in line 1153
      protection public
   variable AST_asm_operand::string in line 1154
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cqual/cqual-0.981/src/AST_types.h
module AST_types.h
   macro definition is_node in line 263
      protection public
   macro definition is_declaration in line 264
      protection public
   macro definition is_statement in line 265
      protection public
   macro definition is_expression in line 266
      protection public
   macro definition is_type_element in line 267
      protection public
   macro definition is_declarator in line 268
      protection public
   macro definition is_label in line 269
      protection public
   macro definition is_asm_decl in line 270
      protection public
   macro definition is_data_decl in line 271
      protection public
   macro definition is_extension_decl in line 272
      protection public
   macro definition is_ellipsis_decl in line 273
      protection public
   macro definition is_enumerator in line 274
      protection public
   macro definition is_oldidentifier_decl in line 275
      protection public
   macro definition is_function_decl in line 276
      protection public
   macro definition is_implicit_decl in line 277
      protection public
   macro definition is_variable_decl in line 278
      protection public
   macro definition is_field_decl in line 279
      protection public
   macro definition is_asttype in line 280
      protection public
   macro definition is_typename in line 281
      protection public
   macro definition is_type_variable in line 282
      protection public
   macro definition is_typeof_expr in line 283
      protection public
   macro definition is_typeof_type in line 284
      protection public
   macro definition is_attribute in line 285
      protection public
   macro definition is_rid in line 286
      protection public
   macro definition is_user_qual in line 287
      protection public
   macro definition is_qualifier in line 288
      protection public
   macro definition is_tag_ref in line 289
      protection public
   macro definition is_function_declarator in line 290
      protection public
   macro definition is_pointer_declarator in line 291
      protection public
   macro definition is_array_declarator in line 292
      protection public
   macro definition is_identifier_declarator in line 293
      protection public
   macro definition is_asm_stmt in line 294
      protection public
   macro definition is_compound_stmt in line 295
      protection public
   macro definition is_if_stmt in line 296
      protection public
   macro definition is_labeled_stmt in line 297
      protection public
   macro definition is_expression_stmt in line 298
      protection public
   macro definition is_breakable_stmt in line 299
      protection public
   macro definition is_conditional_stmt in line 300
      protection public
   macro definition is_switch_stmt in line 301
      protection public
   macro definition is_for_stmt in line 302
      protection public
   macro definition is_break_stmt in line 303
      protection public
   macro definition is_continue_stmt in line 304
      protection public
   macro definition is_return_stmt in line 305
      protection public
   macro definition is_goto_stmt in line 306
      protection public
   macro definition is_computed_goto_stmt in line 307
      protection public
   macro definition is_empty_stmt in line 308
      protection public
   macro definition is_assert_type_stmt in line 309
      protection public
   macro definition is_change_type_stmt in line 310
      protection public
   macro definition is_deep_restrict_stmt in line 311
      protection public
   macro definition is_unary in line 312
      protection public
   macro definition is_binary in line 313
      protection public
   macro definition is_comma in line 314
      protection public
   macro definition is_sizeof_type in line 315
      protection public
   macro definition is_alignof_type in line 316
      protection public
   macro definition is_label_address in line 317
      protection public
   macro definition is_cast in line 318
      protection public
   macro definition is_cast_list in line 319
      protection public
   macro definition is_conditional in line 320
      protection public
   macro definition is_identifier in line 321
      protection public
   macro definition is_compound_expr in line 322
      protection public
   macro definition is_function_call in line 323
      protection public
   macro definition is_array_ref in line 324
      protection public
   macro definition is_field_ref in line 325
      protection public
   macro definition is_init_list in line 326
      protection public
   macro definition is_init_index in line 327
      protection public
   macro definition is_init_field in line 328
      protection public
   macro definition is_known_cst in line 329
      protection public
   macro definition is_lexical_cst in line 330
      protection public
   macro definition is_string_cst in line 331
      protection public
   macro definition is_string in line 332
      protection public
   macro definition is_id_label in line 333
      protection public
   macro definition is_case_label in line 334
      protection public
   macro definition is_default_label in line 335
      protection public
   macro definition is_word in line 336
      protection public
   macro definition is_asm_operand in line 337
      protection public
   macro definition is_error_decl in line 338
      protection public
   macro definition is_struct_ref in line 339
      protection public
   macro definition is_union_ref in line 340
      protection public
   macro definition is_enum_ref in line 341
      protection public
   macro definition is_error_stmt in line 342
      protection public
   macro definition is_while_stmt in line 343
      protection public
   macro definition is_dowhile_stmt in line 344
      protection public
   macro definition is_error_expr in line 345
      protection public
   macro definition is_dereference in line 346
      protection public
   macro definition is_extension_expr in line 347
      protection public
   macro definition is_sizeof_expr in line 348
      protection public
   macro definition is_alignof_expr in line 349
      protection public
   macro definition is_realpart in line 350
      protection public
   macro definition is_imagpart in line 351
      protection public
   macro definition is_address_of in line 352
      protection public
   macro definition is_unary_minus in line 353
      protection public
   macro definition is_unary_plus in line 354
      protection public
   macro definition is_conjugate in line 355
      protection public
   macro definition is_preincrement in line 356
      protection public
   macro definition is_predecrement in line 357
      protection public
   macro definition is_postincrement in line 358
      protection public
   macro definition is_postdecrement in line 359
      protection public
   macro definition is_bitnot in line 360
      protection public
   macro definition is_not in line 361
      protection public
   macro definition is_plus in line 362
      protection public
   macro definition is_minus in line 363
      protection public
   macro definition is_times in line 364
      protection public
   macro definition is_divide in line 365
      protection public
   macro definition is_modulo in line 366
      protection public
   macro definition is_lshift in line 367
      protection public
   macro definition is_rshift in line 368
      protection public
   macro definition is_leq in line 369
      protection public
   macro definition is_geq in line 370
      protection public
   macro definition is_lt in line 371
      protection public
   macro definition is_gt in line 372
      protection public
   macro definition is_eq in line 373
      protection public
   macro definition is_ne in line 374
      protection public
   macro definition is_bitand in line 375
      protection public
   macro definition is_bitor in line 376
      protection public
   macro definition is_bitxor in line 377
      protection public
   macro definition is_andand in line 378
      protection public
   macro definition is_oror in line 379
      protection public
   macro definition is_assign in line 380
      protection public
   macro definition is_plus_assign in line 381
      protection public
   macro definition is_minus_assign in line 382
      protection public
   macro definition is_times_assign in line 383
      protection public
   macro definition is_divide_assign in line 384
      protection public
   macro definition is_modulo_assign in line 385
      protection public
   macro definition is_lshift_assign in line 386
      protection public
   macro definition is_rshift_assign in line 387
      protection public
   macro definition is_bitand_assign in line 388
      protection public
   macro definition is_bitor_assign in line 389
      protection public
   macro definition is_bitxor_assign in line 390
      protection public
   enumeration ast_kind in line 133
      protection public
   typedef node in line 5
      protection public
   typedef declaration in line 6
      protection public
   typedef statement in line 7
      protection public
   typedef expression in line 8
      protection public
   typedef type_element in line 9
      protection public
   typedef declarator in line 10
      protection public
   typedef label in line 11
      protection public
   typedef asm_decl in line 12
      protection public
   typedef data_decl in line 13
      protection public
   typedef extension_decl in line 14
      protection public
   typedef ellipsis_decl in line 15
      protection public
   typedef enumerator in line 16
      protection public
   typedef oldidentifier_decl in line 17
      protection public
   typedef function_decl in line 18
      protection public
   typedef implicit_decl in line 19
      protection public
   typedef variable_decl in line 20
      protection public
   typedef field_decl in line 21
      protection public
   typedef asttype in line 22
      protection public
   typedef typename in line 23
      protection public
   typedef type_variable in line 24
      protection public
   typedef typeof_expr in line 25
      protection public
   typedef typeof_type in line 26
      protection public
   typedef attribute in line 27
      protection public
   typedef rid in line 28
      protection public
   typedef user_qual in line 29
      protection public
   typedef qualifier in line 30
      protection public
   typedef tag_ref in line 31
      protection public
   typedef function_declarator in line 32
      protection public
   typedef pointer_declarator in line 33
      protection public
   typedef array_declarator in line 34
      protection public
   typedef identifier_declarator in line 35
      protection public
   typedef asm_stmt in line 36
      protection public
   typedef compound_stmt in line 37
      protection public
   typedef if_stmt in line 38
      protection public
   typedef labeled_stmt in line 39
      protection public
   typedef expression_stmt in line 40
      protection public
   typedef breakable_stmt in line 41
      protection public
   typedef conditional_stmt in line 42
      protection public
   typedef switch_stmt in line 43
      protection public
   typedef for_stmt in line 44
      protection public
   typedef break_stmt in line 45
      protection public
   typedef continue_stmt in line 46
      protection public
   typedef return_stmt in line 47
      protection public
   typedef goto_stmt in line 48
      protection public
   typedef computed_goto_stmt in line 49
      protection public
   typedef empty_stmt in line 50
      protection public
   typedef assert_type_stmt in line 51
      protection public
   typedef change_type_stmt in line 52
      protection public
   typedef deep_restrict_stmt in line 53
      protection public
   typedef unary in line 54
      protection public
   typedef binary in line 55
      protection public
   typedef comma in line 56
      protection public
   typedef sizeof_type in line 57
      protection public
   typedef alignof_type in line 58
      protection public
   typedef label_address in line 59
      protection public
   typedef cast in line 60
      protection public
   typedef cast_list in line 61
      protection public
   typedef conditional in line 62
      protection public
   typedef identifier in line 63
      protection public
   typedef compound_expr in line 64
      protection public
   typedef function_call in line 65
      protection public
   typedef array_ref in line 66
      protection public
   typedef field_ref in line 67
      protection public
   typedef init_list in line 68
      protection public
   typedef init_index in line 69
      protection public
   typedef init_field in line 70
      protection public
   typedef known_cst in line 71
      protection public
   typedef lexical_cst in line 72
      protection public
   typedef string_cst in line 73
      protection public
   typedef string in line 74
      protection public
   typedef id_label in line 75
      protection public
   typedef case_label in line 76
      protection public
   typedef default_label in line 77
      protection public
   typedef word in line 78
      protection public
   typedef asm_operand in line 79
      protection public
   typedef error_decl in line 80
      protection public
   typedef struct_ref in line 81
      protection public
   typedef union_ref in line 82
      protection public
   typedef enum_ref in line 83
      protection public
   typedef error_stmt in line 84
      protection public
   typedef while_stmt in line 85
      protection public
   typedef dowhile_stmt in line 86
      protection public
   typedef error_expr in line 87
      protection public
   typedef dereference in line 88
      protection public
   typedef extension_expr in line 89
      protection public
   typedef sizeof_expr in line 90
      protection public
   typedef alignof_expr in line 91
      protection public
   typedef realpart in line 92
      protection public
   typedef imagpart in line 93
      protection public
   typedef address_of in line 94
      protection public
   typedef unary_minus in line 95
      protection public
   typedef unary_plus in line 96
      protection public
   typedef conjugate in line 97
      protection public
   typedef preincrement in line 98
      protection public
   typedef predecrement in line 99
      protection public
   typedef postincrement in line 100
      protection public
   typedef postdecrement in line 101
      protection public
   typedef bitnot in line 102
      protection public
   typedef not in line 103
      protection public
   typedef plus in line 104
      protection public
   typedef minus in line 105
      protection public
   typedef times in line 106
      protection public
   typedef divide in line 107
      protection public
   typedef modulo in line 108
      protection public
   typedef lshift in line 109
      protection public
   typedef rshift in line 110
      protection public
   typedef leq in line 111
      protection public
   typedef geq in line 112
      protection public
   typedef lt in line 113
      protection public
   typedef gt in line 114
      protection public
   typedef eq in line 115
      protection public
   typedef ne in line 116
      protection public
   typedef bitand in line 117
      protection public
   typedef bitor in line 118
      protection public
   typedef bitxor in line 119
      protection public
   typedef andand in line 120
      protection public
   typedef oror in line 121
      protection public
   typedef assign in line 122
      protection public
   typedef plus_assign in line 123
      protection public
   typedef minus_assign in line 124
      protection public
   typedef times_assign in line 125
      protection public
   typedef divide_assign in line 126
      protection public
   typedef modulo_assign in line 127
      protection public
   typedef lshift_assign in line 128
      protection public
   typedef rshift_assign in line 129
      protection public
   typedef bitand_assign in line 130
      protection public
   typedef bitor_assign in line 131
      protection public
   typedef bitxor_assign in line 132
      protection public
   enumvalue kind_node in line 134
      protection public
   enumvalue kind_declaration in line 135
      protection public
   enumvalue kind_statement in line 136
      protection public
   enumvalue kind_expression in line 137
      protection public
   enumvalue kind_type_element in line 138
      protection public
   enumvalue kind_declarator in line 139
      protection public
   enumvalue kind_label in line 140
      protection public
   enumvalue kind_asm_decl in line 141
      protection public
   enumvalue kind_data_decl in line 142
      protection public
   enumvalue kind_extension_decl in line 143
      protection public
   enumvalue kind_ellipsis_decl in line 144
      protection public
   enumvalue kind_enumerator in line 145
      protection public
   enumvalue kind_oldidentifier_decl in line 146
      protection public
   enumvalue kind_function_decl in line 147
      protection public
   enumvalue kind_implicit_decl in line 148
      protection public
   enumvalue kind_variable_decl in line 149
      protection public
   enumvalue kind_field_decl in line 150
      protection public
   enumvalue kind_asttype in line 151
      protection public
   enumvalue kind_typename in line 152
      protection public
   enumvalue kind_type_variable in line 153
      protection public
   enumvalue kind_typeof_expr in line 154
      protection public
   enumvalue kind_typeof_type in line 155
      protection public
   enumvalue kind_attribute in line 156
      protection public
   enumvalue kind_rid in line 157
      protection public
   enumvalue kind_user_qual in line 158
      protection public
   enumvalue kind_qualifier in line 159
      protection public
   enumvalue kind_tag_ref in line 160
      protection public
   enumvalue kind_function_declarator in line 161
      protection public
   enumvalue kind_pointer_declarator in line 162
      protection public
   enumvalue kind_array_declarator in line 163
      protection public
   enumvalue kind_identifier_declarator in line 164
      protection public
   enumvalue kind_asm_stmt in line 165
      protection public
   enumvalue kind_compound_stmt in line 166
      protection public
   enumvalue kind_if_stmt in line 167
      protection public
   enumvalue kind_labeled_stmt in line 168
      protection public
   enumvalue kind_expression_stmt in line 169
      protection public
   enumvalue kind_breakable_stmt in line 170
      protection public
   enumvalue kind_conditional_stmt in line 171
      protection public
   enumvalue kind_switch_stmt in line 172
      protection public
   enumvalue kind_for_stmt in line 173
      protection public
   enumvalue kind_break_stmt in line 174
      protection public
   enumvalue kind_continue_stmt in line 175
      protection public
   enumvalue kind_return_stmt in line 176
      protection public
   enumvalue kind_goto_stmt in line 177
      protection public
   enumvalue kind_computed_goto_stmt in line 178
      protection public
   enumvalue kind_empty_stmt in line 179
      protection public
   enumvalue kind_assert_type_stmt in line 180
      protection public
   enumvalue kind_change_type_stmt in line 181
      protection public
   enumvalue kind_deep_restrict_stmt in line 182
      protection public
   enumvalue kind_unary in line 183
      protection public
   enumvalue kind_binary in line 184
      protection public
   enumvalue kind_comma in line 185
      protection public
   enumvalue kind_sizeof_type in line 186
      protection public
   enumvalue kind_alignof_type in line 187
      protection public
   enumvalue kind_label_address in line 188
      protection public
   enumvalue kind_cast in line 189
      protection public
   enumvalue kind_cast_list in line 190
      protection public
   enumvalue kind_conditional in line 191
      protection public
   enumvalue kind_identifier in line 192
      protection public
   enumvalue kind_compound_expr in line 193
      protection public
   enumvalue kind_function_call in line 194
      protection public
   enumvalue kind_array_ref in line 195
      protection public
   enumvalue kind_field_ref in line 196
      protection public
   enumvalue kind_init_list in line 197
      protection public
   enumvalue kind_init_index in line 198
      protection public
   enumvalue kind_init_field in line 199
      protection public
   enumvalue kind_known_cst in line 200
      protection public
   enumvalue kind_lexical_cst in line 201
      protection public
   enumvalue kind_string_cst in line 202
      protection public
   enumvalue kind_string in line 203
      protection public
   enumvalue kind_id_label in line 204
      protection public
   enumvalue kind_case_label in line 205
      protection public
   enumvalue kind_default_label in line 206
      protection public
   enumvalue kind_word in line 207
      protection public
   enumvalue kind_asm_operand in line 208
      protection public
   enumvalue kind_error_decl in line 209
      protection public
   enumvalue kind_struct_ref in line 210
      protection public
   enumvalue kind_union_ref in line 211
      protection public
   enumvalue kind_enum_ref in line 212
      protection public
   enumvalue kind_error_stmt in line 213
      protection public
   enumvalue kind_while_stmt in line 214
      protection public
   enumvalue kind_dowhile_stmt in line 215
      protection public
   enumvalue kind_error_expr in line 216
      protection public
   enumvalue kind_dereference in line 217
      protection public
   enumvalue kind_extension_expr in line 218
      protection public
   enumvalue kind_sizeof_expr in line 219
      protection public
   enumvalue kind_alignof_expr in line 220
      protection public
   enumvalue kind_realpart in line 221
      protection public
   enumvalue kind_imagpart in line 222
      protection public
   enumvalue kind_address_of in line 223
      protection public
   enumvalue kind_unary_minus in line 224
      protection public
   enumvalue kind_unary_plus in line 225
      protection public
   enumvalue kind_conjugate in line 226
      protection public
   enumvalue kind_preincrement in line 227
      protection public
   enumvalue kind_predecrement in line 228
      protection public
   enumvalue kind_postincrement in line 229
      protection public
   enumvalue kind_postdecrement in line 230
      protection public
   enumvalue kind_bitnot in line 231
      protection public
   enumvalue kind_not in line 232
      protection public
   enumvalue kind_plus in line 233
      protection public
   enumvalue kind_minus in line 234
      protection public
   enumvalue kind_times in line 235
      protection public
   enumvalue kind_divide in line 236
      protection public
   enumvalue kind_modulo in line 237
      protection public
   enumvalue kind_lshift in line 238
      protection public
   enumvalue kind_rshift in line 239
      protection public
   enumvalue kind_leq in line 240
      protection public
   enumvalue kind_geq in line 241
      protection public
   enumvalue kind_lt in line 242
      protection public
   enumvalue kind_gt in line 243
      protection public
   enumvalue kind_eq in line 244
      protection public
   enumvalue kind_ne in line 245
      protection public
   enumvalue kind_bitand in line 246
      protection public
   enumvalue kind_bitor in line 247
      protection public
   enumvalue kind_bitxor in line 248
      protection public
   enumvalue kind_andand in line 249
      protection public
   enumvalue kind_oror in line 250
      protection public
   enumvalue kind_assign in line 251
      protection public
   enumvalue kind_plus_assign in line 252
      protection public
   enumvalue kind_minus_assign in line 253
      protection public
   enumvalue kind_times_assign in line 254
      protection public
   enumvalue kind_divide_assign in line 255
      protection public
   enumvalue kind_modulo_assign in line 256
      protection public
   enumvalue kind_lshift_assign in line 257
      protection public
   enumvalue kind_rshift_assign in line 258
      protection public
   enumvalue kind_bitand_assign in line 259
      protection public
   enumvalue kind_bitor_assign in line 260
      protection public
   enumvalue kind_bitxor_assign in line 262
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cqual/cqual-0.981/src/AST_utils.c
module AST_utils.c
   function oldstyle_function(function_decl) in line 23
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable AST_function_decl::fdeclarator defined in AST_defs.h
      uses variable AST_function_declarator::parms defined in AST_defs.h
      uses macro definition is_oldidentifier_decl defined in AST_types.h
   function get_fdeclarator(declarator) in line 28
      protection public
      19 lines of code
      1 parameters
      1 conditional paths
      uses variable AST_declarator::kind defined in AST_defs.h
      uses enumvalue kind_function_declarator defined in AST_types.h
      uses macro definition CAST defined in AST.h
      uses enumvalue kind_identifier_declarator defined in AST_types.h
      uses macro definition NULL defined in config.h
      uses enumvalue kind_array_declarator defined in AST_types.h
      uses enumvalue kind_pointer_declarator defined in AST_types.h
   function get_parameter(declaration) in line 48
      protection public
      15 lines of code
      1 parameters
      1 conditional paths
      uses variable AST_declaration::kind defined in AST_defs.h
      uses enumvalue kind_ellipsis_decl defined in AST_types.h
      uses macro definition NULL defined in config.h
      uses enumvalue kind_oldidentifier_decl defined in AST_types.h
      uses macro definition CAST defined in AST.h
      uses enumvalue kind_data_decl defined in AST_types.h
   function base_identifier(data_declaration) in line 64
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses variable data_declaration::isfilescoperef defined in decls.h
      uses variable data_declaration::shadowed defined in decls.h
   function same_function(data_declaration,data_declaration) in line 72
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
      uses function base_identifier(data_declaration) defined in AST_utils.c
      uses variable data_declaration::kind defined in decls.h
      uses enumvalue decl_function defined in decls.h
   function call_to(data_declaration,function_call) in line 79
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses macro definition is_identifier defined in AST_types.h
      uses variable AST_function_call::arg1 defined in AST_defs.h
      uses function same_function(data_declaration,data_declaration) defined in AST_utils.c
      uses macro definition CAST defined in AST.h
   function is_localvar(expression) in line 85
      protection public
      10 lines of code
      1 parameters
      1 conditional paths
      uses macro definition is_identifier defined in AST_types.h
      uses macro definition FALSE defined in bool.h
      uses macro definition CAST defined in AST.h
      uses variable data_declaration::kind defined in decls.h
      uses enumvalue decl_variable defined in decls.h
      uses variable data_declaration::islocal defined in decls.h
   function is_assignment(void *) in line 96
      protection public
      12 lines of code
      1 parameters
      1 conditional paths
      uses variable AST_binary::kind defined in AST_defs.h
      uses enumvalue kind_assign defined in AST_types.h
      uses enumvalue kind_plus_assign defined in AST_types.h
      uses enumvalue kind_minus_assign defined in AST_types.h
      uses enumvalue kind_times_assign defined in AST_types.h
      uses enumvalue kind_divide_assign defined in AST_types.h
      uses enumvalue kind_modulo_assign defined in AST_types.h
      uses enumvalue kind_lshift_assign defined in AST_types.h
      uses enumvalue kind_rshift_assign defined in AST_types.h
      uses enumvalue kind_bitand_assign defined in AST_types.h
      uses enumvalue kind_bitor_assign defined in AST_types.h
      uses enumvalue kind_bitxor_assign defined in AST_types.h
   function is_increment(void *) in line 109
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses variable AST_binary::kind defined in AST_defs.h
      uses enumvalue kind_preincrement defined in AST_types.h
      uses enumvalue kind_predecrement defined in AST_types.h
      uses enumvalue kind_postincrement defined in AST_types.h
      uses enumvalue kind_postdecrement defined in AST_types.h
   function ignore_fields(expression) in line 118
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses variable AST_expression::kind defined in AST_defs.h
      uses enumvalue kind_field_ref defined in AST_types.h
      uses macro definition CAST defined in AST.h
   function expression_of_stmt(compound_expr) in line 126
      protection public
      13 lines of code
      1 parameters
      1 conditional paths
      uses macro definition CAST defined in AST.h
      uses variable AST_compound_expr::stmt defined in AST_defs.h
      uses function last_node(node) defined in AST.c
      uses variable AST_compound_stmt::stmts defined in AST_defs.h
      uses macro definition is_expression_stmt defined in AST_types.h
      uses variable AST_expression_stmt::arg1 defined in AST_defs.h
      uses macro definition NULL defined in config.h
   function zero_expression(expression) in line 140
      protection public
      26 lines of code
      1 parameters
      1 conditional paths
      uses macro definition is_assign defined in AST_types.h
      uses macro definition CAST defined in AST.h
      uses macro definition is_cast defined in AST_types.h
      uses macro definition is_comma defined in AST_types.h
      uses function last_node(node) defined in AST.c
      uses variable AST_binary::arg1 defined in AST_defs.h
      uses function definite_zero(expression) defined in constants.c
   function build_int_constant(region,location,type,largest_int) in line 167
      protection public
      15 lines of code
      4 parameters
      1 conditional paths
      uses variable AST_binary::cst defined in AST_defs.h
      uses variable cstring::data defined in cstring.h
      uses function rstrdup(region,const char *) defined in regions.c
      uses variable cstring::length defined in cstring.h
      uses function new_lexical_cst(region,location,cstring) defined in AST_defs.h
      uses variable AST_binary::loc defined in AST_defs.h
      uses variable AST_known_cst::type defined in AST_defs.h
      uses variable AST_known_cst::cst defined in AST_defs.h
      uses function make_cst(cval,type) defined in constants.c
      uses function make_cval_signed(largest_int,type) defined in cval.c
      uses macro definition CAST defined in AST.h
   function build_uint_constant(region,location,type,largest_uint) in line 183
      protection public
      15 lines of code
      4 parameters
      1 conditional paths
      uses variable AST_binary::cst defined in AST_defs.h
      uses variable cstring::data defined in cstring.h
      uses function rstrdup(region,const char *) defined in regions.c
      uses variable cstring::length defined in cstring.h
      uses function new_lexical_cst(region,location,cstring) defined in AST_defs.h
      uses variable AST_binary::loc defined in AST_defs.h
      uses variable AST_known_cst::type defined in AST_defs.h
      uses variable AST_known_cst::cst defined in AST_defs.h
      uses function make_cst(cval,type) defined in constants.c
      uses function make_cval_unsigned(largest_uint,type) defined in cval.c
      uses macro definition CAST defined in AST.h
   function value_of_enumerator(enumerator) in line 199
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable AST_enumerator::ddecl defined in AST_defs.h
      uses variable data_declaration::value defined in decls.h
      uses variable AST_known_cst::cval defined in AST_defs.h
   function build_identifier(region,location,data_declaration) in line 204
      protection public
      10 lines of code
      3 parameters
      1 conditional paths
      uses function new_identifier(region,location,cstring,data_declaration) defined in AST_defs.h
      uses variable AST_binary::loc defined in AST_defs.h
      uses function str2cstring(region,const char *) defined in cstring.h
      uses variable data_declaration::name defined in decls.h
      uses variable data_declaration::kind defined in decls.h
      uses enumvalue decl_variable defined in decls.h
      uses enumvalue decl_function defined in decls.h
      uses variable AST_identifier::type defined in AST_defs.h
      uses variable AST_identifier::cst defined in AST_defs.h
      uses function fold_identifier(expression,data_declaration) defined in constants.c
      uses macro definition CAST defined in AST.h
   function string_to_charp(region,string) in line 216
      protection public
      28 lines of code
      2 parameters
      1 conditional paths
      uses variable len defined in c-gperf.h
      uses macro definition scan_expression defined in AST_defs.h
      uses variable AST_string::strings defined in AST_defs.h
      uses variable AST_expression::kind defined in AST_defs.h
      uses enumvalue kind_string_cst defined in AST_types.h
      uses macro definition CAST defined in AST.h
      uses enumvalue kind_identifier defined in AST_types.h
      uses function fail(const char *,...) defined in utils.c
      uses macro definition rarrayalloc defined in regions.h
      uses variable cstring::data defined in cstring.h
      uses variable cstring::length defined in cstring.h
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cqual/cqual-0.981/src/AST_utils.h
module AST_utils.h
   macro definition build_zero in line 48
      protection public
   function get_parameter(declaration) in line 26
      protection public
      15 lines of code
      1 parameters
      4 conditional paths
      uses variable AST_declaration::kind defined in AST_defs.h
      uses enumvalue kind_ellipsis_decl defined in AST_types.h
      uses macro definition NULL defined in config.h
      uses enumvalue kind_oldidentifier_decl defined in AST_types.h
      uses macro definition CAST defined in AST.h
      uses enumvalue kind_data_decl defined in AST_types.h
   function get_fdeclarator(declarator) in line 27
      protection public
      19 lines of code
      1 parameters
      6 conditional paths
      uses variable AST_declarator::kind defined in AST_defs.h
      uses enumvalue kind_function_declarator defined in AST_types.h
      uses macro definition CAST defined in AST.h
      uses enumvalue kind_identifier_declarator defined in AST_types.h
      uses macro definition NULL defined in config.h
      uses enumvalue kind_array_declarator defined in AST_types.h
      uses enumvalue kind_pointer_declarator defined in AST_types.h
   function oldstyle_function(function_decl) in line 28
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable AST_function_decl::fdeclarator defined in AST_defs.h
      uses variable AST_function_declarator::parms defined in AST_defs.h
      uses macro definition is_oldidentifier_decl defined in AST_types.h
   function is_localvar(expression) in line 29
      protection public
      10 lines of code
      1 parameters
      2 conditional paths
      uses macro definition is_identifier defined in AST_types.h
      uses macro definition FALSE defined in bool.h
      uses macro definition CAST defined in AST.h
      uses variable data_declaration::kind defined in decls.h
      uses enumvalue decl_variable defined in decls.h
      uses variable data_declaration::islocal defined in decls.h
   function parent_block(node) in line 30
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function parent_function(node) in line 31
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function expression_of_stmt(compound_expr) in line 32
      protection public
      13 lines of code
      1 parameters
      2 conditional paths
      uses macro definition CAST defined in AST.h
      uses variable AST_compound_expr::stmt defined in AST_defs.h
      uses function last_node(node) defined in AST.c
      uses variable AST_compound_stmt::stmts defined in AST_defs.h
      uses macro definition is_expression_stmt defined in AST_types.h
      uses variable AST_expression_stmt::arg1 defined in AST_defs.h
      uses macro definition NULL defined in config.h
   function expression_used(expression) in line 33
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function is_assignment(void *) in line 35
      protection public
      12 lines of code
      1 parameters
      1 conditional paths
      uses variable AST_binary::kind defined in AST_defs.h
      uses enumvalue kind_assign defined in AST_types.h
      uses enumvalue kind_plus_assign defined in AST_types.h
      uses enumvalue kind_minus_assign defined in AST_types.h
      uses enumvalue kind_times_assign defined in AST_types.h
      uses enumvalue kind_divide_assign defined in AST_types.h
      uses enumvalue kind_modulo_assign defined in AST_types.h
      uses enumvalue kind_lshift_assign defined in AST_types.h
      uses enumvalue kind_rshift_assign defined in AST_types.h
      uses enumvalue kind_bitand_assign defined in AST_types.h
      uses enumvalue kind_bitor_assign defined in AST_types.h
      uses enumvalue kind_bitxor_assign defined in AST_types.h
   function is_increment(void *) in line 36
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses variable AST_binary::kind defined in AST_defs.h
      uses enumvalue kind_preincrement defined in AST_types.h
      uses enumvalue kind_predecrement defined in AST_types.h
      uses enumvalue kind_postincrement defined in AST_types.h
      uses enumvalue kind_postdecrement defined in AST_types.h
   function base_identifier(data_declaration) in line 37
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses variable data_declaration::isfilescoperef defined in decls.h
      uses variable data_declaration::shadowed defined in decls.h
   function same_function(data_declaration,data_declaration) in line 38
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
      uses function base_identifier(data_declaration) defined in AST_utils.c
      uses variable data_declaration::kind defined in decls.h
      uses enumvalue decl_function defined in decls.h
   function call_to(data_declaration,function_call) in line 39
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses macro definition is_identifier defined in AST_types.h
      uses variable AST_function_call::arg1 defined in AST_defs.h
      uses function same_function(data_declaration,data_declaration) defined in AST_utils.c
      uses macro definition CAST defined in AST.h
   function ignore_fields(expression) in line 40
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses variable AST_expression::kind defined in AST_defs.h
      uses enumvalue kind_field_ref defined in AST_types.h
      uses macro definition CAST defined in AST.h
   function zero_expression(expression) in line 44
      protection public
      26 lines of code
      1 parameters
      5 conditional paths
      uses macro definition is_assign defined in AST_types.h
      uses macro definition CAST defined in AST.h
      uses macro definition is_cast defined in AST_types.h
      uses macro definition is_comma defined in AST_types.h
      uses function last_node(node) defined in AST.c
      uses variable AST_binary::arg1 defined in AST_defs.h
      uses function definite_zero(expression) defined in constants.c
   function build_int_constant(region,location,type,largest_int) in line 46
      protection public
      15 lines of code
      4 parameters
      1 conditional paths
      uses variable AST_binary::cst defined in AST_defs.h
      uses variable cstring::data defined in cstring.h
      uses function rstrdup(region,const char *) defined in regions.c
      uses variable cstring::length defined in cstring.h
      uses function new_lexical_cst(region,location,cstring) defined in AST_defs.h
      uses variable AST_binary::loc defined in AST_defs.h
      uses variable AST_known_cst::type defined in AST_defs.h
      uses variable AST_known_cst::cst defined in AST_defs.h
      uses function make_cst(cval,type) defined in constants.c
      uses function make_cval_signed(largest_int,type) defined in cval.c
      uses macro definition CAST defined in AST.h
   function build_uint_constant(region,location,type,largest_uint) in line 47
      protection public
      15 lines of code
      4 parameters
      1 conditional paths
      uses variable AST_binary::cst defined in AST_defs.h
      uses variable cstring::data defined in cstring.h
      uses function rstrdup(region,const char *) defined in regions.c
      uses variable cstring::length defined in cstring.h
      uses function new_lexical_cst(region,location,cstring) defined in AST_defs.h
      uses variable AST_binary::loc defined in AST_defs.h
      uses variable AST_known_cst::type defined in AST_defs.h
      uses variable AST_known_cst::cst defined in AST_defs.h
      uses function make_cst(cval,type) defined in constants.c
      uses function make_cval_unsigned(largest_uint,type) defined in cval.c
      uses macro definition CAST defined in AST.h
   function build_identifier(region,location,data_declaration) in line 50
      protection public
      10 lines of code
      3 parameters
      1 conditional paths
      uses function new_identifier(region,location,cstring,data_declaration) defined in AST_defs.h
      uses variable AST_binary::loc defined in AST_defs.h
      uses function str2cstring(region,const char *) defined in cstring.h
      uses variable data_declaration::name defined in decls.h
      uses variable data_declaration::kind defined in decls.h
      uses enumvalue decl_variable defined in decls.h
      uses enumvalue decl_function defined in decls.h
      uses variable AST_identifier::type defined in AST_defs.h
      uses variable AST_identifier::cst defined in AST_defs.h
      uses function fold_identifier(expression,data_declaration) defined in constants.c
      uses macro definition CAST defined in AST.h
   function value_of_enumerator(enumerator) in line 52
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable AST_enumerator::ddecl defined in AST_defs.h
      uses variable data_declaration::value defined in decls.h
      uses variable AST_known_cst::cval defined in AST_defs.h
   function string_to_charp(region,string) in line 55
      protection public
      28 lines of code
      2 parameters
      5 conditional paths
      uses variable len defined in c-gperf.h
      uses macro definition scan_expression defined in AST_defs.h
      uses variable AST_string::strings defined in AST_defs.h
      uses variable AST_expression::kind defined in AST_defs.h
      uses enumvalue kind_string_cst defined in AST_types.h
      uses macro definition CAST defined in AST.h
      uses enumvalue kind_identifier defined in AST_types.h
      uses function fail(const char *,...) defined in utils.c
      uses macro definition rarrayalloc defined in regions.h
      uses variable cstring::data defined in cstring.h
      uses variable cstring::length defined in cstring.h
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cqual/cqual-0.981/src/bitset.c
module bitset.c
   macro definition BITS_PER_BYTE in line 35
      protection public
   macro definition BITS_PER_UINT in line 36
      protection public
   macro definition UINT_MAX in line 37
      protection public
   function div_ceil(unsigned int,unsigned int) in line 41
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function compute_offset(bitset,unsigned int) in line 48
      protection public
      8 lines of code
      2 parameters
      2 conditional paths
      uses macro definition BITS_PER_UINT defined in bitset.c
   function compute_mask(bitset,unsigned int) in line 58
      protection public
      10 lines of code
      2 parameters
      1 conditional paths
      uses macro definition BITS_PER_UINT defined in bitset.c
   function bitset_length(bitset) in line 70
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function div_ceil(unsigned int,unsigned int) defined in bitset.c
      uses macro definition BITS_PER_UINT defined in bitset.c
   function sizeof_bitset(unsigned int) in line 77
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function div_ceil(unsigned int,unsigned int) defined in bitset.c
      uses macro definition BITS_PER_UINT defined in bitset.c
   function bitset_new(region,unsigned int) in line 83
      protection public
      11 lines of code
      2 parameters
      1 conditional paths
      uses variable bitset defined in bitset.h
      uses function sizeof_bitset(unsigned int) defined in bitset.c
      uses macro definition rarrayalloc defined in regions.h
   function bitset_copy(region,bitset) in line 96
      protection public
      10 lines of code
      2 parameters
      1 conditional paths
      uses variable bitset defined in bitset.h
      uses function bitset_length(bitset) defined in bitset.c
      uses macro definition rarrayalloc defined in regions.h
      uses macro definition rarraycopy defined in regions.h
   function bitset_assign(bitset,bitset) in line 108
      protection public
      10 lines of code
      2 parameters
      1 conditional paths
      uses function bitset_length(bitset) defined in bitset.c
   function bitset_empty(bitset) in line 120
      protection public
      11 lines of code
      1 parameters
      1 conditional paths
      uses function bitset_length(bitset) defined in bitset.c
      uses macro definition FALSE defined in bool.h
      uses macro definition TRUE defined in bool.h
   function bitset_empty_range(bitset,unsigned int,unsigned int) in line 134
      protection public
      9 lines of code
      3 parameters
      1 conditional paths
      uses function bitset_member(bitset,unsigned int) defined in bitset.c
      uses macro definition FALSE defined in bool.h
      uses macro definition TRUE defined in bool.h
   function bitset_full_range(bitset,unsigned int,unsigned int) in line 146
      protection public
      9 lines of code
      3 parameters
      1 conditional paths
      uses function bitset_member(bitset,unsigned int) defined in bitset.c
      uses macro definition FALSE defined in bool.h
      uses macro definition TRUE defined in bool.h
   function bitset_insert_all(bitset) in line 157
      protection public
      9 lines of code
      1 parameters
      1 conditional paths
      uses function bitset_length(bitset) defined in bitset.c
      uses macro definition UINT_MAX defined in bitset.c
   function bitset_insert(bitset,unsigned int) in line 169
      protection public
      13 lines of code
      2 parameters
      1 conditional paths
      uses function compute_offset(bitset,unsigned int) defined in bitset.c
      uses function compute_mask(bitset,unsigned int) defined in bitset.c
      uses macro definition FALSE defined in bool.h
      uses macro definition TRUE defined in bool.h
   function bitset_remove(bitset,unsigned int) in line 184
      protection public
      13 lines of code
      2 parameters
      1 conditional paths
      uses function compute_offset(bitset,unsigned int) defined in bitset.c
      uses function compute_mask(bitset,unsigned int) defined in bitset.c
      uses macro definition TRUE defined in bool.h
      uses macro definition FALSE defined in bool.h
   function bitset_member(bitset,unsigned int) in line 199
      protection public
      9 lines of code
      2 parameters
      1 conditional paths
      uses function compute_offset(bitset,unsigned int) defined in bitset.c
      uses function compute_mask(bitset,unsigned int) defined in bitset.c
      uses macro definition TRUE defined in bool.h
      uses macro definition FALSE defined in bool.h
   function bitset_intersect(bitset,const bitset) in line 211
      protection public
      18 lines of code
      2 parameters
      1 conditional paths
      uses function bitset_length(bitset) defined in bitset.c
      uses macro definition FALSE defined in bool.h
      uses macro definition TRUE defined in bool.h
   function bitset_print(bitset) in line 231
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses function bitset_length(bitset) defined in bitset.c
      uses function printf(const char *$NONYEAR,(null)) defined in rcs1.c
   function bitset_hash(bitset) in line 241
      protection public
      10 lines of code
      1 parameters
      1 conditional paths
      uses function bitset_length(bitset) defined in bitset.c
   function bitset_eq(bitset,bitset) in line 253
      protection public
      11 lines of code
      2 parameters
      1 conditional paths
      uses function bitset_length(bitset) defined in bitset.c
      uses macro definition FALSE defined in bool.h
      uses macro definition TRUE defined in bool.h
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cqual/cqual-0.981/src/bitset.h
module bitset.h
   macro definition alloca_bitset in line 39
      protection public
   variable bitset in line 29
      protection public
   function sizeof_bitset(unsigned int) in line 34
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses macro definition BITS_PER_UINT defined in bitset.c
   function bitset_new(region,unsigned int) in line 37
      protection public
      11 lines of code
      2 parameters
      1 conditional paths
      uses variable bitset defined in bitset.h
      uses function sizeof_bitset(unsigned int) defined in bitset.c
      uses macro definition rarrayalloc defined in regions.h
   function bitset_copy(region,bitset) in line 42
      protection public
      10 lines of code
      2 parameters
      1 conditional paths
      uses variable bitset defined in bitset.h
      uses macro definition rarrayalloc defined in regions.h
      uses macro definition rarraycopy defined in regions.h
   function bitset_assign(bitset,bitset) in line 45
      protection public
      10 lines of code
      2 parameters
      2 conditional paths
   function bitset_empty(bitset) in line 48
      protection public
      11 lines of code
      1 parameters
      3 conditional paths
      uses macro definition FALSE defined in bool.h
      uses macro definition TRUE defined in bool.h
   function bitset_empty_range(bitset,unsigned int,unsigned int) in line 52
      protection public
      9 lines of code
      3 parameters
      3 conditional paths
      uses function bitset_member(bitset,unsigned int) defined in bitset.c
      uses macro definition FALSE defined in bool.h
      uses macro definition TRUE defined in bool.h
   function bitset_full_range(bitset,unsigned int,unsigned int) in line 56
      protection public
      9 lines of code
      3 parameters
      3 conditional paths
      uses function bitset_member(bitset,unsigned int) defined in bitset.c
      uses macro definition FALSE defined in bool.h
      uses macro definition TRUE defined in bool.h
   function bitset_insert_all(bitset) in line 59
      protection public
      9 lines of code
      1 parameters
      2 conditional paths
      uses macro definition UINT_MAX defined in bitset.c
   function bitset_insert(bitset,unsigned int) in line 62
      protection public
      13 lines of code
      2 parameters
      2 conditional paths
      uses macro definition FALSE defined in bool.h
      uses macro definition TRUE defined in bool.h
   function bitset_remove(bitset,unsigned int) in line 65
      protection public
      13 lines of code
      2 parameters
      2 conditional paths
      uses macro definition TRUE defined in bool.h
      uses macro definition FALSE defined in bool.h
   function bitset_member(bitset,unsigned int) in line 68
      protection public
      9 lines of code
      2 parameters
      2 conditional paths
      uses macro definition TRUE defined in bool.h
      uses macro definition FALSE defined in bool.h
   function bitset_intersect(bitset,const bitset) in line 72
      protection public
      18 lines of code
      2 parameters
      3 conditional paths
      uses macro definition FALSE defined in bool.h
      uses macro definition TRUE defined in bool.h
   function bitset_print(bitset) in line 75
      protection public
      8 lines of code
      1 parameters
      2 conditional paths
      uses function printf(const char *$NONYEAR,(null)) defined in rcs1.c
   function bitset_hash(bitset) in line 78
      protection public
      10 lines of code
      1 parameters
      1 conditional paths
   function bitset_eq(bitset,bitset) in line 81
      protection public
      11 lines of code
      2 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cqual/cqual-0.981/src/bool.h
module bool.h
   macro definition TRUE in line 26
      protection public
   macro definition FALSE in line 27
      protection public
   typedef bool in line 23
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cqual/cqual-0.981/src/buffer.c
module buffer.c
   function growbuf_new(region,int) in line 33
      protection public
      12 lines of code
      2 parameters
      1 conditional paths
      uses macro definition ralloc defined in regions.h
      uses variable growbuf::r defined in buffer.c
      uses variable growbuf::maxsize defined in buffer.c
      uses variable growbuf::cursize defined in buffer.c
      uses variable growbuf::buffer defined in buffer.c
      uses function rstralloc(region,size_t) defined in regions.c
   function growbuf_reset(growbuf) in line 47
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses variable growbuf::maxsize defined in buffer.c
      uses variable growbuf::cursize defined in buffer.c
      uses variable growbuf::buffer defined in buffer.c
   function gprintf(growbuf,const char *,...) in line 55
      protection public
      6 lines of code
      3 parameters
      1 conditional paths
      uses function gvprintf(growbuf,const char *,va_list) defined in buffer.c
   function gvprintf(growbuf,const char *,va_list) in line 63
      protection public
      44 lines of code
      3 parameters
      1 conditional paths
      uses variable growbuf::buffer defined in buffer.c
      uses variable growbuf::cursize defined in buffer.c
      uses variable growbuf::maxsize defined in buffer.c
      uses function rstralloc(region,size_t) defined in regions.c
      uses variable growbuf::r defined in buffer.c
   function growbuf_contents(growbuf) in line 109
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable growbuf::buffer defined in buffer.c
   function growbuf_empty(growbuf) in line 114
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable growbuf::cursize defined in buffer.c
   variable growbuf::buffer in line 29
      protection public
   variable growbuf::cursize in line 28
      protection public
   variable growbuf::maxsize in line 28
      protection public
   variable growbuf::r in line 27
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cqual/cqual-0.981/src/buffer.h
module buffer.h
   typedef growbuf in line 35
      protection public
   function growbuf_new(region,int) in line 37
      protection public
      12 lines of code
      2 parameters
      1 conditional paths
      uses macro definition ralloc defined in regions.h
      uses variable growbuf::r defined in buffer.c
      uses variable growbuf::maxsize defined in buffer.c
      uses variable growbuf::cursize defined in buffer.c
      uses variable growbuf::buffer defined in buffer.c
      uses function rstralloc(region,size_t) defined in regions.c
   function growbuf_reset(growbuf) in line 38
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses variable growbuf::maxsize defined in buffer.c
      uses variable growbuf::cursize defined in buffer.c
      uses variable growbuf::buffer defined in buffer.c
   function gprintf(growbuf,const char *,...) in line 39
      protection public
      6 lines of code
      3 parameters
      1 conditional paths
      uses function gvprintf(growbuf,const char *,va_list) defined in buffer.c
   function gvprintf(growbuf,const char *,va_list) in line 40
      protection public
      44 lines of code
      3 parameters
      4 conditional paths
      uses variable growbuf::buffer defined in buffer.c
      uses variable growbuf::cursize defined in buffer.c
      uses variable growbuf::maxsize defined in buffer.c
      uses function rstralloc(region,size_t) defined in regions.c
      uses variable growbuf::r defined in buffer.c
   function growbuf_contents(growbuf) in line 41
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable growbuf::buffer defined in buffer.c
   function growbuf_empty(growbuf) in line 42
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable growbuf::cursize defined in buffer.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cqual/cqual-0.981/src/builtins.c
module builtins.c
   variable gcc_builtin_classify_type in line 23
      protection public
   variable builtin_memcpy in line 23
      protection public
   variable builtin_memcmp in line 23
      protection public
   variable builtin_strcpy in line 24
      protection public
   variable builtin_strcmp in line 24
      protection public
   variable builtin_strlen in line 24
      protection public
   function builtins_init(void) in line 26
      protection public
      9 lines of code
      1 parameters
      1 conditional paths
      uses variable gcc_builtin_classify_type defined in builtins.c
      uses function lookup_global_id(const char *) defined in semantics.c
      uses variable builtin_memcpy defined in builtins.c
      uses variable builtin_memcmp defined in builtins.c
      uses variable builtin_strcpy defined in builtins.c
      uses variable builtin_strcmp defined in builtins.c
      uses variable builtin_strlen defined in builtins.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cqual/cqual-0.981/src/builtins.h
module builtins.h
   variable gcc_builtin_classify_type in line 22
      protection public
   variable builtin_memcpy in line 22
      protection public
   variable builtin_memcmp in line 22
      protection public
   variable builtin_strcpy in line 23
      protection public
   variable builtin_strcmp in line 23
      protection public
   variable builtin_strlen in line 23
      protection public
   function builtins_init(void) in line 25
      protection public
      9 lines of code
      1 parameters
      1 conditional paths
      uses variable gcc_builtin_classify_type defined in builtins.c
      uses function lookup_global_id(const char *) defined in semantics.c
      uses variable builtin_memcpy defined in builtins.c
      uses variable builtin_memcmp defined in builtins.c
      uses variable builtin_strcpy defined in builtins.c
      uses variable builtin_strcmp defined in builtins.c
      uses variable builtin_strlen defined in builtins.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cqual/cqual-0.981/src/c-gperf.h
module c-gperf.h
   macro definition TOTAL_KEYWORDS in line 6
      protection public
   macro definition MIN_WORD_LENGTH in line 7
      protection public
   macro definition MAX_WORD_LENGTH in line 8
      protection public
   macro definition MIN_HASH_VALUE in line 9
      protection public
   macro definition MAX_HASH_VALUE in line 10
      protection public
   variable len in line 23
      protection public
   variable hval in line 54
      protection public
   variable asso_values in line 66
      protection public
   variable wordlist in line 66
      protection public
   function hash(str,len) in line 21
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function switch(hval) in line 56
      protection public
      10 lines of code
      1 parameters
      4 conditional paths
      uses variable hval defined in c-gperf.h
      uses variable asso_values defined in c-gperf.h
   function is_reserved_word(str,len) in line 151
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   variable resword::name in line 4
      protection public
   variable resword::rid in line 4
      protection public
   variable resword::token in line 4
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cqual/cqual-0.981/src/c-lex.c
module c-lex.c
   macro definition YYDEBUG in line 88
      protection public
   macro definition GETC in line 112
      protection public
   macro definition UNGETC in line 113
      protection public
   macro definition UNSET_RESERVED_WORD in line 200
      protection public
   macro definition TUNGETC in line 316
      protection public
   macro definition GET_DIRECTIVE_LINE in line 338
      protection public
   macro definition ENDFILE in line 824
      protection public
   variable max_char_length in line 71
      protection public
   variable last_location in line 81
      protection public
   variable dummy_location in line 83
      protection public
   variable int_type_size in line 85
      protection public
   variable yydebug in line 122
      protection public
   variable in_system_header in line 124
      protection public
   variable maxtoken in line 125
      protection public
   variable token_buffer in line 126
      protection public
   variable indent_level in line 128
      protection public
   variable end_of_file in line 131
      protection public
   variable string_array in line 133
      protection public
   variable nextchar in line 137
      protection public
   variable token_ptr in line 315
      protection public
   function alloca() in line 39
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function extend_token_buffer(char *) in line 140
      protection public
      10 lines of code
      1 parameters
      1 conditional paths
      uses variable token_buffer defined in c-lex.c
      uses variable maxtoken defined in c-lex.c
      uses function xrealloc(void *,size_t) defined in utils.c
   function check_newline(void) in line 141
      protection public
      291 lines of code
      1 parameters
      48 conditional paths
      uses variable resword::token defined in c-gperf.h
      uses variable filepos defined in input.c
      uses variable lineno defined in input.c
      uses macro definition GETC defined in c-lex.c
      uses function save_directive(char *) defined in semantics.c
      uses macro definition UNGETC defined in c-lex.c
      uses function yylex(void) defined in c-lex.c
      uses macro definition STRING defined in c-parse.tab.c
      uses function error(const char *,...) defined in errors.c
      uses function token_isint(int) defined in c-lex.c
      uses function token_intvalue(void) defined in c-lex.c
      uses variable input_filename defined in input.c
      uses function parse_string_token(lexical_cst) defined in c-lex.c
      uses macro definition CAST defined in AST.h
      uses macro definition yylval defined in lattice-parse.tab.c
      uses variable in_system_header defined in c-lex.c
      uses variable main_input_filename defined in input.c
      uses variable input_file_stack defined in input.c
      uses variable file_stack::name defined in input.h
      uses function xmalloc(size_t) defined in utils.c
      uses variable file_stack::line defined in input.h
      uses variable file_stack::filepos defined in input.h
      uses variable file_stack::next defined in input.h
      uses variable file_stack::indent_level defined in input.h
      uses variable indent_level defined in c-lex.c
      uses variable input_file_stack_tick defined in input.c
      uses function warning_with_file_and_line(char *,int,const char *,...) defined in errors.c
      uses function warning(const char *,...) defined in errors.c
      uses variable nextchar defined in c-lex.c
   function init_lex(void) in line 174
      protection public
      51 lines of code
      1 parameters
      1 conditional paths
      uses variable dummy_location defined in c-lex.c
      uses macro definition ralloc defined in regions.h
      uses variable parse_region defined in c-parse.h
      uses variable Location::filename defined in location.h
      uses variable lineno defined in input.c
      uses variable filepos defined in input.c
      uses function getenv(const char *) defined in taint0.c
      uses variable max_char_length defined in c-lex.c
      uses variable maxtoken defined in c-lex.c
      uses variable token_buffer defined in c-lex.c
      uses function xmalloc(size_t) defined in utils.c
      uses variable string_array defined in c-lex.c
      uses variable int_type_size defined in c-lex.c
      uses function type_size(type) defined in types.c
      uses variable int_type defined in types.c
      uses variable flag_traditional defined in flags.h
      uses macro definition UNSET_RESERVED_WORD defined in c-lex.c
      uses variable flag_no_asm defined in flags.h
      uses macro definition UNGETC defined in c-lex.c
      uses function check_newline(void) defined in c-lex.c
   function yyprint(FILE *,int,YYSTYPE) in line 229
      protection public
      12 lines of code
      3 parameters
      2 conditional paths
      uses macro definition yychar defined in lattice-parse.tab.c
      uses macro definition IDENTIFIER defined in c-parse.tab.c
      uses macro definition yylval defined in lattice-parse.tab.c
   function skip_white_space(int) in line 246
      protection public
      51 lines of code
      1 parameters
      12 conditional paths
      uses function check_newline(void) defined in c-lex.c
      uses macro definition GETC defined in c-lex.c
      uses variable pedantic defined in flags.h
      uses function warning(const char *,...) defined in errors.c
      uses variable lineno defined in input.c
      uses function error(const char *,...) defined in errors.c
   function TGETC(void) in line 318
      protection public
      12 lines of code
      1 parameters
      3 conditional paths
      uses macro definition GETC defined in c-lex.c
      uses variable token_ptr defined in c-lex.c
      uses variable token_buffer defined in c-lex.c
      uses variable maxtoken defined in c-lex.c
      uses function extend_token_buffer(char *) defined in c-lex.c
   function make_token_cstring(void) in line 331
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function make_cstring(region,const char *,int) defined in cstring.h
      uses variable parse_region defined in c-parse.h
      uses variable token_buffer defined in c-lex.c
      uses variable token_ptr defined in c-lex.c
   function get_directive_line(FILE *) in line 354
      protection public
      68 lines of code
      1 parameters
      19 conditional paths
      uses macro definition NULL defined in config.h
      uses function xmalloc(size_t) defined in utils.c
      uses function xrealloc(void *,size_t) defined in utils.c
      uses variable filepos defined in input.c
      uses variable finput defined in input.c
      uses macro definition GET_DIRECTIVE_LINE defined in c-lex.c
      uses macro definition GETC defined in c-lex.c
      uses macro definition UNGETC defined in c-lex.c
   function parse_string_token(lexical_cst) in line 505
      protection public
      10 lines of code
      1 parameters
      1 conditional paths
      uses function rstralloc(region,size_t) defined in regions.c
      uses variable parse_region defined in c-parse.h
      uses variable AST_lexical_cst::cstring defined in AST_defs.h
      uses variable cstring::length defined in cstring.h
      uses variable cstring::data defined in cstring.h
   function token_isint(int) in line 516
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable resword::token defined in c-gperf.h
      uses macro definition CONSTANT defined in c-parse.tab.c
      uses function type_integral(type) defined in types.c
      uses macro definition yylval defined in lattice-parse.tab.c
   function token_intvalue(void) in line 521
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses macro definition constant_sint_value defined in constants.h
      uses macro definition yylval defined in lattice-parse.tab.c
   function readescape(int *) in line 831
      protection public
      124 lines of code
      1 parameters
      47 conditional paths
      uses function TGETC(void) defined in c-lex.c
      uses variable count defined in qtype.c
      uses variable warn_traditional defined in flags.h
      uses function warning(const char *,...) defined in errors.c
      uses variable flag_traditional defined in flags.h
      uses macro definition TUNGETC defined in c-lex.c
      uses function error(const char *,...) defined in errors.c
      uses variable int_type_size defined in c-lex.c
      uses function pedwarn(const char *,...) defined in errors.c
      uses variable lineno defined in input.c
      uses variable pedantic defined in flags.h
   function read_char(char *,char,char *,wchar_t *) in line 956
      protection public
      83 lines of code
      4 parameters
      16 conditional paths
      uses function type_size(type) defined in types.c
      uses variable wchar_type defined in types.c
      uses macro definition BITSPERBYTE defined in config.h
      uses function TGETC(void) defined in c-lex.c
      uses function readescape(int *) defined in c-lex.c
      uses function pedwarn(const char *,...) defined in errors.c
      uses variable pedantic defined in flags.h
      uses variable lineno defined in input.c
      uses variable max_char_length defined in c-lex.c
      uses function warning(const char *,...) defined in errors.c
      uses macro definition TUNGETC defined in c-lex.c
   function yyerror(char *) in line 1042
      protection public
      25 lines of code
      1 parameters
      6 conditional paths
      uses variable end_of_file defined in c-lex.c
      uses function strcat((null),(null)) defined in taint-poly.c
      uses variable token_buffer defined in c-lex.c
      uses function sprintf(char *,const char *,(null)) defined in rcs1.c
      uses function error(const char *,...) defined in errors.c
   function yylex(void) in line 1070
      protection public
      682 lines of code
      1 parameters
      1 conditional paths
      uses variable nextchar defined in c-lex.c
      uses macro definition GETC defined in c-lex.c
      uses function skip_white_space(int) defined in c-lex.c
      uses variable token_ptr defined in c-lex.c
      uses variable token_buffer defined in c-lex.c
      uses macro definition ralloc defined in regions.h
      uses variable parse_region defined in c-parse.h
      uses variable Location::lineno defined in location.h
      uses variable lineno defined in input.c
      uses variable Location::filepos defined in location.h
      uses variable filepos defined in input.c
      uses variable Location::filename defined in location.h
      uses variable input_filename defined in input.c
      uses variable Location::in_system_header defined in location.h
      uses variable in_system_header defined in c-lex.c
      uses variable last_location defined in c-lex.c
      uses macro definition yylval defined in lattice-parse.tab.c
      uses variable end_of_file defined in c-lex.c
      uses macro definition ENDFILE defined in c-lex.c
      uses function TGETC(void) defined in c-lex.c
      uses macro definition TUNGETC defined in c-lex.c
      uses variable dollars_in_ident defined in flags.h
      uses function error(const char *,...) defined in errors.c
      uses variable pedantic defined in flags.h
      uses function pedwarn(const char *,...) defined in errors.c
      uses macro definition IDENTIFIER defined in c-parse.tab.c
      uses function is_reserved_word(str,len) defined in c-gperf.h
      uses variable resword::token defined in c-gperf.h
      uses variable resword::rid defined in c-gperf.h
      uses macro definition ASM_KEYWORD defined in c-parse.tab.c
      uses macro definition TYPEOF defined in c-parse.tab.c
      uses enumvalue RID_INLINE defined in c-lex.h
      uses function make_token_cstring(void) defined in c-lex.c
      uses function lookup_id(const char *,bool) defined in semantics.c
      uses macro definition FALSE defined in bool.h
      uses enumvalue decl_typedef defined in decls.h
      uses macro definition TYPENAME defined in c-parse.tab.c
      uses enumvalue decl_magic_string defined in decls.h
      uses macro definition MAGIC_STRING defined in c-parse.tab.c
      uses macro definition TYPE_VARIABLE defined in c-parse.tab.c
      uses macro definition USER_QUALIFIER defined in c-parse.tab.c
      uses macro definition LARGEST_UINTBITS defined in config.h
      uses macro definition ELLIPSIS defined in c-parse.tab.c
      uses variable float_type defined in types.c
      uses variable long_double_type defined in types.c
      uses variable double_type defined in types.c
      uses function make_complex_type(type) defined in types.c
      uses function fold_lexical_real(type,location,cstring) defined in constants.c
      uses variable unsigned_long_long_type defined in types.c
      uses variable long_long_type defined in types.c
      uses variable unsigned_long_type defined in types.c
      uses variable long_type defined in types.c
      uses variable unsigned_int_type defined in types.c
      uses variable int_type defined in types.c
      uses function fold_lexical_int(type,location,cstring,bool,largest_uint,bool) defined in constants.c
      uses variable flag_traditional defined in flags.h
      uses macro definition CONSTANT defined in c-parse.tab.c
      uses function alloca() defined in c-lex.c
      uses variable max_char_length defined in c-lex.c
      uses variable count defined in qtype.c
      uses function type_size(type) defined in types.c
      uses variable wchar_type defined in types.c
      uses macro definition BITSPERBYTE defined in config.h
      uses function read_char(char *,char,char *,wchar_t *) defined in c-lex.c
      uses macro definition NULL defined in config.h
      uses variable int_type_size defined in c-lex.c
      uses variable warn_multichar defined in flags.h
      uses function warning(const char *,...) defined in errors.c
      uses function fold_lexical_char(location,cstring,bool,int) defined in constants.c
      uses variable string_array defined in c-lex.c
      uses function fold_lexical_string(location,cstring,bool,wchar_array) defined in constants.c
      uses macro definition STRING defined in c-parse.tab.c
      uses macro definition ASSIGN defined in c-parse.tab.c
      uses macro definition ARITHCOMPARE defined in c-parse.tab.c
      uses enumvalue kind_leq defined in AST_types.h
      uses enumvalue kind_geq defined in AST_types.h
      uses macro definition EQCOMPARE defined in c-parse.tab.c
      uses enumvalue kind_ne defined in AST_types.h
      uses enumvalue kind_eq defined in AST_types.h
      uses enumvalue kind_plus_assign defined in AST_types.h
      uses enumvalue kind_minus_assign defined in AST_types.h
      uses enumvalue kind_bitand_assign defined in AST_types.h
      uses enumvalue kind_bitor_assign defined in AST_types.h
      uses enumvalue kind_times_assign defined in AST_types.h
      uses enumvalue kind_divide_assign defined in AST_types.h
      uses enumvalue kind_modulo_assign defined in AST_types.h
      uses enumvalue kind_bitxor_assign defined in AST_types.h
      uses macro definition LSHIFT defined in c-parse.tab.c
      uses enumvalue kind_lshift_assign defined in AST_types.h
      uses macro definition RSHIFT defined in c-parse.tab.c
      uses enumvalue kind_rshift_assign defined in AST_types.h
      uses macro definition PLUSPLUS defined in c-parse.tab.c
      uses macro definition MINUSMINUS defined in c-parse.tab.c
      uses macro definition ANDAND defined in c-parse.tab.c
      uses macro definition OROR defined in c-parse.tab.c
      uses macro definition POINTSAT defined in c-parse.tab.c
      uses variable indent_level defined in c-lex.c
      uses enumvalue kind_lt defined in AST_types.h
      uses enumvalue kind_gt defined in AST_types.h
   function set_yydebug(int) in line 1758
      protection public
      9 lines of code
      1 parameters
      1 conditional paths
      uses variable yydebug defined in c-lex.c
      uses function warning(const char *,...) defined in errors.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cqual/cqual-0.981/src/c-lex.h
module c-lex.h
   macro definition NORID in line 65
      protection public
   enumeration rid in line 40
      protection public
   variable last_location in line 37
      protection public
   variable dummy_location in line 37
      protection public
   variable token_buffer in line 67
      protection public
   variable in_system_header in line 68
      protection public
   variable in_prelude in line 69
      protection public
   enumvalue RID_UNUSED in line 41
      protection public
   enumvalue RID_INT in line 43
      protection public
   enumvalue RID_CHAR in line 44
      protection public
   enumvalue RID_FLOAT in line 45
      protection public
   enumvalue RID_DOUBLE in line 46
      protection public
   enumvalue RID_VOID in line 47
      protection public
   enumvalue RID_UNSIGNED in line 49
      protection public
   enumvalue RID_SHORT in line 50
      protection public
   enumvalue RID_LONG in line 51
      protection public
   enumvalue RID_SIGNED in line 52
      protection public
   enumvalue RID_INLINE in line 53
      protection public
   enumvalue RID_COMPLEX in line 54
      protection public
   enumvalue RID_AUTO in line 56
      protection public
   enumvalue RID_STATIC in line 57
      protection public
   enumvalue RID_EXTERN in line 58
      protection public
   enumvalue RID_REGISTER in line 59
      protection public
   enumvalue RID_TYPEDEF in line 60
      protection public
   enumvalue RID_MAX in line 63
      protection public
   function yylex(void) in line 72
      protection public
      682 lines of code
      1 parameters
      1 conditional paths
   function init_lex(void) in line 73
      protection public
      51 lines of code
      1 parameters
      3 conditional paths
      uses variable dummy_location defined in c-lex.c
      uses macro definition ralloc defined in regions.h
      uses variable parse_region defined in c-parse.h
      uses variable Location::filename defined in location.h
      uses variable lineno defined in input.c
      uses variable filepos defined in input.c
      uses function getenv(const char *) defined in taint0.c
      uses variable max_char_length defined in c-lex.c
      uses function xmalloc(size_t) defined in utils.c
      uses variable string_array defined in c-lex.c
      uses function type_size(type) defined in types.c
      uses variable int_type defined in types.c
      uses variable flag_traditional defined in flags.h
      uses macro definition UNSET_RESERVED_WORD defined in c-lex.c
      uses variable flag_no_asm defined in flags.h
      uses macro definition UNGETC defined in c-lex.c
      uses function check_newline(void) defined in c-lex.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cqual/cqual-0.981/src/c-parse.h
module c-parse.h
   macro definition YYSTYPE in line 73
      protection public
   variable parse_region in line 80
      protection public
   variable unevaluated_expression in line 85
      protection public
   function yyparse(void) in line 75
      protection public
      64 lines of code
      1 parameters
      1 conditional paths
      uses variable yystype::u defined in lattice-parse.tab.h
      uses variable yystype::ptr defined in lattice-parse.tab.h
      uses variable yystype::idtoken defined in lattice-parse.tab.h
      uses variable yystype::location defined in lattice-parse.tab.h
      uses variable Location::filename defined in location.h
      uses variable yystype::id defined in lattice-parse.tab.h
      uses variable cstring::data defined in cstring.h
      uses variable yystype::decl defined in lattice-parse.tab.h
   variable yystype::asm_operand in line 29
      protection public
   variable yystype::asm_stmt in line 30
      protection public
   variable yystype::attribute in line 31
      protection public
   variable yystype::constant in line 32
      protection public
   variable yystype::cstmt in line 41
      protection public
   variable yystype::decl in line 34
      protection public
   variable yystype::decl in line 69
      protection public
   variable yystype::declarator in line 35
      protection public
   variable yystype::expr in line 36
      protection public
   variable yystype::for_stmt in line 42
      protection public
   variable yystype::i in line 50
      protection public
   variable yystype::id in line 68
      protection public
   variable yystype::id_label in line 37
      protection public
   variable yystype::idtoken in line 70
      protection public
   variable yystype::iexpr in line 57
      protection public
   variable yystype::istmt in line 62
      protection public
   variable yystype::itoken in line 51
      protection public
   variable yystype::label in line 38
      protection public
   variable yystype::location in line 49
      protection public
   variable yystype::node in line 39
      protection public
   variable yystype::ptr in line 28
      protection public
   variable yystype::qual in line 35
      protection public
   variable yystype::stmt in line 40
      protection public
   variable yystype::str in line 34
      protection public
   variable yystype::string in line 43
      protection public
   variable yystype::string_cst in line 33
      protection public
   variable yystype::telement in line 44
      protection public
   variable yystype::type in line 45
      protection public
   variable yystype::u in line 64
      protection public
   variable yystype::word in line 46
      protection public
   variable yystype::@2::asm_operand in line 29
      protection public
   variable yystype::@2::asm_stmt in line 30
      protection public
   variable yystype::@2::attribute in line 31
      protection public
   variable yystype::@2::constant in line 32
      protection public
   variable yystype::@2::cstmt in line 41
      protection public
   variable yystype::@2::decl in line 34
      protection public
   variable yystype::@2::declarator in line 35
      protection public
   variable yystype::@2::expr in line 36
      protection public
   variable yystype::@2::for_stmt in line 42
      protection public
   variable yystype::@2::id_label in line 37
      protection public
   variable yystype::@2::iexpr in line 57
      protection public
   variable yystype::@2::istmt in line 62
      protection public
   variable yystype::@2::itoken in line 51
      protection public
   variable yystype::@2::label in line 38
      protection public
   variable yystype::@2::node in line 39
      protection public
   variable yystype::@2::ptr in line 28
      protection public
   variable yystype::@2::stmt in line 40
      protection public
   variable yystype::@2::string in line 43
      protection public
   variable yystype::@2::string_cst in line 33
      protection public
   variable yystype::@2::telement in line 44
      protection public
   variable yystype::@2::type in line 45
      protection public
   variable yystype::@2::word in line 46
      protection public
   variable yystype::@2::@4::i in line 50
      protection public
   variable yystype::@2::@4::location in line 49
      protection public
   variable yystype::@2::@5::expr in line 55
      protection public
   variable yystype::@2::@5::i in line 56
      protection public
   variable yystype::@2::@5::location in line 54
      protection public
   variable yystype::@2::@6::i in line 61
      protection public
   variable yystype::@2::@6::stmt in line 60
      protection public
   variable yystype::@3::decl in line 69
      protection public
   variable yystype::@3::id in line 68
      protection public
   variable yystype::@3::location in line 67
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cqual/cqual-0.981/src/c-parse.tab.c
module c-parse.tab.c
   macro definition YYBISON in line 4
      protection public
   macro definition IDENTIFIER in line 6
      protection public
   macro definition TYPENAME in line 7
      protection public
   macro definition USER_QUALIFIER in line 8
      protection public
   macro definition TYPE_VARIABLE in line 9
      protection public
   macro definition SCSPEC in line 10
      protection public
   macro definition TYPESPEC in line 11
      protection public
   macro definition TYPE_QUAL in line 12
      protection public
   macro definition FN_QUAL in line 13
      protection public
   macro definition CONSTANT in line 14
      protection public
   macro definition STRING in line 15
      protection public
   macro definition MAGIC_STRING in line 16
      protection public
   macro definition ELLIPSIS in line 17
      protection public
   macro definition SIZEOF in line 18
      protection public
   macro definition ENUM in line 19
      protection public
   macro definition STRUCT in line 20
      protection public
   macro definition UNION in line 21
      protection public
   macro definition IF in line 22
      protection public
   macro definition ELSE in line 23
      protection public
   macro definition WHILE in line 24
      protection public
   macro definition DO in line 25
      protection public
   macro definition FOR in line 26
      protection public
   macro definition SWITCH in line 27
      protection public
   macro definition CASE in line 28
      protection public
   macro definition DEFAULT in line 29
      protection public
   macro definition BREAK in line 30
      protection public
   macro definition CONTINUE in line 31
      protection public
   macro definition RETURN in line 32
      protection public
   macro definition GOTO in line 33
      protection public
   macro definition ASM_KEYWORD in line 34
      protection public
   macro definition TYPEOF in line 35
      protection public
   macro definition ALIGNOF in line 36
      protection public
   macro definition ATTRIBUTE in line 37
      protection public
   macro definition EXTENSION in line 38
      protection public
   macro definition LABEL in line 39
      protection public
   macro definition REALPART in line 40
      protection public
   macro definition IMAGPART in line 41
      protection public
   macro definition VA_ARG in line 42
      protection public
   macro definition ASSERT_TYPE in line 43
      protection public
   macro definition CHANGE_TYPE in line 44
      protection public
   macro definition DEEP_RESTRICT in line 45
      protection public
   macro definition ASSIGN in line 46
      protection public
   macro definition OROR in line 47
      protection public
   macro definition ANDAND in line 48
      protection public
   macro definition EQCOMPARE in line 49
      protection public
   macro definition ARITHCOMPARE in line 50
      protection public
   macro definition LSHIFT in line 51
      protection public
   macro definition RSHIFT in line 52
      protection public
   macro definition UNARY in line 53
      protection public
   macro definition PLUSPLUS in line 54
      protection public
   macro definition MINUSMINUS in line 55
      protection public
   macro definition HYPERUNARY in line 56
      protection public
   macro definition POINTSAT in line 57
      protection public
   macro definition YYERROR1 in line 78
      protection public
   macro definition YYDEBUG in line 81
      protection public
   macro definition pr in line 89
      protection public
   macro definition YYPRINT in line 169
      protection public
   macro definition YYFINAL in line 177
      protection public
   macro definition YYFLAG in line 178
      protection public
   macro definition YYNTBASE in line 179
      protection public
   macro definition YYTRANSLATE in line 182
      protection public
   macro definition YYLAST in line 780
      protection public
   macro definition YYSTACK_ALLOC in line 1462
      protection public
   macro definition YYSTACK_FREE in line 1463
      protection public
   macro definition YYSTACK_GAP_MAX in line 1483
      protection public
   macro definition YYSTACK_BYTES in line 1492
      protection public
   macro definition YYCOPY in line 1504
      protection public
   macro definition YYSTACK_RELOCATE in line 1520
      protection public
   macro definition YYSIZE_T in line 1547
      protection public
   macro definition yyerrok in line 1550
      protection public
   macro definition yyclearin in line 1551
      protection public
   macro definition YYEMPTY in line 1552
      protection public
   macro definition YYEOF in line 1553
      protection public
   macro definition YYACCEPT in line 1554
      protection public
   macro definition YYABORT in line 1555
      protection public
   macro definition YYERROR in line 1556
      protection public
   macro definition YYFAIL in line 1560
      protection public
   macro definition YYRECOVERING in line 1561
      protection public
   macro definition YYBACKUP in line 1562
      protection public
   macro definition YYTERROR in line 1579
      protection public
   macro definition YYERRCODE in line 1580
      protection public
   macro definition YYLLOC_DEFAULT in line 1591
      protection public
   macro definition YYLEX in line 1614
      protection public
   macro definition YYFPRINTF in line 1623
      protection public
   macro definition YYDPRINTF in line 1626
      protection public
   macro definition YYINITDEPTH in line 1640
      protection public
   macro definition YYMAXDEPTH in line 1655
      protection public
   macro definition YYPARSE_PARAM_ARG in line 1728
      protection public
   macro definition YYPARSE_PARAM_DECL in line 1729
      protection public
   macro definition YY_DECL_NON_LSP_VARIABLES in line 1744
      protection public
   macro definition YY_DECL_VARIABLES in line 1761
      protection public
   macro definition YYPOPSTACK in line 1817
      protection public
   variable declspec_stack in line 141
      protection public
   variable ds_region in line 142
      protection public
   variable yytranslate in line 185
      protection public
   variable yyprhs in line 221
      protection public
   variable yyrhs in line 264
      protection public
   variable yyrline in line 402
      protection public
   variable yytname in line 451
      protection public
   variable yyr1 in line 499
      protection public
   variable yyr2 in line 544
      protection public
   variable yydefact in line 591
      protection public
   variable yydefgoto in line 666
      protection public
   variable yypact in line 685
      protection public
   variable yypgoto in line 760
      protection public
   variable yytable in line 783
      protection public
   variable yycheck in line 1090
      protection public
   variable yydebug in line 1633
      protection public
   function yyparse(void) in line 73
      protection public
      64 lines of code
      1 parameters
      1 conditional paths
      uses variable yystype::u defined in lattice-parse.tab.h
      uses variable yystype::ptr defined in lattice-parse.tab.h
      uses variable yystype::idtoken defined in lattice-parse.tab.h
      uses variable yystype::location defined in lattice-parse.tab.h
      uses variable Location::filename defined in location.h
      uses variable yystype::id defined in lattice-parse.tab.h
      uses variable cstring::data defined in cstring.h
      uses variable yystype::decl defined in lattice-parse.tab.h
   function pop_declspec_stack(void) in line 146
      protection public
      8 lines of code
      1 parameters
      2 conditional paths
      uses variable declspec_stack defined in c-parse.tab.c
      uses function deleteregion_ptr(region *) defined in regions.c
      uses variable ds_region defined in c-parse.tab.c
   function push_declspec_stack(void) in line 155
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses variable ds_region defined in c-parse.tab.c
      uses function newsubregion(region) defined in regions.c
      uses variable parse_region defined in c-parse.h
      uses macro definition ralloc defined in regions.h
      uses variable declspec_stack defined in c-parse.tab.c
   function yyprint() in line 170
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function yyparse(YYPARSE_PARAM_ARG) in line 1773
      protection public
      2306 lines of code
      1 parameters
      465 conditional paths
      uses macro definition YY_DECL_VARIABLES defined in c-parse.tab.c
      uses macro definition YYINITDEPTH defined in c-parse.tab.c
      uses macro definition YYSTYPE defined in c-parse.h
      uses macro definition YYSIZE_T defined in c-parse.tab.c
      uses macro definition YYDPRINTF defined in c-parse.tab.c
      uses macro definition yynerrs defined in lattice-parse.tab.c
      uses macro definition yychar defined in lattice-parse.tab.c
      uses macro definition YYEMPTY defined in c-parse.tab.c
      uses macro definition YYMAXDEPTH defined in c-parse.tab.c
      uses macro definition YYSTACK_ALLOC defined in c-parse.tab.c
      uses macro definition YYSTACK_BYTES defined in c-parse.tab.c
      uses macro definition YYSTACK_RELOCATE defined in c-parse.tab.c
      uses variable yyalloc::yyss defined in lattice-parse.tab.c
      uses variable yyalloc::yyvs defined in lattice-parse.tab.c
      uses macro definition YYSTACK_FREE defined in c-parse.tab.c
      uses macro definition YYABORT defined in c-parse.tab.c
      uses variable yypact defined in c-parse.tab.c
      uses macro definition YYFLAG defined in c-parse.tab.c
      uses macro definition YYLEX defined in c-parse.tab.c
      uses macro definition YYEOF defined in c-parse.tab.c
      uses macro definition YYTRANSLATE defined in c-parse.tab.c
      uses variable yydebug defined in c-parse.tab.c
      uses macro definition YYFPRINTF defined in c-parse.tab.c
      uses variable yytname defined in c-parse.tab.c
      uses macro definition YYPRINT defined in c-parse.tab.c
      uses macro definition yylval defined in lattice-parse.tab.c
      uses macro definition YYLAST defined in c-parse.tab.c
      uses variable yycheck defined in c-parse.tab.c
      uses variable yytable defined in c-parse.tab.c
      uses macro definition YYFINAL defined in c-parse.tab.c
      uses macro definition YYACCEPT defined in c-parse.tab.c
      uses variable yydefact defined in c-parse.tab.c
      uses variable yyr2 defined in c-parse.tab.c
      uses macro definition YYLLOC_DEFAULT defined in c-parse.tab.c
      uses variable yyrline defined in c-parse.tab.c
      uses variable yyprhs defined in c-parse.tab.c
      uses variable yyrhs defined in c-parse.tab.c
      uses variable yyr1 defined in c-parse.tab.c
      uses variable pedantic defined in flags.h
      uses function pedwarn(const char *,...) defined in errors.c
      uses variable the_program defined in AST.c
      uses macro definition NULL defined in config.h
      uses macro definition CAST defined in AST.h
      uses function ast_reverse(node) defined in AST.c
      uses function declaration_chain(declaration,declaration) defined in AST_defs.h
      uses function new_asm_decl(region,location,asm_stmt) defined in AST_defs.h
      uses macro definition pr defined in c-parse.tab.c
      uses function new_asm_stmt(region,location,expression,asm_operand,asm_operand,string,type_element) defined in AST_defs.h
      uses function new_extension_decl(region,location,declaration) defined in AST_defs.h
      uses function error(const char *,...) defined in errors.c
      uses variable flag_traditional defined in flags.h
      uses function warning(const char *,...) defined in errors.c
      uses function new_data_decl(region,location,type_element,attribute,declaration) defined in AST_defs.h
      uses function pop_declspec_stack(void) defined in c-parse.tab.c
      uses function shadow_tag(type_element) defined in semantics.c
      uses function new_error_decl(region,location) defined in AST_defs.h
      uses variable last_location defined in c-lex.c
      uses function start_function(type_element,declarator,attribute,bool) defined in semantics.c
      uses macro definition YYERROR1 defined in c-parse.tab.c
      uses function store_parm_decls(declaration) defined in semantics.c
      uses function finish_function(statement) defined in semantics.c
      uses function new_id_label(region,location,cstring) defined in AST_defs.h
      uses function new_word(region,location,cstring) defined in AST_defs.h
      uses enumvalue kind_address_of defined in AST_types.h
      uses enumvalue kind_unary_minus defined in AST_types.h
      uses enumvalue kind_unary_plus defined in AST_types.h
      uses enumvalue kind_preincrement defined in AST_types.h
      uses enumvalue kind_predecrement defined in AST_types.h
      uses enumvalue kind_bitnot defined in AST_types.h
      uses enumvalue kind_not defined in AST_types.h
      uses enumvalue kind_realpart defined in AST_types.h
      uses enumvalue kind_imagpart defined in AST_types.h
      uses function make_comma(location,expression) defined in expr.c
      uses function expression_chain(expression,expression) defined in AST_defs.h
      uses function make_dereference(location,expression) defined in expr.c
      uses function make_extension_expr(location,expression) defined in expr.c
      uses function make_unary(location,int,expression) defined in expr.c
      uses function make_label_address(location,id_label) defined in expr.c
      uses function use_label(id_label) defined in stmt.c
      uses function make_sizeof_expr(location,expression) defined in expr.c
      uses variable unevaluated_expression defined in c-parse.h
      uses function make_sizeof_type(location,asttype) defined in expr.c
      uses function make_alignof_expr(location,expression) defined in expr.c
      uses function make_alignof_type(location,asttype) defined in expr.c
      uses function make_cast(location,asttype,expression) defined in expr.c
      uses function new_cast_list(region,location,asttype,expression) defined in AST_defs.h
      uses function new_init_list(region,location,expression) defined in AST_defs.h
      uses macro definition TRUE defined in bool.h
      uses function type_array(type) defined in types.c
      uses variable type::u defined in types.c
      uses function make_binary(location,int,expression,expression) defined in expr.c
      uses enumvalue kind_plus defined in AST_types.h
      uses enumvalue kind_minus defined in AST_types.h
      uses enumvalue kind_times defined in AST_types.h
      uses enumvalue kind_divide defined in AST_types.h
      uses enumvalue kind_modulo defined in AST_types.h
      uses enumvalue kind_lshift defined in AST_types.h
      uses enumvalue kind_rshift defined in AST_types.h
      uses enumvalue kind_bitand defined in AST_types.h
      uses enumvalue kind_bitor defined in AST_types.h
      uses enumvalue kind_bitxor defined in AST_types.h
      uses enumvalue kind_andand defined in AST_types.h
      uses enumvalue kind_oror defined in AST_types.h
      uses function make_conditional(location,expression,expression,expression) defined in expr.c
      uses function make_assign(location,int,expression,expression) defined in expr.c
      uses enumvalue kind_assign defined in AST_types.h
      uses function make_identifier(location,cstring,bool) defined in expr.c
      uses function make_error_expr(location) defined in expr.c
      uses variable current_function_decl defined in analyze.h
      uses macro definition YYERROR defined in c-parse.tab.c
      uses function push_label_level(void) defined in semantics.c
      uses function pop_label_level(void) defined in semantics.c
      uses function make_compound_expr(location,statement) defined in expr.c
      uses function make_function_call(location,expression,expression) defined in expr.c
      uses function make_va_arg(location,expression,asttype) defined in expr.c
      uses function make_array_ref(location,expression,expression) defined in expr.c
      uses function make_field_ref(location,expression,cstring,location) defined in expr.c
      uses function make_postincrement(location,expression) defined in expr.c
      uses function make_postdecrement(location,expression) defined in expr.c
      uses function make_string(location,expression) defined in expr.c
      uses macro definition FALSE defined in bool.h
      uses function new_ellipsis_decl(region,location,type_element) defined in AST_defs.h
      uses function type_element_chain(type_element,type_element) defined in AST_defs.h
      uses function shadow_tag_warned(type_element,int) defined in semantics.c
      uses function push_declspec_stack(void) defined in c-parse.tab.c
      uses function pending_xref_error(void) defined in semantics.c
      uses function split_type_elements(type_element,type_element *,attribute *) defined in semantics.c
      uses function attribute_chain(attribute,attribute) defined in AST_defs.h
      uses variable extra_warnings defined in flags.h
      uses function rid_name(rid) defined in semantics.c
      uses function new_typename(region,location,data_declaration) defined in AST_defs.h
      uses function new_type_variable(region,location,cstring) defined in AST_defs.h
      uses function new_typeof_expr(region,location,expression) defined in AST_defs.h
      uses function new_typeof_type(region,location,asttype) defined in AST_defs.h
      uses function start_decl(declarator,asm_stmt,type_element,bool,attribute,attribute) defined in semantics.c
      uses function finish_decl(declaration,expression) defined in semantics.c
      uses function new_attribute(region,location,word,word,expression) defined in AST_defs.h
      uses function str2cstring(region,const char *) defined in cstring.h
      uses function qualifier_name(type_quals) defined in types.c
      uses variable error_type defined in types.c
      uses function new_init_index(region,location,expression,expression,expression) defined in AST_defs.h
      uses function new_init_field(region,location,word,expression) defined in AST_defs.h
      uses function make_function_declarator(location,declarator,declaration,type_element) defined in semantics.c
      uses function new_array_declarator(region,location,declarator,expression) defined in AST_defs.h
      uses function new_pointer_declarator(region,location,declarator,type_element) defined in AST_defs.h
      uses function new_identifier_declarator(region,location,cstring) defined in AST_defs.h
      uses function start_struct(location,ast_kind,word) defined in semantics.c
      uses enumvalue kind_struct_ref defined in AST_types.h
      uses function finish_struct(type_element,declaration,attribute) defined in semantics.c
      uses function xref_tag(location,ast_kind,word) defined in semantics.c
      uses enumvalue kind_union_ref defined in AST_types.h
      uses function start_enum(location,word) defined in semantics.c
      uses function finish_enum(type_element,declaration,attribute) defined in semantics.c
      uses enumvalue kind_enum_ref defined in AST_types.h
      uses function make_field(declarator,expression,type_element,attribute,attribute) defined in semantics.c
      uses function make_enumerator(location,cstring,expression) defined in semantics.c
      uses function make_type(type_element,declarator) defined in semantics.c
      uses function last_node(node) defined in AST.c
      uses function chain_with_labels(statement,statement) defined in semantics.c
      uses function new_empty_stmt(region,location) defined in AST_defs.h
      uses variable AST_statement::loc defined in AST_defs.h
      uses function new_error_stmt(region,location) defined in AST_defs.h
      uses function pushlevel(bool) defined in semantics.c
      uses function id_label_chain(id_label,id_label) defined in AST_defs.h
      uses function new_compound_stmt(region,location,id_label,declaration,statement,environment) defined in AST_defs.h
      uses function poplevel(void) defined in semantics.c
      uses function new_if_stmt(region,location,expression,statement,statement) defined in AST_defs.h
      uses function check_condition(const char *,expression) defined in stmt.c
      uses function new_dowhile_stmt(region,location,expression,statement) defined in AST_defs.h
      uses function push_loop(breakable_stmt) defined in stmt.c
      uses function new_labeled_stmt(region,location,label,statement) defined in AST_defs.h
      uses function new_expression_stmt(region,location,expression) defined in AST_defs.h
      uses function warning_with_location(location,const char *,...) defined in errors.c
      uses function new_while_stmt(region,location,expression,statement) defined in AST_defs.h
      uses function pop_loop(void) defined in stmt.c
      uses function new_for_stmt(region,location,expression,expression,expression,statement) defined in AST_defs.h
      uses function check_switch(expression) defined in stmt.c
      uses function new_switch_stmt(region,location,expression,statement) defined in AST_defs.h
      uses function new_break_stmt(region,location) defined in AST_defs.h
      uses function check_break(statement) defined in stmt.c
      uses function new_continue_stmt(region,location) defined in AST_defs.h
      uses function check_continue(statement) defined in stmt.c
      uses function new_return_stmt(region,location,expression) defined in AST_defs.h
      uses function check_void_return(void) defined in stmt.c
      uses function check_return(expression) defined in stmt.c
      uses function new_goto_stmt(region,location,id_label) defined in AST_defs.h
      uses function new_computed_goto_stmt(region,location,expression) defined in AST_defs.h
      uses function check_computed_goto(expression) defined in stmt.c
      uses function new_assert_type_stmt(region,location,expression,asttype) defined in AST_defs.h
      uses function new_change_type_stmt(region,location,expression,asttype) defined in AST_defs.h
      uses function new_deep_restrict_stmt(region,location,expression,statement) defined in AST_defs.h
      uses function new_case_label(region,location,expression,expression) defined in AST_defs.h
      uses function check_case(label) defined in stmt.c
      uses function new_default_label(region,location) defined in AST_defs.h
      uses function check_default(label) defined in stmt.c
      uses function define_label(id_label) defined in stmt.c
      uses function asm_operand_chain(asm_operand,asm_operand) defined in AST_defs.h
      uses function new_asm_operand(region,location,string,expression) defined in AST_defs.h
      uses function string_chain(string,string) defined in AST_defs.h
      uses function declare_parameter(declarator,type_element,attribute,attribute,bool) defined in semantics.c
      uses function declare_old_parameter(location,cstring) defined in semantics.c
      uses function declare_label(id_label) defined in stmt.c
      uses function new_rid(region,location,enum rid) defined in AST_defs.h
      uses function new_qualifier(region,location,enum rid) defined in AST_defs.h
      uses function new_user_qual(region,location,cstring) defined in AST_defs.h
      uses variable yypgoto defined in c-parse.tab.c
      uses macro definition YYNTBASE defined in c-parse.tab.c
      uses variable yydefgoto defined in c-parse.tab.c
      uses macro definition yyerror defined in lattice-parse.tab.c
      uses macro definition YYTERROR defined in c-parse.tab.c
   variable yyalloc::yyss in line 1475
      protection public
   variable yyalloc::yyvs in line 1476
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cqual/cqual-0.981/src/c-parse.tab.h
module c-parse.tab.h
   macro definition IDENTIFIER in line 4
      protection public
   macro definition TYPENAME in line 5
      protection public
   macro definition USER_QUALIFIER in line 6
      protection public
   macro definition TYPE_VARIABLE in line 7
      protection public
   macro definition SCSPEC in line 8
      protection public
   macro definition TYPESPEC in line 9
      protection public
   macro definition TYPE_QUAL in line 10
      protection public
   macro definition FN_QUAL in line 11
      protection public
   macro definition CONSTANT in line 12
      protection public
   macro definition STRING in line 13
      protection public
   macro definition MAGIC_STRING in line 14
      protection public
   macro definition ELLIPSIS in line 15
      protection public
   macro definition SIZEOF in line 16
      protection public
   macro definition ENUM in line 17
      protection public
   macro definition STRUCT in line 18
      protection public
   macro definition UNION in line 19
      protection public
   macro definition IF in line 20
      protection public
   macro definition ELSE in line 21
      protection public
   macro definition WHILE in line 22
      protection public
   macro definition DO in line 23
      protection public
   macro definition FOR in line 24
      protection public
   macro definition SWITCH in line 25
      protection public
   macro definition CASE in line 26
      protection public
   macro definition DEFAULT in line 27
      protection public
   macro definition BREAK in line 28
      protection public
   macro definition CONTINUE in line 29
      protection public
   macro definition RETURN in line 30
      protection public
   macro definition GOTO in line 31
      protection public
   macro definition ASM_KEYWORD in line 32
      protection public
   macro definition TYPEOF in line 33
      protection public
   macro definition ALIGNOF in line 34
      protection public
   macro definition ATTRIBUTE in line 35
      protection public
   macro definition EXTENSION in line 36
      protection public
   macro definition LABEL in line 37
      protection public
   macro definition REALPART in line 38
      protection public
   macro definition IMAGPART in line 39
      protection public
   macro definition VA_ARG in line 40
      protection public
   macro definition ASSERT_TYPE in line 41
      protection public
   macro definition CHANGE_TYPE in line 42
      protection public
   macro definition DEEP_RESTRICT in line 43
      protection public
   macro definition ASSIGN in line 44
      protection public
   macro definition OROR in line 45
      protection public
   macro definition ANDAND in line 46
      protection public
   macro definition EQCOMPARE in line 47
      protection public
   macro definition ARITHCOMPARE in line 48
      protection public
   macro definition LSHIFT in line 49
      protection public
   macro definition RSHIFT in line 50
      protection public
   macro definition UNARY in line 51
      protection public
   macro definition PLUSPLUS in line 52
      protection public
   macro definition MINUSMINUS in line 53
      protection public
   macro definition HYPERUNARY in line 54
      protection public
   macro definition POINTSAT in line 55
      protection public
   variable yylval in line 58
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cqual/cqual-0.981/src/color.h
module color.h
   macro definition pam_color_1 in line 24
      protection public
   macro definition pam_color_2 in line 25
      protection public
   macro definition pam_color_3 in line 26
      protection public
   macro definition pam_color_4 in line 27
      protection public
   macro definition pam_color_5 in line 28
      protection public
   macro definition pam_color_6 in line 29
      protection public
   macro definition pam_color_7 in line 30
      protection public
   macro definition pam_color_8 in line 31
      protection public
   macro definition pam_color_mouse in line 32
      protection public
   macro definition pam_color_multiqual in line 33
      protection public
   macro definition pam_color_noqual in line 34
      protection public
   macro definition pam_color_error in line 35
      protection public
   macro definition pam_color_warning in line 36
      protection public
   macro definition pam_color_info in line 37
      protection public
   function combine_colors_pam(const char *,const char *) in line 40
      protection public
      8 lines of code
      2 parameters
      1 conditional paths
      uses macro definition pam_color_multiqual defined in color.h
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cqual/cqual-0.981/src/compiler.h
module compiler.h
   macro definition __attribute__ in line 35
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cqual/cqual-0.981/src/config.h
module config.h
   macro definition CC1PATH in line 28
      protection public
   macro definition SIZEOF_LONG_LONG in line 34
      protection public
   macro definition SIZEOF_LONG_DOUBLE in line 36
      protection public
   macro definition SIZEOF_DOUBLE in line 37
      protection public
   macro definition SELF_TARGET in line 48
      protection public
   macro definition BITSPERBYTE in line 51
      protection public
   macro definition LARGEST_UINTBITS in line 57
      protection public
   macro definition NULL in line 74
      protection public
   macro definition TRUE in line 77
      protection public
   macro definition FALSE in line 78
      protection public
   macro definition SUCCESS_EXIT_CODE in line 80
      protection public
   macro definition FATAL_EXIT_CODE in line 81
      protection public
   macro definition NODEREFINT in line 85
      protection public
   macro definition ASSUME_GCC in line 88
      protection public
   typedef largest_int in line 54
      protection public
   typedef largest_uint in line 55
      protection public
   function strtold(const char *,char **) in line 65
      protection public
      11 lines of code
      2 parameters
      1 conditional paths
      uses variable count defined in qtype.c
      uses macro definition __attribute__ defined in compiler.h
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cqual/cqual-0.981/src/constants.c
module constants.c
   function make_unknown_cst(type) in line 40
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses function new_known_cst(region,location,cval) defined in AST_defs.h
      uses variable parse_region defined in c-parse.h
      uses variable dummy_location defined in c-lex.c
      uses variable cval_unknown defined in cval.c
      uses variable AST_known_cst::type defined in AST_defs.h
   function make_cst(cval,type) in line 47
      protection public
      11 lines of code
      2 parameters
      1 conditional paths
      uses macro definition cval_istop defined in cval.h
      uses macro definition NULL defined in config.h
      uses function new_known_cst(region,location,cval) defined in AST_defs.h
      uses variable parse_region defined in c-parse.h
      uses variable dummy_location defined in c-lex.c
      uses function cval_cast(cval,type) defined in cval.c
      uses variable AST_known_cst::type defined in AST_defs.h
   function make_address_cst(data_declaration,label_declaration,largest_int,type) in line 59
      protection public
      5 lines of code
      4 parameters
      1 conditional paths
      uses function make_cst(cval,type) defined in constants.c
      uses function make_cval_address(data_declaration,label_declaration,largest_int) defined in cval.c
   function make_unsigned_cst(largest_uint,type) in line 65
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function make_cst(cval,type) defined in constants.c
      uses function make_cval_unsigned(largest_uint,type) defined in cval.c
   function make_signed_cst(largest_int,type) in line 70
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function make_cst(cval,type) defined in constants.c
      uses function make_cval_signed(largest_int,type) defined in cval.c
   function cast_constant(known_cst,type) in line 75
      protection public
      7 lines of code
      2 parameters
      2 conditional paths
      uses function type_equal(type,type) defined in types.c
      uses variable AST_known_cst::type defined in AST_defs.h
      uses function make_cst(cval,type) defined in constants.c
      uses function cval_cast(cval,type) defined in cval.c
      uses variable AST_known_cst::cval defined in AST_defs.h
   function fold_label_address(expression) in line 83
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function make_address_cst(data_declaration,label_declaration,largest_int,type) defined in constants.c
      uses macro definition NULL defined in config.h
      uses macro definition CAST defined in AST.h
      uses variable AST_id_label::ldecl defined in AST_defs.h
      uses variable AST_expression::type defined in AST_defs.h
   function fold_sizeof(expression,type) in line 88
      protection public
      7 lines of code
      2 parameters
      1 conditional paths
      uses function type_size_cc(type) defined in types.c
      uses function make_unsigned_cst(largest_uint,type) defined in constants.c
      uses function type_size(type) defined in types.c
      uses variable AST_expression::type defined in AST_defs.h
      uses macro definition NULL defined in config.h
   function fold_alignof(expression,type) in line 96
      protection public
      8 lines of code
      2 parameters
      1 conditional paths
      uses function type_has_size(type) defined in types.c
      uses function make_unsigned_cst(largest_uint,type) defined in constants.c
      uses function type_alignment(type) defined in types.c
      uses variable AST_expression::type defined in AST_defs.h
   function fold_cast(expression) in line 105
      protection public
      9 lines of code
      1 parameters
      1 conditional paths
      uses macro definition CAST defined in AST.h
      uses variable AST_cast::arg1 defined in AST_defs.h
      uses variable AST_expression::cst defined in AST_defs.h
      uses function type_void(type) defined in types.c
      uses variable AST_expression::type defined in AST_defs.h
      uses function cast_constant(known_cst,type) defined in constants.c
      uses macro definition NULL defined in config.h
   function fold_unary(expression) in line 116
      protection public
      46 lines of code
      1 parameters
      1 conditional paths
      uses macro definition CAST defined in AST.h
      uses variable AST_unary::arg1 defined in AST_defs.h
      uses variable AST_expression::cst defined in AST_defs.h
      uses variable AST_unary::type defined in AST_defs.h
      uses variable AST_unary::kind defined in AST_defs.h
      uses enumvalue kind_unary_plus defined in AST_types.h
      uses function cast_constant(known_cst,type) defined in constants.c
      uses enumvalue kind_unary_minus defined in AST_types.h
      uses function make_cst(cval,type) defined in constants.c
      uses function cval_negate(cval) defined in cval.c
      uses function cval_cast(cval,type) defined in cval.c
      uses variable AST_known_cst::cval defined in AST_defs.h
      uses enumvalue kind_not defined in AST_types.h
      uses function cval_not(cval) defined in cval.c
      uses enumvalue kind_bitnot defined in AST_types.h
      uses function cval_bitnot(cval) defined in cval.c
      uses enumvalue kind_conjugate defined in AST_types.h
      uses function cval_conjugate(cval) defined in cval.c
      uses enumvalue kind_realpart defined in AST_types.h
      uses function type_complex(type) defined in types.c
      uses variable AST_expression::type defined in AST_defs.h
      uses function cval_realpart(cval) defined in cval.c
      uses enumvalue kind_imagpart defined in AST_types.h
      uses variable cval_zero defined in cval.c
      uses function cval_imagpart(cval) defined in cval.c
      uses macro definition NULL defined in config.h
   function fold_sub(type,known_cst,known_cst) in line 164
      protection public
      29 lines of code
      3 parameters
      4 conditional paths
      uses variable AST_known_cst::type defined in AST_defs.h
      uses function make_cval_unsigned(largest_uint,type) defined in cval.c
      uses variable size_t_type defined in types.c
      uses function type_pointer(type) defined in types.c
      uses macro definition NULL defined in config.h
      uses function type_points_to(type) defined in types.c
      uses function type_size_cc(type) defined in types.c
      uses function type_size(type) defined in types.c
      uses variable intptr_type defined in types.c
      uses function cval_cast(cval,type) defined in cval.c
      uses function cval_divide(cval,cval) defined in cval.c
      uses function cval_sub(cval,cval) defined in cval.c
      uses variable AST_known_cst::cval defined in AST_defs.h
      uses function make_cst(cval,type) defined in constants.c
   function fold_add(type,known_cst,known_cst) in line 195
      protection public
      31 lines of code
      3 parameters
      1 conditional paths
      uses variable AST_known_cst::type defined in AST_defs.h
      uses function make_cval_unsigned(largest_uint,type) defined in cval.c
      uses variable size_t_type defined in types.c
      uses function type_pointer(type) defined in types.c
      uses function type_points_to(type) defined in types.c
      uses function type_size_cc(type) defined in types.c
      uses macro definition NULL defined in config.h
      uses function type_size(type) defined in types.c
      uses variable intptr_type defined in types.c
      uses function make_cst(cval,type) defined in constants.c
      uses function cval_add(cval,cval) defined in cval.c
      uses function cval_cast(cval,type) defined in cval.c
      uses variable AST_known_cst::cval defined in AST_defs.h
      uses function cval_times(cval,cval) defined in cval.c
   function fold_binary(type,expression) in line 227
      protection public
      87 lines of code
      2 parameters
      1 conditional paths
      uses macro definition CAST defined in AST.h
      uses variable AST_binary::arg1 defined in AST_defs.h
      uses variable AST_expression::cst defined in AST_defs.h
      uses variable AST_binary::arg2 defined in AST_defs.h
      uses function type_default_conversion(type) defined in types.c
      uses variable AST_expression::type defined in AST_defs.h
      uses variable AST_binary::kind defined in AST_defs.h
      uses enumvalue kind_andand defined in AST_types.h
      uses enumvalue kind_oror defined in AST_types.h
      uses macro definition constant_knownbool defined in constants.h
      uses macro definition constant_boolvalue defined in constants.h
      uses function make_signed_cst(largest_int,type) defined in constants.c
      uses macro definition FALSE defined in bool.h
      uses function make_unknown_cst(type) defined in constants.c
      uses variable AST_known_cst::cval defined in AST_defs.h
      uses enumvalue kind_plus defined in AST_types.h
      uses enumvalue kind_array_ref defined in AST_types.h
      uses function fold_add(type,known_cst,known_cst) defined in constants.c
      uses enumvalue kind_minus defined in AST_types.h
      uses function fold_sub(type,known_cst,known_cst) defined in constants.c
      uses enumvalue kind_times defined in AST_types.h
      uses enumvalue kind_divide defined in AST_types.h
      uses enumvalue kind_modulo defined in AST_types.h
      uses enumvalue kind_lshift defined in AST_types.h
      uses enumvalue kind_rshift defined in AST_types.h
      uses enumvalue kind_bitand defined in AST_types.h
      uses enumvalue kind_bitor defined in AST_types.h
      uses enumvalue kind_bitxor defined in AST_types.h
      uses function cval_cast(cval,type) defined in cval.c
      uses function cval_times(cval,cval) defined in cval.c
      uses function cval_divide(cval,cval) defined in cval.c
      uses function cval_modulo(cval,cval) defined in cval.c
      uses function cval_lshift(cval,cval) defined in cval.c
      uses function cval_rshift(cval,cval) defined in cval.h
      uses function cval_bitand(cval,cval) defined in cval.h
      uses function cval_bitor(cval,cval) defined in cval.h
      uses function cval_bitxor(cval,cval) defined in cval.h
      uses macro definition NULL defined in config.h
      uses function make_cst(cval,type) defined in constants.c
      uses enumvalue kind_eq defined in AST_types.h
      uses enumvalue kind_ne defined in AST_types.h
      uses enumvalue kind_leq defined in AST_types.h
      uses enumvalue kind_geq defined in AST_types.h
      uses enumvalue kind_lt defined in AST_types.h
      uses enumvalue kind_gt defined in AST_types.h
      uses function type_pointer(type) defined in types.c
      uses variable intptr_type defined in types.c
      uses function common_type(type,type) defined in types.c
      uses function cval_eq(cval,cval) defined in cval.h
      uses macro definition cval_ne defined in cval.h
      uses function cval_leq(cval,cval) defined in cval.h
      uses macro definition cval_geq defined in cval.h
      uses macro definition cval_lt defined in cval.h
      uses macro definition cval_gt defined in cval.h
   function fold_conditional(expression) in line 315
      protection public
      18 lines of code
      1 parameters
      1 conditional paths
      uses macro definition CAST defined in AST.h
      uses variable AST_conditional::condition defined in AST_defs.h
      uses variable AST_expression::cst defined in AST_defs.h
      uses macro definition constant_knownbool defined in constants.h
      uses macro definition constant_boolvalue defined in constants.h
      uses variable AST_conditional::arg1 defined in AST_defs.h
      uses variable AST_conditional::arg2 defined in AST_defs.h
      uses variable AST_expression::static_address defined in AST_defs.h
      uses function if(yy_init) defined in iquals-lex.c
      uses function cast_constant(known_cst,type) defined in constants.c
      uses variable AST_expression::type defined in AST_defs.h
      uses macro definition NULL defined in config.h
   function fold_identifier(expression,data_declaration) in line 334
      protection public
      7 lines of code
      2 parameters
      1 conditional paths
      uses variable data_declaration::kind defined in decls.h
      uses enumvalue decl_constant defined in decls.h
      uses variable data_declaration::value defined in decls.h
      uses macro definition NULL defined in config.h
   function foldaddress_identifier(expression,data_declaration) in line 342
      protection public
      9 lines of code
      2 parameters
      1 conditional paths
      uses variable data_declaration::kind defined in decls.h
      uses enumvalue decl_function defined in decls.h
      uses variable data_declaration::ftype defined in decls.h
      uses enumvalue decl_variable defined in decls.h
      uses variable data_declaration::islocal defined in decls.h
      uses enumvalue decl_magic_string defined in decls.h
      uses function make_address_cst(data_declaration,label_declaration,largest_int,type) defined in constants.c
      uses macro definition NULL defined in config.h
      uses function make_pointer_type(type) defined in types.c
      uses variable AST_expression::type defined in AST_defs.h
   function foldaddress_string(string) in line 352
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function make_address_cst(data_declaration,label_declaration,largest_int,type) defined in constants.c
      uses variable AST_string::ddecl defined in AST_defs.h
      uses macro definition NULL defined in config.h
      uses variable AST_string::type defined in AST_defs.h
   function foldaddress_field_ref(known_cst,field_declaration) in line 357
      protection public
      11 lines of code
      2 parameters
      1 conditional paths
      uses variable field_declaration::offset_cc defined in decls.h
      uses variable field_declaration::bitwidth defined in decls.h
      uses macro definition NULL defined in config.h
      uses macro definition constant_unknown defined in constants.h
      uses function make_unknown_cst(type) defined in constants.c
      uses variable AST_known_cst::type defined in AST_defs.h
      uses function fold_add(type,known_cst,known_cst) defined in constants.c
      uses function make_unsigned_cst(largest_uint,type) defined in constants.c
      uses variable field_declaration::offset defined in decls.h
      uses macro definition BITSPERBYTE defined in config.h
      uses variable size_t_type defined in types.c
   function fold_lexical_real(type,location,cstring) in line 369
      protection public
      11 lines of code
      3 parameters
      1 conditional paths
      uses function new_lexical_cst(region,location,cstring) defined in AST_defs.h
      uses variable parse_region defined in c-parse.h
      uses function make_cval_float(long double) defined in cval.c
      uses function strtold(const char *,char **) defined in config.h
      uses variable cstring::data defined in cstring.h
      uses macro definition NULL defined in config.h
      uses function type_complex(type) defined in types.c
      uses function make_cval_complex(cval,cval) defined in cval.c
      uses function cval_cast(cval,type) defined in cval.c
      uses variable cval_zero defined in cval.c
      uses variable AST_lexical_cst::cst defined in AST_defs.h
      uses function make_cst(cval,type) defined in constants.c
      uses variable AST_lexical_cst::type defined in AST_defs.h
   function fold_lexical_char(location,cstring,bool,int) in line 381
      protection public
      13 lines of code
      4 parameters
      1 conditional paths
      uses function new_lexical_cst(region,location,cstring) defined in AST_defs.h
      uses variable parse_region defined in c-parse.h
      uses variable wchar_type defined in types.c
      uses variable int_type defined in types.c
      uses variable AST_lexical_cst::type defined in AST_defs.h
      uses variable AST_lexical_cst::cst defined in AST_defs.h
      uses function make_cst(cval,type) defined in constants.c
      uses function type_unsigned(type) defined in types.c
      uses function make_cval_unsigned(largest_uint,type) defined in cval.c
      uses function make_cval_signed(largest_int,type) defined in cval.c
   function fold_lexical_string(location,cstring,bool,wchar_array) in line 395
      protection public
      14 lines of code
      4 parameters
      1 conditional paths
      uses macro definition rarrayalloc defined in regions.h
      uses variable parse_region defined in c-parse.h
      uses function new_string_cst(region,location,cstring,wchar_t *,size_t) defined in AST_defs.h
      uses variable AST_string_cst::type defined in AST_defs.h
      uses variable wchar_array_type defined in types.c
      uses variable char_array_type defined in types.c
   function fold_lexical_int(type,location,cstring,bool,largest_uint,bool) in line 410
      protection public
      46 lines of code
      6 parameters
      1 conditional paths
      uses function new_lexical_cst(region,location,cstring) defined in AST_defs.h
      uses variable parse_region defined in c-parse.h
      uses function warning_with_location(location,const char *,...) defined in errors.c
      uses variable unsigned_long_long_type defined in types.c
      uses function uint_inrange(largest_uint,type) defined in cval.c
      uses variable unsigned_int_type defined in types.c
      uses variable long_type defined in types.c
      uses variable unsigned_long_type defined in types.c
      uses variable long_long_type defined in types.c
      uses function type_unsigned(type) defined in types.c
      uses function make_cval_unsigned(largest_uint,type) defined in cval.c
      uses function make_cval_signed(largest_int,type) defined in cval.c
      uses function make_cval_complex(cval,cval) defined in cval.c
      uses function cval_cast(cval,type) defined in cval.c
      uses variable cval_zero defined in cval.c
      uses function make_complex_type(type) defined in types.c
      uses variable AST_lexical_cst::type defined in AST_defs.h
      uses variable AST_lexical_cst::cst defined in AST_defs.h
      uses function make_cst(cval,type) defined in constants.c
   function definite_null(expression) in line 458
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses function type_integer(type) defined in types.c
      uses variable AST_expression::type defined in AST_defs.h
      uses function type_pointer(type) defined in types.c
      uses function type_void(type) defined in types.c
      uses function type_points_to(type) defined in types.c
      uses function definite_zero(expression) defined in constants.c
   function definite_zero(expression) in line 466
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable AST_expression::cst defined in AST_defs.h
      uses function is_zero_constant(known_cst) defined in constants.c
   function definite_one(expression) in line 471
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable AST_expression::cst defined in AST_defs.h
      uses function is_one_constant(known_cst) defined in constants.c
   function is_one_constant(known_cst) in line 476
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function cval_knownbool(cval) defined in cval.c
      uses variable AST_known_cst::cval defined in AST_defs.h
      uses macro definition constant_boolvalue defined in constants.h
   function is_zero_constant(known_cst) in line 481
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function cval_knownbool(cval) defined in cval.c
      uses variable AST_known_cst::cval defined in AST_defs.h
      uses macro definition constant_boolvalue defined in constants.h
   function constant_overflow_warning(known_cst) in line 489
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cqual/cqual-0.981/src/constants.h
module constants.h
   macro definition constant_address in line 79
      protection public
   macro definition constant_unknown in line 84
      protection public
   macro definition constant_integral in line 91
      protection public
   macro definition constant_float in line 96
      protection public
   macro definition constant_uint_value in line 101
      protection public
   macro definition constant_sint_value in line 107
      protection public
   macro definition constant_float_value in line 113
      protection public
   macro definition constant_knownbool in line 122
      protection public
   macro definition constant_boolvalue in line 128
      protection public
   function make_unknown_cst(type) in line 33
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses function new_known_cst(region,location,cval) defined in AST_defs.h
      uses variable parse_region defined in c-parse.h
      uses variable dummy_location defined in c-lex.c
      uses variable cval_unknown defined in cval.c
      uses variable AST_known_cst::type defined in AST_defs.h
   function make_cst(cval,type) in line 34
      protection public
      11 lines of code
      2 parameters
      2 conditional paths
      uses macro definition cval_istop defined in cval.h
      uses macro definition NULL defined in config.h
      uses function new_known_cst(region,location,cval) defined in AST_defs.h
      uses variable parse_region defined in c-parse.h
      uses variable dummy_location defined in c-lex.c
      uses function cval_cast(cval,type) defined in cval.c
      uses variable AST_known_cst::type defined in AST_defs.h
   function make_address_cst(data_declaration,label_declaration,largest_int,type) in line 35
      protection public
      5 lines of code
      4 parameters
      1 conditional paths
      uses function make_cst(cval,type) defined in constants.c
      uses function make_cval_address(data_declaration,label_declaration,largest_int) defined in cval.c
   function make_signed_cst(largest_int,type) in line 37
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function make_cst(cval,type) defined in constants.c
      uses function make_cval_signed(largest_int,type) defined in cval.c
   function make_unsigned_cst(largest_uint,type) in line 38
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function make_cst(cval,type) defined in constants.c
      uses function make_cval_unsigned(largest_uint,type) defined in cval.c
   function fold_lexical_int(type,location,cstring,bool,largest_uint,bool) in line 40
      protection public
      46 lines of code
      6 parameters
      9 conditional paths
      uses function new_lexical_cst(region,location,cstring) defined in AST_defs.h
      uses variable parse_region defined in c-parse.h
      uses function warning_with_location(location,const char *,...) defined in errors.c
      uses variable unsigned_long_long_type defined in types.c
      uses function uint_inrange(largest_uint,type) defined in cval.c
      uses variable unsigned_int_type defined in types.c
      uses variable long_type defined in types.c
      uses variable unsigned_long_type defined in types.c
      uses variable long_long_type defined in types.c
      uses function type_unsigned(type) defined in types.c
      uses function make_cval_unsigned(largest_uint,type) defined in cval.c
      uses function make_cval_signed(largest_int,type) defined in cval.c
      uses function make_cval_complex(cval,cval) defined in cval.c
      uses function cval_cast(cval,type) defined in cval.c
      uses variable cval_zero defined in cval.c
      uses function make_complex_type(type) defined in types.c
      uses variable AST_lexical_cst::type defined in AST_defs.h
      uses variable AST_lexical_cst::cst defined in AST_defs.h
      uses function make_cst(cval,type) defined in constants.c
   function fold_lexical_real(type,location,cstring) in line 42
      protection public
      11 lines of code
      3 parameters
      2 conditional paths
      uses function new_lexical_cst(region,location,cstring) defined in AST_defs.h
      uses variable parse_region defined in c-parse.h
      uses function make_cval_float(long double) defined in cval.c
      uses function strtold(const char *,char **) defined in config.h
      uses variable cstring::data defined in cstring.h
      uses macro definition NULL defined in config.h
      uses function type_complex(type) defined in types.c
      uses function make_cval_complex(cval,cval) defined in cval.c
      uses function cval_cast(cval,type) defined in cval.c
      uses variable cval_zero defined in cval.c
      uses variable AST_lexical_cst::cst defined in AST_defs.h
      uses function make_cst(cval,type) defined in constants.c
      uses variable AST_lexical_cst::type defined in AST_defs.h
   function fold_lexical_char(location,cstring,bool,int) in line 44
      protection public
      13 lines of code
      4 parameters
      1 conditional paths
      uses function new_lexical_cst(region,location,cstring) defined in AST_defs.h
      uses variable parse_region defined in c-parse.h
      uses variable wchar_type defined in types.c
      uses variable int_type defined in types.c
      uses variable AST_lexical_cst::type defined in AST_defs.h
      uses variable AST_lexical_cst::cst defined in AST_defs.h
      uses function make_cst(cval,type) defined in constants.c
      uses function type_unsigned(type) defined in types.c
      uses function make_cval_unsigned(largest_uint,type) defined in cval.c
      uses function make_cval_signed(largest_int,type) defined in cval.c
   function fold_lexical_string(location,cstring,bool,wchar_array) in line 46
      protection public
      14 lines of code
      4 parameters
      1 conditional paths
      uses macro definition rarrayalloc defined in regions.h
      uses variable parse_region defined in c-parse.h
      uses function new_string_cst(region,location,cstring,wchar_t *,size_t) defined in AST_defs.h
      uses variable AST_string_cst::type defined in AST_defs.h
      uses variable wchar_array_type defined in types.c
      uses variable char_array_type defined in types.c
   function fold_label_address(expression) in line 49
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function make_address_cst(data_declaration,label_declaration,largest_int,type) defined in constants.c
      uses macro definition NULL defined in config.h
      uses macro definition CAST defined in AST.h
      uses variable AST_id_label::ldecl defined in AST_defs.h
      uses variable AST_expression::type defined in AST_defs.h
   function fold_sizeof(expression,type) in line 50
      protection public
      7 lines of code
      2 parameters
      2 conditional paths
      uses function type_size_cc(type) defined in types.c
      uses function make_unsigned_cst(largest_uint,type) defined in constants.c
      uses function type_size(type) defined in types.c
      uses variable AST_expression::type defined in AST_defs.h
      uses macro definition NULL defined in config.h
   function fold_alignof(expression,type) in line 51
      protection public
      8 lines of code
      2 parameters
      2 conditional paths
      uses function type_has_size(type) defined in types.c
      uses function make_unsigned_cst(largest_uint,type) defined in constants.c
      uses function type_alignment(type) defined in types.c
      uses variable AST_expression::type defined in AST_defs.h
   function fold_cast(expression) in line 52
      protection public
      9 lines of code
      1 parameters
      2 conditional paths
      uses macro definition CAST defined in AST.h
      uses variable AST_cast::arg1 defined in AST_defs.h
      uses variable AST_expression::cst defined in AST_defs.h
      uses function type_void(type) defined in types.c
      uses variable AST_expression::type defined in AST_defs.h
      uses macro definition NULL defined in config.h
   function fold_address_of(expression) in line 53
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function fold_unary(expression) in line 54
      protection public
      46 lines of code
      1 parameters
      11 conditional paths
      uses macro definition CAST defined in AST.h
      uses variable AST_unary::arg1 defined in AST_defs.h
      uses variable AST_expression::cst defined in AST_defs.h
      uses variable AST_unary::type defined in AST_defs.h
      uses variable AST_unary::kind defined in AST_defs.h
      uses enumvalue kind_unary_plus defined in AST_types.h
      uses enumvalue kind_unary_minus defined in AST_types.h
      uses function make_cst(cval,type) defined in constants.c
      uses function cval_negate(cval) defined in cval.c
      uses function cval_cast(cval,type) defined in cval.c
      uses variable AST_known_cst::cval defined in AST_defs.h
      uses enumvalue kind_not defined in AST_types.h
      uses function cval_not(cval) defined in cval.c
      uses enumvalue kind_bitnot defined in AST_types.h
      uses function cval_bitnot(cval) defined in cval.c
      uses enumvalue kind_conjugate defined in AST_types.h
      uses function cval_conjugate(cval) defined in cval.c
      uses enumvalue kind_realpart defined in AST_types.h
      uses function type_complex(type) defined in types.c
      uses variable AST_expression::type defined in AST_defs.h
      uses function cval_realpart(cval) defined in cval.c
      uses enumvalue kind_imagpart defined in AST_types.h
      uses variable cval_zero defined in cval.c
      uses function cval_imagpart(cval) defined in cval.c
      uses macro definition NULL defined in config.h
   function fold_binary(type,expression) in line 55
      protection public
      87 lines of code
      2 parameters
      38 conditional paths
      uses macro definition CAST defined in AST.h
      uses variable AST_binary::arg1 defined in AST_defs.h
      uses variable AST_expression::cst defined in AST_defs.h
      uses variable AST_binary::arg2 defined in AST_defs.h
      uses function type_default_conversion(type) defined in types.c
      uses variable AST_expression::type defined in AST_defs.h
      uses variable AST_binary::kind defined in AST_defs.h
      uses enumvalue kind_andand defined in AST_types.h
      uses enumvalue kind_oror defined in AST_types.h
      uses macro definition constant_knownbool defined in constants.h
      uses macro definition constant_boolvalue defined in constants.h
      uses function make_signed_cst(largest_int,type) defined in constants.c
      uses macro definition FALSE defined in bool.h
      uses function make_unknown_cst(type) defined in constants.c
      uses variable AST_known_cst::cval defined in AST_defs.h
      uses enumvalue kind_plus defined in AST_types.h
      uses enumvalue kind_array_ref defined in AST_types.h
      uses function fold_add(type,known_cst,known_cst) defined in constants.c
      uses enumvalue kind_minus defined in AST_types.h
      uses enumvalue kind_times defined in AST_types.h
      uses enumvalue kind_divide defined in AST_types.h
      uses enumvalue kind_modulo defined in AST_types.h
      uses enumvalue kind_lshift defined in AST_types.h
      uses enumvalue kind_rshift defined in AST_types.h
      uses enumvalue kind_bitand defined in AST_types.h
      uses enumvalue kind_bitor defined in AST_types.h
      uses enumvalue kind_bitxor defined in AST_types.h
      uses function cval_cast(cval,type) defined in cval.c
      uses function cval_times(cval,cval) defined in cval.c
      uses function cval_divide(cval,cval) defined in cval.c
      uses function cval_modulo(cval,cval) defined in cval.c
      uses function cval_lshift(cval,cval) defined in cval.c
      uses function cval_rshift(cval,cval) defined in cval.h
      uses function cval_bitand(cval,cval) defined in cval.h
      uses function cval_bitor(cval,cval) defined in cval.h
      uses function cval_bitxor(cval,cval) defined in cval.h
      uses macro definition NULL defined in config.h
      uses function make_cst(cval,type) defined in constants.c
      uses enumvalue kind_eq defined in AST_types.h
      uses enumvalue kind_ne defined in AST_types.h
      uses enumvalue kind_leq defined in AST_types.h
      uses enumvalue kind_geq defined in AST_types.h
      uses enumvalue kind_lt defined in AST_types.h
      uses enumvalue kind_gt defined in AST_types.h
      uses function type_pointer(type) defined in types.c
      uses variable intptr_type defined in types.c
      uses function common_type(type,type) defined in types.c
      uses function cval_eq(cval,cval) defined in cval.h
      uses macro definition cval_ne defined in cval.h
      uses function cval_leq(cval,cval) defined in cval.h
      uses macro definition cval_geq defined in cval.h
      uses macro definition cval_lt defined in cval.h
      uses macro definition cval_gt defined in cval.h
   function fold_conditional(expression) in line 56
      protection public
      18 lines of code
      1 parameters
      2 conditional paths
      uses macro definition CAST defined in AST.h
      uses variable AST_conditional::condition defined in AST_defs.h
      uses variable AST_expression::cst defined in AST_defs.h
      uses macro definition constant_knownbool defined in constants.h
      uses macro definition constant_boolvalue defined in constants.h
      uses variable AST_conditional::arg1 defined in AST_defs.h
      uses variable AST_conditional::arg2 defined in AST_defs.h
      uses variable AST_expression::static_address defined in AST_defs.h
      uses function if(yy_init) defined in iquals-lex.c
      uses variable AST_expression::type defined in AST_defs.h
      uses macro definition NULL defined in config.h
   function fold_identifier(expression,data_declaration) in line 57
      protection public
      7 lines of code
      2 parameters
      2 conditional paths
      uses variable data_declaration::kind defined in decls.h
      uses enumvalue decl_constant defined in decls.h
      uses variable data_declaration::value defined in decls.h
      uses macro definition NULL defined in config.h
   function fold_add(type,known_cst,known_cst) in line 59
      protection public
      31 lines of code
      3 parameters
      4 conditional paths
      uses variable AST_known_cst::type defined in AST_defs.h
      uses function make_cval_unsigned(largest_uint,type) defined in cval.c
      uses variable size_t_type defined in types.c
      uses function type_pointer(type) defined in types.c
      uses function type_points_to(type) defined in types.c
      uses function type_size_cc(type) defined in types.c
      uses macro definition NULL defined in config.h
      uses function type_size(type) defined in types.c
      uses variable intptr_type defined in types.c
      uses function make_cst(cval,type) defined in constants.c
      uses function cval_add(cval,cval) defined in cval.c
      uses function cval_cast(cval,type) defined in cval.c
      uses variable AST_known_cst::cval defined in AST_defs.h
      uses function cval_times(cval,cval) defined in cval.c
   function foldaddress_identifier(expression,data_declaration) in line 61
      protection public
      9 lines of code
      2 parameters
      2 conditional paths
      uses variable data_declaration::kind defined in decls.h
      uses enumvalue decl_function defined in decls.h
      uses variable data_declaration::ftype defined in decls.h
      uses enumvalue decl_variable defined in decls.h
      uses variable data_declaration::islocal defined in decls.h
      uses enumvalue decl_magic_string defined in decls.h
      uses function make_address_cst(data_declaration,label_declaration,largest_int,type) defined in constants.c
      uses macro definition NULL defined in config.h
      uses function make_pointer_type(type) defined in types.c
      uses variable AST_expression::type defined in AST_defs.h
   function foldaddress_string(string) in line 62
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function make_address_cst(data_declaration,label_declaration,largest_int,type) defined in constants.c
      uses variable AST_string::ddecl defined in AST_defs.h
      uses macro definition NULL defined in config.h
      uses variable AST_string::type defined in AST_defs.h
   function foldaddress_field_ref(known_cst,field_declaration) in line 63
      protection public
      11 lines of code
      2 parameters
      3 conditional paths
      uses variable field_declaration::offset_cc defined in decls.h
      uses variable field_declaration::bitwidth defined in decls.h
      uses macro definition NULL defined in config.h
      uses macro definition constant_unknown defined in constants.h
      uses function make_unknown_cst(type) defined in constants.c
      uses variable AST_known_cst::type defined in AST_defs.h
      uses function fold_add(type,known_cst,known_cst) defined in constants.c
      uses function make_unsigned_cst(largest_uint,type) defined in constants.c
      uses variable field_declaration::offset defined in decls.h
      uses macro definition BITSPERBYTE defined in config.h
      uses variable size_t_type defined in types.c
   function definite_null(expression) in line 65
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses function type_integer(type) defined in types.c
      uses variable AST_expression::type defined in AST_defs.h
      uses function type_pointer(type) defined in types.c
      uses function type_void(type) defined in types.c
      uses function type_points_to(type) defined in types.c
      uses function definite_zero(expression) defined in constants.c
   function definite_zero(expression) in line 66
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable AST_expression::cst defined in AST_defs.h
      uses function is_zero_constant(known_cst) defined in constants.c
   function definite_one(expression) in line 67
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable AST_expression::cst defined in AST_defs.h
      uses function is_one_constant(known_cst) defined in constants.c
   function is_zero_constant(known_cst) in line 68
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function cval_knownbool(cval) defined in cval.c
      uses variable AST_known_cst::cval defined in AST_defs.h
      uses macro definition constant_boolvalue defined in constants.h
   function is_one_constant(known_cst) in line 69
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function cval_knownbool(cval) defined in cval.c
      uses variable AST_known_cst::cval defined in AST_defs.h
      uses macro definition constant_boolvalue defined in constants.h
   function constant_overflow_warning(known_cst) in line 76
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cqual/cqual-0.981/src/containers.h
module containers.h
   macro definition scan_ty_set in line 26
      protection public
   macro definition scan_qual_set in line 44
      protection public
   macro definition scan_qual_set_byname in line 62
      protection public
   macro definition scan_loc_set in line 80
      protection public
   macro definition scan_aloctype_set in line 98
      protection public
   macro definition scan_alocreftype_set in line 114
      protection public
   macro definition scan_alocfntype_set in line 130
      protection public
   macro definition scan_effecttype_set in line 146
      protection public
   macro definition scan_effect_set in line 162
      protection public
   macro definition scan_store_edge_set in line 178
      protection public
   macro definition scan_po_set in line 194
      protection public
   macro definition scan_qual_edge_set in line 210
      protection public
   macro definition scan_cond_set in line 226
      protection public
   function cmp_ty(ty,ty) in line 12
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
   function empty_ty_set(void) in line 13
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses variable empty_set defined in set.c
   function ty_set_copy(region,ty_set) in line 14
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
      uses function set_copy(region,set) defined in set.c
   function ty_set_empty(ty_set) in line 15
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses function set_empty(set) defined in set.c
   function ty_set_member(ty_set,ty) in line 16
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
      uses function set_member(set_cmp_fn,set,void *) defined in set.c
      uses function cmp_ty(ty,ty) defined in containers.h
   function ty_set_size(ty_set) in line 17
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses function set_size(set) defined in set.c
   function ty_set_insert(region,ty_set *,ty) in line 18
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
      uses function set_insert(region,set_cmp_fn,bool,set *,void *) defined in set.c
      uses function cmp_ty(ty,ty) defined in containers.h
      uses macro definition FALSE defined in bool.h
   function ty_set_remove(ty_set *,ty) in line 19
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
      uses function set_remove(set_cmp_fn,bool,set *,void *) defined in set.c
      uses function cmp_ty(ty,ty) defined in containers.h
      uses macro definition FALSE defined in bool.h
   function ty_set_subset(ty_set,ty_set) in line 20
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
      uses function set_subset(set_cmp_fn,set,set) defined in set.c
      uses function cmp_ty(ty,ty) defined in containers.h
   function ty_set_union(ty_set,ty_set) in line 21
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
      uses function set_union(set_cmp_fn,bool,set,set) defined in set.c
      uses function cmp_ty(ty,ty) defined in containers.h
      uses macro definition FALSE defined in bool.h
   function ty_set_single(ty_set) in line 22
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses function set_single(set) defined in set.c
   function ty_set_sort(ty_set) in line 23
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses function set_sort(set_cmp_fn,set) defined in set.c
      uses function cmp_ty(ty,ty) defined in containers.h
   function ty_set_scan(ty_set,ty_set_scanner *) in line 24
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
      uses function set_scan(set,set_scanner *) defined in set.c
      uses variable ty_set_scanner::ss defined in containers.h
   function ty_set_next(ty_set_scanner *) in line 25
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses function set_next(set_scanner *) defined in set.c
      uses variable ty_set_scanner::ss defined in containers.h
   function cmp_qual(qual,qual) in line 30
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
   function empty_qual_set(void) in line 31
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses variable empty_set defined in set.c
   function qual_set_copy(region,qual_set) in line 32
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
      uses function set_copy(region,set) defined in set.c
   function qual_set_empty(qual_set) in line 33
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses function set_empty(set) defined in set.c
   function qual_set_member(qual_set,qual) in line 34
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
      uses function set_member(set_cmp_fn,set,void *) defined in set.c
      uses function cmp_qual(qual,qual) defined in containers.h
   function qual_set_size(qual_set) in line 35
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses function set_size(set) defined in set.c
   function qual_set_insert(region,qual_set *,qual) in line 36
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
      uses function set_insert(region,set_cmp_fn,bool,set *,void *) defined in set.c
      uses function cmp_qual(qual,qual) defined in containers.h
      uses macro definition FALSE defined in bool.h
   function qual_set_remove(qual_set *,qual) in line 37
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
      uses function set_remove(set_cmp_fn,bool,set *,void *) defined in set.c
      uses function cmp_qual(qual,qual) defined in containers.h
      uses macro definition FALSE defined in bool.h
   function qual_set_subset(qual_set,qual_set) in line 38
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
      uses function set_subset(set_cmp_fn,set,set) defined in set.c
      uses function cmp_qual(qual,qual) defined in containers.h
   function qual_set_union(qual_set,qual_set) in line 39
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
      uses function set_union(set_cmp_fn,bool,set,set) defined in set.c
      uses function cmp_qual(qual,qual) defined in containers.h
      uses macro definition FALSE defined in bool.h
   function qual_set_single(qual_set) in line 40
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses function set_single(set) defined in set.c
   function qual_set_sort(qual_set) in line 41
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses function set_sort(set_cmp_fn,set) defined in set.c
      uses function cmp_qual(qual,qual) defined in containers.h
   function qual_set_scan(qual_set,qual_set_scanner *) in line 42
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
      uses function set_scan(set,set_scanner *) defined in set.c
      uses variable qual_set_scanner::ss defined in containers.h
   function qual_set_next(qual_set_scanner *) in line 43
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses function set_next(set_scanner *) defined in set.c
      uses variable qual_set_scanner::ss defined in containers.h
   function cmp_qual_byname(qual,qual) in line 48
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses variable type_qualifier::kind defined in quals.c
      uses variable type_qualifier::u defined in quals.c
      uses variable type_qualifier::elt defined in quals.c
   function empty_qual_set_byname(void) in line 49
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses variable empty_set defined in set.c
   function qual_set_byname_copy(region,qual_set_byname) in line 50
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
      uses function set_copy(region,set) defined in set.c
   function qual_set_byname_empty(qual_set_byname) in line 51
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses function set_empty(set) defined in set.c
   function qual_set_byname_member(qual_set_byname,qual) in line 52
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
      uses function set_member(set_cmp_fn,set,void *) defined in set.c
      uses function cmp_qual_byname(qual,qual) defined in containers.h
   function qual_set_byname_size(qual_set_byname) in line 53
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses function set_size(set) defined in set.c
   function qual_set_byname_insert(region,qual_set_byname *,qual) in line 54
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
      uses function set_insert(region,set_cmp_fn,bool,set *,void *) defined in set.c
      uses function cmp_qual_byname(qual,qual) defined in containers.h
      uses macro definition FALSE defined in bool.h
   function qual_set_byname_remove(qual_set_byname *,qual) in line 55
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
      uses function set_remove(set_cmp_fn,bool,set *,void *) defined in set.c
      uses function cmp_qual_byname(qual,qual) defined in containers.h
      uses macro definition FALSE defined in bool.h
   function qual_set_byname_subset(qual_set_byname,qual_set_byname) in line 56
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
      uses function set_subset(set_cmp_fn,set,set) defined in set.c
      uses function cmp_qual_byname(qual,qual) defined in containers.h
   function qual_set_byname_union(qual_set_byname,qual_set_byname) in line 57
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
      uses function set_union(set_cmp_fn,bool,set,set) defined in set.c
      uses function cmp_qual_byname(qual,qual) defined in containers.h
      uses macro definition FALSE defined in bool.h
   function qual_set_byname_single(qual_set_byname) in line 58
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses function set_single(set) defined in set.c
   function qual_set_byname_sort(qual_set_byname) in line 59
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses function set_sort(set_cmp_fn,set) defined in set.c
      uses function cmp_qual_byname(qual,qual) defined in containers.h
   function qual_set_byname_scan(qual_set_byname,qual_set_byname_scanner *) in line 60
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
      uses function set_scan(set,set_scanner *) defined in set.c
      uses variable qual_set_byname_scanner::ss defined in containers.h
   function qual_set_byname_next(qual_set_byname_scanner *) in line 61
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses function set_next(set_scanner *) defined in set.c
      uses variable qual_set_byname_scanner::ss defined in containers.h
   function location_cmp(location,location) in line 66
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function empty_loc_set(void) in line 67
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses variable empty_set defined in set.c
   function loc_set_copy(region,loc_set) in line 68
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
      uses function set_copy(region,set) defined in set.c
   function loc_set_empty(loc_set) in line 69
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses function set_empty(set) defined in set.c
   function loc_set_member(loc_set,location) in line 70
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
      uses function set_member(set_cmp_fn,set,void *) defined in set.c
      uses function location_cmp(location,location) defined in containers.h
   function loc_set_size(loc_set) in line 71
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses function set_size(set) defined in set.c
   function loc_set_insert(region,loc_set *,location) in line 72
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
      uses function set_insert(region,set_cmp_fn,bool,set *,void *) defined in set.c
      uses function location_cmp(location,location) defined in containers.h
      uses macro definition FALSE defined in bool.h
   function loc_set_remove(loc_set *,location) in line 73
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
      uses function set_remove(set_cmp_fn,bool,set *,void *) defined in set.c
      uses function location_cmp(location,location) defined in containers.h
      uses macro definition FALSE defined in bool.h
   function loc_set_subset(loc_set,loc_set) in line 74
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
      uses function set_subset(set_cmp_fn,set,set) defined in set.c
      uses function location_cmp(location,location) defined in containers.h
   function loc_set_union(loc_set,loc_set) in line 75
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
      uses function set_union(set_cmp_fn,bool,set,set) defined in set.c
      uses function location_cmp(location,location) defined in containers.h
      uses macro definition FALSE defined in bool.h
   function loc_set_single(loc_set) in line 76
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses function set_single(set) defined in set.c
   function loc_set_sort(loc_set) in line 77
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses function set_sort(set_cmp_fn,set) defined in set.c
      uses function location_cmp(location,location) defined in containers.h
   function loc_set_scan(loc_set,loc_set_scanner *) in line 78
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
      uses function set_scan(set,set_scanner *) defined in set.c
      uses variable loc_set_scanner::ss defined in containers.h
   function loc_set_next(loc_set_scanner *) in line 79
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses function set_next(set_scanner *) defined in set.c
      uses variable loc_set_scanner::ss defined in containers.h
   function empty_aloctype_set(void) in line 86
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses variable empty_set defined in set.c
   function aloctype_set_copy(region,aloctype_set) in line 87
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
      uses function set_copy(region,set) defined in set.c
   function aloctype_set_empty(aloctype_set) in line 88
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses function set_empty(set) defined in set.c
   function aloctype_set_size(aloctype_set) in line 89
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses function set_size(set) defined in set.c
   function aloctype_set_insert(region,aloctype_set *,aloctype) in line 90
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
      uses function set_insert(region,set_cmp_fn,bool,set *,void *) defined in set.c
      uses macro definition NULL defined in config.h
      uses macro definition TRUE defined in bool.h
   function aloctype_set_subset(aloctype_set,aloctype_set) in line 91
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
      uses function set_subset(set_cmp_fn,set,set) defined in set.c
      uses macro definition NULL defined in config.h
   function aloctype_set_union(aloctype_set,aloctype_set) in line 92
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
      uses function set_union(set_cmp_fn,bool,set,set) defined in set.c
      uses macro definition NULL defined in config.h
      uses macro definition TRUE defined in bool.h
   function aloctype_set_single(aloctype_set) in line 93
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses function set_single(set) defined in set.c
   function aloctype_set_sort(int(*)(aloctype_set, aloctype_set),aloctype_set) in line 94
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
      uses function set_sort(set_cmp_fn,set) defined in set.c
   function aloctype_set_remove_dups(int(*)(aloctype, aloctype),aloctype_set) in line 95
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
      uses function set_remove_dups(set_cmp_fn,bool,set) defined in set.c
      uses macro definition TRUE defined in bool.h
   function aloctype_set_scan(aloctype_set,aloctype_set_scanner *) in line 96
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
      uses function set_scan(set,set_scanner *) defined in set.c
      uses variable aloctype_set_scanner::ss defined in containers.h
   function aloctype_set_next(aloctype_set_scanner *) in line 97
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses function set_next(set_scanner *) defined in set.c
      uses variable aloctype_set_scanner::ss defined in containers.h
   function empty_alocreftype_set(void) in line 102
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses variable empty_set defined in set.c
   function alocreftype_set_copy(region,alocreftype_set) in line 103
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
      uses function set_copy(region,set) defined in set.c
   function alocreftype_set_empty(alocreftype_set) in line 104
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses function set_empty(set) defined in set.c
   function alocreftype_set_size(alocreftype_set) in line 105
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses function set_size(set) defined in set.c
   function alocreftype_set_insert(region,alocreftype_set *,alocreftype) in line 106
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
      uses function set_insert(region,set_cmp_fn,bool,set *,void *) defined in set.c
      uses macro definition NULL defined in config.h
      uses macro definition TRUE defined in bool.h
   function alocreftype_set_subset(alocreftype_set,alocreftype_set) in line 107
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
      uses function set_subset(set_cmp_fn,set,set) defined in set.c
      uses macro definition NULL defined in config.h
   function alocreftype_set_union(alocreftype_set,alocreftype_set) in line 108
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
      uses function set_union(set_cmp_fn,bool,set,set) defined in set.c
      uses macro definition NULL defined in config.h
      uses macro definition TRUE defined in bool.h
   function alocreftype_set_single(alocreftype_set) in line 109
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses function set_single(set) defined in set.c
   function alocreftype_set_sort(int(*)(alocreftype_set, alocreftype_set),alocreftype_set) in line 110
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
      uses function set_sort(set_cmp_fn,set) defined in set.c
   function alocreftype_set_remove_dups(int(*)(alocreftype, alocreftype),alocreftype_set) in line 111
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
      uses function set_remove_dups(set_cmp_fn,bool,set) defined in set.c
      uses macro definition TRUE defined in bool.h
   function alocreftype_set_scan(alocreftype_set,alocreftype_set_scanner *) in line 112
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
      uses function set_scan(set,set_scanner *) defined in set.c
      uses variable alocreftype_set_scanner::ss defined in containers.h
   function alocreftype_set_next(alocreftype_set_scanner *) in line 113
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses function set_next(set_scanner *) defined in set.c
      uses variable alocreftype_set_scanner::ss defined in containers.h
   function empty_alocfntype_set(void) in line 118
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses variable empty_set defined in set.c
   function alocfntype_set_copy(region,alocfntype_set) in line 119
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
      uses function set_copy(region,set) defined in set.c
   function alocfntype_set_empty(alocfntype_set) in line 120
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses function set_empty(set) defined in set.c
   function alocfntype_set_size(alocfntype_set) in line 121
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses function set_size(set) defined in set.c
   function alocfntype_set_insert(region,alocfntype_set *,alocfntype) in line 122
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
      uses function set_insert(region,set_cmp_fn,bool,set *,void *) defined in set.c
      uses macro definition NULL defined in config.h
      uses macro definition TRUE defined in bool.h
   function alocfntype_set_subset(alocfntype_set,alocfntype_set) in line 123
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
      uses function set_subset(set_cmp_fn,set,set) defined in set.c
      uses macro definition NULL defined in config.h
   function alocfntype_set_union(alocfntype_set,alocfntype_set) in line 124
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
      uses function set_union(set_cmp_fn,bool,set,set) defined in set.c
      uses macro definition NULL defined in config.h
      uses macro definition TRUE defined in bool.h
   function alocfntype_set_single(alocfntype_set) in line 125
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses function set_single(set) defined in set.c
   function alocfntype_set_sort(int(*)(alocfntype_set, alocfntype_set),alocfntype_set) in line 126
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
      uses function set_sort(set_cmp_fn,set) defined in set.c
   function alocfntype_set_remove_dups(int(*)(alocfntype, alocfntype),alocfntype_set) in line 127
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
      uses function set_remove_dups(set_cmp_fn,bool,set) defined in set.c
      uses macro definition TRUE defined in bool.h
   function alocfntype_set_scan(alocfntype_set,alocfntype_set_scanner *) in line 128
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
      uses function set_scan(set,set_scanner *) defined in set.c
      uses variable alocfntype_set_scanner::ss defined in containers.h
   function alocfntype_set_next(alocfntype_set_scanner *) in line 129
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses function set_next(set_scanner *) defined in set.c
      uses variable alocfntype_set_scanner::ss defined in containers.h
   function empty_effecttype_set(void) in line 134
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses variable empty_set defined in set.c
   function effecttype_set_copy(region,effecttype_set) in line 135
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
      uses function set_copy(region,set) defined in set.c
   function effecttype_set_empty(effecttype_set) in line 136
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses function set_empty(set) defined in set.c
   function effecttype_set_size(effecttype_set) in line 137
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses function set_size(set) defined in set.c
   function effecttype_set_insert(region,effecttype_set *,effecttype) in line 138
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
      uses function set_insert(region,set_cmp_fn,bool,set *,void *) defined in set.c
      uses macro definition NULL defined in config.h
      uses macro definition TRUE defined in bool.h
   function effecttype_set_subset(effecttype_set,effecttype_set) in line 139
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
      uses function set_subset(set_cmp_fn,set,set) defined in set.c
      uses macro definition NULL defined in config.h
   function effecttype_set_union(effecttype_set,effecttype_set) in line 140
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
      uses function set_union(set_cmp_fn,bool,set,set) defined in set.c
      uses macro definition NULL defined in config.h
      uses macro definition TRUE defined in bool.h
   function effecttype_set_single(effecttype_set) in line 141
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses function set_single(set) defined in set.c
   function effecttype_set_sort(int(*)(effecttype_set, effecttype_set),effecttype_set) in line 142
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
      uses function set_sort(set_cmp_fn,set) defined in set.c
   function effecttype_set_remove_dups(int(*)(effecttype, effecttype),effecttype_set) in line 143
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
      uses function set_remove_dups(set_cmp_fn,bool,set) defined in set.c
      uses macro definition TRUE defined in bool.h
   function effecttype_set_scan(effecttype_set,effecttype_set_scanner *) in line 144
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
      uses function set_scan(set,set_scanner *) defined in set.c
      uses variable effecttype_set_scanner::ss defined in containers.h
   function effecttype_set_next(effecttype_set_scanner *) in line 145
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses function set_next(set_scanner *) defined in set.c
      uses variable effecttype_set_scanner::ss defined in containers.h
   function empty_effect_set(void) in line 150
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses variable empty_set defined in set.c
   function effect_set_copy(region,effect_set) in line 151
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
      uses function set_copy(region,set) defined in set.c
   function effect_set_empty(effect_set) in line 152
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses function set_empty(set) defined in set.c
   function effect_set_size(effect_set) in line 153
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses function set_size(set) defined in set.c
   function effect_set_insert(region,effect_set *,effect) in line 154
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
      uses function set_insert(region,set_cmp_fn,bool,set *,void *) defined in set.c
      uses macro definition NULL defined in config.h
      uses macro definition TRUE defined in bool.h
   function effect_set_subset(effect_set,effect_set) in line 155
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
      uses function set_subset(set_cmp_fn,set,set) defined in set.c
      uses macro definition NULL defined in config.h
   function effect_set_union(effect_set,effect_set) in line 156
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
      uses function set_union(set_cmp_fn,bool,set,set) defined in set.c
      uses macro definition NULL defined in config.h
      uses macro definition TRUE defined in bool.h
   function effect_set_single(effect_set) in line 157
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses function set_single(set) defined in set.c
   function effect_set_sort(int(*)(effect_set, effect_set),effect_set) in line 158
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
      uses function set_sort(set_cmp_fn,set) defined in set.c
   function effect_set_remove_dups(int(*)(effect, effect),effect_set) in line 159
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
      uses function set_remove_dups(set_cmp_fn,bool,set) defined in set.c
      uses macro definition TRUE defined in bool.h
   function effect_set_scan(effect_set,effect_set_scanner *) in line 160
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
      uses function set_scan(set,set_scanner *) defined in set.c
      uses variable effect_set_scanner::ss defined in containers.h
   function effect_set_next(effect_set_scanner *) in line 161
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses function set_next(set_scanner *) defined in set.c
      uses variable effect_set_scanner::ss defined in containers.h
   function empty_store_edge_set(void) in line 166
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses variable empty_set defined in set.c
   function store_edge_set_copy(region,store_edge_set) in line 167
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
      uses function set_copy(region,set) defined in set.c
   function store_edge_set_empty(store_edge_set) in line 168
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses function set_empty(set) defined in set.c
   function store_edge_set_size(store_edge_set) in line 169
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses function set_size(set) defined in set.c
   function store_edge_set_insert(region,store_edge_set *,store_edge) in line 170
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
      uses function set_insert(region,set_cmp_fn,bool,set *,void *) defined in set.c
      uses macro definition NULL defined in config.h
      uses macro definition TRUE defined in bool.h
   function store_edge_set_subset(store_edge_set,store_edge_set) in line 171
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
      uses function set_subset(set_cmp_fn,set,set) defined in set.c
      uses macro definition NULL defined in config.h
   function store_edge_set_union(store_edge_set,store_edge_set) in line 172
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
      uses function set_union(set_cmp_fn,bool,set,set) defined in set.c
      uses macro definition NULL defined in config.h
      uses macro definition TRUE defined in bool.h
   function store_edge_set_single(store_edge_set) in line 173
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses function set_single(set) defined in set.c
   function store_edge_set_sort(int(*)(store_edge_set, store_edge_set),store_edge_set) in line 174
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
      uses function set_sort(set_cmp_fn,set) defined in set.c
   function store_edge_set_remove_dups(int(*)(store_edge, store_edge),store_edge_set) in line 175
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
      uses function set_remove_dups(set_cmp_fn,bool,set) defined in set.c
      uses macro definition TRUE defined in bool.h
   function store_edge_set_scan(store_edge_set,store_edge_set_scanner *) in line 176
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
      uses function set_scan(set,set_scanner *) defined in set.c
      uses variable store_edge_set_scanner::ss defined in containers.h
   function store_edge_set_next(store_edge_set_scanner *) in line 177
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses function set_next(set_scanner *) defined in set.c
      uses variable store_edge_set_scanner::ss defined in containers.h
   function empty_po_set(void) in line 182
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses variable empty_set defined in set.c
   function po_set_copy(region,po_set) in line 183
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
      uses function set_copy(region,set) defined in set.c
   function po_set_empty(po_set) in line 184
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses function set_empty(set) defined in set.c
   function po_set_size(po_set) in line 185
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses function set_size(set) defined in set.c
   function po_set_insert(region,po_set *,po_info) in line 186
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
      uses function set_insert(region,set_cmp_fn,bool,set *,void *) defined in set.c
      uses macro definition NULL defined in config.h
      uses macro definition TRUE defined in bool.h
   function po_set_subset(po_set,po_set) in line 187
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
      uses function set_subset(set_cmp_fn,set,set) defined in set.c
      uses macro definition NULL defined in config.h
   function po_set_union(po_set,po_set) in line 188
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
      uses function set_union(set_cmp_fn,bool,set,set) defined in set.c
      uses macro definition NULL defined in config.h
      uses macro definition TRUE defined in bool.h
   function po_set_single(po_set) in line 189
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses function set_single(set) defined in set.c
   function po_set_sort(int(*)(po_set, po_set),po_set) in line 190
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
      uses function set_sort(set_cmp_fn,set) defined in set.c
   function po_set_remove_dups(int(*)(po_info, po_info),po_set) in line 191
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
      uses function set_remove_dups(set_cmp_fn,bool,set) defined in set.c
      uses macro definition TRUE defined in bool.h
   function po_set_scan(po_set,po_set_scanner *) in line 192
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
      uses function set_scan(set,set_scanner *) defined in set.c
      uses variable po_set_scanner::ss defined in containers.h
   function po_set_next(po_set_scanner *) in line 193
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses function set_next(set_scanner *) defined in set.c
      uses variable po_set_scanner::ss defined in containers.h
   function empty_qual_edge_set(void) in line 198
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses variable empty_set defined in set.c
   function qual_edge_set_copy(region,qual_edge_set) in line 199
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
      uses function set_copy(region,set) defined in set.c
   function qual_edge_set_empty(qual_edge_set) in line 200
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses function set_empty(set) defined in set.c
   function qual_edge_set_size(qual_edge_set) in line 201
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses function set_size(set) defined in set.c
   function qual_edge_set_insert(region,qual_edge_set *,qual_edge) in line 202
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
      uses function set_insert(region,set_cmp_fn,bool,set *,void *) defined in set.c
      uses macro definition NULL defined in config.h
      uses macro definition TRUE defined in bool.h
   function qual_edge_set_subset(qual_edge_set,qual_edge_set) in line 203
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
      uses function set_subset(set_cmp_fn,set,set) defined in set.c
      uses macro definition NULL defined in config.h
   function qual_edge_set_union(qual_edge_set,qual_edge_set) in line 204
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
      uses function set_union(set_cmp_fn,bool,set,set) defined in set.c
      uses macro definition NULL defined in config.h
      uses macro definition TRUE defined in bool.h
   function qual_edge_set_single(qual_edge_set) in line 205
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses function set_single(set) defined in set.c
   function qual_edge_set_sort(int(*)(qual_edge_set, qual_edge_set),qual_edge_set) in line 206
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
      uses function set_sort(set_cmp_fn,set) defined in set.c
   function qual_edge_set_remove_dups(int(*)(qual_edge, qual_edge),qual_edge_set) in line 207
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
      uses function set_remove_dups(set_cmp_fn,bool,set) defined in set.c
      uses macro definition TRUE defined in bool.h
   function qual_edge_set_scan(qual_edge_set,qual_edge_set_scanner *) in line 208
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
      uses function set_scan(set,set_scanner *) defined in set.c
      uses variable qual_edge_set_scanner::ss defined in containers.h
   function qual_edge_set_next(qual_edge_set_scanner *) in line 209
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses function set_next(set_scanner *) defined in set.c
      uses variable qual_edge_set_scanner::ss defined in containers.h
   function empty_cond_set(void) in line 214
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses variable empty_set defined in set.c
   function cond_set_copy(region,cond_set) in line 215
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
      uses function set_copy(region,set) defined in set.c
   function cond_set_empty(cond_set) in line 216
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses function set_empty(set) defined in set.c
   function cond_set_size(cond_set) in line 217
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses function set_size(set) defined in set.c
   function cond_set_insert(region,cond_set *,cond) in line 218
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
      uses function set_insert(region,set_cmp_fn,bool,set *,void *) defined in set.c
      uses macro definition NULL defined in config.h
      uses macro definition TRUE defined in bool.h
   function cond_set_subset(cond_set,cond_set) in line 219
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
      uses function set_subset(set_cmp_fn,set,set) defined in set.c
      uses macro definition NULL defined in config.h
   function cond_set_union(cond_set,cond_set) in line 220
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
      uses function set_union(set_cmp_fn,bool,set,set) defined in set.c
      uses macro definition NULL defined in config.h
      uses macro definition TRUE defined in bool.h
   function cond_set_single(cond_set) in line 221
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses function set_single(set) defined in set.c
   function cond_set_sort(int(*)(cond_set, cond_set),cond_set) in line 222
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
      uses function set_sort(set_cmp_fn,set) defined in set.c
   function cond_set_remove_dups(int(*)(cond, cond),cond_set) in line 223
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
      uses function set_remove_dups(set_cmp_fn,bool,set) defined in set.c
      uses macro definition TRUE defined in bool.h
   function cond_set_scan(cond_set,cond_set_scanner *) in line 224
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
      uses function set_scan(set,set_scanner *) defined in set.c
      uses variable cond_set_scanner::ss defined in containers.h
   function cond_set_next(cond_set_scanner *) in line 225
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses function set_next(set_scanner *) defined in set.c
      uses variable cond_set_scanner::ss defined in containers.h
   function hash_aloc(aloc) in line 233
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
   function eq_aloc(aloc,aloc) in line 234
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function make_aloc_int_map(region,int) in line 235
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
      uses function make_hash_table(region,int,hash_fn,keyeq_fn) defined in hash.c
      uses function hash_aloc(aloc) defined in containers.h
      uses function eq_aloc(aloc,aloc) defined in containers.h
   function aloc_int_map_reset(aloc_int_map) in line 236
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses function hash_table_reset(hash_table) defined in hash.c
   function aloc_int_map_size(aloc_int_map) in line 237
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses function hash_table_size(hash_table) defined in hash.c
   function aloc_int_map_lookup(aloc_int_map,aloc,int *) in line 238
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
      uses function hash_table_lookup(hash_table,hash_key,hash_data *) defined in hash.c
      uses variable hash_key defined in hash.h
   function aloc_int_map_insert(aloc_int_map,aloc,int) in line 239
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
      uses function hash_table_insert(hash_table,hash_key,hash_data) defined in hash.c
      uses variable hash_key defined in hash.h
   function aloc_int_map_remove(aloc_int_map,aloc) in line 240
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
      uses function hash_table_remove(hash_table,hash_key) defined in hash.c
      uses variable hash_key defined in hash.h
   function aloc_int_map_copy(region,aloc_int_map) in line 241
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
      uses function hash_table_copy(region,hash_table) defined in hash.c
   function aloc_int_map_map(region,aloc_int_map,int(*)(aloc, int, void *),void *) in line 242
      protection public
      1 lines of code
      4 parameters
      1 conditional paths
      uses function hash_table_map(region,hash_table,hash_map_fn,void *) defined in hash.c
      uses function f(char *) defined in taint-const-subtyping.c
   function aloc_int_map_scan(aloc_int_map,aloc_int_map_scanner *) in line 243
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
      uses function hash_table_scan(hash_table,hash_table_scanner *) defined in hash.c
      uses variable aloc_int_map_scanner::hts defined in containers.h
   function aloc_int_map_next(aloc_int_map_scanner *,aloc *,int *) in line 244
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
      uses function hash_table_next(hash_table_scanner *,hash_key *,hash_data *) defined in hash.c
      uses variable aloc_int_map_scanner::hts defined in containers.h
      uses variable hash_key defined in hash.h
   function aloc_int_map_scan_sorted(aloc_int_map,int(*)(aloc, aloc),aloc_int_map_scanner_sorted *) in line 245
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
      uses function hash_table_scan_sorted(hash_table,keycmp_fn,hash_table_scanner_sorted *) defined in hash.c
      uses function f(char *) defined in taint-const-subtyping.c
      uses variable aloc_int_map_scanner_sorted::htss defined in containers.h
   function aloc_int_map_next_sorted(aloc_int_map_scanner_sorted *,aloc *,int *) in line 246
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
      uses function hash_table_next_sorted(hash_table_scanner_sorted *,hash_key *,hash_data *) defined in hash.c
      uses variable aloc_int_map_scanner_sorted::htss defined in containers.h
      uses variable hash_key defined in hash.h
   function make_cell_map(region,int) in line 252
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
      uses function make_hash_table(region,int,hash_fn,keyeq_fn) defined in hash.c
      uses function hash_aloc(aloc) defined in containers.h
      uses function eq_aloc(aloc,aloc) defined in containers.h
   function cell_map_reset(cell_map) in line 253
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses function hash_table_reset(hash_table) defined in hash.c
   function cell_map_size(cell_map) in line 254
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses function hash_table_size(hash_table) defined in hash.c
   function cell_map_lookup(cell_map,aloc,cell *) in line 255
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
      uses function hash_table_lookup(hash_table,hash_key,hash_data *) defined in hash.c
      uses variable hash_key defined in hash.h
   function cell_map_insert(cell_map,aloc,cell) in line 256
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
      uses function hash_table_insert(hash_table,hash_key,hash_data) defined in hash.c
      uses variable hash_key defined in hash.h
   function cell_map_remove(cell_map,aloc) in line 257
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
      uses function hash_table_remove(hash_table,hash_key) defined in hash.c
      uses variable hash_key defined in hash.h
   function cell_map_copy(region,cell_map) in line 258
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
      uses function hash_table_copy(region,hash_table) defined in hash.c
   function cell_map_map(region,cell_map,cell(*)(aloc, cell, void *),void *) in line 259
      protection public
      1 lines of code
      4 parameters
      1 conditional paths
      uses function hash_table_map(region,hash_table,hash_map_fn,void *) defined in hash.c
      uses function f(char *) defined in taint-const-subtyping.c
   function cell_map_scan(cell_map,cell_map_scanner *) in line 260
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
      uses function hash_table_scan(hash_table,hash_table_scanner *) defined in hash.c
      uses variable cell_map_scanner::hts defined in containers.h
   function cell_map_next(cell_map_scanner *,aloc *,cell *) in line 261
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
      uses function hash_table_next(hash_table_scanner *,hash_key *,hash_data *) defined in hash.c
      uses variable cell_map_scanner::hts defined in containers.h
      uses variable hash_key defined in hash.h
   function cell_map_scan_sorted(cell_map,int(*)(aloc, aloc),cell_map_scanner_sorted *) in line 262
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
      uses function hash_table_scan_sorted(hash_table,keycmp_fn,hash_table_scanner_sorted *) defined in hash.c
      uses function f(char *) defined in taint-const-subtyping.c
      uses variable cell_map_scanner_sorted::htss defined in containers.h
   function cell_map_next_sorted(cell_map_scanner_sorted *,aloc *,cell *) in line 263
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
      uses function hash_table_next_sorted(hash_table_scanner_sorted *,hash_key *,hash_data *) defined in hash.c
      uses variable cell_map_scanner_sorted::htss defined in containers.h
      uses variable hash_key defined in hash.h
   function bitset_hash(bitset) in line 267
      protection public
      10 lines of code
      1 parameters
      2 conditional paths
   function bitset_eq(bitset,bitset) in line 268
      protection public
      11 lines of code
      2 parameters
      3 conditional paths
      uses macro definition FALSE defined in bool.h
      uses macro definition TRUE defined in bool.h
   function make_bitset_bounds_map(region,int) in line 269
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
      uses function make_hash_table(region,int,hash_fn,keyeq_fn) defined in hash.c
      uses function bitset_hash(bitset) defined in containers.h
      uses function bitset_eq(bitset,bitset) defined in containers.h
   function bitset_bounds_map_reset(bitset_bounds_map) in line 270
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses function hash_table_reset(hash_table) defined in hash.c
   function bitset_bounds_map_size(bitset_bounds_map) in line 271
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses function hash_table_size(hash_table) defined in hash.c
   function bitset_bounds_map_lookup(bitset_bounds_map,bitset,bounds *) in line 272
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
      uses function hash_table_lookup(hash_table,hash_key,hash_data *) defined in hash.c
      uses variable hash_key defined in hash.h
   function bitset_bounds_map_insert(bitset_bounds_map,bitset,bounds) in line 273
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
      uses function hash_table_insert(hash_table,hash_key,hash_data) defined in hash.c
      uses variable hash_key defined in hash.h
   function bitset_bounds_map_remove(bitset_bounds_map,bitset) in line 274
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
      uses function hash_table_remove(hash_table,hash_key) defined in hash.c
      uses variable hash_key defined in hash.h
   function bitset_bounds_map_copy(region,bitset_bounds_map) in line 275
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
      uses function hash_table_copy(region,hash_table) defined in hash.c
   function bitset_bounds_map_map(region,bitset_bounds_map,bounds(*)(bitset, bounds, void *),void *) in line 276
      protection public
      1 lines of code
      4 parameters
      1 conditional paths
      uses function hash_table_map(region,hash_table,hash_map_fn,void *) defined in hash.c
      uses function f(char *) defined in taint-const-subtyping.c
   function bitset_bounds_map_scan(bitset_bounds_map,bitset_bounds_map_scanner *) in line 277
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
      uses function hash_table_scan(hash_table,hash_table_scanner *) defined in hash.c
      uses variable bitset_bounds_map_scanner::hts defined in containers.h
   function bitset_bounds_map_next(bitset_bounds_map_scanner *,bitset *,bounds *) in line 278
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
      uses function hash_table_next(hash_table_scanner *,hash_key *,hash_data *) defined in hash.c
      uses variable bitset_bounds_map_scanner::hts defined in containers.h
      uses variable hash_key defined in hash.h
   function bitset_bounds_map_scan_sorted(bitset_bounds_map,int(*)(bitset, bitset),bitset_bounds_map_scanner_sorted *) in line 279
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
      uses function hash_table_scan_sorted(hash_table,keycmp_fn,hash_table_scanner_sorted *) defined in hash.c
      uses function f(char *) defined in taint-const-subtyping.c
      uses variable bitset_bounds_map_scanner_sorted::htss defined in containers.h
   function bitset_bounds_map_next_sorted(bitset_bounds_map_scanner_sorted *,bitset *,bounds *) in line 280
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
      uses function hash_table_next_sorted(hash_table_scanner_sorted *,hash_key *,hash_data *) defined in hash.c
      uses variable bitset_bounds_map_scanner_sorted::htss defined in containers.h
      uses variable hash_key defined in hash.h
   function string_hash(const char *) in line 284
      protection public
      13 lines of code
      1 parameters
      1 conditional paths
   function string_eq(const char *,const char *) in line 285
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
   function make_pam_file_map(region,int) in line 286
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
      uses function make_hash_table(region,int,hash_fn,keyeq_fn) defined in hash.c
      uses function string_hash(const char *) defined in containers.h
      uses function string_eq(const char *,const char *) defined in containers.h
   function pam_file_map_reset(pam_file_map) in line 287
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses function hash_table_reset(hash_table) defined in hash.c
   function pam_file_map_size(pam_file_map) in line 288
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses function hash_table_size(hash_table) defined in hash.c
   function pam_file_map_lookup(pam_file_map,const char *,pam_file *) in line 289
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
      uses function hash_table_lookup(hash_table,hash_key,hash_data *) defined in hash.c
      uses variable hash_key defined in hash.h
   function pam_file_map_insert(pam_file_map,const char *,pam_file) in line 290
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
      uses function hash_table_insert(hash_table,hash_key,hash_data) defined in hash.c
      uses variable hash_key defined in hash.h
   function pam_file_map_remove(pam_file_map,const char *) in line 291
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
      uses function hash_table_remove(hash_table,hash_key) defined in hash.c
      uses variable hash_key defined in hash.h
   function pam_file_map_copy(region,pam_file_map) in line 292
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
      uses function hash_table_copy(region,hash_table) defined in hash.c
   function pam_file_map_map(region,pam_file_map,pam_file(*)(const char *, pam_file, void *),void *) in line 293
      protection public
      1 lines of code
      4 parameters
      1 conditional paths
      uses function hash_table_map(region,hash_table,hash_map_fn,void *) defined in hash.c
      uses function f(char *) defined in taint-const-subtyping.c
   function pam_file_map_scan(pam_file_map,pam_file_map_scanner *) in line 294
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
      uses function hash_table_scan(hash_table,hash_table_scanner *) defined in hash.c
      uses variable pam_file_map_scanner::hts defined in containers.h
   function pam_file_map_next(pam_file_map_scanner *,const char **,pam_file *) in line 295
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
      uses function hash_table_next(hash_table_scanner *,hash_key *,hash_data *) defined in hash.c
      uses variable pam_file_map_scanner::hts defined in containers.h
      uses variable hash_key defined in hash.h
   function pam_file_map_scan_sorted(pam_file_map,int(*)(const char *, const char *),pam_file_map_scanner_sorted *) in line 296
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
      uses function hash_table_scan_sorted(hash_table,keycmp_fn,hash_table_scanner_sorted *) defined in hash.c
      uses function f(char *) defined in taint-const-subtyping.c
      uses variable pam_file_map_scanner_sorted::htss defined in containers.h
   function pam_file_map_next_sorted(pam_file_map_scanner_sorted *,const char **,pam_file *) in line 297
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
      uses function hash_table_next_sorted(hash_table_scanner_sorted *,hash_key *,hash_data *) defined in hash.c
      uses variable pam_file_map_scanner_sorted::htss defined in containers.h
      uses variable hash_key defined in hash.h
   function make_pam_click_map(region,int) in line 303
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
      uses function make_hash_table(region,int,hash_fn,keyeq_fn) defined in hash.c
      uses function string_hash(const char *) defined in containers.h
      uses function string_eq(const char *,const char *) defined in containers.h
   function pam_click_map_reset(pam_click_map) in line 304
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses function hash_table_reset(hash_table) defined in hash.c
   function pam_click_map_size(pam_click_map) in line 305
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses function hash_table_size(hash_table) defined in hash.c
   function pam_click_map_lookup(pam_click_map,const char *,pam_click *) in line 306
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
      uses function hash_table_lookup(hash_table,hash_key,hash_data *) defined in hash.c
      uses variable hash_key defined in hash.h
   function pam_click_map_insert(pam_click_map,const char *,pam_click) in line 307
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
      uses function hash_table_insert(hash_table,hash_key,hash_data) defined in hash.c
      uses variable hash_key defined in hash.h
   function pam_click_map_remove(pam_click_map,const char *) in line 308
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
      uses function hash_table_remove(hash_table,hash_key) defined in hash.c
      uses variable hash_key defined in hash.h
   function pam_click_map_copy(region,pam_click_map) in line 309
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
      uses function hash_table_copy(region,hash_table) defined in hash.c
   function pam_click_map_map(region,pam_click_map,pam_click(*)(const char *, pam_click, void *),void *) in line 310
      protection public
      1 lines of code
      4 parameters
      1 conditional paths
      uses function hash_table_map(region,hash_table,hash_map_fn,void *) defined in hash.c
      uses function f(char *) defined in taint-const-subtyping.c
   function pam_click_map_scan(pam_click_map,pam_click_map_scanner *) in line 311
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
      uses function hash_table_scan(hash_table,hash_table_scanner *) defined in hash.c
      uses variable pam_click_map_scanner::hts defined in containers.h
   function pam_click_map_next(pam_click_map_scanner *,const char **,pam_click *) in line 312
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
      uses function hash_table_next(hash_table_scanner *,hash_key *,hash_data *) defined in hash.c
      uses variable pam_click_map_scanner::hts defined in containers.h
      uses variable hash_key defined in hash.h
   function pam_click_map_scan_sorted(pam_click_map,int(*)(const char *, const char *),pam_click_map_scanner_sorted *) in line 313
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
      uses function hash_table_scan_sorted(hash_table,keycmp_fn,hash_table_scanner_sorted *) defined in hash.c
      uses function f(char *) defined in taint-const-subtyping.c
      uses variable pam_click_map_scanner_sorted::htss defined in containers.h
   function pam_click_map_next_sorted(pam_click_map_scanner_sorted *,const char **,pam_click *) in line 314
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
      uses function hash_table_next_sorted(hash_table_scanner_sorted *,hash_key *,hash_data *) defined in hash.c
      uses variable pam_click_map_scanner_sorted::htss defined in containers.h
      uses variable hash_key defined in hash.h
   function make_pam_buffer_map(region,int) in line 320
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
      uses function make_hash_table(region,int,hash_fn,keyeq_fn) defined in hash.c
      uses function string_hash(const char *) defined in containers.h
      uses function string_eq(const char *,const char *) defined in containers.h
   function pam_buffer_map_reset(pam_buffer_map) in line 321
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses function hash_table_reset(hash_table) defined in hash.c
   function pam_buffer_map_size(pam_buffer_map) in line 322
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses function hash_table_size(hash_table) defined in hash.c
   function pam_buffer_map_lookup(pam_buffer_map,const char *,pam_click_map *) in line 323
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
      uses function hash_table_lookup(hash_table,hash_key,hash_data *) defined in hash.c
      uses variable hash_key defined in hash.h
   function pam_buffer_map_insert(pam_buffer_map,const char *,pam_click_map) in line 324
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
      uses function hash_table_insert(hash_table,hash_key,hash_data) defined in hash.c
      uses variable hash_key defined in hash.h
   function pam_buffer_map_remove(pam_buffer_map,const char *) in line 325
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
      uses function hash_table_remove(hash_table,hash_key) defined in hash.c
      uses variable hash_key defined in hash.h
   function pam_buffer_map_copy(region,pam_buffer_map) in line 326
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
      uses function hash_table_copy(region,hash_table) defined in hash.c
   function pam_buffer_map_map(region,pam_buffer_map,pam_click_map(*)(const char *, pam_click_map, void *),void *) in line 327
      protection public
      1 lines of code
      4 parameters
      1 conditional paths
      uses function hash_table_map(region,hash_table,hash_map_fn,void *) defined in hash.c
      uses function f(char *) defined in taint-const-subtyping.c
   function pam_buffer_map_scan(pam_buffer_map,pam_buffer_map_scanner *) in line 328
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
      uses function hash_table_scan(hash_table,hash_table_scanner *) defined in hash.c
      uses variable pam_buffer_map_scanner::hts defined in containers.h
   function pam_buffer_map_next(pam_buffer_map_scanner *,const char **,pam_click_map *) in line 329
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
      uses function hash_table_next(hash_table_scanner *,hash_key *,hash_data *) defined in hash.c
      uses variable pam_buffer_map_scanner::hts defined in containers.h
      uses variable hash_key defined in hash.h
   function pam_buffer_map_scan_sorted(pam_buffer_map,int(*)(const char *, const char *),pam_buffer_map_scanner_sorted *) in line 330
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
      uses function hash_table_scan_sorted(hash_table,keycmp_fn,hash_table_scanner_sorted *) defined in hash.c
      uses function f(char *) defined in taint-const-subtyping.c
      uses variable pam_buffer_map_scanner_sorted::htss defined in containers.h
   function pam_buffer_map_next_sorted(pam_buffer_map_scanner_sorted *,const char **,pam_click_map *) in line 331
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
      uses function hash_table_next_sorted(hash_table_scanner_sorted *,hash_key *,hash_data *) defined in hash.c
      uses variable pam_buffer_map_scanner_sorted::htss defined in containers.h
      uses variable hash_key defined in hash.h
   function location_hash(location) in line 335
      protection public
      10 lines of code
      1 parameters
      1 conditional paths
   function location_eq(location,location) in line 336
      protection public
      7 lines of code
      2 parameters
      1 conditional paths
   function make_pam_overlay_map(region,int) in line 337
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
      uses function make_hash_table(region,int,hash_fn,keyeq_fn) defined in hash.c
      uses function location_hash(location) defined in containers.h
      uses function location_eq(location,location) defined in containers.h
   function pam_overlay_map_reset(pam_overlay_map) in line 338
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses function hash_table_reset(hash_table) defined in hash.c
   function pam_overlay_map_size(pam_overlay_map) in line 339
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses function hash_table_size(hash_table) defined in hash.c
   function pam_overlay_map_lookup(pam_overlay_map,location,pam_overlay *) in line 340
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
      uses function hash_table_lookup(hash_table,hash_key,hash_data *) defined in hash.c
      uses variable hash_key defined in hash.h
   function pam_overlay_map_insert(pam_overlay_map,location,pam_overlay) in line 341
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
      uses function hash_table_insert(hash_table,hash_key,hash_data) defined in hash.c
      uses variable hash_key defined in hash.h
   function pam_overlay_map_remove(pam_overlay_map,location) in line 342
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
      uses function hash_table_remove(hash_table,hash_key) defined in hash.c
      uses variable hash_key defined in hash.h
   function pam_overlay_map_copy(region,pam_overlay_map) in line 343
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
      uses function hash_table_copy(region,hash_table) defined in hash.c
   function pam_overlay_map_map(region,pam_overlay_map,pam_overlay(*)(location, pam_overlay, void *),void *) in line 344
      protection public
      1 lines of code
      4 parameters
      1 conditional paths
      uses function hash_table_map(region,hash_table,hash_map_fn,void *) defined in hash.c
      uses function f(char *) defined in taint-const-subtyping.c
   function pam_overlay_map_scan(pam_overlay_map,pam_overlay_map_scanner *) in line 345
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
      uses function hash_table_scan(hash_table,hash_table_scanner *) defined in hash.c
      uses variable pam_overlay_map_scanner::hts defined in containers.h
   function pam_overlay_map_next(pam_overlay_map_scanner *,location *,pam_overlay *) in line 346
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
      uses function hash_table_next(hash_table_scanner *,hash_key *,hash_data *) defined in hash.c
      uses variable pam_overlay_map_scanner::hts defined in containers.h
      uses variable hash_key defined in hash.h
   function pam_overlay_map_scan_sorted(pam_overlay_map,int(*)(location, location),pam_overlay_map_scanner_sorted *) in line 347
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
      uses function hash_table_scan_sorted(hash_table,keycmp_fn,hash_table_scanner_sorted *) defined in hash.c
      uses function f(char *) defined in taint-const-subtyping.c
      uses variable pam_overlay_map_scanner_sorted::htss defined in containers.h
   function pam_overlay_map_next_sorted(pam_overlay_map_scanner_sorted *,location *,pam_overlay *) in line 348
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
      uses function hash_table_next_sorted(hash_table_scanner_sorted *,hash_key *,hash_data *) defined in hash.c
      uses variable pam_overlay_map_scanner_sorted::htss defined in containers.h
      uses variable hash_key defined in hash.h
   variable ty_set::s in line 10
      protection public
   variable ty_set_scanner::ss in line 11
      protection public
   variable qual_set::s in line 28
      protection public
   variable qual_set_scanner::ss in line 29
      protection public
   variable qual_set_byname::s in line 46
      protection public
   variable qual_set_byname_scanner::ss in line 47
      protection public
   variable loc_set::s in line 64
      protection public
   variable loc_set_scanner::ss in line 65
      protection public
   variable aloctype_set::s in line 84
      protection public
   variable aloctype_set_scanner::ss in line 85
      protection public
   variable alocreftype_set::s in line 100
      protection public
   variable alocreftype_set_scanner::ss in line 101
      protection public
   variable alocfntype_set::s in line 116
      protection public
   variable alocfntype_set_scanner::ss in line 117
      protection public
   variable effecttype_set::s in line 132
      protection public
   variable effecttype_set_scanner::ss in line 133
      protection public
   variable effect_set::s in line 148
      protection public
   variable effect_set_scanner::ss in line 149
      protection public
   variable store_edge_set::s in line 164
      protection public
   variable store_edge_set_scanner::ss in line 165
      protection public
   variable po_set::s in line 180
      protection public
   variable po_set_scanner::ss in line 181
      protection public
   variable qual_edge_set::s in line 196
      protection public
   variable qual_edge_set_scanner::ss in line 197
      protection public
   variable cond_set::s in line 212
      protection public
   variable cond_set_scanner::ss in line 213
      protection public
   variable aloc_int_map::ht in line 230
      protection public
   variable aloc_int_map_scanner::hts in line 231
      protection public
   variable aloc_int_map_scanner_sorted::htss in line 232
      protection public
   variable cell_map::ht in line 247
      protection public
   variable cell_map_scanner::hts in line 248
      protection public
   variable cell_map_scanner_sorted::htss in line 249
      protection public
   variable bitset_bounds_map::ht in line 264
      protection public
   variable bitset_bounds_map_scanner::hts in line 265
      protection public
   variable bitset_bounds_map_scanner_sorted::htss in line 266
      protection public
   variable pam_file_map::ht in line 281
      protection public
   variable pam_file_map_scanner::hts in line 282
      protection public
   variable pam_file_map_scanner_sorted::htss in line 283
      protection public
   variable pam_click_map::ht in line 298
      protection public
   variable pam_click_map_scanner::hts in line 299
      protection public
   variable pam_click_map_scanner_sorted::htss in line 300
      protection public
   variable pam_buffer_map::ht in line 315
      protection public
   variable pam_buffer_map_scanner::hts in line 316
      protection public
   variable pam_buffer_map_scanner_sorted::htss in line 317
      protection public
   variable pam_overlay_map::ht in line 332
      protection public
   variable pam_overlay_map_scanner::hts in line 333
      protection public
   variable pam_overlay_map_scanner_sorted::htss in line 334
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cqual/cqual-0.981/src/cqual.h
module cqual.h
   macro definition fail_loc in line 77
      protection public
   enumeration eff_kind in line 64
      protection public
   typedef ty in line 31
      protection public
   typedef qtype in line 32
      protection public
   typedef qual in line 33
      protection public
   typedef qual_edge in line 34
      protection public
   typedef cond in line 35
      protection public
   typedef bounds in line 36
      protection public
   typedef aloc in line 39
      protection public
   typedef effect in line 40
      protection public
   typedef store in line 41
      protection public
   typedef store_edge in line 42
      protection public
   typedef cell in line 43
      protection public
   typedef aloctype in line 46
      protection public
   typedef alocreftype in line 47
      protection public
   typedef alocfntype in line 48
      protection public
   typedef effecttype in line 49
      protection public
   typedef rinf_const in line 50
      protection public
   typedef po_info in line 53
      protection public
   typedef pam_file in line 54
      protection public
   typedef pam_click in line 55
      protection public
   typedef pam_overlay in line 56
      protection public
   typedef rinfo in line 59
      protection public
   typedef drinfo in line 60
      protection public
   typedef printf_func in line 61
      protection public
   enumvalue eff_any in line 65
      protection public
   enumvalue eff_rwr in line 66
      protection public
   enumvalue eff_r in line 67
      protection public
   enumvalue eff_wr in line 68
      protection public
   enumvalue eff_alloc in line 69
      protection public
   enumvalue eff_last in line 70
      protection public
   function load_config_file_quals(const char *) in line 73
      protection public
      20 lines of code
      1 parameters
      1 conditional paths
      uses variable filename defined in iquals.tab.c
      uses variable lattice_file defined in lattice-parse.tab.c
      uses variable lattice_line defined in lattice-parse.tab.c
      uses macro definition NULL defined in config.h
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cqual/cqual-0.981/src/cstring.h
module cstring.h
   function make_cstring(region,const char *,int) in line 35
      protection public
      11 lines of code
      3 parameters
      1 conditional paths
      uses variable cstring::data defined in cstring.h
      uses function rstralloc(region,size_t) defined in regions.c
      uses variable cstring::length defined in cstring.h
   function str2cstring(region,const char *) in line 38
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function make_cstring(region,const char *,int) defined in utils.c
   variable cstring::data in line 30
      protection public
   variable cstring::length in line 31
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cqual/cqual-0.981/src/cval.c
module cval.c
   macro definition CVAL_BITOP in line 746
      protection public
   macro definition CVAL_RELOP in line 778
      protection public
   variable cval_top in line 29
      protection public
   variable cval_unknown in line 30
      protection public
   variable cval_zero in line 31
      protection public
   function cval_init(void) in line 34
      protection public
      12 lines of code
      1 parameters
      1 conditional paths
      uses variable cval_top defined in cval.c
      uses variable cval::kind defined in cval.h
      uses variable cval_unknown defined in cval.c
      uses variable cval_zero defined in cval.c
      uses variable cval::si defined in cval.h
      uses variable cval::isize defined in cval.h
      uses function type_size(type) defined in types.c
      uses variable int_type defined in types.c
   function make_cval_unsigned(largest_uint,type) in line 47
      protection public
      10 lines of code
      2 parameters
      1 conditional paths
      uses function type_integral(type) defined in types.c
      uses function type_unsigned(type) defined in types.c
      uses variable cval::kind defined in cval.h
      uses variable cval::ui defined in cval.h
      uses variable cval::isize defined in cval.h
      uses function type_size(type) defined in types.c
   function make_cval_signed(largest_int,type) in line 58
      protection public
      10 lines of code
      2 parameters
      1 conditional paths
      uses function type_integral(type) defined in types.c
      uses function type_unsigned(type) defined in types.c
      uses variable cval::kind defined in cval.h
      uses variable cval::si defined in cval.h
      uses variable cval::isize defined in cval.h
      uses function type_size(type) defined in types.c
   function make_cval_float(long double) in line 69
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses variable cval::kind defined in cval.h
      uses variable cval::d defined in cval.h
   function make_cval_complex(cval,cval) in line 77
      protection public
      24 lines of code
      2 parameters
      1 conditional paths
      uses variable cval::kind defined in cval.h
      uses variable cval::d_i defined in cval.h
      uses variable cval::d defined in cval.h
      uses variable cval::isize defined in cval.h
      uses variable cval::ui_i defined in cval.h
      uses variable cval::ui defined in cval.h
      uses variable cval::si_i defined in cval.h
      uses variable cval::si defined in cval.h
   function make_cval_address(data_declaration,label_declaration,largest_int) in line 102
      protection public
      12 lines of code
      3 parameters
      1 conditional paths
      uses function make_cval_signed(largest_int,type) defined in cval.c
      uses variable ptrdiff_t_type defined in types.c
      uses variable cval::kind defined in cval.h
      uses variable cval::ddecl defined in cval.h
      uses variable cval::ldecl defined in cval.h
   function cval_isinteger(cval) in line 115
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable cval::kind defined in cval.h
   function cval_iscomplex(cval) in line 120
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable cval::kind defined in cval.h
   function cval_knownbool(cval) in line 126
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
      uses variable cval::kind defined in cval.h
      uses macro definition FALSE defined in bool.h
      uses variable cval::si defined in cval.h
      uses macro definition TRUE defined in bool.h
   function cval_boolvalue(cval) in line 141
      protection public
      16 lines of code
      1 parameters
      1 conditional paths
      uses variable cval::kind defined in cval.h
      uses variable cval::si defined in cval.h
      uses macro definition TRUE defined in bool.h
      uses variable cval::ui defined in cval.h
      uses variable cval::d defined in cval.h
      uses variable cval::ui_i defined in cval.h
      uses variable cval::si_i defined in cval.h
      uses variable cval::d_i defined in cval.h
   function cval_knownvalue(cval) in line 158
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
      uses variable cval::kind defined in cval.h
      uses macro definition FALSE defined in bool.h
      uses macro definition TRUE defined in bool.h
   function cval_uint_value(cval) in line 173
      protection public
      12 lines of code
      1 parameters
      1 conditional paths
      uses variable cval::kind defined in cval.h
      uses variable cval::ui defined in cval.h
      uses variable cval::si defined in cval.h
      uses variable cval::d defined in cval.h
   function cval_sint_value(cval) in line 186
      protection public
      12 lines of code
      1 parameters
      1 conditional paths
      uses variable cval::kind defined in cval.h
      uses variable cval::ui defined in cval.h
      uses variable cval::si defined in cval.h
      uses variable cval::d defined in cval.h
   function cval_float_value(cval) in line 199
      protection public
      12 lines of code
      1 parameters
      1 conditional paths
      uses variable cval::kind defined in cval.h
      uses variable cval::ui defined in cval.h
      uses variable cval::si defined in cval.h
      uses variable cval::d defined in cval.h
   function cval_isone(cval) in line 212
      protection public
      16 lines of code
      1 parameters
      1 conditional paths
      uses variable cval::kind defined in cval.h
      uses macro definition FALSE defined in bool.h
      uses variable cval::ui defined in cval.h
      uses variable cval::si defined in cval.h
      uses variable cval::d defined in cval.h
      uses variable cval::ui_i defined in cval.h
      uses variable cval::si_i defined in cval.h
      uses variable cval::d_i defined in cval.h
   function truncate_unsigned(largest_uint,size_t) in line 229
      protection public
      11 lines of code
      2 parameters
      2 conditional paths
      uses macro definition BITSPERBYTE defined in config.h
   function truncate_signed(largest_int,size_t) in line 242
      protection public
      18 lines of code
      2 parameters
      3 conditional paths
      uses macro definition BITSPERBYTE defined in config.h
   function cval_cast(cval,type) in line 264
      protection public
      105 lines of code
      2 parameters
      1 conditional paths
      uses macro definition cval_istop defined in cval.h
      uses variable cval_top defined in cval.c
      uses macro definition cval_isunknown defined in cval.h
      uses variable cval_unknown defined in cval.c
      uses function type_complex(type) defined in types.c
      uses function make_base_type(type) defined in types.c
      uses variable cval::kind defined in cval.h
      uses function make_cval_complex(cval,cval) defined in cval.c
      uses function cval_cast(cval,type) defined in cval.c
      uses variable cval_zero defined in cval.c
      uses function cval_realpart(cval) defined in cval.c
      uses function cval_imagpart(cval) defined in cval.c
      uses function cval_iscomplex(cval) defined in cval.c
      uses function type_floating(type) defined in types.c
      uses variable cval::d defined in cval.h
      uses variable cval::si defined in cval.h
      uses variable cval::ui defined in cval.h
      uses function type_float(type) defined in types.c
      uses function type_double(type) defined in types.c
      uses function type_size(type) defined in types.c
      uses variable cval::isize defined in cval.h
      uses function type_pointer(type) defined in types.c
      uses function type_unsigned(type) defined in types.c
      uses variable intptr_type defined in types.c
      uses function truncate_unsigned(largest_uint,size_t) defined in cval.c
      uses function truncate_signed(largest_int,size_t) defined in cval.c
   function cval_not(cval) in line 370
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses function cval_knownbool(cval) defined in cval.c
      uses variable cval_unknown defined in cval.c
      uses function make_cval_signed(largest_int,type) defined in cval.c
      uses function cval_boolvalue(cval) defined in cval.c
      uses variable int_type defined in types.c
   function cval_negate(cval) in line 378
      protection public
      21 lines of code
      1 parameters
      1 conditional paths
      uses variable cval::kind defined in cval.h
      uses variable cval_top defined in cval.c
      uses variable cval_unknown defined in cval.c
      uses variable cval::si defined in cval.h
      uses variable cval::ui defined in cval.h
      uses function truncate_unsigned(largest_uint,size_t) defined in cval.c
      uses variable cval::isize defined in cval.h
      uses variable cval::d defined in cval.h
      uses variable cval::si_i defined in cval.h
      uses variable cval::ui_i defined in cval.h
      uses variable cval::d_i defined in cval.h
   function cval_bitnot(cval) in line 400
      protection public
      11 lines of code
      1 parameters
      1 conditional paths
      uses variable cval::kind defined in cval.h
      uses variable cval_top defined in cval.c
      uses variable cval_unknown defined in cval.c
      uses variable cval::si defined in cval.h
      uses function truncate_signed(largest_int,size_t) defined in cval.c
      uses variable cval::isize defined in cval.h
      uses variable cval::ui defined in cval.h
      uses function truncate_unsigned(largest_uint,size_t) defined in cval.c
   function cval_conjugate(cval) in line 412
      protection public
      16 lines of code
      1 parameters
      1 conditional paths
      uses variable cval::kind defined in cval.h
      uses variable cval_top defined in cval.c
      uses variable cval_unknown defined in cval.c
      uses variable cval::si_i defined in cval.h
      uses variable cval::ui_i defined in cval.h
      uses function truncate_unsigned(largest_uint,size_t) defined in cval.c
      uses variable cval::isize defined in cval.h
      uses variable cval::d_i defined in cval.h
   function cval_realpart(cval) in line 429
      protection public
      13 lines of code
      1 parameters
      1 conditional paths
      uses variable cval::kind defined in cval.h
      uses variable cval_top defined in cval.c
      uses variable cval_unknown defined in cval.c
   function cval_imagpart(cval) in line 443
      protection public
      15 lines of code
      1 parameters
      1 conditional paths
      uses variable cval::kind defined in cval.h
      uses variable cval_top defined in cval.c
      uses variable cval_unknown defined in cval.c
      uses variable cval::si defined in cval.h
      uses variable cval::si_i defined in cval.h
      uses variable cval::ui defined in cval.h
      uses variable cval::ui_i defined in cval.h
      uses variable cval::d defined in cval.h
      uses variable cval::d_i defined in cval.h
   function cval_add(cval,cval) in line 461
      protection public
      62 lines of code
      2 parameters
      1 conditional paths
      uses macro definition cval_istop defined in cval.h
      uses variable cval_top defined in cval.c
      uses macro definition cval_isunknown defined in cval.h
      uses variable cval_unknown defined in cval.c
      uses macro definition cval_isaddress defined in cval.h
      uses variable cval::kind defined in cval.h
      uses variable cval::d defined in cval.h
      uses variable cval::si defined in cval.h
      uses function truncate_signed(largest_int,size_t) defined in cval.c
      uses variable cval::isize defined in cval.h
      uses variable cval::ui defined in cval.h
      uses function truncate_unsigned(largest_uint,size_t) defined in cval.c
      uses variable cval::d_i defined in cval.h
      uses variable cval::si_i defined in cval.h
      uses variable cval::ui_i defined in cval.h
   function cval_sub(cval,cval) in line 524
      protection public
      67 lines of code
      2 parameters
      1 conditional paths
      uses macro definition cval_istop defined in cval.h
      uses variable cval_top defined in cval.c
      uses macro definition cval_isunknown defined in cval.h
      uses variable cval_unknown defined in cval.c
      uses variable cval::kind defined in cval.h
      uses variable cval::d defined in cval.h
      uses variable cval::ddecl defined in cval.h
      uses variable cval::ldecl defined in cval.h
      uses variable cval::si defined in cval.h
      uses function truncate_signed(largest_int,size_t) defined in cval.c
      uses variable cval::isize defined in cval.h
      uses variable cval::ui defined in cval.h
      uses function truncate_unsigned(largest_uint,size_t) defined in cval.c
      uses variable cval::d_i defined in cval.h
      uses variable cval::si_i defined in cval.h
      uses variable cval::ui_i defined in cval.h
   function cval_times(cval,cval) in line 592
      protection public
      53 lines of code
      2 parameters
      1 conditional paths
      uses macro definition cval_istop defined in cval.h
      uses variable cval_top defined in cval.c
      uses macro definition cval_isunknown defined in cval.h
      uses variable cval_unknown defined in cval.c
      uses macro definition cval_isaddress defined in cval.h
      uses function cval_iscomplex(cval) defined in cval.c
      uses function cval_realpart(cval) defined in cval.c
      uses function cval_imagpart(cval) defined in cval.c
      uses function make_cval_complex(cval,cval) defined in cval.c
      uses function cval_sub(cval,cval) defined in cval.c
      uses function cval_times(cval,cval) defined in cval.c
      uses function cval_add(cval,cval) defined in cval.c
      uses variable cval::kind defined in cval.h
      uses variable cval::d defined in cval.h
      uses function cval_isone(cval) defined in cval.c
      uses variable cval::isize defined in cval.h
      uses variable cval::si defined in cval.h
      uses function truncate_signed(largest_int,size_t) defined in cval.c
      uses variable cval::ui defined in cval.h
      uses function truncate_unsigned(largest_uint,size_t) defined in cval.c
   function cval_divide(cval,cval) in line 646
      protection public
      60 lines of code
      2 parameters
      1 conditional paths
      uses macro definition cval_istop defined in cval.h
      uses variable cval_top defined in cval.c
      uses macro definition cval_isunknown defined in cval.h
      uses variable cval_unknown defined in cval.c
      uses function cval_iscomplex(cval) defined in cval.c
      uses function cval_realpart(cval) defined in cval.c
      uses function cval_imagpart(cval) defined in cval.c
      uses function cval_add(cval,cval) defined in cval.c
      uses function cval_times(cval,cval) defined in cval.c
      uses function make_cval_complex(cval,cval) defined in cval.c
      uses function cval_divide(cval,cval) defined in cval.c
      uses function cval_sub(cval,cval) defined in cval.c
      uses variable cval::kind defined in cval.h
      uses variable cval::d defined in cval.h
      uses function cval_isone(cval) defined in cval.c
      uses variable cval::isize defined in cval.h
      uses variable cval::si defined in cval.h
      uses function truncate_signed(largest_int,size_t) defined in cval.c
      uses variable cval::ui defined in cval.h
   function cval_modulo(cval,cval) in line 707
      protection public
      38 lines of code
      2 parameters
      1 conditional paths
      uses macro definition cval_istop defined in cval.h
      uses variable cval_top defined in cval.c
      uses function cval_isone(cval) defined in cval.c
      uses function make_cval_signed(largest_int,type) defined in cval.c
      uses variable int_type defined in types.c
      uses macro definition cval_isunknown defined in cval.h
      uses macro definition cval_isaddress defined in cval.h
      uses variable cval_unknown defined in cval.c
      uses variable cval::kind defined in cval.h
      uses variable cval::d defined in cval.h
      uses variable cval::isize defined in cval.h
      uses variable cval::si defined in cval.h
      uses function truncate_signed(largest_int,size_t) defined in cval.c
      uses variable cval::ui defined in cval.h
   function cval_lshift(cval,cval) in line 772
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function CVAL_BITOP(>>) in line 773
      protection public
      57 lines of code
      1 parameters
      2 conditional paths
      uses function cval_iscomplex(cval) defined in cval.c
      uses function cval_realpart(cval) defined in cval.c
      uses function cval_imagpart(cval) defined in cval.c
      uses function make_cval_signed(largest_int,type) defined in cval.c
      uses function cval_isone(cval) defined in cval.c
      uses variable int_type defined in types.c
   function uint_inrange(largest_uint,type) in line 832
      protection public
      14 lines of code
      2 parameters
      1 conditional paths
      uses function type_size(type) defined in types.c
      uses function max(int,int) defined in utils.c
      uses function type_unsigned(type) defined in types.c
      uses macro definition TRUE defined in bool.h
      uses macro definition BITSPERBYTE defined in config.h
   function sint_inrange(largest_int,type) in line 847
      protection public
      18 lines of code
      2 parameters
      1 conditional paths
      uses function type_size(type) defined in types.c
      uses function max(int,int) defined in utils.c
      uses function type_unsigned(type) defined in types.c
      uses macro definition FALSE defined in bool.h
      uses macro definition TRUE defined in bool.h
      uses macro definition BITSPERBYTE defined in config.h
   function cval_inrange(cval,type) in line 866
      protection public
      11 lines of code
      2 parameters
      1 conditional paths
      uses variable cval::kind defined in cval.h
      uses function sint_inrange(largest_int,type) defined in cval.c
      uses variable cval::si defined in cval.h
      uses variable cval::ui defined in cval.h
      uses macro definition FALSE defined in bool.h
   function cval_intcompare(cval,cval) in line 878
      protection public
      32 lines of code
      2 parameters
      1 conditional paths
      uses variable cval::kind defined in cval.h
      uses variable cval::si defined in cval.h
      uses variable cval::ui defined in cval.h
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cqual/cqual-0.981/src/cval.h
module cval.h
   macro definition cval_isunknown in line 54
      protection public
   macro definition cval_istop in line 58
      protection public
   macro definition cval_isaddress in line 62
      protection public
   macro definition cval_gt in line 136
      protection public
   macro definition cval_lt in line 137
      protection public
   macro definition cval_geq in line 138
      protection public
   macro definition cval_ne in line 139
      protection public
   variable cval_top in line 39
      protection public
   variable cval_unknown in line 40
      protection public
   variable cval_zero in line 41
      protection public
   function cval_init(void) in line 44
      protection public
      12 lines of code
      1 parameters
      1 conditional paths
      uses variable cval_top defined in cval.c
      uses variable cval::kind defined in cval.h
      uses variable cval_unknown defined in cval.c
      uses variable cval_zero defined in cval.c
      uses variable cval::si defined in cval.h
      uses variable cval::isize defined in cval.h
      uses function type_size(type) defined in types.c
      uses variable int_type defined in types.c
   function make_cval_signed(largest_int,type) in line 46
      protection public
      10 lines of code
      2 parameters
      1 conditional paths
      uses function type_integral(type) defined in types.c
      uses function type_unsigned(type) defined in types.c
      uses variable cval::kind defined in cval.h
      uses variable cval::si defined in cval.h
      uses variable cval::isize defined in cval.h
      uses function type_size(type) defined in types.c
   function make_cval_unsigned(largest_uint,type) in line 47
      protection public
      10 lines of code
      2 parameters
      1 conditional paths
      uses function type_integral(type) defined in types.c
      uses function type_unsigned(type) defined in types.c
      uses variable cval::kind defined in cval.h
      uses variable cval::ui defined in cval.h
      uses variable cval::isize defined in cval.h
      uses function type_size(type) defined in types.c
   function make_cval_float(long double) in line 48
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses variable cval::kind defined in cval.h
      uses variable cval::d defined in cval.h
   function make_cval_complex(cval,cval) in line 49
      protection public
      24 lines of code
      2 parameters
      4 conditional paths
      uses variable cval::kind defined in cval.h
      uses variable cval::d_i defined in cval.h
      uses variable cval::d defined in cval.h
      uses variable cval::isize defined in cval.h
      uses variable cval::ui_i defined in cval.h
      uses variable cval::ui defined in cval.h
      uses variable cval::si_i defined in cval.h
      uses variable cval::si defined in cval.h
   function make_cval_address(data_declaration,label_declaration,largest_int) in line 50
      protection public
      12 lines of code
      3 parameters
      1 conditional paths
      uses function make_cval_signed(largest_int,type) defined in cval.c
      uses variable ptrdiff_t_type defined in types.c
      uses variable cval::kind defined in cval.h
      uses variable cval::ddecl defined in cval.h
      uses variable cval::ldecl defined in cval.h
   function cval_isinteger(cval) in line 65
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable cval::kind defined in cval.h
   function cval_iscomplex(cval) in line 68
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable cval::kind defined in cval.h
   function cval_knownbool(cval) in line 71
      protection public
      14 lines of code
      1 parameters
      10 conditional paths
      uses variable cval::kind defined in cval.h
      uses macro definition FALSE defined in bool.h
      uses variable cval::si defined in cval.h
      uses macro definition TRUE defined in bool.h
   function cval_boolvalue(cval) in line 76
      protection public
      16 lines of code
      1 parameters
      8 conditional paths
      uses variable cval::kind defined in cval.h
      uses variable cval::si defined in cval.h
      uses macro definition TRUE defined in bool.h
      uses variable cval::ui defined in cval.h
      uses variable cval::d defined in cval.h
      uses variable cval::ui_i defined in cval.h
      uses variable cval::si_i defined in cval.h
      uses variable cval::d_i defined in cval.h
   function cval_knownvalue(cval) in line 81
      protection public
      14 lines of code
      1 parameters
      10 conditional paths
      uses variable cval::kind defined in cval.h
      uses macro definition FALSE defined in bool.h
      uses macro definition TRUE defined in bool.h
   function cval_uint_value(cval) in line 87
      protection public
      12 lines of code
      1 parameters
      4 conditional paths
      uses variable cval::kind defined in cval.h
      uses variable cval::ui defined in cval.h
      uses variable cval::si defined in cval.h
      uses variable cval::d defined in cval.h
   function cval_sint_value(cval) in line 92
      protection public
      12 lines of code
      1 parameters
      4 conditional paths
      uses variable cval::kind defined in cval.h
      uses variable cval::ui defined in cval.h
      uses variable cval::si defined in cval.h
      uses variable cval::d defined in cval.h
   function cval_float_value(cval) in line 97
      protection public
      12 lines of code
      1 parameters
      4 conditional paths
      uses variable cval::kind defined in cval.h
      uses variable cval::ui defined in cval.h
      uses variable cval::si defined in cval.h
      uses variable cval::d defined in cval.h
   function cval_isone(cval) in line 102
      protection public
      16 lines of code
      1 parameters
      10 conditional paths
      uses variable cval::kind defined in cval.h
      uses macro definition FALSE defined in bool.h
      uses variable cval::ui defined in cval.h
      uses variable cval::si defined in cval.h
      uses variable cval::d defined in cval.h
      uses variable cval::ui_i defined in cval.h
      uses variable cval::si_i defined in cval.h
      uses variable cval::d_i defined in cval.h
   function cval_cast(cval,type) in line 110
      protection public
      105 lines of code
      2 parameters
      28 conditional paths
      uses macro definition cval_istop defined in cval.h
      uses variable cval_top defined in cval.c
      uses macro definition cval_isunknown defined in cval.h
      uses variable cval_unknown defined in cval.c
      uses function type_complex(type) defined in types.c
      uses function make_base_type(type) defined in types.c
      uses variable cval::kind defined in cval.h
      uses function make_cval_complex(cval,cval) defined in cval.c
      uses function cval_cast(cval,type) defined in cval.c
      uses variable cval_zero defined in cval.c
      uses function cval_realpart(cval) defined in cval.c
      uses function cval_imagpart(cval) defined in cval.c
      uses function cval_iscomplex(cval) defined in cval.c
      uses function type_floating(type) defined in types.c
      uses variable cval::d defined in cval.h
      uses variable cval::si defined in cval.h
      uses variable cval::ui defined in cval.h
      uses function type_float(type) defined in types.c
      uses function type_double(type) defined in types.c
      uses function type_size(type) defined in types.c
      uses variable cval::isize defined in cval.h
      uses function type_pointer(type) defined in types.c
      uses function type_unsigned(type) defined in types.c
      uses variable intptr_type defined in types.c
   function cval_not(cval) in line 111
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses function cval_knownbool(cval) defined in cval.c
      uses variable cval_unknown defined in cval.c
      uses function make_cval_signed(largest_int,type) defined in cval.c
      uses function cval_boolvalue(cval) defined in cval.c
      uses variable int_type defined in types.c
   function cval_negate(cval) in line 112
      protection public
      21 lines of code
      1 parameters
      10 conditional paths
      uses variable cval::kind defined in cval.h
      uses variable cval_top defined in cval.c
      uses variable cval_unknown defined in cval.c
      uses variable cval::si defined in cval.h
      uses variable cval::ui defined in cval.h
      uses variable cval::isize defined in cval.h
      uses variable cval::d defined in cval.h
      uses variable cval::si_i defined in cval.h
      uses variable cval::ui_i defined in cval.h
      uses variable cval::d_i defined in cval.h
   function cval_bitnot(cval) in line 113
      protection public
      11 lines of code
      1 parameters
      6 conditional paths
      uses variable cval::kind defined in cval.h
      uses variable cval_top defined in cval.c
      uses variable cval_unknown defined in cval.c
      uses variable cval::si defined in cval.h
      uses variable cval::isize defined in cval.h
      uses variable cval::ui defined in cval.h
   function cval_conjugate(cval) in line 114
      protection public
      16 lines of code
      1 parameters
      6 conditional paths
      uses variable cval::kind defined in cval.h
      uses variable cval_top defined in cval.c
      uses variable cval_unknown defined in cval.c
      uses variable cval::si_i defined in cval.h
      uses variable cval::ui_i defined in cval.h
      uses variable cval::isize defined in cval.h
      uses variable cval::d_i defined in cval.h
   function cval_realpart(cval) in line 115
      protection public
      13 lines of code
      1 parameters
      9 conditional paths
      uses variable cval::kind defined in cval.h
      uses variable cval_top defined in cval.c
      uses variable cval_unknown defined in cval.c
   function cval_imagpart(cval) in line 116
      protection public
      15 lines of code
      1 parameters
      9 conditional paths
      uses variable cval::kind defined in cval.h
      uses variable cval_top defined in cval.c
      uses variable cval_unknown defined in cval.c
      uses variable cval::si defined in cval.h
      uses variable cval::si_i defined in cval.h
      uses variable cval::ui defined in cval.h
      uses variable cval::ui_i defined in cval.h
      uses variable cval::d defined in cval.h
      uses variable cval::d_i defined in cval.h
   function cval_add(cval,cval) in line 120
      protection public
      62 lines of code
      2 parameters
      14 conditional paths
      uses macro definition cval_istop defined in cval.h
      uses variable cval_top defined in cval.c
      uses macro definition cval_isunknown defined in cval.h
      uses variable cval_unknown defined in cval.c
      uses macro definition cval_isaddress defined in cval.h
      uses variable cval::kind defined in cval.h
      uses variable cval::d defined in cval.h
      uses variable cval::si defined in cval.h
      uses variable cval::isize defined in cval.h
      uses variable cval::ui defined in cval.h
      uses variable cval::d_i defined in cval.h
      uses variable cval::si_i defined in cval.h
      uses variable cval::ui_i defined in cval.h
   function cval_sub(cval,cval) in line 121
      protection public
      67 lines of code
      2 parameters
      16 conditional paths
      uses macro definition cval_istop defined in cval.h
      uses variable cval_top defined in cval.c
      uses macro definition cval_isunknown defined in cval.h
      uses variable cval_unknown defined in cval.c
      uses variable cval::kind defined in cval.h
      uses variable cval::d defined in cval.h
      uses variable cval::ddecl defined in cval.h
      uses variable cval::ldecl defined in cval.h
      uses variable cval::si defined in cval.h
      uses variable cval::isize defined in cval.h
      uses variable cval::ui defined in cval.h
      uses variable cval::d_i defined in cval.h
      uses variable cval::si_i defined in cval.h
      uses variable cval::ui_i defined in cval.h
   function cval_times(cval,cval) in line 122
      protection public
      53 lines of code
      2 parameters
      9 conditional paths
      uses macro definition cval_istop defined in cval.h
      uses variable cval_top defined in cval.c
      uses macro definition cval_isunknown defined in cval.h
      uses variable cval_unknown defined in cval.c
      uses macro definition cval_isaddress defined in cval.h
      uses function cval_iscomplex(cval) defined in cval.c
      uses function cval_realpart(cval) defined in cval.c
      uses function cval_imagpart(cval) defined in cval.c
      uses function make_cval_complex(cval,cval) defined in cval.c
      uses function cval_sub(cval,cval) defined in cval.c
      uses function cval_times(cval,cval) defined in cval.c
      uses function cval_add(cval,cval) defined in cval.c
      uses variable cval::kind defined in cval.h
      uses variable cval::d defined in cval.h
      uses function cval_isone(cval) defined in cval.c
      uses variable cval::isize defined in cval.h
      uses variable cval::si defined in cval.h
      uses variable cval::ui defined in cval.h
   function cval_divide(cval,cval) in line 123
      protection public
      60 lines of code
      2 parameters
      12 conditional paths
      uses macro definition cval_istop defined in cval.h
      uses variable cval_top defined in cval.c
      uses macro definition cval_isunknown defined in cval.h
      uses variable cval_unknown defined in cval.c
      uses function cval_iscomplex(cval) defined in cval.c
      uses function cval_realpart(cval) defined in cval.c
      uses function cval_imagpart(cval) defined in cval.c
      uses function cval_add(cval,cval) defined in cval.c
      uses function cval_times(cval,cval) defined in cval.c
      uses function make_cval_complex(cval,cval) defined in cval.c
      uses function cval_divide(cval,cval) defined in cval.c
      uses function cval_sub(cval,cval) defined in cval.c
      uses variable cval::kind defined in cval.h
      uses variable cval::d defined in cval.h
      uses function cval_isone(cval) defined in cval.c
      uses variable cval::isize defined in cval.h
      uses variable cval::si defined in cval.h
      uses variable cval::ui defined in cval.h
   function cval_modulo(cval,cval) in line 124
      protection public
      38 lines of code
      2 parameters
      9 conditional paths
      uses macro definition cval_istop defined in cval.h
      uses variable cval_top defined in cval.c
      uses function cval_isone(cval) defined in cval.c
      uses function make_cval_signed(largest_int,type) defined in cval.c
      uses variable int_type defined in types.c
      uses macro definition cval_isunknown defined in cval.h
      uses macro definition cval_isaddress defined in cval.h
      uses variable cval_unknown defined in cval.c
      uses variable cval::kind defined in cval.h
      uses variable cval::d defined in cval.h
      uses variable cval::isize defined in cval.h
      uses variable cval::si defined in cval.h
      uses variable cval::ui defined in cval.h
   function cval_lshift(cval,cval) in line 125
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function cval_rshift(cval,cval) in line 126
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function cval_bitand(cval,cval) in line 127
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function cval_bitor(cval,cval) in line 128
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function cval_bitxor(cval,cval) in line 129
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function cval_eq(cval,cval) in line 130
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function cval_leq(cval,cval) in line 132
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function uint_inrange(largest_uint,type) in line 142
      protection public
      14 lines of code
      2 parameters
      2 conditional paths
      uses function type_size(type) defined in types.c
      uses function max(int,int) defined in utils.c
      uses function type_unsigned(type) defined in types.c
      uses macro definition TRUE defined in bool.h
      uses macro definition BITSPERBYTE defined in config.h
   function sint_inrange(largest_int,type) in line 143
      protection public
      18 lines of code
      2 parameters
      3 conditional paths
      uses function type_size(type) defined in types.c
      uses function max(int,int) defined in utils.c
      uses function type_unsigned(type) defined in types.c
      uses macro definition FALSE defined in bool.h
      uses macro definition TRUE defined in bool.h
      uses macro definition BITSPERBYTE defined in config.h
   function cval_inrange(cval,type) in line 145
      protection public
      11 lines of code
      2 parameters
      3 conditional paths
      uses variable cval::kind defined in cval.h
      uses function sint_inrange(largest_int,type) defined in cval.c
      uses variable cval::si defined in cval.h
      uses variable cval::ui defined in cval.h
      uses macro definition FALSE defined in bool.h
   function cval_intcompare(cval,cval) in line 149
      protection public
      32 lines of code
      2 parameters
      9 conditional paths
      uses variable cval::kind defined in cval.h
      uses variable cval::si defined in cval.h
      uses variable cval::ui defined in cval.h
   variable cval::d in line 31
      protection public
   variable cval::d_i in line 31
      protection public
   variable cval::ddecl in line 32
      protection public
   variable cval::isize in line 36
      protection public
   variable cval::kind in line 29
      protection public
   variable cval::ldecl in line 33
      protection public
   variable cval::si in line 34
      protection public
   variable cval::si_i in line 34
      protection public
   variable cval::ui in line 35
      protection public
   variable cval::ui_i in line 35
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cqual/cqual-0.981/src/dd_list.c
module dd_list.c
   function new_hdr(region,void *,dd_list_pos,dd_list_pos) in line 45
      protection public
      13 lines of code
      4 parameters
      1 conditional paths
      uses macro definition ralloc defined in regions.h
      uses variable dd_list_pos::data defined in dd_list.h
      uses variable dd_list_pos::previous defined in dd_list.h
      uses variable dd_list_pos::next defined in dd_list.h
   function dd_new_list(region) in line 59
      protection public
      13 lines of code
      1 parameters
      1 conditional paths
      uses macro definition ralloc defined in regions.h
      uses macro definition NULL defined in config.h
   function dd_add_first(region,dd_list,void *) in line 73
      protection public
      7 lines of code
      3 parameters
      1 conditional paths
      uses function dd_insert_after(region,dd_list_pos,void *) defined in dd_list.c
      uses variable dd_list_pos::data defined in dd_list.h
   function dd_add_last(region,dd_list,void *) in line 81
      protection public
      4 lines of code
      3 parameters
      1 conditional paths
      uses function dd_insert_before(region,dd_list_pos,void *) defined in dd_list.c
      uses variable dd_list::null defined in dd_list.c
      uses variable dd_list_pos::data defined in dd_list.h
   function dd_insert_before(region,dd_list_pos,void *) in line 86
      protection public
      10 lines of code
      3 parameters
      1 conditional paths
      uses function new_hdr(region,void *,dd_list_pos,dd_list_pos) defined in dd_list.c
      uses variable dd_list_pos::data defined in dd_list.h
      uses variable dd_list_pos::previous defined in dd_list.h
      uses variable dd_list_pos::next defined in dd_list.h
   function dd_insert_after(region,dd_list_pos,void *) in line 97
      protection public
      10 lines of code
      3 parameters
      1 conditional paths
      uses function new_hdr(region,void *,dd_list_pos,dd_list_pos) defined in dd_list.c
      uses variable dd_list_pos::data defined in dd_list.h
      uses variable dd_list_pos::next defined in dd_list.h
      uses variable dd_list_pos::previous defined in dd_list.h
   function dd_remove(dd_list_pos) in line 108
      protection public
      12 lines of code
      1 parameters
      1 conditional paths
      uses variable dd_list_pos::previous defined in dd_list.h
      uses variable dd_list_pos::next defined in dd_list.h
      uses macro definition NULL defined in config.h
      uses variable dd_list_pos::data defined in dd_list.h
   function dd_first(dd_list) in line 121
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses variable dd_list::first defined in dd_list.c
   function dd_last(dd_list) in line 128
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses variable dd_list::last defined in dd_list.c
   function dd_length(dd_list) in line 135
      protection public
      11 lines of code
      1 parameters
      1 conditional paths
      uses variable len defined in c-gperf.h
      uses macro definition dd_scan defined in dd_list.h
   function dd_append(dd_list,dd_list) in line 147
      protection public
      13 lines of code
      2 parameters
      1 conditional paths
      uses variable dd_list::last defined in dd_list.c
      uses variable dd_list_pos::next defined in dd_list.h
      uses variable dd_list::first defined in dd_list.c
      uses variable dd_list_pos::previous defined in dd_list.h
      uses variable dd_list::null defined in dd_list.c
      uses macro definition NULL defined in config.h
   function dd_copy(region,dd_list) in line 161
      protection public
      11 lines of code
      2 parameters
      1 conditional paths
      uses function dd_new_list(region) defined in dd_list.c
      uses macro definition dd_scan defined in dd_list.h
      uses function dd_add_last(region,dd_list,void *) defined in dd_list.c
      uses variable dd_list_pos::data defined in dd_list.h
   function dd_free_list(dd_list,void(*)(dd_list_pos p)) in line 173
      protection public
      20 lines of code
      2 parameters
      1 conditional paths
      uses variable dd_list_pos::next defined in dd_list.h
      uses function dd_first(dd_list) defined in dd_list.c
      uses macro definition dd_is_end defined in dd_list.h
      uses macro definition dd_next defined in dd_list.h
      uses variable dd_list_pos::previous defined in dd_list.h
      uses macro definition NULL defined in config.h
      uses variable dd_list_pos::data defined in dd_list.h
      uses variable dd_list::first defined in dd_list.c
      uses variable dd_list::last defined in dd_list.c
   function dd_find(dd_list,void *) in line 194
      protection public
      11 lines of code
      2 parameters
      1 conditional paths
      uses macro definition dd_scan defined in dd_list.h
      uses macro definition DD_GET defined in dd_list.h
      uses macro definition NULL defined in config.h
   variable dd_list::first in line 40
      protection public
   variable dd_list::last in line 42
      protection public
   variable dd_list::null in line 41
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cqual/cqual-0.981/src/dd_list.h
module dd_list.h
   macro definition dd_is_beginning in line 76
      protection public
   macro definition dd_is_end in line 80
      protection public
   macro definition dd_next in line 84
      protection public
   macro definition dd_previous in line 88
      protection public
   macro definition dd_is_empty in line 93
      protection public
   macro definition DD_GET in line 97
      protection public
   macro definition DD_SET in line 102
      protection public
   macro definition dd_scan in line 108
      protection public
   macro definition dd_scan_reverse in line 117
      protection public
   typedef dd_list in line 35
      protection public
   typedef dd_list_pos in line 42
      protection public
   function dd_new_list(region) in line 44
      protection public
      13 lines of code
      1 parameters
      1 conditional paths
      uses macro definition ralloc defined in regions.h
      uses macro definition NULL defined in config.h
   function dd_add_first(region,dd_list,void *) in line 48
      protection public
      7 lines of code
      3 parameters
      1 conditional paths
      uses function dd_insert_after(region,dd_list_pos,void *) defined in dd_list.c
      uses variable dd_list_pos::data defined in dd_list.h
   function dd_add_last(region,dd_list,void *) in line 52
      protection public
      4 lines of code
      3 parameters
      1 conditional paths
      uses function dd_insert_before(region,dd_list_pos,void *) defined in dd_list.c
      uses variable dd_list::null defined in dd_list.c
      uses variable dd_list_pos::data defined in dd_list.h
   function dd_insert_before(region,dd_list_pos,void *) in line 56
      protection public
      10 lines of code
      3 parameters
      1 conditional paths
      uses variable dd_list_pos::data defined in dd_list.h
      uses variable dd_list_pos::previous defined in dd_list.h
      uses variable dd_list_pos::next defined in dd_list.h
   function dd_insert_after(region,dd_list_pos,void *) in line 60
      protection public
      10 lines of code
      3 parameters
      1 conditional paths
      uses variable dd_list_pos::data defined in dd_list.h
      uses variable dd_list_pos::next defined in dd_list.h
      uses variable dd_list_pos::previous defined in dd_list.h
   function dd_remove(dd_list_pos) in line 64
      protection public
      12 lines of code
      1 parameters
      1 conditional paths
      uses variable dd_list_pos::previous defined in dd_list.h
      uses variable dd_list_pos::next defined in dd_list.h
      uses macro definition NULL defined in config.h
      uses variable dd_list_pos::data defined in dd_list.h
   function dd_first(dd_list) in line 70
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses variable dd_list::first defined in dd_list.c
   function dd_last(dd_list) in line 73
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses variable dd_list::last defined in dd_list.c
   function dd_length(dd_list) in line 126
      protection public
      11 lines of code
      1 parameters
      1 conditional paths
      uses variable len defined in c-gperf.h
      uses macro definition dd_scan defined in dd_list.h
   function dd_append(dd_list,dd_list) in line 130
      protection public
      13 lines of code
      2 parameters
      1 conditional paths
      uses variable dd_list::last defined in dd_list.c
      uses variable dd_list_pos::next defined in dd_list.h
      uses variable dd_list::first defined in dd_list.c
      uses variable dd_list_pos::previous defined in dd_list.h
      uses variable dd_list::null defined in dd_list.c
      uses macro definition NULL defined in config.h
   function dd_copy(region,dd_list) in line 136
      protection public
      11 lines of code
      2 parameters
      1 conditional paths
      uses function dd_new_list(region) defined in dd_list.c
      uses macro definition dd_scan defined in dd_list.h
      uses function dd_add_last(region,dd_list,void *) defined in dd_list.c
      uses variable dd_list_pos::data defined in dd_list.h
   function dd_free_list(dd_list,void(*)(dd_list_pos p)) in line 140
      protection public
      20 lines of code
      2 parameters
      3 conditional paths
      uses variable dd_list_pos::next defined in dd_list.h
      uses function dd_first(dd_list) defined in dd_list.c
      uses macro definition dd_is_end defined in dd_list.h
      uses macro definition dd_next defined in dd_list.h
      uses variable dd_list_pos::previous defined in dd_list.h
      uses macro definition NULL defined in config.h
      uses variable dd_list_pos::data defined in dd_list.h
      uses variable dd_list::first defined in dd_list.c
      uses variable dd_list::last defined in dd_list.c
   function dd_find(dd_list,void *) in line 146
      protection public
      11 lines of code
      2 parameters
      2 conditional paths
      uses macro definition dd_scan defined in dd_list.h
      uses macro definition DD_GET defined in dd_list.h
      uses macro definition NULL defined in config.h
   variable dd_list_pos::data in line 41
      protection public
   variable dd_list_pos::next in line 39
      protection public
   variable dd_list_pos::previous in line 40
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cqual/cqual-0.981/src/decls.h
module decls.h
   enumeration data_kind in line 70
      protection public
   typedef field_declaration in line 40
      protection public
   typedef tag_declaration in line 68
      protection public
   typedef data_declaration in line 157
      protection public
   typedef label_declaration in line 166
      protection public
   typedef environment in line 175
      protection public
   variable bad_decl in line 177
      protection public
   enumvalue decl_variable in line 70
      protection public
   enumvalue decl_constant in line 70
      protection public
   enumvalue decl_function in line 70
      protection public
   enumvalue decl_typedef in line 71
      protection public
   enumvalue decl_error in line 71
      protection public
   enumvalue decl_magic_string in line 71
      protection public
   variable field_declaration::ast in line 33
      protection public
   variable field_declaration::bitwidth in line 34
      protection public
   variable field_declaration::name in line 31
      protection public
   variable field_declaration::next in line 30
      protection public
   variable field_declaration::offset in line 35
      protection public
   variable field_declaration::offset_cc in line 36
      protection public
   variable field_declaration::packed in line 39
      protection public
   variable field_declaration::type in line 32
      protection public
   variable tag_declaration::alignment in line 64
      protection public
   variable tag_declaration::ast in line 51
      protection public
   variable tag_declaration::being_defined in line 55
      protection public
   variable tag_declaration::defined in line 54
      protection public
   variable tag_declaration::fieldlist in line 50
      protection public
   variable tag_declaration::fields in line 49
      protection public
   variable tag_declaration::fields_const in line 56
      protection public
   variable tag_declaration::fields_volatile in line 57
      protection public
   variable tag_declaration::kind in line 44
      protection public
   variable tag_declaration::name in line 45
      protection public
   variable tag_declaration::packed in line 62
      protection public
   variable tag_declaration::qtype in line 67
      protection public
   variable tag_declaration::reptype in line 46
      protection public
   variable tag_declaration::shadowed in line 52
      protection public
   variable tag_declaration::size in line 64
      protection public
   variable tag_declaration::size_cc in line 59
      protection public
   variable tag_declaration::transparent_union in line 58
      protection public
   variable data_declaration::__init in line 129
      protection public
   variable data_declaration::addresstaken in line 126
      protection public
   variable data_declaration::alias in line 138
      protection public
   variable data_declaration::alref in line 156
      protection public
   variable data_declaration::ast in line 83
      protection public
   variable data_declaration::chars in line 150
      protection public
   variable data_declaration::chars_length in line 151
      protection public
   variable data_declaration::defined in line 123
      protection public
   variable data_declaration::definition in line 82
      protection public
   variable data_declaration::fs_qtype in line 154
      protection public
   variable data_declaration::ftype in line 133
      protection public
   variable data_declaration::global in line 80
      protection public
   variable data_declaration::in_prelude in line 121
      protection public
   variable data_declaration::in_system_header in line 119
      protection public
   variable data_declaration::initialiser in line 84
      protection public
   variable data_declaration::isallocated in line 125
      protection public
   variable data_declaration::isexternalscope in line 96
      protection public
   variable data_declaration::isexterninline in line 135
      protection public
   variable data_declaration::isfilescoperef in line 102
      protection public
   variable data_declaration::isinline in line 134
      protection public
   variable data_declaration::islimbo in line 86
      protection public
   variable data_declaration::islocal in line 142
      protection public
   variable data_declaration::isparameter in line 144
      protection public
   variable data_declaration::isused in line 118
      protection public
   variable data_declaration::kind in line 74
      protection public
   variable data_declaration::name in line 75
      protection public
   variable data_declaration::needsmemory in line 109
      protection public
   variable data_declaration::noreturn in line 136
      protection public
   variable data_declaration::oldstyle_args in line 137
      protection public
   variable data_declaration::qtype in line 153
      protection public
   variable data_declaration::shadowed in line 78
      protection public
   variable data_declaration::type in line 76
      protection public
   variable data_declaration::value in line 147
      protection public
   variable data_declaration::vtype in line 141
      protection public
   variable label_declaration::containing_function in line 165
      protection public
   variable label_declaration::definition in line 164
      protection public
   variable label_declaration::explicitly_declared in line 161
      protection public
   variable label_declaration::firstuse in line 163
      protection public
   variable label_declaration::name in line 160
      protection public
   variable label_declaration::used in line 162
      protection public
   variable environment::fdecl in line 171
      protection public
   variable environment::id_env in line 173
      protection public
   variable environment::parent in line 170
      protection public
   variable environment::parm_level in line 172
      protection public
   variable environment::tag_env in line 174
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cqual/cqual-0.981/src/effect.c
module effect.c
   macro definition MARK_R in line 320
      protection public
   macro definition MARK_WR in line 321
      protection public
   macro definition MARK_ALLOC in line 322
      protection public
   macro definition MARK_RWR in line 323
      protection public
   macro definition MARK_ANY in line 324
      protection public
   enumeration @10 in line 79
      protection public
   typedef nin_constraint in line 55
      protection public
   typedef forall_nin_constraint in line 62
      protection public
   typedef forall_cond_nin_constraint in line 71
      protection public
   variable effect_empty in line 73
      protection public
   variable constraints in line 74
      protection public
   variable forall_constraints in line 75
      protection public
   variable forall_cond_constraints in line 76
      protection public
   variable effect_region in line 77
      protection public
   variable next_effect in line 78
      protection public
   variable state in line 79
      protection public
   variable aloc_list in line 81
      protection public
   variable global_ht in line 82
      protection public
   variable assign_stores in line 1428
      protection public
   variable store_region in line 1429
      protection public
   variable store_count in line 1430
      protection public
   variable scc_store_number in line 1869
      protection public
   variable scc_store_stack in line 1870
      protection public
   variable scc_store_size in line 1871
      protection public
   variable scc_store_top in line 1872
      protection public
   variable scc_store_region in line 1873
      protection public
   enumvalue state_init in line 79
      protection public
   enumvalue state_reach in line 79
      protection public
   enumvalue state_lin in line 79
      protection public
   function unify_constrs(effect *,effect *) in line 46
      protection public
      28 lines of code
      2 parameters
      5 conditional paths
      uses enumvalue eff_last defined in cqual.h
      uses function ecr_effect(effect) defined in effect.c
      uses variable Effect::kind defined in effect.c
      uses variable Effect::u defined in effect.c
   function cmp_store(store,store) in line 47
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
      uses function ecr_store(store) defined in effect.c
   function init_effects(void) in line 89
      protection public
      16 lines of code
      1 parameters
      1 conditional paths
      uses variable effect_region defined in effect.c
      uses macro definition NULL defined in config.h
      uses function newregion(void) defined in regions.c
      uses variable next_effect defined in effect.c
      uses variable constraints defined in effect.c
      uses function dd_new_list(region) defined in dd_list.c
      uses variable forall_constraints defined in effect.c
      uses variable forall_cond_constraints defined in effect.c
      uses variable aloc_list defined in effect.c
      uses variable state defined in effect.c
      uses enumvalue state_init defined in effect.c
   function make_aloc(const char *,qtype) in line 136
      protection public
      24 lines of code
      2 parameters
      1 conditional paths
      uses variable restrict_qual defined in quals.c
      uses variable flag_flow_sensitive defined in flags.h
      uses macro definition NULL defined in config.h
      uses macro definition ralloc defined in regions.h
      uses variable effect_region defined in effect.c
      uses function printf(const char *$NONYEAR,(null)) defined in rcs1.c
      uses function print_qtype_raw(printf_func,qtype,store) defined in qtype.c
      uses variable Abstract_loc::kind defined in effect.c
      uses variable Abstract_loc::u defined in effect.c
      uses variable Abstract_loc::var defined in effect.c
      uses macro definition FALSE defined in bool.h
      uses function dd_add_last(region,dd_list,void *) defined in dd_list.c
      uses variable aloc_list defined in effect.c
   function ecr_aloc(aloc) in line 162
      protection public
      23 lines of code
      1 parameters
      4 conditional paths
      uses variable Abstract_loc::kind defined in effect.c
      uses variable Abstract_loc::u defined in effect.c
      uses variable Abstract_loc::link defined in effect.c
   function name_aloc(aloc) in line 187
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses function ecr_aloc(aloc) defined in effect.c
      uses variable Abstract_loc::kind defined in effect.c
      uses variable Abstract_loc::u defined in effect.c
      uses variable Abstract_loc::var defined in effect.c
   function hash_aloc(aloc) in line 195
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function ecr_aloc(aloc) defined in effect.c
   function points_to_aloc(aloc) in line 202
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses function ecr_aloc(aloc) defined in effect.c
      uses variable Abstract_loc::kind defined in effect.c
      uses variable Abstract_loc::u defined in effect.c
      uses variable Abstract_loc::var defined in effect.c
   function unify_aloc(location,aloc,aloc) in line 210
      protection public
      61 lines of code
      3 parameters
      1 conditional paths
      uses variable restrict_qual defined in quals.c
      uses variable flag_flow_sensitive defined in flags.h
      uses function print_aloc(printf_func,aloc) defined in effect.c
      uses function printf(const char *$NONYEAR,(null)) defined in rcs1.c
      uses function ecr_aloc(aloc) defined in effect.c
      uses variable Abstract_loc::kind defined in effect.c
      uses variable Abstract_loc::u defined in effect.c
      uses variable Abstract_loc::var defined in effect.c
      uses function unify_constrs(effect *,effect *) defined in effect.c
      uses function match_qtype(qtype,qtype,void(*)(qual q1, qual q2, void *arg),void *) defined in qtype.c
      uses macro definition NULL defined in config.h
      uses function report_qerror(location,severity,const char *,...) defined in analyze.c
      uses variable Nin_constraint::loc defined in effect.c
      uses enumvalue sev_err defined in qerror.h
      uses variable error_qtype defined in qtype.c
      uses variable Abstract_loc::link defined in effect.c
      uses function print_qtype_raw(printf_func,qtype,store) defined in qtype.c
   function cmp_aloc(aloc,aloc) in line 273
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
      uses function ecr_aloc(aloc) defined in effect.c
   function eq_aloc(aloc,aloc) in line 281
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function ecr_aloc(aloc) defined in effect.c
   function print_aloc(printf_func,aloc) in line 287
      protection public
      14 lines of code
      2 parameters
      1 conditional paths
      uses function ecr_aloc(aloc) defined in effect.c
      uses variable Abstract_loc::kind defined in effect.c
      uses variable Abstract_loc::u defined in effect.c
      uses variable Abstract_loc::var defined in effect.c
   function print_unique_aloc(printf_func,aloc) in line 303
      protection public
      10 lines of code
      2 parameters
      2 conditional paths
      uses function ecr_aloc(aloc) defined in effect.c
      uses function print_aloc(printf_func,aloc) defined in effect.c
      uses variable flag_ugly defined in flags.h
      uses function ptr_to_ascii(void *) defined in utils.c
   function ecr_effect(effect) in line 364
      protection public
      26 lines of code
      1 parameters
      5 conditional paths
      uses macro definition NULL defined in config.h
      uses variable Effect::kind defined in effect.c
      uses variable Effect::u defined in effect.c
   function mark_aloc_interesting(aloc) in line 392
      protection public
      9 lines of code
      1 parameters
      1 conditional paths
      uses variable restrict_qual defined in quals.c
      uses variable flag_flow_sensitive defined in flags.h
      uses function ecr_aloc(aloc) defined in effect.c
      uses variable Abstract_loc::kind defined in effect.c
      uses variable Abstract_loc::u defined in effect.c
      uses variable Abstract_loc::var defined in effect.c
      uses macro definition TRUE defined in bool.h
   function aloc_interesting(aloc) in line 402
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses function ecr_aloc(aloc) defined in effect.c
      uses variable Abstract_loc::kind defined in effect.c
      uses variable Abstract_loc::u defined in effect.c
      uses variable Abstract_loc::var defined in effect.c
   function aloc_effect(effect) in line 409
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses function ecr_effect(effect) defined in effect.c
      uses variable Effect::kind defined in effect.c
      uses variable Effect::u defined in effect.c
   function effect_constr(aloc,eff_kind) in line 417
      protection public
      39 lines of code
      2 parameters
      1 conditional paths
      uses variable state defined in effect.c
      uses enumvalue state_init defined in effect.c
      uses variable restrict_qual defined in quals.c
      uses variable flag_flow_sensitive defined in flags.h
      uses macro definition NULL defined in config.h
      uses function ecr_aloc(aloc) defined in effect.c
      uses variable Abstract_loc::kind defined in effect.c
      uses enumvalue eff_last defined in cqual.h
      uses variable Abstract_loc::u defined in effect.c
      uses variable Abstract_loc::var defined in effect.c
      uses macro definition rarrayalloc defined in regions.h
      uses variable effect_region defined in effect.c
      uses macro definition ralloc defined in regions.h
      uses variable Effect::kind defined in effect.c
      uses variable Effect::visited defined in effect.c
      uses variable Effect::u defined in effect.c
      uses function dd_add_last(region,dd_list,void *) defined in dd_list.c
   function effect_single(aloc) in line 458
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function effect_constr(aloc,eff_kind) defined in effect.c
      uses enumvalue eff_any defined in cqual.h
   function effect_alloc(aloc) in line 464
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function effect_constr(aloc,eff_kind) defined in effect.c
      uses enumvalue eff_alloc defined in cqual.h
   function effect_r(aloc) in line 470
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function effect_constr(aloc,eff_kind) defined in effect.c
      uses enumvalue eff_r defined in cqual.h
   function effect_wr(aloc) in line 476
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function effect_constr(aloc,eff_kind) defined in effect.c
      uses enumvalue eff_wr defined in cqual.h
   function effect_rwr(aloc) in line 483
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function effect_constr(aloc,eff_kind) defined in effect.c
      uses enumvalue eff_rwr defined in cqual.h
   function effect_var(const char *) in line 489
      protection public
      21 lines of code
      1 parameters
      1 conditional paths
      uses variable state defined in effect.c
      uses enumvalue state_init defined in effect.c
      uses variable restrict_qual defined in quals.c
      uses variable flag_flow_sensitive defined in flags.h
      uses macro definition NULL defined in config.h
      uses macro definition ralloc defined in regions.h
      uses variable effect_region defined in effect.c
      uses variable Effect::kind defined in effect.c
      uses variable Effect::u defined in effect.c
      uses macro definition FALSE defined in bool.h
      uses variable Effect::visited defined in effect.c
      uses function dd_add_last(region,dd_list,void *) defined in dd_list.c
   function mark_effect_interesting(effect) in line 513
      protection public
      26 lines of code
      1 parameters
      1 conditional paths
      uses variable state defined in effect.c
      uses enumvalue state_init defined in effect.c
      uses variable restrict_qual defined in quals.c
      uses variable flag_flow_sensitive defined in flags.h
      uses function ecr_effect(effect) defined in effect.c
      uses variable Effect::kind defined in effect.c
      uses variable Effect::u defined in effect.c
      uses macro definition TRUE defined in bool.h
      uses function mark_effect_interesting(effect) defined in effect.c
      uses function fail(const char *,...) defined in utils.c
   function effect_fresh(void) in line 541
      protection public
      11 lines of code
      1 parameters
      1 conditional paths
      uses variable restrict_qual defined in quals.c
      uses variable flag_flow_sensitive defined in flags.h
      uses macro definition NULL defined in config.h
      uses function rstrcat(region,const char *,const char *) defined in utils.c
      uses variable effect_region defined in effect.c
      uses function inttostr(region,int) defined in utils.c
      uses variable next_effect defined in effect.c
      uses function effect_var(const char *) defined in effect.c
   function effect_union(effect,effect) in line 554
      protection public
      30 lines of code
      2 parameters
      1 conditional paths
      uses variable restrict_qual defined in quals.c
      uses variable flag_flow_sensitive defined in flags.h
      uses macro definition NULL defined in config.h
      uses function ecr_effect(effect) defined in effect.c
      uses macro definition ralloc defined in regions.h
      uses variable effect_region defined in effect.c
      uses variable Effect::kind defined in effect.c
      uses variable Effect::u defined in effect.c
      uses variable Effect::visited defined in effect.c
      uses function dd_add_last(region,dd_list,void *) defined in dd_list.c
   function add_to_effect_ub(effect,effect) in line 586
      protection public
      18 lines of code
      2 parameters
      4 conditional paths
      uses function ecr_effect(effect) defined in effect.c
      uses variable Effect::kind defined in effect.c
      uses variable effect_region defined in effect.c
      uses variable Effect::u defined in effect.c
      uses function fail(const char *,...) defined in utils.c
   function effect_inter(effect,effect) in line 606
      protection public
      55 lines of code
      2 parameters
      1 conditional paths
      uses variable state defined in effect.c
      uses enumvalue state_init defined in effect.c
      uses variable restrict_qual defined in quals.c
      uses variable flag_flow_sensitive defined in flags.h
      uses macro definition NULL defined in config.h
      uses function ecr_effect(effect) defined in effect.c
      uses variable effect_empty defined in effect.c
      uses variable Effect::kind defined in effect.c
      uses function effect_fresh(void) defined in effect.c
      uses function mkleq_effect(effect,effect) defined in effect.c
      uses macro definition ralloc defined in regions.h
      uses variable effect_region defined in effect.c
      uses variable Effect::u defined in effect.c
      uses variable Effect::visited defined in effect.c
      uses function add_to_effect_ub(effect,effect) defined in effect.c
      uses function dd_add_last(region,dd_list,void *) defined in dd_list.c
   function eq_effect(effect,effect) in line 664
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function ecr_effect(effect) defined in effect.c
   function cmp_effect(effect,effect) in line 670
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
      uses function ecr_effect(effect) defined in effect.c
   function internal_mkleq_effect(effect,effect) in line 678
      protection public
      32 lines of code
      2 parameters
      6 conditional paths
      uses function ecr_effect(effect) defined in effect.c
      uses variable Effect::kind defined in effect.c
      uses macro definition NULL defined in config.h
      uses variable Effect::u defined in effect.c
      uses variable effect_region defined in effect.c
      uses function fail(const char *,...) defined in utils.c
   function mkleq_effect(effect,effect) in line 712
      protection public
      15 lines of code
      2 parameters
      1 conditional paths
      uses variable state defined in effect.c
      uses enumvalue state_init defined in effect.c
      uses variable restrict_qual defined in quals.c
      uses variable flag_flow_sensitive defined in flags.h
      uses function print_effect(printf_func,effect) defined in effect.c
      uses function printf(const char *$NONYEAR,(null)) defined in rcs1.c
      uses function internal_mkleq_effect(effect,effect) defined in effect.c
   function mkeq_effect(effect,effect) in line 729
      protection public
      16 lines of code
      2 parameters
      1 conditional paths
      uses variable state defined in effect.c
      uses enumvalue state_init defined in effect.c
      uses variable restrict_qual defined in quals.c
      uses variable flag_flow_sensitive defined in flags.h
      uses function print_effect(printf_func,effect) defined in effect.c
      uses function printf(const char *$NONYEAR,(null)) defined in rcs1.c
      uses function internal_mkleq_effect(effect,effect) defined in effect.c
   function unify_effect(effect,effect) in line 747
      protection public
      47 lines of code
      2 parameters
      1 conditional paths
      uses variable restrict_qual defined in quals.c
      uses variable flag_flow_sensitive defined in flags.h
      uses function print_effect(printf_func,effect) defined in effect.c
      uses function printf(const char *$NONYEAR,(null)) defined in rcs1.c
      uses function ecr_effect(effect) defined in effect.c
      uses variable Effect::kind defined in effect.c
      uses variable state defined in effect.c
      uses enumvalue state_init defined in effect.c
      uses variable Effect::u defined in effect.c
      uses function mkeq_effect(effect,effect) defined in effect.c
   function mknin_aloc_effect(location,aloc,eff_kind,effect) in line 827
      protection public
      27 lines of code
      4 parameters
      1 conditional paths
      uses function ecr_effect(effect) defined in effect.c
      uses macro definition NULL defined in config.h
      uses variable Effect::kind defined in effect.c
      uses function effect_fresh(void) defined in effect.c
      uses function mkleq_effect(effect,effect) defined in effect.c
      uses function mark_effect_interesting(effect) defined in effect.c
      uses macro definition ralloc defined in regions.h
      uses variable effect_region defined in effect.c
      uses variable Nin_constraint::aloc defined in effect.c
      uses variable Nin_constraint::eff defined in effect.c
      uses variable Nin_constraint::kind defined in effect.c
      uses variable Nin_constraint::loc defined in effect.c
      uses function dd_add_last(region,dd_list,void *) defined in dd_list.c
      uses variable constraints defined in effect.c
   function forall_aloc_mknin_effect(location,eff_kind,effect) in line 856
      protection public
      25 lines of code
      3 parameters
      1 conditional paths
      uses function ecr_effect(effect) defined in effect.c
      uses macro definition NULL defined in config.h
      uses variable Effect::kind defined in effect.c
      uses function effect_fresh(void) defined in effect.c
      uses function mkleq_effect(effect,effect) defined in effect.c
      uses function mark_effect_interesting(effect) defined in effect.c
      uses macro definition ralloc defined in regions.h
      uses variable effect_region defined in effect.c
      uses variable Forall_nin_constraint::kind defined in effect.c
      uses variable Nin_constraint::kind defined in effect.c
      uses variable Forall_nin_constraint::loc defined in effect.c
      uses variable Nin_constraint::loc defined in effect.c
      uses variable Forall_nin_constraint::eff defined in effect.c
      uses function dd_add_last(region,dd_list,void *) defined in dd_list.c
      uses variable forall_constraints defined in effect.c
   function forall_aloc_in_effect_mknin_effect(location,eff_kind,effect,eff_kind,effect) in line 883
      protection public
      41 lines of code
      5 parameters
      1 conditional paths
      uses function ecr_effect(effect) defined in effect.c
      uses macro definition NULL defined in config.h
      uses variable Effect::kind defined in effect.c
      uses function effect_fresh(void) defined in effect.c
      uses function mkleq_effect(effect,effect) defined in effect.c
      uses function mark_effect_interesting(effect) defined in effect.c
      uses macro definition ralloc defined in regions.h
      uses variable effect_region defined in effect.c
      uses variable Forall_cond_nin_constraint::kind1 defined in effect.c
      uses variable Forall_cond_nin_constraint::kind2 defined in effect.c
      uses variable Forall_cond_nin_constraint::loc defined in effect.c
      uses variable Nin_constraint::loc defined in effect.c
      uses variable Forall_cond_nin_constraint::eff1 defined in effect.c
      uses variable Forall_cond_nin_constraint::eff2 defined in effect.c
      uses function dd_add_last(region,dd_list,void *) defined in dd_list.c
      uses variable forall_cond_constraints defined in effect.c
   function mknin_effect(location,effect,effect) in line 927
      protection public
      19 lines of code
      3 parameters
      1 conditional paths
      uses function ecr_effect(effect) defined in effect.c
      uses macro definition NULL defined in config.h
      uses variable Effect::kind defined in effect.c
      uses function mknin_aloc_effect(location,aloc,eff_kind,effect) defined in effect.c
      uses variable Nin_constraint::loc defined in effect.c
      uses variable Effect::u defined in effect.c
      uses function mknin_effect(location,effect,effect) defined in effect.c
      uses function fail(const char *,...) defined in utils.c
   function reachable_forward(effect,effect) in line 949
      protection public
      56 lines of code
      2 parameters
      11 conditional paths
      uses function ecr_effect(effect) defined in effect.c
      uses variable Effect::kind defined in effect.c
      uses macro definition TRUE defined in bool.h
      uses variable Effect::visited defined in effect.c
      uses macro definition scan_effect_set defined in containers.h
      uses variable Effect::u defined in effect.c
      uses function fail(const char *,...) defined in utils.c
      uses macro definition FALSE defined in bool.h
   function clean_reachable_forward(aloc,effect) in line 1008
      protection public
      40 lines of code
      2 parameters
      7 conditional paths
      uses function ecr_effect(effect) defined in effect.c
      uses variable Effect::visited defined in effect.c
      uses variable Effect::kind defined in effect.c
      uses variable Effect::u defined in effect.c
      uses macro definition scan_effect_set defined in containers.h
      uses variable effect_region defined in effect.c
      uses function fail(const char *,...) defined in utils.c
   function mark_reachable_forward(effect,effect,int) in line 1051
      protection public
      50 lines of code
      3 parameters
      8 conditional paths
      uses function ecr_effect(effect) defined in effect.c
      uses variable Effect::kind defined in effect.c
      uses variable Effect::visited defined in effect.c
      uses macro definition scan_effect_set defined in containers.h
      uses variable Effect::u defined in effect.c
      uses function eq_effect(effect,effect) defined in effect.c
      uses function fail(const char *,...) defined in utils.c
   function compute_reachable_forward(aloc) in line 1103
      protection public
      42 lines of code
      1 parameters
      12 conditional paths
      uses function ecr_aloc(aloc) defined in effect.c
      uses variable Abstract_loc::kind defined in effect.c
      uses variable Abstract_loc::u defined in effect.c
      uses variable Abstract_loc::var defined in effect.c
      uses enumvalue eff_any defined in cqual.h
      uses enumvalue eff_rwr defined in cqual.h
      uses enumvalue eff_r defined in cqual.h
      uses enumvalue eff_wr defined in cqual.h
      uses enumvalue eff_alloc defined in cqual.h
      uses function mark_reachable_forward(effect,effect,int) defined in effect.c
      uses variable effect_empty defined in effect.c
      uses macro definition MARK_ANY defined in effect.c
      uses macro definition MARK_RWR defined in effect.c
      uses macro definition MARK_R defined in effect.c
      uses macro definition MARK_WR defined in effect.c
      uses macro definition MARK_ALLOC defined in effect.c
      uses function clean_reachable_forward(aloc,effect) defined in effect.c
      uses macro definition TRUE defined in bool.h
   function aloc_in_effect(aloc,effect) in line 1149
      protection public
      48 lines of code
      2 parameters
      13 conditional paths
      uses variable state defined in effect.c
      uses enumvalue state_reach defined in effect.c
      uses variable restrict_qual defined in quals.c
      uses variable flag_flow_sensitive defined in flags.h
      uses macro definition FALSE defined in bool.h
      uses function ecr_aloc(aloc) defined in effect.c
      uses variable Abstract_loc::kind defined in effect.c
      uses function ecr_effect(effect) defined in effect.c
      uses variable Effect::kind defined in effect.c
      uses variable Effect::u defined in effect.c
      uses enumvalue eff_any defined in cqual.h
      uses macro definition MARK_ANY defined in effect.c
      uses enumvalue eff_rwr defined in cqual.h
      uses macro definition MARK_RWR defined in effect.c
      uses enumvalue eff_r defined in cqual.h
      uses macro definition MARK_R defined in effect.c
      uses enumvalue eff_wr defined in cqual.h
      uses macro definition MARK_WR defined in effect.c
      uses enumvalue eff_alloc defined in cqual.h
      uses macro definition MARK_ALLOC defined in effect.c
      uses function fail(const char *,...) defined in utils.c
      uses variable Abstract_loc::u defined in effect.c
      uses variable Abstract_loc::var defined in effect.c
      uses function compute_reachable_forward(aloc) defined in effect.c
   function get_mask(eff_kind) in line 1198
      protection public
      27 lines of code
      1 parameters
      6 conditional paths
      uses variable Nin_constraint::kind defined in effect.c
      uses enumvalue eff_any defined in cqual.h
      uses macro definition MARK_ANY defined in effect.c
      uses enumvalue eff_rwr defined in cqual.h
      uses macro definition MARK_RWR defined in effect.c
      uses enumvalue eff_r defined in cqual.h
      uses macro definition MARK_R defined in effect.c
      uses enumvalue eff_wr defined in cqual.h
      uses macro definition MARK_WR defined in effect.c
      uses enumvalue eff_alloc defined in cqual.h
      uses macro definition MARK_ALLOC defined in effect.c
      uses function fail(const char *,...) defined in utils.c
   function check_nin(void) in line 1230
      protection public
      64 lines of code
      1 parameters
      1 conditional paths
      uses function dd_length(dd_list) defined in dd_list.c
      uses variable forall_constraints defined in effect.c
      uses variable forall_cond_constraints defined in effect.c
      uses macro definition dd_scan defined in dd_list.h
      uses variable aloc_list defined in effect.c
      uses function ecr_aloc(aloc) defined in effect.c
      uses macro definition DD_GET defined in dd_list.h
      uses variable Abstract_loc::kind defined in effect.c
      uses variable Abstract_loc::u defined in effect.c
      uses variable Abstract_loc::var defined in effect.c
      uses function compute_reachable_forward(aloc) defined in effect.c
      uses function aloc_in_effect(aloc,effect) defined in effect.c
      uses variable Forall_nin_constraint::eff defined in effect.c
      uses function get_mask(eff_kind) defined in effect.c
      uses variable Forall_nin_constraint::kind defined in effect.c
      uses function report_qerror(location,severity,const char *,...) defined in analyze.c
      uses variable Forall_nin_constraint::loc defined in effect.c
      uses enumvalue sev_err defined in qerror.h
      uses variable Forall_cond_nin_constraint::eff1 defined in effect.c
      uses variable Forall_cond_nin_constraint::kind1 defined in effect.c
      uses variable Forall_cond_nin_constraint::eff2 defined in effect.c
      uses variable Forall_cond_nin_constraint::kind2 defined in effect.c
      uses variable Forall_cond_nin_constraint::loc defined in effect.c
      uses variable constraints defined in effect.c
      uses function print_aloc(printf_func,aloc) defined in effect.c
      uses function printf(const char *$NONYEAR,(null)) defined in rcs1.c
      uses variable Nin_constraint::aloc defined in effect.c
      uses function print_effect(printf_func,effect) defined in effect.c
      uses variable Nin_constraint::eff defined in effect.c
      uses variable Nin_constraint::kind defined in effect.c
      uses variable Nin_constraint::loc defined in effect.c
   function print_effect(printf_func,effect) in line 1295
      protection public
      72 lines of code
      2 parameters
      1 conditional paths
      uses function ecr_effect(effect) defined in effect.c
      uses macro definition NULL defined in config.h
      uses variable Effect::kind defined in effect.c
      uses variable Effect::u defined in effect.c
      uses enumvalue eff_any defined in cqual.h
      uses enumvalue eff_alloc defined in cqual.h
      uses enumvalue eff_rwr defined in cqual.h
      uses enumvalue eff_r defined in cqual.h
      uses enumvalue eff_wr defined in cqual.h
      uses function fail(const char *,...) defined in utils.c
      uses function print_unique_aloc(printf_func,aloc) defined in effect.c
      uses function print_effect(printf_func,effect) defined in effect.c
      uses variable flag_ugly defined in flags.h
   function propagate_cell_backward(location,store,aloc,qtype) in line 1435
      protection public
      63 lines of code
      4 parameters
      10 conditional paths
      uses function ecr_store(store) defined in effect.c
      uses function printf(const char *$NONYEAR,(null)) defined in rcs1.c
      uses function print_aloc(printf_func,aloc) defined in effect.c
      uses function print_qtype(printf_func,qtype,store) defined in qtype.c
      uses macro definition NULL defined in config.h
      uses function print_store(printf_func,store) defined in effect.c
      uses macro definition FALSE defined in bool.h
      uses variable Store::kind defined in iquals.tab.c
      uses variable Store::u defined in iquals.tab.c
      uses variable Store::var defined in iquals.tab.c
      uses function qtype_to_fs_qtype(location,qtype) defined in qtype.c
      uses variable Store::loc defined in iquals.tab.c
      uses variable Abstract_loc::u defined in effect.c
      uses variable Abstract_loc::var defined in effect.c
      uses macro definition insistnot defined in utils.h
      uses function store_aloc_qtype(qtype,store,aloc) defined in qtype.c
      uses function mkcell(region,qtype,bool,bool) defined in effect.c
      uses variable store_region defined in effect.c
      uses macro definition insist defined in utils.h
      uses function mkleq_qtype(location,qtype,qtype) defined in qtype.c
      uses variable Nin_constraint::loc defined in effect.c
      uses variable Cell::qtype defined in effect.c
      uses function aloc_in_effect(aloc,effect) defined in effect.c
      uses variable Store::filter defined in iquals.tab.c
      uses variable Store::ref defined in iquals.tab.c
      uses variable Store::ow defined in iquals.tab.c
      uses function eq_aloc(aloc,aloc) defined in effect.c
      uses variable Store::assign defined in iquals.tab.c
      uses function fail(const char *,...) defined in utils.c
   function propagate_cell_forward(location,store,store,aloc,qtype) in line 1436
      protection public
      72 lines of code
      5 parameters
      10 conditional paths
      uses function printf(const char *$NONYEAR,(null)) defined in rcs1.c
      uses function print_aloc(printf_func,aloc) defined in effect.c
      uses function print_qtype(printf_func,qtype,store) defined in qtype.c
      uses macro definition NULL defined in config.h
      uses function print_store(printf_func,store) defined in effect.c
      uses macro definition FALSE defined in bool.h
      uses function ecr_store(store) defined in effect.c
      uses variable Store::kind defined in iquals.tab.c
      uses variable Store::u defined in iquals.tab.c
      uses variable Store::var defined in iquals.tab.c
      uses function qtype_to_fs_qtype(location,qtype) defined in qtype.c
      uses variable Store::loc defined in iquals.tab.c
      uses variable Abstract_loc::u defined in effect.c
      uses variable Abstract_loc::var defined in effect.c
      uses macro definition insistnot defined in utils.h
      uses function store_aloc_qtype(qtype,store,aloc) defined in qtype.c
      uses function mkcell(region,qtype,bool,bool) defined in effect.c
      uses variable store_region defined in effect.c
      uses macro definition insist defined in utils.h
      uses function mkleq_qtype(location,qtype,qtype) defined in qtype.c
      uses variable Nin_constraint::loc defined in effect.c
      uses variable Cell::qtype defined in effect.c
      uses function aloc_in_effect(aloc,effect) defined in effect.c
      uses variable Store::filter defined in iquals.tab.c
      uses macro definition TRUE defined in bool.h
      uses variable Store::ow defined in iquals.tab.c
      uses function eq_store(store,store) defined in effect.c
      uses function eq_aloc(aloc,aloc) defined in effect.c
      uses variable Store::assign defined in iquals.tab.c
      uses function fail(const char *,...) defined in utils.c
      uses macro definition scan_store_edge_set defined in containers.h
      uses variable Store::ub defined in iquals.tab.c
      uses variable Store_edge::store defined in effect.c
   function store_to_cells(region,store) in line 1437
      protection public
      53 lines of code
      2 parameters
      16 conditional paths
      uses function ecr_store(store) defined in effect.c
      uses variable Store::kind defined in iquals.tab.c
      uses variable Store::u defined in iquals.tab.c
      uses variable Store::var defined in iquals.tab.c
      uses variable Cell::propagated_forward defined in effect.c
      uses macro definition insist defined in utils.h
      uses variable Store::filter defined in iquals.tab.c
      uses function aloc_in_effect(aloc,effect) defined in effect.c
      uses variable Store::ref defined in iquals.tab.c
      uses variable Store::ow defined in iquals.tab.c
      uses variable Store::assign defined in iquals.tab.c
      uses function aloc_interesting(aloc) defined in effect.c
      uses function fail(const char *,...) defined in utils.c
   function cell_from_store(store,aloc,store *,bool) in line 1438
      protection public
      60 lines of code
      4 parameters
      12 conditional paths
      uses function aloc_interesting(aloc) defined in effect.c
      uses function ecr_store(store) defined in effect.c
      uses variable Store::kind defined in iquals.tab.c
      uses variable Store::u defined in iquals.tab.c
      uses variable Store::var defined in iquals.tab.c
      uses function qtype_to_fs_qtype(location,qtype) defined in qtype.c
      uses variable Store::loc defined in iquals.tab.c
      uses variable Abstract_loc::u defined in effect.c
      uses variable Abstract_loc::var defined in effect.c
      uses macro definition insistnot defined in utils.h
      uses function store_aloc_qtype(qtype,store,aloc) defined in qtype.c
      uses function mkcell(region,qtype,bool,bool) defined in effect.c
      uses variable store_region defined in effect.c
      uses macro definition FALSE defined in bool.h
      uses function printf(const char *$NONYEAR,(null)) defined in rcs1.c
      uses function print_aloc(printf_func,aloc) defined in effect.c
      uses function print_qtype(printf_func,qtype,store) defined in qtype.c
      uses macro definition NULL defined in config.h
      uses function print_store(printf_func,store) defined in effect.c
      uses macro definition insist defined in utils.h
      uses function aloc_in_effect(aloc,effect) defined in effect.c
      uses variable Store::filter defined in iquals.tab.c
      uses variable Store::ref defined in iquals.tab.c
      uses variable Store::ow defined in iquals.tab.c
      uses function eq_aloc(aloc,aloc) defined in effect.c
      uses variable Store::assign defined in iquals.tab.c
      uses function fail(const char *,...) defined in utils.c
   function print_cells(printf_func,pr_qual_fn,cell_map,bool) in line 1439
      protection public
      26 lines of code
      4 parameters
      3 conditional paths
      uses macro definition TRUE defined in bool.h
      uses macro definition FALSE defined in bool.h
      uses function print_aloc(printf_func,aloc) defined in effect.c
      uses function print_qtype_qf(printf_func,pr_qual_fn,qtype,store,bool) defined in qtype.c
      uses variable Cell::qtype defined in effect.c
      uses macro definition NULL defined in config.h
   function init_store(void) in line 1442
      protection public
      9 lines of code
      1 parameters
      1 conditional paths
      uses variable store_region defined in effect.c
      uses macro definition NULL defined in config.h
      uses function newregion(void) defined in regions.c
      uses variable assign_stores defined in effect.c
      uses function dd_new_list(region) defined in dd_list.c
   function mkstore_edge(region,location,const char *,store) in line 1452
      protection public
      9 lines of code
      4 parameters
      1 conditional paths
      uses macro definition ralloc defined in regions.h
      uses variable Store_edge::loc defined in effect.c
      uses variable Nin_constraint::loc defined in effect.c
      uses variable Store_edge::err_msg defined in effect.c
      uses variable Store_edge::store defined in effect.c
   function mkcell(region,qtype,bool,bool) in line 1462
      protection public
      9 lines of code
      4 parameters
      1 conditional paths
      uses macro definition ralloc defined in regions.h
      uses variable Cell::qtype defined in effect.c
      uses variable Cell::propagated_forward defined in effect.c
      uses variable Cell::propagated_backward defined in effect.c
   function ecr_store(store) in line 1472
      protection public
      25 lines of code
      1 parameters
      5 conditional paths
      uses variable Store::kind defined in iquals.tab.c
      uses variable Store::u defined in iquals.tab.c
      uses variable Store::link defined in iquals.tab.c
   function eq_store(store,store) in line 1506
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function ecr_store(store) defined in effect.c
   function make_store_var(location,const char *) in line 1512
      protection public
      21 lines of code
      2 parameters
      1 conditional paths
      uses macro definition ralloc defined in regions.h
      uses variable store_region defined in effect.c
      uses variable Store::kind defined in iquals.tab.c
      uses variable Store::loc defined in iquals.tab.c
      uses variable Nin_constraint::loc defined in effect.c
      uses variable Store::u defined in iquals.tab.c
      uses variable Store::var defined in iquals.tab.c
      uses variable Store::ub defined in iquals.tab.c
      uses variable Store::lin defined in iquals.tab.c
      uses variable Store::lowlink defined in iquals.tab.c
      uses variable Store::visited defined in iquals.tab.c
      uses variable store_count defined in effect.c
      uses function dd_add_last(region,dd_list,void *) defined in dd_list.c
   function make_store_filter(location,store,effect) in line 1535
      protection public
      33 lines of code
      3 parameters
      1 conditional paths
      uses function ecr_store(store) defined in effect.c
      uses macro definition ralloc defined in regions.h
      uses variable store_region defined in effect.c
      uses variable Store::kind defined in iquals.tab.c
      uses variable Store::loc defined in iquals.tab.c
      uses variable Nin_constraint::loc defined in effect.c
      uses variable Store::u defined in iquals.tab.c
      uses variable Store::filter defined in iquals.tab.c
      uses variable Store::lin defined in iquals.tab.c
      uses variable Store::lowlink defined in iquals.tab.c
      uses variable Store::visited defined in iquals.tab.c
      uses variable Store::ub defined in iquals.tab.c
      uses function mkstore_edge(region,location,const char *,store) defined in effect.c
      uses macro definition NULL defined in config.h
      uses variable store_count defined in effect.c
      uses function dd_add_last(region,dd_list,void *) defined in dd_list.c
   function make_store_ref(location,store,aloc) in line 1570
      protection public
      24 lines of code
      3 parameters
      1 conditional paths
      uses function ecr_aloc(aloc) defined in effect.c
      uses function ecr_store(store) defined in effect.c
      uses variable Abstract_loc::kind defined in effect.c
      uses macro definition ralloc defined in regions.h
      uses variable store_region defined in effect.c
      uses variable Store::kind defined in iquals.tab.c
      uses variable Store::loc defined in iquals.tab.c
      uses variable Nin_constraint::loc defined in effect.c
      uses variable Store::u defined in iquals.tab.c
      uses variable Store::ref defined in iquals.tab.c
      uses variable Store::lin defined in iquals.tab.c
      uses variable Store::lowlink defined in iquals.tab.c
      uses variable Store::visited defined in iquals.tab.c
      uses variable Store::ub defined in iquals.tab.c
      uses function mkstore_edge(region,location,const char *,store) defined in effect.c
      uses macro definition NULL defined in config.h
      uses variable store_count defined in effect.c
      uses function dd_add_last(region,dd_list,void *) defined in dd_list.c
   function make_store_ref_effect(location,store,effect) in line 1597
      protection public
      16 lines of code
      3 parameters
      1 conditional paths
      uses function ecr_effect(effect) defined in effect.c
      uses variable Effect::kind defined in effect.c
      uses function make_store_ref(location,store,aloc) defined in effect.c
      uses variable Nin_constraint::loc defined in effect.c
      uses variable Effect::u defined in effect.c
      uses function make_store_ref_effect(location,store,effect) defined in effect.c
      uses function fail(const char *,...) defined in utils.c
   function make_store_ow(location,store,store,effect) in line 1615
      protection public
      35 lines of code
      4 parameters
      1 conditional paths
      uses function ecr_store(store) defined in effect.c
      uses function ecr_effect(effect) defined in effect.c
      uses macro definition ralloc defined in regions.h
      uses variable store_region defined in effect.c
      uses variable Store::kind defined in iquals.tab.c
      uses variable Store::loc defined in iquals.tab.c
      uses variable Nin_constraint::loc defined in effect.c
      uses variable Store::u defined in iquals.tab.c
      uses variable Store::ow defined in iquals.tab.c
      uses variable Effect::kind defined in effect.c
      uses function effect_var(const char *) defined in effect.c
      uses function mkleq_effect(effect,effect) defined in effect.c
      uses variable Store::lin defined in iquals.tab.c
      uses variable Store::lowlink defined in iquals.tab.c
      uses variable Store::visited defined in iquals.tab.c
      uses variable Store::ub defined in iquals.tab.c
      uses function mkstore_edge(region,location,const char *,store) defined in effect.c
      uses macro definition NULL defined in config.h
      uses variable store_count defined in effect.c
      uses function dd_add_last(region,dd_list,void *) defined in dd_list.c
   function make_store_assign(location,const char *,store,aloc,qtype,bool) in line 1654
      protection public
      38 lines of code
      6 parameters
      1 conditional paths
      uses function ecr_aloc(aloc) defined in effect.c
      uses variable Abstract_loc::u defined in effect.c
      uses variable Abstract_loc::var defined in effect.c
      uses function ecr_store(store) defined in effect.c
      uses macro definition ralloc defined in regions.h
      uses variable store_region defined in effect.c
      uses variable Store::kind defined in iquals.tab.c
      uses variable Store::loc defined in iquals.tab.c
      uses variable Nin_constraint::loc defined in effect.c
      uses variable Store::u defined in iquals.tab.c
      uses variable Store::assign defined in iquals.tab.c
      uses macro definition FALSE defined in bool.h
      uses function mkcell(region,qtype,bool,bool) defined in effect.c
      uses variable Store::lin defined in iquals.tab.c
      uses variable Store::lowlink defined in iquals.tab.c
      uses variable Store::visited defined in iquals.tab.c
      uses variable Store::ub defined in iquals.tab.c
      uses function mkstore_edge(region,location,const char *,store) defined in effect.c
      uses macro definition NULL defined in config.h
      uses variable store_count defined in effect.c
      uses function dd_add_last(region,dd_list,void *) defined in dd_list.c
      uses variable assign_stores defined in effect.c
      uses function store_aloc_qtype(qtype,store,aloc) defined in qtype.c
   function mkleq_store(location,const char *,store,store) in line 1694
      protection public
      80 lines of code
      4 parameters
      1 conditional paths
      uses variable scratch_region defined in qtype.c
      uses variable state defined in effect.c
      uses enumvalue state_init defined in effect.c
      uses enumvalue state_reach defined in effect.c
      uses function print_store(printf_func,store) defined in effect.c
      uses function printf(const char *$NONYEAR,(null)) defined in rcs1.c
      uses function print_store_cells(printf_func,pr_qual_fn,store,bool) defined in effect.c
      uses function print_qual(printf_func,qual) defined in quals.c
      uses macro definition TRUE defined in bool.h
      uses function ecr_store(store) defined in effect.c
      uses variable Store::kind defined in iquals.tab.c
      uses macro definition FALSE defined in bool.h
      uses variable Store::u defined in iquals.tab.c
      uses variable Store::var defined in iquals.tab.c
      uses variable Cell::propagated_backward defined in effect.c
      uses function cell_from_store(store,aloc,store *,bool) defined in effect.c
      uses function mkleq_qtype(location,qtype,qtype) defined in qtype.c
      uses variable Nin_constraint::loc defined in effect.c
      uses variable Cell::qtype defined in effect.c
      uses function newregion(void) defined in regions.c
      uses function store_to_cells(region,store) defined in effect.c
      uses variable Cell::propagated_forward defined in effect.c
      uses function qtype_to_fs_qtype(location,qtype) defined in qtype.c
      uses variable Store::loc defined in iquals.tab.c
      uses variable Abstract_loc::u defined in effect.c
      uses variable Abstract_loc::var defined in effect.c
      uses macro definition insistnot defined in utils.h
      uses function store_aloc_qtype(qtype,store,aloc) defined in qtype.c
      uses function mkcell(region,qtype,bool,bool) defined in effect.c
      uses variable store_region defined in effect.c
      uses macro definition insist defined in utils.h
      uses function deleteregion(region) defined in regions.c
      uses function report_qerror(location,severity,const char *,...) defined in analyze.c
      uses enumvalue sev_err defined in qerror.h
      uses function mkstore_edge(region,location,const char *,store) defined in effect.c
      uses variable Store::ub defined in iquals.tab.c
   function mkeq_store(location,const char *,store,store) in line 1776
      protection public
      5 lines of code
      4 parameters
      1 conditional paths
      uses function mkleq_store(location,const char *,store,store) defined in effect.c
      uses variable Nin_constraint::loc defined in effect.c
   function lub_store(location,const char *,store,store) in line 1783
      protection public
      14 lines of code
      4 parameters
      1 conditional paths
      uses function eq_store(store,store) defined in effect.c
      uses function make_store_var(location,const char *) defined in effect.c
      uses variable Nin_constraint::loc defined in effect.c
      uses function mkleq_store(location,const char *,store,store) defined in effect.c
   function unify_store(location,const char *,store,store) in line 1800
      protection public
      61 lines of code
      4 parameters
      1 conditional paths
      uses function print_store(printf_func,store) defined in effect.c
      uses function printf(const char *$NONYEAR,(null)) defined in rcs1.c
      uses function ecr_store(store) defined in effect.c
      uses variable Store::kind defined in iquals.tab.c
      uses variable Store::u defined in iquals.tab.c
      uses variable Store::var defined in iquals.tab.c
      uses function mkleq_store(location,const char *,store,store) defined in effect.c
      uses variable Nin_constraint::loc defined in effect.c
      uses variable Cell::propagated_forward defined in effect.c
      uses variable Cell::propagated_backward defined in effect.c
      uses macro definition insistnot defined in utils.h
      uses function unify_qtype(location,qtype,qtype) defined in qtype.c
      uses variable Cell::qtype defined in effect.c
      uses macro definition insist defined in utils.h
      uses variable Store::ub defined in iquals.tab.c
      uses variable Store::link defined in iquals.tab.c
   function scc_store_stack_push(store) in line 1876
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses variable scc_store_size defined in effect.c
      uses variable scc_store_top defined in effect.c
      uses variable scc_store_stack defined in effect.c
   function scc_store_stack_pop(void) in line 1883
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses variable scc_store_top defined in effect.c
      uses variable scc_store_stack defined in effect.c
   function scc_store_stack_clear(void) in line 1890
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable scc_store_top defined in effect.c
   function scc_store_stack_init(int) in line 1895
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses variable scc_store_region defined in effect.c
      uses macro definition NULL defined in config.h
      uses function newregion(void) defined in regions.c
      uses variable scc_store_stack defined in effect.c
      uses macro definition rarrayalloc defined in regions.h
      uses variable scc_store_size defined in effect.c
      uses variable scc_store_top defined in effect.c
   function scc_store_stack_delete(void) in line 1904
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses function deleteregion(region) defined in regions.c
      uses variable scc_store_region defined in effect.c
      uses macro definition NULL defined in config.h
      uses variable scc_store_size defined in effect.c
      uses variable scc_store_top defined in effect.c
      uses variable scc_store_stack defined in effect.c
   function in_scc_store_stack(store) in line 1913
      protection public
      11 lines of code
      1 parameters
      3 conditional paths
      uses variable scc_store_top defined in effect.c
      uses variable scc_store_stack defined in effect.c
      uses macro definition TRUE defined in bool.h
      uses macro definition FALSE defined in bool.h
      uses function compute_lin_scc_sub(aloc,store,store) defined in effect.c
   function compute_lin_scc_sub(aloc,store,store) in line 1926
      protection public
      26 lines of code
      3 parameters
      5 conditional paths
      uses variable Store::visited defined in iquals.tab.c
      uses variable Store::lin defined in iquals.tab.c
      uses function compute_lin_scc(aloc,store) defined in effect.c
      uses variable Store::lowlink defined in iquals.tab.c
      uses macro definition MIN defined in utils.h
      uses function in_scc_store_stack(store) defined in effect.c
   function compute_lin_scc(aloc,store) in line 1929
      protection public
      116 lines of code
      2 parameters
      15 conditional paths
      uses variable Store::lowlink defined in iquals.tab.c
      uses variable Store::visited defined in iquals.tab.c
      uses variable scc_store_number defined in effect.c
      uses function scc_store_stack_push(store) defined in effect.c
      uses function printf(const char *$NONYEAR,(null)) defined in rcs1.c
      uses function print_aloc(printf_func,aloc) defined in effect.c
      uses function print_store(printf_func,store) defined in effect.c
      uses variable Store::kind defined in iquals.tab.c
      uses function max(int,int) defined in utils.c
      uses macro definition scan_store_edge_set defined in containers.h
      uses variable Store::u defined in iquals.tab.c
      uses variable Store::var defined in iquals.tab.c
      uses variable Store_edge::store defined in effect.c
      uses function ecr_store(store) defined in effect.c
      uses function compute_lin_scc_sub(aloc,store,store) defined in effect.c
      uses macro definition MAX defined in utils.h
      uses variable Store::lin defined in iquals.tab.c
      uses function ecr_effect(effect) defined in effect.c
      uses variable Store::filter defined in iquals.tab.c
      uses function aloc_in_effect(aloc,effect) defined in effect.c
      uses variable Store::ref defined in iquals.tab.c
      uses function eq_aloc(aloc,aloc) defined in effect.c
      uses macro definition MIN defined in utils.h
      uses variable Store::ow defined in iquals.tab.c
      uses macro definition MARK_ALLOC defined in effect.c
      uses variable Store::assign defined in iquals.tab.c
      uses function fail(const char *,...) defined in utils.c
      uses macro definition FALSE defined in bool.h
      uses variable count defined in qtype.c
      uses variable scc_store_top defined in effect.c
      uses variable scc_store_stack defined in effect.c
      uses macro definition TRUE defined in bool.h
      uses function scc_store_stack_pop(void) defined in effect.c
   function clean_store(store,bool) in line 2075
      protection public
      55 lines of code
      2 parameters
      9 conditional paths
      uses function ecr_store(store) defined in effect.c
      uses variable Store::visited defined in iquals.tab.c
      uses variable Store::lin defined in iquals.tab.c
      uses variable Store::lowlink defined in iquals.tab.c
      uses variable Store::kind defined in iquals.tab.c
      uses macro definition scan_store_edge_set defined in containers.h
      uses variable Store::u defined in iquals.tab.c
      uses variable Store::var defined in iquals.tab.c
      uses variable Store_edge::store defined in effect.c
      uses variable Store::filter defined in iquals.tab.c
      uses variable Store::ref defined in iquals.tab.c
      uses variable Store::ow defined in iquals.tab.c
      uses variable Store::assign defined in iquals.tab.c
      uses function fail(const char *,...) defined in utils.c
   function cmp_assign_store_by_al(const void *,const void *) in line 2131
      protection public
      9 lines of code
      2 parameters
      1 conditional paths
      uses function ecr_store(store) defined in effect.c
      uses function cmp_aloc(aloc,aloc) defined in effect.c
   function compute_lins(void) in line 2144
      protection public
      140 lines of code
      1 parameters
      1 conditional paths
      uses variable state defined in effect.c
      uses enumvalue state_lin defined in effect.c
      uses function scc_store_stack_init(int) defined in effect.c
      uses variable store_count defined in effect.c
      uses function dd_length(dd_list) defined in dd_list.c
      uses variable assign_stores defined in effect.c
      uses macro definition rarrayalloc defined in regions.h
      uses variable store_region defined in effect.c
      uses macro definition dd_scan defined in dd_list.h
      uses macro definition DD_GET defined in dd_list.h
      uses function cmp_assign_store_by_al(const void *,const void *) defined in effect.c
      uses macro definition NULL defined in config.h
      uses function ecr_store(store) defined in effect.c
      uses variable Nin_constraint::kind defined in effect.c
      uses function qtype_from_store(store,aloc) defined in effect.c
      uses variable Store::assign defined in iquals.tab.c
      uses variable Store::u defined in iquals.tab.c
      uses function toplvl_qual_fs_qtype(qtype) defined in qtype.c
      uses variable scc_store_number defined in effect.c
      uses function scc_store_stack_clear(void) defined in effect.c
      uses function compute_lin_scc(aloc,store) defined in effect.c
      uses function eq_aloc(aloc,aloc) defined in effect.c
      uses function clean_store(store,bool) defined in effect.c
      uses macro definition FALSE defined in bool.h
      uses variable Store::lin defined in iquals.tab.c
      uses macro definition TRUE defined in bool.h
      uses variable Store::kind defined in iquals.tab.c
      uses function report_qerror(location,severity,const char *,...) defined in analyze.c
      uses variable Nin_constraint::loc defined in effect.c
      uses enumvalue sev_warn defined in qerror.h
      uses function mkeq_qtype(location,qtype,qtype) defined in qtype.c
      uses variable Store::loc defined in iquals.tab.c
      uses enumvalue sev_err defined in qerror.h
      uses function scc_store_stack_delete(void) defined in effect.c
      uses function printf(const char *$NONYEAR,(null)) defined in rcs1.c
   function propagate_store_cell_backward(store,aloc) in line 2308
      protection public
      43 lines of code
      2 parameters
      1 conditional paths
   function propagate_store_cell_forward(store,aloc) in line 2352
      protection public
      54 lines of code
      2 parameters
      1 conditional paths
   function qtype_from_store(store,aloc) in line 2665
      protection public
      43 lines of code
      2 parameters
      1 conditional paths
      uses function ecr_aloc(aloc) defined in effect.c
      uses variable Abstract_loc::kind defined in effect.c
      uses variable Abstract_loc::u defined in effect.c
      uses variable Abstract_loc::var defined in effect.c
      uses function cell_from_store(store,aloc,store *,bool) defined in effect.c
      uses macro definition NULL defined in config.h
      uses macro definition TRUE defined in bool.h
      uses variable Cell::qtype defined in effect.c
      uses function qtype_to_fs_qtype(location,qtype) defined in qtype.c
   function lin_from_store(store,aloc) in line 2711
      protection public
      7 lines of code
      2 parameters
      1 conditional paths
      uses function ecr_store(store) defined in effect.c
      uses variable Store::kind defined in iquals.tab.c
      uses function eq_aloc(aloc,aloc) defined in effect.c
      uses variable Store::u defined in iquals.tab.c
      uses variable Store::assign defined in iquals.tab.c
   function print_store(printf_func,store) in line 2725
      protection public
      47 lines of code
      2 parameters
      1 conditional paths
      uses function ecr_store(store) defined in effect.c
      uses variable Store::kind defined in iquals.tab.c
      uses variable Store::u defined in iquals.tab.c
      uses variable Store::var defined in iquals.tab.c
      uses function print_store(printf_func,store) defined in effect.c
      uses variable Store::filter defined in iquals.tab.c
      uses function print_effect(printf_func,effect) defined in effect.c
      uses function print_aloc(printf_func,aloc) defined in effect.c
      uses variable Store::ref defined in iquals.tab.c
      uses function printf(const char *$NONYEAR,(null)) defined in rcs1.c
      uses variable Store::ow defined in iquals.tab.c
      uses variable Store::assign defined in iquals.tab.c
      uses function print_qtype(printf_func,qtype,store) defined in qtype.c
      uses function fail(const char *,...) defined in utils.c
   function print_store_cells(printf_func,pr_qual_fn,store,bool) in line 2800
      protection public
      13 lines of code
      4 parameters
      1 conditional paths
      uses variable scratch_region defined in qtype.c
      uses function newregion(void) defined in regions.c
      uses function store_to_cells(region,store) defined in effect.c
      uses function print_cells(printf_func,pr_qual_fn,cell_map,bool) defined in effect.c
      uses function deleteregion(region) defined in regions.c
      uses macro definition dd_scan defined in dd_list.h
      uses variable aloc_list defined in effect.c
      uses macro definition DD_GET defined in dd_list.h
      uses function ecr_aloc(aloc) defined in effect.c
      uses macro definition FALSE defined in bool.h
      uses variable count defined in qtype.c
      uses macro definition TRUE defined in bool.h
      uses function ecr_effect(effect) defined in effect.c
      uses variable Effect::visited defined in effect.c
      uses macro definition scan_effect_set defined in containers.h
      uses variable effect_empty defined in effect.c
      uses variable Effect::kind defined in effect.c
      uses variable Effect::u defined in effect.c
      uses enumvalue eff_any defined in cqual.h
      uses enumvalue eff_alloc defined in cqual.h
      uses enumvalue eff_rwr defined in cqual.h
      uses enumvalue eff_r defined in cqual.h
      uses enumvalue eff_wr defined in cqual.h
      uses function fail(const char *,...) defined in utils.c
      uses function printf(const char *$NONYEAR,(null)) defined in rcs1.c
      uses function dd_new_list(region) defined in dd_list.c
      uses function dd_add_last(region,dd_list,void *) defined in dd_list.c
      uses variable Abstract_loc::u defined in effect.c
      uses variable Abstract_loc::var defined in effect.c
      uses macro definition dd_is_empty defined in dd_list.h
      uses function dd_first(dd_list) defined in dd_list.c
      uses function dd_remove(dd_list_pos) defined in dd_list.c
      uses macro definition NULL defined in config.h
      uses function f(char *) defined in taint-const-subtyping.c
      uses function eq_effect(effect,effect) defined in effect.c
      uses function dd_add_first(region,dd_list,void *) defined in dd_list.c
      uses macro definition MIN defined in utils.h
      uses variable Nin_constraint::kind defined in effect.c
      uses function ptr_to_ascii(void *) defined in utils.c
      uses function print_effect(printf_func,effect) defined in effect.c
      uses function ecr_store(store) defined in effect.c
      uses variable Store::visited defined in iquals.tab.c
      uses variable Store::lowlink defined in iquals.tab.c
      uses variable scc_store_number defined in effect.c
      uses function scc_store_stack_push(store) defined in effect.c
      uses variable Store::kind defined in iquals.tab.c
      uses macro definition scan_store_edge_set defined in containers.h
      uses variable Store::u defined in iquals.tab.c
      uses variable Store::var defined in iquals.tab.c
      uses variable Store_edge::store defined in effect.c
      uses variable Store::ref defined in iquals.tab.c
      uses variable Store::ow defined in iquals.tab.c
      uses variable Store::assign defined in iquals.tab.c
      uses function scc_store_stack_pop(void) defined in effect.c
      uses function in_scc_store_stack(store) defined in effect.c
      uses function scc_store_stack_init(int) defined in effect.c
      uses variable store_count defined in effect.c
      uses function scc_store_stack_delete(void) defined in effect.c
      uses function print_store(printf_func,store) defined in effect.c
      uses function print_store_cells(printf_func,pr_qual_fn,store,bool) defined in effect.c
      uses function print_qual(printf_func,qual) defined in quals.c
   variable Nin_constraint::aloc in line 51
      protection public
   variable Nin_constraint::eff in line 53
      protection public
   variable Nin_constraint::kind in line 52
      protection public
   variable Nin_constraint::loc in line 54
      protection public
   variable Forall_nin_constraint::eff in line 61
      protection public
   variable Forall_nin_constraint::kind in line 59
      protection public
   variable Forall_nin_constraint::loc in line 60
      protection public
   variable Forall_cond_nin_constraint::eff1 in line 68
      protection public
   variable Forall_cond_nin_constraint::eff2 in line 70
      protection public
   variable Forall_cond_nin_constraint::kind1 in line 67
      protection public
   variable Forall_cond_nin_constraint::kind2 in line 69
      protection public
   variable Forall_cond_nin_constraint::loc in line 66
      protection public
   variable Abstract_loc::effects in line 123
      protection public
   variable Abstract_loc::fs_points_to in line 125
      protection public
   variable Abstract_loc::interesting in line 127
      protection public
   variable Abstract_loc::kind in line 114
      protection public
   variable Abstract_loc::link in line 131
      protection public
   variable Abstract_loc::name in line 121
      protection public
   variable Abstract_loc::num_equiv in line 122
      protection public
   variable Abstract_loc::points_to in line 124
      protection public
   variable Abstract_loc::reach_computed in line 128
      protection public
   variable Abstract_loc::u in line 132
      protection public
   variable Abstract_loc::var in line 130
      protection public
   variable Abstract_loc::@12::link in line 131
      protection public
   variable Abstract_loc::@12::var in line 130
      protection public
   variable Abstract_loc::@12::@13::effects in line 123
      protection public
   variable Abstract_loc::@12::@13::fs_points_to in line 125
      protection public
   variable Abstract_loc::@12::@13::interesting in line 127
      protection public
   variable Abstract_loc::@12::@13::name in line 121
      protection public
   variable Abstract_loc::@12::@13::num_equiv in line 122
      protection public
   variable Abstract_loc::@12::@13::points_to in line 124
      protection public
   variable Abstract_loc::@12::@13::reach_computed in line 128
      protection public
   variable Effect::base in line 334
      protection public
   variable Effect::constr in line 336
      protection public
   variable Effect::e1 in line 338
      protection public
   variable Effect::e2 in line 339
      protection public
   variable Effect::inter in line 346
      protection public
   variable Effect::interesting in line 352
      protection public
   variable Effect::kind in line 328
      protection public
   variable Effect::kind in line 333
      protection public
   variable Effect::lb in line 349
      protection public
   variable Effect::link in line 359
      protection public
   variable Effect::name in line 348
      protection public
   variable Effect::num_equiv in line 351
      protection public
   variable Effect::reach_cache in line 353
      protection public
   variable Effect::u in line 340
      protection public
   variable Effect::u in line 360
      protection public
   variable Effect::ub in line 335
      protection public
   variable Effect::var in line 358
      protection public
   variable Effect::visited in line 329
      protection public
   variable Effect::visited1 in line 345
      protection public
   variable Effect::visited2 in line 345
      protection public
   variable Effect::@15::constr in line 336
      protection public
   variable Effect::@15::inter in line 346
      protection public
   variable Effect::@15::link in line 359
      protection public
   variable Effect::@15::u in line 340
      protection public
   variable Effect::@15::var in line 358
      protection public
   variable Effect::@15::@16::base in line 334
      protection public
   variable Effect::@15::@16::kind in line 333
      protection public
   variable Effect::@15::@16::ub in line 335
      protection public
   variable Effect::@15::@17::e1 in line 338
      protection public
   variable Effect::@15::@17::e2 in line 339
      protection public
   variable Effect::@15::@18::e1 in line 342
      protection public
   variable Effect::@15::@18::e2 in line 343
      protection public
   variable Effect::@15::@18::ub in line 344
      protection public
   variable Effect::@15::@18::visited1 in line 345
      protection public
   variable Effect::@15::@18::visited2 in line 345
      protection public
   variable Effect::@15::@19::interesting in line 352
      protection public
   variable Effect::@15::@19::lb in line 349
      protection public
   variable Effect::@15::@19::name in line 348
      protection public
   variable Effect::@15::@19::num_equiv in line 351
      protection public
   variable Effect::@15::@19::reach_cache in line 353
      protection public
   variable Effect::@15::@19::ub in line 349
      protection public
   variable Store_edge::err_msg in line 1376
      protection public
   variable Store_edge::loc in line 1375
      protection public
   variable Store_edge::store in line 1377
      protection public
   variable Cell::propagated_backward in line 1383
      protection public
   variable Cell::propagated_forward in line 1382
      protection public
   variable Cell::qtype in line 1381
      protection public
   variable Store::al in line 1407
      protection public
   variable Store::assign in line 1422
      protection public
   variable Store::cell in line 1420
      protection public
   variable Store::cells in line 1399
      protection public
   variable Store::e in line 1403
      protection public
   variable Store::err_msg in line 1421
      protection public
   variable Store::filter in line 1404
      protection public
   variable Store::kind in line 1388
      protection public
   variable Store::lb in line 1398
      protection public
   variable Store::lin in line 1390
      protection public
   variable Store::link in line 1424
      protection public
   variable Store::loc in line 1389
      protection public
   variable Store::lowlink in line 1391
      protection public
   variable Store::name in line 1396
      protection public
   variable Store::num_equiv in line 1397
      protection public
   variable Store::omega_warned in line 1417
      protection public
   variable Store::ow in line 1413
      protection public
   variable Store::ref in line 1408
      protection public
   variable Store::s in line 1402
      protection public
   variable Store::s1 in line 1410
      protection public
   variable Store::s2 in line 1411
      protection public
   variable Store::strong in line 1419
      protection public
   variable Store::u in line 1425
      protection public
   variable Store::ub in line 1393
      protection public
   variable Store::var in line 1400
      protection public
   variable Store::visited in line 1392
      protection public
   variable Store::@21::assign in line 1422
      protection public
   variable Store::@21::filter in line 1404
      protection public
   variable Store::@21::link in line 1424
      protection public
   variable Store::@21::ow in line 1413
      protection public
   variable Store::@21::ref in line 1408
      protection public
   variable Store::@21::var in line 1400
      protection public
   variable Store::@21::@22::cells in line 1399
      protection public
   variable Store::@21::@22::lb in line 1398
      protection public
   variable Store::@21::@22::name in line 1396
      protection public
   variable Store::@21::@22::num_equiv in line 1397
      protection public
   variable Store::@21::@23::e in line 1403
      protection public
   variable Store::@21::@23::s in line 1402
      protection public
   variable Store::@21::@24::al in line 1407
      protection public
   variable Store::@21::@24::s in line 1406
      protection public
   variable Store::@21::@25::e in line 1412
      protection public
   variable Store::@21::@25::s1 in line 1410
      protection public
   variable Store::@21::@25::s2 in line 1411
      protection public
   variable Store::@21::@26::al in line 1416
      protection public
   variable Store::@21::@26::cell in line 1420
      protection public
   variable Store::@21::@26::err_msg in line 1421
      protection public
   variable Store::@21::@26::lin in line 1418
      protection public
   variable Store::@21::@26::omega_warned in line 1417
      protection public
   variable Store::@21::@26::s in line 1415
      protection public
   variable Store::@21::@26::strong in line 1419
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cqual/cqual-0.981/src/effect.h
module effect.h
   variable effect_empty in line 64
      protection public
   function init_effects(void) in line 27
      protection public
      16 lines of code
      1 parameters
      2 conditional paths
      uses variable effect_region defined in effect.c
      uses macro definition NULL defined in config.h
      uses function newregion(void) defined in regions.c
      uses variable next_effect defined in effect.c
      uses variable constraints defined in effect.c
      uses function dd_new_list(region) defined in dd_list.c
      uses variable forall_constraints defined in effect.c
      uses variable forall_cond_constraints defined in effect.c
      uses variable aloc_list defined in effect.c
      uses enumvalue state_init defined in effect.c
   function init_store(void) in line 28
      protection public
      9 lines of code
      1 parameters
      1 conditional paths
      uses macro definition NULL defined in config.h
      uses function newregion(void) defined in regions.c
      uses function dd_new_list(region) defined in dd_list.c
   function make_aloc(const char *,qtype) in line 37
      protection public
      24 lines of code
      2 parameters
      2 conditional paths
      uses variable restrict_qual defined in quals.c
      uses variable flag_flow_sensitive defined in flags.h
      uses macro definition NULL defined in config.h
      uses macro definition ralloc defined in regions.h
      uses variable effect_region defined in effect.c
      uses function printf(const char *$NONYEAR,(null)) defined in rcs1.c
      uses function print_qtype_raw(printf_func,qtype,store) defined in qtype.c
      uses variable Abstract_loc::kind defined in effect.c
      uses variable Abstract_loc::u defined in effect.c
      uses variable Abstract_loc::var defined in effect.c
      uses macro definition FALSE defined in bool.h
      uses function dd_add_last(region,dd_list,void *) defined in dd_list.c
      uses variable aloc_list defined in effect.c
   function name_aloc(aloc) in line 40
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses variable Abstract_loc::kind defined in effect.c
      uses variable Abstract_loc::u defined in effect.c
      uses variable Abstract_loc::var defined in effect.c
   function hash_aloc(aloc) in line 43
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
   function points_to_aloc(aloc) in line 46
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses variable Abstract_loc::kind defined in effect.c
      uses variable Abstract_loc::u defined in effect.c
      uses variable Abstract_loc::var defined in effect.c
   function eq_aloc(aloc,aloc) in line 49
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function unify_aloc(location,aloc,aloc) in line 52
      protection public
      61 lines of code
      3 parameters
      7 conditional paths
      uses variable restrict_qual defined in quals.c
      uses variable flag_flow_sensitive defined in flags.h
      uses function print_aloc(printf_func,aloc) defined in effect.c
      uses function printf(const char *$NONYEAR,(null)) defined in rcs1.c
      uses variable Abstract_loc::kind defined in effect.c
      uses variable Abstract_loc::u defined in effect.c
      uses variable Abstract_loc::var defined in effect.c
      uses function match_qtype(qtype,qtype,void(*)(qual q1, qual q2, void *arg),void *) defined in qtype.c
      uses macro definition NULL defined in config.h
      uses function report_qerror(location,severity,const char *,...) defined in analyze.c
      uses variable Nin_constraint::loc defined in effect.c
      uses enumvalue sev_err defined in qerror.h
      uses variable error_qtype defined in qtype.c
      uses variable Abstract_loc::link defined in effect.c
      uses function print_qtype_raw(printf_func,qtype,store) defined in qtype.c
   function print_aloc(printf_func,aloc) in line 55
      protection public
      14 lines of code
      2 parameters
      2 conditional paths
      uses variable Abstract_loc::kind defined in effect.c
      uses variable Abstract_loc::u defined in effect.c
      uses variable Abstract_loc::var defined in effect.c
   function aloc_effect(effect) in line 67
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses variable Effect::kind defined in effect.c
      uses variable Effect::u defined in effect.c
   function mark_aloc_interesting(aloc) in line 70
      protection public
      9 lines of code
      1 parameters
      2 conditional paths
      uses variable restrict_qual defined in quals.c
      uses variable flag_flow_sensitive defined in flags.h
      uses variable Abstract_loc::kind defined in effect.c
      uses variable Abstract_loc::u defined in effect.c
      uses variable Abstract_loc::var defined in effect.c
      uses macro definition TRUE defined in bool.h
   function effect_single(aloc) in line 73
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function effect_constr(aloc,eff_kind) defined in effect.c
      uses enumvalue eff_any defined in cqual.h
   function effect_alloc(aloc) in line 76
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function effect_constr(aloc,eff_kind) defined in effect.c
      uses enumvalue eff_alloc defined in cqual.h
   function effect_rwr(aloc) in line 79
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function effect_constr(aloc,eff_kind) defined in effect.c
      uses enumvalue eff_rwr defined in cqual.h
   function effect_r(aloc) in line 82
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function effect_constr(aloc,eff_kind) defined in effect.c
      uses enumvalue eff_r defined in cqual.h
   function effect_wr(aloc) in line 85
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function effect_constr(aloc,eff_kind) defined in effect.c
      uses enumvalue eff_wr defined in cqual.h
   function effect_constr(aloc,eff_kind) in line 88
      protection public
      39 lines of code
      2 parameters
      5 conditional paths
      uses enumvalue state_init defined in effect.c
      uses variable restrict_qual defined in quals.c
      uses variable flag_flow_sensitive defined in flags.h
      uses macro definition NULL defined in config.h
      uses variable Abstract_loc::kind defined in effect.c
      uses enumvalue eff_last defined in cqual.h
      uses variable Abstract_loc::u defined in effect.c
      uses variable Abstract_loc::var defined in effect.c
      uses macro definition rarrayalloc defined in regions.h
      uses variable effect_region defined in effect.c
      uses macro definition ralloc defined in regions.h
      uses variable Effect::kind defined in effect.c
      uses variable Effect::visited defined in effect.c
      uses variable Effect::u defined in effect.c
      uses function dd_add_last(region,dd_list,void *) defined in dd_list.c
   function effect_var(const char *) in line 91
      protection public
      21 lines of code
      1 parameters
      2 conditional paths
      uses enumvalue state_init defined in effect.c
      uses variable restrict_qual defined in quals.c
      uses variable flag_flow_sensitive defined in flags.h
      uses macro definition NULL defined in config.h
      uses macro definition ralloc defined in regions.h
      uses variable effect_region defined in effect.c
      uses variable Effect::kind defined in effect.c
      uses variable Effect::u defined in effect.c
      uses macro definition FALSE defined in bool.h
      uses variable Effect::visited defined in effect.c
      uses function dd_add_last(region,dd_list,void *) defined in dd_list.c
   function effect_fresh(void) in line 94
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses variable restrict_qual defined in quals.c
      uses variable flag_flow_sensitive defined in flags.h
      uses macro definition NULL defined in config.h
      uses function rstrcat(region,const char *,const char *) defined in utils.c
      uses variable effect_region defined in effect.c
      uses function inttostr(region,int) defined in utils.c
      uses variable next_effect defined in effect.c
      uses function effect_var(const char *) defined in effect.c
   function effect_union(effect,effect) in line 97
      protection public
      30 lines of code
      2 parameters
      5 conditional paths
      uses variable restrict_qual defined in quals.c
      uses variable flag_flow_sensitive defined in flags.h
      uses macro definition NULL defined in config.h
      uses macro definition ralloc defined in regions.h
      uses variable effect_region defined in effect.c
      uses variable Effect::kind defined in effect.c
      uses variable Effect::u defined in effect.c
      uses variable Effect::visited defined in effect.c
      uses function dd_add_last(region,dd_list,void *) defined in dd_list.c
   function effect_inter(effect,effect) in line 100
      protection public
      55 lines of code
      2 parameters
      5 conditional paths
      uses enumvalue state_init defined in effect.c
      uses variable restrict_qual defined in quals.c
      uses variable flag_flow_sensitive defined in flags.h
      uses macro definition NULL defined in config.h
      uses variable effect_empty defined in effect.c
      uses variable Effect::kind defined in effect.c
      uses function effect_fresh(void) defined in effect.c
      uses function mkleq_effect(effect,effect) defined in effect.c
      uses macro definition ralloc defined in regions.h
      uses variable effect_region defined in effect.c
      uses variable Effect::u defined in effect.c
      uses variable Effect::visited defined in effect.c
      uses function dd_add_last(region,dd_list,void *) defined in dd_list.c
   function mark_effect_interesting(effect) in line 104
      protection public
      26 lines of code
      1 parameters
      6 conditional paths
      uses enumvalue state_init defined in effect.c
      uses variable restrict_qual defined in quals.c
      uses variable flag_flow_sensitive defined in flags.h
      uses variable Effect::kind defined in effect.c
      uses variable Effect::u defined in effect.c
      uses macro definition TRUE defined in bool.h
      uses function mark_effect_interesting(effect) defined in effect.c
      uses function fail(const char *,...) defined in utils.c
   function eq_effect(effect,effect) in line 108
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function mkleq_effect(effect,effect) in line 111
      protection public
      15 lines of code
      2 parameters
      2 conditional paths
      uses enumvalue state_init defined in effect.c
      uses variable restrict_qual defined in quals.c
      uses variable flag_flow_sensitive defined in flags.h
      uses function print_effect(printf_func,effect) defined in effect.c
      uses function printf(const char *$NONYEAR,(null)) defined in rcs1.c
      uses function internal_mkleq_effect(effect,effect) defined in effect.c
   function mkeq_effect(effect,effect) in line 114
      protection public
      16 lines of code
      2 parameters
      2 conditional paths
      uses enumvalue state_init defined in effect.c
      uses variable restrict_qual defined in quals.c
      uses variable flag_flow_sensitive defined in flags.h
      uses function print_effect(printf_func,effect) defined in effect.c
      uses function printf(const char *$NONYEAR,(null)) defined in rcs1.c
      uses function internal_mkleq_effect(effect,effect) defined in effect.c
   function unify_effect(effect,effect) in line 118
      protection public
      47 lines of code
      2 parameters
      4 conditional paths
      uses variable restrict_qual defined in quals.c
      uses variable flag_flow_sensitive defined in flags.h
      uses function print_effect(printf_func,effect) defined in effect.c
      uses function printf(const char *$NONYEAR,(null)) defined in rcs1.c
      uses variable Effect::kind defined in effect.c
      uses enumvalue state_init defined in effect.c
      uses variable Effect::u defined in effect.c
      uses function mkeq_effect(effect,effect) defined in effect.c
   function mknin_aloc_effect(location,aloc,eff_kind,effect) in line 122
      protection public
      27 lines of code
      4 parameters
      3 conditional paths
      uses macro definition NULL defined in config.h
      uses variable Effect::kind defined in effect.c
      uses function effect_fresh(void) defined in effect.c
      uses function mkleq_effect(effect,effect) defined in effect.c
      uses function mark_effect_interesting(effect) defined in effect.c
      uses macro definition ralloc defined in regions.h
      uses variable effect_region defined in effect.c
      uses variable Nin_constraint::aloc defined in effect.c
      uses variable Nin_constraint::eff defined in effect.c
      uses variable Nin_constraint::kind defined in effect.c
      uses variable Nin_constraint::loc defined in effect.c
      uses function dd_add_last(region,dd_list,void *) defined in dd_list.c
      uses variable constraints defined in effect.c
   function mknin_effect(location,effect,effect) in line 126
      protection public
      19 lines of code
      3 parameters
      4 conditional paths
      uses macro definition NULL defined in config.h
      uses variable Effect::kind defined in effect.c
      uses function mknin_aloc_effect(location,aloc,eff_kind,effect) defined in effect.c
      uses variable Nin_constraint::loc defined in effect.c
      uses variable Effect::u defined in effect.c
      uses function mknin_effect(location,effect,effect) defined in effect.c
      uses function fail(const char *,...) defined in utils.c
   function forall_aloc_mknin_effect(location,eff_kind,effect) in line 129
      protection public
      25 lines of code
      3 parameters
      3 conditional paths
      uses macro definition NULL defined in config.h
      uses variable Effect::kind defined in effect.c
      uses function effect_fresh(void) defined in effect.c
      uses function mkleq_effect(effect,effect) defined in effect.c
      uses function mark_effect_interesting(effect) defined in effect.c
      uses macro definition ralloc defined in regions.h
      uses variable effect_region defined in effect.c
      uses variable Forall_nin_constraint::kind defined in effect.c
      uses variable Nin_constraint::kind defined in effect.c
      uses variable Forall_nin_constraint::loc defined in effect.c
      uses variable Nin_constraint::loc defined in effect.c
      uses variable Forall_nin_constraint::eff defined in effect.c
      uses function dd_add_last(region,dd_list,void *) defined in dd_list.c
      uses variable forall_constraints defined in effect.c
   function forall_aloc_in_effect_mknin_effect(location,eff_kind,effect,eff_kind,effect) in line 132
      protection public
      41 lines of code
      5 parameters
      5 conditional paths
      uses macro definition NULL defined in config.h
      uses variable Effect::kind defined in effect.c
      uses function effect_fresh(void) defined in effect.c
      uses function mkleq_effect(effect,effect) defined in effect.c
      uses function mark_effect_interesting(effect) defined in effect.c
      uses macro definition ralloc defined in regions.h
      uses variable effect_region defined in effect.c
      uses variable Forall_cond_nin_constraint::kind1 defined in effect.c
      uses variable Forall_cond_nin_constraint::kind2 defined in effect.c
      uses variable Forall_cond_nin_constraint::loc defined in effect.c
      uses variable Nin_constraint::loc defined in effect.c
      uses variable Forall_cond_nin_constraint::eff1 defined in effect.c
      uses variable Forall_cond_nin_constraint::eff2 defined in effect.c
      uses function dd_add_last(region,dd_list,void *) defined in dd_list.c
      uses variable forall_cond_constraints defined in effect.c
   function check_nin_aloc_effect(aloc,effect) in line 140
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function check_nin(void) in line 145
      protection public
      64 lines of code
      1 parameters
      6 conditional paths
      uses function dd_length(dd_list) defined in dd_list.c
      uses variable forall_constraints defined in effect.c
      uses variable forall_cond_constraints defined in effect.c
      uses macro definition dd_scan defined in dd_list.h
      uses variable aloc_list defined in effect.c
      uses macro definition DD_GET defined in dd_list.h
      uses variable Abstract_loc::kind defined in effect.c
      uses variable Abstract_loc::u defined in effect.c
      uses variable Abstract_loc::var defined in effect.c
      uses variable Forall_nin_constraint::eff defined in effect.c
      uses variable Forall_nin_constraint::kind defined in effect.c
      uses function report_qerror(location,severity,const char *,...) defined in analyze.c
      uses variable Forall_nin_constraint::loc defined in effect.c
      uses enumvalue sev_err defined in qerror.h
      uses variable Forall_cond_nin_constraint::eff1 defined in effect.c
      uses variable Forall_cond_nin_constraint::kind1 defined in effect.c
      uses variable Forall_cond_nin_constraint::eff2 defined in effect.c
      uses variable Forall_cond_nin_constraint::kind2 defined in effect.c
      uses variable Forall_cond_nin_constraint::loc defined in effect.c
      uses variable constraints defined in effect.c
      uses function print_aloc(printf_func,aloc) defined in effect.c
      uses function printf(const char *$NONYEAR,(null)) defined in rcs1.c
      uses variable Nin_constraint::aloc defined in effect.c
      uses function print_effect(printf_func,effect) defined in effect.c
      uses variable Nin_constraint::eff defined in effect.c
      uses variable Nin_constraint::kind defined in effect.c
      uses variable Nin_constraint::loc defined in effect.c
   function print_effect(printf_func,effect) in line 147
      protection public
      72 lines of code
      2 parameters
      17 conditional paths
      uses macro definition NULL defined in config.h
      uses variable Effect::kind defined in effect.c
      uses variable Effect::u defined in effect.c
      uses enumvalue eff_any defined in cqual.h
      uses enumvalue eff_alloc defined in cqual.h
      uses enumvalue eff_rwr defined in cqual.h
      uses enumvalue eff_r defined in cqual.h
      uses enumvalue eff_wr defined in cqual.h
      uses function fail(const char *,...) defined in utils.c
      uses function print_effect(printf_func,effect) defined in effect.c
      uses variable flag_ugly defined in flags.h
   function eq_store(store,store) in line 156
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function make_store_var(location,const char *) in line 159
      protection public
      21 lines of code
      2 parameters
      1 conditional paths
      uses macro definition ralloc defined in regions.h
      uses variable Store::kind defined in iquals.tab.c
      uses variable Store::loc defined in iquals.tab.c
      uses variable Nin_constraint::loc defined in effect.c
      uses variable Store::u defined in iquals.tab.c
      uses variable Store::var defined in iquals.tab.c
      uses variable Store::ub defined in iquals.tab.c
      uses variable Store::lin defined in iquals.tab.c
      uses variable Store::lowlink defined in iquals.tab.c
      uses variable Store::visited defined in iquals.tab.c
      uses function dd_add_last(region,dd_list,void *) defined in dd_list.c
   function make_store_filter(location,store,effect) in line 162
      protection public
      33 lines of code
      3 parameters
      1 conditional paths
      uses macro definition ralloc defined in regions.h
      uses variable Store::kind defined in iquals.tab.c
      uses variable Store::loc defined in iquals.tab.c
      uses variable Nin_constraint::loc defined in effect.c
      uses variable Store::u defined in iquals.tab.c
      uses variable Store::filter defined in iquals.tab.c
      uses variable Store::lin defined in iquals.tab.c
      uses variable Store::lowlink defined in iquals.tab.c
      uses variable Store::visited defined in iquals.tab.c
      uses variable Store::ub defined in iquals.tab.c
      uses macro definition NULL defined in config.h
      uses function dd_add_last(region,dd_list,void *) defined in dd_list.c
   function make_store_ref(location,store,aloc) in line 165
      protection public
      24 lines of code
      3 parameters
      1 conditional paths
      uses variable Abstract_loc::kind defined in effect.c
      uses macro definition ralloc defined in regions.h
      uses variable Store::kind defined in iquals.tab.c
      uses variable Store::loc defined in iquals.tab.c
      uses variable Nin_constraint::loc defined in effect.c
      uses variable Store::u defined in iquals.tab.c
      uses variable Store::ref defined in iquals.tab.c
      uses variable Store::lin defined in iquals.tab.c
      uses variable Store::lowlink defined in iquals.tab.c
      uses variable Store::visited defined in iquals.tab.c
      uses variable Store::ub defined in iquals.tab.c
      uses macro definition NULL defined in config.h
      uses function dd_add_last(region,dd_list,void *) defined in dd_list.c
   function make_store_ref_effect(location,store,effect) in line 169
      protection public
      16 lines of code
      3 parameters
      3 conditional paths
      uses variable Effect::kind defined in effect.c
      uses function make_store_ref(location,store,aloc) defined in effect.c
      uses variable Nin_constraint::loc defined in effect.c
      uses variable Effect::u defined in effect.c
      uses function make_store_ref_effect(location,store,effect) defined in effect.c
      uses function fail(const char *,...) defined in utils.c
   function make_store_ow(location,store,store,effect) in line 172
      protection public
      35 lines of code
      4 parameters
      2 conditional paths
      uses macro definition ralloc defined in regions.h
      uses variable Store::kind defined in iquals.tab.c
      uses variable Store::loc defined in iquals.tab.c
      uses variable Nin_constraint::loc defined in effect.c
      uses variable Store::u defined in iquals.tab.c
      uses variable Store::ow defined in iquals.tab.c
      uses variable Effect::kind defined in effect.c
      uses function effect_var(const char *) defined in effect.c
      uses function mkleq_effect(effect,effect) defined in effect.c
      uses variable Store::lin defined in iquals.tab.c
      uses variable Store::lowlink defined in iquals.tab.c
      uses variable Store::visited defined in iquals.tab.c
      uses variable Store::ub defined in iquals.tab.c
      uses macro definition NULL defined in config.h
      uses function dd_add_last(region,dd_list,void *) defined in dd_list.c
   function make_store_assign(location,const char *,store,aloc,qtype,bool) in line 177
      protection public
      38 lines of code
      6 parameters
      1 conditional paths
      uses variable Abstract_loc::u defined in effect.c
      uses variable Abstract_loc::var defined in effect.c
      uses macro definition ralloc defined in regions.h
      uses variable Store::kind defined in iquals.tab.c
      uses variable Store::loc defined in iquals.tab.c
      uses variable Nin_constraint::loc defined in effect.c
      uses variable Store::u defined in iquals.tab.c
      uses variable Store::assign defined in iquals.tab.c
      uses macro definition FALSE defined in bool.h
      uses variable Store::lin defined in iquals.tab.c
      uses variable Store::lowlink defined in iquals.tab.c
      uses variable Store::visited defined in iquals.tab.c
      uses variable Store::ub defined in iquals.tab.c
      uses macro definition NULL defined in config.h
      uses function dd_add_last(region,dd_list,void *) defined in dd_list.c
      uses function store_aloc_qtype(qtype,store,aloc) defined in qtype.c
   function mkleq_store(location,const char *,store,store) in line 181
      protection public
      80 lines of code
      4 parameters
      9 conditional paths
      uses variable scratch_region defined in qtype.c
      uses enumvalue state_init defined in effect.c
      uses enumvalue state_reach defined in effect.c
      uses function print_store(printf_func,store) defined in effect.c
      uses function printf(const char *$NONYEAR,(null)) defined in rcs1.c
      uses function print_store_cells(printf_func,pr_qual_fn,store,bool) defined in effect.c
      uses function print_qual(printf_func,qual) defined in quals.c
      uses macro definition TRUE defined in bool.h
      uses variable Store::kind defined in iquals.tab.c
      uses macro definition FALSE defined in bool.h
      uses variable Store::u defined in iquals.tab.c
      uses variable Store::var defined in iquals.tab.c
      uses variable Cell::propagated_backward defined in effect.c
      uses function mkleq_qtype(location,qtype,qtype) defined in qtype.c
      uses variable Nin_constraint::loc defined in effect.c
      uses variable Cell::qtype defined in effect.c
      uses function newregion(void) defined in regions.c
      uses variable Cell::propagated_forward defined in effect.c
      uses function qtype_to_fs_qtype(location,qtype) defined in qtype.c
      uses variable Store::loc defined in iquals.tab.c
      uses variable Abstract_loc::u defined in effect.c
      uses variable Abstract_loc::var defined in effect.c
      uses macro definition insistnot defined in utils.h
      uses function store_aloc_qtype(qtype,store,aloc) defined in qtype.c
      uses macro definition insist defined in utils.h
      uses function deleteregion(region) defined in regions.c
      uses function report_qerror(location,severity,const char *,...) defined in analyze.c
      uses enumvalue sev_err defined in qerror.h
      uses variable Store::ub defined in iquals.tab.c
   function mkeq_store(location,const char *,store,store) in line 184
      protection public
      5 lines of code
      4 parameters
      1 conditional paths
      uses function mkleq_store(location,const char *,store,store) defined in effect.c
      uses variable Nin_constraint::loc defined in effect.c
   function lub_store(location,const char *,store,store) in line 187
      protection public
      14 lines of code
      4 parameters
      2 conditional paths
      uses function eq_store(store,store) defined in effect.c
      uses function make_store_var(location,const char *) defined in effect.c
      uses variable Nin_constraint::loc defined in effect.c
      uses function mkleq_store(location,const char *,store,store) defined in effect.c
   function unify_store(location,const char *,store,store) in line 191
      protection public
      61 lines of code
      4 parameters
      6 conditional paths
      uses function print_store(printf_func,store) defined in effect.c
      uses function printf(const char *$NONYEAR,(null)) defined in rcs1.c
      uses variable Store::kind defined in iquals.tab.c
      uses variable Store::u defined in iquals.tab.c
      uses variable Store::var defined in iquals.tab.c
      uses function mkleq_store(location,const char *,store,store) defined in effect.c
      uses variable Nin_constraint::loc defined in effect.c
      uses variable Cell::propagated_forward defined in effect.c
      uses variable Cell::propagated_backward defined in effect.c
      uses macro definition insistnot defined in utils.h
      uses function unify_qtype(location,qtype,qtype) defined in qtype.c
      uses variable Cell::qtype defined in effect.c
      uses macro definition insist defined in utils.h
      uses variable Store::ub defined in iquals.tab.c
      uses variable Store::link defined in iquals.tab.c
   function propagate_store_cell_forward(store,aloc) in line 195
      protection public
      54 lines of code
      2 parameters
      9 conditional paths
      uses variable Abstract_loc::kind defined in effect.c
      uses variable Store::kind defined in iquals.tab.c
      uses variable Store::u defined in iquals.tab.c
      uses variable Store::var defined in iquals.tab.c
      uses function qtype_to_fs_qtype(location,qtype) defined in qtype.c
      uses variable Store::loc defined in iquals.tab.c
      uses variable Abstract_loc::u defined in effect.c
      uses variable Abstract_loc::var defined in effect.c
      uses macro definition insistnot defined in utils.h
      uses function store_aloc_qtype(qtype,store,aloc) defined in qtype.c
      uses macro definition FALSE defined in bool.h
      uses macro definition insist defined in utils.h
      uses variable Cell::propagated_forward defined in effect.c
      uses macro definition TRUE defined in bool.h
      uses macro definition scan_store_edge_set defined in containers.h
      uses variable Store::ub defined in iquals.tab.c
      uses variable Store_edge::loc defined in effect.c
      uses variable Store_edge::store defined in effect.c
      uses variable Cell::qtype defined in effect.c
      uses function report_qerror(location,severity,const char *,...) defined in analyze.c
      uses enumvalue sev_err defined in qerror.h
      uses variable Store_edge::err_msg defined in effect.c
      uses function eq_aloc(aloc,aloc) defined in effect.c
      uses variable Store::assign defined in iquals.tab.c
      uses function fail(const char *,...) defined in utils.c
   function propagate_store_cell_backward(store,aloc) in line 196
      protection public
      43 lines of code
      2 parameters
      7 conditional paths
      uses variable Abstract_loc::kind defined in effect.c
      uses variable Store::kind defined in iquals.tab.c
      uses variable Store::u defined in iquals.tab.c
      uses variable Store::var defined in iquals.tab.c
      uses function qtype_to_fs_qtype(location,qtype) defined in qtype.c
      uses variable Store::loc defined in iquals.tab.c
      uses variable Abstract_loc::u defined in effect.c
      uses variable Abstract_loc::var defined in effect.c
      uses macro definition insistnot defined in utils.h
      uses function store_aloc_qtype(qtype,store,aloc) defined in qtype.c
      uses macro definition FALSE defined in bool.h
      uses macro definition insist defined in utils.h
      uses variable Cell::propagated_backward defined in effect.c
      uses macro definition TRUE defined in bool.h
      uses macro definition scan_store_edge_set defined in containers.h
      uses variable Store_edge::loc defined in effect.c
      uses variable Store_edge::store defined in effect.c
      uses variable Cell::qtype defined in effect.c
      uses function report_qerror(location,severity,const char *,...) defined in analyze.c
      uses enumvalue sev_err defined in qerror.h
      uses variable Store_edge::err_msg defined in effect.c
      uses function fail(const char *,...) defined in utils.c
   function compute_lins(void) in line 199
      protection public
      140 lines of code
      1 parameters
      16 conditional paths
      uses enumvalue state_lin defined in effect.c
      uses function dd_length(dd_list) defined in dd_list.c
      uses macro definition rarrayalloc defined in regions.h
      uses macro definition dd_scan defined in dd_list.h
      uses macro definition DD_GET defined in dd_list.h
      uses macro definition NULL defined in config.h
      uses variable Nin_constraint::kind defined in effect.c
      uses function qtype_from_store(store,aloc) defined in effect.c
      uses variable Store::assign defined in iquals.tab.c
      uses variable Store::u defined in iquals.tab.c
      uses function toplvl_qual_fs_qtype(qtype) defined in qtype.c
      uses function eq_aloc(aloc,aloc) defined in effect.c
      uses macro definition FALSE defined in bool.h
      uses variable Store::lin defined in iquals.tab.c
      uses macro definition TRUE defined in bool.h
      uses variable Store::kind defined in iquals.tab.c
      uses function report_qerror(location,severity,const char *,...) defined in analyze.c
      uses variable Nin_constraint::loc defined in effect.c
      uses enumvalue sev_warn defined in qerror.h
      uses function mkeq_qtype(location,qtype,qtype) defined in qtype.c
      uses variable Store::loc defined in iquals.tab.c
      uses enumvalue sev_err defined in qerror.h
      uses function printf(const char *$NONYEAR,(null)) defined in rcs1.c
   function lin_from_store(store,aloc) in line 204
      protection public
      7 lines of code
      2 parameters
      1 conditional paths
      uses variable Store::kind defined in iquals.tab.c
      uses function eq_aloc(aloc,aloc) defined in effect.c
      uses variable Store::u defined in iquals.tab.c
      uses variable Store::assign defined in iquals.tab.c
   function qtype_from_store(store,aloc) in line 207
      protection public
      43 lines of code
      2 parameters
      4 conditional paths
      uses variable Abstract_loc::kind defined in effect.c
      uses variable Abstract_loc::u defined in effect.c
      uses variable Abstract_loc::var defined in effect.c
      uses macro definition NULL defined in config.h
      uses macro definition TRUE defined in bool.h
      uses variable Cell::qtype defined in effect.c
      uses function qtype_to_fs_qtype(location,qtype) defined in qtype.c
   function print_store(printf_func,store) in line 209
      protection public
      47 lines of code
      2 parameters
      6 conditional paths
      uses variable Store::kind defined in iquals.tab.c
      uses variable Store::u defined in iquals.tab.c
      uses variable Store::var defined in iquals.tab.c
      uses function print_store(printf_func,store) defined in effect.c
      uses variable Store::filter defined in iquals.tab.c
      uses function print_effect(printf_func,effect) defined in effect.c
      uses function print_aloc(printf_func,aloc) defined in effect.c
      uses variable Store::ref defined in iquals.tab.c
      uses function printf(const char *$NONYEAR,(null)) defined in rcs1.c
      uses variable Store::ow defined in iquals.tab.c
      uses variable Store::assign defined in iquals.tab.c
      uses function print_qtype(printf_func,qtype,store) defined in qtype.c
      uses function fail(const char *,...) defined in utils.c
   function print_store_cells(printf_func,pr_qual_fn,store,bool) in line 210
      protection public
      13 lines of code
      4 parameters
      66 conditional paths
      uses variable scratch_region defined in qtype.c
      uses function newregion(void) defined in regions.c
      uses function deleteregion(region) defined in regions.c
      uses macro definition dd_scan defined in dd_list.h
      uses variable aloc_list defined in effect.c
      uses macro definition DD_GET defined in dd_list.h
      uses macro definition FALSE defined in bool.h
      uses variable count defined in qtype.c
      uses macro definition TRUE defined in bool.h
      uses variable Effect::visited defined in effect.c
      uses macro definition scan_effect_set defined in containers.h
      uses variable effect_empty defined in effect.c
      uses variable Effect::kind defined in effect.c
      uses variable Effect::u defined in effect.c
      uses enumvalue eff_any defined in cqual.h
      uses enumvalue eff_alloc defined in cqual.h
      uses enumvalue eff_rwr defined in cqual.h
      uses enumvalue eff_r defined in cqual.h
      uses enumvalue eff_wr defined in cqual.h
      uses function fail(const char *,...) defined in utils.c
      uses function printf(const char *$NONYEAR,(null)) defined in rcs1.c
      uses function dd_new_list(region) defined in dd_list.c
      uses function dd_add_last(region,dd_list,void *) defined in dd_list.c
      uses variable Abstract_loc::u defined in effect.c
      uses variable Abstract_loc::var defined in effect.c
      uses macro definition dd_is_empty defined in dd_list.h
      uses function dd_first(dd_list) defined in dd_list.c
      uses function dd_remove(dd_list_pos) defined in dd_list.c
      uses macro definition NULL defined in config.h
      uses function f(char *) defined in taint-const-subtyping.c
      uses function eq_effect(effect,effect) defined in effect.c
      uses function dd_add_first(region,dd_list,void *) defined in dd_list.c
      uses macro definition MIN defined in utils.h
      uses variable Nin_constraint::kind defined in effect.c
      uses function ptr_to_ascii(void *) defined in utils.c
      uses function print_effect(printf_func,effect) defined in effect.c
      uses variable Store::visited defined in iquals.tab.c
      uses variable Store::lowlink defined in iquals.tab.c
      uses variable Store::kind defined in iquals.tab.c
      uses macro definition scan_store_edge_set defined in containers.h
      uses variable Store::u defined in iquals.tab.c
      uses variable Store::var defined in iquals.tab.c
      uses variable Store_edge::store defined in effect.c
      uses variable Store::ref defined in iquals.tab.c
      uses variable Store::ow defined in iquals.tab.c
      uses variable Store::assign defined in iquals.tab.c
      uses function print_store(printf_func,store) defined in effect.c
      uses function print_store_cells(printf_func,pr_qual_fn,store,bool) defined in effect.c
      uses function print_qual(printf_func,qual) defined in quals.c
   function print_store_raw(printf_func,store) in line 212
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cqual/cqual-0.981/src/env.c
module env.c
   function new_env(region,env) in line 32
      protection public
      10 lines of code
      2 parameters
      1 conditional paths
      uses macro definition ralloc defined in regions.h
      uses variable env::r defined in env.c
      uses variable env::parent defined in env.c
      uses variable env::entries defined in env.c
      uses macro definition NULL defined in config.h
   function env_parent(env) in line 44
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable env::parent defined in env.c
   function env_region(env) in line 50
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable env::r defined in env.c
   function env_lookup(env,const char *,bool) in line 58
      protection public
      13 lines of code
      3 parameters
      1 conditional paths
      uses variable env::entries defined in env.c
      uses function hash_table_lookup(hash_table,hash_key,hash_data *) defined in hash.c
      uses variable env::parent defined in env.c
      uses macro definition NULL defined in config.h
   function env_add(env,const char *,void *) in line 75
      protection public
      6 lines of code
      3 parameters
      1 conditional paths
      uses variable env::entries defined in env.c
      uses macro definition NULL defined in config.h
      uses function make_string_hash_table(region,int) defined in hash.c
      uses variable env::r defined in env.c
      uses function hash_table_insert(hash_table,hash_key,hash_data) defined in hash.c
   function env_scan(env,env_scanner *) in line 82
      protection public
      7 lines of code
      2 parameters
      1 conditional paths
      uses variable env::entries defined in env.c
      uses function hash_table_scan(hash_table,hash_table_scanner *) defined in hash.c
      uses variable hash_table_scanner::ht defined in hash.h
      uses macro definition NULL defined in config.h
   function env_next(env_scanner *,const char **,void **) in line 90
      protection public
      7 lines of code
      3 parameters
      1 conditional paths
      uses variable hash_table_scanner::ht defined in hash.h
      uses macro definition FALSE defined in bool.h
      uses function hash_table_next(hash_table_scanner *,hash_key *,hash_data *) defined in hash.c
   variable env::entries in line 27
      protection public
   variable env::parent in line 25
      protection public
   variable env::r in line 26
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cqual/cqual-0.981/src/env.h
module env.h
   typedef env in line 28
      protection public
   typedef env_scanner in line 56
      protection public
   function new_env(region,env) in line 32
      protection public
      10 lines of code
      2 parameters
      1 conditional paths
      uses macro definition ralloc defined in regions.h
      uses variable env::r defined in env.c
      uses variable env::parent defined in env.c
      uses variable env::entries defined in env.c
      uses macro definition NULL defined in config.h
   function env_parent(env) in line 37
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable env::parent defined in env.c
   function env_region(env) in line 40
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable env::r defined in env.c
   function env_lookup(env,const char *,bool) in line 45
      protection public
      13 lines of code
      3 parameters
      4 conditional paths
      uses variable env::entries defined in env.c
      uses function hash_table_lookup(hash_table,hash_key,hash_data *) defined in hash.c
      uses variable env::parent defined in env.c
      uses macro definition NULL defined in config.h
   function env_add(env,const char *,void *) in line 53
      protection public
      6 lines of code
      3 parameters
      2 conditional paths
      uses variable env::entries defined in env.c
      uses macro definition NULL defined in config.h
      uses function make_string_hash_table(region,int) defined in hash.c
      uses variable env::r defined in env.c
      uses function hash_table_insert(hash_table,hash_key,hash_data) defined in hash.c
   function env_scan(env,env_scanner *) in line 57
      protection public
      7 lines of code
      2 parameters
      2 conditional paths
      uses variable env::entries defined in env.c
      uses function hash_table_scan(hash_table,hash_table_scanner *) defined in hash.c
      uses variable hash_table_scanner::ht defined in hash.h
      uses macro definition NULL defined in config.h
   function env_next(env_scanner *,const char **,void **) in line 58
      protection public
      7 lines of code
      3 parameters
      2 conditional paths
      uses variable hash_table_scanner::ht defined in hash.h
      uses macro definition FALSE defined in bool.h
      uses function hash_table_next(hash_table_scanner *,hash_key *,hash_data *) defined in hash.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cqual/cqual-0.981/src/eq_expressions.c
module eq_expressions.c
   function equal_unary_expressions(unary,unary) in line 31
      protection public
      7 lines of code
      2 parameters
      2 conditional paths
      uses variable AST_unary::kind defined in AST_defs.h
      uses macro definition FALSE defined in bool.h
      uses function equal_expressions(expression,expression) defined in eq_expressions.c
      uses variable AST_unary::arg1 defined in AST_defs.h
   function equal_binary_expressions(binary,binary) in line 32
      protection public
      8 lines of code
      2 parameters
      2 conditional paths
      uses variable AST_binary::kind defined in AST_defs.h
      uses macro definition FALSE defined in bool.h
      uses function equal_expressions(expression,expression) defined in eq_expressions.c
      uses variable AST_binary::arg1 defined in AST_defs.h
      uses variable AST_binary::arg2 defined in AST_defs.h
   function equal_expressions(expression,expression) in line 34
      protection public
      90 lines of code
      2 parameters
      17 conditional paths
      uses variable AST_expression::kind defined in AST_defs.h
      uses macro definition FALSE defined in bool.h
      uses enumvalue kind_cast defined in AST_types.h
      uses macro definition CAST defined in AST.h
      uses variable AST_cast::arg1 defined in AST_defs.h
      uses enumvalue kind_conditional defined in AST_types.h
      uses variable AST_conditional::arg1 defined in AST_defs.h
      uses variable AST_conditional::condition defined in AST_defs.h
      uses variable AST_conditional::arg2 defined in AST_defs.h
      uses enumvalue kind_identifier defined in AST_types.h
      uses function root_ddecl(data_declaration) defined in analyze.c
      uses variable AST_identifier::ddecl defined in AST_defs.h
      uses enumvalue kind_function_call defined in AST_types.h
      uses variable AST_function_call::arg1 defined in AST_defs.h
      uses variable AST_function_call::args defined in AST_defs.h
      uses macro definition scan_expression defined in AST_defs.h
      uses variable AST_expression::next defined in AST_defs.h
      uses macro definition TRUE defined in bool.h
      uses enumvalue kind_field_ref defined in AST_types.h
      uses variable AST_field_ref::arg1 defined in AST_defs.h
      uses variable AST_field_ref::cstring defined in AST_defs.h
      uses variable cstring::data defined in cstring.h
      uses enumvalue kind_array_ref defined in AST_types.h
      uses variable AST_array_ref::arg1 defined in AST_defs.h
      uses variable AST_array_ref::arg2 defined in AST_defs.h
      uses enumvalue kind_lexical_cst defined in AST_types.h
      uses variable AST_lexical_cst::cstring defined in AST_defs.h
      uses macro definition is_unary defined in AST_types.h
      uses function equal_unary_expressions(unary,unary) defined in eq_expressions.c
      uses macro definition is_binary defined in AST_types.h
      uses function equal_binary_expressions(binary,binary) defined in eq_expressions.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cqual/cqual-0.981/src/errors.c
module errors.c
   variable errorcount in line 27
      protection public
   variable warningcount in line 28
      protection public
   variable last_error_function in line 56
      protection public
   variable last_error_tick in line 59
      protection public
   function count_error(int) in line 31
      protection public
      21 lines of code
      1 parameters
      4 conditional paths
      uses variable inhibit_warnings defined in flags.h
      uses variable warnings_are_errors defined in flags.h
      uses variable warningcount defined in errors.c
      uses variable progname defined in main.c
      uses variable errorcount defined in errors.c
   function print_error_function(char *) in line 65
      protection public
      19 lines of code
      1 parameters
      4 conditional paths
      uses variable last_error_function defined in errors.c
      uses variable current_function_decl defined in analyze.h
      uses macro definition NULL defined in config.h
      uses function declarator_name(declarator) defined in semantics.c
      uses variable AST_function_decl::declarator defined in AST_defs.h
   function report_error_function(char *) in line 88
      protection public
      21 lines of code
      1 parameters
      4 conditional paths
      uses function print_error_function(char *) defined in errors.c
      uses variable input_file_stack defined in input.c
      uses variable file_stack::next defined in input.h
      uses variable input_file_stack_tick defined in input.c
      uses variable last_error_tick defined in errors.c
      uses variable input_filename defined in input.c
      uses variable file_stack::name defined in input.h
      uses variable file_stack::line defined in input.h
   function pfile_and_line(FILE *,const char *,int) in line 111
      protection public
      4 lines of code
      3 parameters
      1 conditional paths
      uses function f(char *) defined in taint-const-subtyping.c
      uses variable filename defined in iquals.tab.c
      uses variable lineno defined in input.c
   function verror_with_file_and_line(const char *,int,const char *,va_list) in line 117
      protection public
      9 lines of code
      4 parameters
      1 conditional paths
      uses function count_error(int) defined in errors.c
      uses macro definition FALSE defined in bool.h
      uses function report_error_function(char *) defined in errors.c
      uses variable input_filename defined in input.c
      uses function pfile_and_line(FILE *,const char *,int) defined in errors.c
      uses variable filename defined in iquals.tab.c
      uses variable lineno defined in input.c
   function verror_with_location(location,const char *,va_list) in line 128
      protection public
      4 lines of code
      3 parameters
      1 conditional paths
      uses function verror_with_file_and_line(const char *,int,const char *,va_list) defined in errors.c
      uses variable Location::filename defined in location.h
      uses variable Location::lineno defined in location.h
   function verror_with_decl(declaration,const char *,va_list) in line 134
      protection public
      4 lines of code
      3 parameters
      1 conditional paths
      uses function verror_with_location(location,const char *,va_list) defined in errors.c
      uses variable AST_declaration::loc defined in AST_defs.h
   function verror(const char *,va_list) in line 140
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function verror_with_file_and_line(const char *,int,const char *,va_list) defined in errors.c
      uses variable input_filename defined in input.c
      uses variable lineno defined in input.c
   function error(const char *,...) in line 146
      protection public
      8 lines of code
      2 parameters
      1 conditional paths
      uses function verror(const char *,va_list) defined in errors.c
   function error_with_decl(declaration,const char *,...) in line 156
      protection public
      8 lines of code
      3 parameters
      1 conditional paths
      uses function verror_with_decl(declaration,const char *,va_list) defined in errors.c
   function error_with_location(location,const char *,...) in line 166
      protection public
      8 lines of code
      3 parameters
      1 conditional paths
      uses function verror_with_location(location,const char *,va_list) defined in errors.c
   function vfatal(const char *,va_list) in line 176
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses function verror(const char *,va_list) defined in errors.c
      uses macro definition FATAL_EXIT_CODE defined in config.h
   function fatal(const char *,...) in line 182
      protection public
      8 lines of code
      2 parameters
      1 conditional paths
   function vwarning_with_file_and_line(char *,int,const char *,va_list) in line 192
      protection public
      12 lines of code
      4 parameters
      1 conditional paths
      uses function count_error(int) defined in errors.c
      uses macro definition TRUE defined in bool.h
      uses function report_error_function(char *) defined in errors.c
      uses variable filename defined in iquals.tab.c
      uses function pfile_and_line(FILE *,const char *,int) defined in errors.c
      uses variable lineno defined in input.c
   function vwarning_with_location(location,const char *,va_list) in line 206
      protection public
      4 lines of code
      3 parameters
      1 conditional paths
      uses function vwarning_with_file_and_line(char *,int,const char *,va_list) defined in errors.c
      uses variable Location::filename defined in location.h
      uses variable Location::lineno defined in location.h
   function vwarning_with_decl(declaration,const char *,va_list) in line 212
      protection public
      4 lines of code
      3 parameters
      1 conditional paths
      uses function vwarning_with_location(location,const char *,va_list) defined in errors.c
      uses variable AST_declaration::loc defined in AST_defs.h
   function vwarning(const char *,va_list) in line 218
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function vwarning_with_file_and_line(char *,int,const char *,va_list) defined in errors.c
      uses variable input_filename defined in input.c
      uses variable lineno defined in input.c
   function warning(const char *,...) in line 224
      protection public
      8 lines of code
      2 parameters
      1 conditional paths
      uses function vwarning(const char *,va_list) defined in errors.c
   function warning_with_file_and_line(char *,int,const char *,...) in line 235
      protection public
      9 lines of code
      4 parameters
      1 conditional paths
      uses function vwarning_with_file_and_line(char *,int,const char *,va_list) defined in errors.c
      uses variable filename defined in iquals.tab.c
      uses variable lineno defined in input.c
   function warning_with_decl(declaration,const char *,...) in line 246
      protection public
      8 lines of code
      3 parameters
      1 conditional paths
      uses function vwarning_with_decl(declaration,const char *,va_list) defined in errors.c
   function warning_with_location(location,const char *,...) in line 256
      protection public
      8 lines of code
      3 parameters
      1 conditional paths
      uses function vwarning_with_location(location,const char *,va_list) defined in errors.c
   function warning_or_error(bool,const char *,...) in line 266
      protection public
      11 lines of code
      3 parameters
      1 conditional paths
      uses function vwarning(const char *,va_list) defined in errors.c
      uses function verror(const char *,va_list) defined in errors.c
   function warning_or_error_with_file_and_line(bool,char *,int,const char *,...) in line 280
      protection public
      13 lines of code
      5 parameters
      1 conditional paths
      uses function vwarning_with_file_and_line(char *,int,const char *,va_list) defined in errors.c
      uses variable filename defined in iquals.tab.c
      uses variable lineno defined in input.c
      uses function verror_with_file_and_line(const char *,int,const char *,va_list) defined in errors.c
   function warning_or_error_with_decl(bool,declaration,const char *,...) in line 295
      protection public
      12 lines of code
      4 parameters
      1 conditional paths
      uses function vwarning_with_decl(declaration,const char *,va_list) defined in errors.c
      uses function verror_with_decl(declaration,const char *,va_list) defined in errors.c
   function warning_or_error_with_location(bool,location,const char *,...) in line 309
      protection public
      12 lines of code
      4 parameters
      1 conditional paths
      uses function vwarning_with_location(location,const char *,va_list) defined in errors.c
      uses function verror_with_location(location,const char *,va_list) defined in errors.c
   function pedwarn(const char *,...) in line 323
      protection public
      11 lines of code
      2 parameters
      1 conditional paths
      uses variable flag_pedantic_errors defined in flags.h
      uses function verror(const char *,va_list) defined in errors.c
      uses function vwarning(const char *,va_list) defined in errors.c
   function pedwarn_with_decl(declaration,const char *,...) in line 336
      protection public
      11 lines of code
      3 parameters
      1 conditional paths
      uses variable flag_pedantic_errors defined in flags.h
      uses function verror_with_decl(declaration,const char *,va_list) defined in errors.c
      uses function vwarning_with_decl(declaration,const char *,va_list) defined in errors.c
   function pedwarn_with_location(location,const char *,...) in line 349
      protection public
      11 lines of code
      3 parameters
      1 conditional paths
      uses variable flag_pedantic_errors defined in flags.h
      uses function verror_with_location(location,const char *,va_list) defined in errors.c
      uses function vwarning_with_location(location,const char *,va_list) defined in errors.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cqual/cqual-0.981/src/errors.h
module errors.h
   variable errorcount in line 26
      protection public
   variable warningcount in line 27
      protection public
   function verror_with_file_and_line(const char *,int,const char *,va_list) in line 30
      protection public
      9 lines of code
      4 parameters
      1 conditional paths
      uses function count_error(int) defined in errors.c
      uses macro definition FALSE defined in bool.h
      uses function report_error_function(char *) defined in errors.c
      uses variable input_filename defined in input.c
      uses function pfile_and_line(FILE *,const char *,int) defined in errors.c
      uses variable filename defined in iquals.tab.c
      uses variable lineno defined in input.c
   function verror_with_location(location,const char *,va_list) in line 34
      protection public
      4 lines of code
      3 parameters
      1 conditional paths
      uses function verror_with_file_and_line(const char *,int,const char *,va_list) defined in errors.c
      uses variable Location::filename defined in location.h
      uses variable Location::lineno defined in location.h
   function verror_with_decl(declaration,const char *,va_list) in line 37
      protection public
      4 lines of code
      3 parameters
      1 conditional paths
      uses function verror_with_location(location,const char *,va_list) defined in errors.c
      uses variable AST_declaration::loc defined in AST_defs.h
   function verror(const char *,va_list) in line 40
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function verror_with_file_and_line(const char *,int,const char *,va_list) defined in errors.c
      uses variable input_filename defined in input.c
      uses variable lineno defined in input.c
   function error(const char *,...) in line 43
      protection public
      8 lines of code
      2 parameters
      1 conditional paths
      uses function verror(const char *,va_list) defined in errors.c
   function error_with_decl(declaration,const char *,...) in line 46
      protection public
      8 lines of code
      3 parameters
      1 conditional paths
      uses function verror_with_decl(declaration,const char *,va_list) defined in errors.c
   function error_with_location(location,const char *,...) in line 49
      protection public
      8 lines of code
      3 parameters
      1 conditional paths
      uses function verror_with_location(location,const char *,va_list) defined in errors.c
   function vfatal(const char *,va_list) in line 52
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses function verror(const char *,va_list) defined in errors.c
      uses macro definition FATAL_EXIT_CODE defined in config.h
   function fatal(const char *,...) in line 54
      protection public
      8 lines of code
      2 parameters
      1 conditional paths
      uses function vfatal(const char *,va_list) defined in errors.c
   function vwarning_with_file_and_line(char *,int,const char *,va_list) in line 57
      protection public
      12 lines of code
      4 parameters
      2 conditional paths
      uses function count_error(int) defined in errors.c
      uses macro definition TRUE defined in bool.h
      uses function report_error_function(char *) defined in errors.c
      uses variable filename defined in iquals.tab.c
      uses function pfile_and_line(FILE *,const char *,int) defined in errors.c
      uses variable lineno defined in input.c
   function vwarning_with_location(location,const char *,va_list) in line 61
      protection public
      4 lines of code
      3 parameters
      1 conditional paths
      uses function vwarning_with_file_and_line(char *,int,const char *,va_list) defined in errors.c
      uses variable Location::filename defined in location.h
      uses variable Location::lineno defined in location.h
   function vwarning_with_decl(declaration,const char *,va_list) in line 64
      protection public
      4 lines of code
      3 parameters
      1 conditional paths
      uses function vwarning_with_location(location,const char *,va_list) defined in errors.c
      uses variable AST_declaration::loc defined in AST_defs.h
   function vwarning(const char *,va_list) in line 67
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function vwarning_with_file_and_line(char *,int,const char *,va_list) defined in errors.c
      uses variable input_filename defined in input.c
      uses variable lineno defined in input.c
   function warning(const char *,...) in line 70
      protection public
      8 lines of code
      2 parameters
      1 conditional paths
      uses function vwarning(const char *,va_list) defined in errors.c
   function warning_with_file_and_line(char *,int,const char *,...) in line 74
      protection public
      9 lines of code
      4 parameters
      1 conditional paths
      uses function vwarning_with_file_and_line(char *,int,const char *,va_list) defined in errors.c
      uses variable filename defined in iquals.tab.c
      uses variable lineno defined in input.c
   function warning_with_decl(declaration,const char *,...) in line 78
      protection public
      8 lines of code
      3 parameters
      1 conditional paths
      uses function vwarning_with_decl(declaration,const char *,va_list) defined in errors.c
   function warning_with_location(location,const char *,...) in line 81
      protection public
      8 lines of code
      3 parameters
      1 conditional paths
      uses function vwarning_with_location(location,const char *,va_list) defined in errors.c
   function warning_or_error(bool,const char *,...) in line 84
      protection public
      11 lines of code
      3 parameters
      2 conditional paths
      uses function vwarning(const char *,va_list) defined in errors.c
      uses function verror(const char *,va_list) defined in errors.c
   function warning_or_error_with_file_and_line(bool,char *,int,const char *,...) in line 88
      protection public
      13 lines of code
      5 parameters
      2 conditional paths
      uses function vwarning_with_file_and_line(char *,int,const char *,va_list) defined in errors.c
      uses variable filename defined in iquals.tab.c
      uses variable lineno defined in input.c
      uses function verror_with_file_and_line(const char *,int,const char *,va_list) defined in errors.c
   function warning_or_error_with_decl(bool,declaration,const char *,...) in line 93
      protection public
      12 lines of code
      4 parameters
      2 conditional paths
      uses function vwarning_with_decl(declaration,const char *,va_list) defined in errors.c
      uses function verror_with_decl(declaration,const char *,va_list) defined in errors.c
   function warning_or_error_with_location(bool,location,const char *,...) in line 97
      protection public
      12 lines of code
      4 parameters
      2 conditional paths
      uses function vwarning_with_location(location,const char *,va_list) defined in errors.c
      uses function verror_with_location(location,const char *,va_list) defined in errors.c
   function pedwarn(const char *,...) in line 101
      protection public
      11 lines of code
      2 parameters
      2 conditional paths
      uses variable flag_pedantic_errors defined in flags.h
      uses function verror(const char *,va_list) defined in errors.c
      uses function vwarning(const char *,va_list) defined in errors.c
   function pedwarn_with_decl(declaration,const char *,...) in line 104
      protection public
      11 lines of code
      3 parameters
      2 conditional paths
      uses variable flag_pedantic_errors defined in flags.h
      uses function verror_with_decl(declaration,const char *,va_list) defined in errors.c
      uses function vwarning_with_decl(declaration,const char *,va_list) defined in errors.c
   function pedwarn_with_location(location,const char *,...) in line 107
      protection public
      11 lines of code
      3 parameters
      2 conditional paths
      uses variable flag_pedantic_errors defined in flags.h
      uses function verror_with_location(location,const char *,va_list) defined in errors.c
      uses function vwarning_with_location(location,const char *,va_list) defined in errors.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cqual/cqual-0.981/src/expr.c
module expr.c
   function alloca() in line 29
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function compatible_pointer_targets(type,type,bool) in line 49
      protection public
      10 lines of code
      3 parameters
      2 conditional paths
      uses function type_compatible_unqualified(type,type) defined in types.c
      uses variable pedantic defined in flags.h
      uses function pedwarn(const char *,...) defined in errors.c
   function compatible_pointer_types(type,type) in line 60
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses function compatible_pointer_targets(type,type,bool) defined in expr.c
      uses function type_points_to(type) defined in types.c
      uses variable pedantic defined in flags.h
   function warn_for_assignment(const char *,const char *,const char *,int) in line 66
      protection public
      26 lines of code
      4 parameters
      3 conditional paths
      uses function alloca() defined in expr.c
      uses function sprintf(char *,const char *,(null)) defined in rcs1.c
      uses function pedwarn(const char *,...) defined in errors.c
   function incomplete_type_error(expression,type) in line 93
      protection public
      28 lines of code
      2 parameters
      9 conditional paths
      uses variable error_type defined in types.c
      uses macro definition is_identifier defined in AST_types.h
      uses function error(const char *,...) defined in errors.c
      uses macro definition CAST defined in AST.h
      uses variable cstring::data defined in cstring.h
      uses function type_array(type) defined in types.c
      uses function type_array_size(type) defined in types.c
      uses function type_array_of(type) defined in types.c
      uses function type_struct(type) defined in types.c
      uses function type_tag(type) defined in types.c
      uses variable file_stack::name defined in input.h
      uses function type_union(type) defined in types.c
      uses function type_enum(type) defined in types.c
      uses function type_void(type) defined in types.c
   function require_complete_type(expression,type) in line 122
      protection public
      9 lines of code
      2 parameters
      2 conditional paths
      uses function type_incomplete(type) defined in types.c
      uses variable AST_expression::type defined in AST_defs.h
      uses function incomplete_type_error(expression,type) defined in expr.c
      uses variable error_type defined in types.c
   function default_conversion(expression) in line 132
      protection public
      48 lines of code
      1 parameters
      1 conditional paths
      uses variable AST_expression::type defined in AST_defs.h
      uses function type_enum(type) defined in types.c
      uses function type_tag(type) defined in types.c
      uses variable tag_declaration::reptype defined in decls.h
      uses function type_smallerthanint(type) defined in types.c
      uses variable flag_traditional defined in flags.h
      uses function type_unsigned(type) defined in types.c
      uses variable unsigned_int_type defined in types.c
      uses variable int_type defined in types.c
      uses variable flag_allow_single_precision defined in flags.h
      uses function type_float(type) defined in types.c
      uses variable double_type defined in types.c
      uses function type_void(type) defined in types.c
      uses function error(const char *,...) defined in errors.c
      uses variable error_type defined in types.c
      uses function type_function(type) defined in types.c
      uses variable AST_expression::cst defined in AST_defs.h
      uses variable AST_expression::static_address defined in AST_defs.h
      uses function make_pointer_type(type) defined in types.c
      uses function type_array(type) defined in types.c
      uses variable AST_expression::lvalue defined in AST_defs.h
      uses macro definition FALSE defined in bool.h
      uses function type_array_of(type) defined in types.c
   function default_conversion_for_assignment(expression) in line 181
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses function type_array(type) defined in types.c
      uses variable AST_expression::type defined in AST_defs.h
      uses function type_function(type) defined in types.c
      uses function default_conversion(expression) defined in expr.c
   function readonly_warning(expression,char *) in line 189
      protection public
      26 lines of code
      2 parameters
      4 conditional paths
      uses macro definition is_field_ref defined in AST_types.h
      uses macro definition CAST defined in AST.h
      uses function type_readonly(type) defined in types.c
      uses function strcat((null),(null)) defined in taint-poly.c
      uses function pedwarn(const char *,...) defined in errors.c
      uses macro definition is_identifier defined in AST_types.h
      uses variable cstring::data defined in cstring.h
   function check_writable_lvalue(expression,char *) in line 216
      protection public
      11 lines of code
      2 parameters
      3 conditional paths
      uses variable AST_expression::lvalue defined in AST_defs.h
      uses function type_array(type) defined in types.c
      uses variable AST_expression::type defined in AST_defs.h
      uses function error(const char *,...) defined in errors.c
      uses macro definition FALSE defined in bool.h
      uses function type_readonly(type) defined in types.c
      uses function readonly_warning(expression,char *) defined in expr.c
      uses macro definition TRUE defined in bool.h
   function check_conversion(type,type) in line 228
      protection public
      66 lines of code
      2 parameters
      1 conditional paths
      uses function type_equal_unqualified(type,type) defined in types.c
      uses macro definition TRUE defined in bool.h
      uses variable error_type defined in types.c
      uses macro definition FALSE defined in bool.h
      uses function type_void(type) defined in types.c
      uses function error(const char *,...) defined in errors.c
      uses function type_integer(type) defined in types.c
      uses function type_scalar(type) defined in types.c
      uses function type_pointer(type) defined in types.c
      uses function type_floating(type) defined in types.c
      uses function type_arithmetic(type) defined in types.c
      uses function type_complex(type) defined in types.c
   function assignable_pointer_targets(type,type,bool) in line 295
      protection public
      5 lines of code
      3 parameters
      1 conditional paths
      uses function type_void(type) defined in types.c
      uses function compatible_pointer_targets(type,type,bool) defined in expr.c
      uses variable pedantic defined in flags.h
   function ptrconversion_warnings(type,type,expression,const char *,const char *,int,bool) in line 301
      protection public
      44 lines of code
      7 parameters
      9 conditional paths
      uses variable pedantic defined in flags.h
      uses function type_void(type) defined in types.c
      uses function type_function(type) defined in types.c
      uses function definite_null(expression) defined in constants.c
      uses function warn_for_assignment(const char *,const char *,const char *,int) defined in expr.c
      uses function assignable_pointer_targets(type,type,bool) defined in expr.c
      uses macro definition FALSE defined in bool.h
   function check_assignment(type,type,expression,const char *,data_declaration,const char *,int) in line 347
      protection public
      139 lines of code
      7 parameters
      1 conditional paths
      uses function definite_zero(expression) defined in constants.c
      uses variable error_type defined in types.c
      uses macro definition FALSE defined in bool.h
      uses function type_void(type) defined in types.c
      uses function error(const char *,...) defined in errors.c
      uses function type_equal_unqualified(type,type) defined in types.c
      uses macro definition TRUE defined in bool.h
      uses function type_arithmetic(type) defined in types.c
      uses function constant_overflow_warning(known_cst) defined in constants.c
      uses variable AST_expression::cst defined in AST_defs.h
      uses function check_conversion(type,type) defined in expr.c
      uses function type_qualifiers(type) defined in types.c
      uses enumvalue transparent_qualifier defined in types.h
      uses function type_tag(type) defined in types.c
      uses macro definition NULL defined in config.h
      uses variable tag_declaration::fieldlist defined in decls.h
      uses variable field_declaration::next defined in decls.h
      uses variable field_declaration::type defined in decls.h
      uses function type_compatible(type,type) defined in types.c
      uses function type_pointer(type) defined in types.c
      uses function type_points_to(type) defined in types.c
      uses function assignable_pointer_targets(type,type,bool) defined in expr.c
      uses function type_function(type) defined in types.c
      uses function ptrconversion_warnings(type,type,expression,const char *,const char *,int,bool) defined in expr.c
      uses variable pedantic defined in flags.h
      uses variable data_declaration::in_system_header defined in decls.h
      uses function pedwarn(const char *,...) defined in errors.c
      uses function make_unsigned_type(type) defined in types.c
      uses function warn_for_assignment(const char *,const char *,const char *,int) defined in expr.c
      uses function type_integral(type) defined in types.c
   function make_error_expr(location) in line 487
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses macro definition CAST defined in AST.h
      uses function new_error_expr(region,location) defined in AST_defs.h
      uses variable parse_region defined in c-parse.h
      uses variable AST_expression::type defined in AST_defs.h
      uses variable error_type defined in types.c
   function make_comma(location,expression) in line 496
      protection public
      43 lines of code
      2 parameters
      1 conditional paths
      uses macro definition CAST defined in AST.h
      uses function new_comma(region,location,expression) defined in AST_defs.h
      uses variable parse_region defined in c-parse.h
      uses macro definition scan_expression defined in AST_defs.h
      uses variable AST_expression::next defined in AST_defs.h
      uses variable AST_expression::side_effects defined in AST_defs.h
      uses variable extra_warnings defined in flags.h
      uses variable warn_unused defined in flags.h
      uses function warning(const char *,...) defined in errors.c
      uses function type_array(type) defined in types.c
      uses variable AST_expression::type defined in AST_defs.h
      uses function default_conversion(expression) defined in expr.c
      uses variable pedantic defined in flags.h
      uses variable AST_expression::lvalue defined in AST_defs.h
      uses variable AST_expression::isregister defined in AST_defs.h
      uses variable AST_expression::bitfield defined in AST_defs.h
   function check_dereference(expression,type,const char *) in line 540
      protection public
      27 lines of code
      3 parameters
      5 conditional paths
      uses function type_pointer(type) defined in types.c
      uses function type_points_to(type) defined in types.c
      uses variable AST_expression::type defined in AST_defs.h
      uses function error(const char *,...) defined in errors.c
      uses function type_void(type) defined in types.c
      uses variable unevaluated_expression defined in c-parse.h
      uses function warning(const char *,...) defined in errors.c
      uses variable AST_expression::side_effects defined in AST_defs.h
      uses variable flag_volatile defined in flags.h
      uses variable error_type defined in types.c
      uses variable AST_expression::lvalue defined in AST_defs.h
      uses macro definition TRUE defined in bool.h
   function make_dereference(location,expression) in line 568
      protection public
      10 lines of code
      2 parameters
      1 conditional paths
      uses macro definition CAST defined in AST.h
      uses function new_dereference(region,location,expression) defined in AST_defs.h
      uses variable parse_region defined in c-parse.h
      uses variable AST_expression::side_effects defined in AST_defs.h
      uses function check_dereference(expression,type,const char *) defined in expr.c
      uses function default_conversion(expression) defined in expr.c
      uses variable AST_expression::static_address defined in AST_defs.h
      uses variable AST_expression::cst defined in AST_defs.h
   function make_extension_expr(location,expression) in line 579
      protection public
      14 lines of code
      2 parameters
      1 conditional paths
      uses macro definition CAST defined in AST.h
      uses function new_extension_expr(region,location,expression) defined in AST_defs.h
      uses variable parse_region defined in c-parse.h
      uses variable AST_expression::type defined in AST_defs.h
      uses variable AST_expression::lvalue defined in AST_defs.h
      uses variable AST_expression::side_effects defined in AST_defs.h
      uses variable AST_expression::cst defined in AST_defs.h
      uses variable AST_expression::bitfield defined in AST_defs.h
      uses variable AST_expression::isregister defined in AST_defs.h
      uses variable AST_expression::static_address defined in AST_defs.h
   function make_address_of(location,expression) in line 594
      protection public
      23 lines of code
      2 parameters
      5 conditional paths
      uses macro definition CAST defined in AST.h
      uses function new_address_of(region,location,expression) defined in AST_defs.h
      uses variable parse_region defined in c-parse.h
      uses variable AST_expression::type defined in AST_defs.h
      uses variable error_type defined in types.c
      uses variable AST_expression::bitfield defined in AST_defs.h
      uses function error(const char *,...) defined in errors.c
      uses variable AST_expression::isregister defined in AST_defs.h
      uses function pedwarn(const char *,...) defined in errors.c
      uses function type_function(type) defined in types.c
      uses variable AST_expression::lvalue defined in AST_defs.h
      uses function make_pointer_type(type) defined in types.c
      uses variable AST_expression::cst defined in AST_defs.h
      uses variable AST_expression::static_address defined in AST_defs.h
   function make_unary(location,int,expression) in line 618
      protection public
      68 lines of code
      3 parameters
      1 conditional paths
      uses enumvalue kind_address_of defined in AST_types.h
      uses function make_address_of(location,expression) defined in expr.c
      uses enumvalue kind_preincrement defined in AST_types.h
      uses function make_preincrement(location,expression) defined in expr.c
      uses enumvalue kind_predecrement defined in AST_types.h
      uses function make_predecrement(location,expression) defined in expr.c
      uses macro definition CAST defined in AST.h
      uses function newkind_unary(region,ast_kind,location,expression) defined in AST.c
      uses variable parse_region defined in c-parse.h
      uses function default_conversion(expression) defined in expr.c
      uses macro definition NULL defined in config.h
      uses variable error_type defined in types.c
      uses variable AST_expression::type defined in AST_defs.h
      uses enumvalue kind_unary_plus defined in AST_types.h
      uses function type_arithmetic(type) defined in types.c
      uses enumvalue kind_unary_minus defined in AST_types.h
      uses enumvalue kind_bitnot defined in AST_types.h
      uses function type_complex(type) defined in types.c
      uses variable AST_expression::kind defined in AST_defs.h
      uses enumvalue kind_conjugate defined in AST_types.h
      uses function type_integer(type) defined in types.c
      uses enumvalue kind_not defined in AST_types.h
      uses function type_scalar(type) defined in types.c
      uses variable int_type defined in types.c
      uses enumvalue kind_realpart defined in AST_types.h
      uses enumvalue kind_imagpart defined in AST_types.h
      uses function make_base_type(type) defined in types.c
      uses function error(const char *,...) defined in errors.c
      uses variable AST_expression::cst defined in AST_defs.h
      uses function fold_unary(expression) defined in constants.c
   function make_label_address(location,id_label) in line 687
      protection public
      14 lines of code
      2 parameters
      1 conditional paths
      uses macro definition CAST defined in AST.h
      uses function new_label_address(region,location,id_label) defined in AST_defs.h
      uses variable parse_region defined in c-parse.h
      uses function use_label(id_label) defined in stmt.c
      uses variable AST_expression::type defined in AST_defs.h
      uses variable ptr_void_type defined in types.c
      uses variable AST_expression::cst defined in AST_defs.h
      uses function fold_label_address(expression) defined in constants.c
      uses variable pedantic defined in flags.h
      uses function pedwarn(const char *,...) defined in errors.c
   function check_sizeof(expression,type) in line 702
      protection public
      18 lines of code
      2 parameters
      6 conditional paths
      uses function type_function(type) defined in types.c
      uses variable pedantic defined in flags.h
      uses variable warn_pointer_arith defined in flags.h
      uses function pedwarn(const char *,...) defined in errors.c
      uses function type_void(type) defined in types.c
      uses function type_incomplete(type) defined in types.c
      uses function error(const char *,...) defined in errors.c
      uses variable AST_expression::type defined in AST_defs.h
      uses variable size_t_type defined in types.c
      uses variable AST_expression::cst defined in AST_defs.h
      uses function fold_sizeof(expression,type) defined in constants.c
   function make_sizeof_expr(location,expression) in line 721
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
      uses macro definition CAST defined in AST.h
      uses function new_sizeof_expr(region,location,expression) defined in AST_defs.h
      uses variable parse_region defined in c-parse.h
      uses function check_sizeof(expression,type) defined in expr.c
      uses variable AST_expression::type defined in AST_defs.h
   function make_sizeof_type(location,asttype) in line 728
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
      uses macro definition CAST defined in AST.h
      uses function new_sizeof_type(region,location,asttype) defined in AST_defs.h
      uses variable parse_region defined in c-parse.h
      uses function check_sizeof(expression,type) defined in expr.c
      uses variable AST_asttype::type defined in AST_defs.h
   function make_alignof_expr(location,expression) in line 735
      protection public
      9 lines of code
      2 parameters
      1 conditional paths
      uses macro definition CAST defined in AST.h
      uses function new_alignof_expr(region,location,expression) defined in AST_defs.h
      uses variable parse_region defined in c-parse.h
      uses variable AST_expression::type defined in AST_defs.h
      uses variable size_t_type defined in types.c
      uses variable AST_expression::cst defined in AST_defs.h
      uses function fold_alignof(expression,type) defined in constants.c
   function make_alignof_type(location,asttype) in line 745
      protection public
      9 lines of code
      2 parameters
      1 conditional paths
      uses macro definition CAST defined in AST.h
      uses function new_alignof_type(region,location,asttype) defined in AST_defs.h
      uses variable parse_region defined in c-parse.h
      uses variable AST_expression::type defined in AST_defs.h
      uses variable size_t_type defined in types.c
      uses variable AST_expression::cst defined in AST_defs.h
      uses function fold_alignof(expression,type) defined in constants.c
      uses variable AST_asttype::type defined in AST_defs.h
   function make_cast(location,asttype,expression) in line 755
      protection public
      113 lines of code
      3 parameters
      1 conditional paths
      uses macro definition CAST defined in AST.h
      uses function new_cast(region,location,expression,asttype) defined in AST_defs.h
      uses variable parse_region defined in c-parse.h
      uses variable AST_asttype::type defined in AST_defs.h
      uses variable error_type defined in types.c
      uses function type_void(type) defined in types.c
      uses function type_array(type) defined in types.c
      uses function error(const char *,...) defined in errors.c
      uses function type_function(type) defined in types.c
      uses function type_equal_unqualified(type,type) defined in types.c
      uses variable AST_expression::type defined in AST_defs.h
      uses variable pedantic defined in flags.h
      uses function type_aggregate(type) defined in types.c
      uses function pedwarn(const char *,...) defined in errors.c
      uses function default_conversion(expression) defined in expr.c
      uses function type_union(type) defined in types.c
      uses function type_tag(type) defined in types.c
      uses variable tag_declaration::fieldlist defined in decls.h
      uses variable field_declaration::next defined in decls.h
      uses variable field_declaration::name defined in decls.h
      uses variable field_declaration::type defined in decls.h
      uses variable warn_cast_qual defined in flags.h
      uses function type_pointer(type) defined in types.c
      uses function type_points_to(type) defined in types.c
      uses variable warn_bad_function_cast defined in flags.h
      uses macro definition is_function_call defined in AST_types.h
      uses function warning(const char *,...) defined in errors.c
      uses variable warn_cast_align defined in flags.h
      uses function check_conversion(type,type) defined in expr.c
      uses variable AST_expression::lvalue defined in AST_defs.h
      uses variable AST_expression::isregister defined in AST_defs.h
      uses variable AST_expression::bitfield defined in AST_defs.h
      uses variable AST_expression::static_address defined in AST_defs.h
      uses variable AST_expression::cst defined in AST_defs.h
      uses function fold_cast(expression) defined in constants.c
   function pointer_int_sum(type,type) in line 869
      protection public
      19 lines of code
      2 parameters
      6 conditional paths
      uses function type_points_to(type) defined in types.c
      uses function type_void(type) defined in types.c
      uses variable pedantic defined in flags.h
      uses variable warn_pointer_arith defined in flags.h
      uses function pedwarn(const char *,...) defined in errors.c
      uses function type_function(type) defined in types.c
      uses function type_incomplete(type) defined in types.c
      uses function error(const char *,...) defined in errors.c
   function valid_compare(type,type,expression) in line 889
      protection public
      10 lines of code
      3 parameters
      3 conditional paths
      uses function type_void(type) defined in types.c
      uses function type_points_to(type) defined in types.c
      uses variable pedantic defined in flags.h
      uses function type_function(type) defined in types.c
      uses function definite_null(expression) defined in constants.c
      uses function pedwarn(const char *,...) defined in errors.c
      uses macro definition TRUE defined in bool.h
      uses macro definition FALSE defined in bool.h
   function check_binary(int,expression,expression) in line 900
      protection public
      127 lines of code
      3 parameters
      54 conditional paths
      uses function default_conversion(expression) defined in expr.c
      uses macro definition NULL defined in config.h
      uses macro definition FALSE defined in bool.h
      uses variable error_type defined in types.c
      uses enumvalue kind_plus defined in AST_types.h
      uses function type_pointer(type) defined in types.c
      uses function type_integer(type) defined in types.c
      uses function pointer_int_sum(type,type) defined in expr.c
      uses macro definition TRUE defined in bool.h
      uses enumvalue kind_minus defined in AST_types.h
      uses function compatible_pointer_types(type,type) defined in expr.c
      uses variable ptrdiff_t_type defined in types.c
      uses enumvalue kind_plus_assign defined in AST_types.h
      uses enumvalue kind_minus_assign defined in AST_types.h
      uses enumvalue kind_times defined in AST_types.h
      uses enumvalue kind_divide defined in AST_types.h
      uses enumvalue kind_times_assign defined in AST_types.h
      uses enumvalue kind_divide_assign defined in AST_types.h
      uses enumvalue kind_modulo defined in AST_types.h
      uses enumvalue kind_bitand defined in AST_types.h
      uses enumvalue kind_bitor defined in AST_types.h
      uses enumvalue kind_bitxor defined in AST_types.h
      uses enumvalue kind_lshift defined in AST_types.h
      uses enumvalue kind_rshift defined in AST_types.h
      uses enumvalue kind_modulo_assign defined in AST_types.h
      uses enumvalue kind_bitand_assign defined in AST_types.h
      uses enumvalue kind_bitor_assign defined in AST_types.h
      uses enumvalue kind_bitxor_assign defined in AST_types.h
      uses enumvalue kind_lshift_assign defined in AST_types.h
      uses enumvalue kind_rshift_assign defined in AST_types.h
      uses function common_type(type,type) defined in types.c
      uses enumvalue kind_leq defined in AST_types.h
      uses enumvalue kind_geq defined in AST_types.h
      uses enumvalue kind_lt defined in AST_types.h
      uses enumvalue kind_gt defined in AST_types.h
      uses variable int_type defined in types.c
      uses function type_real(type) defined in types.c
      uses function type_incomplete(type) defined in types.c
      uses function pedwarn(const char *,...) defined in errors.c
      uses variable pedantic defined in flags.h
      uses function type_function(type) defined in types.c
      uses function type_points_to(type) defined in types.c
      uses function definite_zero(expression) defined in constants.c
      uses variable extra_warnings defined in flags.h
      uses variable flag_traditional defined in flags.h
      uses enumvalue kind_eq defined in AST_types.h
      uses enumvalue kind_ne defined in AST_types.h
      uses function type_arithmetic(type) defined in types.c
      uses function valid_compare(type,type,expression) defined in expr.c
      uses function definite_null(expression) defined in constants.c
      uses enumvalue kind_andand defined in AST_types.h
      uses enumvalue kind_oror defined in AST_types.h
      uses function type_scalar(type) defined in types.c
      uses function error(const char *,...) defined in errors.c
      uses function binary_op_name(ast_kind) defined in analyze.c
   function make_binary(location,int,expression,expression) in line 1028
      protection public
      19 lines of code
      4 parameters
      1 conditional paths
      uses macro definition CAST defined in AST.h
      uses function newkind_binary(region,ast_kind,location,expression,expression) defined in AST.c
      uses variable parse_region defined in c-parse.h
      uses variable AST_expression::type defined in AST_defs.h
      uses function check_binary(int,expression,expression) defined in expr.c
      uses variable error_type defined in types.c
      uses variable AST_expression::cst defined in AST_defs.h
      uses function fold_binary(type,expression) defined in constants.c
   function voidstar_conditional(type,type) in line 1048
      protection public
      10 lines of code
      2 parameters
      3 conditional paths
      uses function type_void(type) defined in types.c
      uses variable pedantic defined in flags.h
      uses function type_function(type) defined in types.c
      uses function pedwarn(const char *,...) defined in errors.c
      uses macro definition TRUE defined in bool.h
      uses macro definition FALSE defined in bool.h
   function pointerint_conditional(type,type,expression) in line 1059
      protection public
      10 lines of code
      3 parameters
      3 conditional paths
      uses function type_pointer(type) defined in types.c
      uses function type_integer(type) defined in types.c
      uses function definite_zero(expression) defined in constants.c
      uses function pedwarn(const char *,...) defined in errors.c
      uses macro definition TRUE defined in bool.h
      uses macro definition FALSE defined in bool.h
   function make_conditional(location,expression,expression,expression) in line 1070
      protection public
      90 lines of code
      4 parameters
      1 conditional paths
      uses macro definition CAST defined in AST.h
      uses function new_conditional(region,location,expression,expression,expression) defined in AST_defs.h
      uses variable parse_region defined in c-parse.h
      uses macro definition NULL defined in config.h
      uses macro definition FALSE defined in bool.h
      uses function default_conversion(expression) defined in expr.c
      uses function type_void(type) defined in types.c
      uses variable error_type defined in types.c
      uses function type_equal(type,type) defined in types.c
      uses function type_equal_unqualified(type,type) defined in types.c
      uses function make_qualified_type(type,type_quals,user_qual_list) defined in types.c
      uses enumvalue no_qualifiers defined in types.h
      uses function type_real(type) defined in types.c
      uses function common_type(type,type) defined in types.c
      uses variable pedantic defined in flags.h
      uses function pedwarn(const char *,...) defined in errors.c
      uses variable void_type defined in types.c
      uses function type_pointer(type) defined in types.c
      uses function type_points_to(type) defined in types.c
      uses function compatible_pointer_types(type,type) defined in expr.c
      uses function definite_null(expression) defined in constants.c
      uses function voidstar_conditional(type,type) defined in expr.c
      uses function make_pointer_type(type) defined in types.c
      uses function qualify_type2(type,type,type) defined in types.c
      uses function pointerint_conditional(type,type,expression) defined in expr.c
      uses variable flag_cond_mismatch defined in flags.h
      uses function error(const char *,...) defined in errors.c
      uses variable AST_expression::type defined in AST_defs.h
      uses variable AST_expression::lvalue defined in AST_defs.h
      uses variable AST_expression::isregister defined in AST_defs.h
      uses variable AST_expression::bitfield defined in AST_defs.h
      uses variable AST_expression::cst defined in AST_defs.h
      uses function fold_conditional(expression) defined in constants.c
   function make_assign(location,int,expression,expression) in line 1161
      protection public
      29 lines of code
      4 parameters
      1 conditional paths
      uses macro definition CAST defined in AST.h
      uses function newkind_binary(region,ast_kind,location,expression,expression) defined in AST.c
      uses variable parse_region defined in c-parse.h
      uses function require_complete_type(expression,type) defined in expr.c
      uses variable AST_expression::type defined in AST_defs.h
      uses variable error_type defined in types.c
      uses enumvalue kind_assign defined in AST_types.h
      uses function default_conversion_for_assignment(expression) defined in expr.c
      uses function check_binary(int,expression,expression) defined in expr.c
      uses macro definition NULL defined in config.h
      uses function check_writable_lvalue(expression,char *) defined in expr.c
      uses function check_assignment(type,type,expression,const char *,data_declaration,const char *,int) defined in expr.c
      uses function make_qualified_type(type,type_quals,user_qual_list) defined in types.c
      uses enumvalue no_qualifiers defined in types.h
   function make_identifier(location,cstring,bool) in line 1191
      protection public
      46 lines of code
      3 parameters
      1 conditional paths
      uses function lookup_id(const char *,bool) defined in semantics.c
      uses macro definition FALSE defined in bool.h
      uses function new_identifier(region,location,cstring,data_declaration) defined in AST_defs.h
      uses variable parse_region defined in c-parse.h
      uses macro definition NULL defined in config.h
      uses variable data_declaration::islimbo defined in decls.h
      uses function implicitly_declare(identifier) defined in semantics.c
      uses variable current_function_decl defined in analyze.h
      uses function error(const char *,...) defined in errors.c
      uses function env_lookup(env,const char *,bool) defined in env.c
      uses variable AST_function_decl::undeclared_variables defined in AST_defs.h
      uses function env_add(env,const char *,void *) defined in env.c
      uses macro definition TRUE defined in bool.h
      uses variable bad_decl defined in decls.h
      uses variable AST_identifier::type defined in AST_defs.h
      uses variable data_declaration::type defined in decls.h
      uses variable AST_identifier::lvalue defined in AST_defs.h
      uses variable data_declaration::kind defined in decls.h
      uses enumvalue decl_variable defined in decls.h
      uses enumvalue decl_magic_string defined in decls.h
      uses variable AST_identifier::cst defined in AST_defs.h
      uses function fold_identifier(expression,data_declaration) defined in constants.c
      uses macro definition CAST defined in AST.h
      uses variable AST_identifier::isregister defined in AST_defs.h
      uses variable data_declaration::vtype defined in decls.h
      uses variable AST_identifier::static_address defined in AST_defs.h
      uses function foldaddress_identifier(expression,data_declaration) defined in constants.c
      uses variable AST_identifier::ddecl defined in AST_defs.h
      uses variable data_declaration::isused defined in decls.h
   function make_compound_expr(location,statement) in line 1238
      protection public
      18 lines of code
      2 parameters
      1 conditional paths
      uses macro definition is_error_stmt defined in AST_types.h
      uses function make_error_expr(location) defined in expr.c
      uses macro definition CAST defined in AST.h
      uses function new_compound_expr(region,location,statement) defined in AST_defs.h
      uses variable parse_region defined in c-parse.h
      uses function last_node(node) defined in AST.c
      uses variable AST_compound_stmt::stmts defined in AST_defs.h
      uses macro definition is_expression_stmt defined in AST_types.h
      uses variable AST_expression::type defined in AST_defs.h
      uses variable void_type defined in types.c
   function check_arguments(type,expression,data_declaration,const char *) in line 1257
      protection public
      82 lines of code
      4 parameters
      16 conditional paths
      uses function type_function_oldstyle(type) defined in types.c
      uses function typelist_scan(typelist,typelist_scanner *) defined in types.c
      uses function type_function_arguments(type) defined in types.c
      uses function typelist_next(typelist_scanner *) defined in types.c
      uses variable AST_expression::type defined in AST_defs.h
      uses function type_incomplete(type) defined in types.c
      uses function error(const char *,...) defined in errors.c
      uses variable warn_conversion defined in flags.h
      uses function type_integer(type) defined in types.c
      uses function type_floating(type) defined in types.c
      uses function warn_for_assignment(const char *,const char *,const char *,int) defined in expr.c
      uses macro definition NULL defined in config.h
      uses variable file_stack::name defined in input.h
      uses function type_complex(type) defined in types.c
      uses function type_float(type) defined in types.c
      uses function default_conversion(expression) defined in expr.c
      uses function type_enum(type) defined in types.c
      uses function type_equal_unqualified(type,type) defined in types.c
      uses function check_assignment(type,type,expression,const char *,data_declaration,const char *,int) defined in expr.c
      uses function default_conversion_for_assignment(expression) defined in expr.c
      uses macro definition CAST defined in AST.h
      uses variable AST_expression::next defined in AST_defs.h
      uses function type_function_varargs(type) defined in types.c
      uses function require_complete_type(expression,type) defined in expr.c
   function make_function_call(location,expression,expression) in line 1340
      protection public
      38 lines of code
      3 parameters
      1 conditional paths
      uses macro definition CAST defined in AST.h
      uses function new_function_call(region,location,expression,expression,asttype) defined in AST_defs.h
      uses variable parse_region defined in c-parse.h
      uses macro definition NULL defined in config.h
      uses function default_conversion(expression) defined in expr.c
      uses variable AST_expression::type defined in AST_defs.h
      uses variable error_type defined in types.c
      uses function type_pointer(type) defined in types.c
      uses function type_function(type) defined in types.c
      uses function type_points_to(type) defined in types.c
      uses function error(const char *,...) defined in errors.c
      uses macro definition is_identifier defined in AST_types.h
      uses variable AST_identifier::ddecl defined in AST_defs.h
      uses variable data_declaration::kind defined in decls.h
      uses enumvalue decl_function defined in decls.h
      uses variable AST_identifier::cstring defined in AST_defs.h
      uses variable cstring::data defined in cstring.h
      uses function check_arguments(type,expression,data_declaration,const char *) defined in expr.c
      uses function type_function_return_type(type) defined in types.c
      uses function type_void(type) defined in types.c
      uses function require_complete_type(expression,type) defined in expr.c
   function make_va_arg(location,expression,asttype) in line 1379
      protection public
      23 lines of code
      3 parameters
      1 conditional paths
      uses function build_identifier(region,location,data_declaration) defined in AST_utils.c
      uses variable parse_region defined in c-parse.h
      uses variable builtin_va_arg_decl defined in semantics.c
      uses macro definition CAST defined in AST.h
      uses function new_function_call(region,location,expression,expression,asttype) defined in AST_defs.h
      uses function type_equal_unqualified(type,type) defined in types.c
      uses variable AST_expression::type defined in AST_defs.h
      uses variable builtin_va_list_type defined in semantics.c
      uses function error(const char *,...) defined in errors.c
      uses function type_self_promoting(type) defined in types.c
      uses macro definition TRUE defined in bool.h
   function make_array_ref(location,expression,expression) in line 1403
      protection public
      49 lines of code
      3 parameters
      1 conditional paths
      uses macro definition CAST defined in AST.h
      uses function new_array_ref(region,location,expression,expression) defined in AST_defs.h
      uses variable parse_region defined in c-parse.h
      uses function default_conversion(expression) defined in expr.c
      uses variable warn_char_subscripts defined in flags.h
      uses function type_char(type) defined in types.c
      uses variable AST_expression::type defined in AST_defs.h
      uses function warning(const char *,...) defined in errors.c
      uses function type_array(type) defined in types.c
      uses variable pedantic defined in flags.h
      uses function pedwarn(const char *,...) defined in errors.c
      uses function make_pointer_type(type) defined in types.c
      uses function type_array_of(type) defined in types.c
      uses function type_integer(type) defined in types.c
      uses function type_pointer(type) defined in types.c
      uses function type_function(type) defined in types.c
      uses function type_points_to(type) defined in types.c
      uses function error(const char *,...) defined in errors.c
      uses variable error_type defined in types.c
      uses variable AST_expression::lvalue defined in AST_defs.h
      uses macro definition TRUE defined in bool.h
      uses function check_dereference(expression,type,const char *) defined in expr.c
      uses variable AST_expression::static_address defined in AST_defs.h
      uses function fold_binary(type,expression) defined in constants.c
   function make_field_ref(location,expression,cstring,location) in line 1453
      protection public
      38 lines of code
      4 parameters
      1 conditional paths
      uses macro definition CAST defined in AST.h
      uses function new_field_ref(region,location,expression,cstring,location) defined in AST_defs.h
      uses variable parse_region defined in c-parse.h
      uses variable AST_expression::type defined in AST_defs.h
      uses variable error_type defined in types.c
      uses function type_aggregate(type) defined in types.c
      uses function type_tag(type) defined in types.c
      uses variable tag_declaration::defined defined in decls.h
      uses function incomplete_type_error(expression,type) defined in expr.c
      uses macro definition NULL defined in config.h
      uses function env_lookup(env,const char *,bool) defined in env.c
      uses variable tag_declaration::fields defined in decls.h
      uses macro definition FALSE defined in bool.h
      uses function error(const char *,...) defined in errors.c
      uses function type_struct(type) defined in types.c
      uses function qualify_type2(type,type,type) defined in types.c
      uses variable field_declaration::type defined in decls.h
      uses variable AST_expression::bitfield defined in AST_defs.h
      uses variable field_declaration::bitwidth defined in decls.h
      uses variable AST_expression::static_address defined in AST_defs.h
      uses function foldaddress_field_ref(known_cst,field_declaration) defined in constants.c
      uses variable AST_expression::lvalue defined in AST_defs.h
   function increment(unary,char *) in line 1492
      protection public
      23 lines of code
      2 parameters
      5 conditional paths
      uses variable AST_unary::arg1 defined in AST_defs.h
      uses variable AST_expression::type defined in AST_defs.h
      uses variable AST_unary::type defined in AST_defs.h
      uses variable error_type defined in types.c
      uses function type_scalar(type) defined in types.c
      uses function error(const char *,...) defined in errors.c
      uses variable file_stack::name defined in input.h
      uses function type_incomplete(type) defined in types.c
      uses function type_pointer(type) defined in types.c
      uses variable pedantic defined in flags.h
      uses variable warn_pointer_arith defined in flags.h
      uses function type_void(type) defined in types.c
      uses function type_points_to(type) defined in types.c
      uses function type_function(type) defined in types.c
      uses function pedwarn(const char *,...) defined in errors.c
      uses function check_writable_lvalue(expression,char *) defined in expr.c
      uses macro definition CAST defined in AST.h
   function make_postincrement(location,expression) in line 1516
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses function increment(unary,char *) defined in expr.c
      uses macro definition CAST defined in AST.h
      uses function new_postincrement(region,location,expression) defined in AST_defs.h
      uses variable parse_region defined in c-parse.h
   function make_preincrement(location,expression) in line 1522
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses function increment(unary,char *) defined in expr.c
      uses macro definition CAST defined in AST.h
      uses function new_preincrement(region,location,expression) defined in AST_defs.h
      uses variable parse_region defined in c-parse.h
   function make_postdecrement(location,expression) in line 1528
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses function increment(unary,char *) defined in expr.c
      uses macro definition CAST defined in AST.h
      uses function new_postdecrement(region,location,expression) defined in AST_defs.h
      uses variable parse_region defined in c-parse.h
   function make_predecrement(location,expression) in line 1534
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses function increment(unary,char *) defined in expr.c
      uses macro definition CAST defined in AST.h
      uses function new_predecrement(region,location,expression) defined in AST_defs.h
      uses variable parse_region defined in c-parse.h
   function extract_strings(expression,wchar_t *,bool *) in line 1540
      protection public
      40 lines of code
      3 parameters
      4 conditional paths
      uses macro definition FALSE defined in bool.h
      uses macro definition scan_expression defined in AST_defs.h
      uses function type_equal(type,type) defined in types.c
      uses function type_array_of(type) defined in types.c
      uses variable AST_expression::type defined in AST_defs.h
      uses variable char_type defined in types.c
      uses macro definition TRUE defined in bool.h
      uses macro definition is_identifier defined in AST_types.h
      uses macro definition CAST defined in AST.h
      uses variable data_declaration::chars defined in decls.h
      uses variable data_declaration::chars_length defined in decls.h
      uses variable AST_string_cst::chars defined in AST_defs.h
      uses variable AST_string_cst::length defined in AST_defs.h
   function make_string(location,expression) in line 1581
      protection public
      15 lines of code
      2 parameters
      1 conditional paths
      uses function new_string(region,location,expression,data_declaration) defined in AST_defs.h
      uses variable parse_region defined in c-parse.h
      uses macro definition NULL defined in config.h
      uses function extract_strings(expression,wchar_t *,bool *) defined in expr.c
      uses variable AST_string::ddecl defined in AST_defs.h
      uses function declare_string(const char *,bool,size_t) defined in semantics.c
      uses variable AST_string::type defined in AST_defs.h
      uses variable data_declaration::type defined in decls.h
      uses variable data_declaration::chars defined in decls.h
      uses variable AST_string::static_address defined in AST_defs.h
      uses function foldaddress_string(string) defined in constants.c
      uses variable AST_string::lvalue defined in AST_defs.h
      uses macro definition TRUE defined in bool.h
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cqual/cqual-0.981/src/expr.h
module expr.h
   function make_error_expr(location) in line 26
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses macro definition CAST defined in AST.h
      uses function new_error_expr(region,location) defined in AST_defs.h
      uses variable parse_region defined in c-parse.h
      uses variable AST_expression::type defined in AST_defs.h
      uses variable error_type defined in types.c
   function make_comma(location,expression) in line 28
      protection public
      43 lines of code
      2 parameters
      7 conditional paths
      uses macro definition CAST defined in AST.h
      uses function new_comma(region,location,expression) defined in AST_defs.h
      uses variable parse_region defined in c-parse.h
      uses macro definition scan_expression defined in AST_defs.h
      uses variable AST_expression::next defined in AST_defs.h
      uses variable AST_expression::side_effects defined in AST_defs.h
      uses variable extra_warnings defined in flags.h
      uses variable warn_unused defined in flags.h
      uses function warning(const char *,...) defined in errors.c
      uses function type_array(type) defined in types.c
      uses variable AST_expression::type defined in AST_defs.h
      uses function default_conversion(expression) defined in expr.c
      uses variable pedantic defined in flags.h
      uses variable AST_expression::lvalue defined in AST_defs.h
      uses variable AST_expression::isregister defined in AST_defs.h
      uses variable AST_expression::bitfield defined in AST_defs.h
   function make_dereference(location,expression) in line 29
      protection public
      10 lines of code
      2 parameters
      1 conditional paths
      uses macro definition CAST defined in AST.h
      uses function new_dereference(region,location,expression) defined in AST_defs.h
      uses variable parse_region defined in c-parse.h
      uses variable AST_expression::side_effects defined in AST_defs.h
      uses function default_conversion(expression) defined in expr.c
      uses variable AST_expression::static_address defined in AST_defs.h
      uses variable AST_expression::cst defined in AST_defs.h
   function make_extension_expr(location,expression) in line 30
      protection public
      14 lines of code
      2 parameters
      1 conditional paths
      uses macro definition CAST defined in AST.h
      uses function new_extension_expr(region,location,expression) defined in AST_defs.h
      uses variable parse_region defined in c-parse.h
      uses variable AST_expression::type defined in AST_defs.h
      uses variable AST_expression::lvalue defined in AST_defs.h
      uses variable AST_expression::side_effects defined in AST_defs.h
      uses variable AST_expression::cst defined in AST_defs.h
      uses variable AST_expression::bitfield defined in AST_defs.h
      uses variable AST_expression::isregister defined in AST_defs.h
      uses variable AST_expression::static_address defined in AST_defs.h
   function make_unary(location,int,expression) in line 31
      protection public
      68 lines of code
      3 parameters
      19 conditional paths
      uses enumvalue kind_address_of defined in AST_types.h
      uses function make_address_of(location,expression) defined in expr.c
      uses enumvalue kind_preincrement defined in AST_types.h
      uses function make_preincrement(location,expression) defined in expr.c
      uses enumvalue kind_predecrement defined in AST_types.h
      uses function make_predecrement(location,expression) defined in expr.c
      uses macro definition CAST defined in AST.h
      uses function newkind_unary(region,ast_kind,location,expression) defined in AST.c
      uses variable parse_region defined in c-parse.h
      uses function default_conversion(expression) defined in expr.c
      uses macro definition NULL defined in config.h
      uses variable error_type defined in types.c
      uses variable AST_expression::type defined in AST_defs.h
      uses enumvalue kind_unary_plus defined in AST_types.h
      uses function type_arithmetic(type) defined in types.c
      uses enumvalue kind_unary_minus defined in AST_types.h
      uses enumvalue kind_bitnot defined in AST_types.h
      uses function type_complex(type) defined in types.c
      uses variable AST_expression::kind defined in AST_defs.h
      uses enumvalue kind_conjugate defined in AST_types.h
      uses function type_integer(type) defined in types.c
      uses enumvalue kind_not defined in AST_types.h
      uses function type_scalar(type) defined in types.c
      uses variable int_type defined in types.c
      uses enumvalue kind_realpart defined in AST_types.h
      uses enumvalue kind_imagpart defined in AST_types.h
      uses function make_base_type(type) defined in types.c
      uses function error(const char *,...) defined in errors.c
      uses variable AST_expression::cst defined in AST_defs.h
      uses function fold_unary(expression) defined in constants.c
   function make_label_address(location,id_label) in line 32
      protection public
      14 lines of code
      2 parameters
      2 conditional paths
      uses macro definition CAST defined in AST.h
      uses function new_label_address(region,location,id_label) defined in AST_defs.h
      uses variable parse_region defined in c-parse.h
      uses function use_label(id_label) defined in stmt.c
      uses variable AST_expression::type defined in AST_defs.h
      uses variable ptr_void_type defined in types.c
      uses variable AST_expression::cst defined in AST_defs.h
      uses function fold_label_address(expression) defined in constants.c
      uses variable pedantic defined in flags.h
      uses function pedwarn(const char *,...) defined in errors.c
   function make_sizeof_expr(location,expression) in line 33
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
      uses macro definition CAST defined in AST.h
      uses function new_sizeof_expr(region,location,expression) defined in AST_defs.h
      uses variable parse_region defined in c-parse.h
      uses function check_sizeof(expression,type) defined in expr.c
      uses variable AST_expression::type defined in AST_defs.h
   function make_sizeof_type(location,asttype) in line 34
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
      uses macro definition CAST defined in AST.h
      uses function new_sizeof_type(region,location,asttype) defined in AST_defs.h
      uses variable parse_region defined in c-parse.h
      uses function check_sizeof(expression,type) defined in expr.c
      uses variable AST_asttype::type defined in AST_defs.h
   function make_alignof_expr(location,expression) in line 35
      protection public
      9 lines of code
      2 parameters
      1 conditional paths
      uses macro definition CAST defined in AST.h
      uses function new_alignof_expr(region,location,expression) defined in AST_defs.h
      uses variable parse_region defined in c-parse.h
      uses variable AST_expression::type defined in AST_defs.h
      uses variable size_t_type defined in types.c
      uses variable AST_expression::cst defined in AST_defs.h
      uses function fold_alignof(expression,type) defined in constants.c
   function make_alignof_type(location,asttype) in line 36
      protection public
      9 lines of code
      2 parameters
      1 conditional paths
      uses macro definition CAST defined in AST.h
      uses function new_alignof_type(region,location,asttype) defined in AST_defs.h
      uses variable parse_region defined in c-parse.h
      uses variable AST_expression::type defined in AST_defs.h
      uses variable size_t_type defined in types.c
      uses variable AST_expression::cst defined in AST_defs.h
      uses function fold_alignof(expression,type) defined in constants.c
      uses variable AST_asttype::type defined in AST_defs.h
   function make_cast(location,asttype,expression) in line 37
      protection public
      113 lines of code
      3 parameters
      20 conditional paths
      uses macro definition CAST defined in AST.h
      uses function new_cast(region,location,expression,asttype) defined in AST_defs.h
      uses variable parse_region defined in c-parse.h
      uses variable AST_asttype::type defined in AST_defs.h
      uses variable error_type defined in types.c
      uses function type_void(type) defined in types.c
      uses function type_array(type) defined in types.c
      uses function error(const char *,...) defined in errors.c
      uses function type_function(type) defined in types.c
      uses function type_equal_unqualified(type,type) defined in types.c
      uses variable AST_expression::type defined in AST_defs.h
      uses variable pedantic defined in flags.h
      uses function type_aggregate(type) defined in types.c
      uses function pedwarn(const char *,...) defined in errors.c
      uses function default_conversion(expression) defined in expr.c
      uses function type_union(type) defined in types.c
      uses function type_tag(type) defined in types.c
      uses variable tag_declaration::fieldlist defined in decls.h
      uses variable field_declaration::next defined in decls.h
      uses variable field_declaration::name defined in decls.h
      uses variable field_declaration::type defined in decls.h
      uses variable warn_cast_qual defined in flags.h
      uses function type_pointer(type) defined in types.c
      uses function type_points_to(type) defined in types.c
      uses variable warn_bad_function_cast defined in flags.h
      uses macro definition is_function_call defined in AST_types.h
      uses function warning(const char *,...) defined in errors.c
      uses variable warn_cast_align defined in flags.h
      uses function check_conversion(type,type) defined in expr.c
      uses variable AST_expression::lvalue defined in AST_defs.h
      uses variable AST_expression::isregister defined in AST_defs.h
      uses variable AST_expression::bitfield defined in AST_defs.h
      uses variable AST_expression::static_address defined in AST_defs.h
      uses variable AST_expression::cst defined in AST_defs.h
      uses function fold_cast(expression) defined in constants.c
   function make_binary(location,int,expression,expression) in line 38
      protection public
      19 lines of code
      4 parameters
      2 conditional paths
      uses macro definition CAST defined in AST.h
      uses function newkind_binary(region,ast_kind,location,expression,expression) defined in AST.c
      uses variable parse_region defined in c-parse.h
      uses variable AST_expression::type defined in AST_defs.h
      uses function check_binary(int,expression,expression) defined in expr.c
      uses variable error_type defined in types.c
      uses variable AST_expression::cst defined in AST_defs.h
      uses function fold_binary(type,expression) defined in constants.c
   function make_conditional(location,expression,expression,expression) in line 39
      protection public
      90 lines of code
      4 parameters
      20 conditional paths
      uses macro definition CAST defined in AST.h
      uses function new_conditional(region,location,expression,expression,expression) defined in AST_defs.h
      uses variable parse_region defined in c-parse.h
      uses macro definition NULL defined in config.h
      uses macro definition FALSE defined in bool.h
      uses function default_conversion(expression) defined in expr.c
      uses function type_void(type) defined in types.c
      uses variable error_type defined in types.c
      uses function type_equal(type,type) defined in types.c
      uses function type_equal_unqualified(type,type) defined in types.c
      uses function make_qualified_type(type,type_quals,user_qual_list) defined in types.c
      uses enumvalue no_qualifiers defined in types.h
      uses function type_real(type) defined in types.c
      uses function common_type(type,type) defined in types.c
      uses variable pedantic defined in flags.h
      uses function pedwarn(const char *,...) defined in errors.c
      uses variable void_type defined in types.c
      uses function type_pointer(type) defined in types.c
      uses function type_points_to(type) defined in types.c
      uses function definite_null(expression) defined in constants.c
      uses function make_pointer_type(type) defined in types.c
      uses function qualify_type2(type,type,type) defined in types.c
      uses variable flag_cond_mismatch defined in flags.h
      uses function error(const char *,...) defined in errors.c
      uses variable AST_expression::type defined in AST_defs.h
      uses variable AST_expression::lvalue defined in AST_defs.h
      uses variable AST_expression::isregister defined in AST_defs.h
      uses variable AST_expression::bitfield defined in AST_defs.h
      uses variable AST_expression::cst defined in AST_defs.h
      uses function fold_conditional(expression) defined in constants.c
   function make_assign(location,int,expression,expression) in line 41
      protection public
      29 lines of code
      4 parameters
      4 conditional paths
      uses macro definition CAST defined in AST.h
      uses function newkind_binary(region,ast_kind,location,expression,expression) defined in AST.c
      uses variable parse_region defined in c-parse.h
      uses variable AST_expression::type defined in AST_defs.h
      uses variable error_type defined in types.c
      uses enumvalue kind_assign defined in AST_types.h
      uses function default_conversion_for_assignment(expression) defined in expr.c
      uses function check_binary(int,expression,expression) defined in expr.c
      uses macro definition NULL defined in config.h
      uses function check_assignment(type,type,expression,const char *,data_declaration,const char *,int) defined in expr.c
      uses function make_qualified_type(type,type_quals,user_qual_list) defined in types.c
      uses enumvalue no_qualifiers defined in types.h
   function make_identifier(location,cstring,bool) in line 42
      protection public
      46 lines of code
      3 parameters
      7 conditional paths
      uses function lookup_id(const char *,bool) defined in semantics.c
      uses macro definition FALSE defined in bool.h
      uses function new_identifier(region,location,cstring,data_declaration) defined in AST_defs.h
      uses variable parse_region defined in c-parse.h
      uses macro definition NULL defined in config.h
      uses variable data_declaration::islimbo defined in decls.h
      uses function implicitly_declare(identifier) defined in semantics.c
      uses variable current_function_decl defined in analyze.h
      uses function error(const char *,...) defined in errors.c
      uses function env_lookup(env,const char *,bool) defined in env.c
      uses variable AST_function_decl::undeclared_variables defined in AST_defs.h
      uses function env_add(env,const char *,void *) defined in env.c
      uses macro definition TRUE defined in bool.h
      uses variable bad_decl defined in decls.h
      uses variable AST_identifier::type defined in AST_defs.h
      uses variable data_declaration::type defined in decls.h
      uses variable AST_identifier::lvalue defined in AST_defs.h
      uses variable data_declaration::kind defined in decls.h
      uses enumvalue decl_variable defined in decls.h
      uses enumvalue decl_magic_string defined in decls.h
      uses variable AST_identifier::cst defined in AST_defs.h
      uses function fold_identifier(expression,data_declaration) defined in constants.c
      uses macro definition CAST defined in AST.h
      uses variable AST_identifier::isregister defined in AST_defs.h
      uses variable data_declaration::vtype defined in decls.h
      uses variable AST_identifier::static_address defined in AST_defs.h
      uses function foldaddress_identifier(expression,data_declaration) defined in constants.c
      uses variable AST_identifier::ddecl defined in AST_defs.h
      uses variable data_declaration::isused defined in decls.h
   function make_compound_expr(location,statement) in line 43
      protection public
      18 lines of code
      2 parameters
      3 conditional paths
      uses macro definition is_error_stmt defined in AST_types.h
      uses function make_error_expr(location) defined in expr.c
      uses macro definition CAST defined in AST.h
      uses function new_compound_expr(region,location,statement) defined in AST_defs.h
      uses variable parse_region defined in c-parse.h
      uses function last_node(node) defined in AST.c
      uses variable AST_compound_stmt::stmts defined in AST_defs.h
      uses macro definition is_expression_stmt defined in AST_types.h
      uses variable AST_expression::type defined in AST_defs.h
      uses variable void_type defined in types.c
   function make_function_call(location,expression,expression) in line 44
      protection public
      38 lines of code
      3 parameters
      6 conditional paths
      uses macro definition CAST defined in AST.h
      uses function new_function_call(region,location,expression,expression,asttype) defined in AST_defs.h
      uses variable parse_region defined in c-parse.h
      uses macro definition NULL defined in config.h
      uses function default_conversion(expression) defined in expr.c
      uses variable AST_expression::type defined in AST_defs.h
      uses variable error_type defined in types.c
      uses function type_pointer(type) defined in types.c
      uses function type_function(type) defined in types.c
      uses function type_points_to(type) defined in types.c
      uses function error(const char *,...) defined in errors.c
      uses macro definition is_identifier defined in AST_types.h
      uses variable AST_identifier::ddecl defined in AST_defs.h
      uses variable data_declaration::kind defined in decls.h
      uses enumvalue decl_function defined in decls.h
      uses variable AST_identifier::cstring defined in AST_defs.h
      uses variable cstring::data defined in cstring.h
      uses function type_function_return_type(type) defined in types.c
      uses function type_void(type) defined in types.c
   function make_va_arg(location,expression,asttype) in line 45
      protection public
      23 lines of code
      3 parameters
      4 conditional paths
      uses function build_identifier(region,location,data_declaration) defined in AST_utils.c
      uses variable parse_region defined in c-parse.h
      uses variable builtin_va_arg_decl defined in semantics.c
      uses macro definition CAST defined in AST.h
      uses function new_function_call(region,location,expression,expression,asttype) defined in AST_defs.h
      uses function type_equal_unqualified(type,type) defined in types.c
      uses variable AST_expression::type defined in AST_defs.h
      uses variable builtin_va_list_type defined in semantics.c
      uses function error(const char *,...) defined in errors.c
      uses function type_self_promoting(type) defined in types.c
      uses macro definition TRUE defined in bool.h
   function make_array_ref(location,expression,expression) in line 46
      protection public
      49 lines of code
      3 parameters
      7 conditional paths
      uses macro definition CAST defined in AST.h
      uses function new_array_ref(region,location,expression,expression) defined in AST_defs.h
      uses variable parse_region defined in c-parse.h
      uses function default_conversion(expression) defined in expr.c
      uses variable warn_char_subscripts defined in flags.h
      uses function type_char(type) defined in types.c
      uses variable AST_expression::type defined in AST_defs.h
      uses function warning(const char *,...) defined in errors.c
      uses function type_array(type) defined in types.c
      uses variable pedantic defined in flags.h
      uses function pedwarn(const char *,...) defined in errors.c
      uses function make_pointer_type(type) defined in types.c
      uses function type_array_of(type) defined in types.c
      uses function type_integer(type) defined in types.c
      uses function type_pointer(type) defined in types.c
      uses function type_function(type) defined in types.c
      uses function type_points_to(type) defined in types.c
      uses function error(const char *,...) defined in errors.c
      uses variable error_type defined in types.c
      uses variable AST_expression::lvalue defined in AST_defs.h
      uses macro definition TRUE defined in bool.h
      uses variable AST_expression::static_address defined in AST_defs.h
      uses function fold_binary(type,expression) defined in constants.c
   function make_field_ref(location,expression,cstring,location) in line 47
      protection public
      38 lines of code
      4 parameters
      5 conditional paths
      uses macro definition CAST defined in AST.h
      uses function new_field_ref(region,location,expression,cstring,location) defined in AST_defs.h
      uses variable parse_region defined in c-parse.h
      uses variable AST_expression::type defined in AST_defs.h
      uses variable error_type defined in types.c
      uses function type_aggregate(type) defined in types.c
      uses function type_tag(type) defined in types.c
      uses variable tag_declaration::defined defined in decls.h
      uses macro definition NULL defined in config.h
      uses function env_lookup(env,const char *,bool) defined in env.c
      uses variable tag_declaration::fields defined in decls.h
      uses macro definition FALSE defined in bool.h
      uses function error(const char *,...) defined in errors.c
      uses function type_struct(type) defined in types.c
      uses function qualify_type2(type,type,type) defined in types.c
      uses variable field_declaration::type defined in decls.h
      uses variable AST_expression::bitfield defined in AST_defs.h
      uses variable field_declaration::bitwidth defined in decls.h
      uses variable AST_expression::static_address defined in AST_defs.h
      uses function foldaddress_field_ref(known_cst,field_declaration) defined in constants.c
      uses variable AST_expression::lvalue defined in AST_defs.h
   function make_field_indirectref(location,expression,cstring) in line 49
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function make_postincrement(location,expression) in line 51
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses macro definition CAST defined in AST.h
      uses function new_postincrement(region,location,expression) defined in AST_defs.h
      uses variable parse_region defined in c-parse.h
   function make_preincrement(location,expression) in line 52
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses macro definition CAST defined in AST.h
      uses function new_preincrement(region,location,expression) defined in AST_defs.h
      uses variable parse_region defined in c-parse.h
   function make_postdecrement(location,expression) in line 53
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses macro definition CAST defined in AST.h
      uses function new_postdecrement(region,location,expression) defined in AST_defs.h
      uses variable parse_region defined in c-parse.h
   function make_predecrement(location,expression) in line 54
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses macro definition CAST defined in AST.h
      uses function new_predecrement(region,location,expression) defined in AST_defs.h
      uses variable parse_region defined in c-parse.h
   function make_string(location,expression) in line 56
      protection public
      15 lines of code
      2 parameters
      1 conditional paths
      uses function new_string(region,location,expression,data_declaration) defined in AST_defs.h
      uses variable parse_region defined in c-parse.h
      uses macro definition NULL defined in config.h
      uses variable AST_string::ddecl defined in AST_defs.h
      uses function declare_string(const char *,bool,size_t) defined in semantics.c
      uses variable AST_string::type defined in AST_defs.h
      uses variable data_declaration::type defined in decls.h
      uses variable data_declaration::chars defined in decls.h
      uses variable AST_string::static_address defined in AST_defs.h
      uses function foldaddress_string(string) defined in constants.c
      uses variable AST_string::lvalue defined in AST_defs.h
      uses macro definition TRUE defined in bool.h
   function check_assignment(type,type,expression,const char *,data_declaration,const char *,int) in line 59
      protection public
      139 lines of code
      7 parameters
      25 conditional paths
      uses function definite_zero(expression) defined in constants.c
      uses variable error_type defined in types.c
      uses macro definition FALSE defined in bool.h
      uses function type_void(type) defined in types.c
      uses function error(const char *,...) defined in errors.c
      uses function type_equal_unqualified(type,type) defined in types.c
      uses macro definition TRUE defined in bool.h
      uses function type_arithmetic(type) defined in types.c
      uses function constant_overflow_warning(known_cst) defined in constants.c
      uses variable AST_expression::cst defined in AST_defs.h
      uses function check_conversion(type,type) defined in expr.c
      uses function type_qualifiers(type) defined in types.c
      uses enumvalue transparent_qualifier defined in types.h
      uses function type_tag(type) defined in types.c
      uses macro definition NULL defined in config.h
      uses variable tag_declaration::fieldlist defined in decls.h
      uses variable field_declaration::next defined in decls.h
      uses variable field_declaration::type defined in decls.h
      uses function type_compatible(type,type) defined in types.c
      uses function type_pointer(type) defined in types.c
      uses function type_points_to(type) defined in types.c
      uses function type_function(type) defined in types.c
      uses variable pedantic defined in flags.h
      uses variable data_declaration::in_system_header defined in decls.h
      uses function pedwarn(const char *,...) defined in errors.c
      uses function make_unsigned_type(type) defined in types.c
      uses function type_integral(type) defined in types.c
   function check_conversion(type,type) in line 63
      protection public
      66 lines of code
      2 parameters
      15 conditional paths
      uses function type_equal_unqualified(type,type) defined in types.c
      uses macro definition TRUE defined in bool.h
      uses variable error_type defined in types.c
      uses macro definition FALSE defined in bool.h
      uses function type_void(type) defined in types.c
      uses function error(const char *,...) defined in errors.c
      uses function type_integer(type) defined in types.c
      uses function type_scalar(type) defined in types.c
      uses function type_pointer(type) defined in types.c
      uses function type_floating(type) defined in types.c
      uses function type_arithmetic(type) defined in types.c
      uses function type_complex(type) defined in types.c
   function default_conversion(expression) in line 65
      protection public
      48 lines of code
      1 parameters
      9 conditional paths
      uses variable AST_expression::type defined in AST_defs.h
      uses function type_enum(type) defined in types.c
      uses function type_tag(type) defined in types.c
      uses variable tag_declaration::reptype defined in decls.h
      uses function type_smallerthanint(type) defined in types.c
      uses variable flag_traditional defined in flags.h
      uses function type_unsigned(type) defined in types.c
      uses variable unsigned_int_type defined in types.c
      uses variable int_type defined in types.c
      uses variable flag_allow_single_precision defined in flags.h
      uses function type_float(type) defined in types.c
      uses variable double_type defined in types.c
      uses function type_void(type) defined in types.c
      uses function error(const char *,...) defined in errors.c
      uses variable error_type defined in types.c
      uses function type_function(type) defined in types.c
      uses variable AST_expression::cst defined in AST_defs.h
      uses variable AST_expression::static_address defined in AST_defs.h
      uses function make_pointer_type(type) defined in types.c
      uses function type_array(type) defined in types.c
      uses variable AST_expression::lvalue defined in AST_defs.h
      uses macro definition FALSE defined in bool.h
      uses function type_array_of(type) defined in types.c
   function default_conversion_for_assignment(expression) in line 66
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses function type_array(type) defined in types.c
      uses variable AST_expression::type defined in AST_defs.h
      uses function type_function(type) defined in types.c
      uses function default_conversion(expression) defined in expr.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cqual/cqual-0.981/src/flags.h
module flags.h
   variable flag_volatile in line 30
      protection public
   variable flag_volatile_global in line 33
      protection public
   variable flag_syntax_only in line 36
      protection public
   variable flag_pedantic_errors in line 40
      protection public
   variable flag_pack_struct in line 43
      protection public
   variable inhibit_warnings in line 48
      protection public
   variable extra_warnings in line 51
      protection public
   variable warnings_are_errors in line 54
      protection public
   variable warn_unused in line 57
      protection public
   variable warn_uninitialized in line 60
      protection public
   variable warn_shadow in line 63
      protection public
   variable error_shadow in line 64
      protection public
   variable warn_switch in line 67
      protection public
   variable warn_return_type in line 71
      protection public
   variable warn_cast_align in line 76
      protection public
   variable warn_id_clash in line 80
      protection public
   variable id_clash_len in line 81
      protection public
   variable warn_larger_than in line 86
      protection public
   variable larger_than_size in line 87
      protection public
   variable warn_inline in line 90
      protection public
   variable warn_aggregate_return in line 94
      protection public
   variable dollars_in_ident in line 97
      protection public
   variable flag_cond_mismatch in line 101
      protection public
   variable flag_no_asm in line 104
      protection public
   variable flag_hosted in line 107
      protection public
   variable warn_implicit in line 110
      protection public
   variable warn_write_strings in line 115
      protection public
   variable warn_pointer_arith in line 119
      protection public
   variable warn_strict_prototypes in line 122
      protection public
   variable warn_redundant_decls in line 126
      protection public
   variable warn_nested_externs in line 133
      protection public
   variable warn_cast_qual in line 137
      protection public
   variable warn_bad_function_cast in line 142
      protection public
   variable warn_traditional in line 145
      protection public
   variable warn_format in line 148
      protection public
   variable warn_char_subscripts in line 151
      protection public
   variable warn_conversion in line 154
      protection public
   variable warn_main in line 157
      protection public
   variable warn_multichar in line 160
      protection public
   variable flag_traditional in line 163
      protection public
   variable flag_allow_single_precision in line 167
      protection public
   variable warn_parentheses in line 170
      protection public
   variable warn_missing_braces in line 173
      protection public
   variable warn_sign_compare in line 176
      protection public
   variable mesg_implicit_function_declaration in line 180
      protection public
   variable pedantic in line 182
      protection public
   variable warn_implicit_int in line 185
      protection public
   variable warn_missing_prototypes in line 189
      protection public
   variable warn_missing_declarations in line 193
      protection public
   variable quiet_flag in line 197
      protection public
   variable flag_signed_char in line 200
      protection public
   variable flag_short_enums in line 203
      protection public
   variable flag_signed_bitfields in line 206
      protection public
   variable explicit_flag_signed_bitfields in line 207
      protection public
   variable flag_parse_only in line 210
      protection public
   variable flag_pam_mode in line 213
      protection public
   variable flag_pam_html in line 216
      protection public
   variable flag_print_quals_graph in line 220
      protection public
   variable flag_strict_const in line 224
      protection public
   variable flag_print_results in line 227
      protection public
   variable flag_casts_preserve in line 230
      protection public
   variable flag_const_subtyping in line 234
      protection public
   variable flag_flow_sensitive in line 237
      protection public
   variable flag_force_flow_sensitive in line 241
      protection public
   variable flag_print_lin in line 245
      protection public
   variable flag_driver in line 249
      protection public
   variable flag_casts_warn in line 253
      protection public
   variable flag_ugly in line 257
      protection public
   variable flag_statistics in line 261
      protection public
   variable flag_print_stores in line 264
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cqual/cqual-0.981/src/flow.c
module flow.c
   enumeration context in line 43
      protection public
   typedef einfo in line 56
      protection public
   typedef sinfo in line 60
      protection public
   typedef dinfo in line 64
      protection public
   typedef printqueue_elt in line 2656
      protection public
   variable global_store in line 98
      protection public
   variable toplvl_store in line 99
      protection public
   variable global_store_ext in line 100
      protection public
   variable function_defns in line 101
      protection public
   variable printqueue in line 102
      protection public
   enumvalue lpos in line 43
      protection public
   enumvalue rpos in line 44
      protection public
   enumvalue apos in line 45
      protection public
   enumvalue cpos in line 46
      protection public
   function analyze_flow_sensitive(declaration) in line 66
      protection public
      13 lines of code
      1 parameters
      1 conditional paths
      uses variable toplvl_store defined in flow.c
      uses variable global_store defined in flow.c
      uses macro definition scan_declaration defined in AST_defs.h
      uses function analyze_declaration(declaration,store) defined in flow.c
      uses variable dinfo::out defined in flow.c
   function analyze_declaration(declaration,store) in line 67
      protection public
      298 lines of code
      2 parameters
      29 conditional paths
      uses variable AST_declaration::kind defined in AST_defs.h
      uses enumvalue kind_asm_decl defined in AST_types.h
      uses function mkdinfo(store) defined in flow.c
      uses enumvalue kind_data_decl defined in AST_types.h
      uses macro definition CAST defined in AST.h
      uses macro definition scan_declaration defined in AST_defs.h
      uses variable AST_data_decl::decls defined in AST_defs.h
      uses variable dinfo::out defined in flow.c
      uses enumvalue kind_variable_decl defined in AST_types.h
      uses function root_ddecl(data_declaration) defined in analyze.c
      uses variable AST_variable_decl::ddecl defined in AST_defs.h
      uses variable AST_variable_decl::rinfo defined in AST_defs.h
      uses variable data_declaration::qtype defined in decls.h
      uses variable Rinfo::fqtype defined in analyze.h
      uses function allocate_ddecl(data_declaration,store) defined in flow.c
      uses function add_ddecl_fs_qtype(data_declaration,store) defined in flow.c
      uses variable AST_variable_decl::arg1 defined in AST_defs.h
      uses variable data_declaration::fs_qtype defined in decls.h
      uses function qtype_error(qtype) defined in qtype.c
      uses function qtype_array(qtype) defined in qtype.c
      uses function points_to_fs_qtype(qtype,store) defined in qtype.c
      uses function analyze_init(location,qtype,expression,store) defined in flow.c
      uses variable AST_variable_decl::loc defined in AST_defs.h
      uses variable sinfo::out defined in flow.c
      uses variable Rinfo::fs_rqtype defined in analyze.h
      uses variable Rinfo::fs_fqtype defined in analyze.h
      uses function qtype_pointer(qtype) defined in qtype.c
      uses variable Rinfo::rqtype defined in analyze.h
      uses function ref_qtype_store(location,qtype,store) defined in qtype.c
      uses function make_store_ref_effect(location,store,effect) defined in effect.c
      uses variable Rinfo::rlocs defined in analyze.h
      uses function qtype_to_fs_qtype_with_quals(location,qtype,store) defined in qtype.c
      uses function init_restrict(variable_decl,store) defined in flow.c
      uses function report_qerror(location,severity,const char *,...) defined in analyze.c
      uses enumvalue sev_err defined in qerror.h
      uses variable flag_pam_mode defined in flags.h
      uses variable flag_print_results defined in flags.h
      uses variable data_declaration::kind defined in decls.h
      uses enumvalue decl_typedef defined in decls.h
      uses function add_flow_sensitive_declarator_overlay(declarator,qtype,store) defined in flow.c
      uses variable AST_variable_decl::declarator defined in AST_defs.h
      uses enumvalue kind_function_decl defined in AST_types.h
      uses function dd_add_last(region,dd_list,void *) defined in dd_list.c
      uses variable parse_region defined in c-parse.h
      uses variable function_defns defined in flow.c
      uses variable AST_function_decl::ddecl defined in AST_defs.h
      uses function qtype_scheme(qtype) defined in qtype.c
      uses variable data_declaration::global defined in decls.h
      uses variable data_declaration::in_prelude defined in decls.h
      uses variable global_store_ext defined in flow.c
      uses function allocate_qtype(location,qtype,store) defined in flow.c
      uses function location_declaration(declaration) defined in analyze.c
      uses variable data_declaration::ast defined in decls.h
      uses variable AST_function_decl::declarator defined in AST_defs.h
      uses variable current_function_decl defined in analyze.h
      uses function make_store_var(location,const char *) defined in effect.c
      uses variable AST_function_decl::loc defined in AST_defs.h
      uses function store_in_qtype(qtype) defined in qtype.c
      uses macro definition NULL defined in config.h
      uses function qtypelist_scan(qtypelist,qtypelist_scanner *) defined in qtype.c
      uses function arg_qtypes(qtype) defined in qtype.c
      uses function is_void_parms(declaration) defined in flow.c
      uses variable AST_function_decl::fdeclarator defined in AST_defs.h
      uses variable AST_function_declarator::parms defined in AST_defs.h
      uses macro definition is_ellipsis_decl defined in AST_types.h
      uses variable AST_variable_decl::next defined in AST_defs.h
      uses variable AST_oldidentifier_decl::ddecl defined in AST_defs.h
      uses variable AST_declaration::loc defined in AST_defs.h
      uses function qtypelist_next(qtypelist_scanner *) defined in qtype.c
      uses function unify_qtype(location,qtype,qtype) defined in qtype.c
      uses function pam_add_overlay_flow_sensitive(location,qtype,store) defined in pam.c
      uses variable AST_oldidentifier_decl::loc defined in AST_defs.h
      uses macro definition is_compound_stmt defined in AST_types.h
      uses variable AST_function_decl::stmt defined in AST_defs.h
      uses function analyze_statement(statement,store) defined in flow.c
      uses function merge_restricts(declaration,store) defined in flow.c
      uses function make_store_filter(location,store,effect) defined in effect.c
      uses variable AST_function_decl::scope_env defined in AST_defs.h
      uses function mkleq_store(location,const char *,store,store) defined in effect.c
      uses function store_out_qtype(qtype) defined in qtype.c
      uses enumvalue kind_extension_decl defined in AST_types.h
      uses variable AST_extension_decl::decl defined in AST_defs.h
      uses function fail(const char *,...) defined in utils.c
   function analyze_init(location,qtype,expression,store) in line 68
      protection public
      114 lines of code
      4 parameters
      12 conditional paths
      uses variable AST_expression::kind defined in AST_defs.h
      uses enumvalue kind_string defined in AST_types.h
      uses function qtype_string(qtype) defined in qtype.c
      uses function analyze_expression(expression,context,store) defined in flow.c
      uses enumvalue rpos defined in flow.c
      uses function init_string(location,qtype,qtype,store) defined in flow.c
      uses variable AST_expression::loc defined in AST_defs.h
      uses variable einfo::qt defined in flow.c
      uses function report_qerror(location,severity,const char *,...) defined in analyze.c
      uses enumvalue sev_err defined in qerror.h
      uses function mksinfo(store) defined in flow.c
      uses variable einfo::out defined in flow.c
      uses enumvalue kind_init_list defined in AST_types.h
      uses function qtype_array(qtype) defined in qtype.c
      uses macro definition CAST defined in AST.h
      uses macro definition scan_expression defined in AST_defs.h
      uses variable AST_init_list::args defined in AST_defs.h
      uses enumvalue kind_init_index defined in AST_types.h
      uses variable AST_init_index::arg1 defined in AST_defs.h
      uses variable AST_init_index::arg2 defined in AST_defs.h
      uses function array_of_qtype(qtype) defined in qtype.c
      uses variable AST_init_index::init_expr defined in AST_defs.h
      uses variable sinfo::out defined in flow.c
      uses function qtype_struct(qtype) defined in qtype.c
      uses function qtype_union(qtype) defined in qtype.c
      uses macro definition NULL defined in config.h
      uses function field_scan(qtype,field_scanner *) defined in qtype.c
      uses enumvalue kind_init_field defined in AST_types.h
      uses function field_scan_at(qtype,cstring,field_scanner *) defined in qtype.c
      uses variable AST_init_field::word1 defined in AST_defs.h
      uses variable AST_word::cstring defined in AST_defs.h
      uses variable AST_init_field::init_expr defined in AST_defs.h
      uses function field_next(field_scanner *) defined in qtype.c
      uses function points_to_fs_qtype(qtype,store) defined in qtype.c
      uses function mkleq_fs_assign_convert(location,qtype,qtype,store) defined in qtype.c
   function analyze_statement(statement,store) in line 69
      protection public
      485 lines of code
      2 parameters
      39 conditional paths
      uses function printf(const char *$NONYEAR,(null)) defined in rcs1.c
      uses variable AST_statement::loc defined in AST_defs.h
      uses variable Location::lineno defined in location.h
      uses function print_store(printf_func,store) defined in effect.c
      uses variable AST_statement::kind defined in AST_defs.h
      uses enumvalue kind_asm_stmt defined in AST_types.h
      uses function mksinfo(store) defined in flow.c
      uses enumvalue kind_compound_stmt defined in AST_types.h
      uses macro definition CAST defined in AST.h
      uses variable einfo::out defined in flow.c
      uses macro definition scan_declaration defined in AST_defs.h
      uses variable AST_compound_stmt::decls defined in AST_defs.h
      uses function analyze_declaration(declaration,store) defined in flow.c
      uses variable dinfo::out defined in flow.c
      uses macro definition scan_statement defined in AST_defs.h
      uses variable AST_compound_stmt::stmts defined in AST_defs.h
      uses variable sinfo::out defined in flow.c
      uses function merge_restricts(declaration,store) defined in flow.c
      uses function make_store_filter(location,store,effect) defined in effect.c
      uses variable AST_compound_stmt::loc defined in AST_defs.h
      uses variable AST_compound_stmt::filter_env defined in AST_defs.h
      uses enumvalue kind_if_stmt defined in AST_types.h
      uses function analyze_expression(expression,context,store) defined in flow.c
      uses variable AST_if_stmt::condition defined in AST_defs.h
      uses enumvalue cpos defined in flow.c
      uses variable AST_if_stmt::stmt1 defined in AST_defs.h
      uses function true_out_einfo(einfo) defined in flow.c
      uses variable AST_if_stmt::stmt2 defined in AST_defs.h
      uses function false_out_einfo(einfo) defined in flow.c
      uses function lub_store(location,const char *,store,store) defined in effect.c
      uses variable AST_if_stmt::loc defined in AST_defs.h
      uses enumvalue kind_labeled_stmt defined in AST_types.h
      uses variable AST_labeled_stmt::label defined in AST_defs.h
      uses variable AST_label::store_in defined in AST_defs.h
      uses function mkleq_store(location,const char *,store,store) defined in effect.c
      uses variable AST_labeled_stmt::loc defined in AST_defs.h
      uses function make_store_var(location,const char *) defined in effect.c
      uses variable AST_labeled_stmt::stmt defined in AST_defs.h
      uses enumvalue kind_expression_stmt defined in AST_types.h
      uses variable AST_expression_stmt::arg1 defined in AST_defs.h
      uses enumvalue rpos defined in flow.c
      uses enumvalue kind_while_stmt defined in AST_types.h
      uses variable AST_conditional_stmt::break_dest defined in AST_defs.h
      uses variable AST_conditional_stmt::loc defined in AST_defs.h
      uses variable AST_conditional_stmt::continue_dest defined in AST_defs.h
      uses variable AST_conditional_stmt::condition defined in AST_defs.h
      uses variable AST_conditional_stmt::stmt defined in AST_defs.h
      uses function definite_one(expression) defined in constants.c
      uses enumvalue kind_dowhile_stmt defined in AST_types.h
      uses function definite_zero(expression) defined in constants.c
      uses enumvalue kind_switch_stmt defined in AST_types.h
      uses variable AST_switch_stmt::break_dest defined in AST_defs.h
      uses variable AST_switch_stmt::loc defined in AST_defs.h
      uses variable AST_switch_stmt::condition defined in AST_defs.h
      uses macro definition FALSE defined in bool.h
      uses variable AST_switch_stmt::next_label defined in AST_defs.h
      uses variable AST_label::next_label defined in AST_defs.h
      uses variable AST_label::kind defined in AST_defs.h
      uses enumvalue kind_default_label defined in AST_types.h
      uses macro definition TRUE defined in bool.h
      uses enumvalue kind_case_label defined in AST_types.h
      uses variable AST_label::loc defined in AST_defs.h
      uses function fail(const char *,...) defined in utils.c
      uses variable AST_switch_stmt::stmt defined in AST_defs.h
      uses enumvalue kind_for_stmt defined in AST_types.h
      uses variable AST_for_stmt::break_dest defined in AST_defs.h
      uses variable AST_for_stmt::loc defined in AST_defs.h
      uses variable AST_for_stmt::continue_dest defined in AST_defs.h
      uses variable AST_for_stmt::arg1 defined in AST_defs.h
      uses variable AST_for_stmt::arg2 defined in AST_defs.h
      uses variable AST_for_stmt::stmt defined in AST_defs.h
      uses variable AST_for_stmt::arg3 defined in AST_defs.h
      uses enumvalue kind_return_stmt defined in AST_types.h
      uses variable current_function_decl defined in analyze.h
      uses function root_ddecl(data_declaration) defined in analyze.c
      uses variable AST_function_decl::ddecl defined in AST_defs.h
      uses variable data_declaration::fs_qtype defined in decls.h
      uses variable AST_return_stmt::arg1 defined in AST_defs.h
      uses function qtype_error(qtype) defined in qtype.c
      uses function mkleq_fs_assign_convert(location,qtype,qtype,store) defined in qtype.c
      uses variable AST_return_stmt::loc defined in AST_defs.h
      uses variable einfo::qt defined in flow.c
      uses function return_qtype(qtype) defined in qtype.c
      uses function report_qerror(location,severity,const char *,...) defined in analyze.c
      uses enumvalue sev_err defined in qerror.h
      uses variable AST_function_decl::fdeclarator defined in AST_defs.h
      uses variable AST_function_declarator::parms defined in AST_defs.h
      uses variable AST_function_decl::scope_env defined in AST_defs.h
      uses function store_out_qtype(qtype) defined in qtype.c
      uses enumvalue kind_computed_goto_stmt defined in AST_types.h
      uses variable AST_computed_goto_stmt::arg1 defined in AST_defs.h
      uses variable AST_computed_goto_stmt::loc defined in AST_defs.h
      uses enumvalue kind_break_stmt defined in AST_types.h
      uses function tfr_jumped_blocks(store,compound_stmt,compound_stmt) defined in flow.c
      uses variable AST_break_stmt::enclosing_cs defined in AST_defs.h
      uses variable AST_break_stmt::parent_loop defined in AST_defs.h
      uses variable AST_breakable_stmt::enclosing_cs defined in AST_defs.h
      uses variable AST_break_stmt::loc defined in AST_defs.h
      uses variable AST_compound_stmt::scope_env defined in AST_defs.h
      uses variable AST_breakable_stmt::kind defined in AST_defs.h
      uses variable AST_breakable_stmt::break_dest defined in AST_defs.h
      uses enumvalue kind_continue_stmt defined in AST_types.h
      uses variable AST_continue_stmt::enclosing_cs defined in AST_defs.h
      uses variable AST_continue_stmt::parent_loop defined in AST_defs.h
      uses variable AST_continue_stmt::loc defined in AST_defs.h
      uses variable AST_breakable_stmt::continue_dest defined in AST_defs.h
      uses enumvalue kind_goto_stmt defined in AST_types.h
      uses variable AST_goto_stmt::id_label defined in AST_defs.h
      uses variable AST_id_label::ldecl defined in AST_defs.h
      uses variable label_declaration::definition defined in decls.h
      uses variable AST_id_label::store_in defined in AST_defs.h
      uses variable AST_id_label::loc defined in AST_defs.h
      uses variable AST_goto_stmt::enclosing_cs defined in AST_defs.h
      uses variable AST_id_label::enclosing_cs defined in AST_defs.h
      uses variable AST_goto_stmt::loc defined in AST_defs.h
      uses enumvalue kind_empty_stmt defined in AST_types.h
      uses enumvalue kind_change_type_stmt defined in AST_types.h
      uses variable AST_change_type_stmt::arg1 defined in AST_defs.h
      uses enumvalue lpos defined in flow.c
      uses function aloc_qtype(qtype) defined in qtype.c
      uses function qtype_to_fs_qtype_with_quals(location,qtype,store) defined in qtype.c
      uses variable AST_change_type_stmt::loc defined in AST_defs.h
      uses variable AST_change_type_stmt::qtype defined in AST_defs.h
      uses function assign_flow_sensitive(location,const char *,qtype,qtype,store,bool) defined in qtype.c
      uses variable flag_pam_mode defined in flags.h
      uses variable flag_print_results defined in flags.h
      uses function pam_add_overlay_lin(location,store,aloc) defined in pam.c
      uses variable flag_print_lin defined in flags.h
      uses function queue_print_stmt(statement,store,aloc) defined in flow.c
      uses enumvalue kind_assert_type_stmt defined in AST_types.h
      uses variable AST_assert_type_stmt::arg1 defined in AST_defs.h
      uses variable AST_assert_type_stmt::loc defined in AST_defs.h
      uses variable AST_assert_type_stmt::qtype defined in AST_defs.h
      uses function mkleq_fs_qtype(location,qtype,qtype,store) defined in qtype.c
      uses enumvalue kind_deep_restrict_stmt defined in AST_types.h
      uses variable AST_deep_restrict_stmt::drinfo defined in AST_defs.h
      uses variable AST_deep_restrict_stmt::arg1 defined in AST_defs.h
      uses variable Drinfo::fs_qtype defined in analyze.h
      uses function ref_qtype_store(location,qtype,store) defined in qtype.c
      uses variable AST_deep_restrict_stmt::loc defined in AST_defs.h
      uses variable Drinfo::rqtype defined in analyze.h
      uses variable Drinfo::fs_rqtype defined in analyze.h
      uses function mkleq_qual(location,qual,qual) defined in quals.c
      uses function qual_qtype(qtype) defined in qtype.c
      uses function qtype_pointer_loc(qtype) defined in qtype.c
      uses function mkleq_qtype(location,qtype,qtype) defined in qtype.c
      uses function points_to_fs_qtype(qtype,store) defined in qtype.c
      uses variable AST_deep_restrict_stmt::stmt defined in AST_defs.h
   function analyze_expression(expression,context,store) in line 70
      protection public
      406 lines of code
      3 parameters
      49 conditional paths
      uses function printf(const char *$NONYEAR,(null)) defined in rcs1.c
      uses function prt_expression(expression,int) defined in flow.c
      uses function print_store(printf_func,store) defined in effect.c
      uses variable AST_expression::drinfo defined in AST_defs.h
      uses variable einfo::qt defined in flow.c
      uses variable Drinfo::fs_rqtype defined in analyze.h
      uses function qtype_pointer_loc(qtype) defined in qtype.c
      uses enumvalue rpos defined in flow.c
      uses function mkeinfo(qtype,store,store,store,bool) defined in flow.c
      uses function points_to_fs_qtype(qtype,store) defined in qtype.c
      uses macro definition NULL defined in config.h
      uses macro definition FALSE defined in bool.h
      uses variable AST_expression::kind defined in AST_defs.h
      uses enumvalue kind_comma defined in AST_types.h
      uses macro definition CAST defined in AST.h
      uses macro definition scan_expression defined in AST_defs.h
      uses variable AST_comma::arg1 defined in AST_defs.h
      uses variable einfo::out defined in flow.c
      uses enumvalue kind_sizeof_type defined in AST_types.h
      uses enumvalue kind_alignof_type defined in AST_types.h
      uses enumvalue kind_known_cst defined in AST_types.h
      uses enumvalue kind_lexical_cst defined in AST_types.h
      uses enumvalue kind_sizeof_expr defined in AST_types.h
      uses enumvalue kind_alignof_expr defined in AST_types.h
      uses function qtype_to_fs_qtype_with_quals(location,qtype,store) defined in qtype.c
      uses variable AST_expression::loc defined in AST_defs.h
      uses variable AST_expression::qtype defined in AST_defs.h
      uses enumvalue kind_label_address defined in AST_types.h
      uses enumvalue kind_string defined in AST_types.h
      uses variable global_store_ext defined in flow.c
      uses function allocate_qtype(location,qtype,store) defined in flow.c
      uses enumvalue kind_cast defined in AST_types.h
      uses variable AST_cast::arg1 defined in AST_defs.h
      uses variable AST_cast::asttype defined in AST_defs.h
      uses variable AST_asttype::type defined in AST_defs.h
      uses variable AST_cast::loc defined in AST_defs.h
      uses variable einfo::ismalloc defined in flow.c
      uses variable flag_casts_warn defined in flags.h
      uses function type_contains_quals(type) defined in types.c
      uses function mk_no_qual_qtype_fs(location,qtype,store) defined in qtype.c
      uses enumvalue kind_cast_list defined in AST_types.h
      uses variable AST_cast_list::loc defined in AST_defs.h
      uses variable AST_cast_list::astqtype defined in AST_defs.h
      uses function analyze_init(location,qtype,expression,store) defined in flow.c
      uses variable AST_cast_list::init_expr defined in AST_defs.h
      uses function default_conversion_fs_qtype(qtype) defined in qtype.c
      uses variable sinfo::out defined in flow.c
      uses enumvalue kind_conditional defined in AST_types.h
      uses variable AST_conditional::condition defined in AST_defs.h
      uses variable AST_conditional::arg1 defined in AST_defs.h
      uses enumvalue cpos defined in flow.c
      uses variable AST_conditional::arg2 defined in AST_defs.h
      uses function lub_store(location,const char *,store,store) defined in effect.c
      uses variable AST_conditional::loc defined in AST_defs.h
      uses function qtype_to_fs_qtype(location,qtype) defined in qtype.c
      uses variable AST_conditional::qtype defined in AST_defs.h
      uses function qtype_void(qtype) defined in qtype.c
      uses function mkleq_fs_assign_convert(location,qtype,qtype,store) defined in qtype.c
      uses function report_qerror(location,severity,const char *,...) defined in analyze.c
      uses enumvalue sev_err defined in qerror.h
      uses enumvalue kind_identifier defined in AST_types.h
      uses function root_ddecl(data_declaration) defined in analyze.c
      uses variable AST_identifier::ddecl defined in AST_defs.h
      uses variable data_declaration::fs_qtype defined in decls.h
      uses function add_ddecl_fs_qtype(data_declaration,store) defined in flow.c
      uses function type_function(type) defined in types.c
      uses variable data_declaration::type defined in decls.h
      uses variable data_declaration::ftype defined in decls.h
      uses variable data_declaration::name defined in decls.h
      uses variable AST_identifier::loc defined in AST_defs.h
      uses variable flag_pam_mode defined in flags.h
      uses variable flag_print_results defined in flags.h
      uses function pam_add_overlay_flow_sensitive(location,qtype,store) defined in pam.c
      uses variable data_declaration::kind defined in decls.h
      uses enumvalue decl_constant defined in decls.h
      uses function put_id_in_fs_context(location,qtype,context,store) defined in flow.c
      uses enumvalue kind_compound_expr defined in AST_types.h
      uses variable AST_compound_expr::stmt defined in AST_defs.h
      uses variable AST_compound_stmt::id_labels defined in AST_defs.h
      uses macro definition scan_declaration defined in AST_defs.h
      uses variable AST_compound_stmt::decls defined in AST_defs.h
      uses variable AST_declaration::kind defined in AST_defs.h
      uses enumvalue kind_asm_decl defined in AST_types.h
      uses function analyze_declaration(declaration,store) defined in flow.c
      uses variable dinfo::out defined in flow.c
      uses variable AST_compound_stmt::stmts defined in AST_defs.h
      uses variable AST_statement::next defined in AST_defs.h
      uses function analyze_statement(statement,store) defined in flow.c
      uses macro definition is_expression_stmt defined in AST_types.h
      uses function mkqtype_void(qual) defined in qtype.c
      uses function make_qvar(const char *,location,bool) defined in quals.c
      uses variable AST_compound_expr::loc defined in AST_defs.h
      uses function merge_restricts(declaration,store) defined in flow.c
      uses function make_store_filter(location,store,effect) defined in effect.c
      uses variable AST_compound_expr::filter_env defined in AST_defs.h
      uses enumvalue kind_function_call defined in AST_types.h
      uses variable AST_function_call::va_arg_call defined in AST_defs.h
      uses variable AST_function_call::loc defined in AST_defs.h
      uses variable AST_function_call::qtype defined in AST_defs.h
      uses variable AST_function_call::arg1 defined in AST_defs.h
      uses function qtype_error(qtype) defined in qtype.c
      uses variable AST_function_call::args defined in AST_defs.h
      uses variable error_qtype defined in qtype.c
      uses function analyze_magic_function_call(function_call,qtype,store) defined in flow.c
      uses function arg_qtypes(qtype) defined in qtype.c
      uses function qtypelist_scan(qtypelist,qtypelist_scanner *) defined in qtype.c
      uses function qtypelist_next(qtypelist_scanner *) defined in qtype.c
      uses function mkleq_store(location,const char *,store,store) defined in effect.c
      uses function effect_qtype(qtype) defined in qtype.c
      uses function store_in_qtype(qtype) defined in qtype.c
      uses variable noreturn_qual defined in quals.c
      uses function has_qual_qtype(qtype,qual) defined in qtype.c
      uses function points_to_qtype(qtype) defined in qtype.c
      uses function make_store_var(location,const char *) defined in effect.c
      uses function make_store_ow(location,store,store,effect) defined in effect.c
      uses function store_out_qtype(qtype) defined in qtype.c
      uses function return_qtype(qtype) defined in qtype.c
      uses enumvalue kind_array_ref defined in AST_types.h
      uses variable AST_array_ref::alt defined in AST_defs.h
      uses enumvalue kind_field_ref defined in AST_types.h
      uses variable AST_field_ref::arg1 defined in AST_defs.h
      uses enumvalue lpos defined in flow.c
      uses enumvalue apos defined in flow.c
      uses function qtype_aggregate(qtype) defined in qtype.c
      uses function field_qtype(qtype,cstring) defined in qtype.c
      uses variable AST_field_ref::cstring defined in AST_defs.h
      uses variable AST_field_ref::cstring_loc defined in AST_defs.h
      uses variable AST_field_ref::loc defined in AST_defs.h
      uses enumvalue kind_init_list defined in AST_types.h
      uses enumvalue kind_init_index defined in AST_types.h
      uses enumvalue kind_init_field defined in AST_types.h
      uses function fail(const char *,...) defined in utils.c
      uses macro definition is_unary defined in AST_types.h
      uses function analyze_unary_expression(unary,context,store) defined in flow.c
      uses macro definition is_binary defined in AST_types.h
      uses function analyze_binary_expression(binary,context,store) defined in flow.c
   function analyze_unary_expression(unary,context,store) in line 71
      protection public
      103 lines of code
      3 parameters
      21 conditional paths
      uses variable AST_unary::kind defined in AST_defs.h
      uses enumvalue kind_dereference defined in AST_types.h
      uses function analyze_expression(expression,context,store) defined in flow.c
      uses variable AST_unary::arg1 defined in AST_defs.h
      uses enumvalue rpos defined in flow.c
      uses function qtype_error(qtype) defined in qtype.c
      uses variable einfo::qt defined in flow.c
      uses function qtype_pointer_loc(qtype) defined in qtype.c
      uses enumvalue lpos defined in flow.c
      uses enumvalue apos defined in flow.c
      uses function mkeinfo(qtype,store,store,store,bool) defined in flow.c
      uses variable einfo::out defined in flow.c
      uses macro definition NULL defined in config.h
      uses macro definition FALSE defined in bool.h
      uses enumvalue cpos defined in flow.c
      uses function qtype_function(qtype) defined in qtype.c
      uses function points_to_fs_qtype(qtype,store) defined in qtype.c
      uses function default_conversion_fs_qtype(qtype) defined in qtype.c
      uses function fail(const char *,...) defined in utils.c
      uses enumvalue kind_address_of defined in AST_types.h
      uses function type_function(type) defined in types.c
      uses variable AST_expression::type defined in AST_defs.h
      uses enumvalue kind_extension_expr defined in AST_types.h
      uses enumvalue kind_realpart defined in AST_types.h
      uses enumvalue kind_imagpart defined in AST_types.h
      uses function qtype_complex(qtype) defined in qtype.c
      uses function complex_base_qtype(qtype) defined in qtype.c
      uses enumvalue kind_unary_minus defined in AST_types.h
      uses enumvalue kind_unary_plus defined in AST_types.h
      uses enumvalue kind_conjugate defined in AST_types.h
      uses enumvalue kind_bitnot defined in AST_types.h
      uses enumvalue kind_not defined in AST_types.h
      uses variable einfo::false_out defined in flow.c
      uses variable einfo::true_out defined in flow.c
      uses enumvalue kind_preincrement defined in AST_types.h
      uses enumvalue kind_postincrement defined in AST_types.h
      uses enumvalue kind_predecrement defined in AST_types.h
      uses enumvalue kind_postdecrement defined in AST_types.h
   function analyze_binary_expression(binary,context,store) in line 72
      protection public
      287 lines of code
      3 parameters
      51 conditional paths
      uses enumvalue rpos defined in flow.c
      uses enumvalue cpos defined in flow.c
      uses variable AST_binary::kind defined in AST_defs.h
      uses enumvalue kind_plus defined in AST_types.h
      uses variable einfo::qt defined in flow.c
      uses function analyze_expression(expression,context,store) defined in flow.c
      uses variable AST_binary::arg1 defined in AST_defs.h
      uses variable AST_binary::arg2 defined in AST_defs.h
      uses variable einfo::out defined in flow.c
      uses function qtype_pointer_loc(qtype) defined in qtype.c
      uses macro definition fail_loc defined in cqual.h
      uses variable AST_binary::loc defined in AST_defs.h
      uses function mkeq_qtype(location,qtype,qtype) defined in qtype.c
      uses function report_qerror(location,severity,const char *,...) defined in analyze.c
      uses enumvalue sev_err defined in qerror.h
      uses function binary_op_name(ast_kind) defined in flow.c
      uses function mkeinfo(qtype,store,store,store,bool) defined in flow.c
      uses macro definition NULL defined in config.h
      uses macro definition FALSE defined in bool.h
      uses enumvalue kind_minus defined in AST_types.h
      uses function qtype_to_fs_qtype(location,qtype) defined in qtype.c
      uses variable AST_binary::qtype defined in AST_defs.h
      uses enumvalue kind_modulo defined in AST_types.h
      uses enumvalue kind_lshift defined in AST_types.h
      uses enumvalue kind_rshift defined in AST_types.h
      uses enumvalue kind_times defined in AST_types.h
      uses enumvalue kind_divide defined in AST_types.h
      uses enumvalue kind_bitand defined in AST_types.h
      uses enumvalue kind_bitor defined in AST_types.h
      uses enumvalue kind_bitxor defined in AST_types.h
      uses enumvalue kind_andand defined in AST_types.h
      uses function true_out_einfo(einfo) defined in flow.c
      uses function mkqtype_bool(qual) defined in qtype.c
      uses function make_qvar(const char *,location,bool) defined in quals.c
      uses function lub_store(location,const char *,store,store) defined in effect.c
      uses function false_out_einfo(einfo) defined in flow.c
      uses enumvalue kind_oror defined in AST_types.h
      uses enumvalue kind_eq defined in AST_types.h
      uses enumvalue kind_ne defined in AST_types.h
      uses variable have_stream_quals defined in analyze.c
      uses function file_pointer_qtype(qtype) defined in analyze.c
      uses variable AST_expression::qtype defined in AST_defs.h
      uses function definite_null(expression) defined in constants.c
      uses enumvalue kind_leq defined in AST_types.h
      uses enumvalue kind_geq defined in AST_types.h
      uses enumvalue kind_lt defined in AST_types.h
      uses enumvalue kind_gt defined in AST_types.h
      uses enumvalue kind_modulo_assign defined in AST_types.h
      uses enumvalue kind_lshift_assign defined in AST_types.h
      uses enumvalue kind_rshift_assign defined in AST_types.h
      uses enumvalue lpos defined in flow.c
      uses function qtype_error(qtype) defined in qtype.c
      uses function points_to_fs_qtype(qtype,store) defined in qtype.c
      uses variable error_qtype defined in qtype.c
      uses enumvalue kind_plus_assign defined in AST_types.h
      uses enumvalue kind_minus_assign defined in AST_types.h
      uses enumvalue kind_times_assign defined in AST_types.h
      uses enumvalue kind_divide_assign defined in AST_types.h
      uses enumvalue kind_bitand_assign defined in AST_types.h
      uses enumvalue kind_bitor_assign defined in AST_types.h
      uses enumvalue kind_bitxor_assign defined in AST_types.h
      uses enumvalue kind_assign defined in AST_types.h
      uses variable einfo::ismalloc defined in flow.c
      uses function allocate_qtype(location,qtype,store) defined in flow.c
      uses function points_to_qtype(qtype) defined in qtype.c
      uses variable flag_casts_warn defined in flags.h
      uses function assign_flow_sensitive(location,const char *,qtype,qtype,store,bool) defined in qtype.c
      uses variable flag_print_lin defined in flags.h
      uses function queue_print_exp(expression,store,aloc) defined in flow.c
      uses function aloc_qtype(qtype) defined in qtype.c
      uses function file_pointer_fs_qtype(qtype,store) defined in flow.c
      uses function split_file_pointer_context(location,qtype,store) defined in flow.c
   function analyze_magic_function_call(function_call,qtype,store) in line 73
      protection public
      169 lines of code
      3 parameters
      20 conditional paths
      uses variable AST_function_call::arg1 defined in AST_defs.h
      uses variable AST_expression::kind defined in AST_defs.h
      uses enumvalue kind_identifier defined in AST_types.h
      uses macro definition CAST defined in AST.h
      uses variable AST_identifier::cstring defined in AST_defs.h
      uses variable cstring::data defined in cstring.h
      uses variable have_stream_quals defined in analyze.c
      uses macro definition NULL defined in config.h
      uses macro definition scan_expression defined in AST_defs.h
      uses variable AST_function_call::args defined in AST_defs.h
      uses function analyze_expression(expression,context,store) defined in flow.c
      uses enumvalue rpos defined in flow.c
      uses variable einfo::out defined in flow.c
      uses function report_qerror(location,severity,const char *,...) defined in analyze.c
      uses variable AST_function_call::loc defined in AST_defs.h
      uses enumvalue sev_err defined in qerror.h
      uses variable AST_expression::next defined in AST_defs.h
      uses variable AST_node::kind defined in AST_defs.h
      uses enumvalue kind_string defined in AST_types.h
      uses function string_mode_to_qual(const char *) defined in flow.c
      uses function string_to_charp(region,string) defined in AST_utils.c
      uses variable parse_region defined in c-parse.h
      uses variable open_unchecked_qual defined in analyze.c
      uses variable AST_node::loc defined in AST_defs.h
      uses enumvalue sev_info defined in qerror.h
      uses variable readwrite_unchecked_qual defined in analyze.c
      uses function int_mode_to_qual(known_cst) defined in flow.c
      uses function fail(const char *,...) defined in utils.c
      uses function qtype_to_fs_qtype(location,qtype) defined in qtype.c
      uses variable AST_function_call::qtype defined in AST_defs.h
      uses variable readwrite_qual defined in analyze.c
      uses function qtype_pointer_loc(qtype) defined in qtype.c
      uses function aloc_qtype(qtype) defined in qtype.c
      uses function copy_qtype(qtype,location) defined in qtype.c
      uses function points_to_fs_qtype(qtype,store) defined in qtype.c
      uses macro definition insistnot defined in utils.h
      uses function mkleq_qual(location,qual,qual) defined in quals.c
      uses function qual_qtype(qtype) defined in qtype.c
      uses function make_store_ref(location,store,aloc) defined in effect.c
      uses function make_store_assign(location,const char *,store,aloc,qtype,bool) defined in effect.c
      uses macro definition TRUE defined in bool.h
      uses function mkeinfo(qtype,store,store,store,bool) defined in flow.c
      uses macro definition FALSE defined in bool.h
      uses function qtype_pointer(qtype) defined in qtype.c
      uses function allocate_qtype(location,qtype,store) defined in flow.c
      uses variable have_sleepy_quals defined in analyze.c
      uses enumvalue kind_lexical_cst defined in AST_types.h
      uses variable AST_lexical_cst::cstring defined in AST_defs.h
      uses variable einfo::qt defined in flow.c
      uses variable interrupt_status_qtype defined in analyze.c
      uses function qtype_from_store(store,aloc) defined in effect.c
      uses variable enabled_qual defined in analyze.c
   function split_file_pointer_context(location,qtype,store) in line 74
      protection public
      33 lines of code
      3 parameters
      1 conditional paths
      uses variable have_stream_quals defined in analyze.c
      uses function file_pointer_fs_qtype(qtype,store) defined in flow.c
      uses variable einfo::qt defined in flow.c
      uses function aloc_qtype(qtype) defined in qtype.c
      uses function qtype_from_store(store,aloc) defined in effect.c
      uses function copy_qtype(qtype,location) defined in qtype.c
      uses macro definition insistnot defined in utils.h
      uses function cond_mkleq_qual(location,qual,qual,qual,qual) defined in quals.c
      uses variable read_unchecked_qual defined in analyze.c
      uses function qual_qtype(qtype) defined in qtype.c
      uses variable read_qual defined in analyze.c
      uses variable write_unchecked_qual defined in analyze.c
      uses variable write_qual defined in analyze.c
      uses function mkleq_qual(location,qual,qual) defined in quals.c
      uses variable closed_qual defined in analyze.c
      uses function make_store_assign(location,const char *,store,aloc,qtype,bool) defined in effect.c
      uses macro definition TRUE defined in bool.h
      uses function mkeinfo(qtype,store,store,store,bool) defined in flow.c
      uses macro definition NULL defined in config.h
      uses macro definition FALSE defined in bool.h
   function file_pointer_fs_qtype(qtype,store) in line 75
      protection public
      13 lines of code
      2 parameters
      2 conditional paths
      uses function qtype_pointer_loc(qtype) defined in qtype.c
      uses variable einfo::qt defined in flow.c
      uses function points_to_fs_qtype(qtype,store) defined in qtype.c
      uses function qtype_struct(qtype) defined in qtype.c
      uses function tag_name_qtype(qtype) defined in qtype.c
      uses macro definition FALSE defined in bool.h
   function allocate_qtype(location,qtype,store) in line 76
      protection public
      15 lines of code
      3 parameters
      1 conditional paths
      uses function ref_qtype_store(location,qtype,store) defined in qtype.c
      uses variable einfo::qt defined in flow.c
   function put_id_in_fs_context(location,qtype,context,store) in line 77
      protection public
      38 lines of code
      4 parameters
      10 conditional paths
      uses function qtype_error(qtype) defined in qtype.c
      uses variable einfo::qt defined in flow.c
      uses function qtype_array(qtype) defined in qtype.c
      uses enumvalue rpos defined in flow.c
      uses enumvalue cpos defined in flow.c
      uses function default_conversion_fs_qtype(qtype) defined in qtype.c
      uses enumvalue apos defined in flow.c
      uses function mkqtype_pointer_loc(qual,aloc) defined in qtype.c
      uses function make_fresh_qvar(const char *,location) defined in quals.c
      uses function array_aloc_qtype(qtype) defined in qtype.c
      uses function fail(const char *,...) defined in utils.c
      uses function qtype_function(qtype) defined in qtype.c
      uses function aloc_qtype(qtype) defined in qtype.c
      uses enumvalue lpos defined in flow.c
      uses function qtype_pointer_loc(qtype) defined in qtype.c
      uses function points_to_fs_qtype(qtype,store) defined in qtype.c
      uses variable have_stream_quals defined in analyze.c
      uses function file_pointer_fs_qtype(qtype,store) defined in flow.c
      uses function split_file_pointer_context(location,qtype,store) defined in flow.c
      uses function mkeinfo(qtype,store,store,store,bool) defined in flow.c
      uses macro definition NULL defined in config.h
      uses macro definition FALSE defined in bool.h
   function print_queue(void) in line 79
      protection public
      33 lines of code
      1 parameters
      6 conditional paths
      uses macro definition dd_scan defined in dd_list.h
      uses variable printqueue defined in flow.c
      uses macro definition DD_GET defined in dd_list.h
      uses variable PrintQueue_elt::kind defined in flow.c
      uses function printf(const char *$NONYEAR,(null)) defined in rcs1.c
      uses function prt_expression(expression,int) defined in flow.c
      uses variable PrintQueue_elt::u defined in flow.c
      uses variable PrintQueue_elt::expr defined in flow.c
      uses function prt_statement(statement) defined in flow.c
      uses variable PrintQueue_elt::stmt defined in flow.c
      uses function fail(const char *,...) defined in utils.c
      uses function print_aloc(printf_func,aloc) defined in effect.c
      uses variable PrintQueue_elt::al defined in flow.c
      uses function lin_from_store(store,aloc) defined in effect.c
      uses variable PrintQueue_elt::store defined in flow.c
   function queue_print_exp(expression,store,aloc) in line 80
      protection public
      11 lines of code
      3 parameters
      1 conditional paths
      uses macro definition ralloc defined in regions.h
      uses variable parse_region defined in c-parse.h
      uses variable PrintQueue_elt::kind defined in flow.c
      uses variable PrintQueue_elt::u defined in flow.c
      uses variable PrintQueue_elt::expr defined in flow.c
      uses variable PrintQueue_elt::store defined in flow.c
      uses variable PrintQueue_elt::al defined in flow.c
      uses function dd_add_last(region,dd_list,void *) defined in dd_list.c
      uses variable printqueue defined in flow.c
   function queue_print_stmt(statement,store,aloc) in line 81
      protection public
      11 lines of code
      3 parameters
      1 conditional paths
      uses macro definition ralloc defined in regions.h
      uses variable parse_region defined in c-parse.h
      uses variable PrintQueue_elt::kind defined in flow.c
      uses variable PrintQueue_elt::u defined in flow.c
      uses variable PrintQueue_elt::stmt defined in flow.c
      uses variable PrintQueue_elt::store defined in flow.c
      uses variable PrintQueue_elt::al defined in flow.c
      uses function dd_add_last(region,dd_list,void *) defined in dd_list.c
      uses variable printqueue defined in flow.c
   function prt_expression(expression,int) in line 82
      protection public
      33 lines of code
      2 parameters
      1 conditional paths
   function prt_statement(statement) in line 83
      protection public
      24 lines of code
      1 parameters
      1 conditional paths
      uses variable AST_statement::kind defined in AST_defs.h
      uses macro definition PRTCASE defined in unparse.c
   function tfr_jumped_blocks(store,compound_stmt,compound_stmt) in line 84
      protection public
      22 lines of code
      3 parameters
      3 conditional paths
      uses function get_enclosing_scope(compound_stmt,compound_stmt) defined in flow.c
      uses function ref_decls(store,declaration) defined in flow.c
      uses variable AST_compound_stmt::decls defined in AST_defs.h
      uses variable AST_compound_stmt::enclosing_cs defined in AST_defs.h
      uses function merge_restricts(declaration,store) defined in flow.c
   function allocate_ddecl(data_declaration,store) in line 85
      protection public
      27 lines of code
      2 parameters
      5 conditional paths
      uses function root_ddecl(data_declaration) defined in analyze.c
      uses function location_declaration(declaration) defined in analyze.c
      uses variable data_declaration::ast defined in decls.h
      uses variable data_declaration::qtype defined in decls.h
      uses variable data_declaration::definition defined in decls.h
      uses variable data_declaration::isallocated defined in decls.h
      uses variable data_declaration::kind defined in decls.h
      uses enumvalue decl_variable defined in decls.h
      uses variable data_declaration::isexternalscope defined in decls.h
      uses variable data_declaration::vtype defined in decls.h
      uses variable global_store_ext defined in flow.c
      uses function allocate_qtype(location,qtype,store) defined in flow.c
      uses enumvalue decl_function defined in decls.h
      uses macro definition TRUE defined in bool.h
   function merge_restricts(declaration,store) in line 86
      protection public
      33 lines of code
      2 parameters
      8 conditional paths
      uses macro definition CAST defined in AST.h
      uses variable AST_declaration::next defined in AST_defs.h
      uses variable AST_declaration::kind defined in AST_defs.h
      uses enumvalue kind_asm_decl defined in AST_types.h
      uses enumvalue kind_function_decl defined in AST_types.h
      uses enumvalue kind_ellipsis_decl defined in AST_types.h
      uses enumvalue kind_oldidentifier_decl defined in AST_types.h
      uses enumvalue kind_extension_decl defined in AST_types.h
      uses variable AST_extension_decl::decl defined in AST_defs.h
      uses macro definition NULL defined in config.h
      uses enumvalue kind_data_decl defined in AST_types.h
      uses macro definition scan_declaration defined in AST_defs.h
      uses function merge_var_decl_restrict(variable_decl,store) defined in flow.c
      uses macro definition fail_loc defined in cqual.h
      uses variable AST_declaration::loc defined in AST_defs.h
   function is_void_parms(declaration) in line 88
      protection public
      15 lines of code
      1 parameters
      1 conditional paths
      uses variable AST_declaration::next defined in AST_defs.h
      uses macro definition is_data_decl defined in AST_types.h
      uses macro definition FALSE defined in bool.h
      uses macro definition CAST defined in AST.h
      uses variable AST_data_decl::decls defined in AST_defs.h
      uses variable AST_variable_decl::next defined in AST_defs.h
      uses variable AST_variable_decl::declarator defined in AST_defs.h
      uses variable AST_data_decl::modifiers defined in AST_defs.h
      uses variable AST_type_element::next defined in AST_defs.h
      uses macro definition is_rid defined in AST_types.h
      uses enumvalue RID_VOID defined in c-lex.h
   function isassignment(binary) in line 89
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
      uses variable AST_binary::kind defined in AST_defs.h
      uses enumvalue kind_plus_assign defined in AST_types.h
      uses enumvalue kind_minus_assign defined in AST_types.h
      uses enumvalue kind_modulo_assign defined in AST_types.h
      uses enumvalue kind_lshift_assign defined in AST_types.h
      uses enumvalue kind_rshift_assign defined in AST_types.h
      uses enumvalue kind_times_assign defined in AST_types.h
      uses enumvalue kind_divide_assign defined in AST_types.h
      uses enumvalue kind_bitand_assign defined in AST_types.h
      uses enumvalue kind_bitor_assign defined in AST_types.h
      uses enumvalue kind_bitxor_assign defined in AST_types.h
      uses enumvalue kind_assign defined in AST_types.h
   function binary_op_name(ast_kind) in line 90
      protection public
      36 lines of code
      1 parameters
      1 conditional paths
   function init_flow_sensitive(void) in line 104
      protection public
      9 lines of code
      1 parameters
      1 conditional paths
      uses variable current_function_decl defined in analyze.h
      uses macro definition NULL defined in config.h
      uses variable global_store defined in flow.c
      uses function make_store_var(location,const char *) defined in effect.c
      uses variable global_store_ext defined in flow.c
      uses variable function_defns defined in flow.c
      uses function dd_new_list(region) defined in dd_list.c
      uses variable parse_region defined in c-parse.h
      uses variable printqueue defined in flow.c
      uses function reset_flow_sensitive_quals(void) defined in quals.c
   function finish_flow_sensitive(void) in line 114
      protection public
      77 lines of code
      1 parameters
      1 conditional paths
      uses function mkleq_store(location,const char *,store,store) defined in effect.c
      uses macro definition NULL defined in config.h
      uses variable global_store_ext defined in flow.c
      uses variable global_store defined in flow.c
      uses function get_main_ddecl(void) defined in analyze.c
      uses variable data_declaration::definition defined in decls.h
      uses variable data_declaration::qtype defined in decls.h
      uses function store_in_qtype(qtype) defined in qtype.c
      uses function effect_qtype(qtype) defined in qtype.c
      uses function location_declaration(declaration) defined in analyze.c
      uses variable data_declaration::ast defined in decls.h
      uses function make_store_filter(location,store,effect) defined in effect.c
      uses variable toplvl_store defined in flow.c
      uses variable flag_driver defined in flags.h
      uses macro definition FALSE defined in bool.h
      uses macro definition dd_scan defined in dd_list.h
      uses variable function_defns defined in flow.c
      uses macro definition DD_GET defined in dd_list.h
      uses function root_ddecl(data_declaration) defined in analyze.c
      uses variable AST_function_decl::ddecl defined in AST_defs.h
      uses function is_externally_visible_fn(data_declaration) defined in flow.c
      uses variable einfo::eff defined in flow.c
      uses macro definition TRUE defined in bool.h
      uses variable data_declaration::name defined in decls.h
      uses function store_out_qtype(qtype) defined in qtype.c
      uses function make_store_ow(location,store,store,effect) defined in effect.c
      uses function report_qerror(location,severity,const char *,...) defined in analyze.c
      uses enumvalue sev_warn defined in qerror.h
      uses function compute_lins(void) defined in effect.c
      uses variable flag_pam_mode defined in flags.h
      uses function traverse_globals(void(*)(data_declaration, void *),void *) defined in analyze.c
      uses function warn_if_dangerous_global(data_declaration,store) defined in analyze.c
      uses variable flag_print_lin defined in flags.h
      uses function print_queue(void) defined in flow.c
   function mkeinfo(qtype,store,store,store,bool) in line 198
      protection public
      10 lines of code
      5 parameters
      1 conditional paths
      uses variable einfo::qt defined in flow.c
      uses variable einfo::out defined in flow.c
      uses variable einfo::true_out defined in flow.c
      uses variable einfo::false_out defined in flow.c
      uses variable einfo::ismalloc defined in flow.c
   function true_out_einfo(einfo) in line 209
      protection public
      10 lines of code
      1 parameters
      2 conditional paths
      uses variable einfo::true_out defined in flow.c
      uses variable einfo::out defined in flow.c
   function false_out_einfo(einfo) in line 220
      protection public
      10 lines of code
      1 parameters
      2 conditional paths
      uses variable einfo::false_out defined in flow.c
      uses variable einfo::out defined in flow.c
   function mksinfo(store) in line 231
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable einfo::out defined in flow.c
   function mkdinfo(store) in line 237
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable einfo::out defined in flow.c
   function is_externally_visible_fn(data_declaration) in line 244
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses function root_ddecl(data_declaration) defined in analyze.c
      uses variable data_declaration::kind defined in decls.h
      uses enumvalue decl_function defined in decls.h
      uses variable data_declaration::isexterninline defined in decls.h
      uses variable data_declaration::ftype defined in decls.h
      uses variable data_declaration::addresstaken defined in decls.h
   function add_flow_sensitive_declarator_overlay(declarator,qtype,store) in line 255
      protection public
      6 lines of code
      3 parameters
      1 conditional paths
      uses function get_id_declarator(declarator) defined in analyze.c
      uses function pam_add_overlay_flow_sensitive(location,qtype,store) defined in pam.c
      uses variable AST_identifier_declarator::loc defined in AST_defs.h
   function init_restrict(variable_decl,store) in line 265
      protection public
      27 lines of code
      2 parameters
      1 conditional paths
      uses variable AST_variable_decl::rinfo defined in AST_defs.h
      uses macro definition FALSE defined in bool.h
      uses variable Rinfo::fs_fqtype defined in analyze.h
      uses variable Rinfo::fs_rqtype defined in analyze.h
      uses function mkleq_qual(location,qual,qual) defined in quals.c
      uses variable AST_variable_decl::loc defined in AST_defs.h
      uses function qual_qtype(qtype) defined in qtype.c
      uses function points_to_fs_qtype(qtype,store) defined in qtype.c
      uses function mkleq_qtype(location,qtype,qtype) defined in qtype.c
   function add_ddecl_fs_qtype(data_declaration,store) in line 294
      protection public
      63 lines of code
      2 parameters
      8 conditional paths
      uses variable data_declaration::qtype defined in decls.h
      uses variable data_declaration::fs_qtype defined in decls.h
      uses function root_ddecl(data_declaration) defined in analyze.c
      uses function location_declaration(declaration) defined in analyze.c
      uses variable data_declaration::ast defined in decls.h
      uses variable data_declaration::global defined in decls.h
      uses function qtype_to_fs_qtype_with_quals(location,qtype,store) defined in qtype.c
      uses variable global_store defined in flow.c
      uses variable data_declaration::in_prelude defined in decls.h
      uses function match_type(type,type) defined in qtype.c
      uses variable data_declaration::type defined in decls.h
      uses function unify_qtype(location,qtype,qtype) defined in qtype.c
      uses function report_qerror(location,severity,const char *,...) defined in analyze.c
      uses enumvalue sev_err defined in qerror.h
      uses variable data_declaration::name defined in decls.h
      uses variable AST_declaration::loc defined in AST_defs.h
      uses enumvalue sev_info defined in qerror.h
   function init_string(location,qtype,qtype,store) in line 678
      protection public
      16 lines of code
      4 parameters
      1 conditional paths
      uses macro definition FALSE defined in bool.h
      uses function array_of_qtype(qtype) defined in qtype.c
      uses function points_to_fs_qtype(qtype,store) defined in qtype.c
      uses function mkleq_qual(location,qual,qual) defined in quals.c
      uses function qual_qtype(qtype) defined in qtype.c
   function get_enclosing_scope(compound_stmt,compound_stmt) in line 2158
      protection public
      40 lines of code
      2 parameters
      9 conditional paths
      uses macro definition NULL defined in config.h
      uses variable AST_compound_stmt::visited defined in AST_defs.h
      uses macro definition TRUE defined in bool.h
      uses variable AST_compound_stmt::enclosing_cs defined in AST_defs.h
      uses macro definition FALSE defined in bool.h
   function ref_decls(store,declaration) in line 2200
      protection public
      51 lines of code
      2 parameters
      9 conditional paths
      uses macro definition CAST defined in AST.h
      uses variable AST_declaration::next defined in AST_defs.h
      uses variable AST_declaration::kind defined in AST_defs.h
      uses enumvalue kind_asm_decl defined in AST_types.h
      uses enumvalue kind_function_decl defined in AST_types.h
      uses enumvalue kind_ellipsis_decl defined in AST_types.h
      uses enumvalue kind_oldidentifier_decl defined in AST_types.h
      uses enumvalue kind_extension_decl defined in AST_types.h
      uses variable AST_extension_decl::decl defined in AST_defs.h
      uses macro definition NULL defined in config.h
      uses enumvalue kind_data_decl defined in AST_types.h
      uses macro definition scan_declaration defined in AST_defs.h
      uses variable AST_data_decl::decls defined in AST_defs.h
      uses variable AST_variable_decl::asm_stmt defined in AST_defs.h
      uses function root_ddecl(data_declaration) defined in analyze.c
      uses variable AST_variable_decl::ddecl defined in AST_defs.h
      uses variable data_declaration::qtype defined in decls.h
      uses variable data_declaration::definition defined in decls.h
      uses variable data_declaration::kind defined in decls.h
      uses enumvalue decl_variable defined in decls.h
      uses variable data_declaration::isexternalscope defined in decls.h
      uses variable data_declaration::vtype defined in decls.h
      uses function allocate_qtype(location,qtype,store) defined in flow.c
      uses function location_declaration(declaration) defined in analyze.c
      uses variable data_declaration::ast defined in decls.h
      uses macro definition fail_loc defined in cqual.h
      uses variable AST_declaration::loc defined in AST_defs.h
   function merge_var_decl_restrict(variable_decl,store) in line 2318
      protection public
      20 lines of code
      2 parameters
      2 conditional paths
      uses variable AST_variable_decl::rinfo defined in AST_defs.h
      uses function points_to_fs_qtype(qtype,store) defined in qtype.c
      uses variable Rinfo::fs_fqtype defined in analyze.h
      uses variable Rinfo::fs_rqtype defined in analyze.h
      uses function assign_flow_sensitive(location,const char *,qtype,qtype,store,bool) defined in qtype.c
      uses variable AST_variable_decl::loc defined in AST_defs.h
      uses macro definition FALSE defined in bool.h
   function string_mode_to_qual(const char *) in line 2382
      protection public
      23 lines of code
      1 parameters
      4 conditional paths
      uses variable read_unchecked_qual defined in analyze.c
      uses variable write_unchecked_qual defined in analyze.c
      uses variable readwrite_unchecked_qual defined in analyze.c
      uses macro definition NULL defined in config.h
   function int_mode_to_qual(known_cst) in line 2406
      protection public
      13 lines of code
      1 parameters
      4 conditional paths
      uses macro definition constant_uint_value defined in constants.h
      uses variable read_unchecked_qual defined in analyze.c
      uses variable write_unchecked_qual defined in analyze.c
      uses variable readwrite_unchecked_qual defined in analyze.c
      uses macro definition NULL defined in config.h
   variable einfo::eff in line 38
      protection public
   variable einfo::false_out in line 52
      protection public
   variable einfo::ismalloc in line 39
      protection public
   variable einfo::out in line 50
      protection public
   variable einfo::qt in line 37
      protection public
   variable einfo::true_out in line 51
      protection public
   variable sinfo::eff in line 43
      protection public
   variable sinfo::out in line 59
      protection public
   variable dinfo::alocs in line 48
      protection public
   variable dinfo::drinfolist in line 49
      protection public
   variable dinfo::eff in line 47
      protection public
   variable dinfo::out in line 63
      protection public
   variable PrintQueue_elt::al in line 2655
      protection public
   variable PrintQueue_elt::expr in line 2652
      protection public
   variable PrintQueue_elt::kind in line 2649
      protection public
   variable PrintQueue_elt::stmt in line 2651
      protection public
   variable PrintQueue_elt::store in line 2654
      protection public
   variable PrintQueue_elt::u in line 2653
      protection public
   variable PrintQueue_elt::@28::expr in line 2652
      protection public
   variable PrintQueue_elt::@28::stmt in line 2651
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cqual/cqual-0.981/src/flow.h
module flow.h
   variable global_store in line 43
      protection public
   function analyze_flow_sensitive(declaration) in line 36
      protection public
      13 lines of code
      1 parameters
      1 conditional paths
      uses variable global_store defined in flow.c
      uses macro definition scan_declaration defined in AST_defs.h
      uses variable dinfo::out defined in flow.c
   function init_flow_sensitive(void) in line 37
      protection public
      9 lines of code
      1 parameters
      1 conditional paths
      uses variable current_function_decl defined in analyze.h
      uses macro definition NULL defined in config.h
      uses variable global_store defined in flow.c
      uses function make_store_var(location,const char *) defined in effect.c
      uses function dd_new_list(region) defined in dd_list.c
      uses variable parse_region defined in c-parse.h
      uses function reset_flow_sensitive_quals(void) defined in quals.c
   function finish_flow_sensitive(void) in line 38
      protection public
      77 lines of code
      1 parameters
      7 conditional paths
      uses function mkleq_store(location,const char *,store,store) defined in effect.c
      uses macro definition NULL defined in config.h
      uses variable global_store defined in flow.c
      uses function get_main_ddecl(void) defined in analyze.c
      uses variable data_declaration::definition defined in decls.h
      uses variable data_declaration::qtype defined in decls.h
      uses function store_in_qtype(qtype) defined in qtype.c
      uses function effect_qtype(qtype) defined in qtype.c
      uses function location_declaration(declaration) defined in analyze.c
      uses variable data_declaration::ast defined in decls.h
      uses function make_store_filter(location,store,effect) defined in effect.c
      uses variable flag_driver defined in flags.h
      uses macro definition FALSE defined in bool.h
      uses macro definition dd_scan defined in dd_list.h
      uses macro definition DD_GET defined in dd_list.h
      uses function root_ddecl(data_declaration) defined in analyze.c
      uses variable AST_function_decl::ddecl defined in AST_defs.h
      uses function is_externally_visible_fn(data_declaration) defined in flow.c
      uses variable einfo::eff defined in flow.c
      uses macro definition TRUE defined in bool.h
      uses variable data_declaration::name defined in decls.h
      uses function store_out_qtype(qtype) defined in qtype.c
      uses function make_store_ow(location,store,store,effect) defined in effect.c
      uses function report_qerror(location,severity,const char *,...) defined in analyze.c
      uses enumvalue sev_warn defined in qerror.h
      uses function compute_lins(void) defined in effect.c
      uses variable flag_pam_mode defined in flags.h
      uses function traverse_globals(void(*)(data_declaration, void *),void *) defined in analyze.c
      uses function warn_if_dangerous_global(data_declaration,store) defined in analyze.c
      uses variable flag_print_lin defined in flags.h
   function is_externally_visible_fn(data_declaration) in line 41
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses function root_ddecl(data_declaration) defined in analyze.c
      uses variable data_declaration::kind defined in decls.h
      uses enumvalue decl_function defined in decls.h
      uses variable data_declaration::isexterninline defined in decls.h
      uses variable data_declaration::ftype defined in decls.h
      uses variable data_declaration::addresstaken defined in decls.h
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cqual/cqual-0.981/src/hash.c
module hash.c
   macro definition scan_bucket in line 31
      protection public
   variable cur_cmp in line 316
      protection public
   function rehash(hash_table) in line 44
      protection public
      20 lines of code
      1 parameters
      2 conditional paths
      uses function printf(const char *$NONYEAR,(null)) defined in rcs1.c
      uses variable Hash_table::size defined in hash.c
      uses variable Hash_table::elts defined in hash.c
      uses variable Hash_table::table defined in hash.c
      uses macro definition rarrayalloc defined in regions.h
      uses variable Hash_table::r defined in hash.c
      uses macro definition scan_bucket defined in hash.c
      uses macro definition insist defined in utils.h
      uses function hash_table_insert(hash_table,hash_key,hash_data) defined in hash.c
      uses variable bucket::key defined in hash.c
      uses variable bucket::data defined in hash.c
   function make_hash_table(region,int,hash_fn,keyeq_fn) in line 48
      protection public
      15 lines of code
      4 parameters
      1 conditional paths
      uses macro definition ralloc defined in regions.h
      uses variable Hash_table::r defined in hash.c
      uses variable Hash_table::hash defined in hash.c
      uses variable Hash_table::cmp defined in hash.c
      uses variable Hash_table::size defined in hash.c
      uses variable Hash_table::elts defined in hash.c
      uses variable Hash_table::table defined in hash.c
      uses macro definition rarrayalloc defined in regions.h
   function make_string_hash_table(region,int) in line 65
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses function make_hash_table(region,int,hash_fn,keyeq_fn) defined in hash.c
      uses function string_hash(const char *) defined in containers.h
      uses function string_eq(const char *,const char *) defined in containers.h
   function hash_table_reset(hash_table) in line 72
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses variable Hash_table::elts defined in hash.c
      uses variable Hash_table::size defined in hash.c
      uses variable Hash_table::table defined in hash.c
      uses macro definition NULL defined in config.h
   function hash_table_size(hash_table) in line 82
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable Hash_table::elts defined in hash.c
   function find_bucket(hash_table,hash_key) in line 88
      protection public
      9 lines of code
      2 parameters
      2 conditional paths
      uses variable Hash_table::hash defined in hash.c
      uses variable Hash_table::table defined in hash.c
      uses variable Hash_table::size defined in hash.c
   function hash_table_lookup(hash_table,hash_key,hash_data *) in line 100
      protection public
      17 lines of code
      3 parameters
      1 conditional paths
      uses function find_bucket(hash_table,hash_key) defined in hash.c
      uses variable Hash_table::cmp defined in hash.c
      uses variable bucket::key defined in hash.c
      uses variable bucket::data defined in hash.c
      uses macro definition TRUE defined in bool.h
      uses variable bucket::next defined in hash.c
      uses macro definition FALSE defined in bool.h
   function hash_table_insert(hash_table,hash_key,hash_data) in line 120
      protection public
      23 lines of code
      3 parameters
      1 conditional paths
      uses variable Hash_table::elts defined in hash.c
      uses variable Hash_table::size defined in hash.c
      uses function rehash(hash_table) defined in hash.c
      uses function find_bucket(hash_table,hash_key) defined in hash.c
      uses variable Hash_table::cmp defined in hash.c
      uses macro definition FALSE defined in bool.h
      uses variable bucket::next defined in hash.c
      uses macro definition ralloc defined in regions.h
      uses variable Hash_table::r defined in hash.c
      uses macro definition NULL defined in config.h
      uses macro definition TRUE defined in bool.h
   function hash_table_remove(hash_table,hash_key) in line 145
      protection public
      22 lines of code
      2 parameters
      1 conditional paths
      uses macro definition NULL defined in config.h
      uses function find_bucket(hash_table,hash_key) defined in hash.c
      uses variable Hash_table::cmp defined in hash.c
      uses variable bucket::next defined in hash.c
      uses variable Hash_table::elts defined in hash.c
      uses macro definition TRUE defined in bool.h
      uses macro definition FALSE defined in bool.h
   function hash_table_copy(region,hash_table) in line 169
      protection public
      38 lines of code
      2 parameters
      1 conditional paths
      uses function make_hash_table(region,int,hash_fn,keyeq_fn) defined in hash.c
      uses variable Hash_table::size defined in hash.c
      uses variable Hash_table::hash defined in hash.c
      uses variable Hash_table::cmp defined in hash.c
      uses variable Hash_table::elts defined in hash.c
      uses variable Hash_table::table defined in hash.c
      uses macro definition scan_bucket defined in hash.c
      uses macro definition ralloc defined in regions.h
      uses variable Hash_table::r defined in hash.c
      uses variable bucket::key defined in hash.c
      uses variable bucket::data defined in hash.c
      uses variable bucket::next defined in hash.c
      uses macro definition NULL defined in config.h
   function hash_table_scan(hash_table,hash_table_scanner *) in line 231
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
      uses variable hash_table_scanner::ht defined in hash.h
      uses variable hash_table_scanner::i defined in hash.h
      uses variable hash_table_scanner::cur defined in hash.h
      uses variable Hash_table::table defined in hash.c
   function hash_table_next(hash_table_scanner *,hash_key *,hash_data *) in line 241
      protection public
      25 lines of code
      3 parameters
      1 conditional paths
      uses variable hash_table_scanner::cur defined in hash.h
      uses macro definition NULL defined in config.h
      uses variable hash_table_scanner::i defined in hash.h
      uses variable hash_table_scanner::ht defined in hash.h
      uses variable Hash_table::size defined in hash.c
      uses variable Hash_table::table defined in hash.c
      uses macro definition FALSE defined in bool.h
      uses variable bucket::key defined in hash.c
      uses variable bucket::data defined in hash.c
      uses variable bucket::next defined in hash.c
      uses macro definition TRUE defined in bool.h
   function hash_table_apply(hash_table,hash_apply_fn,void *) in line 268
      protection public
      9 lines of code
      3 parameters
      2 conditional paths
      uses variable Hash_table::size defined in hash.c
      uses macro definition scan_bucket defined in hash.c
      uses variable Hash_table::table defined in hash.c
      uses function f(char *) defined in taint-const-subtyping.c
      uses variable bucket::key defined in hash.c
      uses variable bucket::data defined in hash.c
   function hash_table_map(region,hash_table,hash_map_fn,void *) in line 279
      protection public
      36 lines of code
      4 parameters
      1 conditional paths
      uses function make_hash_table(region,int,hash_fn,keyeq_fn) defined in hash.c
      uses variable Hash_table::size defined in hash.c
      uses variable Hash_table::hash defined in hash.c
      uses variable Hash_table::cmp defined in hash.c
      uses variable Hash_table::elts defined in hash.c
      uses variable Hash_table::table defined in hash.c
      uses macro definition scan_bucket defined in hash.c
      uses macro definition ralloc defined in regions.h
      uses variable Hash_table::r defined in hash.c
      uses variable bucket::key defined in hash.c
      uses variable bucket::data defined in hash.c
      uses function f(char *) defined in taint-const-subtyping.c
      uses variable bucket::next defined in hash.c
      uses macro definition NULL defined in config.h
   function entry_cmp(const void *,const void *) in line 318
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
      uses variable cur_cmp defined in hash.c
      uses variable sorted_entry::k defined in hash.h
   function hash_table_scan_sorted(hash_table,keycmp_fn,hash_table_scanner_sorted *) in line 326
      protection public
      21 lines of code
      3 parameters
      1 conditional paths
      uses variable hash_table_scanner_sorted::r defined in hash.h
      uses function newregion(void) defined in regions.c
      uses variable hash_table_scanner_sorted::size defined in hash.h
      uses function hash_table_size(hash_table) defined in hash.c
      uses variable hash_table_scanner_sorted::entries defined in hash.h
      uses macro definition rarrayalloc defined in regions.h
      uses variable hash_table_scanner_sorted::i defined in hash.h
      uses function hash_table_scan(hash_table,hash_table_scanner *) defined in hash.c
      uses function hash_table_next(hash_table_scanner *,hash_key *,hash_data *) defined in hash.c
      uses variable sorted_entry::k defined in hash.h
      uses variable sorted_entry::d defined in hash.h
      uses variable cur_cmp defined in hash.c
      uses function f(char *) defined in taint-const-subtyping.c
      uses function entry_cmp(const void *,const void *) defined in hash.c
      uses macro definition NULL defined in config.h
   function hash_table_next_sorted(hash_table_scanner_sorted *,hash_key *,hash_data *) in line 349
      protection public
      19 lines of code
      3 parameters
      1 conditional paths
      uses variable hash_table_scanner_sorted::i defined in hash.h
      uses variable hash_table_scanner_sorted::size defined in hash.h
      uses variable sorted_entry::k defined in hash.h
      uses variable hash_table_scanner_sorted::entries defined in hash.h
      uses variable sorted_entry::d defined in hash.h
      uses macro definition TRUE defined in bool.h
      uses function deleteregion(region) defined in regions.c
      uses variable hash_table_scanner_sorted::r defined in hash.h
      uses macro definition NULL defined in config.h
      uses macro definition FALSE defined in bool.h
   variable bucket::data in line 27
      protection public
   variable bucket::key in line 26
      protection public
   variable bucket::next in line 28
      protection public
   variable Hash_table::cmp in line 37
      protection public
   variable Hash_table::elts in line 40
      protection public
   variable Hash_table::hash in line 36
      protection public
   variable Hash_table::r in line 35
      protection public
   variable Hash_table::size in line 39
      protection public
   variable Hash_table::table in line 41
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cqual/cqual-0.981/src/hash.h
module hash.h
   variable hash_key in line 27
      protection public
   typedef hash_data in line 28
      protection public
   typedef hash_fn in line 30
      protection public
   typedef keyeq_fn in line 31
      protection public
   typedef hash_apply_fn in line 34
      protection public
   typedef hash_map_fn in line 37
      protection public
   typedef hash_table in line 41
      protection public
   typedef bucket in line 74
      protection public
   typedef keycmp_fn in line 91
      protection public
   function make_hash_table(region,int,hash_fn,keyeq_fn) in line 45
      protection public
      15 lines of code
      4 parameters
      1 conditional paths
      uses macro definition ralloc defined in regions.h
      uses variable Hash_table::r defined in hash.c
      uses variable Hash_table::hash defined in hash.c
      uses variable Hash_table::cmp defined in hash.c
      uses variable Hash_table::size defined in hash.c
      uses variable Hash_table::elts defined in hash.c
      uses variable Hash_table::table defined in hash.c
      uses macro definition rarrayalloc defined in regions.h
   function make_string_hash_table(region,int) in line 49
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses function make_hash_table(region,int,hash_fn,keyeq_fn) defined in hash.c
      uses function string_hash(const char *) defined in containers.h
      uses function string_eq(const char *,const char *) defined in containers.h
   function hash_table_reset(hash_table) in line 52
      protection public
      8 lines of code
      1 parameters
      2 conditional paths
      uses variable Hash_table::elts defined in hash.c
      uses variable Hash_table::size defined in hash.c
      uses variable Hash_table::table defined in hash.c
      uses macro definition NULL defined in config.h
   function hash_table_size(hash_table) in line 55
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable Hash_table::elts defined in hash.c
   function hash_table_lookup(hash_table,hash_key,hash_data *) in line 59
      protection public
      17 lines of code
      3 parameters
      4 conditional paths
      uses variable Hash_table::cmp defined in hash.c
      uses variable bucket::key defined in hash.c
      uses variable bucket::data defined in hash.c
      uses macro definition TRUE defined in bool.h
      uses variable bucket::next defined in hash.c
      uses macro definition FALSE defined in bool.h
   function hash_table_insert(hash_table,hash_key,hash_data) in line 63
      protection public
      23 lines of code
      3 parameters
      4 conditional paths
      uses variable Hash_table::elts defined in hash.c
      uses variable Hash_table::size defined in hash.c
      uses variable Hash_table::cmp defined in hash.c
      uses macro definition FALSE defined in bool.h
      uses variable bucket::next defined in hash.c
      uses macro definition ralloc defined in regions.h
      uses variable Hash_table::r defined in hash.c
      uses macro definition NULL defined in config.h
      uses macro definition TRUE defined in bool.h
   function hash_table_remove(hash_table,hash_key) in line 66
      protection public
      22 lines of code
      2 parameters
      4 conditional paths
      uses macro definition NULL defined in config.h
      uses variable Hash_table::cmp defined in hash.c
      uses variable bucket::next defined in hash.c
      uses variable Hash_table::elts defined in hash.c
      uses macro definition TRUE defined in bool.h
      uses macro definition FALSE defined in bool.h
   function hash_table_copy(region,hash_table) in line 69
      protection public
      38 lines of code
      2 parameters
      2 conditional paths
      uses function make_hash_table(region,int,hash_fn,keyeq_fn) defined in hash.c
      uses variable Hash_table::size defined in hash.c
      uses variable Hash_table::hash defined in hash.c
      uses variable Hash_table::cmp defined in hash.c
      uses variable Hash_table::elts defined in hash.c
      uses variable Hash_table::table defined in hash.c
      uses macro definition scan_bucket defined in hash.c
      uses macro definition ralloc defined in regions.h
      uses variable Hash_table::r defined in hash.c
      uses variable bucket::key defined in hash.c
      uses variable bucket::data defined in hash.c
      uses variable bucket::next defined in hash.c
      uses macro definition NULL defined in config.h
   function hash_table_map(region,hash_table,hash_map_fn,void *) in line 72
      protection public
      36 lines of code
      4 parameters
      2 conditional paths
      uses function make_hash_table(region,int,hash_fn,keyeq_fn) defined in hash.c
      uses variable Hash_table::size defined in hash.c
      uses variable Hash_table::hash defined in hash.c
      uses variable Hash_table::cmp defined in hash.c
      uses variable Hash_table::elts defined in hash.c
      uses variable Hash_table::table defined in hash.c
      uses macro definition scan_bucket defined in hash.c
      uses macro definition ralloc defined in regions.h
      uses variable Hash_table::r defined in hash.c
      uses variable bucket::key defined in hash.c
      uses variable bucket::data defined in hash.c
      uses function f(char *) defined in taint-const-subtyping.c
      uses variable bucket::next defined in hash.c
      uses macro definition NULL defined in config.h
   function hash_table_scan(hash_table,hash_table_scanner *) in line 83
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
      uses variable hash_table_scanner::ht defined in hash.h
      uses variable hash_table_scanner::i defined in hash.h
      uses variable hash_table_scanner::cur defined in hash.h
      uses variable Hash_table::table defined in hash.c
   function hash_table_next(hash_table_scanner *,hash_key *,hash_data *) in line 88
      protection public
      25 lines of code
      3 parameters
      6 conditional paths
      uses variable hash_table_scanner::cur defined in hash.h
      uses macro definition NULL defined in config.h
      uses variable hash_table_scanner::i defined in hash.h
      uses variable hash_table_scanner::ht defined in hash.h
      uses variable Hash_table::size defined in hash.c
      uses variable Hash_table::table defined in hash.c
      uses macro definition FALSE defined in bool.h
      uses variable bucket::key defined in hash.c
      uses variable bucket::data defined in hash.c
      uses variable bucket::next defined in hash.c
      uses macro definition TRUE defined in bool.h
   function hash_table_scan_sorted(hash_table,keycmp_fn,hash_table_scanner_sorted *) in line 108
      protection public
      21 lines of code
      3 parameters
      2 conditional paths
      uses variable hash_table_scanner_sorted::r defined in hash.h
      uses function newregion(void) defined in regions.c
      uses variable hash_table_scanner_sorted::size defined in hash.h
      uses function hash_table_size(hash_table) defined in hash.c
      uses variable hash_table_scanner_sorted::entries defined in hash.h
      uses macro definition rarrayalloc defined in regions.h
      uses variable hash_table_scanner_sorted::i defined in hash.h
      uses function hash_table_scan(hash_table,hash_table_scanner *) defined in hash.c
      uses function hash_table_next(hash_table_scanner *,hash_key *,hash_data *) defined in hash.c
      uses variable sorted_entry::k defined in hash.h
      uses variable sorted_entry::d defined in hash.h
      uses function f(char *) defined in taint-const-subtyping.c
      uses function entry_cmp(const void *,const void *) defined in hash.c
      uses macro definition NULL defined in config.h
   function hash_table_next_sorted(hash_table_scanner_sorted *,hash_key *,hash_data *) in line 112
      protection public
      19 lines of code
      3 parameters
      4 conditional paths
      uses variable hash_table_scanner_sorted::i defined in hash.h
      uses variable hash_table_scanner_sorted::size defined in hash.h
      uses variable sorted_entry::k defined in hash.h
      uses variable hash_table_scanner_sorted::entries defined in hash.h
      uses variable sorted_entry::d defined in hash.h
      uses macro definition TRUE defined in bool.h
      uses function deleteregion(region) defined in regions.c
      uses variable hash_table_scanner_sorted::r defined in hash.h
      uses macro definition NULL defined in config.h
      uses macro definition FALSE defined in bool.h
   variable hash_table_scanner::cur in line 79
      protection public
   variable hash_table_scanner::ht in line 77
      protection public
   variable hash_table_scanner::i in line 78
      protection public
   variable sorted_entry::d in line 96
      protection public
   variable sorted_entry::k in line 95
      protection public
   variable hash_table_scanner_sorted::entries in line 104
      protection public
   variable hash_table_scanner_sorted::i in line 102
      protection public
   variable hash_table_scanner_sorted::r in line 101
      protection public
   variable hash_table_scanner_sorted::size in line 103
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cqual/cqual-0.981/src/input.c
module input.c
   variable input_filename in line 23
      protection public
   variable main_input_filename in line 26
      protection public
   variable lineno in line 29
      protection public
   variable filepos in line 32
      protection public
   variable finput in line 35
      protection public
   variable input_file_stack in line 39
      protection public
   variable input_file_stack_tick in line 42
      protection public
   function set_input(FILE *,char *) in line 44
      protection public
      10 lines of code
      2 parameters
      1 conditional paths
      uses variable input_file_stack defined in input.c
      uses function xmalloc(size_t) defined in utils.c
      uses variable file_stack::name defined in input.h
      uses variable main_input_filename defined in input.c
      uses variable input_filename defined in input.c
      uses variable filename defined in iquals.tab.c
      uses variable file_stack::line defined in input.h
      uses variable lineno defined in input.c
      uses variable file_stack::filepos defined in input.h
      uses variable filepos defined in input.c
      uses variable file_stack::indent_level defined in input.h
      uses variable file_stack::next defined in input.h
      uses macro definition NULL defined in config.h
      uses variable finput defined in input.c
      uses function f(char *) defined in taint-const-subtyping.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cqual/cqual-0.981/src/input.h
module input.h
   variable input_filename in line 37
      protection public
   variable main_input_filename in line 40
      protection public
   variable lineno in line 43
      protection public
   variable filepos in line 46
      protection public
   variable finput in line 49
      protection public
   variable input_file_stack in line 62
      protection public
   variable input_file_stack_tick in line 65
      protection public
   function set_input(FILE *,char *) in line 67
      protection public
      10 lines of code
      2 parameters
      1 conditional paths
      uses variable input_file_stack defined in input.c
      uses function xmalloc(size_t) defined in utils.c
      uses variable file_stack::name defined in input.h
      uses variable main_input_filename defined in input.c
      uses variable input_filename defined in input.c
      uses variable filename defined in iquals.tab.c
      uses variable file_stack::line defined in input.h
      uses variable lineno defined in input.c
      uses variable file_stack::filepos defined in input.h
      uses variable filepos defined in input.c
      uses variable file_stack::indent_level defined in input.h
      uses variable file_stack::next defined in input.h
      uses macro definition NULL defined in config.h
      uses variable finput defined in input.c
      uses function f(char *) defined in taint-const-subtyping.c
   variable file_stack::filepos in line 56
      protection public
   variable file_stack::indent_level in line 57
      protection public
   variable file_stack::line in line 55
      protection public
   variable file_stack::name in line 53
      protection public
   variable file_stack::next in line 54
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cqual/cqual-0.981/src/iquals-lex.c
module iquals-lex.c
   macro definition FLEX_SCANNER in line 8
      protection public
   macro definition YY_FLEX_MAJOR_VERSION in line 9
      protection public
   macro definition YY_FLEX_MINOR_VERSION in line 10
      protection public
   macro definition yyconst in line 56
      protection public
   macro definition YY_PROTO in line 63
      protection public
   macro definition YY_NULL in line 67
      protection public
   macro definition YY_SC_TO_UI in line 74
      protection public
   macro definition BEGIN in line 80
      protection public
   macro definition YY_START in line 86
      protection public
   macro definition YYSTATE in line 87
      protection public
   macro definition YY_STATE_EOF in line 90
      protection public
   macro definition YY_NEW_FILE in line 93
      protection public
   macro definition YY_END_OF_BUFFER_CHAR in line 95
      protection public
   macro definition YY_BUF_SIZE in line 98
      protection public
   macro definition EOB_ACT_CONTINUE_SCAN in line 105
      protection public
   macro definition EOB_ACT_END_OF_FILE in line 106
      protection public
   macro definition EOB_ACT_LAST_MATCH in line 107
      protection public
   macro definition yyless in line 125
      protection public
   macro definition unput in line 136
      protection public
   macro definition YY_BUFFER_NEW in line 187
      protection public
   macro definition YY_BUFFER_NORMAL in line 188
      protection public
   macro definition YY_BUFFER_EOF_PENDING in line 199
      protection public
   macro definition YY_CURRENT_BUFFER in line 208
      protection public
   macro definition YY_FLUSH_BUFFER in line 237
      protection public
   macro definition yy_new_buffer in line 247
      protection public
   macro definition yy_set_interactive in line 249
      protection public
   macro definition yy_set_bol in line 256
      protection public
   macro definition YY_AT_BOL in line 263
      protection public
   macro definition yywrap in line 266
      protection public
   macro definition YY_SKIP_YYWRAP in line 267
      protection public
   macro definition yytext_ptr in line 272
      protection public
   macro definition YY_DO_BEFORE_ACTION in line 282
      protection public
   macro definition YY_NUM_RULES in line 289
      protection public
   macro definition YY_END_OF_BUFFER in line 290
      protection public
   macro definition REJECT in line 378
      protection public
   macro definition yymore in line 379
      protection public
   macro definition YY_MORE_ADJ in line 380
      protection public
   macro definition YY_RESTORE_YY_MORE_OFFSET in line 381
      protection public
   macro definition INITIAL in line 384
      protection public
   macro definition YY_NO_UNPUT in line 402
      protection public
   macro definition YY_NO_PUSH_STATE in line 457
      protection public
   macro definition YY_NO_POP_STATE in line 458
      protection public
   macro definition YY_NO_TOP_STATE in line 459
      protection public
   macro definition YY_READ_BUF_SIZE in line 479
      protection public
   macro definition ECHO in line 488
      protection public
   macro definition YY_INPUT in line 495
      protection public
   macro definition yyterminate in line 518
      protection public
   macro definition YY_START_STACK_INCR in line 523
      protection public
   macro definition YY_FATAL_ERROR in line 528
      protection public
   macro definition YY_DECL in line 535
      protection public
   macro definition YY_USER_ACTION in line 542
      protection public
   macro definition YY_BREAK in line 547
      protection public
   macro definition YY_RULE_SETUP in line 550
      protection public
   macro definition YY_EXIT_FAILURE in line 1474
      protection public
   macro definition yyless in line 1493
      protection public
   typedef YY_BUFFER_STATE in line 100
      protection public
   typedef yy_size_t in line 142
      protection public
   typedef YY_CHAR in line 268
      protection public
   typedef yy_state_type in line 270
      protection public
   variable yyleng in line 102
      protection public
   variable yyin in line 103
      protection public
   variable yyout in line 103
      protection public
   variable yy_current_buffer in line 202
      protection public
   variable yy_hold_char in line 212
      protection public
   variable yy_n_chars in line 214
      protection public
   variable yy_c_buf_p in line 220
      protection public
   variable yy_init in line 221
      protection public
   variable yy_start in line 222
      protection public
   variable yy_did_buffer_switch_on_eof in line 227
      protection public
   variable yytext in line 271
      protection public
   variable yy_accept in line 291
      protection public
   variable yy_ec in line 298
      protection public
   variable yy_meta in line 330
      protection public
   variable yy_base in line 336
      protection public
   variable yy_def in line 344
      protection public
   variable yy_nxt in line 352
      protection public
   variable yy_chk in line 362
      protection public
   variable yy_last_accepting_state in line 372
      protection public
   variable yy_last_accepting_cpos in line 373
      protection public
   variable line in line 407
      protection public
   variable YY_DECL in line 553
      protection public
   variable yy_cp in line 556
      protection public
   variable yy_bp in line 556
      protection public
   variable yy_act in line 557
      protection public
   function YY_PROTO((FILE *input_file)) in line 229
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function YY_PROTO((YY_BUFFER_STATE new_buffer)) in line 231
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function YY_PROTO((void)) in line 232
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function YY_PROTO((FILE *file, int size)) in line 233
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function YY_PROTO((YY_BUFFER_STATE b)) in line 234
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function YY_PROTO((YY_BUFFER_STATE b, FILE *file)) in line 235
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function YY_PROTO((char *base, yy_size_t size)) in line 239
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function YY_PROTO((yyconst char *yy_str)) in line 240
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function YY_PROTO((yyconst char *bytes, int len)) in line 241
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function YY_PROTO((yy_size_t)) in line 243
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function YY_PROTO((void *, yy_size_t)) in line 244
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function YY_PROTO((void *)) in line 245
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function YY_PROTO((yy_state_type current_state)) in line 275
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function YY_PROTO((yyconst char msg[])) in line 277
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function if(yy_init) in line 564
      protection public
      23 lines of code
      1 parameters
      6 conditional paths
      uses variable yy_init defined in iquals-lex.c
      uses variable yy_start defined in iquals-lex.c
      uses variable yyin defined in iquals-lex.c
      uses variable yyout defined in iquals-lex.c
      uses variable yy_current_buffer defined in iquals-lex.c
      uses function yy_create_buffer(FILE *,int) defined in iquals-lex.c
      uses macro definition YY_BUF_SIZE defined in iquals-lex.c
      uses function yy_load_buffer_state() defined in iquals-lex.c
   function while(1) in line 588
      protection public
      248 lines of code
      1 parameters
      36 conditional paths
      uses variable yy_cp defined in iquals-lex.c
      uses variable yy_c_buf_p defined in iquals-lex.c
      uses variable yy_hold_char defined in iquals-lex.c
      uses variable yy_bp defined in iquals-lex.c
      uses variable yy_start defined in iquals-lex.c
      uses variable yy_ec defined in iquals-lex.c
      uses macro definition YY_SC_TO_UI defined in iquals-lex.c
      uses variable yy_accept defined in iquals-lex.c
      uses variable yy_last_accepting_state defined in iquals-lex.c
      uses variable yy_last_accepting_cpos defined in iquals-lex.c
      uses variable yy_chk defined in iquals-lex.c
      uses variable yy_base defined in iquals-lex.c
      uses variable yy_def defined in iquals-lex.c
      uses variable yy_meta defined in iquals-lex.c
      uses variable yy_nxt defined in iquals-lex.c
      uses variable yy_act defined in iquals-lex.c
      uses macro definition YY_DO_BEFORE_ACTION defined in iquals-lex.c
      uses macro definition YY_RULE_SETUP defined in iquals-lex.c
      uses macro definition YY_BREAK defined in iquals-lex.c
      uses variable line defined in iquals-lex.c
      uses macro definition yylval defined in lattice-parse.tab.c
      uses variable yytext defined in iquals-lex.c
      uses macro definition CONSTANT defined in c-parse.tab.c
      uses macro definition VARIABLE defined in iquals.tab.c
      uses macro definition LEQ defined in iquals.tab.c
      uses macro definition IMPLIES defined in iquals.tab.c
      uses macro definition EQ defined in iquals.tab.c
      uses macro definition UNIFY defined in iquals.tab.c
      uses macro definition ERROR defined in iquals.tab.c
      uses macro definition ECHO defined in iquals-lex.c
      uses macro definition YY_STATE_EOF defined in iquals-lex.c
      uses macro definition INITIAL defined in iquals-lex.c
      uses macro definition yyterminate defined in iquals-lex.c
      uses macro definition YY_END_OF_BUFFER defined in iquals-lex.c
      uses macro definition yytext_ptr defined in iquals-lex.c
      uses macro definition YY_RESTORE_YY_MORE_OFFSET defined in iquals-lex.c
      uses variable yy_current_buffer defined in iquals-lex.c
      uses variable yy_buffer_state::yy_buffer_status defined in lattice-lex.c
      uses macro definition YY_BUFFER_NEW defined in iquals-lex.c
      uses variable yy_buffer_state::yy_n_chars defined in lattice-lex.c
      uses variable yy_buffer_state::yy_input_file defined in lattice-lex.c
      uses variable yyin defined in iquals-lex.c
      uses macro definition YY_BUFFER_NORMAL defined in iquals-lex.c
      uses variable yy_buffer_state::yy_ch_buf defined in lattice-lex.c
      uses function yy_get_previous_state() defined in iquals-lex.c
      uses function yy_try_NUL_trans(yy_state_type) defined in iquals-lex.c
      uses macro definition YY_MORE_ADJ defined in iquals-lex.c
      uses function yy_get_next_buffer() defined in iquals-lex.c
      uses macro definition EOB_ACT_END_OF_FILE defined in iquals-lex.c
      uses variable yy_did_buffer_switch_on_eof defined in iquals-lex.c
      uses macro definition yywrap defined in iquals-lex.c
      uses macro definition YY_START defined in iquals-lex.c
      uses macro definition YY_NEW_FILE defined in iquals-lex.c
      uses macro definition EOB_ACT_CONTINUE_SCAN defined in iquals-lex.c
      uses macro definition EOB_ACT_LAST_MATCH defined in iquals-lex.c
      uses macro definition YY_FATAL_ERROR defined in iquals-lex.c
   function yy_get_next_buffer() in line 847
      protection public
      128 lines of code
      0 parameters
      13 conditional paths
      uses variable yy_current_buffer defined in iquals-lex.c
      uses variable yy_buffer_state::yy_ch_buf defined in lattice-lex.c
      uses macro definition yytext_ptr defined in iquals-lex.c
      uses variable yy_c_buf_p defined in iquals-lex.c
      uses variable yy_buffer_state::yy_n_chars defined in lattice-lex.c
      uses macro definition YY_FATAL_ERROR defined in iquals-lex.c
      uses variable yy_buffer_state::yy_fill_buffer defined in lattice-lex.c
      uses macro definition YY_MORE_ADJ defined in iquals-lex.c
      uses macro definition EOB_ACT_END_OF_FILE defined in iquals-lex.c
      uses macro definition EOB_ACT_LAST_MATCH defined in iquals-lex.c
      uses variable yy_buffer_state::yy_buffer_status defined in lattice-lex.c
      uses macro definition YY_BUFFER_EOF_PENDING defined in iquals-lex.c
      uses variable yy_buffer_state::yy_buf_size defined in lattice-lex.c
      uses variable yy_buffer_state::yy_is_our_buffer defined in lattice-lex.c
      uses function yy_flex_realloc(void *,yy_size_t) defined in iquals-lex.c
      uses macro definition YY_READ_BUF_SIZE defined in iquals-lex.c
      uses macro definition YY_INPUT defined in iquals-lex.c
      uses function yyrestart(FILE *) defined in iquals-lex.c
      uses variable yyin defined in iquals-lex.c
      uses macro definition EOB_ACT_CONTINUE_SCAN defined in iquals-lex.c
      uses macro definition YY_END_OF_BUFFER_CHAR defined in iquals-lex.c
   function yy_get_previous_state() in line 979
      protection public
      26 lines of code
      0 parameters
      5 conditional paths
      uses variable yy_cp defined in iquals-lex.c
      uses variable yy_start defined in iquals-lex.c
      uses macro definition yytext_ptr defined in iquals-lex.c
      uses macro definition YY_MORE_ADJ defined in iquals-lex.c
      uses variable yy_c_buf_p defined in iquals-lex.c
      uses variable yy_ec defined in iquals-lex.c
      uses macro definition YY_SC_TO_UI defined in iquals-lex.c
      uses variable yy_accept defined in iquals-lex.c
      uses variable yy_last_accepting_state defined in iquals-lex.c
      uses variable yy_last_accepting_cpos defined in iquals-lex.c
      uses variable yy_chk defined in iquals-lex.c
      uses variable yy_base defined in iquals-lex.c
      uses variable yy_def defined in iquals-lex.c
      uses variable yy_meta defined in iquals-lex.c
      uses variable yy_nxt defined in iquals-lex.c
      uses function yy_try_NUL_trans(yy_state_type) defined in iquals-lex.c
   function yy_try_NUL_trans(yy_state_type) in line 1016
      protection public
      24 lines of code
      1 parameters
      7 conditional paths
      uses variable yy_cp defined in iquals-lex.c
      uses variable yy_c_buf_p defined in iquals-lex.c
      uses variable yy_accept defined in iquals-lex.c
      uses variable yy_last_accepting_state defined in iquals-lex.c
      uses variable yy_last_accepting_cpos defined in iquals-lex.c
      uses variable yy_chk defined in iquals-lex.c
      uses variable yy_base defined in iquals-lex.c
      uses variable yy_def defined in iquals-lex.c
      uses variable yy_meta defined in iquals-lex.c
      uses variable yy_nxt defined in iquals-lex.c
      uses variable yy_bp defined in iquals-lex.c
      uses variable yy_hold_char defined in iquals-lex.c
      uses variable yy_buffer_state::yy_ch_buf defined in lattice-lex.c
      uses variable yy_buffer_state::yy_n_chars defined in lattice-lex.c
      uses variable yy_current_buffer defined in iquals-lex.c
      uses variable yy_buffer_state::yy_buf_size defined in lattice-lex.c
      uses macro definition YY_FATAL_ERROR defined in iquals-lex.c
      uses macro definition yytext_ptr defined in iquals-lex.c
   function input() in line 1090
      protection public
      68 lines of code
      0 parameters
      8 conditional paths
      uses variable yy_c_buf_p defined in iquals-lex.c
      uses variable yy_hold_char defined in iquals-lex.c
      uses macro definition YY_END_OF_BUFFER_CHAR defined in iquals-lex.c
      uses variable yy_buffer_state::yy_ch_buf defined in lattice-lex.c
      uses variable yy_buffer_state::yy_n_chars defined in lattice-lex.c
      uses macro definition yytext_ptr defined in iquals-lex.c
      uses function yy_get_next_buffer() defined in iquals-lex.c
      uses macro definition EOB_ACT_LAST_MATCH defined in iquals-lex.c
      uses function yyrestart(FILE *) defined in iquals-lex.c
      uses variable yyin defined in iquals-lex.c
      uses macro definition EOB_ACT_END_OF_FILE defined in iquals-lex.c
      uses macro definition yywrap defined in iquals-lex.c
      uses variable yy_did_buffer_switch_on_eof defined in iquals-lex.c
      uses macro definition YY_NEW_FILE defined in iquals-lex.c
      uses macro definition EOB_ACT_CONTINUE_SCAN defined in iquals-lex.c
   function yyrestart(FILE *) in line 1163
      protection public
      10 lines of code
      1 parameters
      2 conditional paths
      uses variable yy_current_buffer defined in iquals-lex.c
      uses function yy_create_buffer(FILE *,int) defined in iquals-lex.c
      uses variable yyin defined in iquals-lex.c
      uses macro definition YY_BUF_SIZE defined in iquals-lex.c
      uses function yy_init_buffer(YY_BUFFER_STATE,FILE *) defined in iquals-lex.c
      uses function yy_load_buffer_state() defined in iquals-lex.c
      uses function yy_switch_to_buffer(YY_BUFFER_STATE) defined in iquals-lex.c
   function yy_switch_to_buffer(YY_BUFFER_STATE) in line 1178
      protection public
      25 lines of code
      1 parameters
      3 conditional paths
      uses variable yy_current_buffer defined in iquals-lex.c
      uses variable yy_c_buf_p defined in iquals-lex.c
      uses variable yy_hold_char defined in iquals-lex.c
      uses variable yy_buffer_state::yy_buf_pos defined in lattice-lex.c
      uses variable yy_buffer_state::yy_n_chars defined in lattice-lex.c
      uses function yy_load_buffer_state() defined in iquals-lex.c
      uses variable yy_did_buffer_switch_on_eof defined in iquals-lex.c
   function yy_load_buffer_state() in line 1208
      protection public
      8 lines of code
      0 parameters
      1 conditional paths
      uses variable yy_buffer_state::yy_n_chars defined in lattice-lex.c
      uses variable yy_current_buffer defined in iquals-lex.c
      uses macro definition yytext_ptr defined in iquals-lex.c
      uses variable yy_c_buf_p defined in iquals-lex.c
      uses variable yy_buffer_state::yy_buf_pos defined in lattice-lex.c
      uses variable yyin defined in iquals-lex.c
      uses variable yy_buffer_state::yy_input_file defined in lattice-lex.c
      uses variable yy_hold_char defined in iquals-lex.c
      uses function yy_create_buffer(FILE *,int) defined in iquals-lex.c
   function yy_create_buffer(FILE *,int) in line 1221
      protection public
      26 lines of code
      2 parameters
      3 conditional paths
      uses function yy_flex_alloc(yy_size_t) defined in iquals-lex.c
      uses macro definition YY_FATAL_ERROR defined in iquals-lex.c
      uses variable yy_buffer_state::yy_buf_size defined in lattice-lex.c
      uses variable yy_buffer_state::yy_ch_buf defined in lattice-lex.c
      uses variable yy_buffer_state::yy_is_our_buffer defined in lattice-lex.c
      uses function yy_init_buffer(YY_BUFFER_STATE,FILE *) defined in iquals-lex.c
      uses function yy_delete_buffer(YY_BUFFER_STATE) defined in iquals-lex.c
   function yy_delete_buffer(YY_BUFFER_STATE) in line 1252
      protection public
      15 lines of code
      1 parameters
      4 conditional paths
      uses variable yy_current_buffer defined in iquals-lex.c
      uses function yy_flex_free(void *) defined in iquals-lex.c
      uses function yy_init_buffer(YY_BUFFER_STATE,FILE *) defined in iquals-lex.c
   function yy_init_buffer(YY_BUFFER_STATE,FILE *) in line 1273
      protection public
      22 lines of code
      2 parameters
      1 conditional paths
      uses function yy_flush_buffer(YY_BUFFER_STATE) defined in iquals-lex.c
   function yy_flush_buffer(YY_BUFFER_STATE) in line 1300
      protection public
      25 lines of code
      1 parameters
      3 conditional paths
      uses variable yy_buffer_state::yy_n_chars defined in lattice-lex.c
      uses macro definition YY_END_OF_BUFFER_CHAR defined in iquals-lex.c
      uses macro definition YY_BUFFER_NEW defined in iquals-lex.c
      uses variable yy_current_buffer defined in iquals-lex.c
      uses function yy_load_buffer_state() defined in iquals-lex.c
      uses function yy_scan_buffer(char *,yy_size_t) defined in iquals-lex.c
   function yy_scan_buffer(char *,yy_size_t) in line 1331
      protection public
      31 lines of code
      2 parameters
      3 conditional paths
      uses macro definition YY_END_OF_BUFFER_CHAR defined in iquals-lex.c
      uses function yy_flex_alloc(yy_size_t) defined in iquals-lex.c
      uses macro definition YY_FATAL_ERROR defined in iquals-lex.c
      uses variable yy_buffer_state::yy_buf_size defined in lattice-lex.c
      uses variable yy_buffer_state::yy_buf_pos defined in lattice-lex.c
      uses variable yy_buffer_state::yy_ch_buf defined in lattice-lex.c
      uses variable yy_buffer_state::yy_is_our_buffer defined in lattice-lex.c
      uses variable yy_buffer_state::yy_input_file defined in lattice-lex.c
      uses variable yy_buffer_state::yy_n_chars defined in lattice-lex.c
      uses variable yy_buffer_state::yy_is_interactive defined in lattice-lex.c
      uses variable yy_buffer_state::yy_at_bol defined in lattice-lex.c
      uses variable yy_buffer_state::yy_fill_buffer defined in lattice-lex.c
      uses variable yy_buffer_state::yy_buffer_status defined in lattice-lex.c
      uses macro definition YY_BUFFER_NEW defined in iquals-lex.c
      uses function yy_switch_to_buffer(YY_BUFFER_STATE) defined in iquals-lex.c
      uses function yy_scan_string(yyconst char *) defined in iquals-lex.c
      uses macro definition yyconst defined in iquals-lex.c
   function yy_scan_string(yyconst char *) in line 1369
      protection public
      10 lines of code
      1 parameters
      2 conditional paths
      uses variable len defined in c-gperf.h
      uses function yy_scan_bytes(yyconst char *,int) defined in iquals-lex.c
      uses macro definition yyconst defined in iquals-lex.c
   function yy_scan_bytes(yyconst char *,int) in line 1386
      protection public
      32 lines of code
      2 parameters
      8 conditional paths
      uses variable len defined in c-gperf.h
      uses function yy_flex_alloc(yy_size_t) defined in iquals-lex.c
      uses macro definition YY_FATAL_ERROR defined in iquals-lex.c
      uses macro definition YY_END_OF_BUFFER_CHAR defined in iquals-lex.c
      uses function yy_scan_buffer(char *,yy_size_t) defined in iquals-lex.c
      uses variable yy_buffer_state::yy_is_our_buffer defined in lattice-lex.c
      uses macro definition YY_START_STACK_INCR defined in iquals-lex.c
      uses function yy_flex_realloc(void *,yy_size_t) defined in iquals-lex.c
      uses macro definition YY_START defined in iquals-lex.c
      uses macro definition BEGIN defined in iquals-lex.c
   function yy_fatal_error(msg) in line 1480
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses macro definition YY_EXIT_FAILURE defined in iquals-lex.c
   function yy_flex_alloc(yy_size_t) in line 1544
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses function yy_flex_realloc(void *,yy_size_t) defined in iquals-lex.c
   function yy_flex_realloc(void *,yy_size_t) in line 1554
      protection public
      14 lines of code
      2 parameters
      1 conditional paths
      uses function yy_flex_free(void *) defined in iquals-lex.c
   function yy_flex_free(void *) in line 1572
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses function main(void) defined in linux-lock.c
      uses macro definition yylex defined in lattice-lex.c
   variable yy_buffer_state::yy_at_bol in line 179
      protection public
   variable yy_buffer_state::yy_buf_pos in line 150
      protection public
   variable yy_buffer_state::yy_buf_size in line 155
      protection public
   variable yy_buffer_state::yy_buffer_status in line 186
      protection public
   variable yy_buffer_state::yy_ch_buf in line 149
      protection public
   variable yy_buffer_state::yy_fill_buffer in line 184
      protection public
   variable yy_buffer_state::yy_input_file in line 147
      protection public
   variable yy_buffer_state::yy_is_interactive in line 173
      protection public
   variable yy_buffer_state::yy_is_our_buffer in line 166
      protection public
   variable yy_buffer_state::yy_n_chars in line 160
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cqual/cqual-0.981/src/iquals.tab.c
module iquals.tab.c
   macro definition YYBISON in line 4
      protection public
   macro definition CONSTANT in line 6
      protection public
   macro definition VARIABLE in line 7
      protection public
   macro definition EQ in line 8
      protection public
   macro definition IMPLIES in line 9
      protection public
   macro definition LEQ in line 10
      protection public
   macro definition UNIFY in line 11
      protection public
   macro definition ERROR in line 12
      protection public
   macro definition YYSTYPE in line 37
      protection public
   macro definition YYSTYPE_IS_TRIVIAL in line 38
      protection public
   macro definition YYDEBUG in line 41
      protection public
   macro definition YYFINAL in line 46
      protection public
   macro definition YYFLAG in line 47
      protection public
   macro definition YYNTBASE in line 48
      protection public
   macro definition YYTRANSLATE in line 51
      protection public
   macro definition YYLAST in line 156
      protection public
   macro definition YYSTACK_ALLOC in line 236
      protection public
   macro definition YYSTACK_FREE in line 237
      protection public
   macro definition YYSTACK_GAP_MAX in line 257
      protection public
   macro definition YYSTACK_BYTES in line 266
      protection public
   macro definition YYCOPY in line 278
      protection public
   macro definition YYSTACK_RELOCATE in line 294
      protection public
   macro definition YYSIZE_T in line 321
      protection public
   macro definition yyerrok in line 324
      protection public
   macro definition yyclearin in line 325
      protection public
   macro definition YYEMPTY in line 326
      protection public
   macro definition YYEOF in line 327
      protection public
   macro definition YYACCEPT in line 328
      protection public
   macro definition YYABORT in line 329
      protection public
   macro definition YYERROR in line 330
      protection public
   macro definition YYFAIL in line 334
      protection public
   macro definition YYRECOVERING in line 335
      protection public
   macro definition YYBACKUP in line 336
      protection public
   macro definition YYTERROR in line 353
      protection public
   macro definition YYERRCODE in line 354
      protection public
   macro definition YYLLOC_DEFAULT in line 365
      protection public
   macro definition YYLEX in line 388
      protection public
   macro definition YYDPRINTF in line 409
      protection public
   macro definition YYINITDEPTH in line 414
      protection public
   macro definition YYMAXDEPTH in line 429
      protection public
   macro definition YYPARSE_PARAM_ARG in line 502
      protection public
   macro definition YYPARSE_PARAM_DECL in line 503
      protection public
   macro definition YY_DECL_NON_LSP_VARIABLES in line 518
      protection public
   macro definition YY_DECL_VARIABLES in line 535
      protection public
   macro definition YYPOPSTACK in line 591
      protection public
   typedef var_list in line 1205
      protection public
   variable yytext in line 25
      protection public
   variable line in line 26
      protection public
   variable filename in line 27
      protection public
   variable yytranslate in line 54
      protection public
   variable yyr1 in line 119
      protection public
   variable yyr2 in line 125
      protection public
   variable yydefact in line 133
      protection public
   variable yydefgoto in line 139
      protection public
   variable yypact in line 144
      protection public
   variable yypgoto in line 150
      protection public
   variable yytable in line 159
      protection public
   variable yycheck in line 165
      protection public
   variable flag_ugly in line 1196
      protection public
   variable iquals_region in line 1198
      protection public
   variable dummy_location in line 1199
      protection public
   variable vars in line 1207
      protection public
   function yylex(void) in line 23
      protection public
      682 lines of code
      1 parameters
      233 conditional paths
      uses macro definition GETC defined in c-lex.c
      uses macro definition ralloc defined in regions.h
      uses variable parse_region defined in c-parse.h
      uses variable Location::lineno defined in location.h
      uses variable lineno defined in input.c
      uses variable Location::filepos defined in location.h
      uses variable filepos defined in input.c
      uses variable Location::filename defined in location.h
      uses variable input_filename defined in input.c
      uses variable Location::in_system_header defined in location.h
      uses variable in_system_header defined in c-lex.c
      uses variable last_location defined in c-lex.c
      uses macro definition yylval defined in lattice-parse.tab.c
      uses macro definition ENDFILE defined in c-lex.c
      uses macro definition TUNGETC defined in c-lex.c
      uses variable dollars_in_ident defined in flags.h
      uses function error(const char *,...) defined in errors.c
      uses variable pedantic defined in flags.h
      uses function pedwarn(const char *,...) defined in errors.c
      uses macro definition IDENTIFIER defined in c-parse.tab.c
      uses function is_reserved_word(str,len) defined in c-gperf.h
      uses variable resword::token defined in c-gperf.h
      uses variable resword::rid defined in c-gperf.h
      uses macro definition ASM_KEYWORD defined in c-parse.tab.c
      uses macro definition TYPEOF defined in c-parse.tab.c
      uses enumvalue RID_INLINE defined in c-lex.h
      uses function lookup_id(const char *,bool) defined in semantics.c
      uses macro definition FALSE defined in bool.h
      uses enumvalue decl_typedef defined in decls.h
      uses macro definition TYPENAME defined in c-parse.tab.c
      uses enumvalue decl_magic_string defined in decls.h
      uses macro definition MAGIC_STRING defined in c-parse.tab.c
      uses macro definition TYPE_VARIABLE defined in c-parse.tab.c
      uses macro definition USER_QUALIFIER defined in c-parse.tab.c
      uses macro definition LARGEST_UINTBITS defined in config.h
      uses macro definition ELLIPSIS defined in c-parse.tab.c
      uses variable float_type defined in types.c
      uses variable long_double_type defined in types.c
      uses variable double_type defined in types.c
      uses function make_complex_type(type) defined in types.c
      uses function fold_lexical_real(type,location,cstring) defined in constants.c
      uses variable unsigned_long_long_type defined in types.c
      uses variable long_long_type defined in types.c
      uses variable unsigned_long_type defined in types.c
      uses variable long_type defined in types.c
      uses variable unsigned_int_type defined in types.c
      uses variable int_type defined in types.c
      uses function fold_lexical_int(type,location,cstring,bool,largest_uint,bool) defined in constants.c
      uses variable flag_traditional defined in flags.h
      uses macro definition CONSTANT defined in c-parse.tab.c
      uses function alloca() defined in c-lex.c
      uses variable max_char_length defined in c-lex.c
      uses variable count defined in qtype.c
      uses function type_size(type) defined in types.c
      uses variable wchar_type defined in types.c
      uses macro definition BITSPERBYTE defined in config.h
      uses macro definition NULL defined in config.h
      uses variable warn_multichar defined in flags.h
      uses function warning(const char *,...) defined in errors.c
      uses function fold_lexical_char(location,cstring,bool,int) defined in constants.c
      uses variable string_array defined in c-lex.c
      uses function fold_lexical_string(location,cstring,bool,wchar_array) defined in constants.c
      uses macro definition STRING defined in c-parse.tab.c
      uses macro definition ASSIGN defined in c-parse.tab.c
      uses macro definition ARITHCOMPARE defined in c-parse.tab.c
      uses enumvalue kind_leq defined in AST_types.h
      uses enumvalue kind_geq defined in AST_types.h
      uses macro definition EQCOMPARE defined in c-parse.tab.c
      uses enumvalue kind_ne defined in AST_types.h
      uses enumvalue kind_eq defined in AST_types.h
      uses enumvalue kind_plus_assign defined in AST_types.h
      uses enumvalue kind_minus_assign defined in AST_types.h
      uses enumvalue kind_bitand_assign defined in AST_types.h
      uses enumvalue kind_bitor_assign defined in AST_types.h
      uses enumvalue kind_times_assign defined in AST_types.h
      uses enumvalue kind_divide_assign defined in AST_types.h
      uses enumvalue kind_modulo_assign defined in AST_types.h
      uses enumvalue kind_bitxor_assign defined in AST_types.h
      uses macro definition LSHIFT defined in c-parse.tab.c
      uses enumvalue kind_lshift_assign defined in AST_types.h
      uses macro definition RSHIFT defined in c-parse.tab.c
      uses enumvalue kind_rshift_assign defined in AST_types.h
      uses macro definition PLUSPLUS defined in c-parse.tab.c
      uses macro definition MINUSMINUS defined in c-parse.tab.c
      uses macro definition ANDAND defined in c-parse.tab.c
      uses macro definition OROR defined in c-parse.tab.c
      uses macro definition POINTSAT defined in c-parse.tab.c
      uses enumvalue kind_lt defined in AST_types.h
      uses enumvalue kind_gt defined in AST_types.h
   function yyerror(char *,...) in line 24
      protection public
      10 lines of code
      2 parameters
      1 conditional paths
      uses variable filename defined in iquals.tab.c
      uses variable line defined in iquals.tab.c
   function lookup_add_var(char *) in line 29
      protection public
      19 lines of code
      1 parameters
      3 conditional paths
      uses variable vars defined in iquals.tab.c
      uses variable var_list::name defined in iquals.tab.c
      uses variable var_list::qual defined in iquals.tab.c
      uses variable var_list::next defined in iquals.tab.c
      uses macro definition ralloc defined in regions.h
      uses variable iquals_region defined in iquals.tab.c
      uses function make_qvar(const char *,location,bool) defined in quals.c
      uses variable dummy_location defined in iquals.tab.c
      uses macro definition FALSE defined in bool.h
   function yyparse(YYPARSE_PARAM_ARG) in line 547
      protection public
      617 lines of code
      1 parameters
      81 conditional paths
      uses macro definition YY_DECL_VARIABLES defined in iquals.tab.c
      uses macro definition YYINITDEPTH defined in iquals.tab.c
      uses variable yyalloc::yyss defined in lattice-parse.tab.c
      uses macro definition YYSTYPE defined in iquals.tab.c
      uses variable yyalloc::yyvs defined in lattice-parse.tab.c
      uses macro definition YYSIZE_T defined in iquals.tab.c
      uses macro definition YYDPRINTF defined in iquals.tab.c
      uses macro definition yynerrs defined in lattice-parse.tab.c
      uses macro definition yychar defined in lattice-parse.tab.c
      uses macro definition YYEMPTY defined in iquals.tab.c
      uses macro definition YYMAXDEPTH defined in iquals.tab.c
      uses macro definition YYSTACK_ALLOC defined in iquals.tab.c
      uses macro definition YYSTACK_BYTES defined in iquals.tab.c
      uses macro definition YYSTACK_RELOCATE defined in iquals.tab.c
      uses macro definition YYSTACK_FREE defined in iquals.tab.c
      uses macro definition YYABORT defined in iquals.tab.c
      uses variable yypact defined in iquals.tab.c
      uses macro definition YYFLAG defined in iquals.tab.c
      uses macro definition YYLEX defined in iquals.tab.c
      uses macro definition YYEOF defined in iquals.tab.c
      uses macro definition YYTRANSLATE defined in iquals.tab.c
      uses macro definition yydebug defined in lattice-parse.tab.c
      uses macro definition YYFPRINTF defined in c-parse.tab.c
      uses macro definition YYPRINT defined in c-parse.tab.c
      uses macro definition yylval defined in lattice-parse.tab.c
      uses macro definition YYLAST defined in iquals.tab.c
      uses variable yycheck defined in iquals.tab.c
      uses variable yytable defined in iquals.tab.c
      uses macro definition YYFINAL defined in iquals.tab.c
      uses macro definition YYACCEPT defined in iquals.tab.c
      uses variable yydefact defined in iquals.tab.c
      uses variable yyr2 defined in iquals.tab.c
      uses macro definition YYLLOC_DEFAULT defined in iquals.tab.c
      uses variable yyr1 defined in iquals.tab.c
      uses function mkleq_qual(location,qual,qual) defined in quals.c
      uses macro definition NULL defined in config.h
      uses function yyerror(char *,...) defined in iquals.tab.c
      uses function mkeq_qual(location,qual,qual) defined in quals.c
      uses function unify_qual(location,qual,qual) defined in quals.c
      uses function cond_mkleq_qual(location,qual,qual,qual,qual) defined in quals.c
      uses function find_qual(const char *) defined in quals.c
      uses function lookup_add_var(char *) defined in iquals.tab.c
      uses variable yypgoto defined in iquals.tab.c
      uses macro definition YYNTBASE defined in iquals.tab.c
      uses variable yydefgoto defined in iquals.tab.c
      uses macro definition YYTERROR defined in iquals.tab.c
   function fatal(const char *,...) in line 1178
      protection public
      9 lines of code
      2 parameters
      1 conditional paths
      uses function vfatal(const char *,va_list) defined in errors.c
   function propagate_store_cell_forward(store,aloc) in line 1191
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
      uses variable Abstract_loc::kind defined in effect.c
      uses variable Store::kind defined in iquals.tab.c
      uses variable Store::u defined in iquals.tab.c
      uses variable Store::var defined in iquals.tab.c
      uses function qtype_to_fs_qtype(location,qtype) defined in qtype.c
      uses variable Store::loc defined in iquals.tab.c
      uses variable Abstract_loc::u defined in effect.c
      uses variable Abstract_loc::var defined in effect.c
      uses macro definition insistnot defined in utils.h
      uses function store_aloc_qtype(qtype,store,aloc) defined in qtype.c
      uses macro definition FALSE defined in bool.h
      uses macro definition insist defined in utils.h
      uses variable Cell::propagated_forward defined in effect.c
      uses macro definition TRUE defined in bool.h
      uses macro definition scan_store_edge_set defined in containers.h
      uses variable Store::ub defined in iquals.tab.c
      uses variable Store_edge::loc defined in effect.c
      uses variable Store_edge::store defined in effect.c
      uses variable Cell::qtype defined in effect.c
      uses function report_qerror(location,severity,const char *,...) defined in analyze.c
      uses enumvalue sev_err defined in qerror.h
      uses variable Store_edge::err_msg defined in effect.c
      uses function eq_aloc(aloc,aloc) defined in effect.c
      uses variable Store::assign defined in iquals.tab.c
      uses function fail(const char *,...) defined in utils.c
   function propagate_store_cell_backward(store,aloc) in line 1192
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
      uses variable Abstract_loc::kind defined in effect.c
      uses variable Store::kind defined in iquals.tab.c
      uses variable Store::u defined in iquals.tab.c
      uses variable Store::var defined in iquals.tab.c
      uses function qtype_to_fs_qtype(location,qtype) defined in qtype.c
      uses variable Store::loc defined in iquals.tab.c
      uses variable Abstract_loc::u defined in effect.c
      uses variable Abstract_loc::var defined in effect.c
      uses macro definition insistnot defined in utils.h
      uses function store_aloc_qtype(qtype,store,aloc) defined in qtype.c
      uses macro definition FALSE defined in bool.h
      uses macro definition insist defined in utils.h
      uses variable Cell::propagated_backward defined in effect.c
      uses macro definition TRUE defined in bool.h
      uses macro definition scan_store_edge_set defined in containers.h
      uses variable Store_edge::loc defined in effect.c
      uses variable Store_edge::store defined in effect.c
      uses variable Cell::qtype defined in effect.c
      uses function report_qerror(location,severity,const char *,...) defined in analyze.c
      uses enumvalue sev_err defined in qerror.h
      uses variable Store_edge::err_msg defined in effect.c
      uses function fail(const char *,...) defined in utils.c
   function report_qerror(location,severity,const char *,...) in line 1193
      protection public
      1 lines of code
      4 parameters
      1 conditional paths
      uses function vreport_qerror(location,severity,const char *,va_list) defined in analyze.c
   function location_cmp(location,location) in line 1194
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function pam_add_overlay_anchor(location) in line 1195
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function print_results(void) in line 1231
      protection public
      11 lines of code
      1 parameters
      1 conditional paths
   function main(int,char **) in line 1243
      protection public
      70 lines of code
      2 parameters
      10 conditional paths
      uses macro definition yyrestart defined in lattice-lex.c
      uses macro definition NULL defined in config.h
      uses function region_init(void) defined in regions.c
      uses variable iquals_region defined in iquals.tab.c
      uses function newregion(void) defined in regions.c
      uses function fatal(const char *,...) defined in iquals.tab.c
      uses variable flag_print_quals_graph defined in flags.h
      uses macro definition TRUE defined in bool.h
      uses variable filename defined in iquals.tab.c
      uses function printf(const char *$NONYEAR,(null)) defined in rcs1.c
      uses function init_quals(void) defined in quals.c
      uses function load_config_file_quals(const char *) defined in cqual.h
      uses function end_define_pos(void) defined in quals.c
      uses variable line defined in iquals.tab.c
      uses function yyparse(YYPARSE_PARAM_ARG) defined in iquals.tab.c
      uses function finish_quals(void) defined in quals.c
      uses function print_results(void) defined in iquals.tab.c
   variable yystype::asm_operand in line 29
      protection public
   variable yystype::asm_stmt in line 30
      protection public
   variable yystype::attribute in line 31
      protection public
   variable yystype::constant in line 32
      protection public
   variable yystype::cstmt in line 41
      protection public
   variable yystype::decl in line 34
      protection public
   variable yystype::decl in line 69
      protection public
   variable yystype::declarator in line 35
      protection public
   variable yystype::expr in line 36
      protection public
   variable yystype::for_stmt in line 42
      protection public
   variable yystype::i in line 50
      protection public
   variable yystype::id in line 68
      protection public
   variable yystype::id_label in line 37
      protection public
   variable yystype::idtoken in line 70
      protection public
   variable yystype::iexpr in line 57
      protection public
   variable yystype::istmt in line 62
      protection public
   variable yystype::itoken in line 51
      protection public
   variable yystype::label in line 38
      protection public
   variable yystype::location in line 49
      protection public
   variable yystype::node in line 39
      protection public
   variable yystype::ptr in line 28
      protection public
   variable yystype::qual in line 35
      protection public
   variable yystype::stmt in line 40
      protection public
   variable yystype::str in line 34
      protection public
   variable yystype::string in line 43
      protection public
   variable yystype::string_cst in line 33
      protection public
   variable yystype::telement in line 44
      protection public
   variable yystype::type in line 45
      protection public
   variable yystype::u in line 64
      protection public
   variable yystype::word in line 46
      protection public
   variable yyalloc::yyss in line 1475
      protection public
   variable yyalloc::yyvs in line 1476
      protection public
   variable Store::al in line 1407
      protection public
   variable Store::assign in line 1422
      protection public
   variable Store::cell in line 1420
      protection public
   variable Store::cells in line 1399
      protection public
   variable Store::e in line 1403
      protection public
   variable Store::err_msg in line 1421
      protection public
   variable Store::filter in line 1404
      protection public
   variable Store::kind in line 1388
      protection public
   variable Store::lb in line 1398
      protection public
   variable Store::lin in line 1390
      protection public
   variable Store::link in line 1424
      protection public
   variable Store::loc in line 1389
      protection public
   variable Store::lowlink in line 1391
      protection public
   variable Store::name in line 1396
      protection public
   variable Store::num_equiv in line 1397
      protection public
   variable Store::omega_warned in line 1417
      protection public
   variable Store::ow in line 1413
      protection public
   variable Store::ref in line 1408
      protection public
   variable Store::s in line 1402
      protection public
   variable Store::s1 in line 1410
      protection public
   variable Store::s2 in line 1411
      protection public
   variable Store::strong in line 1419
      protection public
   variable Store::u in line 1425
      protection public
   variable Store::ub in line 1393
      protection public
   variable Store::var in line 1400
      protection public
   variable Store::visited in line 1392
      protection public
   variable var_list::name in line 1202
      protection public
   variable var_list::next in line 1204
      protection public
   variable var_list::qual in line 1203
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cqual/cqual-0.981/src/iquals.tab.h
module iquals.tab.h
   macro definition YYSTYPE in line 9
      protection public
   macro definition YYSTYPE_IS_TRIVIAL in line 10
      protection public
   macro definition CONSTANT in line 12
      protection public
   macro definition VARIABLE in line 13
      protection public
   macro definition EQ in line 14
      protection public
   macro definition IMPLIES in line 15
      protection public
   macro definition LEQ in line 16
      protection public
   macro definition UNIFY in line 17
      protection public
   macro definition ERROR in line 18
      protection public
   variable yylval in line 21
      protection public
   variable yystype::asm_operand in line 29
      protection public
   variable yystype::asm_stmt in line 30
      protection public
   variable yystype::attribute in line 31
      protection public
   variable yystype::constant in line 32
      protection public
   variable yystype::cstmt in line 41
      protection public
   variable yystype::decl in line 34
      protection public
   variable yystype::decl in line 69
      protection public
   variable yystype::declarator in line 35
      protection public
   variable yystype::expr in line 36
      protection public
   variable yystype::for_stmt in line 42
      protection public
   variable yystype::i in line 50
      protection public
   variable yystype::id in line 68
      protection public
   variable yystype::id_label in line 37
      protection public
   variable yystype::idtoken in line 70
      protection public
   variable yystype::iexpr in line 57
      protection public
   variable yystype::istmt in line 62
      protection public
   variable yystype::itoken in line 51
      protection public
   variable yystype::label in line 38
      protection public
   variable yystype::location in line 49
      protection public
   variable yystype::node in line 39
      protection public
   variable yystype::ptr in line 28
      protection public
   variable yystype::qual in line 35
      protection public
   variable yystype::stmt in line 40
      protection public
   variable yystype::str in line 34
      protection public
   variable yystype::string in line 43
      protection public
   variable yystype::string_cst in line 33
      protection public
   variable yystype::telement in line 44
      protection public
   variable yystype::type in line 45
      protection public
   variable yystype::u in line 64
      protection public
   variable yystype::word in line 46
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cqual/cqual-0.981/src/lattice-lex.c
module lattice-lex.c
   macro definition yy_create_buffer in line 1
      protection public
   macro definition yy_delete_buffer in line 2
      protection public
   macro definition yy_scan_buffer in line 3
      protection public
   macro definition yy_scan_string in line 4
      protection public
   macro definition yy_scan_bytes in line 5
      protection public
   macro definition yy_flex_debug in line 6
      protection public
   macro definition yy_init_buffer in line 7
      protection public
   macro definition yy_flush_buffer in line 8
      protection public
   macro definition yy_load_buffer_state in line 9
      protection public
   macro definition yy_switch_to_buffer in line 10
      protection public
   macro definition yyin in line 11
      protection public
   macro definition yyleng in line 12
      protection public
   macro definition yylex in line 13
      protection public
   macro definition yyout in line 14
      protection public
   macro definition yyrestart in line 15
      protection public
   macro definition yytext in line 16
      protection public
   macro definition FLEX_SCANNER in line 25
      protection public
   macro definition YY_FLEX_MAJOR_VERSION in line 26
      protection public
   macro definition YY_FLEX_MINOR_VERSION in line 27
      protection public
   macro definition yyconst in line 73
      protection public
   macro definition YY_PROTO in line 80
      protection public
   macro definition YY_NULL in line 84
      protection public
   macro definition YY_SC_TO_UI in line 91
      protection public
   macro definition BEGIN in line 97
      protection public
   macro definition YY_START in line 103
      protection public
   macro definition YYSTATE in line 104
      protection public
   macro definition YY_STATE_EOF in line 107
      protection public
   macro definition YY_NEW_FILE in line 110
      protection public
   macro definition YY_END_OF_BUFFER_CHAR in line 112
      protection public
   macro definition YY_BUF_SIZE in line 115
      protection public
   macro definition EOB_ACT_CONTINUE_SCAN in line 122
      protection public
   macro definition EOB_ACT_END_OF_FILE in line 123
      protection public
   macro definition EOB_ACT_LAST_MATCH in line 124
      protection public
   macro definition yyless in line 142
      protection public
   macro definition unput in line 153
      protection public
   macro definition YY_BUFFER_NEW in line 204
      protection public
   macro definition YY_BUFFER_NORMAL in line 205
      protection public
   macro definition YY_BUFFER_EOF_PENDING in line 216
      protection public
   macro definition YY_CURRENT_BUFFER in line 225
      protection public
   macro definition YY_FLUSH_BUFFER in line 254
      protection public
   macro definition yy_new_buffer in line 264
      protection public
   macro definition yy_set_interactive in line 266
      protection public
   macro definition yy_set_bol in line 273
      protection public
   macro definition YY_AT_BOL in line 280
      protection public
   macro definition yywrap in line 283
      protection public
   macro definition YY_SKIP_YYWRAP in line 284
      protection public
   macro definition yytext_ptr in line 289
      protection public
   macro definition YY_DO_BEFORE_ACTION in line 299
      protection public
   macro definition YY_NUM_RULES in line 306
      protection public
   macro definition YY_END_OF_BUFFER in line 307
      protection public
   macro definition REJECT in line 453
      protection public
   macro definition yymore in line 454
      protection public
   macro definition YY_MORE_ADJ in line 455
      protection public
   macro definition YY_RESTORE_YY_MORE_OFFSET in line 456
      protection public
   macro definition INITIAL in line 459
      protection public
   macro definition YY_NO_UNPUT in line 477
      protection public
   macro definition COMMENT in line 478
      protection public
   macro definition YY_NO_PUSH_STATE in line 533
      protection public
   macro definition YY_NO_POP_STATE in line 534
      protection public
   macro definition YY_NO_TOP_STATE in line 535
      protection public
   macro definition YY_READ_BUF_SIZE in line 555
      protection public
   macro definition ECHO in line 564
      protection public
   macro definition YY_INPUT in line 571
      protection public
   macro definition yyterminate in line 594
      protection public
   macro definition YY_START_STACK_INCR in line 599
      protection public
   macro definition YY_FATAL_ERROR in line 604
      protection public
   macro definition YY_DECL in line 611
      protection public
   macro definition YY_USER_ACTION in line 618
      protection public
   macro definition YY_BREAK in line 623
      protection public
   macro definition YY_RULE_SETUP in line 626
      protection public
   macro definition YY_EXIT_FAILURE in line 1656
      protection public
   macro definition yyless in line 1675
      protection public
   typedef YY_BUFFER_STATE in line 117
      protection public
   typedef yy_size_t in line 159
      protection public
   typedef YY_CHAR in line 285
      protection public
   typedef yy_state_type in line 287
      protection public
   variable yyleng in line 119
      protection public
   variable yyin in line 120
      protection public
   variable yyout in line 120
      protection public
   variable yy_current_buffer in line 219
      protection public
   variable yy_hold_char in line 229
      protection public
   variable yy_n_chars in line 231
      protection public
   variable yy_c_buf_p in line 237
      protection public
   variable yy_init in line 238
      protection public
   variable yy_start in line 239
      protection public
   variable yy_did_buffer_switch_on_eof in line 244
      protection public
   variable yytext in line 288
      protection public
   variable yy_accept in line 308
      protection public
   variable yy_ec in line 324
      protection public
   variable yy_meta in line 356
      protection public
   variable yy_base in line 365
      protection public
   variable yy_def in line 382
      protection public
   variable yy_nxt in line 399
      protection public
   variable yy_chk in line 423
      protection public
   variable yy_last_accepting_state in line 447
      protection public
   variable yy_last_accepting_cpos in line 448
      protection public
   variable lattice_line in line 483
      protection public
   variable YY_DECL in line 629
      protection public
   variable yy_cp in line 632
      protection public
   variable yy_bp in line 632
      protection public
   variable yy_act in line 633
      protection public
   function YY_PROTO((FILE *input_file)) in line 246
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function YY_PROTO((YY_BUFFER_STATE new_buffer)) in line 248
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function YY_PROTO((void)) in line 249
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function YY_PROTO((FILE *file, int size)) in line 250
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function YY_PROTO((YY_BUFFER_STATE b)) in line 251
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function YY_PROTO((YY_BUFFER_STATE b, FILE *file)) in line 252
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function YY_PROTO((char *base, yy_size_t size)) in line 256
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function YY_PROTO((yyconst char *yy_str)) in line 257
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function YY_PROTO((yyconst char *bytes, int len)) in line 258
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function YY_PROTO((yy_size_t)) in line 260
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function YY_PROTO((void *, yy_size_t)) in line 261
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function YY_PROTO((void *)) in line 262
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function YY_PROTO((yy_state_type current_state)) in line 292
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function YY_PROTO((yyconst char msg[])) in line 294
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function if(yy_init) in line 640
      protection public
      23 lines of code
      1 parameters
      6 conditional paths
      uses variable yy_init defined in lattice-lex.c
      uses variable yy_start defined in lattice-lex.c
      uses macro definition yyin defined in lattice-lex.c
      uses macro definition yyout defined in lattice-lex.c
      uses variable yy_current_buffer defined in lattice-lex.c
      uses macro definition yy_create_buffer defined in lattice-lex.c
      uses macro definition YY_BUF_SIZE defined in lattice-lex.c
      uses macro definition yy_load_buffer_state defined in lattice-lex.c
   function while(1) in line 664
      protection public
      354 lines of code
      1 parameters
      57 conditional paths
      uses variable yy_cp defined in lattice-lex.c
      uses variable yy_c_buf_p defined in lattice-lex.c
      uses variable yy_hold_char defined in lattice-lex.c
      uses variable yy_bp defined in lattice-lex.c
      uses variable yy_start defined in lattice-lex.c
      uses variable yy_ec defined in lattice-lex.c
      uses macro definition YY_SC_TO_UI defined in lattice-lex.c
      uses variable yy_accept defined in lattice-lex.c
      uses variable yy_last_accepting_state defined in lattice-lex.c
      uses variable yy_last_accepting_cpos defined in lattice-lex.c
      uses variable yy_chk defined in lattice-lex.c
      uses variable yy_base defined in lattice-lex.c
      uses variable yy_def defined in lattice-lex.c
      uses variable yy_meta defined in lattice-lex.c
      uses variable yy_nxt defined in lattice-lex.c
      uses variable yy_act defined in lattice-lex.c
      uses macro definition YY_DO_BEFORE_ACTION defined in lattice-lex.c
      uses macro definition YY_RULE_SETUP defined in lattice-lex.c
      uses macro definition YY_BREAK defined in lattice-lex.c
      uses variable lattice_line defined in lattice-lex.c
      uses macro definition BEGIN defined in lattice-lex.c
      uses macro definition COMMENT defined in lattice-lex.c
      uses variable lyylval defined in lattice-parse.tab.h
      uses variable lyytext defined in lattice-parse.tab.c
      uses macro definition QUALIFIER defined in lattice-parse.tab.c
      uses macro definition COLOR defined in lattice-parse.tab.c
      uses macro definition FLOW_SENSITIVE defined in lattice-parse.tab.c
      uses macro definition NONPROP defined in lattice-parse.tab.c
      uses macro definition REF defined in lattice-parse.tab.c
      uses macro definition VALUE defined in lattice-parse.tab.c
      uses macro definition LEVEL defined in lattice-parse.tab.c
      uses macro definition SIGN defined in lattice-parse.tab.c
      uses macro definition POS defined in lattice-parse.tab.c
      uses macro definition NEG defined in lattice-parse.tab.c
      uses macro definition EQ defined in iquals.tab.c
      uses macro definition PARTIAL defined in lattice-parse.tab.c
      uses macro definition ORDER defined in lattice-parse.tab.c
      uses macro definition STRING defined in c-parse.tab.c
      uses macro definition INITIAL defined in lattice-lex.c
      uses macro definition ECHO defined in lattice-lex.c
      uses macro definition YY_STATE_EOF defined in lattice-lex.c
      uses macro definition yyterminate defined in lattice-lex.c
      uses macro definition YY_END_OF_BUFFER defined in lattice-lex.c
      uses macro definition yytext_ptr defined in lattice-lex.c
      uses macro definition YY_RESTORE_YY_MORE_OFFSET defined in lattice-lex.c
      uses variable yy_current_buffer defined in lattice-lex.c
      uses variable yy_buffer_state::yy_buffer_status defined in lattice-lex.c
      uses macro definition YY_BUFFER_NEW defined in lattice-lex.c
      uses variable yy_buffer_state::yy_n_chars defined in lattice-lex.c
      uses variable yy_buffer_state::yy_input_file defined in lattice-lex.c
      uses macro definition yyin defined in lattice-lex.c
      uses macro definition YY_BUFFER_NORMAL defined in lattice-lex.c
      uses variable yy_buffer_state::yy_ch_buf defined in lattice-lex.c
      uses function yy_get_previous_state() defined in lattice-lex.c
      uses function yy_try_NUL_trans(yy_state_type) defined in lattice-lex.c
      uses macro definition YY_MORE_ADJ defined in lattice-lex.c
      uses function yy_get_next_buffer() defined in lattice-lex.c
      uses macro definition EOB_ACT_END_OF_FILE defined in lattice-lex.c
      uses variable yy_did_buffer_switch_on_eof defined in lattice-lex.c
      uses macro definition yywrap defined in lattice-lex.c
      uses macro definition YY_START defined in lattice-lex.c
      uses macro definition YY_NEW_FILE defined in lattice-lex.c
      uses macro definition EOB_ACT_CONTINUE_SCAN defined in lattice-lex.c
      uses macro definition EOB_ACT_LAST_MATCH defined in lattice-lex.c
      uses macro definition YY_FATAL_ERROR defined in lattice-lex.c
   function yy_get_next_buffer() in line 1029
      protection public
      128 lines of code
      0 parameters
      13 conditional paths
      uses variable yy_current_buffer defined in lattice-lex.c
      uses variable yy_buffer_state::yy_ch_buf defined in lattice-lex.c
      uses macro definition yytext_ptr defined in lattice-lex.c
      uses variable yy_c_buf_p defined in lattice-lex.c
      uses variable yy_buffer_state::yy_n_chars defined in lattice-lex.c
      uses macro definition YY_FATAL_ERROR defined in lattice-lex.c
      uses variable yy_buffer_state::yy_fill_buffer defined in lattice-lex.c
      uses macro definition YY_MORE_ADJ defined in lattice-lex.c
      uses macro definition EOB_ACT_END_OF_FILE defined in lattice-lex.c
      uses macro definition EOB_ACT_LAST_MATCH defined in lattice-lex.c
      uses variable yy_buffer_state::yy_buffer_status defined in lattice-lex.c
      uses macro definition YY_BUFFER_EOF_PENDING defined in lattice-lex.c
      uses variable yy_buffer_state::yy_buf_size defined in lattice-lex.c
      uses variable yy_buffer_state::yy_is_our_buffer defined in lattice-lex.c
      uses function yy_flex_realloc(void *,yy_size_t) defined in lattice-lex.c
      uses macro definition YY_READ_BUF_SIZE defined in lattice-lex.c
      uses macro definition YY_INPUT defined in lattice-lex.c
      uses macro definition yyrestart defined in lattice-lex.c
      uses macro definition yyin defined in lattice-lex.c
      uses macro definition EOB_ACT_CONTINUE_SCAN defined in lattice-lex.c
      uses macro definition YY_END_OF_BUFFER_CHAR defined in lattice-lex.c
   function yy_get_previous_state() in line 1161
      protection public
      26 lines of code
      0 parameters
      5 conditional paths
      uses variable yy_cp defined in lattice-lex.c
      uses variable yy_start defined in lattice-lex.c
      uses macro definition yytext_ptr defined in lattice-lex.c
      uses macro definition YY_MORE_ADJ defined in lattice-lex.c
      uses variable yy_c_buf_p defined in lattice-lex.c
      uses variable yy_ec defined in lattice-lex.c
      uses macro definition YY_SC_TO_UI defined in lattice-lex.c
      uses variable yy_accept defined in lattice-lex.c
      uses variable yy_last_accepting_state defined in lattice-lex.c
      uses variable yy_last_accepting_cpos defined in lattice-lex.c
      uses variable yy_chk defined in lattice-lex.c
      uses variable yy_base defined in lattice-lex.c
      uses variable yy_def defined in lattice-lex.c
      uses variable yy_meta defined in lattice-lex.c
      uses variable yy_nxt defined in lattice-lex.c
      uses function yy_try_NUL_trans(yy_state_type) defined in lattice-lex.c
   function yy_try_NUL_trans(yy_state_type) in line 1198
      protection public
      24 lines of code
      1 parameters
      7 conditional paths
      uses variable yy_cp defined in lattice-lex.c
      uses variable yy_c_buf_p defined in lattice-lex.c
      uses variable yy_accept defined in lattice-lex.c
      uses variable yy_last_accepting_state defined in lattice-lex.c
      uses variable yy_last_accepting_cpos defined in lattice-lex.c
      uses variable yy_chk defined in lattice-lex.c
      uses variable yy_base defined in lattice-lex.c
      uses variable yy_def defined in lattice-lex.c
      uses variable yy_meta defined in lattice-lex.c
      uses variable yy_nxt defined in lattice-lex.c
      uses variable yy_bp defined in lattice-lex.c
      uses variable yy_hold_char defined in lattice-lex.c
      uses variable yy_buffer_state::yy_ch_buf defined in lattice-lex.c
      uses variable yy_buffer_state::yy_n_chars defined in lattice-lex.c
      uses variable yy_current_buffer defined in lattice-lex.c
      uses variable yy_buffer_state::yy_buf_size defined in lattice-lex.c
      uses macro definition YY_FATAL_ERROR defined in lattice-lex.c
      uses macro definition yytext_ptr defined in lattice-lex.c
   function input() in line 1272
      protection public
      68 lines of code
      0 parameters
      8 conditional paths
      uses variable yy_c_buf_p defined in lattice-lex.c
      uses variable yy_hold_char defined in lattice-lex.c
      uses macro definition YY_END_OF_BUFFER_CHAR defined in lattice-lex.c
      uses variable yy_buffer_state::yy_ch_buf defined in lattice-lex.c
      uses variable yy_buffer_state::yy_n_chars defined in lattice-lex.c
      uses macro definition yytext_ptr defined in lattice-lex.c
      uses function yy_get_next_buffer() defined in lattice-lex.c
      uses macro definition EOB_ACT_LAST_MATCH defined in lattice-lex.c
      uses macro definition yyrestart defined in lattice-lex.c
      uses macro definition yyin defined in lattice-lex.c
      uses macro definition EOB_ACT_END_OF_FILE defined in lattice-lex.c
      uses macro definition yywrap defined in lattice-lex.c
      uses variable yy_did_buffer_switch_on_eof defined in lattice-lex.c
      uses macro definition YY_NEW_FILE defined in lattice-lex.c
      uses macro definition EOB_ACT_CONTINUE_SCAN defined in lattice-lex.c
   function yyrestart(FILE *) in line 1345
      protection public
      10 lines of code
      1 parameters
      2 conditional paths
      uses variable yy_current_buffer defined in lattice-lex.c
      uses macro definition yy_create_buffer defined in lattice-lex.c
      uses macro definition yyin defined in lattice-lex.c
      uses macro definition YY_BUF_SIZE defined in lattice-lex.c
      uses macro definition yy_init_buffer defined in lattice-lex.c
      uses macro definition yy_load_buffer_state defined in lattice-lex.c
      uses macro definition yy_switch_to_buffer defined in lattice-lex.c
   function yy_switch_to_buffer(YY_BUFFER_STATE) in line 1360
      protection public
      25 lines of code
      1 parameters
      3 conditional paths
      uses variable yy_current_buffer defined in lattice-lex.c
      uses variable yy_c_buf_p defined in lattice-lex.c
      uses variable yy_hold_char defined in lattice-lex.c
      uses variable yy_buffer_state::yy_buf_pos defined in lattice-lex.c
      uses variable yy_buffer_state::yy_n_chars defined in lattice-lex.c
      uses macro definition yy_load_buffer_state defined in lattice-lex.c
      uses variable yy_did_buffer_switch_on_eof defined in lattice-lex.c
   function yy_load_buffer_state() in line 1390
      protection public
      8 lines of code
      0 parameters
      1 conditional paths
      uses variable yy_buffer_state::yy_n_chars defined in lattice-lex.c
      uses variable yy_current_buffer defined in lattice-lex.c
      uses macro definition yytext_ptr defined in lattice-lex.c
      uses variable yy_c_buf_p defined in lattice-lex.c
      uses variable yy_buffer_state::yy_buf_pos defined in lattice-lex.c
      uses macro definition yyin defined in lattice-lex.c
      uses variable yy_buffer_state::yy_input_file defined in lattice-lex.c
      uses variable yy_hold_char defined in lattice-lex.c
      uses macro definition yy_create_buffer defined in lattice-lex.c
   function yy_create_buffer(FILE *,int) in line 1403
      protection public
      26 lines of code
      2 parameters
      3 conditional paths
      uses function yy_flex_alloc(yy_size_t) defined in lattice-lex.c
      uses macro definition YY_FATAL_ERROR defined in lattice-lex.c
      uses variable yy_buffer_state::yy_buf_size defined in lattice-lex.c
      uses variable yy_buffer_state::yy_ch_buf defined in lattice-lex.c
      uses variable yy_buffer_state::yy_is_our_buffer defined in lattice-lex.c
      uses macro definition yy_init_buffer defined in lattice-lex.c
      uses macro definition yy_delete_buffer defined in lattice-lex.c
   function yy_delete_buffer(YY_BUFFER_STATE) in line 1434
      protection public
      15 lines of code
      1 parameters
      4 conditional paths
      uses variable yy_current_buffer defined in lattice-lex.c
      uses function yy_flex_free(void *) defined in lattice-lex.c
      uses macro definition yy_init_buffer defined in lattice-lex.c
   function yy_init_buffer(YY_BUFFER_STATE,FILE *) in line 1455
      protection public
      22 lines of code
      2 parameters
      1 conditional paths
      uses macro definition yy_flush_buffer defined in lattice-lex.c
   function yy_flush_buffer(YY_BUFFER_STATE) in line 1482
      protection public
      25 lines of code
      1 parameters
      3 conditional paths
      uses variable yy_buffer_state::yy_n_chars defined in lattice-lex.c
      uses macro definition YY_END_OF_BUFFER_CHAR defined in lattice-lex.c
      uses macro definition YY_BUFFER_NEW defined in lattice-lex.c
      uses variable yy_current_buffer defined in lattice-lex.c
      uses macro definition yy_load_buffer_state defined in lattice-lex.c
      uses macro definition yy_scan_buffer defined in lattice-lex.c
   function yy_scan_buffer(char *,yy_size_t) in line 1513
      protection public
      31 lines of code
      2 parameters
      3 conditional paths
      uses macro definition YY_END_OF_BUFFER_CHAR defined in lattice-lex.c
      uses function yy_flex_alloc(yy_size_t) defined in lattice-lex.c
      uses macro definition YY_FATAL_ERROR defined in lattice-lex.c
      uses variable yy_buffer_state::yy_buf_size defined in lattice-lex.c
      uses variable yy_buffer_state::yy_buf_pos defined in lattice-lex.c
      uses variable yy_buffer_state::yy_ch_buf defined in lattice-lex.c
      uses variable yy_buffer_state::yy_is_our_buffer defined in lattice-lex.c
      uses variable yy_buffer_state::yy_input_file defined in lattice-lex.c
      uses variable yy_buffer_state::yy_n_chars defined in lattice-lex.c
      uses variable yy_buffer_state::yy_is_interactive defined in lattice-lex.c
      uses variable yy_buffer_state::yy_at_bol defined in lattice-lex.c
      uses variable yy_buffer_state::yy_fill_buffer defined in lattice-lex.c
      uses variable yy_buffer_state::yy_buffer_status defined in lattice-lex.c
      uses macro definition YY_BUFFER_NEW defined in lattice-lex.c
      uses macro definition yy_switch_to_buffer defined in lattice-lex.c
      uses macro definition yy_scan_string defined in lattice-lex.c
      uses macro definition yyconst defined in lattice-lex.c
   function yy_scan_string(yyconst char *) in line 1551
      protection public
      10 lines of code
      1 parameters
      2 conditional paths
      uses variable len defined in c-gperf.h
      uses macro definition yy_scan_bytes defined in lattice-lex.c
      uses macro definition yyconst defined in lattice-lex.c
   function yy_scan_bytes(yyconst char *,int) in line 1568
      protection public
      32 lines of code
      2 parameters
      8 conditional paths
      uses variable len defined in c-gperf.h
      uses function yy_flex_alloc(yy_size_t) defined in lattice-lex.c
      uses macro definition YY_FATAL_ERROR defined in lattice-lex.c
      uses macro definition YY_END_OF_BUFFER_CHAR defined in lattice-lex.c
      uses macro definition yy_scan_buffer defined in lattice-lex.c
      uses variable yy_buffer_state::yy_is_our_buffer defined in lattice-lex.c
      uses macro definition YY_START_STACK_INCR defined in lattice-lex.c
      uses function yy_flex_realloc(void *,yy_size_t) defined in lattice-lex.c
      uses macro definition YY_START defined in lattice-lex.c
      uses macro definition BEGIN defined in lattice-lex.c
   function yy_fatal_error(msg) in line 1662
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses macro definition YY_EXIT_FAILURE defined in lattice-lex.c
   function yy_flex_alloc(yy_size_t) in line 1726
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses function yy_flex_realloc(void *,yy_size_t) defined in lattice-lex.c
   function yy_flex_realloc(void *,yy_size_t) in line 1736
      protection public
      14 lines of code
      2 parameters
      1 conditional paths
      uses function yy_flex_free(void *) defined in lattice-lex.c
   function yy_flex_free(void *) in line 1754
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses function main(void) defined in linux-lock.c
      uses macro definition yylex defined in lattice-lex.c
   variable yy_buffer_state::yy_at_bol in line 179
      protection public
   variable yy_buffer_state::yy_buf_pos in line 150
      protection public
   variable yy_buffer_state::yy_buf_size in line 155
      protection public
   variable yy_buffer_state::yy_buffer_status in line 186
      protection public
   variable yy_buffer_state::yy_ch_buf in line 149
      protection public
   variable yy_buffer_state::yy_fill_buffer in line 184
      protection public
   variable yy_buffer_state::yy_input_file in line 147
      protection public
   variable yy_buffer_state::yy_is_interactive in line 173
      protection public
   variable yy_buffer_state::yy_is_our_buffer in line 166
      protection public
   variable yy_buffer_state::yy_n_chars in line 160
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cqual/cqual-0.981/src/lattice-parse.tab.c
module lattice-parse.tab.c
   macro definition YYBISON in line 4
      protection public
   macro definition yyparse in line 6
      protection public
   macro definition yylex in line 7
      protection public
   macro definition yyerror in line 8
      protection public
   macro definition yylval in line 9
      protection public
   macro definition yychar in line 10
      protection public
   macro definition yydebug in line 11
      protection public
   macro definition yynerrs in line 12
      protection public
   macro definition QUALIFIER in line 13
      protection public
   macro definition STRING in line 14
      protection public
   macro definition COLOR in line 15
      protection public
   macro definition FLOW_SENSITIVE in line 16
      protection public
   macro definition EQ in line 17
      protection public
   macro definition LEVEL in line 18
      protection public
   macro definition NEG in line 19
      protection public
   macro definition NONPROP in line 20
      protection public
   macro definition ORDER in line 21
      protection public
   macro definition PARTIAL in line 22
      protection public
   macro definition POS in line 23
      protection public
   macro definition REF in line 24
      protection public
   macro definition SIGN in line 25
      protection public
   macro definition VALUE in line 26
      protection public
   macro definition YYSTYPE in line 46
      protection public
   macro definition YYSTYPE_IS_TRIVIAL in line 47
      protection public
   macro definition YYDEBUG in line 50
      protection public
   macro definition YYFINAL in line 55
      protection public
   macro definition YYFLAG in line 56
      protection public
   macro definition YYNTBASE in line 57
      protection public
   macro definition YYTRANSLATE in line 60
      protection public
   macro definition YYLAST in line 192
      protection public
   macro definition YYSTACK_ALLOC in line 278
      protection public
   macro definition YYSTACK_FREE in line 279
      protection public
   macro definition YYSTACK_GAP_MAX in line 299
      protection public
   macro definition YYSTACK_BYTES in line 308
      protection public
   macro definition YYCOPY in line 320
      protection public
   macro definition YYSTACK_RELOCATE in line 336
      protection public
   macro definition YYSIZE_T in line 363
      protection public
   macro definition yyerrok in line 366
      protection public
   macro definition yyclearin in line 367
      protection public
   macro definition YYEMPTY in line 368
      protection public
   macro definition YYEOF in line 369
      protection public
   macro definition YYACCEPT in line 370
      protection public
   macro definition YYABORT in line 371
      protection public
   macro definition YYERROR in line 372
      protection public
   macro definition YYFAIL in line 376
      protection public
   macro definition YYRECOVERING in line 377
      protection public
   macro definition YYBACKUP in line 378
      protection public
   macro definition YYTERROR in line 395
      protection public
   macro definition YYERRCODE in line 396
      protection public
   macro definition YYLLOC_DEFAULT in line 407
      protection public
   macro definition YYLEX in line 430
      protection public
   macro definition YYDPRINTF in line 451
      protection public
   macro definition YYINITDEPTH in line 456
      protection public
   macro definition YYMAXDEPTH in line 471
      protection public
   macro definition YYPARSE_PARAM_ARG in line 544
      protection public
   macro definition YYPARSE_PARAM_DECL in line 545
      protection public
   macro definition YY_DECL_NON_LSP_VARIABLES in line 560
      protection public
   macro definition YY_DECL_VARIABLES in line 577
      protection public
   macro definition YYPOPSTACK in line 633
      protection public
   variable lyytext in line 36
      protection public
   variable lattice_line in line 37
      protection public
   variable lattice_file in line 38
      protection public
   variable current_qual in line 39
      protection public
   variable yytranslate in line 63
      protection public
   variable yyr1 in line 143
      protection public
   variable yyr2 in line 151
      protection public
   variable yydefact in line 161
      protection public
   variable yydefgoto in line 170
      protection public
   variable yypact in line 176
      protection public
   variable yypgoto in line 185
      protection public
   variable yytable in line 195
      protection public
   variable yycheck in line 204
      protection public
   function lyylex(void) in line 34
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function lyyerror(char *) in line 35
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable lattice_file defined in lattice-parse.tab.c
      uses variable lattice_line defined in lattice-parse.tab.c
   function yyparse(YYPARSE_PARAM_ARG) in line 589
      protection public
      624 lines of code
      1 parameters
      84 conditional paths
      uses macro definition YY_DECL_VARIABLES defined in lattice-parse.tab.c
      uses macro definition YYINITDEPTH defined in lattice-parse.tab.c
      uses variable yyalloc::yyss defined in lattice-parse.tab.c
      uses macro definition YYSTYPE defined in lattice-parse.tab.c
      uses variable yyalloc::yyvs defined in lattice-parse.tab.c
      uses macro definition YYSIZE_T defined in lattice-parse.tab.c
      uses macro definition YYDPRINTF defined in lattice-parse.tab.c
      uses macro definition yynerrs defined in lattice-parse.tab.c
      uses macro definition yychar defined in lattice-parse.tab.c
      uses macro definition YYEMPTY defined in lattice-parse.tab.c
      uses macro definition YYMAXDEPTH defined in lattice-parse.tab.c
      uses macro definition YYSTACK_ALLOC defined in lattice-parse.tab.c
      uses macro definition YYSTACK_BYTES defined in lattice-parse.tab.c
      uses macro definition YYSTACK_RELOCATE defined in lattice-parse.tab.c
      uses macro definition YYSTACK_FREE defined in lattice-parse.tab.c
      uses macro definition YYABORT defined in lattice-parse.tab.c
      uses variable yypact defined in lattice-parse.tab.c
      uses macro definition YYFLAG defined in lattice-parse.tab.c
      uses macro definition YYLEX defined in lattice-parse.tab.c
      uses macro definition YYEOF defined in lattice-parse.tab.c
      uses macro definition YYTRANSLATE defined in lattice-parse.tab.c
      uses macro definition yydebug defined in lattice-parse.tab.c
      uses macro definition YYFPRINTF defined in c-parse.tab.c
      uses macro definition YYPRINT defined in c-parse.tab.c
      uses macro definition yylval defined in lattice-parse.tab.c
      uses macro definition YYLAST defined in lattice-parse.tab.c
      uses variable yycheck defined in lattice-parse.tab.c
      uses variable yytable defined in lattice-parse.tab.c
      uses macro definition YYFINAL defined in lattice-parse.tab.c
      uses macro definition YYACCEPT defined in lattice-parse.tab.c
      uses variable yydefact defined in lattice-parse.tab.c
      uses variable yyr2 defined in lattice-parse.tab.c
      uses macro definition YYLLOC_DEFAULT defined in lattice-parse.tab.c
      uses variable yyr1 defined in lattice-parse.tab.c
      uses function begin_po_qual(void) defined in quals.c
      uses function end_po_qual(void) defined in quals.c
      uses function set_po_flow_sensitive(void) defined in quals.c
      uses function set_po_nonprop(void) defined in quals.c
      uses function add_qual(const char *) defined in quals.c
      uses variable current_qual defined in lattice-parse.tab.c
      uses macro definition NULL defined in config.h
      uses function add_color_qual(qual,const char *) defined in quals.c
      uses function add_level_qual(qual,level_qual_t) defined in quals.c
      uses enumvalue level_ref defined in quals.h
      uses enumvalue level_value defined in quals.h
      uses function add_sign_qual(qual,sign_qual_t) defined in quals.c
      uses enumvalue sign_pos defined in quals.h
      uses enumvalue sign_neg defined in quals.h
      uses enumvalue sign_eq defined in quals.h
      uses function add_qual_lt(qual,qual) defined in quals.c
      uses variable yypgoto defined in lattice-parse.tab.c
      uses macro definition YYNTBASE defined in lattice-parse.tab.c
      uses variable yydefgoto defined in lattice-parse.tab.c
      uses macro definition yyerror defined in lattice-parse.tab.c
      uses macro definition YYTERROR defined in lattice-parse.tab.c
   function load_config_file_quals(const char *) in line 1221
      protection public
      20 lines of code
      1 parameters
      2 conditional paths
      uses variable filename defined in iquals.tab.c
      uses variable lattice_file defined in lattice-parse.tab.c
      uses variable lattice_line defined in lattice-parse.tab.c
      uses macro definition NULL defined in config.h
   variable yystype::asm_operand in line 29
      protection public
   variable yystype::asm_stmt in line 30
      protection public
   variable yystype::attribute in line 31
      protection public
   variable yystype::constant in line 32
      protection public
   variable yystype::cstmt in line 41
      protection public
   variable yystype::decl in line 34
      protection public
   variable yystype::decl in line 69
      protection public
   variable yystype::declarator in line 35
      protection public
   variable yystype::expr in line 36
      protection public
   variable yystype::for_stmt in line 42
      protection public
   variable yystype::i in line 50
      protection public
   variable yystype::id in line 68
      protection public
   variable yystype::id_label in line 37
      protection public
   variable yystype::idtoken in line 70
      protection public
   variable yystype::iexpr in line 57
      protection public
   variable yystype::istmt in line 62
      protection public
   variable yystype::itoken in line 51
      protection public
   variable yystype::label in line 38
      protection public
   variable yystype::location in line 49
      protection public
   variable yystype::node in line 39
      protection public
   variable yystype::ptr in line 28
      protection public
   variable yystype::qual in line 35
      protection public
   variable yystype::stmt in line 40
      protection public
   variable yystype::str in line 34
      protection public
   variable yystype::string in line 43
      protection public
   variable yystype::string_cst in line 33
      protection public
   variable yystype::telement in line 44
      protection public
   variable yystype::type in line 45
      protection public
   variable yystype::u in line 64
      protection public
   variable yystype::word in line 46
      protection public
   variable yyalloc::yyss in line 1475
      protection public
   variable yyalloc::yyvs in line 1476
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cqual/cqual-0.981/src/lattice-parse.tab.h
module lattice-parse.tab.h
   macro definition YYSTYPE in line 8
      protection public
   macro definition YYSTYPE_IS_TRIVIAL in line 9
      protection public
   macro definition QUALIFIER in line 11
      protection public
   macro definition STRING in line 12
      protection public
   macro definition COLOR in line 13
      protection public
   macro definition FLOW_SENSITIVE in line 14
      protection public
   macro definition EQ in line 15
      protection public
   macro definition LEVEL in line 16
      protection public
   macro definition NEG in line 17
      protection public
   macro definition NONPROP in line 18
      protection public
   macro definition ORDER in line 19
      protection public
   macro definition PARTIAL in line 20
      protection public
   macro definition POS in line 21
      protection public
   macro definition REF in line 22
      protection public
   macro definition SIGN in line 23
      protection public
   macro definition VALUE in line 24
      protection public
   variable lyylval in line 27
      protection public
   variable yystype::asm_operand in line 29
      protection public
   variable yystype::asm_stmt in line 30
      protection public
   variable yystype::attribute in line 31
      protection public
   variable yystype::constant in line 32
      protection public
   variable yystype::cstmt in line 41
      protection public
   variable yystype::decl in line 34
      protection public
   variable yystype::decl in line 69
      protection public
   variable yystype::declarator in line 35
      protection public
   variable yystype::expr in line 36
      protection public
   variable yystype::for_stmt in line 42
      protection public
   variable yystype::i in line 50
      protection public
   variable yystype::id in line 68
      protection public
   variable yystype::id_label in line 37
      protection public
   variable yystype::idtoken in line 70
      protection public
   variable yystype::iexpr in line 57
      protection public
   variable yystype::istmt in line 62
      protection public
   variable yystype::itoken in line 51
      protection public
   variable yystype::label in line 38
      protection public
   variable yystype::location in line 49
      protection public
   variable yystype::node in line 39
      protection public
   variable yystype::ptr in line 28
      protection public
   variable yystype::qual in line 35
      protection public
   variable yystype::stmt in line 40
      protection public
   variable yystype::str in line 34
      protection public
   variable yystype::string in line 43
      protection public
   variable yystype::string_cst in line 33
      protection public
   variable yystype::telement in line 44
      protection public
   variable yystype::type in line 45
      protection public
   variable yystype::u in line 64
      protection public
   variable yystype::word in line 46
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cqual/cqual-0.981/src/libcompat/alloc.c
module alloc.c
   function alloc_block(region,struct allocator *,struct ablock *,void **,int,int,void **,int,int,size_t,int) in line 39
      protection public
      42 lines of code
      11 parameters
      4 conditional paths
      uses macro definition PALIGN defined in regions.c
      uses variable ablock::allocfrom defined in regions.c
      uses variable ablock::base defined in regions.c
      uses macro definition RPAGESIZE defined in regions.c
      uses function alloc_single_page(struct page *) defined in pages.c
      uses variable allocator::pages defined in regions.c
      uses variable page::previous defined in pages.c
      uses function set_region(struct page *,int,region) defined in pages.c
      uses function alloc_pages(int,struct page *) defined in pages.c
      uses macro definition RPAGELOG defined in regions.h
      uses variable allocator::bigpages defined in regions.c
      uses macro definition preclear defined in regions.c
      uses macro definition ASSERT_INUSE defined in pages.c
   function qalloc(region,struct allocator *,void **,int,int,void **,int,int,int) in line 82
      protection public
      39 lines of code
      9 parameters
      5 conditional paths
      uses macro definition ALIGN defined in regions.c
      uses macro definition RPAGESIZE defined in regions.c
      uses macro definition K defined in regions.c
      uses function alloc_block(region,struct allocator *,struct ablock *,void **,int,int,void **,int,int,size_t,int) defined in alloc.c
      uses variable allocator::page defined in regions.c
      uses variable allocator::superpage defined in regions.c
      uses variable allocator::hyperpage defined in regions.c
      uses variable page::previous defined in pages.c
      uses macro definition RPAGELOG defined in regions.h
      uses function alloc_pages(int,struct page *) defined in pages.c
      uses variable allocator::bigpages defined in regions.c
      uses function set_region(struct page *,int,region) defined in pages.c
      uses macro definition PALIGN defined in regions.c
      uses macro definition preclear defined in regions.c
   function free_all_pages(region,struct allocator *) in line 122
      protection public
      16 lines of code
      2 parameters
      3 conditional paths
      uses variable page::next defined in pages.c
      uses variable allocator::pages defined in regions.c
      uses function free_single_page(region,struct page *) defined in pages.c
      uses variable allocator::bigpages defined in regions.c
      uses function free_pages(region,struct page *) defined in pages.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cqual/cqual-0.981/src/libcompat/pages.c
module pages.c
   macro definition FREEPAGE in line 41
      protection public
   macro definition ASSERT_FREE in line 47
      protection public
   macro definition ASSERT_INUSE in line 51
      protection public
   macro definition PAGECOUNTBITS in line 58
      protection public
   macro definition page_region in line 174
      protection public
   typedef pageid in line 36
      protection public
   variable pages_byaddress in line 36
      protection public
   variable single_pages in line 95
      protection public
   variable unused_pages in line 98
      protection public
   variable __rcregionmap in line 167
      protection public
   variable single_page_count in line 344
      protection public
   function alloc_single_page(struct page *) in line 87
      protection public
      17 lines of code
      1 parameters
      2 conditional paths
      uses variable single_pages defined in pages.c
      uses function scavenge_single_pages(int) defined in pages.c
      uses macro definition PAGE_GROUP_SIZE defined in regions.c
      uses macro definition ASSERT_FREE defined in pages.c
      uses variable page::next defined in pages.c
      uses variable single_page_count defined in pages.c
   function free_single_page(region,struct page *) in line 88
      protection public
      23 lines of code
      2 parameters
      2 conditional paths
      uses macro definition ASSERT_INUSE defined in pages.c
      uses function set_page_region(pageid,region) defined in pages.c
      uses macro definition PAGENB defined in regions.c
      uses macro definition FREEPAGE defined in pages.c
      uses variable single_page_count defined in pages.c
      uses macro definition PAGE_GROUP_SIZE defined in regions.c
      uses variable page::pagecount defined in pages.c
      uses function coalesce(struct page *) defined in pages.c
      uses variable page::next defined in pages.c
      uses variable single_pages defined in pages.c
   function alloc_pages(int,struct page *) in line 90
      protection public
      35 lines of code
      2 parameters
      7 conditional paths
      uses macro definition K defined in regions.c
      uses variable unused_pages defined in pages.c
      uses function alloc_new(int,struct page *) defined in pages.c
      uses variable page::next defined in pages.c
      uses variable page::pagecount defined in pages.c
      uses function alloc_split(struct page *,int,struct page *) defined in pages.c
   function free_pages(region,struct page *) in line 91
      protection public
      15 lines of code
      2 parameters
      2 conditional paths
      uses macro definition PAGENB defined in regions.c
      uses variable page::pagecount defined in pages.c
      uses macro definition page_region defined in pages.c
      uses function set_page_region(pageid,region) defined in pages.c
      uses macro definition FREEPAGE defined in pages.c
      uses function coalesce(struct page *) defined in pages.c
   function init_pages(void) in line 100
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable pages_byaddress defined in pages.c
      uses variable page::next_address defined in pages.c
      uses variable page::prev_address defined in pages.c
   function insertbefore_address(struct page *,struct page *) in line 106
      protection public
      7 lines of code
      2 parameters
      1 conditional paths
      uses variable page::prev_address defined in pages.c
      uses variable page::next_address defined in pages.c
   function unlink_address(struct page *) in line 114
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable page::prev_address defined in pages.c
      uses variable page::next_address defined in pages.c
   function addbyaddress(struct page *) in line 120
      protection public
      15 lines of code
      1 parameters
      3 conditional paths
      uses variable pages_byaddress defined in pages.c
      uses variable page::next_address defined in pages.c
      uses function insertbefore_address(struct page *,struct page *) defined in pages.c
   function addfront(struct page **,struct page *) in line 137
      protection public
      8 lines of code
      2 parameters
      2 conditional paths
      uses variable page::previous defined in pages.c
      uses macro definition NULL defined in config.h
      uses variable page::next defined in pages.c
   function unlink_page(struct page **,struct page *) in line 146
      protection public
      10 lines of code
      2 parameters
      3 conditional paths
      uses variable page::previous defined in pages.c
      uses variable page::next defined in pages.c
   function region_get_mem(size_t) in line 157
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses macro definition RPAGESIZE defined in regions.c
      uses macro definition ALIGN defined in regions.c
   function set_page_region(pageid,region) in line 169
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses variable __rcregionmap defined in pages.c
   function set_region(struct page *,int,region) in line 176
      protection public
      7 lines of code
      3 parameters
      2 conditional paths
      uses macro definition PAGENB defined in regions.c
      uses function set_page_region(pageid,region) defined in pages.c
   function set_region_range(void *,void *,region) in line 186
      protection public
      7 lines of code
      3 parameters
      2 conditional paths
      uses macro definition PAGENB defined in regions.c
      uses function set_page_region(pageid,region) defined in pages.c
   function alloc_new(int,struct page *) in line 197
      protection public
      28 lines of code
      2 parameters
      4 conditional paths
      uses function region_get_mem(size_t) defined in pages.c
      uses macro definition RPAGELOG defined in regions.h
      uses variable nomem_h defined in regions.c
      uses macro definition RPAGESIZE defined in regions.c
      uses variable page::next defined in pages.c
      uses variable page::pagecount defined in pages.c
      uses variable page::free defined in pages.c
      uses function addbyaddress(struct page *) defined in pages.c
      uses macro definition PAGENB defined in regions.c
      uses function set_page_region(pageid,region) defined in pages.c
      uses macro definition FREEPAGE defined in pages.c
   function alloc_split(struct page *,int,struct page *) in line 226
      protection public
      35 lines of code
      3 parameters
      3 conditional paths
      uses macro definition PAGENB defined in regions.c
      uses variable page::pagecount defined in pages.c
      uses macro definition page_region defined in pages.c
      uses macro definition FREEPAGE defined in pages.c
      uses macro definition RPAGELOG defined in regions.h
      uses function insertbefore_address(struct page *,struct page *) defined in pages.c
      uses variable page::next_address defined in pages.c
      uses function unlink_page(struct page **,struct page *) defined in pages.c
      uses variable unused_pages defined in pages.c
      uses variable page::next defined in pages.c
      uses variable page::free defined in pages.c
   function coalesce(struct page *) in line 298
      protection public
      25 lines of code
      1 parameters
      3 conditional paths
      uses variable page::prev_address defined in pages.c
      uses variable page::next defined in pages.c
      uses variable page::free defined in pages.c
      uses variable page::pagecount defined in pages.c
      uses macro definition RPAGELOG defined in regions.h
      uses function unlink_address(struct page *) defined in pages.c
      uses function addfront(struct page **,struct page *) defined in pages.c
      uses variable unused_pages defined in pages.c
      uses variable page::next_address defined in pages.c
      uses function unlink_page(struct page **,struct page *) defined in pages.c
   function add_single_pages(struct page *) in line 346
      protection public
      26 lines of code
      1 parameters
      3 conditional paths
      uses variable page::pagecount defined in pages.c
      uses variable page::prev_address defined in pages.c
      uses variable page::next_address defined in pages.c
      uses variable page::next defined in pages.c
      uses variable single_page_count defined in pages.c
      uses macro definition ASSERT_FREE defined in pages.c
      uses variable page::free defined in pages.c
      uses variable single_pages defined in pages.c
      uses macro definition RPAGESIZE defined in regions.c
   function scavenge_single_pages(int) in line 373
      protection public
      48 lines of code
      1 parameters
      7 conditional paths
      uses macro definition NULL defined in config.h
      uses variable unused_pages defined in pages.c
      uses variable page::pagecount defined in pages.c
      uses macro definition K defined in regions.c
      uses variable page::next defined in pages.c
      uses function unlink_page(struct page **,struct page *) defined in pages.c
      uses function add_single_pages(struct page *) defined in pages.c
      uses function alloc_new(int,struct page *) defined in pages.c
      uses function alloc_split(struct page *,int,struct page *) defined in pages.c
   variable page::free in line 71
      protection public
   variable page::next in line 63
      protection public
   variable page::next_address in line 66
      protection public
   variable page::pagecount in line 69
      protection public
   variable page::prev_address in line 66
      protection public
   variable page::previous in line 74
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cqual/cqual-0.981/src/libcompat/profile.c
module profile.c
   macro definition REGION_PROFILE_DEPTH in line 113
      protection public
   typedef ainfo in line 53
      protection public
   typedef list in line 266
      protection public
   typedef finfo in line 304
      protection public
   variable ainfos in line 55
      protection public
   variable profile_region in line 56
      protection public
   variable registered_exit in line 71
      protection public
   variable out in line 259
      protection public
   variable finfos in line 306
      protection public
   function pfail(const char *) in line 59
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
   function find_ainfo(char *,int) in line 73
      protection public
      26 lines of code
      2 parameters
      6 conditional paths
      uses variable ainfos defined in profile.c
      uses variable Alloc_info::next defined in profile.c
      uses variable Alloc_info::line defined in profile.c
      uses variable Alloc_info::file defined in profile.c
      uses variable registered_exit defined in profile.c
      uses function profile(void) defined in profile.c
      uses variable profile_region defined in profile.c
      uses function newregion(void) defined in regions.c
      uses macro definition ralloc defined in regions.h
      uses variable Alloc_info::size defined in profile.c
      uses variable Alloc_info::calls defined in profile.c
   function add_alloc(char *,int,int) in line 178
      protection public
      15 lines of code
      3 parameters
      1 conditional paths
      uses function find_ainfo(char *,int) defined in profile.c
      uses variable Alloc_info::file defined in profile.c
      uses variable Alloc_info::line defined in profile.c
      uses variable Alloc_info::calls defined in profile.c
      uses variable Alloc_info::size defined in profile.c
   function profile_typed_ralloc(region,size_t,type_t,char *,int) in line 200
      protection public
      6 lines of code
      5 parameters
      1 conditional paths
      uses function add_alloc(char *,int,int) defined in profile.c
      uses variable Alloc_info::file defined in profile.c
      uses variable Alloc_info::line defined in profile.c
      uses variable Alloc_info::size defined in profile.c
      uses function typed_ralloc(region,size_t,type_t) defined in regions.c
   function profile_typed_rarrayalloc(region,size_t,size_t,type_t,char *,int) in line 207
      protection public
      6 lines of code
      6 parameters
      1 conditional paths
      uses function add_alloc(char *,int,int) defined in profile.c
      uses variable Alloc_info::file defined in profile.c
      uses variable Alloc_info::line defined in profile.c
      uses variable Alloc_info::size defined in profile.c
      uses function typed_rarrayalloc(region,size_t,size_t,type_t) defined in regions.c
   function profile_typed_rarrayextend(region,void *,size_t,size_t,type_t,char *,int) in line 214
      protection public
      6 lines of code
      7 parameters
      1 conditional paths
      uses function add_alloc(char *,int,int) defined in profile.c
      uses variable Alloc_info::file defined in profile.c
      uses variable Alloc_info::line defined in profile.c
      uses variable Alloc_info::size defined in profile.c
      uses function typed_rarrayextend(region,void *,size_t,size_t,type_t) defined in regions.c
   function profile_rstralloc(region,size_t,char *,int) in line 221
      protection public
      5 lines of code
      4 parameters
      1 conditional paths
      uses function add_alloc(char *,int,int) defined in profile.c
      uses variable Alloc_info::file defined in profile.c
      uses variable Alloc_info::line defined in profile.c
      uses variable Alloc_info::size defined in profile.c
      uses function rstralloc(region,size_t) defined in regions.c
   function profile_rstralloc0(region,size_t,char *,int) in line 227
      protection public
      5 lines of code
      4 parameters
      1 conditional paths
      uses function add_alloc(char *,int,int) defined in profile.c
      uses variable Alloc_info::file defined in profile.c
      uses variable Alloc_info::line defined in profile.c
      uses variable Alloc_info::size defined in profile.c
      uses function rstralloc0(region,size_t) defined in regions.c
   function profile_rstrdup(region,const char *,char *,int) in line 233
      protection public
      5 lines of code
      4 parameters
      1 conditional paths
      uses function add_alloc(char *,int,int) defined in profile.c
      uses variable Alloc_info::file defined in profile.c
      uses variable Alloc_info::line defined in profile.c
      uses function rstrdup(region,const char *) defined in regions.c
   function profile_rstrextend(region,const char *,size_t,char *,int) in line 239
      protection public
      6 lines of code
      5 parameters
      1 conditional paths
      uses function add_alloc(char *,int,int) defined in profile.c
      uses variable Alloc_info::file defined in profile.c
      uses variable Alloc_info::line defined in profile.c
      uses function rstrextend(region,const char *,size_t) defined in regions.c
   function profile_rstrextend0(region,const char *,size_t,char *,int) in line 246
      protection public
      6 lines of code
      5 parameters
      1 conditional paths
      uses function add_alloc(char *,int,int) defined in profile.c
      uses variable Alloc_info::file defined in profile.c
      uses variable Alloc_info::line defined in profile.c
      uses function rstrextend0(region,const char *,size_t) defined in regions.c
   function sort_list(list,int(*)(const void *, const void *)) in line 269
      protection public
      26 lines of code
      2 parameters
      4 conditional paths
      uses variable List::next defined in profile.c
      uses function newregion(void) defined in regions.c
      uses macro definition rarrayalloc defined in regions.h
      uses macro definition NULL defined in config.h
      uses function deleteregion(region) defined in regions.c
   function finfo_cmp(const void *,const void *) in line 308
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
      uses variable File_info::size defined in profile.c
   function print_finfos(void) in line 315
      protection public
      22 lines of code
      1 parameters
      2 conditional paths
      uses variable Alloc_info::size defined in profile.c
      uses variable File_info::sites defined in profile.c
      uses variable Alloc_info::calls defined in profile.c
      uses variable finfos defined in profile.c
      uses function sort_list(list,int(*)(const void *, const void *)) defined in profile.c
      uses function finfo_cmp(const void *,const void *) defined in profile.c
      uses variable out defined in profile.c
      uses variable File_info::next defined in profile.c
      uses variable File_info::size defined in profile.c
      uses variable File_info::calls defined in profile.c
      uses variable File_info::file defined in profile.c
   function ainfo_cmp(const void *,const void *) in line 338
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
      uses variable Alloc_info::size defined in profile.c
   function print_ainfos(void) in line 345
      protection public
      21 lines of code
      1 parameters
      2 conditional paths
      uses variable Alloc_info::size defined in profile.c
      uses variable Alloc_info::calls defined in profile.c
      uses variable ainfos defined in profile.c
      uses function sort_list(list,int(*)(const void *, const void *)) defined in profile.c
      uses function ainfo_cmp(const void *,const void *) defined in profile.c
      uses variable out defined in profile.c
      uses variable Alloc_info::next defined in profile.c
      uses variable Alloc_info::file defined in profile.c
      uses variable Alloc_info::line defined in profile.c
   function find_finfo(char *) in line 367
      protection public
      17 lines of code
      1 parameters
      3 conditional paths
      uses variable finfos defined in profile.c
      uses variable File_info::next defined in profile.c
      uses variable Alloc_info::file defined in profile.c
      uses variable File_info::file defined in profile.c
      uses macro definition ralloc defined in regions.h
      uses variable profile_region defined in profile.c
      uses variable File_info::size defined in profile.c
      uses variable File_info::calls defined in profile.c
      uses variable File_info::sites defined in profile.c
   function gather_finfo(void) in line 385
      protection public
      12 lines of code
      1 parameters
      10 conditional paths
      uses variable ainfos defined in profile.c
      uses variable Alloc_info::next defined in profile.c
      uses function find_finfo(char *) defined in profile.c
      uses variable Alloc_info::file defined in profile.c
      uses variable File_info::size defined in profile.c
      uses variable Alloc_info::size defined in profile.c
      uses variable File_info::calls defined in profile.c
      uses variable Alloc_info::calls defined in profile.c
      uses variable File_info::sites defined in profile.c
      uses function pfail(const char *) defined in profile.c
      uses variable filename defined in iquals.tab.c
      uses macro definition BUFSIZE defined in timer.c
      uses function sort_list(list,int(*)(const void *, const void *)) defined in profile.c
      uses variable out defined in profile.c
      uses macro definition REGION_PROFILE_DEPTH defined in profile.c
   function profile(void) in line 502
      protection public
      24 lines of code
      1 parameters
      3 conditional paths
      uses variable profile_region defined in profile.c
      uses macro definition NULL defined in config.h
      uses function gather_finfo(void) defined in profile.c
      uses variable out defined in profile.c
      uses function pfail(const char *) defined in profile.c
      uses function print_finfos(void) defined in profile.c
      uses function print_ainfos(void) defined in profile.c
   variable Alloc_info::calls in line 52
      protection public
   variable Alloc_info::file in line 49
      protection public
   variable Alloc_info::line in line 50
      protection public
   variable Alloc_info::next in line 48
      protection public
   variable Alloc_info::size in line 51
      protection public
   variable List::next in line 265
      protection public
   variable File_info::calls in line 302
      protection public
   variable File_info::file in line 300
      protection public
   variable File_info::next in line 299
      protection public
   variable File_info::sites in line 303
      protection public
   variable File_info::size in line 301
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cqual/cqual-0.981/src/libcompat/regions.c
module regions.c
   macro definition RPAGESIZE in line 45
      protection public
   macro definition PAGE_GROUP_SIZE in line 46
      protection public
   macro definition K in line 47
      protection public
   macro definition MAXPAGE in line 48
      protection public
   macro definition PAGENB in line 50
      protection public
   macro definition ALIGN in line 52
      protection public
   macro definition PALIGN in line 53
      protection public
   macro definition RALIGNMENT in line 59
      protection public
   macro definition PTRALIGNMENT in line 60
      protection public
   macro definition ALIGNMENT_LONG in line 61
      protection public
   macro definition preclear in line 102
      protection public
   macro definition postclear in line 103
      protection public
   typedef __rcintptr in line 64
      protection public
   variable nomem_h in line 83
      protection public
   variable zeroregion in line 83
      protection public
   variable rstart in line 132
      protection public
   variable out in line 333
      protection public
   function clear(void *,__rcintptr) in line 88
      protection public
      9 lines of code
      2 parameters
      2 conditional paths
   function nochildren(region) in line 109
      protection public
      5 lines of code
      1 parameters
      2 conditional paths
      uses variable Region::children defined in regions.c
   function unlink_region(region) in line 115
      protection public
      9 lines of code
      1 parameters
      2 conditional paths
      uses variable Region::parent defined in regions.c
      uses variable Region::children defined in regions.c
      uses variable Region::sibling defined in regions.c
   function link_region(region,region) in line 125
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
      uses variable Region::sibling defined in regions.c
      uses variable Region::parent defined in regions.c
      uses variable Region::children defined in regions.c
   function initregion(region) in line 134
      protection public
      17 lines of code
      1 parameters
      1 conditional paths
      uses variable rstart defined in regions.c
      uses variable Region::normal defined in regions.c
      uses variable allocator::page defined in regions.c
      uses variable ablock::base defined in regions.c
      uses variable ablock::allocfrom defined in regions.c
      uses variable allocator::superpage defined in regions.c
      uses macro definition K defined in regions.c
      uses macro definition RPAGESIZE defined in regions.c
      uses variable allocator::hyperpage defined in regions.c
      uses variable allocator::pages defined in regions.c
      uses function set_region(struct page *,int,region) defined in pages.c
   function newregion(void) in line 152
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function newsubregion(region) defined in regions.c
      uses variable zeroregion defined in regions.c
   function newsubregion(region) in line 157
      protection public
      19 lines of code
      1 parameters
      1 conditional paths
      uses function alloc_single_page(struct page *) defined in pages.c
      uses macro definition NULL defined in config.h
      uses macro definition preclear defined in regions.c
      uses variable page::pagecount defined in pages.c
      uses macro definition RPAGESIZE defined in regions.c
      uses variable rstart defined in regions.c
      uses macro definition K defined in regions.c
      uses variable page::previous defined in pages.c
      uses macro definition postclear defined in regions.c
      uses function initregion(region) defined in regions.c
      uses function link_region(region,region) defined in regions.c
   function typed_ralloc(region,size_t,type_t) in line 177
      protection public
      4 lines of code
      3 parameters
      1 conditional paths
      uses function rstralloc0(region,size_t) defined in regions.c
   function typed_rarrayextend(region,void *,size_t,size_t,type_t) in line 182
      protection public
      4 lines of code
      5 parameters
      1 conditional paths
      uses function rstrextend0(region,const char *,size_t) defined in regions.c
   function typed_rarrayalloc(region,size_t,size_t,type_t) in line 187
      protection public
      4 lines of code
      4 parameters
      1 conditional paths
      uses function typed_ralloc(region,size_t,type_t) defined in regions.c
   function rstralloc(region,size_t) in line 192
      protection public
      8 lines of code
      2 parameters
      1 conditional paths
      uses function qalloc(region,struct allocator *,void **,int,int,void **,int,int,int) defined in alloc.c
      uses variable Region::normal defined in regions.c
      uses macro definition RALIGNMENT defined in regions.c
   function rstralloc0(region,size_t) in line 201
      protection public
      9 lines of code
      2 parameters
      1 conditional paths
      uses function rstralloc(region,size_t) defined in regions.c
      uses function clear(void *,__rcintptr) defined in regions.c
   function rstrdup(region,const char *) in line 211
      protection public
      8 lines of code
      2 parameters
      1 conditional paths
      uses function rstralloc(region,size_t) defined in regions.c
   function internal_rstrextend(region,const char *,size_t,int) in line 220
      protection public
      31 lines of code
      4 parameters
      5 conditional paths
      uses function qalloc(region,struct allocator *,void **,int,int,void **,int,int,int) defined in alloc.c
      uses variable Region::normal defined in regions.c
      uses macro definition ALIGNMENT_LONG defined in regions.c
      uses macro definition RALIGNMENT defined in regions.c
      uses function clear(void *,__rcintptr) defined in regions.c
   function rstrextend(region,const char *,size_t) in line 252
      protection public
      4 lines of code
      3 parameters
      1 conditional paths
      uses function internal_rstrextend(region,const char *,size_t,int) defined in regions.c
   function rstrextend0(region,const char *,size_t) in line 257
      protection public
      4 lines of code
      3 parameters
      1 conditional paths
      uses function internal_rstrextend(region,const char *,size_t,int) defined in regions.c
   function typed_rarraycopy(void *,void *,size_t,size_t,type_t) in line 262
      protection public
      4 lines of code
      5 parameters
      1 conditional paths
   function delregion(region) in line 267
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function nochildren(region) defined in regions.c
      uses function free_all_pages(region,struct allocator *) defined in alloc.c
      uses variable Region::normal defined in regions.c
   function deleteregion(region) in line 273
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function unlink_region(region) defined in regions.c
      uses function delregion(region) defined in regions.c
   function deleteregion_ptr(region *) in line 279
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses macro definition NULL defined in config.h
      uses function deleteregion(region) defined in regions.c
   function deleteregion_array(int,region *) in line 287
      protection public
      13 lines of code
      2 parameters
      1 conditional paths
      uses function unlink_region(region) defined in regions.c
      uses function delregion(region) defined in regions.c
      uses macro definition NULL defined in config.h
   function regionof(void *) in line 301
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable __rcregionmap defined in pages.c
      uses macro definition RPAGELOG defined in regions.h
   function region_init(void) in line 306
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable rstart defined in regions.c
   function set_nomem_handler(nomem_handler) in line 312
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses variable nomem_h defined in regions.c
   function printref(void *) in line 335
      protection public
      13 lines of code
      1 parameters
      3 conditional paths
      uses variable __rcregionmap defined in pages.c
      uses macro definition MAXPAGE defined in regions.c
      uses variable out defined in regions.c
   function findrefs(region,void *,void *) in line 349
      protection public
      13 lines of code
      3 parameters
      1 conditional paths
      uses function f(char *) defined in taint-const-subtyping.c
      uses variable out defined in regions.c
      uses macro definition PALIGN defined in regions.c
      uses macro definition PTRALIGNMENT defined in regions.c
      uses function regionof(void *) defined in regions.c
      uses function printref(void *) defined in regions.c
      uses function findgrefs(region) defined in regions.h
      uses function findrefs(region,void *,void *) defined in regions.c
   function findrrefs(region,region) in line 372
      protection public
      10 lines of code
      2 parameters
      1 conditional paths
      uses variable Region::normal defined in regions.c
      uses variable allocator::pages defined in regions.c
      uses variable page::next defined in pages.c
      uses function findrefs(region,void *,void *) defined in regions.c
      uses variable page::previous defined in pages.c
      uses macro definition RPAGESIZE defined in regions.c
      uses variable allocator::bigpages defined in regions.c
      uses variable page::pagecount defined in pages.c
   variable ablock::allocfrom in line 67
      protection public
   variable ablock::base in line 67
      protection public
   variable allocator::bigpages in line 75
      protection public
   variable allocator::hyperpage in line 67
      protection public
   variable allocator::page in line 67
      protection public
   variable allocator::pages in line 74
      protection public
   variable allocator::superpage in line 67
      protection public
   variable Region::children in line 80
      protection public
   variable Region::normal in line 75
      protection public
   variable Region::parent in line 80
      protection public
   variable Region::sibling in line 80
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cqual/cqual-0.981/src/libcompat/regions.h
module regions.h
   macro definition RPAGELOG in line 41
      protection public
   macro definition rctypeof in line 54
      protection public
   macro definition ralloc in line 62
      protection public
   macro definition rarrayalloc in line 63
      protection public
   macro definition rarrayextend in line 64
      protection public
   macro definition rarraycopy in line 65
      protection public
   typedef region in line 43
      protection public
   typedef type_t in line 53
      protection public
   typedef nomem_handler in line 82
      protection public
   function region_init(void) in line 47
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
   function newregion(void) in line 50
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function newsubregion(region) defined in regions.c
      uses variable zeroregion defined in regions.c
   function newsubregion(region) in line 51
      protection public
      19 lines of code
      1 parameters
      2 conditional paths
      uses function alloc_single_page(struct page *) defined in pages.c
      uses macro definition NULL defined in config.h
      uses macro definition preclear defined in regions.c
      uses variable page::pagecount defined in pages.c
      uses macro definition RPAGESIZE defined in regions.c
      uses macro definition K defined in regions.c
      uses variable page::previous defined in pages.c
      uses macro definition postclear defined in regions.c
      uses function initregion(region) defined in regions.c
   function typed_ralloc(region,size_t,type_t) in line 57
      protection public
      4 lines of code
      3 parameters
      1 conditional paths
      uses function rstralloc0(region,size_t) defined in regions.c
   function typed_rarrayalloc(region,size_t,size_t,type_t) in line 58
      protection public
      4 lines of code
      4 parameters
      1 conditional paths
      uses function typed_ralloc(region,size_t,type_t) defined in regions.c
   function typed_rarrayextend(region,void *,size_t,size_t,type_t) in line 59
      protection public
      4 lines of code
      5 parameters
      1 conditional paths
      uses function rstrextend0(region,const char *,size_t) defined in regions.c
   function typed_rarraycopy(void *,void *,size_t,size_t,type_t) in line 60
      protection public
      4 lines of code
      5 parameters
      1 conditional paths
   function rstralloc(region,size_t) in line 67
      protection public
      8 lines of code
      2 parameters
      1 conditional paths
      uses function qalloc(region,struct allocator *,void **,int,int,void **,int,int,int) defined in alloc.c
      uses variable Region::normal defined in regions.c
      uses macro definition RALIGNMENT defined in regions.c
   function rstralloc0(region,size_t) in line 68
      protection public
      9 lines of code
      2 parameters
      1 conditional paths
      uses function rstralloc(region,size_t) defined in regions.c
   function rstrdup(region,const char *) in line 69
      protection public
      8 lines of code
      2 parameters
      1 conditional paths
      uses function rstralloc(region,size_t) defined in regions.c
   function rstrextend(region,const char *,size_t) in line 74
      protection public
      4 lines of code
      3 parameters
      1 conditional paths
   function rstrextend0(region,const char *,size_t) in line 75
      protection public
      4 lines of code
      3 parameters
      1 conditional paths
   function deleteregion(region) in line 77
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
   function deleteregion_ptr(region *) in line 78
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses macro definition NULL defined in config.h
      uses function deleteregion(region) defined in regions.c
   function deleteregion_array(int,region *) in line 79
      protection public
      13 lines of code
      2 parameters
      3 conditional paths
      uses macro definition NULL defined in config.h
   function regionof(void *) in line 80
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable __rcregionmap defined in pages.c
      uses macro definition RPAGELOG defined in regions.h
   function set_nomem_handler(nomem_handler) in line 83
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses variable nomem_h defined in regions.c
   function findrefs(region,void *,void *) in line 86
      protection public
      13 lines of code
      3 parameters
      4 conditional paths
      uses function f(char *) defined in taint-const-subtyping.c
      uses macro definition PALIGN defined in regions.c
      uses macro definition PTRALIGNMENT defined in regions.c
      uses function regionof(void *) defined in regions.c
      uses function findgrefs(region) defined in regions.h
      uses function findrefs(region,void *,void *) defined in regions.c
   function findgrefs(region) in line 87
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function findrrefs(region,region) in line 88
      protection public
      10 lines of code
      2 parameters
      3 conditional paths
      uses variable Region::normal defined in regions.c
      uses variable allocator::pages defined in regions.c
      uses variable page::next defined in pages.c
      uses function findrefs(region,void *,void *) defined in regions.c
      uses variable page::previous defined in pages.c
      uses macro definition RPAGESIZE defined in regions.c
      uses variable allocator::bigpages defined in regions.c
      uses variable page::pagecount defined in pages.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cqual/cqual-0.981/src/linkage.h
module linkage.h
   macro definition EXTERN_C in line 27
      protection public
   macro definition EXTERN_C_BEGIN in line 28
      protection public
   macro definition EXTERN_C_END in line 29
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cqual/cqual-0.981/src/location.c
module location.c
   function location_hash(location) in line 23
      protection public
      10 lines of code
      1 parameters
      1 conditional paths
      uses variable Location::lineno defined in location.h
      uses variable Location::filepos defined in location.h
      uses function string_hash(const char *) defined in containers.h
      uses variable Location::filename defined in location.h
   function location_eq(location,location) in line 34
      protection public
      7 lines of code
      2 parameters
      1 conditional paths
      uses variable Location::lineno defined in location.h
      uses variable Location::filepos defined in location.h
      uses variable Location::in_system_header defined in location.h
      uses variable Location::filename defined in location.h
   function location_cmp(location,location) in line 42
      protection public
      9 lines of code
      2 parameters
      2 conditional paths
      uses variable Location::filename defined in location.h
      uses variable Location::filepos defined in location.h
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cqual/cqual-0.981/src/location.h
module location.h
   typedef location in line 31
      protection public
   function location_hash(location) in line 33
      protection public
      10 lines of code
      1 parameters
      1 conditional paths
      uses variable Location::lineno defined in location.h
      uses variable Location::filepos defined in location.h
      uses function string_hash(const char *) defined in containers.h
      uses variable Location::filename defined in location.h
   function location_eq(location,location) in line 34
      protection public
      7 lines of code
      2 parameters
      1 conditional paths
      uses variable Location::lineno defined in location.h
      uses variable Location::filepos defined in location.h
      uses variable Location::in_system_header defined in location.h
      uses variable Location::filename defined in location.h
   function location_cmp(location,location) in line 35
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
      uses variable Location::filename defined in location.h
      uses variable Location::filepos defined in location.h
   variable Location::filename in line 27
      protection public
   variable Location::filepos in line 29
      protection public
   variable Location::in_system_header in line 30
      protection public
   variable Location::lineno in line 28
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cqual/cqual-0.981/src/main.c
module main.c
   typedef parsed_file in line 445
      protection public
   variable progname in line 52
      protection public
   variable copy_argc in line 55
      protection public
   variable copy_argv in line 56
      protection public
   variable in_prelude in line 60
      protection public
   variable num_hotspots in line 63
      protection public
   variable parsed_files in line 66
      protection public
   variable flag_volatile in line 71
      protection public
   variable flag_volatile_global in line 74
      protection public
   variable flag_syntax_only in line 77
      protection public
   variable flag_pedantic_errors in line 81
      protection public
   variable flag_pack_struct in line 84
      protection public
   variable inhibit_warnings in line 89
      protection public
   variable extra_warnings in line 92
      protection public
   variable warnings_are_errors in line 95
      protection public
   variable warn_unused in line 98
      protection public
   variable warn_uninitialized in line 101
      protection public
   variable warn_shadow in line 104
      protection public
   variable error_shadow in line 105
      protection public
   variable warn_switch in line 108
      protection public
   variable warn_return_type in line 112
      protection public
   variable warn_cast_align in line 117
      protection public
   variable warn_id_clash in line 121
      protection public
   variable id_clash_len in line 122
      protection public
   variable warn_larger_than in line 127
      protection public
   variable larger_than_size in line 128
      protection public
   variable warn_inline in line 131
      protection public
   variable warn_aggregate_return in line 135
      protection public
   variable dollars_in_ident in line 138
      protection public
   variable flag_cond_mismatch in line 142
      protection public
   variable flag_no_asm in line 145
      protection public
   variable warn_implicit in line 148
      protection public
   variable warn_write_strings in line 153
      protection public
   variable warn_pointer_arith in line 157
      protection public
   variable warn_strict_prototypes in line 160
      protection public
   variable warn_redundant_decls in line 164
      protection public
   variable warn_nested_externs in line 171
      protection public
   variable warn_cast_qual in line 175
      protection public
   variable warn_bad_function_cast in line 180
      protection public
   variable warn_traditional in line 183
      protection public
   variable warn_format in line 186
      protection public
   variable warn_char_subscripts in line 189
      protection public
   variable warn_conversion in line 192
      protection public
   variable warn_main in line 195
      protection public
   variable warn_multichar in line 198
      protection public
   variable flag_traditional in line 201
      protection public
   variable flag_allow_single_precision in line 205
      protection public
   variable warn_parentheses in line 208
      protection public
   variable warn_missing_braces in line 211
      protection public
   variable warn_sign_compare in line 214
      protection public
   variable mesg_implicit_function_declaration in line 218
      protection public
   variable pedantic in line 220
      protection public
   variable warn_implicit_int in line 223
      protection public
   variable warn_missing_prototypes in line 227
      protection public
   variable warn_missing_declarations in line 231
      protection public
   variable quiet_flag in line 235
      protection public
   variable flag_parse_only in line 238
      protection public
   variable flag_signed_char in line 241
      protection public
   variable flag_short_enums in line 244
      protection public
   variable flag_signed_bitfields in line 247
      protection public
   variable explicit_flag_signed_bitfields in line 248
      protection public
   variable flag_pam_mode in line 251
      protection public
   variable flag_pam_html in line 254
      protection public
   variable flag_strict_const in line 258
      protection public
   variable flag_print_results in line 261
      protection public
   variable flag_casts_preserve in line 264
      protection public
   variable flag_const_subtyping in line 268
      protection public
   variable flag_flow_sensitive in line 271
      protection public
   variable flag_force_flow_sensitive in line 275
      protection public
   variable flag_print_lin in line 279
      protection public
   variable flag_driver in line 283
      protection public
   variable flag_casts_warn in line 287
      protection public
   variable flag_ugly in line 291
      protection public
   variable flag_statistics in line 295
      protection public
   variable flag_print_stores in line 298
      protection public
   variable string in line 306
      protection public
   variable variable in line 306
      protection public
   variable on_value in line 306
      protection public
   variable f_options in line 328
      protection public
   variable lang_options in line 332
      protection public
   variable W_options in line 439
      protection public
   variable total_time in line 447
      protection public
   variable memusage in line 448
      protection public
   function pipe_closed(int) in line 452
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function fatal(const char *,...) defined in errors.c
   function pfatal_with_name(const char *) in line 460
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses variable progname defined in main.c
      uses variable parsed_file::name defined in main.c
      uses macro definition FATAL_EXIT_CODE defined in config.h
   function outofmemory(void) in line 467
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses macro definition FATAL_EXIT_CODE defined in config.h
   function add_program_files(const char *,dd_list) in line 473
      protection public
      28 lines of code
      2 parameters
      5 conditional paths
      uses function error(const char *,...) defined in errors.c
      uses macro definition NULL defined in config.h
      uses variable parsed_file::name defined in main.c
      uses function dd_add_last(region,dd_list,void *) defined in dd_list.c
      uses variable parse_region defined in c-parse.h
      uses function rstrdup(region,const char *) defined in regions.c
   function compile_file(char *) in line 504
      protection public
      60 lines of code
      1 parameters
      7 conditional paths
      uses variable parsed_file::name defined in main.c
      uses function pfatal_with_name(const char *) defined in main.c
      uses function xmalloc(size_t) defined in utils.c
      uses function set_nomem_handler(nomem_handler) defined in regions.c
      uses function outofmemory(void) defined in main.c
      uses function set_input(FILE *,char *) defined in input.c
      uses function init_lex(void) defined in c-lex.c
      uses function init_semantics(void) defined in semantics.c
      uses macro definition yyparse defined in lattice-parse.tab.c
      uses variable errorcount defined in errors.c
      uses variable the_program defined in AST.c
      uses macro definition ralloc defined in regions.h
      uses variable parse_region defined in c-parse.h
      uses variable parsed_file::program defined in main.c
      uses function dd_add_last(region,dd_list,void *) defined in dd_list.c
      uses variable parsed_files defined in main.c
      uses function analyze(declaration) defined in analyze.c
   function c_decode_option(char *) in line 566
      protection public
      165 lines of code
      1 parameters
      67 conditional paths
      uses variable flag_traditional defined in main.c
      uses variable flag_allow_single_precision defined in main.c
      uses variable dollars_in_ident defined in main.c
      uses variable flag_signed_char defined in main.c
      uses variable flag_signed_bitfields defined in main.c
      uses variable explicit_flag_signed_bitfields defined in main.c
      uses variable flag_short_enums defined in main.c
      uses variable flag_cond_mismatch defined in main.c
      uses variable flag_no_asm defined in main.c
      uses variable mesg_implicit_function_declaration defined in main.c
      uses variable warn_implicit_int defined in main.c
      uses variable warn_write_strings defined in main.c
      uses variable warn_cast_qual defined in main.c
      uses variable warn_bad_function_cast defined in main.c
      uses variable warn_pointer_arith defined in main.c
      uses variable warn_strict_prototypes defined in main.c
      uses variable warn_missing_prototypes defined in main.c
      uses variable warn_missing_declarations defined in main.c
      uses variable warn_redundant_decls defined in main.c
      uses variable warn_nested_externs defined in main.c
      uses variable warn_traditional defined in main.c
      uses variable warn_format defined in main.c
      uses variable warn_char_subscripts defined in main.c
      uses variable warn_conversion defined in main.c
      uses variable warn_parentheses defined in main.c
      uses variable warn_return_type defined in main.c
      uses variable warn_missing_braces defined in main.c
      uses variable warn_main defined in main.c
      uses variable warn_sign_compare defined in main.c
      uses variable warn_multichar defined in main.c
      uses variable warn_uninitialized defined in main.c
      uses variable warn_unused defined in main.c
      uses variable warn_switch defined in main.c
   function main(int,char **) in line 736
      protection public
      394 lines of code
      2 parameters
      64 conditional paths
      uses macro definition NULL defined in config.h
      uses variable total_time defined in main.c
      uses function start_timer(timer *) defined in timer.c
      uses function region_init(void) defined in regions.c
      uses variable parse_region defined in c-parse.h
      uses function newregion(void) defined in regions.c
      uses variable in_prelude defined in main.c
      uses macro definition FALSE defined in bool.h
      uses variable num_hotspots defined in main.c
      uses variable parsed_files defined in main.c
      uses function dd_new_list(region) defined in dd_list.c
      uses variable copy_argc defined in main.c
      uses variable copy_argv defined in main.c
      uses function xmalloc(size_t) defined in utils.c
      uses variable progname defined in main.c
      uses function pipe_closed(int) defined in main.c
      uses macro definition TRUE defined in bool.h
      uses variable lang_options defined in main.c
      uses function c_decode_option(char *) defined in main.c
      uses variable f_options defined in main.c
      uses variable pedantic defined in main.c
      uses variable flag_pedantic_errors defined in main.c
      uses variable quiet_flag defined in main.c
      uses variable inhibit_warnings defined in main.c
      uses variable extra_warnings defined in main.c
      uses variable warn_uninitialized defined in main.c
      uses variable W_options defined in main.c
      uses function error(const char *,...) defined in errors.c
      uses variable warn_id_clash defined in main.c
      uses variable id_clash_len defined in main.c
      uses variable warn_larger_than defined in main.c
      uses variable larger_than_size defined in main.c
      uses function dd_add_last(region,dd_list,void *) defined in dd_list.c
      uses function rstrdup(region,const char *) defined in regions.c
      uses function add_program_files(const char *,dd_list) defined in main.c
      uses macro definition FATAL_EXIT_CODE defined in config.h
      uses variable flag_casts_preserve defined in main.c
      uses variable flag_flow_sensitive defined in main.c
      uses function init_types(void) defined in types.c
      uses function cval_init(void) defined in cval.c
      uses function init_effects(void) defined in effect.c
      uses function init_qtype(void) defined in qtype.c
      uses function init_quals(void) defined in quals.c
      uses function init_qerror(void) defined in qerror.c
      uses function init_store(void) defined in effect.c
      uses function load_config_file_quals(const char *) defined in cqual.h
      uses variable const_qual defined in quals.c
      uses function begin_po_qual(void) defined in quals.c
      uses function add_qual(const char *) defined in quals.c
      uses function add_level_qual(qual,level_qual_t) defined in quals.c
      uses enumvalue level_ref defined in quals.h
      uses function set_po_nonprop(void) defined in quals.c
      uses function end_po_qual(void) defined in quals.c
      uses variable volatile_qual defined in quals.c
      uses function add_sign_qual(qual,sign_qual_t) defined in quals.c
      uses enumvalue sign_eq defined in quals.h
      uses variable noreturn_qual defined in quals.c
      uses enumvalue level_value defined in quals.h
      uses function end_define_pos(void) defined in quals.c
      uses function init_pam(void) defined in pam.c
      uses function init_analyze(void) defined in analyze.c
      uses variable found_fs_qual defined in quals.c
      uses macro definition dd_scan defined in dd_list.h
      uses macro definition DD_GET defined in dd_list.h
      uses function compile_file(char *) defined in main.c
      uses macro definition dd_is_empty defined in dd_list.h
      uses variable errorcount defined in errors.c
      uses function finish_analyze(void) defined in analyze.c
      uses variable flag_force_flow_sensitive defined in main.c
      uses function init_flow_sensitive(void) defined in flow.c
      uses variable parsed_file::name defined in main.c
      uses function analyze_flow_sensitive(declaration) defined in flow.c
      uses variable parsed_file::program defined in main.c
      uses function finish_flow_sensitive(void) defined in flow.c
      uses function finish_quals(void) defined in quals.c
      uses function end_timer(timer *) defined in timer.c
      uses variable flag_statistics defined in main.c
      uses variable memusage defined in main.c
      uses function get_memusage(void) defined in usage.c
      uses variable flag_print_results defined in main.c
      uses function print_results(void) defined in iquals.tab.c
      uses variable flag_pam_mode defined in main.c
      uses function enter_pam_mode(void) defined in pam.c
      uses function timer_to_ascii(timer *) defined in timer.c
      uses macro definition SUCCESS_EXIT_CODE defined in config.h
   variable @29::on_value in line 306
      protection public
   variable @29::string in line 306
      protection public
   variable @29::variable in line 306
      protection public
   variable @30::on_value in line 429
      protection public
   variable @30::string in line 429
      protection public
   variable @30::variable in line 429
      protection public
   variable parsed_file::name in line 443
      protection public
   variable parsed_file::program in line 444
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cqual/cqual-0.981/src/mbchar.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cqual/cqual-0.981/src/mbchar.h
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cqual/cqual-0.981/src/pam.c
module pam.c
   macro definition BUF_MAX in line 36
      protection public
   macro definition pam_printf in line 191
      protection public
   macro definition pam_vprintf in line 192
      protection public
   macro definition pam_putc in line 193
      protection public
   macro definition pam_getc in line 194
      protection public
   macro definition pam_window_buffer_msg in line 196
      protection public
   macro definition pam_window_file_msg in line 197
      protection public
   macro definition pam_click_msg in line 198
      protection public
   macro definition pam_shift_click_msg in line 199
      protection public
   macro definition mkpam_buffer_op in line 266
      protection public
   macro definition mkpam_file_op in line 269
      protection public
   macro definition pam_any_click in line 493
      protection public
   macro definition pam_about_buffer in line 548
      protection public
   macro definition pam_about_click in line 549
      protection public
   macro definition pam_home_click in line 550
      protection public
   macro definition pam_hotspots_buffer in line 603
      protection public
   macro definition pam_hotspots_click in line 604
      protection public
   macro definition pam_undefineds_buffer in line 654
      protection public
   macro definition pam_undefineds_click in line 655
      protection public
   macro definition pam_varargs_buffer in line 656
      protection public
   macro definition pam_varargs_click in line 657
      protection public
   macro definition pam_results_buffer in line 785
      protection public
   macro definition pam_type_buffer in line 786
      protection public
   enumeration overlay_kind in line 47
      protection public
   enumeration pam_op_kind in line 241
      protection public
   enumeration kind_globals in line 660
      protection public
   typedef click_func in line 38
      protection public
   typedef pam_error in line 87
      protection public
   typedef ddecl_pred in line 662
      protection public
   typedef pred_info in line 668
      protection public
   typedef pred_info2 in line 742
      protection public
   variable pam_region in line 95
      protection public
   variable buffer_clicks in line 96
      protection public
   variable pam_files in line 97
      protection public
   variable pam_errors in line 98
      protection public
   variable next_link in line 99
      protection public
   variable pam_vprintf_scratch_buf in line 100
      protection public
   variable last_printed in line 878
      protection public
   variable num_pos in line 879
      protection public
   variable num_neg in line 879
      protection public
   variable num_eq in line 879
      protection public
   enumvalue overlay_qtype in line 47
      protection public
   enumvalue overlay_fs_qtype in line 48
      protection public
   enumvalue overlay_lin in line 49
      protection public
   enumvalue overlay_anchor in line 50
      protection public
   enumvalue pam_clear_window in line 241
      protection public
   enumvalue pam_change_window in line 241
      protection public
   enumvalue pam_set_lower_window in line 241
      protection public
   enumvalue pam_set_upper_window in line 242
      protection public
   enumvalue pam_close_window in line 242
      protection public
   enumvalue pam_split_window in line 243
      protection public
   enumvalue undefined_globals in line 660
      protection public
   enumvalue varargs_globals in line 660
      protection public
   function init_pam(void) in line 103
      protection public
      12 lines of code
      1 parameters
      1 conditional paths
      uses variable pam_vprintf_scratch_buf defined in pam.c
      uses macro definition NULL defined in config.h
      uses variable pam_region defined in pam.c
      uses function deleteregion(region) defined in regions.c
      uses function newregion(void) defined in regions.c
      uses variable buffer_clicks defined in pam.c
      uses variable pam_files defined in pam.c
      uses variable pam_errors defined in pam.c
      uses function dd_new_list(region) defined in dd_list.c
      uses variable next_link defined in pam.c
      uses function growbuf_new(region,int) defined in buffer.c
      uses function pam_jump_file(const char *,const char *,const char *,location) defined in pam.c
      uses function get_next_link(void) defined in pam.c
      uses function pam_clear_buffer(const char *) defined in pam.c
      uses function pam_change_buffer(const char *) defined in pam.c
      uses function pam_set_lower_buffer(const char *) defined in pam.c
      uses function pam_set_upper_buffer(const char *) defined in pam.c
      uses function pam_close_buffer(const char *) defined in pam.c
      uses function pam_split_buffer(const char *) defined in pam.c
      uses function pam_goto_char_buffer(const char *,unsigned long) defined in pam.c
      uses function pam_goto_anchor_buffer(const char *,const char *) defined in pam.c
      uses function pam_clear_file(const char *) defined in pam.c
      uses function pam_change_file(const char *) defined in pam.c
      uses function pam_set_lower_file(const char *) defined in pam.c
      uses function pam_set_upper_file(const char *) defined in pam.c
      uses function pam_close_file(const char *) defined in pam.c
      uses function pam_split_file(const char *) defined in pam.c
      uses function pam_goto_char_file(const char *,unsigned long) defined in pam.c
      uses function pam_goto_anchor_file(const char *,const char *) defined in pam.c
      uses function pam_waiting(void) defined in pam.c
      uses function pam_debug(const char *,...) defined in pam.c
      uses function pam_message(const char *,...) defined in pam.c
      uses function pam_default_path(const char *) defined in pam.c
      uses function pam_blobs_begin(void) defined in pam.c
      uses function pam_blobs_end(void) defined in pam.c
      uses function pam_overlays_begin(void) defined in pam.c
      uses function pam_overlays_end(void) defined in pam.c
      uses function pam_markup_file(const char *) defined in pam.c
      uses function f(char *) defined in taint-const-subtyping.c
      uses function pam_markup_buffer(const char *) defined in pam.c
      uses function pam_add_text(const char *,...) defined in pam.c
      uses function pam_add_link(const char *,const char *,const char *) defined in pam.c
      uses function pam_add_marked_text(const char *,const char *) defined in pam.c
      uses function pam_add_overlink(const char *,const char *,int,int) defined in pam.c
      uses function pam_add_overlink_anchor(const char *,const char *,const char *,int,int) defined in pam.c
      uses function pam_add_overmark(const char *,int,int) defined in pam.c
   function pam_jump_file(const char *,const char *,const char *,location) in line 121
      protection public
      18 lines of code
      4 parameters
      2 conditional paths
      uses function f(char *) defined in taint-const-subtyping.c
      uses function pam_load_file(const char *,const char *,const char *,char *) defined in pam.c
      uses macro definition pam_click_msg defined in pam.c
      uses variable Location::filename defined in location.h
      uses variable flag_pam_html defined in flags.h
      uses macro definition insist defined in utils.h
      uses variable pam_files defined in pam.c
      uses function pam_goto_anchor_file(const char *,const char *) defined in pam.c
      uses function ptr_to_ascii(void *) defined in utils.c
      uses function pam_goto_char_file(const char *,unsigned long) defined in pam.c
      uses variable Location::filepos defined in location.h
   function get_next_link(void) in line 123
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function inttostr(region,int) defined in utils.c
      uses variable pam_region defined in pam.c
      uses variable next_link defined in pam.c
   function pam_clear_buffer(const char *) in line 131
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function pam_change_buffer(const char *) in line 132
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function pam_set_lower_buffer(const char *) in line 133
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function pam_set_upper_buffer(const char *) in line 134
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function pam_close_buffer(const char *) in line 135
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function pam_split_buffer(const char *) in line 136
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function pam_goto_char_buffer(const char *,unsigned long) in line 137
      protection public
      8 lines of code
      2 parameters
      1 conditional paths
      uses macro definition pam_printf defined in pam.c
      uses function pam_print_escaped_string(const char *) defined in pam.c
      uses macro definition pam_putc defined in pam.c
      uses macro definition pam_window_buffer_msg defined in pam.c
   function pam_goto_anchor_buffer(const char *,const char *) in line 139
      protection public
      10 lines of code
      2 parameters
      1 conditional paths
      uses macro definition pam_printf defined in pam.c
      uses function pam_print_escaped_string(const char *) defined in pam.c
      uses macro definition pam_putc defined in pam.c
      uses macro definition pam_window_buffer_msg defined in pam.c
   function pam_clear_file(const char *) in line 142
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function pam_change_file(const char *) in line 143
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function pam_set_lower_file(const char *) in line 144
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function pam_set_upper_file(const char *) in line 145
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function pam_close_file(const char *) in line 146
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function pam_split_file(const char *) in line 147
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function pam_goto_char_file(const char *,unsigned long) in line 148
      protection public
      8 lines of code
      2 parameters
      1 conditional paths
      uses macro definition pam_printf defined in pam.c
      uses function pam_print_escaped_string(const char *) defined in pam.c
      uses macro definition pam_putc defined in pam.c
      uses macro definition pam_window_file_msg defined in pam.c
   function pam_goto_anchor_file(const char *,const char *) in line 149
      protection public
      10 lines of code
      2 parameters
      1 conditional paths
      uses macro definition pam_printf defined in pam.c
      uses function pam_print_escaped_string(const char *) defined in pam.c
      uses macro definition pam_putc defined in pam.c
      uses macro definition pam_window_file_msg defined in pam.c
   function pam_waiting(void) in line 151
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses macro definition pam_printf defined in pam.c
   function pam_debug(const char *,...) in line 154
      protection public
      9 lines of code
      2 parameters
      1 conditional paths
      uses macro definition pam_printf defined in pam.c
      uses function pam_vprintf_escaped(const char *,va_list) defined in pam.c
   function pam_message(const char *,...) in line 155
      protection public
      11 lines of code
      2 parameters
      1 conditional paths
      uses variable count defined in qtype.c
      uses macro definition pam_printf defined in pam.c
      uses function pam_vprintf_escaped(const char *,va_list) defined in pam.c
   function pam_default_path(const char *) in line 156
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses macro definition pam_printf defined in pam.c
      uses function pam_print_escaped_string(const char *) defined in pam.c
   function pam_blobs_begin(void) in line 158
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses macro definition pam_printf defined in pam.c
   function pam_blobs_end(void) in line 159
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses macro definition pam_printf defined in pam.c
   function pam_overlays_begin(void) in line 160
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses macro definition pam_printf defined in pam.c
   function pam_overlays_end(void) in line 161
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses macro definition pam_printf defined in pam.c
   function pam_markup_file(const char *) in line 163
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses macro definition pam_printf defined in pam.c
      uses function pam_print_escaped_string(const char *) defined in pam.c
      uses macro definition pam_window_file_msg defined in pam.c
   function pam_markup_buffer(const char *) in line 164
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses macro definition pam_printf defined in pam.c
      uses function pam_print_escaped_string(const char *) defined in pam.c
      uses macro definition pam_window_buffer_msg defined in pam.c
   function pam_add_text(const char *,...) in line 168
      protection public
      11 lines of code
      2 parameters
      1 conditional paths
      uses macro definition pam_printf defined in pam.c
      uses function pam_vprintf_escaped(const char *,va_list) defined in pam.c
   function pam_add_link(const char *,const char *,const char *) in line 172
      protection public
      4 lines of code
      3 parameters
      1 conditional paths
      uses function pam_add_hyper(const char *,int,int,const char *,const char *) defined in pam.c
   function pam_add_marked_text(const char *,const char *) in line 175
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function pam_add_markup(int,int,const char *,const char *) defined in pam.c
   function pam_add_overlink(const char *,const char *,int,int) in line 181
      protection public
      4 lines of code
      4 parameters
      1 conditional paths
      uses function pam_add_hyper(const char *,int,int,const char *,const char *) defined in pam.c
   function pam_add_overlink_anchor(const char *,const char *,const char *,int,int) in line 183
      protection public
      5 lines of code
      5 parameters
      1 conditional paths
      uses function pam_add_hyper_anchor(const char *,const char *,int,int,const char *,const char *) defined in pam.c
   function pam_add_overmark(const char *,int,int) in line 187
      protection public
      4 lines of code
      3 parameters
      1 conditional paths
      uses function pam_add_markup(int,int,const char *,const char *) defined in pam.c
   function pam_print_escaped_string(const char *) in line 202
      protection public
      24 lines of code
      1 parameters
      6 conditional paths
      uses variable count defined in qtype.c
      uses macro definition pam_putc defined in pam.c
      uses macro definition pam_printf defined in pam.c
      uses function fail(const char *,...) defined in utils.c
   function pam_vprintf_escaped(const char *,va_list) in line 227
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
      uses function growbuf_reset(growbuf) defined in buffer.c
      uses variable pam_vprintf_scratch_buf defined in pam.c
      uses function gvprintf(growbuf,const char *,va_list) defined in buffer.c
      uses function pam_print_escaped_string(const char *) defined in pam.c
      uses function growbuf_contents(growbuf) defined in buffer.c
   function pam_printf_escaped(const char *,...) in line 234
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
      uses function pam_vprintf_escaped(const char *,va_list) defined in pam.c
   function pam_window_op(pam_op_kind,const char *,const char *) in line 245
      protection public
      20 lines of code
      3 parameters
      7 conditional paths
      uses macro definition pam_putc defined in pam.c
      uses enumvalue pam_clear_window defined in pam.c
      uses macro definition pam_printf defined in pam.c
      uses enumvalue pam_change_window defined in pam.c
      uses enumvalue pam_set_lower_window defined in pam.c
      uses enumvalue pam_set_upper_window defined in pam.c
      uses enumvalue pam_close_window defined in pam.c
      uses enumvalue pam_split_window defined in pam.c
      uses function fail(const char *,...) defined in utils.c
      uses function pam_print_escaped_string(const char *) defined in pam.c
   function mkpam_buffer_op(clear) in line 272
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function mkpam_buffer_op(change) in line 273
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function mkpam_buffer_op(set_lower) in line 274
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function mkpam_buffer_op(set_upper) in line 275
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function mkpam_buffer_op(close) in line 276
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function mkpam_buffer_op(split) in line 277
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function mkpam_file_op(clear) in line 278
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function mkpam_file_op(change) in line 279
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function mkpam_file_op(set_lower) in line 280
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function mkpam_file_op(set_upper) in line 281
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function mkpam_file_op(close) in line 282
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function mkpam_file_op(split) in line 283
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function pam_add_markup(int,int,const char *,const char *) in line 415
      protection public
      6 lines of code
      4 parameters
      1 conditional paths
      uses macro definition pam_printf defined in pam.c
      uses function pam_print_escaped_string(const char *) defined in pam.c
   function pam_add_hyper(const char *,int,int,const char *,const char *) in line 422
      protection public
      9 lines of code
      5 parameters
      1 conditional paths
      uses macro definition pam_printf defined in pam.c
      uses function pam_print_escaped_string(const char *) defined in pam.c
   function pam_add_hyper_anchor(const char *,const char *,int,int,const char *,const char *) in line 432
      protection public
      12 lines of code
      6 parameters
      1 conditional paths
      uses macro definition pam_printf defined in pam.c
      uses function pam_print_escaped_string(const char *) defined in pam.c
   function pam_add_anchor(const char *,int,int) in line 445
      protection public
      5 lines of code
      3 parameters
      1 conditional paths
      uses macro definition pam_printf defined in pam.c
      uses function pam_print_escaped_string(const char *) defined in pam.c
   function pam_add_buffer_click(const char *,const char *,click_func,void *) in line 498
      protection public
      18 lines of code
      4 parameters
      2 conditional paths
      uses variable buffer_clicks defined in pam.c
      uses variable pam_region defined in pam.c
      uses macro definition insist defined in utils.h
      uses macro definition ralloc defined in regions.h
      uses variable Click::func defined in pam.c
      uses variable Click::arg defined in pam.c
   function pam_remove_buffer_click(const char *,const char *) in line 519
      protection public
      7 lines of code
      2 parameters
      1 conditional paths
      uses macro definition insist defined in utils.h
      uses variable buffer_clicks defined in pam.c
   function pam_get_buffer_click(const char *,const char *) in line 529
      protection public
      12 lines of code
      2 parameters
      3 conditional paths
      uses variable buffer_clicks defined in pam.c
      uses macro definition NULL defined in config.h
      uses macro definition pam_any_click defined in pam.c
   function pam_create_about_buffer(void) in line 553
      protection public
      29 lines of code
      1 parameters
      1 conditional paths
      uses function pam_clear_buffer(const char *) defined in pam.c
      uses macro definition pam_about_buffer defined in pam.c
      uses function pam_blobs_begin(void) defined in pam.c
      uses function pam_markup_buffer(const char *) defined in pam.c
      uses function pam_add_text(const char *,...) defined in pam.c
      uses function pam_add_link(const char *,const char *,const char *) defined in pam.c
      uses macro definition pam_home_click defined in pam.c
      uses macro definition pam_color_6 defined in color.h
      uses function pam_blobs_end(void) defined in pam.c
   function pam_about_click_func(const char *,const char *,const char *,void *) in line 584
      protection public
      8 lines of code
      4 parameters
      1 conditional paths
      uses function pam_close_buffer(const char *) defined in pam.c
      uses macro definition pam_about_buffer defined in pam.c
      uses function pam_set_upper_buffer(const char *) defined in pam.c
      uses function pam_change_buffer(const char *) defined in pam.c
      uses function pam_create_about_buffer(void) defined in pam.c
      uses function pam_qual_click_func(const char *,const char *,const char *,void *) defined in pam.c
      uses variable Click::arg defined in pam.c
      uses function pam_add_qual_link(qual,const char *) defined in pam.c
   function pam_qual_click_func(const char *,const char *,const char *,void *) in line 599
      protection public
      10 lines of code
      4 parameters
      3 conditional paths
      uses macro definition pam_click_msg defined in pam.c
      uses function pam_qual_mouse_2_click_func(const char *,const char *,void *) defined in pam.c
      uses variable Click::arg defined in pam.c
      uses macro definition pam_shift_click_msg defined in pam.c
      uses function pam_qual_shift_mouse_2_click_func(const char *,const char *,void *) defined in pam.c
      uses function fail(const char *,...) defined in utils.c
   function pam_add_qual_link(qual,const char *) in line 601
      protection public
      15 lines of code
      2 parameters
      3 conditional paths
      uses function name_qual(qual) defined in quals.c
      uses function color_qual(qual) defined in quals.c
      uses macro definition pam_color_noqual defined in color.h
      uses function variable_qual(qual) defined in quals.c
      uses function pam_add_link(const char *,const char *,const char *) defined in pam.c
      uses function constant_qual(qual) defined in quals.c
      uses function pam_add_marked_text(const char *,const char *) defined in pam.c
   function pam_create_hotspots_buffer(void) in line 606
      protection public
      22 lines of code
      1 parameters
      2 conditional paths
      uses function pam_clear_buffer(const char *) defined in pam.c
      uses macro definition pam_hotspots_buffer defined in pam.c
      uses function pam_blobs_begin(void) defined in pam.c
      uses function pam_markup_buffer(const char *) defined in pam.c
      uses function pam_add_text(const char *,...) defined in pam.c
      uses variable num_hotspots defined in main.c
      uses variable hotspots defined in quals.c
      uses macro definition NULL defined in config.h
      uses function pam_add_qual_link(qual,const char *) defined in pam.c
      uses function unique_name_qual(qual) defined in quals.c
      uses function error_count_qual(qual) defined in quals.c
      uses function pam_blobs_end(void) defined in pam.c
      uses function pam_add_buffer_click(const char *,const char *,click_func,void *) defined in pam.c
      uses macro definition pam_any_click defined in pam.c
      uses function pam_qual_click_func(const char *,const char *,const char *,void *) defined in pam.c
   function pam_hotspots_click_func(const char *,const char *,const char *,void *) in line 630
      protection public
      8 lines of code
      4 parameters
      1 conditional paths
      uses function pam_close_buffer(const char *) defined in pam.c
      uses macro definition pam_hotspots_buffer defined in pam.c
      uses function pam_set_lower_buffer(const char *) defined in pam.c
      uses function pam_change_buffer(const char *) defined in pam.c
      uses function pam_create_hotspots_buffer(void) defined in pam.c
   function exist_hotspots(void) in line 640
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable hotspots defined in quals.c
   function pam_markup_global(data_declaration,void *) in line 671
      protection public
      15 lines of code
      2 parameters
      2 conditional paths
      uses variable Click::arg defined in pam.c
      uses variable pred_info::pred defined in pam.c
      uses variable pred_info::store defined in pam.c
      uses function pam_add_link(const char *,const char *,const char *) defined in pam.c
      uses variable data_declaration::name defined in decls.h
      uses macro definition pam_color_1 defined in color.h
      uses function pam_add_text(const char *,...) defined in pam.c
      uses function pam_add_buffer_click(const char *,const char *,click_func,void *) defined in pam.c
      uses variable pred_info::buffer defined in pam.c
      uses function pam_jump_file(const char *,const char *,const char *,location) defined in pam.c
      uses function location_declaration(declaration) defined in analyze.c
      uses variable data_declaration::ast defined in decls.h
   function pam_create_globals_buffer(kind_globals) in line 688
      protection public
      29 lines of code
      1 parameters
      3 conditional paths
      uses enumvalue undefined_globals defined in pam.c
      uses variable pred_info::pred defined in pam.c
      uses function is_undefined_global(data_declaration,store) defined in analyze.c
      uses variable pred_info::buffer defined in pam.c
      uses macro definition pam_undefineds_buffer defined in pam.c
      uses variable pred_info::store defined in pam.c
      uses variable global_store defined in flow.c
      uses enumvalue varargs_globals defined in pam.c
      uses function is_unannotated_global(data_declaration,store) defined in analyze.c
      uses macro definition pam_varargs_buffer defined in pam.c
      uses function fail(const char *,...) defined in utils.c
      uses function pam_clear_buffer(const char *) defined in pam.c
      uses function pam_blobs_begin(void) defined in pam.c
      uses function pam_markup_buffer(const char *) defined in pam.c
      uses function pam_add_text(const char *,...) defined in pam.c
      uses function traverse_globals(void(*)(data_declaration, void *),void *) defined in analyze.c
      uses function pam_markup_global(data_declaration,void *) defined in pam.c
      uses function pam_blobs_end(void) defined in pam.c
   function pam_undefineds_click_func(const char *,const char *,const char *,void *) in line 719
      protection public
      8 lines of code
      4 parameters
      1 conditional paths
      uses function pam_close_buffer(const char *) defined in pam.c
      uses macro definition pam_undefineds_buffer defined in pam.c
      uses function pam_set_lower_buffer(const char *) defined in pam.c
      uses function pam_change_buffer(const char *) defined in pam.c
      uses function pam_create_globals_buffer(kind_globals) defined in pam.c
      uses enumvalue undefined_globals defined in pam.c
   function pam_varargs_click_func(const char *,const char *,const char *,void *) in line 729
      protection public
      8 lines of code
      4 parameters
      1 conditional paths
      uses function pam_close_buffer(const char *) defined in pam.c
      uses macro definition pam_varargs_buffer defined in pam.c
      uses function pam_set_lower_buffer(const char *) defined in pam.c
      uses function pam_change_buffer(const char *) defined in pam.c
      uses function pam_create_globals_buffer(kind_globals) defined in pam.c
      uses enumvalue varargs_globals defined in pam.c
   function set_if_pred(data_declaration,void *) in line 746
      protection public
      8 lines of code
      2 parameters
      2 conditional paths
      uses variable Click::arg defined in pam.c
      uses variable pred_info2::pred defined in pam.c
      uses variable pred_info2::store defined in pam.c
      uses variable pred_info2::flag defined in pam.c
      uses macro definition TRUE defined in bool.h
   function exist_globals(ddecl_pred) in line 756
      protection public
      10 lines of code
      1 parameters
      1 conditional paths
      uses variable pred_info2::pred defined in pam.c
      uses variable pred_info2::flag defined in pam.c
      uses macro definition FALSE defined in bool.h
      uses variable pred_info2::store defined in pam.c
      uses variable global_store defined in flow.c
      uses function traverse_globals(void(*)(data_declaration, void *),void *) defined in analyze.c
      uses function set_if_pred(data_declaration,void *) defined in pam.c
   function exist_undefineds(void) in line 768
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function exist_globals(ddecl_pred) defined in pam.c
      uses function is_undefined_global(data_declaration,store) defined in analyze.c
   function exist_varargs(void) in line 774
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function exist_globals(ddecl_pred) defined in pam.c
      uses function is_unannotated_global(data_declaration,store) defined in analyze.c
   function pam_qtype_click_func(const char *,const char *,const char *,void *) in line 788
      protection public
      51 lines of code
      4 parameters
      6 conditional paths
      uses function pam_message(const char *,...) defined in pam.c
      uses function pam_close_buffer(const char *) defined in pam.c
      uses macro definition pam_type_buffer defined in pam.c
      uses function pam_set_lower_buffer(const char *) defined in pam.c
      uses function pam_change_buffer(const char *) defined in pam.c
      uses function pam_clear_buffer(const char *) defined in pam.c
      uses function pam_add_buffer_click(const char *,const char *,click_func,void *) defined in pam.c
      uses macro definition pam_any_click defined in pam.c
      uses function pam_qual_click_func(const char *,const char *,const char *,void *) defined in pam.c
      uses macro definition NULL defined in config.h
      uses function pam_blobs_begin(void) defined in pam.c
      uses function pam_markup_buffer(const char *) defined in pam.c
      uses variable Overlay::kind defined in pam.c
      uses enumvalue overlay_qtype defined in pam.c
      uses enumvalue overlay_fs_qtype defined in pam.c
      uses function pam_add_text(const char *,...) defined in pam.c
      uses variable Overlay::name defined in pam.c
      uses function print_qtype_qf(printf_func,pr_qual_fn,qtype,store,bool) defined in qtype.c
      uses function pam_quals_printf(printf_func,qual) defined in pam.c
      uses variable Overlay::qtype defined in pam.c
      uses macro definition FALSE defined in bool.h
      uses variable Overlay::fs_qtype defined in pam.c
      uses variable Overlay::store defined in pam.c
      uses enumvalue overlay_lin defined in pam.c
      uses function lin_from_store(store,aloc) defined in effect.c
      uses variable Overlay::aloc defined in pam.c
      uses function pam_blobs_end(void) defined in pam.c
   function pam_quals_printf(printf_func,qual) in line 813
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses function pam_add_text(const char *,...) defined in pam.c
      uses function pam_add_qual_link(qual,const char *) defined in pam.c
      uses function unique_name_qual(qual) defined in quals.c
   function pam_print_const_qual(qual,void *) in line 881
      protection public
      13 lines of code
      2 parameters
      4 conditional paths
      uses function constant_qual(qual) defined in quals.c
      uses function pam_add_text(const char *,...) defined in pam.c
      uses function pam_add_qual_link(qual,const char *) defined in pam.c
      uses function sign_qual(qual) defined in quals.c
      uses enumvalue sign_pos defined in quals.h
      uses variable num_pos defined in pam.c
      uses enumvalue sign_neg defined in quals.h
      uses variable num_neg defined in pam.c
      uses enumvalue sign_eq defined in quals.h
      uses variable num_eq defined in pam.c
      uses function fail(const char *,...) defined in utils.c
   function pam_print_edge(qual,qual,location,void *) in line 895
      protection public
      71 lines of code
      4 parameters
      7 conditional paths
      uses variable last_printed defined in pam.c
      uses variable init_qual defined in quals.c
      uses function constant_qual(qual) defined in quals.c
      uses function unique_name_qual(qual) defined in quals.c
      uses function pam_add_qual_link(qual,const char *) defined in pam.c
      uses variable flag_ugly defined in flags.h
      uses function pam_add_text(const char *,...) defined in pam.c
      uses function eq_qual(qual,qual) defined in quals.c
      uses function get_next_link(void) defined in pam.c
      uses function pam_add_link(const char *,const char *,const char *) defined in pam.c
      uses macro definition pam_color_8 defined in color.h
      uses function pam_add_buffer_click(const char *,const char *,click_func,void *) defined in pam.c
      uses macro definition pam_type_buffer defined in pam.c
      uses function pam_jump_file(const char *,const char *,const char *,location) defined in pam.c
   function pam_print_path_to_qual(qual,qual) in line 968
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses variable last_printed defined in pam.c
      uses macro definition NULL defined in config.h
      uses function traverse_shortest_path_edges(qual,qual,edge_traverse_fn,void *) defined in quals.c
      uses function pam_print_edge(qual,qual,location,void *) defined in pam.c
   function pam_qual_mouse_2_click_func(const char *,const char *,void *) in line 974
      protection public
      53 lines of code
      3 parameters
      5 conditional paths
      uses variable Click::arg defined in pam.c
      uses function pam_message(const char *,...) defined in pam.c
      uses function pam_close_buffer(const char *) defined in pam.c
      uses macro definition pam_type_buffer defined in pam.c
      uses function pam_set_lower_buffer(const char *) defined in pam.c
      uses function pam_change_buffer(const char *) defined in pam.c
      uses function pam_clear_buffer(const char *) defined in pam.c
      uses function pam_blobs_begin(void) defined in pam.c
      uses function pam_markup_buffer(const char *) defined in pam.c
      uses variable num_pos defined in pam.c
      uses variable num_neg defined in pam.c
      uses variable num_eq defined in pam.c
      uses variable flag_ugly defined in flags.h
      uses function pam_add_text(const char *,...) defined in pam.c
      uses function name_qual(qual) defined in quals.c
      uses function unique_name_qual(qual) defined in quals.c
      uses function scan_qual_bounds(qual,qual_traverse_fn,void *) defined in quals.c
      uses function pam_print_const_qual(qual,void *) defined in pam.c
      uses macro definition NULL defined in config.h
      uses variable last_printed defined in pam.c
      uses function traverse_shortest_path_edges(qual,qual,edge_traverse_fn,void *) defined in quals.c
      uses function pam_print_edge(qual,qual,location,void *) defined in pam.c
      uses function pam_print_path_to_qual(qual,qual) defined in pam.c
      uses function pam_blobs_end(void) defined in pam.c
   function pam_qual_shift_mouse_2_click_func(const char *,const char *,void *) in line 1029
      protection public
      20 lines of code
      3 parameters
      3 conditional paths
      uses function pam_message(const char *,...) defined in pam.c
      uses function location_qual(qual) defined in quals.c
      uses function pam_jump_file(const char *,const char *,const char *,location) defined in pam.c
      uses macro definition pam_click_msg defined in pam.c
      uses function name_qual(qual) defined in quals.c
   function pam_load_file(const char *,const char *,const char *,char *) in line 1069
      protection public
      92 lines of code
      4 parameters
      13 conditional paths
      uses function f(char *) defined in taint-const-subtyping.c
      uses function pam_close_file(const char *) defined in pam.c
      uses variable filename defined in iquals.tab.c
      uses function pam_set_upper_file(const char *) defined in pam.c
      uses function pam_change_file(const char *) defined in pam.c
      uses variable pam_files defined in pam.c
      uses function pam_message(const char *,...) defined in pam.c
      uses function pam_overlays_begin(void) defined in pam.c
      uses function pam_markup_file(const char *) defined in pam.c
      uses variable flag_pam_html defined in flags.h
      uses function location_cmp(location,location) defined in containers.h
      uses macro definition NULL defined in config.h
      uses variable Overlay::name defined in pam.c
      uses variable Overlay::kind defined in pam.c
      uses enumvalue overlay_qtype defined in pam.c
      uses function combine_colors_pam(const char *,const char *) defined in color.h
      uses function color_qtype(qtype,store) defined in qtype.c
      uses variable Overlay::qtype defined in pam.c
      uses enumvalue overlay_fs_qtype defined in pam.c
      uses variable Overlay::fs_qtype defined in pam.c
      uses variable Overlay::store defined in pam.c
      uses macro definition pam_color_noqual defined in color.h
      uses enumvalue overlay_lin defined in pam.c
      uses function lin_from_store(store,aloc) defined in effect.c
      uses variable Overlay::aloc defined in pam.c
      uses macro definition pam_color_6 defined in color.h
      uses macro definition pam_color_7 defined in color.h
      uses enumvalue overlay_anchor defined in pam.c
      uses function pam_add_overlink_anchor(const char *,const char *,const char *,int,int) defined in pam.c
      uses function ptr_to_ascii(void *) defined in utils.c
      uses variable Location::filepos defined in location.h
      uses function pam_add_overlink(const char *,const char *,int,int) defined in pam.c
      uses function pam_add_anchor(const char *,int,int) defined in pam.c
      uses function pam_overlays_end(void) defined in pam.c
      uses macro definition TRUE defined in bool.h
   function pam_add_file(const char *) in line 1190
      protection public
      15 lines of code
      1 parameters
      1 conditional paths
      uses function f(char *) defined in taint-const-subtyping.c
      uses macro definition ralloc defined in regions.h
      uses variable pam_region defined in pam.c
      uses macro definition FALSE defined in bool.h
      uses function get_next_link(void) defined in pam.c
      uses function rstrdup(region,const char *) defined in regions.c
      uses macro definition insist defined in utils.h
      uses variable pam_files defined in pam.c
      uses function pam_add_buffer_click(const char *,const char *,click_func,void *) defined in pam.c
      uses macro definition pam_results_buffer defined in pam.c
      uses function pam_load_file(const char *,const char *,const char *,char *) defined in pam.c
   function pam_add_error(const char *,location,severity,const char *,va_list) in line 1207
      protection public
      23 lines of code
      5 parameters
      1 conditional paths
      uses macro definition ralloc defined in regions.h
      uses variable pam_region defined in pam.c
      uses variable Error::func defined in pam.c
      uses variable Click::func defined in pam.c
      uses variable Error::loc defined in pam.c
      uses variable Error::sev defined in pam.c
      uses variable Error::message defined in pam.c
      uses function rvsprintf(region,const char *,va_list) defined in utils.c
      uses variable Error::link defined in pam.c
      uses function get_next_link(void) defined in pam.c
      uses function growbuf_empty(growbuf) defined in buffer.c
      uses variable qual_error_detail defined in qerror.c
      uses variable qtype_error_detail defined in qerror.c
      uses variable Error::detail defined in pam.c
      uses macro definition NULL defined in config.h
      uses function rstrdup(region,const char *) defined in regions.c
      uses function growbuf_contents(growbuf) defined in buffer.c
      uses function dd_add_last(region,dd_list,void *) defined in dd_list.c
      uses variable pam_errors defined in pam.c
      uses function pam_add_buffer_click(const char *,const char *,click_func,void *) defined in pam.c
      uses macro definition pam_results_buffer defined in pam.c
      uses function pam_jump_file(const char *,const char *,const char *,location) defined in pam.c
      uses function pam_add_overlay_anchor(location) defined in pam.c
   function pam_add_overlay_file(location,const char *,qtype) in line 1233
      protection public
      36 lines of code
      3 parameters
      1 conditional paths
      uses function f(char *) defined in taint-const-subtyping.c
      uses variable pam_files defined in pam.c
      uses variable Location::filename defined in location.h
      uses function pam_add_file(const char *) defined in pam.c
      uses macro definition insist defined in utils.h
      uses variable Overlay::kind defined in pam.c
      uses enumvalue overlay_qtype defined in pam.c
      uses variable Overlay::name defined in pam.c
      uses variable Overlay::qtype defined in pam.c
      uses macro definition ralloc defined in regions.h
      uses variable pam_region defined in pam.c
      uses variable Overlay::fs_qtype defined in pam.c
      uses macro definition NULL defined in config.h
      uses variable Overlay::store defined in pam.c
      uses variable Overlay::aloc defined in pam.c
   function pam_add_overlay_anchor(location) in line 1271
      protection public
      33 lines of code
      1 parameters
      4 conditional paths
      uses function f(char *) defined in taint-const-subtyping.c
      uses variable flag_pam_html defined in flags.h
      uses variable pam_files defined in pam.c
      uses variable Location::filename defined in location.h
      uses function pam_add_file(const char *) defined in pam.c
      uses macro definition insist defined in utils.h
      uses variable Overlay::kind defined in pam.c
      uses enumvalue overlay_anchor defined in pam.c
      uses macro definition ralloc defined in regions.h
      uses variable pam_region defined in pam.c
      uses variable Overlay::name defined in pam.c
      uses macro definition NULL defined in config.h
      uses variable Overlay::qtype defined in pam.c
      uses variable Overlay::fs_qtype defined in pam.c
      uses variable Overlay::store defined in pam.c
      uses variable Overlay::aloc defined in pam.c
   function pam_add_overlay_lin(location,store,aloc) in line 1306
      protection public
      35 lines of code
      3 parameters
      1 conditional paths
      uses function f(char *) defined in taint-const-subtyping.c
      uses variable pam_files defined in pam.c
      uses variable Location::filename defined in location.h
      uses function pam_add_file(const char *) defined in pam.c
      uses macro definition insist defined in utils.h
      uses variable Overlay::kind defined in pam.c
      uses enumvalue overlay_lin defined in pam.c
      uses variable Overlay::store defined in pam.c
      uses function eq_store(store,store) defined in effect.c
      uses variable Overlay::aloc defined in pam.c
      uses macro definition ralloc defined in regions.h
      uses variable pam_region defined in pam.c
      uses variable Overlay::name defined in pam.c
      uses variable Overlay::qtype defined in pam.c
      uses macro definition NULL defined in config.h
      uses variable Overlay::fs_qtype defined in pam.c
   function pam_add_overlay_flow_sensitive(location,qtype,store) in line 1344
      protection public
      15 lines of code
      3 parameters
      1 conditional paths
      uses function f(char *) defined in taint-const-subtyping.c
      uses macro definition insist defined in utils.h
      uses variable pam_files defined in pam.c
      uses variable Location::filename defined in location.h
      uses variable Overlay::kind defined in pam.c
      uses enumvalue overlay_qtype defined in pam.c
      uses enumvalue overlay_fs_qtype defined in pam.c
      uses variable Overlay::fs_qtype defined in pam.c
      uses variable Overlay::store defined in pam.c
      uses function eq_store(store,store) defined in effect.c
   function pam_print_files(void) in line 1367
      protection public
      19 lines of code
      1 parameters
      3 conditional paths
      uses function f(char *) defined in taint-const-subtyping.c
      uses variable pam_files defined in pam.c
      uses function pam_add_text(const char *,...) defined in pam.c
      uses function pam_add_link(const char *,const char *,const char *) defined in pam.c
      uses macro definition pam_color_2 defined in color.h
   function pam_print_errors(void) in line 1388
      protection public
      47 lines of code
      1 parameters
      7 conditional paths
      uses variable scratch_region defined in qtype.c
      uses macro definition dd_is_empty defined in dd_list.h
      uses variable pam_errors defined in pam.c
      uses function newregion(void) defined in regions.c
      uses function pam_add_text(const char *,...) defined in pam.c
      uses macro definition dd_scan defined in dd_list.h
      uses macro definition DD_GET defined in dd_list.h
      uses variable Error::sev defined in pam.c
      uses enumvalue sev_err defined in qerror.h
      uses macro definition pam_color_error defined in color.h
      uses enumvalue sev_warn defined in qerror.h
      uses macro definition pam_color_warning defined in color.h
      uses enumvalue sev_info defined in qerror.h
      uses macro definition pam_color_info defined in color.h
      uses function fail(const char *,...) defined in utils.c
      uses variable Error::loc defined in pam.c
      uses function rsprintf(region,const char *,...) defined in utils.c
      uses variable Location::filename defined in location.h
      uses variable Location::lineno defined in location.h
      uses function pam_add_link(const char *,const char *,const char *) defined in pam.c
      uses variable Error::link defined in pam.c
      uses variable Error::message defined in pam.c
      uses variable Error::detail defined in pam.c
      uses function deleteregion(region) defined in regions.c
   function pam_create_initial_window(void) in line 1436
      protection public
      40 lines of code
      1 parameters
      5 conditional paths
      uses function pam_clear_buffer(const char *) defined in pam.c
      uses macro definition pam_results_buffer defined in pam.c
      uses function pam_blobs_begin(void) defined in pam.c
      uses function pam_markup_buffer(const char *) defined in pam.c
      uses function pam_add_link(const char *,const char *,const char *) defined in pam.c
      uses macro definition pam_about_click defined in pam.c
      uses macro definition pam_color_6 defined in color.h
      uses function pam_add_text(const char *,...) defined in pam.c
      uses function exist_undefineds(void) defined in pam.c
      uses macro definition pam_undefineds_click defined in pam.c
      uses function exist_hotspots(void) defined in pam.c
      uses macro definition pam_hotspots_click defined in pam.c
      uses function exist_varargs(void) defined in pam.c
      uses macro definition pam_varargs_click defined in pam.c
      uses variable qerrors defined in qerror.c
      uses function pam_print_files(void) defined in pam.c
      uses function pam_print_errors(void) defined in pam.c
      uses function pam_blobs_end(void) defined in pam.c
   function pam_home_click_func(const char *,const char *,const char *,void *) in line 1486
      protection public
      7 lines of code
      4 parameters
      1 conditional paths
      uses function pam_close_buffer(const char *) defined in pam.c
      uses macro definition pam_results_buffer defined in pam.c
      uses function pam_set_upper_buffer(const char *) defined in pam.c
      uses function pam_change_buffer(const char *) defined in pam.c
   function pam_install_generic_buffer_clicks(void) in line 1495
      protection public
      15 lines of code
      1 parameters
      1 conditional paths
      uses function pam_add_buffer_click(const char *,const char *,click_func,void *) defined in pam.c
      uses macro definition pam_results_buffer defined in pam.c
      uses macro definition pam_about_click defined in pam.c
      uses function pam_about_click_func(const char *,const char *,const char *,void *) defined in pam.c
      uses macro definition NULL defined in config.h
      uses macro definition pam_undefineds_click defined in pam.c
      uses function pam_undefineds_click_func(const char *,const char *,const char *,void *) defined in pam.c
      uses macro definition pam_varargs_click defined in pam.c
      uses function pam_varargs_click_func(const char *,const char *,const char *,void *) defined in pam.c
      uses macro definition pam_hotspots_click defined in pam.c
      uses function pam_hotspots_click_func(const char *,const char *,const char *,void *) defined in pam.c
      uses macro definition pam_about_buffer defined in pam.c
      uses macro definition pam_home_click defined in pam.c
      uses function pam_home_click_func(const char *,const char *,const char *,void *) defined in pam.c
      uses macro definition pam_type_buffer defined in pam.c
      uses macro definition pam_any_click defined in pam.c
      uses function pam_qual_click_func(const char *,const char *,const char *,void *) defined in pam.c
   function pam_click_dispatch(char *,char *,char *,char *) in line 1513
      protection public
      22 lines of code
      4 parameters
      4 conditional paths
      uses macro definition pam_window_buffer_msg defined in pam.c
      uses function pam_get_buffer_click(const char *,const char *) defined in pam.c
      uses function pam_message(const char *,...) defined in pam.c
      uses variable Click::func defined in pam.c
      uses variable Click::arg defined in pam.c
      uses macro definition pam_window_file_msg defined in pam.c
      uses function pam_qtype_click_func(const char *,const char *,const char *,void *) defined in pam.c
      uses macro definition NULL defined in config.h
   function get_line(char *,int) in line 1541
      protection public
      20 lines of code
      2 parameters
      3 conditional paths
      uses macro definition pam_getc defined in pam.c
   function enter_pam_mode(void) in line 1563
      protection public
      67 lines of code
      1 parameters
      1 conditional paths
      uses macro definition NULL defined in config.h
      uses function pam_install_generic_buffer_clicks(void) defined in pam.c
      uses macro definition pam_printf defined in pam.c
      uses function pam_close_buffer(const char *) defined in pam.c
      uses macro definition pam_results_buffer defined in pam.c
      uses function pam_change_buffer(const char *) defined in pam.c
      uses function pam_create_initial_window(void) defined in pam.c
      uses variable qerrors defined in qerror.c
      uses function pam_message(const char *,...) defined in pam.c
      uses macro definition BUF_MAX defined in pam.c
      uses function pam_waiting(void) defined in pam.c
      uses function get_line(char *,int) defined in pam.c
      uses function fail(const char *,...) defined in utils.c
      uses macro definition pam_click_msg defined in pam.c
      uses macro definition pam_shift_click_msg defined in pam.c
      uses function pam_click_dispatch(char *,char *,char *,char *) defined in pam.c
   function print_results(void) in line 1637
      protection public
      46 lines of code
      1 parameters
      8 conditional paths
      uses variable vars defined in iquals.tab.c
      uses variable var_list::next defined in iquals.tab.c
      uses function printf(const char *$NONYEAR,(null)) defined in rcs1.c
      uses variable var_list::name defined in iquals.tab.c
      uses function print_qual(printf_func,qual) defined in quals.c
      uses variable var_list::qual defined in iquals.tab.c
      uses function f(char *) defined in taint-const-subtyping.c
      uses variable hotspots defined in quals.c
      uses variable num_hotspots defined in main.c
      uses function name_qual(qual) defined in quals.c
      uses function error_count_qual(qual) defined in quals.c
      uses variable pam_files defined in pam.c
      uses function location_cmp(location,location) defined in containers.h
      uses variable Overlay::kind defined in pam.c
      uses enumvalue overlay_qtype defined in pam.c
      uses variable Overlay::name defined in pam.c
      uses function print_qtype_qf(printf_func,pr_qual_fn,qtype,store,bool) defined in qtype.c
      uses variable Overlay::qtype defined in pam.c
      uses macro definition NULL defined in config.h
      uses macro definition FALSE defined in bool.h
      uses enumvalue overlay_fs_qtype defined in pam.c
      uses variable Location::lineno defined in location.h
      uses variable Overlay::fs_qtype defined in pam.c
      uses variable Overlay::store defined in pam.c
   variable Click::arg in line 44
      protection public
   variable Click::func in line 43
      protection public
   variable Overlay::aloc in line 67
      protection public
   variable Overlay::fs_qtype in line 63
      protection public
   variable Overlay::kind in line 54
      protection public
   variable Overlay::name in line 57
      protection public
   variable Overlay::qtype in line 60
      protection public
   variable Overlay::store in line 64
      protection public
   variable File::link in line 75
      protection public
   variable File::loaded in line 74
      protection public
   variable File::overlays in line 76
      protection public
   variable Error::detail in line 85
      protection public
   variable Error::func in line 81
      protection public
   variable Error::link in line 86
      protection public
   variable Error::loc in line 82
      protection public
   variable Error::message in line 84
      protection public
   variable Error::sev in line 83
      protection public
   variable pred_info::buffer in line 666
      protection public
   variable pred_info::pred in line 665
      protection public
   variable pred_info::store in line 667
      protection public
   variable pred_info2::flag in line 740
      protection public
   variable pred_info2::pred in line 739
      protection public
   variable pred_info2::store in line 741
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cqual/cqual-0.981/src/pam.h
module pam.h
   function enter_pam_mode(void) in line 31
      protection public
      67 lines of code
      1 parameters
      10 conditional paths
      uses macro definition NULL defined in config.h
      uses function pam_install_generic_buffer_clicks(void) defined in pam.c
      uses macro definition pam_printf defined in pam.c
      uses function pam_close_buffer(const char *) defined in pam.c
      uses macro definition pam_results_buffer defined in pam.c
      uses function pam_change_buffer(const char *) defined in pam.c
      uses function pam_create_initial_window(void) defined in pam.c
      uses variable qerrors defined in qerror.c
      uses function pam_message(const char *,...) defined in pam.c
      uses macro definition BUF_MAX defined in pam.c
      uses function pam_waiting(void) defined in pam.c
      uses function get_line(char *,int) defined in pam.c
      uses function fail(const char *,...) defined in utils.c
      uses macro definition pam_click_msg defined in pam.c
      uses macro definition pam_shift_click_msg defined in pam.c
      uses function pam_click_dispatch(char *,char *,char *,char *) defined in pam.c
   function pam_add_file(const char *) in line 34
      protection public
      15 lines of code
      1 parameters
      1 conditional paths
      uses function f(char *) defined in taint-const-subtyping.c
      uses macro definition ralloc defined in regions.h
      uses macro definition FALSE defined in bool.h
      uses function get_next_link(void) defined in pam.c
      uses function rstrdup(region,const char *) defined in regions.c
      uses macro definition insist defined in utils.h
      uses function pam_add_buffer_click(const char *,const char *,click_func,void *) defined in pam.c
      uses macro definition pam_results_buffer defined in pam.c
      uses function pam_load_file(const char *,const char *,const char *,char *) defined in pam.c
   function pam_add_error(const char *,location,severity,const char *,va_list) in line 37
      protection public
      23 lines of code
      5 parameters
      4 conditional paths
      uses macro definition ralloc defined in regions.h
      uses variable Error::func defined in pam.c
      uses variable Click::func defined in pam.c
      uses variable Error::loc defined in pam.c
      uses variable Error::sev defined in pam.c
      uses variable Error::message defined in pam.c
      uses function rvsprintf(region,const char *,va_list) defined in utils.c
      uses variable Error::link defined in pam.c
      uses function get_next_link(void) defined in pam.c
      uses function growbuf_empty(growbuf) defined in buffer.c
      uses variable qual_error_detail defined in qerror.c
      uses variable qtype_error_detail defined in qerror.c
      uses variable Error::detail defined in pam.c
      uses macro definition NULL defined in config.h
      uses function rstrdup(region,const char *) defined in regions.c
      uses function growbuf_contents(growbuf) defined in buffer.c
      uses function dd_add_last(region,dd_list,void *) defined in dd_list.c
      uses function pam_add_buffer_click(const char *,const char *,click_func,void *) defined in pam.c
      uses macro definition pam_results_buffer defined in pam.c
      uses function pam_jump_file(const char *,const char *,const char *,location) defined in pam.c
      uses function pam_add_overlay_anchor(location) defined in pam.c
   function pam_add_overlay_file(location,const char *,qtype) in line 42
      protection public
      36 lines of code
      3 parameters
      4 conditional paths
      uses function f(char *) defined in taint-const-subtyping.c
      uses variable Location::filename defined in location.h
      uses function pam_add_file(const char *) defined in pam.c
      uses macro definition insist defined in utils.h
      uses variable Overlay::kind defined in pam.c
      uses enumvalue overlay_qtype defined in pam.c
      uses variable Overlay::name defined in pam.c
      uses variable Overlay::qtype defined in pam.c
      uses macro definition ralloc defined in regions.h
      uses variable Overlay::fs_qtype defined in pam.c
      uses macro definition NULL defined in config.h
      uses variable Overlay::store defined in pam.c
      uses variable Overlay::aloc defined in pam.c
   function pam_add_overlay_anchor(location) in line 45
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses function f(char *) defined in taint-const-subtyping.c
      uses variable flag_pam_html defined in flags.h
      uses variable Location::filename defined in location.h
      uses function pam_add_file(const char *) defined in pam.c
      uses macro definition insist defined in utils.h
      uses variable Overlay::kind defined in pam.c
      uses enumvalue overlay_anchor defined in pam.c
      uses macro definition ralloc defined in regions.h
      uses variable Overlay::name defined in pam.c
      uses macro definition NULL defined in config.h
      uses variable Overlay::qtype defined in pam.c
      uses variable Overlay::fs_qtype defined in pam.c
      uses variable Overlay::store defined in pam.c
      uses variable Overlay::aloc defined in pam.c
   function pam_add_overlay_lin(location,store,aloc) in line 48
      protection public
      35 lines of code
      3 parameters
      4 conditional paths
      uses function f(char *) defined in taint-const-subtyping.c
      uses variable Location::filename defined in location.h
      uses function pam_add_file(const char *) defined in pam.c
      uses macro definition insist defined in utils.h
      uses variable Overlay::kind defined in pam.c
      uses enumvalue overlay_lin defined in pam.c
      uses variable Overlay::store defined in pam.c
      uses function eq_store(store,store) defined in effect.c
      uses variable Overlay::aloc defined in pam.c
      uses macro definition ralloc defined in regions.h
      uses variable Overlay::name defined in pam.c
      uses variable Overlay::qtype defined in pam.c
      uses macro definition NULL defined in config.h
      uses variable Overlay::fs_qtype defined in pam.c
   function pam_add_overlay_flow_sensitive(location,qtype,store) in line 52
      protection public
      15 lines of code
      3 parameters
      1 conditional paths
      uses function f(char *) defined in taint-const-subtyping.c
      uses macro definition insist defined in utils.h
      uses variable Location::filename defined in location.h
      uses variable Overlay::kind defined in pam.c
      uses enumvalue overlay_qtype defined in pam.c
      uses enumvalue overlay_fs_qtype defined in pam.c
      uses variable Overlay::fs_qtype defined in pam.c
      uses variable Overlay::store defined in pam.c
      uses function eq_store(store,store) defined in effect.c
   function print_results(void) in line 55
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses variable vars defined in iquals.tab.c
      uses variable var_list::next defined in iquals.tab.c
      uses function printf(const char *$NONYEAR,(null)) defined in rcs1.c
      uses variable var_list::name defined in iquals.tab.c
      uses function print_qual(printf_func,qual) defined in quals.c
      uses variable var_list::qual defined in iquals.tab.c
      uses function f(char *) defined in taint-const-subtyping.c
      uses variable hotspots defined in quals.c
      uses variable num_hotspots defined in main.c
      uses function name_qual(qual) defined in quals.c
      uses function error_count_qual(qual) defined in quals.c
      uses function location_cmp(location,location) defined in containers.h
      uses variable Overlay::kind defined in pam.c
      uses enumvalue overlay_qtype defined in pam.c
      uses variable Overlay::name defined in pam.c
      uses function print_qtype_qf(printf_func,pr_qual_fn,qtype,store,bool) defined in qtype.c
      uses variable Overlay::qtype defined in pam.c
      uses macro definition NULL defined in config.h
      uses macro definition FALSE defined in bool.h
      uses enumvalue overlay_fs_qtype defined in pam.c
      uses variable Location::lineno defined in location.h
      uses variable Overlay::fs_qtype defined in pam.c
      uses variable Overlay::store defined in pam.c
   function init_pam(void) in line 57
      protection public
      12 lines of code
      1 parameters
      2 conditional paths
      uses macro definition NULL defined in config.h
      uses function deleteregion(region) defined in regions.c
      uses function newregion(void) defined in regions.c
      uses function dd_new_list(region) defined in dd_list.c
      uses function growbuf_new(region,int) defined in buffer.c
      uses function pam_jump_file(const char *,const char *,const char *,location) defined in pam.c
      uses function get_next_link(void) defined in pam.c
      uses function pam_clear_buffer(const char *) defined in pam.c
      uses function pam_change_buffer(const char *) defined in pam.c
      uses function pam_set_lower_buffer(const char *) defined in pam.c
      uses function pam_set_upper_buffer(const char *) defined in pam.c
      uses function pam_close_buffer(const char *) defined in pam.c
      uses function pam_split_buffer(const char *) defined in pam.c
      uses function pam_goto_char_buffer(const char *,unsigned long) defined in pam.c
      uses function pam_goto_anchor_buffer(const char *,const char *) defined in pam.c
      uses function pam_clear_file(const char *) defined in pam.c
      uses function pam_change_file(const char *) defined in pam.c
      uses function pam_set_lower_file(const char *) defined in pam.c
      uses function pam_set_upper_file(const char *) defined in pam.c
      uses function pam_close_file(const char *) defined in pam.c
      uses function pam_split_file(const char *) defined in pam.c
      uses function pam_goto_char_file(const char *,unsigned long) defined in pam.c
      uses function pam_goto_anchor_file(const char *,const char *) defined in pam.c
      uses function pam_waiting(void) defined in pam.c
      uses function pam_debug(const char *,...) defined in pam.c
      uses function pam_message(const char *,...) defined in pam.c
      uses function pam_default_path(const char *) defined in pam.c
      uses function pam_blobs_begin(void) defined in pam.c
      uses function pam_blobs_end(void) defined in pam.c
      uses function pam_overlays_begin(void) defined in pam.c
      uses function pam_overlays_end(void) defined in pam.c
      uses function pam_markup_file(const char *) defined in pam.c
      uses function f(char *) defined in taint-const-subtyping.c
      uses function pam_markup_buffer(const char *) defined in pam.c
      uses function pam_add_text(const char *,...) defined in pam.c
      uses function pam_add_link(const char *,const char *,const char *) defined in pam.c
      uses function pam_add_marked_text(const char *,const char *) defined in pam.c
      uses function pam_add_overlink(const char *,const char *,int,int) defined in pam.c
      uses function pam_add_overlink_anchor(const char *,const char *,const char *,int,int) defined in pam.c
      uses function pam_add_overmark(const char *,int,int) defined in pam.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cqual/cqual-0.981/src/parser.h
module parser.h
   variable progname in line 40
      protection public
   variable copy_argc in line 43
      protection public
   variable copy_argv in line 44
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cqual/cqual-0.981/src/qerror.c
module qerror.c
   variable qerror_region in line 23
      protection public
   variable qerrors in line 27
      protection public
   variable qual_error_detail in line 30
      protection public
   variable qtype_error_detail in line 31
      protection public
   function init_qerror(void) in line 33
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses variable qerror_region defined in qerror.c
      uses function newregion(void) defined in regions.c
      uses variable qual_error_detail defined in qerror.c
      uses function growbuf_new(region,int) defined in buffer.c
      uses variable qtype_error_detail defined in qerror.c
      uses variable qerrors defined in qerror.c
   function qual_ed_printf(const char *,...) in line 43
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
      uses function gvprintf(growbuf,const char *,va_list) defined in buffer.c
      uses variable qual_error_detail defined in qerror.c
   function qtype_ed_printf(const char *,...) in line 51
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
      uses function gvprintf(growbuf,const char *,va_list) defined in buffer.c
      uses variable qtype_error_detail defined in qerror.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cqual/cqual-0.981/src/qerror.h
module qerror.h
   enumeration severity in line 25
      protection public
   variable qerrors in line 31
      protection public
   variable qual_error_detail in line 34
      protection public
   variable qtype_error_detail in line 35
      protection public
   enumvalue sev_err in line 25
      protection public
   enumvalue sev_warn in line 25
      protection public
   enumvalue sev_info in line 25
      protection public
   function init_qerror(void) in line 27
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses function newregion(void) defined in regions.c
      uses variable qual_error_detail defined in qerror.c
      uses function growbuf_new(region,int) defined in buffer.c
      uses variable qtype_error_detail defined in qerror.c
      uses variable qerrors defined in qerror.c
   function qual_ed_printf(const char *,...) in line 38
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
      uses function gvprintf(growbuf,const char *,va_list) defined in buffer.c
      uses variable qual_error_detail defined in qerror.c
   function qtype_ed_printf(const char *,...) in line 39
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
      uses function gvprintf(growbuf,const char *,va_list) defined in buffer.c
      uses variable qtype_error_detail defined in qerror.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cqual/cqual-0.981/src/qtype.c
module qtype.c
   macro definition mkty_primitive in line 206
      protection public
   macro definition mkqtype in line 446
      protection public
   macro definition Q in line 1490
      protection public
   enumeration mkXeq in line 2493
      protection public
   typedef field in line 51
      protection public
   typedef ctq_info in line 872
      protection public
   typedef copy_info in line 1952
      protection public
   typedef inst_info in line 2034
      protection public
   typedef eqtq_info in line 3093
      protection public
   typedef vtq_info in line 3117
      protection public
   variable error_qtype in line 195
      protection public
   variable next_qtype in line 196
      protection public
   variable void_ty in line 197
      protection public
   variable error_ty in line 197
      protection public
   variable bool_ty in line 197
      protection public
   variable char_ty in line 197
      protection public
   variable signed_char_ty in line 197
      protection public
   variable unsigned_char_ty in line 198
      protection public
   variable short_ty in line 198
      protection public
   variable unsigned_short_ty in line 198
      protection public
   variable int_ty in line 198
      protection public
   variable unsigned_int_ty in line 198
      protection public
   variable long_ty in line 199
      protection public
   variable unsigned_long_ty in line 199
      protection public
   variable long_long_ty in line 199
      protection public
   variable unsigned_long_long_ty in line 199
      protection public
   variable float_ty in line 199
      protection public
   variable double_ty in line 200
      protection public
   variable long_double_ty in line 200
      protection public
   variable size_t_ty in line 200
      protection public
   variable ptrdiff_t_ty in line 200
      protection public
   variable scratch_region in line 201
      protection public
   variable name_map in line 202
      protection public
   variable count in line 4148
      protection public
   enumvalue mkleq in line 2493
      protection public
   enumvalue mkeq in line 2493
      protection public
   enumvalue unify in line 2493
      protection public
   function ecr_qtype(qtype) in line 155
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable Qtypelist::qt defined in qtype.c
      uses variable Qtype::type defined in qtype.c
      uses function ecr_ty(ty) defined in qtype.c
   function mkfield(const char *,qtype) in line 156
      protection public
      10 lines of code
      2 parameters
      1 conditional paths
      uses function f(char *) defined in taint-const-subtyping.c
      uses macro definition ralloc defined in regions.h
      uses variable parse_region defined in c-parse.h
      uses variable Qtypelist::qt defined in qtype.c
      uses macro definition NULL defined in config.h
   function add_constraints_level(qual,type_quals,user_qual_list,level_qual_t,location) in line 157
      protection public
      40 lines of code
      5 parameters
      5 conditional paths
      uses macro definition FALSE defined in bool.h
      uses enumvalue level_value defined in quals.h
      uses enumvalue level_ref defined in quals.h
      uses macro definition scan_user_qual_list defined in types.h
      uses function is_qualifier_constraint(const char *) defined in qtype.c
      uses variable user_qual_list::qual defined in types.h
      uses variable AST_user_qual::cstring defined in AST_defs.h
      uses variable cstring::data defined in cstring.h
      uses function find_qual(const char *) defined in quals.c
      uses function report_qerror(location,severity,const char *,...) defined in analyze.c
      uses variable AST_user_qual::loc defined in AST_defs.h
      uses enumvalue sev_err defined in qerror.h
      uses macro definition TRUE defined in bool.h
      uses function level_qual(qual) defined in quals.c
      uses function add_constraint_qual(qual,qual,location) defined in qtype.c
      uses variable ctq_info::loc defined in qtype.c
      uses variable flag_strict_const defined in flags.h
      uses variable nonconst_qual defined in quals.c
   function make_qvar_name_constrained(const char *,location,bool,qual *,user_qual_list,hash_table) in line 160
      protection public
      64 lines of code
      6 parameters
      7 conditional paths
      uses macro definition FALSE defined in bool.h
      uses macro definition scan_user_qual_list defined in types.h
      uses variable user_qual_list::qual defined in types.h
      uses variable AST_user_qual::cstring defined in AST_defs.h
      uses variable cstring::data defined in cstring.h
      uses function is_qualifier_constraint(const char *) defined in qtype.c
      uses macro definition TRUE defined in bool.h
      uses function hash_table_lookup(hash_table,hash_key,hash_data *) defined in hash.c
      uses variable name_map defined in qtype.c
      uses variable hash_key defined in hash.h
      uses function make_qvar(const char *,location,bool) defined in quals.c
      uses variable ctq_info::loc defined in qtype.c
      uses function hash_table_scan(hash_table,hash_table_scanner *) defined in hash.c
      uses function hash_table_next(hash_table_scanner *,hash_key *,hash_data *) defined in hash.c
      uses function constrain_quals_by_name(qual,const char *,qual,const char *,location) defined in qtype.c
      uses variable AST_user_qual::loc defined in AST_defs.h
      uses macro definition insist defined in utils.h
      uses function hash_table_insert(hash_table,hash_key,hash_data) defined in hash.c
      uses function report_qerror(location,severity,const char *,...) defined in analyze.c
      uses enumvalue sev_err defined in qerror.h
   function enforce_param_effects(qtypelist_scanner,location) in line 163
      protection public
      20 lines of code
      2 parameters
      3 conditional paths
      uses macro definition NULL defined in config.h
      uses variable effect_empty defined in effect.c
      uses variable ctq_info::loc defined in qtype.c
      uses variable restrict_qual defined in quals.c
      uses function has_qual_qtype(qtype,qual) defined in qtype.c
      uses function aloc_qtype(qtype) defined in qtype.c
      uses function mknin_aloc_effect(location,aloc,eff_kind,effect) defined in effect.c
      uses enumvalue eff_rwr defined in cqual.h
      uses function effect_union(effect,effect) defined in effect.c
      uses function effect_rwr(aloc) defined in effect.c
   function param_qual_effect(qtype) in line 164
      protection public
      58 lines of code
      1 parameters
      16 conditional paths
      uses variable Qtypelist::qt defined in qtype.c
      uses function ecr_qtype(qtype) defined in qtype.c
      uses variable Qtype::type defined in qtype.c
      uses variable effect_empty defined in effect.c
      uses function has_fs_qual(qual) defined in quals.c
      uses function effect_union(effect,effect) defined in effect.c
      uses function effect_r(aloc) defined in effect.c
      uses function qtypelist_scan(qtypelist,qtypelist_scanner *) defined in qtype.c
      uses function qtypelist_next(qtypelist_scanner *) defined in qtype.c
      uses function fail(const char *,...) defined in utils.c
   function find_tag_declaration(tag_declaration) in line 166
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function find_tag_declaration_nocompress(tag_declaration) in line 167
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function union_tag_declaration(tag_declaration,tag_declaration) in line 168
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function union_tag_declaration_forceleftecr(tag_declaration,tag_declaration) in line 169
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function equate_all_quals_qtype(location,qtype,qual) in line 171
      protection public
      7 lines of code
      3 parameters
      1 conditional paths
      uses variable eqtq_info::q defined in qtype.c
      uses macro definition FALSE defined in bool.h
      uses variable eqtq_info::loc defined in qtype.c
      uses function traverse_quals_qtype(qtype,void(*)(qual q, void *arg),void *) defined in qtype.c
      uses variable Qtypelist::qt defined in qtype.c
      uses function equate_traverse_fn(qual,void *) defined in qtype.c
      uses variable eqtq_info::result defined in qtype.c
   function is_qualifier_constraint(const char *) in line 172
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function copy_ty(ty,location) in line 173
      protection public
      9 lines of code
      2 parameters
      1 conditional paths
      uses variable copy_info::loc defined in qtype.c
      uses variable copy_info::qmap defined in qtype.c
      uses function make_qual_hash_table(region,int) defined in qtype.c
      uses variable scratch_region defined in qtype.c
      uses variable copy_info::vmap defined in qtype.c
      uses function make_ty_hash_table(region,int) defined in qtype.c
      uses function substitute_ty(ty,qual(*)(qual, void *arg),void *,ty(*)(ty, void *arg),void *) defined in qtype.c
      uses function copy_qtype_qsubs(qual,void *) defined in qtype.c
      uses function copy_qtype_tsubs(ty,void *) defined in qtype.c
   function substitute_ty(ty,qual(*)(qual, void *arg),void *,ty(*)(ty, void *arg),void *) in line 174
      protection public
      52 lines of code
      5 parameters
      12 conditional paths
      uses function mkty_pointer(qtype,aloc) defined in qtype.c
      uses function substitute_qtype(qtype,qual(*)(qual, void *arg),void *,ty(*)(ty, void *arg),void *) defined in qtype.c
      uses function f(char *) defined in taint-const-subtyping.c
      uses function g(const char *) defined in taint-const-subtyping.c
      uses function mkty_array(qtype,expression,aloc,aloc) defined in qtype.c
      uses function mkty_function(bool,qual,bool,qtype,qtypelist,store,store,aloc,effect) defined in qtype.c
      uses macro definition NULL defined in config.h
      uses function substitute_qtypelist(qtypelist,qual(*)(qual, void *arg),void *,ty(*)(ty, void *arg),void *) defined in qtype.c
      uses function fail(const char *,...) defined in utils.c
   function substitute_qtype(qtype,qual(*)(qual, void *arg),void *,ty(*)(ty, void *arg),void *) in line 176
      protection public
      12 lines of code
      5 parameters
      1 conditional paths
      uses variable Qtypelist::qt defined in qtype.c
      uses function ecr_qtype(qtype) defined in qtype.c
      uses macro definition ralloc defined in regions.h
      uses variable parse_region defined in c-parse.h
      uses variable Qtype::qual defined in qtype.c
      uses function f(char *) defined in taint-const-subtyping.c
      uses variable Qtype::type defined in qtype.c
      uses function substitute_ty(ty,qual(*)(qual, void *arg),void *,ty(*)(ty, void *arg),void *) defined in qtype.c
      uses function g(const char *) defined in taint-const-subtyping.c
      uses variable Qtype::conv defined in qtype.c
      uses macro definition NULL defined in config.h
   function substitute_qtypelist(qtypelist,qual(*)(qual, void *arg),void *,ty(*)(ty, void *arg),void *) in line 178
      protection public
      13 lines of code
      5 parameters
      2 conditional paths
      uses variable Qtypelist::qt defined in qtype.c
      uses macro definition NULL defined in config.h
      uses function qtypelist_scan(qtypelist,qtypelist_scanner *) defined in qtype.c
      uses function qtypelist_next(qtypelist_scanner *) defined in qtype.c
      uses function qtypelist_append(qtypelist *,qtype) defined in qtype.c
      uses function substitute_qtype(qtype,qual(*)(qual, void *arg),void *,ty(*)(ty, void *arg),void *) defined in qtype.c
      uses function f(char *) defined in taint-const-subtyping.c
      uses function g(const char *) defined in taint-const-subtyping.c
   function eq_ty(ty,ty) in line 181
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function ecr_ty(ty) defined in qtype.c
   function cmp_ty(ty,ty) in line 182
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
      uses function ecr_ty(ty) defined in qtype.c
   function ecr_ty(ty) in line 183
      protection public
      23 lines of code
      1 parameters
      4 conditional paths
   function print_ty_structure(printf_func,ty,store) in line 184
      protection public
      80 lines of code
      3 parameters
      18 conditional paths
      uses variable vtq_info::result defined in qtype.c
      uses function ecr_ty(ty) defined in qtype.c
      uses function print_ty_qf(printf_func,pr_qual_fn,ty,store,bool) defined in qtype.c
      uses macro definition NULL defined in config.h
      uses macro definition FALSE defined in bool.h
      uses function qtype_from_store(store,aloc) defined in effect.c
      uses variable Store::u defined in iquals.tab.c
      uses variable Qtype::type defined in qtype.c
      uses function print_aloc(printf_func,aloc) defined in effect.c
      uses macro definition TRUE defined in bool.h
      uses function qtypelist_scan(qtypelist,qtypelist_scanner *) defined in qtype.c
      uses function qtypelist_next(qtypelist_scanner *) defined in qtype.c
      uses function fail(const char *,...) defined in utils.c
   function qtypelist_to_fs_qtypelist(location,qtypelist) in line 185
      protection public
      13 lines of code
      2 parameters
      2 conditional paths
      uses variable Qtypelist::qt defined in qtype.c
      uses variable vtq_info::result defined in qtype.c
      uses macro definition NULL defined in config.h
      uses function qtypelist_scan(qtypelist,qtypelist_scanner *) defined in qtype.c
      uses function qtypelist_next(qtypelist_scanner *) defined in qtype.c
      uses function qtypelist_append(qtypelist *,qtype) defined in qtype.c
      uses function qtype_to_fs_qtype(location,qtype) defined in qtype.c
      uses variable vtq_info::loc defined in qtype.c
   function transfer_fs_qtypelist(location,qtypelist,qtypelist,store) in line 186
      protection public
      18 lines of code
      4 parameters
      2 conditional paths
      uses variable vtq_info::result defined in qtype.c
      uses macro definition FALSE defined in bool.h
      uses function qtypelist_scan(qtypelist,qtypelist_scanner *) defined in qtype.c
      uses function qtypelist_next(qtypelist_scanner *) defined in qtype.c
      uses function transfer_fs_qtype(location,qtype,qtype,store) defined in qtype.c
      uses variable vtq_info::loc defined in qtype.c
   function init_qtype(void) in line 213
      protection public
      37 lines of code
      1 parameters
      1 conditional paths
      uses variable scratch_region defined in qtype.c
      uses function newregion(void) defined in regions.c
      uses variable name_map defined in qtype.c
      uses function make_string_hash_table(region,int) defined in hash.c
      uses variable error_ty defined in qtype.c
      uses macro definition ralloc defined in regions.h
      uses variable parse_region defined in c-parse.h
      uses macro definition NULL defined in config.h
      uses variable error_qtype defined in qtype.c
      uses variable Qtype::qual defined in qtype.c
      uses variable Qtype::type defined in qtype.c
      uses variable Qtype::conv defined in qtype.c
      uses variable void_ty defined in qtype.c
      uses variable bool_ty defined in qtype.c
      uses macro definition mkty_primitive defined in qtype.c
      uses variable char_ty defined in qtype.c
      uses variable signed_char_ty defined in qtype.c
      uses variable unsigned_char_ty defined in qtype.c
      uses variable short_ty defined in qtype.c
      uses variable unsigned_short_ty defined in qtype.c
      uses variable int_ty defined in qtype.c
      uses variable unsigned_int_ty defined in qtype.c
      uses variable long_ty defined in qtype.c
      uses variable unsigned_long_ty defined in qtype.c
      uses variable long_long_ty defined in qtype.c
      uses variable unsigned_long_long_ty defined in qtype.c
      uses variable float_ty defined in qtype.c
      uses variable double_ty defined in qtype.c
      uses variable long_double_ty defined in qtype.c
      uses variable size_t_ty defined in qtype.c
      uses variable ptrdiff_t_ty defined in qtype.c
      uses variable next_qtype defined in qtype.c
   function qtype_error(qtype) in line 257
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable Qtypelist::qt defined in qtype.c
      uses function ecr_qtype(qtype) defined in qtype.c
      uses variable Qtype::type defined in qtype.c
   function qtype_primitive(qtype) in line 261
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable Qtypelist::qt defined in qtype.c
      uses function ecr_qtype(qtype) defined in qtype.c
      uses variable Qtype::type defined in qtype.c
   function qtype_char(qtype) in line 265
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable Qtypelist::qt defined in qtype.c
      uses function ecr_qtype(qtype) defined in qtype.c
      uses function qtype_primitive(qtype) defined in qtype.c
      uses variable Qtype::type defined in qtype.c
   function qtype_signed_char(qtype) in line 270
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable Qtypelist::qt defined in qtype.c
      uses function ecr_qtype(qtype) defined in qtype.c
      uses function qtype_primitive(qtype) defined in qtype.c
      uses variable Qtype::type defined in qtype.c
   function qtype_unsigned_char(qtype) in line 275
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable Qtypelist::qt defined in qtype.c
      uses function ecr_qtype(qtype) defined in qtype.c
      uses function qtype_primitive(qtype) defined in qtype.c
      uses variable Qtype::type defined in qtype.c
   function qtype_int(qtype) in line 280
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable Qtypelist::qt defined in qtype.c
      uses function ecr_qtype(qtype) defined in qtype.c
      uses function qtype_primitive(qtype) defined in qtype.c
      uses variable Qtype::type defined in qtype.c
   function qtype_unsigned_int(qtype) in line 285
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable Qtypelist::qt defined in qtype.c
      uses function ecr_qtype(qtype) defined in qtype.c
      uses function qtype_primitive(qtype) defined in qtype.c
      uses variable Qtype::type defined in qtype.c
   function qtype_float(qtype) in line 290
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable Qtypelist::qt defined in qtype.c
      uses function ecr_qtype(qtype) defined in qtype.c
      uses function qtype_primitive(qtype) defined in qtype.c
      uses variable Qtype::type defined in qtype.c
   function qtype_complex(qtype) in line 295
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable Qtypelist::qt defined in qtype.c
      uses function ecr_qtype(qtype) defined in qtype.c
      uses variable Qtype::type defined in qtype.c
   function qtype_aggregate(qtype) in line 299
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable Qtypelist::qt defined in qtype.c
      uses function ecr_qtype(qtype) defined in qtype.c
      uses function qtype_struct(qtype) defined in qtype.c
      uses function qtype_union(qtype) defined in qtype.c
   function qtype_struct(qtype) in line 303
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable Qtypelist::qt defined in qtype.c
      uses function ecr_qtype(qtype) defined in qtype.c
      uses variable Qtype::type defined in qtype.c
   function qtype_union(qtype) in line 308
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable Qtypelist::qt defined in qtype.c
      uses function ecr_qtype(qtype) defined in qtype.c
      uses variable Qtype::type defined in qtype.c
   function qtype_transparent(qtype) in line 313
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable Qtypelist::qt defined in qtype.c
      uses function ecr_qtype(qtype) defined in qtype.c
      uses variable Qtype::type defined in qtype.c
   function qtype_void(qtype) in line 318
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable Qtypelist::qt defined in qtype.c
      uses function ecr_qtype(qtype) defined in qtype.c
      uses variable Qtype::type defined in qtype.c
   function qtype_pointer(qtype) in line 323
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable Qtypelist::qt defined in qtype.c
      uses function ecr_qtype(qtype) defined in qtype.c
      uses variable Qtype::type defined in qtype.c
   function qtype_pointer_loc(qtype) in line 327
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable Qtypelist::qt defined in qtype.c
      uses function ecr_qtype(qtype) defined in qtype.c
      uses variable Qtype::type defined in qtype.c
   function qtype_pointer_or_loc(qtype) in line 331
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable Qtypelist::qt defined in qtype.c
      uses function ecr_qtype(qtype) defined in qtype.c
      uses variable Qtype::type defined in qtype.c
   function qtype_function(qtype) in line 335
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable Qtypelist::qt defined in qtype.c
      uses function ecr_qtype(qtype) defined in qtype.c
      uses variable Qtype::type defined in qtype.c
   function qtype_varargs(qtype) in line 339
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses variable Qtypelist::qt defined in qtype.c
      uses function ecr_qtype(qtype) defined in qtype.c
      uses variable Qtype::type defined in qtype.c
   function qtype_oldstyle(qtype) in line 345
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses variable Qtypelist::qt defined in qtype.c
      uses function ecr_qtype(qtype) defined in qtype.c
      uses variable Qtype::type defined in qtype.c
   function qtype_array(qtype) in line 351
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable Qtypelist::qt defined in qtype.c
      uses function ecr_qtype(qtype) defined in qtype.c
      uses variable Qtype::type defined in qtype.c
   function qtype_unsigned(qtype) in line 355
      protection public
      10 lines of code
      1 parameters
      1 conditional paths
      uses variable Qtypelist::qt defined in qtype.c
      uses function ecr_qtype(qtype) defined in qtype.c
      uses variable Qtype::type defined in qtype.c
   function qtype_smallerthanint(qtype) in line 365
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable Qtypelist::qt defined in qtype.c
      uses function ecr_qtype(qtype) defined in qtype.c
      uses variable Qtype::type defined in qtype.c
   function qtype_integral(qtype) in line 370
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses variable Qtypelist::qt defined in qtype.c
      uses function ecr_qtype(qtype) defined in qtype.c
      uses variable Qtype::type defined in qtype.c
   function qtype_string(qtype) in line 376
      protection public
      12 lines of code
      1 parameters
      1 conditional paths
      uses variable Qtypelist::qt defined in qtype.c
      uses function ecr_qtype(qtype) defined in qtype.c
      uses function qtype_array(qtype) defined in qtype.c
      uses macro definition FALSE defined in bool.h
      uses function array_of_qtype(qtype) defined in qtype.c
      uses function qtype_char(qtype) defined in qtype.c
      uses function qtype_unsigned_char(qtype) defined in qtype.c
      uses function qtype_signed_char(qtype) defined in qtype.c
   function qtype_var(qtype) in line 389
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable Qtypelist::qt defined in qtype.c
      uses function ecr_qtype(qtype) defined in qtype.c
      uses variable Qtype::type defined in qtype.c
   function qtype_scheme(qtype) in line 395
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable Qtypelist::qt defined in qtype.c
      uses variable Qtype::type defined in qtype.c
   function qtype_void_pointer(qtype) in line 402
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function qtype_pointer(qtype) defined in qtype.c
      uses variable Qtypelist::qt defined in qtype.c
      uses function qtype_void(qtype) defined in qtype.c
      uses function points_to_qtype(qtype) defined in qtype.c
   function qtype_char_pointer(qtype) in line 406
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function qtype_pointer(qtype) defined in qtype.c
      uses variable Qtypelist::qt defined in qtype.c
      uses function qtype_char(qtype) defined in qtype.c
      uses function points_to_qtype(qtype) defined in qtype.c
   function qtype_non_void_pointer(qtype) in line 410
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function qtype_pointer(qtype) defined in qtype.c
      uses variable Qtypelist::qt defined in qtype.c
      uses function qtype_void(qtype) defined in qtype.c
      uses function points_to_qtype(qtype) defined in qtype.c
   function qtype_void_pointer_loc(qtype) in line 415
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function qtype_pointer_loc(qtype) defined in qtype.c
      uses variable Qtypelist::qt defined in qtype.c
      uses function qtype_void(qtype) defined in qtype.c
      uses function points_to_aloc(aloc) defined in effect.c
      uses variable Qtype::type defined in qtype.c
   function qtype_char_pointer_loc(qtype) in line 420
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function qtype_pointer_loc(qtype) defined in qtype.c
      uses variable Qtypelist::qt defined in qtype.c
      uses function qtype_char(qtype) defined in qtype.c
      uses function points_to_aloc(aloc) defined in effect.c
      uses variable Qtype::type defined in qtype.c
   function qtype_non_void_pointer_loc(qtype) in line 425
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function qtype_pointer_loc(qtype) defined in qtype.c
      uses variable Qtypelist::qt defined in qtype.c
      uses function qtype_void(qtype) defined in qtype.c
      uses function points_to_aloc(aloc) defined in effect.c
      uses variable Qtype::type defined in qtype.c
   function mkqtype_void(qual) in line 437
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses macro definition ralloc defined in regions.h
      uses variable parse_region defined in c-parse.h
      uses variable Qtype::qual defined in qtype.c
      uses variable Qtype::type defined in qtype.c
      uses variable void_ty defined in qtype.c
      uses variable Qtype::conv defined in qtype.c
      uses macro definition NULL defined in config.h
   function mkqtype_bool(qual) in line 455
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses macro definition mkqtype defined in qtype.c
   function mkqtype_char(qual) in line 456
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses macro definition mkqtype defined in qtype.c
   function mkqtype_int(qual) in line 457
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses macro definition mkqtype defined in qtype.c
   function mkqtype_unsigned_int(qual) in line 458
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses macro definition mkqtype defined in qtype.c
   function mkqtype_long(qual) in line 459
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses macro definition mkqtype defined in qtype.c
   function mkqtype_unsigned_long(qual) in line 460
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses macro definition mkqtype defined in qtype.c
   function mkqtype_long_long(qual) in line 461
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses macro definition mkqtype defined in qtype.c
   function mkqtype_unsigned_long_long(qual) in line 462
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses macro definition mkqtype defined in qtype.c
   function mkqtype_float(qual) in line 463
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses macro definition mkqtype defined in qtype.c
   function mkqtype_double(qual) in line 464
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses macro definition mkqtype defined in qtype.c
   function mkqtype_size_t(qual) in line 465
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses macro definition mkqtype defined in qtype.c
   function mkqtype_ptrdiff_t(qual) in line 466
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses macro definition mkqtype defined in qtype.c
   function mkty_tagged(int,const char *,bool,bool,field) in line 468
      protection public
      15 lines of code
      5 parameters
      1 conditional paths
      uses macro definition ralloc defined in regions.h
      uses variable parse_region defined in c-parse.h
      uses macro definition NULL defined in config.h
      uses macro definition FALSE defined in bool.h
   function mkqtype_tagged(qual,int,const char *,bool,bool,field) in line 485
      protection public
      10 lines of code
      6 parameters
      1 conditional paths
      uses macro definition ralloc defined in regions.h
      uses variable parse_region defined in c-parse.h
      uses variable Qtype::qual defined in qtype.c
      uses variable Qtype::type defined in qtype.c
      uses function mkty_tagged(int,const char *,bool,bool,field) defined in qtype.c
      uses variable Qtype::conv defined in qtype.c
      uses macro definition NULL defined in config.h
   function mkty_pointer(qtype,aloc) in line 495
      protection public
      9 lines of code
      2 parameters
      1 conditional paths
      uses macro definition ralloc defined in regions.h
      uses variable parse_region defined in c-parse.h
      uses macro definition NULL defined in config.h
   function mkqtype_pointer(qual,qtype,aloc) in line 505
      protection public
      8 lines of code
      3 parameters
      1 conditional paths
      uses macro definition ralloc defined in regions.h
      uses variable parse_region defined in c-parse.h
      uses variable Qtype::qual defined in qtype.c
      uses variable Qtype::type defined in qtype.c
      uses function mkty_pointer(qtype,aloc) defined in qtype.c
      uses variable Qtype::conv defined in qtype.c
      uses macro definition NULL defined in config.h
   function mkty_pointer_loc(aloc) in line 514
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses macro definition ralloc defined in regions.h
      uses variable parse_region defined in c-parse.h
      uses macro definition NULL defined in config.h
   function mkqtype_pointer_loc(qual,aloc) in line 523
      protection public
      8 lines of code
      2 parameters
      1 conditional paths
      uses macro definition ralloc defined in regions.h
      uses variable parse_region defined in c-parse.h
      uses variable Qtype::qual defined in qtype.c
      uses variable Qtype::type defined in qtype.c
      uses function mkty_pointer_loc(aloc) defined in qtype.c
      uses variable Qtype::conv defined in qtype.c
      uses macro definition NULL defined in config.h
   function mkty_array(qtype,expression,aloc,aloc) in line 532
      protection public
      11 lines of code
      4 parameters
      1 conditional paths
      uses macro definition ralloc defined in regions.h
      uses variable parse_region defined in c-parse.h
      uses macro definition NULL defined in config.h
      uses variable Abstract_loc::u defined in effect.c
   function mkqtype_array(qual,qtype,expression,aloc,aloc) in line 544
      protection public
      9 lines of code
      5 parameters
      1 conditional paths
      uses macro definition ralloc defined in regions.h
      uses variable parse_region defined in c-parse.h
      uses variable Qtype::qual defined in qtype.c
      uses variable Qtype::type defined in qtype.c
      uses function mkty_array(qtype,expression,aloc,aloc) defined in qtype.c
      uses variable Qtype::conv defined in qtype.c
      uses macro definition NULL defined in config.h
   function mkty_function(bool,qual,bool,qtype,qtypelist,store,store,aloc,effect) in line 554
      protection public
      19 lines of code
      9 parameters
      1 conditional paths
      uses macro definition ralloc defined in regions.h
      uses variable parse_region defined in c-parse.h
      uses macro definition NULL defined in config.h
      uses variable type_qualifier::u defined in quals.c
      uses variable Store::u defined in iquals.tab.c
      uses variable Abstract_loc::u defined in effect.c
   function mkqtype_function(qual,bool,qual,bool,qtype,qtypelist,store,store,aloc,effect) in line 574
      protection public
      11 lines of code
      10 parameters
      1 conditional paths
      uses macro definition ralloc defined in regions.h
      uses variable parse_region defined in c-parse.h
      uses variable Qtype::qual defined in qtype.c
      uses variable Qtype::type defined in qtype.c
      uses function mkty_function(bool,qual,bool,qtype,qtypelist,store,store,aloc,effect) defined in qtype.c
      uses variable Qtype::conv defined in qtype.c
      uses macro definition NULL defined in config.h
   function mkty_var(const char *) in line 586
      protection public
      10 lines of code
      1 parameters
      1 conditional paths
      uses macro definition ralloc defined in regions.h
      uses variable parse_region defined in c-parse.h
      uses macro definition NULL defined in config.h
   function mkty_fresh(void) in line 597
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses function rstrcat(region,const char *,const char *) defined in utils.c
      uses variable parse_region defined in c-parse.h
      uses function inttostr(region,int) defined in utils.c
      uses variable next_qtype defined in qtype.c
      uses function mkty_var(const char *) defined in qtype.c
   function mkqtype_var(qual,const char *) in line 606
      protection public
      8 lines of code
      2 parameters
      1 conditional paths
      uses macro definition ralloc defined in regions.h
      uses variable parse_region defined in c-parse.h
      uses variable Qtype::qual defined in qtype.c
      uses variable Qtype::type defined in qtype.c
      uses function mkty_var(const char *) defined in qtype.c
      uses variable Qtype::conv defined in qtype.c
      uses macro definition NULL defined in config.h
   function mkqtype_fresh(void) in line 616
      protection public
      10 lines of code
      1 parameters
      1 conditional paths
      uses function make_fresh_qvar(const char *,location) defined in quals.c
      uses macro definition NULL defined in config.h
      uses function rstrcat(region,const char *,const char *) defined in utils.c
      uses variable parse_region defined in c-parse.h
      uses function inttostr(region,int) defined in utils.c
      uses variable next_qtype defined in qtype.c
      uses function mkqtype_var(qual,const char *) defined in qtype.c
   function mkty_scheme(qtype,ty_set,qual_set) in line 629
      protection public
      11 lines of code
      3 parameters
      1 conditional paths
      uses macro definition ralloc defined in regions.h
      uses variable parse_region defined in c-parse.h
      uses macro definition NULL defined in config.h
      uses variable Qtypelist::qt defined in qtype.c
   function mkqtype_scheme(qtype,ty_set,qual_set) in line 643
      protection public
      8 lines of code
      3 parameters
      1 conditional paths
      uses macro definition ralloc defined in regions.h
      uses variable parse_region defined in c-parse.h
      uses variable Qtype::qual defined in qtype.c
      uses macro definition NULL defined in config.h
      uses variable Qtype::type defined in qtype.c
      uses function mkty_scheme(qtype,ty_set,qual_set) defined in qtype.c
      uses variable Qtypelist::qt defined in qtype.c
      uses variable Qtype::conv defined in qtype.c
   function ty_qtype(qtype) in line 658
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function ecr_ty(ty) defined in qtype.c
      uses variable Qtypelist::qt defined in qtype.c
      uses variable Qtype::type defined in qtype.c
   function qual_qtype(qtype) in line 664
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable Qtypelist::qt defined in qtype.c
      uses function ecr_qtype(qtype) defined in qtype.c
      uses variable Qtype::qual defined in qtype.c
   function has_qual_qtype(qtype,qual) in line 672
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function has_qual(qual,qual) defined in quals.c
      uses function qual_qtype(qtype) defined in qtype.c
      uses variable Qtypelist::qt defined in qtype.c
   function alocs_qtype_as_effect(qtype,eff_kind) in line 678
      protection public
      86 lines of code
      2 parameters
      19 conditional paths
      uses variable restrict_qual defined in quals.c
      uses variable flag_flow_sensitive defined in flags.h
      uses macro definition NULL defined in config.h
      uses enumvalue eff_any defined in cqual.h
      uses enumvalue eff_last defined in cqual.h
      uses variable Qtypelist::qt defined in qtype.c
      uses function ecr_qtype(qtype) defined in qtype.c
      uses variable Qtype::type defined in qtype.c
      uses variable effect_empty defined in effect.c
      uses macro definition rarrayalloc defined in regions.h
      uses variable parse_region defined in c-parse.h
      uses function effect_fresh(void) defined in effect.c
      uses function f(char *) defined in taint-const-subtyping.c
      uses function mkleq_effect(effect,effect) defined in effect.c
      uses function constr_effect_qtype(qtype,eff_kind) defined in qtype.c
      uses function effect_constr(aloc,eff_kind) defined in effect.c
      uses enumvalue eff_alloc defined in cqual.h
      uses function qtype_aggregate(qtype) defined in qtype.c
      uses function qtype_array(qtype) defined in qtype.c
      uses function fail(const char *,...) defined in utils.c
   function alocs_qtype(qtype) in line 766
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function alocs_qtype_as_effect(qtype,eff_kind) defined in qtype.c
      uses variable Qtypelist::qt defined in qtype.c
      uses enumvalue eff_any defined in cqual.h
   function rwr_alocs_qtype(qtype) in line 772
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function alocs_qtype_as_effect(qtype,eff_kind) defined in qtype.c
      uses variable Qtypelist::qt defined in qtype.c
      uses enumvalue eff_rwr defined in cqual.h
   function r_alocs_qtype(qtype) in line 778
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function alocs_qtype_as_effect(qtype,eff_kind) defined in qtype.c
      uses variable Qtypelist::qt defined in qtype.c
      uses enumvalue eff_r defined in cqual.h
   function wr_alocs_qtype(qtype) in line 784
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function alocs_qtype_as_effect(qtype,eff_kind) defined in qtype.c
      uses variable Qtypelist::qt defined in qtype.c
      uses enumvalue eff_wr defined in cqual.h
   function defn_effect_qtype(qtype) in line 790
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function alocs_qtype_as_effect(qtype,eff_kind) defined in qtype.c
      uses variable Qtypelist::qt defined in qtype.c
      uses enumvalue eff_alloc defined in cqual.h
   function constr_effect_qtype(qtype,eff_kind) in line 796
      protection public
      12 lines of code
      2 parameters
      1 conditional paths
      uses enumvalue eff_any defined in cqual.h
      uses function alocs_qtype(qtype) defined in qtype.c
      uses variable Qtypelist::qt defined in qtype.c
      uses enumvalue eff_rwr defined in cqual.h
      uses function rwr_alocs_qtype(qtype) defined in qtype.c
      uses enumvalue eff_r defined in cqual.h
      uses function r_alocs_qtype(qtype) defined in qtype.c
      uses enumvalue eff_wr defined in cqual.h
      uses function wr_alocs_qtype(qtype) defined in qtype.c
      uses enumvalue eff_alloc defined in cqual.h
      uses function defn_effect_qtype(qtype) defined in qtype.c
      uses function fail(const char *,...) defined in utils.c
   function qtypelist_append(qtypelist *,qtype) in line 815
      protection public
      9 lines of code
      2 parameters
      2 conditional paths
      uses macro definition ralloc defined in regions.h
      uses variable parse_region defined in c-parse.h
      uses variable Qtypelist::qt defined in qtype.c
   function qtypelist_scan(qtypelist,qtypelist_scanner *) in line 825
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function qtypelist_next(qtypelist_scanner *) in line 830
      protection public
      10 lines of code
      1 parameters
      1 conditional paths
      uses variable Qtypelist::qt defined in qtype.c
      uses macro definition NULL defined in config.h
   function field_append(field *,field) in line 852
      protection public
      6 lines of code
      2 parameters
      2 conditional paths
      uses variable Field::next defined in qtype.c
      uses function f(char *) defined in taint-const-subtyping.c
   function convert_type_qtype(type,const char *,bool,qtype *,ctq_info) in line 874
      protection public
      367 lines of code
      5 parameters
      37 conditional paths
      uses variable Qtypelist::qt defined in qtype.c
      uses macro definition ralloc defined in regions.h
      uses variable parse_region defined in c-parse.h
      uses variable Qtype::conv defined in qtype.c
      uses macro definition NULL defined in config.h
      uses macro definition FALSE defined in bool.h
      uses function make_qvar_name_constrained(const char *,location,bool,qual *,user_qual_list,hash_table) defined in qtype.c
      uses variable ctq_info::loc defined in qtype.c
      uses variable Qtype::qual defined in qtype.c
      uses function type_user_quals(type) defined in types.c
      uses variable ctq_info::name_map defined in qtype.c
      uses function type_atomic(type) defined in types.c
      uses function type_void(type) defined in types.c
      uses variable Qtype::type defined in qtype.c
      uses variable void_ty defined in qtype.c
      uses function type_complex(type) defined in types.c
      uses function fail(const char *,...) defined in utils.c
      uses function type_char(type) defined in types.c
      uses variable char_ty defined in qtype.c
      uses function type_signed_char(type) defined in types.c
      uses variable signed_char_ty defined in qtype.c
      uses function type_unsigned_char(type) defined in types.c
      uses variable unsigned_char_ty defined in qtype.c
      uses function type_short(type) defined in types.c
      uses variable short_ty defined in qtype.c
      uses function type_unsigned_short(type) defined in types.c
      uses variable unsigned_short_ty defined in qtype.c
      uses function type_int(type) defined in types.c
      uses variable int_ty defined in qtype.c
      uses function type_unsigned_int(type) defined in types.c
      uses variable unsigned_int_ty defined in qtype.c
      uses function type_long(type) defined in types.c
      uses variable long_ty defined in qtype.c
      uses function type_unsigned_long(type) defined in types.c
      uses variable unsigned_long_ty defined in qtype.c
      uses function type_long_long(type) defined in types.c
      uses variable long_long_ty defined in qtype.c
      uses function type_unsigned_long_long(type) defined in types.c
      uses variable unsigned_long_long_ty defined in qtype.c
      uses function type_float(type) defined in types.c
      uses variable float_ty defined in qtype.c
      uses function type_double(type) defined in types.c
      uses variable double_ty defined in qtype.c
      uses function type_long_double(type) defined in types.c
      uses variable long_double_ty defined in qtype.c
      uses function report_qerror(location,severity,const char *,...) defined in analyze.c
      uses enumvalue sev_err defined in qerror.h
      uses function add_constraints_level(qual,type_quals,user_qual_list,level_qual_t,location) defined in qtype.c
      uses function type_qualifiers(type) defined in types.c
      uses enumvalue level_value defined in quals.h
      uses function type_function(type) defined in types.c
      uses function type_function_oldstyle(type) defined in types.c
      uses function type_function_varargs(type) defined in types.c
      uses function effect_var(const char *) defined in effect.c
      uses function rstrcat(region,const char *,const char *) defined in utils.c
      uses function mark_effect_interesting(effect) defined in effect.c
      uses function type_function_varargs_quals(type) defined in types.c
      uses function type_function_varargs_user_quals(type) defined in types.c
      uses variable ctq_info::generalize defined in qtype.c
      uses function type_function_return_type(type) defined in types.c
      uses function mkleq_effect(effect,effect) defined in effect.c
      uses function param_qual_effect(qtype) defined in qtype.c
      uses function type_function_arguments(type) defined in types.c
      uses function typelist_scan(typelist,typelist_scanner *) defined in types.c
      uses function typelist_next(typelist_scanner *) defined in types.c
      uses function rstrscat(region,...) defined in utils.c
      uses function inttostr(region,int) defined in utils.c
      uses function qtypelist_append(qtypelist *,qtype) defined in qtype.c
      uses function enforce_param_effects(qtypelist_scanner,location) defined in qtype.c
      uses function make_store_var(location,const char *) defined in effect.c
      uses function make_aloc(const char *,qtype) defined in effect.c
      uses function type_pointer(type) defined in types.c
      uses function type_points_to(type) defined in types.c
      uses variable const_qual defined in quals.c
      uses function qtype_function(qtype) defined in qtype.c
      uses function mkleq_qual(location,qual,qual) defined in quals.c
      uses enumvalue level_ref defined in quals.h
      uses function mkty_pointer(qtype,aloc) defined in qtype.c
      uses function type_array(type) defined in types.c
      uses function type_array_of(type) defined in types.c
      uses function mkty_array(qtype,expression,aloc,aloc) defined in qtype.c
      uses function type_array_size(type) defined in types.c
      uses function type_enum(type) defined in types.c
      uses function analyze_tag_ref(tag_ref) defined in analyze.c
      uses function type_tag(type) defined in types.c
      uses function type_struct(type) defined in types.c
      uses function type_union(type) defined in types.c
      uses variable tag_declaration::qtype defined in decls.h
      uses variable tag_declaration::name defined in decls.h
      uses function rstrdup(region,const char *) defined in regions.c
      uses variable tag_declaration::defined defined in decls.h
      uses function type_transparent(type) defined in types.c
      uses variable tag_declaration::fieldlist defined in decls.h
      uses variable field_declaration::next defined in decls.h
      uses function f(char *) defined in taint-const-subtyping.c
      uses function mkfield(const char *,qtype) defined in qtype.c
      uses variable field_declaration::name defined in decls.h
      uses function analyze_field_declaration(const char *,field_declaration) defined in analyze.c
      uses function field_append(field *,field) defined in qtype.c
      uses function type_var(type) defined in types.c
      uses function hash_table_lookup(hash_table,hash_key,hash_data *) defined in hash.c
      uses variable hash_key defined in hash.h
      uses function type_name(type) defined in types.c
      uses function mkty_var(const char *) defined in qtype.c
      uses macro definition insist defined in utils.h
      uses function hash_table_insert(hash_table,hash_key,hash_data) defined in hash.c
   function add_ddecl_qtype(data_declaration,bool) in line 889
      protection public
      125 lines of code
      2 parameters
      1 conditional paths
      uses variable data_declaration::kind defined in decls.h
      uses enumvalue decl_typedef defined in decls.h
      uses variable data_declaration::qtype defined in decls.h
      uses variable ctq_info::loc defined in qtype.c
      uses variable data_declaration::type defined in decls.h
      uses function type_function(type) defined in types.c
      uses function type_array(type) defined in types.c
      uses enumvalue decl_constant defined in decls.h
      uses function make_pointer_type(type) defined in types.c
      uses variable data_declaration::definition defined in decls.h
      uses function location_declaration(declaration) defined in analyze.c
      uses macro definition TRUE defined in bool.h
      uses variable data_declaration::ast defined in decls.h
      uses macro definition FALSE defined in bool.h
      uses function hash_table_reset(hash_table) defined in hash.c
      uses variable name_map defined in qtype.c
      uses variable ctq_info::name_map defined in qtype.c
      uses variable ctq_info::generalize defined in qtype.c
      uses function convert_type_qtype(type,const char *,bool,qtype *,ctq_info) defined in qtype.c
      uses variable data_declaration::name defined in decls.h
      uses function report_qerror(location,severity,const char *,...) defined in analyze.c
      uses enumvalue sev_err defined in qerror.h
      uses variable data_declaration::noreturn defined in decls.h
      uses variable noreturn_qual defined in quals.c
      uses function qtype_function(qtype) defined in qtype.c
      uses macro definition insistnot defined in utils.h
      uses function mkeq_qual(location,qual,qual) defined in quals.c
      uses function qual_qtype(qtype) defined in qtype.c
      uses variable data_declaration::__init defined in decls.h
      uses variable init_qual defined in quals.c
      uses function mkleq_qual(location,qual,qual) defined in quals.c
      uses function hash_table_size(hash_table) defined in hash.c
      uses function hash_table_scan(hash_table,hash_table_scanner *) defined in hash.c
      uses function hash_table_next(hash_table_scanner *,hash_key *,hash_data *) defined in hash.c
      uses variable hash_key defined in hash.h
      uses function is_qualifier_constraint(const char *) defined in qtype.c
      uses variable parse_region defined in c-parse.h
      uses function mkqtype_scheme(qtype,ty_set,qual_set) defined in qtype.c
      uses function aloc_qtype(qtype) defined in qtype.c
      uses function return_qtype(qtype) defined in qtype.c
      uses function effect_qtype(qtype) defined in qtype.c
      uses function mark_aloc_interesting(aloc) defined in effect.c
      uses function mkleq_effect(effect,effect) defined in effect.c
      uses function effect_wr(aloc) defined in effect.c
      uses function effect_alloc(aloc) defined in effect.c
   function get_fdecl_qtype(const char *,field_declaration) in line 1016
      protection public
      35 lines of code
      2 parameters
      1 conditional paths
      uses variable field_declaration::type defined in decls.h
      uses variable field_declaration::name defined in decls.h
      uses function type_function(type) defined in types.c
      uses function type_array(type) defined in types.c
      uses function make_pointer_type(type) defined in types.c
      uses variable ctq_info::loc defined in qtype.c
      uses function location_declaration(declaration) defined in analyze.c
      uses macro definition CAST defined in AST.h
      uses variable field_declaration::ast defined in decls.h
      uses variable ctq_info::name_map defined in qtype.c
      uses macro definition NULL defined in config.h
      uses variable ctq_info::generalize defined in qtype.c
      uses macro definition FALSE defined in bool.h
      uses function convert_type_qtype(type,const char *,bool,qtype *,ctq_info) defined in qtype.c
      uses function report_qerror(location,severity,const char *,...) defined in analyze.c
      uses variable AST_field_decl::loc defined in AST_defs.h
      uses enumvalue sev_err defined in qerror.h
   function type_to_qtype(type,const char *,location) in line 1428
      protection public
      13 lines of code
      3 parameters
      1 conditional paths
      uses function hash_table_reset(hash_table) defined in hash.c
      uses variable name_map defined in qtype.c
      uses variable ctq_info::loc defined in qtype.c
      uses variable ctq_info::name_map defined in qtype.c
      uses variable ctq_info::generalize defined in qtype.c
      uses macro definition FALSE defined in bool.h
      uses function convert_type_qtype(type,const char *,bool,qtype *,ctq_info) defined in qtype.c
      uses function report_qerror(location,severity,const char *,...) defined in analyze.c
      uses enumvalue sev_err defined in qerror.h
   function add_constraint_qual(qual,qual,location) in line 1443
      protection public
      17 lines of code
      3 parameters
      4 conditional paths
      uses function sign_qual(qual) defined in quals.c
      uses enumvalue sign_pos defined in quals.h
      uses function mkleq_qual(location,qual,qual) defined in quals.c
      uses variable ctq_info::loc defined in qtype.c
      uses enumvalue sign_neg defined in quals.h
      uses enumvalue sign_eq defined in quals.h
      uses function mkeq_qual(location,qual,qual) defined in quals.c
      uses function fail(const char *,...) defined in utils.c
   function digits_to_num(const char **) in line 1509
      protection public
      10 lines of code
      1 parameters
      3 conditional paths
   function subset_str(const char *,const char *,location) in line 1519
      protection public
      37 lines of code
      3 parameters
      7 conditional paths
      uses function is_qualifier_constraint(const char *) defined in qtype.c
      uses function digits_to_num(const char **) defined in qtype.c
      uses function report_qerror(location,severity,const char *,...) defined in analyze.c
      uses variable ctq_info::loc defined in qtype.c
      uses enumvalue sev_err defined in qerror.h
      uses macro definition FALSE defined in bool.h
      uses macro definition TRUE defined in bool.h
   function constrain_quals_by_name(qual,const char *,qual,const char *,location) in line 1558
      protection public
      12 lines of code
      5 parameters
      3 conditional paths
      uses macro definition FALSE defined in bool.h
      uses function subset_str(const char *,const char *,location) defined in qtype.c
      uses variable ctq_info::loc defined in qtype.c
      uses function mkleq_qual(location,qual,qual) defined in quals.c
   function match_type(type,type) in line 1728
      protection public
      109 lines of code
      2 parameters
      1 conditional paths
      uses function type_qualifiers(type) defined in types.c
      uses macro definition FALSE defined in bool.h
      uses function type_user_quals(type) defined in types.c
      uses variable user_qual_list::qual defined in types.h
      uses variable AST_user_qual::cstring defined in AST_defs.h
      uses variable cstring::data defined in cstring.h
      uses variable user_qual_list::next defined in types.h
      uses function type_void(type) defined in types.c
      uses function type_char(type) defined in types.c
      uses function type_signed_char(type) defined in types.c
      uses function type_unsigned_char(type) defined in types.c
      uses function type_short(type) defined in types.c
      uses function type_unsigned_short(type) defined in types.c
      uses function type_int(type) defined in types.c
      uses function type_unsigned_int(type) defined in types.c
      uses function type_long(type) defined in types.c
      uses function type_unsigned_long(type) defined in types.c
      uses function type_long_long(type) defined in types.c
      uses function type_unsigned_long_long(type) defined in types.c
      uses function type_float(type) defined in types.c
      uses function type_double(type) defined in types.c
      uses function type_long_double(type) defined in types.c
      uses macro definition TRUE defined in bool.h
      uses function type_function(type) defined in types.c
      uses function type_function_varargs(type) defined in types.c
      uses function type_function_oldstyle(type) defined in types.c
      uses function type_function_varargs_quals(type) defined in types.c
      uses function type_function_varargs_user_quals(type) defined in types.c
      uses function match_type(type,type) defined in qtype.c
      uses function type_function_return_type(type) defined in types.c
      uses function type_function_arguments(type) defined in types.c
      uses macro definition NULL defined in config.h
      uses function typelist_scan(typelist,typelist_scanner *) defined in types.c
      uses function typelist_next(typelist_scanner *) defined in types.c
      uses function type_pointer(type) defined in types.c
      uses function type_points_to(type) defined in types.c
      uses function type_array(type) defined in types.c
      uses function type_array_of(type) defined in types.c
      uses function type_struct(type) defined in types.c
      uses function type_union(type) defined in types.c
      uses function type_tag(type) defined in types.c
      uses variable tag_declaration::qtype defined in decls.h
      uses function eq_qtype(qtype,qtype) defined in qtype.c
      uses function type_enum(type) defined in types.c
   function make_qual_hash_table(region,int) in line 1852
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function make_hash_table(region,int,hash_fn,keyeq_fn) defined in hash.c
      uses function ptr_hash(void *) defined in utils.c
      uses function eq_qual(qual,qual) defined in quals.c
   function make_ty_hash_table(region,int) in line 1857
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function make_hash_table(region,int,hash_fn,keyeq_fn) defined in hash.c
      uses function ptr_hash(void *) defined in utils.c
      uses function eq_ty(ty,ty) defined in qtype.c
   function copy_qtype_qsubs(qual,void *) in line 1955
      protection public
      33 lines of code
      2 parameters
      3 conditional paths
      uses function hash_table_lookup(hash_table,hash_key,hash_data *) defined in hash.c
      uses variable copy_info::qmap defined in qtype.c
      uses function name_qual(qual) defined in quals.c
      uses function alloca(size_t) defined in alloca.c
      uses function make_fresh_qvar(const char *,location) defined in quals.c
      uses variable copy_info::loc defined in qtype.c
      uses macro definition insist defined in utils.h
      uses function hash_table_insert(hash_table,hash_key,hash_data) defined in hash.c
   function copy_qtype_tsubs(ty,void *) in line 1989
      protection public
      14 lines of code
      2 parameters
      2 conditional paths
      uses function hash_table_lookup(hash_table,hash_key,hash_data *) defined in hash.c
      uses variable copy_info::vmap defined in qtype.c
      uses function mkty_fresh(void) defined in qtype.c
      uses macro definition insist defined in utils.h
      uses function hash_table_insert(hash_table,hash_key,hash_data) defined in hash.c
   function copy_qtype(qtype,location) in line 2004
      protection public
      9 lines of code
      2 parameters
      1 conditional paths
      uses variable copy_info::loc defined in qtype.c
      uses variable copy_info::qmap defined in qtype.c
      uses function make_qual_hash_table(region,int) defined in qtype.c
      uses variable scratch_region defined in qtype.c
      uses variable copy_info::vmap defined in qtype.c
      uses function make_ty_hash_table(region,int) defined in qtype.c
      uses function substitute_qtype(qtype,qual(*)(qual, void *arg),void *,ty(*)(ty, void *arg),void *) defined in qtype.c
      uses variable Qtypelist::qt defined in qtype.c
      uses function copy_qtype_qsubs(qual,void *) defined in qtype.c
      uses function copy_qtype_tsubs(ty,void *) defined in qtype.c
   function instantiate_qtype_qsubs(qual,void *) in line 2040
      protection public
      53 lines of code
      2 parameters
      7 conditional paths
      uses variable inst_info::qvars defined in qtype.c
      uses function hash_table_lookup(hash_table,hash_key,hash_data *) defined in hash.c
      uses variable inst_info::qmap defined in qtype.c
      uses function rstrcat(region,const char *,const char *) defined in utils.c
      uses variable parse_region defined in c-parse.h
      uses function name_qual(qual) defined in quals.c
      uses variable inst_info::suffix defined in qtype.c
      uses function make_qvar(const char *,location,bool) defined in quals.c
      uses variable inst_info::loc defined in qtype.c
      uses macro definition FALSE defined in bool.h
      uses macro definition insist defined in utils.h
      uses function hash_table_insert(hash_table,hash_key,hash_data) defined in hash.c
      uses macro definition scan_qual_edge_set defined in containers.h
      uses function lb_qual(qual) defined in quals.c
      uses variable Qual_edge::qual defined in quals.h
      uses variable Qual_edge::loc defined in quals.h
      uses function constant_qual(qual) defined in quals.c
      uses function mkleq_qual(location,qual,qual) defined in quals.c
      uses function variable_qual(qual) defined in quals.c
      uses function fail(const char *,...) defined in utils.c
      uses function ub_qual(qual) defined in quals.c
   function instantiate_qtype_tsubs(ty,void *) in line 2094
      protection public
      16 lines of code
      2 parameters
      3 conditional paths
      uses variable inst_info::tyvars defined in qtype.c
      uses function hash_table_lookup(hash_table,hash_key,hash_data *) defined in hash.c
      uses variable inst_info::vmap defined in qtype.c
      uses function mkty_fresh(void) defined in qtype.c
      uses macro definition insist defined in utils.h
      uses function hash_table_insert(hash_table,hash_key,hash_data) defined in hash.c
   function instantiate_qtype(qtype,location) in line 2112
      protection public
      19 lines of code
      2 parameters
      1 conditional paths
      uses function qtype_scheme(qtype) defined in qtype.c
      uses variable Qtypelist::qt defined in qtype.c
      uses variable inst_info::loc defined in qtype.c
      uses variable inst_info::tyvars defined in qtype.c
      uses variable Qtype::type defined in qtype.c
      uses variable inst_info::qvars defined in qtype.c
      uses variable inst_info::qmap defined in qtype.c
      uses function make_qual_hash_table(region,int) defined in qtype.c
      uses variable scratch_region defined in qtype.c
      uses variable inst_info::vmap defined in qtype.c
      uses function make_ty_hash_table(region,int) defined in qtype.c
      uses variable inst_info::suffix defined in qtype.c
      uses function rstrcat(region,const char *,const char *) defined in utils.c
      uses variable parse_region defined in c-parse.h
      uses function inttostr(region,int) defined in utils.c
      uses function substitute_qtype(qtype,qual(*)(qual, void *arg),void *,ty(*)(ty, void *arg),void *) defined in qtype.c
      uses function instantiate_qtype_qsubs(qual,void *) defined in qtype.c
      uses function instantiate_qtype_tsubs(ty,void *) defined in qtype.c
   function qual_gather_reachable_qvars(qual,qual_set *) in line 2133
      protection public
      15 lines of code
      2 parameters
      2 conditional paths
      uses function variable_qual(qual) defined in quals.c
      uses variable inst_info::qvars defined in qtype.c
      uses variable parse_region defined in c-parse.h
      uses macro definition scan_qual_edge_set defined in containers.h
      uses function lb_qual(qual) defined in quals.c
      uses variable Qual_edge::qual defined in quals.h
      uses function ub_qual(qual) defined in quals.c
   function qtype_gather_vars(qtype,ty_set *,qual_set *) in line 2150
      protection public
      41 lines of code
      3 parameters
      15 conditional paths
      uses function variable_qual(qual) defined in quals.c
      uses variable Qtypelist::qt defined in qtype.c
      uses variable Qtype::qual defined in qtype.c
      uses function qual_gather_reachable_qvars(qual,qual_set *) defined in qtype.c
      uses variable inst_info::qvars defined in qtype.c
      uses variable Qtype::type defined in qtype.c
      uses variable inst_info::tyvars defined in qtype.c
      uses function qtypelist_scan(qtypelist,qtypelist_scanner *) defined in qtype.c
      uses function qtypelist_next(qtypelist_scanner *) defined in qtype.c
      uses variable parse_region defined in c-parse.h
      uses function fail(const char *,...) defined in utils.c
   function generalize_qtype(qtype) in line 2194
      protection public
      13 lines of code
      1 parameters
      1 conditional paths
      uses variable inst_info::tyvars defined in qtype.c
      uses variable inst_info::qvars defined in qtype.c
      uses function qtype_scheme(qtype) defined in qtype.c
      uses variable Qtypelist::qt defined in qtype.c
      uses function qtype_gather_vars(qtype,ty_set *,qual_set *) defined in qtype.c
      uses function mkqtype_scheme(qtype,ty_set,qual_set) defined in qtype.c
   function match_qtype(qtype,qtype,void(*)(qual q1, qual q2, void *arg),void *) in line 2217
      protection public
      61 lines of code
      4 parameters
      1 conditional paths
      uses function ecr_qtype(qtype) defined in qtype.c
      uses variable Qtype::qual defined in qtype.c
      uses variable Qtype::type defined in qtype.c
      uses macro definition TRUE defined in bool.h
      uses function match_qtype(qtype,qtype,void(*)(qual q1, qual q2, void *arg),void *) defined in qtype.c
      uses function eq_aloc(aloc,aloc) defined in containers.h
      uses function return_qtype(qtype) defined in qtype.c
      uses function qtypelist_scan(qtypelist,qtypelist_scanner *) defined in qtype.c
      uses function arg_qtypes(qtype) defined in qtype.c
      uses function qtypelist_next(qtypelist_scanner *) defined in qtype.c
      uses function qtype_oldstyle(qtype) defined in qtype.c
      uses function qtype_varargs(qtype) defined in qtype.c
      uses function vqual_qtype(qtype) defined in qtype.c
      uses macro definition FALSE defined in bool.h
   function complex_base_qtype(qtype) in line 2280
      protection public
      13 lines of code
      1 parameters
      1 conditional paths
      uses variable Qtypelist::qt defined in qtype.c
      uses function ecr_qtype(qtype) defined in qtype.c
      uses variable Qtype::type defined in qtype.c
      uses macro definition ralloc defined in regions.h
      uses variable parse_region defined in c-parse.h
      uses variable Qtype::qual defined in qtype.c
      uses variable Qtype::conv defined in qtype.c
      uses macro definition NULL defined in config.h
   function points_to_qtype(qtype) in line 2295
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses variable Qtypelist::qt defined in qtype.c
      uses function ecr_qtype(qtype) defined in qtype.c
      uses variable Qtype::type defined in qtype.c
   function aloc_qtype(qtype) in line 2303
      protection public
      20 lines of code
      1 parameters
      1 conditional paths
      uses variable Qtypelist::qt defined in qtype.c
      uses function ecr_qtype(qtype) defined in qtype.c
      uses variable Qtype::type defined in qtype.c
      uses function aloc_qtype(qtype) defined in qtype.c
      uses function fail(const char *,...) defined in utils.c
   function array_of_qtype(qtype) in line 2325
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses variable Qtypelist::qt defined in qtype.c
      uses function ecr_qtype(qtype) defined in qtype.c
      uses variable Qtype::type defined in qtype.c
   function array_size_qtype(qtype) in line 2333
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses variable Qtypelist::qt defined in qtype.c
      uses function ecr_qtype(qtype) defined in qtype.c
      uses variable Qtype::type defined in qtype.c
   function array_aloc_qtype(qtype) in line 2341
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses variable Qtypelist::qt defined in qtype.c
      uses function ecr_qtype(qtype) defined in qtype.c
      uses variable Qtype::type defined in qtype.c
   function return_qtype(qtype) in line 2349
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses variable Qtypelist::qt defined in qtype.c
      uses function ecr_qtype(qtype) defined in qtype.c
      uses variable Qtype::type defined in qtype.c
   function arg_qtypes(qtype) in line 2357
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses variable Qtypelist::qt defined in qtype.c
      uses function ecr_qtype(qtype) defined in qtype.c
      uses variable Qtype::type defined in qtype.c
   function effect_qtype(qtype) in line 2365
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses variable Qtypelist::qt defined in qtype.c
      uses function ecr_qtype(qtype) defined in qtype.c
      uses variable Qtype::type defined in qtype.c
   function vqual_qtype(qtype) in line 2373
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses variable Qtypelist::qt defined in qtype.c
      uses function ecr_qtype(qtype) defined in qtype.c
      uses variable Qtype::type defined in qtype.c
   function store_in_qtype(qtype) in line 2382
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses variable Qtypelist::qt defined in qtype.c
      uses function ecr_qtype(qtype) defined in qtype.c
      uses variable Qtype::type defined in qtype.c
   function store_out_qtype(qtype) in line 2390
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses variable Qtypelist::qt defined in qtype.c
      uses function ecr_qtype(qtype) defined in qtype.c
      uses variable Qtype::type defined in qtype.c
   function tag_name_qtype(qtype) in line 2398
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses variable Qtypelist::qt defined in qtype.c
      uses function ecr_qtype(qtype) defined in qtype.c
      uses variable Qtype::type defined in qtype.c
   function field_qtype(qtype,cstring) in line 2407
      protection public
      11 lines of code
      2 parameters
      1 conditional paths
      uses function f(char *) defined in taint-const-subtyping.c
      uses variable Qtypelist::qt defined in qtype.c
      uses function ecr_qtype(qtype) defined in qtype.c
      uses function qtype_aggregate(qtype) defined in qtype.c
      uses variable Qtype::type defined in qtype.c
      uses variable cstring::data defined in cstring.h
      uses function fail(const char *,...) defined in utils.c
   function field_scan(qtype,field_scanner *) in line 2420
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
      uses variable Qtypelist::qt defined in qtype.c
      uses function ecr_qtype(qtype) defined in qtype.c
      uses function qtype_aggregate(qtype) defined in qtype.c
      uses variable Qtype::type defined in qtype.c
   function field_scan_at(qtype,cstring,field_scanner *) in line 2429
      protection public
      13 lines of code
      3 parameters
      1 conditional paths
      uses function f(char *) defined in taint-const-subtyping.c
      uses variable Qtypelist::qt defined in qtype.c
      uses function ecr_qtype(qtype) defined in qtype.c
      uses function qtype_aggregate(qtype) defined in qtype.c
      uses variable Qtype::type defined in qtype.c
      uses variable cstring::data defined in cstring.h
   function field_next(field_scanner *) in line 2444
      protection public
      11 lines of code
      1 parameters
      1 conditional paths
      uses function f(char *) defined in taint-const-subtyping.c
      uses macro definition NULL defined in config.h
   function toEq(mkXeq) in line 2495
      protection public
      11 lines of code
      1 parameters
      4 conditional paths
      uses enumvalue mkleq defined in qtype.c
      uses enumvalue mkeq defined in qtype.c
      uses enumvalue unify defined in qtype.c
      uses function fail(const char *,...) defined in utils.c
   function mkXeq_qual(qual,qual,mkXeq,location) in line 2509
      protection public
      14 lines of code
      4 parameters
      4 conditional paths
      uses enumvalue mkleq defined in qtype.c
      uses function mkleq_qual(location,qual,qual) defined in quals.c
      uses variable inst_info::loc defined in qtype.c
      uses enumvalue mkeq defined in qtype.c
      uses function mkeq_qual(location,qual,qual) defined in quals.c
      uses enumvalue unify defined in qtype.c
      uses function unify_qual(location,qual,qual) defined in quals.c
      uses function fail(const char *,...) defined in utils.c
   function mkXeq_effect(effect,effect,mkXeq) in line 2525
      protection public
      17 lines of code
      3 parameters
      4 conditional paths
      uses enumvalue mkleq defined in qtype.c
      uses function mkleq_effect(effect,effect) defined in effect.c
      uses enumvalue mkeq defined in qtype.c
      uses function mkeq_effect(effect,effect) defined in effect.c
      uses enumvalue unify defined in qtype.c
      uses function unify_effect(effect,effect) defined in effect.c
      uses function fail(const char *,...) defined in utils.c
   function mkXeq_store(location,store,store,mkXeq) in line 2544
      protection public
      17 lines of code
      4 parameters
      4 conditional paths
      uses enumvalue mkleq defined in qtype.c
      uses function mkleq_store(location,const char *,store,store) defined in effect.c
      uses variable inst_info::loc defined in qtype.c
      uses enumvalue mkeq defined in qtype.c
      uses function mkeq_store(location,const char *,store,store) defined in effect.c
      uses enumvalue unify defined in qtype.c
      uses function unify_store(location,const char *,store,store) defined in effect.c
      uses function fail(const char *,...) defined in utils.c
   function unify_ty_alocs(ty,ty) in line 2564
      protection public
      15 lines of code
      2 parameters
      4 conditional paths
      uses macro definition FALSE defined in bool.h
      uses enumvalue eff_any defined in cqual.h
      uses enumvalue eff_last defined in cqual.h
      uses function eq_effect(effect,effect) defined in effect.c
      uses variable effect_empty defined in effect.c
      uses function unify_effect(effect,effect) defined in effect.c
      uses function mkXeq_qtype(location,qtype,qtype,mkXeq,bool) defined in qtype.c
      uses variable inst_info::loc defined in qtype.c
   function mkXeq_qtype(location,qtype,qtype,mkXeq,bool) in line 2585
      protection public
      312 lines of code
      5 parameters
      37 conditional paths
      uses macro definition FALSE defined in bool.h
      uses function ecr_qtype(qtype) defined in qtype.c
      uses function qtype_error(qtype) defined in qtype.c
      uses function mkXeq_qual(qual,qual,mkXeq,location) defined in qtype.c
      uses function qual_qtype(qtype) defined in qtype.c
      uses function ty_qtype(qtype) defined in qtype.c
      uses variable flag_const_subtyping defined in flags.h
      uses variable const_qual defined in quals.c
      uses function has_lb_qual(qual,qual) defined in quals.c
      uses function toEq(mkXeq) defined in qtype.c
      uses function unify_aloc(location,aloc,aloc) defined in effect.c
      uses enumvalue unify defined in qtype.c
      uses function unify_ty_alocs(ty,ty) defined in qtype.c
      uses function eq_aloc(aloc,aloc) defined in containers.h
      uses function equate_all_quals_qtype(location,qtype,qual) defined in qtype.c
      uses variable Qtype::qual defined in qtype.c
      uses function mkeq_qual(location,qual,qual) defined in quals.c
      uses variable Field::name defined in qtype.c
      uses variable Field::qtype defined in qtype.c
      uses macro definition TRUE defined in bool.h
      uses function growbuf_empty(growbuf) defined in buffer.c
      uses variable qtype_error_detail defined in qerror.c
      uses function qtype_ed_printf(const char *,...) defined in qerror.c
      uses variable Field::next defined in qtype.c
      uses function mkXeq_effect(effect,effect,mkXeq) defined in qtype.c
      uses variable flag_flow_sensitive defined in flags.h
      uses function qtypelist_scan(qtypelist,qtypelist_scanner *) defined in qtype.c
      uses function qtypelist_next(qtypelist_scanner *) defined in qtype.c
      uses variable restrict_qual defined in quals.c
      uses function mkXeq_store(location,store,store,mkXeq) defined in qtype.c
      uses macro definition scan_ty_set defined in containers.h
      uses function mkXeq_ty(location,ty,ty,mkXeq,bool) defined in qtype.c
      uses enumvalue mkleq defined in qtype.c
      uses function copy_ty(ty,location) defined in qtype.c
      uses macro definition NULL defined in config.h
      uses variable parse_region defined in c-parse.h
      uses macro definition insistnot defined in utils.h
   function mkXeq_ty(location,ty,ty,mkXeq,bool) in line 2591
      protection public
      15 lines of code
      5 parameters
      2 conditional paths
      uses macro definition NULL defined in config.h
      uses function make_fresh_qvar(const char *,location) defined in quals.c
      uses variable Qtype::qual defined in qtype.c
      uses variable Qtype::type defined in qtype.c
      uses variable Qtype::conv defined in qtype.c
      uses function mkXeq_qtype(location,qtype,qtype,mkXeq,bool) defined in qtype.c
   function mkXeq_qtype_err(location,qtype,qtype,mkXeq,bool,store) in line 2922
      protection public
      50 lines of code
      6 parameters
      10 conditional paths
      uses function print_qtype(printf_func,qtype,store) defined in qtype.c
      uses function printf(const char *$NONYEAR,(null)) defined in rcs1.c
      uses enumvalue mkleq defined in qtype.c
      uses enumvalue mkeq defined in qtype.c
      uses enumvalue unify defined in qtype.c
      uses function mkXeq_qtype(location,qtype,qtype,mkXeq,bool) defined in qtype.c
      uses function growbuf_empty(growbuf) defined in buffer.c
      uses variable qual_error_detail defined in qerror.c
      uses variable qtype_error_detail defined in qerror.c
      uses function qtype_ed_printf(const char *,...) defined in qerror.c
      uses function print_ty_structure(printf_func,ty,store) defined in qtype.c
      uses variable Qtype::type defined in qtype.c
      uses macro definition NULL defined in config.h
      uses function print_qtype_raw(printf_func,qtype,store) defined in qtype.c
   function mkleq_qtype(location,qtype,qtype) in line 2974
      protection public
      4 lines of code
      3 parameters
      1 conditional paths
      uses function mkXeq_qtype_err(location,qtype,qtype,mkXeq,bool,store) defined in qtype.c
      uses enumvalue mkleq defined in qtype.c
      uses macro definition FALSE defined in bool.h
      uses macro definition NULL defined in config.h
   function mkeq_qtype(location,qtype,qtype) in line 2980
      protection public
      4 lines of code
      3 parameters
      1 conditional paths
      uses function mkXeq_qtype_err(location,qtype,qtype,mkXeq,bool,store) defined in qtype.c
      uses enumvalue mkeq defined in qtype.c
      uses macro definition FALSE defined in bool.h
      uses macro definition NULL defined in config.h
   function unify_qtype(location,qtype,qtype) in line 2986
      protection public
      4 lines of code
      3 parameters
      1 conditional paths
      uses function mkXeq_qtype_err(location,qtype,qtype,mkXeq,bool,store) defined in qtype.c
      uses enumvalue unify defined in qtype.c
      uses macro definition FALSE defined in bool.h
      uses macro definition NULL defined in config.h
   function mkeq_qtype_cast(location,qtype,qtype) in line 2995
      protection public
      4 lines of code
      3 parameters
      1 conditional paths
      uses function mkXeq_qtype_err(location,qtype,qtype,mkXeq,bool,store) defined in qtype.c
      uses enumvalue mkeq defined in qtype.c
      uses macro definition TRUE defined in bool.h
      uses macro definition NULL defined in config.h
   function lub_qtype(location,qtype,qtype,qtype *) in line 3000
      protection public
      9 lines of code
      4 parameters
      1 conditional paths
      uses function copy_qtype(qtype,location) defined in qtype.c
      uses function mkleq_qtype(location,qtype,qtype) defined in qtype.c
   function eq_qtype(qtype,qtype) in line 3028
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses function eq_qual(qual,qual) defined in quals.c
      uses variable Qtype::qual defined in qtype.c
      uses function eq_ty(ty,ty) defined in qtype.c
      uses variable Qtype::type defined in qtype.c
   function traverse_quals_qtype(qtype,void(*)(qual q, void *arg),void *) in line 3035
      protection public
      52 lines of code
      3 parameters
      9 conditional paths
      uses variable Qtypelist::qt defined in qtype.c
      uses function ecr_qtype(qtype) defined in qtype.c
      uses function f(char *) defined in taint-const-subtyping.c
      uses variable Qtype::qual defined in qtype.c
      uses variable Qtype::type defined in qtype.c
      uses function fail(const char *,...) defined in utils.c
   function equate_traverse_fn(qual,void *) in line 3095
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses variable eqtq_info::result defined in qtype.c
      uses function mkeq_qual(location,qual,qual) defined in quals.c
      uses variable eqtq_info::loc defined in qtype.c
      uses variable eqtq_info::q defined in qtype.c
   function varargs_traverse_fn(qual,void *) in line 3120
      protection public
      18 lines of code
      2 parameters
      1 conditional paths
      uses function make_fresh_qvar(const char *,location) defined in quals.c
      uses function name_qual(qual) defined in quals.c
      uses function location_qual(qual) defined in quals.c
      uses variable vtq_info::q defined in qtype.c
      uses macro definition scan_qual_edge_set defined in containers.h
      uses function lb_qual(qual) defined in quals.c
      uses variable vtq_info::result defined in qtype.c
      uses function mkleq_qual(location,qual,qual) defined in quals.c
      uses variable Qual_edge::loc defined in quals.h
      uses variable Qual_edge::qual defined in quals.h
      uses function ub_qual(qual) defined in quals.c
      uses function mkeq_qual(location,qual,qual) defined in quals.c
      uses variable vtq_info::loc defined in qtype.c
   function varargs_constrain_quals_qtype(location,qtype,qual) in line 3143
      protection public
      6 lines of code
      3 parameters
      1 conditional paths
      uses variable vtq_info::q defined in qtype.c
      uses macro definition FALSE defined in bool.h
      uses variable vtq_info::loc defined in qtype.c
      uses function traverse_quals_qtype(qtype,void(*)(qual q, void *arg),void *) defined in qtype.c
      uses variable Qtypelist::qt defined in qtype.c
      uses function varargs_traverse_fn(qual,void *) defined in qtype.c
      uses variable vtq_info::result defined in qtype.c
   function mknin_effect_qtype(location,effect,qtype) in line 3151
      protection public
      8 lines of code
      3 parameters
      1 conditional paths
      uses function alocs_qtype(qtype) defined in qtype.c
      uses variable Qtypelist::qt defined in qtype.c
      uses function mknin_effect(location,effect,effect) defined in effect.c
      uses variable vtq_info::loc defined in qtype.c
   function default_conversion_qtype(qtype) in line 3168
      protection public
      63 lines of code
      1 parameters
      1 conditional paths
      uses variable Qtypelist::qt defined in qtype.c
      uses function ecr_qtype(qtype) defined in qtype.c
      uses variable Qtype::conv defined in qtype.c
      uses function qtype_function(qtype) defined in qtype.c
      uses variable vtq_info::q defined in qtype.c
      uses function make_qvar(const char *,location,bool) defined in quals.c
      uses macro definition NULL defined in config.h
      uses macro definition FALSE defined in bool.h
      uses variable const_qual defined in quals.c
      uses function mkleq_qual(location,qual,qual) defined in quals.c
      uses function mkqtype_pointer(qual,qtype,aloc) defined in qtype.c
      uses variable Qtype::type defined in qtype.c
      uses function qtype_array(qtype) defined in qtype.c
      uses variable Qtype::qual defined in qtype.c
   function internal_mkleq_assign_convert(location,qtype,qtype,store) in line 3251
      protection public
      81 lines of code
      4 parameters
      16 conditional paths
      uses variable vtq_info::result defined in qtype.c
      uses function qtype_void_pointer(qtype) defined in qtype.c
      uses function qtype_non_void_pointer(qtype) defined in qtype.c
      uses function mkleq_qual(location,qual,qual) defined in quals.c
      uses variable vtq_info::loc defined in qtype.c
      uses function qual_qtype(qtype) defined in qtype.c
      uses variable flag_casts_preserve defined in flags.h
      uses function mkeq_qtype_cast(location,qtype,qtype) defined in qtype.c
      uses function points_to_qtype(qtype) defined in qtype.c
      uses function qtype_void_pointer_loc(qtype) defined in qtype.c
      uses function qtype_non_void_pointer_loc(qtype) defined in qtype.c
      uses variable flag_casts_warn defined in flags.h
      uses function mk_no_qual_qtype_fs(location,qtype,store) defined in qtype.c
      uses function points_to_fs_qtype(qtype,store) defined in qtype.c
      uses function qtype_pointer_or_loc(qtype) defined in qtype.c
      uses function qtype_integral(qtype) defined in qtype.c
      uses function qtype_transparent(qtype) defined in qtype.c
      uses function match_qtype(qtype,qtype,void(*)(qual q1, qual q2, void *arg),void *) defined in qtype.c
      uses macro definition NULL defined in config.h
      uses function field_scan(qtype,field_scanner *) defined in qtype.c
      uses function field_next(field_scanner *) defined in qtype.c
      uses function qtype_array(qtype) defined in qtype.c
      uses function qtype_function(qtype) defined in qtype.c
      uses function qtype_pointer(qtype) defined in qtype.c
      uses function qtype_pointer_loc(qtype) defined in qtype.c
      uses function fail(const char *,...) defined in utils.c
      uses function mkXeq_qtype_err(location,qtype,qtype,mkXeq,bool,store) defined in qtype.c
      uses enumvalue mkleq defined in qtype.c
      uses macro definition FALSE defined in bool.h
   function mkleq_assign_convert(location,qtype,qtype) in line 3334
      protection public
      4 lines of code
      3 parameters
      1 conditional paths
      uses function internal_mkleq_assign_convert(location,qtype,qtype,store) defined in qtype.c
      uses variable vtq_info::loc defined in qtype.c
      uses macro definition NULL defined in config.h
   function print_ty_qf(printf_func,pr_qual_fn,ty,store,bool) in line 3348
      protection public
      170 lines of code
      5 parameters
      41 conditional paths
      uses variable vtq_info::result defined in qtype.c
      uses function ecr_ty(ty) defined in qtype.c
      uses function fail(const char *,...) defined in utils.c
      uses function print_aloc(printf_func,aloc) defined in effect.c
      uses function print_qtype_qf(printf_func,pr_qual_fn,qtype,store,bool) defined in qtype.c
      uses variable Abstract_loc::u defined in effect.c
      uses function qtype_from_store(store,aloc) defined in effect.c
      uses macro definition TRUE defined in bool.h
      uses function qtypelist_scan(qtypelist,qtypelist_scanner *) defined in qtype.c
      uses function qtypelist_next(qtypelist_scanner *) defined in qtype.c
      uses macro definition FALSE defined in bool.h
      uses variable flag_print_stores defined in flags.h
      uses function print_store_cells(printf_func,pr_qual_fn,store,bool) defined in effect.c
      uses macro definition scan_ty_set defined in containers.h
      uses macro definition scan_qual_set defined in containers.h
      uses function print_qual_raw(printf_func,qual) defined in quals.c
   function print_qtype_qf(printf_func,pr_qual_fn,qtype,store,bool) in line 3521
      protection public
      18 lines of code
      5 parameters
      1 conditional paths
      uses variable vtq_info::result defined in qtype.c
      uses variable Qtypelist::qt defined in qtype.c
      uses function ecr_qtype(qtype) defined in qtype.c
      uses function qtype_error(qtype) defined in qtype.c
      uses function qtype_scheme(qtype) defined in qtype.c
      uses variable Qtype::qual defined in qtype.c
      uses macro definition NULL defined in config.h
      uses function print_ty_qf(printf_func,pr_qual_fn,ty,store,bool) defined in qtype.c
      uses variable Qtype::type defined in qtype.c
   function print_qtype_raw(printf_func,qtype,store) in line 3541
      protection public
      4 lines of code
      3 parameters
      1 conditional paths
      uses function print_qtype_qf(printf_func,pr_qual_fn,qtype,store,bool) defined in qtype.c
      uses function print_qual_raw(printf_func,qual) defined in quals.c
      uses variable Qtypelist::qt defined in qtype.c
      uses macro definition TRUE defined in bool.h
   function print_qtype(printf_func,qtype,store) in line 3547
      protection public
      4 lines of code
      3 parameters
      1 conditional paths
      uses function print_qtype_qf(printf_func,pr_qual_fn,qtype,store,bool) defined in qtype.c
      uses function print_qual(printf_func,qual) defined in quals.c
      uses variable Qtypelist::qt defined in qtype.c
      uses macro definition FALSE defined in bool.h
   function color_qtype(qtype,store) in line 3635
      protection public
      52 lines of code
      2 parameters
      1 conditional paths
      uses variable Qtypelist::qt defined in qtype.c
      uses function ecr_qtype(qtype) defined in qtype.c
      uses function qtype_scheme(qtype) defined in qtype.c
      uses function qtype_error(qtype) defined in qtype.c
      uses variable Qtype::qual defined in qtype.c
      uses macro definition NULL defined in config.h
      uses function color_qual(qual) defined in quals.c
      uses variable Qtype::type defined in qtype.c
      uses function combine_colors_pam(const char *,const char *) defined in color.h
      uses function color_qtype(qtype,store) defined in qtype.c
      uses function points_to_fs_qtype(qtype,store) defined in qtype.c
      uses function fail(const char *,...) defined in utils.c
   function nontriv_soln_fn(qual,bool *) in line 3689
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses variable vtq_info::result defined in qtype.c
      uses macro definition TRUE defined in bool.h
   function nontriv_soln_qtype(qtype,store) in line 3696
      protection public
      71 lines of code
      2 parameters
      1 conditional paths
      uses variable vtq_info::result defined in qtype.c
      uses macro definition FALSE defined in bool.h
      uses variable Qtypelist::qt defined in qtype.c
      uses function ecr_qtype(qtype) defined in qtype.c
      uses function qtype_error(qtype) defined in qtype.c
      uses function qtype_scheme(qtype) defined in qtype.c
      uses macro definition TRUE defined in bool.h
      uses function scan_qual_bounds(qual,qual_traverse_fn,void *) defined in quals.c
      uses variable Qtype::qual defined in qtype.c
      uses function nontriv_soln_fn(qual,bool *) defined in qtype.c
      uses variable Qtype::type defined in qtype.c
      uses function f(char *) defined in taint-const-subtyping.c
      uses function nontriv_soln_qtype(qtype,store) defined in qtype.c
      uses function points_to_qtype(qtype) defined in qtype.c
      uses function points_to_fs_qtype(qtype,store) defined in qtype.c
      uses function qtypelist_scan(qtypelist,qtypelist_scanner *) defined in qtype.c
      uses function arg_qtypes(qtype) defined in qtype.c
      uses function qtypelist_next(qtypelist_scanner *) defined in qtype.c
      uses function store_in_qtype(qtype) defined in qtype.c
      uses function return_qtype(qtype) defined in qtype.c
      uses function store_out_qtype(qtype) defined in qtype.c
      uses function qtype_varargs(qtype) defined in qtype.c
      uses function vqual_qtype(qtype) defined in qtype.c
      uses function array_of_qtype(qtype) defined in qtype.c
      uses function fail(const char *,...) defined in utils.c
   function ref_qtype_store(location,qtype,store) in line 3776
      protection public
      61 lines of code
      3 parameters
      1 conditional paths
      uses variable Qtypelist::qt defined in qtype.c
      uses function ecr_qtype(qtype) defined in qtype.c
      uses variable Qtype::type defined in qtype.c
      uses function make_store_ref(location,store,aloc) defined in effect.c
      uses variable vtq_info::loc defined in qtype.c
      uses function qtype_aggregate(qtype) defined in qtype.c
      uses function field_scan(qtype,field_scanner *) defined in qtype.c
      uses function field_next(field_scanner *) defined in qtype.c
      uses function ref_qtype_store(location,qtype,store) defined in qtype.c
      uses function qtype_array(qtype) defined in qtype.c
   function qtype_to_fs_qtype(location,qtype) in line 3846
      protection public
      114 lines of code
      2 parameters
      1 conditional paths
      uses variable vtq_info::result defined in qtype.c
      uses variable Qtypelist::qt defined in qtype.c
      uses function ecr_qtype(qtype) defined in qtype.c
      uses function qtype_error(qtype) defined in qtype.c
      uses variable error_qtype defined in qtype.c
      uses function qtype_scheme(qtype) defined in qtype.c
      uses function report_qerror(location,severity,const char *,...) defined in analyze.c
      uses variable vtq_info::loc defined in qtype.c
      uses enumvalue sev_warn defined in qerror.h
      uses function qtype_to_fs_qtype(location,qtype) defined in qtype.c
      uses variable Qtype::type defined in qtype.c
      uses function name_qual(qual) defined in quals.c
      uses variable Qtype::qual defined in qtype.c
      uses function make_qvar(const char *,location,bool) defined in quals.c
      uses function preferred_qual(qual) defined in quals.c
      uses macro definition ralloc defined in regions.h
      uses variable parse_region defined in c-parse.h
      uses macro definition NULL defined in config.h
      uses function mkqtype_pointer_loc(qual,aloc) defined in qtype.c
      uses function aloc_qtype(qtype) defined in qtype.c
      uses function mkqtype_array(qual,qtype,expression,aloc,aloc) defined in qtype.c
      uses function array_of_qtype(qtype) defined in qtype.c
      uses function array_size_qtype(qtype) defined in qtype.c
      uses function array_aloc_qtype(qtype) defined in qtype.c
      uses function f(char *) defined in taint-const-subtyping.c
      uses function mkqtype_tagged(qual,int,const char *,bool,bool,field) defined in qtype.c
      uses function mkfield(const char *,qtype) defined in qtype.c
      uses function field_append(field *,field) defined in qtype.c
      uses function qtypelist_to_fs_qtypelist(location,qtypelist) defined in qtype.c
      uses function mkqtype_function(qual,bool,qual,bool,qtype,qtypelist,store,store,aloc,effect) defined in qtype.c
      uses function fail(const char *,...) defined in utils.c
   function transfer_fs_qual(qual,qual) in line 3977
      protection public
      20 lines of code
      2 parameters
      5 conditional paths
      uses macro definition scan_qual_edge_set defined in containers.h
      uses function lb_qual(qual) defined in quals.c
      uses function constant_qual(qual) defined in quals.c
      uses variable Qual_edge::qual defined in quals.h
      uses function flow_sensitive_qual(qual) defined in quals.c
      uses function mkleq_qual(location,qual,qual) defined in quals.c
      uses variable Qual_edge::loc defined in quals.h
      uses function report_qerror(location,severity,const char *,...) defined in analyze.c
      uses enumvalue sev_err defined in qerror.h
      uses function ub_qual(qual) defined in quals.c
   function transfer_fs_qtype(location,qtype,qtype,store) in line 3999
      protection public
      110 lines of code
      4 parameters
      15 conditional paths
      uses variable vtq_info::result defined in qtype.c
      uses function qtype_scheme(qtype) defined in qtype.c
      uses variable vtq_info::loc defined in qtype.c
      uses variable Qtype::type defined in qtype.c
      uses macro definition FALSE defined in bool.h
      uses function qtype_error(qtype) defined in qtype.c
      uses function ecr_qtype(qtype) defined in qtype.c
      uses variable Qtype::qual defined in qtype.c
      uses macro definition NULL defined in config.h
      uses function transfer_fs_qual(qual,qual) defined in qtype.c
      uses function qtype_pointer_loc(qtype) defined in qtype.c
      uses function aloc_qtype(qtype) defined in qtype.c
      uses function points_to_qtype(qtype) defined in qtype.c
      uses function qtype_from_store(store,aloc) defined in effect.c
      uses function array_of_qtype(qtype) defined in qtype.c
      uses function unify_qtype(location,qtype,qtype) defined in qtype.c
      uses function return_qtype(qtype) defined in qtype.c
      uses function store_out_qtype(qtype) defined in qtype.c
      uses function transfer_fs_qtypelist(location,qtypelist,qtypelist,store) defined in qtype.c
      uses function arg_qtypes(qtype) defined in qtype.c
      uses function store_in_qtype(qtype) defined in qtype.c
      uses function fail(const char *,...) defined in utils.c
   function qtype_to_fs_qtype_with_quals(location,qtype,store) in line 4132
      protection public
      15 lines of code
      3 parameters
      1 conditional paths
      uses variable vtq_info::result defined in qtype.c
      uses variable Qtypelist::qt defined in qtype.c
      uses function ecr_qtype(qtype) defined in qtype.c
      uses function qtype_function(qtype) defined in qtype.c
      uses function qtype_from_store(store,aloc) defined in effect.c
      uses function aloc_qtype(qtype) defined in qtype.c
      uses function qtype_to_fs_qtype(location,qtype) defined in qtype.c
      uses variable vtq_info::loc defined in qtype.c
      uses function transfer_fs_qtype(location,qtype,qtype,store) defined in qtype.c
      uses function report_qerror(location,severity,const char *,...) defined in analyze.c
      uses enumvalue sev_err defined in qerror.h
   function mk_no_qual_qtype_fs_sub(location,qtype,store) in line 4150
      protection public
      48 lines of code
      3 parameters
      14 conditional paths
      uses variable count defined in qtype.c
      uses variable Qtypelist::qt defined in qtype.c
      uses function ecr_qtype(qtype) defined in qtype.c
      uses function qtype_error(qtype) defined in qtype.c
      uses function mk_no_qual_qual(location,qual) defined in quals.c
      uses variable vtq_info::loc defined in qtype.c
      uses variable Qtype::qual defined in qtype.c
      uses variable Qtype::type defined in qtype.c
      uses function points_to_fs_qtype(qtype,store) defined in qtype.c
      uses function f(char *) defined in taint-const-subtyping.c
      uses macro definition TRUE defined in bool.h
      uses function return_qtype(qtype) defined in qtype.c
      uses function store_out_qtype(qtype) defined in qtype.c
      uses function qtypelist_scan(qtypelist,qtypelist_scanner *) defined in qtype.c
      uses function arg_qtypes(qtype) defined in qtype.c
      uses function qtypelist_next(qtypelist_scanner *) defined in qtype.c
      uses function store_in_qtype(qtype) defined in qtype.c
      uses function fail(const char *,...) defined in utils.c
   function clean_reachable_tags_fs(qtype,store) in line 4151
      protection public
      43 lines of code
      2 parameters
      13 conditional paths
      uses variable Qtypelist::qt defined in qtype.c
      uses function ecr_qtype(qtype) defined in qtype.c
      uses variable Qtype::type defined in qtype.c
      uses function points_to_fs_qtype(qtype,store) defined in qtype.c
      uses function f(char *) defined in taint-const-subtyping.c
      uses macro definition FALSE defined in bool.h
      uses function return_qtype(qtype) defined in qtype.c
      uses function store_out_qtype(qtype) defined in qtype.c
      uses function qtypelist_scan(qtypelist,qtypelist_scanner *) defined in qtype.c
      uses function arg_qtypes(qtype) defined in qtype.c
      uses function qtypelist_next(qtypelist_scanner *) defined in qtype.c
      uses function store_in_qtype(qtype) defined in qtype.c
      uses function fail(const char *,...) defined in utils.c
   function mk_no_qual_qtype_fs(location,qtype,store) in line 4154
      protection public
      5 lines of code
      3 parameters
      1 conditional paths
      uses function mk_no_qual_qtype_fs_sub(location,qtype,store) defined in qtype.c
      uses variable vtq_info::loc defined in qtype.c
      uses variable Qtypelist::qt defined in qtype.c
      uses function clean_reachable_tags_fs(qtype,store) defined in qtype.c
   function toplvl_qual_fs_qtype(qtype) in line 4255
      protection public
      39 lines of code
      1 parameters
      1 conditional paths
      uses variable vtq_info::result defined in qtype.c
      uses macro definition FALSE defined in bool.h
      uses variable Qtypelist::qt defined in qtype.c
      uses function ecr_qtype(qtype) defined in qtype.c
      uses function qtype_error(qtype) defined in qtype.c
      uses macro definition TRUE defined in bool.h
      uses function scan_qual_bounds(qual,qual_traverse_fn,void *) defined in quals.c
      uses variable Qtype::qual defined in qtype.c
      uses function nontriv_soln_fn(qual,bool *) defined in qtype.c
      uses variable Qtype::type defined in qtype.c
      uses function toplvl_qual_fs_qtype(qtype) defined in qtype.c
      uses function return_qtype(qtype) defined in qtype.c
      uses function qtypelist_scan(qtypelist,qtypelist_scanner *) defined in qtype.c
      uses function arg_qtypes(qtype) defined in qtype.c
      uses function qtypelist_next(qtypelist_scanner *) defined in qtype.c
      uses function fail(const char *,...) defined in utils.c
   function store_aloc_qtype(qtype,store,aloc) in line 4296
      protection public
      45 lines of code
      3 parameters
      1 conditional paths
      uses variable vtq_info::result defined in qtype.c
      uses macro definition FALSE defined in bool.h
      uses variable Qtypelist::qt defined in qtype.c
      uses function ecr_qtype(qtype) defined in qtype.c
      uses function qtype_error(qtype) defined in qtype.c
      uses function store_aloc_qual(qual,store,aloc) defined in quals.c
      uses variable Qtype::qual defined in qtype.c
      uses variable Qtype::type defined in qtype.c
      uses function store_aloc_qtype(qtype,store,aloc) defined in qtype.c
      uses function return_qtype(qtype) defined in qtype.c
      uses function qtypelist_scan(qtypelist,qtypelist_scanner *) defined in qtype.c
      uses function arg_qtypes(qtype) defined in qtype.c
      uses function qtypelist_next(qtypelist_scanner *) defined in qtype.c
      uses function fail(const char *,...) defined in utils.c
   function points_to_fs_qtype(qtype,store) in line 4344
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses function qtype_pointer_loc(qtype) defined in qtype.c
      uses variable Qtypelist::qt defined in qtype.c
      uses function qtype_from_store(store,aloc) defined in effect.c
      uses function aloc_qtype(qtype) defined in qtype.c
   function default_conversion_fs_qtype(qtype) in line 4351
      protection public
      21 lines of code
      1 parameters
      1 conditional paths
      uses function ecr_qtype(qtype) defined in qtype.c
      uses variable Qtype::conv defined in qtype.c
      uses function qtype_function(qtype) defined in qtype.c
      uses variable vtq_info::q defined in qtype.c
      uses function make_qvar(const char *,location,bool) defined in quals.c
      uses macro definition NULL defined in config.h
      uses macro definition FALSE defined in bool.h
      uses function mkqtype_pointer_loc(qual,aloc) defined in qtype.c
      uses variable Qtype::type defined in qtype.c
      uses function qtype_array(qtype) defined in qtype.c
      uses variable Qtype::qual defined in qtype.c
   function mkleq_fs_qtype(location,qtype,qtype,store) in line 4375
      protection public
      4 lines of code
      4 parameters
      1 conditional paths
      uses function mkXeq_qtype_err(location,qtype,qtype,mkXeq,bool,store) defined in qtype.c
      uses variable vtq_info::loc defined in qtype.c
      uses enumvalue mkleq defined in qtype.c
      uses macro definition FALSE defined in bool.h
   function mkleq_fs_assign_convert(location,qtype,qtype,store) in line 4381
      protection public
      5 lines of code
      4 parameters
      1 conditional paths
      uses function internal_mkleq_assign_convert(location,qtype,qtype,store) defined in qtype.c
      uses variable vtq_info::loc defined in qtype.c
   function assign_flow_sensitive(location,const char *,qtype,qtype,store,bool) in line 4391
      protection public
      15 lines of code
      6 parameters
      1 conditional paths
      uses function qtype_pointer_loc(qtype) defined in qtype.c
      uses function copy_qtype(qtype,location) defined in qtype.c
      uses function points_to_fs_qtype(qtype,store) defined in qtype.c
      uses variable vtq_info::loc defined in qtype.c
      uses function aloc_qtype(qtype) defined in qtype.c
      uses macro definition insistnot defined in utils.h
      uses function mkleq_fs_assign_convert(location,qtype,qtype,store) defined in qtype.c
      uses function make_store_assign(location,const char *,store,aloc,qtype,bool) defined in effect.c
   variable Qtypelist::next in line 44
      protection public
   variable Qtypelist::qt in line 43
      protection public
   variable Field::name in line 48
      protection public
   variable Field::next in line 50
      protection public
   variable Field::qtype in line 49
      protection public
   variable Ty::addr_aloc in line 117
      protection public
   variable Ty::aloc in line 92
      protection public
   variable Ty::alocs in line 61
      protection public
   variable Ty::argtypes in line 103
      protection public
   variable Ty::array in line 118
      protection public
   variable Ty::arrayof in line 114
      protection public
   variable Ty::body in line 134
      protection public
   variable Ty::defined in line 81
      protection public
   variable Ty::effect in line 109
      protection public
   variable Ty::fields in line 83
      protection public
   variable Ty::fn in line 110
      protection public
   variable Ty::fs_ty in line 85
      protection public
   variable Ty::in in line 107
      protection public
   variable Ty::kind in line 60
      protection public
   variable Ty::lb in line 123
      protection public
   variable Ty::link in line 127
      protection public
   variable Ty::mark in line 80
      protection public
   variable Ty::name in line 79
      protection public
   variable Ty::num_equiv in line 84
      protection public
   variable Ty::num_inst in line 131
      protection public
   variable Ty::oldstyle in line 105
      protection public
   variable Ty::out in line 107
      protection public
   variable Ty::pointer_loc in line 98
      protection public
   variable Ty::pointsto in line 91
      protection public
   variable Ty::primitive in line 75
      protection public
   variable Ty::ptr in line 93
      protection public
   variable Ty::qvars in line 133
      protection public
   variable Ty::returns in line 102
      protection public
   variable Ty::scheme in line 137
      protection public
   variable Ty::size in line 115
      protection public
   variable Ty::tag in line 87
      protection public
   variable Ty::transparent_union in line 82
      protection public
   variable Ty::tyvars in line 132
      protection public
   variable Ty::u in line 138
      protection public
   variable Ty::ub in line 123
      protection public
   variable Ty::var in line 124
      protection public
   variable Ty::varargs in line 104
      protection public
   variable Ty::vqual in line 106
      protection public
   variable Ty::@32::array in line 118
      protection public
   variable Ty::@32::fn in line 110
      protection public
   variable Ty::@32::link in line 127
      protection public
   variable Ty::@32::pointer_loc in line 98
      protection public
   variable Ty::@32::primitive in line 75
      protection public
   variable Ty::@32::ptr in line 93
      protection public
   variable Ty::@32::scheme in line 137
      protection public
   variable Ty::@32::tag in line 87
      protection public
   variable Ty::@32::var in line 124
      protection public
   variable Ty::@32::@34::defined in line 81
      protection public
   variable Ty::@32::@34::fields in line 83
      protection public
   variable Ty::@32::@34::fs_ty in line 85
      protection public
   variable Ty::@32::@34::mark in line 80
      protection public
   variable Ty::@32::@34::name in line 79
      protection public
   variable Ty::@32::@34::num_equiv in line 84
      protection public
   variable Ty::@32::@34::transparent_union in line 82
      protection public
   variable Ty::@32::@35::aloc in line 92
      protection public
   variable Ty::@32::@35::pointsto in line 91
      protection public
   variable Ty::@32::@36::aloc in line 97
      protection public
   variable Ty::@32::@37::aloc in line 108
      protection public
   variable Ty::@32::@37::argtypes in line 103
      protection public
   variable Ty::@32::@37::effect in line 109
      protection public
   variable Ty::@32::@37::in in line 107
      protection public
   variable Ty::@32::@37::oldstyle in line 105
      protection public
   variable Ty::@32::@37::out in line 107
      protection public
   variable Ty::@32::@37::returns in line 102
      protection public
   variable Ty::@32::@37::varargs in line 104
      protection public
   variable Ty::@32::@37::vqual in line 106
      protection public
   variable Ty::@32::@38::addr_aloc in line 117
      protection public
   variable Ty::@32::@38::aloc in line 116
      protection public
   variable Ty::@32::@38::arrayof in line 114
      protection public
   variable Ty::@32::@38::size in line 115
      protection public
   variable Ty::@32::@39::lb in line 123
      protection public
   variable Ty::@32::@39::name in line 122
      protection public
   variable Ty::@32::@39::ub in line 123
      protection public
   variable Ty::@32::@40::body in line 134
      protection public
   variable Ty::@32::@40::num_inst in line 131
      protection public
   variable Ty::@32::@40::qvars in line 133
      protection public
   variable Ty::@32::@40::tyvars in line 132
      protection public
   variable Qtype::conv in line 145
      protection public
   variable Qtype::qual in line 143
      protection public
   variable Qtype::type in line 144
      protection public
   variable ctq_info::generalize in line 871
      protection public
   variable ctq_info::loc in line 869
      protection public
   variable ctq_info::name_map in line 870
      protection public
   variable copy_info::loc in line 1949
      protection public
   variable copy_info::qmap in line 1950
      protection public
   variable copy_info::vmap in line 1951
      protection public
   variable inst_info::loc in line 2027
      protection public
   variable inst_info::qmap in line 2030
      protection public
   variable inst_info::qvars in line 2029
      protection public
   variable inst_info::suffix in line 2032
      protection public
   variable inst_info::tyvars in line 2028
      protection public
   variable inst_info::vmap in line 2031
      protection public
   variable eqtq_info::loc in line 3092
      protection public
   variable eqtq_info::q in line 3090
      protection public
   variable eqtq_info::result in line 3091
      protection public
   variable vtq_info::loc in line 3116
      protection public
   variable vtq_info::num in line 3115
      protection public
   variable vtq_info::q in line 3113
      protection public
   variable vtq_info::result in line 3114
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cqual/cqual-0.981/src/qtype.h
module qtype.h
   typedef qtypelist in line 30
      protection public
   typedef qtypelist_scanner in line 31
      protection public
   typedef field_scanner in line 32
      protection public
   variable error_qtype in line 88
      protection public
   function init_qtype(void) in line 34
      protection public
      37 lines of code
      1 parameters
      1 conditional paths
      uses variable scratch_region defined in qtype.c
      uses function newregion(void) defined in regions.c
      uses variable name_map defined in qtype.c
      uses function make_string_hash_table(region,int) defined in hash.c
      uses macro definition ralloc defined in regions.h
      uses variable parse_region defined in c-parse.h
      uses macro definition NULL defined in config.h
      uses variable error_qtype defined in qtype.c
      uses variable Qtype::qual defined in qtype.c
      uses variable Qtype::type defined in qtype.c
      uses variable Qtype::conv defined in qtype.c
      uses macro definition mkty_primitive defined in qtype.c
      uses variable next_qtype defined in qtype.c
   function qtypelist_scan(qtypelist,qtypelist_scanner *) in line 42
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function qtypelist_next(qtypelist_scanner *) in line 43
      protection public
      10 lines of code
      1 parameters
      2 conditional paths
      uses variable Qtypelist::qt defined in qtype.c
      uses macro definition NULL defined in config.h
   function qtype_error(qtype) in line 51
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable Qtypelist::qt defined in qtype.c
      uses variable Qtype::type defined in qtype.c
   function qtype_primitive(qtype) in line 52
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable Qtypelist::qt defined in qtype.c
      uses variable Qtype::type defined in qtype.c
   function qtype_char(qtype) in line 53
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable Qtypelist::qt defined in qtype.c
      uses function qtype_primitive(qtype) defined in qtype.c
      uses variable Qtype::type defined in qtype.c
   function qtype_signed_char(qtype) in line 54
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable Qtypelist::qt defined in qtype.c
      uses function qtype_primitive(qtype) defined in qtype.c
      uses variable Qtype::type defined in qtype.c
   function qtype_unsigned_char(qtype) in line 55
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable Qtypelist::qt defined in qtype.c
      uses function qtype_primitive(qtype) defined in qtype.c
      uses variable Qtype::type defined in qtype.c
   function qtype_int(qtype) in line 56
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable Qtypelist::qt defined in qtype.c
      uses function qtype_primitive(qtype) defined in qtype.c
      uses variable Qtype::type defined in qtype.c
   function qtype_unsigned_int(qtype) in line 57
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable Qtypelist::qt defined in qtype.c
      uses function qtype_primitive(qtype) defined in qtype.c
      uses variable Qtype::type defined in qtype.c
   function qtype_float(qtype) in line 58
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable Qtypelist::qt defined in qtype.c
      uses function qtype_primitive(qtype) defined in qtype.c
      uses variable Qtype::type defined in qtype.c
   function qtype_complex(qtype) in line 59
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable Qtypelist::qt defined in qtype.c
      uses variable Qtype::type defined in qtype.c
   function qtype_aggregate(qtype) in line 60
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable Qtypelist::qt defined in qtype.c
      uses function qtype_struct(qtype) defined in qtype.c
      uses function qtype_union(qtype) defined in qtype.c
   function qtype_struct(qtype) in line 61
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable Qtypelist::qt defined in qtype.c
      uses variable Qtype::type defined in qtype.c
   function qtype_union(qtype) in line 62
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable Qtypelist::qt defined in qtype.c
      uses variable Qtype::type defined in qtype.c
   function qtype_transparent(qtype) in line 63
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable Qtypelist::qt defined in qtype.c
      uses variable Qtype::type defined in qtype.c
   function qtype_void(qtype) in line 64
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable Qtypelist::qt defined in qtype.c
      uses variable Qtype::type defined in qtype.c
   function qtype_pointer(qtype) in line 65
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable Qtypelist::qt defined in qtype.c
      uses variable Qtype::type defined in qtype.c
   function qtype_pointer_loc(qtype) in line 66
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable Qtypelist::qt defined in qtype.c
      uses variable Qtype::type defined in qtype.c
   function qtype_pointer_or_loc(qtype) in line 67
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable Qtypelist::qt defined in qtype.c
      uses variable Qtype::type defined in qtype.c
   function qtype_function(qtype) in line 68
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable Qtypelist::qt defined in qtype.c
      uses variable Qtype::type defined in qtype.c
   function qtype_varargs(qtype) in line 69
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses variable Qtypelist::qt defined in qtype.c
      uses variable Qtype::type defined in qtype.c
   function qtype_oldstyle(qtype) in line 70
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses variable Qtypelist::qt defined in qtype.c
      uses variable Qtype::type defined in qtype.c
   function qtype_array(qtype) in line 71
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable Qtypelist::qt defined in qtype.c
      uses variable Qtype::type defined in qtype.c
   function qtype_unsigned(qtype) in line 72
      protection public
      10 lines of code
      1 parameters
      1 conditional paths
      uses variable Qtypelist::qt defined in qtype.c
      uses variable Qtype::type defined in qtype.c
   function qtype_smallerthanint(qtype) in line 73
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable Qtypelist::qt defined in qtype.c
      uses variable Qtype::type defined in qtype.c
   function qtype_integral(qtype) in line 74
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses variable Qtypelist::qt defined in qtype.c
      uses variable Qtype::type defined in qtype.c
   function qtype_string(qtype) in line 75
      protection public
      12 lines of code
      1 parameters
      2 conditional paths
      uses variable Qtypelist::qt defined in qtype.c
      uses function qtype_array(qtype) defined in qtype.c
      uses macro definition FALSE defined in bool.h
      uses function array_of_qtype(qtype) defined in qtype.c
      uses function qtype_char(qtype) defined in qtype.c
      uses function qtype_unsigned_char(qtype) defined in qtype.c
      uses function qtype_signed_char(qtype) defined in qtype.c
   function qtype_var(qtype) in line 76
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable Qtypelist::qt defined in qtype.c
      uses variable Qtype::type defined in qtype.c
   function qtype_scheme(qtype) in line 77
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable Qtypelist::qt defined in qtype.c
      uses variable Qtype::type defined in qtype.c
   function qtype_void_pointer(qtype) in line 79
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function qtype_pointer(qtype) defined in qtype.c
      uses variable Qtypelist::qt defined in qtype.c
      uses function qtype_void(qtype) defined in qtype.c
      uses function points_to_qtype(qtype) defined in qtype.c
   function qtype_char_pointer(qtype) in line 80
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function qtype_pointer(qtype) defined in qtype.c
      uses variable Qtypelist::qt defined in qtype.c
      uses function qtype_char(qtype) defined in qtype.c
      uses function points_to_qtype(qtype) defined in qtype.c
   function mkqtype_void(qual) in line 89
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses macro definition ralloc defined in regions.h
      uses variable parse_region defined in c-parse.h
      uses variable Qtype::qual defined in qtype.c
      uses variable Qtype::type defined in qtype.c
      uses variable Qtype::conv defined in qtype.c
      uses macro definition NULL defined in config.h
   function mkqtype_bool(qual) in line 90
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses macro definition mkqtype defined in qtype.c
   function mkqtype_char(qual) in line 91
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses macro definition mkqtype defined in qtype.c
   function mkqtype_int(qual) in line 92
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses macro definition mkqtype defined in qtype.c
   function mkqtype_unsigned_int(qual) in line 93
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses macro definition mkqtype defined in qtype.c
   function mkqtype_long(qual) in line 94
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses macro definition mkqtype defined in qtype.c
   function mkqtype_unsigned_long(qual) in line 95
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses macro definition mkqtype defined in qtype.c
   function mkqtype_long_long(qual) in line 96
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses macro definition mkqtype defined in qtype.c
   function mkqtype_unsigned_long_long(qual) in line 97
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses macro definition mkqtype defined in qtype.c
   function mkqtype_float(qual) in line 98
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses macro definition mkqtype defined in qtype.c
   function mkqtype_double(qual) in line 99
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses macro definition mkqtype defined in qtype.c
   function mkqtype_size_t(qual) in line 100
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses macro definition mkqtype defined in qtype.c
   function mkqtype_ptrdiff_t(qual) in line 101
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses macro definition mkqtype defined in qtype.c
   function mkqtype_pointer(qual,qtype,aloc) in line 102
      protection public
      8 lines of code
      3 parameters
      1 conditional paths
      uses macro definition ralloc defined in regions.h
      uses variable parse_region defined in c-parse.h
      uses variable Qtype::qual defined in qtype.c
      uses variable Qtype::type defined in qtype.c
      uses variable Qtype::conv defined in qtype.c
      uses macro definition NULL defined in config.h
   function mkqtype_pointer_loc(qual,aloc) in line 103
      protection public
      8 lines of code
      2 parameters
      1 conditional paths
      uses macro definition ralloc defined in regions.h
      uses variable parse_region defined in c-parse.h
      uses variable Qtype::qual defined in qtype.c
      uses variable Qtype::type defined in qtype.c
      uses variable Qtype::conv defined in qtype.c
      uses macro definition NULL defined in config.h
   function mkqtype_function(qual,bool,qual,bool,qtype,qtypelist,store,store,aloc,effect) in line 104
      protection public
      11 lines of code
      10 parameters
      1 conditional paths
      uses macro definition ralloc defined in regions.h
      uses variable parse_region defined in c-parse.h
      uses variable Qtype::qual defined in qtype.c
      uses variable Qtype::type defined in qtype.c
      uses variable Qtype::conv defined in qtype.c
      uses macro definition NULL defined in config.h
   function mkqtype_var(qual,const char *) in line 107
      protection public
      8 lines of code
      2 parameters
      1 conditional paths
      uses macro definition ralloc defined in regions.h
      uses variable parse_region defined in c-parse.h
      uses variable Qtype::qual defined in qtype.c
      uses variable Qtype::type defined in qtype.c
      uses variable Qtype::conv defined in qtype.c
      uses macro definition NULL defined in config.h
   function mkqtype_fresh(void) in line 108
      protection public
      10 lines of code
      1 parameters
      1 conditional paths
      uses function make_fresh_qvar(const char *,location) defined in quals.c
      uses macro definition NULL defined in config.h
      uses function rstrcat(region,const char *,const char *) defined in utils.c
      uses variable parse_region defined in c-parse.h
      uses function inttostr(region,int) defined in utils.c
      uses variable next_qtype defined in qtype.c
      uses function mkqtype_var(qual,const char *) defined in qtype.c
   function complex_base_qtype(qtype) in line 117
      protection public
      13 lines of code
      1 parameters
      1 conditional paths
      uses variable Qtypelist::qt defined in qtype.c
      uses variable Qtype::type defined in qtype.c
      uses macro definition ralloc defined in regions.h
      uses variable parse_region defined in c-parse.h
      uses variable Qtype::qual defined in qtype.c
      uses variable Qtype::conv defined in qtype.c
      uses macro definition NULL defined in config.h
   function points_to_qtype(qtype) in line 119
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses variable Qtypelist::qt defined in qtype.c
      uses variable Qtype::type defined in qtype.c
   function aloc_qtype(qtype) in line 121
      protection public
      20 lines of code
      1 parameters
      6 conditional paths
      uses variable Qtypelist::qt defined in qtype.c
      uses variable Qtype::type defined in qtype.c
      uses function aloc_qtype(qtype) defined in qtype.c
      uses function fail(const char *,...) defined in utils.c
   function array_of_qtype(qtype) in line 123
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses variable Qtypelist::qt defined in qtype.c
      uses variable Qtype::type defined in qtype.c
   function array_size_qtype(qtype) in line 125
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses variable Qtypelist::qt defined in qtype.c
      uses variable Qtype::type defined in qtype.c
   function array_aloc_qtype(qtype) in line 126
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses variable Qtypelist::qt defined in qtype.c
      uses variable Qtype::type defined in qtype.c
   function return_qtype(qtype) in line 128
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses variable Qtypelist::qt defined in qtype.c
      uses variable Qtype::type defined in qtype.c
   function arg_qtypes(qtype) in line 130
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses variable Qtypelist::qt defined in qtype.c
      uses variable Qtype::type defined in qtype.c
   function effect_qtype(qtype) in line 132
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses variable Qtypelist::qt defined in qtype.c
      uses variable Qtype::type defined in qtype.c
   function vqual_qtype(qtype) in line 134
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses variable Qtypelist::qt defined in qtype.c
      uses variable Qtype::type defined in qtype.c
   function store_in_qtype(qtype) in line 136
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses variable Qtypelist::qt defined in qtype.c
      uses variable Qtype::type defined in qtype.c
   function store_out_qtype(qtype) in line 137
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses variable Qtypelist::qt defined in qtype.c
      uses variable Qtype::type defined in qtype.c
   function tag_name_qtype(qtype) in line 139
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses variable Qtypelist::qt defined in qtype.c
      uses variable Qtype::type defined in qtype.c
   function field_qtype(qtype,cstring) in line 144
      protection public
      11 lines of code
      2 parameters
      3 conditional paths
      uses function f(char *) defined in taint-const-subtyping.c
      uses variable Qtypelist::qt defined in qtype.c
      uses function qtype_aggregate(qtype) defined in qtype.c
      uses variable Qtype::type defined in qtype.c
      uses variable cstring::data defined in cstring.h
      uses function fail(const char *,...) defined in utils.c
   function field_scan(qtype,field_scanner *) in line 148
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
      uses variable Qtypelist::qt defined in qtype.c
      uses function qtype_aggregate(qtype) defined in qtype.c
      uses variable Qtype::type defined in qtype.c
   function field_scan_at(qtype,cstring,field_scanner *) in line 151
      protection public
      13 lines of code
      3 parameters
      3 conditional paths
      uses function f(char *) defined in taint-const-subtyping.c
      uses variable Qtypelist::qt defined in qtype.c
      uses function qtype_aggregate(qtype) defined in qtype.c
      uses variable Qtype::type defined in qtype.c
      uses variable cstring::data defined in cstring.h
   function field_next(field_scanner *) in line 154
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses function f(char *) defined in taint-const-subtyping.c
      uses macro definition NULL defined in config.h
   function qual_qtype(qtype) in line 157
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable Qtypelist::qt defined in qtype.c
      uses variable Qtype::qual defined in qtype.c
   function has_qual_qtype(qtype,qual) in line 161
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function has_qual(qual,qual) defined in quals.c
      uses function qual_qtype(qtype) defined in qtype.c
      uses variable Qtypelist::qt defined in qtype.c
   function alocs_qtype(qtype) in line 164
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable Qtypelist::qt defined in qtype.c
      uses enumvalue eff_any defined in cqual.h
   function rwr_alocs_qtype(qtype) in line 167
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable Qtypelist::qt defined in qtype.c
      uses enumvalue eff_rwr defined in cqual.h
   function defn_effect_qtype(qtype) in line 170
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable Qtypelist::qt defined in qtype.c
      uses enumvalue eff_alloc defined in cqual.h
   function constr_effect_qtype(qtype,eff_kind) in line 173
      protection public
      12 lines of code
      2 parameters
      6 conditional paths
      uses enumvalue eff_any defined in cqual.h
      uses function alocs_qtype(qtype) defined in qtype.c
      uses variable Qtypelist::qt defined in qtype.c
      uses enumvalue eff_rwr defined in cqual.h
      uses function rwr_alocs_qtype(qtype) defined in qtype.c
      uses enumvalue eff_r defined in cqual.h
      uses function r_alocs_qtype(qtype) defined in qtype.c
      uses enumvalue eff_wr defined in cqual.h
      uses function wr_alocs_qtype(qtype) defined in qtype.c
      uses enumvalue eff_alloc defined in cqual.h
      uses function defn_effect_qtype(qtype) defined in qtype.c
      uses function fail(const char *,...) defined in utils.c
   function add_ddecl_qtype(data_declaration,bool) in line 185
      protection public
      125 lines of code
      2 parameters
      14 conditional paths
      uses variable data_declaration::kind defined in decls.h
      uses enumvalue decl_typedef defined in decls.h
      uses variable data_declaration::qtype defined in decls.h
      uses variable ctq_info::loc defined in qtype.c
      uses variable data_declaration::type defined in decls.h
      uses function type_function(type) defined in types.c
      uses function type_array(type) defined in types.c
      uses enumvalue decl_constant defined in decls.h
      uses function make_pointer_type(type) defined in types.c
      uses variable data_declaration::definition defined in decls.h
      uses function location_declaration(declaration) defined in analyze.c
      uses macro definition TRUE defined in bool.h
      uses variable data_declaration::ast defined in decls.h
      uses macro definition FALSE defined in bool.h
      uses function hash_table_reset(hash_table) defined in hash.c
      uses variable name_map defined in qtype.c
      uses variable ctq_info::name_map defined in qtype.c
      uses variable ctq_info::generalize defined in qtype.c
      uses variable data_declaration::name defined in decls.h
      uses function report_qerror(location,severity,const char *,...) defined in analyze.c
      uses enumvalue sev_err defined in qerror.h
      uses variable data_declaration::noreturn defined in decls.h
      uses variable noreturn_qual defined in quals.c
      uses function qtype_function(qtype) defined in qtype.c
      uses macro definition insistnot defined in utils.h
      uses function mkeq_qual(location,qual,qual) defined in quals.c
      uses function qual_qtype(qtype) defined in qtype.c
      uses variable data_declaration::__init defined in decls.h
      uses variable init_qual defined in quals.c
      uses function mkleq_qual(location,qual,qual) defined in quals.c
      uses function hash_table_size(hash_table) defined in hash.c
      uses function hash_table_scan(hash_table,hash_table_scanner *) defined in hash.c
      uses function hash_table_next(hash_table_scanner *,hash_key *,hash_data *) defined in hash.c
      uses variable hash_key defined in hash.h
      uses function is_qualifier_constraint(const char *) defined in qtype.c
      uses variable parse_region defined in c-parse.h
      uses function mkqtype_scheme(qtype,ty_set,qual_set) defined in qtype.c
      uses function aloc_qtype(qtype) defined in qtype.c
      uses function return_qtype(qtype) defined in qtype.c
      uses function effect_qtype(qtype) defined in qtype.c
      uses function mark_aloc_interesting(aloc) defined in effect.c
      uses function mkleq_effect(effect,effect) defined in effect.c
      uses function effect_wr(aloc) defined in effect.c
      uses function effect_alloc(aloc) defined in effect.c
   function get_fdecl_qtype(const char *,field_declaration) in line 188
      protection public
      35 lines of code
      2 parameters
      3 conditional paths
      uses variable field_declaration::type defined in decls.h
      uses variable field_declaration::name defined in decls.h
      uses function type_function(type) defined in types.c
      uses function type_array(type) defined in types.c
      uses function make_pointer_type(type) defined in types.c
      uses variable ctq_info::loc defined in qtype.c
      uses function location_declaration(declaration) defined in analyze.c
      uses macro definition CAST defined in AST.h
      uses variable field_declaration::ast defined in decls.h
      uses variable ctq_info::name_map defined in qtype.c
      uses macro definition NULL defined in config.h
      uses variable ctq_info::generalize defined in qtype.c
      uses macro definition FALSE defined in bool.h
      uses function report_qerror(location,severity,const char *,...) defined in analyze.c
      uses variable AST_field_decl::loc defined in AST_defs.h
      uses enumvalue sev_err defined in qerror.h
   function type_to_qtype(type,const char *,location) in line 191
      protection public
      13 lines of code
      3 parameters
      2 conditional paths
      uses function hash_table_reset(hash_table) defined in hash.c
      uses variable name_map defined in qtype.c
      uses variable ctq_info::loc defined in qtype.c
      uses variable ctq_info::name_map defined in qtype.c
      uses variable ctq_info::generalize defined in qtype.c
      uses macro definition FALSE defined in bool.h
      uses function report_qerror(location,severity,const char *,...) defined in analyze.c
      uses enumvalue sev_err defined in qerror.h
   function copy_qtype(qtype,location) in line 194
      protection public
      9 lines of code
      2 parameters
      1 conditional paths
      uses variable copy_info::loc defined in qtype.c
      uses variable copy_info::qmap defined in qtype.c
      uses function make_qual_hash_table(region,int) defined in qtype.c
      uses variable scratch_region defined in qtype.c
      uses variable copy_info::vmap defined in qtype.c
      uses function make_ty_hash_table(region,int) defined in qtype.c
      uses function substitute_qtype(qtype,qual(*)(qual, void *arg),void *,ty(*)(ty, void *arg),void *) defined in qtype.c
      uses variable Qtypelist::qt defined in qtype.c
      uses function copy_qtype_qsubs(qual,void *) defined in qtype.c
      uses function copy_qtype_tsubs(ty,void *) defined in qtype.c
   function generalize_qtype(qtype) in line 198
      protection public
      13 lines of code
      1 parameters
      1 conditional paths
      uses variable inst_info::tyvars defined in qtype.c
      uses variable inst_info::qvars defined in qtype.c
      uses function qtype_scheme(qtype) defined in qtype.c
      uses variable Qtypelist::qt defined in qtype.c
      uses function qtype_gather_vars(qtype,ty_set *,qual_set *) defined in qtype.c
      uses function mkqtype_scheme(qtype,ty_set,qual_set) defined in qtype.c
   function instantiate_qtype(qtype,location) in line 203
      protection public
      19 lines of code
      2 parameters
      1 conditional paths
      uses function qtype_scheme(qtype) defined in qtype.c
      uses variable Qtypelist::qt defined in qtype.c
      uses variable inst_info::loc defined in qtype.c
      uses variable inst_info::tyvars defined in qtype.c
      uses variable Qtype::type defined in qtype.c
      uses variable inst_info::qvars defined in qtype.c
      uses variable inst_info::qmap defined in qtype.c
      uses function make_qual_hash_table(region,int) defined in qtype.c
      uses variable scratch_region defined in qtype.c
      uses variable inst_info::vmap defined in qtype.c
      uses function make_ty_hash_table(region,int) defined in qtype.c
      uses variable inst_info::suffix defined in qtype.c
      uses function rstrcat(region,const char *,const char *) defined in utils.c
      uses variable parse_region defined in c-parse.h
      uses function inttostr(region,int) defined in utils.c
      uses function substitute_qtype(qtype,qual(*)(qual, void *arg),void *,ty(*)(ty, void *arg),void *) defined in qtype.c
      uses function instantiate_qtype_qsubs(qual,void *) defined in qtype.c
      uses function instantiate_qtype_tsubs(ty,void *) defined in qtype.c
   function match_qtype(qtype,qtype,void(*)(qual q1, qual q2, void *arg),void *) in line 208
      protection public
      61 lines of code
      4 parameters
      11 conditional paths
      uses variable Qtype::qual defined in qtype.c
      uses variable Qtype::type defined in qtype.c
      uses macro definition TRUE defined in bool.h
      uses function match_qtype(qtype,qtype,void(*)(qual q1, qual q2, void *arg),void *) defined in qtype.c
      uses function eq_aloc(aloc,aloc) defined in containers.h
      uses function return_qtype(qtype) defined in qtype.c
      uses function qtypelist_scan(qtypelist,qtypelist_scanner *) defined in qtype.c
      uses function arg_qtypes(qtype) defined in qtype.c
      uses function qtypelist_next(qtypelist_scanner *) defined in qtype.c
      uses function qtype_oldstyle(qtype) defined in qtype.c
      uses function qtype_varargs(qtype) defined in qtype.c
      uses function vqual_qtype(qtype) defined in qtype.c
      uses macro definition FALSE defined in bool.h
   function match_type(type,type) in line 213
      protection public
      109 lines of code
      2 parameters
      17 conditional paths
      uses function type_qualifiers(type) defined in types.c
      uses macro definition FALSE defined in bool.h
      uses function type_user_quals(type) defined in types.c
      uses variable user_qual_list::qual defined in types.h
      uses variable AST_user_qual::cstring defined in AST_defs.h
      uses variable cstring::data defined in cstring.h
      uses variable user_qual_list::next defined in types.h
      uses function type_void(type) defined in types.c
      uses function type_char(type) defined in types.c
      uses function type_signed_char(type) defined in types.c
      uses function type_unsigned_char(type) defined in types.c
      uses function type_short(type) defined in types.c
      uses function type_unsigned_short(type) defined in types.c
      uses function type_int(type) defined in types.c
      uses function type_unsigned_int(type) defined in types.c
      uses function type_long(type) defined in types.c
      uses function type_unsigned_long(type) defined in types.c
      uses function type_long_long(type) defined in types.c
      uses function type_unsigned_long_long(type) defined in types.c
      uses function type_float(type) defined in types.c
      uses function type_double(type) defined in types.c
      uses function type_long_double(type) defined in types.c
      uses macro definition TRUE defined in bool.h
      uses function type_function(type) defined in types.c
      uses function type_function_varargs(type) defined in types.c
      uses function type_function_oldstyle(type) defined in types.c
      uses function type_function_varargs_quals(type) defined in types.c
      uses function type_function_varargs_user_quals(type) defined in types.c
      uses function match_type(type,type) defined in qtype.c
      uses function type_function_return_type(type) defined in types.c
      uses function type_function_arguments(type) defined in types.c
      uses macro definition NULL defined in config.h
      uses function typelist_scan(typelist,typelist_scanner *) defined in types.c
      uses function typelist_next(typelist_scanner *) defined in types.c
      uses function type_pointer(type) defined in types.c
      uses function type_points_to(type) defined in types.c
      uses function type_array(type) defined in types.c
      uses function type_array_of(type) defined in types.c
      uses function type_struct(type) defined in types.c
      uses function type_union(type) defined in types.c
      uses function type_tag(type) defined in types.c
      uses variable tag_declaration::qtype defined in decls.h
      uses function eq_qtype(qtype,qtype) defined in qtype.c
      uses function type_enum(type) defined in types.c
   function mkleq_qtype(location,qtype,qtype) in line 226
      protection public
      4 lines of code
      3 parameters
      1 conditional paths
      uses function mkXeq_qtype_err(location,qtype,qtype,mkXeq,bool,store) defined in qtype.c
      uses enumvalue mkleq defined in qtype.c
      uses macro definition FALSE defined in bool.h
      uses macro definition NULL defined in config.h
   function mkeq_qtype(location,qtype,qtype) in line 229
      protection public
      4 lines of code
      3 parameters
      1 conditional paths
      uses function mkXeq_qtype_err(location,qtype,qtype,mkXeq,bool,store) defined in qtype.c
      uses enumvalue mkeq defined in qtype.c
      uses macro definition FALSE defined in bool.h
      uses macro definition NULL defined in config.h
   function unify_qtype(location,qtype,qtype) in line 232
      protection public
      4 lines of code
      3 parameters
      1 conditional paths
      uses function mkXeq_qtype_err(location,qtype,qtype,mkXeq,bool,store) defined in qtype.c
      uses enumvalue unify defined in qtype.c
      uses macro definition FALSE defined in bool.h
      uses macro definition NULL defined in config.h
   function mkeq_qtype_cast(location,qtype,qtype) in line 238
      protection public
      4 lines of code
      3 parameters
      1 conditional paths
      uses function mkXeq_qtype_err(location,qtype,qtype,mkXeq,bool,store) defined in qtype.c
      uses enumvalue mkeq defined in qtype.c
      uses macro definition TRUE defined in bool.h
      uses macro definition NULL defined in config.h
   function lub_qtype(location,qtype,qtype,qtype *) in line 241
      protection public
      9 lines of code
      4 parameters
      1 conditional paths
      uses function copy_qtype(qtype,location) defined in qtype.c
      uses function mkleq_qtype(location,qtype,qtype) defined in qtype.c
   function eq_qtype(qtype,qtype) in line 245
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses function eq_qual(qual,qual) defined in quals.c
      uses variable Qtype::qual defined in qtype.c
      uses function eq_ty(ty,ty) defined in qtype.c
      uses variable Qtype::type defined in qtype.c
   function varargs_constrain_quals_qtype(location,qtype,qual) in line 251
      protection public
      6 lines of code
      3 parameters
      1 conditional paths
      uses variable vtq_info::q defined in qtype.c
      uses macro definition FALSE defined in bool.h
      uses variable vtq_info::loc defined in qtype.c
      uses function traverse_quals_qtype(qtype,void(*)(qual q, void *arg),void *) defined in qtype.c
      uses variable Qtypelist::qt defined in qtype.c
      uses function varargs_traverse_fn(qual,void *) defined in qtype.c
      uses variable vtq_info::result defined in qtype.c
   function mknin_effect_qtype(location,effect,qtype) in line 254
      protection public
      8 lines of code
      3 parameters
      1 conditional paths
      uses function alocs_qtype(qtype) defined in qtype.c
      uses variable Qtypelist::qt defined in qtype.c
      uses function mknin_effect(location,effect,effect) defined in effect.c
      uses variable vtq_info::loc defined in qtype.c
   function default_conversion_qtype(qtype) in line 264
      protection public
      63 lines of code
      1 parameters
      5 conditional paths
      uses variable Qtypelist::qt defined in qtype.c
      uses variable Qtype::conv defined in qtype.c
      uses function qtype_function(qtype) defined in qtype.c
      uses variable vtq_info::q defined in qtype.c
      uses function make_qvar(const char *,location,bool) defined in quals.c
      uses macro definition NULL defined in config.h
      uses macro definition FALSE defined in bool.h
      uses variable const_qual defined in quals.c
      uses function mkleq_qual(location,qual,qual) defined in quals.c
      uses function mkqtype_pointer(qual,qtype,aloc) defined in qtype.c
      uses variable Qtype::type defined in qtype.c
      uses function qtype_array(qtype) defined in qtype.c
      uses variable Qtype::qual defined in qtype.c
   function mkleq_assign_convert(location,qtype,qtype) in line 267
      protection public
      4 lines of code
      3 parameters
      1 conditional paths
      uses variable vtq_info::loc defined in qtype.c
      uses macro definition NULL defined in config.h
   function print_qtype(printf_func,qtype,store) in line 276
      protection public
      4 lines of code
      3 parameters
      1 conditional paths
      uses function print_qtype_qf(printf_func,pr_qual_fn,qtype,store,bool) defined in qtype.c
      uses function print_qual(printf_func,qual) defined in quals.c
      uses variable Qtypelist::qt defined in qtype.c
      uses macro definition FALSE defined in bool.h
   function print_qtype_raw(printf_func,qtype,store) in line 277
      protection public
      4 lines of code
      3 parameters
      1 conditional paths
      uses function print_qtype_qf(printf_func,pr_qual_fn,qtype,store,bool) defined in qtype.c
      uses function print_qual_raw(printf_func,qual) defined in quals.c
      uses variable Qtypelist::qt defined in qtype.c
      uses macro definition TRUE defined in bool.h
   function print_qtype_qf(printf_func,pr_qual_fn,qtype,store,bool) in line 278
      protection public
      18 lines of code
      5 parameters
      3 conditional paths
      uses variable vtq_info::result defined in qtype.c
      uses variable Qtypelist::qt defined in qtype.c
      uses function qtype_error(qtype) defined in qtype.c
      uses function qtype_scheme(qtype) defined in qtype.c
      uses variable Qtype::qual defined in qtype.c
      uses macro definition NULL defined in config.h
      uses function print_ty_qf(printf_func,pr_qual_fn,ty,store,bool) defined in qtype.c
      uses variable Qtype::type defined in qtype.c
   function color_qtype(qtype,store) in line 281
      protection public
      52 lines of code
      2 parameters
      15 conditional paths
      uses variable Qtypelist::qt defined in qtype.c
      uses function qtype_scheme(qtype) defined in qtype.c
      uses function qtype_error(qtype) defined in qtype.c
      uses variable Qtype::qual defined in qtype.c
      uses macro definition NULL defined in config.h
      uses function color_qual(qual) defined in quals.c
      uses variable Qtype::type defined in qtype.c
      uses function combine_colors_pam(const char *,const char *) defined in color.h
      uses function color_qtype(qtype,store) defined in qtype.c
      uses function points_to_fs_qtype(qtype,store) defined in qtype.c
      uses function fail(const char *,...) defined in utils.c
   function nontriv_soln_qtype(qtype,store) in line 285
      protection public
      71 lines of code
      2 parameters
      20 conditional paths
      uses variable vtq_info::result defined in qtype.c
      uses macro definition FALSE defined in bool.h
      uses variable Qtypelist::qt defined in qtype.c
      uses function qtype_error(qtype) defined in qtype.c
      uses function qtype_scheme(qtype) defined in qtype.c
      uses macro definition TRUE defined in bool.h
      uses function scan_qual_bounds(qual,qual_traverse_fn,void *) defined in quals.c
      uses variable Qtype::qual defined in qtype.c
      uses function nontriv_soln_fn(qual,bool *) defined in qtype.c
      uses variable Qtype::type defined in qtype.c
      uses function f(char *) defined in taint-const-subtyping.c
      uses function nontriv_soln_qtype(qtype,store) defined in qtype.c
      uses function points_to_qtype(qtype) defined in qtype.c
      uses function points_to_fs_qtype(qtype,store) defined in qtype.c
      uses function qtypelist_scan(qtypelist,qtypelist_scanner *) defined in qtype.c
      uses function arg_qtypes(qtype) defined in qtype.c
      uses function qtypelist_next(qtypelist_scanner *) defined in qtype.c
      uses function store_in_qtype(qtype) defined in qtype.c
      uses function return_qtype(qtype) defined in qtype.c
      uses function store_out_qtype(qtype) defined in qtype.c
      uses function qtype_varargs(qtype) defined in qtype.c
      uses function vqual_qtype(qtype) defined in qtype.c
      uses function array_of_qtype(qtype) defined in qtype.c
      uses function fail(const char *,...) defined in utils.c
   function ref_qtype_store(location,qtype,store) in line 294
      protection public
      61 lines of code
      3 parameters
      10 conditional paths
      uses variable Qtypelist::qt defined in qtype.c
      uses variable Qtype::type defined in qtype.c
      uses function make_store_ref(location,store,aloc) defined in effect.c
      uses variable vtq_info::loc defined in qtype.c
      uses function qtype_aggregate(qtype) defined in qtype.c
      uses function field_scan(qtype,field_scanner *) defined in qtype.c
      uses function field_next(field_scanner *) defined in qtype.c
      uses function ref_qtype_store(location,qtype,store) defined in qtype.c
      uses function qtype_array(qtype) defined in qtype.c
   function qtype_to_fs_qtype_with_quals(location,qtype,store) in line 304
      protection public
      15 lines of code
      3 parameters
      3 conditional paths
      uses variable vtq_info::result defined in qtype.c
      uses variable Qtypelist::qt defined in qtype.c
      uses function qtype_function(qtype) defined in qtype.c
      uses function qtype_from_store(store,aloc) defined in effect.c
      uses function aloc_qtype(qtype) defined in qtype.c
      uses function qtype_to_fs_qtype(location,qtype) defined in qtype.c
      uses variable vtq_info::loc defined in qtype.c
      uses function report_qerror(location,severity,const char *,...) defined in analyze.c
      uses enumvalue sev_err defined in qerror.h
   function qtype_to_fs_qtype(location,qtype) in line 307
      protection public
      114 lines of code
      2 parameters
      14 conditional paths
      uses variable vtq_info::result defined in qtype.c
      uses variable Qtypelist::qt defined in qtype.c
      uses function qtype_error(qtype) defined in qtype.c
      uses variable error_qtype defined in qtype.c
      uses function qtype_scheme(qtype) defined in qtype.c
      uses function report_qerror(location,severity,const char *,...) defined in analyze.c
      uses variable vtq_info::loc defined in qtype.c
      uses enumvalue sev_warn defined in qerror.h
      uses function qtype_to_fs_qtype(location,qtype) defined in qtype.c
      uses variable Qtype::type defined in qtype.c
      uses function name_qual(qual) defined in quals.c
      uses variable Qtype::qual defined in qtype.c
      uses function make_qvar(const char *,location,bool) defined in quals.c
      uses function preferred_qual(qual) defined in quals.c
      uses macro definition ralloc defined in regions.h
      uses variable parse_region defined in c-parse.h
      uses macro definition NULL defined in config.h
      uses function mkqtype_pointer_loc(qual,aloc) defined in qtype.c
      uses function aloc_qtype(qtype) defined in qtype.c
      uses function mkqtype_array(qual,qtype,expression,aloc,aloc) defined in qtype.c
      uses function array_of_qtype(qtype) defined in qtype.c
      uses function array_size_qtype(qtype) defined in qtype.c
      uses function array_aloc_qtype(qtype) defined in qtype.c
      uses function f(char *) defined in taint-const-subtyping.c
      uses function mkqtype_function(qual,bool,qual,bool,qtype,qtypelist,store,store,aloc,effect) defined in qtype.c
      uses function fail(const char *,...) defined in utils.c
   function store_aloc_qtype(qtype,store,aloc) in line 311
      protection public
      45 lines of code
      3 parameters
      12 conditional paths
      uses variable vtq_info::result defined in qtype.c
      uses macro definition FALSE defined in bool.h
      uses variable Qtypelist::qt defined in qtype.c
      uses function qtype_error(qtype) defined in qtype.c
      uses function store_aloc_qual(qual,store,aloc) defined in quals.c
      uses variable Qtype::qual defined in qtype.c
      uses variable Qtype::type defined in qtype.c
      uses function store_aloc_qtype(qtype,store,aloc) defined in qtype.c
      uses function return_qtype(qtype) defined in qtype.c
      uses function qtypelist_scan(qtypelist,qtypelist_scanner *) defined in qtype.c
      uses function arg_qtypes(qtype) defined in qtype.c
      uses function qtypelist_next(qtypelist_scanner *) defined in qtype.c
      uses function fail(const char *,...) defined in utils.c
   function toplvl_qual_fs_qtype(qtype) in line 315
      protection public
      39 lines of code
      1 parameters
      12 conditional paths
      uses variable vtq_info::result defined in qtype.c
      uses macro definition FALSE defined in bool.h
      uses variable Qtypelist::qt defined in qtype.c
      uses function qtype_error(qtype) defined in qtype.c
      uses macro definition TRUE defined in bool.h
      uses function scan_qual_bounds(qual,qual_traverse_fn,void *) defined in quals.c
      uses variable Qtype::qual defined in qtype.c
      uses function nontriv_soln_fn(qual,bool *) defined in qtype.c
      uses variable Qtype::type defined in qtype.c
      uses function toplvl_qual_fs_qtype(qtype) defined in qtype.c
      uses function return_qtype(qtype) defined in qtype.c
      uses function qtypelist_scan(qtypelist,qtypelist_scanner *) defined in qtype.c
      uses function arg_qtypes(qtype) defined in qtype.c
      uses function qtypelist_next(qtypelist_scanner *) defined in qtype.c
      uses function fail(const char *,...) defined in utils.c
   function mk_no_qual_qtype_fs(location,qtype,store) in line 318
      protection public
      5 lines of code
      3 parameters
      1 conditional paths
      uses variable vtq_info::loc defined in qtype.c
      uses variable Qtypelist::qt defined in qtype.c
   function points_to_fs_qtype(qtype,store) in line 321
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses function qtype_pointer_loc(qtype) defined in qtype.c
      uses variable Qtypelist::qt defined in qtype.c
      uses function qtype_from_store(store,aloc) defined in effect.c
      uses function aloc_qtype(qtype) defined in qtype.c
   function default_conversion_fs_qtype(qtype) in line 324
      protection public
      21 lines of code
      1 parameters
      4 conditional paths
      uses variable Qtype::conv defined in qtype.c
      uses function qtype_function(qtype) defined in qtype.c
      uses variable vtq_info::q defined in qtype.c
      uses function make_qvar(const char *,location,bool) defined in quals.c
      uses macro definition NULL defined in config.h
      uses macro definition FALSE defined in bool.h
      uses function mkqtype_pointer_loc(qual,aloc) defined in qtype.c
      uses variable Qtype::type defined in qtype.c
      uses function qtype_array(qtype) defined in qtype.c
      uses variable Qtype::qual defined in qtype.c
   function mkleq_fs_qtype(location,qtype,qtype,store) in line 328
      protection public
      4 lines of code
      4 parameters
      1 conditional paths
      uses function mkXeq_qtype_err(location,qtype,qtype,mkXeq,bool,store) defined in qtype.c
      uses variable vtq_info::loc defined in qtype.c
      uses enumvalue mkleq defined in qtype.c
      uses macro definition FALSE defined in bool.h
   function mkleq_fs_assign_convert(location,qtype,qtype,store) in line 331
      protection public
      5 lines of code
      4 parameters
      1 conditional paths
      uses variable vtq_info::loc defined in qtype.c
   function assign_flow_sensitive(location,const char *,qtype,qtype,store,bool) in line 338
      protection public
      15 lines of code
      6 parameters
      1 conditional paths
      uses function qtype_pointer_loc(qtype) defined in qtype.c
      uses function copy_qtype(qtype,location) defined in qtype.c
      uses function points_to_fs_qtype(qtype,store) defined in qtype.c
      uses variable vtq_info::loc defined in qtype.c
      uses function aloc_qtype(qtype) defined in qtype.c
      uses macro definition insistnot defined in utils.h
      uses function mkleq_fs_assign_convert(location,qtype,qtype,store) defined in qtype.c
      uses function make_store_assign(location,const char *,store,aloc,qtype,bool) defined in effect.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cqual/cqual-0.981/src/qualifiers.h
module qualifiers.h
   variable TYPE_QUAL in line 2
      protection public
   variable volatile_qualifier in line 2
      protection public
   function Q(const,TYPE_QUAL,const_qualifier,2) in line 1
      protection public
      1 lines of code
      4 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cqual/cqual-0.981/src/quals.c
module quals.c
   enumeration dir in line 41
      protection public
   enumeration cond_dir in line 118
      protection public
   enumeration @41 in line 151
      protection public
   typedef po_info in line 38
      protection public
   typedef traverse_edge in line 48
      protection public
   typedef cond_dir in line 118
      protection public
   typedef print_info in line 1697
      protection public
   variable state in line 151
      protection public
   variable found_fs_qual in line 155
      protection public
   variable flag_print_quals_graph in line 159
      protection public
   variable quals_region in line 161
      protection public
   variable next_qual in line 163
      protection public
   variable max_index in line 164
      protection public
   variable graph_file in line 165
      protection public
   variable all_quals in line 166
      protection public
   variable all_pos in line 167
      protection public
   variable current_po in line 168
      protection public
   variable const_qual in line 169
      protection public
   variable nonconst_qual in line 170
      protection public
   variable volatile_qual in line 171
      protection public
   variable restrict_qual in line 172
      protection public
   variable noreturn_qual in line 173
      protection public
   variable init_qual in line 174
      protection public
   variable noninit_qual in line 175
      protection public
   variable num_hotspots in line 179
      protection public
   variable hotspots in line 181
      protection public
   enumvalue dir_none in line 41
      protection public
   enumvalue dir_forward in line 41
      protection public
   enumvalue dir_backward in line 41
      protection public
   enumvalue c_leq_v in line 118
      protection public
   enumvalue v_leq_c in line 118
      protection public
   enumvalue state_start in line 151
      protection public
   enumvalue state_init in line 151
      protection public
   enumvalue state_pos_defined in line 151
      protection public
   function mkcond(cond_dir,qual,qual,qual,location) in line 134
      protection public
      13 lines of code
      5 parameters
      1 conditional paths
      uses macro definition ralloc defined in regions.h
      uses variable quals_region defined in quals.c
      uses variable Condition::dir defined in quals.c
      uses variable Traverse_edge::dir defined in quals.c
      uses variable Condition::c defined in quals.c
      uses variable Condition::left defined in quals.c
      uses variable Condition::right defined in quals.c
      uses variable Condition::loc defined in quals.c
      uses variable Traverse_edge::loc defined in quals.c
      uses variable Condition::triggered defined in quals.c
      uses macro definition FALSE defined in bool.h
   function ecr_qual(qual) in line 136
      protection public
      30 lines of code
      1 parameters
      6 conditional paths
      uses variable type_qualifier::kind defined in quals.c
      uses variable type_qualifier::u defined in quals.c
      uses variable type_qualifier::link defined in quals.c
      uses function fail(const char *,...) defined in utils.c
   function increment_error_counts(qual,qual) in line 137
      protection public
      18 lines of code
      2 parameters
      4 conditional paths
      uses variable num_hotspots defined in quals.c
      uses function ecr_qual(qual) defined in quals.c
      uses variable type_qualifier::kind defined in quals.c
      uses function traverse_qual_graph_nodes(qual,bool,qual_traverse_fn,void *) defined in quals.c
      uses macro definition TRUE defined in bool.h
      uses function increment_error_count_func(qual,void *) defined in quals.c
      uses macro definition NULL defined in config.h
   function update_error_count(qual) in line 138
      protection public
      54 lines of code
      1 parameters
      12 conditional paths
      uses function ecr_qual(qual) defined in quals.c
      uses variable type_qualifier::kind defined in quals.c
      uses variable type_qualifier::u defined in quals.c
      uses variable type_qualifier::var defined in quals.c
      uses variable num_hotspots defined in quals.c
      uses variable hotspots defined in quals.c
      uses function eq_qual(qual,qual) defined in quals.c
      uses function error_count_qual(qual) defined in quals.c
      uses macro definition NULL defined in config.h
   function cond_set_trigger(qual) in line 139
      protection public
      29 lines of code
      1 parameters
      5 conditional paths
      uses macro definition FALSE defined in bool.h
      uses function ecr_qual(qual) defined in quals.c
      uses variable type_qualifier::kind defined in quals.c
      uses macro definition scan_cond_set defined in containers.h
      uses variable type_qualifier::u defined in quals.c
      uses variable type_qualifier::var defined in quals.c
      uses variable Condition::triggered defined in quals.c
      uses variable Condition::dir defined in quals.c
      uses enumvalue c_leq_v defined in quals.c
      uses function leq_qual(qual,qual) defined in quals.c
      uses variable Condition::c defined in quals.c
      uses enumvalue v_leq_c defined in quals.c
      uses function fail(const char *,...) defined in utils.c
      uses function mkleq_qual(location,qual,qual) defined in quals.c
      uses variable Condition::loc defined in quals.c
      uses variable Condition::left defined in quals.c
      uses variable Condition::right defined in quals.c
   function init_quals(void) in line 189
      protection public
      30 lines of code
      1 parameters
      1 conditional paths
      uses variable quals_region defined in quals.c
      uses function newregion(void) defined in regions.c
      uses variable next_qual defined in quals.c
      uses variable max_index defined in quals.c
      uses variable all_quals defined in quals.c
      uses variable all_pos defined in quals.c
      uses variable current_po defined in quals.c
      uses macro definition NULL defined in config.h
      uses variable num_hotspots defined in quals.c
      uses variable hotspots defined in quals.c
      uses macro definition rarrayalloc defined in regions.h
      uses variable flag_print_quals_graph defined in quals.c
      uses variable graph_file defined in quals.c
      uses variable state defined in quals.c
      uses enumvalue state_init defined in quals.c
   function end_define_pos(void) in line 222
      protection public
      23 lines of code
      1 parameters
      1 conditional paths
      uses variable state defined in quals.c
      uses enumvalue state_init defined in quals.c
      uses variable quals_region defined in quals.c
      uses macro definition scan_qual_set defined in containers.h
      uses variable all_quals defined in quals.c
      uses macro definition ralloc defined in regions.h
      uses function bitset_new(region,unsigned int) defined in bitset.c
      uses variable max_index defined in quals.c
      uses function bitset_insert_all(bitset) defined in bitset.c
      uses enumvalue state_pos_defined defined in quals.c
   function finish_quals(void) in line 247
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses variable flag_print_quals_graph defined in quals.c
      uses variable graph_file defined in quals.c
   function dispose_quals(void) in line 259
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses variable quals_region defined in quals.c
      uses function deleteregion(region) defined in regions.c
      uses variable state defined in quals.c
      uses enumvalue state_start defined in quals.c
      uses variable bitset defined in bitset.h
      uses macro definition TRUE defined in bool.h
      uses macro definition scan_qual_set defined in containers.h
      uses variable all_quals defined in quals.c
      uses function bitset_member(bitset,unsigned int) defined in bitset.c
      uses variable type_qualifier::u defined in quals.c
      uses variable type_qualifier::elt defined in quals.c
      uses function printf(const char *$NONYEAR,(null)) defined in rcs1.c
      uses macro definition FALSE defined in bool.h
      uses variable type_qualifier::kind defined in quals.c
      uses function nonprop_qual(qual) defined in quals.c
      uses function bitset_new(region,unsigned int) defined in bitset.c
      uses variable max_index defined in quals.c
      uses function bitset_insert_all(bitset) defined in bitset.c
      uses function eq_qual(qual,qual) defined in quals.c
      uses macro definition insist defined in utils.h
      uses function bitset_remove(bitset,unsigned int) defined in bitset.c
      uses function leq_qual(qual,qual) defined in quals.c
      uses macro definition ralloc defined in regions.h
      uses function bitset_copy(region,bitset) defined in bitset.c
      uses function bitset_insert(bitset,unsigned int) defined in bitset.c
   function begin_po_qual(void) in line 407
      protection public
      9 lines of code
      1 parameters
      1 conditional paths
      uses variable current_po defined in quals.c
      uses function fail(const char *,...) defined in utils.c
      uses macro definition ralloc defined in regions.h
      uses variable quals_region defined in quals.c
      uses variable po_info::qualifiers defined in quals.c
      uses variable po_info::flow_sensitive defined in quals.c
      uses macro definition FALSE defined in bool.h
      uses variable po_info::nonprop defined in quals.c
   function end_po_qual(void) in line 417
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses variable current_po defined in quals.c
      uses function fail(const char *,...) defined in utils.c
      uses variable quals_region defined in quals.c
      uses variable all_pos defined in quals.c
      uses macro definition NULL defined in config.h
   function set_po_flow_sensitive(void) in line 426
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable current_po defined in quals.c
      uses variable po_info::flow_sensitive defined in quals.c
      uses macro definition TRUE defined in bool.h
      uses variable po_info::nonprop defined in quals.c
   function set_po_nonprop(void) in line 433
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses variable current_po defined in quals.c
      uses variable po_info::nonprop defined in quals.c
      uses macro definition TRUE defined in bool.h
   function add_qual(const char *) in line 443
      protection public
      55 lines of code
      1 parameters
      1 conditional paths
      uses variable state defined in quals.c
      uses enumvalue state_pos_defined defined in quals.c
      uses variable current_po defined in quals.c
      uses function fail(const char *,...) defined in utils.c
      uses function find_qual(const char *) defined in quals.c
      uses variable type_qualifier::u defined in quals.c
      uses variable type_qualifier::elt defined in quals.c
      uses macro definition ralloc defined in regions.h
      uses variable quals_region defined in quals.c
      uses variable type_qualifier::kind defined in quals.c
      uses variable type_qualifier::mark defined in quals.c
      uses macro definition FALSE defined in bool.h
      uses function rstrdup(region,const char *) defined in regions.c
      uses macro definition NULL defined in config.h
      uses enumvalue level_value defined in quals.h
      uses enumvalue sign_pos defined in quals.h
      uses variable po_info::nonprop defined in quals.c
      uses variable max_index defined in quals.c
      uses variable po_info::qualifiers defined in quals.c
      uses variable all_quals defined in quals.c
      uses variable const_qual defined in quals.c
      uses variable nonconst_qual defined in quals.c
      uses variable volatile_qual defined in quals.c
      uses variable restrict_qual defined in quals.c
      uses variable noreturn_qual defined in quals.c
      uses variable init_qual defined in quals.c
      uses variable noninit_qual defined in quals.c
   function add_qual_lt(qual,qual) in line 500
      protection public
      28 lines of code
      2 parameters
      1 conditional paths
      uses variable type_qualifier::kind defined in quals.c
      uses variable type_qualifier::u defined in quals.c
      uses variable type_qualifier::elt defined in quals.c
      uses variable quals_region defined in quals.c
      uses macro definition scan_qual_set defined in containers.h
      uses function add_qual_lt(qual,qual) defined in quals.c
   function add_color_qual(qual,const char *) in line 530
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses variable type_qualifier::kind defined in quals.c
      uses variable type_qualifier::u defined in quals.c
      uses variable type_qualifier::elt defined in quals.c
      uses function rstrdup(region,const char *) defined in regions.c
      uses variable quals_region defined in quals.c
   function add_level_qual(qual,level_qual_t) in line 537
      protection public
      7 lines of code
      2 parameters
      1 conditional paths
      uses variable type_qualifier::kind defined in quals.c
      uses enumvalue level_value defined in quals.h
      uses enumvalue level_ref defined in quals.h
      uses variable type_qualifier::u defined in quals.c
      uses variable type_qualifier::elt defined in quals.c
   function add_sign_qual(qual,sign_qual_t) in line 546
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
      uses variable type_qualifier::kind defined in quals.c
      uses enumvalue sign_pos defined in quals.h
      uses enumvalue sign_neg defined in quals.h
      uses enumvalue sign_eq defined in quals.h
      uses variable type_qualifier::u defined in quals.c
      uses variable type_qualifier::elt defined in quals.c
   function find_qual(const char *) in line 554
      protection public
      17 lines of code
      1 parameters
      1 conditional paths
      uses macro definition scan_qual_set defined in containers.h
      uses variable all_quals defined in quals.c
      uses variable type_qualifier::kind defined in quals.c
      uses variable type_qualifier::u defined in quals.c
      uses variable type_qualifier::elt defined in quals.c
      uses variable state defined in quals.c
      uses enumvalue state_pos_defined defined in quals.c
      uses variable found_fs_qual defined in quals.c
      uses macro definition TRUE defined in bool.h
      uses macro definition NULL defined in config.h
   function reset_flow_sensitive_quals(void) in line 573
      protection public
      9 lines of code
      1 parameters
      1 conditional paths
      uses macro definition scan_po_set defined in containers.h
      uses variable all_pos defined in quals.c
      uses variable po_info::flow_sensitive defined in quals.c
      uses variable po_info::nonprop defined in quals.c
      uses macro definition FALSE defined in bool.h
   function make_qvar(const char *,location,bool) in line 590
      protection public
      27 lines of code
      3 parameters
      1 conditional paths
      uses variable state defined in quals.c
      uses enumvalue state_pos_defined defined in quals.c
      uses macro definition ralloc defined in regions.h
      uses variable quals_region defined in quals.c
      uses variable type_qualifier::kind defined in quals.c
      uses variable type_qualifier::mark defined in quals.c
      uses macro definition FALSE defined in bool.h
      uses variable type_qualifier::u defined in quals.c
      uses variable type_qualifier::var defined in quals.c
      uses variable Traverse_edge::loc defined in quals.c
      uses macro definition NULL defined in config.h
   function make_fresh_qvar(const char *,location) in line 619
      protection public
      8 lines of code
      2 parameters
      1 conditional paths
      uses function rstrcat(region,const char *,const char *) defined in utils.c
      uses variable quals_region defined in quals.c
      uses function inttostr(region,int) defined in utils.c
      uses variable next_qual defined in quals.c
      uses function make_qvar(const char *,location,bool) defined in quals.c
      uses variable Traverse_edge::loc defined in quals.c
      uses macro definition FALSE defined in bool.h
   function mk_no_qual_qual(location,qual) in line 629
      protection public
      8 lines of code
      2 parameters
      1 conditional paths
      uses function ecr_qual(qual) defined in quals.c
      uses variable type_qualifier::kind defined in quals.c
      uses variable type_qualifier::u defined in quals.c
      uses variable type_qualifier::var defined in quals.c
      uses function report_qerror(location,severity,const char *,...) defined in analyze.c
      uses variable Traverse_edge::loc defined in quals.c
      uses enumvalue sev_err defined in qerror.h
      uses variable quals_region defined in quals.c
   function store_aloc_qual(qual,store,aloc) in line 639
      protection public
      17 lines of code
      3 parameters
      1 conditional paths
      uses function ecr_qual(qual) defined in quals.c
      uses variable type_qualifier::kind defined in quals.c
      uses variable type_qualifier::u defined in quals.c
      uses variable type_qualifier::var defined in quals.c
      uses function propagate_store_cell_forward(store,aloc) defined in effect.c
      uses function propagate_store_cell_backward(store,aloc) defined in effect.c
      uses macro definition FALSE defined in bool.h
      uses macro definition TRUE defined in bool.h
   function mkqual_edge(region,location,qual) in line 695
      protection public
      9 lines of code
      3 parameters
      2 conditional paths
      uses macro definition ralloc defined in regions.h
      uses variable Qual_edge::loc defined in quals.h
      uses variable Traverse_edge::loc defined in quals.c
      uses variable Qual_edge::qual defined in quals.h
      uses function pam_add_overlay_anchor(location) defined in iquals.tab.c
   function mktraverse_edge(region,qual,location,dir) in line 705
      protection public
      9 lines of code
      4 parameters
      1 conditional paths
      uses macro definition ralloc defined in regions.h
      uses variable Traverse_edge::loc defined in quals.c
      uses variable Traverse_edge::qual defined in quals.c
      uses variable Traverse_edge::dir defined in quals.c
   function level_qual(qual) in line 722
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable type_qualifier::kind defined in quals.c
      uses variable type_qualifier::u defined in quals.c
      uses variable type_qualifier::elt defined in quals.c
   function sign_qual(qual) in line 729
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable type_qualifier::kind defined in quals.c
      uses variable type_qualifier::u defined in quals.c
      uses variable type_qualifier::elt defined in quals.c
   function flow_sensitive_qual(qual) in line 736
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable type_qualifier::kind defined in quals.c
      uses variable type_qualifier::u defined in quals.c
      uses variable type_qualifier::elt defined in quals.c
   function nonprop_qual(qual) in line 743
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable type_qualifier::kind defined in quals.c
      uses variable type_qualifier::u defined in quals.c
      uses variable type_qualifier::elt defined in quals.c
   function variable_qual(qual) in line 750
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function ecr_qual(qual) defined in quals.c
      uses variable type_qualifier::kind defined in quals.c
   function constant_qual(qual) in line 757
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function ecr_qual(qual) defined in quals.c
      uses variable type_qualifier::kind defined in quals.c
   function preferred_qual(qual) in line 764
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses function ecr_qual(qual) defined in quals.c
      uses variable type_qualifier::kind defined in quals.c
      uses variable type_qualifier::u defined in quals.c
      uses variable type_qualifier::var defined in quals.c
   function location_qual(qual) in line 772
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses function ecr_qual(qual) defined in quals.c
      uses variable type_qualifier::kind defined in quals.c
      uses variable type_qualifier::u defined in quals.c
      uses variable type_qualifier::var defined in quals.c
   function lb_qual(qual) in line 780
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses function ecr_qual(qual) defined in quals.c
      uses variable type_qualifier::kind defined in quals.c
      uses variable type_qualifier::u defined in quals.c
      uses variable type_qualifier::var defined in quals.c
   function ub_qual(qual) in line 788
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses function ecr_qual(qual) defined in quals.c
      uses variable type_qualifier::kind defined in quals.c
      uses variable type_qualifier::u defined in quals.c
      uses variable type_qualifier::var defined in quals.c
   function error_count_qual(qual) in line 796
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses function ecr_qual(qual) defined in quals.c
      uses variable type_qualifier::kind defined in quals.c
      uses variable type_qualifier::u defined in quals.c
      uses variable type_qualifier::var defined in quals.c
   function print_graph_file(const char *,...) in line 809
      protection public
      6 lines of code
      2 parameters
      22 conditional paths
      uses variable graph_file defined in quals.c
      uses variable bitset defined in bitset.h
      uses macro definition FALSE defined in bool.h
      uses macro definition scan_po_set defined in containers.h
      uses variable all_pos defined in quals.c
      uses variable po_info::nonprop defined in quals.c
      uses function bitset_empty_range(bitset,unsigned int,unsigned int) defined in bitset.c
      uses variable type_qualifier::kind defined in quals.c
      uses macro definition scan_qual_edge_set defined in containers.h
      uses variable type_qualifier::u defined in quals.c
      uses variable type_qualifier::var defined in quals.c
      uses function variable_qual(qual) defined in quals.c
      uses variable Qual_edge::qual defined in quals.h
      uses function cond_set_trigger(qual) defined in quals.c
      uses function ecr_qual(qual) defined in quals.c
      uses macro definition alloca_bitset defined in bitset.h
      uses variable max_index defined in quals.c
      uses function bitset_assign(bitset,bitset) defined in bitset.c
      uses function bitset_intersect(bitset,const bitset) defined in bitset.c
      uses function mkleq_qual(location,qual,qual) defined in quals.c
      uses variable Traverse_edge::loc defined in quals.c
      uses variable flag_print_quals_graph defined in quals.c
      uses function print_qual_raw(printf_func,qual) defined in quals.c
      uses variable flag_ugly defined in flags.h
      uses function printf(const char *$NONYEAR,(null)) defined in rcs1.c
      uses function leq_qual(qual,qual) defined in quals.c
      uses function mkqual_edge(region,location,qual) defined in quals.c
      uses variable quals_region defined in quals.c
      uses macro definition NULL defined in config.h
      uses function increment_error_counts(qual,qual) defined in quals.c
      uses function mkeq_qual(location,qual,qual) defined in quals.c
      uses function constant_qual(qual) defined in quals.c
      uses macro definition TRUE defined in bool.h
      uses variable type_qualifier::elt defined in quals.c
   function _mkleq_qual(location,qual,qual,bool) in line 1090
      protection public
      204 lines of code
      4 parameters
      25 conditional paths
      uses variable flag_print_quals_graph defined in quals.c
      uses variable graph_file defined in quals.c
      uses function print_qual_raw(printf_func,qual) defined in quals.c
      uses function print_graph_file(const char *,...) defined in quals.c
      uses variable flag_ugly defined in flags.h
      uses function printf(const char *$NONYEAR,(null)) defined in rcs1.c
      uses function ecr_qual(qual) defined in quals.c
      uses macro definition FALSE defined in bool.h
      uses variable type_qualifier::kind defined in quals.c
      uses function leq_qual(qual,qual) defined in quals.c
      uses function growbuf_empty(growbuf) defined in buffer.c
      uses variable qual_error_detail defined in qerror.c
      uses function qual_ed_printf(const char *,...) defined in qerror.c
      uses variable type_qualifier::u defined in quals.c
      uses variable type_qualifier::elt defined in quals.c
      uses macro definition NULL defined in config.h
      uses function nonprop_qual(qual) defined in quals.c
      uses variable type_qualifier::var defined in quals.c
      uses function propagate_store_cell_forward(store,aloc) defined in effect.c
      uses function mkqual_edge(region,location,qual) defined in quals.c
      uses variable quals_region defined in quals.c
      uses variable Traverse_edge::loc defined in quals.c
      uses macro definition scan_loc_set defined in containers.h
      uses function report_qerror(location,severity,const char *,...) defined in analyze.c
      uses enumvalue sev_err defined in qerror.h
      uses macro definition scan_qual_set defined in containers.h
      uses macro definition scan_qual_edge_set defined in containers.h
      uses variable Qual_edge::qual defined in quals.h
      uses function cond_set_trigger(qual) defined in quals.c
      uses function increment_error_counts(qual,qual) defined in quals.c
      uses function propagate_store_cell_backward(store,aloc) defined in effect.c
   function mkleq_qual(location,qual,qual) in line 1295
      protection public
      4 lines of code
      3 parameters
      1 conditional paths
      uses function _mkleq_qual(location,qual,qual,bool) defined in quals.c
      uses variable Traverse_edge::loc defined in quals.c
      uses macro definition TRUE defined in bool.h
   function mkeq_qual(location,qual,qual) in line 1301
      protection public
      7 lines of code
      3 parameters
      1 conditional paths
      uses function mkleq_qual(location,qual,qual) defined in quals.c
      uses variable Traverse_edge::loc defined in quals.c
   function leq_qual(qual,qual) in line 1312
      protection public
      35 lines of code
      2 parameters
      1 conditional paths
      uses function ecr_qual(qual) defined in quals.c
      uses function constant_qual(qual) defined in quals.c
      uses macro definition TRUE defined in bool.h
      uses variable type_qualifier::kind defined in quals.c
      uses variable type_qualifier::u defined in quals.c
      uses variable type_qualifier::elt defined in quals.c
      uses macro definition scan_qual_set defined in containers.h
      uses variable type_qualifier::var defined in quals.c
      uses function leq_qual(qual,qual) defined in quals.c
      uses macro definition FALSE defined in bool.h
   function unify_qual(location,qual,qual) in line 1350
      protection public
      48 lines of code
      3 parameters
      1 conditional paths
      uses function ecr_qual(qual) defined in quals.c
      uses macro definition FALSE defined in bool.h
      uses function print_qual_raw(printf_func,qual) defined in quals.c
      uses function printf(const char *$NONYEAR,(null)) defined in rcs1.c
      uses function mkeq_qual(location,qual,qual) defined in quals.c
      uses variable Traverse_edge::loc defined in quals.c
      uses variable type_qualifier::kind defined in quals.c
      uses variable type_qualifier::u defined in quals.c
      uses variable type_qualifier::var defined in quals.c
      uses variable type_qualifier::link defined in quals.c
   function eq_qual(qual,qual) in line 1415
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function ecr_qual(qual) defined in quals.c
   function cmp_qual(qual,qual) in line 1422
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
      uses function ecr_qual(qual) defined in quals.c
   function has_lb_qual(qual,qual) in line 1430
      protection public
      10 lines of code
      2 parameters
      1 conditional paths
      uses macro definition scan_qual_edge_set defined in containers.h
      uses function lb_qual(qual) defined in quals.c
      uses function eq_qual(qual,qual) defined in quals.c
      uses variable Qual_edge::qual defined in quals.h
      uses macro definition TRUE defined in bool.h
      uses macro definition FALSE defined in bool.h
   function has_ub_qual(qual,qual) in line 1442
      protection public
      10 lines of code
      2 parameters
      1 conditional paths
      uses macro definition scan_qual_edge_set defined in containers.h
      uses function ub_qual(qual) defined in quals.c
      uses function eq_qual(qual,qual) defined in quals.c
      uses variable Qual_edge::qual defined in quals.h
      uses macro definition TRUE defined in bool.h
      uses macro definition FALSE defined in bool.h
   function has_qual(qual,qual) in line 1454
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function has_lb_qual(qual,qual) defined in quals.c
      uses function has_ub_qual(qual,qual) defined in quals.c
   function has_fs_qual(qual) in line 1461
      protection public
      17 lines of code
      1 parameters
      1 conditional paths
      uses macro definition scan_qual_edge_set defined in containers.h
      uses function ub_qual(qual) defined in quals.c
      uses function constant_qual(qual) defined in quals.c
      uses variable Qual_edge::qual defined in quals.h
      uses function ecr_qual(qual) defined in quals.c
      uses variable type_qualifier::u defined in quals.c
      uses variable type_qualifier::elt defined in quals.c
      uses macro definition TRUE defined in bool.h
      uses function lb_qual(qual) defined in quals.c
      uses macro definition FALSE defined in bool.h
   function cond_mkleq_qual(location,qual,qual,qual,qual) in line 1502
      protection public
      40 lines of code
      5 parameters
      1 conditional paths
      uses function constant_qual(qual) defined in quals.c
      uses function print_qual_raw(printf_func,qual) defined in quals.c
      uses function printf(const char *$NONYEAR,(null)) defined in rcs1.c
      uses function ecr_qual(qual) defined in quals.c
      uses function leq_qual(qual,qual) defined in quals.c
      uses function mkleq_qual(location,qual,qual) defined in quals.c
      uses variable Traverse_edge::loc defined in quals.c
      uses macro definition FALSE defined in bool.h
      uses variable Traverse_edge::dir defined in quals.c
      uses enumvalue c_leq_v defined in quals.c
      uses enumvalue v_leq_c defined in quals.c
      uses function variable_qual(qual) defined in quals.c
      uses variable quals_region defined in quals.c
      uses variable type_qualifier::u defined in quals.c
      uses variable type_qualifier::var defined in quals.c
      uses function mkcond(cond_dir,qual,qual,qual,location) defined in quals.c
   function scan_qual_bounds(qual,qual_traverse_fn,void *) in line 1583
      protection public
      70 lines of code
      3 parameters
      1 conditional paths
      uses function ecr_qual(qual) defined in quals.c
      uses variable type_qualifier::kind defined in quals.c
      uses macro definition scan_po_set defined in containers.h
      uses variable all_pos defined in quals.c
      uses variable po_info::nonprop defined in quals.c
      uses function bitset_full_range(bitset,unsigned int,unsigned int) defined in bitset.c
      uses function bitset_empty_range(bitset,unsigned int,unsigned int) defined in bitset.c
      uses macro definition scan_qual_set defined in containers.h
      uses variable po_info::qualifiers defined in quals.c
      uses function f(char *) defined in taint-const-subtyping.c
      uses function bitset_member(bitset,unsigned int) defined in bitset.c
      uses variable type_qualifier::u defined in quals.c
      uses variable type_qualifier::elt defined in quals.c
      uses function has_qual(qual,qual) defined in quals.c
      uses variable type_qualifier::var defined in quals.c
      uses function sign_qual(qual) defined in quals.c
      uses enumvalue sign_pos defined in quals.h
      uses enumvalue sign_eq defined in quals.h
      uses enumvalue sign_neg defined in quals.h
      uses macro definition scan_qual_edge_set defined in containers.h
      uses function constant_qual(qual) defined in quals.c
      uses variable Qual_edge::qual defined in quals.h
      uses function nonprop_qual(qual) defined in quals.c
   function cmp_qual_byname(qual,qual) in line 1655
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses variable type_qualifier::kind defined in quals.c
      uses variable type_qualifier::u defined in quals.c
      uses variable type_qualifier::elt defined in quals.c
   function add_bound(qual,struct add_info *) in line 1668
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses variable add_info::r defined in quals.c
      uses variable add_info::b defined in quals.c
   function scan_qual_bounds_sorted(qual,qual_traverse_fn,void *) in line 1674
      protection public
      18 lines of code
      3 parameters
      1 conditional paths
      uses variable scratch_region defined in qtype.c
      uses function newregion(void) defined in regions.c
      uses variable add_info::r defined in quals.c
      uses variable add_info::b defined in quals.c
      uses function scan_qual_bounds(qual,qual_traverse_fn,void *) defined in quals.c
      uses function add_bound(qual,struct add_info *) defined in quals.c
      uses macro definition scan_qual_set_byname defined in containers.h
      uses function f(char *) defined in taint-const-subtyping.c
      uses function deleteregion(region) defined in regions.c
   function print_qual_fn(qual,void *) in line 1699
      protection public
      10 lines of code
      2 parameters
      2 conditional paths
      uses variable type_qualifier::kind defined in quals.c
      uses variable print_info::first defined in quals.c
      uses variable print_info::size defined in quals.c
      uses variable print_info::pf defined in quals.c
      uses variable type_qualifier::u defined in quals.c
      uses variable type_qualifier::elt defined in quals.c
      uses macro definition FALSE defined in bool.h
   function print_qual(printf_func,qual) in line 1711
      protection public
      22 lines of code
      2 parameters
      1 conditional paths
      uses function ecr_qual(qual) defined in quals.c
      uses variable type_qualifier::kind defined in quals.c
      uses variable type_qualifier::u defined in quals.c
      uses variable type_qualifier::elt defined in quals.c
      uses macro definition TRUE defined in bool.h
      uses variable print_info::pf defined in quals.c
      uses function scan_qual_bounds_sorted(qual,qual_traverse_fn,void *) defined in quals.c
      uses function print_qual_fn(qual,void *) defined in quals.c
      uses variable print_info::size defined in quals.c
      uses function fail(const char *,...) defined in utils.c
   function print_qual_raw(printf_func,qual) in line 1735
      protection public
      12 lines of code
      2 parameters
      1 conditional paths
      uses function fail(const char *,...) defined in utils.c
      uses variable type_qualifier::kind defined in quals.c
      uses variable print_info::pf defined in quals.c
      uses variable type_qualifier::u defined in quals.c
      uses variable type_qualifier::elt defined in quals.c
      uses variable type_qualifier::var defined in quals.c
      uses function print_qual_raw(printf_func,qual) defined in quals.c
      uses variable type_qualifier::link defined in quals.c
   function combine_colors_pam(const char *,const char *) in line 1749
      protection public
      8 lines of code
      2 parameters
      4 conditional paths
      uses macro definition pam_color_multiqual defined in color.h
   function color_qual_fn(qual,void *) in line 1758
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
      uses function combine_colors_pam(const char *,const char *) defined in quals.c
      uses function color_qual(qual) defined in quals.c
   function color_qual(qual) in line 1766
      protection public
      19 lines of code
      1 parameters
      1 conditional paths
      uses function ecr_qual(qual) defined in quals.c
      uses variable type_qualifier::kind defined in quals.c
      uses variable type_qualifier::u defined in quals.c
      uses variable type_qualifier::elt defined in quals.c
      uses macro definition NULL defined in config.h
      uses function scan_qual_bounds(qual,qual_traverse_fn,void *) defined in quals.c
      uses function color_qual_fn(qual,void *) defined in quals.c
      uses function fail(const char *,...) defined in utils.c
   function name_qual(qual) in line 1787
      protection public
      11 lines of code
      1 parameters
      1 conditional paths
      uses function ecr_qual(qual) defined in quals.c
      uses variable type_qualifier::kind defined in quals.c
      uses variable type_qualifier::u defined in quals.c
      uses variable type_qualifier::elt defined in quals.c
      uses variable type_qualifier::var defined in quals.c
      uses function fail(const char *,...) defined in utils.c
   function unique_name_qual(qual) in line 1800
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function ecr_qual(qual) defined in quals.c
      uses function ptr_to_ascii(void *) defined in utils.c
   function interesting_scan_dir_fn(qual,void *) in line 1814
      protection public
      19 lines of code
      2 parameters
      4 conditional paths
      uses function sign_qual(qual) defined in quals.c
      uses enumvalue sign_pos defined in quals.h
      uses enumvalue dir_backward defined in quals.c
      uses enumvalue sign_neg defined in quals.h
      uses enumvalue dir_forward defined in quals.c
      uses enumvalue sign_eq defined in quals.h
      uses function fail(const char *,...) defined in utils.c
   function interesting_scan_dir(qual,qual) in line 1836
      protection public
      62 lines of code
      2 parameters
      15 conditional paths
      uses enumvalue dir_none defined in quals.c
      uses function scan_qual_bounds(qual,qual_traverse_fn,void *) defined in quals.c
      uses function interesting_scan_dir_fn(qual,void *) defined in quals.c
      uses function nonprop_qual(qual) defined in quals.c
      uses function sign_qual(qual) defined in quals.c
      uses enumvalue sign_pos defined in quals.h
      uses function leq_qual(qual,qual) defined in quals.c
      uses enumvalue dir_backward defined in quals.c
      uses enumvalue sign_neg defined in quals.h
      uses enumvalue dir_forward defined in quals.c
      uses enumvalue sign_eq defined in quals.h
      uses function fail(const char *,...) defined in utils.c
      uses macro definition scan_qual_edge_set defined in containers.h
      uses variable type_qualifier::u defined in quals.c
      uses variable type_qualifier::var defined in quals.c
      uses variable Qual_edge::qual defined in quals.h
   function traverse_clear_marks(qual) in line 1901
      protection public
      21 lines of code
      1 parameters
      3 conditional paths
      uses function ecr_qual(qual) defined in quals.c
      uses variable type_qualifier::mark defined in quals.c
      uses macro definition FALSE defined in bool.h
      uses variable type_qualifier::kind defined in quals.c
      uses macro definition scan_qual_edge_set defined in containers.h
      uses variable type_qualifier::u defined in quals.c
      uses variable type_qualifier::var defined in quals.c
      uses variable Qual_edge::qual defined in quals.h
   function find_shortest_path(region,qual,qual,dir) in line 1928
      protection public
      83 lines of code
      4 parameters
      9 conditional paths
      uses function ecr_qual(qual) defined in quals.c
      uses variable type_qualifier::kind defined in quals.c
      uses function constant_qual(qual) defined in quals.c
      uses function dd_new_list(region) defined in dd_list.c
      uses function dd_add_last(region,dd_list,void *) defined in dd_list.c
      uses variable type_qualifier::parent defined in quals.c
      uses macro definition NULL defined in config.h
      uses macro definition dd_is_empty defined in dd_list.h
      uses macro definition DD_GET defined in dd_list.h
      uses function dd_first(dd_list) defined in dd_list.c
      uses function dd_remove(dd_list_pos) defined in dd_list.c
      uses variable type_qualifier::mark defined in quals.c
      uses macro definition TRUE defined in bool.h
      uses function interesting_scan_dir(qual,qual) defined in quals.c
      uses enumvalue dir_backward defined in quals.c
      uses macro definition scan_qual_edge_set defined in containers.h
      uses variable type_qualifier::u defined in quals.c
      uses variable type_qualifier::var defined in quals.c
      uses variable Traverse_edge::loc defined in quals.c
      uses variable Qual_edge::qual defined in quals.h
      uses variable Qual_edge::loc defined in quals.h
      uses function mktraverse_edge(region,qual,location,dir) defined in quals.c
      uses enumvalue dir_forward defined in quals.c
      uses function traverse_clear_marks(qual) defined in quals.c
   function traverse_parent_edges_forward(qual,edge_traverse_fn,void *) in line 2013
      protection public
      17 lines of code
      3 parameters
      3 conditional paths
      uses function ecr_qual(qual) defined in quals.c
      uses variable type_qualifier::parent defined in quals.c
      uses macro definition NULL defined in config.h
      uses variable Traverse_edge::qual defined in quals.c
      uses variable Traverse_edge::dir defined in quals.c
      uses enumvalue dir_forward defined in quals.c
      uses function f(char *) defined in taint-const-subtyping.c
      uses variable Traverse_edge::loc defined in quals.c
      uses enumvalue dir_backward defined in quals.c
   function traverse_parent_edges_reverse(qual,edge_traverse_fn,void *) in line 2032
      protection public
      14 lines of code
      3 parameters
      3 conditional paths
      uses variable type_qualifier::parent defined in quals.c
      uses macro definition NULL defined in config.h
      uses variable Traverse_edge::qual defined in quals.c
      uses function f(char *) defined in taint-const-subtyping.c
      uses variable Traverse_edge::dir defined in quals.c
      uses enumvalue dir_backward defined in quals.c
      uses variable Traverse_edge::loc defined in quals.c
      uses enumvalue dir_forward defined in quals.c
   function traverse_shortest_path_edges(qual,qual,edge_traverse_fn,void *) in line 2051
      protection public
      52 lines of code
      4 parameters
      1 conditional paths
      uses variable scratch_region defined in qtype.c
      uses function newregion(void) defined in regions.c
      uses function find_shortest_path(region,qual,qual,dir) defined in quals.c
      uses enumvalue dir_backward defined in quals.c
      uses function traverse_parent_edges_forward(qual,edge_traverse_fn,void *) defined in quals.c
      uses function f(char *) defined in taint-const-subtyping.c
      uses enumvalue dir_forward defined in quals.c
      uses function eq_qual(qual,qual) defined in quals.c
      uses function traverse_parent_edges_reverse(qual,edge_traverse_fn,void *) defined in quals.c
      uses function interesting_scan_dir(qual,qual) defined in quals.c
      uses enumvalue dir_none defined in quals.c
      uses function deleteregion(region) defined in regions.c
   function __traverse_qual_graph_nodes(qual,qual,qual_traverse_fn,void *) in line 2106
      protection public
      36 lines of code
      4 parameters
      6 conditional paths
      uses function ecr_qual(qual) defined in quals.c
      uses function constant_qual(qual) defined in quals.c
      uses variable type_qualifier::mark defined in quals.c
      uses macro definition TRUE defined in bool.h
      uses variable type_qualifier::kind defined in quals.c
      uses function has_ub_qual(qual,qual) defined in quals.c
      uses function has_lb_qual(qual,qual) defined in quals.c
      uses function f(char *) defined in taint-const-subtyping.c
      uses macro definition scan_qual_edge_set defined in containers.h
      uses variable type_qualifier::u defined in quals.c
      uses variable type_qualifier::var defined in quals.c
      uses variable Qual_edge::qual defined in quals.h
   function _traverse_qual_graph_nodes(qual,dir,qual_traverse_fn,void *) in line 2145
      protection public
      25 lines of code
      4 parameters
      5 conditional paths
      uses function ecr_qual(qual) defined in quals.c
      uses variable type_qualifier::mark defined in quals.c
      uses macro definition TRUE defined in bool.h
      uses variable type_qualifier::kind defined in quals.c
      uses enumvalue dir_backward defined in quals.c
      uses macro definition scan_qual_edge_set defined in containers.h
      uses variable type_qualifier::u defined in quals.c
      uses variable type_qualifier::var defined in quals.c
      uses variable Qual_edge::qual defined in quals.h
      uses enumvalue dir_forward defined in quals.c
   function traverse_qual_graph_nodes_lower(qual,void *) in line 2179
      protection public
      8 lines of code
      2 parameters
      2 conditional paths
      uses variable traverse_node_data::arg defined in quals.c
      uses variable type_qualifier::kind defined in quals.c
      uses variable traverse_node_data::po_bounds_only defined in quals.c
      uses function interesting_scan_dir(qual,qual) defined in quals.c
      uses macro definition NULL defined in config.h
      uses enumvalue dir_backward defined in quals.c
      uses variable traverse_node_data::f defined in quals.c
   function traverse_qual_graph_nodes_upper(qual,void *) in line 2188
      protection public
      8 lines of code
      2 parameters
      2 conditional paths
      uses variable traverse_node_data::arg defined in quals.c
      uses variable type_qualifier::kind defined in quals.c
      uses variable traverse_node_data::po_bounds_only defined in quals.c
      uses function interesting_scan_dir(qual,qual) defined in quals.c
      uses macro definition NULL defined in config.h
      uses enumvalue dir_forward defined in quals.c
      uses variable traverse_node_data::f defined in quals.c
   function traverse_qual_graph_nodes_both(qual,void *) in line 2197
      protection public
      8 lines of code
      2 parameters
      2 conditional paths
      uses variable traverse_node_data::arg defined in quals.c
      uses variable type_qualifier::kind defined in quals.c
      uses variable traverse_node_data::po_bounds_only defined in quals.c
      uses function interesting_scan_dir(qual,qual) defined in quals.c
      uses macro definition NULL defined in config.h
      uses enumvalue dir_forward defined in quals.c
      uses enumvalue dir_backward defined in quals.c
      uses variable traverse_node_data::f defined in quals.c
   function traverse_qual_graph_nodes(qual,bool,qual_traverse_fn,void *) in line 2206
      protection public
      36 lines of code
      4 parameters
      2 conditional paths
      uses variable traverse_node_data::f defined in quals.c
      uses function f(char *) defined in taint-const-subtyping.c
      uses variable traverse_node_data::po_bounds_only defined in quals.c
      uses variable traverse_node_data::arg defined in quals.c
      uses function ecr_qual(qual) defined in quals.c
      uses variable type_qualifier::kind defined in quals.c
      uses function interesting_scan_dir(qual,qual) defined in quals.c
      uses macro definition NULL defined in config.h
      uses enumvalue dir_forward defined in quals.c
      uses enumvalue dir_backward defined in quals.c
      uses function _traverse_qual_graph_nodes(qual,dir,qual_traverse_fn,void *) defined in quals.c
      uses function traverse_qual_graph_nodes_both(qual,void *) defined in quals.c
      uses function traverse_clear_marks(qual) defined in quals.c
      uses function traverse_qual_graph_nodes_lower(qual,void *) defined in quals.c
      uses function traverse_qual_graph_nodes_upper(qual,void *) defined in quals.c
   function _traverse_qual_graph_edges(qual,dir,edge_traverse_fn,void *) in line 2245
      protection public
      33 lines of code
      4 parameters
      5 conditional paths
      uses function ecr_qual(qual) defined in quals.c
      uses variable type_qualifier::kind defined in quals.c
      uses variable type_qualifier::mark defined in quals.c
      uses macro definition TRUE defined in bool.h
      uses enumvalue dir_backward defined in quals.c
      uses macro definition scan_qual_edge_set defined in containers.h
      uses variable type_qualifier::u defined in quals.c
      uses variable type_qualifier::var defined in quals.c
      uses variable Qual_edge::qual defined in quals.h
      uses variable Qual_edge::loc defined in quals.h
      uses variable traverse_node_data::arg defined in quals.c
      uses enumvalue dir_forward defined in quals.c
   function traverse_qual_graph_edges_lower(qual,qual,location,void *) in line 2287
      protection public
      8 lines of code
      4 parameters
      2 conditional paths
      uses variable traverse_edge_data::arg defined in quals.c
      uses variable type_qualifier::kind defined in quals.c
      uses variable traverse_edge_data::po_bounds_only defined in quals.c
      uses function interesting_scan_dir(qual,qual) defined in quals.c
      uses macro definition NULL defined in config.h
      uses enumvalue dir_backward defined in quals.c
      uses variable traverse_edge_data::f defined in quals.c
      uses variable Traverse_edge::loc defined in quals.c
   function traverse_qual_graph_edges_upper(qual,qual,location,void *) in line 2296
      protection public
      8 lines of code
      4 parameters
      2 conditional paths
      uses variable traverse_edge_data::arg defined in quals.c
      uses variable type_qualifier::kind defined in quals.c
      uses variable traverse_edge_data::po_bounds_only defined in quals.c
      uses function interesting_scan_dir(qual,qual) defined in quals.c
      uses macro definition NULL defined in config.h
      uses enumvalue dir_forward defined in quals.c
      uses variable traverse_edge_data::f defined in quals.c
      uses variable Traverse_edge::loc defined in quals.c
   function traverse_qual_graph_edges_both(qual,qual,location,void *) in line 2305
      protection public
      10 lines of code
      4 parameters
      2 conditional paths
      uses variable traverse_edge_data::arg defined in quals.c
      uses variable type_qualifier::kind defined in quals.c
      uses variable traverse_edge_data::po_bounds_only defined in quals.c
      uses function interesting_scan_dir(qual,qual) defined in quals.c
      uses macro definition NULL defined in config.h
      uses variable traverse_edge_data::f defined in quals.c
      uses variable Traverse_edge::loc defined in quals.c
   function traverse_qual_graph_edges(qual,bool,edge_traverse_fn,void *) in line 2316
      protection public
      35 lines of code
      4 parameters
      2 conditional paths
      uses variable traverse_edge_data::f defined in quals.c
      uses function f(char *) defined in taint-const-subtyping.c
      uses variable traverse_edge_data::po_bounds_only defined in quals.c
      uses variable traverse_edge_data::arg defined in quals.c
      uses function ecr_qual(qual) defined in quals.c
      uses variable type_qualifier::kind defined in quals.c
      uses function interesting_scan_dir(qual,qual) defined in quals.c
      uses macro definition NULL defined in config.h
      uses enumvalue dir_forward defined in quals.c
      uses enumvalue dir_backward defined in quals.c
      uses function _traverse_qual_graph_edges(qual,dir,edge_traverse_fn,void *) defined in quals.c
      uses function traverse_qual_graph_edges_both(qual,qual,location,void *) defined in quals.c
      uses function traverse_clear_marks(qual) defined in quals.c
      uses function traverse_qual_graph_edges_lower(qual,qual,location,void *) defined in quals.c
      uses function traverse_qual_graph_edges_upper(qual,qual,location,void *) defined in quals.c
   function print_qual_graph_edge(qual,qual,location,void *) in line 2355
      protection public
      5 lines of code
      4 parameters
      1 conditional paths
      uses variable graph_file defined in quals.c
      uses variable traverse_edge_data::arg defined in quals.c
      uses function name_qual(qual) defined in quals.c
   function print_qual_graph(qual,const char *,bool) in line 2361
      protection public
      15 lines of code
      3 parameters
      1 conditional paths
      uses variable graph_file defined in quals.c
      uses function traverse_qual_graph_edges(qual,bool,edge_traverse_fn,void *) defined in quals.c
      uses variable traverse_edge_data::po_bounds_only defined in quals.c
      uses function print_qual_graph_edge(qual,qual,location,void *) defined in quals.c
   function increment_error_count(qual) in line 2440
      protection public
      12 lines of code
      1 parameters
      2 conditional paths
      uses variable hotspots defined in quals.c
      uses function ecr_qual(qual) defined in quals.c
      uses variable type_qualifier::kind defined in quals.c
      uses variable type_qualifier::u defined in quals.c
      uses variable type_qualifier::var defined in quals.c
      uses function update_error_count(qual) defined in quals.c
   function increment_error_count_func(qual,void *) in line 2454
      protection public
      6 lines of code
      2 parameters
      2 conditional paths
      uses function ecr_qual(qual) defined in quals.c
      uses variable type_qualifier::kind defined in quals.c
      uses function increment_error_count(qual) defined in quals.c
   function print_qual_edges(qual) in line 2481
      protection public
      12 lines of code
      1 parameters
      1 conditional paths
      uses macro definition scan_qual_edge_set defined in containers.h
      uses function lb_qual(qual) defined in quals.c
      uses function printf(const char *$NONYEAR,(null)) defined in rcs1.c
      uses function name_qual(qual) defined in quals.c
      uses variable Qual_edge::qual defined in quals.h
      uses function ecr_qual(qual) defined in quals.c
      uses function ub_qual(qual) defined in quals.c
   variable Traverse_edge::dir in line 47
      protection public
   variable Traverse_edge::loc in line 45
      protection public
   variable Traverse_edge::qual in line 46
      protection public
   variable type_qualifier::aloc in line 88
      protection public
   variable type_qualifier::color in line 71
      protection public
   variable type_qualifier::cond_set in line 93
      protection public
   variable type_qualifier::elt in line 80
      protection public
   variable type_qualifier::kind in line 60
      protection public
   variable type_qualifier::lb in line 89
      protection public
   variable type_qualifier::lbc in line 74
      protection public
   variable type_qualifier::level in line 72
      protection public
   variable type_qualifier::link in line 104
      protection public
   variable type_qualifier::loc in line 85
      protection public
   variable type_qualifier::mark in line 61
      protection public
   variable type_qualifier::name in line 70
      protection public
   variable type_qualifier::no_qual_loc_set in line 87
      protection public
   variable type_qualifier::num_equiv in line 95
      protection public
   variable type_qualifier::num_errors in line 98
      protection public
   variable type_qualifier::parent in line 62
      protection public
   variable type_qualifier::po in line 79
      protection public
   variable type_qualifier::preferred in line 96
      protection public
   variable type_qualifier::sign in line 73
      protection public
   variable type_qualifier::store in line 86
      protection public
   variable type_qualifier::u in line 105
      protection public
   variable type_qualifier::ub in line 89
      protection public
   variable type_qualifier::ubc in line 74
      protection public
   variable type_qualifier::var in line 100
      protection public
   variable type_qualifier::@43::elt in line 80
      protection public
   variable type_qualifier::@43::link in line 104
      protection public
   variable type_qualifier::@43::var in line 100
      protection public
   variable type_qualifier::@43::@44::color in line 71
      protection public
   variable type_qualifier::@43::@44::lbc in line 74
      protection public
   variable type_qualifier::@43::@44::level in line 72
      protection public
   variable type_qualifier::@43::@44::name in line 70
      protection public
   variable type_qualifier::@43::@44::po in line 79
      protection public
   variable type_qualifier::@43::@44::sign in line 73
      protection public
   variable type_qualifier::@43::@44::ubc in line 74
      protection public
   variable type_qualifier::@43::@45::aloc in line 88
      protection public
   variable type_qualifier::@43::@45::cond_set in line 93
      protection public
   variable type_qualifier::@43::@45::lb in line 89
      protection public
   variable type_qualifier::@43::@45::lbc in line 91
      protection public
   variable type_qualifier::@43::@45::loc in line 85
      protection public
   variable type_qualifier::@43::@45::name in line 84
      protection public
   variable type_qualifier::@43::@45::no_qual_loc_set in line 87
      protection public
   variable type_qualifier::@43::@45::num_equiv in line 95
      protection public
   variable type_qualifier::@43::@45::num_errors in line 98
      protection public
   variable type_qualifier::@43::@45::preferred in line 96
      protection public
   variable type_qualifier::@43::@45::store in line 86
      protection public
   variable type_qualifier::@43::@45::ub in line 89
      protection public
   variable type_qualifier::@43::@45::ubc in line 91
      protection public
   variable po_info::flow_sensitive in line 110
      protection public
   variable po_info::nonprop in line 111
      protection public
   variable po_info::qualifiers in line 109
      protection public
   variable Condition::c in line 122
      protection public
   variable Condition::dir in line 121
      protection public
   variable Condition::left in line 122
      protection public
   variable Condition::loc in line 127
      protection public
   variable Condition::right in line 122
      protection public
   variable Condition::triggered in line 128
      protection public
   variable add_info::b in line 1664
      protection public
   variable add_info::r in line 1663
      protection public
   variable print_info::first in line 1695
      protection public
   variable print_info::pf in line 1694
      protection public
   variable print_info::size in line 1696
      protection public
   variable traverse_node_data::arg in line 2175
      protection public
   variable traverse_node_data::f in line 2174
      protection public
   variable traverse_node_data::po_bounds_only in line 2176
      protection public
   variable traverse_edge_data::arg in line 2283
      protection public
   variable traverse_edge_data::f in line 2282
      protection public
   variable traverse_edge_data::po_bounds_only in line 2284
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cqual/cqual-0.981/src/quals.h
module quals.h
   enumeration level_qual_t in line 41
      protection public
   enumeration sign_qual_t in line 42
      protection public
   typedef qual_traverse_fn in line 62
      protection public
   typedef edge_traverse_fn in line 63
      protection public
   typedef pr_qual_fn in line 198
      protection public
   variable flag_print_quals_graph in line 39
      protection public
   variable const_qual in line 45
      protection public
   variable nonconst_qual in line 46
      protection public
   variable volatile_qual in line 47
      protection public
   variable restrict_qual in line 48
      protection public
   variable noreturn_qual in line 49
      protection public
   variable init_qual in line 50
      protection public
   variable noninit_qual in line 51
      protection public
   variable found_fs_qual in line 55
      protection public
   variable num_hotspots in line 226
      protection public
   variable hotspots in line 227
      protection public
   enumvalue level_value in line 41
      protection public
   enumvalue level_ref in line 41
      protection public
   enumvalue sign_pos in line 42
      protection public
   enumvalue sign_neg in line 42
      protection public
   enumvalue sign_eq in line 42
      protection public
   function init_quals(void) in line 75
      protection public
      30 lines of code
      1 parameters
      5 conditional paths
      uses function newregion(void) defined in regions.c
      uses macro definition NULL defined in config.h
      uses variable num_hotspots defined in quals.c
      uses variable hotspots defined in quals.c
      uses macro definition rarrayalloc defined in regions.h
      uses variable flag_print_quals_graph defined in quals.c
      uses variable state defined in quals.c
      uses enumvalue state_init defined in quals.c
   function end_define_pos(void) in line 77
      protection public
      23 lines of code
      1 parameters
      1 conditional paths
      uses variable state defined in quals.c
      uses enumvalue state_init defined in quals.c
      uses macro definition scan_qual_set defined in containers.h
      uses macro definition ralloc defined in regions.h
      uses function bitset_new(region,unsigned int) defined in bitset.c
      uses function bitset_insert_all(bitset) defined in bitset.c
      uses enumvalue state_pos_defined defined in quals.c
   function finish_quals(void) in line 80
      protection public
      8 lines of code
      1 parameters
      2 conditional paths
      uses variable flag_print_quals_graph defined in quals.c
   function dispose_quals(void) in line 82
      protection public
      7 lines of code
      1 parameters
      11 conditional paths
      uses function deleteregion(region) defined in regions.c
      uses variable state defined in quals.c
      uses enumvalue state_start defined in quals.c
      uses variable bitset defined in bitset.h
      uses macro definition TRUE defined in bool.h
      uses macro definition scan_qual_set defined in containers.h
      uses function bitset_member(bitset,unsigned int) defined in bitset.c
      uses variable type_qualifier::u defined in quals.c
      uses variable type_qualifier::elt defined in quals.c
      uses function printf(const char *$NONYEAR,(null)) defined in rcs1.c
      uses macro definition FALSE defined in bool.h
      uses variable type_qualifier::kind defined in quals.c
      uses function nonprop_qual(qual) defined in quals.c
      uses function bitset_new(region,unsigned int) defined in bitset.c
      uses function bitset_insert_all(bitset) defined in bitset.c
      uses function eq_qual(qual,qual) defined in quals.c
      uses macro definition insist defined in utils.h
      uses function bitset_remove(bitset,unsigned int) defined in bitset.c
      uses function leq_qual(qual,qual) defined in quals.c
      uses macro definition ralloc defined in regions.h
      uses function bitset_copy(region,bitset) defined in bitset.c
      uses function bitset_insert(bitset,unsigned int) defined in bitset.c
   function begin_po_qual(void) in line 96
      protection public
      9 lines of code
      1 parameters
      2 conditional paths
      uses function fail(const char *,...) defined in utils.c
      uses macro definition ralloc defined in regions.h
      uses variable po_info::qualifiers defined in quals.c
      uses variable po_info::flow_sensitive defined in quals.c
      uses macro definition FALSE defined in bool.h
      uses variable po_info::nonprop defined in quals.c
   function end_po_qual(void) in line 97
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses function fail(const char *,...) defined in utils.c
      uses macro definition NULL defined in config.h
   function set_po_flow_sensitive(void) in line 99
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable po_info::flow_sensitive defined in quals.c
      uses macro definition TRUE defined in bool.h
      uses variable po_info::nonprop defined in quals.c
   function set_po_nonprop(void) in line 101
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses variable po_info::nonprop defined in quals.c
      uses macro definition TRUE defined in bool.h
   function add_qual(const char *) in line 104
      protection public
      55 lines of code
      1 parameters
      13 conditional paths
      uses variable state defined in quals.c
      uses enumvalue state_pos_defined defined in quals.c
      uses function fail(const char *,...) defined in utils.c
      uses function find_qual(const char *) defined in quals.c
      uses variable type_qualifier::u defined in quals.c
      uses variable type_qualifier::elt defined in quals.c
      uses macro definition ralloc defined in regions.h
      uses variable type_qualifier::kind defined in quals.c
      uses variable type_qualifier::mark defined in quals.c
      uses macro definition FALSE defined in bool.h
      uses function rstrdup(region,const char *) defined in regions.c
      uses macro definition NULL defined in config.h
      uses enumvalue level_value defined in quals.h
      uses enumvalue sign_pos defined in quals.h
      uses variable po_info::nonprop defined in quals.c
      uses variable po_info::qualifiers defined in quals.c
      uses variable const_qual defined in quals.c
      uses variable nonconst_qual defined in quals.c
      uses variable volatile_qual defined in quals.c
      uses variable restrict_qual defined in quals.c
      uses variable noreturn_qual defined in quals.c
      uses variable init_qual defined in quals.c
      uses variable noninit_qual defined in quals.c
   function add_qual_lt(qual,qual) in line 105
      protection public
      28 lines of code
      2 parameters
      2 conditional paths
      uses variable type_qualifier::kind defined in quals.c
      uses variable type_qualifier::u defined in quals.c
      uses variable type_qualifier::elt defined in quals.c
      uses macro definition scan_qual_set defined in containers.h
      uses function add_qual_lt(qual,qual) defined in quals.c
   function add_color_qual(qual,const char *) in line 106
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses variable type_qualifier::kind defined in quals.c
      uses variable type_qualifier::u defined in quals.c
      uses variable type_qualifier::elt defined in quals.c
      uses function rstrdup(region,const char *) defined in regions.c
   function add_level_qual(qual,level_qual_t) in line 107
      protection public
      7 lines of code
      2 parameters
      1 conditional paths
      uses variable type_qualifier::kind defined in quals.c
      uses enumvalue level_value defined in quals.h
      uses enumvalue level_ref defined in quals.h
      uses variable type_qualifier::u defined in quals.c
      uses variable type_qualifier::elt defined in quals.c
   function add_sign_qual(qual,sign_qual_t) in line 109
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
      uses variable type_qualifier::kind defined in quals.c
      uses enumvalue sign_pos defined in quals.h
      uses enumvalue sign_neg defined in quals.h
      uses enumvalue sign_eq defined in quals.h
      uses variable type_qualifier::u defined in quals.c
      uses variable type_qualifier::elt defined in quals.c
   function find_qual(const char *) in line 112
      protection public
      17 lines of code
      1 parameters
      3 conditional paths
      uses macro definition scan_qual_set defined in containers.h
      uses variable type_qualifier::kind defined in quals.c
      uses variable type_qualifier::u defined in quals.c
      uses variable type_qualifier::elt defined in quals.c
      uses variable state defined in quals.c
      uses enumvalue state_pos_defined defined in quals.c
      uses variable found_fs_qual defined in quals.c
      uses macro definition TRUE defined in bool.h
      uses macro definition NULL defined in config.h
   function level_qual(qual) in line 113
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable type_qualifier::kind defined in quals.c
      uses variable type_qualifier::u defined in quals.c
      uses variable type_qualifier::elt defined in quals.c
   function sign_qual(qual) in line 114
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable type_qualifier::kind defined in quals.c
      uses variable type_qualifier::u defined in quals.c
      uses variable type_qualifier::elt defined in quals.c
   function flow_sensitive_qual(qual) in line 115
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable type_qualifier::kind defined in quals.c
      uses variable type_qualifier::u defined in quals.c
      uses variable type_qualifier::elt defined in quals.c
   function nonprop_qual(qual) in line 117
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable type_qualifier::kind defined in quals.c
      uses variable type_qualifier::u defined in quals.c
      uses variable type_qualifier::elt defined in quals.c
   function variable_qual(qual) in line 119
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable type_qualifier::kind defined in quals.c
   function constant_qual(qual) in line 120
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable type_qualifier::kind defined in quals.c
   function make_qvar(const char *,location,bool) in line 129
      protection public
      27 lines of code
      3 parameters
      1 conditional paths
      uses variable state defined in quals.c
      uses enumvalue state_pos_defined defined in quals.c
      uses macro definition ralloc defined in regions.h
      uses variable type_qualifier::kind defined in quals.c
      uses variable type_qualifier::mark defined in quals.c
      uses macro definition FALSE defined in bool.h
      uses variable type_qualifier::u defined in quals.c
      uses variable type_qualifier::var defined in quals.c
      uses variable Traverse_edge::loc defined in quals.c
      uses macro definition NULL defined in config.h
   function make_fresh_qvar(const char *,location) in line 132
      protection public
      8 lines of code
      2 parameters
      1 conditional paths
      uses function rstrcat(region,const char *,const char *) defined in utils.c
      uses function inttostr(region,int) defined in utils.c
      uses function make_qvar(const char *,location,bool) defined in quals.c
      uses variable Traverse_edge::loc defined in quals.c
      uses macro definition FALSE defined in bool.h
   function store_aloc_qual(qual,store,aloc) in line 135
      protection public
      17 lines of code
      3 parameters
      4 conditional paths
      uses variable type_qualifier::kind defined in quals.c
      uses variable type_qualifier::u defined in quals.c
      uses variable type_qualifier::var defined in quals.c
      uses function propagate_store_cell_forward(store,aloc) defined in effect.c
      uses function propagate_store_cell_backward(store,aloc) defined in effect.c
      uses macro definition FALSE defined in bool.h
      uses macro definition TRUE defined in bool.h
   function mk_no_qual_qual(location,qual) in line 138
      protection public
      8 lines of code
      2 parameters
      2 conditional paths
      uses variable type_qualifier::kind defined in quals.c
      uses variable type_qualifier::u defined in quals.c
      uses variable type_qualifier::var defined in quals.c
      uses function report_qerror(location,severity,const char *,...) defined in analyze.c
      uses variable Traverse_edge::loc defined in quals.c
      uses enumvalue sev_err defined in qerror.h
   function preferred_qual(qual) in line 140
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses variable type_qualifier::kind defined in quals.c
      uses variable type_qualifier::u defined in quals.c
      uses variable type_qualifier::var defined in quals.c
   function location_qual(qual) in line 141
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses variable type_qualifier::kind defined in quals.c
      uses variable type_qualifier::u defined in quals.c
      uses variable type_qualifier::var defined in quals.c
   function lb_qual(qual) in line 142
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses variable type_qualifier::kind defined in quals.c
      uses variable type_qualifier::u defined in quals.c
      uses variable type_qualifier::var defined in quals.c
   function ub_qual(qual) in line 143
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses variable type_qualifier::kind defined in quals.c
      uses variable type_qualifier::u defined in quals.c
      uses variable type_qualifier::var defined in quals.c
   function error_count_qual(qual) in line 144
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses variable type_qualifier::kind defined in quals.c
      uses variable type_qualifier::u defined in quals.c
      uses variable type_qualifier::var defined in quals.c
   function scan_qual_bounds(qual,qual_traverse_fn,void *) in line 148
      protection public
      70 lines of code
      3 parameters
      10 conditional paths
      uses variable type_qualifier::kind defined in quals.c
      uses macro definition scan_po_set defined in containers.h
      uses variable po_info::nonprop defined in quals.c
      uses function bitset_full_range(bitset,unsigned int,unsigned int) defined in bitset.c
      uses function bitset_empty_range(bitset,unsigned int,unsigned int) defined in bitset.c
      uses macro definition scan_qual_set defined in containers.h
      uses variable po_info::qualifiers defined in quals.c
      uses function f(char *) defined in taint-const-subtyping.c
      uses function bitset_member(bitset,unsigned int) defined in bitset.c
      uses variable type_qualifier::u defined in quals.c
      uses variable type_qualifier::elt defined in quals.c
      uses function has_qual(qual,qual) defined in quals.c
      uses variable type_qualifier::var defined in quals.c
      uses function sign_qual(qual) defined in quals.c
      uses enumvalue sign_pos defined in quals.h
      uses enumvalue sign_eq defined in quals.h
      uses enumvalue sign_neg defined in quals.h
      uses macro definition scan_qual_edge_set defined in containers.h
      uses function constant_qual(qual) defined in quals.c
      uses variable Qual_edge::qual defined in quals.h
      uses function nonprop_qual(qual) defined in quals.c
   function scan_qual_bounds_sorted(qual,qual_traverse_fn,void *) in line 151
      protection public
      18 lines of code
      3 parameters
      1 conditional paths
      uses variable scratch_region defined in qtype.c
      uses function newregion(void) defined in regions.c
      uses variable add_info::r defined in quals.c
      uses variable add_info::b defined in quals.c
      uses function scan_qual_bounds(qual,qual_traverse_fn,void *) defined in quals.c
      uses macro definition scan_qual_set_byname defined in containers.h
      uses function f(char *) defined in taint-const-subtyping.c
      uses function deleteregion(region) defined in regions.c
   function mkleq_qual(location,qual,qual) in line 159
      protection public
      4 lines of code
      3 parameters
      1 conditional paths
      uses function _mkleq_qual(location,qual,qual,bool) defined in quals.c
      uses variable Traverse_edge::loc defined in quals.c
      uses macro definition TRUE defined in bool.h
   function mkeq_qual(location,qual,qual) in line 160
      protection public
      7 lines of code
      3 parameters
      1 conditional paths
      uses function mkleq_qual(location,qual,qual) defined in quals.c
      uses variable Traverse_edge::loc defined in quals.c
   function unify_qual(location,qual,qual) in line 161
      protection public
      48 lines of code
      3 parameters
      4 conditional paths
      uses macro definition FALSE defined in bool.h
      uses function print_qual_raw(printf_func,qual) defined in quals.c
      uses function printf(const char *$NONYEAR,(null)) defined in rcs1.c
      uses function mkeq_qual(location,qual,qual) defined in quals.c
      uses variable Traverse_edge::loc defined in quals.c
      uses variable type_qualifier::kind defined in quals.c
      uses variable type_qualifier::u defined in quals.c
      uses variable type_qualifier::var defined in quals.c
      uses variable type_qualifier::link defined in quals.c
   function cond_mkleq_qual(location,qual,qual,qual,qual) in line 165
      protection public
      40 lines of code
      5 parameters
      4 conditional paths
      uses function constant_qual(qual) defined in quals.c
      uses function print_qual_raw(printf_func,qual) defined in quals.c
      uses function printf(const char *$NONYEAR,(null)) defined in rcs1.c
      uses function leq_qual(qual,qual) defined in quals.c
      uses function mkleq_qual(location,qual,qual) defined in quals.c
      uses variable Traverse_edge::loc defined in quals.c
      uses macro definition FALSE defined in bool.h
      uses variable Traverse_edge::dir defined in quals.c
      uses enumvalue c_leq_v defined in quals.c
      uses enumvalue v_leq_c defined in quals.c
      uses function variable_qual(qual) defined in quals.c
      uses variable type_qualifier::u defined in quals.c
      uses variable type_qualifier::var defined in quals.c
      uses function mkcond(cond_dir,qual,qual,qual,location) defined in quals.c
   function eq_qual(qual,qual) in line 173
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function leq_qual(qual,qual) in line 176
      protection public
      35 lines of code
      2 parameters
      6 conditional paths
      uses function constant_qual(qual) defined in quals.c
      uses macro definition TRUE defined in bool.h
      uses variable type_qualifier::kind defined in quals.c
      uses variable type_qualifier::u defined in quals.c
      uses variable type_qualifier::elt defined in quals.c
      uses macro definition scan_qual_set defined in containers.h
      uses variable type_qualifier::var defined in quals.c
      uses function leq_qual(qual,qual) defined in quals.c
      uses macro definition FALSE defined in bool.h
   function cmp_qual(qual,qual) in line 183
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
   function has_lb_qual(qual,qual) in line 186
      protection public
      10 lines of code
      2 parameters
      2 conditional paths
      uses macro definition scan_qual_edge_set defined in containers.h
      uses function lb_qual(qual) defined in quals.c
      uses function eq_qual(qual,qual) defined in quals.c
      uses variable Qual_edge::qual defined in quals.h
      uses macro definition TRUE defined in bool.h
      uses macro definition FALSE defined in bool.h
   function has_ub_qual(qual,qual) in line 189
      protection public
      10 lines of code
      2 parameters
      2 conditional paths
      uses macro definition scan_qual_edge_set defined in containers.h
      uses function ub_qual(qual) defined in quals.c
      uses function eq_qual(qual,qual) defined in quals.c
      uses variable Qual_edge::qual defined in quals.h
      uses macro definition TRUE defined in bool.h
      uses macro definition FALSE defined in bool.h
   function has_qual(qual,qual) in line 192
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function has_lb_qual(qual,qual) defined in quals.c
      uses function has_ub_qual(qual,qual) defined in quals.c
   function has_fs_qual(qual) in line 196
      protection public
      17 lines of code
      1 parameters
      3 conditional paths
      uses macro definition scan_qual_edge_set defined in containers.h
      uses function ub_qual(qual) defined in quals.c
      uses function constant_qual(qual) defined in quals.c
      uses variable Qual_edge::qual defined in quals.h
      uses variable type_qualifier::u defined in quals.c
      uses variable type_qualifier::elt defined in quals.c
      uses macro definition TRUE defined in bool.h
      uses function lb_qual(qual) defined in quals.c
      uses macro definition FALSE defined in bool.h
   function print_qual(printf_func,qual) in line 199
      protection public
      22 lines of code
      2 parameters
      3 conditional paths
      uses variable type_qualifier::kind defined in quals.c
      uses variable type_qualifier::u defined in quals.c
      uses variable type_qualifier::elt defined in quals.c
      uses macro definition TRUE defined in bool.h
      uses variable print_info::pf defined in quals.c
      uses function scan_qual_bounds_sorted(qual,qual_traverse_fn,void *) defined in quals.c
      uses function print_qual_fn(qual,void *) defined in quals.c
      uses variable print_info::size defined in quals.c
      uses function fail(const char *,...) defined in utils.c
   function print_qual_raw(printf_func,qual) in line 200
      protection public
      12 lines of code
      2 parameters
      5 conditional paths
      uses function fail(const char *,...) defined in utils.c
      uses variable type_qualifier::kind defined in quals.c
      uses variable print_info::pf defined in quals.c
      uses variable type_qualifier::u defined in quals.c
      uses variable type_qualifier::elt defined in quals.c
      uses variable type_qualifier::var defined in quals.c
      uses function print_qual_raw(printf_func,qual) defined in quals.c
      uses variable type_qualifier::link defined in quals.c
   function name_qual(qual) in line 202
      protection public
      11 lines of code
      1 parameters
      3 conditional paths
      uses variable type_qualifier::kind defined in quals.c
      uses variable type_qualifier::u defined in quals.c
      uses variable type_qualifier::elt defined in quals.c
      uses variable type_qualifier::var defined in quals.c
      uses function fail(const char *,...) defined in utils.c
   function unique_name_qual(qual) in line 205
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function ptr_to_ascii(void *) defined in utils.c
   function color_qual(qual) in line 208
      protection public
      19 lines of code
      1 parameters
      3 conditional paths
      uses variable type_qualifier::kind defined in quals.c
      uses variable type_qualifier::u defined in quals.c
      uses variable type_qualifier::elt defined in quals.c
      uses macro definition NULL defined in config.h
      uses function scan_qual_bounds(qual,qual_traverse_fn,void *) defined in quals.c
      uses function color_qual_fn(qual,void *) defined in quals.c
      uses function fail(const char *,...) defined in utils.c
   function print_qual_graph(qual,const char *,bool) in line 217
      protection public
      15 lines of code
      3 parameters
      2 conditional paths
      uses function traverse_qual_graph_edges(qual,bool,edge_traverse_fn,void *) defined in quals.c
      uses variable traverse_edge_data::po_bounds_only defined in quals.c
      uses function print_qual_graph_edge(qual,qual,location,void *) defined in quals.c
   function traverse_shortest_path_edges(qual,qual,edge_traverse_fn,void *) in line 223
      protection public
      52 lines of code
      4 parameters
      9 conditional paths
      uses variable scratch_region defined in qtype.c
      uses function newregion(void) defined in regions.c
      uses function find_shortest_path(region,qual,qual,dir) defined in quals.c
      uses enumvalue dir_backward defined in quals.c
      uses function f(char *) defined in taint-const-subtyping.c
      uses enumvalue dir_forward defined in quals.c
      uses function eq_qual(qual,qual) defined in quals.c
      uses enumvalue dir_none defined in quals.c
      uses function deleteregion(region) defined in regions.c
   function reset_flow_sensitive_quals(void) in line 234
      protection public
      9 lines of code
      1 parameters
      2 conditional paths
      uses macro definition scan_po_set defined in containers.h
      uses variable po_info::flow_sensitive defined in quals.c
      uses variable po_info::nonprop defined in quals.c
      uses macro definition FALSE defined in bool.h
   variable Qual_edge::loc in line 58
      protection public
   variable Qual_edge::qual in line 59
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cqual/cqual-0.981/src/semantics.c
module semantics.c
   variable builtin_va_list_type in line 31
      protection public
   variable builtin_va_arg_decl in line 32
      protection public
   variable current_function_decl in line 35
      protection public
   variable bad_decl in line 37
      protection public
   variable implicit_function_type in line 39
      protection public
   variable current_env in line 41
      protection public
   variable global_env in line 42
      protection public
   variable pending_invalid_xref in line 44
      protection public
   variable onecst in line 46
      protection public
   variable zerocst in line 46
      protection public
   variable oneexpr in line 47
      protection public
   variable last_enum_value in line 2713
      protection public
   function new_environment(region,environment,bool) in line 49
      protection public
      27 lines of code
      3 parameters
      1 conditional paths
      uses macro definition ralloc defined in regions.h
      uses macro definition NULL defined in config.h
      uses variable env::parent defined in env.c
      uses variable environment::fdecl defined in decls.h
      uses function new_env(region,env) defined in env.c
      uses variable environment::id_env defined in decls.h
      uses variable environment::parm_level defined in decls.h
      uses variable environment::tag_env defined in decls.h
   function init_data_declaration(data_declaration,declaration,const char *,type) in line 77
      protection public
      38 lines of code
      4 parameters
      1 conditional paths
      uses variable data_declaration::kind defined in decls.h
      uses variable data_declaration::name defined in decls.h
      uses variable data_declaration::type defined in decls.h
      uses variable data_declaration::shadowed defined in decls.h
      uses macro definition NULL defined in config.h
      uses variable data_declaration::global defined in decls.h
      uses variable data_declaration::ast defined in decls.h
      uses variable data_declaration::definition defined in decls.h
      uses variable data_declaration::isexternalscope defined in decls.h
      uses macro definition FALSE defined in bool.h
      uses variable data_declaration::isfilescoperef defined in decls.h
      uses variable data_declaration::needsmemory defined in decls.h
      uses variable data_declaration::isused defined in decls.h
      uses variable data_declaration::in_system_header defined in decls.h
      uses variable AST_declaration::loc defined in AST_defs.h
      uses variable Location::in_system_header defined in location.h
      uses variable data_declaration::in_prelude defined in decls.h
      uses variable in_prelude defined in c-lex.h
      uses variable data_declaration::defined defined in decls.h
      uses variable data_declaration::isallocated defined in decls.h
      uses variable data_declaration::addresstaken defined in decls.h
      uses variable data_declaration::ftype defined in decls.h
      uses variable data_declaration::isinline defined in decls.h
      uses variable data_declaration::isexterninline defined in decls.h
      uses variable data_declaration::__init defined in decls.h
      uses variable data_declaration::noreturn defined in decls.h
      uses variable data_declaration::alias defined in decls.h
      uses variable data_declaration::oldstyle_args defined in decls.h
      uses variable data_declaration::vtype defined in decls.h
      uses variable data_declaration::islocal defined in decls.h
      uses variable data_declaration::isparameter defined in decls.h
      uses variable data_declaration::islimbo defined in decls.h
      uses variable data_declaration::value defined in decls.h
      uses variable data_declaration::chars defined in decls.h
      uses variable data_declaration::chars_length defined in decls.h
      uses variable data_declaration::qtype defined in decls.h
      uses variable data_declaration::fs_qtype defined in decls.h
      uses variable data_declaration::alref defined in decls.h
   function lookup_id(const char *,bool) in line 116
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function env_lookup(env,const char *,bool) defined in env.c
      uses variable current_env defined in semantics.c
      uses variable environment::id_env defined in decls.h
   function lookup_global_id(const char *) in line 121
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function env_lookup(env,const char *,bool) defined in env.c
      uses variable global_env defined in semantics.c
      uses variable environment::id_env defined in decls.h
      uses macro definition TRUE defined in bool.h
   function declare(environment,data_declaration,bool) in line 126
      protection public
      104 lines of code
      3 parameters
      1 conditional paths
      uses macro definition ralloc defined in regions.h
      uses variable parse_region defined in c-parse.h
      uses variable data_declaration::name defined in decls.h
      uses variable flag_traditional defined in flags.h
      uses variable data_declaration::isfilescoperef defined in decls.h
      uses function lookup_id(const char *,bool) defined in semantics.c
      uses macro definition FALSE defined in bool.h
      uses variable global_env defined in semantics.c
      uses variable data_declaration::islocal defined in decls.h
      uses variable environment::parm_level defined in decls.h
      uses variable environment::parent defined in decls.h
      uses function env_lookup(env,const char *,bool) defined in env.c
      uses variable environment::id_env defined in decls.h
      uses macro definition TRUE defined in bool.h
      uses variable data_declaration::isparameter defined in decls.h
      uses function pedwarn(const char *,...) defined in errors.c
      uses variable warn_shadow defined in flags.h
      uses variable error_shadow defined in flags.h
      uses function error(const char *,...) defined in errors.c
      uses function warning(const char *,...) defined in errors.c
      uses function lookup_global_id(const char *) defined in semantics.c
      uses variable data_declaration::islimbo defined in decls.h
      uses function env_add(env,const char *,void *) defined in env.c
      uses variable data_declaration::shadowed defined in decls.h
      uses variable data_declaration::kind defined in decls.h
      uses enumvalue decl_function defined in decls.h
      uses variable data_declaration::ftype defined in decls.h
      uses variable mesg_implicit_function_declaration defined in flags.h
      uses function warning_or_error(bool,const char *,...) defined in errors.c
      uses variable warn_traditional defined in flags.h
      uses variable warn_main defined in flags.h
      uses function warning_with_decl(declaration,const char *,...) defined in errors.c
      uses variable data_declaration::ast defined in decls.h
   function declare_tag_env(environment,tag_ref) in line 231
      protection public
      34 lines of code
      2 parameters
      3 conditional paths
      uses macro definition ralloc defined in regions.h
      uses variable parse_region defined in c-parse.h
      uses variable AST_tag_ref::word1 defined in AST_defs.h
      uses variable AST_word::cstring defined in AST_defs.h
      uses variable cstring::data defined in cstring.h
      uses macro definition NULL defined in config.h
      uses variable tag_declaration::kind defined in decls.h
      uses variable AST_tag_ref::kind defined in AST_defs.h
      uses variable tag_declaration::name defined in decls.h
      uses variable tag_declaration::ast defined in decls.h
      uses variable tag_declaration::fields defined in decls.h
      uses variable tag_declaration::fieldlist defined in decls.h
      uses variable tag_declaration::defined defined in decls.h
      uses variable tag_declaration::being_defined defined in decls.h
      uses macro definition FALSE defined in bool.h
      uses variable tag_declaration::fields_const defined in decls.h
      uses variable tag_declaration::fields_volatile defined in decls.h
      uses variable tag_declaration::transparent_union defined in decls.h
      uses variable tag_declaration::size defined in decls.h
      uses variable tag_declaration::alignment defined in decls.h
      uses variable tag_declaration::size_cc defined in decls.h
      uses variable tag_declaration::qtype defined in decls.h
      uses variable tag_declaration::shadowed defined in decls.h
      uses function env_lookup(env,const char *,bool) defined in env.c
      uses variable warn_shadow defined in flags.h
      uses variable error_shadow defined in flags.h
      uses function error(const char *,...) defined in errors.c
      uses function warning(const char *,...) defined in errors.c
      uses function env_add(env,const char *,void *) defined in env.c
   function lookup_tag_env(environment,tag_ref,bool) in line 266
      protection public
      11 lines of code
      3 parameters
      2 conditional paths
      uses function env_lookup(env,const char *,bool) defined in env.c
      uses variable AST_tag_ref::word1 defined in AST_defs.h
      uses variable AST_word::cstring defined in AST_defs.h
      uses variable cstring::data defined in cstring.h
      uses variable tag_declaration::kind defined in decls.h
      uses variable AST_tag_ref::kind defined in AST_defs.h
      uses variable pending_invalid_xref defined in semantics.c
   function declare_tag(tag_ref) in line 278
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function declare_tag_env(environment,tag_ref) defined in semantics.c
      uses variable current_env defined in semantics.c
   function lookup_tag(tag_ref,bool) in line 283
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function lookup_tag_env(environment,tag_ref,bool) defined in semantics.c
      uses variable current_env defined in semantics.c
   function declare_global_tag(tag_ref) in line 288
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function declare_tag_env(environment,tag_ref) defined in semantics.c
      uses variable global_env defined in semantics.c
   function lookup_global_tag(tag_ref) in line 293
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function lookup_tag_env(environment,tag_ref,bool) defined in semantics.c
      uses variable global_env defined in semantics.c
      uses macro definition TRUE defined in bool.h
   function shadow_tag(type_element) in line 299
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function shadow_tag_warned(type_element,int) defined in semantics.c
   function shadow_tag_warned(type_element,int) in line 306
      protection public
      57 lines of code
      2 parameters
      1 conditional paths
      uses variable pending_invalid_xref defined in semantics.c
      uses macro definition scan_type_element defined in AST_defs.h
      uses variable AST_type_element::kind defined in AST_defs.h
      uses enumvalue kind_struct_ref defined in AST_types.h
      uses enumvalue kind_union_ref defined in AST_types.h
      uses enumvalue kind_enum_ref defined in AST_types.h
      uses macro definition CAST defined in AST.h
      uses variable AST_tag_ref::word1 defined in AST_defs.h
      uses function pedwarn(const char *,...) defined in errors.c
      uses function lookup_tag(tag_ref,bool) defined in semantics.c
      uses macro definition TRUE defined in bool.h
      uses function declare_tag(tag_ref) defined in semantics.c
      uses function pending_xref_error(void) defined in semantics.c
      uses variable in_system_header defined in c-lex.c
      uses function warning(const char *,...) defined in errors.c
      uses function error(const char *,...) defined in errors.c
   function pending_xref_error(void) in line 369
      protection public
      10 lines of code
      1 parameters
      1 conditional paths
      uses variable pending_invalid_xref defined in semantics.c
      uses function error_with_location(location,const char *,...) defined in errors.c
      uses variable AST_tag_ref::loc defined in AST_defs.h
      uses variable AST_tag_ref::word1 defined in AST_defs.h
      uses variable AST_word::cstring defined in AST_defs.h
      uses variable cstring::data defined in cstring.h
   function is_void_parms(declaration) in line 381
      protection public
      15 lines of code
      1 parameters
      2 conditional paths
      uses variable AST_declaration::next defined in AST_defs.h
      uses macro definition is_data_decl defined in AST_types.h
      uses macro definition FALSE defined in bool.h
      uses macro definition CAST defined in AST.h
      uses variable AST_data_decl::decls defined in AST_defs.h
      uses variable AST_variable_decl::next defined in AST_defs.h
      uses variable AST_variable_decl::declarator defined in AST_defs.h
      uses variable AST_data_decl::modifiers defined in AST_defs.h
      uses variable AST_type_element::next defined in AST_defs.h
      uses macro definition is_rid defined in AST_types.h
      uses enumvalue RID_VOID defined in c-lex.h
   function tagkind_name(int) in line 397
      protection public
      10 lines of code
      1 parameters
      4 conditional paths
      uses enumvalue kind_struct_ref defined in AST_types.h
      uses enumvalue kind_union_ref defined in AST_types.h
      uses enumvalue kind_enum_ref defined in AST_types.h
      uses macro definition NULL defined in config.h
   function parmlist_tags_warning(environment) in line 410
      protection public
      33 lines of code
      1 parameters
      5 conditional paths
      uses macro definition FALSE defined in bool.h
      uses function env_scan(env,env_scanner *) defined in env.c
      uses variable environment::tag_env defined in decls.h
      uses function env_next(env_scanner *,const char **,void **) defined in env.c
      uses variable tag_declaration::kind defined in decls.h
      uses function tagkind_name(int) defined in semantics.c
      uses enumvalue kind_union_ref defined in AST_types.h
      uses variable pedantic defined in flags.h
      uses function warning(const char *,...) defined in errors.c
      uses macro definition TRUE defined in bool.h
      uses function parse_qualifiers(location,type_element,user_qual_list *) defined in semantics.c
   function parse_qualifiers(location,type_element,user_qual_list *) in line 444
      protection public
      29 lines of code
      3 parameters
      3 conditional paths
      uses enumvalue no_qualifiers defined in types.h
      uses macro definition NULL defined in config.h
      uses macro definition scan_type_element defined in AST_defs.h
      uses variable type_qualifier::kind defined in quals.c
      uses enumvalue kind_qualifier defined in AST_types.h
      uses macro definition CAST defined in AST.h
      uses function check_duplicate_qualifiers1(location,type_quals,type_quals) defined in semantics.c
      uses variable AST_qualifier::loc defined in AST_defs.h
      uses variable AST_qualifier::id defined in AST_defs.h
      uses enumvalue kind_user_qual defined in AST_types.h
      uses function new_user_qual_list(user_qual,user_qual_list) defined in types.c
   function make_arg_types(bool,declaration,bool *,type_quals *,user_qual_list *) in line 447
      protection public
      42 lines of code
      5 parameters
      5 conditional paths
      uses function new_typelist(region) defined in types.c
      uses variable parse_region defined in c-parse.h
      uses macro definition FALSE defined in bool.h
      uses enumvalue no_qualifiers defined in types.h
      uses macro definition NULL defined in config.h
      uses function is_void_parms(declaration) defined in semantics.c
      uses macro definition scan_declaration defined in AST_defs.h
      uses macro definition is_ellipsis_decl defined in AST_types.h
      uses macro definition TRUE defined in bool.h
      uses function parse_qualifiers(location,type_element,user_qual_list *) defined in semantics.c
      uses variable AST_declaration::loc defined in AST_defs.h
      uses macro definition CAST defined in AST.h
      uses macro definition is_error_decl defined in AST_types.h
      uses function typelist_append(typelist,type) defined in types.c
      uses variable error_type defined in types.c
      uses variable AST_data_decl::decls defined in AST_defs.h
      uses variable AST_variable_decl::next defined in AST_defs.h
      uses variable AST_variable_decl::ddecl defined in AST_defs.h
      uses variable data_declaration::name defined in decls.h
      uses function error_with_decl(declaration,const char *,...) defined in errors.c
      uses variable data_declaration::type defined in decls.h
   function new_style(declaration) in line 490
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses macro definition is_oldidentifier_decl defined in AST_types.h
   function check_duplicate_rid(int,rid) in line 495
      protection public
      5 lines of code
      2 parameters
      2 conditional paths
      uses function pedwarn_with_location(location,const char *,...) defined in errors.c
      uses function rid_name(rid) defined in semantics.c
   function check_duplicate_qualifiers1(location,type_quals,type_quals) in line 501
      protection public
      5 lines of code
      3 parameters
      2 conditional paths
      uses function pedwarn_with_location(location,const char *,...) defined in errors.c
      uses function qualifier_name(type_quals) defined in types.c
   function check_duplicate_qualifiers(location,type_quals,type_quals) in line 507
      protection public
      8 lines of code
      3 parameters
      3 conditional paths
      uses function check_duplicate_qualifiers1(location,type_quals,type_quals) defined in semantics.c
   function parse_declarator(type_element,declarator,bool,int *,bool *,const char **,type *,bool *,function_declarator *) in line 546
      protection public
      420 lines of code
      9 parameters
      78 conditional paths
      uses variable AST_declarator::loc defined in AST_defs.h
      uses variable AST_type_element::loc defined in AST_defs.h
      uses enumvalue no_qualifiers defined in types.h
      uses macro definition FALSE defined in bool.h
      uses macro definition NULL defined in config.h
      uses function declarator_name(declarator) defined in semantics.c
      uses macro definition scan_type_element defined in AST_defs.h
      uses variable AST_type_element::kind defined in AST_defs.h
      uses enumvalue kind_rid defined in AST_types.h
      uses macro definition CAST defined in AST.h
      uses enumvalue RID_INT defined in c-lex.h
      uses variable int_type defined in types.c
      uses enumvalue RID_CHAR defined in c-lex.h
      uses variable char_type defined in types.c
      uses enumvalue RID_FLOAT defined in c-lex.h
      uses variable float_type defined in types.c
      uses enumvalue RID_DOUBLE defined in c-lex.h
      uses variable double_type defined in types.c
      uses enumvalue RID_VOID defined in c-lex.h
      uses variable void_type defined in types.c
      uses enumvalue RID_AUTO defined in c-lex.h
      uses enumvalue RID_STATIC defined in c-lex.h
      uses enumvalue RID_EXTERN defined in c-lex.h
      uses enumvalue RID_REGISTER defined in c-lex.h
      uses enumvalue RID_TYPEDEF defined in c-lex.h
      uses enumvalue RID_LONG defined in c-lex.h
      uses function error_with_location(location,const char *,...) defined in errors.c
      uses variable pedantic defined in flags.h
      uses variable in_system_header defined in c-lex.c
      uses function pedwarn_with_location(location,const char *,...) defined in errors.c
      uses macro definition TRUE defined in bool.h
      uses function check_duplicate_rid(int,rid) defined in semantics.c
      uses enumvalue kind_qualifier defined in AST_types.h
      uses variable AST_qualifier::id defined in AST_defs.h
      uses function check_duplicate_qualifiers1(location,type_quals,type_quals) defined in semantics.c
      uses enumvalue kind_typename defined in AST_types.h
      uses enumvalue kind_typeof_type defined in AST_types.h
      uses enumvalue kind_typeof_expr defined in AST_types.h
      uses enumvalue kind_struct_ref defined in AST_types.h
      uses enumvalue kind_union_ref defined in AST_types.h
      uses enumvalue kind_enum_ref defined in AST_types.h
      uses function make_tagged_type(tag_declaration) defined in types.c
      uses enumvalue kind_user_qual defined in AST_types.h
      uses function new_user_qual_list(user_qual,user_qual_list) defined in types.c
      uses enumvalue kind_type_variable defined in AST_types.h
      uses function make_type_var(cstring) defined in types.c
      uses variable long_double_type defined in types.c
      uses enumvalue RID_SHORT defined in c-lex.h
      uses enumvalue RID_SIGNED defined in c-lex.h
      uses enumvalue RID_UNSIGNED defined in c-lex.h
      uses enumvalue RID_COMPLEX defined in c-lex.h
      uses function type_integral(type) defined in types.c
      uses function type_floating(type) defined in types.c
      uses variable flag_traditional defined in flags.h
      uses variable explicit_flag_signed_bitfields defined in flags.h
      uses variable flag_signed_bitfields defined in flags.h
      uses variable unsigned_long_long_type defined in types.c
      uses variable unsigned_long_type defined in types.c
      uses variable unsigned_short_type defined in types.c
      uses variable unsigned_char_type defined in types.c
      uses variable unsigned_int_type defined in types.c
      uses variable signed_char_type defined in types.c
      uses variable long_long_type defined in types.c
      uses variable long_type defined in types.c
      uses variable short_type defined in types.c
      uses function make_complex_type(type) defined in types.c
      uses function check_duplicate_qualifiers(location,type_quals,type_quals) defined in semantics.c
      uses function type_qualifiers(type) defined in types.c
      uses function make_qualified_type(type,type_quals,user_qual_list) defined in types.c
      uses enumvalue RID_INLINE defined in c-lex.h
      uses function type_function(type) defined in types.c
      uses variable AST_declarator::kind defined in AST_defs.h
      uses enumvalue kind_identifier_declarator defined in AST_types.h
      uses enumvalue kind_array_declarator defined in AST_types.h
      uses variable AST_array_declarator::arg1 defined in AST_defs.h
      uses variable AST_array_declarator::declarator defined in AST_defs.h
      uses function type_void(type) defined in types.c
      uses variable error_type defined in types.c
      uses macro definition is_error_expr defined in AST_types.h
      uses function type_integer(type) defined in types.c
      uses variable AST_expression::type defined in AST_defs.h
      uses variable oneexpr defined in semantics.c
      uses function definite_zero(expression) defined in constants.c
      uses variable AST_expression::cst defined in AST_defs.h
      uses macro definition constant_integral defined in constants.h
      uses function constant_overflow_warning(known_cst) defined in constants.c
      uses function cval_intcompare(cval,cval) defined in cval.c
      uses variable AST_known_cst::cval defined in AST_defs.h
      uses variable cval_zero defined in cval.c
      uses variable current_function_decl defined in semantics.c
      uses function make_array_type(type,expression) defined in types.c
      uses enumvalue kind_function_declarator defined in AST_types.h
      uses function parse_qualifiers(location,type_element,user_qual_list *) defined in semantics.c
      uses variable AST_function_declarator::loc defined in AST_defs.h
      uses variable AST_function_declarator::qualifiers defined in AST_defs.h
      uses variable AST_function_declarator::declarator defined in AST_defs.h
      uses function type_array(type) defined in types.c
      uses function type_float(type) defined in types.c
      uses function qualify_type1(type,type) defined in types.c
      uses function new_style(declaration) defined in semantics.c
      uses variable AST_function_declarator::parms defined in AST_defs.h
      uses function make_arg_types(bool,declaration,bool *,type_quals *,user_qual_list *) defined in semantics.c
      uses function make_function_type(type,typelist,bool,type_quals,user_qual_list,bool) defined in types.c
      uses enumvalue kind_pointer_declarator defined in AST_types.h
      uses variable AST_pointer_declarator::declarator defined in AST_defs.h
      uses variable AST_pointer_declarator::loc defined in AST_defs.h
      uses variable AST_pointer_declarator::qualifiers defined in AST_defs.h
      uses function make_pointer_type(type) defined in types.c
   function make_function_declarator(location,declarator,declaration,type_element) in line 967
      protection public
      25 lines of code
      4 parameters
      1 conditional paths
      uses function poplevel(void) defined in semantics.c
      uses function new_function_declarator(region,location,declarator,declaration,type_element,environment) defined in AST_defs.h
      uses variable parse_region defined in c-parse.h
      uses function new_style(declaration) defined in semantics.c
      uses function is_void_parms(declaration) defined in semantics.c
      uses macro definition scan_declaration defined in AST_defs.h
      uses macro definition is_ellipsis_decl defined in AST_types.h
      uses macro definition is_error_decl defined in AST_types.h
      uses macro definition CAST defined in AST.h
      uses variable AST_variable_decl::ddecl defined in AST_defs.h
      uses function error_with_location(location,const char *,...) defined in errors.c
      uses variable bad_decl defined in semantics.c
      uses function parmlist_tags_warning(environment) defined in semantics.c
   function redeclaration_error_message(data_declaration,data_declaration,bool) in line 999
      protection public
      61 lines of code
      3 parameters
      13 conditional paths
      uses variable data_declaration::islimbo defined in decls.h
      uses variable data_declaration::kind defined in decls.h
      uses enumvalue decl_typedef defined in decls.h
      uses variable flag_traditional defined in flags.h
      uses function type_compatible(type,type) defined in types.c
      uses variable data_declaration::type defined in decls.h
      uses variable data_declaration::in_system_header defined in decls.h
      uses enumvalue decl_function defined in decls.h
      uses variable data_declaration::definition defined in decls.h
      uses variable data_declaration::isexterninline defined in decls.h
      uses enumvalue decl_constant defined in decls.h
      uses variable current_env defined in semantics.c
      uses variable global_env defined in semantics.c
      uses variable data_declaration::isfilescoperef defined in decls.h
      uses variable data_declaration::initialiser defined in decls.h
      uses variable data_declaration::isexternalscope defined in decls.h
   function looks_like_malloc_redeclaration(type,type) in line 1063
      protection public
      12 lines of code
      2 parameters
      1 conditional paths
      uses function type_function_return_type(type) defined in types.c
      uses function type_function_oldstyle(type) defined in types.c
      uses function type_pointer(type) defined in types.c
      uses function type_void(type) defined in types.c
      uses function type_points_to(type) defined in types.c
      uses function type_char(type) defined in types.c
      uses function self_promoting_args(type) defined in types.c
   function show_previous_decl(void(*)(declaration d, const char *format,...),data_declaration) in line 1076
      protection public
      8 lines of code
      2 parameters
      2 conditional paths
      uses variable data_declaration::kind defined in decls.h
      uses enumvalue decl_function defined in decls.h
      uses variable data_declaration::ftype defined in decls.h
      uses variable data_declaration::ast defined in decls.h
      uses variable data_declaration::name defined in decls.h
   function duplicate_decls(data_declaration,data_declaration,bool,bool) in line 1096
      protection public
      348 lines of code
      4 parameters
      47 conditional paths
      uses variable data_declaration::type defined in decls.h
      uses variable data_declaration::name defined in decls.h
      uses macro definition NULL defined in config.h
      uses variable data_declaration::kind defined in decls.h
      uses enumvalue decl_function defined in decls.h
      uses variable data_declaration::ftype defined in decls.h
      uses variable flag_traditional defined in flags.h
      uses variable data_declaration::islimbo defined in decls.h
      uses function warning_or_error(bool,const char *,...) defined in errors.c
      uses function show_previous_decl(void(*)(declaration d, const char *format,...),data_declaration) defined in semantics.c
      uses function warning_with_decl(declaration,const char *,...) defined in errors.c
      uses function error_with_decl(declaration,const char *,...) defined in errors.c
      uses variable data_declaration::shadowed defined in decls.h
      uses variable error_type defined in types.c
      uses macro definition FALSE defined in bool.h
      uses function type_compatible_unqualified(type,type) defined in types.c
      uses variable void_type defined in types.c
      uses variable data_declaration::isparameter defined in decls.h
      uses variable data_declaration::isused defined in decls.h
      uses variable data_declaration::in_system_header defined in decls.h
      uses function looks_like_malloc_redeclaration(type,type) defined in semantics.c
      uses variable pedantic defined in flags.h
      uses function pedwarn_with_decl(declaration,const char *,...) defined in errors.c
      uses variable data_declaration::ast defined in decls.h
      uses function type_void(type) defined in types.c
      uses function type_points_to(type) defined in types.c
      uses function type_function_return_type(type) defined in types.c
      uses macro definition TRUE defined in bool.h
      uses function type_function_oldstyle(type) defined in types.c
      uses function type_compatible(type,type) defined in types.c
      uses function warning(const char *,...) defined in errors.c
      uses function error(const char *,...) defined in errors.c
      uses variable data_declaration::definition defined in decls.h
      uses function type_function_varargs(type) defined in types.c
      uses function type_function_arguments(type) defined in types.c
      uses function typelist_scan(typelist,typelist_scanner *) defined in types.c
      uses function typelist_next(typelist_scanner *) defined in types.c
      uses function type_self_promoting(type) defined in types.c
      uses function redeclaration_error_message(data_declaration,data_declaration,bool) defined in semantics.c
      uses enumvalue decl_typedef defined in decls.h
      uses variable data_declaration::oldstyle_args defined in decls.h
      uses function type_equal_unqualified(type,type) defined in types.c
      uses variable int_type defined in types.c
      uses variable unsigned_int_type defined in types.c
      uses function warning_or_error_with_decl(bool,declaration,const char *,...) defined in errors.c
      uses variable data_declaration::isinline defined in decls.h
      uses function pedwarn(const char *,...) defined in errors.c
      uses enumvalue decl_variable defined in decls.h
      uses variable data_declaration::isexternalscope defined in decls.h
      uses variable warn_redundant_decls defined in flags.h
      uses variable data_declaration::isfilescoperef defined in decls.h
      uses variable data_declaration::needsmemory defined in decls.h
      uses variable data_declaration::vtype defined in decls.h
      uses variable data_declaration::defined defined in decls.h
      uses variable data_declaration::isexterninline defined in decls.h
      uses function common_type(type,type) defined in types.c
      uses variable data_declaration::noreturn defined in decls.h
      uses variable data_declaration::__init defined in decls.h
      uses variable data_declaration::alias defined in decls.h
   function ignored_attribute(attribute) in line 1445
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function warning_with_location(location,const char *,...) defined in errors.c
      uses variable AST_attribute::loc defined in AST_defs.h
      uses variable AST_attribute::word1 defined in AST_defs.h
      uses variable AST_word::cstring defined in AST_defs.h
      uses variable cstring::data defined in cstring.h
   function transparent_union_argument(data_declaration) in line 1451
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable data_declaration::type defined in decls.h
      uses function make_qualified_type(type,type_quals,user_qual_list) defined in types.c
      uses function type_qualifiers(type) defined in types.c
      uses enumvalue transparent_qualifier defined in types.h
      uses macro definition NULL defined in config.h
   function handle_attribute(attribute,data_declaration,field_declaration,tag_declaration) in line 1458
      protection public
      66 lines of code
      4 parameters
      16 conditional paths
      uses variable AST_attribute::word1 defined in AST_defs.h
      uses variable AST_word::cstring defined in AST_defs.h
      uses variable cstring::data defined in cstring.h
      uses variable AST_attribute::word2 defined in AST_defs.h
      uses variable AST_attribute::args defined in AST_defs.h
      uses function error_with_location(location,const char *,...) defined in errors.c
      uses variable AST_attribute::loc defined in AST_defs.h
      uses variable data_declaration::kind defined in decls.h
      uses enumvalue decl_variable defined in decls.h
      uses variable data_declaration::isparameter defined in decls.h
      uses function type_union(type) defined in types.c
      uses variable data_declaration::type defined in decls.h
      uses function transparent_union_argument(data_declaration) defined in semantics.c
      uses enumvalue decl_typedef defined in decls.h
      uses variable tag_declaration::kind defined in decls.h
      uses enumvalue kind_union_ref defined in AST_types.h
      uses variable tag_declaration::transparent_union defined in decls.h
      uses macro definition TRUE defined in bool.h
      uses function ignored_attribute(attribute) defined in semantics.c
      uses variable tag_declaration::packed defined in decls.h
      uses variable field_declaration::packed defined in decls.h
      uses variable data_declaration::noreturn defined in decls.h
      uses macro definition is_string defined in AST_types.h
      uses variable data_declaration::alias defined in decls.h
      uses function rstralloc(region,size_t) defined in regions.c
      uses variable parse_region defined in c-parse.h
      uses variable AST_string::ddecl defined in AST_defs.h
      uses variable data_declaration::chars_length defined in decls.h
      uses variable data_declaration::chars defined in decls.h
      uses variable AST_expression::next defined in AST_defs.h
      uses variable AST_expression::kind defined in AST_defs.h
      uses enumvalue kind_string defined in AST_types.h
      uses function string_to_charp(region,string) defined in AST_utils.c
      uses macro definition CAST defined in AST.h
      uses variable data_declaration::__init defined in decls.h
   function handle_attributes(attribute,data_declaration,field_declaration,tag_declaration) in line 1525
      protection public
      6 lines of code
      4 parameters
      1 conditional paths
      uses macro definition scan_attribute defined in AST_defs.h
      uses function handle_attribute(attribute,data_declaration,field_declaration,tag_declaration) defined in semantics.c
   function ignored_attributes(attribute) in line 1532
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses macro definition scan_attribute defined in AST_defs.h
      uses function ignored_attribute(attribute) defined in semantics.c
   function is_doublecharstar(type) in line 1538
      protection public
      9 lines of code
      1 parameters
      3 conditional paths
      uses function type_pointer(type) defined in types.c
      uses macro definition FALSE defined in bool.h
      uses function type_points_to(type) defined in types.c
      uses function type_equal_unqualified(type,type) defined in types.c
      uses variable char_type defined in types.c
   function check_function(data_declaration,declaration,int,bool,const char *,type,bool,bool,bool) in line 1548
      protection public
      97 lines of code
      9 parameters
      20 conditional paths
      uses variable warn_implicit_int defined in flags.h
      uses variable warn_return_type defined in flags.h
      uses function warning(const char *,...) defined in errors.c
      uses function type_function_return_type(type) defined in types.c
      uses variable pedantic defined in flags.h
      uses function type_void(type) defined in types.c
      uses variable in_system_header defined in c-lex.c
      uses function pedwarn(const char *,...) defined in errors.c
      uses macro definition FALSE defined in bool.h
      uses variable warn_main defined in flags.h
      uses function type_equal_unqualified(type,type) defined in types.c
      uses variable int_type defined in types.c
      uses function type_function_oldstyle(type) defined in types.c
      uses function typelist_scan(typelist,typelist_scanner *) defined in types.c
      uses function type_function_arguments(type) defined in types.c
      uses function typelist_next(typelist_scanner *) defined in types.c
      uses function is_doublecharstar(type) defined in semantics.c
      uses enumvalue RID_STATIC defined in c-lex.h
      uses function init_data_declaration(data_declaration,declaration,const char *,type) defined in semantics.c
      uses variable data_declaration::kind defined in decls.h
      uses enumvalue decl_function defined in decls.h
      uses variable data_declaration::isexternalscope defined in decls.h
      uses variable data_declaration::ftype defined in decls.h
      uses macro definition TRUE defined in bool.h
      uses variable data_declaration::needsmemory defined in decls.h
      uses variable data_declaration::isinline defined in decls.h
      uses variable data_declaration::isexterninline defined in decls.h
      uses enumvalue RID_EXTERN defined in c-lex.h
      uses variable data_declaration::isfilescoperef defined in decls.h
   function declare_string(const char *,bool,size_t) in line 1646
      protection public
      19 lines of code
      3 parameters
      1 conditional paths
      uses function build_uint_constant(region,location,type,largest_uint) defined in AST_utils.c
      uses variable parse_region defined in c-parse.h
      uses variable dummy_location defined in c-lex.c
      uses variable size_t_type defined in types.c
      uses function make_array_type(type,expression) defined in types.c
      uses variable wchar_type defined in types.c
      uses variable char_type defined in types.c
      uses function init_data_declaration(data_declaration,declaration,const char *,type) defined in semantics.c
      uses function new_error_decl(region,location) defined in AST_defs.h
      uses variable data_declaration::name defined in decls.h
      uses variable data_declaration::kind defined in decls.h
      uses enumvalue decl_magic_string defined in decls.h
      uses variable data_declaration::needsmemory defined in decls.h
      uses macro definition TRUE defined in bool.h
      uses variable data_declaration::in_system_header defined in decls.h
      uses variable data_declaration::vtype defined in decls.h
      uses enumvalue data_declaration::variable_static defined in decls.h
      uses variable data_declaration::chars_length defined in decls.h
      uses variable data_declaration::chars defined in decls.h
      uses macro definition rarrayalloc defined in regions.h
      uses function declare(environment,data_declaration,bool) defined in semantics.c
      uses variable current_env defined in semantics.c
   function declare_magic_string(const char *,const char *) in line 1666
      protection public
      10 lines of code
      2 parameters
      1 conditional paths
      uses variable data_declaration::value defined in decls.h
      uses function declare_string(const char *,bool,size_t) defined in semantics.c
      uses variable data_declaration::name defined in decls.h
      uses macro definition FALSE defined in bool.h
      uses variable data_declaration::chars defined in decls.h
   function declare_builtin_type(const char *,type) in line 1677
      protection public
      11 lines of code
      2 parameters
      1 conditional paths
      uses function init_data_declaration(data_declaration,declaration,const char *,type) defined in semantics.c
      uses function new_error_decl(region,location) defined in AST_defs.h
      uses variable parse_region defined in c-parse.h
      uses variable dummy_location defined in c-lex.c
      uses variable data_declaration::name defined in decls.h
      uses variable data_declaration::kind defined in decls.h
      uses enumvalue decl_typedef defined in decls.h
      uses variable data_declaration::in_system_header defined in decls.h
      uses macro definition TRUE defined in bool.h
      uses function declare(environment,data_declaration,bool) defined in semantics.c
      uses variable current_env defined in semantics.c
   function make_anonymous_struct(void) in line 1689
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses function newkind_tag_ref(region,ast_kind,location,word,attribute,declaration,bool) defined in AST.c
      uses variable parse_region defined in c-parse.h
      uses enumvalue kind_struct_ref defined in AST_types.h
      uses variable dummy_location defined in c-lex.c
      uses macro definition NULL defined in config.h
      uses macro definition TRUE defined in bool.h
      uses function declare_global_tag(tag_ref) defined in semantics.c
   function declare_builtin_types(void) in line 1697
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses variable builtin_va_list_type defined in semantics.c
      uses function make_pointer_type(type) defined in types.c
      uses function make_tagged_type(tag_declaration) defined in types.c
      uses function make_anonymous_struct(void) defined in semantics.c
      uses function declare_builtin_type(const char *,type) defined in semantics.c
   function declare_builtin(const char *,data_kind,type) in line 1704
      protection public
      13 lines of code
      3 parameters
      1 conditional paths
      uses function init_data_declaration(data_declaration,declaration,const char *,type) defined in semantics.c
      uses function new_error_decl(region,location) defined in AST_defs.h
      uses variable parse_region defined in c-parse.h
      uses variable dummy_location defined in c-lex.c
      uses variable data_declaration::name defined in decls.h
      uses variable data_declaration::kind defined in decls.h
      uses variable data_declaration::needsmemory defined in decls.h
      uses macro definition TRUE defined in bool.h
      uses variable data_declaration::in_system_header defined in decls.h
      uses variable data_declaration::vtype defined in decls.h
      uses enumvalue data_declaration::variable_static defined in decls.h
      uses function declare(environment,data_declaration,bool) defined in semantics.c
      uses variable global_env defined in semantics.c
   function declare_builtin_identifier(const char *,type) in line 1718
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function declare_builtin(const char *,data_kind,type) defined in semantics.c
      uses variable data_declaration::name defined in decls.h
      uses enumvalue decl_variable defined in decls.h
   function declare_builtin_function(const char *,type) in line 1723
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function declare_builtin(const char *,data_kind,type) defined in semantics.c
      uses variable data_declaration::name defined in decls.h
      uses enumvalue decl_function defined in decls.h
   function declare_builtin_identifiers(void) in line 1728
      protection public
      11 lines of code
      1 parameters
      1 conditional paths
      uses function new_typelist(region) defined in types.c
      uses variable parse_region defined in c-parse.h
      uses function make_function_type(type,typelist,bool,type_quals,user_qual_list,bool) defined in types.c
      uses variable int_type defined in types.c
      uses macro definition FALSE defined in bool.h
      uses enumvalue no_qualifiers defined in types.h
      uses macro definition NULL defined in config.h
      uses macro definition TRUE defined in bool.h
      uses variable builtin_va_arg_decl defined in semantics.c
      uses function declare_builtin_identifier(const char *,type) defined in semantics.c
      uses function declare_builtin_function(const char *,type) defined in semantics.c
   function declare_function_name(void) in line 1740
      protection public
      18 lines of code
      1 parameters
      2 conditional paths
      uses variable data_declaration::name defined in decls.h
      uses variable current_function_decl defined in semantics.c
      uses macro definition NULL defined in config.h
      uses variable AST_function_decl::ddecl defined in AST_defs.h
      uses function declare_magic_string(const char *,const char *) defined in semantics.c
   function start_function(type_element,declarator,attribute,bool) in line 1763
      protection public
      161 lines of code
      4 parameters
      1 conditional paths
      uses variable data_declaration::name defined in decls.h
      uses variable current_env defined in semantics.c
      uses variable global_env defined in semantics.c
      uses variable current_function_decl defined in semantics.c
      uses macro definition NULL defined in config.h
      uses function parse_declarator(type_element,declarator,bool,int *,bool *,const char **,type *,bool *,function_declarator *) defined in semantics.c
      uses macro definition FALSE defined in bool.h
      uses function type_function(type) defined in types.c
      uses function new_function_decl(region,location,declarator,type_element,attribute,declaration,statement,function_decl,data_declaration) defined in AST_defs.h
      uses variable parse_region defined in c-parse.h
      uses variable AST_declarator::loc defined in AST_defs.h
      uses variable AST_function_decl::declared_type defined in AST_defs.h
      uses variable AST_function_decl::undeclared_variables defined in AST_defs.h
      uses function new_env(region,env) defined in env.c
      uses variable AST_function_decl::current_loop defined in AST_defs.h
      uses enumvalue RID_AUTO defined in c-lex.h
      uses variable pedantic defined in flags.h
      uses function pedwarn(const char *,...) defined in errors.c
      uses enumvalue RID_REGISTER defined in c-lex.h
      uses function error(const char *,...) defined in errors.c
      uses enumvalue RID_TYPEDEF defined in c-lex.h
      uses enumvalue RID_EXTERN defined in c-lex.h
      uses enumvalue RID_STATIC defined in c-lex.h
      uses function type_void(type) defined in types.c
      uses function type_function_return_type(type) defined in types.c
      uses function type_incomplete(type) defined in types.c
      uses function qualify_type1(type,type) defined in types.c
      uses function make_function_type(type,typelist,bool,type_quals,user_qual_list,bool) defined in types.c
      uses variable void_type defined in types.c
      uses function type_function_arguments(type) defined in types.c
      uses function type_function_varargs(type) defined in types.c
      uses function type_function_varargs_quals(type) defined in types.c
      uses function type_function_varargs_user_quals(type) defined in types.c
      uses function type_function_oldstyle(type) defined in types.c
      uses function lookup_id(const char *,bool) defined in semantics.c
      uses macro definition TRUE defined in bool.h
      uses variable data_declaration::kind defined in decls.h
      uses enumvalue decl_function defined in decls.h
      uses variable data_declaration::type defined in decls.h
      uses variable warn_strict_prototypes defined in flags.h
      uses function warning(const char *,...) defined in errors.c
      uses variable warn_missing_prototypes defined in flags.h
      uses variable data_declaration::ftype defined in decls.h
      uses variable warn_missing_declarations defined in flags.h
      uses function check_function(data_declaration,declaration,int,bool,const char *,type,bool,bool,bool) defined in semantics.c
      uses macro definition CAST defined in AST.h
      uses variable data_declaration::definition defined in decls.h
      uses variable data_declaration::ast defined in decls.h
      uses variable data_declaration::defined defined in decls.h
      uses function type_compatible(type,type) defined in types.c
      uses function duplicate_decls(data_declaration,data_declaration,bool,bool) defined in semantics.c
      uses function declare(environment,data_declaration,bool) defined in semantics.c
      uses variable AST_function_decl::base_labels defined in AST_defs.h
      uses variable AST_function_decl::scoped_labels defined in AST_defs.h
      uses variable AST_function_decl::ddecl defined in AST_defs.h
      uses variable AST_function_decl::fdeclarator defined in AST_defs.h
      uses variable AST_function_declarator::env defined in AST_defs.h
      uses variable environment::fdecl defined in decls.h
      uses function env_scan(env,env_scanner *) defined in env.c
      uses variable environment::id_env defined in decls.h
      uses function env_next(env_scanner *,const char **,void **) defined in env.c
      uses enumvalue decl_variable defined in decls.h
      uses variable data_declaration::isparameter defined in decls.h
      uses function handle_attributes(attribute,data_declaration,field_declaration,tag_declaration) defined in semantics.c
   function implicitly_declare(identifier) in line 1925
      protection public
      17 lines of code
      1 parameters
      1 conditional paths
      uses macro definition CAST defined in AST.h
      uses function new_implicit_decl(region,location,identifier) defined in AST_defs.h
      uses variable parse_region defined in c-parse.h
      uses variable AST_identifier::loc defined in AST_defs.h
      uses function init_data_declaration(data_declaration,declaration,const char *,type) defined in semantics.c
      uses variable AST_identifier::cstring defined in AST_defs.h
      uses variable cstring::data defined in cstring.h
      uses variable implicit_function_type defined in semantics.c
      uses variable data_declaration::kind defined in decls.h
      uses enumvalue decl_function defined in decls.h
      uses variable data_declaration::isexternalscope defined in decls.h
      uses macro definition TRUE defined in bool.h
      uses variable data_declaration::isfilescoperef defined in decls.h
      uses variable data_declaration::ftype defined in decls.h
      uses enumvalue data_declaration::function_implicit defined in decls.h
      uses variable data_declaration::shadowed defined in decls.h
      uses function lookup_global_id(const char *) defined in semantics.c
      uses variable data_declaration::name defined in decls.h
      uses function declare(environment,data_declaration,bool) defined in semantics.c
      uses variable current_env defined in semantics.c
      uses macro definition FALSE defined in bool.h
   function store_parm_decls(declaration) in line 1945
      protection public
      38 lines of code
      1 parameters
      1 conditional paths
      uses function oldstyle_function(function_decl) defined in AST_utils.c
      uses variable current_function_decl defined in semantics.c
      uses function error_with_decl(declaration,const char *,...) defined in errors.c
      uses macro definition CAST defined in AST.h
      uses variable AST_function_decl::old_parms defined in AST_defs.h
      uses variable AST_function_decl::fdeclarator defined in AST_defs.h
      uses variable AST_function_declarator::parms defined in AST_defs.h
      uses macro definition scan_oldidentifier_decl defined in AST_defs.h
      uses variable AST_oldidentifier_decl::ddecl defined in AST_defs.h
      uses variable data_declaration::type defined in decls.h
      uses variable void_type defined in types.c
      uses variable int_type defined in types.c
      uses variable extra_warnings defined in flags.h
      uses function warning_with_decl(declaration,const char *,...) defined in errors.c
      uses variable AST_oldidentifier_decl::cstring defined in AST_defs.h
      uses variable cstring::data defined in cstring.h
      uses function declare_function_name(void) defined in semantics.c
   function finish_function(statement) in line 1985
      protection public
      12 lines of code
      1 parameters
      1 conditional paths
      uses macro definition CAST defined in AST.h
      uses variable current_function_decl defined in semantics.c
      uses variable AST_function_decl::stmt defined in AST_defs.h
      uses variable current_env defined in semantics.c
      uses variable environment::parm_level defined in decls.h
      uses function poplevel(void) defined in semantics.c
      uses function check_labels(void) defined in stmt.c
      uses variable AST_function_decl::parent_function defined in AST_defs.h
   function pushlevel(bool) in line 1999
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable current_env defined in semantics.c
      uses function new_environment(region,environment,bool) defined in semantics.c
      uses variable parse_region defined in c-parse.h
   function poplevel(void) in line 2005
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses variable current_env defined in semantics.c
      uses variable environment::parent defined in decls.h
   function push_label_level(void) in line 2014
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable current_function_decl defined in semantics.c
      uses variable AST_function_decl::scoped_labels defined in AST_defs.h
      uses function new_env(region,env) defined in env.c
      uses variable parse_region defined in c-parse.h
   function pop_label_level(void) in line 2020
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses function check_labels(void) defined in stmt.c
      uses variable current_function_decl defined in semantics.c
      uses variable AST_function_decl::scoped_labels defined in AST_defs.h
      uses function env_parent(env) defined in env.c
   function declarator_name(declarator) in line 2028
      protection public
      19 lines of code
      1 parameters
      1 conditional paths
      uses variable AST_declarator::kind defined in AST_defs.h
      uses enumvalue kind_identifier_declarator defined in AST_types.h
      uses macro definition CAST defined in AST.h
      uses enumvalue kind_function_declarator defined in AST_types.h
      uses enumvalue kind_array_declarator defined in AST_types.h
      uses enumvalue kind_pointer_declarator defined in AST_types.h
      uses macro definition NULL defined in config.h
   function check_parameter(data_declaration,type_element,variable_decl) in line 2048
      protection public
      45 lines of code
      3 parameters
      5 conditional paths
      uses variable data_declaration::name defined in decls.h
      uses function parse_declarator(type_element,declarator,bool,int *,bool *,const char **,type *,bool *,function_declarator *) defined in semantics.c
      uses variable AST_variable_decl::declarator defined in AST_defs.h
      uses macro definition FALSE defined in bool.h
      uses macro definition NULL defined in config.h
      uses variable AST_variable_decl::declared_type defined in AST_defs.h
      uses enumvalue RID_REGISTER defined in c-lex.h
      uses function error(const char *,...) defined in errors.c
      uses function pedwarn_with_decl(declaration,const char *,...) defined in errors.c
      uses macro definition CAST defined in AST.h
      uses function type_array(type) defined in types.c
      uses function make_pointer_type(type) defined in types.c
      uses function qualify_type1(type,type) defined in types.c
      uses function type_array_of(type) defined in types.c
      uses function type_function(type) defined in types.c
      uses function init_data_declaration(data_declaration,declaration,const char *,type) defined in semantics.c
      uses variable data_declaration::kind defined in decls.h
      uses enumvalue decl_variable defined in decls.h
      uses variable data_declaration::definition defined in decls.h
      uses variable data_declaration::ast defined in decls.h
      uses variable data_declaration::defined defined in decls.h
      uses macro definition TRUE defined in bool.h
      uses variable data_declaration::isexternalscope defined in decls.h
      uses variable data_declaration::isfilescoperef defined in decls.h
      uses variable data_declaration::needsmemory defined in decls.h
      uses variable data_declaration::isused defined in decls.h
      uses variable data_declaration::vtype defined in decls.h
   function start_decl(declarator,asm_stmt,type_element,bool,attribute,attribute) in line 2099
      protection public
      232 lines of code
      6 parameters
      1 conditional paths
      uses function new_variable_decl(region,location,declarator,attribute,expression,asm_stmt,data_declaration) defined in AST_defs.h
      uses variable parse_region defined in c-parse.h
      uses macro definition NULL defined in config.h
      uses variable current_env defined in semantics.c
      uses variable environment::parm_level defined in decls.h
      uses function check_parameter(data_declaration,type_element,variable_decl) defined in semantics.c
      uses function type_void(type) defined in types.c
      uses variable data_declaration::type defined in decls.h
      uses function error(const char *,...) defined in errors.c
      uses variable data_declaration::name defined in decls.h
      uses variable int_type defined in types.c
      uses function oldstyle_function(function_decl) defined in AST_utils.c
      uses variable current_function_decl defined in semantics.c
      uses variable flag_traditional defined in flags.h
      uses function type_equal_unqualified(type,type) defined in types.c
      uses variable float_type defined in types.c
      uses function qualify_type1(type,type) defined in types.c
      uses variable double_type defined in types.c
      uses function lookup_id(const char *,bool) defined in semantics.c
      uses macro definition TRUE defined in bool.h
      uses function duplicate_decls(data_declaration,data_declaration,bool,bool) defined in semantics.c
      uses macro definition FALSE defined in bool.h
      uses macro definition CAST defined in AST.h
      uses function declare(environment,data_declaration,bool) defined in semantics.c
      uses variable AST_variable_decl::ddecl defined in AST_defs.h
      uses function parse_declarator(type_element,declarator,bool,int *,bool *,const char **,type *,bool *,function_declarator *) defined in semantics.c
      uses variable AST_variable_decl::declared_type defined in AST_defs.h
      uses variable warn_implicit_int defined in flags.h
      uses function type_function(type) defined in types.c
      uses function warning(const char *,...) defined in errors.c
      uses function init_data_declaration(data_declaration,declaration,const char *,type) defined in semantics.c
      uses enumvalue RID_EXTERN defined in c-lex.h
      uses variable global_env defined in semantics.c
      uses enumvalue RID_AUTO defined in c-lex.h
      uses enumvalue RID_TYPEDEF defined in c-lex.h
      uses variable pedantic defined in flags.h
      uses variable AST_type_element::next defined in AST_defs.h
      uses variable data_declaration::kind defined in decls.h
      uses enumvalue decl_typedef defined in decls.h
      uses variable data_declaration::definition defined in decls.h
      uses variable data_declaration::ast defined in decls.h
      uses variable data_declaration::defined defined in decls.h
      uses variable data_declaration::isexternalscope defined in decls.h
      uses variable data_declaration::isfilescoperef defined in decls.h
      uses variable data_declaration::needsmemory defined in decls.h
      uses function pedwarn(const char *,...) defined in errors.c
      uses enumvalue RID_REGISTER defined in c-lex.h
      uses enumvalue RID_STATIC defined in c-lex.h
      uses enumvalue RID_INLINE defined in c-lex.h
      uses function check_function(data_declaration,declaration,int,bool,const char *,type,bool,bool,bool) defined in semantics.c
      uses enumvalue decl_variable defined in decls.h
      uses variable data_declaration::vtype defined in decls.h
      uses function if(yy_init) defined in iquals-lex.c
      uses variable data_declaration::islocal defined in decls.h
      uses variable warn_nested_externs defined in flags.h
      uses variable data_declaration::in_system_header defined in decls.h
      uses function lookup_global_id(const char *) defined in semantics.c
      uses function handle_attributes(attribute,data_declaration,field_declaration,tag_declaration) defined in semantics.c
   function finish_decl(declaration,expression) in line 2334
      protection public
      30 lines of code
      2 parameters
      1 conditional paths
      uses macro definition CAST defined in AST.h
      uses variable AST_variable_decl::ddecl defined in AST_defs.h
      uses variable AST_variable_decl::arg1 defined in AST_defs.h
      uses variable data_declaration::initialiser defined in decls.h
      uses variable data_declaration::kind defined in decls.h
      uses enumvalue decl_typedef defined in decls.h
      uses variable data_declaration::type defined in decls.h
      uses variable AST_expression::type defined in AST_defs.h
      uses function type_array(type) defined in types.c
      uses function type_array_size(type) defined in types.c
      uses function build_uint_constant(region,location,type,largest_uint) defined in AST_utils.c
      uses variable parse_region defined in c-parse.h
      uses variable dummy_location defined in c-lex.c
      uses variable size_t_type defined in types.c
      uses function make_array_type(type,expression) defined in types.c
      uses function type_array_of(type) defined in types.c
      uses function check_assignment(type,type,expression,const char *,data_declaration,const char *,int) defined in expr.c
      uses function default_conversion_for_assignment(expression) defined in expr.c
      uses macro definition NULL defined in config.h
   function declare_parameter(declarator,type_element,attribute,attribute,bool) in line 2369
      protection public
      48 lines of code
      5 parameters
      1 conditional paths
      uses variable AST_declarator::loc defined in AST_defs.h
      uses variable AST_type_element::loc defined in AST_defs.h
      uses function new_variable_decl(region,location,declarator,attribute,expression,asm_stmt,data_declaration) defined in AST_defs.h
      uses variable parse_region defined in c-parse.h
      uses macro definition NULL defined in config.h
      uses function new_data_decl(region,location,type_element,attribute,declaration) defined in AST_defs.h
      uses macro definition CAST defined in AST.h
      uses function check_parameter(data_declaration,type_element,variable_decl) defined in semantics.c
      uses variable data_declaration::name defined in decls.h
      uses function lookup_id(const char *,bool) defined in semantics.c
      uses macro definition TRUE defined in bool.h
      uses function duplicate_decls(data_declaration,data_declaration,bool,bool) defined in semantics.c
      uses macro definition FALSE defined in bool.h
      uses variable data_declaration::isused defined in decls.h
      uses function type_void(type) defined in types.c
      uses variable data_declaration::type defined in decls.h
      uses function declare(environment,data_declaration,bool) defined in semantics.c
      uses variable current_env defined in semantics.c
      uses function type_union(type) defined in types.c
      uses function type_tag(type) defined in types.c
      uses variable tag_declaration::transparent_union defined in decls.h
      uses function transparent_union_argument(data_declaration) defined in semantics.c
      uses function handle_attributes(attribute,data_declaration,field_declaration,tag_declaration) defined in semantics.c
      uses function ignored_attributes(attribute) defined in semantics.c
      uses variable AST_variable_decl::ddecl defined in AST_defs.h
   function declare_old_parameter(location,cstring) in line 2418
      protection public
      29 lines of code
      2 parameters
      1 conditional paths
      uses function new_oldidentifier_decl(region,location,cstring,data_declaration) defined in AST_defs.h
      uses variable parse_region defined in c-parse.h
      uses macro definition NULL defined in config.h
      uses function lookup_id(const char *,bool) defined in semantics.c
      uses macro definition TRUE defined in bool.h
      uses function error(const char *,...) defined in errors.c
      uses function init_data_declaration(data_declaration,declaration,const char *,type) defined in semantics.c
      uses macro definition CAST defined in AST.h
      uses variable void_type defined in types.c
      uses variable data_declaration::kind defined in decls.h
      uses enumvalue decl_variable defined in decls.h
      uses variable data_declaration::definition defined in decls.h
      uses variable data_declaration::ast defined in decls.h
      uses variable data_declaration::defined defined in decls.h
      uses variable data_declaration::isexternalscope defined in decls.h
      uses macro definition FALSE defined in bool.h
      uses variable data_declaration::isfilescoperef defined in decls.h
      uses variable data_declaration::needsmemory defined in decls.h
      uses variable data_declaration::vtype defined in decls.h
      uses enumvalue data_declaration::variable_normal defined in decls.h
      uses variable data_declaration::islocal defined in decls.h
      uses variable data_declaration::isparameter defined in decls.h
      uses function declare(environment,data_declaration,bool) defined in semantics.c
      uses variable current_env defined in semantics.c
      uses variable AST_oldidentifier_decl::ddecl defined in AST_defs.h
   function start_struct(location,ast_kind,word) in line 2449
      protection public
      25 lines of code
      3 parameters
      1 conditional paths
      uses function newkind_tag_ref(region,ast_kind,location,word,attribute,declaration,bool) defined in AST.c
      uses variable parse_region defined in c-parse.h
      uses macro definition NULL defined in config.h
      uses macro definition TRUE defined in bool.h
      uses function lookup_tag(tag_ref,bool) defined in semantics.c
      uses function pending_xref_error(void) defined in semantics.c
      uses variable tag_declaration::kind defined in decls.h
      uses variable tag_declaration::defined defined in decls.h
      uses variable tag_declaration::being_defined defined in decls.h
      uses function error(const char *,...) defined in errors.c
      uses enumvalue kind_union_ref defined in AST_types.h
      uses variable AST_word::cstring defined in AST_defs.h
      uses variable cstring::data defined in cstring.h
      uses function declare_tag(tag_ref) defined in semantics.c
      uses variable AST_tag_ref::tdecl defined in AST_defs.h
      uses macro definition CAST defined in AST.h
   function finish_struct(type_element,declaration,attribute) in line 2478
      protection public
      220 lines of code
      3 parameters
      1 conditional paths
      uses macro definition CAST defined in AST.h
      uses variable AST_tag_ref::tdecl defined in AST_defs.h
      uses macro definition FALSE defined in bool.h
      uses variable tag_declaration::fieldlist defined in decls.h
      uses macro definition BITSPERBYTE defined in config.h
      uses macro definition TRUE defined in bool.h
      uses variable tag_declaration::kind defined in decls.h
      uses enumvalue kind_union_ref defined in AST_types.h
      uses variable AST_tag_ref::fields defined in AST_defs.h
      uses variable AST_tag_ref::attributes defined in AST_defs.h
      uses function handle_attributes(attribute,data_declaration,field_declaration,tag_declaration) defined in semantics.c
      uses macro definition NULL defined in config.h
      uses variable tag_declaration::fields defined in decls.h
      uses function new_env(region,env) defined in env.c
      uses variable parse_region defined in c-parse.h
      uses variable tag_declaration::defined defined in decls.h
      uses variable tag_declaration::being_defined defined in decls.h
      uses macro definition scan_declaration defined in AST_defs.h
      uses macro definition is_extension_decl defined in AST_types.h
      uses macro definition scan_field_decl defined in AST_defs.h
      uses variable AST_data_decl::decls defined in AST_defs.h
      uses variable data_declaration::name defined in decls.h
      uses macro definition ralloc defined in regions.h
      uses function parse_declarator(type_element,declarator,bool,int *,bool *,const char **,type *,bool *,function_declarator *) defined in semantics.c
      uses variable AST_data_decl::modifiers defined in AST_defs.h
      uses variable tag_declaration::fields_const defined in decls.h
      uses function type_base(type) defined in types.c
      uses function type_struct(type) defined in types.c
      uses function type_union(type) defined in types.c
      uses function type_tag(type) defined in types.c
      uses variable tag_declaration::fields_volatile defined in decls.h
      uses function type_function(type) defined in types.c
      uses function error_with_location(location,const char *,...) defined in errors.c
      uses function make_pointer_type(type) defined in types.c
      uses function type_void(type) defined in types.c
      uses variable error_type defined in types.c
      uses function type_incomplete(type) defined in types.c
      uses variable Field::next defined in qtype.c
      uses variable field_declaration::next defined in decls.h
      uses variable field_declaration::name defined in decls.h
      uses variable field_declaration::type defined in decls.h
      uses variable field_declaration::ast defined in decls.h
      uses function env_lookup(env,const char *,bool) defined in env.c
      uses function env_add(env,const char *,void *) defined in env.c
      uses variable AST_data_decl::attributes defined in AST_defs.h
      uses function type_integer(type) defined in types.c
      uses macro definition constant_integral defined in constants.h
      uses macro definition constant_uint_value defined in constants.h
      uses variable pedantic defined in flags.h
      uses function constant_overflow_warning(known_cst) defined in constants.c
      uses function type_unsigned(type) defined in types.c
      uses variable AST_known_cst::type defined in AST_defs.h
      uses macro definition constant_sint_value defined in constants.h
      uses function type_size(type) defined in types.c
      uses function pedwarn_with_location(location,const char *,...) defined in errors.c
      uses function pedwarn_with_decl(declaration,const char *,...) defined in errors.c
      uses function warning_with_decl(declaration,const char *,...) defined in errors.c
      uses variable field_declaration::bitwidth defined in decls.h
      uses variable field_declaration::offset_cc defined in decls.h
      uses function type_size_cc(type) defined in types.c
      uses function type_has_size(type) defined in types.c
      uses function type_alignment(type) defined in types.c
      uses function align_to(unsigned long,unsigned long) defined in utils.c
      uses variable field_declaration::offset defined in decls.h
      uses function lcm(unsigned long,unsigned long) defined in utils.c
      uses function pedwarn(const char *,...) defined in errors.c
      uses variable AST_tag_ref::kind defined in AST_defs.h
      uses variable tag_declaration::size defined in decls.h
      uses variable tag_declaration::alignment defined in decls.h
      uses variable tag_declaration::size_cc defined in decls.h
   function xref_tag(location,ast_kind,word) in line 2700
      protection public
      12 lines of code
      3 parameters
      1 conditional paths
      uses function newkind_tag_ref(region,ast_kind,location,word,attribute,declaration,bool) defined in AST.c
      uses variable parse_region defined in c-parse.h
      uses macro definition NULL defined in config.h
      uses macro definition FALSE defined in bool.h
      uses function lookup_tag(tag_ref,bool) defined in semantics.c
      uses function declare_tag(tag_ref) defined in semantics.c
      uses variable AST_tag_ref::tdecl defined in AST_defs.h
      uses macro definition CAST defined in AST.h
   function start_enum(location,word) in line 2716
      protection public
      22 lines of code
      2 parameters
      1 conditional paths
      uses function new_enum_ref(region,location,word,attribute,declaration,bool) defined in AST_defs.h
      uses variable parse_region defined in c-parse.h
      uses macro definition NULL defined in config.h
      uses macro definition TRUE defined in bool.h
      uses function lookup_tag(tag_ref,bool) defined in semantics.c
      uses function pending_xref_error(void) defined in semantics.c
      uses variable tag_declaration::kind defined in decls.h
      uses enumvalue kind_enum_ref defined in AST_types.h
      uses variable tag_declaration::defined defined in decls.h
      uses function error(const char *,...) defined in errors.c
      uses variable AST_word::cstring defined in AST_defs.h
      uses variable cstring::data defined in cstring.h
      uses function declare_tag(tag_ref) defined in semantics.c
      uses variable AST_tag_ref::tdecl defined in AST_defs.h
      uses variable tag_declaration::being_defined defined in decls.h
      uses variable tag_declaration::packed defined in decls.h
      uses variable flag_short_enums defined in flags.h
      uses variable last_enum_value defined in semantics.c
      uses macro definition CAST defined in AST.h
   function finish_enum(type_element,declaration,attribute) in line 2741
      protection public
      74 lines of code
      3 parameters
      1 conditional paths
      uses macro definition CAST defined in AST.h
      uses variable AST_tag_ref::tdecl defined in AST_defs.h
      uses variable AST_tag_ref::fields defined in AST_defs.h
      uses variable AST_tag_ref::attributes defined in AST_defs.h
      uses function handle_attributes(attribute,data_declaration,field_declaration,tag_declaration) defined in semantics.c
      uses macro definition NULL defined in config.h
      uses variable tag_declaration::fields defined in decls.h
      uses variable tag_declaration::defined defined in decls.h
      uses macro definition TRUE defined in bool.h
      uses variable tag_declaration::being_defined defined in decls.h
      uses macro definition FALSE defined in bool.h
      uses variable cval_zero defined in cval.c
      uses function value_of_enumerator(enumerator) defined in AST_utils.c
      uses macro definition scan_enumerator defined in AST_defs.h
      uses variable AST_enumerator::next defined in AST_defs.h
      uses function cval_intcompare(cval,cval) defined in cval.c
      uses function type_for_cval(cval,bool) defined in types.c
      uses function warning(const char *,...) defined in errors.c
      uses variable long_long_type defined in types.c
      uses function type_size(type) defined in types.c
      uses variable tag_declaration::packed defined in decls.h
      uses variable int_type defined in types.c
      uses variable tag_declaration::reptype defined in decls.h
      uses variable tag_declaration::size_cc defined in decls.h
      uses variable tag_declaration::size defined in decls.h
      uses variable tag_declaration::alignment defined in decls.h
      uses function type_alignment(type) defined in types.c
      uses variable AST_enumerator::ddecl defined in AST_defs.h
      uses variable data_declaration::value defined in decls.h
      uses variable AST_known_cst::type defined in AST_defs.h
      uses variable AST_known_cst::cval defined in AST_defs.h
      uses function cval_cast(cval,type) defined in cval.c
   function make_enumerator(location,cstring,expression) in line 2816
      protection public
      61 lines of code
      3 parameters
      1 conditional paths
      uses variable data_declaration::ast defined in decls.h
      uses macro definition CAST defined in AST.h
      uses function new_enumerator(region,location,cstring,expression,data_declaration) defined in AST_defs.h
      uses variable parse_region defined in c-parse.h
      uses variable data_declaration::value defined in decls.h
      uses macro definition NULL defined in config.h
      uses function init_data_declaration(data_declaration,declaration,const char *,type) defined in semantics.c
      uses variable int_type defined in types.c
      uses variable data_declaration::kind defined in decls.h
      uses enumvalue decl_constant defined in decls.h
      uses variable data_declaration::definition defined in decls.h
      uses variable data_declaration::defined defined in decls.h
      uses macro definition TRUE defined in bool.h
      uses function type_integer(type) defined in types.c
      uses variable AST_known_cst::type defined in AST_defs.h
      uses variable AST_known_cst::cst defined in AST_defs.h
      uses macro definition constant_integral defined in constants.h
      uses function error(const char *,...) defined in errors.c
      uses variable last_enum_value defined in semantics.c
      uses function type_unsigned(type) defined in types.c
      uses variable unsigned_long_long_type defined in types.c
      uses variable long_long_type defined in types.c
      uses function fold_add(type,known_cst,known_cst) defined in constants.c
      uses variable onecst defined in semantics.c
      uses variable zerocst defined in semantics.c
      uses variable pedantic defined in flags.h
      uses function cval_inrange(cval,type) defined in cval.c
      uses function pedwarn(const char *,...) defined in errors.c
      uses function type_size(type) defined in types.c
      uses function type_for_size(int,bool) defined in types.c
      uses variable flag_traditional defined in flags.h
      uses function lookup_id(const char *,bool) defined in semantics.c
      uses function duplicate_decls(data_declaration,data_declaration,bool,bool) defined in semantics.c
      uses macro definition FALSE defined in bool.h
      uses function declare(environment,data_declaration,bool) defined in semantics.c
      uses variable current_env defined in semantics.c
   function make_field(declarator,expression,type_element,attribute,attribute) in line 2883
      protection public
      11 lines of code
      5 parameters
      1 conditional paths
      uses variable AST_declarator::loc defined in AST_defs.h
      uses variable AST_expression::loc defined in AST_defs.h
      uses macro definition CAST defined in AST.h
      uses function new_field_decl(region,location,declarator,attribute,expression) defined in AST_defs.h
      uses variable parse_region defined in c-parse.h
   function make_type(type_element,declarator) in line 2897
      protection public
      15 lines of code
      2 parameters
      1 conditional paths
      uses variable AST_type_element::loc defined in AST_defs.h
      uses variable AST_declarator::loc defined in AST_defs.h
      uses variable data_declaration::name defined in decls.h
      uses function new_asttype(region,location,declarator,type_element) defined in AST_defs.h
      uses variable parse_region defined in c-parse.h
      uses function parse_declarator(type_element,declarator,bool,int *,bool *,const char **,type *,bool *,function_declarator *) defined in semantics.c
      uses variable AST_asttype::qualifiers defined in AST_defs.h
      uses variable AST_asttype::declarator defined in AST_defs.h
      uses macro definition FALSE defined in bool.h
      uses variable AST_asttype::type defined in AST_defs.h
      uses macro definition NULL defined in config.h
   function save_directive(char *) in line 2915
      protection public
      68 lines of code
      1 parameters
      1 conditional paths
      uses macro definition NULL defined in config.h
      uses function xmalloc(size_t) defined in utils.c
      uses function xrealloc(void *,size_t) defined in utils.c
      uses variable finput defined in input.c
   function rid_name_int(int) in line 2985
      protection public
      23 lines of code
      1 parameters
      17 conditional paths
      uses enumvalue RID_INT defined in c-lex.h
      uses enumvalue RID_CHAR defined in c-lex.h
      uses enumvalue RID_FLOAT defined in c-lex.h
      uses enumvalue RID_DOUBLE defined in c-lex.h
      uses enumvalue RID_VOID defined in c-lex.h
      uses enumvalue RID_UNSIGNED defined in c-lex.h
      uses enumvalue RID_SHORT defined in c-lex.h
      uses enumvalue RID_LONG defined in c-lex.h
      uses enumvalue RID_AUTO defined in c-lex.h
      uses enumvalue RID_STATIC defined in c-lex.h
      uses enumvalue RID_EXTERN defined in c-lex.h
      uses enumvalue RID_REGISTER defined in c-lex.h
      uses enumvalue RID_TYPEDEF defined in c-lex.h
      uses enumvalue RID_SIGNED defined in c-lex.h
      uses enumvalue RID_INLINE defined in c-lex.h
      uses enumvalue RID_COMPLEX defined in c-lex.h
      uses macro definition NULL defined in config.h
   function rid_name(rid) in line 3010
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function rid_name_int(int) defined in semantics.c
   function chain_with_labels(statement,statement) in line 3017
      protection public
      25 lines of code
      2 parameters
      1 conditional paths
      uses function last_node(node) defined in AST.c
      uses macro definition CAST defined in AST.h
      uses variable AST_node::kind defined in AST_defs.h
      uses enumvalue kind_labeled_stmt defined in AST_types.h
      uses variable AST_labeled_stmt::stmt defined in AST_defs.h
      uses variable AST_node::next defined in AST_defs.h
   function split_type_elements(type_element,type_element *,attribute *) in line 3043
      protection public
      20 lines of code
      3 parameters
      1 conditional paths
      uses macro definition NULL defined in config.h
      uses macro definition CAST defined in AST.h
      uses variable AST_type_element::next defined in AST_defs.h
      uses variable AST_type_element::kind defined in AST_defs.h
      uses enumvalue kind_attribute defined in AST_types.h
      uses function attribute_chain(attribute,attribute) defined in AST_defs.h
      uses function type_element_chain(type_element,type_element) defined in AST_defs.h
   function init_semantics(void) in line 3064
      protection public
      23 lines of code
      1 parameters
      1 conditional paths
      uses variable global_env defined in semantics.c
      uses variable current_env defined in semantics.c
      uses function new_environment(region,environment,bool) defined in semantics.c
      uses variable parse_region defined in c-parse.h
      uses macro definition NULL defined in config.h
      uses macro definition FALSE defined in bool.h
      uses variable bad_decl defined in semantics.c
      uses macro definition ralloc defined in regions.h
      uses variable data_declaration::kind defined in decls.h
      uses enumvalue decl_error defined in decls.h
      uses variable data_declaration::name defined in decls.h
      uses variable data_declaration::type defined in decls.h
      uses variable error_type defined in types.c
      uses variable data_declaration::ast defined in decls.h
      uses function new_error_decl(region,location) defined in AST_defs.h
      uses variable last_location defined in c-lex.c
      uses variable implicit_function_type defined in semantics.c
      uses function make_function_type(type,typelist,bool,type_quals,user_qual_list,bool) defined in types.c
      uses variable int_type defined in types.c
      uses enumvalue no_qualifiers defined in types.h
      uses macro definition TRUE defined in bool.h
      uses function declare_function_name(void) defined in semantics.c
      uses function declare_builtin_types(void) defined in semantics.c
      uses function declare_builtin_identifiers(void) defined in semantics.c
      uses variable onecst defined in semantics.c
      uses function make_signed_cst(largest_int,type) defined in constants.c
      uses variable zerocst defined in semantics.c
      uses variable oneexpr defined in semantics.c
      uses function build_uint_constant(region,location,type,largest_uint) defined in AST_utils.c
      uses variable dummy_location defined in c-lex.c
      uses variable size_t_type defined in types.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cqual/cqual-0.981/src/semantics.h
module semantics.h
   enumeration @46 in line 78
      protection public
   variable builtin_va_list_type in line 27
      protection public
   variable builtin_va_arg_decl in line 28
      protection public
   variable global_env in line 38
      protection public
   variable current_function_decl in line 66
      protection public
   enumvalue var_typedef in line 78
      protection public
   enumvalue var_register in line 78
      protection public
   enumvalue var_normal in line 78
      protection public
   enumvalue var_static in line 78
      protection public
   enumvalue var_extern in line 78
      protection public
   function pending_xref_error(void) in line 34
      protection public
      10 lines of code
      1 parameters
      2 conditional paths
      uses function error_with_location(location,const char *,...) defined in errors.c
      uses variable AST_tag_ref::loc defined in AST_defs.h
      uses variable AST_tag_ref::word1 defined in AST_defs.h
      uses variable AST_word::cstring defined in AST_defs.h
      uses variable cstring::data defined in cstring.h
   function init_semantics(void) in line 36
      protection public
      23 lines of code
      1 parameters
      1 conditional paths
      uses variable global_env defined in semantics.c
      uses function new_environment(region,environment,bool) defined in semantics.c
      uses variable parse_region defined in c-parse.h
      uses macro definition NULL defined in config.h
      uses macro definition FALSE defined in bool.h
      uses variable bad_decl defined in semantics.c
      uses macro definition ralloc defined in regions.h
      uses variable data_declaration::kind defined in decls.h
      uses enumvalue decl_error defined in decls.h
      uses variable data_declaration::name defined in decls.h
      uses variable data_declaration::type defined in decls.h
      uses variable error_type defined in types.c
      uses variable data_declaration::ast defined in decls.h
      uses function new_error_decl(region,location) defined in AST_defs.h
      uses variable last_location defined in c-lex.c
      uses function make_function_type(type,typelist,bool,type_quals,user_qual_list,bool) defined in types.c
      uses variable int_type defined in types.c
      uses enumvalue no_qualifiers defined in types.h
      uses macro definition TRUE defined in bool.h
      uses function make_signed_cst(largest_int,type) defined in constants.c
      uses function build_uint_constant(region,location,type,largest_uint) defined in AST_utils.c
      uses variable dummy_location defined in c-lex.c
      uses variable size_t_type defined in types.c
   function lookup_id(const char *,bool) in line 40
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function env_lookup(env,const char *,bool) defined in env.c
      uses variable environment::id_env defined in decls.h
   function lookup_global_id(const char *) in line 41
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function env_lookup(env,const char *,bool) defined in env.c
      uses variable global_env defined in semantics.c
      uses variable environment::id_env defined in decls.h
      uses macro definition TRUE defined in bool.h
   function shadow_tag(type_element) in line 44
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function shadow_tag_warned(type_element,int) defined in semantics.c
   function shadow_tag_warned(type_element,int) in line 47
      protection public
      57 lines of code
      2 parameters
      9 conditional paths
      uses macro definition scan_type_element defined in AST_defs.h
      uses variable AST_type_element::kind defined in AST_defs.h
      uses enumvalue kind_struct_ref defined in AST_types.h
      uses enumvalue kind_union_ref defined in AST_types.h
      uses enumvalue kind_enum_ref defined in AST_types.h
      uses macro definition CAST defined in AST.h
      uses variable AST_tag_ref::word1 defined in AST_defs.h
      uses function pedwarn(const char *,...) defined in errors.c
      uses function lookup_tag(tag_ref,bool) defined in semantics.c
      uses macro definition TRUE defined in bool.h
      uses function declare_tag(tag_ref) defined in semantics.c
      uses function pending_xref_error(void) defined in semantics.c
      uses variable in_system_header defined in c-lex.c
      uses function warning(const char *,...) defined in errors.c
      uses function error(const char *,...) defined in errors.c
   function make_function_declarator(location,declarator,declaration,type_element) in line 50
      protection public
      25 lines of code
      4 parameters
      4 conditional paths
      uses function poplevel(void) defined in semantics.c
      uses function new_function_declarator(region,location,declarator,declaration,type_element,environment) defined in AST_defs.h
      uses variable parse_region defined in c-parse.h
      uses function new_style(declaration) defined in semantics.c
      uses function is_void_parms(declaration) defined in semantics.c
      uses macro definition scan_declaration defined in AST_defs.h
      uses macro definition is_ellipsis_decl defined in AST_types.h
      uses macro definition is_error_decl defined in AST_types.h
      uses macro definition CAST defined in AST.h
      uses variable AST_variable_decl::ddecl defined in AST_defs.h
      uses function error_with_location(location,const char *,...) defined in errors.c
      uses variable bad_decl defined in semantics.c
   function start_function(type_element,declarator,attribute,bool) in line 56
      protection public
      161 lines of code
      4 parameters
      20 conditional paths
      uses variable data_declaration::name defined in decls.h
      uses variable global_env defined in semantics.c
      uses variable current_function_decl defined in semantics.c
      uses macro definition NULL defined in config.h
      uses function parse_declarator(type_element,declarator,bool,int *,bool *,const char **,type *,bool *,function_declarator *) defined in semantics.c
      uses macro definition FALSE defined in bool.h
      uses function type_function(type) defined in types.c
      uses function new_function_decl(region,location,declarator,type_element,attribute,declaration,statement,function_decl,data_declaration) defined in AST_defs.h
      uses variable parse_region defined in c-parse.h
      uses variable AST_declarator::loc defined in AST_defs.h
      uses variable AST_function_decl::declared_type defined in AST_defs.h
      uses variable AST_function_decl::undeclared_variables defined in AST_defs.h
      uses function new_env(region,env) defined in env.c
      uses variable AST_function_decl::current_loop defined in AST_defs.h
      uses enumvalue RID_AUTO defined in c-lex.h
      uses variable pedantic defined in flags.h
      uses function pedwarn(const char *,...) defined in errors.c
      uses enumvalue RID_REGISTER defined in c-lex.h
      uses function error(const char *,...) defined in errors.c
      uses enumvalue RID_TYPEDEF defined in c-lex.h
      uses enumvalue RID_EXTERN defined in c-lex.h
      uses enumvalue RID_STATIC defined in c-lex.h
      uses function type_void(type) defined in types.c
      uses function type_function_return_type(type) defined in types.c
      uses function type_incomplete(type) defined in types.c
      uses function qualify_type1(type,type) defined in types.c
      uses function make_function_type(type,typelist,bool,type_quals,user_qual_list,bool) defined in types.c
      uses variable void_type defined in types.c
      uses function type_function_arguments(type) defined in types.c
      uses function type_function_varargs(type) defined in types.c
      uses function type_function_varargs_quals(type) defined in types.c
      uses function type_function_varargs_user_quals(type) defined in types.c
      uses function type_function_oldstyle(type) defined in types.c
      uses function lookup_id(const char *,bool) defined in semantics.c
      uses macro definition TRUE defined in bool.h
      uses variable data_declaration::kind defined in decls.h
      uses enumvalue decl_function defined in decls.h
      uses variable data_declaration::type defined in decls.h
      uses variable warn_strict_prototypes defined in flags.h
      uses function warning(const char *,...) defined in errors.c
      uses variable warn_missing_prototypes defined in flags.h
      uses variable data_declaration::ftype defined in decls.h
      uses variable warn_missing_declarations defined in flags.h
      uses function check_function(data_declaration,declaration,int,bool,const char *,type,bool,bool,bool) defined in semantics.c
      uses macro definition CAST defined in AST.h
      uses variable data_declaration::definition defined in decls.h
      uses variable data_declaration::ast defined in decls.h
      uses variable data_declaration::defined defined in decls.h
      uses function type_compatible(type,type) defined in types.c
      uses function declare(environment,data_declaration,bool) defined in semantics.c
      uses variable AST_function_decl::base_labels defined in AST_defs.h
      uses variable AST_function_decl::scoped_labels defined in AST_defs.h
      uses variable AST_function_decl::ddecl defined in AST_defs.h
      uses variable AST_function_decl::fdeclarator defined in AST_defs.h
      uses variable AST_function_declarator::env defined in AST_defs.h
      uses variable environment::fdecl defined in decls.h
      uses function env_scan(env,env_scanner *) defined in env.c
      uses variable environment::id_env defined in decls.h
      uses function env_next(env_scanner *,const char **,void **) defined in env.c
      uses enumvalue decl_variable defined in decls.h
      uses variable data_declaration::isparameter defined in decls.h
      uses function handle_attributes(attribute,data_declaration,field_declaration,tag_declaration) defined in semantics.c
   function store_parm_decls(declaration) in line 60
      protection public
      38 lines of code
      1 parameters
      5 conditional paths
      uses function oldstyle_function(function_decl) defined in AST_utils.c
      uses variable current_function_decl defined in semantics.c
      uses function error_with_decl(declaration,const char *,...) defined in errors.c
      uses macro definition CAST defined in AST.h
      uses variable AST_function_decl::old_parms defined in AST_defs.h
      uses variable AST_function_decl::fdeclarator defined in AST_defs.h
      uses variable AST_function_declarator::parms defined in AST_defs.h
      uses macro definition scan_oldidentifier_decl defined in AST_defs.h
      uses variable AST_oldidentifier_decl::ddecl defined in AST_defs.h
      uses variable data_declaration::type defined in decls.h
      uses variable void_type defined in types.c
      uses variable int_type defined in types.c
      uses variable extra_warnings defined in flags.h
      uses function warning_with_decl(declaration,const char *,...) defined in errors.c
      uses variable AST_oldidentifier_decl::cstring defined in AST_defs.h
      uses variable cstring::data defined in cstring.h
   function finish_function(statement) in line 63
      protection public
      12 lines of code
      1 parameters
      1 conditional paths
      uses macro definition CAST defined in AST.h
      uses variable current_function_decl defined in semantics.c
      uses variable AST_function_decl::stmt defined in AST_defs.h
      uses variable environment::parm_level defined in decls.h
      uses function poplevel(void) defined in semantics.c
      uses function check_labels(void) defined in stmt.c
      uses variable AST_function_decl::parent_function defined in AST_defs.h
   function pushlevel(bool) in line 71
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function new_environment(region,environment,bool) defined in semantics.c
      uses variable parse_region defined in c-parse.h
   function poplevel(void) in line 74
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses variable environment::parent defined in decls.h
   function split_type_elements(type_element,type_element *,attribute *) in line 80
      protection public
      20 lines of code
      3 parameters
      3 conditional paths
      uses macro definition NULL defined in config.h
      uses macro definition CAST defined in AST.h
      uses variable AST_type_element::next defined in AST_defs.h
      uses variable AST_type_element::kind defined in AST_defs.h
      uses enumvalue kind_attribute defined in AST_types.h
      uses function attribute_chain(attribute,attribute) defined in AST_defs.h
      uses function type_element_chain(type_element,type_element) defined in AST_defs.h
   function start_decl(declarator,asm_stmt,type_element,bool,attribute,attribute) in line 88
      protection public
      232 lines of code
      6 parameters
      30 conditional paths
      uses function new_variable_decl(region,location,declarator,attribute,expression,asm_stmt,data_declaration) defined in AST_defs.h
      uses variable parse_region defined in c-parse.h
      uses macro definition NULL defined in config.h
      uses variable environment::parm_level defined in decls.h
      uses function check_parameter(data_declaration,type_element,variable_decl) defined in semantics.c
      uses function type_void(type) defined in types.c
      uses variable data_declaration::type defined in decls.h
      uses function error(const char *,...) defined in errors.c
      uses variable data_declaration::name defined in decls.h
      uses variable int_type defined in types.c
      uses function oldstyle_function(function_decl) defined in AST_utils.c
      uses variable current_function_decl defined in semantics.c
      uses variable flag_traditional defined in flags.h
      uses function type_equal_unqualified(type,type) defined in types.c
      uses variable float_type defined in types.c
      uses function qualify_type1(type,type) defined in types.c
      uses variable double_type defined in types.c
      uses function lookup_id(const char *,bool) defined in semantics.c
      uses macro definition TRUE defined in bool.h
      uses macro definition FALSE defined in bool.h
      uses macro definition CAST defined in AST.h
      uses function declare(environment,data_declaration,bool) defined in semantics.c
      uses variable AST_variable_decl::ddecl defined in AST_defs.h
      uses function parse_declarator(type_element,declarator,bool,int *,bool *,const char **,type *,bool *,function_declarator *) defined in semantics.c
      uses variable AST_variable_decl::declared_type defined in AST_defs.h
      uses variable warn_implicit_int defined in flags.h
      uses function type_function(type) defined in types.c
      uses function warning(const char *,...) defined in errors.c
      uses function init_data_declaration(data_declaration,declaration,const char *,type) defined in semantics.c
      uses enumvalue RID_EXTERN defined in c-lex.h
      uses variable global_env defined in semantics.c
      uses enumvalue RID_AUTO defined in c-lex.h
      uses enumvalue RID_TYPEDEF defined in c-lex.h
      uses variable pedantic defined in flags.h
      uses variable AST_type_element::next defined in AST_defs.h
      uses variable data_declaration::kind defined in decls.h
      uses enumvalue decl_typedef defined in decls.h
      uses variable data_declaration::definition defined in decls.h
      uses variable data_declaration::ast defined in decls.h
      uses variable data_declaration::defined defined in decls.h
      uses variable data_declaration::isexternalscope defined in decls.h
      uses variable data_declaration::isfilescoperef defined in decls.h
      uses variable data_declaration::needsmemory defined in decls.h
      uses function pedwarn(const char *,...) defined in errors.c
      uses enumvalue RID_REGISTER defined in c-lex.h
      uses enumvalue RID_STATIC defined in c-lex.h
      uses enumvalue RID_INLINE defined in c-lex.h
      uses function check_function(data_declaration,declaration,int,bool,const char *,type,bool,bool,bool) defined in semantics.c
      uses enumvalue decl_variable defined in decls.h
      uses variable data_declaration::vtype defined in decls.h
      uses function if(yy_init) defined in iquals-lex.c
      uses variable data_declaration::islocal defined in decls.h
      uses variable warn_nested_externs defined in flags.h
      uses variable data_declaration::in_system_header defined in decls.h
      uses function lookup_global_id(const char *) defined in semantics.c
      uses function handle_attributes(attribute,data_declaration,field_declaration,tag_declaration) defined in semantics.c
   function finish_decl(declaration,expression) in line 94
      protection public
      30 lines of code
      2 parameters
      5 conditional paths
      uses macro definition CAST defined in AST.h
      uses variable AST_variable_decl::ddecl defined in AST_defs.h
      uses variable AST_variable_decl::arg1 defined in AST_defs.h
      uses variable data_declaration::initialiser defined in decls.h
      uses variable data_declaration::kind defined in decls.h
      uses enumvalue decl_typedef defined in decls.h
      uses variable data_declaration::type defined in decls.h
      uses variable AST_expression::type defined in AST_defs.h
      uses function type_array(type) defined in types.c
      uses function type_array_size(type) defined in types.c
      uses function build_uint_constant(region,location,type,largest_uint) defined in AST_utils.c
      uses variable parse_region defined in c-parse.h
      uses variable dummy_location defined in c-lex.c
      uses variable size_t_type defined in types.c
      uses function make_array_type(type,expression) defined in types.c
      uses function type_array_of(type) defined in types.c
      uses function check_assignment(type,type,expression,const char *,data_declaration,const char *,int) defined in expr.c
      uses function default_conversion_for_assignment(expression) defined in expr.c
      uses macro definition NULL defined in config.h
   function declare_parameter(declarator,type_element,attribute,attribute,bool) in line 100
      protection public
      48 lines of code
      5 parameters
      6 conditional paths
      uses variable AST_declarator::loc defined in AST_defs.h
      uses variable AST_type_element::loc defined in AST_defs.h
      uses function new_variable_decl(region,location,declarator,attribute,expression,asm_stmt,data_declaration) defined in AST_defs.h
      uses variable parse_region defined in c-parse.h
      uses macro definition NULL defined in config.h
      uses function new_data_decl(region,location,type_element,attribute,declaration) defined in AST_defs.h
      uses macro definition CAST defined in AST.h
      uses function check_parameter(data_declaration,type_element,variable_decl) defined in semantics.c
      uses variable data_declaration::name defined in decls.h
      uses function lookup_id(const char *,bool) defined in semantics.c
      uses macro definition TRUE defined in bool.h
      uses macro definition FALSE defined in bool.h
      uses variable data_declaration::isused defined in decls.h
      uses function type_void(type) defined in types.c
      uses variable data_declaration::type defined in decls.h
      uses function declare(environment,data_declaration,bool) defined in semantics.c
      uses function type_union(type) defined in types.c
      uses function type_tag(type) defined in types.c
      uses variable tag_declaration::transparent_union defined in decls.h
      uses function handle_attributes(attribute,data_declaration,field_declaration,tag_declaration) defined in semantics.c
      uses function ignored_attributes(attribute) defined in semantics.c
      uses variable AST_variable_decl::ddecl defined in AST_defs.h
   function declare_old_parameter(location,cstring) in line 105
      protection public
      29 lines of code
      2 parameters
      2 conditional paths
      uses function new_oldidentifier_decl(region,location,cstring,data_declaration) defined in AST_defs.h
      uses variable parse_region defined in c-parse.h
      uses macro definition NULL defined in config.h
      uses function lookup_id(const char *,bool) defined in semantics.c
      uses macro definition TRUE defined in bool.h
      uses function error(const char *,...) defined in errors.c
      uses function init_data_declaration(data_declaration,declaration,const char *,type) defined in semantics.c
      uses macro definition CAST defined in AST.h
      uses variable void_type defined in types.c
      uses variable data_declaration::kind defined in decls.h
      uses enumvalue decl_variable defined in decls.h
      uses variable data_declaration::definition defined in decls.h
      uses variable data_declaration::ast defined in decls.h
      uses variable data_declaration::defined defined in decls.h
      uses variable data_declaration::isexternalscope defined in decls.h
      uses macro definition FALSE defined in bool.h
      uses variable data_declaration::isfilescoperef defined in decls.h
      uses variable data_declaration::needsmemory defined in decls.h
      uses variable data_declaration::vtype defined in decls.h
      uses enumvalue data_declaration::variable_normal defined in decls.h
      uses variable data_declaration::islocal defined in decls.h
      uses variable data_declaration::isparameter defined in decls.h
      uses function declare(environment,data_declaration,bool) defined in semantics.c
      uses variable AST_oldidentifier_decl::ddecl defined in AST_defs.h
   function start_struct(location,ast_kind,word) in line 109
      protection public
      25 lines of code
      3 parameters
      3 conditional paths
      uses function newkind_tag_ref(region,ast_kind,location,word,attribute,declaration,bool) defined in AST.c
      uses variable parse_region defined in c-parse.h
      uses macro definition NULL defined in config.h
      uses macro definition TRUE defined in bool.h
      uses function lookup_tag(tag_ref,bool) defined in semantics.c
      uses function pending_xref_error(void) defined in semantics.c
      uses variable tag_declaration::kind defined in decls.h
      uses variable tag_declaration::defined defined in decls.h
      uses variable tag_declaration::being_defined defined in decls.h
      uses function error(const char *,...) defined in errors.c
      uses enumvalue kind_union_ref defined in AST_types.h
      uses variable AST_word::cstring defined in AST_defs.h
      uses variable cstring::data defined in cstring.h
      uses function declare_tag(tag_ref) defined in semantics.c
      uses variable AST_tag_ref::tdecl defined in AST_defs.h
      uses macro definition CAST defined in AST.h
   function finish_struct(type_element,declaration,attribute) in line 113
      protection public
      220 lines of code
      3 parameters
      26 conditional paths
      uses macro definition CAST defined in AST.h
      uses variable AST_tag_ref::tdecl defined in AST_defs.h
      uses macro definition FALSE defined in bool.h
      uses variable tag_declaration::fieldlist defined in decls.h
      uses macro definition BITSPERBYTE defined in config.h
      uses macro definition TRUE defined in bool.h
      uses variable tag_declaration::kind defined in decls.h
      uses enumvalue kind_union_ref defined in AST_types.h
      uses variable AST_tag_ref::fields defined in AST_defs.h
      uses variable AST_tag_ref::attributes defined in AST_defs.h
      uses function handle_attributes(attribute,data_declaration,field_declaration,tag_declaration) defined in semantics.c
      uses macro definition NULL defined in config.h
      uses variable tag_declaration::fields defined in decls.h
      uses function new_env(region,env) defined in env.c
      uses variable parse_region defined in c-parse.h
      uses variable tag_declaration::defined defined in decls.h
      uses variable tag_declaration::being_defined defined in decls.h
      uses macro definition scan_declaration defined in AST_defs.h
      uses macro definition is_extension_decl defined in AST_types.h
      uses macro definition scan_field_decl defined in AST_defs.h
      uses variable AST_data_decl::decls defined in AST_defs.h
      uses variable data_declaration::name defined in decls.h
      uses macro definition ralloc defined in regions.h
      uses function parse_declarator(type_element,declarator,bool,int *,bool *,const char **,type *,bool *,function_declarator *) defined in semantics.c
      uses variable AST_data_decl::modifiers defined in AST_defs.h
      uses variable tag_declaration::fields_const defined in decls.h
      uses function type_base(type) defined in types.c
      uses function type_struct(type) defined in types.c
      uses function type_union(type) defined in types.c
      uses function type_tag(type) defined in types.c
      uses variable tag_declaration::fields_volatile defined in decls.h
      uses function type_function(type) defined in types.c
      uses function error_with_location(location,const char *,...) defined in errors.c
      uses function make_pointer_type(type) defined in types.c
      uses function type_void(type) defined in types.c
      uses variable error_type defined in types.c
      uses function type_incomplete(type) defined in types.c
      uses variable Field::next defined in qtype.c
      uses variable field_declaration::next defined in decls.h
      uses variable field_declaration::name defined in decls.h
      uses variable field_declaration::type defined in decls.h
      uses variable field_declaration::ast defined in decls.h
      uses function env_lookup(env,const char *,bool) defined in env.c
      uses function env_add(env,const char *,void *) defined in env.c
      uses variable AST_data_decl::attributes defined in AST_defs.h
      uses function type_integer(type) defined in types.c
      uses macro definition constant_integral defined in constants.h
      uses macro definition constant_uint_value defined in constants.h
      uses variable pedantic defined in flags.h
      uses function constant_overflow_warning(known_cst) defined in constants.c
      uses function type_unsigned(type) defined in types.c
      uses variable AST_known_cst::type defined in AST_defs.h
      uses macro definition constant_sint_value defined in constants.h
      uses function type_size(type) defined in types.c
      uses function pedwarn_with_location(location,const char *,...) defined in errors.c
      uses function pedwarn_with_decl(declaration,const char *,...) defined in errors.c
      uses function warning_with_decl(declaration,const char *,...) defined in errors.c
      uses variable field_declaration::bitwidth defined in decls.h
      uses variable field_declaration::offset_cc defined in decls.h
      uses function type_size_cc(type) defined in types.c
      uses function type_has_size(type) defined in types.c
      uses function type_alignment(type) defined in types.c
      uses function align_to(unsigned long,unsigned long) defined in utils.c
      uses variable field_declaration::offset defined in decls.h
      uses function lcm(unsigned long,unsigned long) defined in utils.c
      uses function pedwarn(const char *,...) defined in errors.c
      uses variable AST_tag_ref::kind defined in AST_defs.h
      uses variable tag_declaration::size defined in decls.h
      uses variable tag_declaration::alignment defined in decls.h
      uses variable tag_declaration::size_cc defined in decls.h
   function xref_tag(location,ast_kind,word) in line 117
      protection public
      12 lines of code
      3 parameters
      2 conditional paths
      uses function newkind_tag_ref(region,ast_kind,location,word,attribute,declaration,bool) defined in AST.c
      uses variable parse_region defined in c-parse.h
      uses macro definition NULL defined in config.h
      uses macro definition FALSE defined in bool.h
      uses function lookup_tag(tag_ref,bool) defined in semantics.c
      uses function declare_tag(tag_ref) defined in semantics.c
      uses variable AST_tag_ref::tdecl defined in AST_defs.h
      uses macro definition CAST defined in AST.h
   function start_enum(location,word) in line 120
      protection public
      22 lines of code
      2 parameters
      3 conditional paths
      uses function new_enum_ref(region,location,word,attribute,declaration,bool) defined in AST_defs.h
      uses variable parse_region defined in c-parse.h
      uses macro definition NULL defined in config.h
      uses macro definition TRUE defined in bool.h
      uses function lookup_tag(tag_ref,bool) defined in semantics.c
      uses function pending_xref_error(void) defined in semantics.c
      uses variable tag_declaration::kind defined in decls.h
      uses enumvalue kind_enum_ref defined in AST_types.h
      uses variable tag_declaration::defined defined in decls.h
      uses function error(const char *,...) defined in errors.c
      uses variable AST_word::cstring defined in AST_defs.h
      uses variable cstring::data defined in cstring.h
      uses function declare_tag(tag_ref) defined in semantics.c
      uses variable AST_tag_ref::tdecl defined in AST_defs.h
      uses variable tag_declaration::being_defined defined in decls.h
      uses variable tag_declaration::packed defined in decls.h
      uses variable flag_short_enums defined in flags.h
      uses macro definition CAST defined in AST.h
   function finish_enum(type_element,declaration,attribute) in line 124
      protection public
      74 lines of code
      3 parameters
      7 conditional paths
      uses macro definition CAST defined in AST.h
      uses variable AST_tag_ref::tdecl defined in AST_defs.h
      uses variable AST_tag_ref::fields defined in AST_defs.h
      uses variable AST_tag_ref::attributes defined in AST_defs.h
      uses function handle_attributes(attribute,data_declaration,field_declaration,tag_declaration) defined in semantics.c
      uses macro definition NULL defined in config.h
      uses variable tag_declaration::fields defined in decls.h
      uses variable tag_declaration::defined defined in decls.h
      uses macro definition TRUE defined in bool.h
      uses variable tag_declaration::being_defined defined in decls.h
      uses macro definition FALSE defined in bool.h
      uses variable cval_zero defined in cval.c
      uses function value_of_enumerator(enumerator) defined in AST_utils.c
      uses macro definition scan_enumerator defined in AST_defs.h
      uses variable AST_enumerator::next defined in AST_defs.h
      uses function cval_intcompare(cval,cval) defined in cval.c
      uses function type_for_cval(cval,bool) defined in types.c
      uses function warning(const char *,...) defined in errors.c
      uses variable long_long_type defined in types.c
      uses function type_size(type) defined in types.c
      uses variable tag_declaration::packed defined in decls.h
      uses variable int_type defined in types.c
      uses variable tag_declaration::reptype defined in decls.h
      uses variable tag_declaration::size_cc defined in decls.h
      uses variable tag_declaration::size defined in decls.h
      uses variable tag_declaration::alignment defined in decls.h
      uses function type_alignment(type) defined in types.c
      uses variable AST_enumerator::ddecl defined in AST_defs.h
      uses variable data_declaration::value defined in decls.h
      uses variable AST_known_cst::type defined in AST_defs.h
      uses variable AST_known_cst::cval defined in AST_defs.h
      uses function cval_cast(cval,type) defined in cval.c
   function make_field(declarator,expression,type_element,attribute,attribute) in line 132
      protection public
      11 lines of code
      5 parameters
      1 conditional paths
      uses variable AST_declarator::loc defined in AST_defs.h
      uses variable AST_expression::loc defined in AST_defs.h
      uses macro definition CAST defined in AST.h
      uses function new_field_decl(region,location,declarator,attribute,expression) defined in AST_defs.h
      uses variable parse_region defined in c-parse.h
   function make_enumerator(location,cstring,expression) in line 136
      protection public
      61 lines of code
      3 parameters
      8 conditional paths
      uses variable data_declaration::ast defined in decls.h
      uses macro definition CAST defined in AST.h
      uses function new_enumerator(region,location,cstring,expression,data_declaration) defined in AST_defs.h
      uses variable parse_region defined in c-parse.h
      uses variable data_declaration::value defined in decls.h
      uses macro definition NULL defined in config.h
      uses function init_data_declaration(data_declaration,declaration,const char *,type) defined in semantics.c
      uses variable int_type defined in types.c
      uses variable data_declaration::kind defined in decls.h
      uses enumvalue decl_constant defined in decls.h
      uses variable data_declaration::definition defined in decls.h
      uses variable data_declaration::defined defined in decls.h
      uses macro definition TRUE defined in bool.h
      uses function type_integer(type) defined in types.c
      uses variable AST_known_cst::type defined in AST_defs.h
      uses variable AST_known_cst::cst defined in AST_defs.h
      uses macro definition constant_integral defined in constants.h
      uses function error(const char *,...) defined in errors.c
      uses function type_unsigned(type) defined in types.c
      uses variable unsigned_long_long_type defined in types.c
      uses variable long_long_type defined in types.c
      uses function fold_add(type,known_cst,known_cst) defined in constants.c
      uses variable pedantic defined in flags.h
      uses function cval_inrange(cval,type) defined in cval.c
      uses function pedwarn(const char *,...) defined in errors.c
      uses function type_size(type) defined in types.c
      uses function type_for_size(int,bool) defined in types.c
      uses variable flag_traditional defined in flags.h
      uses function lookup_id(const char *,bool) defined in semantics.c
      uses macro definition FALSE defined in bool.h
      uses function declare(environment,data_declaration,bool) defined in semantics.c
   function make_type(type_element,declarator) in line 140
      protection public
      15 lines of code
      2 parameters
      1 conditional paths
      uses variable AST_type_element::loc defined in AST_defs.h
      uses variable AST_declarator::loc defined in AST_defs.h
      uses variable data_declaration::name defined in decls.h
      uses function new_asttype(region,location,declarator,type_element) defined in AST_defs.h
      uses variable parse_region defined in c-parse.h
      uses function parse_declarator(type_element,declarator,bool,int *,bool *,const char **,type *,bool *,function_declarator *) defined in semantics.c
      uses variable AST_asttype::qualifiers defined in AST_defs.h
      uses variable AST_asttype::declarator defined in AST_defs.h
      uses macro definition FALSE defined in bool.h
      uses variable AST_asttype::type defined in AST_defs.h
      uses macro definition NULL defined in config.h
   function save_directive(char *) in line 144
      protection public
      68 lines of code
      1 parameters
      10 conditional paths
      uses macro definition NULL defined in config.h
      uses function xmalloc(size_t) defined in utils.c
      uses function xrealloc(void *,size_t) defined in utils.c
      uses variable finput defined in input.c
   function rid_name(rid) in line 147
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function chain_with_labels(statement,statement) in line 151
      protection public
      25 lines of code
      2 parameters
      5 conditional paths
      uses function last_node(node) defined in AST.c
      uses macro definition CAST defined in AST.h
      uses variable AST_node::kind defined in AST_defs.h
      uses enumvalue kind_labeled_stmt defined in AST_types.h
      uses variable AST_labeled_stmt::stmt defined in AST_defs.h
      uses variable AST_node::next defined in AST_defs.h
   function declarator_name(declarator) in line 153
      protection public
      19 lines of code
      1 parameters
      6 conditional paths
      uses variable AST_declarator::kind defined in AST_defs.h
      uses enumvalue kind_identifier_declarator defined in AST_types.h
      uses macro definition CAST defined in AST.h
      uses enumvalue kind_function_declarator defined in AST_types.h
      uses enumvalue kind_array_declarator defined in AST_types.h
      uses enumvalue kind_pointer_declarator defined in AST_types.h
      uses macro definition NULL defined in config.h
   function implicitly_declare(identifier) in line 160
      protection public
      17 lines of code
      1 parameters
      1 conditional paths
      uses macro definition CAST defined in AST.h
      uses function new_implicit_decl(region,location,identifier) defined in AST_defs.h
      uses variable parse_region defined in c-parse.h
      uses variable AST_identifier::loc defined in AST_defs.h
      uses function init_data_declaration(data_declaration,declaration,const char *,type) defined in semantics.c
      uses variable AST_identifier::cstring defined in AST_defs.h
      uses variable cstring::data defined in cstring.h
      uses variable data_declaration::kind defined in decls.h
      uses enumvalue decl_function defined in decls.h
      uses variable data_declaration::isexternalscope defined in decls.h
      uses macro definition TRUE defined in bool.h
      uses variable data_declaration::isfilescoperef defined in decls.h
      uses variable data_declaration::ftype defined in decls.h
      uses enumvalue data_declaration::function_implicit defined in decls.h
      uses variable data_declaration::shadowed defined in decls.h
      uses function lookup_global_id(const char *) defined in semantics.c
      uses variable data_declaration::name defined in decls.h
      uses function declare(environment,data_declaration,bool) defined in semantics.c
      uses macro definition FALSE defined in bool.h
   function push_label_level(void) in line 162
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable current_function_decl defined in semantics.c
      uses variable AST_function_decl::scoped_labels defined in AST_defs.h
      uses function new_env(region,env) defined in env.c
      uses variable parse_region defined in c-parse.h
   function pop_label_level(void) in line 163
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses function check_labels(void) defined in stmt.c
      uses variable current_function_decl defined in semantics.c
      uses variable AST_function_decl::scoped_labels defined in AST_defs.h
      uses function env_parent(env) defined in env.c
   function init_data_declaration(data_declaration,declaration,const char *,type) in line 165
      protection public
      38 lines of code
      4 parameters
      1 conditional paths
      uses variable data_declaration::kind defined in decls.h
      uses variable data_declaration::name defined in decls.h
      uses variable data_declaration::type defined in decls.h
      uses variable data_declaration::shadowed defined in decls.h
      uses macro definition NULL defined in config.h
      uses variable data_declaration::global defined in decls.h
      uses variable data_declaration::ast defined in decls.h
      uses variable data_declaration::definition defined in decls.h
      uses variable data_declaration::isexternalscope defined in decls.h
      uses macro definition FALSE defined in bool.h
      uses variable data_declaration::isfilescoperef defined in decls.h
      uses variable data_declaration::needsmemory defined in decls.h
      uses variable data_declaration::isused defined in decls.h
      uses variable data_declaration::in_system_header defined in decls.h
      uses variable AST_declaration::loc defined in AST_defs.h
      uses variable Location::in_system_header defined in location.h
      uses variable data_declaration::in_prelude defined in decls.h
      uses variable in_prelude defined in c-lex.h
      uses variable data_declaration::defined defined in decls.h
      uses variable data_declaration::isallocated defined in decls.h
      uses variable data_declaration::addresstaken defined in decls.h
      uses variable data_declaration::ftype defined in decls.h
      uses variable data_declaration::isinline defined in decls.h
      uses variable data_declaration::isexterninline defined in decls.h
      uses variable data_declaration::__init defined in decls.h
      uses variable data_declaration::noreturn defined in decls.h
      uses variable data_declaration::alias defined in decls.h
      uses variable data_declaration::oldstyle_args defined in decls.h
      uses variable data_declaration::vtype defined in decls.h
      uses variable data_declaration::islocal defined in decls.h
      uses variable data_declaration::isparameter defined in decls.h
      uses variable data_declaration::islimbo defined in decls.h
      uses variable data_declaration::value defined in decls.h
      uses variable data_declaration::chars defined in decls.h
      uses variable data_declaration::chars_length defined in decls.h
      uses variable data_declaration::qtype defined in decls.h
      uses variable data_declaration::fs_qtype defined in decls.h
      uses variable data_declaration::alref defined in decls.h
   function declare(environment,data_declaration,bool) in line 167
      protection public
      104 lines of code
      3 parameters
      16 conditional paths
      uses macro definition ralloc defined in regions.h
      uses variable parse_region defined in c-parse.h
      uses variable data_declaration::name defined in decls.h
      uses variable flag_traditional defined in flags.h
      uses variable data_declaration::isfilescoperef defined in decls.h
      uses function lookup_id(const char *,bool) defined in semantics.c
      uses macro definition FALSE defined in bool.h
      uses variable global_env defined in semantics.c
      uses variable data_declaration::islocal defined in decls.h
      uses variable environment::parm_level defined in decls.h
      uses variable environment::parent defined in decls.h
      uses function env_lookup(env,const char *,bool) defined in env.c
      uses variable environment::id_env defined in decls.h
      uses macro definition TRUE defined in bool.h
      uses variable data_declaration::isparameter defined in decls.h
      uses function pedwarn(const char *,...) defined in errors.c
      uses variable warn_shadow defined in flags.h
      uses variable error_shadow defined in flags.h
      uses function error(const char *,...) defined in errors.c
      uses function warning(const char *,...) defined in errors.c
      uses function lookup_global_id(const char *) defined in semantics.c
      uses variable data_declaration::islimbo defined in decls.h
      uses function env_add(env,const char *,void *) defined in env.c
      uses variable data_declaration::shadowed defined in decls.h
      uses variable data_declaration::kind defined in decls.h
      uses enumvalue decl_function defined in decls.h
      uses variable data_declaration::ftype defined in decls.h
      uses variable mesg_implicit_function_declaration defined in flags.h
      uses function warning_or_error(bool,const char *,...) defined in errors.c
      uses variable warn_traditional defined in flags.h
      uses variable warn_main defined in flags.h
      uses function warning_with_decl(declaration,const char *,...) defined in errors.c
      uses variable data_declaration::ast defined in decls.h
   function declare_string(const char *,bool,size_t) in line 171
      protection public
      19 lines of code
      3 parameters
      1 conditional paths
      uses function build_uint_constant(region,location,type,largest_uint) defined in AST_utils.c
      uses variable parse_region defined in c-parse.h
      uses variable dummy_location defined in c-lex.c
      uses variable size_t_type defined in types.c
      uses function make_array_type(type,expression) defined in types.c
      uses variable wchar_type defined in types.c
      uses variable char_type defined in types.c
      uses function init_data_declaration(data_declaration,declaration,const char *,type) defined in semantics.c
      uses function new_error_decl(region,location) defined in AST_defs.h
      uses variable data_declaration::name defined in decls.h
      uses variable data_declaration::kind defined in decls.h
      uses enumvalue decl_magic_string defined in decls.h
      uses variable data_declaration::needsmemory defined in decls.h
      uses macro definition TRUE defined in bool.h
      uses variable data_declaration::in_system_header defined in decls.h
      uses variable data_declaration::vtype defined in decls.h
      uses enumvalue data_declaration::variable_static defined in decls.h
      uses variable data_declaration::chars_length defined in decls.h
      uses variable data_declaration::chars defined in decls.h
      uses macro definition rarrayalloc defined in regions.h
      uses function declare(environment,data_declaration,bool) defined in semantics.c
   function new_environment(region,environment,bool) in line 173
      protection public
      27 lines of code
      3 parameters
      3 conditional paths
      uses macro definition ralloc defined in regions.h
      uses macro definition NULL defined in config.h
      uses variable env::parent defined in env.c
      uses variable environment::fdecl defined in decls.h
      uses function new_env(region,env) defined in env.c
      uses variable environment::id_env defined in decls.h
      uses variable environment::parm_level defined in decls.h
      uses variable environment::tag_env defined in decls.h
   function declare_tag(tag_ref) in line 175
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function declare_tag_env(environment,tag_ref) defined in semantics.c
   function lookup_tag(tag_ref,bool) in line 176
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function lookup_tag_env(environment,tag_ref,bool) defined in semantics.c
   function declare_global_tag(tag_ref) in line 177
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function declare_tag_env(environment,tag_ref) defined in semantics.c
      uses variable global_env defined in semantics.c
   function lookup_global_tag(tag_ref) in line 178
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function lookup_tag_env(environment,tag_ref,bool) defined in semantics.c
      uses variable global_env defined in semantics.c
      uses macro definition TRUE defined in bool.h
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cqual/cqual-0.981/src/set.c
module set.c
   variable empty_set in line 43
      protection public
   variable temp_cmp in line 165
      protection public
   function set_copy(region,set) in line 46
      protection public
      14 lines of code
      2 parameters
      1 conditional paths
      uses variable empty_set defined in set.c
      uses macro definition ralloc defined in regions.h
   function set_empty(set) in line 62
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses macro definition NULL defined in config.h
   function set_member(set_cmp_fn,set,void *) in line 68
      protection public
      7 lines of code
      3 parameters
      1 conditional paths
      uses variable Set::elt defined in set.c
      uses macro definition TRUE defined in bool.h
      uses macro definition FALSE defined in bool.h
   function set_size(set) in line 77
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
   function set_insert(region,set_cmp_fn,bool,set *,void *) in line 88
      protection public
      13 lines of code
      5 parameters
      1 conditional paths
      uses function set_member(set_cmp_fn,set,void *) defined in set.c
      uses variable Set::elt defined in set.c
      uses macro definition ralloc defined in regions.h
      uses variable Set::next defined in set.c
   function set_remove(set_cmp_fn,bool,set *,void *) in line 103
      protection public
      14 lines of code
      4 parameters
      1 conditional paths
      uses variable Set::elt defined in set.c
   function set_subset(set_cmp_fn,set,set) in line 119
      protection public
      7 lines of code
      3 parameters
      1 conditional paths
      uses function set_member(set_cmp_fn,set,void *) defined in set.c
      uses macro definition FALSE defined in bool.h
      uses macro definition TRUE defined in bool.h
   function set_union(set_cmp_fn,bool,set,set) in line 128
      protection public
      28 lines of code
      4 parameters
      1 conditional paths
      uses variable Set::next defined in set.c
      uses function set_member(set_cmp_fn,set,void *) defined in set.c
   function set_single(set) in line 158
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function set_sort_cmp(const void *,const void *) in line 167
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
      uses variable temp_cmp defined in set.c
   function set_sort(set_cmp_fn,set) in line 176
      protection public
      22 lines of code
      2 parameters
      1 conditional paths
      uses variable scratch_region defined in qtype.c
      uses variable count defined in qtype.c
      uses function newregion(void) defined in regions.c
      uses function set_size(set) defined in set.c
      uses macro definition rarrayalloc defined in regions.h
      uses variable temp_cmp defined in set.c
      uses macro definition NULL defined in config.h
      uses function set_sort_cmp(const void *,const void *) defined in set.c
      uses function deleteregion(region) defined in regions.c
   function set_remove_dups(set_cmp_fn,bool,set) in line 200
      protection public
      14 lines of code
      3 parameters
      1 conditional paths
      uses function set_sort(set_cmp_fn,set) defined in set.c
   function set_scan(set,set_scanner *) in line 216
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function set_next(set_scanner *) in line 221
      protection public
      10 lines of code
      1 parameters
      1 conditional paths
      uses macro definition NULL defined in config.h
   variable Set::elt in line 32
      protection public
   variable Set::next in line 33
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cqual/cqual-0.981/src/set.h
module set.h
   macro definition scan_set in line 76
      protection public
   typedef set in line 28
      protection public
   typedef set_scanner in line 29
      protection public
   typedef set_cmp_fn in line 33
      protection public
   variable empty_set in line 36
      protection public
   function set_copy(region,set) in line 39
      protection public
      14 lines of code
      2 parameters
      2 conditional paths
      uses variable empty_set defined in set.c
      uses macro definition ralloc defined in regions.h
   function set_empty(set) in line 42
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses macro definition NULL defined in config.h
   function set_member(set_cmp_fn,set,void *) in line 45
      protection public
      7 lines of code
      3 parameters
      3 conditional paths
      uses variable Set::elt defined in set.c
      uses macro definition TRUE defined in bool.h
      uses macro definition FALSE defined in bool.h
   function set_size(set) in line 48
      protection public
      8 lines of code
      1 parameters
      2 conditional paths
   function set_insert(region,set_cmp_fn,bool,set *,void *) in line 51
      protection public
      13 lines of code
      5 parameters
      2 conditional paths
      uses function set_member(set_cmp_fn,set,void *) defined in set.c
      uses variable Set::elt defined in set.c
      uses macro definition ralloc defined in regions.h
      uses variable Set::next defined in set.c
   function set_remove(set_cmp_fn,bool,set *,void *) in line 54
      protection public
      14 lines of code
      4 parameters
      4 conditional paths
      uses variable Set::elt defined in set.c
   function set_subset(set_cmp_fn,set,set) in line 57
      protection public
      7 lines of code
      3 parameters
      3 conditional paths
      uses function set_member(set_cmp_fn,set,void *) defined in set.c
      uses macro definition FALSE defined in bool.h
      uses macro definition TRUE defined in bool.h
   function set_union(set_cmp_fn,bool,set,set) in line 60
      protection public
      28 lines of code
      4 parameters
      5 conditional paths
      uses variable Set::next defined in set.c
      uses function set_member(set_cmp_fn,set,void *) defined in set.c
   function set_single(set) in line 63
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function set_sort(set_cmp_fn,set) in line 67
      protection public
      22 lines of code
      2 parameters
      3 conditional paths
      uses variable scratch_region defined in qtype.c
      uses variable count defined in qtype.c
      uses function newregion(void) defined in regions.c
      uses function set_size(set) defined in set.c
      uses macro definition rarrayalloc defined in regions.h
      uses macro definition NULL defined in config.h
      uses function set_sort_cmp(const void *,const void *) defined in set.c
      uses function deleteregion(region) defined in regions.c
   function set_remove_dups(set_cmp_fn,bool,set) in line 70
      protection public
      14 lines of code
      3 parameters
      3 conditional paths
      uses function set_sort(set_cmp_fn,set) defined in set.c
   function set_scan(set,set_scanner *) in line 73
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function set_next(set_scanner *) in line 74
      protection public
      10 lines of code
      1 parameters
      2 conditional paths
      uses macro definition NULL defined in config.h
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cqual/cqual-0.981/src/stmt.c
module stmt.c
   function check_condition(const char *,expression) in line 25
      protection public
      7 lines of code
      2 parameters
      1 conditional paths
      uses function default_conversion(expression) defined in expr.c
      uses variable error_type defined in types.c
      uses function type_scalar(type) defined in types.c
      uses function error(const char *,...) defined in errors.c
   function check_switch(expression) in line 33
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable AST_expression::type defined in AST_defs.h
      uses variable error_type defined in types.c
      uses function type_integer(type) defined in types.c
      uses function error(const char *,...) defined in errors.c
   function current_return_type(void) in line 39
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses variable current_function_decl defined in analyze.h
      uses variable AST_function_decl::ddecl defined in AST_defs.h
      uses variable data_declaration::type defined in decls.h
      uses function warning(const char *,...) defined in errors.c
      uses function type_function_return_type(type) defined in types.c
   function check_void_return(void) in line 47
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses function current_return_type(void) defined in stmt.c
      uses variable warn_return_type defined in flags.h
      uses variable error_type defined in types.c
      uses function type_void(type) defined in types.c
      uses function warning(const char *,...) defined in errors.c
   function check_return(expression) in line 55
      protection public
      15 lines of code
      1 parameters
      1 conditional paths
      uses function current_return_type(void) defined in stmt.c
      uses function type_void(type) defined in types.c
      uses variable pedantic defined in flags.h
      uses variable AST_expression::type defined in AST_defs.h
      uses function warning(const char *,...) defined in errors.c
      uses function check_assignment(type,type,expression,const char *,data_declaration,const char *,int) defined in expr.c
      uses function default_conversion_for_assignment(expression) defined in expr.c
      uses macro definition NULL defined in config.h
   function check_computed_goto(expression) in line 71
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function check_conversion(type,type) defined in expr.c
      uses variable ptr_void_type defined in types.c
      uses variable AST_expression::type defined in AST_defs.h
   function new_label_declaration(region,const char *,id_label) in line 77
      protection public
      12 lines of code
      3 parameters
      1 conditional paths
      uses macro definition ralloc defined in regions.h
      uses variable label_declaration::name defined in decls.h
      uses variable label_declaration::explicitly_declared defined in decls.h
      uses macro definition FALSE defined in bool.h
      uses variable label_declaration::firstuse defined in decls.h
      uses variable label_declaration::definition defined in decls.h
      uses macro definition NULL defined in config.h
      uses variable label_declaration::containing_function defined in decls.h
      uses variable current_function_decl defined in analyze.h
   function lookup_label(id_label) in line 90
      protection public
      18 lines of code
      1 parameters
      1 conditional paths
      uses function env_lookup(env,const char *,bool) defined in env.c
      uses variable current_function_decl defined in analyze.h
      uses variable AST_function_decl::scoped_labels defined in AST_defs.h
      uses macro definition FALSE defined in bool.h
      uses variable label_declaration::explicitly_declared defined in decls.h
      uses variable label_declaration::containing_function defined in decls.h
      uses macro definition NULL defined in config.h
      uses function new_label_declaration(region,const char *,id_label) defined in stmt.c
      uses variable parse_region defined in c-parse.h
      uses function env_add(env,const char *,void *) defined in env.c
      uses variable AST_function_decl::base_labels defined in AST_defs.h
   function use_label(id_label) in line 109
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function lookup_label(id_label) defined in stmt.c
      uses macro definition TRUE defined in bool.h
   function duplicate_label_error(id_label) in line 115
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses function error(const char *,...) defined in errors.c
      uses function error_with_location(location,const char *,...) defined in errors.c
      uses variable AST_label::loc defined in AST_defs.h
   function define_label(id_label) in line 124
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses function lookup_label(id_label) defined in stmt.c
      uses function duplicate_label_error(id_label) defined in stmt.c
   function declare_label(id_label) in line 133
      protection public
      17 lines of code
      1 parameters
      1 conditional paths
      uses function env_lookup(env,const char *,bool) defined in env.c
      uses variable current_function_decl defined in analyze.h
      uses variable AST_function_decl::scoped_labels defined in AST_defs.h
      uses macro definition TRUE defined in bool.h
      uses function duplicate_label_error(id_label) defined in stmt.c
      uses function new_label_declaration(region,const char *,id_label) defined in stmt.c
      uses variable parse_region defined in c-parse.h
      uses function env_add(env,const char *,void *) defined in env.c
      uses variable label_declaration::explicitly_declared defined in decls.h
   function check_labels(void) in line 151
      protection public
      19 lines of code
      1 parameters
      1 conditional paths
      uses function env_scan(env,env_scanner *) defined in env.c
      uses variable current_function_decl defined in analyze.h
      uses variable AST_function_decl::scoped_labels defined in AST_defs.h
      uses function env_next(env_scanner *,const char **,void **) defined in env.c
      uses variable label_declaration::definition defined in decls.h
      uses function error_with_location(location,const char *,...) defined in errors.c
      uses variable label_declaration::firstuse defined in decls.h
      uses variable AST_id_label::loc defined in AST_defs.h
      uses variable label_declaration::used defined in decls.h
      uses variable warn_unused defined in flags.h
      uses function warning_with_location(location,const char *,...) defined in errors.c
   function push_loop(breakable_stmt) in line 171
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable AST_breakable_stmt::parent_loop defined in AST_defs.h
      uses variable current_function_decl defined in analyze.h
      uses variable AST_function_decl::current_loop defined in AST_defs.h
   function pop_loop(void) in line 177
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable current_function_decl defined in analyze.h
      uses variable AST_function_decl::current_loop defined in AST_defs.h
      uses variable AST_breakable_stmt::parent_loop defined in AST_defs.h
   function containing_switch(label) in line 183
      protection public
      33 lines of code
      1 parameters
      5 conditional paths
      uses variable current_function_decl defined in analyze.h
      uses variable AST_function_decl::current_loop defined in AST_defs.h
      uses macro definition is_switch_stmt defined in AST_types.h
      uses variable AST_breakable_stmt::parent_loop defined in AST_defs.h
      uses macro definition CAST defined in AST.h
      uses macro definition is_default_label defined in AST_types.h
      uses function error(const char *,...) defined in errors.c
      uses function error_with_location(location,const char *,...) defined in errors.c
      uses macro definition FALSE defined in bool.h
      uses variable AST_label::next_label defined in AST_defs.h
   function check_case_value(expression) in line 217
      protection public
      6 lines of code
      1 parameters
      2 conditional paths
      uses variable AST_expression::cst defined in AST_defs.h
      uses variable AST_expression::type defined in AST_defs.h
      uses variable error_type defined in types.c
      uses function type_integer(type) defined in types.c
      uses function error_with_location(location,const char *,...) defined in errors.c
      uses variable AST_expression::loc defined in AST_defs.h
   function check_case(label) in line 224
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
      uses function containing_switch(label) defined in stmt.c
      uses macro definition CAST defined in AST.h
      uses function error(const char *,...) defined in errors.c
      uses function check_case_value(expression) defined in stmt.c
   function check_default(label) in line 239
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses function containing_switch(label) defined in stmt.c
      uses function error(const char *,...) defined in errors.c
   function check_break(statement) in line 248
      protection public
      9 lines of code
      1 parameters
      1 conditional paths
      uses macro definition CAST defined in AST.h
      uses variable current_function_decl defined in analyze.h
      uses variable AST_function_decl::current_loop defined in AST_defs.h
      uses function error(const char *,...) defined in errors.c
      uses variable AST_break_stmt::parent_loop defined in AST_defs.h
   function check_continue(statement) in line 258
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
      uses variable current_function_decl defined in analyze.h
      uses variable AST_function_decl::current_loop defined in AST_defs.h
      uses macro definition CAST defined in AST.h
      uses macro definition is_switch_stmt defined in AST_types.h
      uses variable AST_breakable_stmt::parent_loop defined in AST_defs.h
      uses function error(const char *,...) defined in errors.c
      uses variable AST_continue_stmt::parent_loop defined in AST_defs.h
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cqual/cqual-0.981/src/stmt.h
module stmt.h
   function check_condition(const char *,expression) in line 26
      protection public
      7 lines of code
      2 parameters
      2 conditional paths
      uses function default_conversion(expression) defined in expr.c
      uses variable error_type defined in types.c
      uses function type_scalar(type) defined in types.c
      uses function error(const char *,...) defined in errors.c
   function check_switch(expression) in line 27
      protection public
      5 lines of code
      1 parameters
      2 conditional paths
      uses variable AST_expression::type defined in AST_defs.h
      uses variable error_type defined in types.c
      uses function type_integer(type) defined in types.c
      uses function error(const char *,...) defined in errors.c
   function check_void_return(void) in line 28
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses variable warn_return_type defined in flags.h
      uses variable error_type defined in types.c
      uses function type_void(type) defined in types.c
      uses function warning(const char *,...) defined in errors.c
   function check_return(expression) in line 29
      protection public
      15 lines of code
      1 parameters
      3 conditional paths
      uses function type_void(type) defined in types.c
      uses variable pedantic defined in flags.h
      uses variable AST_expression::type defined in AST_defs.h
      uses function warning(const char *,...) defined in errors.c
      uses function check_assignment(type,type,expression,const char *,data_declaration,const char *,int) defined in expr.c
      uses function default_conversion_for_assignment(expression) defined in expr.c
      uses macro definition NULL defined in config.h
   function check_computed_goto(expression) in line 30
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function check_conversion(type,type) defined in expr.c
      uses variable ptr_void_type defined in types.c
      uses variable AST_expression::type defined in AST_defs.h
   function lookup_label(id_label) in line 32
      protection public
      18 lines of code
      1 parameters
      3 conditional paths
      uses function env_lookup(env,const char *,bool) defined in env.c
      uses variable current_function_decl defined in analyze.h
      uses variable AST_function_decl::scoped_labels defined in AST_defs.h
      uses macro definition FALSE defined in bool.h
      uses variable label_declaration::explicitly_declared defined in decls.h
      uses variable label_declaration::containing_function defined in decls.h
      uses macro definition NULL defined in config.h
      uses function new_label_declaration(region,const char *,id_label) defined in stmt.c
      uses variable parse_region defined in c-parse.h
      uses function env_add(env,const char *,void *) defined in env.c
      uses variable AST_function_decl::base_labels defined in AST_defs.h
   function use_label(id_label) in line 33
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function lookup_label(id_label) defined in stmt.c
      uses macro definition TRUE defined in bool.h
   function define_label(id_label) in line 34
      protection public
      8 lines of code
      1 parameters
      2 conditional paths
      uses function lookup_label(id_label) defined in stmt.c
   function declare_label(id_label) in line 35
      protection public
      17 lines of code
      1 parameters
      2 conditional paths
      uses function env_lookup(env,const char *,bool) defined in env.c
      uses variable current_function_decl defined in analyze.h
      uses variable AST_function_decl::scoped_labels defined in AST_defs.h
      uses macro definition TRUE defined in bool.h
      uses function new_label_declaration(region,const char *,id_label) defined in stmt.c
      uses variable parse_region defined in c-parse.h
      uses function env_add(env,const char *,void *) defined in env.c
      uses variable label_declaration::explicitly_declared defined in decls.h
   function check_labels(void) in line 37
      protection public
      19 lines of code
      1 parameters
      4 conditional paths
      uses function env_scan(env,env_scanner *) defined in env.c
      uses variable current_function_decl defined in analyze.h
      uses variable AST_function_decl::scoped_labels defined in AST_defs.h
      uses function env_next(env_scanner *,const char **,void **) defined in env.c
      uses variable label_declaration::definition defined in decls.h
      uses function error_with_location(location,const char *,...) defined in errors.c
      uses variable label_declaration::firstuse defined in decls.h
      uses variable AST_id_label::loc defined in AST_defs.h
      uses variable label_declaration::used defined in decls.h
      uses variable warn_unused defined in flags.h
      uses function warning_with_location(location,const char *,...) defined in errors.c
   function check_case(label) in line 39
      protection public
      14 lines of code
      1 parameters
      3 conditional paths
      uses macro definition CAST defined in AST.h
      uses function error(const char *,...) defined in errors.c
   function check_default(label) in line 40
      protection public
      8 lines of code
      1 parameters
      2 conditional paths
      uses function error(const char *,...) defined in errors.c
   function check_break(statement) in line 41
      protection public
      9 lines of code
      1 parameters
      2 conditional paths
      uses macro definition CAST defined in AST.h
      uses variable current_function_decl defined in analyze.h
      uses variable AST_function_decl::current_loop defined in AST_defs.h
      uses function error(const char *,...) defined in errors.c
      uses variable AST_break_stmt::parent_loop defined in AST_defs.h
   function check_continue(statement) in line 42
      protection public
      14 lines of code
      1 parameters
      3 conditional paths
      uses variable current_function_decl defined in analyze.h
      uses variable AST_function_decl::current_loop defined in AST_defs.h
      uses macro definition CAST defined in AST.h
      uses macro definition is_switch_stmt defined in AST_types.h
      uses variable AST_breakable_stmt::parent_loop defined in AST_defs.h
      uses function error(const char *,...) defined in errors.c
      uses variable AST_continue_stmt::parent_loop defined in AST_defs.h
   function push_loop(breakable_stmt) in line 44
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable AST_breakable_stmt::parent_loop defined in AST_defs.h
      uses variable current_function_decl defined in analyze.h
      uses variable AST_function_decl::current_loop defined in AST_defs.h
   function pop_loop(void) in line 45
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable current_function_decl defined in analyze.h
      uses variable AST_function_decl::current_loop defined in AST_defs.h
      uses variable AST_breakable_stmt::parent_loop defined in AST_defs.h
   function new_label_declaration(region,const char *,id_label) in line 47
      protection public
      12 lines of code
      3 parameters
      1 conditional paths
      uses macro definition ralloc defined in regions.h
      uses variable label_declaration::name defined in decls.h
      uses variable label_declaration::explicitly_declared defined in decls.h
      uses macro definition FALSE defined in bool.h
      uses variable label_declaration::firstuse defined in decls.h
      uses variable label_declaration::definition defined in decls.h
      uses macro definition NULL defined in config.h
      uses variable label_declaration::containing_function defined in decls.h
      uses variable current_function_decl defined in analyze.h
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cqual/cqual-0.981/src/timer.c
module timer.c
   macro definition BUFSIZE in line 48
      protection public
   macro definition timerisset in line 90
      protection public
   macro definition timerclear in line 93
      protection public
   macro definition timeradd in line 96
      protection public
   macro definition timersub in line 108
      protection public
   function start_timer(timer *) in line 120
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses macro definition timerisset defined in timer.c
      uses variable timer::start defined in timer.h
      uses macro definition insistnot defined in utils.h
      uses macro definition NULL defined in config.h
   function end_timer(timer *) in line 128
      protection public
      11 lines of code
      1 parameters
      1 conditional paths
      uses macro definition insistnot defined in utils.h
      uses macro definition NULL defined in config.h
      uses macro definition timerisset defined in timer.c
      uses variable timer::start defined in timer.h
      uses macro definition timersub defined in timer.c
      uses macro definition timeradd defined in timer.c
      uses variable timer::elapsed defined in timer.h
      uses macro definition timerclear defined in timer.c
   function timer_to_ascii(timer *) in line 141
      protection public
      11 lines of code
      1 parameters
      1 conditional paths
      uses macro definition BUFSIZE defined in timer.c
      uses variable timer::elapsed defined in timer.h
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cqual/cqual-0.981/src/timer.h
module timer.h
   typedef timer in line 40
      protection public
   function start_timer(timer *) in line 46
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses macro definition timerisset defined in timer.c
      uses variable timer::start defined in timer.h
      uses macro definition insistnot defined in utils.h
      uses macro definition NULL defined in config.h
   function end_timer(timer *) in line 50
      protection public
      11 lines of code
      1 parameters
      1 conditional paths
      uses macro definition insistnot defined in utils.h
      uses macro definition NULL defined in config.h
      uses macro definition timerisset defined in timer.c
      uses variable timer::start defined in timer.h
      uses macro definition timersub defined in timer.c
      uses macro definition timeradd defined in timer.c
      uses variable timer::elapsed defined in timer.h
      uses macro definition timerclear defined in timer.c
   function timer_to_ascii(timer *) in line 53
      protection public
      11 lines of code
      1 parameters
      1 conditional paths
      uses macro definition BUFSIZE defined in timer.c
      uses variable timer::elapsed defined in timer.h
   variable timer::elapsed in line 55
      protection public
   variable timer::start in line 55
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cqual/cqual-0.981/src/types.c
module types.c
   macro definition Q in line 444
      protection public
   macro definition Q in line 452
      protection public
   macro definition Q in line 460
      protection public
   macro definition UNNAMED_STRUCT_PREFIX in line 1386
      protection public
   macro definition Q in line 1753
      protection public
   variable types_region in line 101
      protection public
   variable primitive_types in line 103
      protection public
   variable complex_types in line 104
      protection public
   variable float_type in line 106
      protection public
   variable double_type in line 106
      protection public
   variable long_double_type in line 106
      protection public
   variable int_type in line 107
      protection public
   variable unsigned_int_type in line 107
      protection public
   variable long_type in line 107
      protection public
   variable unsigned_long_type in line 107
      protection public
   variable long_long_type in line 108
      protection public
   variable unsigned_long_long_type in line 108
      protection public
   variable short_type in line 108
      protection public
   variable unsigned_short_type in line 108
      protection public
   variable char_type in line 109
      protection public
   variable char_array_type in line 109
      protection public
   variable wchar_type in line 109
      protection public
   variable wchar_array_type in line 109
      protection public
   variable unsigned_char_type in line 110
      protection public
   variable signed_char_type in line 110
      protection public
   variable void_type in line 110
      protection public
   variable ptr_void_type in line 110
      protection public
   variable size_t_type in line 111
      protection public
   variable ptrdiff_t_type in line 111
      protection public
   variable intptr_type in line 111
      protection public
   variable int2_type in line 112
      protection public
   variable uint2_type in line 112
      protection public
   variable int4_type in line 112
      protection public
   variable uint4_type in line 112
      protection public
   variable int8_type in line 112
      protection public
   variable uint8_type in line 112
      protection public
   variable error_type in line 113
      protection public
   function copy_user_qual_list(user_qual_list) in line 115
      protection public
      5 lines of code
      1 parameters
      2 conditional paths
      uses macro definition NULL defined in config.h
      uses function new_user_qual_list(user_qual,user_qual_list) defined in types.c
      uses variable user_qual_list::qual defined in types.h
      uses variable user_qual_list::next defined in types.h
   function copy_type(type) in line 117
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses macro definition ralloc defined in regions.h
      uses variable types_region defined in types.c
      uses variable type::user_quals defined in types.c
      uses function copy_user_qual_list(user_qual_list) defined in types.c
   function new_type(int) in line 125
      protection public
      10 lines of code
      1 parameters
      1 conditional paths
      uses macro definition ralloc defined in regions.h
      uses variable types_region defined in types.c
      uses variable type::kind defined in types.c
      uses variable type::user_quals defined in types.c
   function make_complex_type(type) in line 138
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses variable type::kind defined in types.c
      uses enumvalue type::tk_primitive defined in types.c
      uses variable complex_types defined in types.c
      uses variable type::u defined in types.c
      uses variable type::primitive defined in types.c
   function make_base_type(type) in line 147
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses variable type::kind defined in types.c
      uses enumvalue type::tk_complex defined in types.c
      uses variable primitive_types defined in types.c
      uses variable type::u defined in types.c
      uses variable type::primitive defined in types.c
   function make_qualified_type(type,type_quals,user_qual_list) in line 157
      protection public
      18 lines of code
      3 parameters
      1 conditional paths
      uses variable type::kind defined in types.c
      uses enumvalue type::tk_array defined in types.c
      uses function make_array_type(type,expression) defined in types.c
      uses function make_qualified_type(type,type_quals,user_qual_list) defined in types.c
      uses variable type::u defined in types.c
      uses variable type::array defined in types.c
      uses variable type::qualifiers defined in types.c
      uses variable type::user_quals defined in types.c
      uses function copy_type(type) defined in types.c
   function make_pointer_type(type) in line 177
      protection public
      11 lines of code
      1 parameters
      1 conditional paths
      uses function new_type(int) defined in types.c
      uses enumvalue type::tk_pointer defined in types.c
      uses variable type::u defined in types.c
      uses variable type::pointsto defined in types.c
      uses variable type::size defined in types.c
      uses variable type::alignment defined in types.c
   function make_array_type(type,expression) in line 190
      protection public
      10 lines of code
      2 parameters
      1 conditional paths
      uses function new_type(int) defined in types.c
      uses enumvalue type::tk_array defined in types.c
      uses variable type::u defined in types.c
      uses variable type::array defined in types.c
      uses variable type::size defined in types.c
      uses function cval_intcompare(cval,cval) defined in cval.c
      uses variable cval_zero defined in cval.c
   function make_function_type(type,typelist,bool,type_quals,user_qual_list,bool) in line 204
      protection public
      15 lines of code
      6 parameters
      1 conditional paths
      uses function new_type(int) defined in types.c
      uses enumvalue type::tk_function defined in types.c
      uses variable type::u defined in types.c
      uses variable type::fn defined in types.c
      uses variable type::argtypes defined in types.c
      uses variable type::varargs defined in types.c
      uses variable type::varargs_quals defined in types.c
      uses variable type::varargs_user_quals defined in types.c
      uses variable type::oldstyle defined in types.c
      uses variable type::size defined in types.c
      uses variable type::alignment defined in types.c
   function make_tagged_type(tag_declaration) in line 221
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses function new_type(int) defined in types.c
      uses enumvalue type::tk_tagged defined in types.c
      uses variable type::u defined in types.c
      uses variable type::tag defined in types.c
   function make_primitive(int,int,int) in line 232
      protection public
      17 lines of code
      3 parameters
      1 conditional paths
      uses function new_type(int) defined in types.c
      uses enumvalue type::tk_primitive defined in types.c
      uses variable type::u defined in types.c
      uses variable type::primitive defined in types.c
      uses variable type::size defined in types.c
      uses variable type::alignment defined in types.c
      uses variable primitive_types defined in types.c
      uses enumvalue type::tk_complex defined in types.c
      uses variable complex_types defined in types.c
   function lookup_primitive(int,int,int,bool) in line 250
      protection public
      11 lines of code
      4 parameters
      3 conditional paths
      uses enumvalue type::tp_signed_char defined in types.c
      uses enumvalue type::tp_first_floating defined in types.c
      uses variable primitive_types defined in types.c
      uses variable type::size defined in types.c
      uses function type_unsigned(type) defined in types.c
      uses function make_primitive(int,int,int) defined in types.c
      uses variable type::alignment defined in types.c
   function new_user_qual_list(user_qual,user_qual_list) in line 262
      protection public
      8 lines of code
      2 parameters
      1 conditional paths
      uses macro definition ralloc defined in regions.h
      uses variable parse_region defined in c-parse.h
      uses variable user_qual_list::qual defined in types.h
      uses variable user_qual_list::next defined in types.h
   function member_user_qual_list(user_qual_list,char *) in line 278
      protection public
      7 lines of code
      2 parameters
      3 conditional paths
      uses variable user_qual_list::next defined in types.h
      uses variable user_qual_list::qual defined in types.h
      uses variable AST_user_qual::cstring defined in AST_defs.h
      uses variable cstring::data defined in cstring.h
      uses macro definition TRUE defined in bool.h
      uses macro definition FALSE defined in bool.h
   function union_user_qual_list(user_qual_list,user_qual_list) in line 286
      protection public
      17 lines of code
      2 parameters
      5 conditional paths
      uses macro definition NULL defined in config.h
      uses variable user_qual_list::next defined in types.h
      uses function member_user_qual_list(user_qual_list,char *) defined in types.c
      uses variable user_qual_list::qual defined in types.h
      uses variable AST_user_qual::cstring defined in AST_defs.h
      uses variable cstring::data defined in cstring.h
      uses function new_user_qual_list(user_qual,user_qual_list) defined in types.c
   function type_for_size(int,bool) in line 306
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
      uses function lookup_primitive(int,int,int,bool) defined in types.c
      uses enumvalue type::tp_error defined in types.c
      uses variable type::size defined in types.c
      uses variable type::u defined in types.c
      uses variable type::primitive defined in types.c
   function type_for_cval(cval,bool) in line 313
      protection public
      11 lines of code
      2 parameters
      1 conditional paths
      uses enumvalue type::tp_signed_char defined in types.c
      uses enumvalue type::tp_first_floating defined in types.c
      uses function type_unsigned(type) defined in types.c
      uses variable primitive_types defined in types.c
      uses function cval_inrange(cval,type) defined in cval.c
      uses macro definition NULL defined in config.h
   function init_types(void) in line 325
      protection public
      57 lines of code
      1 parameters
      1 conditional paths
      uses variable types_region defined in types.c
      uses function newregion(void) defined in regions.c
      uses variable float_type defined in types.c
      uses function make_primitive(int,int,int) defined in types.c
      uses enumvalue type::tp_float defined in types.c
      uses variable double_type defined in types.c
      uses enumvalue type::tp_double defined in types.c
      uses variable long_double_type defined in types.c
      uses enumvalue type::tp_long_double defined in types.c
      uses variable short_type defined in types.c
      uses enumvalue type::tp_short defined in types.c
      uses variable unsigned_short_type defined in types.c
      uses enumvalue type::tp_unsigned_short defined in types.c
      uses variable int_type defined in types.c
      uses enumvalue type::tp_int defined in types.c
      uses variable unsigned_int_type defined in types.c
      uses enumvalue type::tp_unsigned_int defined in types.c
      uses variable long_type defined in types.c
      uses enumvalue type::tp_long defined in types.c
      uses variable unsigned_long_type defined in types.c
      uses enumvalue type::tp_unsigned_long defined in types.c
      uses variable long_long_type defined in types.c
      uses enumvalue type::tp_long_long defined in types.c
      uses variable unsigned_long_long_type defined in types.c
      uses enumvalue type::tp_unsigned_long_long defined in types.c
      uses variable signed_char_type defined in types.c
      uses enumvalue type::tp_signed_char defined in types.c
      uses variable unsigned_char_type defined in types.c
      uses enumvalue type::tp_unsigned_char defined in types.c
      uses variable char_type defined in types.c
      uses enumvalue type::tp_char defined in types.c
      uses macro definition __attribute__ defined in compiler.h
      uses variable int2_type defined in types.c
      uses function lookup_primitive(int,int,int,bool) defined in types.c
      uses enumvalue type::tp_int2 defined in types.c
      uses macro definition FALSE defined in bool.h
      uses variable uint2_type defined in types.c
      uses enumvalue type::tp_uint2 defined in types.c
      uses macro definition TRUE defined in bool.h
      uses variable int4_type defined in types.c
      uses enumvalue type::tp_int4 defined in types.c
      uses variable uint4_type defined in types.c
      uses enumvalue type::tp_uint4 defined in types.c
      uses variable int8_type defined in types.c
      uses enumvalue type::tp_int8 defined in types.c
      uses variable uint8_type defined in types.c
      uses enumvalue type::tp_uint8 defined in types.c
      uses variable char_array_type defined in types.c
      uses function make_array_type(type,expression) defined in types.c
      uses macro definition NULL defined in config.h
      uses variable error_type defined in types.c
      uses function new_type(int) defined in types.c
      uses enumvalue type::tk_error defined in types.c
      uses variable type::size defined in types.c
      uses variable type::alignment defined in types.c
      uses variable void_type defined in types.c
      uses enumvalue type::tk_void defined in types.c
      uses variable ptr_void_type defined in types.c
      uses function make_pointer_type(type) defined in types.c
      uses variable wchar_type defined in types.c
      uses function type_for_size(int,bool) defined in types.c
      uses variable wchar_array_type defined in types.c
      uses variable size_t_type defined in types.c
      uses variable ptrdiff_t_type defined in types.c
      uses variable intptr_type defined in types.c
   function new_typelist(region) in line 395
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses macro definition ralloc defined in regions.h
      uses variable typelist::r defined in types.c
      uses variable typelist::first defined in types.c
      uses macro definition NULL defined in config.h
   function typelist_append(typelist,type) in line 403
      protection public
      11 lines of code
      2 parameters
      1 conditional paths
      uses macro definition ralloc defined in regions.h
      uses variable typelist::r defined in types.c
      uses variable typelist_element::t defined in types.c
      uses variable typelist::first defined in types.c
      uses variable typelist_element::next defined in types.c
   function empty_typelist(typelist) in line 415
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable typelist::first defined in types.c
      uses macro definition NULL defined in config.h
   function typelist_scan(typelist,typelist_scanner *) in line 420
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses variable typelist::first defined in types.c
   function typelist_next(typelist_scanner *) in line 425
      protection public
      10 lines of code
      1 parameters
      1 conditional paths
      uses variable typelist_element::t defined in types.c
      uses macro definition NULL defined in config.h
      uses variable typelist_element::next defined in types.c
   function type_qualifiers(type) in line 436
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses variable typelist_element::t defined in types.c
      uses variable type::kind defined in types.c
      uses enumvalue type::tk_array defined in types.c
      uses variable type::u defined in types.c
      uses variable type::array defined in types.c
      uses variable type::qualifiers defined in types.c
   function type_transparent(type) in line 468
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function type_qualifiers(type) defined in types.c
      uses variable typelist_element::t defined in types.c
      uses enumvalue transparent_qualifier defined in types.h
   function type_readonly(type) in line 473
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable typelist_element::t defined in types.c
      uses function type_tagged(type) defined in types.c
      uses function type_tag(type) defined in types.c
      uses variable tag_declaration::fields_const defined in decls.h
   function type_user_quals(type) in line 478
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable typelist_element::t defined in types.c
      uses variable type::user_quals defined in types.c
   function empty_user_qual_list(user_qual_list) in line 483
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses macro definition NULL defined in config.h
   function type_integral(type) in line 488
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable typelist_element::t defined in types.c
      uses variable type::kind defined in types.c
      uses enumvalue type::tk_primitive defined in types.c
      uses variable type::u defined in types.c
      uses variable type::primitive defined in types.c
      uses enumvalue type::tp_first_floating defined in types.c
   function type_smallerthanint(type) in line 493
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function type_integral(type) defined in types.c
      uses variable typelist_element::t defined in types.c
      uses variable type::size defined in types.c
      uses variable int_type defined in types.c
   function type_unsigned(type) in line 498
      protection public
      12 lines of code
      1 parameters
      1 conditional paths
      uses variable typelist_element::t defined in types.c
      uses variable type::kind defined in types.c
      uses enumvalue type::tk_primitive defined in types.c
      uses variable type::u defined in types.c
      uses variable type::primitive defined in types.c
      uses enumvalue type::tp_unsigned_char defined in types.c
      uses enumvalue type::tp_char defined in types.c
      uses enumvalue type::tp_unsigned_short defined in types.c
      uses enumvalue type::tp_unsigned_int defined in types.c
      uses enumvalue type::tp_unsigned_long defined in types.c
      uses enumvalue type::tp_unsigned_long_long defined in types.c
   function type_floating(type) in line 511
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable typelist_element::t defined in types.c
      uses variable type::kind defined in types.c
      uses enumvalue type::tk_primitive defined in types.c
      uses variable type::u defined in types.c
      uses variable type::primitive defined in types.c
      uses enumvalue type::tp_first_floating defined in types.c
   function type_atomic(type) in line 516
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable typelist_element::t defined in types.c
      uses variable type::kind defined in types.c
      uses enumvalue type::tk_primitive defined in types.c
      uses enumvalue type::tk_complex defined in types.c
      uses enumvalue type::tk_void defined in types.c
   function type_plain_char(type) in line 522
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable typelist_element::t defined in types.c
      uses variable type::kind defined in types.c
      uses enumvalue type::tk_primitive defined in types.c
      uses variable type::u defined in types.c
      uses variable type::primitive defined in types.c
      uses enumvalue type::tp_char defined in types.c
   function type_signed_char(type) in line 527
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable typelist_element::t defined in types.c
      uses variable type::kind defined in types.c
      uses enumvalue type::tk_primitive defined in types.c
      uses variable type::u defined in types.c
      uses variable type::primitive defined in types.c
      uses enumvalue type::tp_signed_char defined in types.c
   function type_unsigned_char(type) in line 532
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable typelist_element::t defined in types.c
      uses variable type::kind defined in types.c
      uses enumvalue type::tk_primitive defined in types.c
      uses variable type::u defined in types.c
      uses variable type::primitive defined in types.c
      uses enumvalue type::tp_unsigned_char defined in types.c
   function type_short(type) in line 537
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable typelist_element::t defined in types.c
      uses variable type::kind defined in types.c
      uses enumvalue type::tk_primitive defined in types.c
      uses variable type::u defined in types.c
      uses variable type::primitive defined in types.c
      uses enumvalue type::tp_short defined in types.c
   function type_unsigned_short(type) in line 542
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable typelist_element::t defined in types.c
      uses variable type::kind defined in types.c
      uses enumvalue type::tk_primitive defined in types.c
      uses variable type::u defined in types.c
      uses variable type::primitive defined in types.c
      uses enumvalue type::tp_unsigned_short defined in types.c
   function type_int(type) in line 547
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable typelist_element::t defined in types.c
      uses variable type::kind defined in types.c
      uses enumvalue type::tk_primitive defined in types.c
      uses variable type::u defined in types.c
      uses variable type::primitive defined in types.c
      uses enumvalue type::tp_int defined in types.c
   function type_unsigned_int(type) in line 552
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable typelist_element::t defined in types.c
      uses variable type::kind defined in types.c
      uses enumvalue type::tk_primitive defined in types.c
      uses variable type::u defined in types.c
      uses variable type::primitive defined in types.c
      uses enumvalue type::tp_unsigned_int defined in types.c
   function type_long(type) in line 557
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable typelist_element::t defined in types.c
      uses variable type::kind defined in types.c
      uses enumvalue type::tk_primitive defined in types.c
      uses variable type::u defined in types.c
      uses variable type::primitive defined in types.c
      uses enumvalue type::tp_long defined in types.c
   function type_unsigned_long(type) in line 562
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable typelist_element::t defined in types.c
      uses variable type::kind defined in types.c
      uses enumvalue type::tk_primitive defined in types.c
      uses variable type::u defined in types.c
      uses variable type::primitive defined in types.c
      uses enumvalue type::tp_unsigned_long defined in types.c
   function type_long_long(type) in line 567
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable typelist_element::t defined in types.c
      uses variable type::kind defined in types.c
      uses enumvalue type::tk_primitive defined in types.c
      uses variable type::u defined in types.c
      uses variable type::primitive defined in types.c
      uses enumvalue type::tp_long_long defined in types.c
   function type_unsigned_long_long(type) in line 572
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable typelist_element::t defined in types.c
      uses variable type::kind defined in types.c
      uses enumvalue type::tk_primitive defined in types.c
      uses variable type::u defined in types.c
      uses variable type::primitive defined in types.c
      uses enumvalue type::tp_unsigned_long_long defined in types.c
   function type_float(type) in line 577
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable typelist_element::t defined in types.c
      uses variable type::kind defined in types.c
      uses enumvalue type::tk_primitive defined in types.c
      uses variable type::u defined in types.c
      uses variable type::primitive defined in types.c
      uses enumvalue type::tp_float defined in types.c
   function type_double(type) in line 582
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable typelist_element::t defined in types.c
      uses variable type::kind defined in types.c
      uses enumvalue type::tk_primitive defined in types.c
      uses variable type::u defined in types.c
      uses variable type::primitive defined in types.c
      uses enumvalue type::tp_double defined in types.c
   function type_long_double(type) in line 587
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable typelist_element::t defined in types.c
      uses variable type::kind defined in types.c
      uses enumvalue type::tk_primitive defined in types.c
      uses variable type::u defined in types.c
      uses variable type::primitive defined in types.c
      uses enumvalue type::tp_long_double defined in types.c
   function type_char(type) in line 592
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses variable typelist_element::t defined in types.c
      uses variable type::kind defined in types.c
      uses enumvalue type::tk_primitive defined in types.c
      uses variable type::u defined in types.c
      uses variable type::primitive defined in types.c
      uses enumvalue type::tp_char defined in types.c
      uses enumvalue type::tp_unsigned_char defined in types.c
      uses enumvalue type::tp_signed_char defined in types.c
   function type_void(type) in line 599
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable typelist_element::t defined in types.c
      uses variable type::kind defined in types.c
      uses enumvalue type::tk_void defined in types.c
   function type_function(type) in line 604
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable typelist_element::t defined in types.c
      uses variable type::kind defined in types.c
      uses enumvalue type::tk_function defined in types.c
   function type_array(type) in line 609
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable typelist_element::t defined in types.c
      uses variable type::kind defined in types.c
      uses enumvalue type::tk_array defined in types.c
   function type_pointer(type) in line 614
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable typelist_element::t defined in types.c
      uses variable type::kind defined in types.c
      uses enumvalue type::tk_pointer defined in types.c
   function type_complex(type) in line 619
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable typelist_element::t defined in types.c
      uses variable type::kind defined in types.c
      uses enumvalue type::tk_complex defined in types.c
   function type_enum(type) in line 624
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable typelist_element::t defined in types.c
      uses variable type::kind defined in types.c
      uses enumvalue type::tk_tagged defined in types.c
      uses variable type::u defined in types.c
      uses variable type::tag defined in types.c
      uses variable tag_declaration::kind defined in decls.h
      uses enumvalue kind_enum_ref defined in AST_types.h
   function type_tagged(type) in line 629
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable typelist_element::t defined in types.c
      uses variable type::kind defined in types.c
      uses enumvalue type::tk_tagged defined in types.c
   function type_struct(type) in line 634
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable typelist_element::t defined in types.c
      uses variable type::kind defined in types.c
      uses enumvalue type::tk_tagged defined in types.c
      uses variable type::u defined in types.c
      uses variable type::tag defined in types.c
      uses variable tag_declaration::kind defined in decls.h
      uses enumvalue kind_struct_ref defined in AST_types.h
   function type_union(type) in line 639
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable typelist_element::t defined in types.c
      uses variable type::kind defined in types.c
      uses enumvalue type::tk_tagged defined in types.c
      uses variable type::u defined in types.c
      uses variable type::tag defined in types.c
      uses variable tag_declaration::kind defined in decls.h
      uses enumvalue kind_union_ref defined in AST_types.h
   function type_function_return_type(type) in line 644
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable typelist_element::t defined in types.c
      uses variable type::kind defined in types.c
      uses enumvalue type::tk_function defined in types.c
      uses variable type::u defined in types.c
      uses variable type::fn defined in types.c
   function type_function_arguments(type) in line 650
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable typelist_element::t defined in types.c
      uses variable type::kind defined in types.c
      uses enumvalue type::tk_function defined in types.c
      uses variable type::u defined in types.c
      uses variable type::fn defined in types.c
   function type_function_varargs(type) in line 656
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable typelist_element::t defined in types.c
      uses variable type::kind defined in types.c
      uses enumvalue type::tk_function defined in types.c
      uses variable type::u defined in types.c
      uses variable type::fn defined in types.c
   function type_function_varargs_quals(type) in line 662
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable typelist_element::t defined in types.c
      uses variable type::kind defined in types.c
      uses enumvalue type::tk_function defined in types.c
      uses variable type::u defined in types.c
      uses variable type::fn defined in types.c
   function type_function_varargs_user_quals(type) in line 668
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable typelist_element::t defined in types.c
      uses variable type::kind defined in types.c
      uses enumvalue type::tk_function defined in types.c
      uses variable type::u defined in types.c
      uses variable type::fn defined in types.c
   function type_function_oldstyle(type) in line 674
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable typelist_element::t defined in types.c
      uses variable type::kind defined in types.c
      uses enumvalue type::tk_function defined in types.c
      uses variable type::u defined in types.c
      uses variable type::fn defined in types.c
   function type_points_to(type) in line 680
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable typelist_element::t defined in types.c
      uses variable type::kind defined in types.c
      uses enumvalue type::tk_pointer defined in types.c
      uses variable type::u defined in types.c
      uses variable type::pointsto defined in types.c
   function type_array_of(type) in line 686
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable typelist_element::t defined in types.c
      uses variable type::kind defined in types.c
      uses enumvalue type::tk_array defined in types.c
      uses variable type::u defined in types.c
      uses variable type::array defined in types.c
   function type_array_of_base(type) in line 692
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses variable typelist_element::t defined in types.c
      uses variable type::kind defined in types.c
      uses enumvalue type::tk_array defined in types.c
      uses variable type::u defined in types.c
      uses variable type::array defined in types.c
   function type_array_size(type) in line 700
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable typelist_element::t defined in types.c
      uses variable type::kind defined in types.c
      uses enumvalue type::tk_array defined in types.c
      uses variable type::u defined in types.c
      uses variable type::array defined in types.c
   function type_tag(type) in line 706
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable typelist_element::t defined in types.c
      uses variable type::kind defined in types.c
      uses enumvalue type::tk_tagged defined in types.c
      uses variable type::u defined in types.c
      uses variable type::tag defined in types.c
   function type_incomplete(type) in line 712
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses variable typelist_element::t defined in types.c
      uses variable type::kind defined in types.c
      uses enumvalue type::tk_void defined in types.c
      uses enumvalue type::tk_tagged defined in types.c
      uses variable type::u defined in types.c
      uses variable type::tag defined in types.c
      uses variable tag_declaration::defined defined in decls.h
      uses enumvalue type::tk_array defined in types.c
      uses function type_incomplete(type) defined in types.c
      uses variable type::array defined in types.c
   function type_lists_equal(typelist,typelist) in line 721
      protection public
      20 lines of code
      2 parameters
      5 conditional paths
      uses variable typelist::first defined in types.c
      uses macro definition TRUE defined in bool.h
      uses macro definition FALSE defined in bool.h
      uses function type_equal(type,type) defined in types.c
      uses variable typelist_element::t defined in types.c
      uses variable typelist_element::next defined in types.c
   function function_equal(type,type) in line 743
      protection public
      13 lines of code
      2 parameters
      3 conditional paths
      uses function type_equal(type,type) defined in types.c
      uses variable type::u defined in types.c
      uses variable type::fn defined in types.c
      uses macro definition FALSE defined in bool.h
      uses function type_lists_equal(typelist,typelist) defined in types.c
   function type_equal(type,type) in line 757
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses variable type::qualifiers defined in types.c
      uses function type_equal_unqualified(type,type) defined in types.c
   function type_equal_unqualified(type,type) in line 762
      protection public
      40 lines of code
      2 parameters
      1 conditional paths
      uses variable error_type defined in types.c
      uses macro definition TRUE defined in bool.h
      uses variable type::kind defined in types.c
      uses macro definition FALSE defined in bool.h
      uses enumvalue type::tk_primitive defined in types.c
      uses enumvalue type::tk_complex defined in types.c
      uses variable type::u defined in types.c
      uses variable type::primitive defined in types.c
      uses enumvalue type::tk_void defined in types.c
      uses enumvalue type::tk_tagged defined in types.c
      uses variable type::tag defined in types.c
      uses enumvalue type::tk_pointer defined in types.c
      uses function type_equal(type,type) defined in types.c
      uses variable type::pointsto defined in types.c
      uses enumvalue type::tk_function defined in types.c
      uses function function_equal(type,type) defined in types.c
      uses enumvalue type::tk_array defined in types.c
      uses variable type::array defined in types.c
      uses macro definition NULL defined in config.h
      uses function cval_intcompare(cval,cval) defined in cval.c
      uses variable AST_known_cst::cval defined in AST_defs.h
   function type_self_promoting(type) in line 804
      protection public
      15 lines of code
      1 parameters
      1 conditional paths
      uses variable typelist_element::t defined in types.c
      uses variable type::kind defined in types.c
      uses enumvalue type::tk_primitive defined in types.c
      uses macro definition TRUE defined in bool.h
      uses variable type::u defined in types.c
      uses variable type::primitive defined in types.c
      uses enumvalue type::tp_float defined in types.c
      uses enumvalue type::tp_char defined in types.c
      uses enumvalue type::tp_unsigned_char defined in types.c
      uses enumvalue type::tp_signed_char defined in types.c
      uses enumvalue type::tp_short defined in types.c
      uses enumvalue type::tp_unsigned_short defined in types.c
      uses macro definition FALSE defined in bool.h
   function self_promoting_args(type) in line 823
      protection public
      17 lines of code
      1 parameters
      1 conditional paths
      uses function type_function_varargs(type) defined in types.c
      uses macro definition FALSE defined in bool.h
      uses function type_function_oldstyle(type) defined in types.c
      uses macro definition TRUE defined in bool.h
      uses function type_function_arguments(type) defined in types.c
      uses variable typelist_element::next defined in types.c
      uses function type_self_promoting(type) defined in types.c
      uses variable typelist_element::t defined in types.c
   function weird_parameter_match(type,type) in line 843
      protection public
      17 lines of code
      2 parameters
      4 conditional paths
      uses function type_union(type) defined in types.c
      uses function type_tag(type) defined in types.c
      uses variable tag_declaration::transparent_union defined in decls.h
      uses function type_size_cc(type) defined in types.c
      uses function type_size(type) defined in types.c
      uses variable tag_declaration::fieldlist defined in decls.h
      uses variable Field::next defined in qtype.c
      uses function type_compatible(type,type) defined in types.c
      uses macro definition TRUE defined in bool.h
      uses macro definition FALSE defined in bool.h
   function weird_common_parameter(type,type) in line 861
      protection public
      13 lines of code
      2 parameters
      3 conditional paths
      uses function weird_parameter_match(type,type) defined in types.c
      uses variable pedantic defined in flags.h
      uses function pedwarn(const char *,...) defined in errors.c
      uses macro definition NULL defined in config.h
   function type_lists_compatible(typelist,typelist) in line 878
      protection public
      31 lines of code
      2 parameters
      7 conditional paths
      uses variable typelist::first defined in types.c
      uses function type_compatible_unqualified(type,type) defined in types.c
      uses variable typelist_element::t defined in types.c
      uses function weird_parameter_match(type,type) defined in types.c
      uses variable typelist_element::next defined in types.c
   function function_compatible(type,type) in line 916
      protection public
      49 lines of code
      2 parameters
      9 conditional paths
      uses function type_compatible(type,type) defined in types.c
      uses variable type::u defined in types.c
      uses variable type::fn defined in types.c
      uses function self_promoting_args(type) defined in types.c
      uses function f1(char *) defined in taint2.c
      uses function type_lists_compatible(typelist,typelist) defined in types.c
      uses function f2(char *) defined in taint2.c
   function type_compatible_unqualified(type,type) in line 966
      protection public
      40 lines of code
      2 parameters
      1 conditional paths
      uses variable error_type defined in types.c
      uses variable type::kind defined in types.c
      uses enumvalue type::tk_primitive defined in types.c
      uses enumvalue type::tk_complex defined in types.c
      uses variable type::u defined in types.c
      uses variable type::primitive defined in types.c
      uses enumvalue type::tk_void defined in types.c
      uses enumvalue type::tk_tagged defined in types.c
      uses variable type::tag defined in types.c
      uses enumvalue type::tk_pointer defined in types.c
      uses function type_compatible(type,type) defined in types.c
      uses variable type::pointsto defined in types.c
      uses enumvalue type::tk_function defined in types.c
      uses function function_compatible(type,type) defined in types.c
      uses enumvalue type::tk_array defined in types.c
      uses variable type::array defined in types.c
      uses macro definition NULL defined in config.h
      uses function cval_intcompare(cval,cval) defined in cval.c
      uses variable AST_known_cst::cval defined in AST_defs.h
   function type_compatible(type,type) in line 1007
      protection public
      11 lines of code
      2 parameters
      1 conditional paths
      uses variable type::qualifiers defined in types.c
      uses function type_compatible_unqualified(type,type) defined in types.c
   function qualify_type1(type,type) in line 1019
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses function make_qualified_type(type,type_quals,user_qual_list) defined in types.c
      uses variable typelist_element::t defined in types.c
      uses function type_qualifiers(type) defined in types.c
      uses function type_user_quals(type) defined in types.c
   function qualify_type2(type,type,type) in line 1025
      protection public
      6 lines of code
      3 parameters
      1 conditional paths
      uses function make_qualified_type(type,type_quals,user_qual_list) defined in types.c
      uses variable typelist_element::t defined in types.c
      uses function type_qualifiers(type) defined in types.c
      uses function union_user_qual_list(user_qual_list,user_qual_list) defined in types.c
      uses variable type::user_quals defined in types.c
   function align_type(type,int) in line 1032
      protection public
      8 lines of code
      2 parameters
      1 conditional paths
      uses function copy_type(type) defined in types.c
      uses variable typelist_element::t defined in types.c
      uses variable type::alignment defined in types.c
   function common_primitive_type(type,type) in line 1041
      protection public
      39 lines of code
      2 parameters
      5 conditional paths
      uses variable type::u defined in types.c
      uses variable type::primitive defined in types.c
      uses enumvalue type::tp_first_floating defined in types.c
      uses variable type::size defined in types.c
      uses enumvalue type::tp_char defined in types.c
      uses function type_unsigned(type) defined in types.c
      uses variable primitive_types defined in types.c
      uses function make_unsigned_type(type) defined in types.c
   function common_type(type,type) in line 1088
      protection public
      147 lines of code
      2 parameters
      1 conditional paths
      uses variable error_type defined in types.c
      uses function type_enum(type) defined in types.c
      uses function type_equal_unqualified(type,type) defined in types.c
      uses function qualify_type2(type,type,type) defined in types.c
      uses function qualify_type1(type,type) defined in types.c
      uses function type_for_size(int,bool) defined in types.c
      uses function type_size(type) defined in types.c
      uses macro definition TRUE defined in bool.h
      uses function type_complex(type) defined in types.c
      uses function common_primitive_type(type,type) defined in types.c
      uses variable type::kind defined in types.c
      uses enumvalue type::tk_primitive defined in types.c
      uses enumvalue type::tk_complex defined in types.c
      uses variable complex_types defined in types.c
      uses variable primitive_types defined in types.c
      uses enumvalue type::tk_void defined in types.c
      uses enumvalue type::tk_tagged defined in types.c
      uses enumvalue type::tk_pointer defined in types.c
      uses function make_pointer_type(type) defined in types.c
      uses function common_type(type,type) defined in types.c
      uses variable type::u defined in types.c
      uses variable type::pointsto defined in types.c
      uses enumvalue type::tk_array defined in types.c
      uses variable type::array defined in types.c
      uses function make_array_type(type,expression) defined in types.c
      uses enumvalue type::tk_function defined in types.c
      uses variable type::fn defined in types.c
      uses variable type::oldstyle defined in types.c
      uses variable type::varargs defined in types.c
      uses variable type::varargs_quals defined in types.c
      uses variable type::varargs_user_quals defined in types.c
      uses macro definition NULL defined in config.h
      uses macro definition FALSE defined in bool.h
      uses enumvalue no_qualifiers defined in types.h
      uses function new_typelist(region) defined in types.c
      uses function union_user_qual_list(user_qual_list,user_qual_list) defined in types.c
      uses function weird_common_parameter(type,type) defined in types.c
      uses variable typelist_element::t defined in types.c
      uses function typelist_append(typelist,type) defined in types.c
      uses variable typelist_element::next defined in types.c
      uses function make_function_type(type,typelist,bool,type_quals,user_qual_list,bool) defined in types.c
   function type_base(type) in line 1237
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses variable typelist_element::t defined in types.c
      uses variable type::kind defined in types.c
      uses enumvalue type::tk_array defined in types.c
      uses variable type::u defined in types.c
      uses variable type::array defined in types.c
   function type_integer(type) in line 1245
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function type_integral(type) defined in types.c
      uses variable typelist_element::t defined in types.c
      uses function type_enum(type) defined in types.c
   function type_real(type) in line 1250
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function type_integer(type) defined in types.c
      uses variable typelist_element::t defined in types.c
      uses function type_floating(type) defined in types.c
   function type_arithmetic(type) in line 1255
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function type_real(type) defined in types.c
      uses variable typelist_element::t defined in types.c
      uses function type_complex(type) defined in types.c
   function type_scalar(type) in line 1260
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function type_arithmetic(type) defined in types.c
      uses variable typelist_element::t defined in types.c
      uses function type_pointer(type) defined in types.c
   function type_aggregate(type) in line 1265
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function type_struct(type) defined in types.c
      uses variable typelist_element::t defined in types.c
      uses function type_union(type) defined in types.c
   function make_unsigned_type(type) in line 1270
      protection public
      18 lines of code
      1 parameters
      1 conditional paths
      uses variable typelist_element::t defined in types.c
      uses variable type::kind defined in types.c
      uses enumvalue type::tk_primitive defined in types.c
      uses variable type::u defined in types.c
      uses variable type::primitive defined in types.c
      uses enumvalue type::tp_char defined in types.c
      uses enumvalue type::tp_signed_char defined in types.c
      uses function qualify_type1(type,type) defined in types.c
      uses variable unsigned_char_type defined in types.c
      uses enumvalue type::tp_short defined in types.c
      uses variable unsigned_short_type defined in types.c
      uses enumvalue type::tp_int defined in types.c
      uses variable unsigned_int_type defined in types.c
      uses enumvalue type::tp_long defined in types.c
      uses variable unsigned_long_type defined in types.c
      uses enumvalue type::tp_long_long defined in types.c
      uses variable unsigned_long_long_type defined in types.c
   function rid2ast(region,location,int,type_element) in line 1289
      protection public
      6 lines of code
      4 parameters
      1 conditional paths
      uses macro definition CAST defined in AST.h
      uses function new_rid(region,location,enum rid) defined in AST_defs.h
      uses variable AST_type_element::next defined in AST_defs.h
   function qualifier2ast(region,location,int,type_element) in line 1296
      protection public
      6 lines of code
      4 parameters
      1 conditional paths
      uses macro definition CAST defined in AST.h
      uses function new_qualifier(region,location,enum rid) defined in AST_defs.h
      uses variable AST_type_element::next defined in AST_defs.h
   function uql2ast(region,location,user_qual_list,type_element) in line 1303
      protection public
      13 lines of code
      4 parameters
      2 conditional paths
      uses macro definition CAST defined in AST.h
      uses function new_user_qual(region,location,cstring) defined in AST_defs.h
      uses variable user_qual_list::qual defined in types.h
      uses variable AST_user_qual::cstring defined in AST_defs.h
      uses variable AST_type_element::next defined in AST_defs.h
      uses variable user_qual_list::next defined in types.h
   function qualifiers2ast(region,location,type_quals,user_qual_list,type_element) in line 1317
      protection public
      10 lines of code
      5 parameters
      3 conditional paths
      uses variable volatile_qualifier defined in qualifiers.h
      uses function qualifier2ast(region,location,int,type_element) defined in types.c
      uses function uql2ast(region,location,user_qual_list,type_element) defined in types.c
   function primitive2ast(region,location,int,type_element) in line 1328
      protection public
      57 lines of code
      4 parameters
      16 conditional paths
      uses macro definition FALSE defined in bool.h
      uses variable type::primitive defined in types.c
      uses enumvalue type::tp_unsigned_char defined in types.c
      uses macro definition TRUE defined in bool.h
      uses enumvalue type::tp_char defined in types.c
      uses enumvalue RID_CHAR defined in c-lex.h
      uses enumvalue type::tp_signed_char defined in types.c
      uses function rid2ast(region,location,int,type_element) defined in types.c
      uses enumvalue RID_SIGNED defined in c-lex.h
      uses enumvalue type::tp_unsigned_short defined in types.c
      uses enumvalue type::tp_short defined in types.c
      uses enumvalue RID_SHORT defined in c-lex.h
      uses enumvalue type::tp_unsigned_int defined in types.c
      uses enumvalue type::tp_int defined in types.c
      uses enumvalue RID_INT defined in c-lex.h
      uses enumvalue type::tp_unsigned_long defined in types.c
      uses enumvalue type::tp_long defined in types.c
      uses enumvalue RID_LONG defined in c-lex.h
      uses enumvalue type::tp_unsigned_long_long defined in types.c
      uses enumvalue type::tp_long_long defined in types.c
      uses enumvalue type::tp_float defined in types.c
      uses enumvalue RID_FLOAT defined in c-lex.h
      uses enumvalue type::tp_double defined in types.c
      uses enumvalue RID_DOUBLE defined in c-lex.h
      uses enumvalue type::tp_long_double defined in types.c
      uses enumvalue RID_UNSIGNED defined in c-lex.h
   function name_tag(tag_declaration) in line 1388
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
      uses variable type::tag defined in types.c
      uses variable tag_declaration::name defined in decls.h
      uses macro definition UNNAMED_STRUCT_PREFIX defined in types.c
      uses function sprintf(char *,const char *,(null)) defined in rcs1.c
      uses variable tag_declaration::ast defined in decls.h
      uses variable AST_tag_ref::word1 defined in AST_defs.h
      uses function new_word(region,location,cstring) defined in AST_defs.h
      uses variable parse_region defined in c-parse.h
      uses variable dummy_location defined in c-lex.c
      uses function str2cstring(region,const char *) defined in cstring.h
      uses variable AST_word::cstring defined in AST_defs.h
      uses variable cstring::data defined in cstring.h
   function tag2ast(region,location,tag_declaration,type_element) in line 1403
      protection public
      37 lines of code
      4 parameters
      1 conditional paths
      uses function name_tag(tag_declaration) defined in types.c
      uses variable type::tag defined in types.c
      uses function newkind_tag_ref(region,ast_kind,location,word,attribute,declaration,bool) defined in AST.c
      uses variable tag_declaration::kind defined in decls.h
      uses function new_word(region,location,cstring) defined in AST_defs.h
      uses variable tag_declaration::ast defined in decls.h
      uses variable AST_tag_ref::word1 defined in AST_defs.h
      uses variable AST_word::cstring defined in AST_defs.h
      uses macro definition NULL defined in config.h
      uses macro definition FALSE defined in bool.h
      uses variable AST_tag_ref::tdecl defined in AST_defs.h
      uses variable AST_tag_ref::next defined in AST_defs.h
      uses macro definition CAST defined in AST.h
      uses variable tag_declaration::shadowed defined in decls.h
   function parameter2ast(region,location,type) in line 1441
      protection public
      15 lines of code
      3 parameters
      1 conditional paths
      uses function type2ast(region,location,type,declarator,declarator *,type_element *) defined in types.c
      uses variable typelist_element::t defined in types.c
      uses macro definition NULL defined in config.h
      uses function new_variable_decl(region,location,declarator,attribute,expression,asm_stmt,data_declaration) defined in AST_defs.h
      uses variable AST_variable_decl::declared_type defined in AST_defs.h
      uses function new_data_decl(region,location,type_element,attribute,declaration) defined in AST_defs.h
      uses macro definition CAST defined in AST.h
   function type2ast(region,location,type,declarator,declarator *,type_element *) in line 1459
      protection public
      79 lines of code
      6 parameters
      1 conditional paths
      uses variable type::qualifiers defined in types.c
      uses function qualifiers2ast(region,location,type_quals,user_qual_list,type_element) defined in types.c
      uses variable typelist_element::t defined in types.c
      uses variable type::user_quals defined in types.c
      uses macro definition NULL defined in config.h
      uses variable type::kind defined in types.c
      uses enumvalue type::tk_primitive defined in types.c
      uses function primitive2ast(region,location,int,type_element) defined in types.c
      uses variable type::u defined in types.c
      uses variable type::primitive defined in types.c
      uses enumvalue type::tk_complex defined in types.c
      uses function rid2ast(region,location,int,type_element) defined in types.c
      uses enumvalue RID_COMPLEX defined in c-lex.h
      uses enumvalue type::tk_tagged defined in types.c
      uses function tag2ast(region,location,tag_declaration,type_element) defined in types.c
      uses variable type::tag defined in types.c
      uses enumvalue type::tk_void defined in types.c
      uses enumvalue RID_VOID defined in c-lex.h
      uses enumvalue type::tk_pointer defined in types.c
      uses macro definition CAST defined in AST.h
      uses function new_pointer_declarator(region,location,declarator,type_element) defined in AST_defs.h
      uses function type2ast(region,location,type,declarator,declarator *,type_element *) defined in types.c
      uses variable type::pointsto defined in types.c
      uses enumvalue type::tk_array defined in types.c
      uses function new_array_declarator(region,location,declarator,expression) defined in AST_defs.h
      uses variable type::array defined in types.c
      uses enumvalue type::tk_function defined in types.c
      uses variable type::fn defined in types.c
      uses function empty_typelist(typelist) defined in types.c
      uses function parameter2ast(region,location,type) defined in types.c
      uses variable void_type defined in types.c
      uses variable AST_declaration::next defined in AST_defs.h
      uses variable typelist_element::next defined in types.c
      uses function new_ellipsis_decl(region,location,type_element) defined in AST_defs.h
      uses function new_function_declarator(region,location,declarator,declaration,type_element,environment) defined in AST_defs.h
   function type_contains_pointers(type) in line 1539
      protection public
      19 lines of code
      1 parameters
      1 conditional paths
      uses function type_pointer(type) defined in types.c
      uses variable typelist_element::t defined in types.c
      uses macro definition TRUE defined in bool.h
      uses function type_array(type) defined in types.c
      uses function type_contains_pointers(type) defined in types.c
      uses function type_array_of(type) defined in types.c
      uses function type_aggregate(type) defined in types.c
      uses macro definition FALSE defined in bool.h
      uses function type_tag(type) defined in types.c
      uses variable Field::next defined in qtype.c
   function type_contains_union_with_pointers(type) in line 1559
      protection public
      19 lines of code
      1 parameters
      1 conditional paths
      uses function type_array(type) defined in types.c
      uses variable typelist_element::t defined in types.c
      uses function type_contains_union_with_pointers(type) defined in types.c
      uses function type_array_of(type) defined in types.c
      uses function type_union(type) defined in types.c
      uses function type_contains_pointers(type) defined in types.c
      uses function type_struct(type) defined in types.c
      uses macro definition FALSE defined in bool.h
      uses function type_tag(type) defined in types.c
      uses variable Field::next defined in qtype.c
      uses macro definition TRUE defined in bool.h
   function type_contains_quals(type) in line 1580
      protection public
      34 lines of code
      1 parameters
      1 conditional paths
      uses function empty_user_qual_list(user_qual_list) defined in types.c
      uses function type_user_quals(type) defined in types.c
      uses variable typelist_element::t defined in types.c
      uses macro definition TRUE defined in bool.h
      uses function type_pointer(type) defined in types.c
      uses function type_contains_quals(type) defined in types.c
      uses function type_points_to(type) defined in types.c
      uses function type_array(type) defined in types.c
      uses function type_array_of(type) defined in types.c
      uses function type_function(type) defined in types.c
      uses function type_function_return_type(type) defined in types.c
      uses function type_function_arguments(type) defined in types.c
      uses function typelist_scan(typelist,typelist_scanner *) defined in types.c
      uses function typelist_next(typelist_scanner *) defined in types.c
      uses function type_aggregate(type) defined in types.c
      uses macro definition FALSE defined in bool.h
   function type_contains_user_quals(type) in line 1616
      protection public
      33 lines of code
      1 parameters
      1 conditional paths
      uses function empty_user_qual_list(user_qual_list) defined in types.c
      uses function type_user_quals(type) defined in types.c
      uses variable typelist_element::t defined in types.c
      uses macro definition TRUE defined in bool.h
      uses function type_pointer(type) defined in types.c
      uses function type_contains_user_quals(type) defined in types.c
      uses function type_points_to(type) defined in types.c
      uses function type_array(type) defined in types.c
      uses function type_array_of(type) defined in types.c
      uses function type_function(type) defined in types.c
      uses function type_function_return_type(type) defined in types.c
      uses function type_function_arguments(type) defined in types.c
      uses function typelist_scan(typelist,typelist_scanner *) defined in types.c
      uses function typelist_next(typelist_scanner *) defined in types.c
      uses function type_aggregate(type) defined in types.c
      uses macro definition FALSE defined in bool.h
   function type_default_conversion(type) in line 1649
      protection public
      28 lines of code
      1 parameters
      1 conditional paths
      uses function type_enum(type) defined in types.c
      uses function type_tag(type) defined in types.c
      uses variable tag_declaration::reptype defined in decls.h
      uses function type_smallerthanint(type) defined in types.c
      uses variable flag_traditional defined in flags.h
      uses function type_unsigned(type) defined in types.c
      uses variable unsigned_int_type defined in types.c
      uses variable int_type defined in types.c
      uses variable flag_allow_single_precision defined in flags.h
      uses function type_float(type) defined in types.c
      uses variable double_type defined in types.c
      uses function type_function(type) defined in types.c
      uses function make_pointer_type(type) defined in types.c
      uses function type_array(type) defined in types.c
      uses function type_array_of(type) defined in types.c
   function function_call_type(function_call) in line 1678
      protection public
      11 lines of code
      1 parameters
      1 conditional paths
      uses variable AST_function_call::arg1 defined in AST_defs.h
      uses variable AST_expression::type defined in AST_defs.h
      uses function type_pointer(type) defined in types.c
      uses function type_points_to(type) defined in types.c
      uses function type_function(type) defined in types.c
   function type_size(type) in line 1690
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
      uses function type_size_cc(type) defined in types.c
      uses variable typelist_element::t defined in types.c
      uses function type_tagged(type) defined in types.c
      uses variable type::u defined in types.c
      uses variable type::tag defined in types.c
      uses variable tag_declaration::size defined in decls.h
      uses function type_array(type) defined in types.c
      uses macro definition constant_uint_value defined in constants.h
      uses variable type::array defined in types.c
      uses function type_size(type) defined in types.c
      uses variable type::size defined in types.c
   function type_alignment(type) in line 1705
      protection public
      18 lines of code
      1 parameters
      1 conditional paths
      uses function type_has_size(type) defined in types.c
      uses variable typelist_element::t defined in types.c
      uses variable type::alignment defined in types.c
      uses function type_tagged(type) defined in types.c
      uses variable type::u defined in types.c
      uses variable type::tag defined in types.c
      uses variable tag_declaration::alignment defined in decls.h
      uses function type_array(type) defined in types.c
      uses function type_alignment(type) defined in types.c
      uses variable type::array defined in types.c
   function type_size_cc(type) in line 1726
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
      uses function type_has_size(type) defined in types.c
      uses variable typelist_element::t defined in types.c
      uses macro definition FALSE defined in bool.h
      uses function type_tagged(type) defined in types.c
      uses variable type::u defined in types.c
      uses variable type::tag defined in types.c
      uses variable tag_declaration::size_cc defined in decls.h
      uses function type_array(type) defined in types.c
      uses variable type::array defined in types.c
      uses function type_size_cc(type) defined in types.c
      uses macro definition TRUE defined in bool.h
   function type_has_size(type) in line 1741
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function type_void(type) defined in types.c
      uses variable typelist_element::t defined in types.c
      uses function type_incomplete(type) defined in types.c
   function qualifier_name(type_quals) in line 1748
      protection public
      10 lines of code
      1 parameters
      1 conditional paths
      uses macro definition NULL defined in config.h
   function make_type_var(cstring) in line 1761
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses function new_type(int) defined in types.c
      uses enumvalue type::tk_var defined in types.c
      uses variable type::u defined in types.c
      uses variable type::var defined in types.c
   function type_var(type) in line 1769
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable typelist_element::t defined in types.c
      uses variable type::kind defined in types.c
      uses enumvalue type::tk_var defined in types.c
   function type_name(type) in line 1774
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable typelist_element::t defined in types.c
      uses variable type::kind defined in types.c
      uses enumvalue type::tk_var defined in types.c
      uses variable type::u defined in types.c
      uses variable type::var defined in types.c
      uses variable cstring::data defined in cstring.h
   variable type::alignment in line 38
      protection public
   variable type::argtypes in line 84
      protection public
   variable type::array in line 96
      protection public
   variable type::arrayof in line 93
      protection public
   variable type::fn in line 89
      protection public
   variable type::kind in line 28
      protection public
   variable type::oldstyle in line 88
      protection public
   variable type::pointsto in line 79
      protection public
   variable type::primitive in line 73
      protection public
   variable type::qualifiers in line 29
      protection public
   variable type::returns in line 83
      protection public
   variable type::size in line 38
      protection public
   variable type::size in line 94
      protection public
   variable type::tag in line 76
      protection public
   variable type::u in line 98
      protection public
   variable type::user_quals in line 30
      protection public
   variable type::var in line 97
      protection public
   variable type::varargs in line 87
      protection public
   variable type::varargs_quals in line 85
      protection public
   variable type::varargs_user_quals in line 86
      protection public
   variable type::@48::array in line 96
      protection public
   variable type::@48::fn in line 89
      protection public
   variable type::@48::pointsto in line 79
      protection public
   variable type::@48::primitive in line 73
      protection public
   variable type::@48::tag in line 76
      protection public
   variable type::@48::var in line 97
      protection public
   variable type::@48::@50::argtypes in line 84
      protection public
   variable type::@48::@50::oldstyle in line 88
      protection public
   variable type::@48::@50::returns in line 83
      protection public
   variable type::@48::@50::varargs in line 87
      protection public
   variable type::@48::@50::varargs_quals in line 85
      protection public
   variable type::@48::@50::varargs_user_quals in line 86
      protection public
   variable type::@48::@51::arrayof in line 93
      protection public
   variable type::@48::@51::size in line 94
      protection public
   variable typelist::first in line 386
      protection public
   variable typelist::r in line 385
      protection public
   variable typelist_element::next in line 391
      protection public
   variable typelist_element::t in line 392
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cqual/cqual-0.981/src/types.h
module types.h
   macro definition Q in line 32
      protection public
   macro definition scan_user_qual_list in line 57
      protection public
   macro definition Q in line 132
      protection public
   macro definition Q in line 137
      protection public
   macro definition Q in line 142
      protection public
   enumeration type_quals in line 29
      protection public
   typedef user_qual_list in line 53
      protection public
   typedef typelist_scanner in line 100
      protection public
   variable float_type in line 38
      protection public
   variable double_type in line 38
      protection public
   variable long_double_type in line 38
      protection public
   variable int_type in line 39
      protection public
   variable unsigned_int_type in line 39
      protection public
   variable long_type in line 39
      protection public
   variable unsigned_long_type in line 39
      protection public
   variable long_long_type in line 40
      protection public
   variable unsigned_long_long_type in line 40
      protection public
   variable short_type in line 40
      protection public
   variable unsigned_short_type in line 40
      protection public
   variable char_type in line 41
      protection public
   variable char_array_type in line 41
      protection public
   variable wchar_type in line 41
      protection public
   variable wchar_array_type in line 41
      protection public
   variable unsigned_char_type in line 42
      protection public
   variable signed_char_type in line 42
      protection public
   variable void_type in line 42
      protection public
   variable ptr_void_type in line 42
      protection public
   variable size_t_type in line 43
      protection public
   variable ptrdiff_t_type in line 43
      protection public
   variable intptr_type in line 43
      protection public
   variable error_type in line 44
      protection public
   enumvalue no_qualifiers in line 30
      protection public
   enumvalue transparent_qualifier in line 31
      protection public
   enumvalue Q in line 40
      protection public
   function init_types(void) in line 46
      protection public
      57 lines of code
      1 parameters
      1 conditional paths
      uses function newregion(void) defined in regions.c
      uses variable float_type defined in types.c
      uses enumvalue type::tp_float defined in types.c
      uses variable double_type defined in types.c
      uses enumvalue type::tp_double defined in types.c
      uses variable long_double_type defined in types.c
      uses enumvalue type::tp_long_double defined in types.c
      uses variable short_type defined in types.c
      uses enumvalue type::tp_short defined in types.c
      uses variable unsigned_short_type defined in types.c
      uses enumvalue type::tp_unsigned_short defined in types.c
      uses variable int_type defined in types.c
      uses enumvalue type::tp_int defined in types.c
      uses variable unsigned_int_type defined in types.c
      uses enumvalue type::tp_unsigned_int defined in types.c
      uses variable long_type defined in types.c
      uses enumvalue type::tp_long defined in types.c
      uses variable unsigned_long_type defined in types.c
      uses enumvalue type::tp_unsigned_long defined in types.c
      uses variable long_long_type defined in types.c
      uses enumvalue type::tp_long_long defined in types.c
      uses variable unsigned_long_long_type defined in types.c
      uses enumvalue type::tp_unsigned_long_long defined in types.c
      uses variable signed_char_type defined in types.c
      uses enumvalue type::tp_signed_char defined in types.c
      uses variable unsigned_char_type defined in types.c
      uses enumvalue type::tp_unsigned_char defined in types.c
      uses variable char_type defined in types.c
      uses enumvalue type::tp_char defined in types.c
      uses macro definition __attribute__ defined in compiler.h
      uses variable int2_type defined in types.c
      uses enumvalue type::tp_int2 defined in types.c
      uses macro definition FALSE defined in bool.h
      uses variable uint2_type defined in types.c
      uses enumvalue type::tp_uint2 defined in types.c
      uses macro definition TRUE defined in bool.h
      uses variable int4_type defined in types.c
      uses enumvalue type::tp_int4 defined in types.c
      uses variable uint4_type defined in types.c
      uses enumvalue type::tp_uint4 defined in types.c
      uses variable int8_type defined in types.c
      uses enumvalue type::tp_int8 defined in types.c
      uses variable uint8_type defined in types.c
      uses enumvalue type::tp_uint8 defined in types.c
      uses variable char_array_type defined in types.c
      uses function make_array_type(type,expression) defined in types.c
      uses macro definition NULL defined in config.h
      uses variable error_type defined in types.c
      uses enumvalue type::tk_error defined in types.c
      uses variable type::size defined in types.c
      uses variable type::alignment defined in types.c
      uses variable void_type defined in types.c
      uses enumvalue type::tk_void defined in types.c
      uses variable ptr_void_type defined in types.c
      uses function make_pointer_type(type) defined in types.c
      uses variable wchar_type defined in types.c
      uses function type_for_size(int,bool) defined in types.c
      uses variable wchar_array_type defined in types.c
      uses variable size_t_type defined in types.c
      uses variable ptrdiff_t_type defined in types.c
      uses variable intptr_type defined in types.c
   function new_user_qual_list(user_qual,user_qual_list) in line 54
      protection public
      8 lines of code
      2 parameters
      1 conditional paths
      uses macro definition ralloc defined in regions.h
      uses variable parse_region defined in c-parse.h
      uses variable user_qual_list::qual defined in types.h
      uses variable user_qual_list::next defined in types.h
   function type_user_quals(type) in line 55
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable typelist_element::t defined in types.c
      uses variable type::user_quals defined in types.c
   function empty_user_qual_list(user_qual_list) in line 56
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses macro definition NULL defined in config.h
   function make_complex_type(type) in line 63
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses variable type::kind defined in types.c
      uses enumvalue type::tk_primitive defined in types.c
      uses variable type::u defined in types.c
      uses variable type::primitive defined in types.c
   function make_base_type(type) in line 67
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses variable type::kind defined in types.c
      uses enumvalue type::tk_complex defined in types.c
      uses variable type::u defined in types.c
      uses variable type::primitive defined in types.c
   function make_qualified_type(type,type_quals,user_qual_list) in line 72
      protection public
      18 lines of code
      3 parameters
      2 conditional paths
      uses variable type::kind defined in types.c
      uses enumvalue type::tk_array defined in types.c
      uses function make_array_type(type,expression) defined in types.c
      uses function make_qualified_type(type,type_quals,user_qual_list) defined in types.c
      uses variable type::u defined in types.c
      uses variable type::array defined in types.c
      uses variable type::qualifiers defined in types.c
      uses variable type::user_quals defined in types.c
   function qualify_type1(type,type) in line 74
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses function make_qualified_type(type,type_quals,user_qual_list) defined in types.c
      uses variable typelist_element::t defined in types.c
      uses function type_qualifiers(type) defined in types.c
      uses function type_user_quals(type) defined in types.c
   function qualify_type2(type,type,type) in line 75
      protection public
      6 lines of code
      3 parameters
      1 conditional paths
      uses function make_qualified_type(type,type_quals,user_qual_list) defined in types.c
      uses variable typelist_element::t defined in types.c
      uses function type_qualifiers(type) defined in types.c
      uses function union_user_qual_list(user_qual_list,user_qual_list) defined in types.c
      uses variable type::user_quals defined in types.c
   function align_type(type,int) in line 78
      protection public
      8 lines of code
      2 parameters
      1 conditional paths
      uses variable typelist_element::t defined in types.c
      uses variable type::alignment defined in types.c
   function make_pointer_type(type) in line 81
      protection public
      11 lines of code
      1 parameters
      1 conditional paths
      uses enumvalue type::tk_pointer defined in types.c
      uses variable type::u defined in types.c
      uses variable type::pointsto defined in types.c
      uses variable type::size defined in types.c
      uses variable type::alignment defined in types.c
   function make_array_type(type,expression) in line 84
      protection public
      10 lines of code
      2 parameters
      1 conditional paths
      uses enumvalue type::tk_array defined in types.c
      uses variable type::u defined in types.c
      uses variable type::array defined in types.c
      uses variable type::size defined in types.c
      uses function cval_intcompare(cval,cval) defined in cval.c
      uses variable cval_zero defined in cval.c
   function make_function_type(type,typelist,bool,type_quals,user_qual_list,bool) in line 89
      protection public
      15 lines of code
      6 parameters
      1 conditional paths
      uses enumvalue type::tk_function defined in types.c
      uses variable type::u defined in types.c
      uses variable type::fn defined in types.c
      uses variable type::argtypes defined in types.c
      uses variable type::varargs defined in types.c
      uses variable type::varargs_quals defined in types.c
      uses variable type::varargs_user_quals defined in types.c
      uses variable type::oldstyle defined in types.c
      uses variable type::size defined in types.c
      uses variable type::alignment defined in types.c
   function make_tagged_type(tag_declaration) in line 92
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses enumvalue type::tk_tagged defined in types.c
      uses variable type::u defined in types.c
      uses variable type::tag defined in types.c
   function new_typelist(region) in line 94
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses macro definition ralloc defined in regions.h
      uses variable typelist::r defined in types.c
      uses variable typelist::first defined in types.c
      uses macro definition NULL defined in config.h
   function typelist_append(typelist,type) in line 95
      protection public
      11 lines of code
      2 parameters
      2 conditional paths
      uses macro definition ralloc defined in regions.h
      uses variable typelist::r defined in types.c
      uses variable typelist_element::t defined in types.c
      uses variable typelist::first defined in types.c
      uses variable typelist_element::next defined in types.c
   function empty_typelist(typelist) in line 97
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable typelist::first defined in types.c
      uses macro definition NULL defined in config.h
   function typelist_scan(typelist,typelist_scanner *) in line 101
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses variable typelist::first defined in types.c
   function typelist_next(typelist_scanner *) in line 102
      protection public
      10 lines of code
      1 parameters
      2 conditional paths
      uses variable typelist_element::t defined in types.c
      uses macro definition NULL defined in config.h
      uses variable typelist_element::next defined in types.c
   function type_size(type) in line 105
      protection public
      14 lines of code
      1 parameters
      3 conditional paths
      uses function type_size_cc(type) defined in types.c
      uses variable typelist_element::t defined in types.c
      uses function type_tagged(type) defined in types.c
      uses variable type::u defined in types.c
      uses variable type::tag defined in types.c
      uses variable tag_declaration::size defined in decls.h
      uses function type_array(type) defined in types.c
      uses macro definition constant_uint_value defined in constants.h
      uses variable type::array defined in types.c
      uses function type_size(type) defined in types.c
      uses variable type::size defined in types.c
   function type_alignment(type) in line 106
      protection public
      18 lines of code
      1 parameters
      4 conditional paths
      uses function type_has_size(type) defined in types.c
      uses variable typelist_element::t defined in types.c
      uses variable type::alignment defined in types.c
      uses function type_tagged(type) defined in types.c
      uses variable type::u defined in types.c
      uses variable type::tag defined in types.c
      uses variable tag_declaration::alignment defined in decls.h
      uses function type_array(type) defined in types.c
      uses function type_alignment(type) defined in types.c
      uses variable type::array defined in types.c
   function type_has_size(type) in line 109
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function type_void(type) defined in types.c
      uses variable typelist_element::t defined in types.c
      uses function type_incomplete(type) defined in types.c
   function type_size_cc(type) in line 111
      protection public
      14 lines of code
      1 parameters
      4 conditional paths
      uses function type_has_size(type) defined in types.c
      uses variable typelist_element::t defined in types.c
      uses macro definition FALSE defined in bool.h
      uses function type_tagged(type) defined in types.c
      uses variable type::u defined in types.c
      uses variable type::tag defined in types.c
      uses variable tag_declaration::size_cc defined in decls.h
      uses function type_array(type) defined in types.c
      uses variable type::array defined in types.c
      uses function type_size_cc(type) defined in types.c
      uses macro definition TRUE defined in bool.h
   function common_type(type,type) in line 114
      protection public
      147 lines of code
      2 parameters
      22 conditional paths
      uses variable error_type defined in types.c
      uses function type_enum(type) defined in types.c
      uses function type_equal_unqualified(type,type) defined in types.c
      uses function qualify_type2(type,type,type) defined in types.c
      uses function qualify_type1(type,type) defined in types.c
      uses function type_for_size(int,bool) defined in types.c
      uses function type_size(type) defined in types.c
      uses macro definition TRUE defined in bool.h
      uses function type_complex(type) defined in types.c
      uses variable type::kind defined in types.c
      uses enumvalue type::tk_primitive defined in types.c
      uses enumvalue type::tk_complex defined in types.c
      uses enumvalue type::tk_void defined in types.c
      uses enumvalue type::tk_tagged defined in types.c
      uses enumvalue type::tk_pointer defined in types.c
      uses function make_pointer_type(type) defined in types.c
      uses function common_type(type,type) defined in types.c
      uses variable type::u defined in types.c
      uses variable type::pointsto defined in types.c
      uses enumvalue type::tk_array defined in types.c
      uses variable type::array defined in types.c
      uses function make_array_type(type,expression) defined in types.c
      uses enumvalue type::tk_function defined in types.c
      uses variable type::fn defined in types.c
      uses variable type::oldstyle defined in types.c
      uses variable type::varargs defined in types.c
      uses variable type::varargs_quals defined in types.c
      uses variable type::varargs_user_quals defined in types.c
      uses macro definition NULL defined in config.h
      uses macro definition FALSE defined in bool.h
      uses enumvalue no_qualifiers defined in types.h
      uses function new_typelist(region) defined in types.c
      uses function union_user_qual_list(user_qual_list,user_qual_list) defined in types.c
      uses variable typelist_element::t defined in types.c
      uses function typelist_append(typelist,type) defined in types.c
      uses variable typelist_element::next defined in types.c
      uses function make_function_type(type,typelist,bool,type_quals,user_qual_list,bool) defined in types.c
   function type_equal(type,type) in line 116
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses variable type::qualifiers defined in types.c
      uses function type_equal_unqualified(type,type) defined in types.c
   function type_equal_unqualified(type,type) in line 117
      protection public
      40 lines of code
      2 parameters
      11 conditional paths
      uses variable error_type defined in types.c
      uses macro definition TRUE defined in bool.h
      uses variable type::kind defined in types.c
      uses macro definition FALSE defined in bool.h
      uses enumvalue type::tk_primitive defined in types.c
      uses enumvalue type::tk_complex defined in types.c
      uses variable type::u defined in types.c
      uses variable type::primitive defined in types.c
      uses enumvalue type::tk_void defined in types.c
      uses enumvalue type::tk_tagged defined in types.c
      uses variable type::tag defined in types.c
      uses enumvalue type::tk_pointer defined in types.c
      uses function type_equal(type,type) defined in types.c
      uses variable type::pointsto defined in types.c
      uses enumvalue type::tk_function defined in types.c
      uses function function_equal(type,type) defined in types.c
      uses enumvalue type::tk_array defined in types.c
      uses variable type::array defined in types.c
      uses macro definition NULL defined in config.h
      uses function cval_intcompare(cval,cval) defined in cval.c
      uses variable AST_known_cst::cval defined in AST_defs.h
   function type_compatible(type,type) in line 118
      protection public
      11 lines of code
      2 parameters
      2 conditional paths
      uses variable type::qualifiers defined in types.c
      uses function type_compatible_unqualified(type,type) defined in types.c
   function type_compatible_unqualified(type,type) in line 119
      protection public
      40 lines of code
      2 parameters
      11 conditional paths
      uses variable error_type defined in types.c
      uses variable type::kind defined in types.c
      uses enumvalue type::tk_primitive defined in types.c
      uses enumvalue type::tk_complex defined in types.c
      uses variable type::u defined in types.c
      uses variable type::primitive defined in types.c
      uses enumvalue type::tk_void defined in types.c
      uses enumvalue type::tk_tagged defined in types.c
      uses variable type::tag defined in types.c
      uses enumvalue type::tk_pointer defined in types.c
      uses function type_compatible(type,type) defined in types.c
      uses variable type::pointsto defined in types.c
      uses enumvalue type::tk_function defined in types.c
      uses function function_compatible(type,type) defined in types.c
      uses enumvalue type::tk_array defined in types.c
      uses variable type::array defined in types.c
      uses macro definition NULL defined in config.h
      uses function cval_intcompare(cval,cval) defined in cval.c
      uses variable AST_known_cst::cval defined in AST_defs.h
   function type_self_promoting(type) in line 122
      protection public
      15 lines of code
      1 parameters
      8 conditional paths
      uses variable typelist_element::t defined in types.c
      uses variable type::kind defined in types.c
      uses enumvalue type::tk_primitive defined in types.c
      uses macro definition TRUE defined in bool.h
      uses variable type::u defined in types.c
      uses variable type::primitive defined in types.c
      uses enumvalue type::tp_float defined in types.c
      uses enumvalue type::tp_char defined in types.c
      uses enumvalue type::tp_unsigned_char defined in types.c
      uses enumvalue type::tp_signed_char defined in types.c
      uses enumvalue type::tp_short defined in types.c
      uses enumvalue type::tp_unsigned_short defined in types.c
      uses macro definition FALSE defined in bool.h
   function type_incomplete(type) in line 124
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses variable typelist_element::t defined in types.c
      uses variable type::kind defined in types.c
      uses enumvalue type::tk_void defined in types.c
      uses enumvalue type::tk_tagged defined in types.c
      uses variable type::u defined in types.c
      uses variable type::tag defined in types.c
      uses variable tag_declaration::defined defined in decls.h
      uses enumvalue type::tk_array defined in types.c
      uses function type_incomplete(type) defined in types.c
      uses variable type::array defined in types.c
   function qualifier_name(type_quals) in line 127
      protection public
      10 lines of code
      1 parameters
      1 conditional paths
      uses macro definition NULL defined in config.h
   function type_qualifiers(type) in line 129
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses variable typelist_element::t defined in types.c
      uses variable type::kind defined in types.c
      uses enumvalue type::tk_array defined in types.c
      uses variable type::u defined in types.c
      uses variable type::array defined in types.c
      uses variable type::qualifiers defined in types.c
   function type_transparent(type) in line 145
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function type_qualifiers(type) defined in types.c
      uses variable typelist_element::t defined in types.c
      uses enumvalue transparent_qualifier defined in types.h
   function type_readonly(type) in line 146
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable typelist_element::t defined in types.c
      uses function type_tagged(type) defined in types.c
      uses function type_tag(type) defined in types.c
      uses variable tag_declaration::fields_const defined in decls.h
   function type_atomic(type) in line 148
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable typelist_element::t defined in types.c
      uses variable type::kind defined in types.c
      uses enumvalue type::tk_primitive defined in types.c
      uses enumvalue type::tk_complex defined in types.c
      uses enumvalue type::tk_void defined in types.c
   function type_plain_char(type) in line 149
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable typelist_element::t defined in types.c
      uses variable type::kind defined in types.c
      uses enumvalue type::tk_primitive defined in types.c
      uses variable type::u defined in types.c
      uses variable type::primitive defined in types.c
      uses enumvalue type::tp_char defined in types.c
   function type_signed_char(type) in line 150
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable typelist_element::t defined in types.c
      uses variable type::kind defined in types.c
      uses enumvalue type::tk_primitive defined in types.c
      uses variable type::u defined in types.c
      uses variable type::primitive defined in types.c
      uses enumvalue type::tp_signed_char defined in types.c
   function type_unsigned_char(type) in line 151
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable typelist_element::t defined in types.c
      uses variable type::kind defined in types.c
      uses enumvalue type::tk_primitive defined in types.c
      uses variable type::u defined in types.c
      uses variable type::primitive defined in types.c
      uses enumvalue type::tp_unsigned_char defined in types.c
   function type_short(type) in line 152
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable typelist_element::t defined in types.c
      uses variable type::kind defined in types.c
      uses enumvalue type::tk_primitive defined in types.c
      uses variable type::u defined in types.c
      uses variable type::primitive defined in types.c
      uses enumvalue type::tp_short defined in types.c
   function type_unsigned_short(type) in line 153
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable typelist_element::t defined in types.c
      uses variable type::kind defined in types.c
      uses enumvalue type::tk_primitive defined in types.c
      uses variable type::u defined in types.c
      uses variable type::primitive defined in types.c
      uses enumvalue type::tp_unsigned_short defined in types.c
   function type_int(type) in line 154
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable typelist_element::t defined in types.c
      uses variable type::kind defined in types.c
      uses enumvalue type::tk_primitive defined in types.c
      uses variable type::u defined in types.c
      uses variable type::primitive defined in types.c
      uses enumvalue type::tp_int defined in types.c
   function type_unsigned_int(type) in line 155
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable typelist_element::t defined in types.c
      uses variable type::kind defined in types.c
      uses enumvalue type::tk_primitive defined in types.c
      uses variable type::u defined in types.c
      uses variable type::primitive defined in types.c
      uses enumvalue type::tp_unsigned_int defined in types.c
   function type_long(type) in line 156
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable typelist_element::t defined in types.c
      uses variable type::kind defined in types.c
      uses enumvalue type::tk_primitive defined in types.c
      uses variable type::u defined in types.c
      uses variable type::primitive defined in types.c
      uses enumvalue type::tp_long defined in types.c
   function type_unsigned_long(type) in line 157
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable typelist_element::t defined in types.c
      uses variable type::kind defined in types.c
      uses enumvalue type::tk_primitive defined in types.c
      uses variable type::u defined in types.c
      uses variable type::primitive defined in types.c
      uses enumvalue type::tp_unsigned_long defined in types.c
   function type_long_long(type) in line 158
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable typelist_element::t defined in types.c
      uses variable type::kind defined in types.c
      uses enumvalue type::tk_primitive defined in types.c
      uses variable type::u defined in types.c
      uses variable type::primitive defined in types.c
      uses enumvalue type::tp_long_long defined in types.c
   function type_unsigned_long_long(type) in line 159
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable typelist_element::t defined in types.c
      uses variable type::kind defined in types.c
      uses enumvalue type::tk_primitive defined in types.c
      uses variable type::u defined in types.c
      uses variable type::primitive defined in types.c
      uses enumvalue type::tp_unsigned_long_long defined in types.c
   function type_long_double(type) in line 160
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable typelist_element::t defined in types.c
      uses variable type::kind defined in types.c
      uses enumvalue type::tk_primitive defined in types.c
      uses variable type::u defined in types.c
      uses variable type::primitive defined in types.c
      uses enumvalue type::tp_long_double defined in types.c
   function type_tagged(type) in line 162
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable typelist_element::t defined in types.c
      uses variable type::kind defined in types.c
      uses enumvalue type::tk_tagged defined in types.c
   function type_integral(type) in line 163
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable typelist_element::t defined in types.c
      uses variable type::kind defined in types.c
      uses enumvalue type::tk_primitive defined in types.c
      uses variable type::u defined in types.c
      uses variable type::primitive defined in types.c
      uses enumvalue type::tp_first_floating defined in types.c
   function type_floating(type) in line 164
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable typelist_element::t defined in types.c
      uses variable type::kind defined in types.c
      uses enumvalue type::tk_primitive defined in types.c
      uses variable type::u defined in types.c
      uses variable type::primitive defined in types.c
      uses enumvalue type::tp_first_floating defined in types.c
   function type_complex(type) in line 165
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable typelist_element::t defined in types.c
      uses variable type::kind defined in types.c
      uses enumvalue type::tk_complex defined in types.c
   function type_float(type) in line 166
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable typelist_element::t defined in types.c
      uses variable type::kind defined in types.c
      uses enumvalue type::tk_primitive defined in types.c
      uses variable type::u defined in types.c
      uses variable type::primitive defined in types.c
      uses enumvalue type::tp_float defined in types.c
   function type_double(type) in line 167
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable typelist_element::t defined in types.c
      uses variable type::kind defined in types.c
      uses enumvalue type::tk_primitive defined in types.c
      uses variable type::u defined in types.c
      uses variable type::primitive defined in types.c
      uses enumvalue type::tp_double defined in types.c
   function type_void(type) in line 168
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable typelist_element::t defined in types.c
      uses variable type::kind defined in types.c
      uses enumvalue type::tk_void defined in types.c
   function type_char(type) in line 169
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses variable typelist_element::t defined in types.c
      uses variable type::kind defined in types.c
      uses enumvalue type::tk_primitive defined in types.c
      uses variable type::u defined in types.c
      uses variable type::primitive defined in types.c
      uses enumvalue type::tp_char defined in types.c
      uses enumvalue type::tp_unsigned_char defined in types.c
      uses enumvalue type::tp_signed_char defined in types.c
   function type_function(type) in line 170
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable typelist_element::t defined in types.c
      uses variable type::kind defined in types.c
      uses enumvalue type::tk_function defined in types.c
   function type_array(type) in line 171
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable typelist_element::t defined in types.c
      uses variable type::kind defined in types.c
      uses enumvalue type::tk_array defined in types.c
   function type_pointer(type) in line 172
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable typelist_element::t defined in types.c
      uses variable type::kind defined in types.c
      uses enumvalue type::tk_pointer defined in types.c
   function type_enum(type) in line 173
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable typelist_element::t defined in types.c
      uses variable type::kind defined in types.c
      uses enumvalue type::tk_tagged defined in types.c
      uses variable type::u defined in types.c
      uses variable type::tag defined in types.c
      uses variable tag_declaration::kind defined in decls.h
      uses enumvalue kind_enum_ref defined in AST_types.h
   function type_struct(type) in line 174
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable typelist_element::t defined in types.c
      uses variable type::kind defined in types.c
      uses enumvalue type::tk_tagged defined in types.c
      uses variable type::u defined in types.c
      uses variable type::tag defined in types.c
      uses variable tag_declaration::kind defined in decls.h
      uses enumvalue kind_struct_ref defined in AST_types.h
   function type_union(type) in line 175
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable typelist_element::t defined in types.c
      uses variable type::kind defined in types.c
      uses enumvalue type::tk_tagged defined in types.c
      uses variable type::u defined in types.c
      uses variable type::tag defined in types.c
      uses variable tag_declaration::kind defined in decls.h
      uses enumvalue kind_union_ref defined in AST_types.h
   function type_integer(type) in line 176
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function type_integral(type) defined in types.c
      uses variable typelist_element::t defined in types.c
      uses function type_enum(type) defined in types.c
   function type_unsigned(type) in line 177
      protection public
      12 lines of code
      1 parameters
      1 conditional paths
      uses variable typelist_element::t defined in types.c
      uses variable type::kind defined in types.c
      uses enumvalue type::tk_primitive defined in types.c
      uses variable type::u defined in types.c
      uses variable type::primitive defined in types.c
      uses enumvalue type::tp_unsigned_char defined in types.c
      uses enumvalue type::tp_char defined in types.c
      uses enumvalue type::tp_unsigned_short defined in types.c
      uses enumvalue type::tp_unsigned_int defined in types.c
      uses enumvalue type::tp_unsigned_long defined in types.c
      uses enumvalue type::tp_unsigned_long_long defined in types.c
   function type_smallerthanint(type) in line 178
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function type_integral(type) defined in types.c
      uses variable typelist_element::t defined in types.c
      uses variable type::size defined in types.c
      uses variable int_type defined in types.c
   function type_real(type) in line 179
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function type_integer(type) defined in types.c
      uses variable typelist_element::t defined in types.c
      uses function type_floating(type) defined in types.c
   function type_arithmetic(type) in line 180
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function type_real(type) defined in types.c
      uses variable typelist_element::t defined in types.c
      uses function type_complex(type) defined in types.c
   function type_scalar(type) in line 181
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function type_arithmetic(type) defined in types.c
      uses variable typelist_element::t defined in types.c
      uses function type_pointer(type) defined in types.c
   function type_aggregate(type) in line 182
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function type_struct(type) defined in types.c
      uses variable typelist_element::t defined in types.c
      uses function type_union(type) defined in types.c
   function make_unsigned_type(type) in line 184
      protection public
      18 lines of code
      1 parameters
      7 conditional paths
      uses variable typelist_element::t defined in types.c
      uses variable type::kind defined in types.c
      uses enumvalue type::tk_primitive defined in types.c
      uses variable type::u defined in types.c
      uses variable type::primitive defined in types.c
      uses enumvalue type::tp_char defined in types.c
      uses enumvalue type::tp_signed_char defined in types.c
      uses function qualify_type1(type,type) defined in types.c
      uses variable unsigned_char_type defined in types.c
      uses enumvalue type::tp_short defined in types.c
      uses variable unsigned_short_type defined in types.c
      uses enumvalue type::tp_int defined in types.c
      uses variable unsigned_int_type defined in types.c
      uses enumvalue type::tp_long defined in types.c
      uses variable unsigned_long_type defined in types.c
      uses enumvalue type::tp_long_long defined in types.c
      uses variable unsigned_long_long_type defined in types.c
   function type_function_return_type(type) in line 186
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable typelist_element::t defined in types.c
      uses variable type::kind defined in types.c
      uses enumvalue type::tk_function defined in types.c
      uses variable type::u defined in types.c
      uses variable type::fn defined in types.c
   function type_function_arguments(type) in line 187
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable typelist_element::t defined in types.c
      uses variable type::kind defined in types.c
      uses enumvalue type::tk_function defined in types.c
      uses variable type::u defined in types.c
      uses variable type::fn defined in types.c
   function type_function_varargs(type) in line 188
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable typelist_element::t defined in types.c
      uses variable type::kind defined in types.c
      uses enumvalue type::tk_function defined in types.c
      uses variable type::u defined in types.c
      uses variable type::fn defined in types.c
   function type_function_varargs_quals(type) in line 189
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable typelist_element::t defined in types.c
      uses variable type::kind defined in types.c
      uses enumvalue type::tk_function defined in types.c
      uses variable type::u defined in types.c
      uses variable type::fn defined in types.c
   function type_function_varargs_user_quals(type) in line 190
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable typelist_element::t defined in types.c
      uses variable type::kind defined in types.c
      uses enumvalue type::tk_function defined in types.c
      uses variable type::u defined in types.c
      uses variable type::fn defined in types.c
   function type_function_oldstyle(type) in line 191
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable typelist_element::t defined in types.c
      uses variable type::kind defined in types.c
      uses enumvalue type::tk_function defined in types.c
      uses variable type::u defined in types.c
      uses variable type::fn defined in types.c
   function self_promoting_args(type) in line 195
      protection public
      17 lines of code
      1 parameters
      5 conditional paths
      uses function type_function_varargs(type) defined in types.c
      uses macro definition FALSE defined in bool.h
      uses function type_function_oldstyle(type) defined in types.c
      uses macro definition TRUE defined in bool.h
      uses function type_function_arguments(type) defined in types.c
      uses variable typelist_element::next defined in types.c
      uses function type_self_promoting(type) defined in types.c
      uses variable typelist_element::t defined in types.c
   function type_points_to(type) in line 197
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable typelist_element::t defined in types.c
      uses variable type::kind defined in types.c
      uses enumvalue type::tk_pointer defined in types.c
      uses variable type::u defined in types.c
      uses variable type::pointsto defined in types.c
   function type_array_of(type) in line 198
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable typelist_element::t defined in types.c
      uses variable type::kind defined in types.c
      uses enumvalue type::tk_array defined in types.c
      uses variable type::u defined in types.c
      uses variable type::array defined in types.c
   function type_array_of_base(type) in line 199
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses variable typelist_element::t defined in types.c
      uses variable type::kind defined in types.c
      uses enumvalue type::tk_array defined in types.c
      uses variable type::u defined in types.c
      uses variable type::array defined in types.c
   function type_array_size(type) in line 200
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable typelist_element::t defined in types.c
      uses variable type::kind defined in types.c
      uses enumvalue type::tk_array defined in types.c
      uses variable type::u defined in types.c
      uses variable type::array defined in types.c
   function type_tag(type) in line 201
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable typelist_element::t defined in types.c
      uses variable type::kind defined in types.c
      uses enumvalue type::tk_tagged defined in types.c
      uses variable type::u defined in types.c
      uses variable type::tag defined in types.c
   function type_base(type) in line 202
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses variable typelist_element::t defined in types.c
      uses variable type::kind defined in types.c
      uses enumvalue type::tk_array defined in types.c
      uses variable type::u defined in types.c
      uses variable type::array defined in types.c
   function type2ast(region,location,type,declarator,declarator *,type_element *) in line 206
      protection public
      79 lines of code
      6 parameters
      12 conditional paths
      uses variable type::qualifiers defined in types.c
      uses variable typelist_element::t defined in types.c
      uses variable type::user_quals defined in types.c
      uses macro definition NULL defined in config.h
      uses variable type::kind defined in types.c
      uses enumvalue type::tk_primitive defined in types.c
      uses variable type::u defined in types.c
      uses variable type::primitive defined in types.c
      uses enumvalue type::tk_complex defined in types.c
      uses enumvalue RID_COMPLEX defined in c-lex.h
      uses enumvalue type::tk_tagged defined in types.c
      uses variable type::tag defined in types.c
      uses enumvalue type::tk_void defined in types.c
      uses enumvalue RID_VOID defined in c-lex.h
      uses enumvalue type::tk_pointer defined in types.c
      uses macro definition CAST defined in AST.h
      uses function new_pointer_declarator(region,location,declarator,type_element) defined in AST_defs.h
      uses function type2ast(region,location,type,declarator,declarator *,type_element *) defined in types.c
      uses variable type::pointsto defined in types.c
      uses enumvalue type::tk_array defined in types.c
      uses function new_array_declarator(region,location,declarator,expression) defined in AST_defs.h
      uses variable type::array defined in types.c
      uses enumvalue type::tk_function defined in types.c
      uses variable type::fn defined in types.c
      uses function empty_typelist(typelist) defined in types.c
      uses variable void_type defined in types.c
      uses variable AST_declaration::next defined in AST_defs.h
      uses variable typelist_element::next defined in types.c
      uses function new_ellipsis_decl(region,location,type_element) defined in AST_defs.h
      uses function new_function_declarator(region,location,declarator,declaration,type_element,environment) defined in AST_defs.h
   function type_contains_pointers(type) in line 209
      protection public
      19 lines of code
      1 parameters
      6 conditional paths
      uses function type_pointer(type) defined in types.c
      uses variable typelist_element::t defined in types.c
      uses macro definition TRUE defined in bool.h
      uses function type_array(type) defined in types.c
      uses function type_contains_pointers(type) defined in types.c
      uses function type_array_of(type) defined in types.c
      uses function type_aggregate(type) defined in types.c
      uses macro definition FALSE defined in bool.h
      uses function type_tag(type) defined in types.c
      uses variable Field::next defined in qtype.c
   function type_contains_union_with_pointers(type) in line 210
      protection public
      19 lines of code
      1 parameters
      6 conditional paths
      uses function type_array(type) defined in types.c
      uses variable typelist_element::t defined in types.c
      uses function type_contains_union_with_pointers(type) defined in types.c
      uses function type_array_of(type) defined in types.c
      uses function type_union(type) defined in types.c
      uses function type_contains_pointers(type) defined in types.c
      uses function type_struct(type) defined in types.c
      uses macro definition FALSE defined in bool.h
      uses function type_tag(type) defined in types.c
      uses variable Field::next defined in qtype.c
      uses macro definition TRUE defined in bool.h
   function type_contains_quals(type) in line 211
      protection public
      34 lines of code
      1 parameters
      10 conditional paths
      uses function empty_user_qual_list(user_qual_list) defined in types.c
      uses function type_user_quals(type) defined in types.c
      uses variable typelist_element::t defined in types.c
      uses macro definition TRUE defined in bool.h
      uses function type_pointer(type) defined in types.c
      uses function type_contains_quals(type) defined in types.c
      uses function type_points_to(type) defined in types.c
      uses function type_array(type) defined in types.c
      uses function type_array_of(type) defined in types.c
      uses function type_function(type) defined in types.c
      uses function type_function_return_type(type) defined in types.c
      uses function type_function_arguments(type) defined in types.c
      uses function typelist_scan(typelist,typelist_scanner *) defined in types.c
      uses function typelist_next(typelist_scanner *) defined in types.c
      uses function type_aggregate(type) defined in types.c
      uses macro definition FALSE defined in bool.h
   function type_contains_user_quals(type) in line 212
      protection public
      33 lines of code
      1 parameters
      10 conditional paths
      uses function empty_user_qual_list(user_qual_list) defined in types.c
      uses function type_user_quals(type) defined in types.c
      uses variable typelist_element::t defined in types.c
      uses macro definition TRUE defined in bool.h
      uses function type_pointer(type) defined in types.c
      uses function type_contains_user_quals(type) defined in types.c
      uses function type_points_to(type) defined in types.c
      uses function type_array(type) defined in types.c
      uses function type_array_of(type) defined in types.c
      uses function type_function(type) defined in types.c
      uses function type_function_return_type(type) defined in types.c
      uses function type_function_arguments(type) defined in types.c
      uses function typelist_scan(typelist,typelist_scanner *) defined in types.c
      uses function typelist_next(typelist_scanner *) defined in types.c
      uses function type_aggregate(type) defined in types.c
      uses macro definition FALSE defined in bool.h
   function type_default_conversion(type) in line 214
      protection public
      28 lines of code
      1 parameters
      7 conditional paths
      uses function type_enum(type) defined in types.c
      uses function type_tag(type) defined in types.c
      uses variable tag_declaration::reptype defined in decls.h
      uses function type_smallerthanint(type) defined in types.c
      uses variable flag_traditional defined in flags.h
      uses function type_unsigned(type) defined in types.c
      uses variable unsigned_int_type defined in types.c
      uses variable int_type defined in types.c
      uses variable flag_allow_single_precision defined in flags.h
      uses function type_float(type) defined in types.c
      uses variable double_type defined in types.c
      uses function type_function(type) defined in types.c
      uses function make_pointer_type(type) defined in types.c
      uses function type_array(type) defined in types.c
      uses function type_array_of(type) defined in types.c
   function function_call_type(function_call) in line 215
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses variable AST_function_call::arg1 defined in AST_defs.h
      uses variable AST_expression::type defined in AST_defs.h
      uses function type_pointer(type) defined in types.c
      uses function type_points_to(type) defined in types.c
      uses function type_function(type) defined in types.c
   function name_tag(tag_declaration) in line 217
      protection public
      14 lines of code
      1 parameters
      2 conditional paths
      uses variable type::tag defined in types.c
      uses variable tag_declaration::name defined in decls.h
      uses macro definition UNNAMED_STRUCT_PREFIX defined in types.c
      uses function sprintf(char *,const char *,(null)) defined in rcs1.c
      uses variable tag_declaration::ast defined in decls.h
      uses variable AST_tag_ref::word1 defined in AST_defs.h
      uses function new_word(region,location,cstring) defined in AST_defs.h
      uses variable parse_region defined in c-parse.h
      uses variable dummy_location defined in c-lex.c
      uses function str2cstring(region,const char *) defined in cstring.h
      uses variable AST_word::cstring defined in AST_defs.h
      uses variable cstring::data defined in cstring.h
   function type_for_size(int,bool) in line 220
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
      uses enumvalue type::tp_error defined in types.c
      uses variable type::size defined in types.c
      uses variable type::u defined in types.c
      uses variable type::primitive defined in types.c
   function type_for_cval(cval,bool) in line 222
      protection public
      11 lines of code
      2 parameters
      3 conditional paths
      uses enumvalue type::tp_signed_char defined in types.c
      uses enumvalue type::tp_first_floating defined in types.c
      uses function type_unsigned(type) defined in types.c
      uses function cval_inrange(cval,type) defined in cval.c
      uses macro definition NULL defined in config.h
   function make_type_var(cstring) in line 225
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses enumvalue type::tk_var defined in types.c
      uses variable type::u defined in types.c
      uses variable type::var defined in types.c
   function type_var(type) in line 226
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable typelist_element::t defined in types.c
      uses variable type::kind defined in types.c
      uses enumvalue type::tk_var defined in types.c
   function type_name(type) in line 227
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable typelist_element::t defined in types.c
      uses variable type::kind defined in types.c
      uses enumvalue type::tk_var defined in types.c
      uses variable type::u defined in types.c
      uses variable type::var defined in types.c
      uses variable cstring::data defined in cstring.h
   variable user_qual_list::next in line 52
      protection public
   variable user_qual_list::qual in line 51
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cqual/cqual-0.981/src/unparse.c
module unparse.c
   macro definition CONSERVATIVE_PARENS in line 30
      protection public
   macro definition INDENT in line 33
      protection public
   macro definition P_TOP in line 36
      protection public
   macro definition P_COMMA in line 37
      protection public
   macro definition P_ASSIGN in line 38
      protection public
   macro definition P_COND in line 39
      protection public
   macro definition P_OR in line 40
      protection public
   macro definition P_AND in line 41
      protection public
   macro definition P_BITOR in line 42
      protection public
   macro definition P_BITXOR in line 43
      protection public
   macro definition P_BITAND in line 44
      protection public
   macro definition P_EQUALS in line 45
      protection public
   macro definition P_REL in line 46
      protection public
   macro definition P_SHIFT in line 47
      protection public
   macro definition P_PLUS in line 48
      protection public
   macro definition P_TIMES in line 49
      protection public
   macro definition P_CAST in line 50
      protection public
   macro definition P_CALL in line 51
      protection public
   macro definition PRTCASE in line 310
      protection public
   macro definition PRTEXPR in line 718
      protection public
   macro definition OPEN in line 757
      protection public
   macro definition CLOSE in line 761
      protection public
   typedef prt_closure in line 67
      protection public
   variable of in line 54
      protection public
   variable indent_level in line 55
      protection public
   variable output_loc in line 56
      protection public
   variable at_line_start in line 57
      protection public
   variable regionof_decl in line 58
      protection public
   variable tempregion in line 60
      protection public
   function indent(void) in line 70
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable indent_level defined in unparse.c
      uses macro definition INDENT defined in unparse.c
   function unindent(void) in line 75
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable indent_level defined in unparse.c
      uses macro definition INDENT defined in unparse.c
   function output_indentation(void) in line 80
      protection public
      6 lines of code
      1 parameters
      2 conditional paths
      uses variable indent_level defined in unparse.c
      uses variable of defined in unparse.c
   function newline(void) in line 87
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses variable of defined in unparse.c
      uses variable output_loc defined in unparse.c
      uses variable Location::lineno defined in location.h
      uses variable at_line_start defined in unparse.c
      uses macro definition TRUE defined in bool.h
   function startline(void) in line 94
      protection public
      4 lines of code
      1 parameters
      2 conditional paths
      uses variable at_line_start defined in unparse.c
      uses function newline(void) defined in unparse.c
   function startline_noindent(void) in line 99
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function startline(void) defined in unparse.c
      uses variable at_line_start defined in unparse.c
      uses macro definition FALSE defined in bool.h
   function output_indent_if_needed(void) in line 105
      protection public
      8 lines of code
      1 parameters
      2 conditional paths
      uses variable at_line_start defined in unparse.c
      uses macro definition FALSE defined in bool.h
      uses function output_indentation(void) defined in unparse.c
   function voutput(char *,va_list) in line 114
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses function output_indent_if_needed(void) defined in unparse.c
      uses variable of defined in unparse.c
   function output(char *,...) in line 120
      protection public
      8 lines of code
      2 parameters
      1 conditional paths
      uses function voutput(char *,va_list) defined in unparse.c
   function outputln(char *,...) in line 129
      protection public
      10 lines of code
      2 parameters
      1 conditional paths
      uses function voutput(char *,va_list) defined in unparse.c
      uses function newline(void) defined in unparse.c
   function output_cstring(cstring) in line 140
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function output_indent_if_needed(void) defined in unparse.c
      uses variable cstring::data defined in cstring.h
      uses variable cstring::length defined in cstring.h
      uses variable of defined in unparse.c
   function output_line_directive(location,bool) in line 146
      protection public
      11 lines of code
      2 parameters
      2 conditional paths
      uses function startline_noindent(void) defined in unparse.c
      uses function outputln(char *,...) defined in unparse.c
      uses variable Location::lineno defined in location.h
      uses variable Location::filename defined in location.h
      uses variable Location::in_system_header defined in location.h
   function set_location(location) in line 158
      protection public
      25 lines of code
      1 parameters
      6 conditional paths
      uses variable Location::filename defined in location.h
      uses variable dummy_location defined in c-lex.c
      uses variable output_loc defined in unparse.c
      uses variable Location::in_system_header defined in location.h
      uses function output_line_directive(location,bool) defined in unparse.c
      uses macro definition TRUE defined in bool.h
      uses variable Location::lineno defined in location.h
      uses function newline(void) defined in unparse.c
      uses macro definition FALSE defined in bool.h
   function output_location(void) in line 184
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable output_loc defined in unparse.c
      uses function prt_toplevel_declarations(declaration) defined in unparse.c
      uses function prt_toplevel_declaration(declaration) defined in unparse.c
      uses function prt_asm_decl(asm_decl) defined in unparse.c
      uses function prt_extension_decl(extension_decl) defined in unparse.c
      uses function prt_data_decl(data_decl) defined in unparse.c
      uses function prt_ellipsis_decl(ellipsis_decl) defined in unparse.c
      uses function prt_function_decl(function_decl) defined in unparse.c
      uses function prt_variable_decl(variable_decl) defined in unparse.c
      uses function prt_declarator(declarator,type_element,attribute) defined in unparse.c
      uses function prt_simple_declarator(declarator,bool) defined in unparse.c
      uses function prt_type_elements(type_element) defined in unparse.c
      uses function prt_type_element(type_element) defined in unparse.c
      uses function prt_typename(typename tname) defined in unparse.c
      uses function prt_typeof_expr(typeof_expr) defined in unparse.c
      uses function prt_typeof_type(typeof_type) defined in unparse.c
      uses function prt_attribute(attribute) defined in unparse.c
      uses function prt_rid(rid) defined in unparse.c
      uses function prt_user_qual(user_qual) defined in unparse.c
      uses function prt_qualifier(qualifier) defined in unparse.c
      uses function prt_tag_ref(tag_ref) defined in unparse.c
      uses function prt_fields(declaration) defined in unparse.c
      uses function prt_enumerators(declaration) defined in unparse.c
      uses function prt_field_declaration(declaration) defined in unparse.c
      uses function prt_field_extension_decl(extension_decl) defined in unparse.c
      uses function prt_field_data_decl(data_decl) defined in unparse.c
      uses function prt_field_decl(field_decl) defined in unparse.c
      uses function prt_enumerator(enumerator) defined in unparse.c
      uses function prt_parameters(declaration) defined in unparse.c
      uses function prt_parameter(declaration) defined in unparse.c
      uses function prt_asttype(asttype) defined in unparse.c
      uses function prt_word(word) defined in unparse.c
      uses function prt_expressions(expression,bool) defined in unparse.c
      uses function prt_expression(expression,int) defined in unparse.c
      uses function prt_comma(comma,int) defined in unparse.c
      uses function prt_sizeof_type(sizeof_type,int) defined in unparse.c
      uses function prt_alignof_type(alignof_type,int) defined in unparse.c
      uses function prt_label_address(label_address,int) defined in unparse.c
      uses function prt_cast(cast,int) defined in unparse.c
      uses function prt_cast_list(cast_list,int) defined in unparse.c
      uses function prt_conditional(conditional,int) defined in unparse.c
      uses function prt_identifier(identifier,int) defined in unparse.c
      uses function prt_compound_expr(compound_expr,int) defined in unparse.c
      uses function prt_function_call(function_call,int) defined in unparse.c
      uses function prt_array_ref(array_ref,int) defined in unparse.c
      uses function prt_binary_ref(binary,int) defined in unparse.c
      uses function prt_field_ref(field_ref,int) defined in unparse.c
      uses function prt_unary(unary,int) defined in unparse.c
      uses function prt_binary(binary,int) defined in unparse.c
      uses function prt_init_list(init_list,int) defined in unparse.c
      uses function prt_init_index(init_index,int) defined in unparse.c
      uses function prt_init_field(init_field,int) defined in unparse.c
      uses function prt_lexical_cst(lexical_cst,int) defined in unparse.c
      uses function prt_string(string,int) defined in unparse.c
      uses function prt_parameter_declarations(declaration) defined in unparse.c
      uses function prt_parameter_declaration(declaration) defined in unparse.c
      uses function prt_statement(statement) defined in unparse.c
      uses function prt_compound_stmt(compound_stmt) defined in unparse.c
      uses function prt_compound_declarations(declaration) defined in unparse.c
      uses function prt_compound_declaration(declaration) defined in unparse.c
      uses function prt_asm_stmt(asm_stmt) defined in unparse.c
      uses function prt_asm_stmt_plain(asm_stmt) defined in unparse.c
      uses function prt_asm_operands(asm_operand) defined in unparse.c
      uses function prt_asm_operand(asm_operand) defined in unparse.c
      uses function prt_if_stmt(if_stmt) defined in unparse.c
      uses function prt_labeled_stmt(labeled_stmt) defined in unparse.c
      uses function prt_expression_stmt(expression_stmt) defined in unparse.c
      uses function prt_while_stmt(while_stmt) defined in unparse.c
      uses function prt_dowhile_stmt(while_stmt) defined in unparse.c
      uses function prt_switch_stmt(switch_stmt) defined in unparse.c
      uses function prt_for_stmt(for_stmt) defined in unparse.c
      uses function prt_break_stmt(break_stmt) defined in unparse.c
      uses function prt_continue_stmt(continue_stmt) defined in unparse.c
      uses function prt_return_stmt(return_stmt) defined in unparse.c
      uses function prt_goto_stmt(goto_stmt) defined in unparse.c
      uses function prt_computed_goto_stmt(computed_goto_stmt) defined in unparse.c
      uses function prt_empty_stmt(empty_stmt) defined in unparse.c
      uses function prt_assert_type_stmt(assert_type_stmt) defined in unparse.c
      uses function prt_change_type_stmt(change_type_stmt) defined in unparse.c
      uses function prt_label(label) defined in unparse.c
      uses function prt_id_label(id_label) defined in unparse.c
      uses function prt_case_label(case_label) defined in unparse.c
      uses function prt_default_label(default_label) defined in unparse.c
      uses function prt_regionof(expression) defined in unparse.c
   function prt_toplevel_declarations(declaration) in line 190
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses macro definition scan_declaration defined in AST_defs.h
      uses function prt_toplevel_declaration(declaration) defined in unparse.c
   function prt_toplevel_declaration(declaration) in line 191
      protection public
      12 lines of code
      1 parameters
      1 conditional paths
      uses function startline(void) defined in unparse.c
      uses variable AST_declaration::kind defined in AST_defs.h
      uses macro definition PRTCASE defined in unparse.c
   function prt_asm_decl(asm_decl) in line 192
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function prt_asm_stmt(asm_stmt) defined in unparse.c
      uses variable AST_asm_decl::asm_stmt defined in AST_defs.h
   function prt_extension_decl(extension_decl) in line 193
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses function set_location(location) defined in unparse.c
      uses variable AST_extension_decl::loc defined in AST_defs.h
      uses function output(char *,...) defined in unparse.c
      uses function prt_toplevel_declaration(declaration) defined in unparse.c
      uses variable AST_extension_decl::decl defined in AST_defs.h
   function prt_data_decl(data_decl) in line 194
      protection public
      15 lines of code
      1 parameters
      2 conditional paths
      uses function prt_type_elements(type_element) defined in unparse.c
      uses variable AST_data_decl::modifiers defined in AST_defs.h
      uses macro definition CAST defined in AST.h
      uses variable AST_data_decl::attributes defined in AST_defs.h
      uses macro definition scan_declaration defined in AST_defs.h
      uses variable AST_data_decl::decls defined in AST_defs.h
      uses function prt_variable_decl(variable_decl) defined in unparse.c
      uses variable AST_declaration::next defined in AST_defs.h
      uses function output(char *,...) defined in unparse.c
      uses function outputln(char *,...) defined in unparse.c
   function prt_ellipsis_decl(ellipsis_decl) in line 195
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function set_location(location) defined in unparse.c
      uses variable AST_ellipsis_decl::loc defined in AST_defs.h
      uses function output(char *,...) defined in unparse.c
   function prt_function_decl(function_decl) in line 196
      protection public
      9 lines of code
      1 parameters
      1 conditional paths
      uses function prt_declarator(declarator,type_element,attribute) defined in unparse.c
      uses variable AST_function_decl::declarator defined in AST_defs.h
      uses variable AST_function_decl::qualifiers defined in AST_defs.h
      uses variable AST_function_decl::attributes defined in AST_defs.h
      uses function startline(void) defined in unparse.c
      uses function prt_parameter_declarations(declaration) defined in unparse.c
      uses variable AST_function_decl::old_parms defined in AST_defs.h
      uses macro definition is_compound_stmt defined in AST_types.h
      uses variable AST_function_decl::stmt defined in AST_defs.h
      uses function prt_statement(statement) defined in unparse.c
      uses function newline(void) defined in unparse.c
   function prt_variable_decl(variable_decl) in line 197
      protection public
      13 lines of code
      1 parameters
      3 conditional paths
      uses function prt_declarator(declarator,type_element,attribute) defined in unparse.c
      uses variable AST_variable_decl::declarator defined in AST_defs.h
      uses macro definition NULL defined in config.h
      uses variable AST_variable_decl::attributes defined in AST_defs.h
      uses variable AST_variable_decl::asm_stmt defined in AST_defs.h
      uses function prt_asm_stmt_plain(asm_stmt) defined in unparse.c
      uses variable AST_variable_decl::arg1 defined in AST_defs.h
      uses function output(char *,...) defined in unparse.c
      uses function prt_expression(expression,int) defined in unparse.c
      uses macro definition P_ASSIGN defined in unparse.c
   function prt_declarator(declarator,type_element,attribute) in line 198
      protection public
      6 lines of code
      3 parameters
      1 conditional paths
      uses function prt_type_elements(type_element) defined in unparse.c
      uses macro definition CAST defined in AST.h
      uses function prt_simple_declarator(declarator,bool) defined in unparse.c
   function prt_simple_declarator(declarator,bool) in line 199
      protection public
      48 lines of code
      2 parameters
      10 conditional paths
      uses variable AST_declarator::kind defined in AST_defs.h
      uses enumvalue kind_function_declarator defined in AST_types.h
      uses macro definition CAST defined in AST.h
      uses macro definition TRUE defined in bool.h
      uses function prt_parameters(declaration) defined in unparse.c
      uses enumvalue kind_array_declarator defined in AST_types.h
      uses variable AST_array_declarator::declarator defined in AST_defs.h
      uses variable AST_array_declarator::arg1 defined in AST_defs.h
      uses function output(char *,...) defined in unparse.c
      uses function set_location(location) defined in unparse.c
      uses variable AST_expression::loc defined in AST_defs.h
      uses function prt_expression(expression,int) defined in unparse.c
      uses macro definition P_TOP defined in unparse.c
      uses enumvalue kind_pointer_declarator defined in AST_types.h
      uses variable AST_pointer_declarator::qualifiers defined in AST_defs.h
      uses variable AST_type_element::loc defined in AST_defs.h
      uses function prt_type_elements(type_element) defined in unparse.c
      uses variable AST_pointer_declarator::declarator defined in AST_defs.h
      uses macro definition FALSE defined in bool.h
      uses enumvalue kind_identifier_declarator defined in AST_types.h
      uses variable AST_declarator::loc defined in AST_defs.h
      uses function output_cstring(cstring) defined in unparse.c
   function prt_type_elements(type_element) in line 200
      protection public
      10 lines of code
      1 parameters
      1 conditional paths
      uses macro definition scan_type_element defined in AST_defs.h
      uses function prt_type_element(type_element) defined in unparse.c
      uses function output(char *,...) defined in unparse.c
   function prt_type_element(type_element) in line 201
      protection public
      19 lines of code
      1 parameters
      2 conditional paths
      uses variable AST_type_element::kind defined in AST_defs.h
      uses macro definition PRTCASE defined in unparse.c
      uses macro definition is_tag_ref defined in AST_types.h
      uses function prt_tag_ref(tag_ref) defined in unparse.c
      uses macro definition CAST defined in AST.h
   function prt_typename(typename tname) in line 202
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function set_location(location) defined in unparse.c
      uses function output(char *,...) defined in unparse.c
   function prt_typeof_expr(typeof_expr) in line 203
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses function set_location(location) defined in unparse.c
      uses variable AST_typeof_expr::loc defined in AST_defs.h
      uses function output(char *,...) defined in unparse.c
      uses function prt_expression(expression,int) defined in unparse.c
      uses variable AST_typeof_expr::arg1 defined in AST_defs.h
      uses macro definition P_TOP defined in unparse.c
   function prt_typeof_type(typeof_type) in line 204
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses function set_location(location) defined in unparse.c
      uses variable AST_typeof_type::loc defined in AST_defs.h
      uses function output(char *,...) defined in unparse.c
      uses function prt_asttype(asttype) defined in unparse.c
      uses variable AST_typeof_type::asttype defined in AST_defs.h
   function prt_attribute(attribute) in line 205
      protection public
      15 lines of code
      1 parameters
      3 conditional paths
      uses function set_location(location) defined in unparse.c
      uses variable AST_attribute::loc defined in AST_defs.h
      uses function output(char *,...) defined in unparse.c
      uses function prt_word(word) defined in unparse.c
      uses variable AST_attribute::word1 defined in AST_defs.h
      uses variable AST_attribute::word2 defined in AST_defs.h
      uses variable AST_attribute::args defined in AST_defs.h
      uses function prt_expressions(expression,bool) defined in unparse.c
      uses macro definition NULL defined in config.h
   function prt_rid(rid) in line 206
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function set_location(location) defined in unparse.c
      uses function output(char *,...) defined in unparse.c
      uses function rid_name(rid) defined in semantics.c
   function prt_user_qual(user_qual) in line 207
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function set_location(location) defined in unparse.c
      uses variable AST_user_qual::loc defined in AST_defs.h
      uses function output(char *,...) defined in unparse.c
      uses variable AST_user_qual::cstring defined in AST_defs.h
   function prt_qualifier(qualifier) in line 208
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function set_location(location) defined in unparse.c
      uses variable AST_qualifier::loc defined in AST_defs.h
      uses function output(char *,...) defined in unparse.c
      uses function qualifier_name(type_quals) defined in types.c
      uses variable AST_qualifier::id defined in AST_defs.h
   function prt_tag_ref(tag_ref) in line 209
      protection public
      26 lines of code
      1 parameters
      8 conditional paths
      uses function set_location(location) defined in unparse.c
      uses variable AST_tag_ref::loc defined in AST_defs.h
      uses variable AST_tag_ref::kind defined in AST_defs.h
      uses enumvalue kind_struct_ref defined in AST_types.h
      uses function output(char *,...) defined in unparse.c
      uses enumvalue kind_union_ref defined in AST_types.h
      uses enumvalue kind_enum_ref defined in AST_types.h
      uses variable AST_tag_ref::word1 defined in AST_defs.h
      uses function prt_word(word) defined in unparse.c
      uses variable AST_tag_ref::defined defined in AST_defs.h
      uses function prt_enumerators(declaration) defined in unparse.c
      uses variable AST_tag_ref::fields defined in AST_defs.h
      uses function prt_fields(declaration) defined in unparse.c
      uses variable AST_tag_ref::attributes defined in AST_defs.h
      uses function prt_type_elements(type_element) defined in unparse.c
      uses macro definition CAST defined in AST.h
   function prt_fields(declaration) in line 210
      protection public
      13 lines of code
      1 parameters
      1 conditional paths
      uses function output(char *,...) defined in unparse.c
      uses function indent(void) defined in unparse.c
      uses function startline(void) defined in unparse.c
      uses macro definition scan_declaration defined in AST_defs.h
      uses function prt_field_declaration(declaration) defined in unparse.c
      uses function unindent(void) defined in unparse.c
   function prt_enumerators(declaration) in line 211
      protection public
      17 lines of code
      1 parameters
      2 conditional paths
      uses function output(char *,...) defined in unparse.c
      uses function indent(void) defined in unparse.c
      uses function startline(void) defined in unparse.c
      uses macro definition scan_declaration defined in AST_defs.h
      uses function prt_enumerator(enumerator) defined in unparse.c
      uses macro definition CAST defined in AST.h
      uses variable AST_declaration::next defined in AST_defs.h
      uses function unindent(void) defined in unparse.c
   function prt_field_declaration(declaration) in line 212
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses macro definition is_extension_decl defined in AST_types.h
      uses function prt_field_extension_decl(extension_decl) defined in unparse.c
      uses macro definition CAST defined in AST.h
      uses function prt_field_data_decl(data_decl) defined in unparse.c
   function prt_field_extension_decl(extension_decl) in line 213
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses function set_location(location) defined in unparse.c
      uses variable AST_extension_decl::loc defined in AST_defs.h
      uses function output(char *,...) defined in unparse.c
      uses function prt_field_declaration(declaration) defined in unparse.c
      uses variable AST_extension_decl::decl defined in AST_defs.h
   function prt_field_data_decl(data_decl) in line 214
      protection public
      15 lines of code
      1 parameters
      2 conditional paths
      uses function prt_type_elements(type_element) defined in unparse.c
      uses variable AST_data_decl::modifiers defined in AST_defs.h
      uses macro definition CAST defined in AST.h
      uses variable AST_data_decl::attributes defined in AST_defs.h
      uses macro definition scan_declaration defined in AST_defs.h
      uses variable AST_data_decl::decls defined in AST_defs.h
      uses function prt_field_decl(field_decl) defined in unparse.c
      uses variable AST_declaration::next defined in AST_defs.h
      uses function output(char *,...) defined in unparse.c
      uses function outputln(char *,...) defined in unparse.c
   function prt_field_decl(field_decl) in line 215
      protection public
      9 lines of code
      1 parameters
      2 conditional paths
      uses function prt_declarator(declarator,type_element,attribute) defined in unparse.c
      uses variable AST_field_decl::declarator defined in AST_defs.h
      uses macro definition NULL defined in config.h
      uses variable AST_field_decl::attributes defined in AST_defs.h
      uses variable AST_field_decl::arg1 defined in AST_defs.h
      uses function output(char *,...) defined in unparse.c
      uses function prt_expression(expression,int) defined in unparse.c
      uses macro definition P_TOP defined in unparse.c
   function prt_enumerator(enumerator) in line 216
      protection public
      10 lines of code
      1 parameters
      2 conditional paths
      uses function set_location(location) defined in unparse.c
      uses variable AST_enumerator::loc defined in AST_defs.h
      uses function output_cstring(cstring) defined in unparse.c
      uses variable AST_enumerator::cstring defined in AST_defs.h
      uses variable AST_enumerator::arg1 defined in AST_defs.h
      uses function output(char *,...) defined in unparse.c
      uses function prt_expression(expression,int) defined in unparse.c
      uses macro definition P_ASSIGN defined in unparse.c
   function prt_parameters(declaration) in line 217
      protection public
      13 lines of code
      1 parameters
      2 conditional paths
      uses function output(char *,...) defined in unparse.c
      uses macro definition scan_declaration defined in AST_defs.h
      uses function prt_parameter(declaration) defined in unparse.c
      uses variable AST_declaration::next defined in AST_defs.h
   function prt_parameter(declaration) in line 218
      protection public
      23 lines of code
      1 parameters
      4 conditional paths
      uses variable AST_declaration::kind defined in AST_defs.h
      uses enumvalue kind_oldidentifier_decl defined in AST_types.h
      uses function set_location(location) defined in unparse.c
      uses variable AST_declaration::loc defined in AST_defs.h
      uses function output_cstring(cstring) defined in unparse.c
      uses macro definition CAST defined in AST.h
      uses enumvalue kind_ellipsis_decl defined in AST_types.h
      uses function output(char *,...) defined in unparse.c
      uses enumvalue kind_data_decl defined in AST_types.h
      uses variable AST_data_decl::decls defined in AST_defs.h
      uses function prt_type_elements(type_element) defined in unparse.c
      uses variable AST_data_decl::attributes defined in AST_defs.h
      uses function prt_declarator(declarator,type_element,attribute) defined in unparse.c
      uses variable AST_variable_decl::declarator defined in AST_defs.h
      uses variable AST_data_decl::modifiers defined in AST_defs.h
      uses variable AST_variable_decl::attributes defined in AST_defs.h
   function prt_asttype(asttype) in line 219
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function prt_declarator(declarator,type_element,attribute) defined in unparse.c
      uses variable AST_asttype::declarator defined in AST_defs.h
      uses variable AST_asttype::qualifiers defined in AST_defs.h
      uses macro definition NULL defined in config.h
   function prt_word(word) in line 220
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function set_location(location) defined in unparse.c
      uses variable AST_word::loc defined in AST_defs.h
      uses function output_cstring(cstring) defined in unparse.c
      uses variable AST_word::cstring defined in AST_defs.h
   function prt_expressions(expression,bool) in line 222
      protection public
      11 lines of code
      2 parameters
      2 conditional paths
      uses macro definition scan_expression defined in AST_defs.h
      uses function output(char *,...) defined in unparse.c
      uses macro definition FALSE defined in bool.h
      uses function prt_expression(expression,int) defined in unparse.c
      uses macro definition P_ASSIGN defined in unparse.c
   function prt_expression(expression,int) in line 223
      protection public
      33 lines of code
      2 parameters
      1 conditional paths
      uses variable AST_expression::kind defined in AST_defs.h
      uses macro definition PRTEXPR defined in unparse.c
      uses enumvalue kind_string_cst defined in AST_types.h
      uses macro definition is_unary defined in AST_types.h
      uses function prt_unary(unary,int) defined in unparse.c
      uses macro definition CAST defined in AST.h
      uses macro definition is_binary defined in AST_types.h
      uses function prt_binary(binary,int) defined in unparse.c
   function prt_comma(comma,int) in line 224
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
      uses macro definition OPEN defined in unparse.c
      uses macro definition P_COMMA defined in unparse.c
      uses function prt_expressions(expression,bool) defined in unparse.c
      uses variable AST_comma::arg1 defined in AST_defs.h
      uses macro definition TRUE defined in bool.h
      uses macro definition CLOSE defined in unparse.c
   function prt_sizeof_type(sizeof_type,int) in line 225
      protection public
      7 lines of code
      2 parameters
      1 conditional paths
      uses function set_location(location) defined in unparse.c
      uses variable AST_sizeof_type::loc defined in AST_defs.h
      uses function output(char *,...) defined in unparse.c
      uses function prt_asttype(asttype) defined in unparse.c
      uses variable AST_sizeof_type::asttype defined in AST_defs.h
   function prt_alignof_type(alignof_type,int) in line 226
      protection public
      7 lines of code
      2 parameters
      1 conditional paths
      uses function set_location(location) defined in unparse.c
      uses variable AST_alignof_type::loc defined in AST_defs.h
      uses function output(char *,...) defined in unparse.c
      uses function prt_asttype(asttype) defined in unparse.c
      uses variable AST_alignof_type::asttype defined in AST_defs.h
   function prt_label_address(label_address,int) in line 227
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
      uses function set_location(location) defined in unparse.c
      uses variable AST_label_address::loc defined in AST_defs.h
      uses function output(char *,...) defined in unparse.c
      uses function prt_id_label(id_label) defined in unparse.c
      uses variable AST_label_address::id_label defined in AST_defs.h
   function prt_cast(cast,int) in line 228
      protection public
      10 lines of code
      2 parameters
      1 conditional paths
      uses macro definition OPEN defined in unparse.c
      uses macro definition P_CAST defined in unparse.c
      uses function set_location(location) defined in unparse.c
      uses variable AST_cast::loc defined in AST_defs.h
      uses function output(char *,...) defined in unparse.c
      uses function prt_asttype(asttype) defined in unparse.c
      uses variable AST_cast::asttype defined in AST_defs.h
      uses function prt_expression(expression,int) defined in unparse.c
      uses variable AST_cast::arg1 defined in AST_defs.h
      uses macro definition CLOSE defined in unparse.c
   function prt_cast_list(cast_list,int) in line 229
      protection public
      10 lines of code
      2 parameters
      1 conditional paths
      uses macro definition OPEN defined in unparse.c
      uses macro definition P_CAST defined in unparse.c
      uses function set_location(location) defined in unparse.c
      uses variable AST_cast_list::loc defined in AST_defs.h
      uses function output(char *,...) defined in unparse.c
      uses function prt_asttype(asttype) defined in unparse.c
      uses variable AST_cast_list::asttype defined in AST_defs.h
      uses function prt_init_list(init_list,int) defined in unparse.c
      uses macro definition CAST defined in AST.h
      uses variable AST_cast_list::init_expr defined in AST_defs.h
      uses macro definition P_ASSIGN defined in unparse.c
      uses macro definition CLOSE defined in unparse.c
   function prt_conditional(conditional,int) in line 230
      protection public
      11 lines of code
      2 parameters
      2 conditional paths
      uses macro definition OPEN defined in unparse.c
      uses macro definition P_COND defined in unparse.c
      uses function prt_expression(expression,int) defined in unparse.c
      uses variable AST_conditional::condition defined in AST_defs.h
      uses function output(char *,...) defined in unparse.c
      uses variable AST_conditional::arg1 defined in AST_defs.h
      uses variable AST_conditional::arg2 defined in AST_defs.h
      uses macro definition CLOSE defined in unparse.c
   function prt_identifier(identifier,int) in line 231
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses function set_location(location) defined in unparse.c
      uses variable AST_identifier::loc defined in AST_defs.h
      uses function output_cstring(cstring) defined in unparse.c
      uses variable AST_identifier::cstring defined in AST_defs.h
   function prt_compound_expr(compound_expr,int) in line 232
      protection public
      7 lines of code
      2 parameters
      1 conditional paths
      uses function set_location(location) defined in unparse.c
      uses variable AST_compound_expr::loc defined in AST_defs.h
      uses function output(char *,...) defined in unparse.c
      uses function prt_compound_stmt(compound_stmt) defined in unparse.c
      uses macro definition CAST defined in AST.h
      uses variable AST_compound_expr::stmt defined in AST_defs.h
   function prt_function_call(function_call,int) in line 233
      protection public
      20 lines of code
      2 parameters
      2 conditional paths
      uses variable AST_function_call::va_arg_call defined in AST_defs.h
      uses function output(char *,...) defined in unparse.c
      uses function prt_expression(expression,int) defined in unparse.c
      uses variable AST_function_call::args defined in AST_defs.h
      uses macro definition P_ASSIGN defined in unparse.c
      uses function prt_asttype(asttype) defined in unparse.c
      uses variable AST_function_call::arg1 defined in AST_defs.h
      uses macro definition P_CALL defined in unparse.c
      uses function prt_expressions(expression,bool) defined in unparse.c
      uses macro definition TRUE defined in bool.h
   function prt_array_ref(array_ref,int) in line 234
      protection public
      7 lines of code
      2 parameters
      1 conditional paths
      uses function prt_expression(expression,int) defined in unparse.c
      uses variable AST_array_ref::arg1 defined in AST_defs.h
      uses macro definition P_CALL defined in unparse.c
      uses function output(char *,...) defined in unparse.c
      uses variable AST_array_ref::arg2 defined in AST_defs.h
      uses macro definition P_TOP defined in unparse.c
   function prt_binary_ref(binary,int) in line 235
      protection public
      7 lines of code
      2 parameters
      1 conditional paths
      uses function prt_expression(expression,int) defined in unparse.c
      uses variable AST_binary::arg1 defined in AST_defs.h
      uses macro definition P_CALL defined in unparse.c
      uses function output(char *,...) defined in unparse.c
      uses variable AST_binary::arg2 defined in AST_defs.h
      uses macro definition P_TOP defined in unparse.c
   function prt_field_ref(field_ref,int) in line 236
      protection public
      15 lines of code
      2 parameters
      2 conditional paths
      uses macro definition is_dereference defined in AST_types.h
      uses variable AST_field_ref::arg1 defined in AST_defs.h
      uses function prt_expression(expression,int) defined in unparse.c
      uses macro definition CAST defined in AST.h
      uses macro definition P_CALL defined in unparse.c
      uses function output(char *,...) defined in unparse.c
      uses function output_cstring(cstring) defined in unparse.c
      uses variable AST_field_ref::cstring defined in AST_defs.h
   function prt_unary(unary,int) in line 237
      protection public
      56 lines of code
      2 parameters
      23 conditional paths
      uses macro definition NULL defined in config.h
      uses macro definition is_dereference defined in AST_types.h
      uses macro definition is_plus defined in AST_types.h
      uses variable AST_unary::arg1 defined in AST_defs.h
      uses macro definition CAST defined in AST.h
      uses function type_array(type) defined in types.c
      uses variable AST_binary::arg1 defined in AST_defs.h
      uses variable AST_expression::type defined in AST_defs.h
      uses function prt_binary_ref(binary,int) defined in unparse.c
      uses variable AST_unary::kind defined in AST_defs.h
      uses enumvalue kind_dereference defined in AST_types.h
      uses enumvalue kind_extension_expr defined in AST_types.h
      uses enumvalue kind_sizeof_expr defined in AST_types.h
      uses macro definition P_CALL defined in unparse.c
      uses enumvalue kind_alignof_expr defined in AST_types.h
      uses enumvalue kind_realpart defined in AST_types.h
      uses enumvalue kind_imagpart defined in AST_types.h
      uses enumvalue kind_address_of defined in AST_types.h
      uses enumvalue kind_unary_minus defined in AST_types.h
      uses enumvalue kind_unary_plus defined in AST_types.h
      uses enumvalue kind_preincrement defined in AST_types.h
      uses enumvalue kind_predecrement defined in AST_types.h
      uses enumvalue kind_postincrement defined in AST_types.h
      uses enumvalue kind_postdecrement defined in AST_types.h
      uses enumvalue kind_conjugate defined in AST_types.h
      uses enumvalue kind_bitnot defined in AST_types.h
      uses enumvalue kind_not defined in AST_types.h
      uses macro definition OPEN defined in unparse.c
      uses macro definition P_CAST defined in unparse.c
      uses function set_location(location) defined in unparse.c
      uses variable AST_unary::loc defined in AST_defs.h
      uses function output(char *,...) defined in unparse.c
      uses macro definition is_unary defined in AST_types.h
      uses function prt_expression(expression,int) defined in unparse.c
      uses macro definition CLOSE defined in unparse.c
   function prt_binary(binary,int) in line 238
      protection public
      79 lines of code
      2 parameters
      36 conditional paths
      uses function binary_op_name(ast_kind) defined in unparse.c
      uses variable AST_binary::kind defined in AST_defs.h
      uses macro definition FALSE defined in bool.h
      uses enumvalue kind_times defined in AST_types.h
      uses enumvalue kind_divide defined in AST_types.h
      uses enumvalue kind_modulo defined in AST_types.h
      uses macro definition P_TIMES defined in unparse.c
      uses macro definition P_CAST defined in unparse.c
      uses enumvalue kind_plus defined in AST_types.h
      uses enumvalue kind_minus defined in AST_types.h
      uses macro definition P_PLUS defined in unparse.c
      uses enumvalue kind_lshift defined in AST_types.h
      uses enumvalue kind_rshift defined in AST_types.h
      uses macro definition P_SHIFT defined in unparse.c
      uses macro definition CONSERVATIVE_PARENS defined in unparse.c
      uses enumvalue kind_leq defined in AST_types.h
      uses enumvalue kind_geq defined in AST_types.h
      uses enumvalue kind_lt defined in AST_types.h
      uses enumvalue kind_gt defined in AST_types.h
      uses macro definition P_REL defined in unparse.c
      uses enumvalue kind_eq defined in AST_types.h
      uses enumvalue kind_ne defined in AST_types.h
      uses macro definition P_EQUALS defined in unparse.c
      uses enumvalue kind_bitand defined in AST_types.h
      uses macro definition P_BITAND defined in unparse.c
      uses enumvalue kind_bitxor defined in AST_types.h
      uses macro definition P_BITXOR defined in unparse.c
      uses enumvalue kind_bitor defined in AST_types.h
      uses macro definition P_BITOR defined in unparse.c
      uses enumvalue kind_andand defined in AST_types.h
      uses macro definition P_AND defined in unparse.c
      uses enumvalue kind_oror defined in AST_types.h
      uses macro definition P_OR defined in unparse.c
      uses enumvalue kind_assign defined in AST_types.h
      uses enumvalue kind_plus_assign defined in AST_types.h
      uses enumvalue kind_minus_assign defined in AST_types.h
      uses enumvalue kind_times_assign defined in AST_types.h
      uses enumvalue kind_divide_assign defined in AST_types.h
      uses enumvalue kind_modulo_assign defined in AST_types.h
      uses enumvalue kind_lshift_assign defined in AST_types.h
      uses enumvalue kind_rshift_assign defined in AST_types.h
      uses enumvalue kind_bitand_assign defined in AST_types.h
      uses enumvalue kind_bitor_assign defined in AST_types.h
      uses enumvalue kind_bitxor_assign defined in AST_types.h
      uses macro definition P_ASSIGN defined in unparse.c
      uses macro definition OPEN defined in unparse.c
      uses function prt_expression(expression,int) defined in unparse.c
      uses variable AST_binary::arg1 defined in AST_defs.h
      uses function set_location(location) defined in unparse.c
      uses variable AST_binary::loc defined in AST_defs.h
      uses function output(char *,...) defined in unparse.c
      uses variable AST_binary::arg2 defined in AST_defs.h
      uses macro definition CLOSE defined in unparse.c
   function prt_init_list(init_list,int) in line 239
      protection public
      7 lines of code
      2 parameters
      1 conditional paths
      uses function set_location(location) defined in unparse.c
      uses variable AST_init_list::loc defined in AST_defs.h
      uses function output(char *,...) defined in unparse.c
      uses function prt_expressions(expression,bool) defined in unparse.c
      uses variable AST_init_list::args defined in AST_defs.h
      uses macro definition TRUE defined in bool.h
   function prt_init_index(init_index,int) in line 240
      protection public
      13 lines of code
      2 parameters
      2 conditional paths
      uses function set_location(location) defined in unparse.c
      uses variable AST_init_index::loc defined in AST_defs.h
      uses function output(char *,...) defined in unparse.c
      uses function prt_expression(expression,int) defined in unparse.c
      uses variable AST_init_index::arg1 defined in AST_defs.h
      uses macro definition P_ASSIGN defined in unparse.c
      uses variable AST_init_index::arg2 defined in AST_defs.h
      uses variable AST_init_index::init_expr defined in AST_defs.h
   function prt_init_field(init_field,int) in line 241
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
      uses function prt_word(word) defined in unparse.c
      uses variable AST_init_field::word1 defined in AST_defs.h
      uses function output(char *,...) defined in unparse.c
      uses function prt_expression(expression,int) defined in unparse.c
      uses variable AST_init_field::init_expr defined in AST_defs.h
      uses macro definition P_ASSIGN defined in unparse.c
   function prt_lexical_cst(lexical_cst,int) in line 242
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses function set_location(location) defined in unparse.c
      uses variable AST_lexical_cst::loc defined in AST_defs.h
      uses function output_cstring(cstring) defined in unparse.c
      uses variable AST_lexical_cst::cstring defined in AST_defs.h
   function prt_string(string,int) in line 243
      protection public
      7 lines of code
      2 parameters
      1 conditional paths
      uses macro definition scan_expression defined in AST_defs.h
      uses variable AST_string::strings defined in AST_defs.h
      uses function prt_expression(expression,int) defined in unparse.c
      uses macro definition P_TOP defined in unparse.c
   function prt_parameter_declarations(declaration) in line 244
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses macro definition scan_declaration defined in AST_defs.h
      uses function prt_parameter_declaration(declaration) defined in unparse.c
   function prt_parameter_declaration(declaration) in line 245
      protection public
      10 lines of code
      1 parameters
      1 conditional paths
      uses function startline(void) defined in unparse.c
      uses variable AST_declaration::kind defined in AST_defs.h
      uses macro definition PRTCASE defined in unparse.c
   function prt_statement(statement) in line 247
      protection public
      24 lines of code
      1 parameters
      1 conditional paths
      uses variable AST_statement::kind defined in AST_defs.h
      uses macro definition PRTCASE defined in unparse.c
   function prt_compound_stmt(compound_stmt) in line 248
      protection public
      32 lines of code
      1 parameters
      4 conditional paths
      uses function set_location(location) defined in unparse.c
      uses variable AST_compound_stmt::loc defined in AST_defs.h
      uses function outputln(char *,...) defined in unparse.c
      uses function indent(void) defined in unparse.c
      uses variable AST_compound_stmt::id_labels defined in AST_defs.h
      uses function output(char *,...) defined in unparse.c
      uses macro definition scan_id_label defined in AST_defs.h
      uses function prt_id_label(id_label) defined in unparse.c
      uses variable AST_id_label::next defined in AST_defs.h
      uses variable AST_compound_stmt::decls defined in AST_defs.h
      uses function prt_compound_declarations(declaration) defined in unparse.c
      uses function newline(void) defined in unparse.c
      uses macro definition scan_statement defined in AST_defs.h
      uses variable AST_compound_stmt::stmts defined in AST_defs.h
      uses function prt_statement(statement) defined in unparse.c
      uses function unindent(void) defined in unparse.c
   function prt_compound_declarations(declaration) in line 249
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses macro definition scan_declaration defined in AST_defs.h
      uses function prt_compound_declaration(declaration) defined in unparse.c
   function prt_compound_declaration(declaration) in line 250
      protection public
      11 lines of code
      1 parameters
      1 conditional paths
      uses function startline(void) defined in unparse.c
      uses variable AST_declaration::kind defined in AST_defs.h
      uses macro definition PRTCASE defined in unparse.c
   function prt_asm_stmt(asm_stmt) in line 251
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function prt_asm_stmt_plain(asm_stmt) defined in unparse.c
      uses function output(char *,...) defined in unparse.c
   function prt_asm_stmt_plain(asm_stmt) in line 252
      protection public
      27 lines of code
      1 parameters
      5 conditional paths
      uses function set_location(location) defined in unparse.c
      uses variable AST_asm_stmt::loc defined in AST_defs.h
      uses function output(char *,...) defined in unparse.c
      uses variable AST_asm_stmt::qualifiers defined in AST_defs.h
      uses function prt_type_elements(type_element) defined in unparse.c
      uses function prt_expression(expression,int) defined in unparse.c
      uses variable AST_asm_stmt::arg1 defined in AST_defs.h
      uses macro definition P_TOP defined in unparse.c
      uses variable AST_asm_stmt::asm_operands1 defined in AST_defs.h
      uses variable AST_asm_stmt::asm_operands2 defined in AST_defs.h
      uses variable AST_asm_stmt::asm_clobbers defined in AST_defs.h
      uses function prt_asm_operands(asm_operand) defined in unparse.c
      uses function prt_expressions(expression,bool) defined in unparse.c
      uses macro definition CAST defined in AST.h
      uses macro definition TRUE defined in bool.h
   function prt_asm_operands(asm_operand) in line 253
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses macro definition scan_asm_operand defined in AST_defs.h
      uses function prt_asm_operand(asm_operand) defined in unparse.c
      uses variable AST_asm_operand::next defined in AST_defs.h
      uses function output(char *,...) defined in unparse.c
   function prt_asm_operand(asm_operand) in line 254
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses function prt_string(string,int) defined in unparse.c
      uses variable AST_asm_operand::string defined in AST_defs.h
      uses macro definition P_TOP defined in unparse.c
      uses function output(char *,...) defined in unparse.c
      uses function prt_expression(expression,int) defined in unparse.c
      uses variable AST_asm_operand::arg1 defined in AST_defs.h
   function prt_if_stmt(if_stmt) in line 255
      protection public
      19 lines of code
      1 parameters
      2 conditional paths
      uses function set_location(location) defined in unparse.c
      uses variable AST_if_stmt::loc defined in AST_defs.h
      uses function output(char *,...) defined in unparse.c
      uses function prt_expression(expression,int) defined in unparse.c
      uses variable AST_if_stmt::condition defined in AST_defs.h
      uses macro definition CONSERVATIVE_PARENS defined in unparse.c
      uses macro definition P_COND defined in unparse.c
      uses macro definition P_TOP defined in unparse.c
      uses function indent(void) defined in unparse.c
      uses function prt_as_compound(statement) defined in unparse.c
      uses variable AST_if_stmt::stmt1 defined in AST_defs.h
      uses function unindent(void) defined in unparse.c
      uses variable AST_if_stmt::stmt2 defined in AST_defs.h
      uses function startline(void) defined in unparse.c
   function prt_labeled_stmt(labeled_stmt) in line 256
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses function prt_label(label) defined in unparse.c
      uses variable AST_labeled_stmt::label defined in AST_defs.h
      uses function output(char *,...) defined in unparse.c
      uses function indent(void) defined in unparse.c
      uses function prt_statement(statement) defined in unparse.c
      uses variable AST_labeled_stmt::stmt defined in AST_defs.h
      uses function unindent(void) defined in unparse.c
   function prt_expression_stmt(expression_stmt) in line 257
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function prt_expression(expression,int) defined in unparse.c
      uses variable AST_expression_stmt::arg1 defined in AST_defs.h
      uses macro definition P_TOP defined in unparse.c
      uses function outputln(char *,...) defined in unparse.c
   function prt_while_stmt(while_stmt) in line 258
      protection public
      11 lines of code
      1 parameters
      1 conditional paths
      uses function set_location(location) defined in unparse.c
      uses variable AST_conditional_stmt::loc defined in AST_defs.h
      uses function output(char *,...) defined in unparse.c
      uses function prt_expression(expression,int) defined in unparse.c
      uses variable AST_conditional_stmt::condition defined in AST_defs.h
      uses macro definition CONSERVATIVE_PARENS defined in unparse.c
      uses macro definition P_COND defined in unparse.c
      uses macro definition P_TOP defined in unparse.c
      uses function indent(void) defined in unparse.c
      uses function prt_statement(statement) defined in unparse.c
      uses variable AST_conditional_stmt::stmt defined in AST_defs.h
      uses function unindent(void) defined in unparse.c
   function prt_dowhile_stmt(while_stmt) in line 259
      protection public
      13 lines of code
      1 parameters
      1 conditional paths
      uses function set_location(location) defined in unparse.c
      uses variable AST_conditional_stmt::loc defined in AST_defs.h
      uses function output(char *,...) defined in unparse.c
      uses function indent(void) defined in unparse.c
      uses function prt_statement(statement) defined in unparse.c
      uses variable AST_conditional_stmt::stmt defined in AST_defs.h
      uses function unindent(void) defined in unparse.c
      uses function startline(void) defined in unparse.c
      uses function prt_expression(expression,int) defined in unparse.c
      uses variable AST_conditional_stmt::condition defined in AST_defs.h
      uses macro definition CONSERVATIVE_PARENS defined in unparse.c
      uses macro definition P_COND defined in unparse.c
      uses macro definition P_TOP defined in unparse.c
      uses function outputln(char *,...) defined in unparse.c
   function prt_switch_stmt(switch_stmt) in line 260
      protection public
      11 lines of code
      1 parameters
      1 conditional paths
      uses function set_location(location) defined in unparse.c
      uses variable AST_switch_stmt::loc defined in AST_defs.h
      uses function output(char *,...) defined in unparse.c
      uses function prt_expression(expression,int) defined in unparse.c
      uses variable AST_switch_stmt::condition defined in AST_defs.h
      uses macro definition CONSERVATIVE_PARENS defined in unparse.c
      uses macro definition P_COND defined in unparse.c
      uses macro definition P_TOP defined in unparse.c
      uses function indent(void) defined in unparse.c
      uses function prt_statement(statement) defined in unparse.c
      uses variable AST_switch_stmt::stmt defined in AST_defs.h
      uses function unindent(void) defined in unparse.c
   function prt_for_stmt(for_stmt) in line 261
      protection public
      17 lines of code
      1 parameters
      4 conditional paths
      uses function set_location(location) defined in unparse.c
      uses variable AST_for_stmt::loc defined in AST_defs.h
      uses function output(char *,...) defined in unparse.c
      uses variable AST_for_stmt::arg1 defined in AST_defs.h
      uses function prt_expression(expression,int) defined in unparse.c
      uses macro definition P_TOP defined in unparse.c
      uses variable AST_for_stmt::arg2 defined in AST_defs.h
      uses variable AST_for_stmt::arg3 defined in AST_defs.h
      uses function indent(void) defined in unparse.c
      uses function prt_statement(statement) defined in unparse.c
      uses variable AST_for_stmt::stmt defined in AST_defs.h
      uses function unindent(void) defined in unparse.c
   function prt_break_stmt(break_stmt) in line 262
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function set_location(location) defined in unparse.c
      uses variable AST_break_stmt::loc defined in AST_defs.h
      uses function outputln(char *,...) defined in unparse.c
   function prt_continue_stmt(continue_stmt) in line 263
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function set_location(location) defined in unparse.c
      uses variable AST_continue_stmt::loc defined in AST_defs.h
      uses function outputln(char *,...) defined in unparse.c
   function prt_return_stmt(return_stmt) in line 264
      protection public
      12 lines of code
      1 parameters
      2 conditional paths
      uses function set_location(location) defined in unparse.c
      uses variable AST_return_stmt::loc defined in AST_defs.h
      uses variable AST_return_stmt::arg1 defined in AST_defs.h
      uses function output(char *,...) defined in unparse.c
      uses function prt_expression(expression,int) defined in unparse.c
      uses macro definition P_TOP defined in unparse.c
      uses function outputln(char *,...) defined in unparse.c
   function prt_goto_stmt(goto_stmt) in line 265
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses function set_location(location) defined in unparse.c
      uses variable AST_goto_stmt::loc defined in AST_defs.h
      uses function output(char *,...) defined in unparse.c
      uses function prt_id_label(id_label) defined in unparse.c
      uses variable AST_goto_stmt::id_label defined in AST_defs.h
      uses function outputln(char *,...) defined in unparse.c
   function prt_computed_goto_stmt(computed_goto_stmt) in line 266
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses function set_location(location) defined in unparse.c
      uses variable AST_computed_goto_stmt::loc defined in AST_defs.h
      uses function output(char *,...) defined in unparse.c
      uses function prt_expression(expression,int) defined in unparse.c
      uses variable AST_computed_goto_stmt::arg1 defined in AST_defs.h
      uses macro definition P_TOP defined in unparse.c
      uses function outputln(char *,...) defined in unparse.c
   function prt_empty_stmt(empty_stmt) in line 267
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function set_location(location) defined in unparse.c
      uses variable AST_empty_stmt::loc defined in AST_defs.h
      uses function outputln(char *,...) defined in unparse.c
   function prt_assert_type_stmt(assert_type_stmt) in line 268
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses function output(char *,...) defined in unparse.c
      uses function prt_expression(expression,int) defined in unparse.c
      uses variable AST_assert_type_stmt::arg1 defined in AST_defs.h
      uses macro definition P_TOP defined in unparse.c
      uses function prt_asttype(asttype) defined in unparse.c
      uses variable AST_assert_type_stmt::asttype defined in AST_defs.h
      uses function outputln(char *,...) defined in unparse.c
   function prt_change_type_stmt(change_type_stmt) in line 269
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses function output(char *,...) defined in unparse.c
      uses function prt_expression(expression,int) defined in unparse.c
      uses variable AST_change_type_stmt::arg1 defined in AST_defs.h
      uses macro definition P_TOP defined in unparse.c
      uses function prt_asttype(asttype) defined in unparse.c
      uses variable AST_change_type_stmt::asttype defined in AST_defs.h
      uses function outputln(char *,...) defined in unparse.c
   function prt_label(label) in line 271
      protection public
      10 lines of code
      1 parameters
      1 conditional paths
      uses variable AST_label::kind defined in AST_defs.h
      uses macro definition PRTCASE defined in unparse.c
   function prt_id_label(id_label) in line 272
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function set_location(location) defined in unparse.c
      uses variable AST_id_label::loc defined in AST_defs.h
      uses function output_cstring(cstring) defined in unparse.c
      uses variable AST_id_label::cstring defined in AST_defs.h
   function prt_case_label(case_label) in line 273
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses function set_location(location) defined in unparse.c
      uses variable AST_case_label::loc defined in AST_defs.h
      uses function output(char *,...) defined in unparse.c
      uses function prt_expression(expression,int) defined in unparse.c
      uses variable AST_case_label::arg1 defined in AST_defs.h
      uses macro definition P_ASSIGN defined in unparse.c
      uses variable AST_case_label::arg2 defined in AST_defs.h
   function prt_default_label(default_label) in line 274
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function set_location(location) defined in unparse.c
      uses variable AST_default_label::loc defined in AST_defs.h
      uses function output(char *,...) defined in unparse.c
   function prt_regionof(expression) in line 276
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function unparse_start(FILE *) in line 278
      protection public
      11 lines of code
      1 parameters
      1 conditional paths
      uses variable tempregion defined in unparse.c
      uses function newregion(void) defined in regions.c
      uses variable of defined in unparse.c
      uses variable output_loc defined in unparse.c
      uses macro definition ralloc defined in regions.h
      uses variable dummy_location defined in c-lex.c
      uses variable at_line_start defined in unparse.c
      uses macro definition TRUE defined in bool.h
      uses variable indent_level defined in unparse.c
      uses variable regionof_decl defined in unparse.c
      uses function lookup_global_id(const char *) defined in semantics.c
   function unparse_end(void) in line 290
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function deleteregion_ptr(region *) defined in regions.c
      uses variable tempregion defined in unparse.c
   function unparse(FILE *,declaration) in line 295
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
      uses function unparse_start(FILE *) defined in unparse.c
      uses function prt_toplevel_declarations(declaration) defined in unparse.c
      uses function unparse_end(void) defined in unparse.c
   function binary_op_name(ast_kind) in line 953
      protection public
      36 lines of code
      1 parameters
      1 conditional paths
      uses enumvalue kind_plus defined in AST_types.h
      uses enumvalue kind_minus defined in AST_types.h
      uses enumvalue kind_times defined in AST_types.h
      uses enumvalue kind_divide defined in AST_types.h
      uses enumvalue kind_modulo defined in AST_types.h
      uses enumvalue kind_lshift defined in AST_types.h
      uses enumvalue kind_rshift defined in AST_types.h
      uses enumvalue kind_leq defined in AST_types.h
      uses enumvalue kind_geq defined in AST_types.h
      uses enumvalue kind_lt defined in AST_types.h
      uses enumvalue kind_gt defined in AST_types.h
      uses enumvalue kind_eq defined in AST_types.h
      uses enumvalue kind_ne defined in AST_types.h
      uses enumvalue kind_bitand defined in AST_types.h
      uses enumvalue kind_bitor defined in AST_types.h
      uses enumvalue kind_bitxor defined in AST_types.h
      uses enumvalue kind_andand defined in AST_types.h
      uses enumvalue kind_oror defined in AST_types.h
      uses enumvalue kind_assign defined in AST_types.h
      uses enumvalue kind_plus_assign defined in AST_types.h
      uses enumvalue kind_minus_assign defined in AST_types.h
      uses enumvalue kind_times_assign defined in AST_types.h
      uses enumvalue kind_divide_assign defined in AST_types.h
      uses enumvalue kind_modulo_assign defined in AST_types.h
      uses enumvalue kind_lshift_assign defined in AST_types.h
      uses enumvalue kind_rshift_assign defined in AST_types.h
      uses enumvalue kind_bitand_assign defined in AST_types.h
      uses enumvalue kind_bitor_assign defined in AST_types.h
      uses enumvalue kind_bitxor_assign defined in AST_types.h
   function prt_nelements(expression) in line 1084
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
      uses function output(char *,...) defined in unparse.c
      uses function prt_expression(expression,int) defined in unparse.c
      uses macro definition P_CAST defined in unparse.c
      uses function type_array(type) defined in types.c
      uses function type_array_of(type) defined in types.c
   function prt_as_compound(statement) in line 1153
      protection public
      11 lines of code
      1 parameters
      3 conditional paths
      uses macro definition is_compound_stmt defined in AST_types.h
      uses function outputln(char *,...) defined in unparse.c
      uses function prt_statement(statement) defined in unparse.c
      uses function startline(void) defined in unparse.c
   variable prt_closure::fn in line 63
      protection public
   variable prt_closure::name in line 65
      protection public
   variable prt_closure::parent in line 66
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cqual/cqual-0.981/src/unparse.h
module unparse.h
   function unparse(FILE *,declaration) in line 26
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
      uses function unparse_start(FILE *) defined in unparse.c
      uses function prt_toplevel_declarations(declaration) defined in unparse.c
      uses function unparse_end(void) defined in unparse.c
   function unparse_start(FILE *) in line 27
      protection public
      11 lines of code
      1 parameters
      1 conditional paths
      uses function newregion(void) defined in regions.c
      uses macro definition ralloc defined in regions.h
      uses variable dummy_location defined in c-lex.c
      uses macro definition TRUE defined in bool.h
      uses function lookup_global_id(const char *) defined in semantics.c
   function unparse_end(void) in line 28
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function deleteregion_ptr(region *) defined in regions.c
   function output_location(void) in line 30
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function prt_toplevel_declarations(declaration) defined in unparse.c
      uses function prt_toplevel_declaration(declaration) defined in unparse.c
      uses function prt_asm_decl(asm_decl) defined in unparse.c
      uses function prt_extension_decl(extension_decl) defined in unparse.c
      uses function prt_data_decl(data_decl) defined in unparse.c
      uses function prt_ellipsis_decl(ellipsis_decl) defined in unparse.c
      uses function prt_function_decl(function_decl) defined in unparse.c
      uses function prt_variable_decl(variable_decl) defined in unparse.c
      uses function prt_declarator(declarator,type_element,attribute) defined in unparse.c
      uses function prt_simple_declarator(declarator,bool) defined in unparse.c
      uses function prt_type_elements(type_element) defined in unparse.c
      uses function prt_type_element(type_element) defined in unparse.c
      uses function prt_typename(typename tname) defined in unparse.c
      uses function prt_typeof_expr(typeof_expr) defined in unparse.c
      uses function prt_typeof_type(typeof_type) defined in unparse.c
      uses function prt_attribute(attribute) defined in unparse.c
      uses function prt_rid(rid) defined in unparse.c
      uses function prt_user_qual(user_qual) defined in unparse.c
      uses function prt_qualifier(qualifier) defined in unparse.c
      uses function prt_tag_ref(tag_ref) defined in unparse.c
      uses function prt_fields(declaration) defined in unparse.c
      uses function prt_enumerators(declaration) defined in unparse.c
      uses function prt_field_declaration(declaration) defined in unparse.c
      uses function prt_field_extension_decl(extension_decl) defined in unparse.c
      uses function prt_field_data_decl(data_decl) defined in unparse.c
      uses function prt_field_decl(field_decl) defined in unparse.c
      uses function prt_enumerator(enumerator) defined in unparse.c
      uses function prt_parameters(declaration) defined in unparse.c
      uses function prt_parameter(declaration) defined in unparse.c
      uses function prt_asttype(asttype) defined in unparse.c
      uses function prt_word(word) defined in unparse.c
      uses function prt_expressions(expression,bool) defined in unparse.c
      uses function prt_expression(expression,int) defined in unparse.c
      uses function prt_comma(comma,int) defined in unparse.c
      uses function prt_sizeof_type(sizeof_type,int) defined in unparse.c
      uses function prt_alignof_type(alignof_type,int) defined in unparse.c
      uses function prt_label_address(label_address,int) defined in unparse.c
      uses function prt_cast(cast,int) defined in unparse.c
      uses function prt_cast_list(cast_list,int) defined in unparse.c
      uses function prt_conditional(conditional,int) defined in unparse.c
      uses function prt_identifier(identifier,int) defined in unparse.c
      uses function prt_compound_expr(compound_expr,int) defined in unparse.c
      uses function prt_function_call(function_call,int) defined in unparse.c
      uses function prt_array_ref(array_ref,int) defined in unparse.c
      uses function prt_binary_ref(binary,int) defined in unparse.c
      uses function prt_field_ref(field_ref,int) defined in unparse.c
      uses function prt_unary(unary,int) defined in unparse.c
      uses function prt_binary(binary,int) defined in unparse.c
      uses function prt_init_list(init_list,int) defined in unparse.c
      uses function prt_init_index(init_index,int) defined in unparse.c
      uses function prt_init_field(init_field,int) defined in unparse.c
      uses function prt_lexical_cst(lexical_cst,int) defined in unparse.c
      uses function prt_string(string,int) defined in unparse.c
      uses function prt_parameter_declarations(declaration) defined in unparse.c
      uses function prt_parameter_declaration(declaration) defined in unparse.c
      uses function prt_statement(statement) defined in unparse.c
      uses function prt_compound_stmt(compound_stmt) defined in unparse.c
      uses function prt_compound_declarations(declaration) defined in unparse.c
      uses function prt_compound_declaration(declaration) defined in unparse.c
      uses function prt_asm_stmt(asm_stmt) defined in unparse.c
      uses function prt_asm_stmt_plain(asm_stmt) defined in unparse.c
      uses function prt_asm_operands(asm_operand) defined in unparse.c
      uses function prt_asm_operand(asm_operand) defined in unparse.c
      uses function prt_if_stmt(if_stmt) defined in unparse.c
      uses function prt_labeled_stmt(labeled_stmt) defined in unparse.c
      uses function prt_expression_stmt(expression_stmt) defined in unparse.c
      uses function prt_while_stmt(while_stmt) defined in unparse.c
      uses function prt_dowhile_stmt(while_stmt) defined in unparse.c
      uses function prt_switch_stmt(switch_stmt) defined in unparse.c
      uses function prt_for_stmt(for_stmt) defined in unparse.c
      uses function prt_break_stmt(break_stmt) defined in unparse.c
      uses function prt_continue_stmt(continue_stmt) defined in unparse.c
      uses function prt_return_stmt(return_stmt) defined in unparse.c
      uses function prt_goto_stmt(goto_stmt) defined in unparse.c
      uses function prt_computed_goto_stmt(computed_goto_stmt) defined in unparse.c
      uses function prt_empty_stmt(empty_stmt) defined in unparse.c
      uses function prt_assert_type_stmt(assert_type_stmt) defined in unparse.c
      uses function prt_change_type_stmt(change_type_stmt) defined in unparse.c
      uses function prt_label(label) defined in unparse.c
      uses function prt_id_label(id_label) defined in unparse.c
      uses function prt_case_label(case_label) defined in unparse.c
      uses function prt_default_label(default_label) defined in unparse.c
      uses function prt_regionof(expression) defined in unparse.c
   function output(char *,...) in line 31
      protection public
      8 lines of code
      2 parameters
      1 conditional paths
   function outputln(char *,...) in line 32
      protection public
      10 lines of code
      2 parameters
      1 conditional paths
   function binary_op_name(ast_kind) in line 33
      protection public
      36 lines of code
      1 parameters
      30 conditional paths
      uses enumvalue kind_plus defined in AST_types.h
      uses enumvalue kind_minus defined in AST_types.h
      uses enumvalue kind_times defined in AST_types.h
      uses enumvalue kind_divide defined in AST_types.h
      uses enumvalue kind_modulo defined in AST_types.h
      uses enumvalue kind_lshift defined in AST_types.h
      uses enumvalue kind_rshift defined in AST_types.h
      uses enumvalue kind_leq defined in AST_types.h
      uses enumvalue kind_geq defined in AST_types.h
      uses enumvalue kind_lt defined in AST_types.h
      uses enumvalue kind_gt defined in AST_types.h
      uses enumvalue kind_eq defined in AST_types.h
      uses enumvalue kind_ne defined in AST_types.h
      uses enumvalue kind_bitand defined in AST_types.h
      uses enumvalue kind_bitor defined in AST_types.h
      uses enumvalue kind_bitxor defined in AST_types.h
      uses enumvalue kind_andand defined in AST_types.h
      uses enumvalue kind_oror defined in AST_types.h
      uses enumvalue kind_assign defined in AST_types.h
      uses enumvalue kind_plus_assign defined in AST_types.h
      uses enumvalue kind_minus_assign defined in AST_types.h
      uses enumvalue kind_times_assign defined in AST_types.h
      uses enumvalue kind_divide_assign defined in AST_types.h
      uses enumvalue kind_modulo_assign defined in AST_types.h
      uses enumvalue kind_lshift_assign defined in AST_types.h
      uses enumvalue kind_rshift_assign defined in AST_types.h
      uses enumvalue kind_bitand_assign defined in AST_types.h
      uses enumvalue kind_bitor_assign defined in AST_types.h
      uses enumvalue kind_bitxor_assign defined in AST_types.h
   function prt_toplevel_declaration(declaration) in line 34
      protection public
      12 lines of code
      1 parameters
      1 conditional paths
      uses variable AST_declaration::kind defined in AST_defs.h
      uses macro definition PRTCASE defined in unparse.c
   function prt_nelements(expression) in line 35
      protection public
      14 lines of code
      1 parameters
      2 conditional paths
      uses function output(char *,...) defined in unparse.c
      uses function prt_expression(expression,int) defined in unparse.c
      uses macro definition P_CAST defined in unparse.c
      uses function type_array(type) defined in types.c
      uses function type_array_of(type) defined in types.c
   function prt_expression(expression,int) in line 36
      protection public
      33 lines of code
      2 parameters
      3 conditional paths
      uses variable AST_expression::kind defined in AST_defs.h
      uses macro definition PRTEXPR defined in unparse.c
      uses enumvalue kind_string_cst defined in AST_types.h
      uses macro definition is_unary defined in AST_types.h
      uses function prt_unary(unary,int) defined in unparse.c
      uses macro definition CAST defined in AST.h
      uses macro definition is_binary defined in AST_types.h
      uses function prt_binary(binary,int) defined in unparse.c
   function prt_regionof_name(const char *) in line 37
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function prt_regionof(expression) in line 38
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cqual/cqual-0.981/src/usage.c
module usage.c
   macro definition PROC_LINE_LENGTH in line 27
      protection public
   function get_memusage(void) in line 30
      protection public
      50 lines of code
      1 parameters
      1 conditional paths
      uses variable filename defined in iquals.tab.c
      uses macro definition PROC_LINE_LENGTH defined in usage.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cqual/cqual-0.981/src/usage.h
module usage.h
   function get_memusage(void) in line 27
      protection public
      50 lines of code
      1 parameters
      7 conditional paths
      uses variable filename defined in iquals.tab.c
      uses macro definition PROC_LINE_LENGTH defined in usage.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cqual/cqual-0.981/src/utils.c
module utils.c
   macro definition PTR_ASCII_SIZE in line 227
      protection public
   function xmalloc(size_t) in line 29
      protection public
      12 lines of code
      1 parameters
      1 conditional paths
   function xrealloc(void *,size_t) in line 42
      protection public
      12 lines of code
      2 parameters
      1 conditional paths
   function make_cstring(region,const char *,int) in line 56
      protection public
      11 lines of code
      3 parameters
      1 conditional paths
      uses variable cstring::data defined in cstring.h
      uses function rstralloc(region,size_t) defined in regions.c
      uses variable cstring::length defined in cstring.h
   function str2cstring(region,const char *) in line 69
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function make_cstring(region,const char *,int) defined in utils.c
   function align_to(unsigned long,unsigned long) in line 74
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
      uses variable count defined in qtype.c
   function gcd(unsigned long,unsigned long) in line 81
      protection public
      12 lines of code
      2 parameters
      3 conditional paths
   function lcm(unsigned long,unsigned long) in line 94
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses function gcd(unsigned long,unsigned long) defined in utils.c
   function strtold(const char *,char **) in line 101
      protection public
      11 lines of code
      2 parameters
      1 conditional paths
      uses variable count defined in qtype.c
      uses function vfail(const char *,va_list) defined in utils.c
      uses macro definition __attribute__ defined in compiler.h
   function vfail(const char *,va_list) in line 115
      protection public
      13 lines of code
      2 parameters
      2 conditional paths
   function __fail(const char *,unsigned int,const char *func ,const char *,...) in line 132
      protection public
      9 lines of code
      5 parameters
      1 conditional paths
      uses variable line defined in iquals-lex.c
      uses function vfail(const char *,va_list) defined in utils.c
   function fail(const char *,...) in line 144
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
      uses function vfail(const char *,va_list) defined in utils.c
   function rstrcat(region,const char *,const char *) in line 153
      protection public
      8 lines of code
      3 parameters
      1 conditional paths
      uses macro definition rarrayalloc defined in regions.h
      uses function strcat((null),(null)) defined in taint-poly.c
   function rstrscat(region,...) in line 164
      protection public
      19 lines of code
      2 parameters
      1 conditional paths
      uses variable len defined in c-gperf.h
      uses macro definition rarrayalloc defined in regions.h
      uses function strcat((null),(null)) defined in taint-poly.c
   function inttostr(region,int) in line 185
      protection public
      22 lines of code
      2 parameters
      1 conditional paths
      uses variable count defined in qtype.c
      uses macro definition rarrayalloc defined in regions.h
      uses function printf(const char *$NONYEAR,(null)) defined in rcs1.c
      uses function fail(const char *,...) defined in utils.c
   function rsprintf(region,const char *,...) in line 210
      protection public
      7 lines of code
      3 parameters
      1 conditional paths
      uses function rvsprintf(region,const char *,va_list) defined in utils.c
   function rvsprintf(region,const char *,va_list) in line 218
      protection public
      6 lines of code
      3 parameters
      1 conditional paths
      uses function growbuf_new(region,int) defined in buffer.c
      uses function gvprintf(growbuf,const char *,va_list) defined in buffer.c
      uses function growbuf_contents(growbuf) defined in buffer.c
   function ptr_to_ascii(void *) in line 231
      protection public
      10 lines of code
      1 parameters
      1 conditional paths
      uses macro definition PTR_ASCII_SIZE defined in utils.c
      uses function fail(const char *,...) defined in utils.c
   function ptr_hash(void *) in line 243
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function ptr_eq(void *,void *) in line 249
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function string_hash(const char *) in line 255
      protection public
      13 lines of code
      1 parameters
      1 conditional paths
   function string_eq(const char *,const char *) in line 270
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
      uses macro definition FALSE defined in bool.h
   function ptr_cmp(void *,void *) in line 279
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function min(int,int) in line 284
      protection public
      1 lines of code
      2 parameters
      2 conditional paths
   function max(int,int) in line 285
      protection public
      1 lines of code
      2 parameters
      2 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cqual/cqual-0.981/src/utils.h
module utils.h
   macro definition MAX in line 41
      protection public
   macro definition MIN in line 42
      protection public
   macro definition insist in line 59
      protection public
   macro definition insistnot in line 65
      protection public
   function xmalloc(size_t) in line 33
      protection public
      12 lines of code
      1 parameters
      2 conditional paths
   function xrealloc(void *,size_t) in line 34
      protection public
      12 lines of code
      2 parameters
      2 conditional paths
   function align_to(unsigned long,unsigned long) in line 36
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
      uses variable count defined in qtype.c
   function lcm(unsigned long,unsigned long) in line 39
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses function gcd(unsigned long,unsigned long) defined in utils.c
   function fail(const char *,...) in line 47
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
   function __fail(const char *,unsigned int,const char *,const char *,...) in line 50
      protection public
      1 lines of code
      5 parameters
      1 conditional paths
   function rstrcat(region,const char *,const char *) in line 69
      protection public
      8 lines of code
      3 parameters
      1 conditional paths
      uses macro definition rarrayalloc defined in regions.h
      uses function strcat((null),(null)) defined in taint-poly.c
   function rstrscat(region,...) in line 73
      protection public
      19 lines of code
      2 parameters
      3 conditional paths
      uses variable len defined in c-gperf.h
      uses macro definition rarrayalloc defined in regions.h
      uses function strcat((null),(null)) defined in taint-poly.c
   function inttostr(region,int) in line 76
      protection public
      22 lines of code
      2 parameters
      4 conditional paths
      uses variable count defined in qtype.c
      uses macro definition rarrayalloc defined in regions.h
      uses function printf(const char *$NONYEAR,(null)) defined in rcs1.c
      uses function fail(const char *,...) defined in utils.c
   function rsprintf(region,const char *,...) in line 79
      protection public
      7 lines of code
      3 parameters
      1 conditional paths
      uses function rvsprintf(region,const char *,va_list) defined in utils.c
   function rvsprintf(region,const char *,va_list) in line 80
      protection public
      6 lines of code
      3 parameters
      1 conditional paths
      uses function growbuf_new(region,int) defined in buffer.c
      uses function gvprintf(growbuf,const char *,va_list) defined in buffer.c
      uses function growbuf_contents(growbuf) defined in buffer.c
   function ptr_to_ascii(void *) in line 84
      protection public
      10 lines of code
      1 parameters
      2 conditional paths
      uses macro definition PTR_ASCII_SIZE defined in utils.c
      uses function fail(const char *,...) defined in utils.c
   function ptr_hash(void *) in line 87
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function ptr_eq(void *,void *) in line 90
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function string_hash(const char *) in line 93
      protection public
      13 lines of code
      1 parameters
      3 conditional paths
   function string_eq(const char *,const char *) in line 96
      protection public
      6 lines of code
      2 parameters
      2 conditional paths
      uses macro definition FALSE defined in bool.h
   function ptr_cmp(void *,void *) in line 100
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
