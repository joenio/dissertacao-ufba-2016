file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/jlint/jlint-3.1.2/access_desc.cc
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/jlint/jlint-3.1.2/access_desc.hh
module access_desc
   function message(int,...) in line 23
      protection public
      7 lines of code
      2 parameters
      1 conditional paths
      uses function format_message(int,utf_string const &,int,__VALIST) defined in functions.hh
      uses variable self_class defined in access_desc
      uses variable source_file defined in class_desc
      uses variable line defined in access_desc
   function access_desc(field_desc *,class_desc *,int,access_desc *) in line 25
      protection public
      9 lines of code
      4 parameters
      1 conditional paths
      uses variable field defined in access_desc
      uses variable next defined in access_desc
      uses variable self_class defined in access_desc
      uses variable line defined in access_desc
      uses variable attr defined in access_desc
   variable attr in line 17
      protection public
   variable field in line 15
      protection public
   variable line in line 16
      protection public
   variable next in line 13
      protection public
   variable self_class in line 14
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/jlint/jlint-3.1.2/antic.c
module antic.c
   macro definition MAX_PATH in line 23
      protection public
   macro definition VERSION in line 26
      protection public
   macro definition items in line 54
      protection public
   macro definition nobreak in line 55
      protection public
   enumeration @1 in line 57
      protection public
   enumeration statement_ctx in line 85
      protection public
   variable file_name in line 28
      protection public
   variable f in line 29
      protection public
   variable line in line 30
      protection public
   variable coln in line 31
      protection public
   variable force_java in line 33
      protection public
   variable token_line in line 34
      protection public
   variable token_coln in line 35
      protection public
   variable java in line 36
      protection public
   variable fall_thru_cmt in line 37
      protection public
   variable notreached_cmt in line 38
      protection public
   variable tab_size in line 39
      protection public
   variable relax_else in line 40
      protection public
   variable fall_thru_cmt_text in line 43
      protection public
   variable notreached_cmt_text in line 49
      protection public
   variable n_messages in line 121
      protection public
   enumvalue TKN_FOR in line 58
      protection public
   enumvalue TKN_IF in line 59
      protection public
   enumvalue TKN_DO in line 60
      protection public
   enumvalue TKN_WHILE in line 61
      protection public
   enumvalue TKN_ELSE in line 62
      protection public
   enumvalue TKN_BREAK in line 63
      protection public
   enumvalue TKN_CASE in line 64
      protection public
   enumvalue TKN_CATCH in line 65
      protection public
   enumvalue TKN_FINALLY in line 66
      protection public
   enumvalue TKN_TRY in line 67
      protection public
   enumvalue TKN_SWITCH in line 68
      protection public
   enumvalue TKN_STR in line 69
      protection public
   enumvalue TKN_IDENT in line 70
      protection public
   enumvalue TKN_CTX in line 71
      protection public
   enumvalue TKN_ACCESS in line 72
      protection public
   enumvalue TKN_AND_OP in line 73
      protection public
   enumvalue TKN_OR_OP in line 74
      protection public
   enumvalue TKN_BIN_OP in line 75
      protection public
   enumvalue TKN_BIT_OP in line 76
      protection public
   enumvalue TKN_SET_OP in line 77
      protection public
   enumvalue TKN_CMP_OP in line 78
      protection public
   enumvalue TKN_EQU_OP in line 79
      protection public
   enumvalue TKN_INC_OP in line 80
      protection public
   enumvalue TKN_SHIFT_OP in line 81
      protection public
   enumvalue TKN_INCLUDE in line 83
      protection public
   enumvalue ctx_statement in line 86
      protection public
   enumvalue ctx_typedef in line 87
      protection public
   enumvalue ctx_body in line 88
      protection public
   enumvalue ctx_switch in line 90
      protection public
   function get() in line 94
      protection public
      14 lines of code
      0 parameters
      3 conditional paths
      uses variable f defined in antic.c
      uses variable line defined in antic.c
      uses variable coln defined in antic.c
      uses variable tab_size defined in antic.c
   function unget(int) in line 109
      protection public
      11 lines of code
      1 parameters
      3 conditional paths
      uses variable f defined in antic.c
      uses variable line defined in antic.c
      uses variable coln defined in antic.c
      uses variable tab_size defined in antic.c
   function message_at(int,int,char *) in line 123
      protection public
      5 lines of code
      3 parameters
      1 conditional paths
      uses variable file_name defined in antic.c
      uses variable line defined in antic.c
      uses variable coln defined in antic.c
      uses variable n_messages defined in antic.c
   function message(char *) in line 129
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function message_at(int,int,char *) defined in antic.c
      uses variable token_line defined in antic.c
      uses variable token_coln defined in antic.c
   function check_special_character() in line 134
      protection public
      82 lines of code
      0 parameters
      36 conditional paths
      uses variable java defined in antic.c
      uses function message(char *) defined in antic.c
      uses macro definition nobreak defined in antic.c
   function check_fall_thru(int) in line 217
      protection public
      27 lines of code
      1 parameters
      8 conditional paths
      uses macro definition items defined in antic.c
      uses variable fall_thru_cmt_text defined in antic.c
      uses variable fall_thru_cmt defined in antic.c
   function check_notreached(int) in line 245
      protection public
      27 lines of code
      1 parameters
      8 conditional paths
      uses macro definition items defined in antic.c
      uses variable notreached_cmt_text defined in antic.c
      uses variable notreached_cmt defined in antic.c
   function scan_0(int) in line 273
      protection public
      244 lines of code
      1 parameters
      90 conditional paths
      uses variable token_coln defined in antic.c
      uses variable coln defined in antic.c
      uses variable token_line defined in antic.c
      uses variable line defined in antic.c
      uses enumvalue TKN_SET_OP defined in antic.c
      uses function message(char *) defined in antic.c
      uses function check_fall_thru(int) defined in antic.c
      uses function check_notreached(int) defined in antic.c
      uses function unget(int) defined in antic.c
      uses enumvalue TKN_BIN_OP defined in antic.c
      uses function check_special_character() defined in antic.c
      uses variable java defined in antic.c
      uses macro definition nobreak defined in antic.c
      uses enumvalue TKN_STR defined in antic.c
      uses enumvalue TKN_CTX defined in antic.c
      uses enumvalue TKN_INC_OP defined in antic.c
      uses enumvalue TKN_ACCESS defined in antic.c
      uses enumvalue TKN_AND_OP defined in antic.c
      uses enumvalue TKN_OR_OP defined in antic.c
      uses enumvalue TKN_BIT_OP defined in antic.c
      uses enumvalue TKN_SHIFT_OP defined in antic.c
      uses enumvalue TKN_CMP_OP defined in antic.c
      uses enumvalue TKN_EQU_OP defined in antic.c
      uses enumvalue TKN_IF defined in antic.c
      uses enumvalue TKN_FOR defined in antic.c
      uses enumvalue TKN_WHILE defined in antic.c
      uses enumvalue TKN_DO defined in antic.c
      uses enumvalue TKN_ELSE defined in antic.c
      uses enumvalue TKN_CASE defined in antic.c
      uses enumvalue TKN_BREAK defined in antic.c
      uses enumvalue TKN_CATCH defined in antic.c
      uses enumvalue TKN_TRY defined in antic.c
      uses enumvalue TKN_FINALLY defined in antic.c
      uses enumvalue TKN_SWITCH defined in antic.c
      uses enumvalue TKN_INCLUDE defined in antic.c
      uses enumvalue TKN_IDENT defined in antic.c
   function scan() in line 519
      protection public
      26 lines of code
      0 parameters
      8 conditional paths
      uses function check_fall_thru(int) defined in antic.c
      uses function check_notreached(int) defined in antic.c
      uses function scan_0(int) defined in antic.c
      uses enumvalue TKN_INCLUDE defined in antic.c
      uses function message(char *) defined in antic.c
      uses function parse_binary_operation(int *) defined in antic.c
   function parse_binary_operation(int *) in line 547
      protection public
      26 lines of code
      1 parameters
      8 conditional paths
      uses function parse_term() defined in antic.c
      uses enumvalue TKN_BIN_OP defined in antic.c
      uses enumvalue TKN_SHIFT_OP defined in antic.c
      uses function message(char *) defined in antic.c
      uses variable java defined in antic.c
      uses function parse_block(int *,statement_ctx) defined in antic.c
      uses enumvalue ctx_typedef defined in antic.c
   function parse_expression() in line 549
      protection public
      35 lines of code
      0 parameters
      7 conditional paths
      uses function parse_binary_operation(int *) defined in antic.c
      uses enumvalue TKN_BIT_OP defined in antic.c
      uses enumvalue TKN_CMP_OP defined in antic.c
      uses enumvalue TKN_AND_OP defined in antic.c
      uses enumvalue TKN_OR_OP defined in antic.c
      uses enumvalue TKN_SET_OP defined in antic.c
      uses enumvalue TKN_EQU_OP defined in antic.c
      uses variable java defined in antic.c
      uses function message(char *) defined in antic.c
      uses function parse_block(int *,statement_ctx) defined in antic.c
   function parse_block(int *,statement_ctx) in line 585
      protection public
      62 lines of code
      2 parameters
      20 conditional paths
      uses variable token_line defined in antic.c
      uses variable token_coln defined in antic.c
      uses function scan() defined in antic.c
      uses function message_at(int,int,char *) defined in antic.c
      uses variable notreached_cmt defined in antic.c
      uses enumvalue TKN_ELSE defined in antic.c
      uses enumvalue TKN_FOR defined in antic.c
      uses enumvalue TKN_IF defined in antic.c
      uses enumvalue TKN_DO defined in antic.c
      uses enumvalue TKN_WHILE defined in antic.c
      uses enumvalue TKN_BREAK defined in antic.c
      uses enumvalue TKN_CASE defined in antic.c
      uses enumvalue TKN_CATCH defined in antic.c
      uses enumvalue TKN_FINALLY defined in antic.c
      uses enumvalue TKN_TRY defined in antic.c
      uses enumvalue TKN_SWITCH defined in antic.c
      uses enumvalue ctx_typedef defined in antic.c
      uses enumvalue ctx_statement defined in antic.c
      uses macro definition nobreak defined in antic.c
      uses function parse_statement(int,int *,int *,int *,int *,statement_ctx) defined in antic.c
   function parse_term() in line 587
      protection public
      31 lines of code
      0 parameters
      7 conditional paths
      uses function scan() defined in antic.c
      uses enumvalue TKN_INC_OP defined in antic.c
      uses enumvalue TKN_CTX defined in antic.c
      uses enumvalue TKN_IDENT defined in antic.c
      uses enumvalue TKN_ACCESS defined in antic.c
      uses enumvalue TKN_STR defined in antic.c
      uses variable token_line defined in antic.c
      uses variable token_coln defined in antic.c
      uses function parse_expression() defined in antic.c
      uses function message_at(int,int,char *) defined in antic.c
   function parse_switch_expression() in line 619
      protection public
      15 lines of code
      0 parameters
      3 conditional paths
      uses function scan() defined in antic.c
      uses variable token_line defined in antic.c
      uses variable token_coln defined in antic.c
      uses function message_at(int,int,char *) defined in antic.c
      uses function parse_expression() defined in antic.c
   function parse_conditional_expression(int) in line 663
      protection public
      54 lines of code
      1 parameters
      13 conditional paths
      uses function scan() defined in antic.c
      uses function message(char *) defined in antic.c
      uses variable token_line defined in antic.c
      uses variable token_coln defined in antic.c
      uses function parse_binary_operation(int *) defined in antic.c
      uses enumvalue TKN_BIT_OP defined in antic.c
      uses function message_at(int,int,char *) defined in antic.c
      uses enumvalue TKN_SET_OP defined in antic.c
      uses enumvalue TKN_AND_OP defined in antic.c
      uses enumvalue TKN_OR_OP defined in antic.c
      uses enumvalue TKN_EQU_OP defined in antic.c
      uses enumvalue TKN_CMP_OP defined in antic.c
   function parse_statement(int,int *,int *,int *,int *,statement_ctx) in line 718
      protection public
      296 lines of code
      6 parameters
      70 conditional paths
      uses function parse_block(int *,statement_ctx) defined in antic.c
      uses macro definition nobreak defined in antic.c
      uses function scan() defined in antic.c
      uses variable token_line defined in antic.c
      uses variable token_coln defined in antic.c
      uses enumvalue TKN_FOR defined in antic.c
      uses function message(char *) defined in antic.c
      uses function parse_expression() defined in antic.c
      uses function parse_conditional_expression(int) defined in antic.c
      uses enumvalue TKN_WHILE defined in antic.c
      uses function message_at(int,int,char *) defined in antic.c
      uses enumvalue ctx_statement defined in antic.c
      uses variable java defined in antic.c
      uses enumvalue TKN_SWITCH defined in antic.c
      uses function parse_switch_expression() defined in antic.c
      uses enumvalue ctx_switch defined in antic.c
      uses enumvalue TKN_IF defined in antic.c
      uses enumvalue TKN_ELSE defined in antic.c
      uses variable relax_else defined in antic.c
      uses enumvalue TKN_TRY defined in antic.c
      uses enumvalue TKN_CATCH defined in antic.c
      uses enumvalue TKN_FINALLY defined in antic.c
      uses enumvalue TKN_DO defined in antic.c
      uses enumvalue TKN_CASE defined in antic.c
      uses variable fall_thru_cmt defined in antic.c
      uses enumvalue TKN_BREAK defined in antic.c
      uses enumvalue TKN_IDENT defined in antic.c
      uses enumvalue ctx_body defined in antic.c
      uses enumvalue TKN_EQU_OP defined in antic.c
      uses enumvalue ctx_typedef defined in antic.c
      uses enumvalue TKN_SET_OP defined in antic.c
   function parse_file() in line 1079
      protection public
      15 lines of code
      0 parameters
      4 conditional paths
      uses function scan() defined in antic.c
      uses function parse_block(int *,statement_ctx) defined in antic.c
      uses enumvalue ctx_typedef defined in antic.c
      uses function parse_expression() defined in antic.c
   function has_suffix(char *,char *) in line 1095
      protection public
      16 lines of code
      2 parameters
      4 conditional paths
   function load_file(char *,int) in line 1112
      protection public
      78 lines of code
      2 parameters
      14 conditional paths
      uses macro definition MAX_PATH defined in antic.c
      uses function has_suffix(char *,char *) defined in antic.c
      uses variable f defined in antic.c
      uses variable file_name defined in antic.c
      uses variable line defined in antic.c
      uses variable coln defined in antic.c
      uses variable java defined in antic.c
      uses variable force_java defined in antic.c
      uses function parse_file() defined in antic.c
   function usage() in line 1191
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
   function main(int,char *) in line 1198
      protection public
      35 lines of code
      2 parameters
      9 conditional paths
      uses function usage() defined in antic.c
      uses variable force_java defined in antic.c
      uses variable tab_size defined in antic.c
      uses variable relax_else defined in antic.c
      uses macro definition VERSION defined in antic.c
      uses function load_file(char *,int) defined in antic.c
      uses variable n_messages defined in antic.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/jlint/jlint-3.1.2/callee_desc.cc
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/jlint/jlint-3.1.2/callee_desc.hh
module callee_desc
   function message(int,...) in line 28
      protection public
      7 lines of code
      2 parameters
      1 conditional paths
      uses function format_message(int,utf_string const &,int,__VALIST) defined in functions.hh
      uses variable self_class defined in callee_desc
      uses variable source_file defined in class_desc
      uses variable line defined in callee_desc
   function callee_desc(class_desc *,method_desc *,callee_desc *,int,int) in line 30
      protection public
      10 lines of code
      5 parameters
      1 conditional paths
      uses variable self_class defined in callee_desc
      uses variable method defined in callee_desc
      uses variable next defined in callee_desc
      uses variable line defined in callee_desc
      uses variable attr defined in callee_desc
      uses variable backtrace defined in callee_desc
   variable attr in line 21
      protection public
   variable backtrace in line 19
      protection public
   variable line in line 20
      protection public
   variable method in line 16
      protection public
   variable next in line 17
      protection public
   variable self_class in line 15
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/jlint/jlint-3.1.2/class_desc.cc
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/jlint/jlint-3.1.2/class_desc.hh
module class_desc
   function build_call_graph() in line 57
      protection public
      6 lines of code
      0 parameters
      2 conditional paths
      uses variable methods defined in class_desc
      uses variable next defined in method_desc
   function build_class_info() in line 56
      protection public
      30 lines of code
      0 parameters
      8 conditional paths
      uses variable n_bases defined in class_desc
      uses variable bases defined in class_desc
      uses function check_inheritance(class_desc *) defined in class_desc
      uses variable methods defined in class_desc
      uses variable next defined in method_desc
      uses function message_at(int,int,char *) defined in antic.c
      uses variable source_file defined in class_desc
      uses variable first_line defined in method_desc
   function build_concurrent_closure() in line 58
      protection public
      6 lines of code
      0 parameters
      2 conditional paths
      uses variable methods defined in class_desc
      uses variable next defined in method_desc
   function calculate_attributes() in line 55
      protection public
      6 lines of code
      0 parameters
      2 conditional paths
      uses variable methods defined in class_desc
      uses variable next defined in method_desc
   function check_inheritance(class_desc *) in line 59
      protection public
      64 lines of code
      1 parameters
      19 conditional paths
      uses variable fields defined in class_desc
      uses variable next defined in field_desc
      uses function message_at(int,int,char *) defined in antic.c
      uses variable source_file defined in class_desc
      uses variable methods defined in class_desc
      uses variable next defined in method_desc
      uses enumvalue m_static defined in method_desc
      uses enumvalue m_override defined in method_desc
      uses enumvalue m_synchronized defined in method_desc
      uses variable attr defined in class_desc
      uses enumvalue cl_interface defined in class_desc
      uses variable first_line defined in method_desc
      uses variable n_bases defined in class_desc
      uses variable bases defined in class_desc
      uses function check_inheritance(class_desc *) defined in class_desc
   function get(utf_string const &) in line 38
      protection public
      15 lines of code
      1 parameters
      3 conditional paths
      uses function hash() defined in utf_string
      uses variable class_hash_table_size defined in types.hh
      uses variable hash_table defined in class_desc
      uses variable collision_chain defined in class_desc
      uses variable name defined in class_desc
      uses function class_desc(utf_string const &) defined in class_desc
      uses variable n_classes defined in class_desc
   function get_field(utf_string const &) in line 43
      protection public
      7 lines of code
      1 parameters
      3 conditional paths
      uses variable fields defined in class_desc
      uses variable next defined in field_desc
   function get_method(utf_string const &,utf_string const &) in line 40
      protection public
      10 lines of code
      2 parameters
      3 conditional paths
      uses variable methods defined in class_desc
      uses variable next defined in method_desc
   function global_analysis() in line 61
      protection public
      44 lines of code
      0 parameters
      6 conditional paths
      uses variable chain defined in class_desc
      uses variable next defined in class_desc
      uses function calculate_attributes() defined in class_desc
      uses function build_concurrent_closure() defined in class_desc
      uses function build_class_info() defined in class_desc
      uses function build_call_graph() defined in class_desc
      uses function verify() defined in class_desc
   function implements(const char *) in line 51
      protection public
      12 lines of code
      1 parameters
      4 conditional paths
      uses variable name defined in class_desc
      uses variable n_bases defined in class_desc
      uses variable bases defined in class_desc
   function in_relationship_with(class_desc *) in line 52
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function isa(const char *) defined in class_desc
   function isa(const char *) in line 49
      protection public
      7 lines of code
      1 parameters
      3 conditional paths
      uses variable n_bases defined in class_desc
   function isa(class_desc *) in line 50
      protection public
      7 lines of code
      1 parameters
      3 conditional paths
      uses variable n_bases defined in class_desc
   function verify() in line 54
      protection public
      7 lines of code
      0 parameters
      2 conditional paths
      uses variable methods defined in class_desc
      uses variable next defined in method_desc
   function class_desc(utf_string const &) in line 63
      protection public
      12 lines of code
      1 parameters
      1 conditional paths
      uses variable fields defined in class_desc
      uses variable methods defined in class_desc
      uses variable n_bases defined in class_desc
      uses variable attr defined in class_desc
      uses enumvalue cl_system defined in class_desc
      uses variable class_vertex defined in class_desc
      uses variable metaclass_vertex defined in class_desc
      uses variable next defined in class_desc
      uses variable chain defined in class_desc
   variable attr in line 24
      protection public
   variable bases in line 31
      protection public
   variable chain in line 47
      protection public
   variable class_vertex in line 35
      protection public
   variable collision_chain in line 20
      protection public
   variable fields in line 33
      protection public
   variable hash_table in line 45
      protection public
   variable locks in line 14
      protection public
   variable metaclass_vertex in line 36
      protection public
   variable methods in line 22
      protection public
   variable n_bases in line 30
      protection public
   variable n_classes in line 46
      protection public
   variable name in line 17
      protection public
   variable next in line 19
      protection public
   variable source_file in line 18
      protection public
   variable usedLocks in line 15
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/jlint/jlint-3.1.2/component_desc.hh
module component_desc
   function component_desc(utf_string const &,class_desc *) in line 13
      protection public
      2 lines of code
      2 parameters
      1 conditional paths
   variable accessor in line 11
      protection public
   variable cls in line 10
      protection public
   variable name in line 9
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/jlint/jlint-3.1.2/constant.hh
module constant
   abstract class
   function length() in line 10
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function type() in line 11
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
      uses enumvalue tp_object defined in types.hh
   function constant(byte *) in line 12
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses variable tag defined in constant
   function constant() in line 13
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
      uses variable tag defined in constant
   variable tag in line 9
      protection public
module const_class
   inherits from constant
   function length() in line 22
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function const_class(byte *) in line 19
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
      uses function unpack2(byte *) defined in inlines.hh
   variable name in line 18
      protection public
module const_double
   inherits from constant
   function length() in line 28
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function type() in line 29
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
      uses enumvalue tp_double defined in types.hh
   function const_double(byte *) in line 27
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
module const_float
   inherits from constant
   function length() in line 35
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function type() in line 36
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
      uses enumvalue tp_float defined in types.hh
   function const_float(byte *) in line 34
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
module const_int
   inherits from constant
   function length() in line 45
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function type() in line 46
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
      uses enumvalue tp_int defined in types.hh
   function const_int(byte *) in line 42
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
      uses function unpack4(byte *) defined in inlines.hh
   variable value in line 41
      protection public
module const_long
   inherits from constant
   function length() in line 59
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function type() in line 60
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
      uses enumvalue tp_long defined in types.hh
   function const_long(byte *) in line 55
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function unpack4(byte *) defined in inlines.hh
   variable high in line 52
      protection public
   variable low in line 53
      protection public
   variable value in line 54
      protection public
module const_long::@3
   variable high in line 52
      protection public
   variable low in line 53
      protection public
module const_name_and_type
   inherits from constant
   function length() in line 75
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function const_name_and_type(byte *) in line 67
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function unpack2(byte *) defined in inlines.hh
   function const_name_and_type(int,int) in line 71
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   variable desc in line 66
      protection public
   variable name in line 65
      protection public
module const_ref
   inherits from constant
   function length() in line 86
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function const_ref(byte *) in line 82
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function unpack2(byte *) defined in inlines.hh
   variable cls in line 80
      protection public
   variable name_and_type in line 81
      protection public
module const_string
   inherits from constant
   function length() in line 95
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function type() in line 96
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
      uses enumvalue tp_string defined in types.hh
   function const_string(byte *) in line 92
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
      uses function unpack2(byte *) defined in inlines.hh
   variable str in line 91
      protection public
module const_utf8
   inherits from constant
   inherits from utf_string
   function length() in line 102
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function const_utf8(byte *) in line 101
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/jlint/jlint-3.1.2/field_desc.hh
module field_desc
   inherits from component_desc
   function write(int) in line 32
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function field_desc(utf_string const &,class_desc *,field_desc *) in line 37
      protection public
      9 lines of code
      3 parameters
      1 conditional paths
   variable attr in line 17
      protection public
   variable equals in line 28
      protection public
   variable name_and_type in line 29
      protection public
   variable next in line 16
      protection public
   variable writes in line 30
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/jlint/jlint-3.1.2/functions.hh
module functions.hh
   macro definition __VALIST in line 62
      protection public
   function format_message(int,utf_string const &,int,__VALIST) in line 66
      protection public
      144 lines of code
      4 parameters
      1 conditional paths
      uses macro definition MAX_MSG_PARAMETERS defined in types.hh
      uses variable history defined in jlint.cc
      uses variable next defined in message_node
      uses variable text defined in message_node
      uses variable n_messages defined in jlint.cc
      uses variable reported_message_mask defined in jlint.cc
      uses variable msg_table defined in jlint.cc
      uses macro definition MAX_MSG_LENGTH defined in types.hh
      uses variable line defined in antic.c
      uses function as_asciz() defined in utf_string
      uses variable format defined in message_descriptor
      uses macro definition MSG_LOCATION_PREFIX defined in types.hh
      uses variable graph defined in graph_vertex
      uses variable n_vertexes defined in graph_vertex
      uses variable hash_table defined in class_desc
      uses variable class_hash_table_size defined in types.hh
      uses variable chain defined in class_desc
      uses variable n_classes defined in class_desc
   function message_at(int,utf_string const &,int,...) in line 67
      protection public
      7 lines of code
      4 parameters
      1 conditional paths
      uses variable line defined in antic.c
      uses function format_message(int,utf_string const &,int,__VALIST) defined in jlint.cc
   function get_type(utf_string const &) in line 68
      protection public
      28 lines of code
      1 parameters
      1 conditional paths
      uses function as_asciz() defined in utf_string
      uses enumvalue tp_object defined in types.hh
      uses enumvalue tp_int defined in types.hh
      uses enumvalue tp_short defined in types.hh
      uses enumvalue tp_double defined in types.hh
      uses enumvalue tp_long defined in types.hh
      uses enumvalue tp_float defined in types.hh
      uses enumvalue tp_void defined in types.hh
      uses enumvalue tp_byte defined in types.hh
      uses enumvalue tp_char defined in types.hh
      uses enumvalue tp_bool defined in types.hh
      uses enumvalue tp_string defined in types.hh
   function get_number_of_parameters(utf_string const &) in line 69
      protection public
      27 lines of code
      1 parameters
      1 conditional paths
      uses function as_asciz() defined in utf_string
      uses macro definition nobreak defined in antic.c
   function string_hash_function(byte *) in line 70
      protection public
      11 lines of code
      1 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/jlint/jlint-3.1.2/graph.cc
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/jlint/jlint-3.1.2/graph.hh
module graph_edge
   function message(int) in line 18
      protection public
      50 lines of code
      1 parameters
      10 conditional paths
      uses variable caller defined in graph_edge
      uses function print_call_path_to(callee_desc *,int,int,int,callee_desc *) defined in method_desc
      uses variable invocation defined in graph_edge
      uses variable method defined in callee_desc
      uses variable cls defined in component_desc
      uses variable vertex defined in graph_edge
      uses variable cls defined in graph_vertex
      uses variable name defined in component_desc
      uses function as_asciz() defined in utf_string
      uses variable attr defined in method_desc
      uses enumvalue m_sync_block defined in method_desc
      uses variable self_class defined in callee_desc
      uses variable name defined in class_desc
      uses variable locksAtEntry defined in method_desc
      uses function begin() defined in Locks
      uses function end() defined in Locks
      uses function compound_name(const char *,const char *) defined in method_desc.cc
      uses function nLocks() defined in Locks
      uses function message(int,...) defined in callee_desc
      uses variable mask defined in graph_edge
   function graph_edge(graph_vertex *,method_desc *,callee_desc *) in line 20
      protection public
      6 lines of code
      3 parameters
      1 conditional paths
      uses variable invocation defined in graph_edge
      uses variable caller defined in graph_edge
      uses variable vertex defined in graph_edge
      uses variable mask defined in graph_edge
   variable caller in line 14
      protection public
   variable invocation in line 13
      protection public
   variable mask in line 16
      protection public
   variable next in line 12
      protection public
   variable vertex in line 15
      protection public
module graph_vertex
   function attach(graph_edge *) in line 47
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable next defined in graph_edge
   function verify() in line 45
      protection public
      66 lines of code
      0 parameters
      13 conditional paths
      uses variable next defined in graph_vertex
      uses variable max_shown_paths defined in jlint.cc
      uses variable vertex defined in graph_edge
      uses variable marker defined in graph_vertex
      uses variable visited defined in graph_vertex
      uses variable mask defined in graph_edge
      uses function message(int) defined in graph_edge
      uses variable edges defined in graph_vertex
      uses variable n_loops defined in graph_vertex
      uses variable next defined in graph_edge
   function graph_vertex(class_desc *) in line 52
      protection public
      9 lines of code
      1 parameters
      1 conditional paths
      uses variable next defined in graph_edge
   variable cls in line 32
      protection public
   variable edges in line 30
      protection public
   variable graph in line 43
      protection public
   variable marker in line 34
      protection public
   variable n_loops in line 35
      protection public
   variable n_vertexes in line 41
      protection public
   variable next in line 31
      protection public
   variable visited in line 33
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/jlint/jlint-3.1.2/inlines.hh
module inlines.hh
   function unpack2(byte *) in line 8
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function unpack4(byte *) in line 12
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function unpack2_le(byte *) in line 16
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function unpack4_le(byte *) in line 20
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function first_set_bit(int4) in line 28
      protection public
      12 lines of code
      1 parameters
      3 conditional paths
   function last_set_bit(nat4) in line 41
      protection public
      11 lines of code
      1 parameters
      3 conditional paths
   function minimum(int4,int4) in line 53
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function maximum(int4,int4) in line 54
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function make_mask(int) in line 56
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
      uses macro definition ALL_BITS defined in types.hh
   function make_mask(int,int) in line 60
      protection public
      6 lines of code
      2 parameters
      2 conditional paths
      uses macro definition ALL_BITS defined in types.hh
   function make_lshift_mask(int4,int,int) in line 67
      protection public
      11 lines of code
      3 parameters
      3 conditional paths
      uses macro definition ALL_BITS defined in types.hh
   function make_rshift_mask(int4,int,int) in line 79
      protection public
      11 lines of code
      3 parameters
      3 conditional paths
      uses macro definition ALL_BITS defined in types.hh
   function make_rushift_mask(nat4,int,int) in line 91
      protection public
      11 lines of code
      3 parameters
      3 conditional paths
      uses macro definition ALL_BITS defined in types.hh
   function calculate_multiply_range(vbm_operand &,vbm_operand &,vbm_operand &) in line 103
      protection public
      51 lines of code
      3 parameters
      29 conditional paths
      uses variable max defined in vbm_operand
      uses variable min defined in vbm_operand
      uses function minimum(int4,int4) defined in inlines.hh
      uses function maximum(int4,int4) defined in inlines.hh
      uses function first_set_bit(int4) defined in inlines.hh
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/jlint/jlint-3.1.2/jlint.cc
module jlint.cc
   macro definition MSG in line 48
      protection public
   variable verbose in line 33
      protection public
   variable max_shown_paths in line 34
      protection public
   variable n_messages in line 36
      protection public
   variable source_file_path in line 38
      protection public
   variable source_file_path_len in line 39
      protection public
   variable source_path_redefined in line 40
      protection public
   variable reported_message_mask in line 41
      protection public
   variable history in line 42
      protection public
   variable stringPool in line 43
      protection public
   variable is_const in line 44
      protection public
   variable msg_table in line 46
      protection public
   variable msg_category_option in line 898
      protection public
   function string_hash_function(byte *) in line 54
      protection public
      11 lines of code
      1 parameters
      1 conditional paths
   function message_at(int,utf_string const &,int,...) in line 70
      protection public
      7 lines of code
      4 parameters
      1 conditional paths
      uses variable line defined in antic.c
      uses function format_message(int,utf_string const &,int,__VALIST) defined in jlint.cc
   function get_number_of_parameters(utf_string const &) in line 78
      protection public
      27 lines of code
      1 parameters
      10 conditional paths
      uses function as_asciz() defined in utf_string
      uses macro definition nobreak defined in antic.c
   function get_type(utf_string const &) in line 106
      protection public
      28 lines of code
      1 parameters
      14 conditional paths
      uses function as_asciz() defined in utf_string
      uses enumvalue tp_object defined in types.hh
      uses enumvalue tp_int defined in types.hh
      uses enumvalue tp_short defined in types.hh
      uses enumvalue tp_double defined in types.hh
      uses enumvalue tp_long defined in types.hh
      uses enumvalue tp_float defined in types.hh
      uses enumvalue tp_void defined in types.hh
      uses enumvalue tp_byte defined in types.hh
      uses enumvalue tp_char defined in types.hh
      uses enumvalue tp_bool defined in types.hh
      uses enumvalue tp_string defined in types.hh
   function format_message(int,utf_string const &,int,__VALIST) in line 139
      protection public
      144 lines of code
      4 parameters
      27 conditional paths
      uses macro definition MAX_MSG_PARAMETERS defined in types.hh
      uses variable history defined in jlint.cc
      uses variable next defined in message_node
      uses variable text defined in message_node
      uses variable n_messages defined in jlint.cc
      uses variable reported_message_mask defined in jlint.cc
      uses variable msg_table defined in jlint.cc
      uses macro definition MAX_MSG_LENGTH defined in types.hh
      uses variable line defined in antic.c
      uses function as_asciz() defined in utf_string
      uses variable format defined in message_descriptor
      uses macro definition MSG_LOCATION_PREFIX defined in types.hh
      uses variable graph defined in graph_vertex
      uses variable n_vertexes defined in graph_vertex
      uses variable hash_table defined in class_desc
      uses variable class_hash_table_size defined in types.hh
      uses variable chain defined in class_desc
      uses variable n_classes defined in class_desc
   function set_class_source_path(class_desc *) in line 295
      protection public
      24 lines of code
      1 parameters
      5 conditional paths
      uses variable source_file_path_len defined in jlint.cc
      uses variable source_file defined in class_desc
      uses function as_asciz() defined in utf_string
      uses variable source_path_redefined defined in jlint.cc
      uses variable source_file_path defined in jlint.cc
      uses macro definition MAX_MSG_LENGTH defined in types.hh
      uses macro definition FILE_SEP defined in types.hh
   function parse_class_file(byte *) in line 320
      protection public
      326 lines of code
      1 parameters
      43 conditional paths
      uses function unpack4(byte *) defined in inlines.hh
      uses function unpack2(byte *) defined in inlines.hh
      uses enumvalue c_utf8 defined in jlint.hh
      uses enumvalue c_integer defined in jlint.hh
      uses enumvalue c_float defined in jlint.hh
      uses enumvalue c_long defined in jlint.hh
      uses enumvalue c_double defined in jlint.hh
      uses enumvalue c_class defined in jlint.hh
      uses enumvalue c_string defined in jlint.hh
      uses enumvalue c_field_ref defined in jlint.hh
      uses enumvalue c_method_ref defined in jlint.hh
      uses enumvalue c_interface_method_ref defined in jlint.hh
      uses enumvalue c_name_and_type defined in jlint.hh
      uses function length() defined in constant
      uses function set_class_source_path(class_desc *) defined in jlint.cc
      uses variable name_and_type defined in field_desc
      uses variable equals defined in field_desc
      uses variable cls defined in component_desc
      uses variable is_const defined in jlint.cc
      uses variable attr defined in class_desc
      uses variable n_bases defined in class_desc
      uses variable bases defined in class_desc
      uses function get_field(utf_string const &) defined in class_desc
      uses variable attr defined in field_desc
      uses variable source_file defined in class_desc
      uses function rindex(byte) defined in utf_string
      uses macro definition FILE_SEP defined in types.hh
      uses variable file_name defined in antic.c
      uses function append(int,utf_string const &) defined in utf_string
      uses function get_method(utf_string const &,utf_string const &) defined in class_desc
      uses variable attr defined in method_desc
      uses variable vars defined in method_desc
      uses variable code defined in method_desc
      uses variable code_length defined in method_desc
      uses variable n_vars defined in method_desc
      uses variable line_table defined in method_desc
      uses variable context defined in method_desc
      uses variable first_line defined in method_desc
      uses variable local_variable_table_present defined in method_desc
      uses enumvalue m_static defined in method_desc
      uses enumvalue tp_self defined in types.hh
      uses function get_type(utf_string const &) defined in jlint.cc
      uses variable verbose defined in jlint.cc
      uses enumvalue m_native defined in method_desc
      uses macro definition MAX_MSG_LENGTH defined in types.hh
      uses function demangle_method_name(char *) defined in method_desc
      uses function parse_code(constant **,const field_desc *) defined in method_desc
      uses variable usedLocks defined in class_desc
      uses function begin() defined in Locks
      uses function end() defined in Locks
      uses function message_at(int,utf_string const &,int,...) defined in jlint.cc
   function stricmp(const char *,const char *) in line 651
      protection public
      13 lines of code
      2 parameters
      5 conditional paths
   function proceed_file(char *,bool) in line 665
      protection public
      228 lines of code
      2 parameters
      37 conditional paths
      uses macro definition MAX_PATH defined in antic.c
      uses variable file_name defined in antic.c
      uses function stricmp(const char *,const char *) defined in jlint.cc
      uses variable f defined in antic.c
      uses macro definition ECREC_SIZE defined in jlint.hh
      uses function unpack2_le(byte *) defined in inlines.hh
      uses macro definition TOTAL_ENTRIES_CENTRAL_DIR defined in jlint.hh
      uses function unpack4_le(byte *) defined in inlines.hh
      uses macro definition SIZE_CENTRAL_DIRECTORY defined in jlint.hh
      uses macro definition C_COMPRESSION_METHOD defined in jlint.hh
      uses macro definition C_COMPRESSED_SIZE defined in jlint.hh
      uses macro definition C_UNCOMPRESSED_SIZE defined in jlint.hh
      uses macro definition C_FILENAME_LENGTH defined in jlint.hh
      uses macro definition C_EXTRA_FIELD_LENGTH defined in jlint.hh
      uses macro definition CREC_SIZE defined in jlint.hh
      uses macro definition LREC_SIZE defined in jlint.hh
      uses macro definition C_RELATIVE_OFFSET_LOCAL_HEADER defined in jlint.hh
      uses macro definition LOCAL_HDR_SIG defined in jlint.hh
      uses macro definition L_FILENAME_LENGTH defined in jlint.hh
      uses macro definition L_EXTRA_FIELD_LENGTH defined in jlint.hh
      uses macro definition C_UNCOMPRESSED defined in jlint.hh
      uses variable verbose defined in jlint.cc
      uses function parse_class_file(byte *) defined in jlint.cc
      uses macro definition C_DEFLATE defined in jlint.hh
   function usage() in line 949
      protection public
      38 lines of code
      0 parameters
      7 conditional paths
      uses variable msg_category_option defined in jlint.cc
      uses variable msg_cat defined in msg_select_category_option
      uses macro definition items defined in antic.c
      uses variable verbose defined in jlint.cc
      uses variable msg_table defined in jlint.cc
   function main(int,char *) in line 988
      protection public
      102 lines of code
      2 parameters
      23 conditional paths
      uses function usage() defined in jlint.cc
      uses macro definition items defined in antic.c
      uses variable msg_category_option defined in jlint.cc
      uses function stricmp(const char *,const char *) defined in jlint.cc
      uses variable source_file_path defined in jlint.cc
      uses variable source_file_path_len defined in jlint.cc
      uses macro definition FILE_SEP defined in types.hh
      uses variable source_path_redefined defined in jlint.cc
      uses variable history defined in jlint.cc
      uses macro definition MAX_MSG_LENGTH defined in types.hh
      uses variable max_shown_paths defined in jlint.cc
      uses variable verbose defined in jlint.cc
      uses macro definition VERSION defined in antic.c
      uses variable reported_message_mask defined in jlint.cc
      uses variable msg_cat defined in msg_select_category_option
      uses variable msg_table defined in jlint.cc
      uses variable enabled defined in message_descriptor
      uses variable file_name defined in antic.c
      uses function proceed_file(char *,bool) defined in jlint.cc
      uses function message_at(int,utf_string const &,int,...) defined in jlint.cc
      uses variable n_messages defined in jlint.cc
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/jlint/jlint-3.1.2/jlint.d
module jlint.d
   variable aconst_null in line 3
      protection public
   variable iconst_0 in line 5
      protection public
   variable iconst_2 in line 7
      protection public
   variable iconst_4 in line 9
      protection public
   variable lconst_0 in line 11
      protection public
   variable fconst_0 in line 13
      protection public
   variable fconst_2 in line 15
      protection public
   variable dconst_1 in line 17
      protection public
   variable sipush in line 19
      protection public
   variable ldc_w in line 21
      protection public
   variable iload in line 23
      protection public
   variable fload in line 25
      protection public
   variable aload in line 27
      protection public
   variable iload_1 in line 29
      protection public
   variable iload_3 in line 31
      protection public
   variable lload_1 in line 33
      protection public
   variable lload_3 in line 35
      protection public
   variable fload_1 in line 37
      protection public
   variable fload_3 in line 39
      protection public
   variable dload_1 in line 41
      protection public
   variable dload_3 in line 43
      protection public
   variable aload_1 in line 45
      protection public
   variable aload_3 in line 47
      protection public
   variable laload in line 49
      protection public
   variable daload in line 51
      protection public
   variable baload in line 53
      protection public
   variable saload in line 55
      protection public
   variable lstore in line 57
      protection public
   variable dstore in line 59
      protection public
   variable istore_0 in line 61
      protection public
   variable istore_2 in line 63
      protection public
   variable lstore_0 in line 65
      protection public
   variable lstore_2 in line 67
      protection public
   variable fstore_0 in line 69
      protection public
   variable fstore_2 in line 71
      protection public
   variable dstore_0 in line 73
      protection public
   variable dstore_2 in line 75
      protection public
   variable astore_0 in line 77
      protection public
   variable astore_2 in line 79
      protection public
   variable iastore in line 81
      protection public
   variable fastore in line 83
      protection public
   variable aastore in line 85
      protection public
   variable castore in line 87
      protection public
   variable pop in line 89
      protection public
   variable dup_x0 in line 91
      protection public
   variable dup_x2 in line 93
      protection public
   variable dup2_x1 in line 95
      protection public
   variable Jswap in line 97
      protection public
   variable ladd in line 99
      protection public
   variable dadd in line 101
      protection public
   variable lsub in line 103
      protection public
   variable dsub in line 105
      protection public
   variable lmul in line 107
      protection public
   variable dmul in line 109
      protection public
   variable lidiv in line 111
      protection public
   variable ddiv in line 113
      protection public
   variable lrem in line 115
      protection public
   variable drem in line 117
      protection public
   variable lneg in line 119
      protection public
   variable dneg in line 121
      protection public
   variable lshl in line 123
      protection public
   variable lshr in line 125
      protection public
   variable lushr in line 127
      protection public
   variable land in line 129
      protection public
   variable lor in line 131
      protection public
   variable lxor in line 133
      protection public
   variable i2l in line 135
      protection public
   variable i2d in line 137
      protection public
   variable l2f in line 139
      protection public
   variable f2i in line 141
      protection public
   variable f2d in line 143
      protection public
   variable d2l in line 145
      protection public
   variable i2b in line 147
      protection public
   variable i2s in line 149
      protection public
   variable fcmpl in line 151
      protection public
   variable dcmpl in line 153
      protection public
   variable ifeq in line 155
      protection public
   variable iflt in line 157
      protection public
   variable ifgt in line 159
      protection public
   variable if_icmpeq in line 161
      protection public
   variable if_icmplt in line 163
      protection public
   variable if_icmpgt in line 165
      protection public
   variable if_acmpeq in line 167
      protection public
   variable goto_near in line 169
      protection public
   variable ret in line 171
      protection public
   variable lookupswitch in line 173
      protection public
   variable lreturn in line 175
      protection public
   variable dreturn in line 177
      protection public
   variable vreturn in line 179
      protection public
   variable putstatic in line 181
      protection public
   variable putfield in line 183
      protection public
   variable invokespecial in line 185
      protection public
   variable invokeinterface in line 187
      protection public
   variable anew in line 189
      protection public
   variable anewarray in line 191
      protection public
   variable athrow in line 193
      protection public
   variable instanceof in line 195
      protection public
   variable monitorexit in line 197
      protection public
   variable multianewarray in line 199
      protection public
   variable ifnonnull in line 201
      protection public
   variable jsr_w in line 203
      protection public
   function JAVA_INSN(0,nop,1) in line 2
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function JAVA_INSN(2,iconst_m1,1) in line 4
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function JAVA_INSN(4,iconst_1,1) in line 6
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function JAVA_INSN(6,iconst_3,1) in line 8
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function JAVA_INSN(8,iconst_5,1) in line 10
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function JAVA_INSN(10,lconst_1,1) in line 12
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function JAVA_INSN(12,fconst_1,1) in line 14
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function JAVA_INSN(14,dconst_0,1) in line 16
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function JAVA_INSN(16,bipush,2) in line 18
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function JAVA_INSN(18,ldc,2) in line 20
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function JAVA_INSN(20,ldc2_w,3) in line 22
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function JAVA_INSN(22,lload,2) in line 24
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function JAVA_INSN(24,dload,2) in line 26
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function JAVA_INSN(26,iload_0,1) in line 28
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function JAVA_INSN(28,iload_2,1) in line 30
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function JAVA_INSN(30,lload_0,1) in line 32
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function JAVA_INSN(32,lload_2,1) in line 34
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function JAVA_INSN(34,fload_0,1) in line 36
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function JAVA_INSN(36,fload_2,1) in line 38
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function JAVA_INSN(38,dload_0,1) in line 40
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function JAVA_INSN(40,dload_2,1) in line 42
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function JAVA_INSN(42,aload_0,1) in line 44
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function JAVA_INSN(44,aload_2,1) in line 46
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function JAVA_INSN(46,iaload,1) in line 48
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function JAVA_INSN(48,faload,1) in line 50
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function JAVA_INSN(50,aaload,1) in line 52
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function JAVA_INSN(52,caload,1) in line 54
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function JAVA_INSN(54,istore,2) in line 56
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function JAVA_INSN(56,fstore,2) in line 58
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function JAVA_INSN(58,astore,2) in line 60
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function JAVA_INSN(60,istore_1,1) in line 62
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function JAVA_INSN(62,istore_3,1) in line 64
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function JAVA_INSN(64,lstore_1,1) in line 66
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function JAVA_INSN(66,lstore_3,1) in line 68
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function JAVA_INSN(68,fstore_1,1) in line 70
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function JAVA_INSN(70,fstore_3,1) in line 72
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function JAVA_INSN(72,dstore_1,1) in line 74
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function JAVA_INSN(74,dstore_3,1) in line 76
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function JAVA_INSN(76,astore_1,1) in line 78
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function JAVA_INSN(78,astore_3,1) in line 80
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function JAVA_INSN(80,lastore,1) in line 82
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function JAVA_INSN(82,dastore,1) in line 84
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function JAVA_INSN(84,bastore,1) in line 86
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function JAVA_INSN(86,sastore,1) in line 88
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function JAVA_INSN(88,pop2,1) in line 90
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function JAVA_INSN(90,dup_x1,1) in line 92
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function JAVA_INSN(92,dup2_x0,1) in line 94
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function JAVA_INSN(94,dup2_x2,1) in line 96
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function JAVA_INSN(96,iadd,1) in line 98
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function JAVA_INSN(98,fadd,1) in line 100
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function JAVA_INSN(100,isub,1) in line 102
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function JAVA_INSN(102,fsub,1) in line 104
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function JAVA_INSN(104,imul,1) in line 106
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function JAVA_INSN(106,fmul,1) in line 108
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function JAVA_INSN(108,idiv,1) in line 110
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function JAVA_INSN(110,fdiv,1) in line 112
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function JAVA_INSN(112,irem,1) in line 114
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function JAVA_INSN(114,frem,1) in line 116
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function JAVA_INSN(116,ineg,1) in line 118
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function JAVA_INSN(118,fneg,1) in line 120
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function JAVA_INSN(120,ishl,1) in line 122
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function JAVA_INSN(122,ishr,1) in line 124
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function JAVA_INSN(124,iushr,1) in line 126
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function JAVA_INSN(126,iand,1) in line 128
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function JAVA_INSN(128,ior,1) in line 130
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function JAVA_INSN(130,ixor,1) in line 132
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function JAVA_INSN(132,iinc,3) in line 134
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function JAVA_INSN(134,i2f,1) in line 136
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function JAVA_INSN(136,l2i,1) in line 138
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function JAVA_INSN(138,l2d,1) in line 140
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function JAVA_INSN(140,f2l,1) in line 142
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function JAVA_INSN(142,d2i,1) in line 144
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function JAVA_INSN(144,d2f,1) in line 146
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function JAVA_INSN(146,i2c,1) in line 148
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function JAVA_INSN(148,lcmp,1) in line 150
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function JAVA_INSN(150,fcmpg,1) in line 152
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function JAVA_INSN(152,dcmpg,1) in line 154
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function JAVA_INSN(154,ifne,3) in line 156
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function JAVA_INSN(156,ifge,3) in line 158
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function JAVA_INSN(158,ifle,3) in line 160
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function JAVA_INSN(160,if_icmpne,3) in line 162
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function JAVA_INSN(162,if_icmpge,3) in line 164
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function JAVA_INSN(164,if_icmple,3) in line 166
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function JAVA_INSN(166,if_acmpne,3) in line 168
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function JAVA_INSN(168,jsr,3) in line 170
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function JAVA_INSN(170,tableswitch,15) in line 172
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function JAVA_INSN(172,ireturn,1) in line 174
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function JAVA_INSN(174,freturn,1) in line 176
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function JAVA_INSN(176,areturn,1) in line 178
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function JAVA_INSN(178,getstatic,3) in line 180
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function JAVA_INSN(180,getfield,3) in line 182
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function JAVA_INSN(182,invokevirtual,3) in line 184
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function JAVA_INSN(184,invokestatic,3) in line 186
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function JAVA_INSN(186,unused,0) in line 188
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function JAVA_INSN(188,newarray,2) in line 190
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function JAVA_INSN(190,arraylength,1) in line 192
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function JAVA_INSN(192,checkcast,3) in line 194
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function JAVA_INSN(194,monitorenter,1) in line 196
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function JAVA_INSN(196,wide,10) in line 198
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function JAVA_INSN(198,ifnull,3) in line 200
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function JAVA_INSN(200,goto_w,5) in line 202
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/jlint/jlint-3.1.2/jlint.hh
module jlint.hh
   macro definition VERSION in line 16
      protection public
   macro definition LOCAL_HDR_SIG in line 54
      protection public
   macro definition LREC_SIZE in line 57
      protection public
   macro definition L_VERSION_NEEDED_TO_EXTRACT_0 in line 58
      protection public
   macro definition L_VERSION_NEEDED_TO_EXTRACT_1 in line 59
      protection public
   macro definition L_GENERAL_PURPOSE_BIT_FLAG in line 60
      protection public
   macro definition L_COMPRESSION_METHOD in line 61
      protection public
   macro definition L_LAST_MOD_FILE_TIME in line 62
      protection public
   macro definition L_LAST_MOD_FILE_DATE in line 63
      protection public
   macro definition L_CRC32 in line 64
      protection public
   macro definition L_COMPRESSED_SIZE in line 65
      protection public
   macro definition L_UNCOMPRESSED_SIZE in line 66
      protection public
   macro definition L_FILENAME_LENGTH in line 67
      protection public
   macro definition L_EXTRA_FIELD_LENGTH in line 68
      protection public
   macro definition CREC_SIZE in line 71
      protection public
   macro definition C_VERSION_MADE_BY_0 in line 72
      protection public
   macro definition C_VERSION_MADE_BY_1 in line 73
      protection public
   macro definition C_VERSION_NEEDED_TO_EXTRACT_0 in line 74
      protection public
   macro definition C_VERSION_NEEDED_TO_EXTRACT_1 in line 75
      protection public
   macro definition C_GENERAL_PURPOSE_BIT_FLAG in line 76
      protection public
   macro definition C_COMPRESSION_METHOD in line 77
      protection public
   macro definition C_LAST_MOD_FILE_TIME in line 78
      protection public
   macro definition C_LAST_MOD_FILE_DATE in line 79
      protection public
   macro definition C_CRC32 in line 80
      protection public
   macro definition C_COMPRESSED_SIZE in line 81
      protection public
   macro definition C_UNCOMPRESSED_SIZE in line 82
      protection public
   macro definition C_FILENAME_LENGTH in line 83
      protection public
   macro definition C_EXTRA_FIELD_LENGTH in line 84
      protection public
   macro definition C_FILE_COMMENT_LENGTH in line 85
      protection public
   macro definition C_DISK_NUMBER_START in line 86
      protection public
   macro definition C_INTERNAL_FILE_ATTRIBUTES in line 87
      protection public
   macro definition C_EXTERNAL_FILE_ATTRIBUTES in line 88
      protection public
   macro definition C_RELATIVE_OFFSET_LOCAL_HEADER in line 89
      protection public
   macro definition ECREC_SIZE in line 92
      protection public
   macro definition NUMBER_THIS_DISK in line 94
      protection public
   macro definition NUM_DISK_WITH_START_CENTRAL_DIR in line 95
      protection public
   macro definition NUM_ENTRIES_CENTRL_DIR_THS_DISK in line 96
      protection public
   macro definition TOTAL_ENTRIES_CENTRAL_DIR in line 97
      protection public
   macro definition SIZE_CENTRAL_DIRECTORY in line 98
      protection public
   macro definition OFFSET_START_CENTRAL_DIRECTORY in line 99
      protection public
   macro definition ZIPFILE_COMMENT_LENGTH in line 100
      protection public
   macro definition C_DEFLATE in line 104
      protection public
   macro definition C_UNCOMPRESSED in line 105
      protection public
   enumeration const_types in line 34
      protection public
   enumvalue c_none in line 35
      protection public
   enumvalue c_utf8 in line 36
      protection public
   enumvalue c_reserver in line 37
      protection public
   enumvalue c_integer in line 38
      protection public
   enumvalue c_float in line 39
      protection public
   enumvalue c_long in line 40
      protection public
   enumvalue c_double in line 41
      protection public
   enumvalue c_class in line 42
      protection public
   enumvalue c_string in line 43
      protection public
   enumvalue c_field_ref in line 44
      protection public
   enumvalue c_method_ref in line 45
      protection public
   enumvalue c_interface_method_ref in line 46
      protection public
   enumvalue c_name_and_type in line 48
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/jlint/jlint-3.1.2/local_context.cc
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/jlint/jlint-3.1.2/local_context.hh
module local_context
   abstract class
   function transfer(method_desc *,vbm_operand *,byte,byte &) in line 23
      protection public
      1 lines of code
      4 parameters
      1 conditional paths
   function local_context(context_cmd,local_context **) in line 26
      protection public
      8 lines of code
      2 parameters
      2 conditional paths
      uses variable cmd defined in local_context
      uses variable next defined in local_context
   variable cmd in line 19
      protection public
   variable next in line 21
      protection public
module ctx_entry_point
   inherits from local_context
   function transfer(method_desc *,vbm_operand *,byte,byte &) in line 41
      protection public
      41 lines of code
      4 parameters
      4 conditional paths
      uses variable vars defined in method_desc
      uses variable n_vars defined in method_desc
      uses variable type defined in var_desc
      uses macro definition IS_INT_TYPE defined in types.hh
      uses variable min defined in var_desc
      uses variable ranges defined in types.hh
      uses variable min defined in int_type_range
      uses variable max defined in var_desc
      uses variable max defined in int_type_range
      uses variable mask defined in var_desc
      uses enumvalue tp_long defined in types.hh
      uses macro definition MAX_ARRAY_LENGTH defined in types.hh
      uses enumvalue vs_unknown defined in var_desc
      uses variable type defined in vbm_operand
      uses enumvalue tp_object defined in types.hh
      uses variable mask defined in vbm_operand
      uses enumvalue vs_not_null defined in var_desc
      uses variable min defined in vbm_operand
      uses variable max defined in vbm_operand
   function ctx_entry_point(local_context **) in line 38
      protection public
      2 lines of code
      1 parameters
      1 conditional paths
      uses function transfer(method_desc *,vbm_operand *,byte,byte &) defined in local_context
module ctx_split
   inherits from local_context
   function transfer(method_desc *,vbm_operand *,byte,byte &) in line 62
      protection public
      376 lines of code
      4 parameters
      136 conditional paths
      uses variable cmd defined in local_context
      uses enumvalue cmd_save_ctx defined in local_context
      uses variable n_vars defined in method_desc
      uses variable vars defined in method_desc
      uses variable in_monitor defined in method_desc
      uses variable jsr_w defined in jlint.d
      uses variable type defined in vbm_operand
      uses enumvalue tp_object defined in types.hh
      uses variable mask defined in vbm_operand
      uses enumvalue vs_not_null defined in var_desc
      uses variable min defined in vbm_operand
      uses variable max defined in vbm_operand
      uses macro definition MAX_ARRAY_LENGTH defined in types.hh
      uses variable lookupswitch defined in jlint.d
      uses variable index defined in vbm_operand
      uses variable ifeq defined in jlint.d
      uses macro definition IS_INT_TYPE defined in types.hh
      uses variable type defined in var_desc
      uses variable mask defined in var_desc
      uses variable max defined in var_desc
      uses variable min defined in var_desc
      uses variable iflt defined in jlint.d
      uses macro definition SIGN_BIT defined in types.hh
      uses variable ifgt defined in jlint.d
      uses variable if_icmpeq defined in jlint.d
      uses variable if_icmplt defined in jlint.d
      uses variable ranges defined in types.hh
      uses enumvalue tp_int defined in types.hh
      uses variable max defined in int_type_range
      uses variable min defined in int_type_range
      uses variable if_icmpgt defined in jlint.d
      uses variable if_acmpeq defined in jlint.d
      uses variable ifnonnull defined in jlint.d
   function ctx_split(local_context **,jmp_type) in line 56
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses function transfer(method_desc *,vbm_operand *,byte,byte &) defined in local_context
   variable in_monitor in line 52
      protection public
   variable n_branches in line 51
      protection public
   variable stack_pointer in line 48
      protection public
   variable stack_top in line 49
      protection public
   variable switch_var_index in line 50
      protection public
   variable vars in line 47
      protection public
module ctx_merge
   inherits from local_context
   function transfer(method_desc *,vbm_operand *,byte,byte &) in line 84
      protection public
      139 lines of code
      4 parameters
      29 conditional paths
      uses variable in_monitor defined in method_desc
      uses variable cmd defined in local_context
      uses enumvalue cmd_case_ctx defined in local_context
      uses variable max defined in var_desc
      uses variable min defined in var_desc
      uses variable mask defined in var_desc
      uses variable vars defined in method_desc
      uses variable goto_near defined in jlint.d
      uses variable ret defined in jlint.d
      uses variable athrow defined in jlint.d
      uses variable lookupswitch defined in jlint.d
      uses variable vreturn defined in jlint.d
      uses variable n_vars defined in method_desc
      uses variable type defined in var_desc
      uses enumvalue tp_void defined in types.hh
      uses macro definition IS_INT_TYPE defined in types.hh
      uses enumvalue tp_long defined in types.hh
      uses variable ranges defined in types.hh
      uses enumvalue tp_int defined in types.hh
      uses variable min defined in int_type_range
      uses variable max defined in int_type_range
      uses macro definition ALL_BITS defined in types.hh
      uses macro definition MAX_ARRAY_LENGTH defined in types.hh
      uses variable min defined in vbm_operand
      uses variable max defined in vbm_operand
      uses variable mask defined in vbm_operand
   function ctx_merge(local_context **,ctx_split *) in line 71
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
   function ctx_merge(local_context **,ctx_split *,int) in line 77
      protection public
      6 lines of code
      3 parameters
      1 conditional paths
      uses function transfer(method_desc *,vbm_operand *,byte,byte &) defined in local_context
   variable case_value in line 69
      protection public
   variable come_from in line 68
      protection public
module ctx_pop_var
   inherits from local_context
   function transfer(method_desc *,vbm_operand *,byte,byte &) in line 95
      protection public
      25 lines of code
      4 parameters
      3 conditional paths
      uses variable vars defined in method_desc
      uses variable var_index defined in ctx_push_var
      uses variable cls defined in component_desc
      uses variable fields defined in class_desc
      uses variable next defined in field_desc
      uses variable name defined in var_desc
      uses enumvalue f_used defined in field_desc
      uses variable start_pc defined in var_desc
      uses function message(int,int,...) defined in method_desc
      uses variable type defined in var_desc
      uses enumvalue tp_void defined in types.hh
   function ctx_pop_var(local_context **,int) in line 92
      protection public
      2 lines of code
      2 parameters
      1 conditional paths
      uses function transfer(method_desc *,vbm_operand *,byte,byte &) defined in local_context
   variable var_index in line 90
      protection public
module ctx_push_var
   inherits from local_context
   function transfer(method_desc *,vbm_operand *,byte,byte &) in line 116
      protection public
      28 lines of code
      4 parameters
      4 conditional paths
      uses variable vars defined in method_desc
      uses variable var_index defined in ctx_push_var
      uses variable type defined in var_desc
      uses enumvalue tp_void defined in types.hh
      uses macro definition IS_INT_TYPE defined in types.hh
      uses variable var_type defined in ctx_push_var
      uses variable min defined in var_desc
      uses variable ranges defined in types.hh
      uses variable min defined in int_type_range
      uses variable max defined in var_desc
      uses variable max defined in int_type_range
      uses variable mask defined in var_desc
      uses enumvalue tp_long defined in types.hh
      uses enumvalue tp_self defined in types.hh
      uses enumvalue vs_not_null defined in var_desc
      uses enumvalue vs_unknown defined in var_desc
      uses macro definition MAX_ARRAY_LENGTH defined in types.hh
      uses variable name defined in var_desc
      uses variable var_name defined in ctx_push_var
      uses variable start_pc defined in var_desc
      uses variable var_start_pc defined in ctx_push_var
   function ctx_push_var(local_context **,utf_string *,int,int,int) in line 106
      protection public
      8 lines of code
      5 parameters
      1 conditional paths
      uses function transfer(method_desc *,vbm_operand *,byte,byte &) defined in local_context
   variable var_index in line 103
      protection public
   variable var_name in line 101
      protection public
   variable var_start_pc in line 104
      protection public
   variable var_type in line 102
      protection public
module ctx_reset
   inherits from local_context
   function transfer(method_desc *,vbm_operand *,byte,byte &) in line 131
      protection public
      35 lines of code
      4 parameters
      5 conditional paths
      uses variable vars defined in method_desc
      uses variable n_vars defined in method_desc
      uses variable var_store_count defined in method_desc
      uses variable type defined in var_desc
      uses macro definition IS_INT_TYPE defined in types.hh
      uses variable min defined in var_desc
      uses variable ranges defined in types.hh
      uses variable min defined in int_type_range
      uses variable max defined in var_desc
      uses variable max defined in int_type_range
      uses variable mask defined in var_desc
      uses enumvalue tp_long defined in types.hh
      uses enumvalue vs_unknown defined in var_desc
      uses macro definition MAX_ARRAY_LENGTH defined in types.hh
   function ctx_reset(local_context **,int *,int) in line 124
      protection public
      6 lines of code
      3 parameters
      1 conditional paths
      uses function transfer(method_desc *,vbm_operand *,byte,byte &) defined in local_context
   variable var_store_count in line 122
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/jlint/jlint-3.1.2/locks.cc
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/jlint/jlint-3.1.2/locks.hh
module locks.hh
   typedef Lock in line 18
      protection public
   typedef monitor_table in line 50
      protection public
   typedef monitor_stack in line 62
      protection public
module ltLock
   function operator()(const Lock,const Lock) in line 45
      protection public
      3 lines of code
      2 parameters
      1 conditional paths
      uses variable name defined in component_desc
      uses function as_asciz() defined in utf_string
module Locks
   function acquire(Lock) in line 76
      protection public
      15 lines of code
      1 parameters
      2 conditional paths
      uses variable monTable defined in Locks
      uses variable monStack defined in Locks
      uses variable name defined in component_desc
      uses function as_asciz() defined in utf_string
   function begin() in line 88
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function clear() in line 70
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
   function end() in line 92
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function getInnermost() in line 96
      protection public
      7 lines of code
      0 parameters
      2 conditional paths
   function nLocks() in line 84
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function owns(Lock) in line 79
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function release(Lock) in line 77
      protection public
      18 lines of code
      1 parameters
      3 conditional paths
      uses function getInnermost() defined in Locks
      uses variable monStack defined in Locks
      uses variable monTable defined in Locks
      uses variable name defined in component_desc
      uses function as_asciz() defined in utf_string
   variable monStack in line 68
   variable monTable in line 67
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/jlint/jlint-3.1.2/message_node.cc
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/jlint/jlint-3.1.2/message_node.hh
module message_node
   function add_to_hash(char *) in line 15
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses function string_hash_function(byte *) defined in functions.hh
      uses macro definition items defined in antic.c
      uses variable hash_table defined in message_node
      uses function message_node(char *) defined in message_node
      uses variable next defined in message_node
   function find(char *) in line 14
      protection public
      10 lines of code
      1 parameters
      3 conditional paths
      uses function string_hash_function(byte *) defined in functions.hh
      uses macro definition items defined in antic.c
      uses variable hash_table defined in message_node
      uses variable next defined in message_node
   function message_node(char *) in line 17
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable text defined in message_node
      uses variable next defined in message_node
   function ~message_node() in line 21
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
      uses variable text defined in message_node
   variable hash_table in line 9
   variable next in line 11
      protection public
   variable text in line 12
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/jlint/jlint-3.1.2/method_desc.cc
module method_desc.cc
   function print_call_sequence(callee_desc *,int,int) in line 7
      protection public
      8 lines of code
      3 parameters
      2 conditional paths
      uses variable backtrace defined in callee_desc
      uses function message(int,...) defined in callee_desc
      uses variable method defined in callee_desc
   function compound_name(const char *,const char *) in line 3055
      protection public
      14 lines of code
      2 parameters
      1 conditional paths
      uses variable stringPool defined in jlint.cc
      uses function add(const char *) defined in string_pool
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/jlint/jlint-3.1.2/method_desc.hh
module method_desc.hh
   variable stringPool in line 149
      protection public
   variable is_const in line 150
      protection public
   function compound_name(const char *,const char *) in line 148
      protection public
      14 lines of code
      2 parameters
      1 conditional paths
      uses variable stringPool defined in jlint.cc
      uses function add(const char *) defined in string_pool
module method_desc
   inherits from component_desc
   function add_to_concurrent_closure(callee_desc *,int,int) in line 98
      protection public
      76 lines of code
      3 parameters
      16 conditional paths
      uses variable overridden defined in method_desc
      uses variable next defined in overridden_method
      uses variable attr defined in method_desc
      uses enumvalue m_synchronized defined in method_desc
      uses enumvalue i_synchronized defined in callee_desc
      uses enumvalue i_self defined in callee_desc
      uses enumvalue m_wait defined in method_desc
      uses enumvalue i_wait_deadlock defined in callee_desc
      uses variable attr defined in callee_desc
      uses variable backtrace defined in callee_desc
      uses function message_at(int,int,char *) defined in antic.c
      uses variable cls defined in component_desc
      uses variable source_file defined in class_desc
      uses variable wait_line defined in method_desc
      uses function message(int,...) defined in callee_desc
      uses variable method defined in callee_desc
      uses enumvalue m_concurrent defined in method_desc
      uses enumvalue m_visited defined in method_desc
      uses variable callees defined in method_desc
      uses variable next defined in callee_desc
      uses function add_to_concurrent_closure(callee_desc *,int,int) defined in method_desc
   function basic_blocks_analysis() in line 119
      protection public
      166 lines of code
      0 parameters
      61 conditional paths
      uses variable code defined in method_desc
      uses variable code_length defined in method_desc
      uses variable var_store_count defined in method_desc
      uses variable n_vars defined in method_desc
      uses variable vars defined in method_desc
      uses variable type defined in var_desc
      uses enumvalue tp_void defined in types.hh
      uses variable name defined in var_desc
      uses variable min defined in var_desc
      uses variable max defined in var_desc
      uses macro definition MAX_ARRAY_LENGTH defined in types.hh
      uses variable ifeq defined in jlint.d
      uses variable iflt defined in jlint.d
      uses variable ifgt defined in jlint.d
      uses variable if_icmpeq defined in jlint.d
      uses variable if_icmplt defined in jlint.d
      uses variable if_icmpgt defined in jlint.d
      uses variable if_acmpeq defined in jlint.d
      uses variable ifnonnull defined in jlint.d
      uses variable goto_near defined in jlint.d
      uses function unpack2(byte *) defined in inlines.hh
      uses variable context defined in method_desc
      uses enumvalue jmp_backward defined in ctx_split
      uses enumvalue jmp_forward defined in ctx_split
      uses variable jsr_w defined in jlint.d
      uses function unpack4(byte *) defined in inlines.hh
      uses variable n_branches defined in ctx_split
      uses variable lookupswitch defined in jlint.d
      uses variable lstore defined in jlint.d
      uses variable istore_0 defined in jlint.d
      uses variable istore_2 defined in jlint.d
      uses variable lstore_0 defined in jlint.d
      uses variable lstore_2 defined in jlint.d
      uses variable astore_0 defined in jlint.d
      uses variable astore_2 defined in jlint.d
      uses variable vbm_instruction_length defined in types.hh
   function build_call_graph() in line 101
      protection public
      8 lines of code
      0 parameters
      3 conditional paths
      uses variable attr defined in method_desc
      uses enumvalue m_synchronized defined in method_desc
      uses variable callees defined in method_desc
      uses variable next defined in callee_desc
   function build_call_graph(method_desc *,callee_desc *,int) in line 102
      protection public
      36 lines of code
      3 parameters
      8 conditional paths
      uses variable backtrace defined in callee_desc
      uses variable overridden defined in method_desc
      uses variable next defined in overridden_method
      uses function build_call_graph() defined in method_desc
      uses variable attr defined in method_desc
      uses enumvalue m_synchronized defined in method_desc
      uses enumvalue m_sync_block defined in method_desc
      uses enumvalue i_self defined in callee_desc
      uses macro definition MAX_MSG_LENGTH defined in types.hh
      uses function demangle_method_name(char *) defined in method_desc
      uses variable vertex defined in method_desc
      uses function attach(graph_edge *) defined in graph_vertex
      uses enumvalue m_deadlock_free defined in method_desc
      uses variable callees defined in method_desc
      uses variable next defined in callee_desc
      uses variable method defined in callee_desc
      uses variable attr defined in callee_desc
   function build_concurrent_closure() in line 97
      protection public
      42 lines of code
      0 parameters
      8 conditional paths
      uses variable attr defined in method_desc
      uses enumvalue m_visited defined in method_desc
      uses enumvalue m_synchronized defined in method_desc
      uses enumvalue i_synchronized defined in callee_desc
      uses variable name defined in component_desc
      uses variable cls defined in component_desc
      uses function implements(const char *) defined in class_desc
      uses function isa(const char *) defined in class_desc
      uses function message_at(int,int,char *) defined in antic.c
      uses variable source_file defined in class_desc
      uses variable first_line defined in method_desc
      uses variable callees defined in method_desc
      uses variable next defined in callee_desc
      uses function add_to_concurrent_closure(callee_desc *,int,int) defined in method_desc
      uses variable backtrace defined in callee_desc
   function calculate_attributes() in line 93
      protection public
      14 lines of code
      0 parameters
      2 conditional paths
      uses variable vertex defined in method_desc
      uses variable attr defined in method_desc
      uses enumvalue m_static defined in method_desc
      uses variable cls defined in component_desc
      uses variable metaclass_vertex defined in class_desc
      uses variable class_vertex defined in class_desc
      uses variable callees defined in method_desc
      uses variable next defined in callee_desc
      uses function isa(const char *) defined in class_desc
      uses enumvalue i_self defined in callee_desc
   function check_array_index(int,vbm_operand *) in line 117
      protection public
      18 lines of code
      2 parameters
      7 conditional paths
      uses function check_variable_for_null(int,vbm_operand *) defined in method_desc
      uses function message(int,int,...) defined in method_desc
      uses variable max defined in vbm_operand
      uses macro definition MAX_ARRAY_LENGTH defined in types.hh
   function check_invocations() in line 109
      protection public
      8 lines of code
      0 parameters
      3 conditional paths
      uses variable null_parameter_mask defined in method_desc
      uses variable unchecked_use_mask defined in method_desc
      uses function message_at(int,int,char *) defined in antic.c
      uses variable cls defined in component_desc
      uses variable source_file defined in class_desc
      uses variable first_line defined in method_desc
   function check_synchronization() in line 108
      protection public
      31 lines of code
      0 parameters
      6 conditional paths
      uses variable attr defined in method_desc
      uses enumvalue m_concurrent defined in method_desc
      uses variable callees defined in method_desc
      uses variable next defined in callee_desc
      uses enumvalue m_serialized defined in method_desc
      uses enumvalue m_synchronized defined in method_desc
      uses enumvalue cl_system defined in class_desc
      uses enumvalue i_self defined in callee_desc
      uses enumvalue i_synchronized defined in callee_desc
      uses variable accessor defined in component_desc
      uses variable accessors defined in method_desc
      uses variable next defined in class_desc
      uses variable attr defined in class_desc
      uses enumvalue f_volatile defined in field_desc
      uses enumvalue f_final defined in field_desc
      uses enumvalue f_serialized defined in field_desc
      uses enumvalue a_new defined in access_desc
      uses enumvalue a_self defined in access_desc
      uses variable name defined in class_desc
   function check_variable_for_null(int,vbm_operand *) in line 116
      protection public
      21 lines of code
      2 parameters
      5 conditional paths
      uses variable mask defined in vbm_operand
      uses enumvalue vs_not_null defined in var_desc
      uses variable index defined in vbm_operand
      uses function message(int,int,...) defined in method_desc
      uses variable vars defined in method_desc
      uses variable name defined in var_desc
      uses variable null_parameter_mask defined in method_desc
      uses variable unchecked_use_mask defined in method_desc
   function demangle_method_name(char *) in line 91
      protection public
      61 lines of code
      1 parameters
      16 conditional paths
      uses variable desc defined in method_desc
      uses function as_asciz() defined in utf_string
      uses variable cls defined in component_desc
      uses variable name defined in class_desc
      uses variable name defined in component_desc
   function find_access_dependencies() in line 95
      protection public
      51 lines of code
      0 parameters
      10 conditional paths
      uses variable callees defined in method_desc
      uses variable next defined in callee_desc
      uses variable cls defined in component_desc
      uses function in_relationship_with(class_desc *) defined in class_desc
      uses variable attr defined in class_desc
      uses enumvalue m_serialized defined in method_desc
      uses variable attr defined in method_desc
      uses enumvalue m_static defined in method_desc
      uses enumvalue m_concurrent defined in method_desc
      uses variable accessor defined in component_desc
      uses variable accessors defined in method_desc
      uses variable next defined in class_desc
      uses enumvalue f_static defined in field_desc
      uses function isa(const char *) defined in class_desc
      uses enumvalue a_self defined in access_desc
   function get_line_number(int) in line 113
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses variable line_table defined in method_desc
   function getNew() in line 144
      12 lines of code
      0 parameters
      1 conditional paths
      uses variable name defined in component_desc
      uses variable new_cnt defined in method_desc
      uses variable stringPool defined in jlint.cc
      uses function add(const char *) defined in string_pool
      uses variable cls defined in component_desc
   function is_special_method() in line 111
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
      uses variable name defined in component_desc
      uses function first_char() defined in utf_string
      uses function get_line_number(int) defined in method_desc
      uses function message(int,int,...) defined in method_desc
      uses function check_variable_for_null(int,vbm_operand *) defined in method_desc
      uses function check_array_index(int,vbm_operand *) defined in method_desc
      uses function basic_blocks_analysis() defined in method_desc
      uses function parse_code(constant **,const field_desc *) defined in method_desc
   function message(int,int,...) in line 114
      protection public
      10 lines of code
      3 parameters
      1 conditional paths
      uses variable cls defined in component_desc
      uses variable name defined in class_desc
      uses function as_asciz() defined in utf_string
      uses variable name defined in component_desc
      uses function format_message(int,utf_string const &,int,__VALIST) defined in functions.hh
      uses variable code defined in method_desc
      uses variable source_file defined in class_desc
      uses function get_line_number(int) defined in method_desc
   function parse_code(constant **,const field_desc *) in line 121
      protection public
      2424 lines of code
      2 parameters
      468 conditional paths
      uses variable name defined in component_desc
      uses function as_asciz() defined in utf_string
      uses variable code defined in method_desc
      uses variable code_length defined in method_desc
      uses variable equals defined in vbm_operand
      uses variable in_monitor defined in method_desc
      uses variable type defined in vbm_operand
      uses enumvalue tp_void defined in types.hh
      uses variable cls defined in component_desc
      uses variable locks defined in class_desc
      uses function clear() defined in Locks
      uses function basic_blocks_analysis() defined in method_desc
      uses variable null_parameter_mask defined in method_desc
      uses variable n_vars defined in method_desc
      uses variable vars defined in method_desc
      uses variable mask defined in var_desc
      uses variable min defined in var_desc
      uses variable max defined in var_desc
      uses macro definition MAX_ARRAY_LENGTH defined in types.hh
      uses variable type defined in var_desc
      uses enumvalue tp_object defined in types.hh
      uses variable attr defined in method_desc
      uses enumvalue m_static defined in method_desc
      uses enumvalue tp_self defined in types.hh
      uses enumvalue vs_not_null defined in var_desc
      uses variable equals defined in var_desc
      uses enumvalue m_synchronized defined in method_desc
      uses function acquire(Lock) defined in Locks
      uses variable locksAtEntry defined in method_desc
      uses variable vbm_instruction_mnemonic defined in types.hh
      uses variable context defined in method_desc
      uses variable next defined in local_context
      uses function transfer(method_desc *,vbm_operand *,byte,byte &) defined in local_context
      uses variable aconst_null defined in jlint.d
      uses variable mask defined in vbm_operand
      uses variable min defined in vbm_operand
      uses variable max defined in vbm_operand
      uses variable index defined in vbm_operand
      uses macro definition NO_ASSOC_VAR defined in types.hh
      uses variable iconst_0 defined in jlint.d
      uses variable iconst_2 defined in jlint.d
      uses variable iconst_4 defined in jlint.d
      uses enumvalue tp_byte defined in types.hh
      uses variable fconst_0 defined in jlint.d
      uses variable fconst_2 defined in jlint.d
      uses enumvalue tp_float defined in types.hh
      uses variable lconst_0 defined in jlint.d
      uses enumvalue tp_long defined in types.hh
      uses variable dconst_1 defined in jlint.d
      uses enumvalue tp_double defined in types.hh
      uses enumvalue tp_int defined in types.hh
      uses variable sipush defined in jlint.d
      uses function unpack2(byte *) defined in inlines.hh
      uses function type() defined in constant
      uses enumvalue tp_string defined in types.hh
      uses variable is_const defined in jlint.cc
      uses variable ldc_w defined in jlint.d
      uses variable value defined in const_long
      uses variable high defined in const_long
      uses variable low defined in const_long
      uses variable iload defined in jlint.d
      uses variable ranges defined in types.hh
      uses variable min defined in int_type_range
      uses variable max defined in int_type_range
      uses macro definition ALL_BITS defined in types.hh
      uses variable aload defined in jlint.d
      uses enumvalue vs_unknown defined in var_desc
      uses variable fload defined in jlint.d
      uses variable iload_1 defined in jlint.d
      uses variable iload_3 defined in jlint.d
      uses variable lload_1 defined in jlint.d
      uses variable lload_3 defined in jlint.d
      uses variable dload_1 defined in jlint.d
      uses variable dload_3 defined in jlint.d
      uses variable fload_1 defined in jlint.d
      uses variable fload_3 defined in jlint.d
      uses variable aload_1 defined in jlint.d
      uses variable aload_3 defined in jlint.d
      uses variable baload defined in jlint.d
      uses variable saload defined in jlint.d
      uses function check_array_index(int,vbm_operand *) defined in method_desc
      uses macro definition IS_ARRAY_TYPE defined in types.hh
      uses enumvalue tp_char defined in types.hh
      uses enumvalue tp_short defined in types.hh
      uses macro definition IS_INT_TYPE defined in types.hh
      uses variable laload defined in jlint.d
      uses variable daload defined in jlint.d
      uses variable var_store_count defined in method_desc
      uses variable name defined in var_desc
      uses variable lstore defined in jlint.d
      uses variable dstore defined in jlint.d
      uses variable istore_0 defined in jlint.d
      uses variable istore_2 defined in jlint.d
      uses variable astore_0 defined in jlint.d
      uses variable astore_2 defined in jlint.d
      uses variable fstore_0 defined in jlint.d
      uses variable fstore_2 defined in jlint.d
      uses variable lstore_0 defined in jlint.d
      uses variable lstore_2 defined in jlint.d
      uses variable dstore_0 defined in jlint.d
      uses variable dstore_2 defined in jlint.d
      uses variable iastore defined in jlint.d
      uses variable fastore defined in jlint.d
      uses variable aastore defined in jlint.d
      uses variable castore defined in jlint.d
      uses variable pop defined in jlint.d
      uses variable dup_x0 defined in jlint.d
      uses variable dup_x2 defined in jlint.d
      uses variable dup2_x1 defined in jlint.d
      uses variable Jswap defined in jlint.d
      uses function message(int,int,...) defined in method_desc
      uses function make_mask(int) defined in inlines.hh
      uses function minimum(int4,int4) defined in inlines.hh
      uses function first_set_bit(int4) defined in inlines.hh
      uses function calculate_multiply_range(vbm_operand &,vbm_operand &,vbm_operand &) defined in inlines.hh
      uses function make_lshift_mask(int4,int,int) defined in inlines.hh
      uses function make_rshift_mask(int4,int,int) defined in inlines.hh
      uses function make_rushift_mask(nat4,int,int) defined in inlines.hh
      uses variable ifeq defined in jlint.d
      uses variable ladd defined in jlint.d
      uses variable lsub defined in jlint.d
      uses variable lmul defined in jlint.d
      uses variable lidiv defined in jlint.d
      uses variable lrem defined in jlint.d
      uses variable lshl defined in jlint.d
      uses variable lshr defined in jlint.d
      uses variable lushr defined in jlint.d
      uses variable land defined in jlint.d
      uses variable lor defined in jlint.d
      uses variable lxor defined in jlint.d
      uses variable lneg defined in jlint.d
      uses variable dadd defined in jlint.d
      uses variable dsub defined in jlint.d
      uses variable dmul defined in jlint.d
      uses variable ddiv defined in jlint.d
      uses variable drem defined in jlint.d
      uses variable dneg defined in jlint.d
      uses function maximum(int4,int4) defined in inlines.hh
      uses function last_set_bit(nat4) defined in inlines.hh
      uses variable i2l defined in jlint.d
      uses macro definition nobreak defined in antic.c
      uses variable d2l defined in jlint.d
      uses variable i2d defined in jlint.d
      uses variable f2d defined in jlint.d
      uses variable i2b defined in jlint.d
      uses variable l2f defined in jlint.d
      uses variable f2i defined in jlint.d
      uses variable i2s defined in jlint.d
      uses variable iflt defined in jlint.d
      uses variable ifgt defined in jlint.d
      uses variable dcmpl defined in jlint.d
      uses variable fcmpl defined in jlint.d
      uses variable if_icmpeq defined in jlint.d
      uses enumvalue tp_bool defined in types.hh
      uses variable if_icmplt defined in jlint.d
      uses variable if_icmpgt defined in jlint.d
      uses variable if_acmpeq defined in jlint.d
      uses variable goto_near defined in jlint.d
      uses variable ret defined in jlint.d
      uses function unpack4(byte *) defined in inlines.hh
      uses variable lookupswitch defined in jlint.d
      uses variable dreturn defined in jlint.d
      uses variable lreturn defined in jlint.d
      uses variable vreturn defined in jlint.d
      uses variable name_and_type defined in const_ref
      uses variable name defined in const_name_and_type
      uses variable desc defined in method_desc
      uses variable desc defined in const_name_and_type
      uses variable cls defined in const_ref
      uses variable name_and_type defined in field_desc
      uses function check_variable_for_null(int,vbm_operand *) defined in method_desc
      uses variable name defined in class_desc
      uses variable attr defined in field_desc
      uses enumvalue f_used defined in field_desc
      uses variable accessors defined in method_desc
      uses function get_line_number(int) defined in method_desc
      uses variable attr defined in access_desc
      uses enumvalue a_self defined in access_desc
      uses enumvalue vs_new defined in var_desc
      uses enumvalue a_new defined in access_desc
      uses function get_type(utf_string const &) defined in functions.hh
      uses variable putfield defined in jlint.d
      uses variable putstatic defined in jlint.d
      uses variable name defined in const_class
      uses function owns(Lock) defined in Locks
      uses function message_at(int,int,char *) defined in antic.c
      uses variable source_file defined in class_desc
      uses function write(int) defined in field_desc
      uses variable equals defined in field_desc
      uses variable invokespecial defined in jlint.d
      uses variable invokeinterface defined in jlint.d
      uses function get_number_of_parameters(utf_string const &) defined in functions.hh
      uses variable wait_line defined in method_desc
      uses enumvalue m_wait defined in method_desc
      uses function nLocks() defined in Locks
      uses macro definition MAX_MSG_LENGTH defined in types.hh
      uses function begin() defined in Locks
      uses function end() defined in Locks
      uses variable n_messages defined in antic.c
      uses function get_method(utf_string const &,utf_string const &) defined in class_desc
      uses enumvalue i_self defined in callee_desc
      uses enumvalue i_synchronized defined in callee_desc
      uses variable callees defined in method_desc
      uses enumvalue m_concurrent defined in method_desc
      uses function getInnermost() defined in Locks
      uses function compound_name(const char *,const char *) defined in method_desc.cc
      uses variable vertex defined in method_desc
      uses enumvalue m_sync_block defined in method_desc
      uses function build_call_graph() defined in method_desc
      uses variable anew defined in jlint.d
      uses function getNew() defined in method_desc
      uses variable array_type defined in types.hh
      uses variable anewarray defined in jlint.d
      uses variable athrow defined in jlint.d
      uses variable instanceof defined in jlint.d
      uses variable usedLocks defined in class_desc
      uses variable monitorexit defined in jlint.d
      uses function release(Lock) defined in Locks
      uses variable multianewarray defined in jlint.d
      uses variable ifnonnull defined in jlint.d
      uses variable jsr_w defined in jlint.d
      uses variable fields defined in class_desc
      uses variable next defined in field_desc
      uses variable next defined in method_desc
      uses variable line_table defined in method_desc
   function print_call_path_to(callee_desc *,int,int,int,callee_desc *) in line 105
      protection public
      36 lines of code
      5 parameters
      7 conditional paths
      uses variable attr defined in method_desc
      uses enumvalue m_deadlock_free defined in method_desc
      uses enumvalue m_visited defined in method_desc
      uses variable overridden defined in method_desc
      uses variable max_shown_paths defined in jlint.cc
      uses variable callees defined in method_desc
      uses enumvalue m_synchronized defined in method_desc
      uses enumvalue i_self defined in callee_desc
      uses function print_call_sequence(callee_desc *,int,int) defined in method_desc.cc
      uses variable method defined in callee_desc
      uses function print_call_path_to(callee_desc *,int,int,int,callee_desc *) defined in method_desc
   function method_desc(utf_string const &,utf_string const &,class_desc *,method_desc *) in line 123
      protection public
      16 lines of code
      4 parameters
      1 conditional paths
      uses variable callees defined in method_desc
      uses variable accessors defined in method_desc
      uses variable vertex defined in method_desc
      uses variable attr defined in method_desc
      uses enumvalue m_serialized defined in method_desc
      uses variable next defined in method_desc
      uses variable first_line defined in method_desc
      uses variable overridden defined in method_desc
      uses variable local_variable_table_present defined in method_desc
      uses variable null_parameter_mask defined in method_desc
      uses variable unchecked_use_mask defined in method_desc
      uses variable new_cnt defined in method_desc
   variable accessors in line 59
      protection public
   variable attr in line 30
      protection public
   variable callees in line 58
      protection public
   variable code in line 80
      protection public
   variable code_length in line 79
      protection public
   variable context in line 82
      protection public
   variable desc in line 27
      protection public
   variable first_line in line 84
      protection public
   variable in_monitor in line 56
      protection public
   variable line_table in line 86
      protection public
   variable local_variable_table_present in line 55
      protection public
   variable locksAtEntry in line 88
      protection public
   variable n_vars in line 51
      protection public
   variable new_cnt in line 141
   variable next in line 28
      protection public
   variable null_parameter_mask in line 72
      protection public
   variable overridden in line 66
      protection public
   variable unchecked_use_mask in line 77
      protection public
   variable var_store_count in line 53
      protection public
   variable vars in line 52
      protection public
   variable vertex in line 61
      protection public
   variable wait_line in line 85
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/jlint/jlint-3.1.2/overridden_method.hh
module overridden_method
   function overridden_method(method_desc *,overridden_method *) in line 11
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses variable method defined in overridden_method
      uses variable next defined in overridden_method
   variable method in line 9
      protection public
   variable next in line 8
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/jlint/jlint-3.1.2/string_pool.hh
module string_pool.hh
   typedef string_table in line 40
      protection public
module ltstr
   function operator()(const char *,const char *) in line 35
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
module string_pool
   function add(const char *) in line 47
      protection public
      12 lines of code
      1 parameters
      2 conditional paths
   function clear() in line 69
      protection public
      6 lines of code
      0 parameters
      2 conditional paths
   function remove(const char *) in line 60
      protection public
      8 lines of code
      1 parameters
      2 conditional paths
   variable pool in line 45
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/jlint/jlint-3.1.2/types.hh
module types.hh
   macro definition nobreak in line 34
      protection public
   macro definition JAVA_INSN in line 40
      protection public
   macro definition items in line 45
      protection public
   macro definition MSG in line 108
      protection public
   macro definition MSG_LOCATION_PREFIX in line 113
      protection public
   macro definition MAX_MSG_LENGTH in line 115
      protection public
   macro definition MAX_MSG_PARAMETERS in line 116
      protection public
   macro definition IS_INT_TYPE in line 138
      protection public
   macro definition IS_ARRAY_TYPE in line 139
      protection public
   macro definition JAVA_INSN in line 166
      protection public
   macro definition JAVA_INSN in line 172
      protection public
   macro definition MAX_PATH in line 178
      protection public
   macro definition MAX_ARRAY_LENGTH in line 200
      protection public
   macro definition ALL_BITS in line 202
      protection public
   macro definition SIGN_BIT in line 203
      protection public
   macro definition NO_ASSOC_VAR in line 205
      protection public
   macro definition FILE_SEP in line 210
      protection public
   enumeration vbm_instruction_code in line 39
      protection public
   enumeration message_category in line 47
      protection public
   enumeration type_tag in line 78
      protection public
   enumeration message_code in line 107
      protection public
   typedef int4 in line 13
      protection public
   typedef nat4 in line 14
      protection public
   typedef byte in line 36
      protection public
   typedef word in line 37
      protection public
   variable class_hash_table_size in line 118
      protection public
   variable ranges in line 141
      protection public
   variable array_type in line 150
      protection public
   variable vbm_instruction_length in line 165
      protection public
   variable vbm_instruction_mnemonic in line 171
      protection public
   variable max_shown_paths in line 214
      protection public
   variable source_file_path in line 215
      protection public
   variable source_file_path_len in line 216
      protection public
   variable source_path_redefined in line 217
      protection public
   variable n_messages in line 218
      protection public
   enumvalue last_insn in line 249
      protection public
   enumvalue cat_deadlock in line 48
      protection public
   enumvalue cat_race_condition in line 49
      protection public
   enumvalue cat_wait_nosync in line 50
      protection public
   enumvalue cat_synchronization in line 51
      protection public
   enumvalue cat_super_finalize in line 53
      protection public
   enumvalue cat_not_overridden in line 54
      protection public
   enumvalue cat_field_redefined in line 55
      protection public
   enumvalue cat_shadow_local in line 56
      protection public
   enumvalue cat_inheritance in line 57
      protection public
   enumvalue cat_zero_operand in line 59
      protection public
   enumvalue cat_zero_result in line 60
      protection public
   enumvalue cat_redundant in line 61
      protection public
   enumvalue cat_overflow in line 62
      protection public
   enumvalue cat_incomp_case in line 63
      protection public
   enumvalue cat_short_char_cmp in line 64
      protection public
   enumvalue cat_string_cmp in line 65
      protection public
   enumvalue cat_weak_cmp in line 66
      protection public
   enumvalue cat_domain in line 67
      protection public
   enumvalue cat_null_reference in line 68
      protection public
   enumvalue cat_truncation in line 69
      protection public
   enumvalue cat_bounds in line 70
      protection public
   enumvalue cat_data_flow in line 71
      protection public
   enumvalue cat_done in line 73
      protection public
   enumvalue cat_all in line 76
      protection public
   enumvalue tp_bool in line 79
      protection public
   enumvalue tp_byte in line 80
      protection public
   enumvalue tp_char in line 81
      protection public
   enumvalue tp_short in line 82
      protection public
   enumvalue tp_int in line 83
      protection public
   enumvalue tp_long in line 84
      protection public
   enumvalue tp_float in line 85
      protection public
   enumvalue tp_double in line 86
      protection public
   enumvalue tp_void in line 87
      protection public
   enumvalue tp_self in line 88
      protection public
   enumvalue tp_string in line 89
      protection public
   enumvalue tp_object in line 91
      protection public
   enumvalue MSG in line 185
      protection public
module int_type_range
   variable max in line 95
      protection public
   variable min in line 94
      protection public
module message_descriptor
   variable category in line 99
      protection public
   variable enabled in line 103
      protection public
   variable format in line 100
      protection public
   variable name in line 101
      protection public
   variable position_dependent in line 102
      protection public
module msg_select_category_option
   variable cat_desc in line 123
      protection public
   variable cat_name in line 122
      protection public
   variable msg_cat in line 121
      protection public
module vbm_operand
   variable equals in line 135
      protection public
   variable index in line 134
      protection public
   variable mask in line 132
      protection public
   variable max in line 130
      protection public
   variable min in line 131
      protection public
   variable type in line 129
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/jlint/jlint-3.1.2/utf_string.hh
module utf_string.hh
   function string_hash_function(byte *) in line 14
      protection public
      11 lines of code
      1 parameters
      3 conditional paths
module utf_string
   function append(int,utf_string const &) in line 54
      protection public
      10 lines of code
      2 parameters
      1 conditional paths
      uses variable len defined in utf_string
      uses variable data defined in utf_string
   function as_asciz() in line 72
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
      uses variable data defined in utf_string
   function first_char() in line 37
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
      uses variable data defined in utf_string
   function hash() in line 34
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses function string_hash_function(byte *) defined in utf_string.hh
      uses variable data defined in utf_string
   function operator!=(utf_string const &) in line 25
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
      uses variable len defined in utf_string
      uses variable data defined in utf_string
   function operator!=(const char *) in line 31
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
      uses variable data defined in utf_string
   function operator+(const char *) in line 44
      protection public
      9 lines of code
      1 parameters
      1 conditional paths
      uses variable len defined in utf_string
      uses variable data defined in utf_string
   function operator=(utf_string const &) in line 39
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable len defined in utf_string
      uses variable data defined in utf_string
   function operator==(utf_string const &) in line 22
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
      uses variable len defined in utf_string
      uses variable data defined in utf_string
   function operator==(const char *) in line 28
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
      uses variable data defined in utf_string
   function rindex(byte) in line 65
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable data defined in utf_string
   function set_size(int) in line 70
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses variable len defined in utf_string
   function utf_string(int,byte *) in line 74
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
      uses variable len defined in utf_string
      uses variable data defined in utf_string
   function utf_string(const char *) in line 80
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable len defined in utf_string
      uses variable data defined in utf_string
   function utf_string(utf_string const &) in line 85
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable len defined in utf_string
      uses variable data defined in utf_string
   function utf_string(utf_string const &,bool) in line 90
      protection public
      13 lines of code
      2 parameters
      4 conditional paths
      uses variable len defined in utf_string
      uses variable data defined in utf_string
      uses macro definition FILE_SEP defined in types.hh
   function utf_string() in line 104
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
      uses variable len defined in utf_string
      uses variable data defined in utf_string
   variable data in line 19
   variable len in line 18
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/jlint/jlint-3.1.2/var_desc.hh
module var_desc
   function var_desc() in line 24
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses variable equals defined in var_desc
   variable equals in line 22
      protection public
   variable mask in line 14
      protection public
   variable max in line 13
      protection public
   variable min in line 12
      protection public
   variable name in line 8
      protection public
   variable start_pc in line 10
      protection public
   variable type in line 9
      protection public
