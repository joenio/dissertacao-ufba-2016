file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/allocate.c
module allocate.c
   function protect_allocations(struct allocator_struct *) in line 46
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable allocator_struct::blobs defined in allocate.h
      uses macro definition NULL defined in sm_implied3.c
   function drop_all_allocations(struct allocator_struct *) in line 51
      protection public
      15 lines of code
      1 parameters
      1 conditional paths
      uses variable allocator_struct::blobs defined in allocate.h
      uses macro definition NULL defined in sm_implied3.c
      uses variable allocator_struct::allocations defined in allocate.h
      uses variable allocator_struct::total_bytes defined in allocate.h
      uses variable allocator_struct::useful_bytes defined in allocate.h
      uses variable allocator_struct::freelist defined in allocate.h
      uses variable allocation_blob::next defined in allocate.h
      uses function blob_free(void *,unsigned long) defined in mmap-blob.c
      uses variable allocator_struct::chunking defined in allocate.h
   function free_one_entry(struct allocator_struct *,void *) in line 67
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
      uses variable p defined in cond_expr2.c
      uses variable allocator_struct::freelist defined in allocate.h
   function allocate(struct allocator_struct *,unsigned int) in line 74
      protection public
      46 lines of code
      2 parameters
      1 conditional paths
      uses variable allocator_struct::alignment defined in allocate.h
      uses variable allocator_struct::blobs defined in allocate.h
      uses variable allocator_struct::freelist defined in allocate.h
      uses variable p defined in cond_expr2.c
      uses macro definition NULL defined in sm_implied3.c
      uses variable allocator_struct::allocations defined in allocate.h
      uses variable allocator_struct::useful_bytes defined in allocate.h
      uses variable allocation_blob::left defined in allocate.h
      uses variable offset defined in sm_implied10.c
      uses variable allocator_struct::chunking defined in allocate.h
      uses function blob_alloc(unsigned long) defined in mmap-blob.c
      uses function die(const char *,...) defined in lib.c
      uses variable allocator_struct::total_bytes defined in allocate.h
      uses variable allocation_blob::next defined in allocate.h
      uses variable allocation_blob::data defined in allocate.h
      uses variable allocation_blob::offset defined in allocate.h
   function show_allocations(struct allocator_struct *) in line 121
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses function ALLOCATOR(ident,"identifiers") defined in allocate.c
      uses function __DO_ALLOCATOR(void,0,1,"bytes",bytes) defined in allocate.c
   function ALLOCATOR(ident,"identifiers") in line 130
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function ALLOCATOR(token,"tokens") in line 131
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function ALLOCATOR(context,"contexts") in line 132
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function ALLOCATOR(symbol,"symbols") in line 133
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function ALLOCATOR(expression,"expressions") in line 134
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function ALLOCATOR(statement,"statements") in line 135
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function ALLOCATOR(string,"strings") in line 136
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function ALLOCATOR(scope,"scopes") in line 137
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function __DO_ALLOCATOR(void,0,1,"bytes",bytes) in line 138
      protection public
      1 lines of code
      5 parameters
      1 conditional paths
   function ALLOCATOR(basic_block,"basic_block") in line 139
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function ALLOCATOR(entrypoint,"entrypoint") in line 140
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function ALLOCATOR(instruction,"instruction") in line 141
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function ALLOCATOR(multijmp,"multijmp") in line 142
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function ALLOCATOR(pseudo,"pseudo") in line 143
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function ALLOCATOR(attribute,"attribute") in line 144
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/allocate.h
module allocate.h
   macro definition __DECLARE_ALLOCATOR in line 26
      protection public
   macro definition DECLARE_ALLOCATOR in line 32
      protection public
   macro definition __DO_ALLOCATOR in line 34
      protection public
   macro definition __ALLOCATOR in line 60
      protection public
   macro definition ALLOCATOR in line 63
      protection public
   function protect_allocations(struct allocator_struct *) in line 20
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable allocator_struct::blobs defined in allocate.h
      uses macro definition NULL defined in sm_implied3.c
   function drop_all_allocations(struct allocator_struct *) in line 21
      protection public
      15 lines of code
      1 parameters
      2 conditional paths
      uses variable allocator_struct::blobs defined in allocate.h
      uses macro definition NULL defined in sm_implied3.c
      uses variable allocator_struct::allocations defined in allocate.h
      uses variable allocator_struct::total_bytes defined in allocate.h
      uses variable allocator_struct::useful_bytes defined in allocate.h
      uses variable allocator_struct::freelist defined in allocate.h
      uses variable allocation_blob::next defined in allocate.h
      uses function blob_free(void *,unsigned long) defined in mmap-blob.c
      uses variable allocator_struct::chunking defined in allocate.h
   function allocate(struct allocator_struct *,unsigned int) in line 22
      protection public
      46 lines of code
      2 parameters
      5 conditional paths
      uses variable allocator_struct::alignment defined in allocate.h
      uses variable allocator_struct::blobs defined in allocate.h
      uses variable allocator_struct::freelist defined in allocate.h
      uses variable p defined in cond_expr2.c
      uses macro definition NULL defined in sm_implied3.c
      uses variable allocator_struct::allocations defined in allocate.h
      uses variable allocator_struct::useful_bytes defined in allocate.h
      uses variable allocation_blob::left defined in allocate.h
      uses variable offset defined in sm_implied10.c
      uses variable allocator_struct::chunking defined in allocate.h
      uses function blob_alloc(unsigned long) defined in mmap-blob.c
      uses function die(const char *,...) defined in lib.c
      uses variable allocator_struct::total_bytes defined in allocate.h
      uses variable allocation_blob::next defined in allocate.h
      uses variable allocation_blob::data defined in allocate.h
      uses variable allocation_blob::offset defined in allocate.h
   function free_one_entry(struct allocator_struct *,void *) in line 23
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
      uses variable p defined in cond_expr2.c
      uses variable allocator_struct::freelist defined in allocate.h
   function show_allocations(struct allocator_struct *) in line 24
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses function ALLOCATOR(ident,"identifiers") defined in allocate.c
      uses function __DO_ALLOCATOR(void,0,1,"bytes",bytes) defined in allocate.c
   function DECLARE_ALLOCATOR(ident) in line 65
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function DECLARE_ALLOCATOR(token) in line 66
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function DECLARE_ALLOCATOR(context) in line 67
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function DECLARE_ALLOCATOR(symbol) in line 68
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function DECLARE_ALLOCATOR(expression) in line 69
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function DECLARE_ALLOCATOR(statement) in line 70
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function DECLARE_ALLOCATOR(string) in line 71
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function DECLARE_ALLOCATOR(scope) in line 72
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function __DECLARE_ALLOCATOR(void,bytes) in line 73
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function DECLARE_ALLOCATOR(basic_block) in line 74
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function DECLARE_ALLOCATOR(entrypoint) in line 75
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function DECLARE_ALLOCATOR(instruction) in line 76
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function DECLARE_ALLOCATOR(multijmp) in line 77
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function DECLARE_ALLOCATOR(phi) in line 78
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function DECLARE_ALLOCATOR(pseudo) in line 79
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function DECLARE_ALLOCATOR(attribute) in line 80
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   variable allocation_blob::data in line 7
      protection public
   variable allocation_blob::left in line 6
      protection public
   variable allocation_blob::next in line 5
      protection public
   variable allocation_blob::offset in line 6
      protection public
   variable allocator_struct::alignment in line 13
      protection public
   variable allocator_struct::allocations in line 17
      protection public
   variable allocator_struct::blobs in line 12
      protection public
   variable allocator_struct::chunking in line 14
      protection public
   variable allocator_struct::freelist in line 15
      protection public
   variable allocator_struct::name in line 11
      protection public
   variable allocator_struct::total_bytes in line 17
      protection public
   variable allocator_struct::useful_bytes in line 17
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/ast-inspect.c
module ast-inspect.c
   function inspect_ptr_list(AstNode *,const char *,void(*)(AstNode *)) in line 8
      protection public
      12 lines of code
      3 parameters
      1 conditional paths
      uses variable AstNode::ptr defined in ast-model.h
      uses variable ptr defined in sm_null_deref2.c
      uses variable AstNode::text defined in ast-model.h
      uses variable name defined in smatch_type.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function statement_type_name(enum statement_type) in line 22
      protection public
      20 lines of code
      1 parameters
      1 conditional paths
      uses enumvalue STMT_NONE defined in parse.h
      uses enumvalue STMT_DECLARATION defined in parse.h
      uses enumvalue STMT_EXPRESSION defined in parse.h
      uses enumvalue STMT_COMPOUND defined in parse.h
      uses enumvalue STMT_IF defined in parse.h
      uses enumvalue STMT_RETURN defined in parse.h
      uses enumvalue STMT_CASE defined in parse.h
      uses enumvalue STMT_SWITCH defined in parse.h
      uses enumvalue STMT_ITERATOR defined in parse.h
      uses enumvalue STMT_LABEL defined in parse.h
      uses enumvalue STMT_GOTO defined in parse.h
      uses enumvalue STMT_ASM defined in parse.h
      uses enumvalue STMT_CONTEXT defined in parse.h
      uses enumvalue STMT_RANGE defined in parse.h
   function inspect_statement(AstNode *) in line 43
      protection public
      48 lines of code
      1 parameters
      1 conditional paths
      uses variable AstNode::ptr defined in ast-model.h
      uses variable AstNode::text defined in ast-model.h
      uses function statement_type_name(enum statement_type) defined in ast-inspect.c
      uses variable statement::type defined in parse.h
      uses enumvalue STMT_COMPOUND defined in parse.h
      uses variable statement::stmts defined in parse.h
      uses function inspect_statement_list(AstNode *) defined in ast-inspect.c
      uses enumvalue STMT_EXPRESSION defined in parse.h
      uses variable statement::expression defined in parse.h
      uses function inspect_expression(AstNode *) defined in ast-inspect.c
      uses enumvalue STMT_IF defined in parse.h
      uses variable statement::if_conditional defined in parse.h
      uses variable statement::if_true defined in parse.h
      uses function inspect_statement(AstNode *) defined in ast-inspect.c
      uses variable statement::if_false defined in parse.h
      uses enumvalue STMT_ITERATOR defined in parse.h
      uses variable statement::iterator_break defined in parse.h
      uses function inspect_symbol(AstNode *) defined in ast-inspect.c
      uses variable statement::iterator_continue defined in parse.h
      uses variable statement::iterator_pre_statement defined in parse.h
      uses variable statement::iterator_statement defined in parse.h
      uses variable statement::iterator_post_statement defined in parse.h
      uses enumvalue STMT_SWITCH defined in parse.h
      uses variable statement::switch_expression defined in parse.h
      uses variable statement::switch_statement defined in parse.h
      uses variable statement::switch_break defined in parse.h
      uses variable statement::switch_case defined in parse.h
      uses enumvalue STMT_CASE defined in parse.h
      uses variable statement::case_expression defined in parse.h
      uses variable statement::case_to defined in parse.h
      uses variable statement::case_statement defined in parse.h
      uses variable statement::case_label defined in parse.h
      uses enumvalue STMT_RETURN defined in parse.h
      uses variable statement::ret_value defined in parse.h
      uses variable statement::ret_target defined in parse.h
   function inspect_statement_list(AstNode *) in line 93
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function inspect_ptr_list(AstNode *,const char *,void(*)(AstNode *)) defined in ast-inspect.c
      uses function inspect_statement(AstNode *) defined in ast-inspect.c
   function symbol_type_name(enum type) in line 99
      protection public
      25 lines of code
      1 parameters
      1 conditional paths
      uses enumvalue SYM_UNINITIALIZED defined in symbol.h
      uses enumvalue SYM_PREPROCESSOR defined in symbol.h
      uses enumvalue SYM_BASETYPE defined in symbol.h
      uses enumvalue SYM_NODE defined in symbol.h
      uses enumvalue SYM_PTR defined in symbol.h
      uses enumvalue SYM_FN defined in symbol.h
      uses enumvalue SYM_ARRAY defined in symbol.h
      uses enumvalue SYM_STRUCT defined in symbol.h
      uses enumvalue SYM_UNION defined in symbol.h
      uses enumvalue SYM_ENUM defined in symbol.h
      uses enumvalue SYM_TYPEDEF defined in symbol.h
      uses enumvalue SYM_TYPEOF defined in symbol.h
      uses enumvalue SYM_MEMBER defined in symbol.h
      uses enumvalue SYM_BITFIELD defined in symbol.h
      uses enumvalue SYM_LABEL defined in symbol.h
      uses enumvalue SYM_RESTRICT defined in symbol.h
      uses enumvalue SYM_FOULED defined in symbol.h
      uses enumvalue SYM_KEYWORD defined in symbol.h
      uses enumvalue SYM_BAD defined in symbol.h
   function inspect_symbol(AstNode *) in line 126
      protection public
      17 lines of code
      1 parameters
      1 conditional paths
      uses variable sym defined in smatch_type.c
      uses variable AstNode::ptr defined in ast-model.h
      uses variable AstNode::text defined in ast-model.h
      uses function symbol_type_name(enum type) defined in ast-inspect.c
      uses variable symbol::type defined in struct.c
      uses function builtin_typename(struct symbol *) defined in show-parse.c
      uses function show_ident(const struct ident *) defined in token.h
      uses variable symbol::ident defined in struct.c
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::base_type defined in struct.c
      uses function inspect_symbol(AstNode *) defined in ast-inspect.c
      uses variable symbol::namespace defined in struct.c
      uses enumvalue NS_PREPROCESSOR defined in symbol.h
      uses variable symbol::arguments defined in struct.c
      uses function inspect_symbol_list(AstNode *) defined in ast-inspect.c
      uses variable symbol::symbol_list defined in struct.c
      uses variable symbol::stmt defined in struct.c
      uses function inspect_statement(AstNode *) defined in ast-inspect.c
   function inspect_symbol_list(AstNode *) in line 145
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function inspect_ptr_list(AstNode *,const char *,void(*)(AstNode *)) defined in ast-inspect.c
      uses function inspect_symbol(AstNode *) defined in ast-inspect.c
   function expression_type_name(enum expression_type) in line 151
      protection public
      36 lines of code
      1 parameters
      1 conditional paths
      uses enumvalue EXPR_VALUE defined in expression.h
      uses enumvalue EXPR_STRING defined in expression.h
      uses enumvalue EXPR_SYMBOL defined in expression.h
      uses enumvalue EXPR_TYPE defined in expression.h
      uses enumvalue EXPR_BINOP defined in expression.h
      uses enumvalue EXPR_ASSIGNMENT defined in expression.h
      uses enumvalue EXPR_LOGICAL defined in expression.h
      uses enumvalue EXPR_DEREF defined in expression.h
      uses enumvalue EXPR_PREOP defined in expression.h
      uses enumvalue EXPR_POSTOP defined in expression.h
      uses enumvalue EXPR_CAST defined in expression.h
      uses enumvalue EXPR_FORCE_CAST defined in expression.h
      uses enumvalue EXPR_IMPLIED_CAST defined in expression.h
      uses enumvalue EXPR_SIZEOF defined in expression.h
      uses enumvalue EXPR_ALIGNOF defined in expression.h
      uses enumvalue EXPR_PTRSIZEOF defined in expression.h
      uses enumvalue EXPR_CONDITIONAL defined in expression.h
      uses enumvalue EXPR_SELECT defined in expression.h
      uses enumvalue EXPR_STATEMENT defined in expression.h
      uses enumvalue EXPR_CALL defined in expression.h
      uses enumvalue EXPR_COMMA defined in expression.h
      uses enumvalue EXPR_COMPARE defined in expression.h
      uses enumvalue EXPR_LABEL defined in expression.h
      uses enumvalue EXPR_INITIALIZER defined in expression.h
      uses enumvalue EXPR_IDENTIFIER defined in expression.h
      uses enumvalue EXPR_INDEX defined in expression.h
      uses enumvalue EXPR_POS defined in expression.h
      uses enumvalue EXPR_FVALUE defined in expression.h
      uses enumvalue EXPR_SLICE defined in expression.h
      uses enumvalue EXPR_OFFSETOF defined in expression.h
   function inspect_expression(AstNode *) in line 188
      protection public
      32 lines of code
      1 parameters
      1 conditional paths
      uses variable AstNode::ptr defined in ast-model.h
      uses variable AstNode::text defined in ast-model.h
      uses function expression_type_name(enum expression_type) defined in ast-inspect.c
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_STATEMENT defined in expression.h
      uses variable expression::statement defined in expression.h
      uses function inspect_statement(AstNode *) defined in ast-inspect.c
      uses enumvalue EXPR_BINOP defined in expression.h
      uses enumvalue EXPR_COMMA defined in expression.h
      uses enumvalue EXPR_COMPARE defined in expression.h
      uses enumvalue EXPR_LOGICAL defined in expression.h
      uses enumvalue EXPR_ASSIGNMENT defined in expression.h
      uses variable expression::left defined in expression.h
      uses function inspect_expression(AstNode *) defined in ast-inspect.c
      uses variable expression::right defined in expression.h
      uses enumvalue EXPR_CAST defined in expression.h
      uses enumvalue EXPR_FORCE_CAST defined in expression.h
      uses enumvalue EXPR_IMPLIED_CAST defined in expression.h
      uses variable expression::cast_type defined in expression.h
      uses function inspect_symbol(AstNode *) defined in ast-inspect.c
      uses variable expression::cast_expression defined in expression.h
      uses enumvalue EXPR_PREOP defined in expression.h
      uses variable expression::unop defined in expression.h
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/ast-inspect.h
module ast-inspect.h
   function inspect_symbol(AstNode *) in line 7
      protection public
      17 lines of code
      1 parameters
      2 conditional paths
      uses variable sym defined in smatch_type.c
      uses variable AstNode::ptr defined in ast-model.h
      uses variable AstNode::text defined in ast-model.h
      uses variable symbol::type defined in struct.c
      uses function builtin_typename(struct symbol *) defined in show-parse.c
      uses function show_ident(const struct ident *) defined in token.h
      uses variable symbol::ident defined in struct.c
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::base_type defined in struct.c
      uses function inspect_symbol(AstNode *) defined in ast-inspect.c
      uses variable symbol::namespace defined in struct.c
      uses enumvalue NS_PREPROCESSOR defined in symbol.h
      uses variable symbol::arguments defined in struct.c
      uses function inspect_symbol_list(AstNode *) defined in ast-inspect.c
      uses variable symbol::symbol_list defined in struct.c
      uses variable symbol::stmt defined in struct.c
      uses function inspect_statement(AstNode *) defined in ast-inspect.c
   function inspect_symbol_list(AstNode *) in line 8
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function inspect_symbol(AstNode *) defined in ast-inspect.c
   function inspect_statement(AstNode *) in line 10
      protection public
      48 lines of code
      1 parameters
      8 conditional paths
      uses variable AstNode::ptr defined in ast-model.h
      uses variable AstNode::text defined in ast-model.h
      uses variable statement::type defined in parse.h
      uses enumvalue STMT_COMPOUND defined in parse.h
      uses variable statement::stmts defined in parse.h
      uses function inspect_statement_list(AstNode *) defined in ast-inspect.c
      uses enumvalue STMT_EXPRESSION defined in parse.h
      uses variable statement::expression defined in parse.h
      uses function inspect_expression(AstNode *) defined in ast-inspect.c
      uses enumvalue STMT_IF defined in parse.h
      uses variable statement::if_conditional defined in parse.h
      uses variable statement::if_true defined in parse.h
      uses function inspect_statement(AstNode *) defined in ast-inspect.c
      uses variable statement::if_false defined in parse.h
      uses enumvalue STMT_ITERATOR defined in parse.h
      uses variable statement::iterator_break defined in parse.h
      uses function inspect_symbol(AstNode *) defined in ast-inspect.c
      uses variable statement::iterator_continue defined in parse.h
      uses variable statement::iterator_pre_statement defined in parse.h
      uses variable statement::iterator_statement defined in parse.h
      uses variable statement::iterator_post_statement defined in parse.h
      uses enumvalue STMT_SWITCH defined in parse.h
      uses variable statement::switch_expression defined in parse.h
      uses variable statement::switch_statement defined in parse.h
      uses variable statement::switch_break defined in parse.h
      uses variable statement::switch_case defined in parse.h
      uses enumvalue STMT_CASE defined in parse.h
      uses variable statement::case_expression defined in parse.h
      uses variable statement::case_to defined in parse.h
      uses variable statement::case_statement defined in parse.h
      uses variable statement::case_label defined in parse.h
      uses enumvalue STMT_RETURN defined in parse.h
      uses variable statement::ret_value defined in parse.h
      uses variable statement::ret_target defined in parse.h
   function inspect_statement_list(AstNode *) in line 11
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function inspect_statement(AstNode *) defined in ast-inspect.c
   function inspect_expression(AstNode *) in line 13
      protection public
      32 lines of code
      1 parameters
      11 conditional paths
      uses variable AstNode::ptr defined in ast-model.h
      uses variable AstNode::text defined in ast-model.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_STATEMENT defined in expression.h
      uses variable expression::statement defined in expression.h
      uses function inspect_statement(AstNode *) defined in ast-inspect.c
      uses enumvalue EXPR_BINOP defined in expression.h
      uses enumvalue EXPR_COMMA defined in expression.h
      uses enumvalue EXPR_COMPARE defined in expression.h
      uses enumvalue EXPR_LOGICAL defined in expression.h
      uses enumvalue EXPR_ASSIGNMENT defined in expression.h
      uses variable expression::left defined in expression.h
      uses function inspect_expression(AstNode *) defined in ast-inspect.c
      uses variable expression::right defined in expression.h
      uses enumvalue EXPR_CAST defined in expression.h
      uses enumvalue EXPR_FORCE_CAST defined in expression.h
      uses enumvalue EXPR_IMPLIED_CAST defined in expression.h
      uses variable expression::cast_type defined in expression.h
      uses function inspect_symbol(AstNode *) defined in ast-inspect.c
      uses variable expression::cast_expression defined in expression.h
      uses enumvalue EXPR_PREOP defined in expression.h
      uses variable expression::unop defined in expression.h
   function inspect_expression_list(AstNode *) in line 14
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/ast-model.c
module ast-model.c
   variable parent_class in line 41
      protection public
   function ast_init(AstNode *) in line 17
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable AstNode::childnodes defined in ast-model.h
      uses macro definition FALSE defined in smatch.h
      uses macro definition TRUE defined in smatch.h
      uses variable AstNode::stamp defined in ast-model.h
   function ast_class_init(AstNodeClass *) in line 18
      protection public
      9 lines of code
      1 parameters
      1 conditional paths
      uses variable parent_class defined in ast-model.c
      uses function ast_finalize(GObject *) defined in ast-model.c
   function ast_tree_model_init(GtkTreeModelIface *) in line 19
      protection public
      15 lines of code
      1 parameters
      1 conditional paths
      uses function ast_get_flags(GtkTreeModel *) defined in ast-model.c
      uses function ast_get_n_columns(GtkTreeModel *) defined in ast-model.c
      uses function ast_get_column_type(GtkTreeModel *,gint) defined in ast-model.c
      uses function ast_get_iter(GtkTreeModel *,GtkTreeIter *,GtkTreePath *) defined in ast-model.c
      uses function ast_get_path(GtkTreeModel *,GtkTreeIter *) defined in ast-model.c
      uses function ast_get_value(GtkTreeModel *,GtkTreeIter *,gint,GValue *) defined in ast-model.c
      uses function ast_iter_next(GtkTreeModel *,GtkTreeIter *) defined in ast-model.c
      uses function ast_iter_children(GtkTreeModel *,GtkTreeIter *,GtkTreeIter *) defined in ast-model.c
      uses function ast_iter_has_child(GtkTreeModel *,GtkTreeIter *) defined in ast-model.c
      uses function ast_iter_n_children(GtkTreeModel *,GtkTreeIter *) defined in ast-model.c
      uses function ast_iter_nth_child(GtkTreeModel *,GtkTreeIter *,GtkTreeIter *,gint) defined in ast-model.c
      uses function ast_iter_parent(GtkTreeModel *,GtkTreeIter *,GtkTreeIter *) defined in ast-model.c
   function ast_finalize(GObject *) in line 20
      protection public
      9 lines of code
      1 parameters
      1 conditional paths
      uses variable parent_class defined in ast-model.c
   function ast_get_flags(GtkTreeModel *) in line 21
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function ast_get_n_columns(GtkTreeModel *) in line 22
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function ast_get_column_type(GtkTreeModel *,gint) in line 23
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
   function ast_get_iter(GtkTreeModel *,GtkTreeIter *,GtkTreePath *) in line 24
      protection public
      17 lines of code
      3 parameters
      2 conditional paths
      uses macro definition AST_NODE defined in ast-model.h
      uses function ast_nth_child(AstNode *,int) defined in ast-model.c
      uses function ast_set_iter(GtkTreeIter *,AstNode *) defined in ast-model.c
   function ast_get_path(GtkTreeModel *,GtkTreeIter *) in line 26
      protection public
      14 lines of code
      2 parameters
      2 conditional paths
      uses macro definition AST_NODE defined in ast-model.h
      uses variable AstNode::index defined in ast-model.h
      uses variable AstNode::parent defined in ast-model.h
   function ast_get_value(GtkTreeModel *,GtkTreeIter *,gint,GValue *) in line 27
      protection public
      17 lines of code
      4 parameters
      2 conditional paths
      uses macro definition AST_IS_NODE defined in ast-model.h
      uses function inspect_child_node(AstNode *) defined in ast-model.c
      uses variable AstNode::text defined in ast-model.h
   function ast_iter_next(GtkTreeModel *,GtkTreeIter *) in line 29
      protection public
      10 lines of code
      2 parameters
      1 conditional paths
      uses macro definition AST_IS_NODE defined in ast-model.h
      uses function ast_nth_child(AstNode *,int) defined in ast-model.c
      uses variable AstNode::parent defined in ast-model.h
      uses variable AstNode::index defined in ast-model.h
      uses function ast_set_iter(GtkTreeIter *,AstNode *) defined in ast-model.c
   function ast_iter_children(GtkTreeModel *,GtkTreeIter *,GtkTreeIter *) in line 30
      protection public
      6 lines of code
      3 parameters
      1 conditional paths
      uses function ast_iter_nth_child(GtkTreeModel *,GtkTreeIter *,GtkTreeIter *,gint) defined in ast-model.c
      uses variable expression::parent defined in expression.h
   function ast_iter_has_child(GtkTreeModel *,GtkTreeIter *) in line 33
      protection public
      7 lines of code
      2 parameters
      1 conditional paths
      uses function inspect_child_node(AstNode *) defined in ast-model.c
      uses variable AstNode::childnodes defined in ast-model.h
   function ast_iter_n_children(GtkTreeModel *,GtkTreeIter *) in line 34
      protection public
      8 lines of code
      2 parameters
      1 conditional paths
      uses function inspect_child_node(AstNode *) defined in ast-model.c
      uses variable AstNode::childnodes defined in ast-model.h
   function ast_iter_nth_child(GtkTreeModel *,GtkTreeIter *,GtkTreeIter *,gint) in line 35
      protection public
      12 lines of code
      4 parameters
      2 conditional paths
      uses variable expression::parent defined in expression.h
      uses variable AstNode::childnodes defined in ast-model.h
      uses macro definition FALSE defined in smatch.h
      uses macro definition TRUE defined in smatch.h
   function ast_iter_parent(GtkTreeModel *,GtkTreeIter *,GtkTreeIter *) in line 37
      protection public
      8 lines of code
      3 parameters
      1 conditional paths
      uses variable AstNode::parent defined in ast-model.h
      uses macro definition NULL defined in sm_implied3.c
   function inspect_child_node(AstNode *) in line 44
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses variable AstNode::inspect defined in ast-model.h
      uses macro definition NULL defined in sm_implied3.c
   function ast_nth_child(AstNode *,int) in line 54
      protection public
      11 lines of code
      2 parameters
      3 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses function inspect_child_node(AstNode *) defined in ast-model.c
      uses variable AstNode::childnodes defined in ast-model.h
      uses macro definition FALSE defined in smatch.h
   function ast_set_iter(GtkTreeIter *,AstNode *) in line 68
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
      uses macro definition NULL defined in sm_implied3.c
   function ast_get_type(void) in line 86
      protection public
      34 lines of code
      1 parameters
      1 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses function ast_class_init(AstNodeClass *) defined in ast-model.c
      uses function ast_init(AstNode *) defined in ast-model.c
      uses function ast_tree_model_init(GtkTreeModelIface *) defined in ast-model.c
   function ast_new(AstNode *,int,const char *,void *,void(*)(AstNode *)) in line 457
      protection public
      11 lines of code
      5 parameters
      1 conditional paths
      uses macro definition AST_TYPE_NODE defined in ast-model.h
      uses macro definition NULL defined in sm_implied3.c
      uses variable AstNode::parent defined in ast-model.h
      uses variable expression::parent defined in expression.h
      uses variable AstNode::index defined in ast-model.h
      uses variable expression::index defined in expression.h
      uses variable AstNode::text defined in ast-model.h
      uses variable AstNode::inspect defined in ast-model.h
      uses variable AstNode::ptr defined in ast-model.h
      uses variable ptr defined in sm_null_deref2.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/ast-model.h
module ast-model.h
   macro definition AST_TYPE_NODE in line 16
      protection public
   macro definition AST_NODE in line 17
      protection public
   macro definition AST_NODE_CLASS in line 18
      protection public
   macro definition AST_IS_NODE in line 19
      protection public
   macro definition AST_IS_NODE_CLASS in line 20
      protection public
   macro definition AST_NODE_GET_CLASS in line 21
      protection public
   enumeration @0 in line 24
      protection public
   typedef AstNode in line 457
      protection public
   typedef AstNodeClass in line 457
      protection public
   enumvalue AST_COL_RECORD in line 25
      protection public
   enumvalue AST_COL_NAME in line 26
      protection public
   enumvalue AST_N_COLUMNS in line 27
      protection public
   function ast_get_type(void) in line 66
      protection public
      34 lines of code
      1 parameters
      2 conditional paths
      uses macro definition NULL defined in sm_implied3.c
   function ast_new(AstNode *,int,const char *,void *,void(*)(AstNode *)) in line 67
      protection public
      11 lines of code
      5 parameters
      1 conditional paths
      uses macro definition AST_TYPE_NODE defined in ast-model.h
      uses macro definition NULL defined in sm_implied3.c
      uses variable AstNode::parent defined in ast-model.h
      uses variable expression::parent defined in expression.h
      uses variable AstNode::index defined in ast-model.h
      uses variable expression::index defined in expression.h
      uses variable AstNode::text defined in ast-model.h
      uses variable AstNode::inspect defined in ast-model.h
      uses variable AstNode::ptr defined in ast-model.h
      uses variable ptr defined in sm_null_deref2.c
   function ast_append_child(AstNode *,const char *,void *,void(*)(AstNode *)) in line 71
      protection public
      11 lines of code
      4 parameters
      2 conditional paths
      uses variable AstNode::ptr defined in ast-model.h
      uses function ast_new(AstNode *,int,const char *,void *,void(*)(AstNode *)) defined in ast-model.h
      uses variable AstNode::parent defined in ast-model.h
      uses variable AstNode::childnodes defined in ast-model.h
      uses variable AstNode::text defined in ast-model.h
      uses variable AstNode::inspect defined in ast-model.h
      uses macro definition NULL defined in sm_implied3.c
   function ast_append_attribute(AstNode *,const char *) in line 84
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses function ast_new(AstNode *,int,const char *,void *,void(*)(AstNode *)) defined in ast-model.h
      uses variable AstNode::parent defined in ast-model.h
      uses variable AstNode::childnodes defined in ast-model.h
      uses variable AstNode::text defined in ast-model.h
      uses macro definition NULL defined in sm_implied3.c
   variable AstNode::base in line 45
      protection public
   variable AstNode::childnodes in line 52
      protection public
   variable AstNode::index in line 48
      protection public
   variable AstNode::inspect in line 50
      protection public
   variable AstNode::parent in line 47
      protection public
   variable AstNode::ptr in line 51
      protection public
   variable AstNode::stamp in line 53
      protection public
   variable AstNode::text in line 49
      protection public
   variable AstNodeClass::base_class in line 62
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/ast-view.c
module ast-view.c
   function create_view_and_model(void *) in line 7
      protection public
      21 lines of code
      1 parameters
      1 conditional paths
      uses function ast_new(AstNode *,int,const char *,void *,void(*)(AstNode *)) defined in ast-model.c
      uses macro definition NULL defined in sm_implied3.c
      uses variable ptr defined in sm_null_deref2.c
      uses function inspect_symbol_list(AstNode *) defined in ast-inspect.c
      uses enumvalue AST_COL_NAME defined in ast-model.h
   function treeview_main(struct symbol_list *) in line 30
      protection public
      19 lines of code
      1 parameters
      1 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses function create_view_and_model(void *) defined in ast-view.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/ast-view.h
module ast-view.h
   function treeview_main(struct symbol_list *) in line 5
      protection public
      19 lines of code
      1 parameters
      1 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses function create_view_and_model(void *) defined in ast-view.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/avl.c
module avl.c
   macro definition bal in line 56
      protection public
   macro definition side in line 57
      protection public
   variable unfree_stree in line 45
      protection public
   function mkNode(const struct sm_state *) in line 29
      protection public
      12 lines of code
      1 parameters
      1 conditional paths
      uses function malloc(int) defined in sm_buf_size2.c
      uses macro definition assert defined in sort.c
      uses macro definition NULL defined in sm_implied3.c
      uses variable AvlNode::sm defined in avl.h
      uses variable AvlNode::lr defined in avl.h
      uses variable AvlNode::balance defined in avl.h
   function freeNode(AvlNode *) in line 30
      protection public
      8 lines of code
      1 parameters
      2 conditional paths
      uses variable AvlNode::lr defined in avl.h
   function lookup(const struct stree *,AvlNode *,const struct sm_state *) in line 32
      protection public
      15 lines of code
      3 parameters
      4 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses function cmp_tracker(const struct sm_state *,const struct sm_state *) defined in smatch_slist.c
      uses variable AvlNode::sm defined in avl.h
      uses variable AvlNode::lr defined in avl.h
   function insert_sm(struct stree *,AvlNode **,const struct sm_state *) in line 34
      protection public
      22 lines of code
      3 parameters
      4 conditional paths
      uses variable p defined in cond_expr2.c
      uses macro definition NULL defined in sm_implied3.c
      uses function mkNode(const struct sm_state *) defined in avl.c
      uses variable stree::count defined in avl.h
      uses function sign(int) defined in avl.c
      uses function cmp_tracker(const struct sm_state *,const struct sm_state *) defined in smatch_slist.c
      uses variable AvlNode::sm defined in avl.h
      uses variable AvlNode::lr defined in avl.h
      uses macro definition side defined in avl.c
      uses function sway(AvlNode **,int) defined in avl.c
   function remove_sm(struct stree *,AvlNode **,const struct sm_state *,AvlNode **) in line 35
      protection public
      53 lines of code
      4 parameters
      7 conditional paths
      uses variable p defined in cond_expr2.c
      uses macro definition NULL defined in sm_implied3.c
      uses function sign(int) defined in avl.c
      uses function cmp_tracker(const struct sm_state *,const struct sm_state *) defined in smatch_slist.c
      uses variable AvlNode::sm defined in avl.h
      uses variable stree::count defined in avl.h
      uses variable AvlNode::lr defined in avl.h
      uses macro definition side defined in avl.c
      uses variable AvlNode::balance defined in avl.h
      uses function removeExtremum(AvlNode **,int,AvlNode **) defined in avl.c
      uses macro definition bal defined in avl.c
      uses function sway(AvlNode **,int) defined in avl.c
   function removeExtremum(AvlNode **,int,AvlNode **) in line 36
      protection public
      16 lines of code
      3 parameters
      3 conditional paths
      uses variable p defined in cond_expr2.c
      uses variable AvlNode::lr defined in avl.h
      uses macro definition side defined in avl.c
      uses macro definition NULL defined in sm_implied3.c
      uses function sway(AvlNode **,int) defined in avl.c
      uses macro definition bal defined in avl.c
   function sway(AvlNode **,int) in line 38
      protection public
      9 lines of code
      2 parameters
      2 conditional paths
      uses function balance(AvlNode **,int) defined in avl.c
      uses variable p defined in cond_expr2.c
      uses macro definition side defined in avl.c
   function balance(AvlNode **,int) in line 39
      protection public
      37 lines of code
      2 parameters
      4 conditional paths
      uses variable p defined in cond_expr2.c
      uses variable AvlNode::lr defined in avl.h
      uses macro definition side defined in avl.c
      uses macro definition bal defined in avl.c
      uses variable AvlNode::balance defined in avl.h
   function checkBalances(AvlNode *,int *) in line 41
      protection public
      20 lines of code
      2 parameters
      5 conditional paths
      uses variable AvlNode::lr defined in avl.h
      uses variable AvlNode::balance defined in avl.h
   function checkOrder(struct stree *) in line 42
      protection public
      15 lines of code
      1 parameters
      2 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses macro definition avl_foreach defined in avl.h
      uses function cmp_tracker(const struct sm_state *,const struct sm_state *) defined in smatch_slist.c
   function countNode(AvlNode *) in line 43
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses variable AvlNode::lr defined in avl.h
   function sign(int) in line 59
      protection public
      8 lines of code
      1 parameters
      3 conditional paths
   function avl_new(void) in line 68
      protection public
      13 lines of code
      1 parameters
      1 conditional paths
      uses function malloc(int) defined in sm_buf_size2.c
      uses variable unfree_stree defined in avl.c
      uses macro definition assert defined in sort.c
      uses macro definition NULL defined in sm_implied3.c
      uses variable stree::root defined in avl.h
      uses variable stree::count defined in avl.h
      uses variable stree::stree_id defined in avl.h
      uses variable stree::references defined in avl.h
   function free_stree(struct stree **) in line 82
      protection public
      19 lines of code
      1 parameters
      1 conditional paths
      uses macro definition assert defined in sort.c
      uses macro definition NULL defined in sm_implied3.c
      uses variable unfree_stree defined in avl.c
      uses function freeNode(AvlNode *) defined in avl.c
   function avl_lookup(const struct stree *,const struct sm_state *) in line 102
      protection public
      11 lines of code
      2 parameters
      1 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses function lookup(const struct stree *,AvlNode *,const struct sm_state *) defined in avl.c
      uses variable stree::root defined in avl.h
      uses variable AvlNode::sm defined in avl.h
   function avl_lookup_node(const struct stree *,const struct sm_state *) in line 114
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function lookup(const struct stree *,AvlNode *,const struct sm_state *) defined in avl.c
      uses variable stree::root defined in avl.h
   function stree_count(const struct stree *) in line 119
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses variable stree::count defined in avl.h
   function clone_stree_real(struct stree *) in line 126
      protection public
      10 lines of code
      1 parameters
      1 conditional paths
      uses function avl_new(void) defined in avl.c
      uses macro definition avl_foreach defined in avl.h
      uses function avl_insert(struct stree **,const struct sm_state *) defined in avl.c
   function avl_insert(struct stree **,const struct sm_state *) in line 137
      protection public
      14 lines of code
      2 parameters
      1 conditional paths
      uses function avl_new(void) defined in avl.c
      uses function clone_stree_real(struct stree *) defined in avl.c
      uses function insert_sm(struct stree *,AvlNode **,const struct sm_state *) defined in avl.c
      uses variable stree::root defined in avl.h
   function avl_remove(struct stree **,const struct sm_state *) in line 152
      protection public
      24 lines of code
      2 parameters
      1 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses function clone_stree_real(struct stree *) defined in avl.c
      uses function remove_sm(struct stree *,AvlNode **,const struct sm_state *,AvlNode **) defined in avl.c
      uses variable stree::root defined in avl.h
      uses function free_stree(struct stree **) defined in avl.c
   function avl_check_invariants(struct stree *) in line 396
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses function checkBalances(AvlNode *,int *) defined in avl.c
      uses variable stree::root defined in avl.h
      uses function checkOrder(struct stree *) defined in avl.c
      uses function countNode(AvlNode *) defined in avl.c
      uses variable stree::count defined in avl.h
   function avl_iter_begin(AvlIter *,struct stree *,AvlDirection) in line 453
      protection public
      22 lines of code
      3 parameters
      1 conditional paths
      uses variable AvlIter::stack_index defined in avl.h
      uses variable AvlIter::direction defined in avl.h
      uses variable stree::root defined in avl.h
      uses variable AvlIter::sm defined in avl.h
      uses macro definition NULL defined in sm_implied3.c
      uses variable AvlIter::node defined in avl.h
      uses variable AvlNode::lr defined in avl.h
      uses variable AvlIter::stack defined in avl.h
      uses variable AvlNode::sm defined in avl.h
   function avl_iter_next(AvlIter *) in line 476
      protection public
      25 lines of code
      1 parameters
      1 conditional paths
      uses variable AvlIter::node defined in avl.h
      uses variable AvlIter::direction defined in avl.h
      uses macro definition NULL defined in sm_implied3.c
      uses variable AvlNode::lr defined in avl.h
      uses variable AvlIter::stack defined in avl.h
      uses variable AvlIter::stack_index defined in avl.h
      uses variable AvlIter::sm defined in avl.h
      uses variable AvlNode::sm defined in avl.h
   function clone_stree(struct stree *) in line 502
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses variable stree::references defined in avl.h
   function set_stree_id(struct stree **,int) in line 511
      protection public
      7 lines of code
      2 parameters
      1 conditional paths
      uses function clone_stree_real(struct stree *) defined in avl.c
      uses variable stree::stree_id defined in avl.h
   function get_stree_id(struct stree *) in line 519
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses variable stree::stree_id defined in avl.h
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/avl.h
module avl.h
   macro definition avl_member in line 47
      protection public
   macro definition avl_foreach in line 73
      protection public
   macro definition FOR_EACH_SM in line 85
      protection public
   macro definition END_FOR_EACH_SM in line 90
      protection public
   macro definition FOR_EACH_MY_SM in line 92
      protection public
   macro definition avl_foreach_reverse in line 99
      protection public
   macro definition avl_traverse in line 116
      protection public
   enumeration AvlDirection in line 102
      protection public
   typedef AvlNode in line 519
      protection public
   typedef AvlIter in line 519
      protection public
   typedef AvlDirection in line 102
      protection public
   enumvalue FORWARD in line 102
      protection public
   enumvalue BACKWARD in line 102
      protection public
   function free_stree(struct stree **) in line 41
      protection public
      19 lines of code
      1 parameters
      3 conditional paths
      uses macro definition assert defined in sort.c
      uses macro definition NULL defined in sm_implied3.c
      uses variable unfree_stree defined in avl.c
   function avl_lookup(const struct stree *,const struct sm_state *) in line 44
      protection public
      11 lines of code
      2 parameters
      3 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses variable stree::root defined in avl.h
      uses variable AvlNode::sm defined in avl.h
   function stree_count(const struct stree *) in line 50
      protection public
      6 lines of code
      1 parameters
      2 conditional paths
      uses variable stree::count defined in avl.h
   function avl_insert(struct stree **,const struct sm_state *) in line 53
      protection public
      14 lines of code
      2 parameters
      3 conditional paths
      uses function avl_new(void) defined in avl.c
      uses variable stree::root defined in avl.h
   function avl_remove(struct stree **,const struct sm_state *) in line 60
      protection public
      24 lines of code
      2 parameters
      5 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses variable stree::root defined in avl.h
      uses function free_stree(struct stree **) defined in avl.c
   function avl_check_invariants(struct stree *) in line 67
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses variable stree::root defined in avl.h
      uses variable stree::count defined in avl.h
   function avl_iter_begin(AvlIter *,struct stree *,AvlDirection) in line 114
      protection public
      22 lines of code
      3 parameters
      3 conditional paths
      uses variable AvlIter::stack_index defined in avl.h
      uses variable AvlIter::direction defined in avl.h
      uses variable stree::root defined in avl.h
      uses variable AvlIter::sm defined in avl.h
      uses macro definition NULL defined in sm_implied3.c
      uses variable AvlIter::node defined in avl.h
      uses variable AvlNode::lr defined in avl.h
      uses variable AvlIter::stack defined in avl.h
      uses variable AvlNode::sm defined in avl.h
   function avl_iter_next(AvlIter *) in line 115
      protection public
      25 lines of code
      1 parameters
      5 conditional paths
      uses variable AvlIter::node defined in avl.h
      uses variable AvlIter::direction defined in avl.h
      uses macro definition NULL defined in sm_implied3.c
      uses variable AvlNode::lr defined in avl.h
      uses variable AvlIter::stack defined in avl.h
      uses variable AvlIter::stack_index defined in avl.h
      uses variable AvlIter::sm defined in avl.h
      uses variable AvlNode::sm defined in avl.h
   function avl_lookup_node(const struct stree *,const struct sm_state *) in line 131
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses variable stree::root defined in avl.h
   function clone_stree(struct stree *) in line 134
      protection public
      8 lines of code
      1 parameters
      2 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses variable stree::references defined in avl.h
   function set_stree_id(struct stree **,int) in line 136
      protection public
      7 lines of code
      2 parameters
      2 conditional paths
      uses variable stree::stree_id defined in avl.h
   function get_stree_id(struct stree *) in line 137
      protection public
      6 lines of code
      1 parameters
      2 conditional paths
      uses variable stree::stree_id defined in avl.h
   variable stree::count in line 36
      protection public
   variable stree::references in line 38
      protection public
   variable stree::root in line 35
      protection public
   variable stree::stree_id in line 37
      protection public
   variable AvlIter::direction in line 111
      protection public
   variable AvlIter::node in line 106
      protection public
   variable AvlIter::sm in line 105
      protection public
   variable AvlIter::stack in line 109
      protection public
   variable AvlIter::stack_index in line 110
      protection public
   variable AvlNode::balance in line 128
      protection public
   variable AvlNode::lr in line 127
      protection public
   variable AvlNode::sm in line 125
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/bitmap.h
module bitmap.h
   macro definition BITS_IN_LONG in line 4
      protection public
   macro definition LONGS in line 5
      protection public
   macro definition DECLARE_BITMAP in line 8
      protection public
   function test_bit(unsigned int,unsigned long *) in line 10
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
      uses variable offset defined in sm_implied10.c
      uses macro definition BITS_IN_LONG defined in bitmap.h
   function set_bit(unsigned int,unsigned long *) in line 17
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
      uses variable offset defined in sm_implied10.c
      uses macro definition BITS_IN_LONG defined in bitmap.h
   function clear_bit(unsigned int,unsigned long *) in line 24
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
      uses variable offset defined in sm_implied10.c
      uses macro definition BITS_IN_LONG defined in bitmap.h
   function test_and_set_bit(unsigned int,unsigned long *) in line 31
      protection public
      9 lines of code
      2 parameters
      1 conditional paths
      uses variable offset defined in sm_implied10.c
      uses macro definition BITS_IN_LONG defined in bitmap.h
   function test_and_clear_bit(unsigned int,unsigned long *) in line 41
      protection public
      9 lines of code
      2 parameters
      1 conditional paths
      uses variable offset defined in sm_implied10.c
      uses macro definition BITS_IN_LONG defined in bitmap.h
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/c2xml.c
module c2xml.c
   variable doc in line 40
      protection public
   variable root_node in line 41
      protection public
   variable idcount in line 42
      protection public
   function examine_symbol(struct symbol *,xmlNodePtr) in line 44
      protection public
      50 lines of code
      2 parameters
      12 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses variable symbol::array_size defined in struct.c
      uses variable sym defined in smatch_type.c
      uses variable symbol::aux defined in struct.c
      uses variable symbol::ident defined in struct.c
      uses variable ident::reserved defined in token.h
      uses function new_sym_node(struct symbol *,const char *,xmlNodePtr) defined in c2xml.c
      uses function get_type_name(enum type type) defined in symbol.c
      uses variable symbol::type defined in struct.c
      uses function examine_modifiers(struct symbol *,xmlNodePtr) defined in c2xml.c
      uses function examine_layout(struct symbol *,xmlNodePtr) defined in c2xml.c
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::base_type defined in struct.c
      uses function builtin_typename(struct symbol *) defined in show-parse.c
      uses variable root_node defined in c2xml.c
      uses function newProp(xmlNodePtr,const char *,const char *) defined in c2xml.c
      uses function get_expression_value(struct expression *) defined in expand.c
      uses function newNumProp(xmlNodePtr,const char *,int) defined in c2xml.c
      uses enumvalue SYM_STRUCT defined in symbol.h
      uses enumvalue SYM_UNION defined in symbol.h
      uses function examine_members(struct symbol_list *,xmlNodePtr) defined in c2xml.c
      uses variable symbol::symbol_list defined in struct.c
      uses enumvalue SYM_FN defined in symbol.h
      uses variable symbol::arguments defined in struct.c
      uses enumvalue SYM_UNINITIALIZED defined in symbol.h
   function newProp(xmlNodePtr,const char *,const char *) in line 46
      protection public
      4 lines of code
      3 parameters
      1 conditional paths
      uses variable name defined in smatch_type.c
   function newNumProp(xmlNodePtr,const char *,int) in line 51
      protection public
      6 lines of code
      3 parameters
      1 conditional paths
      uses variable buf defined in sm_fake_assignment.c
      uses function snprintf(char *,int,char *,char *) defined in sm_overflow6.c
      uses function newProp(xmlNodePtr,const char *,const char *) defined in c2xml.c
      uses variable name defined in smatch_type.c
   function newIdProp(xmlNodePtr,const char *,unsigned int) in line 58
      protection public
      6 lines of code
      3 parameters
      1 conditional paths
      uses variable buf defined in sm_fake_assignment.c
      uses function snprintf(char *,int,char *,char *) defined in sm_overflow6.c
      uses function newProp(xmlNodePtr,const char *,const char *) defined in c2xml.c
      uses variable name defined in smatch_type.c
   function new_sym_node(struct symbol *,const char *,xmlNodePtr) in line 65
      protection public
      34 lines of code
      3 parameters
      4 conditional paths
      uses function show_ident(const struct ident *) defined in token.h
      uses variable sym defined in smatch_type.c
      uses variable symbol::ident defined in struct.c
      uses macro definition assert defined in sort.c
      uses variable name defined in smatch_type.c
      uses macro definition NULL defined in sm_implied3.c
      uses function newProp(xmlNodePtr,const char *,const char *) defined in c2xml.c
      uses function newIdProp(xmlNodePtr,const char *,unsigned int) defined in c2xml.c
      uses variable idcount defined in c2xml.c
      uses function stream_name(int) defined in token.h
      uses variable symbol::pos defined in struct.c
      uses variable position::stream defined in lib.h
      uses function newNumProp(xmlNodePtr,const char *,int) defined in c2xml.c
      uses variable position::line defined in lib.h
      uses variable position::pos defined in lib.h
      uses variable symbol::endpos defined in struct.c
      uses variable position::type defined in lib.h
      uses variable symbol::aux defined in struct.c
   function examine_members(struct symbol_list *,xmlNodePtr) in line 100
      protection public
      8 lines of code
      2 parameters
      1 conditional paths
      uses variable sym defined in smatch_type.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses function examine_symbol(struct symbol *,xmlNodePtr) defined in c2xml.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function examine_modifiers(struct symbol *,xmlNodePtr) in line 109
      protection public
      47 lines of code
      2 parameters
      4 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses variable sym defined in smatch_type.c
      uses variable symbol::namespace defined in struct.c
      uses enumvalue NS_SYMBOL defined in symbol.h
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::modifiers defined in struct.c
      uses function newProp(xmlNodePtr,const char *,const char *) defined in c2xml.c
   function examine_layout(struct symbol *,xmlNodePtr) in line 158
      protection public
      11 lines of code
      2 parameters
      2 conditional paths
      uses function examine_symbol_type(struct symbol *) defined in symbol.c
      uses variable sym defined in smatch_type.c
      uses function newNumProp(xmlNodePtr,const char *,int) defined in c2xml.c
      uses variable symbol::bit_size defined in struct.c
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::alignment defined in struct.c
      uses variable symbol::offset defined in struct.c
      uses macro definition is_bitfield_type defined in symbol.h
      uses variable symbol::bit_offset defined in struct.c
   function get_expansion_end(struct token *) in line 221
      protection public
      13 lines of code
      1 parameters
      3 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses macro definition eof_token defined in token.h
      uses variable token::next defined in token.h
      uses variable token::pos defined in token.h
   function examine_macro(struct symbol *,xmlNodePtr) in line 235
      protection public
      13 lines of code
      2 parameters
      2 conditional paths
      uses variable position::pos defined in lib.h
      uses function get_expansion_end(struct token *) defined in c2xml.c
      uses variable sym defined in smatch_type.c
      uses variable symbol::expansion defined in struct.c
      uses variable symbol::endpos defined in struct.c
      uses variable symbol::pos defined in struct.c
      uses function new_sym_node(struct symbol *,const char *,xmlNodePtr) defined in c2xml.c
   function examine_namespace(struct symbol *) in line 249
      protection public
      26 lines of code
      1 parameters
      12 conditional paths
      uses variable sym defined in smatch_type.c
      uses variable symbol::ident defined in struct.c
      uses variable ident::reserved defined in token.h
      uses variable symbol::namespace defined in struct.c
      uses enumvalue NS_MACRO defined in symbol.h
      uses function examine_macro(struct symbol *,xmlNodePtr) defined in c2xml.c
      uses variable root_node defined in c2xml.c
      uses enumvalue NS_TYPEDEF defined in symbol.h
      uses enumvalue NS_STRUCT defined in symbol.h
      uses enumvalue NS_SYMBOL defined in symbol.h
      uses function examine_symbol(struct symbol *,xmlNodePtr) defined in c2xml.c
      uses enumvalue NS_NONE defined in symbol.h
      uses enumvalue NS_LABEL defined in symbol.h
      uses enumvalue NS_ITERATOR defined in symbol.h
      uses enumvalue NS_UNDEF defined in symbol.h
      uses enumvalue NS_PREPROCESSOR defined in symbol.h
      uses enumvalue NS_KEYWORD defined in symbol.h
      uses function die(const char *,...) defined in lib.c
   function get_stream_id(const char *) in line 276
      protection public
      9 lines of code
      1 parameters
      3 conditional paths
      uses variable input_stream_nr defined in token.h
      uses variable name defined in smatch_type.c
      uses function stream_name(int) defined in token.h
   function examine_symbol_list(const char *,struct symbol_list *) in line 286
      protection public
      12 lines of code
      2 parameters
      3 conditional paths
      uses variable sym defined in smatch_type.c
      uses function get_stream_id(const char *) defined in c2xml.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable symbol::pos defined in struct.c
      uses variable position::stream defined in lib.h
      uses function examine_namespace(struct symbol *) defined in c2xml.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function main(int,char **) in line 299
      protection public
      34 lines of code
      2 parameters
      1 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses variable doc defined in c2xml.c
      uses variable root_node defined in c2xml.c
      uses function sparse_initialize(int,char **,struct string_list **) defined in lib.c
      uses macro definition FOR_EACH_PTR_NOTAG defined in ptrlist.h
      uses function examine_symbol_list(const char *,struct symbol_list *) defined in c2xml.c
      uses function sparse_keep_tokens(char *) defined in lib.c
      uses variable file_scope defined in scope.c
      uses variable scope::symbols defined in scope.h
      uses variable global_scope defined in scope.c
      uses macro definition END_FOR_EACH_PTR_NOTAG defined in ptrlist.h
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/char.c
module char.c
   function parse_escape(const char *,unsigned *,const char *,int,struct position) in line 8
      protection public
      53 lines of code
      5 parameters
      18 conditional paths
      uses variable c defined in sm_array_overflow.c
      uses variable p defined in cond_expr2.c
      uses variable d defined in sm_array_overflow.c
      uses macro definition U defined in test-dissect.c
      uses function hexval(unsigned int) defined in lib.c
      uses function warning(struct position,const char *,...) defined in lib.c
   function get_char_constant(struct token *,unsigned long long *) in line 62
      protection public
      24 lines of code
      2 parameters
      1 conditional paths
      uses variable p defined in cond_expr2.c
      uses variable token::embedded defined in token.h
      uses function v(int,...) defined in builtin_va_arg_pack.c
      uses enumvalue TOKEN_CHAR defined in token.h
      uses enumvalue TOKEN_WIDE_CHAR defined in token.h
      uses variable token::string defined in token.h
      uses variable string::data defined in token.h
      uses variable string::length defined in token.h
      uses enumvalue TOKEN_CHAR_EMBEDDED_0 defined in token.h
      uses enumvalue TOKEN_CHAR_EMBEDDED_3 defined in token.h
      uses function parse_escape(const char *,unsigned *,const char *,int,struct position) defined in char.c
      uses function warning(struct position,const char *,...) defined in lib.c
      uses variable token::pos defined in token.h
   function get_string_constant(struct token *,struct expression *) in line 87
      protection public
      50 lines of code
      2 parameters
      1 conditional paths
      uses variable token::string defined in token.h
      uses variable token::next defined in token.h
      uses macro definition NULL defined in sm_implied3.c
      uses enumvalue TOKEN_WIDE_STRING defined in token.h
      uses macro definition MAX_STRING defined in token.h
      uses enumvalue TOKEN_STRING defined in token.h
      uses variable bits_in_char defined in target.c
      uses function v(int,...) defined in builtin_va_arg_pack.c
      uses variable p defined in cond_expr2.c
      uses variable string::data defined in token.h
      uses variable string::length defined in token.h
      uses function parse_escape(const char *,unsigned *,const char *,int,struct position) defined in char.c
      uses variable token::pos defined in token.h
      uses function warning(struct position,const char *,...) defined in lib.c
      uses function memcpy(void *,void *,int) defined in sm_struct_assign1.c
      uses variable expression::string defined in expression.h
      uses variable expression::wide defined in expression.h
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/char.h
module char.h
   function get_char_constant(struct token *,unsigned long long *) in line 1
      protection public
      24 lines of code
      2 parameters
      5 conditional paths
      uses variable p defined in cond_expr2.c
      uses variable token::embedded defined in token.h
      uses function v(int,...) defined in builtin_va_arg_pack.c
      uses enumvalue TOKEN_CHAR defined in token.h
      uses enumvalue TOKEN_WIDE_CHAR defined in token.h
      uses variable token::string defined in token.h
      uses variable string::data defined in token.h
      uses variable string::length defined in token.h
      uses enumvalue TOKEN_CHAR_EMBEDDED_0 defined in token.h
      uses enumvalue TOKEN_CHAR_EMBEDDED_3 defined in token.h
      uses function warning(struct position,const char *,...) defined in lib.c
      uses variable token::pos defined in token.h
   function get_string_constant(struct token *,struct expression *) in line 2
      protection public
      50 lines of code
      2 parameters
      9 conditional paths
      uses variable token::string defined in token.h
      uses variable token::next defined in token.h
      uses macro definition NULL defined in sm_implied3.c
      uses enumvalue TOKEN_WIDE_STRING defined in token.h
      uses macro definition MAX_STRING defined in token.h
      uses enumvalue TOKEN_STRING defined in token.h
      uses variable bits_in_char defined in target.c
      uses function v(int,...) defined in builtin_va_arg_pack.c
      uses variable p defined in cond_expr2.c
      uses variable string::data defined in token.h
      uses variable string::length defined in token.h
      uses variable token::pos defined in token.h
      uses function warning(struct position,const char *,...) defined in lib.c
      uses function memcpy(void *,void *,int) defined in sm_struct_assign1.c
      uses variable expression::string defined in expression.h
      uses variable expression::wide defined in expression.h
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/check_64bit_shift.c
module check_64bit_shift.c
   variable my_id in line 20
      protection public
   function match_shift_assignment(struct expression *) in line 22
      protection public
      38 lines of code
      1 parameters
      7 conditional paths
      uses variable expression::right defined in expression.h
      uses variable name defined in smatch_type.c
      uses function strip_expr(struct expression *) defined in smatch.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_BINOP defined in expression.h
      uses variable expression::op defined in expression.h
      uses enumvalue SPECIAL_LEFTSHIFT defined in token.h
      uses function get_type(struct expression *) defined in smatch.h
      uses variable expression::left defined in expression.h
      uses function type_bits(struct symbol *) defined in smatch.h
      uses function get_value(struct expression *,sval_t *) defined in smatch.h
      uses function get_absolute_max(struct expression *,sval_t *) defined in smatch.h
      uses function sval_cast(struct symbol *,sval_t) defined in smatch.h
      uses function sval_cmp_val(sval_t,long long) defined in smatch.h
      uses function sval_binop(sval_t,int,sval_t) defined in smatch.h
      uses function expr_to_str_sym(struct expression *,struct symbol **) defined in smatch.h
      uses macro definition NULL defined in sm_implied3.c
      uses macro definition sm_msg defined in smatch.h
      uses function free_string(char *) defined in smatch.h
   function check_64bit_shift(int) in line 61
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses variable my_id defined in check_64bit_shift.c
      uses function add_hook(void *,enum hook_type) defined in smatch.h
      uses function match_shift_assignment(struct expression *) defined in check_64bit_shift.c
      uses enumvalue ASSIGNMENT_HOOK defined in smatch.h
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/check_access_ok_math.c
module check_access_ok_math.c
   variable my_id in line 20
      protection public
   function can_overflow(struct expression *) in line 22
      protection public
      24 lines of code
      1 parameters
      5 conditional paths
      uses function strip_expr(struct expression *) defined in smatch.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_BINOP defined in expression.h
      uses variable expression::left defined in expression.h
      uses variable expression::right defined in expression.h
      uses variable expression::op defined in expression.h
      uses enumvalue SPECIAL_LEFTSHIFT defined in token.h
      uses function get_implied_max(struct expression *,sval_t *) defined in smatch.h
      uses function get_absolute_max(struct expression *,sval_t *) defined in smatch.h
      uses function sval_cmp_val(sval_t,long long) defined in smatch.h
   function match_size(struct expression *) in line 47
      protection public
      20 lines of code
      1 parameters
      5 conditional paths
      uses variable name defined in smatch_type.c
      uses function strip_expr(struct expression *) defined in smatch.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_BINOP defined in expression.h
      uses function get_assigned_expr(struct expression *) defined in check_assigned_expr.c
      uses function can_overflow(struct expression *) defined in check_access_ok_math.c
      uses function expr_to_str(struct expression *) defined in smatch.h
      uses macro definition sm_msg defined in smatch.h
      uses function free_string(char *) defined in smatch.h
   function match_access_ok(const char *,struct expression *,void *) in line 68
      protection public
      7 lines of code
      3 parameters
      1 conditional paths
      uses function get_argument_from_call_expr(struct expression_list *,int) defined in smatch.h
      uses variable expression::args defined in expression.h
      uses function match_size(struct expression *) defined in check_access_ok_math.c
   function split_asm_constraints(struct expression_list *) in line 76
      protection public
      23 lines of code
      1 parameters
      5 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable expression::expr_list defined in expression.h
      uses function match_size(struct expression *) defined in check_access_ok_math.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function match_asm_stmt(struct statement *) in line 100
      protection public
      9 lines of code
      1 parameters
      2 conditional paths
      uses variable name defined in smatch_type.c
      uses function get_macro_name(struct position) defined in macro_table.c
      uses variable statement::pos defined in parse.h
      uses function split_asm_constraints(struct expression_list *) defined in check_access_ok_math.c
      uses variable statement::asm_inputs defined in parse.h
   function check_access_ok_math(int) in line 110
      protection public
      10 lines of code
      1 parameters
      3 conditional paths
      uses variable my_id defined in check_access_ok_math.c
      uses variable option_project defined in smatch.c
      uses enumvalue PROJ_KERNEL defined in smatch.h
      uses variable option_spammy defined in smatch.c
      uses function add_function_hook(const char *,func_hook *,void *) defined in smatch.h
      uses function match_access_ok(const char *,struct expression *,void *) defined in check_access_ok_math.c
      uses macro definition NULL defined in sm_implied3.c
      uses function add_hook(void *,enum hook_type) defined in smatch.h
      uses function match_asm_stmt(struct statement *) defined in check_access_ok_math.c
      uses enumvalue ASM_HOOK defined in smatch.h
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/check_allocation_funcs.c
module check_allocation_funcs.c
   variable my_id in line 24
      protection public
   variable allocated in line 30
      protection public
   variable allocation_funcs in line 32
      protection public
   variable returns_new_stuff in line 56
      protection public
   variable returns_old_stuff in line 57
      protection public
   function match_allocation(const char *,struct expression *,void *) in line 39
      protection public
      16 lines of code
      3 parameters
      5 conditional paths
      uses function expr_to_var_sym(struct expression *,struct symbol **) defined in smatch.h
      uses variable expression::left defined in expression.h
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::modifiers defined in struct.c
      uses macro definition MOD_NONLOCAL defined in symbol.h
      uses macro definition MOD_STATIC defined in symbol.h
      uses macro definition MOD_ADDRESSABLE defined in symbol.h
      uses function add_tracker(struct tracker_list **,int,const char *,struct symbol *) defined in smatch.h
      uses variable allocated defined in check_allocation_funcs.c
      uses variable my_id defined in check_allocation_funcs.c
      uses function free_string(char *) defined in smatch.h
   function match_return(struct expression *) in line 58
      protection public
      21 lines of code
      1 parameters
      6 conditional paths
      uses variable name defined in smatch_type.c
      uses variable sym defined in smatch_type.c
      uses variable __inline_fn defined in smatch.h
      uses function get_value(struct expression *,sval_t *) defined in smatch.h
      uses variable sval_t::value defined in smatch.h
      uses variable returns_new_stuff defined in check_allocation_funcs.c
      uses function expr_to_var_sym(struct expression *,struct symbol **) defined in smatch.h
      uses variable returns_old_stuff defined in check_allocation_funcs.c
      uses function in_tracker_list(struct tracker_list *,int,const char *,struct symbol *) defined in smatch.h
      uses variable allocated defined in check_allocation_funcs.c
      uses variable my_id defined in check_allocation_funcs.c
      uses function free_string(char *) defined in smatch.h
   function match_end_func(struct symbol *) in line 80
      protection public
      10 lines of code
      1 parameters
      3 conditional paths
      uses variable __inline_fn defined in smatch.h
      uses variable returns_new_stuff defined in check_allocation_funcs.c
      uses variable returns_old_stuff defined in check_allocation_funcs.c
      uses macro definition sm_info defined in smatch.h
      uses function free_trackers_and_list(struct tracker_list **) defined in smatch.h
      uses variable allocated defined in check_allocation_funcs.c
   function check_allocation_funcs(int) in line 91
      protection public
      15 lines of code
      1 parameters
      3 conditional paths
      uses variable option_info defined in smatch.c
      uses variable option_project defined in smatch.c
      uses enumvalue PROJ_KERNEL defined in smatch.h
      uses variable my_id defined in check_allocation_funcs.c
      uses function add_hook(void *,enum hook_type) defined in smatch.h
      uses function match_return(struct expression *) defined in check_allocation_funcs.c
      uses enumvalue RETURN_HOOK defined in smatch.h
      uses function match_end_func(struct symbol *) defined in check_allocation_funcs.c
      uses enumvalue END_FUNC_HOOK defined in smatch.h
      uses variable allocation_funcs defined in check_allocation_funcs.c
      uses function add_function_assign_hook(const char *,func_hook *,void *) defined in smatch.h
      uses function match_allocation(const char *,struct expression *,void *) defined in check_allocation_funcs.c
      uses macro definition NULL defined in sm_implied3.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/check_array_condition.c
module check_array_condition.c
   variable my_id in line 28
      protection public
   function match_condition(struct expression *) in line 30
      protection public
      17 lines of code
      1 parameters
      4 conditional paths
      uses variable str defined in sm_overflow6.c
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_DEREF defined in expression.h
      uses function get_type(struct expression *) defined in smatch.h
      uses enumvalue SYM_ARRAY defined in symbol.h
      uses function get_macro_name(struct position) defined in macro_table.c
      uses variable expression::pos defined in expression.h
      uses function expr_to_str(struct expression *) defined in smatch.h
      uses macro definition sm_msg defined in smatch.h
      uses function free_string(char *) defined in smatch.h
   function check_array_condition(int) in line 48
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable my_id defined in check_array_condition.c
      uses function add_hook(void *,enum hook_type) defined in smatch.h
      uses function match_condition(struct expression *) defined in check_array_condition.c
      uses enumvalue CONDITION_HOOK defined in smatch.h
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/check_assign_vs_compare.c
module check_assign_vs_compare.c
   variable my_id in line 20
      protection public
   function match_condition(struct expression *) in line 22
      protection public
      11 lines of code
      1 parameters
      3 conditional paths
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_ASSIGNMENT defined in expression.h
      uses variable expression::op defined in expression.h
      uses function get_value(struct expression *,sval_t *) defined in smatch.h
      uses variable expression::right defined in expression.h
      uses macro definition sm_msg defined in smatch.h
      uses function sval_to_str(sval_t) defined in smatch.h
   function check_assign_vs_compare(int) in line 34
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable my_id defined in check_assign_vs_compare.c
      uses function add_hook(void *,enum hook_type) defined in smatch.h
      uses function match_condition(struct expression *) defined in check_assign_vs_compare.c
      uses enumvalue CONDITION_HOOK defined in smatch.h
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/check_assigned_expr.c
module check_assigned_expr.c
   variable check_assigned_expr_id in line 27
      protection public
   variable my_id in line 28
      protection public
   variable link_id in line 29
      protection public
   function undef(struct sm_state *,struct expression *) in line 31
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function set_state(int,const char *,struct symbol *,struct smatch_state *) defined in smatch.h
      uses variable my_id defined in check_assigned_expr.c
      uses variable sm_state::name defined in smatch.h
      uses variable sm_state::sym defined in smatch.h
      uses variable undefined defined in smatch.h
   function get_assigned_expr(struct expression *) in line 36
      protection public
      9 lines of code
      1 parameters
      1 conditional paths
      uses function get_state_expr(int,struct expression *) defined in smatch.h
      uses variable my_id defined in check_assigned_expr.c
      uses macro definition NULL defined in sm_implied3.c
      uses variable smatch_state::data defined in smatch.h
   function get_assigned_expr_name_sym(const char *,struct symbol *) in line 46
      protection public
      9 lines of code
      2 parameters
      1 conditional paths
      uses function get_state(int,const char *,struct symbol *) defined in smatch.h
      uses variable my_id defined in check_assigned_expr.c
      uses variable name defined in smatch_type.c
      uses variable sym defined in smatch_type.c
      uses macro definition NULL defined in sm_implied3.c
      uses variable smatch_state::data defined in smatch.h
   function alloc_my_state(struct expression *) in line 56
      protection public
      13 lines of code
      1 parameters
      1 conditional paths
      uses variable name defined in smatch_type.c
      uses function strip_expr(struct expression *) defined in smatch.h
      uses function expr_to_str(struct expression *) defined in smatch.h
      uses variable smatch_state::name defined in smatch.h
      uses function alloc_sname(const char *) defined in smatch_slist.c
      uses function free_string(char *) defined in smatch.h
      uses variable smatch_state::data defined in smatch.h
   function match_assignment(struct expression *) in line 70
      protection public
      26 lines of code
      1 parameters
      7 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses variable expression::op defined in expression.h
      uses function is_fake_call(struct expression *) defined in smatch_extra.h
      uses variable expression::right defined in expression.h
      uses variable __in_fake_assign defined in smatch.h
      uses function expr_to_var_sym(struct expression *,struct symbol **) defined in smatch.h
      uses variable expression::left defined in expression.h
      uses function set_state(int,const char *,struct symbol *,struct smatch_state *) defined in smatch.h
      uses variable my_id defined in check_assigned_expr.c
      uses function alloc_my_state(struct expression *) defined in check_assigned_expr.c
      uses function store_link(int,const char *,struct symbol *,const char *,struct symbol *) defined in smatch.h
      uses variable link_id defined in check_assigned_expr.c
      uses function free_string(char *) defined in smatch.h
   function check_assigned_expr(int) in line 97
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses variable my_id defined in check_assigned_expr.c
      uses variable check_assigned_expr_id defined in check_assigned_expr.c
      uses function add_hook(void *,enum hook_type) defined in smatch.h
      uses function match_assignment(struct expression *) defined in check_assigned_expr.c
      uses enumvalue ASSIGNMENT_HOOK defined in smatch.h
      uses function add_modification_hook(int,modification_hook *) defined in smatch.h
      uses function undef(struct sm_state *,struct expression *) defined in check_assigned_expr.c
   function check_assigned_expr_links(int) in line 104
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable link_id defined in check_assigned_expr.c
      uses function set_up_link_functions(int,int) defined in smatch.h
      uses variable my_id defined in check_assigned_expr.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/check_balanced.c
module check_balanced.c
   variable my_id in line 25
      protection public
   variable starts_left in line 31
      protection public
   variable starts_right in line 32
      protection public
   function STATE(left) in line 27
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function STATE(right) in line 28
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function STATE(start_state) in line 29
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function get_start_state(struct sm_state *) in line 34
      protection public
      17 lines of code
      1 parameters
      6 conditional paths
      uses function in_tracker_list(struct tracker_list *,int,const char *,struct symbol *) defined in smatch.h
      uses variable starts_left defined in check_balanced.c
      uses variable my_id defined in check_balanced.c
      uses variable sm_state::name defined in smatch.h
      uses variable sm_state::sym defined in smatch.h
      uses variable starts_right defined in check_balanced.c
      uses variable undefined defined in smatch.h
   function unmatched_state(struct sm_state *) in line 52
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function match_left(const char *,struct expression *,void *) in line 57
      protection public
      15 lines of code
      3 parameters
      4 conditional paths
      uses variable name defined in smatch_type.c
      uses variable __inline_fn defined in smatch.h
      uses function get_sm_state(int,const char *,struct symbol *) defined in smatch.h
      uses variable my_id defined in check_balanced.c
      uses macro definition NULL defined in sm_implied3.c
      uses function add_tracker(struct tracker_list **,int,const char *,struct symbol *) defined in smatch.h
      uses variable starts_right defined in check_balanced.c
      uses function slist_has_state(struct state_list *,struct smatch_state *) defined in smatch_slist.c
      uses variable sm_state::possible defined in smatch.h
      uses variable sm_state::left defined in smatch.h
      uses macro definition sm_msg defined in smatch.h
      uses function set_state(int,const char *,struct symbol *,struct smatch_state *) defined in smatch.h
   function match_right(const char *,struct expression *,void *) in line 73
      protection public
      15 lines of code
      3 parameters
      4 conditional paths
      uses variable name defined in smatch_type.c
      uses variable __inline_fn defined in smatch.h
      uses function get_sm_state(int,const char *,struct symbol *) defined in smatch.h
      uses variable my_id defined in check_balanced.c
      uses macro definition NULL defined in sm_implied3.c
      uses function add_tracker(struct tracker_list **,int,const char *,struct symbol *) defined in smatch.h
      uses variable starts_left defined in check_balanced.c
      uses function slist_has_state(struct state_list *,struct smatch_state *) defined in smatch_slist.c
      uses variable sm_state::possible defined in smatch.h
      uses variable sm_state::right defined in smatch.h
      uses macro definition sm_msg defined in smatch.h
      uses function set_state(int,const char *,struct symbol *,struct smatch_state *) defined in smatch.h
   function check_possible(struct sm_state *) in line 89
      protection public
      29 lines of code
      1 parameters
      8 conditional paths
      uses macro definition undef defined in preprocessor18.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable sm_state::possible defined in smatch.h
      uses variable sm_state::state defined in smatch.h
      uses variable sm_state::left defined in smatch.h
      uses variable sm_state::right defined in smatch.h
      uses function get_start_state(struct sm_state *) defined in check_balanced.c
      uses variable undefined defined in smatch.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses macro definition sm_msg defined in smatch.h
      uses variable sm_state::name defined in smatch.h
   function match_return(struct expression *) in line 119
      protection public
      14 lines of code
      1 parameters
      3 conditional paths
      uses variable __inline_fn defined in smatch.h
      uses function __get_cur_stree(void) defined in smatch.h
      uses macro definition FOR_EACH_MY_SM defined in avl.h
      uses variable my_id defined in check_balanced.c
      uses variable sm_state::state defined in smatch.h
      uses variable merged defined in smatch.h
      uses function check_possible(struct sm_state *) defined in check_balanced.c
      uses macro definition END_FOR_EACH_SM defined in avl.h
   function clear_lists(void) in line 134
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function free_trackers_and_list(struct tracker_list **) defined in smatch.h
      uses variable starts_left defined in check_balanced.c
      uses variable starts_right defined in check_balanced.c
   function match_func_end(struct symbol *) in line 140
      protection public
      8 lines of code
      1 parameters
      3 conditional paths
      uses variable __inline_fn defined in smatch.h
      uses function is_reachable(void) defined in smatch.h
      uses function match_return(struct expression *) defined in check_balanced.c
      uses macro definition NULL defined in sm_implied3.c
      uses function clear_lists(void) defined in check_balanced.c
   function get_left_funcs(const char *,struct token **) in line 149
      protection public
      12 lines of code
      2 parameters
      3 conditional paths
      uses macro definition func defined in preprocessor1.c
      uses enumvalue TOKEN_IDENT defined in token.h
      uses function show_ident(const struct ident *) defined in token.h
      uses function add_function_hook(const char *,func_hook *,void *) defined in smatch.h
      uses function match_left(const char *,struct expression *,void *) defined in check_balanced.c
      uses variable name defined in smatch_type.c
      uses variable token::next defined in token.h
      uses enumvalue TOKEN_SPECIAL defined in token.h
   function get_right_funcs(const char *,struct token **) in line 162
      protection public
      12 lines of code
      2 parameters
      3 conditional paths
      uses macro definition func defined in preprocessor1.c
      uses enumvalue TOKEN_IDENT defined in token.h
      uses function show_ident(const struct ident *) defined in token.h
      uses function add_function_hook(const char *,func_hook *,void *) defined in smatch.h
      uses function match_right(const char *,struct expression *,void *) defined in check_balanced.c
      uses variable name defined in smatch_type.c
      uses variable token::next defined in token.h
      uses enumvalue TOKEN_SPECIAL defined in token.h
   function register_funcs_from_file(void) in line 175
      protection public
      21 lines of code
      1 parameters
      5 conditional paths
      uses variable name defined in smatch_type.c
      uses function get_tokens_file(const char *) defined in smatch.h
      uses enumvalue TOKEN_STREAMBEGIN defined in token.h
      uses variable token::next defined in token.h
      uses enumvalue TOKEN_STREAMEND defined in token.h
      uses enumvalue TOKEN_IDENT defined in token.h
      uses function alloc_string(const char *) defined in smatch.h
      uses function show_ident(const struct ident *) defined in token.h
      uses variable token::ident defined in token.h
      uses function get_left_funcs(const char *,struct token **) defined in check_balanced.c
      uses function get_right_funcs(const char *,struct token **) defined in check_balanced.c
   function check_balanced(int) in line 197
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses variable my_id defined in check_balanced.c
      uses function add_unmatched_state_hook(int,unmatched_func_t *) defined in smatch.h
      uses function unmatched_state(struct sm_state *) defined in check_balanced.c
      uses function add_hook(void *,enum hook_type) defined in smatch.h
      uses function match_return(struct expression *) defined in check_balanced.c
      uses enumvalue RETURN_HOOK defined in smatch.h
      uses function match_func_end(struct symbol *) defined in check_balanced.c
      uses enumvalue END_FUNC_HOOK defined in smatch.h
      uses function register_funcs_from_file(void) defined in check_balanced.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/check_bit_shift.c
module check_bit_shift.c
   variable my_id in line 26
      protection public
   variable shifters in line 30
      protection public
   function DEFINE_HASHTABLE_INSERT(insert_struct,char,int) in line 28
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function DEFINE_HASHTABLE_SEARCH(search_struct,char,int) in line 29
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function get_shifter(struct expression *) in line 32
      protection public
      21 lines of code
      1 parameters
      6 conditional paths
      uses variable name defined in smatch_type.c
      uses function strip_expr(struct expression *) defined in smatch.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_VALUE defined in expression.h
      uses macro definition NULL defined in sm_implied3.c
      uses function get_value(struct expression *,sval_t *) defined in smatch.h
      uses function pos_ident(struct position) defined in token.h
      uses variable expression::pos defined in expression.h
      uses variable shifters defined in check_bit_shift.c
      uses function sval_cmp_val(sval_t,long long) defined in smatch.h
   function match_assign(struct expression *) in line 54
      protection public
      15 lines of code
      1 parameters
      4 conditional paths
      uses variable name defined in smatch_type.c
      uses variable expression::op defined in expression.h
      uses enumvalue SPECIAL_OR_ASSIGN defined in token.h
      uses function positions_eq(struct position,struct position) defined in smatch.h
      uses variable expression::pos defined in expression.h
      uses variable expression::right defined in expression.h
      uses function get_shifter(struct expression *) defined in check_bit_shift.c
      uses macro definition sm_msg defined in smatch.h
      uses function show_special(int) defined in token.h
   function match_binop(struct expression *) in line 70
      protection public
      15 lines of code
      1 parameters
      4 conditional paths
      uses variable name defined in smatch_type.c
      uses function positions_eq(struct position,struct position) defined in smatch.h
      uses variable expression::pos defined in expression.h
      uses variable expression::right defined in expression.h
      uses variable expression::op defined in expression.h
      uses function get_shifter(struct expression *) defined in check_bit_shift.c
      uses macro definition sm_msg defined in smatch.h
      uses function show_special(int) defined in token.h
   function register_shifters(void) in line 86
      protection public
      28 lines of code
      1 parameters
      6 conditional paths
      uses variable name defined in smatch_type.c
      uses function snprintf(char *,int,char *,char *) defined in sm_overflow6.c
      uses variable option_project_str defined in smatch.c
      uses function get_tokens_file(const char *) defined in smatch.h
      uses enumvalue TOKEN_STREAMBEGIN defined in token.h
      uses variable token::next defined in token.h
      uses enumvalue TOKEN_STREAMEND defined in token.h
      uses enumvalue TOKEN_IDENT defined in token.h
      uses function alloc_string(const char *) defined in smatch.h
      uses function show_ident(const struct ident *) defined in token.h
      uses variable token::ident defined in token.h
      uses enumvalue TOKEN_NUMBER defined in token.h
      uses function malloc(int) defined in sm_buf_size2.c
      uses variable token::number defined in token.h
      uses variable shifters defined in check_bit_shift.c
   function match_binop_info(struct expression *) in line 115
      protection public
      18 lines of code
      1 parameters
      6 conditional paths
      uses variable name defined in smatch_type.c
      uses function positions_eq(struct position,struct position) defined in smatch.h
      uses variable expression::pos defined in expression.h
      uses variable expression::right defined in expression.h
      uses variable expression::op defined in expression.h
      uses enumvalue SPECIAL_LEFTSHIFT defined in token.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_VALUE defined in expression.h
      uses function pos_ident(struct position) defined in token.h
      uses function get_value(struct expression *,sval_t *) defined in smatch.h
      uses macro definition sm_msg defined in smatch.h
      uses function sval_to_str(sval_t) defined in smatch.h
   function match_call(const char *,struct expression *,void *) in line 134
      protection public
      17 lines of code
      3 parameters
      4 conditional paths
      uses variable name defined in smatch_type.c
      uses function get_argument_from_call_expr(struct expression_list *,int) defined in smatch.h
      uses variable expression::args defined in expression.h
      uses function positions_eq(struct position,struct position) defined in smatch.h
      uses variable expression::pos defined in expression.h
      uses function pos_ident(struct position) defined in token.h
      uses function get_value(struct expression *,sval_t *) defined in smatch.h
      uses macro definition sm_msg defined in smatch.h
      uses function sval_to_str(sval_t) defined in smatch.h
   function check_bit_shift(int) in line 152
      protection public
      18 lines of code
      1 parameters
      3 conditional paths
      uses variable my_id defined in check_bit_shift.c
      uses variable shifters defined in check_bit_shift.c
      uses function register_shifters(void) defined in check_bit_shift.c
      uses function add_hook(void *,enum hook_type) defined in smatch.h
      uses function match_assign(struct expression *) defined in check_bit_shift.c
      uses enumvalue ASSIGNMENT_HOOK defined in smatch.h
      uses function match_binop(struct expression *) defined in check_bit_shift.c
      uses enumvalue BINOP_HOOK defined in smatch.h
      uses variable option_info defined in smatch.c
      uses function match_binop_info(struct expression *) defined in check_bit_shift.c
      uses variable option_project defined in smatch.c
      uses enumvalue PROJ_KERNEL defined in smatch.h
      uses function add_function_hook(const char *,func_hook *,void *) defined in smatch.h
      uses function match_call(const char *,struct expression *,void *) defined in check_bit_shift.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/check_bogus_irqrestore.c
module check_bogus_irqrestore.c
   variable my_id in line 20
      protection public
   function match_irqrestore(const char *,struct expression *,void *) in line 22
      protection public
      10 lines of code
      3 parameters
      2 conditional paths
      uses function get_argument_from_call_expr(struct expression_list *,int) defined in smatch.h
      uses variable expression::args defined in expression.h
      uses function get_implied_value(struct expression *,sval_t *) defined in smatch.h
      uses macro definition sm_msg defined in smatch.h
   function check_bogus_irqrestore(int) in line 33
      protection public
      8 lines of code
      1 parameters
      2 conditional paths
      uses variable option_project defined in smatch.c
      uses enumvalue PROJ_KERNEL defined in smatch.h
      uses variable my_id defined in check_bogus_irqrestore.c
      uses function add_function_hook(const char *,func_hook *,void *) defined in smatch.h
      uses function match_irqrestore(const char *,struct expression *,void *) defined in check_bogus_irqrestore.c
      uses macro definition NULL defined in sm_implied3.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/check_bogus_loop.c
module check_bogus_loop.c
   variable my_id in line 21
      protection public
   function right_side_changes(struct expression *) in line 23
      protection public
      8 lines of code
      1 parameters
      2 conditional paths
      uses function get_value(struct expression *,sval_t *) defined in smatch.h
      uses variable expression::right defined in expression.h
   function get_iterator_set(struct statement *) in line 32
      protection public
      17 lines of code
      1 parameters
      6 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses variable statement::type defined in parse.h
      uses enumvalue STMT_EXPRESSION defined in parse.h
      uses variable statement::expression defined in parse.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_ASSIGNMENT defined in expression.h
      uses variable expression::op defined in expression.h
      uses function right_side_changes(struct expression *) defined in check_bogus_loop.c
      uses variable expression::left defined in expression.h
   function get_iterator_tested(struct expression *) in line 50
      protection public
      8 lines of code
      1 parameters
      3 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_COMPARE defined in expression.h
      uses variable expression::left defined in expression.h
   function match_loop(struct statement *) in line 59
      protection public
      31 lines of code
      1 parameters
      9 conditional paths
      uses function get_macro_name(struct position) defined in macro_table.c
      uses variable statement::pos defined in parse.h
      uses function get_iterator_set(struct statement *) defined in check_bogus_loop.c
      uses variable statement::iterator_pre_statement defined in parse.h
      uses function expr_to_var(struct expression *) defined in smatch.h
      uses function get_iterator_tested(struct expression *) defined in check_bogus_loop.c
      uses variable statement::iterator_pre_condition defined in parse.h
      uses function right_side_changes(struct expression *) defined in check_bogus_loop.c
      uses function implied_condition_false(struct expression *) defined in smatch.h
      uses macro definition sm_msg defined in smatch.h
      uses function free_string(char *) defined in smatch.h
   function check_bogus_loop(int) in line 91
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable my_id defined in check_bogus_loop.c
      uses function add_hook(void *,enum hook_type) defined in smatch.h
      uses function match_loop(struct statement *) defined in check_bogus_loop.c
      uses enumvalue PRELOOP_HOOK defined in smatch.h
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/check_buffer_too_small_for_struct.c
module check_buffer_too_small_for_struct.c
   variable my_id in line 20
      protection public
   function STATE(too_small) in line 22
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function match_assign(struct expression *) in line 24
      protection public
      32 lines of code
      1 parameters
      8 conditional paths
      uses function get_type(struct expression *) defined in smatch.h
      uses variable expression::left defined in expression.h
      uses variable symbol::type defined in struct.c
      uses enumvalue SYM_PTR defined in symbol.h
      uses function get_real_base_type(struct symbol *) defined in smatch.h
      uses enumvalue SYM_STRUCT defined in symbol.h
      uses variable expression::right defined in expression.h
      uses function type_bits(struct symbol *) defined in smatch.h
      uses function get_size_variable(struct expression *) defined in smatch.h
      uses function get_absolute_min(struct expression *,sval_t *) defined in smatch.h
      uses variable sval_t::value defined in smatch.h
      uses function type_bytes(struct symbol *) defined in smatch.h
      uses function set_state_expr(int,struct expression *,struct smatch_state *) defined in smatch.h
      uses variable my_id defined in check_buffer_too_small_for_struct.c
   function match_dereferences(struct expression *) in line 57
      protection public
      38 lines of code
      1 parameters
      7 conditional paths
      uses variable expression::right defined in expression.h
      uses variable name defined in smatch_type.c
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_PREOP defined in expression.h
      uses function strip_expr(struct expression *) defined in smatch.h
      uses variable expression::unop defined in expression.h
      uses function get_state_expr(int,struct expression *) defined in smatch.h
      uses variable my_id defined in check_buffer_too_small_for_struct.c
      uses function get_type(struct expression *) defined in smatch.h
      uses variable symbol::type defined in struct.c
      uses enumvalue SYM_PTR defined in symbol.h
      uses function get_real_base_type(struct symbol *) defined in smatch.h
      uses enumvalue SYM_STRUCT defined in symbol.h
      uses function get_assigned_expr(struct expression *) defined in check_assigned_expr.c
      uses function get_size_variable(struct expression *) defined in smatch.h
      uses function get_absolute_min(struct expression *,sval_t *) defined in smatch.h
      uses variable sval_t::value defined in smatch.h
      uses function type_bytes(struct symbol *) defined in smatch.h
      uses function expr_to_str(struct expression *) defined in smatch.h
      uses macro definition sm_msg defined in smatch.h
      uses variable symbol::ident defined in struct.c
      uses variable ident::name defined in token.h
      uses function sval_to_str(sval_t) defined in smatch.h
      uses function free_string(char *) defined in smatch.h
      uses function set_state_expr(int,struct expression *,struct smatch_state *) defined in smatch.h
      uses variable undefined defined in smatch.h
   function check_buffer_too_small_for_struct(int) in line 96
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses variable my_id defined in check_buffer_too_small_for_struct.c
      uses function add_hook(void *,enum hook_type) defined in smatch.h
      uses function match_assign(struct expression *) defined in check_buffer_too_small_for_struct.c
      uses enumvalue ASSIGNMENT_HOOK defined in smatch.h
      uses function match_dereferences(struct expression *) defined in check_buffer_too_small_for_struct.c
      uses enumvalue DEREF_HOOK defined in smatch.h
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/check_call_tree.c
module check_call_tree.c
   variable my_id in line 20
      protection public
   function match_call(struct expression *) in line 22
      protection public
      13 lines of code
      1 parameters
      2 conditional paths
      uses function expr_to_var(struct expression *) defined in smatch.h
      uses variable expression::fn defined in expression.h
      uses macro definition sm_printf defined in smatch.h
      uses function print_held_locks(void) defined in check_locking.c
      uses function free_string(char *) defined in smatch.h
   function check_call_tree(int) in line 36
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses variable option_call_tree defined in smatch.c
      uses variable my_id defined in check_call_tree.c
      uses function add_hook(void *,enum hook_type) defined in smatch.h
      uses function match_call(struct expression *) defined in check_call_tree.c
      uses enumvalue FUNCTION_CALL_HOOK defined in smatch.h
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/check_capable.c
module check_capable.c
   variable capable_id in line 23
      protection public
   variable ns_capable_id in line 24
      protection public
   function STATE(capable) in line 21
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function match_capable(const char *,struct expression *,void *) in line 26
      protection public
      12 lines of code
      3 parameters
      2 conditional paths
      uses variable buf defined in sm_fake_assignment.c
      uses function get_argument_from_call_expr(struct expression_list *,int) defined in smatch.h
      uses variable expression::args defined in expression.h
      uses function get_implied_value(struct expression *,sval_t *) defined in smatch.h
      uses function snprintf(char *,int,char *,char *) defined in sm_overflow6.c
      uses function sval_to_str(sval_t) defined in smatch.h
      uses function set_state(int,const char *,struct symbol *,struct smatch_state *) defined in smatch.h
      uses variable capable_id defined in check_capable.c
      uses macro definition NULL defined in sm_implied3.c
   function match_ns_capable(const char *,struct expression *,void *) in line 39
      protection public
      15 lines of code
      3 parameters
      3 conditional paths
      uses variable buf defined in sm_fake_assignment.c
      uses function get_function(void) defined in smatch.h
      uses function get_argument_from_call_expr(struct expression_list *,int) defined in smatch.h
      uses variable expression::args defined in expression.h
      uses function get_implied_value(struct expression *,sval_t *) defined in smatch.h
      uses function snprintf(char *,int,char *,char *) defined in sm_overflow6.c
      uses function sval_to_str(sval_t) defined in smatch.h
      uses function set_state(int,const char *,struct symbol *,struct smatch_state *) defined in smatch.h
      uses variable ns_capable_id defined in check_capable.c
      uses macro definition NULL defined in sm_implied3.c
   function save_call_info(struct expression *) in line 55
      protection public
      14 lines of code
      1 parameters
      3 conditional paths
      uses macro definition FOR_EACH_MY_SM defined in avl.h
      uses variable capable_id defined in check_capable.c
      uses function __get_cur_stree(void) defined in smatch.h
      uses variable sm_state::state defined in smatch.h
      uses function sql_insert_caller_info(struct expression *,int,int,const char *,const char *) defined in smatch.h
      uses enumvalue CAPABLE defined in smatch.h
      uses variable sm_state::name defined in smatch.h
      uses macro definition END_FOR_EACH_SM defined in avl.h
      uses variable ns_capable_id defined in check_capable.c
      uses enumvalue NS_CAPABLE defined in smatch.h
   function save_return_info(int,char *,struct expression *) in line 70
      protection public
      16 lines of code
      3 parameters
      3 conditional paths
      uses macro definition FOR_EACH_MY_SM defined in avl.h
      uses variable capable_id defined in check_capable.c
      uses function __get_cur_stree(void) defined in smatch.h
      uses variable sm_state::state defined in smatch.h
      uses function sql_insert_return_states(int,const char *,int,int,const char *,const char *) defined in smatch.h
      uses enumvalue CAPABLE defined in smatch.h
      uses variable sm_state::name defined in smatch.h
      uses macro definition END_FOR_EACH_SM defined in avl.h
      uses variable ns_capable_id defined in check_capable.c
   function set_db_capable(const char *,struct symbol *,char *,char *) in line 87
      protection public
      7 lines of code
      4 parameters
      1 conditional paths
      uses variable buf defined in sm_fake_assignment.c
      uses function snprintf(char *,int,char *,char *) defined in sm_overflow6.c
      uses function set_state(int,const char *,struct symbol *,struct smatch_state *) defined in smatch.h
      uses variable capable_id defined in check_capable.c
      uses macro definition NULL defined in sm_implied3.c
   function set_db_ns_capable(const char *,struct symbol *,char *,char *) in line 95
      protection public
      7 lines of code
      4 parameters
      1 conditional paths
      uses variable buf defined in sm_fake_assignment.c
      uses function snprintf(char *,int,char *,char *) defined in sm_overflow6.c
      uses function set_state(int,const char *,struct symbol *,struct smatch_state *) defined in smatch.h
      uses variable ns_capable_id defined in check_capable.c
      uses macro definition NULL defined in sm_implied3.c
   function check_capable(int) in line 103
      protection public
      12 lines of code
      1 parameters
      2 conditional paths
      uses variable option_project defined in smatch.c
      uses enumvalue PROJ_KERNEL defined in smatch.h
      uses variable capable_id defined in check_capable.c
      uses function add_function_hook(const char *,func_hook *,void *) defined in smatch.h
      uses function match_capable(const char *,struct expression *,void *) defined in check_capable.c
      uses function add_hook(void *,enum hook_type) defined in smatch.h
      uses function save_call_info(struct expression *) defined in check_capable.c
      uses enumvalue FUNCTION_CALL_HOOK defined in smatch.h
      uses function add_split_return_callback(void(*)(int return_id, char *return_ranges, struct expression *returned_expr)) defined in smatch.h
      uses function save_return_info(int,char *,struct expression *) defined in check_capable.c
      uses function select_caller_info_hook(void(*)(const char *name, struct symbol *sym, char *key, char *value),int) defined in smatch.h
      uses function set_db_capable(const char *,struct symbol *,char *,char *) defined in check_capable.c
      uses enumvalue CAPABLE defined in smatch.h
   function check_ns_capable(int) in line 116
      protection public
      9 lines of code
      1 parameters
      2 conditional paths
      uses variable option_project defined in smatch.c
      uses enumvalue PROJ_KERNEL defined in smatch.h
      uses variable ns_capable_id defined in check_capable.c
      uses function add_function_hook(const char *,func_hook *,void *) defined in smatch.h
      uses function match_ns_capable(const char *,struct expression *,void *) defined in check_capable.c
      uses function select_caller_info_hook(void(*)(const char *name, struct symbol *sym, char *key, char *value),int) defined in smatch.h
      uses function set_db_ns_capable(const char *,struct symbol *,char *,char *) defined in check_capable.c
      uses enumvalue NS_CAPABLE defined in smatch.h
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/check_cast_assign.c
module check_cast_assign.c
   variable my_id in line 22
      protection public
   function get_cast_type(struct expression *) in line 24
      protection public
      9 lines of code
      1 parameters
      3 conditional paths
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_PREOP defined in expression.h
      uses variable expression::op defined in expression.h
      uses macro definition NULL defined in sm_implied3.c
      uses function strip_parens(struct expression *) defined in smatch.h
      uses variable expression::unop defined in expression.h
      uses enumvalue EXPR_CAST defined in expression.h
      uses function get_pointer_type(struct expression *) defined in smatch.h
   function match_overflow(struct expression *) in line 34
      protection public
      21 lines of code
      1 parameters
      4 conditional paths
      uses variable ptr defined in sm_null_deref2.c
      uses function get_cast_type(struct expression *) defined in check_cast_assign.c
      uses variable expression::left defined in expression.h
      uses function type_bytes(struct symbol *) defined in smatch.h
      uses function strip_expr(struct expression *) defined in smatch.h
      uses variable expression::unop defined in expression.h
      uses function get_array_size_bytes_min(struct expression *) defined in smatch.h
      uses macro definition sm_msg defined in smatch.h
   function check_cast_assign(int) in line 56
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable my_id defined in check_cast_assign.c
      uses function add_hook(void *,enum hook_type) defined in smatch.h
      uses function match_overflow(struct expression *) defined in check_cast_assign.c
      uses enumvalue ASSIGNMENT_HOOK defined in smatch.h
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/check_check_deref.c
module check_check_deref.c
   variable my_id in line 38
      protection public
   function STATE(null) in line 40
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function STATE(ok) in line 41
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function is_ok(struct sm_state *,struct expression *) in line 43
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function set_state(int,const char *,struct symbol *,struct smatch_state *) defined in smatch.h
      uses variable my_id defined in check_check_deref.c
      uses variable sm_state::name defined in smatch.h
      uses variable sm_state::sym defined in smatch.h
   function check_dereference(struct expression *) in line 48
      protection public
      28 lines of code
      1 parameters
      7 conditional paths
      uses function strip_expr(struct expression *) defined in smatch.h
      uses function get_sm_state_expr(int,struct expression *) defined in smatch.h
      uses variable my_id defined in check_check_deref.c
      uses function is_ignored(int,const char *,struct symbol *) defined in smatch.h
      uses variable sm_state::name defined in smatch.h
      uses variable sm_state::sym defined in smatch.h
      uses function implied_not_equal(struct expression *,long long) defined in smatch_extra.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable sm_state::possible defined in smatch.h
      uses variable sm_state::state defined in smatch.h
      uses variable merged defined in smatch.h
      uses macro definition sm_msg defined in smatch.h
      uses variable sm_state::line defined in smatch.h
      uses function add_ignore(int,const char *,struct symbol *) defined in smatch.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function check_dereference_name_sym(char *,struct symbol *) in line 77
      protection public
      26 lines of code
      2 parameters
      7 conditional paths
      uses function get_sm_state(int,const char *,struct symbol *) defined in smatch.h
      uses variable my_id defined in check_check_deref.c
      uses variable name defined in smatch_type.c
      uses variable sym defined in smatch_type.c
      uses function is_ignored(int,const char *,struct symbol *) defined in smatch.h
      uses variable sm_state::name defined in smatch.h
      uses variable sm_state::sym defined in smatch.h
      uses function implied_not_equal_name_sym(char *,struct symbol *,long long) defined in smatch_extra.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable sm_state::possible defined in smatch.h
      uses variable sm_state::state defined in smatch.h
      uses variable merged defined in smatch.h
      uses macro definition sm_msg defined in smatch.h
      uses variable sm_state::line defined in smatch.h
      uses function add_ignore(int,const char *,struct symbol *) defined in smatch.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function match_dereferences(struct expression *) in line 104
      protection public
      6 lines of code
      1 parameters
      2 conditional paths
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_PREOP defined in expression.h
      uses function check_dereference(struct expression *) defined in check_check_deref.c
      uses variable expression::unop defined in expression.h
   function match_pointer_as_array(struct expression *) in line 111
      protection public
      6 lines of code
      1 parameters
      2 conditional paths
      uses function is_array(struct expression *) defined in smatch.h
      uses function check_dereference(struct expression *) defined in check_check_deref.c
      uses function get_array_base(struct expression *) defined in smatch.h
   function set_param_dereferenced(struct expression *,char *,char *) in line 118
      protection public
      13 lines of code
      3 parameters
      3 conditional paths
      uses variable sym defined in smatch_type.c
      uses variable name defined in smatch_type.c
      uses function get_variable_from_key(struct expression *,char *,struct symbol **) defined in smatch.h
      uses function check_dereference_name_sym(char *,struct symbol *) defined in check_check_deref.c
      uses function free_string(char *) defined in smatch.h
   function match_condition(struct expression *) in line 132
      protection public
      14 lines of code
      1 parameters
      4 conditional paths
      uses function get_macro_name(struct position) defined in macro_table.c
      uses variable expression::pos defined in expression.h
      uses function is_pointer(struct expression *) defined in smatch.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_ASSIGNMENT defined in expression.h
      uses variable expression::right defined in expression.h
      uses variable expression::left defined in expression.h
      uses function set_true_false_states_expr(int,struct expression *,struct smatch_state *,struct smatch_state *) defined in smatch.h
      uses variable my_id defined in check_check_deref.c
   function check_check_deref(int) in line 147
      protection public
      10 lines of code
      1 parameters
      1 conditional paths
      uses variable my_id defined in check_check_deref.c
      uses function add_modification_hook(int,modification_hook *) defined in smatch.h
      uses function is_ok(struct sm_state *,struct expression *) defined in check_check_deref.c
      uses function add_hook(void *,enum hook_type) defined in smatch.h
      uses function match_dereferences(struct expression *) defined in check_check_deref.c
      uses enumvalue DEREF_HOOK defined in smatch.h
      uses function match_pointer_as_array(struct expression *) defined in check_check_deref.c
      uses enumvalue OP_HOOK defined in smatch.h
      uses function select_call_implies_hook(int,void(*)(struct expression *arg, char *key, char *value)) defined in smatch.h
      uses enumvalue DEREFERENCE defined in smatch.h
      uses function set_param_dereferenced(struct expression *,char *,char *) defined in check_check_deref.c
      uses function match_condition(struct expression *) defined in check_check_deref.c
      uses enumvalue CONDITION_HOOK defined in smatch.h
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/check_container_of.c
module check_container_of.c
   variable my_id in line 26
      protection public
   function STATE(non_null) in line 28
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function is_ok(struct sm_state *,struct expression *) in line 30
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function set_state(int,const char *,struct symbol *,struct smatch_state *) defined in smatch.h
      uses variable my_id defined in check_container_of.c
      uses variable sm_state::name defined in smatch.h
      uses variable sm_state::sym defined in smatch.h
      uses variable undefined defined in smatch.h
   function match_non_null(const char *,struct expression *,void *) in line 35
      protection public
      4 lines of code
      3 parameters
      1 conditional paths
      uses function set_state_expr(int,struct expression *,struct smatch_state *) defined in smatch.h
      uses variable my_id defined in check_container_of.c
      uses variable expression::left defined in expression.h
   function match_condition(struct expression *) in line 40
      protection public
      17 lines of code
      1 parameters
      4 conditional paths
      uses variable __in_pre_condition defined in smatch.h
      uses function get_macro_name(struct position) defined in macro_table.c
      uses variable expression::pos defined in expression.h
      uses function get_state_expr(int,struct expression *) defined in smatch.h
      uses variable my_id defined in check_container_of.c
      uses variable name defined in smatch_type.c
      uses function expr_to_var(struct expression *) defined in smatch.h
      uses macro definition sm_msg defined in smatch.h
      uses function set_state_expr(int,struct expression *,struct smatch_state *) defined in smatch.h
      uses variable undefined defined in smatch.h
      uses function free_string(char *) defined in smatch.h
   function check_container_of(int) in line 58
      protection public
      12 lines of code
      1 parameters
      2 conditional paths
      uses variable option_project defined in smatch.c
      uses enumvalue PROJ_KERNEL defined in smatch.h
      uses variable my_id defined in check_container_of.c
      uses function add_macro_assign_hook(const char *,func_hook *,void *) defined in smatch.h
      uses function match_non_null(const char *,struct expression *,void *) defined in check_container_of.c
      uses macro definition NULL defined in sm_implied3.c
      uses function add_function_assign_hook(const char *,func_hook *,void *) defined in smatch.h
      uses function add_modification_hook(int,modification_hook *) defined in smatch.h
      uses function is_ok(struct sm_state *,struct expression *) defined in check_container_of.c
      uses function add_hook(void *,enum hook_type) defined in smatch.h
      uses function match_condition(struct expression *) defined in check_container_of.c
      uses enumvalue CONDITION_HOOK defined in smatch.h
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/check_debug.c
module check_debug.c
   variable local_debug in line 22
      protection public
   variable my_id in line 23
      protection public
   variable trace_variable in line 24
      protection public
   variable old_stree in line 558
      protection public
   function match_all_values(const char *,struct expression *,void *) in line 26
      protection public
      8 lines of code
      3 parameters
      1 conditional paths
      uses function get_all_states_stree(int) defined in smatch.h
      uses macro definition SMATCH_EXTRA defined in smatch.h
      uses function __print_stree(struct stree *) defined in smatch_slist.c
      uses function free_stree(struct stree **) defined in avl.c
   function match_cur_stree(const char *,struct expression *,void *) in line 35
      protection public
      4 lines of code
      3 parameters
      1 conditional paths
      uses function __print_cur_stree(void) defined in smatch.h
   function match_state(const char *,struct expression *,void *) in line 40
      protection public
      29 lines of code
      3 parameters
      6 conditional paths
      uses function get_argument_from_call_expr(struct expression_list *,int) defined in smatch.h
      uses variable expression::args defined in expression.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_STRING defined in expression.h
      uses macro definition sm_msg defined in smatch.h
      uses macro definition FOR_EACH_SM defined in avl.h
      uses function __get_cur_stree(void) defined in smatch.h
      uses function check_name(unsigned short) defined in smatch.c
      uses variable sm_state::owner defined in smatch.h
      uses variable expression::string defined in expression.h
      uses variable string::data defined in token.h
      uses variable sm_state::name defined in smatch.h
      uses variable sm_state::state defined in smatch.h
      uses variable smatch_state::name defined in smatch.h
      uses macro definition END_FOR_EACH_SM defined in avl.h
   function match_states(const char *,struct expression *,void *) in line 70
      protection public
      22 lines of code
      3 parameters
      4 conditional paths
      uses function get_argument_from_call_expr(struct expression_list *,int) defined in smatch.h
      uses variable expression::args defined in expression.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_STRING defined in expression.h
      uses macro definition sm_msg defined in smatch.h
      uses macro definition FOR_EACH_SM defined in avl.h
      uses function __get_cur_stree(void) defined in smatch.h
      uses function check_name(unsigned short) defined in smatch.c
      uses variable sm_state::owner defined in smatch.h
      uses variable expression::string defined in expression.h
      uses variable string::data defined in token.h
      uses function show_sm(struct sm_state *) defined in smatch_slist.c
      uses macro definition END_FOR_EACH_SM defined in avl.h
   function match_print_value(const char *,struct expression *,void *) in line 93
      protection public
      18 lines of code
      3 parameters
      3 conditional paths
      uses function get_argument_from_call_expr(struct expression_list *,int) defined in smatch.h
      uses variable expression::args defined in expression.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_STRING defined in expression.h
      uses macro definition sm_msg defined in smatch.h
      uses function __get_cur_stree(void) defined in smatch.h
      uses macro definition FOR_EACH_MY_SM defined in avl.h
      uses macro definition SMATCH_EXTRA defined in smatch.h
      uses variable sm_state::name defined in smatch.h
      uses variable expression::string defined in expression.h
      uses variable string::data defined in token.h
      uses variable sm_state::state defined in smatch.h
      uses variable smatch_state::name defined in smatch.h
      uses macro definition END_FOR_EACH_SM defined in avl.h
   function match_print_known(const char *,struct expression *,void *) in line 112
      protection public
      18 lines of code
      3 parameters
      2 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses variable name defined in smatch_type.c
      uses function get_argument_from_call_expr(struct expression_list *,int) defined in smatch.h
      uses variable expression::args defined in expression.h
      uses function get_value(struct expression *,sval_t *) defined in smatch.h
      uses function get_implied_rl(struct expression *,struct range_list **) defined in smatch_extra.h
      uses function expr_to_str(struct expression *) defined in smatch.h
      uses macro definition sm_msg defined in smatch.h
      uses function sval_to_str(sval_t) defined in smatch.h
      uses function show_rl(struct range_list *) defined in smatch_extra.h
      uses function free_string(char *) defined in smatch.h
   function match_print_implied(const char *,struct expression *,void *) in line 131
      protection public
      13 lines of code
      3 parameters
      1 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses variable name defined in smatch_type.c
      uses function get_argument_from_call_expr(struct expression_list *,int) defined in smatch.h
      uses variable expression::args defined in expression.h
      uses function get_implied_rl(struct expression *,struct range_list **) defined in smatch_extra.h
      uses function expr_to_str(struct expression *) defined in smatch.h
      uses macro definition sm_msg defined in smatch.h
      uses function show_rl(struct range_list *) defined in smatch_extra.h
      uses function free_string(char *) defined in smatch.h
   function match_real_absolute(const char *,struct expression *,void *) in line 145
      protection public
      13 lines of code
      3 parameters
      1 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses variable name defined in smatch_type.c
      uses function get_argument_from_call_expr(struct expression_list *,int) defined in smatch.h
      uses variable expression::args defined in expression.h
      uses function get_real_absolute_rl(struct expression *,struct range_list **) defined in smatch_extra.h
      uses function expr_to_str(struct expression *) defined in smatch.h
      uses macro definition sm_msg defined in smatch.h
      uses function show_rl(struct range_list *) defined in smatch_extra.h
      uses function free_string(char *) defined in smatch.h
   function match_print_implied_min(const char *,struct expression *,void *) in line 159
      protection public
      16 lines of code
      3 parameters
      2 conditional paths
      uses variable name defined in smatch_type.c
      uses function get_argument_from_call_expr(struct expression_list *,int) defined in smatch.h
      uses variable expression::args defined in expression.h
      uses function expr_to_str(struct expression *) defined in smatch.h
      uses function get_implied_min(struct expression *,sval_t *) defined in smatch.h
      uses macro definition sm_msg defined in smatch.h
      uses function sval_to_str(sval_t) defined in smatch.h
      uses function free_string(char *) defined in smatch.h
   function match_print_implied_max(const char *,struct expression *,void *) in line 176
      protection public
      16 lines of code
      3 parameters
      2 conditional paths
      uses variable name defined in smatch_type.c
      uses function get_argument_from_call_expr(struct expression_list *,int) defined in smatch.h
      uses variable expression::args defined in expression.h
      uses function expr_to_str(struct expression *) defined in smatch.h
      uses function get_implied_max(struct expression *,sval_t *) defined in smatch.h
      uses macro definition sm_msg defined in smatch.h
      uses function sval_to_str(sval_t) defined in smatch.h
      uses function free_string(char *) defined in smatch.h
   function match_user_rl(const char *,struct expression *,void *) in line 193
      protection public
      14 lines of code
      3 parameters
      1 conditional paths
      uses variable name defined in smatch_type.c
      uses function get_argument_from_call_expr(struct expression_list *,int) defined in smatch.h
      uses variable expression::args defined in expression.h
      uses function expr_to_str(struct expression *) defined in smatch.h
      uses function get_user_rl(struct expression *,struct range_list **) defined in check_user_data2.c
      uses macro definition sm_msg defined in smatch.h
      uses function show_rl(struct range_list *) defined in smatch_extra.h
      uses function free_string(char *) defined in smatch.h
   function match_print_hard_max(const char *,struct expression *,void *) in line 208
      protection public
      16 lines of code
      3 parameters
      2 conditional paths
      uses variable name defined in smatch_type.c
      uses function get_argument_from_call_expr(struct expression_list *,int) defined in smatch.h
      uses variable expression::args defined in expression.h
      uses function expr_to_str(struct expression *) defined in smatch.h
      uses function get_hard_max(struct expression *,sval_t *) defined in smatch.h
      uses macro definition sm_msg defined in smatch.h
      uses function sval_to_str(sval_t) defined in smatch.h
      uses function free_string(char *) defined in smatch.h
   function match_print_fuzzy_max(const char *,struct expression *,void *) in line 225
      protection public
      16 lines of code
      3 parameters
      2 conditional paths
      uses variable name defined in smatch_type.c
      uses function get_argument_from_call_expr(struct expression_list *,int) defined in smatch.h
      uses variable expression::args defined in expression.h
      uses function expr_to_str(struct expression *) defined in smatch.h
      uses function get_fuzzy_max(struct expression *,sval_t *) defined in smatch.h
      uses macro definition sm_msg defined in smatch.h
      uses function sval_to_str(sval_t) defined in smatch.h
      uses function free_string(char *) defined in smatch.h
   function match_print_absolute_min(const char *,struct expression *,void *) in line 242
      protection public
      16 lines of code
      3 parameters
      2 conditional paths
      uses variable name defined in smatch_type.c
      uses function get_argument_from_call_expr(struct expression_list *,int) defined in smatch.h
      uses variable expression::args defined in expression.h
      uses function expr_to_str(struct expression *) defined in smatch.h
      uses function get_absolute_min(struct expression *,sval_t *) defined in smatch.h
      uses macro definition sm_msg defined in smatch.h
      uses function sval_to_str(sval_t) defined in smatch.h
      uses function free_string(char *) defined in smatch.h
   function match_print_absolute_max(const char *,struct expression *,void *) in line 259
      protection public
      13 lines of code
      3 parameters
      1 conditional paths
      uses variable name defined in smatch_type.c
      uses function get_argument_from_call_expr(struct expression_list *,int) defined in smatch.h
      uses variable expression::args defined in expression.h
      uses function get_absolute_max(struct expression *,sval_t *) defined in smatch.h
      uses function expr_to_str(struct expression *) defined in smatch.h
      uses macro definition sm_msg defined in smatch.h
      uses function sval_to_str(sval_t) defined in smatch.h
      uses function free_string(char *) defined in smatch.h
   function match_sval_info(const char *,struct expression *,void *) in line 273
      protection public
      18 lines of code
      3 parameters
      3 conditional paths
      uses variable name defined in smatch_type.c
      uses function get_argument_from_call_expr(struct expression_list *,int) defined in smatch.h
      uses variable expression::args defined in expression.h
      uses function expr_to_str(struct expression *) defined in smatch.h
      uses function get_implied_value(struct expression *,sval_t *) defined in smatch.h
      uses macro definition sm_msg defined in smatch.h
      uses function sval_unsigned(sval_t) defined in smatch.h
      uses function sval_bits(sval_t) defined in smatch.h
      uses variable sval_t::value defined in smatch.h
      uses function free_string(char *) defined in smatch.h
   function match_member_name(const char *,struct expression *,void *) in line 292
      protection public
      12 lines of code
      3 parameters
      1 conditional paths
      uses variable name defined in smatch_type.c
      uses function get_argument_from_call_expr(struct expression_list *,int) defined in smatch.h
      uses variable expression::args defined in expression.h
      uses function expr_to_str(struct expression *) defined in smatch.h
      uses function get_member_name(struct expression *) defined in smatch.h
      uses macro definition sm_msg defined in smatch.h
      uses function free_string(char *) defined in smatch.h
   function print_possible(struct sm_state *) in line 305
      protection public
      10 lines of code
      1 parameters
      1 conditional paths
      uses macro definition sm_msg defined in smatch.h
      uses variable sm_state::name defined in smatch.h
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable sm_state::possible defined in smatch.h
      uses function printf(char *,...) defined in test-be.c
      uses variable sm_state::state defined in smatch.h
      uses variable smatch_state::name defined in smatch.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function match_possible(const char *,struct expression *,void *) in line 316
      protection public
      18 lines of code
      3 parameters
      3 conditional paths
      uses function get_argument_from_call_expr(struct expression_list *,int) defined in smatch.h
      uses variable expression::args defined in expression.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_STRING defined in expression.h
      uses macro definition sm_msg defined in smatch.h
      uses function __get_cur_stree(void) defined in smatch.h
      uses macro definition FOR_EACH_MY_SM defined in avl.h
      uses macro definition SMATCH_EXTRA defined in smatch.h
      uses variable sm_state::name defined in smatch.h
      uses variable expression::string defined in expression.h
      uses variable string::data defined in token.h
      uses function print_possible(struct sm_state *) defined in check_debug.c
      uses macro definition END_FOR_EACH_SM defined in avl.h
   function match_strlen(const char *,struct expression *,void *) in line 335
      protection public
      13 lines of code
      3 parameters
      1 conditional paths
      uses variable name defined in smatch_type.c
      uses function get_argument_from_call_expr(struct expression_list *,int) defined in smatch.h
      uses variable expression::args defined in expression.h
      uses function get_implied_strlen(struct expression *,struct range_list **) defined in smatch.h
      uses function expr_to_str(struct expression *) defined in smatch.h
      uses macro definition sm_msg defined in smatch.h
      uses function show_rl(struct range_list *) defined in smatch_extra.h
      uses function free_string(char *) defined in smatch.h
   function match_buf_size(const char *,struct expression *,void *) in line 349
      protection public
      14 lines of code
      3 parameters
      1 conditional paths
      uses variable name defined in smatch_type.c
      uses function get_argument_from_call_expr(struct expression_list *,int) defined in smatch.h
      uses variable expression::args defined in expression.h
      uses function get_array_size(struct expression *) defined in smatch.h
      uses function get_array_size_bytes(struct expression *) defined in smatch.h
      uses function expr_to_str(struct expression *) defined in smatch.h
      uses macro definition sm_msg defined in smatch.h
      uses function free_string(char *) defined in smatch.h
   function match_buf_size_rl(const char *,struct expression *,void *) in line 364
      protection public
      16 lines of code
      3 parameters
      1 conditional paths
      uses variable name defined in smatch_type.c
      uses function get_argument_from_call_expr(struct expression_list *,int) defined in smatch.h
      uses variable expression::args defined in expression.h
      uses function get_array_size_bytes_rl(struct expression *) defined in smatch.h
      uses function get_array_size(struct expression *) defined in smatch.h
      uses function get_array_size_bytes(struct expression *) defined in smatch.h
      uses function expr_to_str(struct expression *) defined in smatch.h
      uses macro definition sm_msg defined in smatch.h
      uses function show_rl(struct range_list *) defined in smatch_extra.h
      uses function free_string(char *) defined in smatch.h
   function match_note(const char *,struct expression *,void *) in line 381
      protection public
      11 lines of code
      3 parameters
      2 conditional paths
      uses function get_argument_from_call_expr(struct expression_list *,int) defined in smatch.h
      uses variable expression::args defined in expression.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_STRING defined in expression.h
      uses macro definition sm_msg defined in smatch.h
      uses variable expression::string defined in expression.h
      uses variable string::data defined in token.h
   function print_related(struct sm_state *) in line 393
      protection public
      14 lines of code
      1 parameters
      2 conditional paths
      uses function estate_related(struct smatch_state *) defined in smatch_estate.c
      uses variable sm_state::state defined in smatch.h
      uses macro definition sm_printf defined in smatch.h
      uses variable sm_state::name defined in smatch.h
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable relation::name defined in smatch_extra.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function match_dump_related(const char *,struct expression *,void *) in line 408
      protection public
      10 lines of code
      3 parameters
      1 conditional paths
      uses function __get_cur_stree(void) defined in smatch.h
      uses macro definition FOR_EACH_MY_SM defined in avl.h
      uses macro definition SMATCH_EXTRA defined in smatch.h
      uses function print_related(struct sm_state *) defined in check_debug.c
      uses macro definition END_FOR_EACH_SM defined in avl.h
   function match_compare(const char *,struct expression *,void *) in line 419
      protection public
      24 lines of code
      3 parameters
      2 conditional paths
      uses variable one defined in sm_equiv1.c
      uses variable two defined in sm_equiv1.c
      uses variable buf defined in sm_fake_assignment.c
      uses function get_argument_from_call_expr(struct expression_list *,int) defined in smatch.h
      uses variable expression::args defined in expression.h
      uses function get_comparison(struct expression *,struct expression *) defined in smatch.h
      uses function snprintf(char *,int,char *,char *) defined in sm_overflow6.c
      uses function show_special(int) defined in token.h
      uses function expr_to_str(struct expression *) defined in smatch.h
      uses macro definition sm_msg defined in smatch.h
      uses function free_string(char *) defined in smatch.h
   function match_debug_on(const char *,struct expression *,void *) in line 444
      protection public
      4 lines of code
      3 parameters
      1 conditional paths
      uses variable option_debug defined in smatch.h
   function match_debug_check(const char *,struct expression *,void *) in line 449
      protection public
      10 lines of code
      3 parameters
      2 conditional paths
      uses function get_argument_from_call_expr(struct expression_list *,int) defined in smatch.h
      uses variable expression::args defined in expression.h
      uses enumvalue EXPR_STRING defined in expression.h
      uses variable option_debug_check defined in smatch.c
      uses macro definition sm_msg defined in smatch.h
   function match_debug_off(const char *,struct expression *,void *) in line 460
      protection public
      5 lines of code
      3 parameters
      1 conditional paths
      uses variable option_debug_check defined in smatch.c
      uses variable option_debug defined in smatch.h
   function match_local_debug_on(const char *,struct expression *,void *) in line 466
      protection public
      4 lines of code
      3 parameters
      1 conditional paths
      uses variable local_debug defined in check_debug.c
   function match_local_debug_off(const char *,struct expression *,void *) in line 471
      protection public
      4 lines of code
      3 parameters
      1 conditional paths
      uses variable local_debug defined in check_debug.c
   function match_debug_implied_on(const char *,struct expression *,void *) in line 476
      protection public
      4 lines of code
      3 parameters
      1 conditional paths
      uses variable option_debug_implied defined in smatch.h
   function match_debug_implied_off(const char *,struct expression *,void *) in line 481
      protection public
      4 lines of code
      3 parameters
      1 conditional paths
      uses variable option_debug_implied defined in smatch.h
   function match_about(const char *,struct expression *,void *) in line 486
      protection public
      24 lines of code
      3 parameters
      3 conditional paths
      uses variable name defined in smatch_type.c
      uses macro definition sm_msg defined in smatch.h
      uses function match_print_implied(const char *,struct expression *,void *) defined in check_debug.c
      uses macro definition NULL defined in sm_implied3.c
      uses function match_buf_size(const char *,struct expression *,void *) defined in check_debug.c
      uses function match_strlen(const char *,struct expression *,void *) defined in check_debug.c
      uses function get_argument_from_call_expr(struct expression_list *,int) defined in smatch.h
      uses variable expression::args defined in expression.h
      uses function expr_to_str(struct expression *) defined in smatch.h
      uses macro definition FOR_EACH_SM defined in avl.h
      uses function __get_cur_stree(void) defined in smatch.h
      uses variable sm_state::name defined in smatch.h
      uses function check_name(unsigned short) defined in smatch.c
      uses variable sm_state::owner defined in smatch.h
      uses variable sm_state::state defined in smatch.h
      uses variable smatch_state::name defined in smatch.h
      uses macro definition END_FOR_EACH_SM defined in avl.h
   function match_intersection(const char *,struct expression *,void *) in line 511
      protection public
      15 lines of code
      3 parameters
      1 conditional paths
      uses variable one defined in sm_equiv1.c
      uses variable two defined in sm_equiv1.c
      uses function get_argument_from_call_expr(struct expression_list *,int) defined in smatch.h
      uses variable expression::args defined in expression.h
      uses function get_absolute_rl(struct expression *,struct range_list **) defined in smatch_extra.h
      uses function rl_intersection(struct range_list *,struct range_list *) defined in smatch_extra.h
      uses macro definition sm_msg defined in smatch.h
      uses function show_rl(struct range_list *) defined in smatch_extra.h
   function match_type(const char *,struct expression *,void *) in line 527
      protection public
      12 lines of code
      3 parameters
      1 conditional paths
      uses variable one defined in sm_equiv1.c
      uses variable name defined in smatch_type.c
      uses function get_argument_from_call_expr(struct expression_list *,int) defined in smatch.h
      uses variable expression::args defined in expression.h
      uses function get_type(struct expression *) defined in smatch.h
      uses function expr_to_str(struct expression *) defined in smatch.h
      uses macro definition sm_msg defined in smatch.h
      uses function type_to_str(struct symbol *) defined in smatch.h
      uses function free_string(char *) defined in smatch.h
   function match_type_rl(const char *,struct expression *,void *) in line 540
      protection public
      17 lines of code
      3 parameters
      2 conditional paths
      uses variable one defined in sm_equiv1.c
      uses variable two defined in sm_equiv1.c
      uses function get_argument_from_call_expr(struct expression_list *,int) defined in smatch.h
      uses variable expression::args defined in expression.h
      uses function get_type(struct expression *) defined in smatch.h
      uses enumvalue EXPR_STRING defined in expression.h
      uses macro definition sm_msg defined in smatch.h
      uses function call_results_to_rl(struct expression *,struct symbol *,char *,struct range_list **) defined in smatch_extra.h
      uses function show_rl(struct range_list *) defined in smatch_extra.h
   function trace_var(struct statement *) in line 559
      protection public
      23 lines of code
      1 parameters
      5 conditional paths
      uses variable trace_variable defined in check_debug.c
      uses variable __inline_fn defined in smatch.h
      uses macro definition FOR_EACH_SM defined in avl.h
      uses function __get_cur_stree(void) defined in smatch.h
      uses variable sm_state::name defined in smatch.h
      uses function get_sm_state_stree(struct stree *,int,const char *,struct symbol *) defined in smatch_slist.c
      uses variable old_stree defined in check_debug.c
      uses variable sm_state::owner defined in smatch.h
      uses variable sm_state::sym defined in smatch.h
      uses variable sm_state::state defined in smatch.h
      uses macro definition sm_msg defined in smatch.h
      uses variable statement::type defined in parse.h
      uses function check_name(unsigned short) defined in smatch.c
      uses variable smatch_state::name defined in smatch.h
      uses macro definition END_FOR_EACH_SM defined in avl.h
      uses function free_stree(struct stree **) defined in avl.c
      uses function clone_stree(struct stree *) defined in avl.c
   function free_old_stree(struct symbol *) in line 583
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function free_stree(struct stree **) defined in avl.c
      uses variable old_stree defined in check_debug.c
   function check_debug(int) in line 588
      protection public
      42 lines of code
      1 parameters
      1 conditional paths
      uses variable my_id defined in check_debug.c
      uses function add_function_hook(const char *,func_hook *,void *) defined in smatch.h
      uses function match_about(const char *,struct expression *,void *) defined in check_debug.c
      uses macro definition NULL defined in sm_implied3.c
      uses function match_all_values(const char *,struct expression *,void *) defined in check_debug.c
      uses function match_state(const char *,struct expression *,void *) defined in check_debug.c
      uses function match_states(const char *,struct expression *,void *) defined in check_debug.c
      uses function match_print_value(const char *,struct expression *,void *) defined in check_debug.c
      uses function match_print_known(const char *,struct expression *,void *) defined in check_debug.c
      uses function match_print_implied(const char *,struct expression *,void *) defined in check_debug.c
      uses function match_print_implied_min(const char *,struct expression *,void *) defined in check_debug.c
      uses function match_print_implied_max(const char *,struct expression *,void *) defined in check_debug.c
      uses function match_user_rl(const char *,struct expression *,void *) defined in check_debug.c
      uses function match_print_hard_max(const char *,struct expression *,void *) defined in check_debug.c
      uses function match_print_fuzzy_max(const char *,struct expression *,void *) defined in check_debug.c
      uses function match_print_absolute_min(const char *,struct expression *,void *) defined in check_debug.c
      uses function match_print_absolute_max(const char *,struct expression *,void *) defined in check_debug.c
      uses function match_real_absolute(const char *,struct expression *,void *) defined in check_debug.c
      uses function match_sval_info(const char *,struct expression *,void *) defined in check_debug.c
      uses function match_member_name(const char *,struct expression *,void *) defined in check_debug.c
      uses function match_possible(const char *,struct expression *,void *) defined in check_debug.c
      uses function match_cur_stree(const char *,struct expression *,void *) defined in check_debug.c
      uses function match_strlen(const char *,struct expression *,void *) defined in check_debug.c
      uses function match_buf_size(const char *,struct expression *,void *) defined in check_debug.c
      uses function match_buf_size_rl(const char *,struct expression *,void *) defined in check_debug.c
      uses function match_note(const char *,struct expression *,void *) defined in check_debug.c
      uses function match_dump_related(const char *,struct expression *,void *) defined in check_debug.c
      uses function match_compare(const char *,struct expression *,void *) defined in check_debug.c
      uses function match_debug_on(const char *,struct expression *,void *) defined in check_debug.c
      uses function match_debug_check(const char *,struct expression *,void *) defined in check_debug.c
      uses function match_debug_off(const char *,struct expression *,void *) defined in check_debug.c
      uses function match_local_debug_on(const char *,struct expression *,void *) defined in check_debug.c
      uses function match_local_debug_off(const char *,struct expression *,void *) defined in check_debug.c
      uses function match_debug_implied_on(const char *,struct expression *,void *) defined in check_debug.c
      uses function match_debug_implied_off(const char *,struct expression *,void *) defined in check_debug.c
      uses function match_intersection(const char *,struct expression *,void *) defined in check_debug.c
      uses function match_type(const char *,struct expression *,void *) defined in check_debug.c
      uses function match_type_rl(const char *,struct expression *,void *) defined in check_debug.c
      uses function add_hook(void *,enum hook_type) defined in smatch.h
      uses function free_old_stree(struct symbol *) defined in check_debug.c
      uses enumvalue END_FUNC_HOOK defined in smatch.h
      uses function trace_var(struct statement *) defined in check_debug.c
      uses enumvalue STMT_HOOK_AFTER defined in smatch.h
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/check_debug.h
module check_debug.h
   macro definition __smatch_type_rl in line 55
      protection public
   function __smatch_about(long) in line 4
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function __smatch_cur_stree(void) in line 6
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function __smatch_all_values(void) in line 7
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function __smatch_state(const char *,const char *) in line 8
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function __smatch_states(const char *) in line 9
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function __smatch_value(const char *) in line 10
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function __smatch_known(long long) in line 11
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function __smatch_implied(long long) in line 12
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function __smatch_implied_min(long long) in line 13
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function __smatch_implied_max(long long) in line 14
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function __smatch_user_rl(long long) in line 15
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function __smatch_hard_max(long long) in line 17
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function __smatch_fuzzy_max(long long) in line 18
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function __smatch_absolute_min(long long) in line 20
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function __smatch_absolute_max(long long) in line 21
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function __smatch_real_absolute(long long) in line 22
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function __smatch_sval_info(long long) in line 24
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function __smatch_member_name(long long) in line 26
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function __smatch_possible(const char *) in line 28
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function __smatch_print_value(const char *) in line 29
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function __smatch_strlen(const void *) in line 31
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function __smatch_buf_size(const void *) in line 32
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function __smatch_buf_size_rl(const void *) in line 33
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function __smatch_note(const char *) in line 35
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function __smatch_dump_related(void) in line 37
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function __smatch_compare(long long,long long) in line 39
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function __smatch_debug_on(void) in line 41
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function __smatch_debug_check(const char *) in line 42
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function __smatch_debug_off(void) in line 43
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function __smatch_local_debug_on(void) in line 45
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function __smatch_local_debug_off(void) in line 46
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function __smatch_debug_implied_on(void) in line 48
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function __smatch_debug_implied_off(void) in line 49
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function __smatch_intersection(long long,long long) in line 51
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function __smatch_type(long long) in line 52
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function __smatch_type_rl_helper(long long,const char *,...) in line 54
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/check_deref.c
module check_deref.c
   macro definition __GFP_NOFAIL in line 39
      protection public
   variable my_id in line 37
      protection public
   function STATE(null) in line 41
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function STATE(ok) in line 42
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function STATE(uninitialized) in line 43
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function alloc_my_state(const char *) in line 45
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses variable smatch_state::name defined in smatch.h
      uses variable name defined in smatch_type.c
   function unmatched_state(struct sm_state *) in line 54
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function is_ok(struct sm_state *,struct expression *) in line 59
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function set_state(int,const char *,struct symbol *,struct smatch_state *) defined in smatch.h
      uses variable my_id defined in check_deref.c
      uses variable sm_state::name defined in smatch.h
      uses variable sm_state::sym defined in smatch.h
   function check_dereference(struct expression *) in line 64
      protection public
      39 lines of code
      1 parameters
      12 conditional paths
      uses function strip_expr(struct expression *) defined in smatch.h
      uses function is_static(struct expression *) defined in smatch.h
      uses function get_sm_state_expr(int,struct expression *) defined in smatch.h
      uses variable my_id defined in check_deref.c
      uses function is_ignored(int,const char *,struct symbol *) defined in smatch.h
      uses variable sm_state::name defined in smatch.h
      uses variable sm_state::sym defined in smatch.h
      uses function implied_not_equal(struct expression *,long long) defined in smatch_extra.c
      uses function is_impossible_path(void) defined in smatch.h
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable sm_state::possible defined in smatch.h
      uses variable sm_state::state defined in smatch.h
      uses variable merged defined in smatch.h
      uses function add_ignore(int,const char *,struct symbol *) defined in smatch.h
      uses variable option_spammy defined in smatch.c
      uses macro definition sm_msg defined in smatch.h
      uses variable smatch_state::name defined in smatch.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function check_dereference_name_sym(char *,struct symbol *) in line 104
      protection public
      36 lines of code
      2 parameters
      11 conditional paths
      uses function get_sm_state(int,const char *,struct symbol *) defined in smatch.h
      uses variable my_id defined in check_deref.c
      uses variable name defined in smatch_type.c
      uses variable sym defined in smatch_type.c
      uses function is_ignored(int,const char *,struct symbol *) defined in smatch.h
      uses variable sm_state::name defined in smatch.h
      uses variable sm_state::sym defined in smatch.h
      uses function implied_not_equal_name_sym(char *,struct symbol *,long long) defined in smatch_extra.c
      uses function is_impossible_path(void) defined in smatch.h
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable sm_state::possible defined in smatch.h
      uses variable sm_state::state defined in smatch.h
      uses variable merged defined in smatch.h
      uses function add_ignore(int,const char *,struct symbol *) defined in smatch.h
      uses variable option_spammy defined in smatch.c
      uses macro definition sm_msg defined in smatch.h
      uses variable smatch_state::name defined in smatch.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function match_dereferences(struct expression *) in line 141
      protection public
      6 lines of code
      1 parameters
      2 conditional paths
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_PREOP defined in expression.h
      uses function check_dereference(struct expression *) defined in check_deref.c
      uses variable expression::unop defined in expression.h
   function match_pointer_as_array(struct expression *) in line 148
      protection public
      6 lines of code
      1 parameters
      2 conditional paths
      uses function is_array(struct expression *) defined in smatch.h
      uses function check_dereference(struct expression *) defined in check_deref.c
      uses function get_array_base(struct expression *) defined in smatch.h
   function set_param_dereferenced(struct expression *,char *,char *) in line 155
      protection public
      13 lines of code
      3 parameters
      3 conditional paths
      uses variable sym defined in smatch_type.c
      uses variable name defined in smatch_type.c
      uses function get_variable_from_key(struct expression *,char *,struct symbol **) defined in smatch.h
      uses function check_dereference_name_sym(char *,struct symbol *) defined in check_deref.c
      uses function free_string(char *) defined in smatch.h
   function match_declarations(struct symbol *) in line 169
      protection public
      15 lines of code
      1 parameters
      4 conditional paths
      uses variable name defined in smatch_type.c
      uses variable sym defined in smatch_type.c
      uses enumvalue SYM_ARRAY defined in symbol.h
      uses variable symbol::ident defined in struct.c
      uses variable ident::name defined in token.h
      uses variable symbol::initializer defined in struct.c
      uses function set_state(int,const char *,struct symbol *,struct smatch_state *) defined in smatch.h
      uses variable my_id defined in check_deref.c
      uses function scoped_state(int,const char *,struct symbol *) defined in smatch.h
   function match_assign(struct expression *) in line 185
      protection public
      18 lines of code
      1 parameters
      4 conditional paths
      uses function is_zero(struct expression *) defined in smatch.h
      uses variable expression::right defined in expression.h
      uses variable __in_fake_assign defined in smatch.h
      uses macro definition FOR_EACH_PTR_REVERSE defined in ptrlist.h
      uses variable big_statement_stack defined in smatch.h
      uses variable statement::type defined in parse.h
      uses enumvalue STMT_DECLARATION defined in parse.h
      uses macro definition END_FOR_EACH_PTR_REVERSE defined in ptrlist.h
      uses function set_state_expr(int,struct expression *,struct smatch_state *) defined in smatch.h
      uses variable my_id defined in check_deref.c
      uses variable expression::left defined in expression.h
   function match_condition(struct expression *) in line 204
      protection public
      10 lines of code
      1 parameters
      3 conditional paths
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_ASSIGNMENT defined in expression.h
      uses variable expression::right defined in expression.h
      uses variable expression::left defined in expression.h
      uses function get_state_expr(int,struct expression *) defined in smatch.h
      uses variable my_id defined in check_deref.c
      uses function set_true_false_states_expr(int,struct expression *,struct smatch_state *,struct smatch_state *) defined in smatch.h
      uses macro definition NULL defined in sm_implied3.c
   function called_with_no_fail(struct expression *,int) in line 215
      protection public
      15 lines of code
      2 parameters
      4 conditional paths
      uses variable param defined in smatch_parse_call_math.c
      uses function strip_expr(struct expression *) defined in smatch.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_CALL defined in expression.h
      uses function get_argument_from_call_expr(struct expression_list *,int) defined in smatch.h
      uses variable expression::args defined in expression.h
      uses function get_value(struct expression *,sval_t *) defined in smatch.h
      uses variable sval_t::uvalue defined in smatch.h
      uses macro definition __GFP_NOFAIL defined in check_deref.c
   function match_assign_returns_null(const char *,struct expression *,void *) in line 231
      protection public
      10 lines of code
      3 parameters
      2 conditional paths
      uses function called_with_no_fail(struct expression *,int) defined in check_deref.c
      uses variable expression::right defined in expression.h
      uses function alloc_my_state(const char *) defined in check_deref.c
      uses function set_state_expr(int,struct expression *,struct smatch_state *) defined in smatch.h
      uses variable my_id defined in check_deref.c
      uses variable expression::left defined in expression.h
   function register_allocation_funcs(void) in line 242
      protection public
      28 lines of code
      1 parameters
      7 conditional paths
      uses macro definition func defined in preprocessor1.c
      uses function get_tokens_file(const char *) defined in smatch.h
      uses enumvalue TOKEN_STREAMBEGIN defined in token.h
      uses variable token::next defined in token.h
      uses enumvalue TOKEN_STREAMEND defined in token.h
      uses enumvalue TOKEN_IDENT defined in token.h
      uses function show_ident(const struct ident *) defined in token.h
      uses variable token::ident defined in token.h
      uses enumvalue TOKEN_NUMBER defined in token.h
      uses variable token::number defined in token.h
      uses function add_function_assign_hook(const char *,func_hook *,void *) defined in smatch.h
      uses function match_assign_returns_null(const char *,struct expression *,void *) defined in check_deref.c
   function check_deref(int) in line 271
      protection public
      15 lines of code
      1 parameters
      2 conditional paths
      uses variable my_id defined in check_deref.c
      uses function add_unmatched_state_hook(int,unmatched_func_t *) defined in smatch.h
      uses function unmatched_state(struct sm_state *) defined in check_deref.c
      uses function add_modification_hook(int,modification_hook *) defined in smatch.h
      uses function is_ok(struct sm_state *,struct expression *) defined in check_deref.c
      uses function add_hook(void *,enum hook_type) defined in smatch.h
      uses function match_dereferences(struct expression *) defined in check_deref.c
      uses enumvalue DEREF_HOOK defined in smatch.h
      uses function match_pointer_as_array(struct expression *) defined in check_deref.c
      uses enumvalue OP_HOOK defined in smatch.h
      uses function select_call_implies_hook(int,void(*)(struct expression *arg, char *key, char *value)) defined in smatch.h
      uses enumvalue DEREFERENCE defined in smatch.h
      uses function set_param_dereferenced(struct expression *,char *,char *) defined in check_deref.c
      uses function match_condition(struct expression *) defined in check_deref.c
      uses enumvalue CONDITION_HOOK defined in smatch.h
      uses function match_declarations(struct symbol *) defined in check_deref.c
      uses enumvalue DECLARATION_HOOK defined in smatch.h
      uses function match_assign(struct expression *) defined in check_deref.c
      uses enumvalue ASSIGNMENT_HOOK defined in smatch.h
      uses variable option_project defined in smatch.c
      uses enumvalue PROJ_KERNEL defined in smatch.h
      uses function register_allocation_funcs(void) defined in check_deref.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/check_deref_check.c
module check_deref_check.c
   variable my_id in line 21
      protection public
   function STATE(derefed) in line 23
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function underef(struct sm_state *,struct expression *) in line 25
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function set_state(int,const char *,struct symbol *,struct smatch_state *) defined in smatch.h
      uses variable my_id defined in check_deref_check.c
      uses variable sm_state::name defined in smatch.h
      uses variable sm_state::sym defined in smatch.h
      uses variable undefined defined in smatch.h
   function match_dereference(struct expression *) in line 30
      protection public
      15 lines of code
      1 parameters
      5 conditional paths
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_PREOP defined in expression.h
      uses function strip_expr(struct expression *) defined in smatch.h
      uses variable expression::unop defined in expression.h
      uses function is_pointer(struct expression *) defined in smatch.h
      uses function implied_not_equal(struct expression *,long long) defined in smatch_extra.c
      uses function is_impossible_path(void) defined in smatch.h
      uses function set_state_expr(int,struct expression *,struct smatch_state *) defined in smatch.h
      uses variable my_id defined in check_deref_check.c
   function set_param_dereferenced(struct expression *,char *,char *) in line 46
      protection public
      16 lines of code
      3 parameters
      4 conditional paths
      uses variable sym defined in smatch_type.c
      uses variable name defined in smatch_type.c
      uses function get_variable_from_key(struct expression *,char *,struct symbol **) defined in smatch.h
      uses function implied_not_equal_name_sym(char *,struct symbol *,long long) defined in smatch_extra.c
      uses function set_state(int,const char *,struct symbol *,struct smatch_state *) defined in smatch.h
      uses variable my_id defined in check_deref_check.c
      uses function free_string(char *) defined in smatch.h
   function match_condition(struct expression *) in line 63
      protection public
      20 lines of code
      1 parameters
      5 conditional paths
      uses variable __in_pre_condition defined in smatch.h
      uses function get_macro_name(struct position) defined in macro_table.c
      uses variable expression::pos defined in expression.h
      uses function is_pointer(struct expression *) defined in smatch.h
      uses function get_sm_state_expr(int,struct expression *) defined in smatch.h
      uses variable my_id defined in check_deref_check.c
      uses variable sm_state::state defined in smatch.h
      uses macro definition sm_msg defined in smatch.h
      uses variable sm_state::name defined in smatch.h
      uses variable sm_state::line defined in smatch.h
      uses function set_state_expr(int,struct expression *,struct smatch_state *) defined in smatch.h
      uses variable undefined defined in smatch.h
   function check_deref_check(int) in line 84
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses variable my_id defined in check_deref_check.c
      uses function add_hook(void *,enum hook_type) defined in smatch.h
      uses function match_dereference(struct expression *) defined in check_deref_check.c
      uses enumvalue DEREF_HOOK defined in smatch.h
      uses function match_condition(struct expression *) defined in check_deref_check.c
      uses enumvalue CONDITION_HOOK defined in smatch.h
      uses function select_call_implies_hook(int,void(*)(struct expression *arg, char *key, char *value)) defined in smatch.h
      uses enumvalue DEREFERENCE defined in smatch.h
      uses function set_param_dereferenced(struct expression *,char *,char *) defined in check_deref_check.c
      uses function add_modification_hook(int,modification_hook *) defined in smatch.h
      uses function underef(struct sm_state *,struct expression *) defined in check_deref_check.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/check_dereferences_param.c
module check_dereferences_param.c
   variable my_id in line 28
      protection public
   function STATE(derefed) in line 30
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function STATE(ignore) in line 31
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function STATE(param) in line 32
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function set_ignore(struct sm_state *,struct expression *) in line 34
      protection public
      6 lines of code
      2 parameters
      2 conditional paths
      uses variable sm_state::state defined in smatch.h
      uses function set_state(int,const char *,struct symbol *,struct smatch_state *) defined in smatch.h
      uses variable my_id defined in check_dereferences_param.c
      uses variable sm_state::name defined in smatch.h
      uses variable sm_state::sym defined in smatch.h
   function match_function_def(struct symbol *) in line 41
      protection public
      13 lines of code
      1 parameters
      2 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable sym defined in smatch_type.c
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::base_type defined in struct.c
      uses variable symbol::arguments defined in struct.c
      uses function set_state(int,const char *,struct symbol *,struct smatch_state *) defined in smatch.h
      uses variable my_id defined in check_dereferences_param.c
      uses variable param defined in smatch_parse_call_math.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function check_deref(struct expression *) in line 55
      protection public
      21 lines of code
      1 parameters
      5 conditional paths
      uses function get_assigned_expr(struct expression *) defined in check_assigned_expr.c
      uses function strip_expr(struct expression *) defined in smatch.h
      uses function get_param_num(struct expression *) defined in smatch.h
      uses function param_was_set(struct expression *) defined in smatch.h
      uses function get_sm_state_expr(int,struct expression *) defined in smatch.h
      uses variable my_id defined in check_dereferences_param.c
      uses function slist_has_state(struct state_list *,struct smatch_state *) defined in smatch_slist.c
      uses variable sm_state::possible defined in smatch.h
      uses function set_state_expr(int,struct expression *,struct smatch_state *) defined in smatch.h
   function match_dereference(struct expression *) in line 77
      protection public
      8 lines of code
      1 parameters
      3 conditional paths
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_PREOP defined in expression.h
      uses function getting_address(void) defined in smatch.h
      uses function check_deref(struct expression *) defined in check_dereferences_param.c
      uses variable expression::unop defined in expression.h
   function set_param_dereferenced(struct expression *,char *,char *) in line 86
      protection public
      7 lines of code
      3 parameters
      2 conditional paths
      uses function check_deref(struct expression *) defined in check_dereferences_param.c
   function process_states(struct stree *) in line 94
      protection public
      18 lines of code
      1 parameters
      4 conditional paths
      uses variable name defined in smatch_type.c
      uses macro definition FOR_EACH_MY_SM defined in avl.h
      uses variable my_id defined in check_dereferences_param.c
      uses variable sm_state::state defined in smatch.h
      uses function get_param_num_from_sym(struct symbol *) defined in smatch.h
      uses variable sm_state::sym defined in smatch.h
      uses function get_param_name(struct sm_state *) defined in smatch.h
      uses function sql_insert_call_implies(int,int,const char *,const char *) defined in smatch.h
      uses enumvalue DEREFERENCE defined in smatch.h
      uses macro definition END_FOR_EACH_SM defined in avl.h
   function match_pointer_as_array(struct expression *) in line 113
      protection public
      6 lines of code
      1 parameters
      2 conditional paths
      uses function is_array(struct expression *) defined in smatch.h
      uses function check_deref(struct expression *) defined in check_dereferences_param.c
      uses function get_array_base(struct expression *) defined in smatch.h
   function check_dereferences_param(int) in line 120
      protection public
      13 lines of code
      1 parameters
      1 conditional paths
      uses variable my_id defined in check_dereferences_param.c
      uses function add_hook(void *,enum hook_type) defined in smatch.h
      uses function match_function_def(struct symbol *) defined in check_dereferences_param.c
      uses enumvalue FUNC_DEF_HOOK defined in smatch.h
      uses function match_dereference(struct expression *) defined in check_dereferences_param.c
      uses enumvalue DEREF_HOOK defined in smatch.h
      uses function match_pointer_as_array(struct expression *) defined in check_dereferences_param.c
      uses enumvalue OP_HOOK defined in smatch.h
      uses function select_call_implies_hook(int,void(*)(struct expression *arg, char *key, char *value)) defined in smatch.h
      uses enumvalue DEREFERENCE defined in smatch.h
      uses function set_param_dereferenced(struct expression *,char *,char *) defined in check_dereferences_param.c
      uses function add_modification_hook(int,modification_hook *) defined in smatch.h
      uses function set_ignore(struct sm_state *,struct expression *) defined in check_dereferences_param.c
      uses function all_return_states_hook(void(*)(struct stree *stree)) defined in smatch_returns.c
      uses function process_states(struct stree *) defined in check_dereferences_param.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/check_dev_queue_xmit.c
module check_dev_queue_xmit.c
   variable my_id in line 27
      protection public
   variable match_symbol_active in line 59
      protection public
   function STATE(do_not_use) in line 29
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ok_to_use(struct sm_state *,struct expression *) in line 31
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function set_state(int,const char *,struct symbol *,struct smatch_state *) defined in smatch.h
      uses variable my_id defined in check_dev_queue_xmit.c
      uses variable sm_state::name defined in smatch.h
      uses variable sm_state::sym defined in smatch.h
      uses variable undefined defined in smatch.h
   function valid_use(void) in line 36
      protection public
      21 lines of code
      1 parameters
      5 conditional paths
      uses macro definition FOR_EACH_PTR_REVERSE defined in ptrlist.h
      uses variable big_expression_stack defined in smatch.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_PREOP defined in expression.h
      uses variable expression::op defined in expression.h
      uses enumvalue EXPR_CALL defined in expression.h
      uses function sym_name_is(const char *,struct expression *) defined in smatch.h
      uses variable expression::fn defined in expression.h
      uses macro definition END_FOR_EACH_PTR_REVERSE defined in ptrlist.h
   function match_symbol(struct expression *) in line 60
      protection public
      14 lines of code
      1 parameters
      3 conditional paths
      uses variable name defined in smatch_type.c
      uses function get_sm_state_expr(int,struct expression *) defined in smatch.h
      uses variable my_id defined in check_dev_queue_xmit.c
      uses function slist_has_state(struct state_list *,struct smatch_state *) defined in smatch_slist.c
      uses variable sm_state::possible defined in smatch.h
      uses function valid_use(void) defined in check_dev_queue_xmit.c
      uses function expr_to_var(struct expression *) defined in smatch.h
      uses macro definition sm_msg defined in smatch.h
      uses function free_string(char *) defined in smatch.h
   function match_kfree_skb(const char *,struct expression *,void *) in line 75
      protection public
      9 lines of code
      3 parameters
      2 conditional paths
      uses function get_argument_from_call_expr(struct expression_list *,int) defined in smatch.h
      uses variable expression::args defined in expression.h
      uses function set_state_expr(int,struct expression *,struct smatch_state *) defined in smatch.h
      uses variable my_id defined in check_dev_queue_xmit.c
      uses variable undefined defined in smatch.h
   function match_xmit(const char *,struct expression *,void *) in line 85
      protection public
      13 lines of code
      3 parameters
      3 conditional paths
      uses function get_argument_from_call_expr(struct expression_list *,int) defined in smatch.h
      uses variable expression::args defined in expression.h
      uses variable param defined in smatch_parse_call_math.c
      uses function set_state_expr(int,struct expression *,struct smatch_state *) defined in smatch.h
      uses variable my_id defined in check_dev_queue_xmit.c
      uses variable match_symbol_active defined in check_dev_queue_xmit.c
      uses function add_hook(void *,enum hook_type) defined in smatch.h
      uses function match_symbol(struct expression *) defined in check_dev_queue_xmit.c
      uses enumvalue SYM_HOOK defined in smatch.h
      uses function add_function_hook(const char *,func_hook *,void *) defined in smatch.h
      uses function match_kfree_skb(const char *,struct expression *,void *) defined in check_dev_queue_xmit.c
      uses macro definition NULL defined in sm_implied3.c
   function register_funcs_from_file(void) in line 99
      protection public
      25 lines of code
      1 parameters
      6 conditional paths
      uses macro definition func defined in preprocessor1.c
      uses function get_tokens_file(const char *) defined in smatch.h
      uses enumvalue TOKEN_STREAMBEGIN defined in token.h
      uses variable token::next defined in token.h
      uses enumvalue TOKEN_STREAMEND defined in token.h
      uses enumvalue TOKEN_IDENT defined in token.h
      uses function show_ident(const struct ident *) defined in token.h
      uses variable token::ident defined in token.h
      uses enumvalue TOKEN_NUMBER defined in token.h
      uses variable token::number defined in token.h
      uses function add_function_hook(const char *,func_hook *,void *) defined in smatch.h
      uses function match_xmit(const char *,struct expression *,void *) defined in check_dev_queue_xmit.c
   function check_dev_queue_xmit(int) in line 125
      protection public
      8 lines of code
      1 parameters
      2 conditional paths
      uses variable option_project defined in smatch.c
      uses enumvalue PROJ_KERNEL defined in smatch.h
      uses variable my_id defined in check_dev_queue_xmit.c
      uses function add_modification_hook(int,modification_hook *) defined in smatch.h
      uses function ok_to_use(struct sm_state *,struct expression *) defined in check_dev_queue_xmit.c
      uses function register_funcs_from_file(void) defined in check_dev_queue_xmit.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/check_dma_mapping_error.c
module check_dma_mapping_error.c
   variable my_id in line 22
      protection public
   function STATE(positive) in line 24
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function STATE(ok) in line 25
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ok_to_use(struct sm_state *,struct expression *) in line 27
      protection public
      5 lines of code
      2 parameters
      2 conditional paths
      uses variable sm_state::state defined in smatch.h
      uses function set_state(int,const char *,struct symbol *,struct smatch_state *) defined in smatch.h
      uses variable my_id defined in check_dma_mapping_error.c
      uses variable sm_state::name defined in smatch.h
      uses variable sm_state::sym defined in smatch.h
   function match_assign(const char *,struct expression *,void *) in line 33
      protection public
      4 lines of code
      3 parameters
      1 conditional paths
      uses function set_state_expr(int,struct expression *,struct smatch_state *) defined in smatch.h
      uses variable my_id defined in check_dma_mapping_error.c
      uses variable expression::left defined in expression.h
   function match_condition(struct expression *) in line 38
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses function get_state_expr(int,struct expression *) defined in smatch.h
      uses variable my_id defined in check_dma_mapping_error.c
      uses function set_true_false_states_expr(int,struct expression *,struct smatch_state *,struct smatch_state *) defined in smatch.h
      uses macro definition NULL defined in sm_implied3.c
   function match_return(struct expression *) in line 46
      protection public
      20 lines of code
      1 parameters
      6 conditional paths
      uses macro definition min defined in sm_select_assign.c
      uses function get_sm_state_expr(int,struct expression *) defined in smatch.h
      uses variable my_id defined in check_dma_mapping_error.c
      uses function slist_has_state(struct state_list *,struct smatch_state *) defined in smatch_slist.c
      uses variable sm_state::possible defined in smatch.h
      uses variable sm_state::state defined in smatch.h
      uses function get_state_expr(int,struct expression *) defined in smatch.h
      uses macro definition SMATCH_EXTRA defined in smatch.h
      uses function get_absolute_min(struct expression *,sval_t *) defined in smatch.h
      uses macro definition sm_msg defined in smatch.h
   function check_dma_mapping_error(int) in line 67
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses variable option_project defined in smatch.c
      uses enumvalue PROJ_KERNEL defined in smatch.h
      uses variable my_id defined in check_dma_mapping_error.c
      uses function add_function_assign_hook(const char *,func_hook *,void *) defined in smatch.h
      uses function match_assign(const char *,struct expression *,void *) defined in check_dma_mapping_error.c
      uses macro definition NULL defined in sm_implied3.c
      uses function add_hook(void *,enum hook_type) defined in smatch.h
      uses function match_condition(struct expression *) defined in check_dma_mapping_error.c
      uses enumvalue CONDITION_HOOK defined in smatch.h
      uses function match_return(struct expression *) defined in check_dma_mapping_error.c
      uses enumvalue RETURN_HOOK defined in smatch.h
      uses function add_modification_hook(int,modification_hook *) defined in smatch.h
      uses function ok_to_use(struct sm_state *,struct expression *) defined in check_dma_mapping_error.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/check_dma_on_stack.c
module check_dma_on_stack.c
   variable my_id in line 20
      protection public
   function match_dma_func(const char *,struct expression *,void *) in line 22
      protection public
      29 lines of code
      3 parameters
      7 conditional paths
      uses variable sym defined in smatch_type.c
      uses variable name defined in smatch_type.c
      uses function get_argument_from_call_expr(struct expression_list *,int) defined in smatch.h
      uses variable expression::args defined in expression.h
      uses variable param defined in smatch_parse_call_math.c
      uses function strip_expr(struct expression *) defined in smatch.h
      uses enumvalue EXPR_PREOP defined in expression.h
      uses enumvalue EXPR_SYMBOL defined in expression.h
      uses function expr_to_str(struct expression *) defined in smatch.h
      uses macro definition sm_msg defined in smatch.h
      uses function free_string(char *) defined in smatch.h
      uses function get_type(struct expression *) defined in smatch.h
      uses variable symbol::type defined in struct.c
      uses enumvalue SYM_ARRAY defined in symbol.h
      uses function get_param_num(struct expression *) defined in smatch.h
      uses function expr_to_var(struct expression *) defined in smatch.h
   function register_funcs_from_file(void) in line 52
      protection public
      25 lines of code
      1 parameters
      6 conditional paths
      uses macro definition func defined in preprocessor1.c
      uses function get_tokens_file(const char *) defined in smatch.h
      uses enumvalue TOKEN_STREAMBEGIN defined in token.h
      uses variable token::next defined in token.h
      uses enumvalue TOKEN_STREAMEND defined in token.h
      uses enumvalue TOKEN_IDENT defined in token.h
      uses function show_ident(const struct ident *) defined in token.h
      uses variable token::ident defined in token.h
      uses enumvalue TOKEN_NUMBER defined in token.h
      uses variable token::number defined in token.h
      uses function add_function_hook(const char *,func_hook *,void *) defined in smatch.h
      uses function match_dma_func(const char *,struct expression *,void *) defined in check_dma_on_stack.c
   function check_dma_on_stack(int) in line 78
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses variable option_project defined in smatch.c
      uses enumvalue PROJ_KERNEL defined in smatch.h
      uses variable my_id defined in check_dma_on_stack.c
      uses function register_funcs_from_file(void) defined in check_dma_on_stack.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/check_double_checking.c
module check_double_checking.c
   macro definition _GNU_SOURCE in line 18
      protection public
   variable my_id in line 23
      protection public
   variable to_check in line 28
      protection public
   function STATE(checked) in line 25
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function STATE(modified) in line 26
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function get_cur_stmt(void) in line 30
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable big_statement_stack defined in smatch.h
   function set_modified(struct sm_state *,struct expression *) in line 35
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function set_state(int,const char *,struct symbol *,struct smatch_state *) defined in smatch.h
      uses variable my_id defined in check_double_checking.c
      uses variable sm_state::name defined in smatch.h
      uses variable sm_state::sym defined in smatch.h
   function strip_condition(struct expression *) in line 40
      protection public
      18 lines of code
      1 parameters
      5 conditional paths
      uses function strip_expr(struct expression *) defined in smatch.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_PREOP defined in expression.h
      uses variable expression::op defined in expression.h
      uses variable expression::unop defined in expression.h
      uses enumvalue EXPR_COMPARE defined in expression.h
      uses enumvalue SPECIAL_EQUAL defined in token.h
      uses enumvalue SPECIAL_NOTEQUAL defined in token.h
      uses function is_zero(struct expression *) defined in smatch.h
      uses variable expression::left defined in expression.h
      uses variable expression::right defined in expression.h
   function conditions_match(struct expression *,struct expression *) in line 59
      protection public
      15 lines of code
      2 parameters
      4 conditional paths
      uses function strip_condition(struct expression *) defined in check_double_checking.c
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_LOGICAL defined in expression.h
      uses variable expression::left defined in expression.h
      uses variable expression::right defined in expression.h
   function is_obvious_else(struct expression *) in line 79
      protection public
      23 lines of code
      1 parameters
      6 conditional paths
      uses variable statement::parent defined in parse.h
      uses function get_cur_stmt(void) defined in check_double_checking.c
      uses variable expression::parent defined in expression.h
      uses variable expression::type defined in expression.h
      uses enumvalue STMT_IF defined in parse.h
      uses function strip_condition(struct expression *) defined in check_double_checking.c
      uses function conditions_match(struct expression *,struct expression *) defined in check_double_checking.c
   function name_means_synchronize(const char *) in line 103
      protection public
      23 lines of code
      1 parameters
      10 conditional paths
      uses variable name defined in smatch_type.c
   function previous_statement_was_synchronize(void) in line 127
      protection public
      36 lines of code
      1 parameters
      8 conditional paths
      uses variable position::pos defined in lib.h
      uses variable __prev_stmt defined in smatch.h
      uses variable statement::pos defined in parse.h
      uses variable position::line defined in lib.h
      uses variable __cur_stmt defined in smatch.h
      uses macro definition FOR_EACH_PTR_REVERSE defined in ptrlist.h
      uses variable big_statement_stack defined in smatch.h
      uses function get_macro_name(struct position) defined in macro_table.c
      uses function name_means_synchronize(const char *) defined in check_double_checking.c
      uses function pos_ident(struct position) defined in token.h
      uses macro definition END_FOR_EACH_PTR_REVERSE defined in ptrlist.h
   function match_condition(struct expression *) in line 164
      protection public
      57 lines of code
      1 parameters
      12 conditional paths
      uses variable name defined in smatch_type.c
      uses function inside_loop(void) defined in smatch.h
      uses function get_value(struct expression *,sval_t *) defined in smatch.h
      uses function get_macro_name(struct position) defined in macro_table.c
      uses variable expression::pos defined in expression.h
      uses function get_stored_condition(struct expression *) defined in smatch.h
      uses variable smatch_state::data defined in smatch.h
      uses function is_pointer(struct expression *) defined in smatch.h
      uses function implied_condition_true(struct expression *) defined in smatch.h
      uses function definitely_inside_loop(void) defined in smatch.h
      uses variable sym defined in smatch_type.c
      uses variable __inline_fn defined in smatch.h
      uses function expr_to_var_sym(struct expression *,struct symbol **) defined in smatch.h
      uses function set_state_expr(int,struct expression *,struct smatch_state *) defined in smatch.h
      uses variable my_id defined in check_double_checking.c
      uses function set_state_stree(struct stree **,int,const char *,struct symbol *,struct smatch_state *) defined in smatch_slist.c
      uses variable to_check defined in check_double_checking.c
      uses function free_string(char *) defined in smatch.h
      uses function is_obvious_else(struct expression *) defined in check_double_checking.c
      uses function previous_statement_was_synchronize(void) defined in check_double_checking.c
      uses function expr_to_str(struct expression *) defined in smatch.h
      uses macro definition sm_msg defined in smatch.h
      uses variable smatch_state::name defined in smatch.h
   function get_check_line(struct sm_state *) in line 222
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable sm_state::possible defined in smatch.h
      uses variable sm_state::state defined in smatch.h
      uses variable sm_state::line defined in smatch.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses function get_lineno(void) defined in smatch.h
   function after_loop(struct statement *) in line 234
      protection public
      26 lines of code
      1 parameters
      6 conditional paths
      uses variable statement::type defined in parse.h
      uses enumvalue STMT_ITERATOR defined in parse.h
      uses function definitely_inside_loop(void) defined in smatch.h
      uses variable __inline_fn defined in smatch.h
      uses macro definition FOR_EACH_SM defined in avl.h
      uses variable to_check defined in check_double_checking.c
      uses function get_sm_state(int,const char *,struct symbol *) defined in smatch.h
      uses variable my_id defined in check_double_checking.c
      uses variable sm_state::name defined in smatch.h
      uses variable sm_state::sym defined in smatch.h
      uses function slist_has_state(struct state_list *,struct smatch_state *) defined in smatch_slist.c
      uses variable sm_state::possible defined in smatch.h
      uses macro definition sm_printf defined in smatch.h
      uses function get_filename(void) defined in smatch.h
      uses function get_check_line(struct sm_state *) defined in check_double_checking.c
      uses function get_function(void) defined in smatch.h
      uses macro definition END_FOR_EACH_SM defined in avl.h
      uses function free_stree(struct stree **) defined in avl.c
   function match_func_end(struct symbol *) in line 261
      protection public
      8 lines of code
      1 parameters
      3 conditional paths
      uses variable __inline_fn defined in smatch.h
      uses variable to_check defined in check_double_checking.c
      uses macro definition sm_msg defined in smatch.h
      uses function free_stree(struct stree **) defined in avl.c
   function check_double_checking(int) in line 270
      protection public
      12 lines of code
      1 parameters
      2 conditional paths
      uses variable my_id defined in check_double_checking.c
      uses variable option_spammy defined in smatch.c
      uses function add_hook(void *,enum hook_type) defined in smatch.h
      uses function match_condition(struct expression *) defined in check_double_checking.c
      uses enumvalue CONDITION_HOOK defined in smatch.h
      uses function add_modification_hook(int,modification_hook *) defined in smatch.h
      uses function set_modified(struct sm_state *,struct expression *) defined in check_double_checking.c
      uses function after_loop(struct statement *) defined in check_double_checking.c
      uses enumvalue STMT_HOOK_AFTER defined in smatch.h
      uses function match_func_end(struct symbol *) defined in check_double_checking.c
      uses enumvalue END_FUNC_HOOK defined in smatch.h
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/check_err_ptr.c
module check_err_ptr.c
   variable my_id in line 21
      protection public
   variable err_ptr in line 23
      protection public
   variable returns_null in line 24
      protection public
   variable check_assigned_expr_id in line 40
      protection public
   function match_err_ptr(struct expression *) in line 26
      protection public
      13 lines of code
      1 parameters
      5 conditional paths
      uses function strip_expr(struct expression *) defined in smatch.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_CALL defined in expression.h
      uses variable expression::fn defined in expression.h
      uses enumvalue EXPR_SYMBOL defined in expression.h
      uses variable expression::symbol defined in expression.h
      uses variable symbol::ident defined in struct.c
      uses variable ident::name defined in token.h
      uses variable err_ptr defined in check_err_ptr.c
      uses variable check_assigned_expr_id defined in check_err_ptr.c
   function match_return(struct expression *) in line 41
      protection public
      21 lines of code
      1 parameters
      5 conditional paths
      uses variable __inline_fn defined in smatch.h
      uses function match_err_ptr(struct expression *) defined in check_err_ptr.c
      uses function get_possible_states_expr(int,struct expression *) defined in smatch.h
      uses variable check_assigned_expr_id defined in check_err_ptr.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable sm_state::state defined in smatch.h
      uses variable undefined defined in smatch.h
      uses variable merged defined in smatch.h
      uses variable smatch_state::data defined in smatch.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses function get_implied_value(struct expression *,sval_t *) defined in smatch.h
      uses variable sval_t::value defined in smatch.h
      uses variable returns_null defined in check_err_ptr.c
   function match_end_func(struct symbol *) in line 63
      protection public
      9 lines of code
      1 parameters
      3 conditional paths
      uses variable __inline_fn defined in smatch.h
      uses variable err_ptr defined in check_err_ptr.c
      uses macro definition sm_info defined in smatch.h
      uses variable returns_null defined in check_err_ptr.c
   function check_err_ptr(int) in line 73
      protection public
      11 lines of code
      1 parameters
      3 conditional paths
      uses variable option_project defined in smatch.c
      uses enumvalue PROJ_KERNEL defined in smatch.h
      uses variable option_info defined in smatch.c
      uses variable my_id defined in check_err_ptr.c
      uses function add_hook(void *,enum hook_type) defined in smatch.h
      uses function match_return(struct expression *) defined in check_err_ptr.c
      uses enumvalue RETURN_HOOK defined in smatch.h
      uses function match_end_func(struct symbol *) defined in check_err_ptr.c
      uses enumvalue END_FUNC_HOOK defined in smatch.h
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/check_err_ptr_deref.c
module check_err_ptr_deref.c
   variable my_id in line 22
      protection public
   variable err_ptr_min in line 27
      protection public
   variable err_ptr_max in line 32
      protection public
   variable err_ptr_rl in line 37
      protection public
   function STATE(err_ptr) in line 24
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function STATE(checked) in line 25
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ok_to_use(struct sm_state *,struct expression *) in line 39
      protection public
      5 lines of code
      2 parameters
      2 conditional paths
      uses variable sm_state::state defined in smatch.h
      uses function set_state(int,const char *,struct symbol *,struct smatch_state *) defined in smatch.h
      uses variable my_id defined in check_err_ptr_deref.c
      uses variable sm_state::name defined in smatch.h
      uses variable sm_state::sym defined in smatch.h
   function check_is_err_ptr(struct expression *) in line 45
      protection public
      19 lines of code
      1 parameters
      4 conditional paths
      uses function get_sm_state_expr(int,struct expression *) defined in smatch.h
      uses variable my_id defined in check_err_ptr_deref.c
      uses function slist_has_state(struct state_list *,struct smatch_state *) defined in smatch_slist.c
      uses variable sm_state::possible defined in smatch.h
      uses function get_absolute_rl(struct expression *,struct range_list **) defined in smatch_extra.h
      uses function possibly_true_rl(struct range_list *,int,struct range_list *) defined in smatch_extra.h
      uses enumvalue SPECIAL_EQUAL defined in token.h
      uses variable err_ptr_rl defined in check_err_ptr_deref.c
      uses macro definition sm_msg defined in smatch.h
      uses variable sm_state::name defined in smatch.h
      uses function set_state(int,const char *,struct symbol *,struct smatch_state *) defined in smatch.h
      uses variable sm_state::sym defined in smatch.h
   function match_returns_err_ptr(const char *,struct expression *,void *) in line 65
      protection public
      5 lines of code
      3 parameters
      1 conditional paths
      uses function set_state_expr(int,struct expression *,struct smatch_state *) defined in smatch.h
      uses variable my_id defined in check_err_ptr_deref.c
      uses variable expression::left defined in expression.h
   function match_checked(const char *,struct expression *,struct expression *,void *) in line 72
      protection public
      11 lines of code
      4 parameters
      2 conditional paths
      uses function get_argument_from_call_expr(struct expression_list *,int) defined in smatch.h
      uses variable expression::args defined in expression.h
      uses function strip_expr(struct expression *) defined in smatch.h
      uses enumvalue EXPR_ASSIGNMENT defined in expression.h
      uses function set_state_expr(int,struct expression *,struct smatch_state *) defined in smatch.h
      uses variable my_id defined in check_err_ptr_deref.c
   function match_err(const char *,struct expression *,struct expression *,void *) in line 84
      protection public
      11 lines of code
      4 parameters
      2 conditional paths
      uses function get_argument_from_call_expr(struct expression_list *,int) defined in smatch.h
      uses variable expression::args defined in expression.h
      uses function strip_expr(struct expression *) defined in smatch.h
      uses enumvalue EXPR_ASSIGNMENT defined in expression.h
      uses function set_state_expr(int,struct expression *,struct smatch_state *) defined in smatch.h
      uses variable my_id defined in check_err_ptr_deref.c
   function match_dereferences(struct expression *) in line 96
      protection public
      6 lines of code
      1 parameters
      2 conditional paths
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_PREOP defined in expression.h
      uses function check_is_err_ptr(struct expression *) defined in check_err_ptr_deref.c
      uses variable expression::unop defined in expression.h
   function match_kfree(const char *,struct expression *,void *) in line 103
      protection public
      8 lines of code
      3 parameters
      1 conditional paths
      uses function get_argument_from_call_expr(struct expression_list *,int) defined in smatch.h
      uses variable expression::args defined in expression.h
      uses function check_is_err_ptr(struct expression *) defined in check_err_ptr_deref.c
   function match_condition(struct expression *) in line 112
      protection public
      11 lines of code
      1 parameters
      3 conditional paths
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_ASSIGNMENT defined in expression.h
      uses variable expression::right defined in expression.h
      uses variable expression::left defined in expression.h
      uses function get_state_expr(int,struct expression *) defined in smatch.h
      uses variable my_id defined in check_err_ptr_deref.c
      uses function set_true_false_states_expr(int,struct expression *,struct smatch_state *,struct smatch_state *) defined in smatch.h
      uses macro definition NULL defined in sm_implied3.c
   function register_err_ptr_funcs(void) in line 124
      protection public
      20 lines of code
      1 parameters
      5 conditional paths
      uses macro definition func defined in preprocessor1.c
      uses function get_tokens_file(const char *) defined in smatch.h
      uses enumvalue TOKEN_STREAMBEGIN defined in token.h
      uses variable token::next defined in token.h
      uses enumvalue TOKEN_STREAMEND defined in token.h
      uses enumvalue TOKEN_IDENT defined in token.h
      uses function show_ident(const struct ident *) defined in token.h
      uses variable token::ident defined in token.h
      uses function add_function_assign_hook(const char *,func_hook *,void *) defined in smatch.h
      uses function match_returns_err_ptr(const char *,struct expression *,void *) defined in check_err_ptr_deref.c
      uses macro definition NULL defined in sm_implied3.c
   function match_err_ptr_positive_const(const char *,struct expression *,void *) in line 145
      protection public
      12 lines of code
      3 parameters
      3 conditional paths
      uses function get_argument_from_call_expr(struct expression_list *,int) defined in smatch.h
      uses variable expression::args defined in expression.h
      uses function get_value(struct expression *,sval_t *) defined in smatch.h
      uses function sval_is_positive(sval_t) defined in smatch.h
      uses function sval_cmp_val(sval_t,long long) defined in smatch.h
      uses macro definition sm_msg defined in smatch.h
      uses function sval_to_str(sval_t) defined in smatch.h
   function match_err_ptr(const char *,struct expression *,void *) in line 158
      protection public
      27 lines of code
      3 parameters
      6 conditional paths
      uses macro definition min defined in sm_select_assign.c
      uses function sval_type_max(struct symbol *) defined in smatch.h
      uses function sval_type_min(struct symbol *) defined in smatch.h
      uses function get_argument_from_call_expr(struct expression_list *,int) defined in smatch.h
      uses variable expression::args defined in expression.h
      uses function get_sm_state_expr(int,struct expression *) defined in smatch.h
      uses macro definition SMATCH_EXTRA defined in smatch.h
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable sm_state::possible defined in smatch.h
      uses function estate_min(struct smatch_state *) defined in smatch_estate.c
      uses variable sm_state::state defined in smatch.h
      uses function sval_is_a_min(sval_t) defined in smatch.h
      uses function sval_cmp(sval_t,sval_t) defined in smatch.h
      uses function estate_max(struct smatch_state *) defined in smatch_estate.c
      uses function sval_is_a_max(sval_t) defined in smatch.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses function sval_is_negative(sval_t) defined in smatch.h
      uses function sval_cmp_val(sval_t,long long) defined in smatch.h
      uses macro definition sm_msg defined in smatch.h
      uses function sval_to_str(sval_t) defined in smatch.h
      uses function sval_is_positive(sval_t) defined in smatch.h
   function check_err_ptr_deref(int) in line 186
      protection public
      25 lines of code
      1 parameters
      2 conditional paths
      uses variable option_project defined in smatch.c
      uses enumvalue PROJ_KERNEL defined in smatch.h
      uses variable my_id defined in check_err_ptr_deref.c
      uses function return_implies_state(const char *,long long,long long,implication_hook *,void *) defined in smatch.h
      uses function match_checked(const char *,struct expression *,struct expression *,void *) defined in check_err_ptr_deref.c
      uses macro definition NULL defined in sm_implied3.c
      uses function match_err(const char *,struct expression *,struct expression *,void *) defined in check_err_ptr_deref.c
      uses function register_err_ptr_funcs(void) defined in check_err_ptr_deref.c
      uses function add_hook(void *,enum hook_type) defined in smatch.h
      uses function match_dereferences(struct expression *) defined in check_err_ptr_deref.c
      uses enumvalue DEREF_HOOK defined in smatch.h
      uses function add_function_hook(const char *,func_hook *,void *) defined in smatch.h
      uses function match_err_ptr_positive_const(const char *,struct expression *,void *) defined in check_err_ptr_deref.c
      uses function match_err_ptr(const char *,struct expression *,void *) defined in check_err_ptr_deref.c
      uses function match_condition(struct expression *) defined in check_err_ptr_deref.c
      uses enumvalue CONDITION_HOOK defined in smatch.h
      uses function add_modification_hook(int,modification_hook *) defined in smatch.h
      uses function ok_to_use(struct sm_state *,struct expression *) defined in check_err_ptr_deref.c
      uses function match_kfree(const char *,struct expression *,void *) defined in check_err_ptr_deref.c
      uses variable err_ptr_rl defined in check_err_ptr_deref.c
      uses function clone_rl_permanent(struct range_list *) defined in smatch_extra.h
      uses function alloc_rl(sval_t,sval_t) defined in smatch_extra.h
      uses variable err_ptr_min defined in check_err_ptr_deref.c
      uses variable err_ptr_max defined in check_err_ptr_deref.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/check_expects_err_ptr.c
module check_expects_err_ptr.c
   variable my_id in line 20
      protection public
   variable func_sym in line 21
      protection public
   function STATE(argument) in line 23
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function STATE(ok) in line 24
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function set_ok(struct sm_state *,struct expression *) in line 26
      protection public
      5 lines of code
      2 parameters
      2 conditional paths
      uses variable sm_state::state defined in smatch.h
      uses function set_state(int,const char *,struct symbol *,struct smatch_state *) defined in smatch.h
      uses variable my_id defined in check_expects_err_ptr.c
      uses variable sm_state::name defined in smatch.h
      uses variable sm_state::sym defined in smatch.h
   function match_function_def(struct symbol *) in line 32
      protection public
      12 lines of code
      1 parameters
      2 conditional paths
      uses variable func_sym defined in check_expects_err_ptr.c
      uses variable sym defined in smatch_type.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::base_type defined in struct.c
      uses variable symbol::arguments defined in struct.c
      uses function set_state(int,const char *,struct symbol *,struct smatch_state *) defined in smatch.h
      uses variable my_id defined in check_expects_err_ptr.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function get_arg_num(struct expression *) in line 45
      protection public
      25 lines of code
      1 parameters
      4 conditional paths
      uses function strip_expr(struct expression *) defined in smatch.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_SYMBOL defined in expression.h
      uses variable expression::symbol defined in expression.h
      uses function get_state_expr(int,struct expression *) defined in smatch.h
      uses variable my_id defined in check_expects_err_ptr.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable func_sym defined in check_expects_err_ptr.c
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::base_type defined in struct.c
      uses variable symbol::arguments defined in struct.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function match_is_err(const char *,struct expression *,void *) in line 71
      protection public
      11 lines of code
      3 parameters
      2 conditional paths
      uses function get_argument_from_call_expr(struct expression_list *,int) defined in smatch.h
      uses variable expression::args defined in expression.h
      uses function get_arg_num(struct expression *) defined in check_expects_err_ptr.c
      uses macro definition sm_msg defined in smatch.h
   function check_expects_err_ptr(int) in line 83
      protection public
      12 lines of code
      1 parameters
      3 conditional paths
      uses variable option_project defined in smatch.c
      uses enumvalue PROJ_KERNEL defined in smatch.h
      uses variable option_info defined in smatch.c
      uses variable my_id defined in check_expects_err_ptr.c
      uses function add_hook(void *,enum hook_type) defined in smatch.h
      uses function match_function_def(struct symbol *) defined in check_expects_err_ptr.c
      uses enumvalue FUNC_DEF_HOOK defined in smatch.h
      uses function add_modification_hook(int,modification_hook *) defined in smatch.h
      uses function set_ok(struct sm_state *,struct expression *) defined in check_expects_err_ptr.c
      uses function add_function_hook(const char *,func_hook *,void *) defined in smatch.h
      uses function match_is_err(const char *,struct expression *,void *) defined in check_expects_err_ptr.c
      uses macro definition NULL defined in sm_implied3.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/check_free.c
module check_free.c
   variable my_id in line 27
      protection public
   variable ignored_params in line 75
      protection public
   function STATE(freed) in line 29
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function STATE(ok) in line 30
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ok_to_use(struct sm_state *,struct expression *) in line 32
      protection public
      5 lines of code
      2 parameters
      2 conditional paths
      uses variable sm_state::state defined in smatch.h
      uses function set_state(int,const char *,struct symbol *,struct smatch_state *) defined in smatch.h
      uses variable my_id defined in check_free.c
      uses variable sm_state::name defined in smatch.h
      uses variable sm_state::sym defined in smatch.h
   function is_freed(struct expression *) in line 38
      protection public
      9 lines of code
      1 parameters
      2 conditional paths
      uses function get_sm_state_expr(int,struct expression *) defined in smatch.h
      uses variable my_id defined in check_free.c
      uses function slist_has_state(struct state_list *,struct smatch_state *) defined in smatch_slist.c
      uses variable sm_state::possible defined in smatch.h
   function match_symbol(struct expression *) in line 48
      protection public
      10 lines of code
      1 parameters
      2 conditional paths
      uses variable name defined in smatch_type.c
      uses function is_freed(struct expression *) defined in check_free.c
      uses function expr_to_var(struct expression *) defined in smatch.h
      uses macro definition sm_msg defined in smatch.h
      uses function free_string(char *) defined in smatch.h
   function match_dereferences(struct expression *) in line 59
      protection public
      15 lines of code
      1 parameters
      3 conditional paths
      uses variable name defined in smatch_type.c
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_PREOP defined in expression.h
      uses function strip_expr(struct expression *) defined in smatch.h
      uses variable expression::unop defined in expression.h
      uses function is_freed(struct expression *) defined in check_free.c
      uses function expr_to_var(struct expression *) defined in smatch.h
      uses macro definition sm_msg defined in smatch.h
      uses function set_state_expr(int,struct expression *,struct smatch_state *) defined in smatch.h
      uses variable my_id defined in check_free.c
      uses function free_string(char *) defined in smatch.h
   function set_ignored_params(struct expression *) in line 77
      protection public
      38 lines of code
      1 parameters
      9 conditional paths
      uses variable p defined in cond_expr2.c
      uses function memset(void *,int,int) defined in check_byte_count-ice.c
      uses variable ignored_params defined in check_free.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable expression::args defined in expression.h
      uses enumvalue EXPR_STRING defined in expression.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses macro definition ARRAY_SIZE defined in lib.h
   function is_free_func(struct expression *) in line 116
      protection public
      14 lines of code
      1 parameters
      3 conditional paths
      uses variable name defined in smatch_type.c
      uses function expr_to_str(struct expression *) defined in smatch.h
      uses function free_string(char *) defined in smatch.h
   function match_call(struct expression *) in line 131
      protection public
      27 lines of code
      1 parameters
      5 conditional paths
      uses variable name defined in smatch_type.c
      uses function set_ignored_params(struct expression *) defined in check_free.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable expression::args defined in expression.h
      uses function is_pointer(struct expression *) defined in smatch.h
      uses function is_freed(struct expression *) defined in check_free.c
      uses variable ignored_params defined in check_free.c
      uses function expr_to_var(struct expression *) defined in smatch.h
      uses function is_free_func(struct expression *) defined in check_free.c
      uses variable expression::fn defined in expression.h
      uses macro definition sm_msg defined in smatch.h
      uses function set_state_expr(int,struct expression *,struct smatch_state *) defined in smatch.h
      uses variable my_id defined in check_free.c
      uses function free_string(char *) defined in smatch.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function match_return(struct expression *) in line 159
      protection public
      14 lines of code
      1 parameters
      3 conditional paths
      uses variable name defined in smatch_type.c
      uses function is_freed(struct expression *) defined in check_free.c
      uses function expr_to_var(struct expression *) defined in smatch.h
      uses macro definition sm_msg defined in smatch.h
      uses function set_state_expr(int,struct expression *,struct smatch_state *) defined in smatch.h
      uses variable my_id defined in check_free.c
      uses function free_string(char *) defined in smatch.h
   function match_free(const char *,struct expression *,void *) in line 174
      protection public
      15 lines of code
      3 parameters
      3 conditional paths
      uses function get_argument_from_call_expr(struct expression_list *,int) defined in smatch.h
      uses variable expression::args defined in expression.h
      uses variable param defined in smatch_parse_call_math.c
      uses function is_freed(struct expression *) defined in check_free.c
      uses variable name defined in smatch_type.c
      uses function expr_to_var(struct expression *) defined in smatch.h
      uses macro definition sm_msg defined in smatch.h
      uses function free_string(char *) defined in smatch.h
      uses function set_state_expr(int,struct expression *,struct smatch_state *) defined in smatch.h
      uses variable my_id defined in check_free.c
   function set_param_freed(struct expression *,char *,char *) in line 190
      protection public
      13 lines of code
      3 parameters
      3 conditional paths
      uses variable sym defined in smatch_type.c
      uses variable name defined in smatch_type.c
      uses function get_variable_from_key(struct expression *,char *,struct symbol **) defined in smatch.h
      uses function set_state(int,const char *,struct symbol *,struct smatch_state *) defined in smatch.h
      uses variable my_id defined in check_free.c
      uses function free_string(char *) defined in smatch.h
   function parent_is_free_var_sym(const char *,struct symbol *) in line 204
      protection public
      22 lines of code
      2 parameters
      1 conditional paths
      uses variable buf defined in sm_fake_assignment.c
      uses variable name defined in smatch_type.c
      uses function get_state(int,const char *,struct symbol *) defined in smatch.h
      uses variable my_id defined in check_free.c
      uses variable sym defined in smatch_type.c
   function parent_is_free(struct expression *) in line 227
      protection public
      15 lines of code
      1 parameters
      1 conditional paths
      uses variable sym defined in smatch_type.c
      uses function strip_expr(struct expression *) defined in smatch.h
      uses function expr_to_var_sym(struct expression *,struct symbol **) defined in smatch.h
      uses function parent_is_free_var_sym(const char *,struct symbol *) defined in check_free.c
      uses function free_string(char *) defined in smatch.h
   function check_free(int) in line 243
      protection public
      20 lines of code
      1 parameters
      3 conditional paths
      uses variable my_id defined in check_free.c
      uses variable option_project defined in smatch.c
      uses enumvalue PROJ_KERNEL defined in smatch.h
      uses function add_function_hook(const char *,func_hook *,void *) defined in smatch.h
      uses function match_free(const char *,struct expression *,void *) defined in check_free.c
      uses variable option_spammy defined in smatch.c
      uses function add_hook(void *,enum hook_type) defined in smatch.h
      uses function match_symbol(struct expression *) defined in check_free.c
      uses enumvalue SYM_HOOK defined in smatch.h
      uses function match_dereferences(struct expression *) defined in check_free.c
      uses enumvalue DEREF_HOOK defined in smatch.h
      uses function match_call(struct expression *) defined in check_free.c
      uses enumvalue FUNCTION_CALL_HOOK defined in smatch.h
      uses function match_return(struct expression *) defined in check_free.c
      uses enumvalue RETURN_HOOK defined in smatch.h
      uses function add_modification_hook(int,modification_hook *) defined in smatch.h
      uses function ok_to_use(struct sm_state *,struct expression *) defined in check_free.c
      uses function select_call_implies_hook(int,void(*)(struct expression *arg, char *key, char *value)) defined in smatch.h
      uses enumvalue PARAM_FREED defined in smatch.h
      uses function set_param_freed(struct expression *,char *,char *) defined in check_free.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/check_freeing_null.c
module check_freeing_null.c
   variable my_id in line 20
      protection public
   function match_free(const char *,struct expression *,void *) in line 22
      protection public
      15 lines of code
      3 parameters
      3 conditional paths
      uses variable name defined in smatch_type.c
      uses function get_argument_from_call_expr(struct expression_list *,int) defined in smatch.h
      uses variable expression::args defined in expression.h
      uses function get_implied_value(struct expression *,sval_t *) defined in smatch.h
      uses variable sval_t::value defined in smatch.h
      uses function expr_to_var(struct expression *) defined in smatch.h
      uses macro definition sm_msg defined in smatch.h
      uses function free_string(char *) defined in smatch.h
   function check_freeing_null(int) in line 38
      protection public
      10 lines of code
      1 parameters
      3 conditional paths
      uses variable my_id defined in check_freeing_null.c
      uses variable option_spammy defined in smatch.c
      uses variable option_project defined in smatch.c
      uses enumvalue PROJ_KERNEL defined in smatch.h
      uses function add_function_hook(const char *,func_hook *,void *) defined in smatch.h
      uses function match_free(const char *,struct expression *,void *) defined in check_freeing_null.c
      uses macro definition NULL defined in sm_implied3.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/check_frees_argument.c
module check_frees_argument.c
   variable my_id in line 26
      protection public
   variable this_func in line 30
      protection public
   variable freed_args in line 31
      protection public
   variable return_count in line 66
      protection public
   function STATE(freed) in line 28
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function match_function_def(struct symbol *) in line 33
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable this_func defined in check_frees_argument.c
      uses variable sym defined in smatch_type.c
   function is_arg(char *,struct symbol *) in line 38
      protection public
      12 lines of code
      2 parameters
      2 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable this_func defined in check_frees_argument.c
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::base_type defined in struct.c
      uses variable symbol::arguments defined in struct.c
      uses variable sym defined in smatch_type.c
      uses variable name defined in smatch_type.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function match_kfree(const char *,struct expression *,void *) in line 51
      protection public
      14 lines of code
      3 parameters
      2 conditional paths
      uses variable sym defined in smatch_type.c
      uses variable name defined in smatch_type.c
      uses function get_argument_from_call_expr(struct expression_list *,int) defined in smatch.h
      uses variable expression::args defined in expression.h
      uses function strip_expr(struct expression *) defined in smatch.h
      uses function expr_to_var_sym(struct expression *,struct symbol **) defined in smatch.h
      uses function is_arg(char *,struct symbol *) defined in check_frees_argument.c
      uses function set_state(int,const char *,struct symbol *,struct smatch_state *) defined in smatch.h
      uses variable my_id defined in check_frees_argument.c
      uses function free_string(char *) defined in smatch.h
   function match_return(struct expression *) in line 67
      protection public
      25 lines of code
      1 parameters
      5 conditional paths
      uses variable __inline_fn defined in smatch.h
      uses variable return_count defined in check_frees_argument.c
      uses function __get_cur_stree(void) defined in smatch.h
      uses macro definition FOR_EACH_MY_SM defined in avl.h
      uses variable my_id defined in check_frees_argument.c
      uses variable sm_state::state defined in smatch.h
      uses function add_tracker(struct tracker_list **,int,const char *,struct symbol *) defined in smatch.h
      uses variable freed_args defined in check_frees_argument.c
      uses variable sm_state::name defined in smatch.h
      uses variable sm_state::sym defined in smatch.h
      uses macro definition END_FOR_EACH_SM defined in avl.h
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses function get_sm_state(int,const char *,struct symbol *) defined in smatch.h
      uses variable tracker::name defined in smatch.h
      uses variable tracker::sym defined in smatch.h
      uses function del_tracker(struct tracker_list **,int,const char *,struct symbol *) defined in smatch.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function print_arg(struct symbol *) in line 93
      protection public
      13 lines of code
      1 parameters
      2 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable this_func defined in check_frees_argument.c
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::base_type defined in struct.c
      uses variable symbol::arguments defined in struct.c
      uses variable sym defined in smatch_type.c
      uses macro definition sm_info defined in smatch.h
      uses function get_function(void) defined in smatch.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function match_end_func(struct symbol *) in line 107
      protection public
      16 lines of code
      1 parameters
      3 conditional paths
      uses variable __inline_fn defined in smatch.h
      uses function is_reachable(void) defined in smatch.h
      uses function match_return(struct expression *) defined in check_frees_argument.c
      uses macro definition NULL defined in sm_implied3.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable freed_args defined in check_frees_argument.c
      uses function print_arg(struct symbol *) defined in check_frees_argument.c
      uses variable tracker::sym defined in smatch.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses function free_trackers_and_list(struct tracker_list **) defined in smatch.h
      uses variable return_count defined in check_frees_argument.c
   function check_frees_argument(int) in line 124
      protection public
      14 lines of code
      1 parameters
      3 conditional paths
      uses variable option_info defined in smatch.c
      uses variable my_id defined in check_frees_argument.c
      uses function add_hook(void *,enum hook_type) defined in smatch.h
      uses function match_function_def(struct symbol *) defined in check_frees_argument.c
      uses enumvalue FUNC_DEF_HOOK defined in smatch.h
      uses variable option_project defined in smatch.c
      uses enumvalue PROJ_KERNEL defined in smatch.h
      uses function add_function_hook(const char *,func_hook *,void *) defined in smatch.h
      uses function match_kfree(const char *,struct expression *,void *) defined in check_frees_argument.c
      uses macro definition NULL defined in sm_implied3.c
      uses function match_return(struct expression *) defined in check_frees_argument.c
      uses enumvalue RETURN_HOOK defined in smatch.h
      uses function match_end_func(struct symbol *) defined in check_frees_argument.c
      uses enumvalue END_FUNC_HOOK defined in smatch.h
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/check_frees_param.c
module check_frees_param.c
   variable my_id in line 28
      protection public
   function STATE(freed) in line 30
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function STATE(ignore) in line 31
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function STATE(param) in line 32
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function set_ignore(struct sm_state *,struct expression *) in line 34
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function set_state(int,const char *,struct symbol *,struct smatch_state *) defined in smatch.h
      uses variable my_id defined in check_frees_param.c
      uses variable sm_state::name defined in smatch.h
      uses variable sm_state::sym defined in smatch.h
   function match_function_def(struct symbol *) in line 39
      protection public
      13 lines of code
      1 parameters
      2 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable sym defined in smatch_type.c
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::base_type defined in struct.c
      uses variable symbol::arguments defined in struct.c
      uses function set_state(int,const char *,struct symbol *,struct smatch_state *) defined in smatch.h
      uses variable my_id defined in check_frees_param.c
      uses variable param defined in smatch_parse_call_math.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function freed_variable(struct expression *) in line 53
      protection public
      13 lines of code
      1 parameters
      3 conditional paths
      uses function strip_expr(struct expression *) defined in smatch.h
      uses function get_param_num(struct expression *) defined in smatch.h
      uses function get_sm_state_expr(int,struct expression *) defined in smatch.h
      uses variable my_id defined in check_frees_param.c
      uses function slist_has_state(struct state_list *,struct smatch_state *) defined in smatch_slist.c
      uses variable sm_state::possible defined in smatch.h
      uses function set_state_expr(int,struct expression *,struct smatch_state *) defined in smatch.h
   function match_free(const char *,struct expression *,void *) in line 67
      protection public
      9 lines of code
      3 parameters
      2 conditional paths
      uses function get_argument_from_call_expr(struct expression_list *,int) defined in smatch.h
      uses variable expression::args defined in expression.h
      uses variable param defined in smatch_parse_call_math.c
      uses function freed_variable(struct expression *) defined in check_frees_param.c
   function set_param_freed(struct expression *,char *,char *) in line 77
      protection public
      7 lines of code
      3 parameters
      2 conditional paths
      uses function freed_variable(struct expression *) defined in check_frees_param.c
   function process_states(struct stree *) in line 85
      protection public
      19 lines of code
      1 parameters
      4 conditional paths
      uses variable param defined in smatch_parse_call_math.c
      uses macro definition FOR_EACH_MY_SM defined in avl.h
      uses variable my_id defined in check_frees_param.c
      uses variable sm_state::state defined in smatch.h
      uses function get_param_num_from_sym(struct symbol *) defined in smatch.h
      uses variable sm_state::sym defined in smatch.h
      uses function get_param_name(struct sm_state *) defined in smatch.h
      uses function sql_insert_call_implies(int,int,const char *,const char *) defined in smatch.h
      uses enumvalue PARAM_FREED defined in smatch.h
      uses macro definition END_FOR_EACH_SM defined in avl.h
   function check_frees_param(int) in line 105
      protection public
      18 lines of code
      1 parameters
      2 conditional paths
      uses variable my_id defined in check_frees_param.c
      uses function add_hook(void *,enum hook_type) defined in smatch.h
      uses function match_function_def(struct symbol *) defined in check_frees_param.c
      uses enumvalue FUNC_DEF_HOOK defined in smatch.h
      uses variable option_project defined in smatch.c
      uses enumvalue PROJ_KERNEL defined in smatch.h
      uses function add_function_hook(const char *,func_hook *,void *) defined in smatch.h
      uses function match_free(const char *,struct expression *,void *) defined in check_frees_param.c
      uses function select_call_implies_hook(int,void(*)(struct expression *arg, char *key, char *value)) defined in smatch.h
      uses enumvalue PARAM_FREED defined in smatch.h
      uses function set_param_freed(struct expression *,char *,char *) defined in check_frees_param.c
      uses function add_modification_hook(int,modification_hook *) defined in smatch.h
      uses function set_ignore(struct sm_state *,struct expression *) defined in check_frees_param.c
      uses function all_return_states_hook(void(*)(struct stree *stree)) defined in smatch_returns.c
      uses function process_states(struct stree *) defined in check_frees_param.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/check_get_user_overflow.c
module check_get_user_overflow.c
   variable my_max_id in line 27
      protection public
   variable my_min_id in line 28
      protection public
   function STATE(capped) in line 30
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function STATE(user_data) in line 31
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function match_condition(struct expression *) in line 33
      protection public
      56 lines of code
      1 parameters
      13 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses variable expression::op defined in expression.h
      uses enumvalue SPECIAL_LTE defined in token.h
      uses enumvalue SPECIAL_UNSIGNED_LT defined in token.h
      uses enumvalue SPECIAL_UNSIGNED_LTE defined in token.h
      uses enumvalue SPECIAL_GTE defined in token.h
      uses enumvalue SPECIAL_UNSIGNED_GT defined in token.h
      uses enumvalue SPECIAL_UNSIGNED_GTE defined in token.h
      uses enumvalue SPECIAL_EQUAL defined in token.h
      uses enumvalue SPECIAL_NOTEQUAL defined in token.h
      uses function get_state_expr(int,struct expression *) defined in smatch.h
      uses variable my_max_id defined in check_get_user_overflow.c
      uses variable expression::left defined in expression.h
      uses function set_true_false_states_expr(int,struct expression *,struct smatch_state *,struct smatch_state *) defined in smatch.h
      uses variable my_min_id defined in check_get_user_overflow.c
      uses variable expression::right defined in expression.h
   function match_normal_assign(struct expression *) in line 90
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses function get_state_expr(int,struct expression *) defined in smatch.h
      uses variable my_max_id defined in check_get_user_overflow.c
      uses variable expression::left defined in expression.h
      uses function set_state_expr(int,struct expression *,struct smatch_state *) defined in smatch.h
      uses variable my_min_id defined in check_get_user_overflow.c
   function match_assign(struct expression *) in line 98
      protection public
      17 lines of code
      1 parameters
      4 conditional paths
      uses variable name defined in smatch_type.c
      uses function get_macro_name(struct position) defined in macro_table.c
      uses variable expression::pos defined in expression.h
      uses function match_normal_assign(struct expression *) defined in check_get_user_overflow.c
      uses function expr_to_var(struct expression *) defined in smatch.h
      uses variable expression::right defined in expression.h
      uses function set_state_expr(int,struct expression *,struct smatch_state *) defined in smatch.h
      uses variable my_max_id defined in check_get_user_overflow.c
      uses variable expression::left defined in expression.h
      uses variable my_min_id defined in check_get_user_overflow.c
      uses function free_string(char *) defined in smatch.h
   function check_expr(struct expression *) in line 116
      protection public
      37 lines of code
      1 parameters
      8 conditional paths
      uses variable name defined in smatch_type.c
      uses function get_sm_state_expr(int,struct expression *) defined in smatch.h
      uses variable my_max_id defined in check_get_user_overflow.c
      uses function slist_has_state(struct state_list *,struct smatch_state *) defined in smatch_slist.c
      uses variable sm_state::possible defined in smatch.h
      uses function get_absolute_max(struct expression *,sval_t *) defined in smatch.h
      uses function sval_cmp_val(sval_t,long long) defined in smatch.h
      uses variable my_min_id defined in check_get_user_overflow.c
      uses function get_absolute_min(struct expression *,sval_t *) defined in smatch.h
      uses function sval_is_negative(sval_t) defined in smatch.h
      uses function expr_to_var_sym(struct expression *,struct symbol **) defined in smatch.h
      uses macro definition NULL defined in sm_implied3.c
      uses macro definition sm_msg defined in smatch.h
      uses function free_string(char *) defined in smatch.h
      uses function set_state_expr(int,struct expression *,struct smatch_state *) defined in smatch.h
   function match_binop(struct expression *) in line 154
      protection public
      16 lines of code
      1 parameters
      6 conditional paths
      uses variable expression::op defined in expression.h
      uses enumvalue SPECIAL_RIGHTSHIFT defined in token.h
      uses enumvalue SPECIAL_LEFTSHIFT defined in token.h
      uses function check_expr(struct expression *) defined in check_get_user_overflow.c
      uses variable expression::left defined in expression.h
      uses variable expression::right defined in expression.h
   function check_get_user_overflow(int) in line 171
      protection public
      9 lines of code
      1 parameters
      2 conditional paths
      uses variable option_project defined in smatch.c
      uses enumvalue PROJ_KERNEL defined in smatch.h
      uses variable my_max_id defined in check_get_user_overflow.c
      uses function add_hook(void *,enum hook_type) defined in smatch.h
      uses function match_condition(struct expression *) defined in check_get_user_overflow.c
      uses enumvalue CONDITION_HOOK defined in smatch.h
      uses function match_assign(struct expression *) defined in check_get_user_overflow.c
      uses enumvalue ASSIGNMENT_HOOK defined in smatch.h
      uses function match_binop(struct expression *) defined in check_get_user_overflow.c
      uses enumvalue BINOP_HOOK defined in smatch.h
   function check_get_user_overflow2(int) in line 181
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable my_min_id defined in check_get_user_overflow.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/check_gfp_dma.c
module check_gfp_dma.c
   macro definition __GFP_DMA in line 23
      protection public
   macro definition __GFP_HIGHMEM in line 24
      protection public
   macro definition __GFP_DMA32 in line 25
      protection public
   macro definition __GFP_MOVABLE in line 26
      protection public
   macro definition GFP_ZONEMASK in line 27
      protection public
   variable my_id in line 20
      protection public
   function match_alloc(const char *,struct expression *,void *) in line 29
      protection public
      14 lines of code
      3 parameters
      4 conditional paths
      uses function get_argument_from_call_expr(struct expression_list *,int) defined in smatch.h
      uses variable expression::args defined in expression.h
      uses function get_value(struct expression *,sval_t *) defined in smatch.h
      uses variable sval_t::uvalue defined in smatch.h
      uses macro definition GFP_ZONEMASK defined in check_gfp_dma.c
      uses macro definition sm_msg defined in smatch.h
   function check_gfp_dma(int) in line 44
      protection public
      8 lines of code
      1 parameters
      2 conditional paths
      uses variable my_id defined in check_gfp_dma.c
      uses variable option_project defined in smatch.c
      uses enumvalue PROJ_KERNEL defined in smatch.h
      uses function add_function_hook(const char *,func_hook *,void *) defined in smatch.h
      uses function match_alloc(const char *,struct expression *,void *) defined in check_gfp_dma.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/check_held_dev.c
module check_held_dev.c
   variable my_id in line 31
      protection public
   function STATE(held) in line 33
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function STATE(released) in line 34
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function match_dev_hold(const char *,struct expression *,void *) in line 36
      protection public
      7 lines of code
      3 parameters
      1 conditional paths
      uses function get_argument_from_call_expr(struct expression_list *,int) defined in smatch.h
      uses variable expression::args defined in expression.h
      uses function set_state_expr(int,struct expression *,struct smatch_state *) defined in smatch.h
      uses variable my_id defined in check_held_dev.c
   function match_dev_put(const char *,struct expression *,void *) in line 44
      protection public
      7 lines of code
      3 parameters
      1 conditional paths
      uses function get_argument_from_call_expr(struct expression_list *,int) defined in smatch.h
      uses variable expression::args defined in expression.h
      uses function set_state_expr(int,struct expression *,struct smatch_state *) defined in smatch.h
      uses variable my_id defined in check_held_dev.c
   function match_returns_held(const char *,struct expression *,struct expression *,void *) in line 52
      protection public
      6 lines of code
      4 parameters
      2 conditional paths
      uses function set_state_expr(int,struct expression *,struct smatch_state *) defined in smatch.h
      uses variable my_id defined in check_held_dev.c
      uses variable expression::left defined in expression.h
   function match_returns_null(const char *,struct expression *,struct expression *,void *) in line 59
      protection public
      6 lines of code
      4 parameters
      2 conditional paths
      uses function set_state_expr(int,struct expression *,struct smatch_state *) defined in smatch.h
      uses variable my_id defined in check_held_dev.c
      uses variable expression::left defined in expression.h
   function check_for_held(void) in line 66
      protection public
      13 lines of code
      1 parameters
      2 conditional paths
      uses function __get_cur_stree(void) defined in smatch.h
      uses macro definition FOR_EACH_MY_SM defined in avl.h
      uses variable my_id defined in check_held_dev.c
      uses function slist_has_state(struct state_list *,struct smatch_state *) defined in smatch_slist.c
      uses variable sm_state::possible defined in smatch.h
      uses macro definition sm_msg defined in smatch.h
      uses variable sm_state::name defined in smatch.h
      uses macro definition END_FOR_EACH_SM defined in avl.h
   function print_returns_held(struct expression *) in line 80
      protection public
      12 lines of code
      1 parameters
      4 conditional paths
      uses variable option_info defined in smatch.c
      uses function get_sm_state_expr(int,struct expression *) defined in smatch.h
      uses variable my_id defined in check_held_dev.c
      uses function slist_has_state(struct state_list *,struct smatch_state *) defined in smatch_slist.c
      uses variable sm_state::possible defined in smatch.h
      uses macro definition sm_info defined in smatch.h
   function match_return(struct expression *) in line 93
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses function print_returns_held(struct expression *) defined in check_held_dev.c
      uses function is_error_return(struct expression *) defined in smatch.h
      uses function check_for_held(void) defined in check_held_dev.c
   function register_returns_held_funcs(void) in line 101
      protection public
      23 lines of code
      1 parameters
      5 conditional paths
      uses macro definition func defined in preprocessor1.c
      uses function get_tokens_file(const char *) defined in smatch.h
      uses enumvalue TOKEN_STREAMBEGIN defined in token.h
      uses variable token::next defined in token.h
      uses enumvalue TOKEN_STREAMEND defined in token.h
      uses enumvalue TOKEN_IDENT defined in token.h
      uses function show_ident(const struct ident *) defined in token.h
      uses variable token::ident defined in token.h
      uses function return_implies_state(const char *,long long,long long,implication_hook *,void *) defined in smatch.h
      uses variable valid_ptr_min defined in smatch.h
      uses variable valid_ptr_max defined in smatch.h
      uses function match_returns_held(const char *,struct expression *,struct expression *,void *) defined in check_held_dev.c
      uses macro definition NULL defined in sm_implied3.c
      uses function match_returns_null(const char *,struct expression *,struct expression *,void *) defined in check_held_dev.c
   function check_held_dev(int) in line 125
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses variable option_project defined in smatch.c
      uses enumvalue PROJ_KERNEL defined in smatch.h
      uses variable my_id defined in check_held_dev.c
      uses function add_function_hook(const char *,func_hook *,void *) defined in smatch.h
      uses function match_dev_hold(const char *,struct expression *,void *) defined in check_held_dev.c
      uses macro definition NULL defined in sm_implied3.c
      uses function match_dev_put(const char *,struct expression *,void *) defined in check_held_dev.c
      uses function register_returns_held_funcs(void) defined in check_held_dev.c
      uses function add_hook(void *,enum hook_type) defined in smatch.h
      uses function match_return(struct expression *) defined in check_held_dev.c
      uses enumvalue RETURN_HOOK defined in smatch.h
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/check_impossible_mask.c
module check_impossible_mask.c
   variable my_id in line 20
      protection public
   function get_possible_bits(struct expression *) in line 64
      protection public
      14 lines of code
      1 parameters
      4 conditional paths
      uses function strip_expr(struct expression *) defined in smatch.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_BINOP defined in expression.h
      uses variable expression::op defined in expression.h
      uses function get_implied_value(struct expression *,sval_t *) defined in smatch.h
      uses variable expression::right defined in expression.h
      uses variable sval_t::uvalue defined in smatch.h
   function match_condition(struct expression *) in line 79
      protection public
      37 lines of code
      1 parameters
      8 conditional paths
      uses variable str defined in sm_overflow6.c
      uses function get_type(struct expression *) defined in smatch.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_COMPARE defined in expression.h
      uses variable expression::op defined in expression.h
      uses enumvalue SPECIAL_EQUAL defined in token.h
      uses enumvalue SPECIAL_NOTEQUAL defined in token.h
      uses function get_value(struct expression *,sval_t *) defined in smatch.h
      uses variable expression::right defined in expression.h
      uses variable sval_t::uvalue defined in smatch.h
      uses function get_possible_bits(struct expression *) defined in check_impossible_mask.c
      uses variable expression::left defined in expression.h
      uses function type_bits(struct symbol *) defined in smatch.h
      uses function expr_to_str(struct expression *) defined in smatch.h
      uses macro definition sm_msg defined in smatch.h
      uses function free_string(char *) defined in smatch.h
   function check_impossible_mask(int) in line 117
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses variable my_id defined in check_impossible_mask.c
      uses function add_hook(void *,enum hook_type) defined in smatch.h
      uses function match_condition(struct expression *) defined in check_impossible_mask.c
      uses enumvalue CONDITION_HOOK defined in smatch.h
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/check_indenting.c
module check_indenting.c
   variable my_id in line 20
      protection public
   variable ignored_macros in line 22
      protection public
   variable orig_pos in line 91
      protection public
   variable ignore_prev in line 91
      protection public
   variable ignore_prev_inline in line 91
      protection public
   function in_ignored_macro(struct statement *) in line 24
      protection public
      15 lines of code
      1 parameters
      3 conditional paths
      uses function get_macro_name(struct position) defined in macro_table.c
      uses variable statement::pos defined in parse.h
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable ignored_macros defined in check_indenting.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function missing_curly_braces(struct statement *) in line 40
      protection public
      27 lines of code
      1 parameters
      8 conditional paths
      uses variable statement::pos defined in parse.h
      uses variable position::pos defined in lib.h
      uses variable __prev_stmt defined in smatch.h
      uses variable statement::type defined in parse.h
      uses enumvalue STMT_IF defined in parse.h
      uses variable statement::if_true defined in parse.h
      uses enumvalue STMT_COMPOUND defined in parse.h
      uses enumvalue STMT_ITERATOR defined in parse.h
      uses variable statement::iterator_pre_condition defined in parse.h
      uses variable statement::iterator_statement defined in parse.h
      uses macro definition sm_msg defined in smatch.h
   function prev_lines_say_endif(struct statement *) in line 68
      protection public
      18 lines of code
      1 parameters
      3 conditional paths
      uses variable position::pos defined in lib.h
      uses variable statement::pos defined in parse.h
      uses function pos_get_token(struct position) defined in token.h
      uses enumvalue TOKEN_IDENT defined in token.h
      uses function show_ident(const struct ident *) defined in token.h
      uses variable token::ident defined in token.h
   function match_stmt(struct statement *) in line 101
      protection public
      84 lines of code
      1 parameters
      21 conditional paths
      uses variable __cur_stmt defined in smatch.h
      uses variable __prev_stmt defined in smatch.h
      uses function prev_lines_say_endif(struct statement *) defined in check_indenting.c
      uses variable statement::type defined in parse.h
      uses enumvalue STMT_EXPRESSION defined in parse.h
      uses variable statement::expression defined in parse.h
      uses enumvalue STMT_LABEL defined in parse.h
      uses enumvalue STMT_CASE defined in parse.h
      uses variable __next_stmt defined in smatch.h
      uses variable statement::pos defined in parse.h
      uses variable position::line defined in lib.h
      uses variable statement::case_statement defined in parse.h
      uses variable ignore_prev defined in check_indenting.c
      uses variable statement::label_statement defined in parse.h
      uses function missing_curly_braces(struct statement *) defined in check_indenting.c
      uses variable __inline_fn defined in smatch.h
      uses variable ignore_prev_inline defined in check_indenting.c
      uses variable position::pos defined in lib.h
      uses enumvalue STMT_GOTO defined in parse.h
      uses variable statement::goto_label defined in parse.h
      uses variable symbol::type defined in struct.c
      uses enumvalue SYM_NODE defined in symbol.h
      uses variable symbol::ident defined in struct.c
      uses variable ident::name defined in token.h
      uses function cmp_pos(struct position,struct position) defined in smatch.h
      uses function in_ignored_macro(struct statement *) defined in check_indenting.c
      uses variable orig_pos defined in check_indenting.c
      uses macro definition sm_msg defined in smatch.h
   function match_end_func(void) in line 186
      protection public
      6 lines of code
      1 parameters
      2 conditional paths
      uses variable __inline_fn defined in smatch.h
      uses variable orig_pos defined in check_indenting.c
   function register_ignored_macros(void) in line 193
      protection public
      23 lines of code
      1 parameters
      5 conditional paths
      uses variable name defined in smatch_type.c
      uses function snprintf(char *,int,char *,char *) defined in sm_overflow6.c
      uses variable option_project_str defined in smatch.c
      uses function get_tokens_file(const char *) defined in smatch.h
      uses enumvalue TOKEN_STREAMBEGIN defined in token.h
      uses variable token::next defined in token.h
      uses enumvalue TOKEN_STREAMEND defined in token.h
      uses enumvalue TOKEN_IDENT defined in token.h
      uses function alloc_string(const char *) defined in smatch.h
      uses function show_ident(const struct ident *) defined in token.h
      uses variable token::ident defined in token.h
      uses macro definition add_ptr_list defined in ptrlist.h
      uses variable ignored_macros defined in check_indenting.c
   function check_indenting(int) in line 217
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses variable my_id defined in check_indenting.c
      uses function add_hook(void *,enum hook_type) defined in smatch.h
      uses function match_stmt(struct statement *) defined in check_indenting.c
      uses enumvalue STMT_HOOK defined in smatch.h
      uses function match_end_func(void) defined in check_indenting.c
      uses enumvalue END_FUNC_HOOK defined in smatch.h
      uses function register_ignored_macros(void) defined in check_indenting.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/check_info_leak.c
module check_info_leak.c
   variable my_id in line 21
      protection public
   function STATE(alloced) in line 23
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function STATE(string) in line 24
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function my_get_variable(struct expression *,struct symbol **) in line 26
      protection public
      11 lines of code
      2 parameters
      2 conditional paths
      uses variable name defined in smatch_type.c
      uses function expr_to_var_sym(struct expression *,struct symbol **) defined in smatch.h
      uses variable sym defined in smatch_type.c
      uses function free_string(char *) defined in smatch.h
      uses macro definition NULL defined in sm_implied3.c
   function match_kmalloc(const char *,struct expression *,void *) in line 38
      protection public
      10 lines of code
      3 parameters
      2 conditional paths
      uses variable name defined in smatch_type.c
      uses variable sym defined in smatch_type.c
      uses function my_get_variable(struct expression *,struct symbol **) defined in check_info_leak.c
      uses variable expression::left defined in expression.h
      uses function set_state(int,const char *,struct symbol *,struct smatch_state *) defined in smatch.h
      uses variable my_id defined in check_info_leak.c
   function match_strcpy(const char *,struct expression *,void *) in line 49
      protection public
      14 lines of code
      3 parameters
      3 conditional paths
      uses variable dest defined in sm_user_data2.c
      uses variable name defined in smatch_type.c
      uses variable sym defined in smatch_type.c
      uses function get_argument_from_call_expr(struct expression_list *,int) defined in smatch.h
      uses variable expression::args defined in expression.h
      uses function my_get_variable(struct expression *,struct symbol **) defined in check_info_leak.c
      uses function get_state(int,const char *,struct symbol *) defined in smatch.h
      uses variable my_id defined in check_info_leak.c
      uses function set_state(int,const char *,struct symbol *,struct smatch_state *) defined in smatch.h
   function match_copy_to_user(const char *,struct expression *,void *) in line 64
      protection public
      18 lines of code
      3 parameters
      3 conditional paths
      uses variable src defined in sm_user_data3.c
      uses variable name defined in smatch_type.c
      uses variable sym defined in smatch_type.c
      uses function get_argument_from_call_expr(struct expression_list *,int) defined in smatch.h
      uses variable expression::args defined in expression.h
      uses function my_get_variable(struct expression *,struct symbol **) defined in check_info_leak.c
      uses function get_sm_state(int,const char *,struct symbol *) defined in smatch.h
      uses variable my_id defined in check_info_leak.c
      uses function slist_has_state(struct state_list *,struct smatch_state *) defined in smatch_slist.c
      uses variable sm_state::possible defined in smatch.h
      uses function expr_to_var(struct expression *) defined in smatch.h
      uses macro definition sm_msg defined in smatch.h
      uses function free_string(char *) defined in smatch.h
   function check_info_leak(int) in line 83
      protection public
      12 lines of code
      1 parameters
      2 conditional paths
      uses variable option_project defined in smatch.c
      uses enumvalue PROJ_KERNEL defined in smatch.h
      uses variable my_id defined in check_info_leak.c
      uses function add_function_assign_hook(const char *,func_hook *,void *) defined in smatch.h
      uses function match_kmalloc(const char *,struct expression *,void *) defined in check_info_leak.c
      uses macro definition NULL defined in sm_implied3.c
      uses function add_function_hook(const char *,func_hook *,void *) defined in smatch.h
      uses function match_strcpy(const char *,struct expression *,void *) defined in check_info_leak.c
      uses function match_copy_to_user(const char *,struct expression *,void *) defined in check_info_leak.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/check_input_free_device.c
module check_input_free_device.c
   variable my_id in line 30
      protection public
   function STATE(no_free) in line 27
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function STATE(ok) in line 28
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function match_assign(struct expression *) in line 32
      protection public
      6 lines of code
      1 parameters
      2 conditional paths
      uses function get_state_expr(int,struct expression *) defined in smatch.h
      uses variable my_id defined in check_input_free_device.c
      uses variable expression::left defined in expression.h
      uses function set_state_expr(int,struct expression *,struct smatch_state *) defined in smatch.h
   function match_input_unregister(const char *,struct expression *,void *) in line 39
      protection public
      7 lines of code
      3 parameters
      1 conditional paths
      uses function get_argument_from_call_expr(struct expression_list *,int) defined in smatch.h
      uses variable expression::args defined in expression.h
      uses function set_state_expr(int,struct expression *,struct smatch_state *) defined in smatch.h
      uses variable my_id defined in check_input_free_device.c
   function match_input_free(const char *,struct expression *,void *) in line 47
      protection public
      13 lines of code
      3 parameters
      3 conditional paths
      uses function get_argument_from_call_expr(struct expression_list *,int) defined in smatch.h
      uses variable expression::args defined in expression.h
      uses function get_sm_state_expr(int,struct expression *) defined in smatch.h
      uses variable my_id defined in check_input_free_device.c
      uses function slist_has_state(struct state_list *,struct smatch_state *) defined in smatch_slist.c
      uses variable sm_state::possible defined in smatch.h
      uses macro definition sm_msg defined in smatch.h
   function check_input_free_device(int) in line 61
      protection public
      9 lines of code
      1 parameters
      2 conditional paths
      uses variable my_id defined in check_input_free_device.c
      uses variable option_project defined in smatch.c
      uses enumvalue PROJ_KERNEL defined in smatch.h
      uses function add_hook(void *,enum hook_type) defined in smatch.h
      uses function match_assign(struct expression *) defined in check_input_free_device.c
      uses enumvalue ASSIGNMENT_HOOK defined in smatch.h
      uses function add_function_hook(const char *,func_hook *,void *) defined in smatch.h
      uses function match_input_unregister(const char *,struct expression *,void *) defined in check_input_free_device.c
      uses macro definition NULL defined in sm_implied3.c
      uses function match_input_free(const char *,struct expression *,void *) defined in check_input_free_device.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/check_kernel.c
module check_kernel.c
   function implied_err_cast_return(struct expression *,void *,struct range_list **) in line 26
      protection public
      9 lines of code
      3 parameters
      2 conditional paths
      uses function get_argument_from_call_expr(struct expression_list *,int) defined in smatch.h
      uses variable expression::args defined in expression.h
      uses function get_implied_rl(struct expression *,struct range_list **) defined in smatch_extra.h
      uses function alloc_rl(sval_t,sval_t) defined in smatch_extra.h
      uses function ll_to_sval(long long) defined in smatch.h
   function match_param_valid_ptr(const char *,struct expression *,struct expression *,void *) in line 36
      protection public
      13 lines of code
      4 parameters
      1 conditional paths
      uses variable param defined in smatch_parse_call_math.c
      uses function get_argument_from_call_expr(struct expression_list *,int) defined in smatch.h
      uses variable expression::args defined in expression.h
      uses function get_state_expr(int,struct expression *) defined in smatch.h
      uses macro definition SMATCH_EXTRA defined in smatch.h
      uses function estate_filter_range(struct smatch_state *,sval_t,sval_t) defined in smatch_estate.c
      uses function ll_to_sval(long long) defined in smatch.h
      uses function set_extra_expr_nomod(struct expression *,struct smatch_state *) defined in smatch_extra.c
   function match_param_err_or_null(const char *,struct expression *,struct expression *,void *) in line 50
      protection public
      17 lines of code
      4 parameters
      1 conditional paths
      uses variable param defined in smatch_parse_call_math.c
      uses function get_argument_from_call_expr(struct expression_list *,int) defined in smatch.h
      uses variable expression::args defined in expression.h
      uses function get_state_expr(int,struct expression *) defined in smatch.h
      uses macro definition SMATCH_EXTRA defined in smatch.h
      uses function alloc_rl(sval_t,sval_t) defined in smatch_extra.h
      uses function ll_to_sval(long long) defined in smatch.h
      uses function rl_intersection(struct range_list *,struct range_list *) defined in smatch_extra.h
      uses function estate_rl(struct smatch_state *) defined in smatch_estate.c
      uses function cast_rl(struct symbol *,struct range_list *) defined in smatch_extra.h
      uses function estate_type(struct smatch_state *) defined in smatch_estate.c
      uses function alloc_estate_rl(struct range_list *) defined in smatch_estate.c
      uses function set_extra_expr_nomod(struct expression *,struct smatch_state *) defined in smatch_extra.c
   function match_not_err(const char *,struct expression *,struct expression *,void *) in line 68
      protection public
      12 lines of code
      4 parameters
      1 conditional paths
      uses function get_argument_from_call_expr(struct expression_list *,int) defined in smatch.h
      uses variable expression::args defined in expression.h
      uses function get_state_expr(int,struct expression *) defined in smatch.h
      uses macro definition SMATCH_EXTRA defined in smatch.h
      uses function estate_filter_range(struct smatch_state *,sval_t,sval_t) defined in smatch_estate.c
      uses function sval_type_min(struct symbol *) defined in smatch.h
      uses function ll_to_sval(long long) defined in smatch.h
      uses function set_extra_expr_nomod(struct expression *,struct smatch_state *) defined in smatch_extra.c
   function match_err(const char *,struct expression *,struct expression *,void *) in line 81
      protection public
      13 lines of code
      4 parameters
      1 conditional paths
      uses function get_argument_from_call_expr(struct expression_list *,int) defined in smatch.h
      uses variable expression::args defined in expression.h
      uses function get_state_expr(int,struct expression *) defined in smatch.h
      uses macro definition SMATCH_EXTRA defined in smatch.h
      uses function estate_filter_range(struct smatch_state *,sval_t,sval_t) defined in smatch_estate.c
      uses function sval_type_min(struct symbol *) defined in smatch.h
      uses function ll_to_sval(long long) defined in smatch.h
      uses function sval_type_max(struct symbol *) defined in smatch.h
      uses function set_extra_expr_nomod(struct expression *,struct smatch_state *) defined in smatch_extra.c
   function match_container_of_macro(const char *,struct expression *,void *) in line 95
      protection public
      4 lines of code
      3 parameters
      1 conditional paths
      uses function set_extra_expr_mod(struct expression *,struct smatch_state *) defined in smatch_extra.c
      uses variable expression::left defined in expression.h
      uses function alloc_estate_range(sval_t,sval_t) defined in smatch_estate.c
      uses variable valid_ptr_min_sval defined in smatch.h
      uses variable valid_ptr_max_sval defined in smatch.h
   function match_container_of(struct expression *) in line 100
      protection public
      34 lines of code
      1 parameters
      6 conditional paths
      uses variable expression::right defined in expression.h
      uses function get_macro_name(struct position) defined in macro_table.c
      uses variable expression::pos defined in expression.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_CAST defined in expression.h
      uses function strip_expr(struct expression *) defined in smatch.h
      uses enumvalue EXPR_BINOP defined in expression.h
      uses variable expression::op defined in expression.h
      uses variable expression::left defined in expression.h
      uses enumvalue EXPR_SYMBOL defined in expression.h
      uses variable expression::symbol defined in expression.h
      uses variable symbol::ident defined in struct.c
      uses variable ident::name defined in token.h
      uses function set_extra_expr_mod(struct expression *,struct smatch_state *) defined in smatch_extra.c
      uses function alloc_estate_range(sval_t,sval_t) defined in smatch_estate.c
      uses variable valid_ptr_min_sval defined in smatch.h
      uses variable valid_ptr_max_sval defined in smatch.h
   function match_next_bit(struct expression *,void *,struct range_list **) in line 135
      protection public
      26 lines of code
      3 parameters
      4 conditional paths
      uses macro definition min defined in sm_select_assign.c
      uses function get_argument_from_call_expr(struct expression_list *,int) defined in smatch.h
      uses variable expression::args defined in expression.h
      uses function get_type(struct expression *) defined in smatch.h
      uses function sval_type_val(struct symbol *,long long) defined in smatch.h
      uses function get_implied_max(struct expression *,sval_t *) defined in smatch.h
      uses variable sval_t::uvalue defined in smatch.h
      uses variable sval_t::value defined in smatch.h
      uses function get_implied_min(struct expression *,sval_t *) defined in smatch.h
      uses function sval_is_negative(sval_t) defined in smatch.h
      uses function sval_cmp(sval_t,sval_t) defined in smatch.h
      uses function sval_cast(struct symbol *,sval_t) defined in smatch.h
      uses function alloc_rl(sval_t,sval_t) defined in smatch_extra.h
   function find_module_init_exit(struct symbol_list *) in line 162
      protection public
      53 lines of code
      1 parameters
      13 conditional paths
      uses variable sym defined in smatch_type.c
      uses variable name defined in smatch_type.c
      uses macro definition FOR_EACH_PTR_REVERSE defined in ptrlist.h
      uses variable symbol::type defined in struct.c
      uses enumvalue SYM_NODE defined in symbol.h
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::modifiers defined in struct.c
      uses macro definition MOD_STATIC defined in symbol.h
      uses enumvalue SYM_FN defined in symbol.h
      uses variable symbol::ident defined in struct.c
      uses variable ident::name defined in token.h
      uses variable statement::type defined in parse.h
      uses enumvalue STMT_RETURN defined in parse.h
      uses function expr_to_var(struct expression *) defined in smatch.h
      uses variable statement::ret_value defined in parse.h
      uses function sql_insert_function_ptr(const char *,const char *) defined in smatch.h
      uses function free_string(char *) defined in smatch.h
      uses macro definition END_FOR_EACH_PTR_REVERSE defined in ptrlist.h
   function match_end_file(struct symbol_list *) in line 216
      protection public
      14 lines of code
      1 parameters
      3 conditional paths
      uses variable sym defined in smatch_type.c
      uses macro definition FOR_EACH_PTR_REVERSE defined in ptrlist.h
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::modifiers defined in struct.c
      uses macro definition MOD_STATIC defined in symbol.h
      uses variable symbol::scope defined in struct.c
      uses function find_module_init_exit(struct symbol_list *) defined in check_kernel.c
      uses variable scope::symbols defined in scope.h
      uses macro definition END_FOR_EACH_PTR_REVERSE defined in ptrlist.h
   function check_kernel(int) in line 231
      protection public
      28 lines of code
      1 parameters
      3 conditional paths
      uses variable option_project defined in smatch.c
      uses enumvalue PROJ_KERNEL defined in smatch.h
      uses function add_implied_return_hook(const char *,implied_return_hook *,void *) defined in smatch.h
      uses function implied_err_cast_return(struct expression *,void *,struct range_list **) defined in check_kernel.c
      uses macro definition NULL defined in sm_implied3.c
      uses function return_implies_state(const char *,long long,long long,implication_hook *,void *) defined in smatch.h
      uses function match_param_valid_ptr(const char *,struct expression *,struct expression *,void *) defined in check_kernel.c
      uses function match_param_err_or_null(const char *,struct expression *,struct expression *,void *) defined in check_kernel.c
      uses function match_not_err(const char *,struct expression *,struct expression *,void *) defined in check_kernel.c
      uses function match_err(const char *,struct expression *,struct expression *,void *) defined in check_kernel.c
      uses function add_macro_assign_hook_extra(const char *,func_hook *,void *) defined in smatch.h
      uses function match_container_of_macro(const char *,struct expression *,void *) defined in check_kernel.c
      uses function add_hook(void *,enum hook_type) defined in smatch.h
      uses function match_container_of(struct expression *) defined in check_kernel.c
      uses enumvalue ASSIGNMENT_HOOK defined in smatch.h
      uses function match_next_bit(struct expression *,void *,struct range_list **) defined in check_kernel.c
      uses function add_function_hook(const char *,func_hook *,void *) defined in smatch.h
      uses function __match_nullify_path_hook(const char *,struct expression *,void *) defined in smatch.h
      uses variable option_info defined in smatch.c
      uses function match_end_file(struct symbol_list *) defined in check_kernel.c
      uses enumvalue END_FILE_HOOK defined in smatch.h
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/check_kernel_printf.c
module check_kernel_printf.c
   macro definition spam in line 24
      protection public
   macro definition KERN_SOH_ASCII in line 36
      protection public
   macro definition SIGN in line 41
      protection public
   macro definition LEFT in line 42
      protection public
   macro definition PLUS in line 43
      protection public
   macro definition SPACE in line 44
      protection public
   macro definition ZEROPAD in line 45
      protection public
   macro definition SMALL in line 46
      protection public
   macro definition SPECIAL in line 47
      protection public
   macro definition FIELD_WIDTH_MAX in line 80
      protection public
   macro definition PRECISION_MAX in line 81
      protection public
   macro definition printf_hook in line 1121
      protection public
   enumeration format_type in line 49
      protection public
   typedef u8 in line 38
      protection public
   typedef s16 in line 39
      protection public
   variable my_id in line 29
      protection public
   variable __packed in line 79
      protection public
   variable __check_printf_spec in line 82
      protection public
   enumvalue FORMAT_TYPE_NONE in line 50
      protection public
   enumvalue FORMAT_TYPE_WIDTH in line 51
      protection public
   enumvalue FORMAT_TYPE_PRECISION in line 52
      protection public
   enumvalue FORMAT_TYPE_CHAR in line 53
      protection public
   enumvalue FORMAT_TYPE_STR in line 54
      protection public
   enumvalue FORMAT_TYPE_PTR in line 55
      protection public
   enumvalue FORMAT_TYPE_PERCENT_CHAR in line 56
      protection public
   enumvalue FORMAT_TYPE_INVALID in line 57
      protection public
   enumvalue FORMAT_TYPE_LONG_LONG in line 58
      protection public
   enumvalue FORMAT_TYPE_ULONG in line 59
      protection public
   enumvalue FORMAT_TYPE_LONG in line 60
      protection public
   enumvalue FORMAT_TYPE_UBYTE in line 61
      protection public
   enumvalue FORMAT_TYPE_BYTE in line 62
      protection public
   enumvalue FORMAT_TYPE_USHORT in line 63
      protection public
   enumvalue FORMAT_TYPE_SHORT in line 64
      protection public
   enumvalue FORMAT_TYPE_UINT in line 65
      protection public
   enumvalue FORMAT_TYPE_INT in line 66
      protection public
   enumvalue FORMAT_TYPE_SIZE_T in line 67
      protection public
   enumvalue FORMAT_TYPE_PTRDIFF in line 68
      protection public
   enumvalue FORMAT_TYPE_NRCHARS in line 69
      protection public
   enumvalue FORMAT_TYPE_FLOAT in line 70
      protection public
   function skip_atoi(const char **) in line 85
      protection public
      9 lines of code
      1 parameters
      2 conditional paths
   function format_decode(const char *,struct printf_spec *) in line 96
      protection public
      195 lines of code
      2 parameters
      58 conditional paths
      uses variable printf_spec::type defined in check_kernel_printf.c
      uses enumvalue FORMAT_TYPE_WIDTH defined in check_kernel_printf.c
      uses variable printf_spec::field_width defined in check_kernel_printf.c
      uses variable printf_spec::flags defined in check_kernel_printf.c
      uses macro definition LEFT defined in check_kernel_printf.c
      uses enumvalue FORMAT_TYPE_NONE defined in check_kernel_printf.c
      uses variable printf_spec::precision defined in check_kernel_printf.c
      uses enumvalue FORMAT_TYPE_PRECISION defined in check_kernel_printf.c
      uses macro definition PLUS defined in check_kernel_printf.c
      uses macro definition SPACE defined in check_kernel_printf.c
      uses macro definition SPECIAL defined in check_kernel_printf.c
      uses macro definition ZEROPAD defined in check_kernel_printf.c
      uses function skip_atoi(const char **) defined in check_kernel_printf.c
      uses macro definition sm_msg defined in smatch.h
      uses variable printf_spec::base defined in check_kernel_printf.c
      uses enumvalue FORMAT_TYPE_CHAR defined in check_kernel_printf.c
      uses enumvalue FORMAT_TYPE_STR defined in check_kernel_printf.c
      uses enumvalue FORMAT_TYPE_PTR defined in check_kernel_printf.c
      uses enumvalue FORMAT_TYPE_PERCENT_CHAR defined in check_kernel_printf.c
      uses macro definition SMALL defined in check_kernel_printf.c
      uses macro definition SIGN defined in check_kernel_printf.c
      uses enumvalue FORMAT_TYPE_NRCHARS defined in check_kernel_printf.c
      uses enumvalue FORMAT_TYPE_FLOAT defined in check_kernel_printf.c
      uses enumvalue FORMAT_TYPE_INVALID defined in check_kernel_printf.c
      uses enumvalue FORMAT_TYPE_LONG_LONG defined in check_kernel_printf.c
      uses enumvalue FORMAT_TYPE_LONG defined in check_kernel_printf.c
      uses enumvalue FORMAT_TYPE_ULONG defined in check_kernel_printf.c
      uses enumvalue FORMAT_TYPE_SIZE_T defined in check_kernel_printf.c
      uses enumvalue FORMAT_TYPE_PTRDIFF defined in check_kernel_printf.c
      uses enumvalue FORMAT_TYPE_BYTE defined in check_kernel_printf.c
      uses enumvalue FORMAT_TYPE_UBYTE defined in check_kernel_printf.c
      uses enumvalue FORMAT_TYPE_SHORT defined in check_kernel_printf.c
      uses enumvalue FORMAT_TYPE_USHORT defined in check_kernel_printf.c
      uses enumvalue FORMAT_TYPE_INT defined in check_kernel_printf.c
      uses enumvalue FORMAT_TYPE_UINT defined in check_kernel_printf.c
   function is_struct_tag(struct symbol *,const char *) in line 292
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses enumvalue SYM_STRUCT defined in symbol.h
   function has_struct_tag(struct symbol *,const char *) in line 297
      protection public
      15 lines of code
      2 parameters
      4 conditional paths
      uses enumvalue SYM_STRUCT defined in symbol.h
      uses function is_struct_tag(struct symbol *,const char *) defined in check_kernel_printf.c
      uses enumvalue SYM_UNION defined in symbol.h
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses function get_real_base_type(struct symbol *) defined in smatch.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function is_char_type(struct symbol *) in line 313
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function _typedef_lookup(const char *) in line 328
      protection public
      13 lines of code
      1 parameters
      3 conditional paths
      uses function built_in_ident(const char *) defined in token.h
      uses variable name defined in smatch_type.c
      uses macro definition NULL defined in sm_implied3.c
      uses function lookup_symbol(struct ident *,enum namespace) defined in symbol.c
      uses enumvalue NS_TYPEDEF defined in symbol.h
      uses variable symbol::type defined in struct.c
      uses enumvalue SYM_NODE defined in symbol.h
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::base_type defined in struct.c
   function typedef_lookup(struct typedef_lookup *) in line 342
      protection public
      10 lines of code
      1 parameters
      3 conditional paths
      uses variable typedef_lookup::sym defined in check_kernel_printf.c
      uses variable typedef_lookup::failed defined in check_kernel_printf.c
      uses function _typedef_lookup(const char *) defined in check_kernel_printf.c
      uses variable typedef_lookup::name defined in check_kernel_printf.c
      uses macro definition sm_msg defined in smatch.h
   function ip4(const char *,struct symbol *,struct symbol *,int) in line 354
      protection public
      48 lines of code
      4 parameters
      10 conditional paths
      uses macro definition assert defined in sort.c
      uses macro definition sm_msg defined in smatch.h
      uses macro definition MOD_NODEREF defined in symbol.h
      uses function is_char_type(struct symbol *) defined in check_kernel_printf.c
      uses function is_struct_tag(struct symbol *,const char *) defined in check_kernel_printf.c
   function ip6(const char *,struct symbol *,struct symbol *,int) in line 403
      protection public
      17 lines of code
      4 parameters
      6 conditional paths
      uses macro definition assert defined in sort.c
      uses macro definition sm_msg defined in smatch.h
      uses macro definition MOD_NODEREF defined in symbol.h
   function ipS(const char *,struct symbol *,struct symbol *,int) in line 421
      protection public
      28 lines of code
      4 parameters
      4 conditional paths
      uses macro definition assert defined in sort.c
      uses macro definition sm_msg defined in smatch.h
      uses function has_struct_tag(struct symbol *,const char *) defined in check_kernel_printf.c
      uses function type_to_str(struct symbol *) defined in smatch.h
   function hex_string(const char *,struct symbol *,struct symbol *,int) in line 450
      protection public
      12 lines of code
      4 parameters
      5 conditional paths
      uses macro definition assert defined in sort.c
      uses macro definition sm_msg defined in smatch.h
      uses macro definition MOD_NODEREF defined in symbol.h
   function escaped_string(const char *,struct symbol *,struct symbol *,int) in line 463
      protection public
      10 lines of code
      4 parameters
      4 conditional paths
      uses macro definition assert defined in sort.c
      uses macro definition sm_msg defined in smatch.h
      uses macro definition MOD_NODEREF defined in symbol.h
   function resource_string(const char *,struct symbol *,struct symbol *,int) in line 474
      protection public
      10 lines of code
      4 parameters
      3 conditional paths
      uses macro definition assert defined in sort.c
      uses function is_struct_tag(struct symbol *,const char *) defined in check_kernel_printf.c
      uses macro definition sm_msg defined in smatch.h
      uses function type_to_str(struct symbol *) defined in smatch.h
   function mac_address_string(const char *,struct symbol *,struct symbol *,int) in line 485
      protection public
      19 lines of code
      4 parameters
      7 conditional paths
      uses macro definition assert defined in sort.c
      uses macro definition sm_msg defined in smatch.h
      uses function is_char_type(struct symbol *) defined in check_kernel_printf.c
      uses function is_struct_tag(struct symbol *,const char *) defined in check_kernel_printf.c
      uses function type_to_str(struct symbol *) defined in smatch.h
      uses macro definition MOD_NODEREF defined in symbol.h
   function dentry_file(const char *,struct symbol *,struct symbol *,int) in line 505
      protection public
      18 lines of code
      4 parameters
      5 conditional paths
      uses macro definition assert defined in sort.c
      uses macro definition sm_msg defined in smatch.h
      uses function is_struct_tag(struct symbol *,const char *) defined in check_kernel_printf.c
      uses function type_to_str(struct symbol *) defined in smatch.h
   function clock(const char *,struct symbol *,struct symbol *,int) in line 524
      protection public
      13 lines of code
      4 parameters
      5 conditional paths
      uses macro definition assert defined in sort.c
      uses macro definition sm_msg defined in smatch.h
      uses function is_struct_tag(struct symbol *,const char *) defined in check_kernel_printf.c
      uses function type_to_str(struct symbol *) defined in smatch.h
   function va_format(const char *,struct symbol *,struct symbol *,int) in line 538
      protection public
      8 lines of code
      4 parameters
      3 conditional paths
      uses macro definition assert defined in sort.c
      uses macro definition sm_msg defined in smatch.h
      uses function is_struct_tag(struct symbol *,const char *) defined in check_kernel_printf.c
      uses function type_to_str(struct symbol *) defined in smatch.h
   function netdev_feature(const char *,struct symbol *,struct symbol *,int) in line 547
      protection public
      20 lines of code
      4 parameters
      5 conditional paths
      uses variable typedef_lookup::name defined in check_kernel_printf.c
      uses macro definition assert defined in sort.c
      uses macro definition sm_msg defined in smatch.h
      uses function typedef_lookup(struct typedef_lookup *) defined in check_kernel_printf.c
      uses variable typedef_lookup::sym defined in check_kernel_printf.c
      uses function type_to_str(struct symbol *) defined in smatch.h
   function address_val(const char *,struct symbol *,struct symbol *,int) in line 567
      protection public
      32 lines of code
      4 parameters
      7 conditional paths
      uses variable typedef_lookup::name defined in check_kernel_printf.c
      uses macro definition assert defined in sort.c
      uses macro definition sm_msg defined in smatch.h
      uses function typedef_lookup(struct typedef_lookup *) defined in check_kernel_printf.c
      uses variable typedef_lookup::sym defined in check_kernel_printf.c
      uses function type_to_str(struct symbol *) defined in smatch.h
   function flag_string(const char *,struct symbol *,struct symbol *,int) in line 600
      protection public
      26 lines of code
      4 parameters
      7 conditional paths
      uses variable typedef_lookup::name defined in check_kernel_printf.c
      uses macro definition assert defined in sort.c
      uses macro definition sm_msg defined in smatch.h
      uses function type_to_str(struct symbol *) defined in smatch.h
      uses function typedef_lookup(struct typedef_lookup *) defined in check_kernel_printf.c
      uses variable typedef_lookup::sym defined in check_kernel_printf.c
   function pointer(const char *,struct expression *,int) in line 629
      protection public
      115 lines of code
      3 parameters
      31 conditional paths
      uses variable printf_spec::type defined in check_kernel_printf.c
      uses function get_type(struct expression *) defined in smatch.h
      uses macro definition sm_msg defined in smatch.h
      uses function type_to_str(struct symbol *) defined in smatch.h
      uses function get_real_base_type(struct symbol *) defined in smatch.h
      uses variable symbol::type defined in struct.c
      uses enumvalue SYM_ARRAY defined in symbol.h
      uses macro definition spam defined in check_kernel_printf.c
      uses function resource_string(const char *,struct symbol *,struct symbol *,int) defined in check_kernel_printf.c
      uses function mac_address_string(const char *,struct symbol *,struct symbol *,int) defined in check_kernel_printf.c
      uses function ip4(const char *,struct symbol *,struct symbol *,int) defined in check_kernel_printf.c
      uses function ip6(const char *,struct symbol *,struct symbol *,int) defined in check_kernel_printf.c
      uses function ipS(const char *,struct symbol *,struct symbol *,int) defined in check_kernel_printf.c
      uses function escaped_string(const char *,struct symbol *,struct symbol *,int) defined in check_kernel_printf.c
      uses function hex_string(const char *,struct symbol *,struct symbol *,int) defined in check_kernel_printf.c
      uses function va_format(const char *,struct symbol *,struct symbol *,int) defined in check_kernel_printf.c
      uses function netdev_feature(const char *,struct symbol *,struct symbol *,int) defined in check_kernel_printf.c
      uses function address_val(const char *,struct symbol *,struct symbol *,int) defined in check_kernel_printf.c
      uses function dentry_file(const char *,struct symbol *,struct symbol *,int) defined in check_kernel_printf.c
      uses function clock(const char *,struct symbol *,struct symbol *,int) defined in check_kernel_printf.c
      uses function flag_string(const char *,struct symbol *,struct symbol *,int) defined in check_kernel_printf.c
   function hexbyte(const char *,int,struct expression *,int,struct printf_spec) in line 754
      protection public
      22 lines of code
      5 parameters
      5 conditional paths
      uses variable printf_spec::type defined in check_kernel_printf.c
      uses variable printf_spec::field_width defined in check_kernel_printf.c
      uses variable printf_spec::precision defined in check_kernel_printf.c
      uses variable printf_spec::base defined in check_kernel_printf.c
      uses function get_type(struct expression *) defined in smatch.h
      uses macro definition sm_msg defined in smatch.h
      uses function type_to_str(struct symbol *) defined in smatch.h
   function check_format_string(const char *,const char *) in line 778
      protection public
      49 lines of code
      2 parameters
      13 conditional paths
      uses variable c defined in sm_array_overflow.c
      uses macro definition KERN_SOH_ASCII defined in check_kernel_printf.c
      uses macro definition sm_msg defined in smatch.h
      uses macro definition NULL defined in sm_implied3.c
   function arg_is___func__(struct expression *) in line 828
      protection public
      8 lines of code
      1 parameters
      2 conditional paths
      uses enumvalue EXPR_SYMBOL defined in expression.h
   function arg_contains_caller(struct expression *,const char *) in line 836
      protection public
      6 lines of code
      2 parameters
      2 conditional paths
      uses enumvalue EXPR_STRING defined in expression.h
      uses macro definition NULL defined in sm_implied3.c
   function is_array_of_const_char(struct symbol *) in line 843
      protection public
      13 lines of code
      1 parameters
      4 conditional paths
      uses variable printf_spec::base defined in check_kernel_printf.c
      uses variable sym defined in smatch_type.c
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::base_type defined in struct.c
      uses enumvalue SYM_ARRAY defined in symbol.h
      uses macro definition MOD_CONST defined in symbol.h
      uses function is_char_type(struct symbol *) defined in check_kernel_printf.c
      uses macro definition spam defined in check_kernel_printf.c
      uses function type_to_str(struct symbol *) defined in smatch.h
   function is_const_pointer_to_const_char(struct symbol *) in line 857
      protection public
      15 lines of code
      1 parameters
      5 conditional paths
      uses variable printf_spec::base defined in check_kernel_printf.c
      uses variable sym defined in smatch_type.c
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::base_type defined in struct.c
      uses variable ctype::modifiers defined in struct.c
      uses macro definition MOD_CONST defined in symbol.h
      uses enumvalue SYM_PTR defined in symbol.h
      uses function is_char_type(struct symbol *) defined in check_kernel_printf.c
      uses macro definition spam defined in check_kernel_printf.c
      uses function type_to_str(struct symbol *) defined in smatch.h
   function unknown_format(struct expression *) in line 873
      protection public
      12 lines of code
      1 parameters
      3 conditional paths
      uses function get_strings(struct expression *) defined in smatch.h
      uses function slist_has_state(struct state_list *,struct smatch_state *) defined in smatch_slist.c
      uses variable undefined defined in smatch.h
      uses function free_slist(struct state_list **) defined in smatch_slist.c
   function has_hex_prefix(const char *,const char *) in line 886
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
   function is_integer_specifier(int) in line 892
      protection public
      19 lines of code
      1 parameters
      12 conditional paths
      uses enumvalue FORMAT_TYPE_LONG_LONG defined in check_kernel_printf.c
      uses enumvalue FORMAT_TYPE_ULONG defined in check_kernel_printf.c
      uses enumvalue FORMAT_TYPE_LONG defined in check_kernel_printf.c
      uses enumvalue FORMAT_TYPE_UBYTE defined in check_kernel_printf.c
      uses enumvalue FORMAT_TYPE_BYTE defined in check_kernel_printf.c
      uses enumvalue FORMAT_TYPE_USHORT defined in check_kernel_printf.c
      uses enumvalue FORMAT_TYPE_SHORT defined in check_kernel_printf.c
      uses enumvalue FORMAT_TYPE_UINT defined in check_kernel_printf.c
      uses enumvalue FORMAT_TYPE_INT defined in check_kernel_printf.c
      uses enumvalue FORMAT_TYPE_SIZE_T defined in check_kernel_printf.c
      uses enumvalue FORMAT_TYPE_PTRDIFF defined in check_kernel_printf.c
   function do_check_printf_call(const char *,const char *,struct expression *,struct expression *,int) in line 914
      protection public
      156 lines of code
      5 parameters
      34 conditional paths
      uses function strip_parens(struct expression *) defined in smatch.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_CONDITIONAL defined in expression.h
      uses variable name defined in smatch_type.c
      uses variable expression::cond_true defined in expression.h
      uses variable expression::conditional defined in expression.h
      uses variable expression::cond_false defined in expression.h
      uses enumvalue EXPR_SYMBOL defined in expression.h
      uses variable sym defined in smatch_type.c
      uses variable expression::symbol defined in expression.h
      uses variable symbol::initializer defined in struct.c
      uses function is_array_of_const_char(struct symbol *) defined in check_kernel_printf.c
      uses function is_const_pointer_to_const_char(struct symbol *) defined in check_kernel_printf.c
      uses enumvalue EXPR_STRING defined in expression.h
      uses function unknown_format(struct expression *) defined in check_kernel_printf.c
      uses macro definition spam defined in check_kernel_printf.c
      uses variable expression::string defined in expression.h
      uses variable string::data defined in token.h
      uses function check_format_string(const char *,const char *) defined in check_kernel_printf.c
      uses function format_decode(const char *,struct printf_spec *) defined in check_kernel_printf.c
      uses variable printf_spec::type defined in check_kernel_printf.c
      uses enumvalue FORMAT_TYPE_NONE defined in check_kernel_printf.c
      uses enumvalue FORMAT_TYPE_PERCENT_CHAR defined in check_kernel_printf.c
      uses function get_argument_from_call_expr(struct expression_list *,int) defined in smatch.h
      uses variable expression::args defined in expression.h
      uses variable printf_spec::flags defined in check_kernel_printf.c
      uses macro definition SPECIAL defined in check_kernel_printf.c
      uses function has_hex_prefix(const char *,const char *) defined in check_kernel_printf.c
      uses macro definition sm_msg defined in smatch.h
      uses function is_integer_specifier(int) defined in check_kernel_printf.c
      uses variable printf_spec::base defined in check_kernel_printf.c
      uses enumvalue FORMAT_TYPE_INVALID defined in check_kernel_printf.c
      uses enumvalue FORMAT_TYPE_FLOAT defined in check_kernel_printf.c
      uses enumvalue FORMAT_TYPE_NRCHARS defined in check_kernel_printf.c
      uses enumvalue FORMAT_TYPE_WIDTH defined in check_kernel_printf.c
      uses enumvalue FORMAT_TYPE_PRECISION defined in check_kernel_printf.c
      uses enumvalue FORMAT_TYPE_STR defined in check_kernel_printf.c
      uses function arg_is___func__(struct expression *) defined in check_kernel_printf.c
      uses function arg_contains_caller(struct expression *,const char *) defined in check_kernel_printf.c
      uses enumvalue FORMAT_TYPE_PTR defined in check_kernel_printf.c
      uses function pointer(const char *,struct expression *,int) defined in check_kernel_printf.c
      uses enumvalue FORMAT_TYPE_CHAR defined in check_kernel_printf.c
      uses enumvalue FORMAT_TYPE_UBYTE defined in check_kernel_printf.c
      uses enumvalue FORMAT_TYPE_BYTE defined in check_kernel_printf.c
      uses enumvalue FORMAT_TYPE_USHORT defined in check_kernel_printf.c
      uses enumvalue FORMAT_TYPE_SHORT defined in check_kernel_printf.c
      uses enumvalue FORMAT_TYPE_INT defined in check_kernel_printf.c
      uses enumvalue FORMAT_TYPE_UINT defined in check_kernel_printf.c
      uses function hexbyte(const char *,int,struct expression *,int,struct printf_spec) defined in check_kernel_printf.c
      uses enumvalue FORMAT_TYPE_LONG defined in check_kernel_printf.c
      uses enumvalue FORMAT_TYPE_ULONG defined in check_kernel_printf.c
      uses enumvalue FORMAT_TYPE_LONG_LONG defined in check_kernel_printf.c
      uses enumvalue FORMAT_TYPE_PTRDIFF defined in check_kernel_printf.c
      uses enumvalue FORMAT_TYPE_SIZE_T defined in check_kernel_printf.c
   function check_printf_call(const char *,struct expression *,void *) in line 1072
      protection public
      40 lines of code
      3 parameters
      5 conditional paths
      uses function info(struct position,const char *,...) defined in lib.c
      uses function get_function(void) defined in smatch.h
      uses function get_argument_from_call_expr(struct expression_list *,int) defined in smatch.h
      uses variable expression::args defined in expression.h
      uses macro definition sm_msg defined in smatch.h
      uses variable name defined in smatch_type.c
      uses function do_check_printf_call(const char *,const char *,struct expression *,struct expression *,int) defined in check_kernel_printf.c
   function check_kernel_printf(int) in line 1114
      protection public
      280 lines of code
      1 parameters
      2 conditional paths
      uses variable option_project defined in smatch.c
      uses enumvalue PROJ_KERNEL defined in smatch.h
      uses variable my_id defined in check_kernel_printf.c
      uses macro definition printf_hook defined in check_kernel_printf.c
      uses function printf(char *,...) defined in test-be.c
      uses function snprintf(char *,int,char *,char *) defined in sm_overflow6.c
      uses function sprintf(char *,char *,char *) defined in sm_overflow6.c
   variable printf_spec::base in line 77
      protection public
   variable printf_spec::field_width in line 75
      protection public
   variable printf_spec::flags in line 76
      protection public
   variable printf_spec::precision in line 78
      protection public
   variable printf_spec::type in line 74
      protection public
   variable typedef_lookup::failed in line 325
      protection public
   variable typedef_lookup::name in line 323
      protection public
   variable typedef_lookup::sym in line 324
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/check_kmalloc_to_bugon.c
module check_kmalloc_to_bugon.c
   variable my_id in line 20
      protection public
   variable check_assigned_expr_id in line 22
      protection public
   function is_kmalloc_call(struct expression *) in line 24
      protection public
      12 lines of code
      1 parameters
      5 conditional paths
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_CALL defined in expression.h
      uses variable expression::fn defined in expression.h
      uses enumvalue EXPR_SYMBOL defined in expression.h
      uses variable expression::symbol_name defined in expression.h
      uses variable ident::name defined in token.h
   function match_condition(struct expression *) in line 37
      protection public
      21 lines of code
      1 parameters
      3 conditional paths
      uses variable expression::right defined in expression.h
      uses variable name defined in smatch_type.c
      uses function get_macro_name(struct position) defined in macro_table.c
      uses variable expression::pos defined in expression.h
      uses function get_state_expr(int,struct expression *) defined in smatch.h
      uses variable check_assigned_expr_id defined in check_kmalloc_to_bugon.c
      uses variable smatch_state::data defined in smatch.h
      uses function is_kmalloc_call(struct expression *) defined in check_kmalloc_to_bugon.c
      uses function expr_to_var(struct expression *) defined in smatch.h
      uses macro definition sm_msg defined in smatch.h
      uses function free_string(char *) defined in smatch.h
   function check_kmalloc_to_bugon(int) in line 59
      protection public
      9 lines of code
      1 parameters
      3 conditional paths
      uses variable option_project defined in smatch.c
      uses enumvalue PROJ_KERNEL defined in smatch.h
      uses variable option_spammy defined in smatch.c
      uses variable my_id defined in check_kmalloc_to_bugon.c
      uses function add_hook(void *,enum hook_type) defined in smatch.h
      uses function match_condition(struct expression *) defined in check_kmalloc_to_bugon.c
      uses enumvalue CONDITION_HOOK defined in smatch.h
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/check_kmalloc_wrong_size.c
module check_kmalloc_wrong_size.c
   variable my_id in line 20
      protection public
   function get_data_size(struct expression *) in line 22
      protection public
      12 lines of code
      1 parameters
      3 conditional paths
      uses function get_type(struct expression *) defined in smatch.h
      uses variable ptr defined in sm_null_deref2.c
      uses enumvalue SYM_PTR defined in symbol.h
      uses function type_bytes(struct symbol *) defined in smatch.h
   function check_size_matches(int,struct expression *) in line 35
      protection public
      12 lines of code
      2 parameters
      4 conditional paths
      uses function get_implied_value(struct expression *,sval_t *) defined in smatch.h
      uses function sval_cmp_val(sval_t,long long) defined in smatch.h
      uses macro definition sm_msg defined in smatch.h
      uses function sval_to_str(sval_t) defined in smatch.h
   function match_alloc(const char *,struct expression *,void *) in line 48
      protection public
      19 lines of code
      3 parameters
      5 conditional paths
      uses function strip_expr(struct expression *) defined in smatch.h
      uses variable expression::right defined in expression.h
      uses function get_data_size(struct expression *) defined in check_kmalloc_wrong_size.c
      uses variable expression::left defined in expression.h
      uses function get_argument_from_call_expr(struct expression_list *,int) defined in smatch.h
      uses variable expression::args defined in expression.h
      uses enumvalue EXPR_BINOP defined in expression.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_SIZEOF defined in expression.h
      uses function check_size_matches(int,struct expression *) defined in check_kmalloc_wrong_size.c
   function match_calloc(const char *,struct expression *,void *) in line 68
      protection public
      14 lines of code
      3 parameters
      2 conditional paths
      uses function strip_expr(struct expression *) defined in smatch.h
      uses variable expression::right defined in expression.h
      uses function get_data_size(struct expression *) defined in check_kmalloc_wrong_size.c
      uses variable expression::left defined in expression.h
      uses function get_argument_from_call_expr(struct expression_list *,int) defined in smatch.h
      uses variable expression::args defined in expression.h
      uses function check_size_matches(int,struct expression *) defined in check_kmalloc_wrong_size.c
   function check_kmalloc_wrong_size(int) in line 83
      protection public
      13 lines of code
      1 parameters
      2 conditional paths
      uses variable my_id defined in check_kmalloc_wrong_size.c
      uses variable option_project defined in smatch.c
      uses enumvalue PROJ_KERNEL defined in smatch.h
      uses function add_function_assign_hook(const char *,func_hook *,void *) defined in smatch.h
      uses function match_alloc(const char *,struct expression *,void *) defined in check_kmalloc_wrong_size.c
      uses macro definition NULL defined in sm_implied3.c
      uses function match_calloc(const char *,struct expression *,void *) defined in check_kmalloc_wrong_size.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/check_kunmap.c
module check_kunmap.c
   variable check_assigned_expr_id in line 23
      protection public
   variable my_id in line 24
      protection public
   function STATE(no_unmap) in line 21
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function check_assignment(void *) in line 26
      protection public
      16 lines of code
      1 parameters
      5 conditional paths
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_CALL defined in expression.h
      uses function expr_to_var(struct expression *) defined in smatch.h
      uses variable expression::fn defined in expression.h
      uses macro definition sm_msg defined in smatch.h
      uses function free_string(char *) defined in smatch.h
   function match_kmap_atomic(const char *,struct expression *,void *) in line 43
      protection public
      7 lines of code
      3 parameters
      1 conditional paths
      uses function get_argument_from_call_expr(struct expression_list *,int) defined in smatch.h
      uses variable expression::args defined in expression.h
      uses function set_state_expr(int,struct expression *,struct smatch_state *) defined in smatch.h
      uses variable my_id defined in check_kunmap.c
   function match_kunmap_atomic(const char *,struct expression *,void *) in line 51
      protection public
      12 lines of code
      3 parameters
      3 conditional paths
      uses function get_argument_from_call_expr(struct expression_list *,int) defined in smatch.h
      uses variable expression::args defined in expression.h
      uses function get_sm_state_expr(int,struct expression *) defined in smatch.h
      uses variable my_id defined in check_kunmap.c
      uses function slist_has_state(struct state_list *,struct smatch_state *) defined in smatch_slist.c
      uses variable sm_state::possible defined in smatch.h
      uses macro definition sm_msg defined in smatch.h
   function match_kunmap(const char *,struct expression *,void *) in line 64
      protection public
      14 lines of code
      3 parameters
      2 conditional paths
      uses function get_argument_from_call_expr(struct expression_list *,int) defined in smatch.h
      uses variable expression::args defined in expression.h
      uses function get_sm_state_expr(int,struct expression *) defined in smatch.h
      uses variable check_assigned_expr_id defined in check_kunmap.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable sm_state::possible defined in smatch.h
      uses function check_assignment(void *) defined in check_kunmap.c
      uses variable sm_state::state defined in smatch.h
      uses variable smatch_state::data defined in smatch.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function check_kunmap(int) in line 79
      protection public
      9 lines of code
      1 parameters
      2 conditional paths
      uses variable my_id defined in check_kunmap.c
      uses variable option_project defined in smatch.c
      uses enumvalue PROJ_KERNEL defined in smatch.h
      uses function add_function_hook(const char *,func_hook *,void *) defined in smatch.h
      uses function match_kunmap(const char *,struct expression *,void *) defined in check_kunmap.c
      uses macro definition NULL defined in sm_implied3.c
      uses function match_kmap_atomic(const char *,struct expression *,void *) defined in check_kunmap.c
      uses function match_kunmap_atomic(const char *,struct expression *,void *) defined in check_kunmap.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/check_leaks.c
module check_leaks.c
   variable my_id in line 42
      protection public
   variable allocation_funcs in line 49
      protection public
   function STATE(allocated) in line 44
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function STATE(ok) in line 45
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function set_parent(struct expression *,struct smatch_state *) in line 47
      protection public
      14 lines of code
      2 parameters
      5 conditional paths
      uses variable name defined in smatch_type.c
      uses variable sym defined in smatch_type.c
      uses function get_parent_from_expr(struct expression *,struct symbol **) defined in check_leaks.c
      uses function get_state(int,const char *,struct symbol *) defined in smatch.h
      uses variable my_id defined in check_leaks.c
      uses function set_state(int,const char *,struct symbol *,struct smatch_state *) defined in smatch.h
      uses function free_string(char *) defined in smatch.h
   function alloc_parent_str(struct symbol *) in line 56
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses variable buf defined in sm_fake_assignment.c
      uses variable sym defined in smatch_type.c
      uses variable symbol::ident defined in struct.c
      uses macro definition NULL defined in sm_implied3.c
      uses function snprintf(char *,int,char *,char *) defined in sm_overflow6.c
      uses variable ident::name defined in token.h
      uses function alloc_string(const char *) defined in smatch.h
   function get_parent_from_expr(struct expression *,struct symbol **) in line 68
      protection public
      14 lines of code
      2 parameters
      2 conditional paths
      uses variable name defined in smatch_type.c
      uses function strip_expr(struct expression *) defined in smatch.h
      uses function expr_to_str_sym(struct expression *,struct symbol **) defined in smatch.h
      uses variable sym defined in smatch_type.c
      uses function free_string(char *) defined in smatch.h
      uses variable symbol::ident defined in struct.c
      uses macro definition NULL defined in sm_implied3.c
      uses function alloc_parent_str(struct symbol *) defined in check_leaks.c
   function is_local(struct expression *) in line 83
      protection public
      16 lines of code
      1 parameters
      5 conditional paths
      uses variable name defined in smatch_type.c
      uses variable sym defined in smatch_type.c
      uses function expr_to_str_sym(struct expression *,struct symbol **) defined in smatch.h
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::modifiers defined in struct.c
      uses macro definition MOD_NONLOCAL defined in symbol.h
      uses macro definition MOD_STATIC defined in symbol.h
      uses macro definition MOD_ADDRESSABLE defined in symbol.h
      uses function free_string(char *) defined in smatch.h
   function is_param(struct expression *) in line 100
      protection public
      21 lines of code
      1 parameters
      5 conditional paths
      uses variable name defined in smatch_type.c
      uses variable sym defined in smatch_type.c
      uses function expr_to_str_sym(struct expression *,struct symbol **) defined in smatch.h
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable cur_func_sym defined in smatch.h
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::base_type defined in struct.c
      uses variable symbol::arguments defined in struct.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses function free_string(char *) defined in smatch.h
   function match_alloc(const char *,struct expression *,void *) in line 122
      protection public
      10 lines of code
      3 parameters
      4 conditional paths
      uses function is_local(struct expression *) defined in check_leaks.c
      uses variable expression::left defined in expression.h
      uses function is_param(struct expression *) defined in check_leaks.c
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_SYMBOL defined in expression.h
      uses function set_state_expr(int,struct expression *,struct smatch_state *) defined in smatch.h
      uses variable my_id defined in check_leaks.c
   function match_condition(struct expression *) in line 133
      protection public
      22 lines of code
      1 parameters
      6 conditional paths
      uses function strip_expr(struct expression *) defined in smatch.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_PREOP defined in expression.h
      uses enumvalue EXPR_SYMBOL defined in expression.h
      uses enumvalue EXPR_DEREF defined in expression.h
      uses function get_sm_state_expr(int,struct expression *) defined in smatch.h
      uses variable my_id defined in check_leaks.c
      uses function slist_has_state(struct state_list *,struct smatch_state *) defined in smatch_slist.c
      uses variable sm_state::possible defined in smatch.h
      uses function set_true_false_states_expr(int,struct expression *,struct smatch_state *,struct smatch_state *) defined in smatch.h
      uses enumvalue EXPR_ASSIGNMENT defined in expression.h
      uses variable expression::left defined in expression.h
   function match_function_call(struct expression *) in line 171
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable expression::args defined in expression.h
      uses function set_parent(struct expression *,struct smatch_state *) defined in check_leaks.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function warn_if_allocated(struct expression *) in line 180
      protection public
      18 lines of code
      1 parameters
      3 conditional paths
      uses variable name defined in smatch_type.c
      uses function get_sm_state_expr(int,struct expression *) defined in smatch.h
      uses variable my_id defined in check_leaks.c
      uses function slist_has_state(struct state_list *,struct smatch_state *) defined in smatch_slist.c
      uses variable sm_state::possible defined in smatch.h
      uses function expr_to_var(struct expression *) defined in smatch.h
      uses macro definition sm_msg defined in smatch.h
      uses function free_string(char *) defined in smatch.h
      uses function set_state_expr(int,struct expression *,struct smatch_state *) defined in smatch.h
   function match_assign(struct expression *) in line 199
      protection public
      12 lines of code
      1 parameters
      2 conditional paths
      uses variable expression::right defined in expression.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_ASSIGNMENT defined in expression.h
      uses variable expression::left defined in expression.h
      uses function warn_if_allocated(struct expression *) defined in check_leaks.c
      uses function set_parent(struct expression *,struct smatch_state *) defined in check_leaks.c
   function check_for_allocated(void) in line 212
      protection public
      12 lines of code
      1 parameters
      2 conditional paths
      uses function __get_cur_stree(void) defined in smatch.h
      uses macro definition FOR_EACH_MY_SM defined in avl.h
      uses variable my_id defined in check_leaks.c
      uses function slist_has_state(struct state_list *,struct smatch_state *) defined in smatch_slist.c
      uses variable sm_state::possible defined in smatch.h
      uses macro definition sm_msg defined in smatch.h
      uses variable sm_state::name defined in smatch.h
      uses macro definition END_FOR_EACH_SM defined in avl.h
   function match_return(struct expression *) in line 225
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses variable __inline_fn defined in smatch.h
      uses function set_parent(struct expression *,struct smatch_state *) defined in check_leaks.c
      uses function check_for_allocated(void) defined in check_leaks.c
   function match_end_func(struct symbol *) in line 233
      protection public
      6 lines of code
      1 parameters
      2 conditional paths
      uses variable __inline_fn defined in smatch.h
      uses function check_for_allocated(void) defined in check_leaks.c
   function check_leaks(int) in line 240
      protection public
      17 lines of code
      1 parameters
      2 conditional paths
      uses variable my_id defined in check_leaks.c
      uses macro definition ARRAY_SIZE defined in lib.h
      uses variable allocation_funcs defined in check_leaks.c
      uses function add_function_assign_hook(const char *,func_hook *,void *) defined in smatch.h
      uses function match_alloc(const char *,struct expression *,void *) defined in check_leaks.c
      uses macro definition NULL defined in sm_implied3.c
      uses function add_hook(void *,enum hook_type) defined in smatch.h
      uses function match_condition(struct expression *) defined in check_leaks.c
      uses enumvalue CONDITION_HOOK defined in smatch.h
      uses function match_function_call(struct expression *) defined in check_leaks.c
      uses enumvalue FUNCTION_CALL_HOOK defined in smatch.h
      uses function match_assign(struct expression *) defined in check_leaks.c
      uses enumvalue ASSIGNMENT_HOOK defined in smatch.h
      uses function match_return(struct expression *) defined in check_leaks.c
      uses enumvalue RETURN_HOOK defined in smatch.h
      uses function match_end_func(struct symbol *) defined in check_leaks.c
      uses enumvalue END_FUNC_HOOK defined in smatch.h
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/check_list.h
module check_list.h
   macro definition CK in line 2
      protection public
   macro definition __undo_CK_def in line 3
      protection public
   macro definition CK in line 2
      protection public
   macro definition __undo_CK_def in line 3
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/check_locking.c
module check_locking.c
   macro definition RETURN_VAL in line 55
      protection public
   macro definition NO_ARG in line 56
      protection public
   enumeration action in line 42
      protection public
   enumeration return_type in line 47
      protection public
   variable my_id in line 34
      protection public
   variable func_has_transition in line 36
      protection public
   variable wine_lock_table in line 40
      protection public
   variable kernel_lock_table in line 40
      protection public
   variable lock_table in line 357
      protection public
   variable starts_locked in line 359
      protection public
   variable starts_unlocked in line 360
      protection public
   variable all_returns in line 369
      protection public
   variable warned_pos in line 581
      protection public
   enumvalue LOCK in line 43
      protection public
   enumvalue UNLOCK in line 44
      protection public
   enumvalue ret_any in line 48
      protection public
   enumvalue ret_non_zero in line 49
      protection public
   enumvalue ret_zero in line 50
      protection public
   enumvalue ret_negative in line 51
      protection public
   enumvalue ret_positive in line 52
      protection public
   function STATE(locked) in line 38
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function STATE(start_state) in line 39
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function STATE(unlocked) in line 40
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function DECLARE_PTR_LIST(return_list,struct locks_on_return) in line 368
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function make_full_name(const char *,const char *) in line 371
      protection public
      8 lines of code
      2 parameters
      1 conditional paths
      uses function snprintf(char *,int,char *,char *) defined in sm_overflow6.c
      uses function remove_parens(char *) defined in smatch.h
      uses function alloc_string(const char *) defined in smatch.h
   function remove_spinlock_check(struct expression *) in line 380
      protection public
      11 lines of code
      1 parameters
      4 conditional paths
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_CALL defined in expression.h
      uses variable expression::fn defined in expression.h
      uses enumvalue EXPR_SYMBOL defined in expression.h
      uses variable expression::symbol_name defined in expression.h
      uses variable ident::name defined in token.h
      uses function get_argument_from_call_expr(struct expression_list *,int) defined in smatch.h
      uses variable expression::args defined in expression.h
   function get_full_name(struct expression *,int) in line 392
      protection public
      26 lines of code
      2 parameters
      7 conditional paths
      uses variable lock_info::arg defined in check_locking.c
      uses variable lock_info::name defined in check_locking.c
      uses macro definition NULL defined in sm_implied3.c
      uses variable lock_table defined in check_locking.c
      uses macro definition RETURN_VAL defined in check_locking.c
      uses function expr_to_var(struct expression *) defined in smatch.h
      uses variable expression::left defined in expression.h
      uses function make_full_name(const char *,const char *) defined in check_locking.c
      uses macro definition NO_ARG defined in check_locking.c
      uses function get_argument_from_call_expr(struct expression_list *,int) defined in smatch.h
      uses variable expression::args defined in expression.h
      uses function remove_spinlock_check(struct expression *) defined in check_locking.c
      uses function expr_to_str(struct expression *) defined in smatch.h
      uses function free_string(char *) defined in smatch.h
   function get_start_state(struct sm_state *) in line 419
      protection public
      17 lines of code
      1 parameters
      6 conditional paths
      uses function in_tracker_list(struct tracker_list *,int,const char *,struct symbol *) defined in smatch.h
      uses variable starts_locked defined in check_locking.c
      uses variable my_id defined in check_locking.c
      uses variable sm_state::name defined in smatch.h
      uses variable sm_state::sym defined in smatch.h
      uses variable starts_unlocked defined in check_locking.c
      uses variable undefined defined in smatch.h
   function unmatched_state(struct sm_state *) in line 437
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function do_lock(const char *) in line 442
      protection public
      17 lines of code
      1 parameters
      5 conditional paths
      uses variable __inline_fn defined in smatch.h
      uses function get_sm_state(int,const char *,struct symbol *) defined in smatch.h
      uses variable my_id defined in check_locking.c
      uses variable lock_info::name defined in check_locking.c
      uses macro definition NULL defined in sm_implied3.c
      uses function add_tracker(struct tracker_list **,int,const char *,struct symbol *) defined in smatch.h
      uses variable starts_unlocked defined in check_locking.c
      uses function slist_has_state(struct state_list *,struct smatch_state *) defined in smatch_slist.c
      uses variable sm_state::possible defined in smatch.h
      uses macro definition sm_msg defined in smatch.h
      uses variable func_has_transition defined in check_locking.c
      uses macro definition TRUE defined in smatch.h
      uses function set_state(int,const char *,struct symbol *,struct smatch_state *) defined in smatch.h
   function do_lock_failed(const char *) in line 460
      protection public
      12 lines of code
      1 parameters
      3 conditional paths
      uses variable __inline_fn defined in smatch.h
      uses function get_sm_state(int,const char *,struct symbol *) defined in smatch.h
      uses variable my_id defined in check_locking.c
      uses variable lock_info::name defined in check_locking.c
      uses macro definition NULL defined in sm_implied3.c
      uses function add_tracker(struct tracker_list **,int,const char *,struct symbol *) defined in smatch.h
      uses variable starts_unlocked defined in check_locking.c
      uses function set_state(int,const char *,struct symbol *,struct smatch_state *) defined in smatch.h
   function do_unlock(const char *) in line 473
      protection public
      18 lines of code
      1 parameters
      6 conditional paths
      uses variable __inline_fn defined in smatch.h
      uses function __path_is_null(void) defined in smatch.h
      uses function get_sm_state(int,const char *,struct symbol *) defined in smatch.h
      uses variable my_id defined in check_locking.c
      uses variable lock_info::name defined in check_locking.c
      uses macro definition NULL defined in sm_implied3.c
      uses function add_tracker(struct tracker_list **,int,const char *,struct symbol *) defined in smatch.h
      uses variable starts_locked defined in check_locking.c
      uses function slist_has_state(struct state_list *,struct smatch_state *) defined in smatch_slist.c
      uses variable sm_state::possible defined in smatch.h
      uses macro definition sm_msg defined in smatch.h
      uses variable func_has_transition defined in check_locking.c
      uses macro definition TRUE defined in smatch.h
      uses function set_state(int,const char *,struct symbol *,struct smatch_state *) defined in smatch.h
   function match_lock_held(const char *,struct expression *,struct expression *,void *) in line 492
      protection public
      21 lines of code
      4 parameters
      5 conditional paths
      uses variable lock_table defined in check_locking.c
      uses variable lock_info::arg defined in check_locking.c
      uses macro definition NO_ARG defined in check_locking.c
      uses function get_full_name(struct expression *,int) defined in check_locking.c
      uses macro definition NULL defined in sm_implied3.c
      uses macro definition RETURN_VAL defined in check_locking.c
      uses function do_lock(const char *) defined in check_locking.c
      uses function free_string(char *) defined in smatch.h
   function match_lock_failed(const char *,struct expression *,struct expression *,void *) in line 514
      protection public
      21 lines of code
      4 parameters
      5 conditional paths
      uses variable lock_table defined in check_locking.c
      uses variable lock_info::arg defined in check_locking.c
      uses macro definition NO_ARG defined in check_locking.c
      uses function get_full_name(struct expression *,int) defined in check_locking.c
      uses macro definition NULL defined in sm_implied3.c
      uses macro definition RETURN_VAL defined in check_locking.c
      uses function do_lock_failed(const char *) defined in check_locking.c
      uses function free_string(char *) defined in smatch.h
   function match_returns_locked(const char *,struct expression *,void *) in line 536
      protection public
      12 lines of code
      3 parameters
      2 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses variable lock_table defined in check_locking.c
      uses variable lock_info::arg defined in check_locking.c
      uses macro definition RETURN_VAL defined in check_locking.c
      uses function get_full_name(struct expression *,int) defined in check_locking.c
      uses function do_lock(const char *) defined in check_locking.c
   function match_lock_unlock(const char *,struct expression *,void *) in line 549
      protection public
      18 lines of code
      3 parameters
      4 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses variable lock_table defined in check_locking.c
      uses variable __inline_fn defined in smatch.h
      uses function get_full_name(struct expression *,int) defined in check_locking.c
      uses variable lock_info::action defined in check_locking.c
      uses enumvalue LOCK defined in check_locking.c
      uses function do_lock(const char *) defined in check_locking.c
      uses function do_unlock(const char *) defined in check_locking.c
      uses function free_string(char *) defined in smatch.h
   function alloc_return(struct expression *) in line 568
      protection public
      12 lines of code
      1 parameters
      2 conditional paths
      uses function malloc(int) defined in sm_buf_size2.c
      uses function get_implied_rl(struct expression *,struct range_list **) defined in smatch_extra.h
      uses variable locks_on_return::return_values defined in check_locking.c
      uses macro definition NULL defined in sm_implied3.c
      uses variable locks_on_return::line defined in check_locking.c
      uses function get_lineno(void) defined in smatch.h
      uses variable locks_on_return::locked defined in check_locking.c
      uses variable locks_on_return::unlocked defined in check_locking.c
   function check_possible(struct sm_state *) in line 581
      protection public
      35 lines of code
      1 parameters
      9 conditional paths
      uses macro definition undef defined in preprocessor18.c
      uses variable option_spammy defined in smatch.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable sm_state::possible defined in smatch.h
      uses variable sm_state::state defined in smatch.h
      uses function get_start_state(struct sm_state *) defined in check_locking.c
      uses variable undefined defined in smatch.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses macro definition sm_msg defined in smatch.h
      uses variable sm_state::name defined in smatch.h
   function match_return(int,char *,struct expression *) in line 619
      protection public
      43 lines of code
      3 parameters
      11 conditional paths
      uses variable final_pass defined in smatch.h
      uses variable __inline_fn defined in smatch.h
      uses function cmp_pos(struct position,struct position) defined in smatch.h
      uses variable expression::pos defined in expression.h
      uses variable warned_pos defined in check_locking.c
      uses function alloc_return(struct expression *) defined in check_locking.c
      uses function __get_cur_stree(void) defined in smatch.h
      uses macro definition FOR_EACH_MY_SM defined in avl.h
      uses variable my_id defined in check_locking.c
      uses variable sm_state::state defined in smatch.h
      uses function add_tracker(struct tracker_list **,int,const char *,struct symbol *) defined in smatch.h
      uses variable locks_on_return::locked defined in check_locking.c
      uses variable sm_state::owner defined in smatch.h
      uses variable sm_state::name defined in smatch.h
      uses variable sm_state::sym defined in smatch.h
      uses variable locks_on_return::unlocked defined in check_locking.c
      uses function get_start_state(struct sm_state *) defined in check_locking.c
      uses function check_possible(struct sm_state *) defined in check_locking.c
      uses macro definition END_FOR_EACH_SM defined in avl.h
      uses macro definition add_ptr_list defined in ptrlist.h
      uses variable all_returns defined in check_locking.c
   function add_line(struct range_list **,int) in line 663
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
      uses function sval_type_val(struct symbol *,long long) defined in smatch.h
      uses function add_range(struct range_list **,sval_t,sval_t) defined in smatch_extra.h
   function line_printed(struct range_list *,int) in line 670
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
      uses function sval_type_val(struct symbol *,long long) defined in smatch.h
      uses function rl_has_sval(struct range_list *,sval_t) defined in smatch_extra.h
   function print_inconsistent_returns(struct tracker *,struct smatch_state *) in line 677
      protection public
      54 lines of code
      2 parameters
      13 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses macro definition sm_msg defined in smatch.h
      uses variable tracker::name defined in smatch.h
      uses macro definition sm_printf defined in smatch.h
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable all_returns defined in check_locking.c
      uses function line_printed(struct range_list *,int) defined in check_locking.c
      uses variable locks_on_return::line defined in check_locking.c
      uses function in_tracker_list(struct tracker_list *,int,const char *,struct symbol *) defined in smatch.h
      uses variable locks_on_return::unlocked defined in check_locking.c
      uses variable tracker::owner defined in smatch.h
      uses variable tracker::sym defined in smatch.h
      uses variable locks_on_return::locked defined in check_locking.c
      uses function add_line(struct range_list **,int) defined in check_locking.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function matches_return_type(struct range_list *,enum return_type) in line 732
      protection public
      20 lines of code
      2 parameters
      6 conditional paths
      uses function ll_to_sval(long long) defined in smatch.h
      uses enumvalue ret_zero defined in check_locking.c
      uses function possibly_true_rl(struct range_list *,int,struct range_list *) defined in smatch_extra.h
      uses enumvalue SPECIAL_NOTEQUAL defined in token.h
      uses function alloc_rl(sval_t,sval_t) defined in smatch_extra.h
      uses enumvalue ret_non_zero defined in check_locking.c
      uses enumvalue SPECIAL_EQUAL defined in token.h
      uses enumvalue ret_negative defined in check_locking.c
      uses enumvalue SPECIAL_GTE defined in token.h
      uses enumvalue ret_positive defined in check_locking.c
      uses enumvalue ret_any defined in check_locking.c
   function match_held(struct tracker *,struct locks_on_return *,struct smatch_state *) in line 753
      protection public
      10 lines of code
      3 parameters
      4 conditional paths
      uses function in_tracker_list(struct tracker_list *,int,const char *,struct symbol *) defined in smatch.h
      uses variable locks_on_return::unlocked defined in check_locking.c
      uses variable tracker::owner defined in smatch.h
      uses variable tracker::name defined in smatch.h
      uses variable tracker::sym defined in smatch.h
      uses variable locks_on_return::locked defined in check_locking.c
   function match_released(struct tracker *,struct locks_on_return *,struct smatch_state *) in line 764
      protection public
      10 lines of code
      3 parameters
      4 conditional paths
      uses function in_tracker_list(struct tracker_list *,int,const char *,struct symbol *) defined in smatch.h
      uses variable locks_on_return::unlocked defined in check_locking.c
      uses variable tracker::owner defined in smatch.h
      uses variable tracker::name defined in smatch.h
      uses variable tracker::sym defined in smatch.h
      uses variable locks_on_return::locked defined in check_locking.c
   function held_on_return(struct tracker *,struct smatch_state *,enum return_type) in line 775
      protection public
      12 lines of code
      3 parameters
      3 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable all_returns defined in check_locking.c
      uses function matches_return_type(struct range_list *,enum return_type) defined in check_locking.c
      uses variable locks_on_return::return_values defined in check_locking.c
      uses function match_held(struct tracker *,struct locks_on_return *,struct smatch_state *) defined in check_locking.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function released_on_return(struct tracker *,struct smatch_state *,enum return_type) in line 788
      protection public
      12 lines of code
      3 parameters
      3 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable all_returns defined in check_locking.c
      uses function matches_return_type(struct range_list *,enum return_type) defined in check_locking.c
      uses variable locks_on_return::return_values defined in check_locking.c
      uses function match_released(struct tracker *,struct locks_on_return *,struct smatch_state *) defined in check_locking.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function check_returns_consistently(struct tracker *,struct smatch_state *) in line 801
      protection public
      30 lines of code
      2 parameters
      7 conditional paths
      uses function held_on_return(struct tracker *,struct smatch_state *,enum return_type) defined in check_locking.c
      uses enumvalue ret_any defined in check_locking.c
      uses function released_on_return(struct tracker *,struct smatch_state *,enum return_type) defined in check_locking.c
      uses enumvalue ret_zero defined in check_locking.c
      uses enumvalue ret_non_zero defined in check_locking.c
      uses enumvalue ret_positive defined in check_locking.c
      uses enumvalue ret_negative defined in check_locking.c
      uses function cur_func_return_type(void) defined in smatch.h
      uses enumvalue SYM_PTR defined in symbol.h
      uses function print_inconsistent_returns(struct tracker *,struct smatch_state *) defined in check_locking.c
   function check_consistency(struct symbol *) in line 832
      protection public
      21 lines of code
      1 parameters
      2 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable starts_locked defined in check_locking.c
      uses function in_tracker_list(struct tracker_list *,int,const char *,struct symbol *) defined in smatch.h
      uses variable starts_unlocked defined in check_locking.c
      uses variable tracker::owner defined in smatch.h
      uses variable tracker::name defined in smatch.h
      uses variable tracker::sym defined in smatch.h
      uses macro definition sm_msg defined in smatch.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses function check_returns_consistently(struct tracker *,struct smatch_state *) defined in check_locking.c
   function clear_lists(void) in line 854
      protection public
      16 lines of code
      1 parameters
      1 conditional paths
      uses variable func_has_transition defined in check_locking.c
      uses macro definition FALSE defined in smatch.h
      uses function free_trackers_and_list(struct tracker_list **) defined in smatch.h
      uses variable starts_locked defined in check_locking.c
      uses variable starts_unlocked defined in check_locking.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable all_returns defined in check_locking.c
      uses variable locks_on_return::locked defined in check_locking.c
      uses variable locks_on_return::unlocked defined in check_locking.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses function __free_ptr_list(struct ptr_list **) defined in ptrlist.c
   function match_func_end(struct symbol *) in line 871
      protection public
      9 lines of code
      1 parameters
      3 conditional paths
      uses variable __inline_fn defined in smatch.h
      uses variable func_has_transition defined in check_locking.c
      uses function check_consistency(struct symbol *) defined in check_locking.c
      uses variable sym defined in smatch_type.c
      uses function clear_lists(void) defined in check_locking.c
   function register_lock(int) in line 881
      protection public
      17 lines of code
      1 parameters
      5 conditional paths
      uses variable lock_table defined in check_locking.c
      uses variable lock_info::return_type defined in check_locking.c
      uses enumvalue ret_non_zero defined in check_locking.c
      uses function return_implies_state(const char *,long long,long long,implication_hook *,void *) defined in smatch.h
      uses variable lock_info::function defined in check_locking.c
      uses variable valid_ptr_min defined in smatch.h
      uses variable valid_ptr_max defined in smatch.h
      uses function match_lock_held(const char *,struct expression *,struct expression *,void *) defined in check_locking.c
      uses function match_lock_failed(const char *,struct expression *,struct expression *,void *) defined in check_locking.c
      uses enumvalue ret_any defined in check_locking.c
      uses variable lock_info::arg defined in check_locking.c
      uses macro definition RETURN_VAL defined in check_locking.c
      uses function add_function_assign_hook(const char *,func_hook *,void *) defined in smatch.h
      uses function match_returns_locked(const char *,struct expression *,void *) defined in check_locking.c
      uses function add_function_hook(const char *,func_hook *,void *) defined in smatch.h
      uses function match_lock_unlock(const char *,struct expression *,void *) defined in check_locking.c
      uses enumvalue ret_zero defined in check_locking.c
   function load_table(struct lock_info *,int) in line 899
      protection public
      13 lines of code
      2 parameters
      3 conditional paths
      uses variable lock_table defined in check_locking.c
      uses enumvalue LOCK defined in check_locking.c
      uses function register_lock(int) defined in check_locking.c
      uses function add_function_hook(const char *,func_hook *,void *) defined in smatch.h
      uses function match_lock_unlock(const char *,struct expression *,void *) defined in check_locking.c
   function print_held_locks(void) in line 914
      protection public
      15 lines of code
      1 parameters
      1 conditional paths
      uses function __get_cur_stree(void) defined in smatch.h
      uses macro definition FOR_EACH_MY_SM defined in avl.h
      uses variable my_id defined in check_locking.c
      uses variable sm_state::state defined in smatch.h
      uses macro definition sm_printf defined in smatch.h
      uses variable sm_state::name defined in smatch.h
      uses macro definition END_FOR_EACH_SM defined in avl.h
   function check_locking(int) in line 930
      protection public
      15 lines of code
      1 parameters
      3 conditional paths
      uses variable my_id defined in check_locking.c
      uses variable option_project defined in smatch.c
      uses enumvalue PROJ_WINE defined in smatch.h
      uses function load_table(struct lock_info *,int) defined in check_locking.c
      uses variable wine_lock_table defined in check_locking.c
      uses macro definition ARRAY_SIZE defined in lib.h
      uses enumvalue PROJ_KERNEL defined in smatch.h
      uses variable kernel_lock_table defined in check_locking.c
      uses function add_unmatched_state_hook(int,unmatched_func_t *) defined in smatch.h
      uses function unmatched_state(struct sm_state *) defined in check_locking.c
      uses function add_split_return_callback(void(*)(int return_id, char *return_ranges, struct expression *returned_expr)) defined in smatch.h
      uses function match_return(int,char *,struct expression *) defined in check_locking.c
      uses function add_hook(void *,enum hook_type) defined in smatch.h
      uses function match_func_end(struct symbol *) defined in check_locking.c
      uses enumvalue END_FUNC_HOOK defined in smatch.h
   variable lock_info::action in line 59
      protection public
   variable lock_info::arg in line 62
      protection public
   variable lock_info::function in line 59
      protection public
   variable lock_info::name in line 61
      protection public
   variable lock_info::return_type in line 62
      protection public
   variable locks_on_return::line in line 363
      protection public
   variable locks_on_return::locked in line 364
      protection public
   variable locks_on_return::return_values in line 366
      protection public
   variable locks_on_return::unlocked in line 365
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/check_logical_instead_of_bitwise.c
module check_logical_instead_of_bitwise.c
   variable my_id in line 20
      protection public
   function is_bitshift(struct expression *) in line 22
      protection public
      10 lines of code
      1 parameters
      3 conditional paths
      uses function strip_expr(struct expression *) defined in smatch.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_BINOP defined in expression.h
      uses variable expression::op defined in expression.h
      uses enumvalue SPECIAL_LEFTSHIFT defined in token.h
      uses enumvalue SPECIAL_RIGHTSHIFT defined in token.h
   function match_logic(struct expression *) in line 33
      protection public
      20 lines of code
      1 parameters
      6 conditional paths
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_LOGICAL defined in expression.h
      uses function get_macro_name(struct position) defined in macro_table.c
      uses variable expression::pos defined in expression.h
      uses function get_value(struct expression *,sval_t *) defined in smatch.h
      uses variable expression::right defined in expression.h
      uses variable expression::left defined in expression.h
      uses variable sval_t::value defined in smatch.h
      uses macro definition sm_msg defined in smatch.h
   function match_assign(struct expression *) in line 54
      protection public
      10 lines of code
      1 parameters
      3 conditional paths
      uses variable expression::right defined in expression.h
      uses function strip_expr(struct expression *) defined in smatch.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_LOGICAL defined in expression.h
      uses function is_bitshift(struct expression *) defined in check_logical_instead_of_bitwise.c
      uses variable expression::left defined in expression.h
      uses macro definition sm_msg defined in smatch.h
   function check_logical_instead_of_bitwise(int) in line 65
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses variable my_id defined in check_logical_instead_of_bitwise.c
      uses function add_hook(void *,enum hook_type) defined in smatch.h
      uses function match_logic(struct expression *) defined in check_logical_instead_of_bitwise.c
      uses enumvalue LOGIC_HOOK defined in smatch.h
      uses function match_assign(struct expression *) defined in check_logical_instead_of_bitwise.c
      uses enumvalue ASSIGNMENT_HOOK defined in smatch.h
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/check_macro_side_effects.c
module check_macro_side_effects.c
   variable my_id in line 23
      protection public
   variable ignored_macros in line 25
      protection public
   variable old_pos in line 25
      protection public
   function alloc_my_state(struct expression *) in line 28
      protection public
      13 lines of code
      1 parameters
      1 conditional paths
      uses variable name defined in smatch_type.c
      uses function strip_expr(struct expression *) defined in smatch.h
      uses function expr_to_str(struct expression *) defined in smatch.h
      uses variable smatch_state::name defined in smatch.h
      uses function alloc_sname(const char *) defined in smatch_slist.c
      uses function free_string(char *) defined in smatch.h
      uses variable smatch_state::data defined in smatch.h
   function defined_inside_macro(struct position,struct expression *) in line 42
      protection public
      17 lines of code
      2 parameters
      6 conditional paths
      uses variable name defined in smatch_type.c
      uses variable sym defined in smatch_type.c
      uses function expr_to_var_sym(struct expression *,struct symbol **) defined in smatch.h
      uses variable symbol::scope defined in struct.c
      uses variable scope::token defined in scope.h
      uses function positions_eq(struct position,struct position) defined in smatch.h
      uses variable token::pos defined in token.h
      uses function free_string(char *) defined in smatch.h
   function affected_inside_macro_before(struct expression *) in line 60
      protection public
      19 lines of code
      1 parameters
      4 conditional paths
      uses function get_sm_state_expr(int,struct expression *) defined in smatch.h
      uses variable my_id defined in check_macro_side_effects.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable sm_state::possible defined in smatch.h
      uses variable sm_state::state defined in smatch.h
      uses variable smatch_state::data defined in smatch.h
      uses function positions_eq(struct position,struct position) defined in smatch.h
      uses variable expression::pos defined in expression.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function is_ignored_macro(const char *) in line 80
      protection public
      10 lines of code
      1 parameters
      2 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable ignored_macros defined in check_macro_side_effects.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function match_unop(struct expression *) in line 91
      protection public
      34 lines of code
      1 parameters
      7 conditional paths
      uses variable name defined in smatch_type.c
      uses variable expression::op defined in expression.h
      uses enumvalue SPECIAL_INCREMENT defined in token.h
      uses enumvalue SPECIAL_DECREMENT defined in token.h
      uses function get_macro_name(struct position) defined in macro_table.c
      uses variable expression::pos defined in expression.h
      uses function strip_expr(struct expression *) defined in smatch.h
      uses variable expression::unop defined in expression.h
      uses function defined_inside_macro(struct position,struct expression *) defined in check_macro_side_effects.c
      uses function is_ignored_macro(const char *) defined in check_macro_side_effects.c
      uses function affected_inside_macro_before(struct expression *) defined in check_macro_side_effects.c
      uses function set_state_expr(int,struct expression *,struct smatch_state *) defined in smatch.h
      uses variable my_id defined in check_macro_side_effects.c
      uses function alloc_my_state(struct expression *) defined in check_macro_side_effects.c
      uses variable old_pos defined in check_macro_side_effects.c
      uses function positions_eq(struct position,struct position) defined in smatch.h
      uses function expr_to_str(struct expression *) defined in smatch.h
      uses macro definition sm_msg defined in smatch.h
      uses function free_string(char *) defined in smatch.h
   function match_stmt(struct statement *) in line 126
      protection public
      5 lines of code
      1 parameters
      2 conditional paths
      uses function positions_eq(struct position,struct position) defined in smatch.h
      uses variable old_pos defined in check_macro_side_effects.c
      uses variable statement::pos defined in parse.h
      uses variable position::line defined in lib.h
   function register_ignored_macros(void) in line 132
      protection public
      23 lines of code
      1 parameters
      5 conditional paths
      uses variable name defined in smatch_type.c
      uses function snprintf(char *,int,char *,char *) defined in sm_overflow6.c
      uses variable option_project_str defined in smatch.c
      uses function get_tokens_file(const char *) defined in smatch.h
      uses enumvalue TOKEN_STREAMBEGIN defined in token.h
      uses variable token::next defined in token.h
      uses enumvalue TOKEN_STREAMEND defined in token.h
      uses enumvalue TOKEN_IDENT defined in token.h
      uses function alloc_string(const char *) defined in smatch.h
      uses function show_ident(const struct ident *) defined in token.h
      uses variable token::ident defined in token.h
      uses macro definition add_ptr_list defined in ptrlist.h
      uses variable ignored_macros defined in check_macro_side_effects.c
   function check_macro_side_effects(int) in line 156
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses variable my_id defined in check_macro_side_effects.c
      uses variable option_spammy defined in smatch.c
      uses function add_hook(void *,enum hook_type) defined in smatch.h
      uses function match_unop(struct expression *) defined in check_macro_side_effects.c
      uses enumvalue OP_HOOK defined in smatch.h
      uses function match_stmt(struct statement *) defined in check_macro_side_effects.c
      uses enumvalue STMT_HOOK defined in smatch.h
      uses function register_ignored_macros(void) defined in check_macro_side_effects.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/check_macros.c
module check_macros.c
   variable my_id in line 20
      protection public
   function match_inside(struct expression *,struct position) in line 22
      protection public
      16 lines of code
      2 parameters
      5 conditional paths
      uses variable name defined in smatch_type.c
      uses function positions_eq(struct position,struct position) defined in smatch.h
      uses variable expression::pos defined in expression.h
      uses variable token::pos defined in token.h
      uses variable expression::unop defined in expression.h
      uses function get_macro_name(struct position) defined in macro_table.c
      uses macro definition sm_msg defined in smatch.h
   function match_one_side(struct expression *,struct position,int) in line 39
      protection public
      20 lines of code
      3 parameters
      7 conditional paths
      uses variable name defined in smatch_type.c
      uses function op(void) defined in loop2.c
      uses variable expression::op defined in expression.h
      uses function positions_eq(struct position,struct position) defined in smatch.h
      uses variable expression::right defined in expression.h
      uses variable expression::pos defined in expression.h
      uses variable token::pos defined in token.h
      uses variable expression::left defined in expression.h
      uses function get_macro_name(struct position) defined in macro_table.c
      uses variable option_project defined in smatch.c
      uses enumvalue PROJ_WINE defined in smatch.h
      uses macro definition sm_msg defined in smatch.h
   function match_join(struct expression *) in line 60
      protection public
      12 lines of code
      1 parameters
      5 conditional paths
      uses variable expression::left defined in expression.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_PREOP defined in expression.h
      uses function match_inside(struct expression *,struct position) defined in check_macros.c
      uses variable expression::pos defined in expression.h
      uses variable expression::right defined in expression.h
      uses enumvalue EXPR_POSTOP defined in expression.h
      uses enumvalue EXPR_BINOP defined in expression.h
      uses function match_one_side(struct expression *,struct position,int) defined in check_macros.c
      uses variable expression::op defined in expression.h
   function check_macros(int) in line 73
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses variable my_id defined in check_macros.c
      uses function add_hook(void *,enum hook_type) defined in smatch.h
      uses function match_join(struct expression *) defined in check_macros.c
      uses enumvalue BINOP_HOOK defined in smatch.h
      uses enumvalue LOGIC_HOOK defined in smatch.h
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/check_memory.c
module check_memory.c
   variable my_id in line 26
      protection public
   variable arguments in line 43
      protection public
   variable allocation_funcs in line 45
      protection public
   function check_sm_is_leaked(struct sm_state *) in line 24
      protection public
      8 lines of code
      1 parameters
      2 conditional paths
      uses function possibly_allocated(struct state_list *) defined in check_memory.c
      uses variable sm_state::possible defined in smatch.h
      uses function is_null(const char *,struct symbol *) defined in check_memory.c
      uses variable sm_state::name defined in smatch.h
      uses variable sm_state::sym defined in smatch.h
      uses function is_argument(struct symbol *) defined in check_memory.c
      uses function parent_is_assigned(struct symbol *) defined in check_memory.c
      uses macro definition sm_msg defined in smatch.h
   function STATE(allocated) in line 28
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function STATE(assigned) in line 29
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function STATE(isfree) in line 30
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function STATE(malloced) in line 31
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function STATE(isnull) in line 32
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function STATE(unfree) in line 33
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function get_parent_name(struct symbol *) in line 52
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses variable buf defined in sm_fake_assignment.c
      uses variable sym defined in smatch_type.c
      uses variable symbol::ident defined in struct.c
      uses macro definition NULL defined in sm_implied3.c
      uses function snprintf(char *,int,char *,char *) defined in sm_overflow6.c
      uses variable ident::name defined in token.h
      uses function alloc_string(const char *) defined in smatch.h
   function is_parent_sym(const char *) in line 64
      protection public
      6 lines of code
      1 parameters
      2 conditional paths
      uses variable name defined in smatch_type.c
   function is_complex(struct expression *) in line 71
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses variable name defined in smatch_type.c
      uses function expr_to_var(struct expression *) defined in smatch.h
      uses function free_string(char *) defined in smatch.h
   function unmatched_state(struct sm_state *) in line 83
      protection public
      6 lines of code
      1 parameters
      2 conditional paths
      uses function is_parent_sym(const char *) defined in check_memory.c
      uses variable sm_state::name defined in smatch.h
      uses variable undefined defined in smatch.h
   function assign_parent(struct symbol *) in line 90
      protection public
      10 lines of code
      1 parameters
      2 conditional paths
      uses variable name defined in smatch_type.c
      uses function get_parent_name(struct symbol *) defined in check_memory.c
      uses variable sym defined in smatch_type.c
      uses function set_state(int,const char *,struct symbol *,struct smatch_state *) defined in smatch.h
      uses variable my_id defined in check_memory.c
      uses function free_string(char *) defined in smatch.h
   function parent_is_assigned(struct symbol *) in line 101
      protection public
      14 lines of code
      1 parameters
      3 conditional paths
      uses variable name defined in smatch_type.c
      uses function get_parent_name(struct symbol *) defined in check_memory.c
      uses variable sym defined in smatch_type.c
      uses function get_state(int,const char *,struct symbol *) defined in smatch.h
      uses variable my_id defined in check_memory.c
      uses function free_string(char *) defined in smatch.h
   function is_allocation(struct expression *) in line 116
      protection public
      20 lines of code
      1 parameters
      5 conditional paths
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_CALL defined in expression.h
      uses function expr_to_var_sym(struct expression *,struct symbol **) defined in smatch.h
      uses variable expression::fn defined in expression.h
      uses macro definition NULL defined in sm_implied3.c
      uses variable allocation_funcs defined in check_memory.c
      uses function free_string(char *) defined in smatch.h
   function is_freed(const char *,struct symbol *) in line 137
      protection public
      10 lines of code
      2 parameters
      2 conditional paths
      uses function get_possible_states(int,const char *,struct symbol *) defined in smatch.h
      uses variable my_id defined in check_memory.c
      uses variable name defined in smatch_type.c
      uses variable sym defined in smatch_type.c
      uses function slist_has_state(struct state_list *,struct smatch_state *) defined in smatch_slist.c
   function is_argument(struct symbol *) in line 148
      protection public
      10 lines of code
      1 parameters
      2 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable arguments defined in check_memory.c
      uses variable sym defined in smatch_type.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function match_function_def(struct symbol *) in line 159
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable sym defined in smatch_type.c
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::base_type defined in struct.c
      uses variable symbol::arguments defined in struct.c
      uses function add_tracker(struct tracker_list **,int,const char *,struct symbol *) defined in smatch.h
      uses variable arguments defined in check_memory.c
      uses variable my_id defined in check_memory.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function is_parent(struct expression *) in line 168
      protection public
      6 lines of code
      1 parameters
      2 conditional paths
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_DEREF defined in expression.h
   function match_assign(struct expression *) in line 175
      protection public
      52 lines of code
      1 parameters
      10 conditional paths
      uses variable expression::left defined in expression.h
      uses variable expression::right defined in expression.h
      uses macro definition NULL defined in sm_implied3.c
      uses variable sm_state::left defined in smatch.h
      uses function strip_expr(struct expression *) defined in smatch.h
      uses function expr_to_str_sym(struct expression *,struct symbol **) defined in smatch.h
      uses variable sm_state::right defined in smatch.h
      uses enumvalue EXPR_ASSIGNMENT defined in expression.h
      uses function is_allocation(struct expression *) defined in check_memory.c
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::modifiers defined in struct.c
      uses macro definition MOD_NONLOCAL defined in symbol.h
      uses macro definition MOD_STATIC defined in symbol.h
      uses macro definition MOD_ADDRESSABLE defined in symbol.h
      uses function parent_is_assigned(struct symbol *) defined in check_memory.c
      uses function set_state(int,const char *,struct symbol *,struct smatch_state *) defined in smatch.h
      uses variable my_id defined in check_memory.c
      uses function exit(int) defined in test-be.c
      uses variable sm_state::state defined in smatch.h
      uses function get_state(int,const char *,struct symbol *) defined in smatch.h
      uses function is_complex(struct expression *) defined in check_memory.c
      uses macro definition sm_msg defined in smatch.h
      uses function is_zero(struct expression *) defined in smatch.h
      uses function get_possible_states(int,const char *,struct symbol *) defined in smatch.h
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses function check_sm_is_leaked(struct sm_state *) defined in check_memory.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses function is_freed(const char *,struct symbol *) defined in check_memory.c
      uses function is_parent(struct expression *) defined in check_memory.c
      uses function assign_parent(struct symbol *) defined in check_memory.c
      uses function free_string(char *) defined in smatch.h
   function is_null(const char *,struct symbol *) in line 228
      protection public
      9 lines of code
      2 parameters
      2 conditional paths
      uses function get_state(int,const char *,struct symbol *) defined in smatch.h
      uses variable my_id defined in check_memory.c
      uses variable name defined in smatch_type.c
      uses variable sym defined in smatch_type.c
      uses variable smatch_state::name defined in smatch.h
   function set_unfree(struct sm_state *,struct expression *) in line 238
      protection public
      5 lines of code
      2 parameters
      2 conditional paths
      uses function slist_has_state(struct state_list *,struct smatch_state *) defined in smatch_slist.c
      uses variable sm_state::possible defined in smatch.h
      uses function set_state(int,const char *,struct symbol *,struct smatch_state *) defined in smatch.h
      uses variable my_id defined in check_memory.c
      uses variable sm_state::name defined in smatch.h
      uses variable sm_state::sym defined in smatch.h
   function match_free_func(const char *,struct expression *,void *) in line 244
      protection public
      14 lines of code
      3 parameters
      2 conditional paths
      uses function get_argument_from_call_expr(struct expression_list *,int) defined in smatch.h
      uses variable expression::args defined in expression.h
      uses function expr_to_var_sym(struct expression *,struct symbol **) defined in smatch.h
      uses function set_state(int,const char *,struct symbol *,struct smatch_state *) defined in smatch.h
      uses variable my_id defined in check_memory.c
      uses function free_string(char *) defined in smatch.h
   function possibly_allocated(struct state_list *) in line 259
      protection public
      12 lines of code
      1 parameters
      3 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable sm_state::state defined in smatch.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function check_tracker_is_leaked(struct tracker *) in line 281
      protection public
      9 lines of code
      1 parameters
      2 conditional paths
      uses function get_sm_state(int,const char *,struct symbol *) defined in smatch.h
      uses function check_sm_is_leaked(struct sm_state *) defined in check_memory.c
   function match_declarations(struct symbol *) in line 291
      protection public
      21 lines of code
      1 parameters
      4 conditional paths
      uses variable name defined in smatch_type.c
      uses variable sym defined in smatch_type.c
      uses enumvalue SYM_ARRAY defined in symbol.h
      uses variable symbol::ident defined in struct.c
      uses variable ident::name defined in token.h
      uses variable symbol::initializer defined in struct.c
      uses function is_allocation(struct expression *) defined in check_memory.c
      uses function set_state(int,const char *,struct symbol *,struct smatch_state *) defined in smatch.h
      uses variable my_id defined in check_memory.c
      uses function add_scope_hook(scope_hook *,void *) defined in smatch.h
      uses function check_tracker_is_leaked(struct tracker *) defined in check_memory.c
      uses function alloc_tracker(int,const char *,struct symbol *) defined in smatch.h
      uses function scoped_state(int,const char *,struct symbol *) defined in smatch.h
      uses function assign_parent(struct symbol *) defined in check_memory.c
   function check_for_allocated(void) in line 313
      protection public
      10 lines of code
      1 parameters
      1 conditional paths
      uses function __get_cur_stree(void) defined in smatch.h
      uses macro definition FOR_EACH_MY_SM defined in avl.h
      uses variable my_id defined in check_memory.c
      uses function check_sm_is_leaked(struct sm_state *) defined in check_memory.c
      uses macro definition END_FOR_EACH_SM defined in avl.h
   function match_return(struct expression *) in line 324
      protection public
      13 lines of code
      1 parameters
      3 conditional paths
      uses variable name defined in smatch_type.c
      uses variable sym defined in smatch_type.c
      uses variable __inline_fn defined in smatch.h
      uses function expr_to_str_sym(struct expression *,struct symbol **) defined in smatch.h
      uses function assign_parent(struct symbol *) defined in check_memory.c
      uses function free_string(char *) defined in smatch.h
      uses function check_for_allocated(void) defined in check_memory.c
   function set_new_true_false_paths(const char *,struct symbol *) in line 338
      protection public
      20 lines of code
      2 parameters
      4 conditional paths
      uses function get_state(int,const char *,struct symbol *) defined in smatch.h
      uses variable my_id defined in check_memory.c
      uses variable name defined in smatch_type.c
      uses variable sym defined in smatch_type.c
      uses macro definition sm_msg defined in smatch.h
      uses function set_true_false_states(int,const char *,struct symbol *,struct smatch_state *,struct smatch_state *) defined in smatch.h
   function match_condition(struct expression *) in line 359
      protection public
      25 lines of code
      1 parameters
      6 conditional paths
      uses variable sym defined in smatch_type.c
      uses variable name defined in smatch_type.c
      uses function strip_expr(struct expression *) defined in smatch.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_PREOP defined in expression.h
      uses enumvalue EXPR_SYMBOL defined in expression.h
      uses enumvalue EXPR_DEREF defined in expression.h
      uses function expr_to_var_sym(struct expression *,struct symbol **) defined in smatch.h
      uses function set_new_true_false_paths(const char *,struct symbol *) defined in check_memory.c
      uses function free_string(char *) defined in smatch.h
      uses enumvalue EXPR_ASSIGNMENT defined in expression.h
      uses variable expression::right defined in expression.h
      uses variable expression::left defined in expression.h
   function match_function_call(struct expression *) in line 385
      protection public
      21 lines of code
      1 parameters
      4 conditional paths
      uses variable sym defined in smatch_type.c
      uses variable name defined in smatch_type.c
      uses variable sm_state::state defined in smatch.h
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable expression::args defined in expression.h
      uses function strip_expr(struct expression *) defined in smatch.h
      uses function expr_to_str_sym(struct expression *,struct symbol **) defined in smatch.h
      uses function get_sm_state(int,const char *,struct symbol *) defined in smatch.h
      uses variable my_id defined in check_memory.c
      uses function possibly_allocated(struct state_list *) defined in check_memory.c
      uses function set_state(int,const char *,struct symbol *,struct smatch_state *) defined in smatch.h
      uses function assign_parent(struct symbol *) defined in check_memory.c
      uses function free_string(char *) defined in smatch.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function match_end_func(struct symbol *) in line 407
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses variable __inline_fn defined in smatch.h
      uses function check_for_allocated(void) defined in check_memory.c
      uses function free_trackers_and_list(struct tracker_list **) defined in smatch.h
      uses variable arguments defined in check_memory.c
   function register_funcs_from_file(void) in line 415
      protection public
      25 lines of code
      1 parameters
      6 conditional paths
      uses macro definition func defined in preprocessor1.c
      uses function get_tokens_file(const char *) defined in smatch.h
      uses enumvalue TOKEN_STREAMBEGIN defined in token.h
      uses variable token::next defined in token.h
      uses enumvalue TOKEN_STREAMEND defined in token.h
      uses enumvalue TOKEN_IDENT defined in token.h
      uses function show_ident(const struct ident *) defined in token.h
      uses variable token::ident defined in token.h
      uses enumvalue TOKEN_NUMBER defined in token.h
      uses variable token::number defined in token.h
      uses function add_function_hook(const char *,func_hook *,void *) defined in smatch.h
      uses function match_free_func(const char *,struct expression *,void *) defined in check_memory.c
   function check_memory(int) in line 441
      protection public
      19 lines of code
      1 parameters
      2 conditional paths
      uses variable my_id defined in check_memory.c
      uses function add_unmatched_state_hook(int,unmatched_func_t *) defined in smatch.h
      uses function unmatched_state(struct sm_state *) defined in check_memory.c
      uses function add_hook(void *,enum hook_type) defined in smatch.h
      uses function match_function_def(struct symbol *) defined in check_memory.c
      uses enumvalue FUNC_DEF_HOOK defined in smatch.h
      uses function match_declarations(struct symbol *) defined in check_memory.c
      uses enumvalue DECLARATION_HOOK defined in smatch.h
      uses function match_function_call(struct expression *) defined in check_memory.c
      uses enumvalue FUNCTION_CALL_HOOK defined in smatch.h
      uses function match_condition(struct expression *) defined in check_memory.c
      uses enumvalue CONDITION_HOOK defined in smatch.h
      uses function match_assign(struct expression *) defined in check_memory.c
      uses enumvalue ASSIGNMENT_HOOK defined in smatch.h
      uses function match_return(struct expression *) defined in check_memory.c
      uses enumvalue RETURN_HOOK defined in smatch.h
      uses function match_end_func(struct symbol *) defined in check_memory.c
      uses enumvalue END_FUNC_HOOK defined in smatch.h
      uses function add_modification_hook(int,modification_hook *) defined in smatch.h
      uses function set_unfree(struct sm_state *,struct expression *) defined in check_memory.c
      uses variable option_project defined in smatch.c
      uses enumvalue PROJ_KERNEL defined in smatch.h
      uses function add_function_hook(const char *,func_hook *,void *) defined in smatch.h
      uses function match_free_func(const char *,struct expression *,void *) defined in check_memory.c
      uses function register_funcs_from_file(void) defined in check_memory.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/check_memset.c
module check_memset.c
   variable my_id in line 20
      protection public
   function match_memset(const char *,struct expression *,void *) in line 22
      protection public
      15 lines of code
      3 parameters
      4 conditional paths
      uses function get_argument_from_call_expr(struct expression_list *,int) defined in smatch.h
      uses variable expression::args defined in expression.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_VALUE defined in expression.h
      uses function get_value(struct expression *,sval_t *) defined in smatch.h
      uses variable sval_t::value defined in smatch.h
      uses macro definition sm_msg defined in smatch.h
   function check_memset(int) in line 38
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses variable my_id defined in check_memset.c
      uses function add_function_hook(const char *,func_hook *,void *) defined in smatch.h
      uses function match_memset(const char *,struct expression *,void *) defined in check_memset.c
      uses macro definition NULL defined in sm_implied3.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/check_min_t.c
module check_min_t.c
   variable my_id in line 20
      protection public
   function match_assign(struct expression *) in line 22
      protection public
      27 lines of code
      1 parameters
      7 conditional paths
      uses variable name defined in smatch_type.c
      uses variable expression::op defined in expression.h
      uses function get_macro_name(struct position) defined in macro_table.c
      uses variable expression::pos defined in expression.h
      uses function get_absolute_max(struct expression *,sval_t *) defined in smatch.h
      uses variable expression::left defined in expression.h
      uses variable expression::right defined in expression.h
      uses function sval_cmp(sval_t,sval_t) defined in smatch.h
      uses function expr_to_str(struct expression *) defined in smatch.h
      uses macro definition sm_msg defined in smatch.h
      uses function sval_to_str(sval_t) defined in smatch.h
      uses function free_string(char *) defined in smatch.h
   function check_min_t(int) in line 50
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses variable my_id defined in check_min_t.c
      uses variable option_project defined in smatch.c
      uses enumvalue PROJ_KERNEL defined in smatch.h
      uses function add_hook(void *,enum hook_type) defined in smatch.h
      uses function match_assign(struct expression *) defined in check_min_t.c
      uses enumvalue ASSIGNMENT_HOOK defined in smatch.h
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/check_missing_break.c
module check_missing_break.c
   variable my_id in line 27
      protection public
   variable skip_this in line 28
      protection public
   variable in_switch_stmt in line 48
      protection public
   variable last_print_expr in line 66
      protection public
   variable in_case in line 114
      protection public
   function STATE(used) in line 45
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function STATE(no_break) in line 46
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function alloc_my_state(struct expression *) in line 50
      protection public
      15 lines of code
      1 parameters
      2 conditional paths
      uses variable name defined in smatch_type.c
      uses function strip_expr(struct expression *) defined in smatch.h
      uses function expr_to_str(struct expression *) defined in smatch.h
      uses function alloc_string(const char *) defined in smatch.h
      uses variable smatch_state::name defined in smatch.h
      uses function alloc_sname(const char *) defined in smatch_slist.c
      uses function free_string(char *) defined in smatch.h
      uses variable smatch_state::data defined in smatch.h
   function print_missing_break(struct expression *) in line 67
      protection public
      12 lines of code
      1 parameters
      2 conditional paths
      uses variable name defined in smatch_type.c
      uses function get_switch_expr(void) defined in smatch.h
      uses variable last_print_expr defined in check_missing_break.c
      uses function expr_to_var(struct expression *) defined in smatch.h
      uses macro definition sm_msg defined in smatch.h
      uses function free_string(char *) defined in smatch.h
   function match_assign(struct expression *) in line 80
      protection public
      15 lines of code
      1 parameters
      4 conditional paths
      uses variable expression::left defined in expression.h
      uses variable expression::op defined in expression.h
      uses function get_switch_expr(void) defined in smatch.h
      uses function strip_expr(struct expression *) defined in smatch.h
      uses function get_state_expr(int,struct expression *) defined in smatch.h
      uses variable my_id defined in check_missing_break.c
      uses function print_missing_break(struct expression *) defined in check_missing_break.c
      uses function set_state_expr(int,struct expression *,struct smatch_state *) defined in smatch.h
      uses function alloc_my_state(struct expression *) defined in check_missing_break.c
      uses variable skip_this defined in check_missing_break.c
   function match_symbol(struct expression *) in line 96
      protection public
      12 lines of code
      1 parameters
      4 conditional paths
      uses function outside_of_function(void) defined in smatch.h
      uses function get_switch_expr(void) defined in smatch.h
      uses function strip_expr(struct expression *) defined in smatch.h
      uses variable skip_this defined in check_missing_break.c
      uses function set_state_expr(int,struct expression *,struct smatch_state *) defined in smatch.h
      uses variable my_id defined in check_missing_break.c
   function unmatched_state(struct sm_state *) in line 109
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function merge_hook(struct smatch_state *,struct smatch_state *) in line 115
      protection public
      13 lines of code
      2 parameters
      4 conditional paths
      uses variable in_case defined in check_missing_break.c
      uses function get_switch_expr(void) defined in smatch.h
   function match_stmt(struct statement *) in line 129
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses variable statement::type defined in parse.h
      uses enumvalue STMT_CASE defined in parse.h
      uses variable in_case defined in check_missing_break.c
   function match_switch(struct statement *) in line 137
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses variable statement::type defined in parse.h
      uses enumvalue STMT_SWITCH defined in parse.h
      uses variable in_switch_stmt defined in check_missing_break.c
   function delete_my_states(int) in line 145
      protection public
      15 lines of code
      1 parameters
      1 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses macro definition FOR_EACH_MY_SM defined in avl.h
      uses variable sm_state::owner defined in smatch.h
      uses function __get_cur_stree(void) defined in smatch.h
      uses macro definition add_ptr_list defined in ptrlist.h
      uses macro definition END_FOR_EACH_SM defined in avl.h
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses function delete_state(int,const char *,struct symbol *) defined in smatch.h
      uses variable sm_state::name defined in smatch.h
      uses variable sm_state::sym defined in smatch.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses function free_slist(struct state_list **) defined in smatch_slist.c
   function match_switch_end(struct statement *) in line 161
      protection public
      11 lines of code
      1 parameters
      3 conditional paths
      uses variable statement::type defined in parse.h
      uses enumvalue STMT_SWITCH defined in parse.h
      uses variable in_switch_stmt defined in check_missing_break.c
      uses function delete_my_states(int) defined in check_missing_break.c
      uses variable my_id defined in check_missing_break.c
   function check_missing_break(int) in line 173
      protection public
      13 lines of code
      1 parameters
      1 conditional paths
      uses variable my_id defined in check_missing_break.c
      uses function add_unmatched_state_hook(int,unmatched_func_t *) defined in smatch.h
      uses function unmatched_state(struct sm_state *) defined in check_missing_break.c
      uses function add_merge_hook(int,merge_func_t *) defined in smatch.h
      uses function merge_hook(struct smatch_state *,struct smatch_state *) defined in check_missing_break.c
      uses function add_hook(void *,enum hook_type) defined in smatch.h
      uses function match_assign(struct expression *) defined in check_missing_break.c
      uses enumvalue ASSIGNMENT_HOOK defined in smatch.h
      uses function match_symbol(struct expression *) defined in check_missing_break.c
      uses enumvalue SYM_HOOK defined in smatch.h
      uses function match_stmt(struct statement *) defined in check_missing_break.c
      uses enumvalue STMT_HOOK defined in smatch.h
      uses function match_switch(struct statement *) defined in check_missing_break.c
      uses function match_switch_end(struct statement *) defined in check_missing_break.c
      uses enumvalue STMT_HOOK_AFTER defined in smatch.h
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/check_mod_timer.c
module check_mod_timer.c
   variable my_id in line 21
      protection public
   function match_mod_timer(const char *,struct expression *,void *) in line 23
      protection public
      10 lines of code
      3 parameters
      2 conditional paths
      uses function get_argument_from_call_expr(struct expression_list *,int) defined in smatch.h
      uses variable expression::args defined in expression.h
      uses function get_value(struct expression *,sval_t *) defined in smatch.h
      uses variable sval_t::value defined in smatch.h
      uses macro definition sm_msg defined in smatch.h
   function check_mod_timer(int) in line 34
      protection public
      8 lines of code
      1 parameters
      2 conditional paths
      uses variable option_project defined in smatch.c
      uses enumvalue PROJ_KERNEL defined in smatch.h
      uses variable my_id defined in check_mod_timer.c
      uses function add_function_hook(const char *,func_hook *,void *) defined in smatch.h
      uses function match_mod_timer(const char *,struct expression *,void *) defined in check_mod_timer.c
      uses macro definition NULL defined in sm_implied3.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/check_no_effect.c
module check_no_effect.c
   variable my_id in line 20
      protection public
   function match_stmt(struct statement *) in line 22
      protection public
      30 lines of code
      1 parameters
      16 conditional paths
      uses variable statement::type defined in parse.h
      uses enumvalue STMT_EXPRESSION defined in parse.h
      uses variable statement::expression defined in parse.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_PREOP defined in expression.h
      uses variable expression::op defined in expression.h
      uses enumvalue EXPR_POSTOP defined in expression.h
      uses enumvalue EXPR_STATEMENT defined in expression.h
      uses enumvalue EXPR_ASSIGNMENT defined in expression.h
      uses enumvalue EXPR_CALL defined in expression.h
      uses enumvalue EXPR_CONDITIONAL defined in expression.h
      uses enumvalue EXPR_SELECT defined in expression.h
      uses enumvalue EXPR_CAST defined in expression.h
      uses enumvalue EXPR_FORCE_CAST defined in expression.h
      uses enumvalue EXPR_COMMA defined in expression.h
      uses function in_expression_statement(void) defined in smatch.h
      uses macro definition sm_msg defined in smatch.h
   function check_no_effect(int) in line 53
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable my_id defined in check_no_effect.c
      uses function add_hook(void *,enum hook_type) defined in smatch.h
      uses function match_stmt(struct statement *) defined in check_no_effect.c
      uses enumvalue STMT_HOOK defined in smatch.h
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/check_no_if_block.c
module check_no_if_block.c
   variable my_id in line 20
      protection public
   function match_if_stmt(struct statement *) in line 22
      protection public
      14 lines of code
      1 parameters
      6 conditional paths
      uses variable __inline_fn defined in smatch.h
      uses variable statement::type defined in parse.h
      uses enumvalue STMT_IF defined in parse.h
      uses variable statement::if_true defined in parse.h
      uses enumvalue STMT_COMPOUND defined in parse.h
      uses function get_macro_name(struct position) defined in macro_table.c
      uses variable statement::pos defined in parse.h
      uses variable position::pos defined in lib.h
      uses macro definition sm_msg defined in smatch.h
   function match_for_stmt(struct statement *) in line 37
      protection public
      14 lines of code
      1 parameters
      6 conditional paths
      uses variable __inline_fn defined in smatch.h
      uses variable statement::type defined in parse.h
      uses enumvalue STMT_ITERATOR defined in parse.h
      uses variable statement::iterator_statement defined in parse.h
      uses enumvalue STMT_COMPOUND defined in parse.h
      uses function get_macro_name(struct position) defined in macro_table.c
      uses variable statement::pos defined in parse.h
      uses variable position::pos defined in lib.h
      uses macro definition sm_msg defined in smatch.h
   function check_no_if_block(int) in line 52
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses variable my_id defined in check_no_if_block.c
      uses function add_hook(void *,enum hook_type) defined in smatch.h
      uses function match_if_stmt(struct statement *) defined in check_no_if_block.c
      uses enumvalue STMT_HOOK defined in smatch.h
      uses function match_for_stmt(struct statement *) defined in check_no_if_block.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/check_no_return.c
module check_no_return.c
   variable my_id in line 20
      protection public
   variable returned in line 21
      protection public
   function match_return(struct expression *) in line 23
      protection public
      7 lines of code
      1 parameters
      3 conditional paths
      uses variable __inline_fn defined in smatch.h
      uses function is_reachable(void) defined in smatch.h
      uses variable returned defined in check_no_return.c
   function match_func_end(struct symbol *) in line 31
      protection public
      8 lines of code
      1 parameters
      3 conditional paths
      uses variable __inline_fn defined in smatch.h
      uses function is_reachable(void) defined in smatch.h
      uses variable returned defined in check_no_return.c
      uses macro definition sm_info defined in smatch.h
   function check_no_return(int) in line 40
      protection public
      8 lines of code
      1 parameters
      2 conditional paths
      uses variable option_info defined in smatch.c
      uses variable my_id defined in check_no_return.c
      uses function add_hook(void *,enum hook_type) defined in smatch.h
      uses function match_return(struct expression *) defined in check_no_return.c
      uses enumvalue RETURN_HOOK defined in smatch.h
      uses function match_func_end(struct symbol *) defined in check_no_return.c
      uses enumvalue END_FUNC_HOOK defined in smatch.h
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/check_off_by_one_relative.c
module check_off_by_one_relative.c
   variable my_id in line 28
      protection public
   function array_check(struct expression *) in line 30
      protection public
      25 lines of code
      1 parameters
      4 conditional paths
      uses variable offset defined in sm_implied10.c
      uses function strip_expr(struct expression *) defined in smatch.h
      uses function is_array(struct expression *) defined in smatch.h
      uses function get_array_base(struct expression *) defined in smatch.h
      uses function get_size_variable(struct expression *) defined in smatch.h
      uses function get_array_offset(struct expression *) defined in smatch.h
      uses function possible_comparison(struct expression *,int,struct expression *) defined in smatch.h
      uses enumvalue SPECIAL_EQUAL defined in token.h
      uses function expr_to_str(struct expression *) defined in smatch.h
      uses macro definition sm_msg defined in smatch.h
      uses function free_string(char *) defined in smatch.h
   function known_access_ok_comparison(struct expression *) in line 56
      protection public
      18 lines of code
      1 parameters
      3 conditional paths
      uses variable offset defined in sm_implied10.c
      uses function get_array_base(struct expression *) defined in smatch.h
      uses function get_size_variable(struct expression *) defined in smatch.h
      uses function get_array_offset(struct expression *) defined in smatch.h
      uses function get_comparison(struct expression *,struct expression *) defined in smatch.h
      uses enumvalue SPECIAL_UNSIGNED_GT defined in token.h
   function known_access_ok_numbers(struct expression *) in line 75
      protection public
      19 lines of code
      1 parameters
      3 conditional paths
      uses variable offset defined in sm_implied10.c
      uses function get_array_base(struct expression *) defined in smatch.h
      uses function get_array_offset(struct expression *) defined in smatch.h
      uses function get_array_size(struct expression *) defined in smatch.h
      uses function get_absolute_max(struct expression *,sval_t *) defined in smatch.h
      uses variable sval_t::uvalue defined in smatch.h
   function array_check_data_info(struct expression *) in line 95
      protection public
      54 lines of code
      1 parameters
      12 conditional paths
      uses variable offset defined in sm_implied10.c
      uses macro definition NULL defined in sm_implied3.c
      uses function strip_expr(struct expression *) defined in smatch.h
      uses function is_array(struct expression *) defined in smatch.h
      uses function known_access_ok_numbers(struct expression *) defined in check_off_by_one_relative.c
      uses function known_access_ok_comparison(struct expression *) defined in check_off_by_one_relative.c
      uses function get_array_base(struct expression *) defined in smatch.h
      uses function get_array_offset(struct expression *) defined in smatch.h
      uses function expr_to_var(struct expression *) defined in smatch.h
      uses function get_all_possible_equal_comparisons(struct expression *) defined in smatch.h
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable sm_state::state defined in smatch.h
      uses variable smatch_state::data defined in smatch.h
      uses variable compare_data::var1 defined in smatch.h
      uses function db_var_is_array_limit(struct expression *,const char *,struct var_sym_list *) defined in smatch.h
      uses variable compare_data::var2 defined in smatch.h
      uses variable compare_data::vsl2 defined in smatch.h
      uses variable compare_data::vsl1 defined in smatch.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses function expr_to_str(struct expression *) defined in smatch.h
      uses macro definition sm_msg defined in smatch.h
      uses function free_string(char *) defined in smatch.h
      uses function free_slist(struct state_list **) defined in smatch_slist.c
   function check_off_by_one_relative(int) in line 150
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses variable my_id defined in check_off_by_one_relative.c
      uses function add_hook(void *,enum hook_type) defined in smatch.h
      uses function array_check(struct expression *) defined in check_off_by_one_relative.c
      uses enumvalue OP_HOOK defined in smatch.h
      uses function array_check_data_info(struct expression *) defined in check_off_by_one_relative.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/check_or_vs_and.c
module check_or_vs_and.c
   variable my_id in line 21
      protection public
   function DEFINE_STRING_HASHTABLE_STATIC(unconstant_macros) in line 23
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function does_inc_dec(struct expression *) in line 25
      protection public
      9 lines of code
      1 parameters
      3 conditional paths
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_PREOP defined in expression.h
      uses enumvalue EXPR_POSTOP defined in expression.h
      uses variable expression::op defined in expression.h
      uses enumvalue SPECIAL_INCREMENT defined in token.h
      uses enumvalue SPECIAL_DECREMENT defined in token.h
      uses variable expression::unop defined in expression.h
   function expr_equiv_no_inc_dec(struct expression *,struct expression *) in line 35
      protection public
      6 lines of code
      2 parameters
      2 conditional paths
      uses function does_inc_dec(struct expression *) defined in check_or_vs_and.c
      uses variable one defined in sm_equiv1.c
      uses variable two defined in sm_equiv1.c
      uses function expr_equiv(struct expression *,struct expression *) defined in smatch.h
   function inconsistent_check(struct expression *,struct expression *) in line 42
      protection public
      21 lines of code
      2 parameters
      7 conditional paths
      uses function get_value(struct expression *,sval_t *) defined in smatch.h
      uses variable expression::left defined in expression.h
      uses function expr_equiv_no_inc_dec(struct expression *,struct expression *) defined in check_or_vs_and.c
      uses variable expression::right defined in expression.h
   function check_or(struct expression *) in line 64
      protection public
      18 lines of code
      1 parameters
      4 conditional paths
      uses variable expression::left defined in expression.h
      uses variable expression::right defined in expression.h
      uses function strip_expr(struct expression *) defined in smatch.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_COMPARE defined in expression.h
      uses variable expression::op defined in expression.h
      uses enumvalue SPECIAL_NOTEQUAL defined in token.h
      uses function inconsistent_check(struct expression *,struct expression *) defined in check_or_vs_and.c
      uses macro definition sm_msg defined in smatch.h
   function check_and(struct expression *) in line 83
      protection public
      18 lines of code
      1 parameters
      4 conditional paths
      uses variable expression::left defined in expression.h
      uses variable expression::right defined in expression.h
      uses function strip_expr(struct expression *) defined in smatch.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_COMPARE defined in expression.h
      uses variable expression::op defined in expression.h
      uses enumvalue SPECIAL_EQUAL defined in token.h
      uses function inconsistent_check(struct expression *,struct expression *) defined in check_or_vs_and.c
      uses macro definition sm_msg defined in smatch.h
   function match_logic(struct expression *) in line 102
      protection public
      10 lines of code
      1 parameters
      4 conditional paths
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_LOGICAL defined in expression.h
      uses variable expression::op defined in expression.h
      uses enumvalue SPECIAL_LOGICAL_OR defined in token.h
      uses function check_or(struct expression *) defined in check_or_vs_and.c
      uses enumvalue SPECIAL_LOGICAL_AND defined in token.h
      uses function check_and(struct expression *) defined in check_or_vs_and.c
   function is_unconstant_macro(struct expression *) in line 113
      protection public
      11 lines of code
      1 parameters
      3 conditional paths
      uses function get_macro_name(struct position) defined in macro_table.c
      uses variable expression::pos defined in expression.h
   function match_condition(struct expression *) in line 125
      protection public
      24 lines of code
      1 parameters
      8 conditional paths
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_BINOP defined in expression.h
      uses variable expression::op defined in expression.h
      uses function get_value(struct expression *,sval_t *) defined in smatch.h
      uses variable expression::left defined in expression.h
      uses variable expression::right defined in expression.h
      uses macro definition sm_msg defined in smatch.h
      uses function get_macro_name(struct position) defined in macro_table.c
      uses variable expression::pos defined in expression.h
      uses function is_unconstant_macro(struct expression *) defined in check_or_vs_and.c
      uses variable sval_t::value defined in smatch.h
   function match_binop(struct expression *) in line 150
      protection public
      14 lines of code
      1 parameters
      5 conditional paths
      uses variable expression::left defined in expression.h
      uses variable expression::right defined in expression.h
      uses variable expression::op defined in expression.h
      uses function get_value(struct expression *,sval_t *) defined in smatch.h
      uses variable sval_t::value defined in smatch.h
      uses function get_macro_name(struct position) defined in macro_table.c
      uses variable expression::pos defined in expression.h
      uses macro definition sm_msg defined in smatch.h
   function check_or_vs_and(int) in line 165
      protection public
      12 lines of code
      1 parameters
      2 conditional paths
      uses variable my_id defined in check_or_vs_and.c
      uses macro definition load_strings defined in smatch_function_hashtable.h
      uses function add_hook(void *,enum hook_type) defined in smatch.h
      uses function match_logic(struct expression *) defined in check_or_vs_and.c
      uses enumvalue LOGIC_HOOK defined in smatch.h
      uses function match_condition(struct expression *) defined in check_or_vs_and.c
      uses enumvalue CONDITION_HOOK defined in smatch.h
      uses variable option_spammy defined in smatch.c
      uses function match_binop(struct expression *) defined in check_or_vs_and.c
      uses enumvalue BINOP_HOOK defined in smatch.h
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/check_overflow.c
module check_overflow.c
   variable my_used_id in line 36
      protection public
   variable this_func in line 38
      protection public
   variable b0_l2 in line 40
      protection public
   variable b1_l2 in line 40
      protection public
   function match_function_def(struct symbol *) in line 40
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable this_func defined in check_overflow.c
      uses variable sym defined in smatch_type.c
   function delete(struct sm_state *,struct expression *) in line 52
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function set_state(int,const char *,struct symbol *,struct smatch_state *) defined in smatch.h
      uses variable my_used_id defined in check_overflow.c
      uses variable sm_state::name defined in smatch.h
      uses variable sm_state::sym defined in smatch.h
      uses variable undefined defined in smatch.h
   function definitely_just_used_as_limiter(struct expression *,struct expression *) in line 57
      protection public
      33 lines of code
      2 parameters
      9 conditional paths
      uses function get_implied_value(struct expression *,sval_t *) defined in smatch.h
      uses variable offset defined in sm_implied10.c
      uses function get_array_size(struct expression *) defined in smatch.h
      uses variable sval_t::value defined in smatch.h
      uses macro definition FOR_EACH_PTR_REVERSE defined in ptrlist.h
      uses variable big_expression_stack defined in smatch.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_PREOP defined in expression.h
      uses variable expression::op defined in expression.h
      uses enumvalue EXPR_COMPARE defined in expression.h
      uses enumvalue EXPR_ASSIGNMENT defined in expression.h
      uses macro definition END_FOR_EACH_PTR_REVERSE defined in ptrlist.h
   function get_the_max(struct expression *,sval_t *) in line 91
      protection public
      12 lines of code
      2 parameters
      5 conditional paths
      uses function get_hard_max(struct expression *,sval_t *) defined in smatch.h
      uses variable option_spammy defined in smatch.c
      uses function get_fuzzy_max(struct expression *,sval_t *) defined in smatch.h
      uses function is_user_data(struct expression *) defined in check_user_data.c
      uses function get_absolute_max(struct expression *,sval_t *) defined in smatch.h
   function common_false_positives(struct expression *,char *,sval_t) in line 104
      protection public
      37 lines of code
      3 parameters
      7 conditional paths
      uses variable name defined in smatch_type.c
      uses enumvalue EXPR_STRING defined in expression.h
      uses variable sval_t::value defined in smatch.h
      uses function get_macro_name(struct position) defined in macro_table.c
      uses variable option_project defined in smatch.c
      uses enumvalue PROJ_KERNEL defined in smatch.h
   function array_check(struct expression *) in line 142
      protection public
      42 lines of code
      1 parameters
      10 conditional paths
      uses variable offset defined in sm_implied10.c
      uses variable name defined in smatch_type.c
      uses function strip_expr(struct expression *) defined in smatch.h
      uses function is_array(struct expression *) defined in smatch.h
      uses function get_array_base(struct expression *) defined in smatch.h
      uses function get_array_size(struct expression *) defined in smatch.h
      uses function get_array_offset(struct expression *) defined in smatch.h
      uses function get_the_max(struct expression *,sval_t *) defined in check_overflow.c
      uses function getting_address(void) defined in smatch.h
      uses function is_capped(struct expression *) defined in smatch.h
      uses function set_state_expr(int,struct expression *,struct smatch_state *) defined in smatch.h
      uses variable my_used_id defined in check_overflow.c
      uses function alloc_state_num(int) defined in smatch.h
      uses variable sval_t::value defined in smatch.h
      uses function definitely_just_used_as_limiter(struct expression *,struct expression *) defined in check_overflow.c
      uses function expr_to_str(struct expression *) defined in smatch.h
      uses function common_false_positives(struct expression *,char *,sval_t) defined in check_overflow.c
      uses macro definition sm_msg defined in smatch.h
      uses function sval_to_str(sval_t) defined in smatch.h
      uses function free_string(char *) defined in smatch.h
   function match_condition(struct expression *) in line 185
      protection public
      39 lines of code
      1 parameters
      9 conditional paths
      uses variable expression::left defined in expression.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_COMPARE defined in expression.h
      uses function get_macro_name(struct position) defined in macro_table.c
      uses variable expression::pos defined in expression.h
      uses function get_implied_value(struct expression *,sval_t *) defined in smatch.h
      uses variable sm_state::left defined in smatch.h
      uses variable expression::right defined in expression.h
      uses function get_possible_states_expr(int,struct expression *) defined in smatch.h
      uses variable my_used_id defined in check_overflow.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable sm_state::state defined in smatch.h
      uses variable merged defined in smatch.h
      uses variable undefined defined in smatch.h
      uses variable smatch_state::data defined in smatch.h
      uses variable sval_t::value defined in smatch.h
      uses variable name defined in smatch_type.c
      uses function expr_to_var(struct expression *) defined in smatch.h
      uses macro definition sm_msg defined in smatch.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function match_strcpy(const char *,struct expression *,void *) in line 225
      protection public
      38 lines of code
      3 parameters
      6 conditional paths
      uses variable dest defined in sm_user_data2.c
      uses macro definition NULL defined in sm_implied3.c
      uses function get_argument_from_call_expr(struct expression_list *,int) defined in smatch.h
      uses variable expression::args defined in expression.h
      uses function get_array_size_bytes(struct expression *) defined in smatch.h
      uses function get_size_from_strlen(struct expression *) defined in smatch.h
      uses function expr_to_str(struct expression *) defined in smatch.h
      uses macro definition sm_msg defined in smatch.h
      uses variable option_spammy defined in smatch.c
      uses function free_string(char *) defined in smatch.h
   function match_snprintf(const char *,struct expression *,void *) in line 264
      protection public
      39 lines of code
      3 parameters
      8 conditional paths
      uses variable dest defined in sm_user_data2.c
      uses macro definition NULL defined in sm_implied3.c
      uses function get_argument_from_call_expr(struct expression_list *,int) defined in smatch.h
      uses variable expression::args defined in expression.h
      uses function get_array_size_bytes(struct expression *) defined in smatch.h
      uses function get_implied_value(struct expression *,sval_t *) defined in smatch.h
      uses variable sval_t::value defined in smatch.h
      uses macro definition sm_msg defined in smatch.h
      uses function sval_to_str(sval_t) defined in smatch.h
      uses function expr_to_var(struct expression *) defined in smatch.h
      uses function expr_to_str(struct expression *) defined in smatch.h
      uses function get_size_from_strlen(struct expression *) defined in smatch.h
      uses function free_string(char *) defined in smatch.h
   function match_sprintf(const char *,struct expression *,void *) in line 304
      protection public
      33 lines of code
      3 parameters
      7 conditional paths
      uses variable dest defined in sm_user_data2.c
      uses macro definition NULL defined in sm_implied3.c
      uses function get_argument_from_call_expr(struct expression_list *,int) defined in smatch.h
      uses variable expression::args defined in expression.h
      uses function get_array_size_bytes(struct expression *) defined in smatch.h
      uses function expr_to_var(struct expression *) defined in smatch.h
      uses function expr_to_str(struct expression *) defined in smatch.h
      uses function get_size_from_strlen(struct expression *) defined in smatch.h
      uses macro definition sm_msg defined in smatch.h
      uses function free_string(char *) defined in smatch.h
   function match_limited(const char *,struct expression *,void *) in line 338
      protection public
      23 lines of code
      3 parameters
      4 conditional paths
      uses variable dest defined in sm_user_data2.c
      uses macro definition NULL defined in sm_implied3.c
      uses function get_argument_from_call_expr(struct expression_list *,int) defined in smatch.h
      uses variable expression::args defined in expression.h
      uses variable limiter::buf_arg defined in check_overflow.c
      uses variable limiter::limit_arg defined in check_overflow.c
      uses function get_the_max(struct expression *,sval_t *) defined in check_overflow.c
      uses function get_array_size_bytes_max(struct expression *) defined in smatch.h
      uses variable sval_t::value defined in smatch.h
      uses function expr_to_str(struct expression *) defined in smatch.h
      uses macro definition sm_msg defined in smatch.h
      uses function sval_to_str(sval_t) defined in smatch.h
      uses function free_string(char *) defined in smatch.h
   function db_returns_buf_size(struct expression *,int,char *,char *) in line 362
      protection public
      27 lines of code
      4 parameters
      7 conditional paths
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_ASSIGNMENT defined in expression.h
      uses function get_pointer_type(struct expression *) defined in smatch.h
      uses variable expression::right defined in expression.h
      uses function type_bits(struct symbol *) defined in smatch.h
      uses function strip_expr(struct expression *) defined in smatch.h
      uses variable expression::left defined in expression.h
      uses function parse_call_math(struct expression *,char *,sval_t *) defined in smatch.h
      uses variable sval_t::value defined in smatch.h
      uses function type_bytes(struct symbol *) defined in smatch.h
      uses variable sval_t::uvalue defined in smatch.h
      uses macro definition sm_msg defined in smatch.h
      uses function sval_to_str(sval_t) defined in smatch.h
   function register_funcs_from_file(void) in line 390
      protection public
      41 lines of code
      1 parameters
      7 conditional paths
      uses variable name defined in smatch_type.c
      uses macro definition func defined in preprocessor1.c
      uses variable bound::size defined in check_overflow.c
      uses variable buf defined in sm_fake_assignment.c
      uses function snprintf(char *,int,char *,char *) defined in sm_overflow6.c
      uses variable option_project_str defined in smatch.c
      uses function get_tokens_file(const char *) defined in smatch.h
      uses enumvalue TOKEN_STREAMBEGIN defined in token.h
      uses variable token::next defined in token.h
      uses enumvalue TOKEN_STREAMEND defined in token.h
      uses enumvalue TOKEN_IDENT defined in token.h
      uses function show_ident(const struct ident *) defined in token.h
      uses variable token::ident defined in token.h
      uses enumvalue TOKEN_NUMBER defined in token.h
      uses variable token::number defined in token.h
      uses function malloc(int) defined in sm_buf_size2.c
      uses variable limiter::limit_arg defined in check_overflow.c
      uses variable limiter::buf_arg defined in check_overflow.c
      uses function add_function_hook(const char *,func_hook *,void *) defined in smatch.h
      uses function match_limited(const char *,struct expression *,void *) defined in check_overflow.c
   function check_overflow(int) in line 432
      protection public
      23 lines of code
      1 parameters
      2 conditional paths
      uses variable my_used_id defined in check_overflow.c
      uses function register_funcs_from_file(void) defined in check_overflow.c
      uses function add_hook(void *,enum hook_type) defined in smatch.h
      uses function match_function_def(struct symbol *) defined in check_overflow.c
      uses enumvalue FUNC_DEF_HOOK defined in smatch.h
      uses function array_check(struct expression *) defined in check_overflow.c
      uses enumvalue OP_HOOK defined in smatch.h
      uses function match_condition(struct expression *) defined in check_overflow.c
      uses enumvalue CONDITION_HOOK defined in smatch.h
      uses function add_function_hook(const char *,func_hook *,void *) defined in smatch.h
      uses function match_strcpy(const char *,struct expression *,void *) defined in check_overflow.c
      uses macro definition NULL defined in sm_implied3.c
      uses function match_snprintf(const char *,struct expression *,void *) defined in check_overflow.c
      uses function match_sprintf(const char *,struct expression *,void *) defined in check_overflow.c
      uses function match_limited(const char *,struct expression *,void *) defined in check_overflow.c
      uses variable b0_l2 defined in check_overflow.c
      uses variable b1_l2 defined in check_overflow.c
      uses function select_return_states_hook(int,return_implies_hook *) defined in smatch.h
      uses enumvalue BUF_SIZE defined in smatch.h
      uses function db_returns_buf_size(struct expression *,int,char *,char *) defined in check_overflow.c
      uses function add_modification_hook(int,modification_hook *) defined in smatch.h
      uses variable option_project defined in smatch.c
      uses enumvalue PROJ_KERNEL defined in smatch.h
   variable bound::param in line 25
      protection public
   variable bound::size in line 26
      protection public
   variable limiter::buf_arg in line 46
      protection public
   variable limiter::limit_arg in line 47
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/check_param_mapper.c
module check_param_mapper.c
   variable my_id in line 34
      protection public
   variable func_sym in line 38
      protection public
   function STATE(argument) in line 36
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function delete(struct sm_state *,struct expression *) in line 40
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function set_state(int,const char *,struct symbol *,struct smatch_state *) defined in smatch.h
      uses variable my_id defined in check_param_mapper.c
      uses variable sm_state::name defined in smatch.h
      uses variable sm_state::sym defined in smatch.h
      uses variable undefined defined in smatch.h
   function match_function_def(struct symbol *) in line 45
      protection public
      12 lines of code
      1 parameters
      2 conditional paths
      uses variable func_sym defined in check_param_mapper.c
      uses variable sym defined in smatch_type.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::base_type defined in struct.c
      uses variable symbol::arguments defined in struct.c
      uses function set_state(int,const char *,struct symbol *,struct smatch_state *) defined in smatch.h
      uses variable my_id defined in check_param_mapper.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function get_arg_num(struct expression *) in line 58
      protection public
      25 lines of code
      1 parameters
      4 conditional paths
      uses function strip_expr(struct expression *) defined in smatch.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_SYMBOL defined in expression.h
      uses variable expression::symbol defined in expression.h
      uses function get_state_expr(int,struct expression *) defined in smatch.h
      uses variable my_id defined in check_param_mapper.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable func_sym defined in check_param_mapper.c
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::base_type defined in struct.c
      uses variable symbol::arguments defined in struct.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function match_call(struct expression *) in line 84
      protection public
      21 lines of code
      1 parameters
      3 conditional paths
      uses macro definition func defined in preprocessor1.c
      uses variable expression::fn defined in expression.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_SYMBOL defined in expression.h
      uses variable expression::symbol_name defined in expression.h
      uses variable ident::name defined in token.h
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable expression::args defined in expression.h
      uses function strip_expr(struct expression *) defined in smatch.h
      uses function get_arg_num(struct expression *) defined in check_param_mapper.c
      uses macro definition sm_msg defined in smatch.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function check_param_mapper(int) in line 106
      protection public
      9 lines of code
      1 parameters
      2 conditional paths
      uses variable option_param_mapper defined in smatch.c
      uses variable my_id defined in check_param_mapper.c
      uses function add_modification_hook(int,modification_hook *) defined in smatch.h
      uses function add_hook(void *,enum hook_type) defined in smatch.h
      uses function match_function_def(struct symbol *) defined in check_param_mapper.c
      uses enumvalue FUNC_DEF_HOOK defined in smatch.h
      uses function match_call(struct expression *) defined in check_param_mapper.c
      uses enumvalue FUNCTION_CALL_HOOK defined in smatch.h
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/check_passes_sizeof.c
module check_passes_sizeof.c
   macro definition NOBUF in line 22
      protection public
   variable my_id in line 24
      protection public
   function get_returned_expr(struct expression *) in line 26
      protection public
      13 lines of code
      1 parameters
      4 conditional paths
      uses variable big_statement_stack defined in smatch.h
      uses variable statement::type defined in parse.h
      uses enumvalue STMT_EXPRESSION defined in parse.h
      uses macro definition NULL defined in sm_implied3.c
      uses variable statement::expression defined in parse.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_ASSIGNMENT defined in expression.h
      uses variable expression::right defined in expression.h
      uses variable expression::left defined in expression.h
   function remove_dereference(struct expression *) in line 40
      protection public
      9 lines of code
      1 parameters
      3 conditional paths
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_PREOP defined in expression.h
      uses variable expression::op defined in expression.h
      uses variable expression::unop defined in expression.h
   function get_buf_number(struct expression *,struct expression *) in line 50
      protection public
      20 lines of code
      2 parameters
      3 conditional paths
      uses function strip_expr(struct expression *) defined in smatch.h
      uses variable expression::cast_expression defined in expression.h
      uses function remove_dereference(struct expression *) defined in check_passes_sizeof.c
      uses function get_returned_expr(struct expression *) defined in check_passes_sizeof.c
      uses function expr_equiv(struct expression *,struct expression *) defined in smatch.h
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable expression::args defined in expression.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses macro definition NOBUF defined in check_passes_sizeof.c
   function match_call(struct expression *) in line 71
      protection public
      23 lines of code
      1 parameters
      4 conditional paths
      uses variable name defined in smatch_type.c
      uses variable expression::fn defined in expression.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_SYMBOL defined in expression.h
      uses function expr_to_var(struct expression *) defined in smatch.h
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable expression::args defined in expression.h
      uses enumvalue EXPR_SIZEOF defined in expression.h
      uses function get_buf_number(struct expression *,struct expression *) defined in check_passes_sizeof.c
      uses macro definition NOBUF defined in check_passes_sizeof.c
      uses macro definition sm_msg defined in smatch.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses function free_string(char *) defined in smatch.h
   function check_passes_sizeof(int) in line 95
      protection public
      8 lines of code
      1 parameters
      2 conditional paths
      uses variable option_info defined in smatch.c
      uses variable my_id defined in check_passes_sizeof.c
      uses function add_hook(void *,enum hook_type) defined in smatch.h
      uses function match_call(struct expression *) defined in check_passes_sizeof.c
      uses enumvalue FUNCTION_CALL_HOOK defined in smatch.h
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/check_platform_device_put.c
module check_platform_device_put.c
   macro definition MAX_ERRNO in line 24
      protection public
   variable my_id in line 22
      protection public
   function STATE(added) in line 26
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function STATE(not_added) in line 27
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function match_added(const char *,struct expression *,struct expression *,void *) in line 29
      protection public
      8 lines of code
      4 parameters
      1 conditional paths
      uses function get_argument_from_call_expr(struct expression_list *,int) defined in smatch.h
      uses variable expression::args defined in expression.h
      uses function set_state_expr(int,struct expression *,struct smatch_state *) defined in smatch.h
      uses variable my_id defined in check_platform_device_put.c
   function match_not_added(const char *,struct expression *,struct expression *,void *) in line 38
      protection public
      8 lines of code
      4 parameters
      1 conditional paths
      uses function get_argument_from_call_expr(struct expression_list *,int) defined in smatch.h
      uses variable expression::args defined in expression.h
      uses function set_state_expr(int,struct expression *,struct smatch_state *) defined in smatch.h
      uses variable my_id defined in check_platform_device_put.c
   function match_platform_device_del(const char *,struct expression *,void *) in line 47
      protection public
      13 lines of code
      3 parameters
      3 conditional paths
      uses function get_argument_from_call_expr(struct expression_list *,int) defined in smatch.h
      uses variable expression::args defined in expression.h
      uses function get_sm_state_expr(int,struct expression *) defined in smatch.h
      uses variable my_id defined in check_platform_device_put.c
      uses function slist_has_state(struct state_list *,struct smatch_state *) defined in smatch_slist.c
      uses variable sm_state::possible defined in smatch.h
      uses macro definition sm_msg defined in smatch.h
   function check_platform_device_put(int) in line 61
      protection public
      10 lines of code
      1 parameters
      2 conditional paths
      uses variable option_project defined in smatch.c
      uses enumvalue PROJ_KERNEL defined in smatch.h
      uses variable my_id defined in check_platform_device_put.c
      uses function return_implies_state(const char *,long long,long long,implication_hook *,void *) defined in smatch.h
      uses function match_added(const char *,struct expression *,struct expression *,void *) defined in check_platform_device_put.c
      uses macro definition NULL defined in sm_implied3.c
      uses macro definition MAX_ERRNO defined in check_platform_device_put.c
      uses function match_not_added(const char *,struct expression *,struct expression *,void *) defined in check_platform_device_put.c
      uses function add_function_hook(const char *,func_hook *,void *) defined in smatch.h
      uses function match_platform_device_del(const char *,struct expression *,void *) defined in check_platform_device_put.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/check_pointer_math.c
module check_pointer_math.c
   variable my_id in line 20
      protection public
   function STATE(size_in_bytes) in line 22
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function set_undefined(struct sm_state *,struct expression *) in line 24
      protection public
      5 lines of code
      2 parameters
      2 conditional paths
      uses variable sm_state::state defined in smatch.h
      uses function set_state(int,const char *,struct symbol *,struct smatch_state *) defined in smatch.h
      uses variable my_id defined in check_pointer_math.c
      uses variable sm_state::name defined in smatch.h
      uses variable sm_state::sym defined in smatch.h
      uses variable undefined defined in smatch.h
   function is_sizeof(struct expression *) in line 30
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_SIZEOF defined in expression.h
   function is_macro(struct expression *,const char *) in line 35
      protection public
      15 lines of code
      2 parameters
      3 conditional paths
      uses variable name defined in smatch_type.c
      uses variable big_expression_stack defined in smatch.h
      uses function positions_eq(struct position,struct position) defined in smatch.h
      uses variable expression::pos defined in expression.h
      uses function get_macro_name(struct position) defined in macro_table.c
   function is_size_in_bytes(struct expression *) in line 51
      protection public
      15 lines of code
      1 parameters
      5 conditional paths
      uses function is_sizeof(struct expression *) defined in check_pointer_math.c
      uses function is_macro(struct expression *,const char *) defined in check_pointer_math.c
      uses function get_state_expr(int,struct expression *) defined in smatch.h
      uses variable my_id defined in check_pointer_math.c
   function match_binop(struct expression *) in line 67
      protection public
      31 lines of code
      1 parameters
      7 conditional paths
      uses variable name defined in smatch_type.c
      uses variable expression::op defined in expression.h
      uses function get_pointer_type(struct expression *) defined in smatch.h
      uses variable expression::left defined in expression.h
      uses function type_bits(struct symbol *) defined in smatch.h
      uses function is_size_in_bytes(struct expression *) defined in check_pointer_math.c
      uses variable expression::right defined in expression.h
      uses function get_array_size(struct expression *) defined in smatch.h
      uses function get_absolute_max(struct expression *,sval_t *) defined in smatch.h
      uses variable sval_t::uvalue defined in smatch.h
      uses function expr_to_str(struct expression *) defined in smatch.h
      uses macro definition sm_msg defined in smatch.h
      uses function free_string(char *) defined in smatch.h
   function match_assign(struct expression *) in line 99
      protection public
      9 lines of code
      1 parameters
      3 conditional paths
      uses variable expression::op defined in expression.h
      uses function is_size_in_bytes(struct expression *) defined in check_pointer_math.c
      uses variable expression::right defined in expression.h
      uses function set_state_expr(int,struct expression *,struct smatch_state *) defined in smatch.h
      uses variable my_id defined in check_pointer_math.c
      uses variable expression::left defined in expression.h
   function check_assign(struct expression *) in line 109
      protection public
      20 lines of code
      1 parameters
      5 conditional paths
      uses variable name defined in smatch_type.c
      uses variable expression::op defined in expression.h
      uses enumvalue SPECIAL_ADD_ASSIGN defined in token.h
      uses enumvalue SPECIAL_SUB_ASSIGN defined in token.h
      uses function get_pointer_type(struct expression *) defined in smatch.h
      uses variable expression::left defined in expression.h
      uses function type_bits(struct symbol *) defined in smatch.h
      uses function is_size_in_bytes(struct expression *) defined in check_pointer_math.c
      uses variable expression::right defined in expression.h
      uses function expr_to_var(struct expression *) defined in smatch.h
      uses macro definition sm_msg defined in smatch.h
      uses function free_string(char *) defined in smatch.h
   function check_pointer_math(int) in line 130
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses variable my_id defined in check_pointer_math.c
      uses function add_hook(void *,enum hook_type) defined in smatch.h
      uses function match_binop(struct expression *) defined in check_pointer_math.c
      uses enumvalue BINOP_HOOK defined in smatch.h
      uses function match_assign(struct expression *) defined in check_pointer_math.c
      uses enumvalue ASSIGNMENT_HOOK defined in smatch.h
      uses function check_assign(struct expression *) defined in check_pointer_math.c
      uses function add_modification_hook(int,modification_hook *) defined in smatch.h
      uses function set_undefined(struct sm_state *,struct expression *) defined in check_pointer_math.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/check_precedence.c
module check_precedence.c
   variable my_id in line 20
      protection public
   function is_bool(struct expression *) in line 22
      protection public
      11 lines of code
      1 parameters
      3 conditional paths
      uses function get_type(struct expression *) defined in smatch.h
      uses function type_bits(struct symbol *) defined in smatch.h
      uses macro definition MOD_UNSIGNED defined in symbol.h
   function is_bool_from_context(struct expression *) in line 34
      protection public
      10 lines of code
      1 parameters
      3 conditional paths
      uses function get_implied_max(struct expression *,sval_t *) defined in smatch.h
      uses variable sval_t::uvalue defined in smatch.h
      uses function get_implied_min(struct expression *,sval_t *) defined in smatch.h
      uses variable sval_t::value defined in smatch.h
   function is_bool_op(struct expression *) in line 45
      protection public
      12 lines of code
      1 parameters
      4 conditional paths
      uses function strip_expr(struct expression *) defined in smatch.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_PREOP defined in expression.h
      uses variable expression::op defined in expression.h
      uses enumvalue EXPR_COMPARE defined in expression.h
      uses enumvalue EXPR_LOGICAL defined in expression.h
      uses function is_bool(struct expression *) defined in check_precedence.c
   function match_condition(struct expression *) in line 58
      protection public
      43 lines of code
      1 parameters
      16 conditional paths
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_COMPARE defined in expression.h
      uses variable expression::left defined in expression.h
      uses variable expression::right defined in expression.h
      uses enumvalue EXPR_PREOP defined in expression.h
      uses variable expression::op defined in expression.h
      uses variable expression::unop defined in expression.h
      uses function is_bool(struct expression *) defined in check_precedence.c
      uses function is_bool_from_context(struct expression *) defined in check_precedence.c
      uses enumvalue EXPR_BINOP defined in expression.h
      uses macro definition sm_msg defined in smatch.h
      uses function is_bool_op(struct expression *) defined in check_precedence.c
   function match_binop(struct expression *) in line 102
      protection public
      7 lines of code
      1 parameters
      3 conditional paths
      uses variable expression::op defined in expression.h
      uses variable expression::left defined in expression.h
      uses macro definition sm_msg defined in smatch.h
   function match_mask(struct expression *) in line 110
      protection public
      11 lines of code
      1 parameters
      4 conditional paths
      uses variable expression::op defined in expression.h
      uses variable expression::right defined in expression.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_BINOP defined in expression.h
      uses enumvalue SPECIAL_RIGHTSHIFT defined in token.h
      uses macro definition sm_msg defined in smatch.h
   function match_subtract_shift(struct expression *) in line 122
      protection public
      10 lines of code
      1 parameters
      4 conditional paths
      uses variable expression::op defined in expression.h
      uses enumvalue SPECIAL_LEFTSHIFT defined in token.h
      uses variable expression::right defined in expression.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_BINOP defined in expression.h
      uses macro definition sm_msg defined in smatch.h
   function check_precedence(int) in line 133
      protection public
      9 lines of code
      1 parameters
      1 conditional paths
      uses variable my_id defined in check_precedence.c
      uses function add_hook(void *,enum hook_type) defined in smatch.h
      uses function match_condition(struct expression *) defined in check_precedence.c
      uses enumvalue CONDITION_HOOK defined in smatch.h
      uses function match_binop(struct expression *) defined in check_precedence.c
      uses enumvalue BINOP_HOOK defined in smatch.h
      uses function match_mask(struct expression *) defined in check_precedence.c
      uses function match_subtract_shift(struct expression *) defined in check_precedence.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/check_proc_create.c
module check_proc_create.c
   macro definition S_IWOTH in line 30
      protection public
   variable my_id in line 20
      protection public
   variable name_param in line 23
      protection public
   variable mode_param in line 24
      protection public
   variable param_index in line 28
      protection public
   function match_create(const char *,struct expression *,void *) in line 32
      protection public
      17 lines of code
      3 parameters
      3 conditional paths
      uses variable symbol::name defined in struct.c
      uses function get_argument_from_call_expr(struct expression_list *,int) defined in smatch.h
      uses variable expression::args defined in expression.h
      uses variable param_index defined in check_proc_create.c
      uses function get_implied_value(struct expression *,sval_t *) defined in smatch.h
      uses variable sval_t::uvalue defined in smatch.h
      uses macro definition S_IWOTH defined in check_proc_create.c
      uses function expr_to_var(struct expression *) defined in smatch.h
      uses macro definition sm_msg defined in smatch.h
      uses function free_string(char *) defined in smatch.h
   function check_proc_create(int) in line 50
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses variable my_id defined in check_proc_create.c
      uses variable option_project defined in smatch.c
      uses enumvalue PROJ_KERNEL defined in smatch.h
      uses function add_function_hook(const char *,func_hook *,void *) defined in smatch.h
      uses function match_create(const char *,struct expression *,void *) defined in check_proc_create.c
   variable @1::mode_param in line 24
      protection public
   variable @1::name_param in line 23
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/check_puts_argument.c
module check_puts_argument.c
   variable my_id in line 26
      protection public
   variable this_func in line 30
      protection public
   variable putted_args in line 31
      protection public
   variable return_count in line 63
      protection public
   function STATE(putted) in line 28
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function match_function_def(struct symbol *) in line 33
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable this_func defined in check_puts_argument.c
      uses variable sym defined in smatch_type.c
   function parent_is_arg(struct symbol *) in line 38
      protection public
      10 lines of code
      1 parameters
      2 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable this_func defined in check_puts_argument.c
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::base_type defined in struct.c
      uses variable symbol::arguments defined in struct.c
      uses variable sym defined in smatch_type.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function match_put(const char *,struct expression *,void *) in line 49
      protection public
      13 lines of code
      3 parameters
      2 conditional paths
      uses variable sym defined in smatch_type.c
      uses variable name defined in smatch_type.c
      uses function get_argument_from_call_expr(struct expression_list *,int) defined in smatch.h
      uses variable expression::args defined in expression.h
      uses function strip_expr(struct expression *) defined in smatch.h
      uses function expr_to_var_sym(struct expression *,struct symbol **) defined in smatch.h
      uses function free_string(char *) defined in smatch.h
      uses function parent_is_arg(struct symbol *) defined in check_puts_argument.c
      uses variable symbol::ident defined in struct.c
      uses function set_state(int,const char *,struct symbol *,struct smatch_state *) defined in smatch.h
      uses variable my_id defined in check_puts_argument.c
      uses variable ident::name defined in token.h
   function match_return(struct expression *) in line 64
      protection public
      26 lines of code
      1 parameters
      5 conditional paths
      uses variable __inline_fn defined in smatch.h
      uses variable return_count defined in check_puts_argument.c
      uses function __get_cur_stree(void) defined in smatch.h
      uses macro definition FOR_EACH_MY_SM defined in avl.h
      uses variable my_id defined in check_puts_argument.c
      uses variable sm_state::state defined in smatch.h
      uses function add_tracker(struct tracker_list **,int,const char *,struct symbol *) defined in smatch.h
      uses variable putted_args defined in check_puts_argument.c
      uses variable sm_state::name defined in smatch.h
      uses variable sm_state::sym defined in smatch.h
      uses macro definition END_FOR_EACH_SM defined in avl.h
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses function get_sm_state(int,const char *,struct symbol *) defined in smatch.h
      uses variable tracker::name defined in smatch.h
      uses variable tracker::sym defined in smatch.h
      uses function del_tracker(struct tracker_list **,int,const char *,struct symbol *) defined in smatch.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function print_arg(struct symbol *) in line 91
      protection public
      13 lines of code
      1 parameters
      2 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable this_func defined in check_puts_argument.c
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::base_type defined in struct.c
      uses variable symbol::arguments defined in struct.c
      uses variable sym defined in smatch_type.c
      uses macro definition sm_info defined in smatch.h
      uses function get_function(void) defined in smatch.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function match_end_func(struct symbol *) in line 105
      protection public
      16 lines of code
      1 parameters
      3 conditional paths
      uses variable __inline_fn defined in smatch.h
      uses function is_reachable(void) defined in smatch.h
      uses function match_return(struct expression *) defined in check_puts_argument.c
      uses macro definition NULL defined in sm_implied3.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable putted_args defined in check_puts_argument.c
      uses function print_arg(struct symbol *) defined in check_puts_argument.c
      uses variable tracker::sym defined in smatch.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses function free_trackers_and_list(struct tracker_list **) defined in smatch.h
      uses variable return_count defined in check_puts_argument.c
   function check_puts_argument(int) in line 122
      protection public
      12 lines of code
      1 parameters
      2 conditional paths
      uses variable option_info defined in smatch.c
      uses variable option_project defined in smatch.c
      uses enumvalue PROJ_KERNEL defined in smatch.h
      uses variable my_id defined in check_puts_argument.c
      uses function add_hook(void *,enum hook_type) defined in smatch.h
      uses function match_function_def(struct symbol *) defined in check_puts_argument.c
      uses enumvalue FUNC_DEF_HOOK defined in smatch.h
      uses function add_function_hook(const char *,func_hook *,void *) defined in smatch.h
      uses function match_put(const char *,struct expression *,void *) defined in check_puts_argument.c
      uses macro definition NULL defined in sm_implied3.c
      uses function match_return(struct expression *) defined in check_puts_argument.c
      uses enumvalue RETURN_HOOK defined in smatch.h
      uses function match_end_func(struct symbol *) defined in check_puts_argument.c
      uses enumvalue END_FUNC_HOOK defined in smatch.h
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/check_readl_infinite_loops.c
module check_readl_infinite_loops.c
   variable my_id in line 21
      protection public
   variable state_at_start in line 28
      protection public
   variable readl_has_been_called in line 30
      protection public
   variable returned in line 31
      protection public
   function STATE(readl) in line 23
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function STATE(readl_ff) in line 24
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function STATE(readl_00) in line 25
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function DECLARE_PTR_LIST(state_stack,struct smatch_state) in line 27
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function is_readl_call(struct expression *) in line 33
      protection public
      16 lines of code
      1 parameters
      5 conditional paths
      uses variable sym defined in smatch_type.c
      uses function strip_expr(struct expression *) defined in smatch.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_CALL defined in expression.h
      uses variable expression::fn defined in expression.h
      uses enumvalue EXPR_SYMBOL defined in expression.h
      uses variable expression::symbol defined in expression.h
      uses variable symbol::ident defined in struct.c
      uses variable ident::name defined in token.h
   function is_readl(struct expression *) in line 50
      protection public
      8 lines of code
      1 parameters
      3 conditional paths
      uses function is_readl_call(struct expression *) defined in check_readl_infinite_loops.c
      uses function get_state_expr(int,struct expression *) defined in smatch.h
      uses variable my_id defined in check_readl_infinite_loops.c
   function match_assign(struct expression *) in line 59
      protection public
      7 lines of code
      1 parameters
      3 conditional paths
      uses function is_readl(struct expression *) defined in check_readl_infinite_loops.c
      uses variable expression::right defined in expression.h
      uses function set_state_expr(int,struct expression *,struct smatch_state *) defined in smatch.h
      uses variable my_id defined in check_readl_infinite_loops.c
      uses variable expression::left defined in expression.h
      uses function get_state_expr(int,struct expression *) defined in smatch.h
      uses variable undefined defined in smatch.h
   function condition_depends_on_readl(struct expression *) in line 67
      protection public
      13 lines of code
      1 parameters
      5 conditional paths
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_BINOP defined in expression.h
      uses variable expression::left defined in expression.h
      uses variable expression::right defined in expression.h
      uses function is_readl(struct expression *) defined in check_readl_infinite_loops.c
   function check_condition(struct expression *) in line 81
      protection public
      9 lines of code
      1 parameters
      3 conditional paths
      uses variable expression::op defined in expression.h
      uses function condition_depends_on_readl(struct expression *) defined in check_readl_infinite_loops.c
      uses variable readl_has_been_called defined in check_readl_infinite_loops.c
      uses function set_true_false_states(int,const char *,struct symbol *,struct smatch_state *,struct smatch_state *) defined in smatch.h
      uses variable my_id defined in check_readl_infinite_loops.c
      uses macro definition NULL defined in sm_implied3.c
   function match_return(struct expression *) in line 91
      protection public
      17 lines of code
      1 parameters
      3 conditional paths
      uses variable __inline_fn defined in smatch.h
      uses variable returned defined in check_readl_infinite_loops.c
      uses variable readl_has_been_called defined in check_readl_infinite_loops.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable state_at_start defined in check_readl_infinite_loops.c
      uses macro definition REPLACE_CURRENT_PTR defined in ptrlist.h
      uses macro definition NULL defined in sm_implied3.c
   function push_state_at_start(struct smatch_state *) in line 109
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses macro definition add_ptr_list defined in ptrlist.h
      uses variable state_at_start defined in check_readl_infinite_loops.c
   function pop_state_at_start(void) in line 114
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses variable state_at_start defined in check_readl_infinite_loops.c
      uses function delete_ptr_list_last(struct ptr_list **) defined in ptrlist.c
   function before_loop(struct statement *) in line 123
      protection public
      11 lines of code
      1 parameters
      3 conditional paths
      uses variable statement::type defined in parse.h
      uses enumvalue STMT_ITERATOR defined in parse.h
      uses macro definition ptr_list_empty defined in ptrlist.h
      uses variable state_at_start defined in check_readl_infinite_loops.c
      uses variable returned defined in check_readl_infinite_loops.c
      uses function get_state(int,const char *,struct symbol *) defined in smatch.h
      uses variable my_id defined in check_readl_infinite_loops.c
      uses macro definition NULL defined in sm_implied3.c
      uses function push_state_at_start(struct smatch_state *) defined in check_readl_infinite_loops.c
   function after_loop(struct statement *) in line 135
      protection public
      15 lines of code
      1 parameters
      5 conditional paths
      uses variable statement::type defined in parse.h
      uses enumvalue STMT_ITERATOR defined in parse.h
      uses function pop_state_at_start(void) defined in check_readl_infinite_loops.c
      uses variable returned defined in check_readl_infinite_loops.c
      uses function get_state(int,const char *,struct symbol *) defined in smatch.h
      uses variable my_id defined in check_readl_infinite_loops.c
      uses macro definition NULL defined in sm_implied3.c
      uses macro definition sm_msg defined in smatch.h
   function check_readl_infinite_loops(int) in line 151
      protection public
      15 lines of code
      1 parameters
      2 conditional paths
      uses variable option_project defined in smatch.c
      uses enumvalue PROJ_KERNEL defined in smatch.h
      uses variable my_id defined in check_readl_infinite_loops.c
      uses function add_hook(void *,enum hook_type) defined in smatch.h
      uses function match_assign(struct expression *) defined in check_readl_infinite_loops.c
      uses enumvalue ASSIGNMENT_HOOK defined in smatch.h
      uses function check_condition(struct expression *) defined in check_readl_infinite_loops.c
      uses enumvalue CONDITION_HOOK defined in smatch.h
      uses function match_return(struct expression *) defined in check_readl_infinite_loops.c
      uses enumvalue RETURN_HOOK defined in smatch.h
      uses function before_loop(struct statement *) defined in check_readl_infinite_loops.c
      uses enumvalue STMT_HOOK defined in smatch.h
      uses function after_loop(struct statement *) defined in check_readl_infinite_loops.c
      uses enumvalue STMT_HOOK_AFTER defined in smatch.h
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/check_release_resource.c
module check_release_resource.c
   variable my_id in line 26
      protection public
   variable resource_list in line 28
      protection public
   function match_request(const char *,struct expression *,void *) in line 30
      protection public
      17 lines of code
      3 parameters
      3 conditional paths
      uses variable name defined in smatch_type.c
      uses variable sym defined in smatch_type.c
      uses function get_argument_from_call_expr(struct expression_list *,int) defined in smatch.h
      uses variable expression::args defined in expression.h
      uses function strip_expr(struct expression *) defined in smatch.h
      uses function expr_to_var_sym(struct expression *,struct symbol **) defined in smatch.h
      uses function add_tracker(struct tracker_list **,int,const char *,struct symbol *) defined in smatch.h
      uses variable resource_list defined in check_release_resource.c
      uses variable my_id defined in check_release_resource.c
      uses function free_string(char *) defined in smatch.h
   function match_release(const char *,struct expression *,void *) in line 48
      protection public
      22 lines of code
      3 parameters
      6 conditional paths
      uses variable name defined in smatch_type.c
      uses variable sym defined in smatch_type.c
      uses function get_argument_from_call_expr(struct expression_list *,int) defined in smatch.h
      uses variable expression::args defined in expression.h
      uses function strip_expr(struct expression *) defined in smatch.h
      uses variable resource_list defined in check_release_resource.c
      uses function expr_to_var_sym(struct expression *,struct symbol **) defined in smatch.h
      uses function in_tracker_list(struct tracker_list *,int,const char *,struct symbol *) defined in smatch.h
      uses variable my_id defined in check_release_resource.c
      uses macro definition sm_msg defined in smatch.h
      uses function free_string(char *) defined in smatch.h
   function match_end_func(struct symbol *) in line 71
      protection public
      6 lines of code
      1 parameters
      2 conditional paths
      uses variable __inline_fn defined in smatch.h
      uses function free_trackers_and_list(struct tracker_list **) defined in smatch.h
      uses variable resource_list defined in check_release_resource.c
   function check_release_resource(int) in line 78
      protection public
      13 lines of code
      1 parameters
      2 conditional paths
      uses variable my_id defined in check_release_resource.c
      uses variable option_project defined in smatch.c
      uses enumvalue PROJ_KERNEL defined in smatch.h
      uses function add_function_hook(const char *,func_hook *,void *) defined in smatch.h
      uses function match_request(const char *,struct expression *,void *) defined in check_release_resource.c
      uses function match_release(const char *,struct expression *,void *) defined in check_release_resource.c
      uses function add_hook(void *,enum hook_type) defined in smatch.h
      uses function match_end_func(struct symbol *) defined in check_release_resource.c
      uses enumvalue END_FUNC_HOOK defined in smatch.h
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/check_resource_size.c
module check_resource_size.c
   variable my_id in line 20
      protection public
   variable check_assigned_expr_id in line 21
      protection public
   function is_probably_ok(struct expression *) in line 23
      protection public
      11 lines of code
      1 parameters
      3 conditional paths
      uses function strip_expr(struct expression *) defined in smatch.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_BINOP defined in expression.h
      uses enumvalue EXPR_SIZEOF defined in expression.h
   function verify_size_expr(struct expression *) in line 35
      protection public
      12 lines of code
      1 parameters
      5 conditional paths
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_BINOP defined in expression.h
      uses variable expression::op defined in expression.h
      uses function is_probably_ok(struct expression *) defined in check_resource_size.c
      uses variable expression::left defined in expression.h
      uses variable expression::right defined in expression.h
      uses macro definition sm_msg defined in smatch.h
   function handle_assigned_expr(struct expression *) in line 48
      protection public
      10 lines of code
      1 parameters
      2 conditional paths
      uses function get_state_expr(int,struct expression *) defined in smatch.h
      uses variable check_assigned_expr_id defined in check_resource_size.c
      uses variable smatch_state::data defined in smatch.h
      uses function verify_size_expr(struct expression *) defined in check_resource_size.c
   function match_resource(const char *,struct expression *,void *) in line 59
      protection public
      16 lines of code
      3 parameters
      3 conditional paths
      uses function get_argument_from_call_expr(struct expression_list *,int) defined in smatch.h
      uses variable expression::args defined in expression.h
      uses function strip_expr(struct expression *) defined in smatch.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_SYMBOL defined in expression.h
      uses function handle_assigned_expr(struct expression *) defined in check_resource_size.c
      uses function verify_size_expr(struct expression *) defined in check_resource_size.c
   function check_resource_size(int) in line 76
      protection public
      14 lines of code
      1 parameters
      2 conditional paths
      uses variable my_id defined in check_resource_size.c
      uses variable option_project defined in smatch.c
      uses enumvalue PROJ_KERNEL defined in smatch.h
      uses function add_function_hook(const char *,func_hook *,void *) defined in smatch.h
      uses function match_resource(const char *,struct expression *,void *) defined in check_resource_size.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/check_return.c
module check_return.c
   variable my_id in line 21
      protection public
   function must_check(const char *,struct expression *,void *) in line 23
      protection public
      8 lines of code
      3 parameters
      2 conditional paths
      uses variable big_statement_stack defined in smatch.h
      uses variable statement::type defined in parse.h
      uses enumvalue STMT_EXPRESSION defined in parse.h
      uses variable statement::expression defined in parse.h
      uses macro definition sm_msg defined in smatch.h
   function register_must_check_funcs(void) in line 32
      protection public
      24 lines of code
      1 parameters
      5 conditional paths
      uses macro definition func defined in preprocessor1.c
      uses variable name defined in smatch_type.c
      uses function snprintf(char *,int,char *,char *) defined in sm_overflow6.c
      uses variable option_project_str defined in smatch.c
      uses function get_tokens_file(const char *) defined in smatch.h
      uses enumvalue TOKEN_STREAMBEGIN defined in token.h
      uses variable token::next defined in token.h
      uses enumvalue TOKEN_STREAMEND defined in token.h
      uses enumvalue TOKEN_IDENT defined in token.h
      uses function show_ident(const struct ident *) defined in token.h
      uses variable token::ident defined in token.h
      uses function add_function_hook(const char *,func_hook *,void *) defined in smatch.h
      uses function must_check(const char *,struct expression *,void *) defined in check_return.c
      uses macro definition NULL defined in sm_implied3.c
   function check_return(int) in line 57
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable my_id defined in check_return.c
      uses function register_must_check_funcs(void) defined in check_return.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/check_return_cast.c
module check_return_cast.c
   variable my_id in line 24
      protection public
   function match_return(struct expression *) in line 26
      protection public
      18 lines of code
      1 parameters
      6 conditional paths
      uses function get_real_base_type(struct symbol *) defined in smatch.h
      uses variable cur_func_sym defined in smatch.h
      uses function type_unsigned(struct symbol *) defined in smatch.h
      uses function type_bits(struct symbol *) defined in smatch.h
      uses function get_fuzzy_min(struct expression *,sval_t *) defined in smatch.h
      uses function sval_is_positive(sval_t) defined in smatch.h
      uses function sval_cmp_val(sval_t,long long) defined in smatch.h
      uses macro definition sm_msg defined in smatch.h
      uses function sval_to_str(sval_t) defined in smatch.h
   function check_return_cast(int) in line 45
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable my_id defined in check_return_cast.c
      uses function add_hook(void *,enum hook_type) defined in smatch.h
      uses function match_return(struct expression *) defined in check_return_cast.c
      uses enumvalue RETURN_HOOK defined in smatch.h
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/check_return_efault.c
module check_return_efault.c
   variable my_id in line 27
      protection public
   function STATE(remaining) in line 29
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function STATE(ok) in line 30
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ok_to_use(struct sm_state *,struct expression *) in line 32
      protection public
      5 lines of code
      2 parameters
      2 conditional paths
      uses variable sm_state::state defined in smatch.h
      uses function set_state(int,const char *,struct symbol *,struct smatch_state *) defined in smatch.h
      uses variable my_id defined in check_return_efault.c
      uses variable sm_state::name defined in smatch.h
      uses variable sm_state::sym defined in smatch.h
   function match_copy(const char *,struct expression *,void *) in line 38
      protection public
      6 lines of code
      3 parameters
      2 conditional paths
      uses variable expression::op defined in expression.h
      uses enumvalue SPECIAL_SUB_ASSIGN defined in token.h
      uses function set_state_expr(int,struct expression *,struct smatch_state *) defined in smatch.h
      uses variable my_id defined in check_return_efault.c
      uses variable expression::left defined in expression.h
   function match_condition(struct expression *) in line 45
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses function get_state_expr(int,struct expression *) defined in smatch.h
      uses variable my_id defined in check_return_efault.c
      uses function set_true_false_states_expr(int,struct expression *,struct smatch_state *,struct smatch_state *) defined in smatch.h
      uses macro definition NULL defined in sm_implied3.c
   function match_return(struct expression *) in line 60
      protection public
      20 lines of code
      1 parameters
      6 conditional paths
      uses macro definition min defined in sm_select_assign.c
      uses function get_sm_state_expr(int,struct expression *) defined in smatch.h
      uses variable my_id defined in check_return_efault.c
      uses function slist_has_state(struct state_list *,struct smatch_state *) defined in smatch_slist.c
      uses variable sm_state::possible defined in smatch.h
      uses variable sm_state::state defined in smatch.h
      uses function get_state_expr(int,struct expression *) defined in smatch.h
      uses macro definition SMATCH_EXTRA defined in smatch.h
      uses function get_absolute_min(struct expression *,sval_t *) defined in smatch.h
      uses macro definition sm_msg defined in smatch.h
   function check_return_efault(int) in line 81
      protection public
      15 lines of code
      1 parameters
      2 conditional paths
      uses variable option_project defined in smatch.c
      uses enumvalue PROJ_KERNEL defined in smatch.h
      uses variable my_id defined in check_return_efault.c
      uses function add_function_assign_hook(const char *,func_hook *,void *) defined in smatch.h
      uses function match_copy(const char *,struct expression *,void *) defined in check_return_efault.c
      uses macro definition NULL defined in sm_implied3.c
      uses function add_hook(void *,enum hook_type) defined in smatch.h
      uses function match_condition(struct expression *) defined in check_return_efault.c
      uses enumvalue CONDITION_HOOK defined in smatch.h
      uses function match_return(struct expression *) defined in check_return_efault.c
      uses enumvalue RETURN_HOOK defined in smatch.h
      uses function add_modification_hook(int,modification_hook *) defined in smatch.h
      uses function ok_to_use(struct sm_state *,struct expression *) defined in check_return_efault.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/check_return_enomem.c
module check_return_enomem.c
   variable my_id in line 26
      protection public
   function match_return(struct expression *) in line 28
      protection public
      44 lines of code
      1 parameters
      11 conditional paths
      uses function returns_unsigned(struct symbol *) defined in smatch.h
      uses variable cur_func_sym defined in smatch.h
      uses function returns_pointer(struct symbol *) defined in smatch.h
      uses function get_value(struct expression *,sval_t *) defined in smatch.h
      uses variable sval_t::value defined in smatch.h
      uses function get_macro_name(struct position) defined in macro_table.c
      uses variable expression::pos defined in expression.h
      uses function __get_cur_stree(void) defined in smatch.h
      uses macro definition FOR_EACH_MY_SM defined in avl.h
      uses macro definition SMATCH_EXTRA defined in smatch.h
      uses function estate_get_single_value(struct smatch_state *,sval_t *) defined in smatch.h
      uses variable sm_state::state defined in smatch.h
      uses function get_assigned_expr_name_sym(const char *,struct symbol *) defined in check_assigned_expr.c
      uses variable sm_state::name defined in smatch.h
      uses variable sm_state::sym defined in smatch.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_CALL defined in expression.h
      uses variable expression::fn defined in expression.h
      uses enumvalue EXPR_SYMBOL defined in expression.h
      uses variable expression::symbol_name defined in expression.h
      uses variable ident::name defined in token.h
      uses macro definition sm_msg defined in smatch.h
      uses macro definition END_FOR_EACH_SM defined in avl.h
   function check_return_enomem(int) in line 73
      protection public
      8 lines of code
      1 parameters
      2 conditional paths
      uses variable option_project defined in smatch.c
      uses enumvalue PROJ_KERNEL defined in smatch.h
      uses variable my_id defined in check_return_enomem.c
      uses function add_hook(void *,enum hook_type) defined in smatch.h
      uses function match_return(struct expression *) defined in check_return_enomem.c
      uses enumvalue RETURN_HOOK defined in smatch.h
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/check_return_negative_var.c
module check_return_negative_var.c
   variable my_id in line 21
      protection public
   function match_return(struct expression *) in line 23
      protection public
      28 lines of code
      1 parameters
      7 conditional paths
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_PREOP defined in expression.h
      uses variable expression::op defined in expression.h
      uses function get_macro_name(struct position) defined in macro_table.c
      uses variable expression::unop defined in expression.h
      uses variable expression::pos defined in expression.h
      uses macro definition sm_msg defined in smatch.h
      uses variable option_spammy defined in smatch.c
      uses function get_assigned_expr(struct expression *) defined in check_assigned_expr.c
      uses enumvalue EXPR_CALL defined in expression.h
   function check_return_negative_var(int) in line 52
      protection public
      8 lines of code
      1 parameters
      2 conditional paths
      uses variable option_project defined in smatch.c
      uses enumvalue PROJ_KERNEL defined in smatch.h
      uses variable my_id defined in check_return_negative_var.c
      uses function add_hook(void *,enum hook_type) defined in smatch.h
      uses function match_return(struct expression *) defined in check_return_negative_var.c
      uses enumvalue RETURN_HOOK defined in smatch.h
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/check_rosenberg.c
module check_rosenberg.c
   variable my_whole_id in line 29
      protection public
   variable my_member_id in line 30
      protection public
   function STATE(cleared) in line 32
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function extra_mod_hook(const char *,struct symbol *,struct smatch_state *) in line 34
      protection public
      10 lines of code
      3 parameters
      2 conditional paths
      uses function get_real_base_type(struct symbol *) defined in smatch.h
      uses variable sym defined in smatch_type.c
      uses enumvalue SYM_STRUCT defined in symbol.h
      uses function set_state(int,const char *,struct symbol *,struct smatch_state *) defined in smatch.h
      uses variable my_member_id defined in check_rosenberg.c
      uses variable name defined in smatch_type.c
   function print_holey_warning(struct expression *,const char *) in line 45
      protection public
      14 lines of code
      2 parameters
      2 conditional paths
      uses variable name defined in smatch_type.c
      uses function expr_to_str(struct expression *) defined in smatch.h
      uses variable member defined in smdb.py
      uses macro definition sm_msg defined in smatch.h
      uses function free_string(char *) defined in smatch.h
   function check_struct(struct expression *,struct symbol *) in line 60
      protection public
      43 lines of code
      2 parameters
      10 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses function get_real_base_type(struct symbol *) defined in smatch.h
      uses variable symbol::type defined in struct.c
      uses enumvalue SYM_STRUCT defined in symbol.h
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::alignment defined in struct.c
      uses macro definition sm_msg defined in smatch.h
      uses function print_holey_warning(struct expression *,const char *) defined in check_rosenberg.c
      uses function type_bits(struct symbol *) defined in smatch.h
      uses function type_bytes(struct symbol *) defined in smatch.h
      uses variable symbol::ident defined in struct.c
      uses variable ident::name defined in token.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function warn_on_holey_struct(struct expression *) in line 104
      protection public
      9 lines of code
      1 parameters
      2 conditional paths
      uses function get_type(struct expression *) defined in smatch.h
      uses enumvalue SYM_STRUCT defined in symbol.h
      uses function check_struct(struct expression *,struct symbol *) defined in check_rosenberg.c
   function has_global_scope(struct expression *) in line 114
      protection public
      9 lines of code
      1 parameters
      2 conditional paths
      uses variable sym defined in smatch_type.c
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_SYMBOL defined in expression.h
      uses macro definition FALSE defined in smatch.h
      uses variable expression::symbol defined in expression.h
      uses variable symbol::scope defined in struct.c
   function was_initialized(struct expression *) in line 124
      protection public
      12 lines of code
      1 parameters
      3 conditional paths
      uses variable sym defined in smatch_type.c
      uses variable name defined in smatch_type.c
      uses function expr_to_var_sym(struct expression *,struct symbol **) defined in smatch.h
      uses variable symbol::initializer defined in struct.c
   function match_clear(const char *,struct expression *,void *) in line 137
      protection public
      14 lines of code
      3 parameters
      3 conditional paths
      uses variable ptr defined in sm_null_deref2.c
      uses function get_argument_from_call_expr(struct expression_list *,int) defined in smatch.h
      uses variable expression::args defined in expression.h
      uses function strip_expr(struct expression *) defined in smatch.h
      uses enumvalue EXPR_PREOP defined in expression.h
      uses function set_state_expr(int,struct expression *,struct smatch_state *) defined in smatch.h
      uses variable my_whole_id defined in check_rosenberg.c
   function was_memset(struct expression *) in line 152
      protection public
      6 lines of code
      1 parameters
      2 conditional paths
      uses function get_state_expr(int,struct expression *) defined in smatch.h
      uses variable my_whole_id defined in check_rosenberg.c
   function member_initialized(char *,struct symbol *,struct symbol *,int) in line 159
      protection public
      19 lines of code
      4 parameters
      4 conditional paths
      uses variable buf defined in sm_fake_assignment.c
      uses variable member defined in smdb.py
      uses variable symbol::type defined in struct.c
      uses enumvalue SYM_BASETYPE defined in symbol.h
      uses macro definition FALSE defined in smatch.h
      uses variable pointer defined in sm_user_data1.c
      uses function snprintf(char *,int,char *,char *) defined in sm_overflow6.c
      uses variable name defined in smatch_type.c
      uses function get_state(int,const char *,struct symbol *) defined in smatch.h
      uses variable my_member_id defined in check_rosenberg.c
      uses macro definition TRUE defined in smatch.h
   function member_uninitialized(char *,struct symbol *,struct symbol *,int) in line 179
      protection public
      22 lines of code
      4 parameters
      4 conditional paths
      uses variable buf defined in sm_fake_assignment.c
      uses variable member defined in smdb.py
      uses variable symbol::type defined in struct.c
      uses enumvalue SYM_BASETYPE defined in symbol.h
      uses macro definition FALSE defined in smatch.h
      uses variable pointer defined in sm_user_data1.c
      uses function snprintf(char *,int,char *,char *) defined in sm_overflow6.c
      uses variable name defined in smatch_type.c
      uses function get_sm_state(int,const char *,struct symbol *) defined in smatch.h
      uses variable my_member_id defined in check_rosenberg.c
      uses function slist_has_state(struct state_list *,struct smatch_state *) defined in smatch_slist.c
      uses variable sm_state::possible defined in smatch.h
      uses variable undefined defined in smatch.h
      uses macro definition sm_msg defined in smatch.h
      uses macro definition TRUE defined in smatch.h
   function check_members_initialized(struct expression *) in line 202
      protection public
      43 lines of code
      1 parameters
      9 conditional paths
      uses variable name defined in smatch_type.c
      uses variable sym defined in smatch_type.c
      uses variable pointer defined in sm_user_data1.c
      uses function get_type(struct expression *) defined in smatch.h
      uses variable symbol::type defined in struct.c
      uses enumvalue SYM_PTR defined in symbol.h
      uses function get_real_base_type(struct symbol *) defined in smatch.h
      uses enumvalue SYM_STRUCT defined in symbol.h
      uses function expr_to_var_sym(struct expression *,struct symbol **) defined in smatch.h
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable symbol::symbol_list defined in struct.c
      uses function member_initialized(char *,struct symbol *,struct symbol *,int) defined in check_rosenberg.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses function member_uninitialized(char *,struct symbol *,struct symbol *,int) defined in check_rosenberg.c
      uses function free_string(char *) defined in smatch.h
   function check_was_initialized(struct expression *) in line 246
      protection public
      20 lines of code
      1 parameters
      8 conditional paths
      uses function strip_expr(struct expression *) defined in smatch.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_PREOP defined in expression.h
      uses variable expression::op defined in expression.h
      uses variable expression::unop defined in expression.h
      uses enumvalue EXPR_SYMBOL defined in expression.h
      uses function has_global_scope(struct expression *) defined in check_rosenberg.c
      uses function was_initialized(struct expression *) defined in check_rosenberg.c
      uses function was_memset(struct expression *) defined in check_rosenberg.c
      uses function warn_on_holey_struct(struct expression *) defined in check_rosenberg.c
      uses function check_members_initialized(struct expression *) defined in check_rosenberg.c
   function match_copy_to_user(const char *,struct expression *,void *) in line 267
      protection public
      13 lines of code
      3 parameters
      3 conditional paths
      uses function get_argument_from_call_expr(struct expression_list *,int) defined in smatch.h
      uses variable expression::args defined in expression.h
      uses function strip_expr(struct expression *) defined in smatch.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_PREOP defined in expression.h
      uses variable expression::op defined in expression.h
      uses function check_was_initialized(struct expression *) defined in check_rosenberg.c
   function db_param_cleared(struct expression *,int,char *,char *) in line 281
      protection public
      9 lines of code
      4 parameters
      3 conditional paths
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_ASSIGNMENT defined in expression.h
      uses function strip_expr(struct expression *) defined in smatch.h
      uses variable expression::right defined in expression.h
      uses enumvalue EXPR_CALL defined in expression.h
      uses function match_clear(const char *,struct expression *,void *) defined in check_rosenberg.c
      uses macro definition NULL defined in sm_implied3.c
      uses variable param defined in smatch_parse_call_math.c
   function match_assign(struct expression *) in line 291
      protection public
      9 lines of code
      1 parameters
      2 conditional paths
      uses function get_type(struct expression *) defined in smatch.h
      uses variable expression::left defined in expression.h
      uses enumvalue SYM_STRUCT defined in symbol.h
      uses function set_state_expr(int,struct expression *,struct smatch_state *) defined in smatch.h
      uses variable my_whole_id defined in check_rosenberg.c
   function register_clears_argument(void) in line 301
      protection public
      26 lines of code
      1 parameters
      6 conditional paths
      uses macro definition func defined in preprocessor1.c
      uses function get_tokens_file(const char *) defined in smatch.h
      uses enumvalue TOKEN_STREAMBEGIN defined in token.h
      uses variable token::next defined in token.h
      uses enumvalue TOKEN_STREAMEND defined in token.h
      uses enumvalue TOKEN_IDENT defined in token.h
      uses function show_ident(const struct ident *) defined in token.h
      uses variable token::ident defined in token.h
      uses enumvalue TOKEN_NUMBER defined in token.h
      uses variable token::number defined in token.h
      uses function add_function_hook(const char *,func_hook *,void *) defined in smatch.h
      uses function match_clear(const char *,struct expression *,void *) defined in check_rosenberg.c
   function register_copy_funcs_from_file(void) in line 328
      protection public
      25 lines of code
      1 parameters
      6 conditional paths
      uses macro definition func defined in preprocessor1.c
      uses function get_tokens_file(const char *) defined in smatch.h
      uses enumvalue TOKEN_STREAMBEGIN defined in token.h
      uses variable token::next defined in token.h
      uses enumvalue TOKEN_STREAMEND defined in token.h
      uses enumvalue TOKEN_IDENT defined in token.h
      uses function show_ident(const struct ident *) defined in token.h
      uses variable token::ident defined in token.h
      uses enumvalue TOKEN_NUMBER defined in token.h
      uses variable token::number defined in token.h
      uses function add_function_hook(const char *,func_hook *,void *) defined in smatch.h
      uses function match_copy_to_user(const char *,struct expression *,void *) defined in check_rosenberg.c
   function check_rosenberg(int) in line 354
      protection public
      21 lines of code
      1 parameters
      2 conditional paths
      uses variable option_project defined in smatch.c
      uses enumvalue PROJ_KERNEL defined in smatch.h
      uses variable my_whole_id defined in check_rosenberg.c
      uses function add_function_hook(const char *,func_hook *,void *) defined in smatch.h
      uses function match_clear(const char *,struct expression *,void *) defined in check_rosenberg.c
      uses function add_hook(void *,enum hook_type) defined in smatch.h
      uses function match_assign(struct expression *) defined in check_rosenberg.c
      uses enumvalue ASSIGNMENT_HOOK defined in smatch.h
      uses function register_clears_argument(void) defined in check_rosenberg.c
      uses function select_return_states_hook(int,return_implies_hook *) defined in smatch.h
      uses enumvalue PARAM_CLEARED defined in smatch.h
      uses function db_param_cleared(struct expression *,int,char *,char *) defined in check_rosenberg.c
      uses function register_copy_funcs_from_file(void) defined in check_rosenberg.c
   function check_rosenberg2(int) in line 376
      protection public
      8 lines of code
      1 parameters
      2 conditional paths
      uses variable option_project defined in smatch.c
      uses enumvalue PROJ_KERNEL defined in smatch.h
      uses variable my_member_id defined in check_rosenberg.c
      uses function add_extra_mod_hook(mod_hook *) defined in smatch_extra.c
      uses function extra_mod_hook(const char *,struct symbol *,struct smatch_state *) defined in check_rosenberg.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/check_select.c
module check_select.c
   variable my_id in line 21
      protection public
   function match_select(struct expression *) in line 23
      protection public
      9 lines of code
      1 parameters
      3 conditional paths
      uses variable expression::cond_true defined in expression.h
      uses function strip_expr(struct expression *) defined in smatch.h
      uses variable expression::conditional defined in expression.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_COMPARE defined in expression.h
      uses macro definition sm_msg defined in smatch.h
   function check_select(int) in line 33
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable my_id defined in check_select.c
      uses function add_hook(void *,enum hook_type) defined in smatch.h
      uses function match_select(struct expression *) defined in check_select.c
      uses enumvalue SELECT_HOOK defined in smatch.h
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/check_shift_to_zero.c
module check_shift_to_zero.c
   variable my_id in line 20
      protection public
   function match_binop(struct expression *) in line 22
      protection public
      18 lines of code
      1 parameters
      5 conditional paths
      uses variable expression::op defined in expression.h
      uses enumvalue SPECIAL_RIGHTSHIFT defined in token.h
      uses function get_implied_value(struct expression *,sval_t *) defined in smatch.h
      uses variable expression::right defined in expression.h
      uses function get_type(struct expression *) defined in smatch.h
      uses variable expression::left defined in expression.h
      uses function type_bits(struct symbol *) defined in smatch.h
      uses variable sval_t::value defined in smatch.h
      uses macro definition sm_msg defined in smatch.h
   function match_binop2(struct expression *) in line 41
      protection public
      26 lines of code
      1 parameters
      7 conditional paths
      uses variable expression::left defined in expression.h
      uses variable expression::op defined in expression.h
      uses enumvalue SPECIAL_RIGHTSHIFT defined in token.h
      uses function strip_expr(struct expression *) defined in smatch.h
      uses function get_assigned_expr(struct expression *) defined in check_assigned_expr.c
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_BINOP defined in expression.h
      uses function get_implied_value(struct expression *,sval_t *) defined in smatch.h
      uses variable expression::right defined in expression.h
      uses variable sval_t::uvalue defined in smatch.h
      uses macro definition sm_msg defined in smatch.h
   function match_assign(struct expression *) in line 68
      protection public
      17 lines of code
      1 parameters
      5 conditional paths
      uses variable expression::op defined in expression.h
      uses enumvalue SPECIAL_SHR_ASSIGN defined in token.h
      uses function get_implied_value(struct expression *,sval_t *) defined in smatch.h
      uses variable expression::right defined in expression.h
      uses function get_type(struct expression *) defined in smatch.h
      uses variable expression::left defined in expression.h
      uses function type_bits(struct symbol *) defined in smatch.h
      uses variable sval_t::value defined in smatch.h
      uses macro definition sm_msg defined in smatch.h
   function check_shift_to_zero(int) in line 86
      protection public
      10 lines of code
      1 parameters
      1 conditional paths
      uses variable my_id defined in check_shift_to_zero.c
      uses function add_hook(void *,enum hook_type) defined in smatch.h
      uses function match_binop(struct expression *) defined in check_shift_to_zero.c
      uses enumvalue BINOP_HOOK defined in smatch.h
      uses function match_binop2(struct expression *) defined in check_shift_to_zero.c
      uses function match_assign(struct expression *) defined in check_shift_to_zero.c
      uses enumvalue ASSIGNMENT_HOOK defined in smatch.h
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/check_signed.c
module check_signed.c
   macro definition VAR_ON_RIGHT in line 31
      protection public
   macro definition VAR_ON_LEFT in line 32
      protection public
   variable my_id in line 29
      protection public
   function match_assign(struct expression *) in line 34
      protection public
      50 lines of code
      1 parameters
      12 conditional paths
      uses variable sym defined in smatch_type.c
      uses macro definition min defined in sm_select_assign.c
      uses variable expression::op defined in expression.h
      uses enumvalue SPECIAL_AND_ASSIGN defined in token.h
      uses enumvalue SPECIAL_OR_ASSIGN defined in token.h
      uses function get_type(struct expression *) defined in smatch.h
      uses variable expression::left defined in expression.h
      uses variable symbol::type defined in struct.c
      uses enumvalue SYM_BASETYPE defined in symbol.h
      uses function type_bits(struct symbol *) defined in smatch.h
      uses function get_implied_value(struct expression *,sval_t *) defined in smatch.h
      uses variable expression::right defined in expression.h
      uses function sval_type_max(struct symbol *) defined in smatch.h
      uses function sval_cmp(sval_t,sval_t) defined in smatch.h
      uses variable sval_t::value defined in smatch.h
      uses function expr_to_str(struct expression *) defined in smatch.h
      uses macro definition sm_msg defined in smatch.h
      uses function sval_to_numstr(sval_t) defined in smatch.h
      uses function free_string(char *) defined in smatch.h
      uses function sval_type_min(struct symbol *) defined in smatch.h
      uses function sval_cmp_t(struct symbol *,sval_t,sval_t) defined in smatch.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_PREOP defined in expression.h
      uses enumvalue SPECIAL_SUB_ASSIGN defined in token.h
      uses enumvalue SPECIAL_ADD_ASSIGN defined in token.h
      uses function sval_positive_bits(sval_t) defined in smatch.h
      uses function sval_to_str(sval_t) defined in smatch.h
   function cap_gt_zero_and_lt(struct expression *) in line 85
      protection public
      47 lines of code
      1 parameters
      11 conditional paths
      uses variable expression::left defined in expression.h
      uses macro definition NULL defined in sm_implied3.c
      uses function get_value(struct expression *,sval_t *) defined in smatch.h
      uses variable expression::right defined in expression.h
      uses variable sval_t::value defined in smatch.h
      uses macro definition FOR_EACH_PTR_REVERSE defined in ptrlist.h
      uses variable big_expression_stack defined in smatch.h
      uses variable expression::op defined in expression.h
      uses enumvalue SPECIAL_LOGICAL_AND defined in token.h
      uses function strip_expr(struct expression *) defined in smatch.h
      uses enumvalue SPECIAL_UNSIGNED_LT defined in token.h
      uses enumvalue SPECIAL_LTE defined in token.h
      uses enumvalue SPECIAL_UNSIGNED_LTE defined in token.h
      uses function expr_to_str(struct expression *) defined in smatch.h
      uses macro definition END_FOR_EACH_PTR_REVERSE defined in ptrlist.h
      uses function free_string(char *) defined in smatch.h
   function cap_lt_zero_or_gt(struct expression *) in line 133
      protection public
      47 lines of code
      1 parameters
      11 conditional paths
      uses variable expression::left defined in expression.h
      uses macro definition NULL defined in sm_implied3.c
      uses function get_value(struct expression *,sval_t *) defined in smatch.h
      uses variable expression::right defined in expression.h
      uses variable sval_t::value defined in smatch.h
      uses macro definition FOR_EACH_PTR_REVERSE defined in ptrlist.h
      uses variable big_expression_stack defined in smatch.h
      uses variable expression::op defined in expression.h
      uses enumvalue SPECIAL_LOGICAL_OR defined in token.h
      uses function strip_expr(struct expression *) defined in smatch.h
      uses enumvalue SPECIAL_UNSIGNED_GT defined in token.h
      uses enumvalue SPECIAL_GTE defined in token.h
      uses enumvalue SPECIAL_UNSIGNED_GTE defined in token.h
      uses function expr_to_str(struct expression *) defined in smatch.h
      uses macro definition END_FOR_EACH_PTR_REVERSE defined in ptrlist.h
      uses function free_string(char *) defined in smatch.h
   function cap_both_sides(struct expression *) in line 181
      protection public
      16 lines of code
      1 parameters
      9 conditional paths
      uses variable expression::op defined in expression.h
      uses enumvalue SPECIAL_UNSIGNED_LT defined in token.h
      uses enumvalue SPECIAL_LTE defined in token.h
      uses enumvalue SPECIAL_UNSIGNED_LTE defined in token.h
      uses function cap_lt_zero_or_gt(struct expression *) defined in check_signed.c
      uses enumvalue SPECIAL_UNSIGNED_GT defined in token.h
      uses enumvalue SPECIAL_GTE defined in token.h
      uses enumvalue SPECIAL_UNSIGNED_GTE defined in token.h
      uses function cap_gt_zero_and_lt(struct expression *) defined in check_signed.c
   function compare_against_macro(struct expression *) in line 198
      protection public
      11 lines of code
      1 parameters
      3 conditional paths
      uses variable expression::op defined in expression.h
      uses enumvalue SPECIAL_UNSIGNED_LT defined in token.h
      uses function get_value(struct expression *,sval_t *) defined in smatch.h
      uses variable expression::right defined in expression.h
      uses variable sval_t::value defined in smatch.h
      uses function get_macro_name(struct position) defined in macro_table.c
      uses variable expression::pos defined in expression.h
   function print_unsigned_never_less_than_zero(struct expression *) in line 210
      protection public
      16 lines of code
      1 parameters
      3 conditional paths
      uses variable name defined in smatch_type.c
      uses variable expression::op defined in expression.h
      uses enumvalue SPECIAL_UNSIGNED_LT defined in token.h
      uses function get_value(struct expression *,sval_t *) defined in smatch.h
      uses variable expression::right defined in expression.h
      uses variable sval_t::value defined in smatch.h
      uses function expr_to_str(struct expression *) defined in smatch.h
      uses variable expression::left defined in expression.h
      uses macro definition sm_msg defined in smatch.h
      uses function free_string(char *) defined in smatch.h
   function match_condition(struct expression *) in line 227
      protection public
      74 lines of code
      1 parameters
      12 conditional paths
      uses macro definition min defined in sm_select_assign.c
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_COMPARE defined in expression.h
      uses function get_type(struct expression *) defined in smatch.h
      uses function get_macro_name(struct position) defined in macro_table.c
      uses variable expression::pos defined in expression.h
      uses function compare_against_macro(struct expression *) defined in check_signed.c
      uses function cap_both_sides(struct expression *) defined in check_signed.c
      uses function print_unsigned_never_less_than_zero(struct expression *) defined in check_signed.c
      uses function get_value(struct expression *,sval_t *) defined in smatch.h
      uses variable expression::left defined in expression.h
      uses variable expression::right defined in expression.h
      uses function alloc_rl(sval_t,sval_t) defined in smatch_extra.h
      uses function cast_rl(struct symbol *,struct range_list *) defined in smatch_extra.h
      uses function sval_type_min(struct symbol *) defined in smatch.h
      uses function sval_type_max(struct symbol *) defined in smatch.h
      uses function possibly_true_rl(struct range_list *,int,struct range_list *) defined in smatch_extra.h
      uses variable expression::op defined in expression.h
      uses variable name defined in smatch_type.c
      uses function expr_to_str(struct expression *) defined in smatch.h
      uses macro definition sm_msg defined in smatch.h
      uses function show_rl(struct range_list *) defined in smatch_extra.h
      uses function show_special(int) defined in token.h
      uses function free_string(char *) defined in smatch.h
      uses function possibly_false_rl(struct range_list *,int,struct range_list *) defined in smatch_extra.h
   function check_signed(int) in line 302
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses variable my_id defined in check_signed.c
      uses function add_hook(void *,enum hook_type) defined in smatch.h
      uses function match_assign(struct expression *) defined in check_signed.c
      uses enumvalue ASSIGNMENT_HOOK defined in smatch.h
      uses function match_condition(struct expression *) defined in check_signed.c
      uses enumvalue CONDITION_HOOK defined in smatch.h
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/check_sizeof.c
module check_sizeof.c
   variable my_id in line 20
      protection public
   variable macro_takes_sizeof_argument in line 97
      protection public
   function check_pointer(struct expression *,char *) in line 22
      protection public
      19 lines of code
      2 parameters
      4 conditional paths
      uses variable name defined in smatch_type.c
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_SIZEOF defined in expression.h
      uses function get_value(struct expression *,sval_t *) defined in smatch.h
      uses function strip_expr(struct expression *) defined in smatch.h
      uses variable expression::cast_expression defined in expression.h
      uses function expr_to_str(struct expression *) defined in smatch.h
      uses macro definition sm_msg defined in smatch.h
      uses function free_string(char *) defined in smatch.h
   function match_call_assignment(struct expression *) in line 42
      protection public
      19 lines of code
      1 parameters
      3 conditional paths
      uses function strip_expr(struct expression *) defined in smatch.h
      uses variable expression::right defined in expression.h
      uses function is_pointer(struct expression *) defined in smatch.h
      uses variable expression::left defined in expression.h
      uses function expr_to_str(struct expression *) defined in smatch.h
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable expression::args defined in expression.h
      uses function check_pointer(struct expression *,char *) defined in check_sizeof.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses function free_string(char *) defined in smatch.h
   function check_passes_pointer(char *,struct expression *) in line 62
      protection public
      14 lines of code
      2 parameters
      3 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable expression::args defined in expression.h
      uses function expr_to_var(struct expression *) defined in smatch.h
      uses variable name defined in smatch_type.c
      uses macro definition sm_msg defined in smatch.h
      uses function free_string(char *) defined in smatch.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function match_check_params(struct expression *) in line 77
      protection public
      19 lines of code
      1 parameters
      4 conditional paths
      uses variable name defined in smatch_type.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable expression::args defined in expression.h
      uses enumvalue EXPR_SIZEOF defined in expression.h
      uses function strip_expr(struct expression *) defined in smatch.h
      uses function is_pointer(struct expression *) defined in smatch.h
      uses function expr_to_var(struct expression *) defined in smatch.h
      uses function check_passes_pointer(char *,struct expression *) defined in check_sizeof.c
      uses function free_string(char *) defined in smatch.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function check_sizeof_number(struct expression *) in line 98
      protection public
      14 lines of code
      1 parameters
      3 conditional paths
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_VALUE defined in expression.h
      uses function get_macro_name(struct position) defined in macro_table.c
      uses variable expression::pos defined in expression.h
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable macro_takes_sizeof_argument defined in check_sizeof.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses macro definition sm_msg defined in smatch.h
   function match_sizeof(struct expression *) in line 113
      protection public
      11 lines of code
      1 parameters
      4 conditional paths
      uses function check_sizeof_number(struct expression *) defined in check_sizeof.c
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_PREOP defined in expression.h
      uses variable expression::op defined in expression.h
      uses macro definition sm_msg defined in smatch.h
      uses enumvalue EXPR_SIZEOF defined in expression.h
      uses enumvalue EXPR_BINOP defined in expression.h
      uses function get_macro_name(struct position) defined in macro_table.c
      uses variable expression::pos defined in expression.h
   function register_macro_takes_sizeof_argument(void) in line 125
      protection public
      23 lines of code
      1 parameters
      5 conditional paths
      uses variable name defined in smatch_type.c
      uses function snprintf(char *,int,char *,char *) defined in sm_overflow6.c
      uses variable option_project_str defined in smatch.c
      uses function get_tokens_file(const char *) defined in smatch.h
      uses enumvalue TOKEN_STREAMBEGIN defined in token.h
      uses variable token::next defined in token.h
      uses enumvalue TOKEN_STREAMEND defined in token.h
      uses enumvalue TOKEN_IDENT defined in token.h
      uses function alloc_string(const char *) defined in smatch.h
      uses function show_ident(const struct ident *) defined in token.h
      uses variable token::ident defined in token.h
      uses macro definition add_ptr_list defined in ptrlist.h
      uses variable macro_takes_sizeof_argument defined in check_sizeof.c
   function check_sizeof(int) in line 149
      protection public
      9 lines of code
      1 parameters
      1 conditional paths
      uses variable my_id defined in check_sizeof.c
      uses function register_macro_takes_sizeof_argument(void) defined in check_sizeof.c
      uses function add_hook(void *,enum hook_type) defined in smatch.h
      uses function match_call_assignment(struct expression *) defined in check_sizeof.c
      uses enumvalue CALL_ASSIGNMENT_HOOK defined in smatch.h
      uses function match_check_params(struct expression *) defined in check_sizeof.c
      uses enumvalue FUNCTION_CALL_HOOK defined in smatch.h
      uses function match_sizeof(struct expression *) defined in check_sizeof.c
      uses enumvalue SIZEOF_HOOK defined in smatch.h
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/check_snprintf.c
module check_snprintf.c
   variable my_id in line 22
      protection public
   function ok_to_use(struct sm_state *,struct expression *) in line 24
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function set_state(int,const char *,struct symbol *,struct smatch_state *) defined in smatch.h
      uses variable my_id defined in check_snprintf.c
      uses variable sm_state::name defined in smatch.h
      uses variable sm_state::sym defined in smatch.h
      uses variable undefined defined in smatch.h
   function match_snprintf(const char *,struct expression *,void *) in line 29
      protection public
      12 lines of code
      3 parameters
      2 conditional paths
      uses function strip_expr(struct expression *) defined in smatch.h
      uses variable expression::right defined in expression.h
      uses function get_argument_from_call_expr(struct expression_list *,int) defined in smatch.h
      uses variable expression::args defined in expression.h
      uses function get_fuzzy_max(struct expression *,sval_t *) defined in smatch.h
      uses function set_state_expr(int,struct expression *,struct smatch_state *) defined in smatch.h
      uses variable my_id defined in check_snprintf.c
      uses variable expression::left defined in expression.h
      uses function alloc_state_num(int) defined in smatch.h
      uses variable sval_t::value defined in smatch.h
   function get_old_buflen(struct sm_state *) in line 42
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable sm_state::possible defined in smatch.h
      uses variable sm_state::state defined in smatch.h
      uses variable smatch_state::data defined in smatch.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function match_call(struct expression *) in line 54
      protection public
      19 lines of code
      1 parameters
      4 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable expression::args defined in expression.h
      uses function get_sm_state_expr(int,struct expression *) defined in smatch.h
      uses variable my_id defined in check_snprintf.c
      uses function get_old_buflen(struct sm_state *) defined in check_snprintf.c
      uses function get_absolute_max(struct expression *,sval_t *) defined in smatch.h
      uses function sval_cmp_val(sval_t,long long) defined in smatch.h
      uses macro definition sm_msg defined in smatch.h
      uses variable sm_state::name defined in smatch.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function check_snprintf(int) in line 74
      protection public
      12 lines of code
      1 parameters
      3 conditional paths
      uses variable option_project defined in smatch.c
      uses enumvalue PROJ_KERNEL defined in smatch.h
      uses variable option_spammy defined in smatch.c
      uses variable my_id defined in check_snprintf.c
      uses function add_hook(void *,enum hook_type) defined in smatch.h
      uses function match_call(struct expression *) defined in check_snprintf.c
      uses enumvalue FUNCTION_CALL_HOOK defined in smatch.h
      uses function add_function_assign_hook(const char *,func_hook *,void *) defined in smatch.h
      uses function match_snprintf(const char *,struct expression *,void *) defined in check_snprintf.c
      uses macro definition NULL defined in sm_implied3.c
      uses function add_modification_hook(int,modification_hook *) defined in smatch.h
      uses function ok_to_use(struct sm_state *,struct expression *) defined in check_snprintf.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/check_stack.c
module check_stack.c
   macro definition MAX_ALLOWED in line 33
      protection public
   variable my_id in line 26
      protection public
   variable total_size in line 28
      protection public
   variable max_size in line 29
      protection public
   variable max_lineno in line 30
      protection public
   variable complained in line 31
      protection public
   function scope_end(void *) in line 35
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable total_size defined in check_stack.c
   function match_declarations(struct symbol *) in line 41
      protection public
      20 lines of code
      1 parameters
      4 conditional paths
      uses variable name defined in smatch_type.c
      uses variable sym defined in smatch_type.c
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::modifiers defined in struct.c
      uses macro definition MOD_STATIC defined in symbol.h
      uses variable symbol::ident defined in struct.c
      uses variable ident::name defined in token.h
      uses variable total_size defined in check_stack.c
      uses function type_bytes(struct symbol *) defined in smatch.h
      uses variable max_size defined in check_stack.c
      uses variable max_lineno defined in check_stack.c
      uses function get_lineno(void) defined in smatch.h
      uses macro definition MAX_ALLOWED defined in check_stack.c
      uses variable complained defined in check_stack.c
      uses macro definition sm_msg defined in smatch.h
      uses function add_scope_hook(scope_hook *,void *) defined in smatch.h
      uses function scope_end(void *) defined in check_stack.c
   function match_end_func(struct symbol *) in line 62
      protection public
      14 lines of code
      1 parameters
      3 conditional paths
      uses variable __inline_fn defined in smatch.h
      uses variable max_size defined in check_stack.c
      uses macro definition MAX_ALLOWED defined in check_stack.c
      uses variable complained defined in check_stack.c
      uses macro definition sm_printf defined in smatch.h
      uses function get_filename(void) defined in smatch.h
      uses variable max_lineno defined in check_stack.c
      uses function get_function(void) defined in smatch.h
      uses variable total_size defined in check_stack.c
   function check_stack(int) in line 77
      protection public
      9 lines of code
      1 parameters
      2 conditional paths
      uses variable option_project defined in smatch.c
      uses enumvalue PROJ_KERNEL defined in smatch.h
      uses variable option_spammy defined in smatch.c
      uses variable my_id defined in check_stack.c
      uses function add_hook(void *,enum hook_type) defined in smatch.h
      uses function match_declarations(struct symbol *) defined in check_stack.c
      uses enumvalue DECLARATION_HOOK defined in smatch.h
      uses function match_end_func(struct symbol *) defined in check_stack.c
      uses enumvalue END_FUNC_HOOK defined in smatch.h
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/check_string_len.c
module check_string_len.c
   variable my_id in line 29
      protection public
   variable zero_one in line 29
      protection public
   function handle_format(struct expression *,char **,int *) in line 38
      protection public
      132 lines of code
      3 parameters
      39 conditional paths
      uses variable p defined in cond_expr2.c
      uses variable buf defined in sm_fake_assignment.c
      uses variable option_project defined in smatch.c
      uses enumvalue PROJ_KERNEL defined in smatch.h
      uses function get_argument_from_call_expr(struct expression_list *,int) defined in smatch.h
      uses variable expression::args defined in expression.h
      uses function get_array_size_bytes(struct expression *) defined in smatch.h
      uses function get_absolute_max(struct expression *,sval_t *) defined in smatch.h
      uses function snprintf(char *,int,char *,char *) defined in sm_overflow6.c
      uses variable sval_t::uvalue defined in smatch.h
      uses function expr_unsigned(struct expression *) defined in smatch.h
      uses macro definition min defined in sm_select_assign.c
      uses variable sval_t::value defined in smatch.h
      uses function get_absolute_min(struct expression *,sval_t *) defined in smatch.h
   function get_formatted_string_size(struct expression *,int) in line 171
      protection public
      28 lines of code
      2 parameters
      1 conditional paths
      uses variable p defined in cond_expr2.c
      uses function get_argument_from_call_expr(struct expression_list *,int) defined in smatch.h
      uses variable expression::args defined in expression.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_STRING defined in expression.h
      uses variable expression::string defined in expression.h
      uses variable string::data defined in token.h
      uses function handle_format(struct expression *,char **,int *) defined in check_string_len.c
   function match_not_limited(const char *,struct expression *,void *) in line 200
      protection public
      44 lines of code
      3 parameters
      9 conditional paths
      uses function info(struct position,const char *,...) defined in lib.c
      uses variable dest defined in sm_user_data2.c
      uses variable offset defined in sm_implied10.c
      uses function get_argument_from_call_expr(struct expression_list *,int) defined in smatch.h
      uses variable expression::args defined in expression.h
      uses variable param_info::buf_or_limit defined in check_string_len.c
      uses function strip_expr(struct expression *) defined in smatch.h
      uses enumvalue EXPR_BINOP defined in expression.h
      uses function get_hard_max(struct expression *,sval_t *) defined in smatch.h
      uses variable sval_t::value defined in smatch.h
      uses function get_array_size_bytes(struct expression *) defined in smatch.h
      uses function get_formatted_string_size(struct expression *,int) defined in check_string_len.c
      uses variable param_info::string defined in check_string_len.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses function is_user_data(struct expression *) defined in check_user_data.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses macro definition sm_msg defined in smatch.h
   function check_string_len(int) in line 245
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable my_id defined in check_string_len.c
      uses function add_function_hook(const char *,func_hook *,void *) defined in smatch.h
      uses function match_not_limited(const char *,struct expression *,void *) defined in check_string_len.c
      uses variable zero_one defined in check_string_len.c
   variable param_info::buf_or_limit in line 32
      protection public
   variable param_info::string in line 33
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/check_struct_type.c
module check_struct_type.c
   variable my_id in line 20
      protection public
   function match_assign(const char *,struct expression *,void *) in line 22
      protection public
      33 lines of code
      3 parameters
      7 conditional paths
      uses variable expression::left defined in expression.h
      uses function strip_expr(struct expression *) defined in smatch.h
      uses function get_type(struct expression *) defined in smatch.h
      uses variable symbol::type defined in struct.c
      uses enumvalue SYM_PTR defined in symbol.h
      uses function get_real_base_type(struct symbol *) defined in smatch.h
      uses enumvalue SYM_STRUCT defined in symbol.h
      uses variable expression::right defined in expression.h
      uses function get_argument_from_call_expr(struct expression_list *,int) defined in smatch.h
      uses variable expression::args defined in expression.h
      uses enumvalue EXPR_SIZEOF defined in expression.h
      uses enumvalue SYM_NODE defined in symbol.h
      uses variable symbol::ident defined in struct.c
      uses variable ident::name defined in token.h
      uses macro definition sm_msg defined in smatch.h
   function check_struct_type(int) in line 56
      protection public
      9 lines of code
      1 parameters
      2 conditional paths
      uses variable my_id defined in check_struct_type.c
      uses variable option_project defined in smatch.c
      uses enumvalue PROJ_KERNEL defined in smatch.h
      uses function add_function_assign_hook(const char *,func_hook *,void *) defined in smatch.h
      uses function match_assign(const char *,struct expression *,void *) defined in check_struct_type.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/check_template.c
module check_template.c
   variable my_id in line 43
      protection public
   function STATE(lock) in line 45
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function STATE(unlock) in line 46
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function unmatched_state(struct sm_state *) in line 54
      protection public
      8 lines of code
      1 parameters
      3 conditional paths
      uses variable sm_state::state defined in smatch.h
      uses variable undefined defined in smatch.h
   function match_call(struct expression *) in line 63
      protection public
      21 lines of code
      1 parameters
      4 conditional paths
      uses function expr_to_var(struct expression *) defined in smatch.h
      uses variable expression::fn defined in expression.h
      uses function get_argument_from_call_expr(struct expression_list *,int) defined in smatch.h
      uses variable expression::args defined in expression.h
      uses function set_state(int,const char *,struct symbol *,struct smatch_state *) defined in smatch.h
      uses variable my_id defined in check_template.c
      uses macro definition NULL defined in sm_implied3.c
      uses function free_string(char *) defined in smatch.h
   function match_return(struct expression *) in line 85
      protection public
      16 lines of code
      1 parameters
      3 conditional paths
      uses function get_value(struct expression *,sval_t *) defined in smatch.h
      uses function sval_cmp_val(sval_t,long long) defined in smatch.h
      uses function __get_cur_stree(void) defined in smatch.h
      uses macro definition FOR_EACH_MY_SM defined in avl.h
      uses variable my_id defined in check_template.c
      uses variable sm_state::state defined in smatch.h
      uses macro definition sm_msg defined in smatch.h
      uses variable sm_state::name defined in smatch.h
      uses macro definition END_FOR_EACH_SM defined in avl.h
   function check_template(int) in line 102
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses variable my_id defined in check_template.c
      uses function add_unmatched_state_hook(int,unmatched_func_t *) defined in smatch.h
      uses function unmatched_state(struct sm_state *) defined in check_template.c
      uses function add_hook(void *,enum hook_type) defined in smatch.h
      uses function match_call(struct expression *) defined in check_template.c
      uses enumvalue FUNCTION_CALL_HOOK defined in smatch.h
      uses function match_return(struct expression *) defined in check_template.c
      uses enumvalue RETURN_HOOK defined in smatch.h
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/check_test_bit.c
module check_test_bit.c
   variable my_id in line 21
      protection public
   function match_test_bit(const char *,struct expression *,void *) in line 23
      protection public
      17 lines of code
      3 parameters
      4 conditional paths
      uses function get_argument_from_call_expr(struct expression_list *,int) defined in smatch.h
      uses variable expression::args defined in expression.h
      uses function strip_expr(struct expression *) defined in smatch.h
      uses enumvalue EXPR_BINOP defined in expression.h
      uses enumvalue SPECIAL_LEFTSHIFT defined in token.h
      uses function get_macro_name(struct position) defined in macro_table.c
      uses macro definition sm_msg defined in smatch.h
   function check_test_bit(int) in line 41
      protection public
      12 lines of code
      1 parameters
      2 conditional paths
      uses variable my_id defined in check_test_bit.c
      uses variable option_project defined in smatch.c
      uses enumvalue PROJ_KERNEL defined in smatch.h
      uses function add_function_hook(const char *,func_hook *,void *) defined in smatch.h
      uses function match_test_bit(const char *,struct expression *,void *) defined in check_test_bit.c
      uses macro definition NULL defined in sm_implied3.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/check_type.c
module check_type.c
   variable my_id in line 20
      protection public
   function in_function(const char *) in line 22
      protection public
      10 lines of code
      1 parameters
      3 conditional paths
      uses function get_function(void) defined in smatch.h
   function match_free(const char *,struct expression *,void *) in line 33
      protection public
      25 lines of code
      3 parameters
      6 conditional paths
      uses variable name defined in smatch_type.c
      uses function get_argument_from_call_expr(struct expression_list *,int) defined in smatch.h
      uses variable expression::args defined in expression.h
      uses function get_pointer_type(struct expression *) defined in smatch.h
      uses function expr_to_str(struct expression *) defined in smatch.h
      uses macro definition sm_msg defined in smatch.h
      uses function in_function(const char *) defined in check_type.c
      uses function free_string(char *) defined in smatch.h
   function check_type(int) in line 59
      protection public
      6 lines of code
      1 parameters
      2 conditional paths
      uses variable my_id defined in check_type.c
      uses variable option_project defined in smatch.c
      uses enumvalue PROJ_KERNEL defined in smatch.h
      uses function add_function_hook(const char *,func_hook *,void *) defined in smatch.h
      uses function match_free(const char *,struct expression *,void *) defined in check_type.c
      uses macro definition NULL defined in sm_implied3.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/check_unreachable.c
module check_unreachable.c
   variable my_id in line 20
      protection public
   variable print_unreached in line 22
      protection public
   variable turn_off_names in line 23
      protection public
   variable ignore_names in line 24
      protection public
   function empty_statement(struct statement *) in line 26
      protection public
      8 lines of code
      1 parameters
      3 conditional paths
      uses variable statement::type defined in parse.h
      uses enumvalue STMT_EXPRESSION defined in parse.h
      uses variable statement::expression defined in parse.h
   function is_last_stmt(struct statement *) in line 35
      protection public
      17 lines of code
      1 parameters
      5 conditional paths
      uses variable cur_func_sym defined in smatch.h
      uses variable statement::type defined in parse.h
      uses enumvalue STMT_COMPOUND defined in parse.h
      uses variable statement::stmts defined in parse.h
   function print_unreached_initializers(struct symbol_list *) in line 53
      protection public
      10 lines of code
      1 parameters
      2 conditional paths
      uses variable sym defined in smatch_type.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable symbol::initializer defined in struct.c
      uses macro definition sm_msg defined in smatch.h
      uses variable symbol::ident defined in struct.c
      uses variable ident::name defined in token.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function is_ignored_macro(struct statement *) in line 64
      protection public
      16 lines of code
      1 parameters
      3 conditional paths
      uses variable name defined in smatch_type.c
      uses function get_macro_name(struct position) defined in macro_table.c
      uses variable symbol::stmt defined in struct.c
      uses variable statement::pos defined in parse.h
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable ignore_names defined in check_unreachable.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function prev_line_was_endif(struct statement *) in line 81
      protection public
      21 lines of code
      1 parameters
      3 conditional paths
      uses variable position::pos defined in lib.h
      uses variable statement::pos defined in parse.h
      uses function pos_get_token(struct position) defined in token.h
      uses enumvalue TOKEN_IDENT defined in token.h
      uses function show_ident(const struct ident *) defined in token.h
      uses variable token::ident defined in token.h
   function we_jumped_into_the_middle_of_a_loop(struct statement *) in line 103
      protection public
      24 lines of code
      1 parameters
      3 conditional paths
      uses variable statement::type defined in parse.h
      uses enumvalue STMT_ITERATOR defined in parse.h
      uses function get_prev_statement(void) defined in smatch.h
      uses enumvalue STMT_GOTO defined in parse.h
   function unreachable_stmt(struct statement *) in line 128
      protection public
      50 lines of code
      1 parameters
      17 conditional paths
      uses variable __inline_fn defined in smatch.h
      uses function __path_is_null(void) defined in smatch.h
      uses variable print_unreached defined in check_unreachable.c
      uses variable statement::type defined in parse.h
      uses enumvalue STMT_LABEL defined in parse.h
      uses function prev_line_was_endif(struct statement *) defined in check_unreachable.c
      uses function we_jumped_into_the_middle_of_a_loop(struct statement *) defined in check_unreachable.c
      uses function empty_statement(struct statement *) defined in check_unreachable.c
      uses function is_ignored_macro(struct statement *) defined in check_unreachable.c
      uses enumvalue STMT_COMPOUND defined in parse.h
      uses enumvalue STMT_RANGE defined in parse.h
      uses enumvalue STMT_CASE defined in parse.h
      uses enumvalue STMT_DECLARATION defined in parse.h
      uses function print_unreached_initializers(struct symbol_list *) defined in check_unreachable.c
      uses variable statement::declaration defined in parse.h
      uses enumvalue STMT_RETURN defined in parse.h
      uses function is_last_stmt(struct statement *) defined in check_unreachable.c
      uses enumvalue STMT_GOTO defined in parse.h
      uses variable statement::goto_label defined in parse.h
      uses variable symbol::type defined in struct.c
      uses enumvalue SYM_NODE defined in symbol.h
      uses variable symbol::ident defined in struct.c
      uses variable ident::name defined in token.h
      uses macro definition sm_msg defined in smatch.h
   function is_turn_off(char *) in line 179
      protection public
      14 lines of code
      1 parameters
      3 conditional paths
      uses variable name defined in smatch_type.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable turn_off_names defined in check_unreachable.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function get_function_name(struct statement *) in line 194
      protection public
      13 lines of code
      1 parameters
      4 conditional paths
      uses variable statement::type defined in parse.h
      uses enumvalue STMT_EXPRESSION defined in parse.h
      uses macro definition NULL defined in sm_implied3.c
      uses variable statement::expression defined in parse.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_CALL defined in expression.h
      uses variable expression::fn defined in expression.h
      uses enumvalue EXPR_SYMBOL defined in expression.h
      uses variable expression::symbol_name defined in expression.h
      uses variable ident::name defined in token.h
   function turn_off_unreachable(struct statement *) in line 208
      protection public
      20 lines of code
      1 parameters
      4 conditional paths
      uses variable name defined in smatch_type.c
      uses function get_macro_name(struct position) defined in macro_table.c
      uses variable statement::pos defined in parse.h
      uses function is_turn_off(char *) defined in check_unreachable.c
      uses variable print_unreached defined in check_unreachable.c
      uses variable statement::type defined in parse.h
      uses enumvalue STMT_IF defined in parse.h
      uses function known_condition_true(struct expression *) defined in smatch.h
      uses variable statement::if_conditional defined in parse.h
      uses function __path_is_null(void) defined in smatch.h
      uses function get_function_name(struct statement *) defined in check_unreachable.c
   function register_turn_off_macros(void) in line 229
      protection public
      26 lines of code
      1 parameters
      6 conditional paths
      uses variable name defined in smatch_type.c
      uses variable option_project defined in smatch.c
      uses enumvalue PROJ_NONE defined in smatch.h
      uses function strcpy(char *,char *,int) defined in sm_overflow3.c
      uses function snprintf(char *,int,char *,char *) defined in sm_overflow6.c
      uses variable option_project_str defined in smatch.c
      uses function get_tokens_file(const char *) defined in smatch.h
      uses enumvalue TOKEN_STREAMBEGIN defined in token.h
      uses variable token::next defined in token.h
      uses enumvalue TOKEN_STREAMEND defined in token.h
      uses enumvalue TOKEN_IDENT defined in token.h
      uses function alloc_string(const char *) defined in smatch.h
      uses function show_ident(const struct ident *) defined in token.h
      uses variable token::ident defined in token.h
      uses macro definition add_ptr_list defined in ptrlist.h
      uses variable turn_off_names defined in check_unreachable.c
   function register_ignored_macros(void) in line 256
      protection public
      26 lines of code
      1 parameters
      6 conditional paths
      uses variable name defined in smatch_type.c
      uses variable option_project defined in smatch.c
      uses enumvalue PROJ_NONE defined in smatch.h
      uses function strcpy(char *,char *,int) defined in sm_overflow3.c
      uses function snprintf(char *,int,char *,char *) defined in sm_overflow6.c
      uses variable option_project_str defined in smatch.c
      uses function get_tokens_file(const char *) defined in smatch.h
      uses enumvalue TOKEN_STREAMBEGIN defined in token.h
      uses variable token::next defined in token.h
      uses enumvalue TOKEN_STREAMEND defined in token.h
      uses enumvalue TOKEN_IDENT defined in token.h
      uses function alloc_string(const char *) defined in smatch.h
      uses function show_ident(const struct ident *) defined in token.h
      uses variable token::ident defined in token.h
      uses macro definition add_ptr_list defined in ptrlist.h
      uses variable ignore_names defined in check_unreachable.c
   function check_unreachable(int) in line 283
      protection public
      9 lines of code
      1 parameters
      1 conditional paths
      uses variable my_id defined in check_unreachable.c
      uses function register_turn_off_macros(void) defined in check_unreachable.c
      uses function register_ignored_macros(void) defined in check_unreachable.c
      uses function add_hook(void *,enum hook_type) defined in smatch.h
      uses function unreachable_stmt(struct statement *) defined in check_unreachable.c
      uses enumvalue STMT_HOOK defined in smatch.h
      uses function turn_off_unreachable(struct statement *) defined in check_unreachable.c
      uses enumvalue STMT_HOOK_AFTER defined in smatch.h
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/check_unused_ret.c
module check_unused_ret.c
   variable my_id in line 48
      protection public
   variable assignment_list in line 58
      protection public
   variable skip_this in line 60
      protection public
   variable assign_id in line 61
      protection public
   variable ignored_funcs in line 65
      protection public
   variable kernel_ignored in line 67
      protection public
   function ALLOCATOR(assignment,"assignment id") in line 56
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function DECLARE_PTR_LIST(assignment_list,struct assignment) in line 57
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function DEFINE_HASHTABLE_INSERT(insert_func,char,int) in line 63
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function DEFINE_HASHTABLE_SEARCH(search_func,char,int) in line 64
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function get_fn_name(struct expression *) in line 76
      protection public
      8 lines of code
      1 parameters
      3 conditional paths
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_CALL defined in expression.h
      uses macro definition NULL defined in sm_implied3.c
      uses variable expression::fn defined in expression.h
      uses enumvalue EXPR_SYMBOL defined in expression.h
      uses function expr_to_var(struct expression *) defined in smatch.h
   function ignored_function(struct expression *) in line 85
      protection public
      13 lines of code
      1 parameters
      3 conditional paths
      uses macro definition func defined in preprocessor1.c
      uses function get_fn_name(struct expression *) defined in check_unused_ret.c
      uses variable ignored_funcs defined in check_unused_ret.c
      uses function free_string(char *) defined in smatch.h
   function match_assign_call(struct expression *) in line 99
      protection public
      32 lines of code
      1 parameters
      8 conditional paths
      uses variable expression::left defined in expression.h
      uses variable final_pass defined in smatch.h
      uses function in_condition(void) defined in smatch.h
      uses variable expression::op defined in expression.h
      uses function unreachable(void) defined in smatch.h
      uses function ignored_function(struct expression *) defined in check_unused_ret.c
      uses variable expression::right defined in expression.h
      uses function strip_expr(struct expression *) defined in smatch.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_SYMBOL defined in expression.h
      uses variable expression::symbol defined in expression.h
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::modifiers defined in struct.c
      uses macro definition MOD_TOPLEVEL defined in symbol.h
      uses macro definition MOD_EXTERN defined in symbol.h
      uses macro definition MOD_STATIC defined in symbol.h
      uses variable skip_this defined in check_unused_ret.c
      uses function set_state_expr(int,struct expression *,struct smatch_state *) defined in smatch.h
      uses variable my_id defined in check_unused_ret.c
      uses function alloc_state_num(int) defined in smatch.h
      uses variable assignment::assign_id defined in check_unused_ret.c
      uses variable assignment::name defined in check_unused_ret.c
      uses function expr_to_var(struct expression *) defined in smatch.h
      uses variable assignment::function defined in check_unused_ret.c
      uses function get_fn_name(struct expression *) defined in check_unused_ret.c
      uses variable assignment::line defined in check_unused_ret.c
      uses function get_lineno(void) defined in smatch.h
      uses macro definition add_ptr_list defined in ptrlist.h
      uses variable assignment_list defined in check_unused_ret.c
   function match_assign(struct expression *) in line 132
      protection public
      11 lines of code
      1 parameters
      3 conditional paths
      uses variable expression::left defined in expression.h
      uses variable expression::op defined in expression.h
      uses function strip_expr(struct expression *) defined in smatch.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_SYMBOL defined in expression.h
      uses function set_state_expr(int,struct expression *,struct smatch_state *) defined in smatch.h
      uses variable my_id defined in check_unused_ret.c
      uses variable undefined defined in smatch.h
   function delete_used(int) in line 144
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable assignment_list defined in check_unused_ret.c
      uses variable assignment::assign_id defined in check_unused_ret.c
      uses macro definition DELETE_CURRENT_PTR defined in ptrlist.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function delete_used_symbols(struct state_list *) in line 156
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable sm_state::possible defined in smatch.h
      uses function delete_used(int) defined in check_unused_ret.c
      uses variable sm_state::state defined in smatch.h
      uses variable smatch_state::data defined in smatch.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function match_symbol(struct expression *) in line 165
      protection public
      13 lines of code
      1 parameters
      3 conditional paths
      uses function strip_expr(struct expression *) defined in smatch.h
      uses variable skip_this defined in check_unused_ret.c
      uses function get_sm_state_expr(int,struct expression *) defined in smatch.h
      uses variable my_id defined in check_unused_ret.c
      uses function delete_used_symbols(struct state_list *) defined in check_unused_ret.c
      uses variable sm_state::possible defined in smatch.h
      uses function set_state_expr(int,struct expression *,struct smatch_state *) defined in smatch.h
      uses variable undefined defined in smatch.h
   function match_end_func(struct symbol *) in line 179
      protection public
      14 lines of code
      1 parameters
      2 conditional paths
      uses variable __inline_fn defined in smatch.h
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable assignment_list defined in check_unused_ret.c
      uses macro definition sm_printf defined in smatch.h
      uses function get_filename(void) defined in smatch.h
      uses variable assignment::line defined in check_unused_ret.c
      uses function get_function(void) defined in smatch.h
      uses variable assignment::name defined in check_unused_ret.c
      uses variable assignment::function defined in check_unused_ret.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses function __free_ptr_list(struct ptr_list **) defined in ptrlist.c
   function check_unused_ret(int) in line 194
      protection public
      19 lines of code
      1 parameters
      4 conditional paths
      uses variable my_id defined in check_unused_ret.c
      uses variable option_two_passes defined in smatch.h
      uses function add_hook(void *,enum hook_type) defined in smatch.h
      uses function match_assign_call(struct expression *) defined in check_unused_ret.c
      uses enumvalue CALL_ASSIGNMENT_HOOK defined in smatch.h
      uses function match_assign(struct expression *) defined in check_unused_ret.c
      uses enumvalue ASSIGNMENT_HOOK defined in smatch.h
      uses function match_symbol(struct expression *) defined in check_unused_ret.c
      uses enumvalue SYM_HOOK defined in smatch.h
      uses function match_end_func(struct symbol *) defined in check_unused_ret.c
      uses enumvalue END_FUNC_HOOK defined in smatch.h
      uses variable ignored_funcs defined in check_unused_ret.c
      uses variable option_project defined in smatch.c
      uses enumvalue PROJ_KERNEL defined in smatch.h
      uses macro definition ARRAY_SIZE defined in lib.h
      uses variable kernel_ignored defined in check_unused_ret.c
   variable assignment::assign_id in line 51
      protection public
   variable assignment::function in line 53
      protection public
   variable assignment::line in line 54
      protection public
   variable assignment::name in line 52
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/check_unwind.c
module check_unwind.c
   macro definition EBUSY in line 28
      protection public
   macro definition MAX_ERRNO in line 29
      protection public
   variable my_id in line 31
      protection public
   function STATE(allocated) in line 33
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function STATE(unallocated) in line 34
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function STATE(called) in line 37
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function was_passed_as_param(struct expression *) in line 39
      protection public
      17 lines of code
      1 parameters
      3 conditional paths
      uses variable name defined in smatch_type.c
      uses variable sym defined in smatch_type.c
      uses function expr_to_var_sym(struct expression *,struct symbol **) defined in smatch.h
      uses function free_string(char *) defined in smatch.h
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable cur_func_sym defined in smatch.h
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::base_type defined in struct.c
      uses variable symbol::arguments defined in struct.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function print_unwind_functions(const char *,struct expression *,void *) in line 57
      protection public
      14 lines of code
      3 parameters
      3 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses function get_argument_from_call_expr(struct expression_list *,int) defined in smatch.h
      uses variable expression::args defined in expression.h
      uses function was_passed_as_param(struct expression *) defined in check_unwind.c
      uses variable cur_func_sym defined in smatch.h
      uses macro definition sm_msg defined in smatch.h
   function request_granted(const char *,struct expression *,struct expression *,void *) in line 72
      protection public
      15 lines of code
      4 parameters
      3 conditional paths
      uses variable expression::left defined in expression.h
      uses function get_argument_from_call_expr(struct expression_list *,int) defined in smatch.h
      uses variable expression::args defined in expression.h
      uses function set_state_expr(int,struct expression *,struct smatch_state *) defined in smatch.h
      uses variable my_id defined in check_unwind.c
   function request_denied(const char *,struct expression *,struct expression *,void *) in line 88
      protection public
      15 lines of code
      4 parameters
      3 conditional paths
      uses variable expression::left defined in expression.h
      uses function get_argument_from_call_expr(struct expression_list *,int) defined in smatch.h
      uses variable expression::args defined in expression.h
      uses function set_state_expr(int,struct expression *,struct smatch_state *) defined in smatch.h
      uses variable my_id defined in check_unwind.c
   function match_release(const char *,struct expression *,void *) in line 104
      protection public
      10 lines of code
      3 parameters
      2 conditional paths
      uses function get_argument_from_call_expr(struct expression_list *,int) defined in smatch.h
      uses variable expression::args defined in expression.h
      uses function get_state_expr(int,struct expression *) defined in smatch.h
      uses variable my_id defined in check_unwind.c
      uses function set_state_expr(int,struct expression *,struct smatch_state *) defined in smatch.h
      uses function set_equiv_state_expr(int,struct expression *,struct smatch_state *) defined in smatch_equiv.c
   function match_unwind_function(const char *,struct expression *,void *) in line 115
      protection public
      4 lines of code
      3 parameters
      1 conditional paths
      uses function set_state(int,const char *,struct symbol *,struct smatch_state *) defined in smatch.h
      uses variable my_id defined in check_unwind.c
      uses macro definition NULL defined in sm_implied3.c
   function func_returns_int(void) in line 120
      protection public
      13 lines of code
      1 parameters
      3 conditional paths
      uses variable cur_func_sym defined in smatch.h
      uses enumvalue SYM_FN defined in symbol.h
   function match_return(struct expression *) in line 134
      protection public
      21 lines of code
      1 parameters
      6 conditional paths
      uses function func_returns_int(void) defined in check_unwind.c
      uses function get_value(struct expression *,sval_t *) defined in smatch.h
      uses function sval_cmp_val(sval_t,long long) defined in smatch.h
      uses function implied_not_equal(struct expression *,long long) defined in smatch_extra.c
      uses function get_state(int,const char *,struct symbol *) defined in smatch.h
      uses variable my_id defined in check_unwind.c
      uses macro definition NULL defined in sm_implied3.c
      uses function __get_cur_stree(void) defined in smatch.h
      uses macro definition FOR_EACH_MY_SM defined in avl.h
      uses function slist_has_state(struct state_list *,struct smatch_state *) defined in smatch_slist.c
      uses variable sm_state::possible defined in smatch.h
      uses macro definition sm_msg defined in smatch.h
      uses variable sm_state::name defined in smatch.h
      uses macro definition END_FOR_EACH_SM defined in avl.h
   function register_unwind_functions(void) in line 156
      protection public
      20 lines of code
      1 parameters
      5 conditional paths
      uses macro definition func defined in preprocessor1.c
      uses function get_tokens_file(const char *) defined in smatch.h
      uses enumvalue TOKEN_STREAMBEGIN defined in token.h
      uses variable token::next defined in token.h
      uses enumvalue TOKEN_STREAMEND defined in token.h
      uses enumvalue TOKEN_IDENT defined in token.h
      uses function show_ident(const struct ident *) defined in token.h
      uses variable token::ident defined in token.h
      uses function add_function_hook(const char *,func_hook *,void *) defined in smatch.h
      uses function match_unwind_function(const char *,struct expression *,void *) defined in check_unwind.c
      uses macro definition NULL defined in sm_implied3.c
   function release_function_indicator(const char *) in line 177
      protection public
      6 lines of code
      1 parameters
      2 conditional paths
      uses variable option_info defined in smatch.c
      uses function add_function_hook(const char *,func_hook *,void *) defined in smatch.h
      uses variable name defined in smatch_type.c
      uses function print_unwind_functions(const char *,struct expression *,void *) defined in check_unwind.c
   function check_unwind(int) in line 184
      protection public
      50 lines of code
      1 parameters
      2 conditional paths
      uses variable option_project defined in smatch.c
      uses enumvalue PROJ_KERNEL defined in smatch.h
      uses variable option_spammy defined in smatch.c
      uses variable my_id defined in check_unwind.c
      uses function register_unwind_functions(void) defined in check_unwind.c
      uses function return_implies_state(const char *,long long,long long,implication_hook *,void *) defined in smatch.h
      uses function request_granted(const char *,struct expression *,struct expression *,void *) defined in check_unwind.c
      uses macro definition EBUSY defined in check_unwind.c
      uses function request_denied(const char *,struct expression *,struct expression *,void *) defined in check_unwind.c
      uses function add_function_hook(const char *,func_hook *,void *) defined in smatch.h
      uses function match_release(const char *,struct expression *,void *) defined in check_unwind.c
      uses function release_function_indicator(const char *) defined in check_unwind.c
      uses variable valid_ptr_min defined in smatch.h
      uses variable valid_ptr_max defined in smatch.h
      uses macro definition MAX_ERRNO defined in check_unwind.c
      uses function add_hook(void *,enum hook_type) defined in smatch.h
      uses function match_return(struct expression *) defined in check_unwind.c
      uses enumvalue RETURN_HOOK defined in smatch.h
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/check_user_data.c
module check_user_data.c
   enumeration @2 in line 48
      protection public
   variable my_id in line 29
      protection public
   variable kstr_funcs in line 37
      protection public
   variable db_expr in line 109
      protection public
   variable db_user_data in line 110
      protection public
   enumvalue SET_DATA in line 49
      protection public
   enumvalue PASSED_DATA in line 50
      protection public
   function STATE(called) in line 31
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function STATE(capped) in line 33
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function STATE(user_data_passed) in line 34
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function STATE(user_data_set) in line 35
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function is_user_macro(struct expression *) in line 53
      protection public
      17 lines of code
      1 parameters
      1 conditional paths
      uses function get_macro_name(struct position) defined in macro_table.c
      uses variable expression::pos defined in expression.h
      uses function get_implied_rl(struct expression *,struct range_list **) defined in smatch_extra.h
      uses function is_whole_rl(struct range_list *) defined in smatch_extra.h
      uses enumvalue SET_DATA defined in check_user_data.c
   function has_user_data_state(struct expression *) in line 71
      protection public
      23 lines of code
      1 parameters
      4 conditional paths
      uses variable sym defined in smatch_type.c
      uses variable name defined in smatch_type.c
      uses function strip_expr(struct expression *) defined in smatch.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_PREOP defined in expression.h
      uses variable expression::op defined in expression.h
      uses variable expression::unop defined in expression.h
      uses function expr_to_str_sym(struct expression *,struct symbol **) defined in smatch.h
      uses function free_string(char *) defined in smatch.h
      uses function __get_cur_stree(void) defined in smatch.h
      uses macro definition FOR_EACH_MY_SM defined in avl.h
      uses variable my_id defined in check_user_data.c
      uses variable sm_state::sym defined in smatch.h
      uses macro definition END_FOR_EACH_SM defined in avl.h
   function passes_user_data(struct expression *) in line 95
      protection public
      13 lines of code
      1 parameters
      3 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable expression::args defined in expression.h
      uses function is_user_data(struct expression *) defined in check_user_data.c
      uses function has_user_data_state(struct expression *) defined in check_user_data.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function db_user_data_callback(void *,int,char **,char **) in line 111
      protection public
      7 lines of code
      4 parameters
      2 conditional paths
      uses enumvalue PASSED_DATA defined in check_user_data.c
      uses function passes_user_data(struct expression *) defined in check_user_data.c
      uses variable db_expr defined in check_user_data.c
      uses variable db_user_data defined in check_user_data.c
   function is_user_fn_db(struct expression *) in line 119
      protection public
      28 lines of code
      1 parameters
      5 conditional paths
      uses variable sym defined in smatch_type.c
      uses function is_fake_call(struct expression *) defined in smatch_extra.h
      uses variable expression::fn defined in expression.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_SYMBOL defined in expression.h
      uses variable expression::symbol defined in expression.h
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::modifiers defined in struct.c
      uses macro definition MOD_STATIC defined in symbol.h
      uses function snprintf(char *,int,char *,char *) defined in sm_overflow6.c
      uses function get_filename(void) defined in smatch.h
      uses variable symbol::ident defined in struct.c
      uses variable ident::name defined in token.h
      uses variable db_expr defined in check_user_data.c
      uses variable db_user_data defined in check_user_data.c
      uses macro definition run_sql defined in smatch.h
      uses function db_user_data_callback(void *,int,char **,char **) defined in check_user_data.c
      uses macro definition NULL defined in sm_implied3.c
      uses enumvalue USER_DATA defined in smatch.h
   function is_user_function(struct expression *) in line 148
      protection public
      6 lines of code
      1 parameters
      2 conditional paths
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_CALL defined in expression.h
      uses function is_user_fn_db(struct expression *) defined in check_user_data.c
   function is_skb_data(struct expression *) in line 155
      protection public
      30 lines of code
      1 parameters
      12 conditional paths
      uses variable sym defined in smatch_type.c
      uses variable name defined in smatch_type.c
      uses function expr_to_var_sym(struct expression *,struct symbol **) defined in smatch.h
      uses variable symbol::type defined in struct.c
      uses enumvalue SYM_PTR defined in symbol.h
      uses enumvalue SYM_STRUCT defined in symbol.h
      uses variable symbol::ident defined in struct.c
      uses variable ident::name defined in token.h
      uses function strlen(char *) defined in sm_overflow6.c
      uses enumvalue SET_DATA defined in check_user_data.c
      uses function free_string(char *) defined in smatch.h
   function in_container_of_macro(struct expression *) in line 186
      protection public
      12 lines of code
      1 parameters
      3 conditional paths
      uses function get_macro_name(struct position) defined in macro_table.c
      uses variable expression::pos defined in expression.h
   function is_user_data_state(struct expression *) in line 199
      protection public
      38 lines of code
      1 parameters
      11 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses variable sym defined in smatch_type.c
      uses variable name defined in smatch_type.c
      uses function get_sm_state_expr(int,struct expression *) defined in smatch.h
      uses variable my_id defined in check_user_data.c
      uses function slist_has_state(struct state_list *,struct smatch_state *) defined in smatch_slist.c
      uses variable sm_state::possible defined in smatch.h
      uses enumvalue SET_DATA defined in check_user_data.c
      uses enumvalue PASSED_DATA defined in check_user_data.c
      uses function expr_to_str_sym(struct expression *,struct symbol **) defined in smatch.h
      uses function __get_cur_stree(void) defined in smatch.h
      uses macro definition FOR_EACH_MY_SM defined in avl.h
      uses variable sm_state::sym defined in smatch.h
      uses variable sm_state::name defined in smatch.h
      uses function strlen(char *) defined in sm_overflow6.c
      uses macro definition END_FOR_EACH_SM defined in avl.h
      uses function free_string(char *) defined in smatch.h
   function is_user_data(struct expression *) in line 238
      protection public
      40 lines of code
      1 parameters
      1 conditional paths
      uses function is_capped(struct expression *) defined in smatch.h
      uses function in_container_of_macro(struct expression *) defined in check_user_data.c
      uses function is_user_macro(struct expression *) defined in check_user_data.c
      uses function is_user_function(struct expression *) defined in check_user_data.c
      uses function is_skb_data(struct expression *) defined in check_user_data.c
      uses function strip_expr(struct expression *) defined in smatch.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_BINOP defined in expression.h
      uses function is_user_data(struct expression *) defined in check_user_data.c
      uses variable expression::left defined in expression.h
      uses function is_array(struct expression *) defined in smatch.h
      uses variable expression::right defined in expression.h
      uses enumvalue EXPR_PREOP defined in expression.h
      uses variable expression::op defined in expression.h
      uses variable expression::unop defined in expression.h
      uses function is_user_data_state(struct expression *) defined in check_user_data.c
   function implied_user_data(struct expression *,struct range_list **) in line 279
      protection public
      7 lines of code
      2 parameters
      1 conditional paths
      uses function is_user_data(struct expression *) defined in check_user_data.c
      uses function get_absolute_rl(struct expression *,struct range_list **) defined in smatch_extra.h
   function is_capped_user_data(struct expression *) in line 287
      protection public
      11 lines of code
      1 parameters
      1 conditional paths
      uses function get_sm_state_expr(int,struct expression *) defined in smatch.h
      uses variable my_id defined in check_user_data.c
      uses function slist_has_state(struct state_list *,struct smatch_state *) defined in smatch_slist.c
      uses variable sm_state::possible defined in smatch.h
   function set_called(const char *,struct symbol *,char *,char *) in line 299
      protection public
      4 lines of code
      4 parameters
      1 conditional paths
      uses function set_state(int,const char *,struct symbol *,struct smatch_state *) defined in smatch.h
      uses variable my_id defined in check_user_data.c
      uses macro definition NULL defined in sm_implied3.c
   function set_param_user_data(const char *,struct symbol *,char *,char *) in line 304
      protection public
      10 lines of code
      4 parameters
      2 conditional paths
      uses function snprintf(char *,int,char *,char *) defined in sm_overflow6.c
      uses variable name defined in smatch_type.c
      uses function set_state(int,const char *,struct symbol *,struct smatch_state *) defined in smatch.h
      uses variable my_id defined in check_user_data.c
      uses variable sym defined in smatch_type.c
   function match_syscall_definition(struct symbol *) in line 315
      protection public
      29 lines of code
      1 parameters
      6 conditional paths
      uses variable name defined in smatch_type.c
      uses function get_macro_name(struct position) defined in macro_table.c
      uses variable sym defined in smatch_type.c
      uses variable symbol::pos defined in struct.c
      uses function strlen(char *) defined in sm_overflow6.c
      uses function get_function(void) defined in smatch.h
      uses variable option_no_db defined in smatch.c
      uses function get_state(int,const char *,struct symbol *) defined in smatch.h
      uses variable my_id defined in check_user_data.c
      uses macro definition NULL defined in sm_implied3.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::base_type defined in struct.c
      uses variable symbol::arguments defined in struct.c
      uses function set_state(int,const char *,struct symbol *,struct smatch_state *) defined in smatch.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function match_condition(struct expression *) in line 345
      protection public
      37 lines of code
      1 parameters
      19 conditional paths
      uses variable expression::op defined in expression.h
      uses enumvalue SPECIAL_LTE defined in token.h
      uses enumvalue SPECIAL_UNSIGNED_LT defined in token.h
      uses enumvalue SPECIAL_UNSIGNED_LTE defined in token.h
      uses function is_user_data(struct expression *) defined in check_user_data.c
      uses variable expression::left defined in expression.h
      uses function set_true_false_states_expr(int,struct expression *,struct smatch_state *,struct smatch_state *) defined in smatch.h
      uses variable my_id defined in check_user_data.c
      uses macro definition NULL defined in sm_implied3.c
      uses variable expression::right defined in expression.h
      uses enumvalue SPECIAL_GTE defined in token.h
      uses enumvalue SPECIAL_UNSIGNED_GT defined in token.h
      uses enumvalue SPECIAL_UNSIGNED_GTE defined in token.h
      uses enumvalue SPECIAL_EQUAL defined in token.h
      uses enumvalue SPECIAL_NOTEQUAL defined in token.h
   function handle_get_user(struct expression *) in line 383
      protection public
      18 lines of code
      1 parameters
      4 conditional paths
      uses variable name defined in smatch_type.c
      uses function get_macro_name(struct position) defined in macro_table.c
      uses variable expression::pos defined in expression.h
      uses function expr_to_var(struct expression *) defined in smatch.h
      uses variable expression::right defined in expression.h
      uses function set_state_expr(int,struct expression *,struct smatch_state *) defined in smatch.h
      uses variable my_id defined in check_user_data.c
      uses variable expression::left defined in expression.h
      uses function free_string(char *) defined in smatch.h
   function match_assign(struct expression *) in line 402
      protection public
      15 lines of code
      1 parameters
      5 conditional paths
      uses function handle_get_user(struct expression *) defined in check_user_data.c
      uses function is_user_data(struct expression *) defined in check_user_data.c
      uses variable expression::right defined in expression.h
      uses enumvalue PASSED_DATA defined in check_user_data.c
      uses function set_state_expr(int,struct expression *,struct smatch_state *) defined in smatch.h
      uses variable my_id defined in check_user_data.c
      uses variable expression::left defined in expression.h
      uses enumvalue SET_DATA defined in check_user_data.c
      uses function get_state_expr(int,struct expression *) defined in smatch.h
   function tag_struct_members(struct symbol *,struct expression *) in line 418
      protection public
      18 lines of code
      2 parameters
      3 conditional paths
      uses variable member defined in smdb.py
      uses function op(void) defined in loop2.c
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_PREOP defined in expression.h
      uses variable expression::op defined in expression.h
      uses function strip_expr(struct expression *) defined in smatch.h
      uses variable expression::unop defined in expression.h
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable symbol::ident defined in struct.c
      uses function member_expression(struct expression *,int,struct ident *) defined in smatch_expressions.c
      uses function set_state_expr(int,struct expression *,struct smatch_state *) defined in smatch.h
      uses variable my_id defined in check_user_data.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function tag_base_type(struct expression *) in line 437
      protection public
      8 lines of code
      1 parameters
      2 conditional paths
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_PREOP defined in expression.h
      uses variable expression::op defined in expression.h
      uses function strip_expr(struct expression *) defined in smatch.h
      uses variable expression::unop defined in expression.h
      uses function deref_expression(struct expression *) defined in smatch_expressions.c
      uses function set_state_expr(int,struct expression *,struct smatch_state *) defined in smatch.h
      uses variable my_id defined in check_user_data.c
   function tag_as_user_data(struct expression *) in line 446
      protection public
      24 lines of code
      1 parameters
      7 conditional paths
      uses function strip_expr(struct expression *) defined in smatch.h
      uses function get_type(struct expression *) defined in smatch.h
      uses enumvalue SYM_PTR defined in symbol.h
      uses function get_real_base_type(struct symbol *) defined in smatch.h
      uses function set_state_expr(int,struct expression *,struct smatch_state *) defined in smatch.h
      uses variable my_id defined in check_user_data.c
      uses function deref_expression(struct expression *) defined in smatch_expressions.c
      uses enumvalue SYM_BASETYPE defined in symbol.h
      uses function tag_base_type(struct expression *) defined in check_user_data.c
      uses enumvalue SYM_STRUCT defined in symbol.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_PREOP defined in expression.h
      uses variable expression::op defined in expression.h
      uses function tag_struct_members(struct symbol *,struct expression *) defined in check_user_data.c
   function match_user_copy(const char *,struct expression *,void *) in line 471
      protection public
      11 lines of code
      3 parameters
      2 conditional paths
      uses variable param defined in smatch_parse_call_math.c
      uses variable dest defined in sm_user_data2.c
      uses function get_argument_from_call_expr(struct expression_list *,int) defined in smatch.h
      uses variable expression::args defined in expression.h
      uses function strip_expr(struct expression *) defined in smatch.h
      uses function tag_as_user_data(struct expression *) defined in check_user_data.c
   function match_user_assign_function(const char *,struct expression *,void *) in line 483
      protection public
      4 lines of code
      3 parameters
      1 conditional paths
      uses function set_state_expr(int,struct expression *,struct smatch_state *) defined in smatch.h
      uses variable my_id defined in check_user_data.c
      uses variable expression::left defined in expression.h
   function match_caller_info(struct expression *) in line 488
      protection public
      12 lines of code
      1 parameters
      2 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable expression::args defined in expression.h
      uses function is_user_data(struct expression *) defined in check_user_data.c
      uses function sql_insert_caller_info(struct expression *,int,int,const char *,const char *) defined in smatch.h
      uses enumvalue USER_DATA defined in smatch.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function struct_member_callback(struct expression *,int,char *,struct sm_state *) in line 501
      protection public
      6 lines of code
      4 parameters
      2 conditional paths
      uses variable sm_state::state defined in smatch.h
      uses function sql_insert_caller_info(struct expression *,int,int,const char *,const char *) defined in smatch.h
      uses enumvalue USER_DATA defined in smatch.h
      uses variable param defined in smatch_parse_call_math.c
   function returned_member_callback(int,char *,struct expression *,char *,struct smatch_state *) in line 508
      protection public
      6 lines of code
      5 parameters
      2 conditional paths
      uses function sql_insert_return_states(int,const char *,int,int,const char *,const char *) defined in smatch.h
      uses enumvalue USER_DATA defined in smatch.h
   function print_returned_user_data(int,char *,struct expression *) in line 515
      protection public
      48 lines of code
      3 parameters
      9 conditional paths
      uses variable param defined in smatch_parse_call_math.c
      uses function is_user_data(struct expression *) defined in check_user_data.c
      uses enumvalue PASSED_DATA defined in check_user_data.c
      uses function sql_insert_return_states(int,const char *,int,int,const char *,const char *) defined in smatch.h
      uses enumvalue USER_DATA defined in smatch.h
      uses enumvalue SET_DATA defined in check_user_data.c
      uses function __get_cur_stree(void) defined in smatch.h
      uses macro definition FOR_EACH_MY_SM defined in avl.h
      uses variable my_id defined in check_user_data.c
      uses function get_param_num_from_sym(struct symbol *) defined in smatch.h
      uses variable sm_state::sym defined in smatch.h
      uses function is_capped_var_sym(const char *,struct symbol *) defined in smatch.h
      uses variable sm_state::name defined in smatch.h
      uses function get_state_stree(struct stree *,int,const char *,struct symbol *) defined in smatch_slist.c
      uses function get_start_states(void) defined in smatch.h
      uses function get_param_name(struct sm_state *) defined in smatch.h
      uses function slist_has_state(struct state_list *,struct smatch_state *) defined in smatch_slist.c
      uses variable sm_state::possible defined in smatch.h
      uses macro definition END_FOR_EACH_SM defined in avl.h
   function db_return_states_userdata(struct expression *,int,char *,char *) in line 564
      protection public
      18 lines of code
      4 parameters
      4 conditional paths
      uses variable name defined in smatch_type.c
      uses variable sym defined in smatch_type.c
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_ASSIGNMENT defined in expression.h
      uses variable param defined in smatch_parse_call_math.c
      uses function tag_as_user_data(struct expression *) defined in check_user_data.c
      uses variable expression::left defined in expression.h
      uses function return_state_to_var_sym(struct expression *,int,char *,struct symbol **) defined in smatch.h
      uses function set_state(int,const char *,struct symbol *,struct smatch_state *) defined in smatch.h
      uses variable my_id defined in check_user_data.c
      uses function free_string(char *) defined in smatch.h
   function check_user_data(int) in line 583
      protection public
      26 lines of code
      1 parameters
      3 conditional paths
      uses variable option_project defined in smatch.c
      uses enumvalue PROJ_KERNEL defined in smatch.h
      uses variable my_id defined in check_user_data.c
      uses function select_caller_info_hook(void(*)(const char *name, struct symbol *sym, char *key, char *value),int) defined in smatch.h
      uses function set_called(const char *,struct symbol *,char *,char *) defined in check_user_data.c
      uses enumvalue INTERNAL defined in smatch.h
      uses function set_param_user_data(const char *,struct symbol *,char *,char *) defined in check_user_data.c
      uses enumvalue USER_DATA defined in smatch.h
      uses function add_hook(void *,enum hook_type) defined in smatch.h
      uses function match_syscall_definition(struct symbol *) defined in check_user_data.c
      uses enumvalue AFTER_DEF_HOOK defined in smatch.h
      uses function match_condition(struct expression *) defined in check_user_data.c
      uses enumvalue CONDITION_HOOK defined in smatch.h
      uses function match_assign(struct expression *) defined in check_user_data.c
      uses enumvalue ASSIGNMENT_HOOK defined in smatch.h
      uses function add_function_hook(const char *,func_hook *,void *) defined in smatch.h
      uses function match_user_copy(const char *,struct expression *,void *) defined in check_user_data.c
      uses function add_function_assign_hook(const char *,func_hook *,void *) defined in smatch.h
      uses function match_user_assign_function(const char *,struct expression *,void *) defined in check_user_data.c
      uses macro definition NULL defined in sm_implied3.c
      uses macro definition ARRAY_SIZE defined in lib.h
      uses variable kstr_funcs defined in check_user_data.c
      uses function match_caller_info(struct expression *) defined in check_user_data.c
      uses enumvalue FUNCTION_CALL_HOOK defined in smatch.h
      uses function add_member_info_callback(int,void(*)(struct expression *call, int param, char *printed_name, struct sm_state *sm)) defined in smatch.h
      uses function struct_member_callback(struct expression *,int,char *,struct sm_state *) defined in check_user_data.c
      uses function add_returned_member_callback(int,void(*)(int return_id, char *return_ranges, struct expression *expr, char *printed_name, struct smatch_state *state)) defined in smatch.h
      uses function add_split_return_callback(void(*)(int return_id, char *return_ranges, struct expression *returned_expr)) defined in smatch.h
      uses function print_returned_user_data(int,char *,struct expression *) defined in check_user_data.c
      uses function select_return_states_hook(int,return_implies_hook *) defined in smatch.h
      uses function db_return_states_userdata(struct expression *,int,char *,char *) defined in check_user_data.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/check_user_data2.c
module check_user_data2.c
   variable my_id in line 29
      protection public
   variable my_call_id in line 30
      protection public
   variable kstr_funcs in line 34
      protection public
   variable start_states in line 47
      protection public
   variable saved_stack in line 48
      protection public
   variable user_data_flag in line 430
      protection public
   function STATE(called) in line 32
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function set_points_to_user_data(struct expression *) in line 45
      protection public
      14 lines of code
      1 parameters
      3 conditional paths
      uses variable name defined in smatch_type.c
      uses variable sym defined in smatch_type.c
      uses variable buf defined in sm_fake_assignment.c
      uses function expr_to_var_sym(struct expression *,struct symbol **) defined in smatch.h
      uses function snprintf(char *,int,char *,char *) defined in sm_overflow6.c
      uses function set_state(int,const char *,struct symbol *,struct smatch_state *) defined in smatch.h
      uses variable my_id defined in check_user_data2.c
      uses function alloc_estate_whole(struct symbol *) defined in smatch_estate.c
      uses function free_string(char *) defined in smatch.h
   function save_start_states(struct statement *) in line 49
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable start_states defined in check_user_data2.c
      uses function clone_stree(struct stree *) defined in avl.c
      uses function __get_cur_stree(void) defined in smatch.h
   function free_start_states(void) in line 54
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function free_stree(struct stree **) defined in avl.c
      uses variable start_states defined in check_user_data2.c
   function match_save_states(struct expression *) in line 59
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function push_stree(struct stree_stack **,struct stree *) defined in smatch_slist.c
      uses variable saved_stack defined in check_user_data2.c
      uses variable start_states defined in check_user_data2.c
      uses macro definition NULL defined in sm_implied3.c
   function match_restore_states(struct expression *) in line 65
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function free_stree(struct stree **) defined in avl.c
      uses variable start_states defined in check_user_data2.c
      uses function pop_stree(struct stree_stack **) defined in smatch_slist.c
      uses variable saved_stack defined in check_user_data2.c
   function empty_state(struct sm_state *) in line 71
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function alloc_estate_empty(void) defined in smatch_estate.c
   function pre_merge_hook(struct sm_state *) in line 76
      protection public
      15 lines of code
      1 parameters
      3 conditional paths
      uses function get_state(int,const char *,struct symbol *) defined in smatch.h
      uses macro definition SMATCH_EXTRA defined in smatch.h
      uses variable sm_state::name defined in smatch.h
      uses variable sm_state::sym defined in smatch.h
      uses function estate_rl(struct smatch_state *) defined in smatch_estate.c
      uses variable my_id defined in check_user_data2.c
      uses function rl_intersection(struct range_list *,struct range_list *) defined in smatch_extra.h
      uses function set_state(int,const char *,struct symbol *,struct smatch_state *) defined in smatch.h
      uses function alloc_estate_rl(struct range_list *) defined in smatch_estate.c
      uses function clone_rl(struct range_list *) defined in smatch_extra.h
   function tag_inner_struct_members(struct expression *,struct symbol *) in line 92
      protection public
      30 lines of code
      2 parameters
      5 conditional paths
      uses function get_real_base_type(struct symbol *) defined in smatch.h
      uses variable member defined in smdb.py
      uses function member_expression(struct expression *,int,struct ident *) defined in smatch_expressions.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable symbol::symbol_list defined in struct.c
      uses enumvalue SYM_UNION defined in symbol.h
      uses enumvalue SYM_STRUCT defined in symbol.h
      uses variable symbol::ident defined in struct.c
      uses function set_state_expr(int,struct expression *,struct smatch_state *) defined in smatch.h
      uses variable my_id defined in check_user_data2.c
      uses function alloc_estate_whole(struct symbol *) defined in smatch_estate.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function tag_struct_members(struct symbol *,struct expression *) in line 123
      protection public
      31 lines of code
      2 parameters
      6 conditional paths
      uses variable member defined in smdb.py
      uses function op(void) defined in loop2.c
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_PREOP defined in expression.h
      uses variable expression::op defined in expression.h
      uses function strip_expr(struct expression *) defined in smatch.h
      uses variable expression::unop defined in expression.h
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses function get_real_base_type(struct symbol *) defined in smatch.h
      uses enumvalue SYM_UNION defined in symbol.h
      uses enumvalue SYM_STRUCT defined in symbol.h
      uses function tag_inner_struct_members(struct expression *,struct symbol *) defined in check_user_data2.c
      uses variable symbol::ident defined in struct.c
      uses function member_expression(struct expression *,int,struct ident *) defined in smatch_expressions.c
      uses function set_state_expr(int,struct expression *,struct smatch_state *) defined in smatch.h
      uses variable my_id defined in check_user_data2.c
      uses function alloc_estate_whole(struct symbol *) defined in smatch_estate.c
      uses function get_type(struct expression *) defined in smatch.h
      uses enumvalue SYM_ARRAY defined in symbol.h
      uses function set_points_to_user_data(struct expression *) defined in check_user_data2.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function tag_base_type(struct expression *) in line 155
      protection public
      8 lines of code
      1 parameters
      2 conditional paths
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_PREOP defined in expression.h
      uses variable expression::op defined in expression.h
      uses function strip_expr(struct expression *) defined in smatch.h
      uses variable expression::unop defined in expression.h
      uses function deref_expression(struct expression *) defined in smatch_expressions.c
      uses function set_state_expr(int,struct expression *,struct smatch_state *) defined in smatch.h
      uses variable my_id defined in check_user_data2.c
      uses function alloc_estate_whole(struct symbol *) defined in smatch_estate.c
      uses function get_type(struct expression *) defined in smatch.h
   function tag_as_user_data(struct expression *) in line 164
      protection public
      26 lines of code
      1 parameters
      7 conditional paths
      uses function strip_expr(struct expression *) defined in smatch.h
      uses function get_type(struct expression *) defined in smatch.h
      uses enumvalue SYM_PTR defined in symbol.h
      uses function get_real_base_type(struct symbol *) defined in smatch.h
      uses function set_state_expr(int,struct expression *,struct smatch_state *) defined in smatch.h
      uses variable my_id defined in check_user_data2.c
      uses function deref_expression(struct expression *) defined in smatch_expressions.c
      uses function alloc_estate_whole(struct symbol *) defined in smatch_estate.c
      uses enumvalue SYM_BASETYPE defined in symbol.h
      uses function tag_base_type(struct expression *) defined in check_user_data2.c
      uses enumvalue SYM_STRUCT defined in symbol.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_PREOP defined in expression.h
      uses variable expression::op defined in expression.h
      uses function tag_struct_members(struct symbol *,struct expression *) defined in check_user_data2.c
   function match_user_copy(const char *,struct expression *,void *) in line 191
      protection public
      11 lines of code
      3 parameters
      2 conditional paths
      uses variable param defined in smatch_parse_call_math.c
      uses variable dest defined in sm_user_data2.c
      uses function get_argument_from_call_expr(struct expression_list *,int) defined in smatch.h
      uses variable expression::args defined in expression.h
      uses function strip_expr(struct expression *) defined in smatch.h
      uses function tag_as_user_data(struct expression *) defined in check_user_data2.c
   function match_sscanf(const char *,struct expression *,void *) in line 203
      protection public
      13 lines of code
      3 parameters
      2 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable expression::args defined in expression.h
      uses function tag_as_user_data(struct expression *) defined in check_user_data2.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function points_to_user_data(struct expression *) in line 217
      protection public
      29 lines of code
      1 parameters
      7 conditional paths
      uses variable buf defined in sm_fake_assignment.c
      uses variable sym defined in smatch_type.c
      uses variable name defined in smatch_type.c
      uses function strip_expr(struct expression *) defined in smatch.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_BINOP defined in expression.h
      uses variable expression::op defined in expression.h
      uses variable expression::left defined in expression.h
      uses variable expression::right defined in expression.h
      uses function expr_to_var_sym(struct expression *,struct symbol **) defined in smatch.h
      uses function snprintf(char *,int,char *,char *) defined in sm_overflow6.c
      uses function get_state(int,const char *,struct symbol *) defined in smatch.h
      uses variable my_id defined in check_user_data2.c
      uses function estate_rl(struct smatch_state *) defined in smatch_estate.c
      uses function free_string(char *) defined in smatch.h
   function is_skb_data(struct expression *) in line 262
      protection public
      27 lines of code
      1 parameters
      8 conditional paths
      uses variable sym defined in smatch_type.c
      uses function strip_expr(struct expression *) defined in smatch.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_DEREF defined in expression.h
      uses variable expression::member defined in expression.h
      uses variable ident::name defined in token.h
      uses function expr_to_sym(struct expression *) defined in smatch.h
      uses variable expression::deref defined in expression.h
      uses function get_real_base_type(struct symbol *) defined in smatch.h
      uses variable symbol::type defined in struct.c
      uses enumvalue SYM_PTR defined in symbol.h
      uses enumvalue SYM_STRUCT defined in symbol.h
      uses variable symbol::ident defined in struct.c
   function comes_from_skb_data(struct expression *) in line 290
      protection public
      23 lines of code
      1 parameters
      8 conditional paths
      uses function strip_expr(struct expression *) defined in smatch.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_BINOP defined in expression.h
      uses variable expression::left defined in expression.h
      uses variable expression::right defined in expression.h
      uses enumvalue EXPR_PREOP defined in expression.h
      uses variable expression::unop defined in expression.h
      uses enumvalue EXPR_DEREF defined in expression.h
      uses function is_skb_data(struct expression *) defined in check_user_data2.c
      uses variable expression::deref defined in expression.h
   function handle_struct_assignment(struct expression *) in line 315
      protection public
      35 lines of code
      1 parameters
      6 conditional paths
      uses variable expression::right defined in expression.h
      uses function get_type(struct expression *) defined in smatch.h
      uses variable expression::left defined in expression.h
      uses variable symbol::type defined in struct.c
      uses enumvalue SYM_PTR defined in symbol.h
      uses function get_real_base_type(struct symbol *) defined in smatch.h
      uses enumvalue SYM_STRUCT defined in symbol.h
      uses function strip_expr(struct expression *) defined in smatch.h
      uses function points_to_user_data(struct expression *) defined in check_user_data2.c
      uses function is_skb_data(struct expression *) defined in check_user_data2.c
      uses function tag_as_user_data(struct expression *) defined in check_user_data2.c
   function handle_get_user(struct expression *) in line 351
      protection public
      18 lines of code
      1 parameters
      4 conditional paths
      uses variable name defined in smatch_type.c
      uses function get_macro_name(struct position) defined in macro_table.c
      uses variable expression::pos defined in expression.h
      uses function expr_to_var(struct expression *) defined in smatch.h
      uses variable expression::right defined in expression.h
      uses function set_state_expr(int,struct expression *,struct smatch_state *) defined in smatch.h
      uses variable my_id defined in check_user_data2.c
      uses variable expression::left defined in expression.h
      uses function alloc_estate_whole(struct symbol *) defined in smatch_estate.c
      uses function get_type(struct expression *) defined in smatch.h
      uses function free_string(char *) defined in smatch.h
   function match_assign(struct expression *) in line 370
      protection public
      26 lines of code
      1 parameters
      8 conditional paths
      uses function is_fake_call(struct expression *) defined in smatch_extra.h
      uses variable expression::right defined in expression.h
      uses function handle_get_user(struct expression *) defined in check_user_data2.c
      uses function points_to_user_data(struct expression *) defined in check_user_data2.c
      uses function set_points_to_user_data(struct expression *) defined in check_user_data2.c
      uses variable expression::left defined in expression.h
      uses function handle_struct_assignment(struct expression *) defined in check_user_data2.c
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_CALL defined in expression.h
      uses function get_user_rl(struct expression *,struct range_list **) defined in check_user_data2.c
      uses function cast_rl(struct symbol *,struct range_list *) defined in smatch_extra.h
      uses function get_type(struct expression *) defined in smatch.h
      uses function set_state_expr(int,struct expression *,struct smatch_state *) defined in smatch.h
      uses variable my_id defined in check_user_data2.c
      uses function alloc_estate_rl(struct range_list *) defined in smatch_estate.c
      uses function get_state_expr(int,struct expression *) defined in smatch.h
      uses function alloc_estate_empty(void) defined in smatch_estate.c
   function match_user_assign_function(const char *,struct expression *,void *) in line 397
      protection public
      5 lines of code
      3 parameters
      1 conditional paths
      uses function tag_as_user_data(struct expression *) defined in check_user_data2.c
      uses variable expression::left defined in expression.h
      uses function set_points_to_user_data(struct expression *) defined in check_user_data2.c
   function match_simple_strtoul(const char *,struct expression *,void *) in line 403
      protection public
      4 lines of code
      3 parameters
      1 conditional paths
      uses function set_state_expr(int,struct expression *,struct smatch_state *) defined in smatch.h
      uses variable my_id defined in check_user_data2.c
      uses variable expression::left defined in expression.h
      uses function alloc_estate_whole(struct symbol *) defined in smatch_estate.c
      uses function get_type(struct expression *) defined in smatch.h
   function get_user_macro_rl(struct expression *,struct range_list **) in line 408
      protection public
      21 lines of code
      2 parameters
      5 conditional paths
      uses function get_macro_name(struct position) defined in macro_table.c
      uses variable expression::pos defined in expression.h
      uses function alloc_whole_rl(struct symbol *) defined in smatch_extra.h
   function var_user_rl(struct expression *) in line 431
      protection public
      26 lines of code
      1 parameters
      7 conditional paths
      uses function get_user_macro_rl(struct expression *,struct range_list **) defined in check_user_data2.c
      uses function comes_from_skb_data(struct expression *) defined in check_user_data2.c
      uses function alloc_whole_rl(struct symbol *) defined in smatch_extra.h
      uses function get_type(struct expression *) defined in smatch.h
      uses function get_state_expr(int,struct expression *) defined in smatch.h
      uses variable my_id defined in check_user_data2.c
      uses function estate_rl(struct smatch_state *) defined in smatch_estate.c
      uses macro definition NULL defined in sm_implied3.c
      uses variable user_data_flag defined in check_user_data2.c
      uses function var_to_absolute_rl(struct expression *) defined in smatch_extra.h
      uses function clone_rl(struct range_list *) defined in smatch_extra.h
      uses function rl_intersection(struct range_list *,struct range_list *) defined in smatch_extra.h
   function get_user_rl(struct expression *,struct range_list **) in line 458
      protection public
      11 lines of code
      2 parameters
      1 conditional paths
      uses variable user_data_flag defined in check_user_data2.c
      uses function custom_get_absolute_rl(struct expression *,struct range_list *(*)(struct expression *expr),struct range_list **) defined in smatch_extra.h
      uses function var_user_rl(struct expression *) defined in check_user_data2.c
      uses macro definition NULL defined in sm_implied3.c
   function get_user_rl_var_sym(const char *,struct symbol *,struct range_list **) in line 470
      protection public
      11 lines of code
      3 parameters
      1 conditional paths
      uses function get_state(int,const char *,struct symbol *) defined in smatch.h
      uses variable my_id defined in check_user_data2.c
      uses variable name defined in smatch_type.c
      uses variable sym defined in smatch_type.c
      uses function estate_rl(struct smatch_state *) defined in smatch_estate.c
   function match_call_info(struct expression *) in line 482
      protection public
      16 lines of code
      1 parameters
      2 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable expression::args defined in expression.h
      uses function get_user_rl(struct expression *,struct range_list **) defined in check_user_data2.c
      uses function sql_insert_caller_info(struct expression *,int,int,const char *,const char *) defined in smatch.h
      uses enumvalue USER_DATA3 defined in smatch.h
      uses function show_rl(struct range_list *) defined in smatch_extra.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function struct_member_callback(struct expression *,int,char *,struct sm_state *) in line 499
      protection public
      16 lines of code
      4 parameters
      3 conditional paths
      uses variable sm_state::state defined in smatch.h
      uses variable smatch_state::name defined in smatch.h
      uses function get_state(int,const char *,struct symbol *) defined in smatch.h
      uses macro definition SMATCH_EXTRA defined in smatch.h
      uses variable sm_state::name defined in smatch.h
      uses variable sm_state::sym defined in smatch.h
      uses function estate_rl(struct smatch_state *) defined in smatch_estate.c
      uses function rl_intersection(struct range_list *,struct range_list *) defined in smatch_extra.h
      uses function sql_insert_caller_info(struct expression *,int,int,const char *,const char *) defined in smatch.h
      uses enumvalue USER_DATA3 defined in smatch.h
      uses variable param defined in smatch_parse_call_math.c
      uses function show_rl(struct range_list *) defined in smatch_extra.h
   function set_param_user_data(const char *,struct symbol *,char *,char *) in line 516
      protection public
      28 lines of code
      4 parameters
      4 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses function snprintf(char *,int,char *,char *) defined in sm_overflow6.c
      uses variable name defined in smatch_type.c
      uses function get_member_type_from_key(struct expression *,char *) defined in smatch.h
      uses function symbol_expression(struct symbol *) defined in smatch_expressions.c
      uses variable sym defined in smatch_type.c
      uses function tag_as_user_data(struct expression *) defined in check_user_data2.c
      uses function set_points_to_user_data(struct expression *) defined in check_user_data2.c
      uses function str_to_rl(struct symbol *,char *,struct range_list **) defined in smatch_extra.h
      uses function alloc_estate_rl(struct range_list *) defined in smatch_estate.c
      uses function set_state(int,const char *,struct symbol *,struct smatch_state *) defined in smatch.h
      uses variable my_id defined in check_user_data2.c
   function set_called(const char *,struct symbol *,char *,char *) in line 545
      protection public
      4 lines of code
      4 parameters
      1 conditional paths
      uses function set_state(int,const char *,struct symbol *,struct smatch_state *) defined in smatch.h
      uses variable my_call_id defined in check_user_data2.c
      uses macro definition NULL defined in sm_implied3.c
   function match_syscall_definition(struct symbol *) in line 550
      protection public
      29 lines of code
      1 parameters
      6 conditional paths
      uses variable name defined in smatch_type.c
      uses function get_macro_name(struct position) defined in macro_table.c
      uses variable sym defined in smatch_type.c
      uses variable symbol::pos defined in struct.c
      uses function strlen(char *) defined in sm_overflow6.c
      uses function get_function(void) defined in smatch.h
      uses variable option_no_db defined in smatch.c
      uses function get_state(int,const char *,struct symbol *) defined in smatch.h
      uses variable my_call_id defined in check_user_data2.c
      uses macro definition NULL defined in sm_implied3.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::base_type defined in struct.c
      uses variable symbol::arguments defined in struct.c
      uses function set_state(int,const char *,struct symbol *,struct smatch_state *) defined in smatch.h
      uses variable my_id defined in check_user_data2.c
      uses function alloc_estate_whole(struct symbol *) defined in smatch_estate.c
      uses function get_real_base_type(struct symbol *) defined in smatch.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function returns_param_user_data(struct expression *,int,char *,char *) in line 580
      protection public
      27 lines of code
      4 parameters
      6 conditional paths
      uses variable name defined in smatch_type.c
      uses variable sym defined in smatch_type.c
      uses macro definition NULL defined in sm_implied3.c
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_ASSIGNMENT defined in expression.h
      uses function strip_expr(struct expression *) defined in smatch.h
      uses variable expression::right defined in expression.h
      uses enumvalue EXPR_CALL defined in expression.h
      uses function get_argument_from_call_expr(struct expression_list *,int) defined in smatch.h
      uses variable expression::args defined in expression.h
      uses variable param defined in smatch_parse_call_math.c
      uses function get_member_type_from_key(struct expression *,char *) defined in smatch.h
      uses function get_variable_from_key(struct expression *,char *,struct symbol **) defined in smatch.h
      uses function call_results_to_rl(struct expression *,struct symbol *,char *,struct range_list **) defined in smatch_extra.h
      uses function set_state(int,const char *,struct symbol *,struct smatch_state *) defined in smatch.h
      uses variable my_id defined in check_user_data2.c
      uses function alloc_estate_rl(struct range_list *) defined in smatch_estate.c
      uses function free_string(char *) defined in smatch.h
   function has_empty_state(struct sm_state *) in line 608
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable sm_state::possible defined in smatch.h
      uses function estate_rl(struct smatch_state *) defined in smatch_estate.c
      uses variable sm_state::state defined in smatch.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function param_set_to_user_data(int,char *,struct expression *) in line 620
      protection public
      40 lines of code
      3 parameters
      7 conditional paths
      uses variable param defined in smatch_parse_call_math.c
      uses macro definition FOR_EACH_MY_SM defined in avl.h
      uses variable my_id defined in check_user_data2.c
      uses function __get_cur_stree(void) defined in smatch.h
      uses function has_empty_state(struct sm_state *) defined in check_user_data2.c
      uses function get_param_num_from_sym(struct symbol *) defined in smatch.h
      uses variable sm_state::sym defined in smatch.h
      uses function expr_to_sym(struct expression *) defined in smatch.h
      uses function get_state_stree(struct stree *,int,const char *,struct symbol *) defined in smatch_slist.c
      uses variable start_states defined in check_user_data2.c
      uses variable sm_state::name defined in smatch.h
      uses function estates_equiv(struct smatch_state *,struct smatch_state *) defined in smatch_estate.c
      uses variable sm_state::state defined in smatch.h
      uses function get_param_name(struct sm_state *) defined in smatch.h
      uses function sql_insert_return_states(int,const char *,int,int,const char *,const char *) defined in smatch.h
      uses enumvalue USER_DATA3 defined in smatch.h
      uses function show_rl(struct range_list *) defined in smatch_extra.h
      uses function estate_rl(struct smatch_state *) defined in smatch_estate.c
      uses macro definition END_FOR_EACH_SM defined in avl.h
   function check_user_data2(int) in line 661
      protection public
      45 lines of code
      1 parameters
      3 conditional paths
      uses variable my_id defined in check_user_data2.c
      uses variable option_project defined in smatch.c
      uses enumvalue PROJ_KERNEL defined in smatch.h
      uses function add_hook(void *,enum hook_type) defined in smatch.h
      uses function save_start_states(struct statement *) defined in check_user_data2.c
      uses enumvalue AFTER_DEF_HOOK defined in smatch.h
      uses function free_start_states(void) defined in check_user_data2.c
      uses enumvalue END_FUNC_HOOK defined in smatch.h
      uses function match_save_states(struct expression *) defined in check_user_data2.c
      uses enumvalue INLINE_FN_START defined in smatch.h
      uses function match_restore_states(struct expression *) defined in check_user_data2.c
      uses enumvalue INLINE_FN_END defined in smatch.h
      uses function add_unmatched_state_hook(int,unmatched_func_t *) defined in smatch.h
      uses function empty_state(struct sm_state *) defined in check_user_data2.c
      uses function add_pre_merge_hook(int,void(*)(struct sm_state *sm)) defined in smatch.h
      uses function pre_merge_hook(struct sm_state *) defined in check_user_data2.c
      uses function add_merge_hook(int,merge_func_t *) defined in smatch.h
      uses function merge_estates(struct smatch_state *,struct smatch_state *) defined in smatch_estate.c
      uses function add_function_hook(const char *,func_hook *,void *) defined in smatch.h
      uses function match_user_copy(const char *,struct expression *,void *) defined in check_user_data2.c
      uses macro definition ARRAY_SIZE defined in lib.h
      uses variable kstr_funcs defined in check_user_data2.c
      uses function add_function_assign_hook(const char *,func_hook *,void *) defined in smatch.h
      uses function match_simple_strtoul(const char *,struct expression *,void *) defined in check_user_data2.c
      uses macro definition NULL defined in sm_implied3.c
      uses function match_sscanf(const char *,struct expression *,void *) defined in check_user_data2.c
      uses function match_user_assign_function(const char *,struct expression *,void *) defined in check_user_data2.c
      uses function match_syscall_definition(struct symbol *) defined in check_user_data2.c
      uses function match_assign(struct expression *) defined in check_user_data2.c
      uses enumvalue ASSIGNMENT_HOOK defined in smatch.h
      uses function match_call_info(struct expression *) defined in check_user_data2.c
      uses enumvalue FUNCTION_CALL_HOOK defined in smatch.h
      uses function add_member_info_callback(int,void(*)(struct expression *call, int param, char *printed_name, struct sm_state *sm)) defined in smatch.h
      uses function struct_member_callback(struct expression *,int,char *,struct sm_state *) defined in check_user_data2.c
      uses function select_caller_info_hook(void(*)(const char *name, struct symbol *sym, char *key, char *value),int) defined in smatch.h
      uses function set_param_user_data(const char *,struct symbol *,char *,char *) defined in check_user_data2.c
      uses enumvalue USER_DATA3 defined in smatch.h
      uses function select_return_states_hook(int,return_implies_hook *) defined in smatch.h
      uses function returns_param_user_data(struct expression *,int,char *,char *) defined in check_user_data2.c
      uses function add_split_return_callback(void(*)(int return_id, char *return_ranges, struct expression *returned_expr)) defined in smatch.h
      uses function param_set_to_user_data(int,char *,struct expression *) defined in check_user_data2.c
   function check_user_data3(int) in line 707
      protection public
      8 lines of code
      1 parameters
      2 conditional paths
      uses variable my_call_id defined in check_user_data2.c
      uses variable option_project defined in smatch.c
      uses enumvalue PROJ_KERNEL defined in smatch.h
      uses function select_caller_info_hook(void(*)(const char *name, struct symbol *sym, char *key, char *value),int) defined in smatch.h
      uses function set_called(const char *,struct symbol *,char *,char *) defined in check_user_data2.c
      uses enumvalue INTERNAL defined in smatch.h
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/check_wait_for_common.c
module check_wait_for_common.c
   variable my_id in line 20
      protection public
   function match_wait_for_common(const char *,struct expression *,void *) in line 22
      protection public
      10 lines of code
      3 parameters
      2 conditional paths
      uses variable name defined in smatch_type.c
      uses function expr_unsigned(struct expression *) defined in smatch.h
      uses variable expression::left defined in expression.h
      uses function expr_to_str(struct expression *) defined in smatch.h
      uses macro definition sm_msg defined in smatch.h
      uses function free_string(char *) defined in smatch.h
   function check_wait_for_common(int) in line 33
      protection public
      9 lines of code
      1 parameters
      2 conditional paths
      uses variable my_id defined in check_wait_for_common.c
      uses variable option_project defined in smatch.c
      uses enumvalue PROJ_KERNEL defined in smatch.h
      uses function add_function_assign_hook(const char *,func_hook *,void *) defined in smatch.h
      uses function match_wait_for_common(const char *,struct expression *,void *) defined in check_wait_for_common.c
      uses macro definition NULL defined in sm_implied3.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/check_wine_filehandles.c
module check_wine_filehandles.c
   variable my_id in line 26
      protection public
   variable filehandle_funcs in line 35
      protection public
   function STATE(filehandle) in line 28
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function STATE(oktocheck) in line 29
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ok_to_use(struct sm_state *,struct expression *) in line 47
      protection public
      5 lines of code
      2 parameters
      2 conditional paths
      uses variable sm_state::state defined in smatch.h
      uses function set_state(int,const char *,struct symbol *,struct smatch_state *) defined in smatch.h
      uses variable my_id defined in check_wine_filehandles.c
      uses variable sm_state::name defined in smatch.h
      uses variable sm_state::sym defined in smatch.h
   function match_returns_handle(const char *,struct expression *,void *) in line 53
      protection public
      13 lines of code
      3 parameters
      3 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses function expr_to_var_sym(struct expression *,struct symbol **) defined in smatch.h
      uses variable expression::left defined in expression.h
      uses function set_state_expr(int,struct expression *,struct smatch_state *) defined in smatch.h
      uses variable my_id defined in check_wine_filehandles.c
      uses function free_string(char *) defined in smatch.h
   function match_condition(struct expression *) in line 67
      protection public
      14 lines of code
      1 parameters
      3 conditional paths
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_ASSIGNMENT defined in expression.h
      uses variable expression::left defined in expression.h
      uses function get_state_expr(int,struct expression *) defined in smatch.h
      uses variable my_id defined in check_wine_filehandles.c
      uses variable name defined in smatch_type.c
      uses function expr_to_var(struct expression *) defined in smatch.h
      uses macro definition sm_msg defined in smatch.h
      uses function set_state_expr(int,struct expression *,struct smatch_state *) defined in smatch.h
      uses function free_string(char *) defined in smatch.h
   function check_wine_filehandles(int) in line 82
      protection public
      15 lines of code
      1 parameters
      3 conditional paths
      uses variable option_project defined in smatch.c
      uses enumvalue PROJ_WINE defined in smatch.h
      uses variable my_id defined in check_wine_filehandles.c
      uses variable filehandle_funcs defined in check_wine_filehandles.c
      uses function add_function_assign_hook(const char *,func_hook *,void *) defined in smatch.h
      uses function match_returns_handle(const char *,struct expression *,void *) defined in check_wine_filehandles.c
      uses macro definition NULL defined in sm_implied3.c
      uses function add_hook(void *,enum hook_type) defined in smatch.h
      uses function match_condition(struct expression *) defined in check_wine_filehandles.c
      uses enumvalue CONDITION_HOOK defined in smatch.h
      uses function add_modification_hook(int,modification_hook *) defined in smatch.h
      uses function ok_to_use(struct sm_state *,struct expression *) defined in check_wine_filehandles.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/check_wine_WtoA.c
module check_wine_WtoA.c
   variable my_id in line 30
      protection public
   variable in_w in line 32
      protection public
   function match_function_def(struct symbol *) in line 34
      protection public
      15 lines of code
      1 parameters
      3 conditional paths
      uses macro definition func defined in preprocessor1.c
      uses function get_function(void) defined in smatch.h
      uses variable in_w defined in check_wine_WtoA.c
      uses function strlen(char *) defined in sm_overflow6.c
   function allowed_func(const char *) in line 50
      protection public
      12 lines of code
      1 parameters
      5 conditional paths
   function match_call(struct expression *) in line 63
      protection public
      18 lines of code
      1 parameters
      5 conditional paths
      uses variable in_w defined in check_wine_WtoA.c
      uses function expr_to_var(struct expression *) defined in smatch.h
      uses variable expression::fn defined in expression.h
      uses function strlen(char *) defined in sm_overflow6.c
      uses function allowed_func(const char *) defined in check_wine_WtoA.c
      uses macro definition sm_msg defined in smatch.h
      uses function free_string(char *) defined in smatch.h
   function check_wine_WtoA(int) in line 82
      protection public
      9 lines of code
      1 parameters
      2 conditional paths
      uses variable option_project defined in smatch.c
      uses enumvalue PROJ_WINE defined in smatch.h
      uses variable my_id defined in check_wine_WtoA.c
      uses function add_hook(void *,enum hook_type) defined in smatch.h
      uses function match_function_def(struct symbol *) defined in check_wine_WtoA.c
      uses enumvalue FUNC_DEF_HOOK defined in smatch.h
      uses function match_call(struct expression *) defined in check_wine_WtoA.c
      uses enumvalue FUNCTION_CALL_HOOK defined in smatch.h
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/check_wrong_size_arg.c
module check_wrong_size_arg.c
   variable my_id in line 20
      protection public
   function match_parameter(const char *,struct expression *,void *) in line 22
      protection public
      17 lines of code
      3 parameters
      3 conditional paths
      uses variable param defined in smatch_parse_call_math.c
      uses variable name defined in smatch_type.c
      uses function get_argument_from_call_expr(struct expression_list *,int) defined in smatch.h
      uses variable expression::args defined in expression.h
      uses function strip_expr(struct expression *) defined in smatch.h
      uses enumvalue EXPR_COMPARE defined in expression.h
      uses function expr_to_str_sym(struct expression *,struct symbol **) defined in smatch.h
      uses macro definition NULL defined in sm_implied3.c
      uses macro definition sm_msg defined in smatch.h
      uses function free_string(char *) defined in smatch.h
   function register_funcs_from_file(void) in line 40
      protection public
      42 lines of code
      1 parameters
      8 conditional paths
      uses variable name defined in smatch_type.c
      uses macro definition func defined in preprocessor1.c
      uses function memset(void *,int,int) defined in check_byte_count-ice.c
      uses function snprintf(char *,int,char *,char *) defined in sm_overflow6.c
      uses variable option_project_str defined in smatch.c
      uses function get_tokens_file(const char *) defined in smatch.h
      uses enumvalue TOKEN_STREAMBEGIN defined in token.h
      uses variable token::next defined in token.h
      uses enumvalue TOKEN_STREAMEND defined in token.h
      uses enumvalue TOKEN_IDENT defined in token.h
      uses function show_ident(const struct ident *) defined in token.h
      uses variable token::ident defined in token.h
      uses enumvalue TOKEN_NUMBER defined in token.h
      uses variable token::number defined in token.h
      uses function add_function_hook(const char *,func_hook *,void *) defined in smatch.h
      uses function match_parameter(const char *,struct expression *,void *) defined in check_wrong_size_arg.c
   function check_wrong_size_arg(int) in line 83
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable my_id defined in check_wrong_size_arg.c
      uses function register_funcs_from_file(void) defined in check_wrong_size_arg.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/check_zero_to_err_ptr.c
module check_zero_to_err_ptr.c
   variable my_id in line 20
      protection public
   function match_err_ptr(const char *,struct expression *,void *) in line 22
      protection public
      12 lines of code
      3 parameters
      3 conditional paths
      uses function get_argument_from_call_expr(struct expression_list *,int) defined in smatch.h
      uses variable expression::args defined in expression.h
      uses function get_implied_value(struct expression *,sval_t *) defined in smatch.h
      uses variable sval_t::value defined in smatch.h
      uses macro definition sm_msg defined in smatch.h
   function check_zero_to_err_ptr(int) in line 35
      protection public
      10 lines of code
      1 parameters
      2 conditional paths
      uses variable option_project defined in smatch.c
      uses enumvalue PROJ_KERNEL defined in smatch.h
      uses variable my_id defined in check_zero_to_err_ptr.c
      uses function add_function_hook(const char *,func_hook *,void *) defined in smatch.h
      uses function match_err_ptr(const char *,struct expression *,void *) defined in check_zero_to_err_ptr.c
      uses macro definition NULL defined in sm_implied3.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/compat-bsd.c
module compat-bsd.c
   function string_to_ld(const char *,char **) in line 33
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/compat-cygwin.c
module compat-cygwin.c
   function blob_alloc(unsigned long) in line 35
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses variable ptr defined in sm_null_deref2.c
      uses macro definition NULL defined in sm_implied3.c
      uses macro definition MAP_ANONYMOUS defined in mmap-blob.c
      uses function memset(void *,int,int) defined in check_byte_count-ice.c
   function blob_free(void *,unsigned long) in line 47
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
   function string_to_ld(const char *,char **) in line 53
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/compat-linux.c
module compat-linux.c
   macro definition _GNU_SOURCE in line 1
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/compat-mingw.c
module compat-mingw.c
   function blob_alloc(unsigned long) in line 36
      protection public
      8 lines of code
      1 parameters
      2 conditional paths
      uses variable ptr defined in sm_null_deref2.c
      uses function malloc(int) defined in sm_buf_size2.c
      uses macro definition NULL defined in sm_implied3.c
      uses function memset(void *,int,int) defined in check_byte_count-ice.c
      uses macro definition CHUNK defined in compat.h
      uses function die(const char *,...) defined in lib.c
      uses macro definition MAP_ANONYMOUS defined in mmap-blob.c
   function blob_free(void *,unsigned long) in line 45
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses macro definition CHUNK defined in compat.h
      uses function die(const char *,...) defined in lib.c
   function string_to_ld(const char *,char **) in line 50
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/compat-solaris.c
module compat-solaris.c
   function string_to_ld(const char *,char **) in line 10
      protection public
      24 lines of code
      2 parameters
      4 conditional paths
      uses variable str defined in sm_overflow6.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/compat.h
module compat.h
   macro definition CHUNK in line 22
      protection public
   function blob_alloc(unsigned long) in line 24
      protection public
      11 lines of code
      1 parameters
      3 conditional paths
      uses variable ptr defined in sm_null_deref2.c
      uses macro definition NULL defined in sm_implied3.c
      uses macro definition MAP_ANONYMOUS defined in mmap-blob.c
      uses function memset(void *,int,int) defined in check_byte_count-ice.c
      uses function malloc(int) defined in sm_buf_size2.c
      uses macro definition CHUNK defined in compat.h
      uses function die(const char *,...) defined in lib.c
   function blob_free(void *,unsigned long) in line 25
      protection public
      10 lines of code
      2 parameters
      2 conditional paths
      uses macro definition CHUNK defined in compat.h
      uses function die(const char *,...) defined in lib.c
   function string_to_ld(const char *,char **) in line 26
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses variable str defined in sm_overflow6.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/compat/mmap-blob.c
module mmap-blob.c
   macro definition MAP_ANONYMOUS in line 9
      protection public
   function blob_alloc(unsigned long) in line 16
      protection public
      11 lines of code
      1 parameters
      1 conditional paths
   function blob_free(void *,unsigned long) in line 28
      protection public
      10 lines of code
      2 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/compat/strtold.c
module strtold.c
   function string_to_ld(const char *,char **) in line 3
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/compile-i386.c
module compile-i386.c
   macro definition own_regno in line 106
      protection public
   macro definition byte_reg in line 211
      protection public
   macro definition highbyte_reg in line 212
      protection public
   macro definition word_reg in line 213
      protection public
   macro definition REGINFO in line 215
      protection public
   macro definition REGSTORAGE in line 247
      protection public
   macro definition REG_EAX in line 259
      protection public
   macro definition REG_ECX in line 260
      protection public
   macro definition REG_EDX in line 261
      protection public
   macro definition REG_ESP in line 262
      protection public
   macro definition REG_DL in line 263
      protection public
   macro definition REG_DX in line 264
      protection public
   macro definition REG_AL in line 265
      protection public
   macro definition REG_AX in line 266
      protection public
   enumeration storage_type in line 92
      protection public
   enumeration @3 in line 147
      protection public
   enumeration atom_type in line 156
      protection public
   enumeration registers in line 202
      protection public
   variable current_func in line 188
      protection public
   variable unit_post_text in line 189
      protection public
   variable current_section in line 190
      protection public
   variable reg_info_table in line 200
      protection public
   variable hardreg_storage_table in line 200
      protection public
   variable regclass_8 in line 297
      protection public
   variable regclass_16 in line 297
      protection public
   variable regclass_32 in line 297
      protection public
   variable regclass_64 in line 297
      protection public
   variable regclass_32_8 in line 297
      protection public
   variable ea_current in line 958
      protection public
   variable ea_last in line 958
      protection public
   enumvalue STOR_PSEUDO in line 93
      protection public
   enumvalue STOR_ARG in line 94
      protection public
   enumvalue STOR_SYM in line 95
      protection public
   enumvalue STOR_REG in line 96
      protection public
   enumvalue STOR_VALUE in line 97
      protection public
   enumvalue STOR_LABEL in line 98
      protection public
   enumvalue STOR_LABELSYM in line 99
      protection public
   enumvalue STOR_LABEL_VAL in line 148
      protection public
   enumvalue STOR_WANTS_FREE in line 149
      protection public
   enumvalue ATOM_TEXT in line 157
      protection public
   enumvalue ATOM_INSN in line 158
      protection public
   enumvalue ATOM_CSTR in line 159
      protection public
   enumvalue NOREG in line 203
      protection public
   enumvalue AL in line 204
      protection public
   enumvalue DL in line 204
      protection public
   enumvalue CL in line 204
      protection public
   enumvalue BL in line 204
      protection public
   enumvalue AH in line 204
      protection public
   enumvalue DH in line 204
      protection public
   enumvalue CH in line 204
      protection public
   enumvalue BH in line 204
      protection public
   enumvalue AX in line 205
      protection public
   enumvalue DX in line 205
      protection public
   enumvalue CX in line 205
      protection public
   enumvalue BX in line 205
      protection public
   enumvalue SI in line 205
      protection public
   enumvalue DI in line 205
      protection public
   enumvalue BP in line 205
      protection public
   enumvalue SP in line 205
      protection public
   enumvalue EAX in line 206
      protection public
   enumvalue EDX in line 206
      protection public
   enumvalue ECX in line 206
      protection public
   enumvalue EBX in line 206
      protection public
   enumvalue ESI in line 206
      protection public
   enumvalue EDI in line 206
      protection public
   enumvalue EBP in line 206
      protection public
   enumvalue ESP in line 206
      protection public
   enumvalue EAX_EDX in line 207
      protection public
   enumvalue ECX_EBX in line 207
      protection public
   enumvalue ESI_EDI in line 207
      protection public
   function DECLARE_PTR_LIST(str_list,struct atom) in line 76
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function DECLARE_PTR_LIST(atom_list,struct atom) in line 77
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function DECLARE_PTR_LIST(storage_list,struct storage) in line 78
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function emit_comment(const char *,...) in line 192
      protection public
      14 lines of code
      2 parameters
      1 conditional paths
      uses variable current_func defined in compile-i386.c
      uses function push_text_atom(struct function *,const char *) defined in compile-i386.c
   function emit_move(struct storage *,struct storage *,struct symbol *,const char *) in line 193
      protection public
      74 lines of code
      4 parameters
      13 conditional paths
      uses variable src defined in sm_user_data3.c
      uses enumvalue STOR_REG defined in compile-i386.c
      uses function type_is_signed(struct symbol *) defined in compile-i386.c
      uses variable dest defined in sm_user_data2.c
      uses variable storage::reg defined in storage.h
      uses macro definition NULL defined in sm_implied3.c
      uses function insn(const char *,struct storage *,struct storage *,const char *) defined in compile-i386.c
      uses function info(struct position,const char *,...) defined in lib.c
      uses function reginfo_reg(struct reg_info *) defined in compile-i386.c
      uses function opbits(const char *,unsigned int) defined in compile-i386.c
   function type_is_signed(struct symbol *) in line 195
      protection public
      8 lines of code
      1 parameters
      3 conditional paths
      uses variable sym defined in smatch_type.c
      uses variable symbol::type defined in struct.c
      uses enumvalue SYM_NODE defined in symbol.h
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::base_type defined in struct.c
      uses enumvalue SYM_PTR defined in symbol.h
      uses variable ctype::modifiers defined in struct.c
      uses macro definition MOD_UNSIGNED defined in symbol.h
   function x86_address_gen(struct expression *) in line 196
      protection public
      22 lines of code
      1 parameters
      2 conditional paths
      uses variable current_func defined in compile-i386.c
      uses function x86_expression(struct expression *) defined in compile-i386.c
      uses variable expression::unop defined in expression.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_SYMBOL defined in expression.h
      uses function emit_move(struct storage *,struct storage *,struct symbol *,const char *) defined in compile-i386.c
      uses macro definition REG_EAX defined in compile-i386.c
      uses macro definition NULL defined in sm_implied3.c
      uses function strcpy(char *,char *,int) defined in sm_overflow3.c
      uses function push_text_atom(struct function *,const char *) defined in compile-i386.c
      uses function stack_alloc(int) defined in compile-i386.c
      uses macro definition REG_ECX defined in compile-i386.c
   function x86_symbol_expr(struct symbol *) in line 197
      protection public
      15 lines of code
      1 parameters
      3 conditional paths
      uses function stack_alloc(int) defined in compile-i386.c
      uses variable sym defined in smatch_type.c
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::modifiers defined in struct.c
      uses macro definition MOD_TOPLEVEL defined in symbol.h
      uses macro definition MOD_EXTERN defined in symbol.h
      uses macro definition MOD_STATIC defined in symbol.h
      uses function printf(char *,...) defined in test-be.c
      uses variable bits_in_pointer defined in target.c
      uses function show_ident(const struct ident *) defined in token.h
      uses variable symbol::ident defined in struct.c
      uses macro definition MOD_ADDRESSABLE defined in symbol.h
      uses variable symbol::value defined in struct.c
   function x86_symbol(struct symbol *) in line 198
      protection public
      67 lines of code
      1 parameters
      12 conditional paths
      uses variable sym defined in smatch_type.c
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::base_type defined in struct.c
      uses enumvalue SYM_ARRAY defined in symbol.h
      uses variable symbol::initializer defined in struct.c
      uses function emit_array(struct symbol *) defined in compile-i386.c
      uses function emit_array_noinit(struct symbol *) defined in compile-i386.c
      uses enumvalue SYM_BASETYPE defined in symbol.h
      uses function emit_object_pre(const char *,unsigned long,unsigned long,unsigned int) defined in compile-i386.c
      uses function show_ident(const struct ident *) defined in token.h
      uses variable symbol::ident defined in struct.c
      uses variable ctype::modifiers defined in struct.c
      uses variable ctype::alignment defined in struct.c
      uses variable symbol::bit_size defined in struct.c
      uses function emit_scalar(struct expression *,unsigned int) defined in compile-i386.c
      uses function stor_sym_init(struct symbol *) defined in compile-i386.c
      uses function emit_scalar_noinit(struct symbol *) defined in compile-i386.c
      uses enumvalue SYM_STRUCT defined in symbol.h
      uses enumvalue SYM_UNION defined in symbol.h
      uses variable member defined in smdb.py
      uses function printf(char *,...) defined in test-be.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses function x86_struct_member(struct symbol *) defined in compile-i386.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses enumvalue SYM_FN defined in symbol.h
      uses function emit_func_pre(struct symbol *) defined in compile-i386.c
      uses function x86_statement(struct statement *) defined in compile-i386.c
      uses function emit_func_post(struct symbol *) defined in compile-i386.c
      uses function x86_expression(struct expression *) defined in compile-i386.c
      uses function x86_symbol_init(struct symbol *) defined in compile-i386.c
   function x86_statement(struct statement *) in line 199
      protection public
      73 lines of code
      1 parameters
      17 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses variable statement::type defined in parse.h
      uses enumvalue STMT_RETURN defined in parse.h
      uses function emit_return_stmt(struct statement *) defined in compile-i386.c
      uses enumvalue STMT_DECLARATION defined in parse.h
      uses function x86_symbol_decl(struct symbol_list *) defined in compile-i386.c
      uses variable statement::declaration defined in parse.h
      uses enumvalue STMT_COMPOUND defined in parse.h
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable statement::stmts defined in parse.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses enumvalue STMT_EXPRESSION defined in parse.h
      uses function x86_expression(struct expression *) defined in compile-i386.c
      uses variable statement::expression defined in parse.h
      uses enumvalue STMT_IF defined in parse.h
      uses function emit_if_conditional(struct statement *) defined in compile-i386.c
      uses enumvalue STMT_CASE defined in parse.h
      uses function emit_case_statement(struct statement *) defined in compile-i386.c
      uses enumvalue STMT_SWITCH defined in parse.h
      uses function emit_switch_statement(struct statement *) defined in compile-i386.c
      uses enumvalue STMT_ITERATOR defined in parse.h
      uses function emit_loop(struct statement *) defined in compile-i386.c
      uses enumvalue STMT_NONE defined in parse.h
      uses enumvalue STMT_LABEL defined in parse.h
      uses function printf(char *,...) defined in test-be.c
      uses variable statement::label_identifier defined in parse.h
      uses variable statement::label_statement defined in parse.h
      uses enumvalue STMT_GOTO defined in parse.h
      uses variable statement::goto_expression defined in parse.h
      uses variable storage::pseudo defined in storage.h
      uses function show_ident(const struct ident *) defined in token.h
      uses variable statement::goto_label defined in parse.h
      uses variable symbol::ident defined in struct.c
      uses function new_storage(enum storage_type) defined in compile-i386.c
      uses enumvalue STOR_LABEL defined in compile-i386.c
      uses variable storage::label defined in storage.h
      uses function loopstk_break(void) defined in compile-i386.c
      uses variable storage::flags defined in storage.h
      uses enumvalue STOR_WANTS_FREE defined in compile-i386.c
      uses function insn(const char *,struct storage *,struct storage *,const char *) defined in compile-i386.c
      uses function loopstk_continue(void) defined in compile-i386.c
      uses variable storage::labelsym defined in storage.h
      uses function new_labelsym(struct symbol *) defined in compile-i386.c
      uses enumvalue STMT_ASM defined in parse.h
   function x86_expression(struct expression *) in line 200
      protection public
      79 lines of code
      1 parameters
      30 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses variable expression::ctype defined in expression.h
      uses variable position::pos defined in lib.h
      uses variable expression::pos defined in expression.h
      uses function printf(char *,...) defined in test-be.c
      uses function stream_name(int) defined in token.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_CALL defined in expression.h
      uses function x86_call_expression(struct expression *) defined in compile-i386.c
      uses enumvalue EXPR_ASSIGNMENT defined in expression.h
      uses function x86_assignment(struct expression *) defined in compile-i386.c
      uses enumvalue EXPR_COMPARE defined in expression.h
      uses function emit_compare(struct expression *) defined in compile-i386.c
      uses enumvalue EXPR_BINOP defined in expression.h
      uses enumvalue EXPR_COMMA defined in expression.h
      uses enumvalue EXPR_LOGICAL defined in expression.h
      uses function emit_binop(struct expression *) defined in compile-i386.c
      uses enumvalue EXPR_PREOP defined in expression.h
      uses function x86_preop(struct expression *) defined in compile-i386.c
      uses enumvalue EXPR_POSTOP defined in expression.h
      uses function emit_postop(struct expression *) defined in compile-i386.c
      uses enumvalue EXPR_SYMBOL defined in expression.h
      uses function emit_symbol_expr_init(struct symbol *) defined in compile-i386.c
      uses variable expression::symbol defined in expression.h
      uses enumvalue EXPR_DEREF defined in expression.h
      uses enumvalue EXPR_SIZEOF defined in expression.h
      uses enumvalue EXPR_ALIGNOF defined in expression.h
      uses function warning(struct position,const char *,...) defined in lib.c
      uses enumvalue EXPR_CAST defined in expression.h
      uses enumvalue EXPR_FORCE_CAST defined in expression.h
      uses enumvalue EXPR_IMPLIED_CAST defined in expression.h
      uses function emit_cast_expr(struct expression *) defined in compile-i386.c
      uses enumvalue EXPR_VALUE defined in expression.h
      uses function emit_value(struct expression *) defined in compile-i386.c
      uses enumvalue EXPR_STRING defined in expression.h
      uses function emit_string_expr(struct expression *) defined in compile-i386.c
      uses enumvalue EXPR_INITIALIZER defined in expression.h
      uses function x86_initializer_expr(struct expression *,struct symbol *) defined in compile-i386.c
      uses enumvalue EXPR_SELECT defined in expression.h
      uses function emit_select_expr(struct expression *) defined in compile-i386.c
      uses enumvalue EXPR_CONDITIONAL defined in expression.h
      uses function emit_conditional_expr(struct expression *) defined in compile-i386.c
      uses enumvalue EXPR_STATEMENT defined in expression.h
      uses function x86_statement_expr(struct expression *) defined in compile-i386.c
      uses enumvalue EXPR_LABEL defined in expression.h
      uses function x86_label_expr(struct expression *) defined in compile-i386.c
      uses enumvalue EXPR_POS defined in expression.h
      uses enumvalue EXPR_IDENTIFIER defined in expression.h
      uses enumvalue EXPR_INDEX defined in expression.h
      uses enumvalue EXPR_TYPE defined in expression.h
      uses enumvalue EXPR_FVALUE defined in expression.h
   function DECLARE_BITMAP(regs_in_use,256) in line 268
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function reginfo_reg(struct reg_info *) in line 270
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable hardreg_storage_table defined in compile-i386.c
      uses function info(struct position,const char *,...) defined in lib.c
   function get_hardreg(struct storage *,int) in line 275
      protection public
      21 lines of code
      2 parameters
      6 conditional paths
      uses function info(struct position,const char *,...) defined in lib.c
      uses variable storage::reg defined in storage.h
      uses variable reg_info::aliases defined in compile-i386.c
      uses enumvalue NOREG defined in compile-i386.c
      uses variable reg_info_table defined in compile-i386.c
      uses variable reg_info::contains defined in compile-i386.c
      uses macro definition NULL defined in sm_implied3.c
      uses variable name defined in smatch_type.c
      uses function exit(int) defined in test-be.c
   function put_reg(struct storage *) in line 297
      protection public
      9 lines of code
      1 parameters
      2 conditional paths
      uses function info(struct position,const char *,...) defined in lib.c
      uses variable storage::reg defined in storage.h
      uses variable reg_info_table defined in compile-i386.c
      uses variable name defined in smatch_type.c
   function get_regclass_bits(int) in line 319
      protection public
      9 lines of code
      1 parameters
      4 conditional paths
      uses variable regclass_8 defined in compile-i386.c
      uses variable regclass_16 defined in compile-i386.c
      uses variable regclass_64 defined in compile-i386.c
      uses variable regclass_32 defined in compile-i386.c
   function get_regclass(struct expression *) in line 329
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function get_regclass_bits(int) defined in compile-i386.c
      uses variable expression::ctype defined in expression.h
      uses variable symbol::bit_size defined in struct.c
   function register_busy(int) in line 334
      protection public
      16 lines of code
      1 parameters
      5 conditional paths
      uses function info(struct position,const char *,...) defined in lib.c
      uses variable reg_info_table defined in compile-i386.c
      uses enumvalue NOREG defined in compile-i386.c
   function get_reg(struct regclass *) in line 351
      protection public
      14 lines of code
      1 parameters
      3 conditional paths
      uses enumvalue NOREG defined in compile-i386.c
      uses function register_busy(int) defined in compile-i386.c
      uses function get_hardreg(struct storage *,int) defined in compile-i386.c
      uses variable hardreg_storage_table defined in compile-i386.c
      uses function exit(int) defined in test-be.c
   function get_reg_value(struct storage *,struct regclass *) in line 366
      protection public
      19 lines of code
      2 parameters
      2 conditional paths
      uses function info(struct position,const char *,...) defined in lib.c
      uses variable storage::reg defined in storage.h
      uses function emit_comment(const char *,...) defined in compile-i386.c
      uses function get_hardreg(struct storage *,int) defined in compile-i386.c
      uses variable hardreg_storage_table defined in compile-i386.c
      uses function get_reg(struct regclass *) defined in compile-i386.c
      uses function emit_move(struct storage *,struct storage *,struct symbol *,const char *) defined in compile-i386.c
      uses variable storage::value defined in storage.h
   function temp_from_bits(unsigned int) in line 386
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function get_reg(struct regclass *) defined in compile-i386.c
      uses function get_regclass_bits(int) defined in compile-i386.c
   function pseudo_offset(struct storage *) in line 391
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses enumvalue STOR_PSEUDO defined in compile-i386.c
   function arg_offset(struct storage *) in line 399
      protection public
      8 lines of code
      1 parameters
      2 conditional paths
      uses enumvalue STOR_ARG defined in compile-i386.c
      uses variable current_func defined in compile-i386.c
      uses variable function::stack_size defined in sparse-llvm.c
   function pretty_offset(int) in line 408
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses function sprintf(char *,char *,char *) defined in sm_overflow6.c
      uses function strcpy(char *,char *,int) defined in sm_overflow3.c
   function stor_sym_init(struct symbol *) in line 420
      protection public
      15 lines of code
      1 parameters
      2 conditional paths
      uses function die(const char *,...) defined in lib.c
      uses variable symbol_private::addr defined in compile-i386.c
      uses variable storage::type defined in storage.h
      uses enumvalue STOR_SYM defined in compile-i386.c
      uses variable storage::sym defined in storage.h
      uses variable sym defined in smatch_type.c
   function stor_op_name(struct storage *) in line 436
      protection public
      32 lines of code
      1 parameters
      8 conditional paths
      uses variable name defined in smatch_type.c
      uses enumvalue STOR_PSEUDO defined in compile-i386.c
      uses function strcpy(char *,char *,int) defined in sm_overflow3.c
      uses function pretty_offset(int) defined in compile-i386.c
      uses function pseudo_offset(struct storage *) defined in compile-i386.c
      uses enumvalue STOR_ARG defined in compile-i386.c
      uses function arg_offset(struct storage *) defined in compile-i386.c
      uses enumvalue STOR_SYM defined in compile-i386.c
      uses function show_ident(const struct ident *) defined in token.h
      uses enumvalue STOR_REG defined in compile-i386.c
      uses enumvalue STOR_VALUE defined in compile-i386.c
      uses function sprintf(char *,char *,char *) defined in sm_overflow6.c
      uses enumvalue STOR_LABEL defined in compile-i386.c
      uses enumvalue STOR_LABEL_VAL defined in compile-i386.c
      uses enumvalue STOR_LABELSYM defined in compile-i386.c
   function new_atom(enum atom_type) in line 469
      protection public
      12 lines of code
      1 parameters
      2 conditional paths
      uses function die(const char *,...) defined in lib.c
      uses variable atom::type defined in compile-i386.c
   function push_cstring(struct function *,struct string *,int) in line 482
      protection public
      11 lines of code
      3 parameters
      1 conditional paths
      uses function new_atom(enum atom_type) defined in compile-i386.c
      uses enumvalue ATOM_CSTR defined in compile-i386.c
      uses variable atom::string defined in compile-i386.c
      uses variable str defined in sm_overflow6.c
      uses variable atom::label defined in compile-i386.c
      uses macro definition add_ptr_list defined in ptrlist.h
   function push_atom(struct function *,struct atom *) in line 494
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses macro definition add_ptr_list defined in ptrlist.h
   function push_text_atom(struct function *,const char *) in line 499
      protection public
      9 lines of code
      2 parameters
      1 conditional paths
      uses function new_atom(enum atom_type) defined in compile-i386.c
      uses enumvalue ATOM_TEXT defined in compile-i386.c
      uses variable atom::text defined in compile-i386.c
      uses variable textbuf::text defined in compile-i386.c
      uses variable atom::text_len defined in compile-i386.c
      uses function strlen(char *) defined in sm_overflow6.c
      uses function push_atom(struct function *,struct atom *) defined in compile-i386.c
   function new_storage(enum storage_type) in line 509
      protection public
      12 lines of code
      1 parameters
      2 conditional paths
      uses function die(const char *,...) defined in lib.c
      uses variable storage::type defined in storage.h
   function stack_alloc(int) in line 522
      protection public
      19 lines of code
      1 parameters
      1 conditional paths
      uses variable current_func defined in compile-i386.c
      uses macro definition assert defined in sort.c
      uses macro definition NULL defined in sm_implied3.c
      uses function new_storage(enum storage_type) defined in compile-i386.c
      uses enumvalue STOR_PSEUDO defined in compile-i386.c
      uses variable storage::type defined in storage.h
      uses variable storage::pseudo defined in storage.h
      uses variable storage::offset defined in storage.h
      uses variable storage::size defined in storage.h
      uses macro definition add_ptr_list defined in ptrlist.h
   function new_labelsym(struct symbol *) in line 542
      protection public
      13 lines of code
      1 parameters
      2 conditional paths
      uses function new_storage(enum storage_type) defined in compile-i386.c
      uses enumvalue STOR_LABELSYM defined in compile-i386.c
      uses variable storage::flags defined in storage.h
      uses enumvalue STOR_WANTS_FREE defined in compile-i386.c
      uses variable storage::labelsym defined in storage.h
      uses variable sym defined in smatch_type.c
   function new_val(long long) in line 556
      protection public
      13 lines of code
      1 parameters
      2 conditional paths
      uses function new_storage(enum storage_type) defined in compile-i386.c
      uses enumvalue STOR_VALUE defined in compile-i386.c
      uses variable storage::flags defined in storage.h
      uses enumvalue STOR_WANTS_FREE defined in compile-i386.c
      uses variable storage::value defined in storage.h
   function new_label(void) in line 570
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable storage::label defined in storage.h
   function textbuf_push(struct textbuf **,const char *) in line 576
      protection public
      27 lines of code
      2 parameters
      3 conditional paths
      uses function strlen(char *) defined in sm_overflow6.c
      uses variable textbuf::text defined in compile-i386.c
      uses function die(const char *,...) defined in lib.c
      uses function memcpy(void *,void *,int) defined in sm_struct_assign1.c
      uses variable textbuf::len defined in compile-i386.c
      uses variable textbuf::prev defined in compile-i386.c
      uses variable textbuf::next defined in compile-i386.c
   function textbuf_emit(struct textbuf **) in line 604
      protection public
      21 lines of code
      1 parameters
      3 conditional paths
      uses variable textbuf::next defined in compile-i386.c
      uses macro definition NULL defined in sm_implied3.c
      uses variable textbuf::prev defined in compile-i386.c
      uses variable textbuf::text defined in compile-i386.c
   function insn(const char *,struct storage *,struct storage *,const char *) in line 626
      protection public
      18 lines of code
      4 parameters
      2 conditional paths
      uses variable current_func defined in compile-i386.c
      uses function new_atom(enum atom_type) defined in compile-i386.c
      uses enumvalue ATOM_INSN defined in compile-i386.c
      uses macro definition assert defined in sort.c
      uses macro definition NULL defined in sm_implied3.c
      uses function strcpy(char *,char *,int) defined in sm_overflow3.c
      uses variable atom::insn defined in compile-i386.c
      uses variable atom::comment defined in compile-i386.c
      uses variable atom::op1 defined in compile-i386.c
      uses variable atom::op2 defined in compile-i386.c
      uses function push_atom(struct function *,struct atom *) defined in compile-i386.c
   function emit_label(int,const char *) in line 660
      protection public
      12 lines of code
      2 parameters
      2 conditional paths
      uses variable current_func defined in compile-i386.c
      uses function sprintf(char *,char *,char *) defined in sm_overflow6.c
      uses function push_text_atom(struct function *,const char *) defined in compile-i386.c
   function emit_labelsym(struct symbol *,const char *) in line 673
      protection public
      12 lines of code
      2 parameters
      2 conditional paths
      uses variable current_func defined in compile-i386.c
      uses function sprintf(char *,char *,char *) defined in sm_overflow6.c
      uses variable sym defined in smatch_type.c
      uses function push_text_atom(struct function *,const char *) defined in compile-i386.c
   function emit_unit_begin(const char *) in line 686
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function printf(char *,...) defined in test-be.c
   function emit_unit_end(void) in line 691
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function textbuf_emit(struct textbuf **) defined in compile-i386.c
      uses variable unit_post_text defined in compile-i386.c
      uses function printf(char *,...) defined in test-be.c
   function emit_section(const char *) in line 698
      protection public
      10 lines of code
      1 parameters
      3 conditional paths
      uses variable current_section defined in compile-i386.c
      uses function printf(char *,...) defined in test-be.c
   function emit_insn_atom(struct function *,struct atom *) in line 709
      protection public
      28 lines of code
      2 parameters
      4 conditional paths
      uses variable atom::op1 defined in compile-i386.c
      uses variable atom::op2 defined in compile-i386.c
      uses variable atom::comment defined in compile-i386.c
      uses function sprintf(char *,char *,char *) defined in sm_overflow6.c
      uses function strcpy(char *,char *,int) defined in sm_overflow3.c
      uses function stor_op_name(struct storage *) defined in compile-i386.c
      uses variable atom::insn defined in compile-i386.c
      uses function strlen(char *) defined in sm_overflow6.c
   function emit_atom_list(struct function *) in line 738
      protection public
      21 lines of code
      1 parameters
      4 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable atom::type defined in compile-i386.c
      uses enumvalue ATOM_TEXT defined in compile-i386.c
      uses variable atom::text defined in compile-i386.c
      uses variable atom::text_len defined in compile-i386.c
      uses function void(x,int) defined in identifier_list.c
      uses enumvalue ATOM_INSN defined in compile-i386.c
      uses function emit_insn_atom(struct function *,struct atom *) defined in compile-i386.c
      uses enumvalue ATOM_CSTR defined in compile-i386.c
      uses macro definition assert defined in sort.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function emit_string_list(struct function *) in line 760
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
      uses function emit_section(const char *) defined in compile-i386.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses function printf(char *,...) defined in test-be.c
      uses variable atom::label defined in compile-i386.c
      uses function show_string(const struct string *) defined in token.h
      uses variable atom::string defined in compile-i386.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function func_cleanup(struct function *) in line 775
      protection public
      22 lines of code
      1 parameters
      4 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable atom::type defined in compile-i386.c
      uses enumvalue ATOM_TEXT defined in compile-i386.c
      uses variable atom::text defined in compile-i386.c
      uses variable atom::op1 defined in compile-i386.c
      uses variable storage::flags defined in storage.h
      uses enumvalue STOR_WANTS_FREE defined in compile-i386.c
      uses variable atom::op2 defined in compile-i386.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses macro definition free_ptr_list defined in ptrlist.h
   function emit_func_pre(struct symbol *) in line 799
      protection public
      47 lines of code
      1 parameters
      2 conditional paths
      uses variable sym defined in smatch_type.c
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::base_type defined in struct.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable symbol::arguments defined in struct.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses function die(const char *,...) defined in lib.c
      uses function new_label(void) defined in compile-i386.c
      uses variable storage::type defined in storage.h
      uses enumvalue STOR_ARG defined in compile-i386.c
      uses variable storage::idx defined in storage.h
      uses variable symbol_private::addr defined in compile-i386.c
      uses macro definition assert defined in sort.c
      uses variable current_func defined in compile-i386.c
      uses macro definition NULL defined in sm_implied3.c
   function emit_func_post(struct symbol *) in line 848
      protection public
      51 lines of code
      1 parameters
      5 conditional paths
      uses variable name defined in smatch_type.c
      uses function show_ident(const struct ident *) defined in token.h
      uses variable sym defined in smatch_type.c
      uses variable symbol::ident defined in struct.c
      uses variable current_func defined in compile-i386.c
      uses variable function::stack_size defined in sparse-llvm.c
      uses function emit_string_list(struct function *) defined in compile-i386.c
      uses function emit_section(const char *) defined in compile-i386.c
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::modifiers defined in struct.c
      uses macro definition MOD_STATIC defined in symbol.h
      uses function printf(char *,...) defined in test-be.c
      uses function sprintf(char *,char *,char *) defined in sm_overflow6.c
      uses function emit_label(int,const char *) defined in compile-i386.c
      uses macro definition NULL defined in sm_implied3.c
      uses function new_storage(enum storage_type) defined in compile-i386.c
      uses enumvalue STOR_VALUE defined in compile-i386.c
      uses variable storage::value defined in storage.h
      uses variable storage::flags defined in storage.h
      uses enumvalue STOR_WANTS_FREE defined in compile-i386.c
      uses function insn(const char *,struct storage *,struct storage *,const char *) defined in compile-i386.c
      uses macro definition REG_ESP defined in compile-i386.c
      uses function emit_atom_list(struct function *) defined in compile-i386.c
      uses function func_cleanup(struct function *) defined in compile-i386.c
   function emit_object_pre(const char *,unsigned long,unsigned long,unsigned int) in line 901
      protection public
      12 lines of code
      4 parameters
      3 conditional paths
      uses macro definition MOD_STATIC defined in symbol.h
      uses function printf(char *,...) defined in test-be.c
      uses variable name defined in smatch_type.c
      uses function emit_section(const char *) defined in compile-i386.c
   function emit_scalar(struct expression *,unsigned int) in line 915
      protection public
      26 lines of code
      2 parameters
      6 conditional paths
      uses macro definition assert defined in sort.c
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_VALUE defined in expression.h
      uses variable expression::value defined in expression.h
      uses function printf(char *,...) defined in test-be.c
      uses variable int defined in missing-ident.c
      uses macro definition NULL defined in sm_implied3.c
   function emit_global_noinit(const char *,unsigned long,unsigned long,unsigned int) in line 942
      protection public
      15 lines of code
      4 parameters
      3 conditional paths
      uses macro definition MOD_STATIC defined in symbol.h
      uses function sprintf(char *,char *,char *) defined in sm_overflow6.c
      uses variable name defined in smatch_type.c
      uses function textbuf_push(struct textbuf **,const char *) defined in compile-i386.c
      uses variable unit_post_text defined in compile-i386.c
   function emit_initializer(struct symbol *,struct expression *) in line 960
      protection public
      20 lines of code
      2 parameters
      4 conditional paths
      uses variable ea_current defined in compile-i386.c
      uses variable ea_last defined in compile-i386.c
      uses function printf(char *,...) defined in test-be.c
      uses variable sym defined in smatch_type.c
      uses variable symbol::bit_size defined in struct.c
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_VALUE defined in expression.h
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::base_type defined in struct.c
      uses macro definition assert defined in sort.c
      uses macro definition NULL defined in sm_implied3.c
      uses function emit_scalar(struct expression *,unsigned int) defined in compile-i386.c
      uses function get_expression_value(struct expression *) defined in expand.c
      uses variable symbol::array_size defined in struct.c
      uses enumvalue EXPR_INITIALIZER defined in expression.h
   function sort_array_cmp(const struct expression *,const struct expression *) in line 981
      protection public
      12 lines of code
      2 parameters
      2 conditional paths
      uses enumvalue EXPR_POS defined in expression.h
      uses variable int defined in missing-ident.c
   function sort_array(struct expression *) in line 995
      protection public
      57 lines of code
      1 parameters
      9 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable expression::expr_list defined in expression.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses function malloc(int) defined in sm_buf_size2.c
      uses function die(const char *,...) defined in lib.c
      uses enumvalue EXPR_POS defined in expression.h
      uses enumvalue EXPR_VALUE defined in expression.h
      uses function sort_array_cmp(const struct expression *,const struct expression *) defined in compile-i386.c
      uses macro definition THIS_ADDRESS defined in ptrlist.h
   function emit_array(struct symbol *) in line 1053
      protection public
      31 lines of code
      1 parameters
      3 conditional paths
      uses variable sym defined in smatch_type.c
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::base_type defined in struct.c
      uses variable symbol::initializer defined in struct.c
      uses macro definition assert defined in sort.c
      uses macro definition NULL defined in sm_implied3.c
      uses function stor_sym_init(struct symbol *) defined in compile-i386.c
      uses variable ea_last defined in compile-i386.c
      uses function emit_object_pre(const char *,unsigned long,unsigned long,unsigned int) defined in compile-i386.c
      uses function show_ident(const struct ident *) defined in token.h
      uses variable symbol::ident defined in struct.c
      uses variable ctype::modifiers defined in struct.c
      uses variable ctype::alignment defined in struct.c
      uses variable symbol::bit_size defined in struct.c
      uses function sort_array(struct expression *) defined in compile-i386.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable expression::expr_list defined in expression.h
      uses enumvalue EXPR_VALUE defined in expression.h
      uses variable ea_current defined in compile-i386.c
      uses function emit_initializer(struct symbol *,struct expression *) defined in compile-i386.c
      uses enumvalue EXPR_POS defined in expression.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function emit_one_symbol(struct symbol *) in line 1085
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function x86_symbol(struct symbol *) defined in compile-i386.c
      uses variable sym defined in smatch_type.c
   function emit_copy(struct storage *,struct storage *,struct symbol *) in line 1090
      protection public
      26 lines of code
      3 parameters
      5 conditional paths
      uses variable storage::reg defined in storage.h
      uses macro definition NULL defined in sm_implied3.c
      uses variable src defined in sm_user_data3.c
      uses enumvalue STOR_ARG defined in compile-i386.c
      uses function temp_from_bits(unsigned int) defined in compile-i386.c
      uses function emit_move(struct storage *,struct storage *,struct symbol *,const char *) defined in compile-i386.c
      uses variable dest defined in sm_user_data2.c
      uses function put_reg(struct storage *) defined in compile-i386.c
   function emit_store(struct expression *,struct storage *,struct storage *,int) in line 1117
      protection public
      6 lines of code
      4 parameters
      1 conditional paths
      uses function printf(char *,...) defined in test-be.c
      uses variable src defined in sm_user_data3.c
      uses variable dest defined in sm_user_data2.c
   function emit_scalar_noinit(struct symbol *) in line 1124
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses function emit_global_noinit(const char *,unsigned long,unsigned long,unsigned int) defined in compile-i386.c
      uses function show_ident(const struct ident *) defined in token.h
      uses variable sym defined in smatch_type.c
      uses variable symbol::ident defined in struct.c
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::modifiers defined in struct.c
      uses variable ctype::alignment defined in struct.c
      uses variable symbol::bit_size defined in struct.c
      uses function stor_sym_init(struct symbol *) defined in compile-i386.c
   function emit_array_noinit(struct symbol *) in line 1132
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses function emit_global_noinit(const char *,unsigned long,unsigned long,unsigned int) defined in compile-i386.c
      uses function show_ident(const struct ident *) defined in token.h
      uses variable sym defined in smatch_type.c
      uses variable symbol::ident defined in struct.c
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::modifiers defined in struct.c
      uses variable ctype::alignment defined in struct.c
      uses function get_expression_value(struct expression *) defined in expand.c
      uses variable symbol::array_size defined in struct.c
      uses variable symbol::bit_size defined in struct.c
      uses function stor_sym_init(struct symbol *) defined in compile-i386.c
   function opbits(const char *,unsigned int) in line 1140
      protection public
      17 lines of code
      2 parameters
      5 conditional paths
      uses variable c defined in sm_array_overflow.c
      uses function sprintf(char *,char *,char *) defined in sm_overflow6.c
      uses function insn(const char *,struct storage *,struct storage *,const char *) defined in compile-i386.c
   function emit_compare(struct expression *) in line 1233
      protection public
      55 lines of code
      1 parameters
      11 conditional paths
      uses function x86_expression(struct expression *) defined in compile-i386.c
      uses variable expression::left defined in expression.h
      uses variable expression::right defined in expression.h
      uses macro definition NULL defined in sm_implied3.c
      uses variable expression::ctype defined in expression.h
      uses variable symbol::bit_size defined in struct.c
      uses variable expression::op defined in expression.h
      uses enumvalue SPECIAL_LTE defined in token.h
      uses enumvalue SPECIAL_GTE defined in token.h
      uses enumvalue SPECIAL_EQUAL defined in token.h
      uses enumvalue SPECIAL_NOTEQUAL defined in token.h
      uses enumvalue SPECIAL_UNSIGNED_LT defined in token.h
      uses enumvalue SPECIAL_UNSIGNED_GT defined in token.h
      uses enumvalue SPECIAL_UNSIGNED_LTE defined in token.h
      uses enumvalue SPECIAL_UNSIGNED_GTE defined in token.h
      uses macro definition assert defined in sort.c
      uses function new_storage(enum storage_type) defined in compile-i386.c
      uses enumvalue STOR_VALUE defined in compile-i386.c
      uses variable storage::flags defined in storage.h
      uses enumvalue STOR_WANTS_FREE defined in compile-i386.c
      uses function get_reg(struct regclass *) defined in compile-i386.c
      uses variable regclass_32_8 defined in compile-i386.c
      uses function emit_move(struct storage *,struct storage *,struct symbol *,const char *) defined in compile-i386.c
      uses function get_reg_value(struct storage *,struct regclass *) defined in compile-i386.c
      uses function get_regclass(struct expression *) defined in compile-i386.c
      uses function insn(const char *,struct storage *,struct storage *,const char *) defined in compile-i386.c
      uses function opbits(const char *,unsigned int) defined in compile-i386.c
      uses function put_reg(struct storage *) defined in compile-i386.c
      uses macro definition byte_reg defined in compile-i386.c
      uses function stack_alloc(int) defined in compile-i386.c
   function emit_value(struct expression *) in line 1289
      protection public
      21 lines of code
      1 parameters
      1 conditional paths
      uses function stack_alloc(int) defined in compile-i386.c
      uses function new_storage(enum storage_type) defined in compile-i386.c
      uses enumvalue STOR_VALUE defined in compile-i386.c
      uses variable storage::value defined in storage.h
      uses variable expression::value defined in expression.h
      uses variable storage::flags defined in storage.h
      uses enumvalue STOR_WANTS_FREE defined in compile-i386.c
      uses function insn(const char *,struct storage *,struct storage *,const char *) defined in compile-i386.c
      uses macro definition NULL defined in sm_implied3.c
   function emit_divide(struct expression *,struct storage *,struct storage *) in line 1311
      protection public
      33 lines of code
      3 parameters
      2 conditional paths
      uses variable storage::reg defined in storage.h
      uses function new_storage(enum storage_type) defined in compile-i386.c
      uses enumvalue STOR_VALUE defined in compile-i386.c
      uses function emit_comment(const char *,...) defined in compile-i386.c
      uses function get_hardreg(struct storage *,int) defined in compile-i386.c
      uses variable hardreg_storage_table defined in compile-i386.c
      uses enumvalue EAX_EDX defined in compile-i386.c
      uses variable storage::flags defined in storage.h
      uses enumvalue STOR_WANTS_FREE defined in compile-i386.c
      uses function emit_move(struct storage *,struct storage *,struct symbol *,const char *) defined in compile-i386.c
      uses macro definition REG_EDX defined in compile-i386.c
      uses macro definition NULL defined in sm_implied3.c
      uses function stack_alloc(int) defined in compile-i386.c
      uses variable expression::ctype defined in expression.h
      uses variable symbol::bit_size defined in struct.c
      uses macro definition REG_EAX defined in compile-i386.c
      uses function get_reg_value(struct storage *,struct regclass *) defined in compile-i386.c
      uses variable regclass_32 defined in compile-i386.c
      uses function insn(const char *,struct storage *,struct storage *,const char *) defined in compile-i386.c
      uses function put_reg(struct storage *) defined in compile-i386.c
      uses variable expression::op defined in expression.h
   function emit_binop(struct expression *) in line 1345
      protection public
      95 lines of code
      1 parameters
      18 conditional paths
      uses function x86_expression(struct expression *) defined in compile-i386.c
      uses variable expression::left defined in expression.h
      uses variable expression::right defined in expression.h
      uses variable dest defined in sm_user_data2.c
      uses variable src defined in sm_user_data3.c
      uses macro definition NULL defined in sm_implied3.c
      uses variable expression::op defined in expression.h
      uses function emit_divide(struct expression *,struct storage *,struct storage *) defined in compile-i386.c
      uses function type_is_signed(struct symbol *) defined in compile-i386.c
      uses variable expression::ctype defined in expression.h
      uses enumvalue SPECIAL_LEFTSHIFT defined in token.h
      uses enumvalue SPECIAL_RIGHTSHIFT defined in token.h
      uses enumvalue SPECIAL_LOGICAL_AND defined in token.h
      uses function warning(struct position,const char *,...) defined in lib.c
      uses variable expression::pos defined in expression.h
      uses enumvalue SPECIAL_LOGICAL_OR defined in token.h
      uses function error_die(struct position,const char *,...) defined in lib.c
      uses function show_special(int) defined in token.h
      uses function get_reg_value(struct storage *,struct regclass *) defined in compile-i386.c
      uses variable regclass_32 defined in compile-i386.c
      uses variable symbol::bit_size defined in struct.c
      uses macro definition assert defined in sort.c
      uses function snprintf(char *,int,char *,char *) defined in sm_overflow6.c
      uses function insn(const char *,struct storage *,struct storage *,const char *) defined in compile-i386.c
      uses function put_reg(struct storage *) defined in compile-i386.c
      uses function stack_alloc(int) defined in compile-i386.c
      uses function emit_move(struct storage *,struct storage *,struct symbol *,const char *) defined in compile-i386.c
   function emit_conditional_test(struct storage *) in line 1441
      protection public
      23 lines of code
      1 parameters
      1 conditional paths
      uses variable storage::reg defined in storage.h
      uses function emit_comment(const char *,...) defined in compile-i386.c
      uses function get_reg_value(struct storage *,struct regclass *) defined in compile-i386.c
      uses variable regclass_32 defined in compile-i386.c
      uses function insn(const char *,struct storage *,struct storage *,const char *) defined in compile-i386.c
      uses macro definition NULL defined in sm_implied3.c
      uses function put_reg(struct storage *) defined in compile-i386.c
      uses function new_label(void) defined in compile-i386.c
      uses function new_storage(enum storage_type) defined in compile-i386.c
      uses enumvalue STOR_LABEL defined in compile-i386.c
      uses variable storage::label defined in storage.h
      uses variable storage::flags defined in storage.h
      uses enumvalue STOR_WANTS_FREE defined in compile-i386.c
   function emit_conditional_end(int) in line 1465
      protection public
      22 lines of code
      1 parameters
      1 conditional paths
      uses function new_label(void) defined in compile-i386.c
      uses function new_storage(enum storage_type) defined in compile-i386.c
      uses enumvalue STOR_LABEL defined in compile-i386.c
      uses variable storage::label defined in storage.h
      uses variable storage::flags defined in storage.h
      uses enumvalue STOR_WANTS_FREE defined in compile-i386.c
      uses function insn(const char *,struct storage *,struct storage *,const char *) defined in compile-i386.c
      uses macro definition NULL defined in sm_implied3.c
      uses function emit_label(int,const char *) defined in compile-i386.c
   function emit_if_conditional(struct statement *) in line 1488
      protection public
      21 lines of code
      1 parameters
      2 conditional paths
      uses function x86_expression(struct expression *) defined in compile-i386.c
      uses variable statement::if_conditional defined in parse.h
      uses function emit_conditional_test(struct storage *) defined in compile-i386.c
      uses function x86_statement(struct statement *) defined in compile-i386.c
      uses variable statement::if_true defined in parse.h
      uses variable statement::if_false defined in parse.h
      uses function emit_conditional_end(int) defined in compile-i386.c
      uses function emit_label(int,const char *) defined in compile-i386.c
   function emit_inc_dec(struct expression *,int) in line 1510
      protection public
      22 lines of code
      2 parameters
      2 conditional paths
      uses function x86_address_gen(struct expression *) defined in compile-i386.c
      uses variable expression::unop defined in expression.h
      uses function strcpy(char *,char *,int) defined in sm_overflow3.c
      uses function opbits(const char *,unsigned int) defined in compile-i386.c
      uses variable expression::op defined in expression.h
      uses enumvalue SPECIAL_INCREMENT defined in token.h
      uses variable expression::ctype defined in expression.h
      uses variable symbol::bit_size defined in struct.c
      uses function stack_alloc(int) defined in compile-i386.c
      uses function emit_copy(struct storage *,struct storage *,struct symbol *) defined in compile-i386.c
      uses function insn(const char *,struct storage *,struct storage *,const char *) defined in compile-i386.c
      uses macro definition NULL defined in sm_implied3.c
   function emit_postop(struct expression *) in line 1533
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function emit_inc_dec(struct expression *,int) defined in compile-i386.c
   function emit_return_stmt(struct statement *) in line 1538
      protection public
      19 lines of code
      1 parameters
      2 conditional paths
      uses variable current_func defined in compile-i386.c
      uses variable statement::ret_value defined in parse.h
      uses macro definition NULL defined in sm_implied3.c
      uses variable expression::ctype defined in expression.h
      uses function x86_expression(struct expression *) defined in compile-i386.c
      uses macro definition assert defined in sort.c
      uses function emit_move(struct storage *,struct storage *,struct symbol *,const char *) defined in compile-i386.c
      uses macro definition REG_EAX defined in compile-i386.c
      uses function new_storage(enum storage_type) defined in compile-i386.c
      uses enumvalue STOR_LABEL defined in compile-i386.c
      uses enumvalue STOR_WANTS_FREE defined in compile-i386.c
      uses function insn(const char *,struct storage *,struct storage *,const char *) defined in compile-i386.c
   function emit_conditional_expr(struct expression *) in line 1558
      protection public
      27 lines of code
      1 parameters
      1 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses function stack_alloc(int) defined in compile-i386.c
      uses variable expression::ctype defined in expression.h
      uses variable symbol::bit_size defined in struct.c
      uses function x86_expression(struct expression *) defined in compile-i386.c
      uses variable expression::conditional defined in expression.h
      uses function emit_conditional_test(struct storage *) defined in compile-i386.c
      uses variable expression::cond_true defined in expression.h
      uses function emit_copy(struct storage *,struct storage *,struct symbol *) defined in compile-i386.c
      uses function emit_conditional_end(int) defined in compile-i386.c
      uses variable expression::cond_false defined in expression.h
      uses function emit_label(int,const char *) defined in compile-i386.c
   function emit_select_expr(struct expression *) in line 1586
      protection public
      28 lines of code
      1 parameters
      1 conditional paths
      uses function x86_expression(struct expression *) defined in compile-i386.c
      uses variable expression::conditional defined in expression.h
      uses variable expression::cond_true defined in expression.h
      uses variable expression::cond_false defined in expression.h
      uses function stack_alloc(int) defined in compile-i386.c
      uses function emit_comment(const char *,...) defined in compile-i386.c
      uses function get_reg_value(struct storage *,struct regclass *) defined in compile-i386.c
      uses function get_regclass(struct expression *) defined in compile-i386.c
      uses function insn(const char *,struct storage *,struct storage *,const char *) defined in compile-i386.c
      uses macro definition NULL defined in sm_implied3.c
      uses function emit_move(struct storage *,struct storage *,struct symbol *,const char *) defined in compile-i386.c
      uses variable expression::ctype defined in expression.h
      uses function put_reg(struct storage *) defined in compile-i386.c
   function emit_symbol_expr_init(struct symbol *) in line 1615
      protection public
      22 lines of code
      1 parameters
      3 conditional paths
      uses variable sym defined in smatch_type.c
      uses variable symbol::initializer defined in struct.c
      uses variable symbol::aux defined in struct.c
      uses macro definition NULL defined in sm_implied3.c
      uses function stack_alloc(int) defined in compile-i386.c
      uses function show_ident(const struct ident *) defined in token.h
      uses variable symbol::ident defined in struct.c
      uses variable symbol_private::addr defined in compile-i386.c
      uses function x86_expression(struct expression *) defined in compile-i386.c
   function emit_string_expr(struct expression *) in line 1638
      protection public
      13 lines of code
      1 parameters
      1 conditional paths
      uses variable current_func defined in compile-i386.c
      uses function new_label(void) defined in compile-i386.c
      uses function push_cstring(struct function *,struct string *,int) defined in compile-i386.c
      uses variable expression::string defined in expression.h
      uses variable storage::label defined in storage.h
      uses function new_storage(enum storage_type) defined in compile-i386.c
      uses enumvalue STOR_LABEL defined in compile-i386.c
      uses enumvalue STOR_LABEL_VAL defined in compile-i386.c
      uses enumvalue STOR_WANTS_FREE defined in compile-i386.c
   function emit_cast_expr(struct expression *) in line 1652
      protection public
      22 lines of code
      1 parameters
      2 conditional paths
      uses function op(void) defined in loop2.c
      uses function x86_expression(struct expression *) defined in compile-i386.c
      uses variable expression::cast_expression defined in expression.h
      uses variable expression::ctype defined in expression.h
      uses variable expression::cast_type defined in expression.h
      uses variable symbol::bit_size defined in struct.c
      uses function emit_move(struct storage *,struct storage *,struct symbol *,const char *) defined in compile-i386.c
      uses macro definition REG_EAX defined in compile-i386.c
      uses function stack_alloc(int) defined in compile-i386.c
   function emit_regular_preop(struct expression *) in line 1675
      protection public
      33 lines of code
      1 parameters
      5 conditional paths
      uses function x86_expression(struct expression *) defined in compile-i386.c
      uses variable expression::unop defined in expression.h
      uses function stack_alloc(int) defined in compile-i386.c
      uses macro definition NULL defined in sm_implied3.c
      uses variable expression::op defined in expression.h
      uses function new_storage(enum storage_type) defined in compile-i386.c
      uses enumvalue STOR_VALUE defined in compile-i386.c
      uses variable storage::flags defined in storage.h
      uses enumvalue STOR_WANTS_FREE defined in compile-i386.c
      uses function emit_move(struct storage *,struct storage *,struct symbol *,const char *) defined in compile-i386.c
      uses macro definition REG_EDX defined in compile-i386.c
      uses macro definition REG_EAX defined in compile-i386.c
      uses variable expression::ctype defined in expression.h
      uses function insn(const char *,struct storage *,struct storage *,const char *) defined in compile-i386.c
      uses macro definition REG_DL defined in compile-i386.c
      uses macro definition assert defined in sort.c
   function emit_case_statement(struct statement *) in line 1709
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function emit_labelsym(struct symbol *,const char *) defined in compile-i386.c
      uses variable statement::case_label defined in parse.h
      uses macro definition NULL defined in sm_implied3.c
      uses function x86_statement(struct statement *) defined in compile-i386.c
      uses variable statement::case_statement defined in parse.h
   function emit_switch_statement(struct statement *) in line 1715
      protection public
      81 lines of code
      1 parameters
      6 conditional paths
      uses function x86_expression(struct expression *) defined in compile-i386.c
      uses variable statement::switch_expression defined in parse.h
      uses variable sym defined in smatch_type.c
      uses macro definition NULL defined in sm_implied3.c
      uses variable storage::labelsym defined in storage.h
      uses variable storage::label defined in storage.h
      uses function emit_move(struct storage *,struct storage *,struct symbol *,const char *) defined in compile-i386.c
      uses macro definition REG_EAX defined in compile-i386.c
      uses variable expression::ctype defined in expression.h
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable statement::switch_case defined in parse.h
      uses variable symbol::symbol_list defined in struct.c
      uses variable symbol::stmt defined in struct.c
      uses variable statement::case_expression defined in parse.h
      uses variable statement::case_to defined in parse.h
      uses function new_val(long long) defined in compile-i386.c
      uses variable expression::value defined in expression.h
      uses macro definition assert defined in sort.c
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_VALUE defined in expression.h
      uses function insn(const char *,struct storage *,struct storage *,const char *) defined in compile-i386.c
      uses function new_labelsym(struct symbol *) defined in compile-i386.c
      uses function new_storage(enum storage_type) defined in compile-i386.c
      uses enumvalue STOR_LABEL defined in compile-i386.c
      uses enumvalue STOR_WANTS_FREE defined in compile-i386.c
      uses function new_label(void) defined in compile-i386.c
      uses function emit_label(int,const char *) defined in compile-i386.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses function x86_statement(struct statement *) defined in compile-i386.c
      uses variable statement::switch_statement defined in parse.h
      uses variable statement::switch_break defined in parse.h
      uses variable symbol::used defined in struct.c
      uses function emit_labelsym(struct symbol *,const char *) defined in compile-i386.c
   function x86_struct_member(struct symbol *) in line 1797
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function printf(char *,...) defined in test-be.c
      uses function show_ident(const struct ident *) defined in token.h
      uses variable sym defined in smatch_type.c
      uses variable symbol::ident defined in struct.c
      uses variable symbol::bit_size defined in struct.c
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::alignment defined in struct.c
      uses variable symbol::offset defined in struct.c
      uses variable symbol::bit_offset defined in struct.c
   function x86_symbol_init(struct symbol *) in line 1871
      protection public
      20 lines of code
      1 parameters
      3 conditional paths
      uses variable sym defined in smatch_type.c
      uses variable symbol::aux defined in struct.c
      uses variable symbol::initializer defined in struct.c
      uses function x86_expression(struct expression *) defined in compile-i386.c
      uses function stack_alloc(int) defined in compile-i386.c
      uses variable symbol::bit_size defined in struct.c
      uses variable symbol_private::addr defined in compile-i386.c
   function x86_symbol_decl(struct symbol_list *) in line 1873
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses variable sym defined in smatch_type.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses function x86_symbol_init(struct symbol *) defined in compile-i386.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function loopstk_push(int,int) in line 1881
      protection public
      11 lines of code
      2 parameters
      1 conditional paths
      uses variable current_func defined in compile-i386.c
      uses function malloc(int) defined in sm_buf_size2.c
      uses variable loop_stack::continue_lbl defined in compile-i386.c
      uses variable loop_stack::loop_bottom_lbl defined in compile-i386.c
      uses variable loop_stack::next defined in compile-i386.c
   function loopstk_pop(void) in line 1893
      protection public
      10 lines of code
      1 parameters
      1 conditional paths
      uses variable current_func defined in compile-i386.c
      uses macro definition assert defined in sort.c
      uses macro definition NULL defined in sm_implied3.c
   function loopstk_break(void) in line 1904
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable current_func defined in compile-i386.c
      uses variable function::loop_stack defined in sparse-llvm.c
      uses variable loop_stack::loop_bottom_lbl defined in compile-i386.c
   function loopstk_continue(void) in line 1909
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable current_func defined in compile-i386.c
      uses variable function::loop_stack defined in sparse-llvm.c
      uses variable loop_stack::continue_lbl defined in compile-i386.c
   function emit_loop(struct statement *) in line 1914
      protection public
      76 lines of code
      1 parameters
      10 conditional paths
      uses variable statement::iterator_pre_statement defined in parse.h
      uses variable statement::iterator_pre_condition defined in parse.h
      uses variable statement::iterator_statement defined in parse.h
      uses variable statement::iterator_post_statement defined in parse.h
      uses variable statement::iterator_post_condition defined in parse.h
      uses function new_label(void) defined in compile-i386.c
      uses function loopstk_push(int,int) defined in compile-i386.c
      uses function x86_symbol_decl(struct symbol_list *) defined in compile-i386.c
      uses variable statement::iterator_syms defined in parse.h
      uses function x86_statement(struct statement *) defined in compile-i386.c
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_VALUE defined in expression.h
      uses variable expression::value defined in expression.h
      uses function emit_label(int,const char *) defined in compile-i386.c
      uses function new_storage(enum storage_type) defined in compile-i386.c
      uses enumvalue STOR_LABEL defined in compile-i386.c
      uses variable storage::label defined in storage.h
      uses variable storage::flags defined in storage.h
      uses enumvalue STOR_WANTS_FREE defined in compile-i386.c
      uses function insn(const char *,struct storage *,struct storage *,const char *) defined in compile-i386.c
      uses macro definition NULL defined in sm_implied3.c
      uses function x86_expression(struct expression *) defined in compile-i386.c
      uses function emit_move(struct storage *,struct storage *,struct symbol *,const char *) defined in compile-i386.c
      uses macro definition REG_EAX defined in compile-i386.c
      uses variable statement::iterator_continue defined in parse.h
      uses variable symbol::used defined in struct.c
      uses variable statement::iterator_break defined in parse.h
      uses function loopstk_pop(void) defined in compile-i386.c
   function x86_call_expression(struct expression *) in line 2068
      protection public
      71 lines of code
      1 parameters
      8 conditional paths
      uses variable current_func defined in compile-i386.c
      uses variable expression::ctype defined in expression.h
      uses function warning(struct position,const char *,...) defined in lib.c
      uses variable expression::pos defined in expression.h
      uses macro definition NULL defined in sm_implied3.c
      uses macro definition FOR_EACH_PTR_REVERSE defined in ptrlist.h
      uses variable expression::args defined in expression.h
      uses function x86_expression(struct expression *) defined in compile-i386.c
      uses variable storage::size defined in storage.h
      uses function insn(const char *,struct storage *,struct storage *,const char *) defined in compile-i386.c
      uses macro definition END_FOR_EACH_PTR_REVERSE defined in ptrlist.h
      uses variable expression::fn defined in expression.h
      uses enumvalue EXPR_PREOP defined in expression.h
      uses enumvalue EXPR_SYMBOL defined in expression.h
      uses variable sym defined in smatch_type.c
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::base_type defined in struct.c
      uses variable symbol::type defined in struct.c
      uses enumvalue SYM_FN defined in symbol.h
      uses function new_storage(enum storage_type) defined in compile-i386.c
      uses enumvalue STOR_SYM defined in compile-i386.c
      uses variable storage::flags defined in storage.h
      uses enumvalue STOR_WANTS_FREE defined in compile-i386.c
      uses variable storage::sym defined in storage.h
      uses function emit_move(struct storage *,struct storage *,struct symbol *,const char *) defined in compile-i386.c
      uses macro definition REG_EAX defined in compile-i386.c
      uses function strcpy(char *,char *,int) defined in sm_overflow3.c
      uses function push_text_atom(struct function *,const char *) defined in compile-i386.c
      uses enumvalue STOR_VALUE defined in compile-i386.c
      uses variable storage::value defined in storage.h
      uses macro definition REG_ESP defined in compile-i386.c
      uses function stack_alloc(int) defined in compile-i386.c
   function x86_assignment(struct expression *) in line 2163
      protection public
      32 lines of code
      1 parameters
      9 conditional paths
      uses variable expression::left defined in expression.h
      uses variable expression::ctype defined in expression.h
      uses macro definition NULL defined in sm_implied3.c
      uses function x86_expression(struct expression *) defined in compile-i386.c
      uses variable expression::right defined in expression.h
      uses function x86_address_gen(struct expression *) defined in compile-i386.c
      uses variable storage::type defined in storage.h
      uses enumvalue STOR_PSEUDO defined in compile-i386.c
      uses enumvalue STOR_ARG defined in compile-i386.c
      uses function emit_copy(struct storage *,struct storage *,struct symbol *) defined in compile-i386.c
      uses enumvalue STOR_REG defined in compile-i386.c
      uses enumvalue STOR_SYM defined in compile-i386.c
      uses enumvalue STOR_VALUE defined in compile-i386.c
      uses enumvalue STOR_LABEL defined in compile-i386.c
      uses function emit_move(struct storage *,struct storage *,struct symbol *,const char *) defined in compile-i386.c
      uses enumvalue STOR_LABELSYM defined in compile-i386.c
      uses macro definition assert defined in sort.c
   function x86_initialization(struct symbol *,struct expression *) in line 2196
      protection public
      16 lines of code
      2 parameters
      2 conditional paths
      uses variable expression::ctype defined in expression.h
      uses variable symbol::bit_size defined in struct.c
      uses function x86_expression(struct expression *) defined in compile-i386.c
      uses function x86_symbol_expr(struct symbol *) defined in compile-i386.c
      uses variable sym defined in smatch_type.c
      uses function emit_store(struct expression *,struct storage *,struct storage *,int) defined in compile-i386.c
      uses macro definition NULL defined in sm_implied3.c
   function x86_access(struct expression *) in line 2213
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function x86_address_gen(struct expression *) defined in compile-i386.c
   function x86_preop(struct expression *) in line 2218
      protection public
      13 lines of code
      1 parameters
      3 conditional paths
      uses variable expression::op defined in expression.h
      uses function x86_access(struct expression *) defined in compile-i386.c
      uses enumvalue SPECIAL_INCREMENT defined in token.h
      uses enumvalue SPECIAL_DECREMENT defined in token.h
      uses function emit_inc_dec(struct expression *,int) defined in compile-i386.c
      uses function emit_regular_preop(struct expression *) defined in compile-i386.c
   function x86_label_expr(struct expression *) in line 2278
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses function stack_alloc(int) defined in compile-i386.c
      uses function printf(char *,...) defined in test-be.c
      uses variable bits_in_pointer defined in target.c
      uses variable expression::label_symbol defined in expression.h
   function x86_statement_expr(struct expression *) in line 2285
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function x86_statement(struct statement *) defined in compile-i386.c
      uses variable expression::statement defined in expression.h
   function x86_position_expr(struct expression *,struct symbol *) in line 2290
      protection public
      10 lines of code
      2 parameters
      1 conditional paths
      uses function x86_expression(struct expression *) defined in compile-i386.c
      uses variable expression::init_expr defined in expression.h
      uses variable expression::ctype defined in expression.h
      uses function printf(char *,...) defined in test-be.c
      uses variable expression::init_offset defined in expression.h
      uses function show_ident(const struct ident *) defined in token.h
      uses variable symbol::ident defined in struct.c
   function x86_initializer_expr(struct expression *,struct symbol *) in line 2301
      protection public
      23 lines of code
      2 parameters
      4 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable expression::expr_list defined in expression.h
      uses enumvalue EXPR_INITIALIZER defined in expression.h
      uses enumvalue EXPR_IDENTIFIER defined in expression.h
      uses enumvalue EXPR_INDEX defined in expression.h
      uses enumvalue EXPR_POS defined in expression.h
      uses function x86_position_expr(struct expression *,struct symbol *) defined in compile-i386.c
      uses function x86_initialization(struct symbol *,struct expression *) defined in compile-i386.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   variable textbuf::len in line 62
      protection public
   variable textbuf::next in line 64
      protection public
   variable textbuf::prev in line 65
      protection public
   variable textbuf::text in line 63
      protection public
   variable loop_stack::continue_lbl in line 69
      protection public
   variable loop_stack::loop_bottom_lbl in line 70
      protection public
   variable loop_stack::next in line 71
      protection public
   variable function::argc in line 88
      protection public
   variable function::argv in line 87
      protection public
   variable function::atom_list in line 84
      protection public
   variable function::builder in line 23
      protection public
   variable function::fn in line 25
      protection public
   variable function::loop_stack in line 86
      protection public
   variable function::module in line 26
      protection public
   variable function::pseudo_list in line 83
      protection public
   variable function::pseudo_nr in line 82
      protection public
   variable function::ret_target in line 89
      protection public
   variable function::stack_size in line 81
      protection public
   variable function::str_list in line 85
      protection public
   variable function::type in line 24
      protection public
   variable reg_info::aliases in line 105
      protection public
   variable reg_info::contains in line 104
      protection public
   variable reg_info::name in line 103
      protection public
   variable storage::@144 in line 39
      protection public
   variable storage::@5 in line 144
      protection public
   variable storage::ctype in line 115
      protection public
   variable storage::flags in line 111
      protection public
   variable storage::idx in line 126
      protection public
   variable storage::label in line 138
      protection public
   variable storage::labelsym in line 142
      protection public
   variable storage::name in line 33
      protection public
   variable storage::offset in line 121
      protection public
   variable storage::pseudo in line 120
      protection public
   variable storage::reg in line 114
      protection public
   variable storage::regno in line 36
      protection public
   variable storage::size in line 122
      protection public
   variable storage::sym in line 130
      protection public
   variable storage::type in line 105
      protection public
   variable storage::users in line 34
      protection public
   variable storage::value in line 134
      protection public
   variable storage::@4::@11 in line 131
      protection public
   variable storage::@4::@13 in line 135
      protection public
   variable storage::@4::@15 in line 139
      protection public
   variable storage::@4::@17 in line 143
      protection public
   variable storage::@4::@7 in line 123
      protection public
   variable storage::@4::@9 in line 127
      protection public
   variable storage::@4::@6::offset in line 121
      protection public
   variable storage::@4::@6::pseudo in line 120
      protection public
   variable storage::@4::@6::size in line 122
      protection public
   variable storage::@4::@8::idx in line 126
      protection public
   variable storage::@4::@10::sym in line 130
      protection public
   variable storage::@4::@12::value in line 134
      protection public
   variable storage::@4::@14::label in line 138
      protection public
   variable storage::@4::@16::labelsym in line 142
      protection public
   variable symbol_private::addr in line 153
      protection public
   variable atom::@19 in line 184
      protection public
   variable atom::comment in line 174
      protection public
   variable atom::insn in line 173
      protection public
   variable atom::label in line 182
      protection public
   variable atom::op1 in line 175
      protection public
   variable atom::op2 in line 176
      protection public
   variable atom::string in line 181
      protection public
   variable atom::text in line 167
      protection public
   variable atom::text_len in line 168
      protection public
   variable atom::type in line 153
      protection public
   variable atom::@18::@21 in line 169
      protection public
   variable atom::@18::@23 in line 177
      protection public
   variable atom::@18::@25 in line 183
      protection public
   variable atom::@18::@20::text in line 167
      protection public
   variable atom::@18::@20::text_len in line 168
      protection public
   variable atom::@18::@22::comment in line 174
      protection public
   variable atom::@18::@22::insn in line 173
      protection public
   variable atom::@18::@22::op1 in line 175
      protection public
   variable atom::@18::@22::op2 in line 176
      protection public
   variable atom::@18::@24::label in line 182
      protection public
   variable atom::@18::@24::string in line 181
      protection public
   variable regclass::name in line 308
      protection public
   variable regclass::regs in line 309
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/compile.c
module compile.c
   function clean_up_symbols(struct symbol_list *) in line 44
      protection public
      9 lines of code
      1 parameters
      1 conditional paths
      uses variable sym defined in smatch_type.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses function expand_symbol(struct symbol *) defined in expand.c
      uses function emit_one_symbol(struct symbol *) defined in compile-i386.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function main(int,char **) in line 54
      protection public
      31 lines of code
      2 parameters
      1 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses function clean_up_symbols(struct symbol_list *) defined in compile.c
      uses function sparse_initialize(int,char **,struct string_list **) defined in lib.c
      uses macro definition FOR_EACH_PTR_NOTAG defined in ptrlist.h
      uses function sparse(char *) defined in lib.c
      uses function emit_unit_begin(const char *) defined in compile-i386.c
      uses function emit_unit_end(void) defined in compile-i386.c
      uses macro definition END_FOR_EACH_PTR_NOTAG defined in ptrlist.h
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/compile.h
module compile.h
   function emit_one_symbol(struct symbol *) in line 6
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable sym defined in smatch_type.c
   function emit_unit_begin(const char *) in line 7
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function printf(char *,...) defined in test-be.c
   function emit_unit_end(void) in line 8
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function printf(char *,...) defined in test-be.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/cse.c
module cse.c
   macro definition INSN_HASH_SIZE in line 20
      protection public
   variable insn_hash_table in line 21
      protection public
   variable repeat_phase in line 23
      protection public
   function phi_compare(pseudo_t,pseudo_t) in line 25
      protection public
      11 lines of code
      2 parameters
      3 conditional paths
      uses variable pseudo::def defined in linearize.h
      uses variable instruction::src1 defined in linearize.h
      uses variable instruction::bb defined in linearize.h
   function clean_up_one_instruction(struct basic_block *,struct instruction *) in line 38
      protection public
      87 lines of code
      2 parameters
      38 conditional paths
      uses function hash(struct hashtable *,void *) defined in hashtable.c
      uses macro definition assert defined in sort.c
      uses variable instruction::bb defined in linearize.h
      uses variable repeat_phase defined in cse.c
      uses function simplify_instruction(struct instruction *) defined in flow.h
      uses enumvalue OP_SEL defined in linearize.h
      uses macro definition hashval defined in lib.h
      uses enumvalue OP_ADD defined in linearize.h
      uses enumvalue OP_SUB defined in linearize.h
      uses enumvalue OP_MULU defined in linearize.h
      uses enumvalue OP_MULS defined in linearize.h
      uses enumvalue OP_DIVU defined in linearize.h
      uses enumvalue OP_DIVS defined in linearize.h
      uses enumvalue OP_MODU defined in linearize.h
      uses enumvalue OP_MODS defined in linearize.h
      uses enumvalue OP_SHL defined in linearize.h
      uses enumvalue OP_LSR defined in linearize.h
      uses enumvalue OP_ASR defined in linearize.h
      uses enumvalue OP_AND defined in linearize.h
      uses enumvalue OP_OR defined in linearize.h
      uses enumvalue OP_XOR defined in linearize.h
      uses enumvalue OP_AND_BOOL defined in linearize.h
      uses enumvalue OP_OR_BOOL defined in linearize.h
      uses enumvalue OP_SET_EQ defined in linearize.h
      uses enumvalue OP_SET_NE defined in linearize.h
      uses enumvalue OP_SET_LE defined in linearize.h
      uses enumvalue OP_SET_GE defined in linearize.h
      uses enumvalue OP_SET_LT defined in linearize.h
      uses enumvalue OP_SET_GT defined in linearize.h
      uses enumvalue OP_SET_B defined in linearize.h
      uses enumvalue OP_SET_A defined in linearize.h
      uses enumvalue OP_SET_BE defined in linearize.h
      uses enumvalue OP_SET_AE defined in linearize.h
      uses enumvalue OP_NOT defined in linearize.h
      uses enumvalue OP_NEG defined in linearize.h
      uses enumvalue OP_SETVAL defined in linearize.h
      uses enumvalue OP_SYMADDR defined in linearize.h
      uses enumvalue OP_CAST defined in linearize.h
      uses enumvalue OP_SCAST defined in linearize.h
      uses enumvalue OP_PTRCAST defined in linearize.h
      uses enumvalue OP_PHI defined in linearize.h
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses macro definition VOID defined in linearize.h
      uses variable pseudo::def defined in linearize.h
      uses variable instruction::src1 defined in linearize.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses macro definition INSN_HASH_SIZE defined in cse.c
      uses variable insn_hash_table defined in cse.c
   function clean_up_insns(struct entrypoint *) in line 126
      protection public
      11 lines of code
      1 parameters
      1 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable basic_block::ep defined in linearize.h
      uses variable entrypoint::bbs defined in linearize.h
      uses variable instruction::bb defined in linearize.h
      uses variable basic_block::insns defined in linearize.h
      uses function clean_up_one_instruction(struct basic_block *,struct instruction *) defined in cse.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function phi_list_compare(struct pseudo_list *,struct pseudo_list *) in line 139
      protection public
      28 lines of code
      2 parameters
      7 conditional paths
      uses macro definition PREPARE_PTR_LIST defined in ptrlist.h
      uses macro definition VOID defined in linearize.h
      uses variable pseudo::def defined in linearize.h
      uses macro definition NEXT_PTR_LIST defined in ptrlist.h
      uses function phi_compare(pseudo_t,pseudo_t) defined in cse.c
      uses macro definition FINISH_PTR_LIST defined in ptrlist.h
   function insn_compare(const void *,const void *) in line 168
      protection public
      76 lines of code
      2 parameters
      45 conditional paths
      uses variable instruction::opcode defined in linearize.h
      uses enumvalue OP_SEL defined in linearize.h
      uses variable instruction::src3 defined in linearize.h
      uses enumvalue OP_ADD defined in linearize.h
      uses enumvalue OP_SUB defined in linearize.h
      uses enumvalue OP_MULU defined in linearize.h
      uses enumvalue OP_MULS defined in linearize.h
      uses enumvalue OP_DIVU defined in linearize.h
      uses enumvalue OP_DIVS defined in linearize.h
      uses enumvalue OP_MODU defined in linearize.h
      uses enumvalue OP_MODS defined in linearize.h
      uses enumvalue OP_SHL defined in linearize.h
      uses enumvalue OP_LSR defined in linearize.h
      uses enumvalue OP_ASR defined in linearize.h
      uses enumvalue OP_AND defined in linearize.h
      uses enumvalue OP_OR defined in linearize.h
      uses enumvalue OP_XOR defined in linearize.h
      uses enumvalue OP_AND_BOOL defined in linearize.h
      uses enumvalue OP_OR_BOOL defined in linearize.h
      uses enumvalue OP_SET_EQ defined in linearize.h
      uses enumvalue OP_SET_NE defined in linearize.h
      uses enumvalue OP_SET_LE defined in linearize.h
      uses enumvalue OP_SET_GE defined in linearize.h
      uses enumvalue OP_SET_LT defined in linearize.h
      uses enumvalue OP_SET_GT defined in linearize.h
      uses enumvalue OP_SET_B defined in linearize.h
      uses enumvalue OP_SET_A defined in linearize.h
      uses enumvalue OP_SET_BE defined in linearize.h
      uses enumvalue OP_SET_AE defined in linearize.h
      uses variable instruction::src2 defined in linearize.h
      uses enumvalue OP_NOT defined in linearize.h
      uses enumvalue OP_NEG defined in linearize.h
      uses variable instruction::src1 defined in linearize.h
      uses enumvalue OP_SYMADDR defined in linearize.h
      uses variable instruction::symbol defined in linearize.h
      uses enumvalue OP_SETVAL defined in linearize.h
      uses variable instruction::val defined in linearize.h
      uses enumvalue OP_PHI defined in linearize.h
      uses function phi_list_compare(struct pseudo_list *,struct pseudo_list *) defined in cse.c
      uses variable instruction::phi_list defined in linearize.h
      uses enumvalue OP_CAST defined in linearize.h
      uses enumvalue OP_SCAST defined in linearize.h
      uses enumvalue OP_PTRCAST defined in linearize.h
      uses variable instruction::orig_type defined in linearize.h
      uses variable instruction::src defined in linearize.h
      uses function warning(struct position,const char *,...) defined in lib.c
      uses variable instruction::pos defined in linearize.h
      uses variable instruction::size defined in linearize.h
   function sort_instruction_list(struct instruction_list **) in line 245
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function sort_list(struct ptr_list **,int(*)(const void *, const void *)) defined in ptrlist.h
      uses function insn_compare(const void *,const void *) defined in cse.c
   function cse_one_instruction(struct instruction *,struct instruction *) in line 250
      protection public
      21 lines of code
      2 parameters
      3 conditional paths
      uses function convert_instruction_target(struct instruction *,pseudo_t) defined in flow.c
      uses variable instruction::target defined in linearize.h
      uses enumvalue OP_PHI defined in linearize.h
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable pseudo::users defined in linearize.h
      uses variable pseudo_user::insn defined in linearize.h
      uses macro definition DELETE_CURRENT_PTR defined in ptrlist.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses enumvalue OP_NOP defined in linearize.h
      uses macro definition NULL defined in sm_implied3.c
      uses variable repeat_phase defined in cse.c
      uses macro definition REPEAT_CSE defined in flow.h
   function bb_dominates(struct entrypoint *,struct basic_block *,struct basic_block *,unsigned long) in line 275
      protection public
      18 lines of code
      4 parameters
      5 conditional paths
      uses variable basic_block::ep defined in linearize.h
      uses variable entrypoint::entry defined in linearize.h
      uses variable instruction::bb defined in linearize.h
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable basic_block::parents defined in linearize.h
      uses variable basic_block::generation defined in linearize.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function trivial_common_parent(struct basic_block *,struct basic_block *) in line 294
      protection public
      13 lines of code
      2 parameters
      4 conditional paths
      uses variable basic_block::parents defined in linearize.h
      uses macro definition NULL defined in sm_implied3.c
   function remove_instruction(struct instruction_list **,struct instruction *,int) in line 308
      protection public
      4 lines of code
      3 parameters
      1 conditional paths
      uses function delete_ptr_list_entry(struct ptr_list **,void *,int) defined in ptrlist.c
   function add_instruction_to_end(struct instruction *,struct basic_block *) in line 313
      protection public
      7 lines of code
      2 parameters
      1 conditional paths
      uses variable instruction::bb defined in linearize.h
      uses variable basic_block::insns defined in linearize.h
   function try_to_cse(struct entrypoint *,struct instruction *,struct instruction *) in line 321
      protection public
      42 lines of code
      3 parameters
      7 conditional paths
      uses variable instruction::bb defined in linearize.h
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable basic_block::insns defined in linearize.h
      uses function cse_one_instruction(struct instruction *,struct instruction *) defined in cse.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses function warning(struct position,const char *,...) defined in lib.c
      uses variable basic_block::pos defined in linearize.h
      uses function bb_dominates(struct entrypoint *,struct basic_block *,struct basic_block *,unsigned long) defined in cse.c
      uses variable bb_generation defined in flow.c
      uses function trivial_common_parent(struct basic_block *,struct basic_block *) defined in cse.c
      uses function remove_instruction(struct instruction_list **,struct instruction *,int) defined in cse.c
      uses function add_instruction_to_end(struct instruction *,struct basic_block *) defined in cse.c
   function cleanup_and_cse(struct entrypoint *) in line 364
      protection public
      37 lines of code
      1 parameters
      1 conditional paths
      uses function simplify_memops(struct entrypoint *) defined in flow.h
      uses variable repeat_phase defined in cse.c
      uses function clean_up_insns(struct entrypoint *) defined in cse.c
      uses macro definition INSN_HASH_SIZE defined in cse.c
      uses variable insn_hash_table defined in cse.c
      uses function sort_instruction_list(struct instruction_list **) defined in cse.c
      uses macro definition NULL defined in sm_implied3.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses function insn_compare(const void *,const void *) defined in cse.c
      uses function try_to_cse(struct entrypoint *,struct instruction *,struct instruction *) defined in cse.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses macro definition free_ptr_list defined in ptrlist.h
      uses macro definition REPEAT_SYMBOL_CLEANUP defined in flow.h
      uses macro definition REPEAT_CSE defined in flow.h
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/ctags.c
module ctags.c
   macro definition MAX in line 39
      protection public
   variable taglist in line 35
      protection public
   function examine_symbol(struct symbol *) in line 37
      protection public
      48 lines of code
      1 parameters
      16 conditional paths
      uses variable sym defined in smatch_type.c
      uses variable symbol::visited defined in struct.c
      uses variable symbol::ident defined in struct.c
      uses variable ident::reserved defined in token.h
      uses variable symbol::type defined in struct.c
      uses enumvalue SYM_KEYWORD defined in symbol.h
      uses enumvalue SYM_PREPROCESSOR defined in symbol.h
      uses function add_tag(struct symbol *) defined in ctags.c
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::base_type defined in struct.c
      uses enumvalue SYM_NODE defined in symbol.h
      uses enumvalue SYM_FN defined in symbol.h
      uses variable symbol::kind defined in struct.c
      uses enumvalue SYM_STRUCT defined in symbol.h
      uses function examine_members(struct symbol_list *) defined in ctags.c
      uses variable symbol::symbol_list defined in struct.c
      uses enumvalue SYM_UNION defined in symbol.h
      uses enumvalue SYM_ENUM defined in symbol.h
      uses enumvalue SYM_PTR defined in symbol.h
      uses enumvalue SYM_TYPEOF defined in symbol.h
      uses enumvalue SYM_BITFIELD defined in symbol.h
      uses enumvalue SYM_ARRAY defined in symbol.h
      uses enumvalue SYM_BASETYPE defined in symbol.h
      uses function die(const char *,...) defined in lib.c
      uses function show_ident(const struct ident *) defined in token.h
      uses variable symbol::namespace defined in struct.c
   function cmp_sym(const void *,const void *) in line 41
      protection public
      16 lines of code
      2 parameters
      3 conditional paths
      uses macro definition MAX defined in ctags.c
      uses variable position::pos defined in lib.h
      uses function stream_name(int) defined in token.h
      uses variable position::stream defined in lib.h
      uses variable position::line defined in lib.h
   function show_tag_header(FILE *) in line 58
      protection public
      9 lines of code
      1 parameters
      1 conditional paths
   function show_symbol_tag(FILE *,struct symbol *) in line 68
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses function show_ident(const struct ident *) defined in token.h
      uses variable sym defined in smatch_type.c
      uses variable symbol::ident defined in struct.c
      uses function stream_name(int) defined in token.h
      uses variable symbol::pos defined in struct.c
      uses variable position::stream defined in lib.h
      uses variable position::line defined in lib.h
      uses variable symbol::kind defined in struct.c
   function show_tags(struct symbol_list *) in line 74
      protection public
      29 lines of code
      1 parameters
      4 conditional paths
      uses variable sym defined in smatch_type.c
      uses macro definition NULL defined in sm_implied3.c
      uses variable position::pos defined in lib.h
      uses function show_tag_header(FILE *) defined in ctags.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable symbol::ident defined in struct.c
      uses variable symbol::pos defined in struct.c
      uses variable position::line defined in lib.h
      uses function stream_name(int) defined in token.h
      uses variable position::stream defined in lib.h
      uses function show_symbol_tag(FILE *,struct symbol *) defined in ctags.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function add_tag(struct symbol *) in line 104
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses variable sym defined in smatch_type.c
      uses variable symbol::ident defined in struct.c
      uses variable symbol::visited defined in struct.c
      uses function add_symbol(struct symbol_list **,struct symbol *) defined in symbol.h
      uses variable taglist defined in ctags.c
   function examine_members(struct symbol_list *) in line 112
      protection public
      9 lines of code
      1 parameters
      1 conditional paths
      uses variable sym defined in smatch_type.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable symbol::kind defined in struct.c
      uses function examine_symbol(struct symbol *) defined in ctags.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function examine_namespace(struct symbol *) in line 171
      protection public
      30 lines of code
      1 parameters
      11 conditional paths
      uses variable sym defined in smatch_type.c
      uses variable symbol::visited defined in struct.c
      uses variable symbol::ident defined in struct.c
      uses variable ident::reserved defined in token.h
      uses variable symbol::namespace defined in struct.c
      uses enumvalue NS_KEYWORD defined in symbol.h
      uses enumvalue NS_PREPROCESSOR defined in symbol.h
      uses enumvalue NS_LABEL defined in symbol.h
      uses variable symbol::kind defined in struct.c
      uses enumvalue NS_MACRO defined in symbol.h
      uses enumvalue NS_UNDEF defined in symbol.h
      uses enumvalue NS_TYPEDEF defined in symbol.h
      uses enumvalue NS_SYMBOL defined in symbol.h
      uses enumvalue NS_STRUCT defined in symbol.h
      uses function examine_symbol(struct symbol *) defined in ctags.c
      uses function die(const char *,...) defined in lib.c
      uses function show_ident(const struct ident *) defined in token.h
      uses variable symbol::type defined in struct.c
      uses function add_tag(struct symbol *) defined in ctags.c
   function examine_symbol_list(struct symbol_list *) in line 202
      protection public
      10 lines of code
      1 parameters
      2 conditional paths
      uses variable sym defined in smatch_type.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses function examine_namespace(struct symbol *) defined in ctags.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function main(int,char **) in line 213
      protection public
      15 lines of code
      2 parameters
      1 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses function examine_symbol_list(struct symbol_list *) defined in ctags.c
      uses function sparse_initialize(int,char **,struct string_list **) defined in lib.c
      uses macro definition FOR_EACH_PTR_NOTAG defined in ptrlist.h
      uses function sparse(char *) defined in lib.c
      uses variable file_scope defined in scope.c
      uses variable scope::symbols defined in scope.h
      uses macro definition END_FOR_EACH_PTR_NOTAG defined in ptrlist.h
      uses variable global_scope defined in scope.c
      uses function sort_list(struct ptr_list **,int(*)(const void *, const void *)) defined in ptrlist.h
      uses variable taglist defined in ctags.c
      uses function cmp_sym(const void *,const void *) defined in ctags.c
      uses function show_tags(struct symbol_list *) defined in ctags.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/cwchash/hashtable.c
module hashtable.c
   variable primes in line 15
      protection public
   variable prime_table_length in line 24
      protection public
   variable max_load_factor in line 25
      protection public
   function create_hashtable(unsigned int,unsigned int(*)(void *),int(*)(void *, void *)) in line 29
      protection public
      25 lines of code
      3 parameters
      1 conditional paths
      uses function h(int) defined in builtin_safe1.c
      uses variable primes defined in hashtable.c
      uses variable u defined in sm_skb.c
      uses macro definition NULL defined in sm_implied3.c
      uses variable prime_table_length defined in hashtable.c
      uses function malloc(int) defined in sm_buf_size2.c
      uses function memset(void *,int,int) defined in check_byte_count-ice.c
      uses variable int defined in missing-ident.c
      uses variable max_load_factor defined in hashtable.c
   function hash(struct hashtable *,void *) in line 57
      protection public
      11 lines of code
      2 parameters
      1 conditional paths
      uses function h(int) defined in builtin_safe1.c
      uses variable entry::k defined in hashtable_private.h
   function hashtable_expand(struct hashtable *) in line 71
      protection public
      56 lines of code
      1 parameters
      9 conditional paths
      uses function h(int) defined in builtin_safe1.c
      uses variable prime_table_length defined in hashtable.c
      uses variable primes defined in hashtable.c
      uses function malloc(int) defined in sm_buf_size2.c
      uses macro definition NULL defined in sm_implied3.c
      uses function memset(void *,int,int) defined in check_byte_count-ice.c
      uses variable int defined in missing-ident.c
      uses variable max_load_factor defined in hashtable.c
   function hashtable_count(struct hashtable *) in line 130
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function h(int) defined in builtin_safe1.c
   function hashtable_insert(struct hashtable *,void *,void *) in line 137
      protection public
      23 lines of code
      3 parameters
      1 conditional paths
      uses function h(int) defined in builtin_safe1.c
      uses function hashtable_expand(struct hashtable *) defined in hashtable.c
      uses function malloc(int) defined in sm_buf_size2.c
      uses macro definition NULL defined in sm_implied3.c
      uses function hash(struct hashtable *,void *) defined in hashtable.c
      uses variable entry::k defined in hashtable_private.h
      uses function v(int,...) defined in builtin_va_arg_pack.c
   function hashtable_search(struct hashtable *,void *) in line 163
      protection public
      15 lines of code
      2 parameters
      1 conditional paths
      uses function hash(struct hashtable *,void *) defined in hashtable.c
      uses function h(int) defined in builtin_safe1.c
      uses variable entry::k defined in hashtable_private.h
      uses macro definition NULL defined in sm_implied3.c
   function hashtable_remove(struct hashtable *,void *) in line 181
      protection public
      31 lines of code
      2 parameters
      1 conditional paths
      uses function v(int,...) defined in builtin_va_arg_pack.c
      uses function hash(struct hashtable *,void *) defined in hashtable.c
      uses function h(int) defined in builtin_safe1.c
      uses variable entry::k defined in hashtable_private.h
      uses macro definition NULL defined in sm_implied3.c
      uses macro definition freekey defined in hashtable_private.h
   function hashtable_destroy(struct hashtable *,int) in line 216
      protection public
      26 lines of code
      2 parameters
      1 conditional paths
      uses function h(int) defined in builtin_safe1.c
      uses macro definition NULL defined in sm_implied3.c
      uses macro definition freekey defined in hashtable_private.h
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/cwchash/hashtable.h
module hashtable.h
   macro definition DEFINE_HASHTABLE_INSERT in line 101
      protection public
   macro definition DEFINE_HASHTABLE_SEARCH in line 119
      protection public
   macro definition DEFINE_HASHTABLE_REMOVE in line 137
      protection public
   function create_hashtable(unsigned int,unsigned int(*)(void *),int(*)(void *, void *)) in line 75
      protection public
      25 lines of code
      3 parameters
      6 conditional paths
      uses function h(int) defined in builtin_safe1.c
      uses variable u defined in sm_skb.c
      uses macro definition NULL defined in sm_implied3.c
      uses variable prime_table_length defined in hashtable.c
      uses function malloc(int) defined in sm_buf_size2.c
      uses function memset(void *,int,int) defined in check_byte_count-ice.c
      uses variable int defined in missing-ident.c
      uses variable max_load_factor defined in hashtable.c
   function hashtable_insert(struct hashtable *,void *,void *) in line 99
      protection public
      23 lines of code
      3 parameters
      3 conditional paths
      uses function h(int) defined in builtin_safe1.c
      uses function malloc(int) defined in sm_buf_size2.c
      uses macro definition NULL defined in sm_implied3.c
      uses function hash(struct hashtable *,void *) defined in hashtable.c
      uses variable entry::k defined in hashtable_private.h
      uses function v(int,...) defined in builtin_va_arg_pack.c
   function hashtable_search(struct hashtable *,void *) in line 117
      protection public
      15 lines of code
      2 parameters
      3 conditional paths
      uses function hash(struct hashtable *,void *) defined in hashtable.c
      uses function h(int) defined in builtin_safe1.c
      uses variable entry::k defined in hashtable_private.h
      uses macro definition NULL defined in sm_implied3.c
   function hashtable_remove(struct hashtable *,void *) in line 135
      protection public
      31 lines of code
      2 parameters
      3 conditional paths
      uses function v(int,...) defined in builtin_va_arg_pack.c
      uses function hash(struct hashtable *,void *) defined in hashtable.c
      uses function h(int) defined in builtin_safe1.c
      uses variable entry::k defined in hashtable_private.h
      uses macro definition NULL defined in sm_implied3.c
      uses macro definition freekey defined in hashtable_private.h
   function hashtable_count(struct hashtable *) in line 152
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function h(int) defined in builtin_safe1.c
   function hashtable_destroy(struct hashtable *,int) in line 164
      protection public
      26 lines of code
      2 parameters
      6 conditional paths
      uses function h(int) defined in builtin_safe1.c
      uses macro definition NULL defined in sm_implied3.c
      uses macro definition freekey defined in hashtable_private.h
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/cwchash/hashtable_itr.c
module hashtable_itr.c
   function hashtable_iterator(struct hashtable *) in line 12
      protection public
      24 lines of code
      1 parameters
      1 conditional paths
      uses function malloc(int) defined in sm_buf_size2.c
      uses macro definition NULL defined in sm_implied3.c
      uses variable hashtable_itr::h defined in hashtable_itr.h
      uses function h(int) defined in builtin_safe1.c
      uses variable hashtable_itr::e defined in hashtable_itr.h
      uses variable hashtable_itr::parent defined in hashtable_itr.h
      uses variable hashtable_itr::index defined in hashtable_itr.h
   function hashtable_iterator_key(struct hashtable_itr *) in line 42
      protection public
      2 lines of code
      1 parameters
      1 conditional paths
   function hashtable_iterator_value(struct hashtable_itr *) in line 46
      protection public
      2 lines of code
      1 parameters
      1 conditional paths
   function hashtable_iterator_advance(struct hashtable_itr *) in line 54
      protection public
      35 lines of code
      1 parameters
      1 conditional paths
      uses function j(x,T) defined in identifier_list.c
      uses variable entry::next defined in hashtable_private.h
      uses macro definition NULL defined in sm_implied3.c
      uses variable hashtable_itr::e defined in hashtable_itr.h
      uses variable hashtable_itr::parent defined in hashtable_itr.h
      uses variable hashtable_itr::h defined in hashtable_itr.h
      uses variable hashtable::tablelength defined in hashtable_private.h
      uses variable hashtable_itr::index defined in hashtable_itr.h
      uses variable hashtable::table defined in hashtable_private.h
   function hashtable_iterator_remove(struct hashtable_itr *) in line 99
      protection public
      26 lines of code
      1 parameters
      1 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses variable hashtable_itr::parent defined in hashtable_itr.h
      uses variable hashtable_itr::h defined in hashtable_itr.h
      uses variable hashtable::table defined in hashtable_private.h
      uses variable hashtable_itr::index defined in hashtable_itr.h
      uses variable hashtable_itr::e defined in hashtable_itr.h
      uses variable entry::next defined in hashtable_private.h
      uses variable hashtable::entrycount defined in hashtable_private.h
      uses macro definition freekey defined in hashtable_private.h
      uses variable entry::k defined in hashtable_private.h
      uses function hashtable_iterator_advance(struct hashtable_itr *) defined in hashtable_itr.c
   function hashtable_iterator_search(struct hashtable_itr *,struct hashtable *,void *) in line 128
      protection public
      27 lines of code
      3 parameters
      1 conditional paths
      uses function hash(struct hashtable *,void *) defined in hashtable.c
      uses function h(int) defined in builtin_safe1.c
      uses variable entry::k defined in hashtable_private.h
      uses macro definition NULL defined in sm_implied3.c
      uses variable hashtable_itr::index defined in hashtable_itr.h
      uses variable hashtable_itr::e defined in hashtable_itr.h
      uses variable hashtable_itr::parent defined in hashtable_itr.h
      uses variable hashtable_itr::h defined in hashtable_itr.h
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/cwchash/hashtable_itr.h
module hashtable_itr.h
   macro definition DEFINE_HASHTABLE_ITERATOR_SEARCH in line 71
      protection public
   function hashtable_iterator(struct hashtable *) in line 25
      protection public
      24 lines of code
      1 parameters
      5 conditional paths
      uses function malloc(int) defined in sm_buf_size2.c
      uses macro definition NULL defined in sm_implied3.c
      uses variable hashtable_itr::h defined in hashtable_itr.h
      uses function h(int) defined in builtin_safe1.c
      uses variable hashtable_itr::e defined in hashtable_itr.h
      uses variable hashtable_itr::parent defined in hashtable_itr.h
      uses variable hashtable_itr::index defined in hashtable_itr.h
   function hashtable_iterator_key(struct hashtable_itr *) in line 32
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function hashtable_iterator_value(struct hashtable_itr *) in line 41
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function hashtable_iterator_advance(struct hashtable_itr *) defined in hashtable_itr.h
      uses function hashtable_iterator_remove(struct hashtable_itr *) defined in hashtable_itr.h
      uses function hashtable_iterator_search(struct hashtable_itr *,struct hashtable *,void *) defined in hashtable_itr.h
      uses variable hashtable_itr::h defined in hashtable_itr.h
   function hashtable_iterator_advance(struct hashtable_itr *) in line 51
      protection public
      35 lines of code
      1 parameters
      6 conditional paths
      uses function j(x,T) defined in identifier_list.c
      uses variable entry::next defined in hashtable_private.h
      uses macro definition NULL defined in sm_implied3.c
      uses variable hashtable_itr::e defined in hashtable_itr.h
      uses variable hashtable_itr::parent defined in hashtable_itr.h
      uses variable hashtable_itr::h defined in hashtable_itr.h
      uses variable hashtable::tablelength defined in hashtable_private.h
      uses variable hashtable_itr::index defined in hashtable_itr.h
      uses variable hashtable::table defined in hashtable_private.h
   function hashtable_iterator_remove(struct hashtable_itr *) in line 60
      protection public
      26 lines of code
      1 parameters
      3 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses variable hashtable_itr::parent defined in hashtable_itr.h
      uses variable hashtable_itr::h defined in hashtable_itr.h
      uses variable hashtable::table defined in hashtable_private.h
      uses variable hashtable_itr::index defined in hashtable_itr.h
      uses variable hashtable_itr::e defined in hashtable_itr.h
      uses variable entry::next defined in hashtable_private.h
      uses variable hashtable::entrycount defined in hashtable_private.h
      uses macro definition freekey defined in hashtable_private.h
      uses variable entry::k defined in hashtable_private.h
      uses function hashtable_iterator_advance(struct hashtable_itr *) defined in hashtable_itr.c
   function hashtable_iterator_search(struct hashtable_itr *,struct hashtable *,void *) in line 68
      protection public
      27 lines of code
      3 parameters
      3 conditional paths
      uses function hash(struct hashtable *,void *) defined in hashtable.c
      uses function h(int) defined in builtin_safe1.c
      uses variable entry::k defined in hashtable_private.h
      uses macro definition NULL defined in sm_implied3.c
      uses variable hashtable_itr::index defined in hashtable_itr.h
      uses variable hashtable_itr::e defined in hashtable_itr.h
      uses variable hashtable_itr::parent defined in hashtable_itr.h
      uses variable hashtable_itr::h defined in hashtable_itr.h
   variable hashtable_itr::e in line 14
      protection public
   variable hashtable_itr::h in line 13
      protection public
   variable hashtable_itr::index in line 16
      protection public
   variable hashtable_itr::parent in line 15
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/cwchash/hashtable_private.h
module hashtable_private.h
   macro definition freekey in line 46
      protection public
   function hash(struct hashtable *,void *) in line 28
      protection public
      11 lines of code
      2 parameters
      1 conditional paths
      uses function h(int) defined in builtin_safe1.c
      uses variable entry::k defined in hashtable_private.h
   function indexFor(unsigned int,unsigned int) in line 33
      protection public
      3 lines of code
      2 parameters
      1 conditional paths
   variable entry::h in line 12
      protection public
   variable entry::k in line 11
      protection public
   variable entry::next in line 13
      protection public
   variable entry::v in line 11
      protection public
   variable hashtable::entrycount in line 19
      protection public
   variable hashtable::eqfn in line 23
      protection public
   variable hashtable::hashfn in line 22
      protection public
   variable hashtable::loadlimit in line 20
      protection public
   variable hashtable::primeindex in line 21
      protection public
   variable hashtable::table in line 18
      protection public
   variable hashtable::tablelength in line 17
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/cwchash/hashtable_utility.c
module hashtable_utility.c
   function hashtable_change(struct hashtable *,void *,void *) in line 19
      protection public
      20 lines of code
      3 parameters
      1 conditional paths
      uses function hash(struct hashtable *,void *) defined in hashtable.c
      uses function h(int) defined in builtin_safe1.c
      uses variable entry::k defined in hashtable_private.h
      uses macro definition NULL defined in sm_implied3.c
      uses function v(int,...) defined in builtin_va_arg_pack.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/cwchash/hashtable_utility.h
module hashtable_utility.h
   function hashtable_change(struct hashtable *,void *,void *) in line 20
      protection public
      20 lines of code
      3 parameters
      3 conditional paths
      uses function hash(struct hashtable *,void *) defined in hashtable.c
      uses function h(int) defined in builtin_safe1.c
      uses variable entry::k defined in hashtable_private.h
      uses macro definition NULL defined in sm_implied3.c
      uses function v(int,...) defined in builtin_va_arg_pack.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/cwchash/tester.c
module tester.c
   typedef uint32_t in line 11
      protection public
   typedef uint16_t in line 12
      protection public
   variable ITEM_COUNT in line 9
      protection public
   function DEFINE_HASHTABLE_INSERT(insert_some,struct key,struct value) in line 25
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function DEFINE_HASHTABLE_SEARCH(search_some,struct key,struct value) in line 26
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function DEFINE_HASHTABLE_REMOVE(remove_some,struct key,struct value) in line 27
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function DEFINE_HASHTABLE_ITERATOR_SEARCH(search_itr_some,struct key) in line 28
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function hashfromkey(void *) in line 33
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses variable key::one_ip defined in tester.c
      uses variable key::two_ip defined in tester.c
      uses variable key::one_port defined in tester.c
      uses variable key::two_port defined in tester.c
   function equalkeys(void *,void *) in line 41
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function main(int,char **) in line 48
      protection public
      190 lines of code
      2 parameters
      22 conditional paths
      uses function v(int,...) defined in builtin_va_arg_pack.c
      uses function h(int) defined in builtin_safe1.c
      uses function create_hashtable(unsigned int,unsigned int(*)(void *),int(*)(void *, void *)) defined in hashtable.c
      uses function hashfromkey(void *) defined in tester.c
      uses function equalkeys(void *,void *) defined in tester.c
      uses macro definition NULL defined in sm_implied3.c
      uses function exit(int) defined in test-be.c
      uses variable ITEM_COUNT defined in tester.c
      uses function malloc(int) defined in sm_buf_size2.c
      uses function printf(char *,...) defined in test-be.c
      uses variable key::one_ip defined in tester.c
      uses variable key::two_ip defined in tester.c
      uses variable key::one_port defined in tester.c
      uses variable key::two_port defined in tester.c
      uses function hashtable_count(struct hashtable *) defined in hashtable.c
      uses function hashtable_iterator(struct hashtable *) defined in hashtable_itr.c
      uses function hashtable_iterator_key(struct hashtable_itr *) defined in hashtable_itr.c
      uses function hashtable_iterator_value(struct hashtable_itr *) defined in hashtable_itr.c
      uses function hashtable_iterator_advance(struct hashtable_itr *) defined in hashtable_itr.c
      uses function hashtable_destroy(struct hashtable *,int) defined in hashtable.c
      uses function hashtable_iterator_remove(struct hashtable_itr *) defined in hashtable_itr.c
   variable key::one_ip in line 17
      protection public
   variable key::one_port in line 17
      protection public
   variable key::two_ip in line 17
      protection public
   variable key::two_port in line 17
      protection public
   variable value::id in line 22
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/dissect.c
module dissect.c
   macro definition U_VOID in line 27
      protection public
   macro definition U_SELF in line 28
      protection public
   macro definition U_MASK in line 29
      protection public
   macro definition DO_LIST in line 31
      protection public
   macro definition DO_2_LIST in line 39
      protection public
   typedef usage_t in line 52
      protection public
   variable reporter in line 54
      protection public
   variable return_type in line 55
      protection public
   function do_sym_list(struct symbol_list *) in line 57
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses macro definition DO_LIST defined in dissect.c
      uses variable sym defined in smatch_type.c
      uses function do_symbol(struct symbol *) defined in dissect.c
   function base_type(struct symbol *) in line 60
      protection public
      11 lines of code
      1 parameters
      3 conditional paths
      uses variable sym defined in smatch_type.c
      uses variable symbol::type defined in struct.c
      uses enumvalue SYM_NODE defined in symbol.h
      uses function examine_sym_node(struct symbol *,struct ident *) defined in dissect.c
      uses macro definition NULL defined in sm_implied3.c
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::base_type defined in struct.c
   function do_initializer(struct symbol *,struct expression *) in line 61
      protection public
      41 lines of code
      2 parameters
      8 conditional paths
      uses variable expression::type defined in expression.h
      uses function do_expression(usage_t,struct expression *) defined in dissect.c
      uses function u_lval(struct symbol *) defined in dissect.c
      uses enumvalue EXPR_INDEX defined in expression.h
      uses function base_type(struct symbol *) defined in dissect.c
      uses variable expression::idx_expression defined in expression.h
      uses enumvalue EXPR_INITIALIZER defined in expression.h
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable expression::expr_list defined in expression.h
      uses enumvalue SYM_ARRAY defined in symbol.h
      uses variable position::pos defined in lib.h
      uses variable expression::pos defined in expression.h
      uses macro definition NULL defined in sm_implied3.c
      uses enumvalue EXPR_IDENTIFIER defined in expression.h
      uses variable expression::expr_ident defined in expression.h
      uses variable expression::ident_expression defined in expression.h
      uses function report_member(mode_t,struct position *,struct symbol *,struct symbol *) defined in dissect.c
      uses macro definition U_W_VAL defined in dissect.h
      uses function lookup_member(struct symbol *,struct ident *,int *) defined in dissect.c
      uses function report_implicit(usage_t,struct position *,struct symbol *) defined in dissect.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function do_expression(usage_t,struct expression *) in line 62
      protection public
      131 lines of code
      2 parameters
      42 conditional paths
      uses variable expression::type defined in expression.h
      uses function warning(struct position,const char *,...) defined in lib.c
      uses variable expression::pos defined in expression.h
      uses enumvalue EXPR_TYPE defined in expression.h
      uses enumvalue EXPR_VALUE defined in expression.h
      uses enumvalue EXPR_FVALUE defined in expression.h
      uses enumvalue EXPR_LABEL defined in expression.h
      uses enumvalue EXPR_STRING defined in expression.h
      uses enumvalue EXPR_STATEMENT defined in expression.h
      uses function do_statement(usage_t,struct statement *) defined in dissect.c
      uses variable expression::statement defined in expression.h
      uses enumvalue EXPR_SIZEOF defined in expression.h
      uses enumvalue EXPR_ALIGNOF defined in expression.h
      uses enumvalue EXPR_PTRSIZEOF defined in expression.h
      uses macro definition U_VOID defined in dissect.c
      uses variable expression::cast_expression defined in expression.h
      uses enumvalue EXPR_COMMA defined in expression.h
      uses variable expression::left defined in expression.h
      uses variable expression::right defined in expression.h
      uses enumvalue EXPR_CAST defined in expression.h
      uses enumvalue EXPR_FORCE_CAST defined in expression.h
      uses function base_type(struct symbol *) defined in dissect.c
      uses variable expression::cast_type defined in expression.h
      uses function do_initializer(struct symbol *,struct expression *) defined in dissect.c
      uses enumvalue EXPR_COMPARE defined in expression.h
      uses enumvalue EXPR_LOGICAL defined in expression.h
      uses function u_rval(usage_t) defined in dissect.c
      uses enumvalue EXPR_CONDITIONAL defined in expression.h
      uses variable expression::cond_true defined in expression.h
      uses macro definition U_R_VAL defined in dissect.h
      uses variable expression::conditional defined in expression.h
      uses variable expression::cond_false defined in expression.h
      uses enumvalue EXPR_CALL defined in expression.h
      uses macro definition U_R_PTR defined in dissect.h
      uses variable expression::fn defined in expression.h
      uses function is_ptr(struct symbol *) defined in dissect.c
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::base_type defined in struct.c
      uses macro definition DO_2_LIST defined in dissect.c
      uses variable symbol::arguments defined in struct.c
      uses variable expression::args defined in expression.h
      uses function u_lval(struct symbol *) defined in dissect.c
      uses variable symbol::type defined in struct.c
      uses enumvalue SYM_FN defined in symbol.h
      uses enumvalue EXPR_ASSIGNMENT defined in expression.h
      uses macro definition U_W_VAL defined in dissect.h
      uses variable expression::op defined in expression.h
      uses function report_implicit(usage_t,struct position *,struct symbol *) defined in dissect.c
      uses enumvalue EXPR_BINOP defined in expression.h
      uses variable l defined in sm_casts4.c
      uses variable r defined in cond_expr2.c
      uses enumvalue EXPR_PREOP defined in expression.h
      uses enumvalue EXPR_POSTOP defined in expression.h
      uses variable expression::unop defined in expression.h
      uses enumvalue SPECIAL_INCREMENT defined in token.h
      uses enumvalue SPECIAL_DECREMENT defined in token.h
      uses function peek_preop(struct expression *,int) defined in dissect.c
      uses function alloc_symbol(struct position,int) defined in symbol.c
      uses enumvalue SYM_PTR defined in symbol.h
      uses function u_addr(usage_t) defined in dissect.c
      uses macro definition U_MASK defined in dissect.c
      uses macro definition U_SHIFT defined in dissect.h
      uses macro definition U_R_AOF defined in dissect.h
      uses macro definition U_W_AOF defined in dissect.h
      uses enumvalue EXPR_DEREF defined in expression.h
      uses macro definition U_SELF defined in dissect.c
      uses variable expression::deref defined in expression.h
      uses function report_member(mode_t,struct position *,struct symbol *,struct symbol *) defined in dissect.c
      uses function lookup_member(struct symbol *,struct ident *,int *) defined in dissect.c
      uses variable expression::member defined in expression.h
      uses macro definition NULL defined in sm_implied3.c
      uses enumvalue EXPR_SYMBOL defined in expression.h
      uses function report_symbol(usage_t,struct expression *) defined in dissect.c
   function do_statement(usage_t,struct statement *) in line 63
      protection public
      66 lines of code
      2 parameters
      16 conditional paths
      uses variable symbol::stmt defined in struct.c
      uses variable statement::type defined in parse.h
      uses function warning(struct position,const char *,...) defined in lib.c
      uses variable statement::pos defined in parse.h
      uses enumvalue STMT_NONE defined in parse.h
      uses enumvalue STMT_RANGE defined in parse.h
      uses enumvalue STMT_CONTEXT defined in parse.h
      uses enumvalue STMT_DECLARATION defined in parse.h
      uses function do_sym_list(struct symbol_list *) defined in dissect.c
      uses variable statement::declaration defined in parse.h
      uses enumvalue STMT_EXPRESSION defined in parse.h
      uses function do_expression(usage_t,struct expression *) defined in dissect.c
      uses variable statement::expression defined in parse.h
      uses enumvalue STMT_RETURN defined in parse.h
      uses function u_lval(struct symbol *) defined in dissect.c
      uses enumvalue STMT_ASM defined in parse.h
      uses macro definition U_R_VAL defined in dissect.h
      uses variable statement::asm_string defined in parse.h
      uses function do_asm_xputs(usage_t,struct expression_list *) defined in dissect.c
      uses macro definition U_W_VAL defined in dissect.h
      uses variable statement::asm_outputs defined in parse.h
      uses variable statement::asm_inputs defined in parse.h
      uses enumvalue STMT_COMPOUND defined in parse.h
      uses variable statement::stmts defined in parse.h
      uses macro definition DO_LIST defined in dissect.c
      uses macro definition U_VOID defined in dissect.c
      uses enumvalue STMT_ITERATOR defined in parse.h
      uses variable statement::iterator_syms defined in parse.h
      uses variable statement::iterator_pre_statement defined in parse.h
      uses variable statement::iterator_pre_condition defined in parse.h
      uses variable statement::iterator_post_statement defined in parse.h
      uses variable statement::iterator_statement defined in parse.h
      uses variable statement::iterator_post_condition defined in parse.h
      uses enumvalue STMT_IF defined in parse.h
      uses variable statement::if_conditional defined in parse.h
      uses variable statement::if_true defined in parse.h
      uses variable statement::if_false defined in parse.h
      uses enumvalue STMT_SWITCH defined in parse.h
      uses variable statement::switch_expression defined in parse.h
      uses variable statement::switch_statement defined in parse.h
      uses enumvalue STMT_CASE defined in parse.h
      uses variable statement::case_expression defined in parse.h
      uses variable statement::case_to defined in parse.h
      uses variable statement::case_statement defined in parse.h
      uses enumvalue STMT_GOTO defined in parse.h
      uses macro definition U_R_PTR defined in dissect.h
      uses variable statement::goto_expression defined in parse.h
      uses enumvalue STMT_LABEL defined in parse.h
      uses variable statement::label_statement defined in parse.h
   function is_ptr(struct symbol *) in line 65
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses enumvalue SYM_PTR defined in symbol.h
      uses enumvalue SYM_ARRAY defined in symbol.h
   function u_rval(usage_t) in line 70
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses macro definition U_R_VAL defined in dissect.h
      uses macro definition U_MASK defined in dissect.c
      uses macro definition U_SHIFT defined in dissect.h
   function u_addr(usage_t) in line 76
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses macro definition U_MASK defined in dissect.c
      uses macro definition U_R_AOF defined in dissect.h
      uses macro definition U_W_AOF defined in dissect.h
   function u_lval(struct symbol *) in line 82
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses function is_ptr(struct symbol *) defined in dissect.c
      uses macro definition MOD_CONST defined in symbol.h
      uses macro definition U_W_AOF defined in dissect.h
      uses macro definition U_R_VAL defined in dissect.h
   function fix_mode(struct symbol *,usage_t) in line 89
      protection public
      31 lines of code
      2 parameters
      12 conditional paths
      uses macro definition U_SELF defined in dissect.c
      uses macro definition U_SHIFT defined in dissect.h
      uses enumvalue SYM_BASETYPE defined in symbol.h
      uses enumvalue SYM_ENUM defined in symbol.h
      uses enumvalue SYM_BITFIELD defined in symbol.h
      uses macro definition U_MASK defined in dissect.c
      uses enumvalue SYM_FN defined in symbol.h
      uses macro definition U_R_VAL defined in dissect.h
      uses macro definition U_R_AOF defined in dissect.h
      uses macro definition U_W_AOF defined in dissect.h
      uses enumvalue SYM_ARRAY defined in symbol.h
      uses macro definition U_W_VAL defined in dissect.h
      uses function u_addr(usage_t) defined in dissect.c
   function no_member(struct ident *) in line 121
      protection public
      11 lines of code
      1 parameters
      1 conditional paths
      uses variable sym defined in smatch_type.c
      uses variable symbol::type defined in struct.c
      uses enumvalue SYM_BAD defined in symbol.h
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::base_type defined in struct.c
      uses variable symbol::ident defined in struct.c
      uses variable name defined in smatch_type.c
   function report_member(mode_t,struct position *,struct symbol *,struct symbol *) in line 133
      protection public
      10 lines of code
      4 parameters
      2 conditional paths
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::base_type defined in struct.c
      uses variable reporter::r_member defined in dissect.h
      uses function fix_mode(struct symbol *,usage_t) defined in dissect.c
      uses variable symbol::pos defined in struct.c
   function report_implicit(usage_t,struct position *,struct symbol *) in line 144
      protection public
      14 lines of code
      3 parameters
      4 conditional paths
      uses enumvalue SYM_STRUCT defined in symbol.h
      uses enumvalue SYM_UNION defined in symbol.h
      uses variable reporter::r_member defined in dissect.h
      uses macro definition NULL defined in sm_implied3.c
      uses variable symbol::pos defined in struct.c
      uses macro definition DO_LIST defined in dissect.c
      uses function base_type(struct symbol *) defined in dissect.c
   function expr_symbol(struct expression *) in line 159
      protection public
      19 lines of code
      1 parameters
      4 conditional paths
      uses variable sym defined in smatch_type.c
      uses variable expression::symbol defined in expression.h
      uses function lookup_symbol(struct ident *,enum namespace) defined in symbol.c
      uses variable expression::symbol_name defined in expression.h
      uses enumvalue NS_SYMBOL defined in symbol.h
      uses function alloc_symbol(struct position,int) defined in symbol.c
      uses variable expression::pos defined in expression.h
      uses enumvalue SYM_BAD defined in symbol.h
      uses function bind_symbol(struct symbol *,struct ident *,enum namespace) defined in symbol.c
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::modifiers defined in struct.c
      uses macro definition MOD_EXTERN defined in symbol.h
      uses variable ctype::base_type defined in struct.c
   function report_symbol(usage_t,struct expression *) in line 179
      protection public
      13 lines of code
      2 parameters
      3 conditional paths
      uses variable sym defined in smatch_type.c
      uses function expr_symbol(struct expression *) defined in dissect.c
      uses function base_type(struct symbol *) defined in dissect.c
      uses variable symbol::type defined in struct.c
      uses enumvalue SYM_ENUM defined in symbol.h
      uses function report_member(mode_t,struct position *,struct symbol *,struct symbol *) defined in dissect.c
      uses variable expression::pos defined in expression.h
      uses variable expression::symbol defined in expression.h
      uses variable reporter::r_symbol defined in dissect.h
      uses function fix_mode(struct symbol *,usage_t) defined in dissect.c
   function mk_name(struct ident *,struct ident *) in line 193
      protection public
      10 lines of code
      2 parameters
      1 conditional paths
      uses variable name defined in smatch_type.c
      uses function snprintf(char *,int,char *,char *) defined in sm_overflow6.c
      uses variable ident::len defined in token.h
      uses variable ident::name defined in token.h
      uses function built_in_ident(const char *) defined in token.h
   function examine_sym_node(struct symbol *,struct ident *) in line 204
      protection public
      41 lines of code
      2 parameters
      13 conditional paths
      uses variable name defined in smatch_type.c
      uses variable symbol::examined defined in struct.c
      uses variable symbol::ident defined in struct.c
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::base_type defined in struct.c
      uses macro definition NULL defined in sm_implied3.c
      uses variable symbol::type defined in struct.c
      uses enumvalue SYM_TYPEOF defined in symbol.h
      uses function do_expression(usage_t,struct expression *) defined in dissect.c
      uses macro definition U_VOID defined in dissect.c
      uses variable symbol::initializer defined in struct.c
      uses enumvalue SYM_ARRAY defined in symbol.h
      uses macro definition U_R_VAL defined in dissect.h
      uses variable symbol::array_size defined in struct.c
      uses enumvalue SYM_PTR defined in symbol.h
      uses enumvalue SYM_FN defined in symbol.h
      uses enumvalue SYM_STRUCT defined in symbol.h
      uses enumvalue SYM_UNION defined in symbol.h
      uses variable symbol::evaluated defined in struct.c
      uses variable symbol::symbol_list defined in struct.c
      uses function mk_name(struct ident *,struct ident *) defined in dissect.c
      uses variable reporter::r_symdef defined in dissect.h
      uses macro definition DO_LIST defined in dissect.c
   function __lookup_member(struct symbol *,struct ident *,int *) in line 258
      protection public
      26 lines of code
      3 parameters
      8 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable name defined in smatch_type.c
      uses variable symbol::ident defined in struct.c
      uses macro definition NULL defined in sm_implied3.c
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::base_type defined in struct.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function lookup_member(struct symbol *,struct ident *,int *) in line 285
      protection public
      5 lines of code
      3 parameters
      1 conditional paths
      uses function __lookup_member(struct symbol *,struct ident *,int *) defined in dissect.c
      uses variable name defined in smatch_type.c
      uses function no_member(struct ident *) defined in dissect.c
   function peek_preop(struct expression *,int) in line 291
      protection public
      15 lines of code
      2 parameters
      5 conditional paths
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_PREOP defined in expression.h
      uses variable expression::op defined in expression.h
      uses function op(void) defined in loop2.c
      uses variable expression::unop defined in expression.h
      uses macro definition NULL defined in sm_implied3.c
   function do_asm_xputs(usage_t,struct expression_list *) in line 439
      protection public
      8 lines of code
      2 parameters
      2 conditional paths
      uses macro definition DO_LIST defined in dissect.c
      uses function do_expression(usage_t,struct expression *) defined in dissect.c
      uses macro definition U_W_AOF defined in dissect.h
   function do_symbol(struct symbol *) in line 557
      protection public
      27 lines of code
      1 parameters
      5 conditional paths
      uses function base_type(struct symbol *) defined in dissect.c
      uses variable sym defined in smatch_type.c
      uses variable reporter::r_symdef defined in dissect.h
      uses variable symbol::initializer defined in struct.c
      uses variable reporter::r_symbol defined in dissect.h
      uses macro definition U_W_VAL defined in dissect.h
      uses variable symbol::pos defined in struct.c
      uses function do_initializer(struct symbol *,struct expression *) defined in dissect.c
      uses enumvalue SYM_FN defined in symbol.h
      uses function do_sym_list(struct symbol_list *) defined in dissect.c
      uses function do_statement(usage_t,struct statement *) defined in dissect.c
      uses macro definition U_VOID defined in dissect.c
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::modifiers defined in struct.c
      uses macro definition MOD_INLINE defined in symbol.h
   function dissect(struct symbol_list *,struct reporter *) in line 590
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses function do_sym_list(struct symbol_list *) defined in dissect.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/dissect.h
module dissect.h
   macro definition U_SHIFT in line 8
      protection public
   macro definition U_R_AOF in line 10
      protection public
   macro definition U_W_AOF in line 11
      protection public
   macro definition U_R_VAL in line 13
      protection public
   macro definition U_W_VAL in line 14
      protection public
   macro definition U_R_PTR in line 16
      protection public
   macro definition U_W_PTR in line 17
      protection public
   macro definition MK_IDENT in line 29
      protection public
   function dissect(struct symbol_list *,struct reporter *) in line 27
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
   variable reporter::r_member in line 24
      protection public
   variable reporter::r_symbol in line 23
      protection public
   variable reporter::r_symdef in line 21
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/evaluate.c
module evaluate.c
   macro definition is_int in line 377
      protection public
   macro definition MOD_IGN in line 626
      protection public
   macro definition is_safe_type in line 853
      protection public
   enumeration @26 in line 333
      protection public
   variable current_fn in line 45
      protection public
   enumvalue TYPE_NUM in line 334
      protection public
   enumvalue TYPE_BITFIELD in line 335
      protection public
   enumvalue TYPE_RESTRICT in line 336
      protection public
   enumvalue TYPE_FLOAT in line 337
      protection public
   enumvalue TYPE_PTR in line 338
      protection public
   enumvalue TYPE_COMPOUND in line 339
      protection public
   enumvalue TYPE_FOULED in line 340
      protection public
   enumvalue TYPE_FN in line 341
      protection public
   function degenerate(struct expression *) in line 47
      protection public
      77 lines of code
      1 parameters
      9 conditional paths
      uses variable symbol::ctype defined in struct.c
      uses macro definition NULL defined in sm_implied3.c
      uses variable expression::ctype defined in expression.h
      uses function examine_symbol_type(struct symbol *) defined in symbol.c
      uses variable ctype::type defined in struct.c
      uses enumvalue SYM_NODE defined in symbol.h
      uses variable ctype::base_type defined in struct.c
      uses variable symbol::type defined in struct.c
      uses enumvalue SYM_ARRAY defined in symbol.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_SLICE defined in expression.h
      uses function alloc_symbol(struct position,int) defined in symbol.c
      uses variable expression::pos defined in expression.h
      uses variable expression::base defined in expression.h
      uses variable symbol::bit_size defined in struct.c
      uses variable symbol::array_size defined in struct.c
      uses enumvalue EXPR_SYMBOL defined in expression.h
      uses variable expression::symbol defined in expression.h
      uses macro definition a defined in preprocessor5.c
      uses enumvalue EXPR_PREOP defined in expression.h
      uses variable expression::unop defined in expression.h
      uses variable expression::op defined in expression.h
      uses enumvalue EXPR_ASSIGNMENT defined in expression.h
      uses variable expression::left defined in expression.h
      uses variable expression::right defined in expression.h
      uses variable expression::r_bitpos defined in expression.h
      uses enumvalue EXPR_BINOP defined in expression.h
      uses enumvalue EXPR_COMMA defined in expression.h
      uses enumvalue SYM_FN defined in symbol.h
      uses function expression_error(struct expression *,const char *,...) defined in lib.c
      uses function create_pointer(struct expression *,struct symbol *,int) defined in evaluate.c
   function evaluate_symbol(struct symbol *) in line 48
      protection public
      39 lines of code
      1 parameters
      9 conditional paths
      uses function base_type(struct symbol *,unsigned long *,unsigned long *) defined in evaluate.c
      uses variable sym defined in smatch_type.c
      uses variable symbol::evaluated defined in struct.c
      uses function examine_symbol_type(struct symbol *) defined in symbol.c
      uses macro definition NULL defined in sm_implied3.c
      uses variable symbol::initializer defined in struct.c
      uses function evaluate_initializer(struct symbol *,struct expression **) defined in evaluate.c
      uses variable symbol::type defined in struct.c
      uses enumvalue SYM_FN defined in symbol.h
      uses variable current_fn defined in evaluate.c
      uses variable symbol::definition defined in struct.c
      uses function examine_fn_arguments(struct symbol *) defined in evaluate.c
      uses variable symbol::stmt defined in struct.c
      uses variable symbol::inline_stmt defined in struct.c
      uses function uninline(struct symbol *) defined in inline.c
      uses function evaluate_statement(struct statement *) defined in evaluate.c
   function evaluate_symbol_expression(struct expression *) in line 50
      protection public
      31 lines of code
      1 parameters
      3 conditional paths
      uses variable sym defined in smatch_type.c
      uses variable expression::symbol defined in expression.h
      uses function base_type(struct symbol *,unsigned long *,unsigned long *) defined in evaluate.c
      uses function expression_error(struct expression *,const char *,...) defined in lib.c
      uses function show_ident(const struct ident *) defined in token.h
      uses variable expression::symbol_name defined in expression.h
      uses macro definition NULL defined in sm_implied3.c
      uses function examine_symbol_type(struct symbol *) defined in symbol.c
      uses variable expression::pos defined in expression.h
      uses enumvalue EXPR_SYMBOL defined in expression.h
      uses variable expression::ctype defined in expression.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_PREOP defined in expression.h
      uses variable expression::op defined in expression.h
      uses variable expression::unop defined in expression.h
   function evaluate_string(struct expression *) in line 82
      protection public
      34 lines of code
      1 parameters
      1 conditional paths
      uses variable sym defined in smatch_type.c
      uses function alloc_symbol(struct position,int) defined in symbol.c
      uses variable expression::pos defined in expression.h
      uses enumvalue SYM_NODE defined in symbol.h
      uses enumvalue SYM_ARRAY defined in symbol.h
      uses enumvalue EXPR_SYMBOL defined in expression.h
      uses enumvalue EXPR_STRING defined in expression.h
      uses variable expression::string defined in expression.h
      uses variable string::length defined in token.h
      uses variable symbol::array_size defined in struct.c
      uses variable symbol::bit_size defined in struct.c
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::alignment defined in struct.c
      uses variable symbol::string defined in struct.c
      uses variable ctype::modifiers defined in struct.c
      uses macro definition MOD_STATIC defined in symbol.h
      uses variable ctype::base_type defined in struct.c
      uses variable symbol::initializer defined in struct.c
      uses variable expression::ctype defined in expression.h
      uses variable expression::symbol defined in expression.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_PREOP defined in expression.h
      uses variable expression::op defined in expression.h
      uses variable expression::unop defined in expression.h
   function integer_promotion(struct symbol *) in line 118
      protection public
      27 lines of code
      1 parameters
      5 conditional paths
      uses enumvalue SYM_BITFIELD defined in symbol.h
      uses variable bits_in_int defined in target.c
      uses macro definition MOD_CHAR defined in symbol.h
      uses macro definition MOD_SHORT defined in symbol.h
      uses macro definition MOD_UNSIGNED defined in symbol.h
   function bigger_int_type(struct symbol *,struct symbol *) in line 163
      protection public
      28 lines of code
      2 parameters
      12 conditional paths
      uses function integer_promotion(struct symbol *) defined in evaluate.c
      uses variable symbol::bit_size defined in struct.c
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::modifiers defined in struct.c
      uses macro definition MOD_UNSIGNED defined in symbol.h
      uses macro definition MOD_LONG_ALL defined in symbol.h
   function same_cast_type(struct symbol *,struct symbol *) in line 192
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses variable symbol::bit_size defined in struct.c
      uses variable symbol::bit_offset defined in struct.c
   function base_type(struct symbol *,unsigned long *,unsigned long *) in line 198
      protection public
      18 lines of code
      3 parameters
      3 conditional paths
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::modifiers defined in struct.c
      uses variable ctype::attribute defined in struct.c
      uses variable attribute::as defined in symbol.h
      uses variable symbol::type defined in struct.c
      uses enumvalue SYM_NODE defined in symbol.h
      uses variable ctype::base_type defined in struct.c
      uses macro definition MOD_IGNORE defined in symbol.h
   function is_same_type(struct expression *,struct symbol *) in line 217
      protection public
      36 lines of code
      2 parameters
      7 conditional paths
      uses variable expression::ctype defined in expression.h
      uses function base_type(struct symbol *,unsigned long *,unsigned long *) defined in evaluate.c
      uses macro definition MOD_NOCAST defined in symbol.h
      uses macro definition MOD_CONST defined in symbol.h
      uses function warning(struct position,const char *,...) defined in lib.c
      uses variable expression::pos defined in expression.h
   function warn_for_different_enum_types(struct position,struct symbol *,struct symbol *) in line 255
      protection public
      20 lines of code
      3 parameters
      6 conditional paths
      uses variable Wenum_mismatch defined in lib.c
      uses variable symbol::type defined in struct.c
      uses enumvalue SYM_NODE defined in symbol.h
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::base_type defined in struct.c
      uses enumvalue SYM_ENUM defined in symbol.h
      uses function warning(struct position,const char *,...) defined in lib.c
      uses variable symbol::pos defined in struct.c
      uses function info(struct position,const char *,...) defined in lib.c
      uses function show_typename(struct symbol *) defined in show-parse.c
   function cast_to(struct expression *,struct symbol *) in line 283
      protection public
      49 lines of code
      2 parameters
      9 conditional paths
      uses function warn_for_different_enum_types(struct position,struct symbol *,struct symbol *) defined in evaluate.c
      uses variable expression::pos defined in expression.h
      uses variable expression::ctype defined in expression.h
      uses variable null_ctype defined in symbol.c
      uses function is_same_type(struct expression *,struct symbol *) defined in evaluate.c
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_PREOP defined in expression.h
      uses variable symbol::bit_size defined in struct.c
      uses variable expression::op defined in expression.h
      uses variable expression::unop defined in expression.h
      uses enumvalue EXPR_IMPLIED_CAST defined in expression.h
      uses variable expression::cast_expression defined in expression.h
      uses function same_cast_type(struct symbol *,struct symbol *) defined in evaluate.c
      uses variable symbol::bit_offset defined in struct.c
      uses variable expression::cast_type defined in expression.h
      uses variable expression::flags defined in expression.h
   function classify_type(struct symbol *,struct symbol **) in line 344
      protection public
      32 lines of code
      2 parameters
      9 conditional paths
      uses enumvalue SYM_BAD defined in symbol.h
      uses enumvalue SYM_PTR defined in symbol.h
      uses enumvalue TYPE_PTR defined in evaluate.c
      uses enumvalue SYM_FN defined in symbol.h
      uses enumvalue TYPE_FN defined in evaluate.c
      uses enumvalue SYM_ARRAY defined in symbol.h
      uses enumvalue TYPE_COMPOUND defined in evaluate.c
      uses enumvalue SYM_STRUCT defined in symbol.h
      uses enumvalue SYM_UNION defined in symbol.h
      uses enumvalue SYM_BITFIELD defined in symbol.h
      uses enumvalue TYPE_NUM defined in evaluate.c
      uses enumvalue TYPE_BITFIELD defined in evaluate.c
      uses enumvalue SYM_RESTRICT defined in symbol.h
      uses enumvalue TYPE_RESTRICT defined in evaluate.c
      uses enumvalue SYM_FOULED defined in symbol.h
      uses enumvalue TYPE_FOULED defined in evaluate.c
      uses enumvalue SYM_NODE defined in symbol.h
      uses enumvalue SYM_TYPEOF defined in symbol.h
      uses function evaluate_expression(struct expression *) defined in evaluate.c
      uses enumvalue SYM_ENUM defined in symbol.h
      uses variable expression::base defined in expression.h
      uses enumvalue SYM_BASETYPE defined in symbol.h
      uses variable fp_type defined in symbol.c
      uses enumvalue TYPE_FLOAT defined in evaluate.c
   function is_string_type(struct symbol *) in line 379
      protection public
      6 lines of code
      1 parameters
      2 conditional paths
      uses enumvalue SYM_NODE defined in symbol.h
      uses enumvalue SYM_ARRAY defined in symbol.h
   function bad_expr_type(struct expression *) in line 386
      protection public
      20 lines of code
      1 parameters
      5 conditional paths
      uses function sparse_error(struct position,const char *,...) defined in lib.c
      uses variable expression::pos defined in expression.h
      uses function show_special(int) defined in token.h
      uses variable expression::op defined in expression.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_BINOP defined in expression.h
      uses enumvalue EXPR_COMPARE defined in expression.h
      uses function info(struct position,const char *,...) defined in lib.c
      uses function show_typename(struct symbol *) defined in show-parse.c
      uses variable expression::left defined in expression.h
      uses variable expression::ctype defined in expression.h
      uses variable expression::right defined in expression.h
      uses enumvalue EXPR_PREOP defined in expression.h
      uses enumvalue EXPR_POSTOP defined in expression.h
      uses variable expression::unop defined in expression.h
      uses variable expression::flags defined in expression.h
   function restricted_value(struct expression *,struct symbol *) in line 407
      protection public
      8 lines of code
      2 parameters
      3 conditional paths
      uses function v(int,...) defined in builtin_va_arg_pack.c
      uses enumvalue EXPR_VALUE defined in expression.h
   function restricted_binop(int,struct symbol *) in line 416
      protection public
      20 lines of code
      2 parameters
      11 conditional paths
      uses function op(void) defined in loop2.c
      uses enumvalue SPECIAL_AND_ASSIGN defined in token.h
      uses enumvalue SPECIAL_OR_ASSIGN defined in token.h
      uses enumvalue SPECIAL_XOR_ASSIGN defined in token.h
      uses enumvalue SPECIAL_EQUAL defined in token.h
      uses enumvalue SPECIAL_NOTEQUAL defined in token.h
   function restricted_unop(int,struct symbol **) in line 437
      protection public
      10 lines of code
      2 parameters
      4 conditional paths
      uses function op(void) defined in loop2.c
      uses variable bits_in_int defined in target.c
      uses function befoul(struct symbol *) defined in symbol.c
   function unfoul(struct symbol *) in line 449
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::base_type defined in struct.c
   function restricted_binop_type(int,struct expression *,struct expression *,int,int,struct symbol *,struct symbol *) in line 454
      protection public
      44 lines of code
      7 parameters
      16 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses enumvalue TYPE_RESTRICT defined in evaluate.c
      uses enumvalue TYPE_FOULED defined in evaluate.c
      uses function unfoul(struct symbol *) defined in evaluate.c
      uses function restricted_value(struct expression *,struct symbol *) defined in evaluate.c
      uses function restricted_binop(int,struct symbol *) defined in evaluate.c
      uses function op(void) defined in loop2.c
      uses variable symbol::ctype defined in struct.c
   function unrestrict(struct expression *,int,struct symbol **) in line 499
      protection public
      11 lines of code
      3 parameters
      3 conditional paths
      uses enumvalue TYPE_RESTRICT defined in evaluate.c
      uses enumvalue TYPE_FOULED defined in evaluate.c
      uses function unfoul(struct symbol *) defined in evaluate.c
      uses function warning(struct position,const char *,...) defined in lib.c
      uses variable expression::pos defined in expression.h
      uses function show_typename(struct symbol *) defined in show-parse.c
      uses variable ctype::base_type defined in struct.c
   function usual_conversions(int,struct expression *,struct expression *,int,int,struct symbol *,struct symbol *) in line 511
      protection public
      41 lines of code
      7 parameters
      9 conditional paths
      uses variable symbol::ctype defined in struct.c
      uses function warn_for_different_enum_types(struct position,struct symbol *,struct symbol *) defined in evaluate.c
      uses variable expression::pos defined in expression.h
      uses variable expression::ctype defined in expression.h
      uses enumvalue TYPE_RESTRICT defined in evaluate.c
      uses enumvalue TYPE_FLOAT defined in evaluate.c
      uses function bigger_int_type(struct symbol *,struct symbol *) defined in evaluate.c
      uses variable ctype::modifiers defined in struct.c
      uses macro definition MOD_LONG_ALL defined in symbol.h
      uses function restricted_binop_type(int,struct expression *,struct expression *,int,int,struct symbol *,struct symbol *) defined in evaluate.c
      uses function op(void) defined in loop2.c
      uses function unrestrict(struct expression *,int,struct symbol **) defined in evaluate.c
   function lvalue_expression(struct expression *) in line 553
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_PREOP defined in expression.h
      uses variable expression::op defined in expression.h
   function evaluate_ptr_add(struct expression *,struct symbol *) in line 558
      protection public
      65 lines of code
      2 parameters
      9 conditional paths
      uses variable expression::index defined in expression.h
      uses variable expression::right defined in expression.h
      uses variable symbol::ctype defined in struct.c
      uses function classify_type(struct symbol *,struct symbol **) defined in evaluate.c
      uses function degenerate(struct expression *) defined in evaluate.c
      uses variable expression::left defined in expression.h
      uses function examine_pointer_target(struct symbol *) defined in symbol.c
      uses function expression_error(struct expression *,const char *,...) defined in lib.c
      uses macro definition NULL defined in sm_implied3.c
      uses variable symbol::bit_size defined in struct.c
      uses variable null_ctype defined in symbol.c
      uses variable expression::ctype defined in expression.h
      uses variable bits_in_pointer defined in target.c
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_VALUE defined in expression.h
      uses variable expression::pos defined in expression.h
      uses function v(int,...) defined in builtin_va_arg_pack.c
      uses variable expression::value defined in expression.h
      uses variable ssize_t_ctype defined in target.c
      uses function cast_to(struct expression *,struct symbol *) defined in evaluate.c
      uses enumvalue EXPR_BINOP defined in expression.h
      uses function examine_fn_arguments(struct symbol *) defined in evaluate.c
   function examine_fn_arguments(struct symbol *) in line 624
      protection public
      34 lines of code
      1 parameters
      5 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses function evaluate_symbol(struct symbol *) defined in evaluate.c
      uses variable ptr defined in sm_null_deref2.c
      uses enumvalue SYM_ARRAY defined in symbol.h
      uses enumvalue SYM_FN defined in symbol.h
      uses function alloc_symbol(struct position,int) defined in symbol.c
      uses enumvalue SYM_PTR defined in symbol.h
      uses macro definition MOD_PTRINHERIT defined in symbol.h
      uses variable null_attr defined in symbol.c
      uses function examine_symbol_type(struct symbol *) defined in symbol.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function type_difference(struct ctype *,struct ctype *,unsigned long,unsigned long) in line 628
      protection public
      158 lines of code
      4 parameters
      1 conditional paths
      uses variable ctype::attribute defined in struct.c
      uses variable attribute::as defined in symbol.h
      uses variable ctype::base_type defined in struct.c
      uses variable ctype::modifiers defined in struct.c
      uses variable symbol::ctype defined in struct.c
      uses variable symbol::type defined in struct.c
      uses enumvalue SYM_PTR defined in symbol.h
      uses enumvalue SYM_NODE defined in symbol.h
      uses enumvalue SYM_ENUM defined in symbol.h
      uses function sparse_error(struct position,const char *,...) defined in lib.c
      uses variable symbol::pos defined in struct.c
      uses enumvalue SYM_RESTRICT defined in symbol.h
      uses enumvalue SYM_UNION defined in symbol.h
      uses enumvalue SYM_STRUCT defined in symbol.h
      uses variable symbol::ident defined in struct.c
      uses macro definition NULL defined in sm_implied3.c
      uses enumvalue SYM_ARRAY defined in symbol.h
      uses macro definition MOD_IGNORE defined in symbol.h
      uses macro definition MOD_SPECIFIER defined in symbol.h
      uses function examine_pointer_target(struct symbol *) defined in symbol.c
      uses enumvalue SYM_FN defined in symbol.h
      uses macro definition MOD_SIGNEDNESS defined in symbol.h
      uses variable symbol::variadic defined in struct.c
      uses function examine_fn_arguments(struct symbol *) defined in evaluate.c
      uses macro definition PREPARE_PTR_LIST defined in ptrlist.h
      uses variable symbol::arguments defined in struct.c
      uses function type_difference(struct ctype *,struct ctype *,unsigned long,unsigned long) defined in evaluate.c
      uses macro definition MOD_IGN defined in evaluate.c
      uses function sprintf(char *,char *,char *) defined in sm_overflow6.c
      uses macro definition NEXT_PTR_LIST defined in ptrlist.h
      uses macro definition FINISH_PTR_LIST defined in ptrlist.h
      uses enumvalue SYM_BASETYPE defined in symbol.h
      uses macro definition MOD_SIZE defined in symbol.h
   function bad_null(struct expression *) in line 787
      protection public
      5 lines of code
      1 parameters
      2 conditional paths
      uses variable Wnon_pointer_null defined in lib.c
      uses function warning(struct position,const char *,...) defined in lib.c
      uses variable expression::pos defined in expression.h
   function target_qualifiers(struct symbol *) in line 793
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses macro definition MOD_IGN defined in evaluate.c
      uses enumvalue SYM_ARRAY defined in symbol.h
   function evaluate_ptr_sub(struct expression *) in line 801
      protection public
      51 lines of code
      1 parameters
      6 conditional paths
      uses variable l defined in sm_casts4.c
      uses variable expression::left defined in expression.h
      uses variable r defined in cond_expr2.c
      uses variable expression::right defined in expression.h
      uses function classify_type(struct symbol *,struct symbol **) defined in evaluate.c
      uses function degenerate(struct expression *) defined in evaluate.c
      uses function examine_pointer_target(struct symbol *) defined in symbol.c
      uses function type_difference(struct ctype *,struct ctype *,unsigned long,unsigned long) defined in evaluate.c
      uses variable symbol::ctype defined in struct.c
      uses function target_qualifiers(struct symbol *) defined in evaluate.c
      uses function expression_error(struct expression *,const char *,...) defined in lib.c
      uses macro definition NULL defined in sm_implied3.c
      uses variable expression::ctype defined in expression.h
      uses variable ssize_t_ctype defined in target.c
      uses variable symbol::bit_size defined in struct.c
      uses variable bits_in_char defined in target.c
      uses macro definition sub defined in sm_macros.c
      uses variable expression::pos defined in expression.h
      uses enumvalue EXPR_BINOP defined in expression.h
      uses enumvalue EXPR_VALUE defined in expression.h
      uses variable size_t_ctype defined in target.c
      uses variable expression::value defined in expression.h
      uses variable Wptr_subtraction_blows defined in lib.c
      uses function warning(struct position,const char *,...) defined in lib.c
   function evaluate_conditional(struct expression *,int) in line 855
      protection public
      18 lines of code
      2 parameters
      5 conditional paths
      uses variable symbol::ctype defined in struct.c
      uses macro definition NULL defined in sm_implied3.c
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_ASSIGNMENT defined in expression.h
      uses variable expression::op defined in expression.h
      uses function warning(struct position,const char *,...) defined in lib.c
      uses variable expression::pos defined in expression.h
      uses function evaluate_expression(struct expression *) defined in evaluate.c
      uses macro definition is_safe_type defined in evaluate.c
   function evaluate_logical(struct expression *) in line 874
      protection public
      15 lines of code
      1 parameters
      5 conditional paths
      uses function evaluate_conditional(struct expression *,int) defined in evaluate.c
      uses variable expression::left defined in expression.h
      uses macro definition NULL defined in sm_implied3.c
      uses variable expression::right defined in expression.h
      uses variable expression::ctype defined in expression.h
      uses variable expression::flags defined in expression.h
      uses enumvalue Int_const_expr defined in expression.h
   function evaluate_binop(struct expression *) in line 890
      protection public
      73 lines of code
      1 parameters
      14 conditional paths
      uses variable symbol::ctype defined in struct.c
      uses function classify_type(struct symbol *,struct symbol **) defined in evaluate.c
      uses variable expression::left defined in expression.h
      uses variable expression::ctype defined in expression.h
      uses variable expression::right defined in expression.h
      uses function op(void) defined in loop2.c
      uses variable expression::op defined in expression.h
      uses variable expression::flags defined in expression.h
      uses enumvalue Int_const_expr defined in expression.h
      uses enumvalue TYPE_NUM defined in evaluate.c
      uses enumvalue TYPE_FLOAT defined in evaluate.c
      uses function bad_expr_type(struct expression *) defined in evaluate.c
      uses enumvalue SPECIAL_LEFTSHIFT defined in token.h
      uses enumvalue SPECIAL_RIGHTSHIFT defined in token.h
      uses function unrestrict(struct expression *,int,struct symbol **) defined in evaluate.c
      uses function integer_promotion(struct symbol *) defined in evaluate.c
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_PREOP defined in expression.h
      uses function warning(struct position,const char *,...) defined in lib.c
      uses variable expression::pos defined in expression.h
      uses function usual_conversions(int,struct expression *,struct expression *,int,int,struct symbol *,struct symbol *) defined in evaluate.c
      uses function cast_to(struct expression *,struct symbol *) defined in evaluate.c
      uses enumvalue TYPE_PTR defined in evaluate.c
      uses macro definition is_int defined in evaluate.c
      uses function evaluate_ptr_add(struct expression *,struct symbol *) defined in evaluate.c
      uses variable expression::index defined in expression.h
      uses function evaluate_ptr_sub(struct expression *) defined in evaluate.c
   function evaluate_comma(struct expression *) in line 964
      protection public
      8 lines of code
      1 parameters
      2 conditional paths
      uses variable expression::ctype defined in expression.h
      uses function degenerate(struct expression *) defined in evaluate.c
      uses variable expression::right defined in expression.h
      uses variable null_ctype defined in symbol.c
      uses variable expression::flags defined in expression.h
      uses variable expression::left defined in expression.h
   function modify_for_unsigned(int) in line 973
      protection public
      12 lines of code
      1 parameters
      5 conditional paths
      uses function op(void) defined in loop2.c
      uses enumvalue SPECIAL_UNSIGNED_LT defined in token.h
      uses enumvalue SPECIAL_UNSIGNED_GT defined in token.h
      uses enumvalue SPECIAL_LTE defined in token.h
      uses enumvalue SPECIAL_UNSIGNED_LTE defined in token.h
      uses enumvalue SPECIAL_GTE defined in token.h
      uses enumvalue SPECIAL_UNSIGNED_GTE defined in token.h
   function is_null_pointer_constant(struct expression *) in line 986
      protection public
      8 lines of code
      1 parameters
      3 conditional paths
      uses variable null_ctype defined in symbol.c
      uses enumvalue Int_const_expr defined in expression.h
      uses function is_zero_constant(struct expression *) defined in expand.c
   function evaluate_compare(struct expression *) in line 995
      protection public
      95 lines of code
      1 parameters
      28 conditional paths
      uses variable expression::left defined in expression.h
      uses variable expression::right defined in expression.h
      uses function classify_type(struct symbol *,struct symbol **) defined in evaluate.c
      uses function degenerate(struct expression *) defined in evaluate.c
      uses variable symbol::ctype defined in struct.c
      uses variable expression::flags defined in expression.h
      uses enumvalue Int_const_expr defined in expression.h
      uses macro definition is_safe_type defined in evaluate.c
      uses variable expression::ctype defined in expression.h
      uses function warning(struct position,const char *,...) defined in lib.c
      uses variable expression::pos defined in expression.h
      uses enumvalue TYPE_NUM defined in evaluate.c
      uses function usual_conversions(int,struct expression *,struct expression *,int,int,struct symbol *,struct symbol *) defined in evaluate.c
      uses variable expression::op defined in expression.h
      uses function cast_to(struct expression *,struct symbol *) defined in evaluate.c
      uses variable ctype::modifiers defined in struct.c
      uses macro definition MOD_UNSIGNED defined in symbol.h
      uses function modify_for_unsigned(int) defined in evaluate.c
      uses enumvalue TYPE_PTR defined in evaluate.c
      uses function bad_expr_type(struct expression *) defined in evaluate.c
      uses enumvalue SPECIAL_EQUAL defined in token.h
      uses enumvalue SPECIAL_NOTEQUAL defined in token.h
      uses function is_null_pointer_constant(struct expression *) defined in evaluate.c
      uses function bad_null(struct expression *) defined in evaluate.c
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_VALUE defined in expression.h
      uses variable expression::value defined in expression.h
      uses function examine_pointer_target(struct symbol *) defined in symbol.c
      uses variable ctype::attribute defined in struct.c
      uses variable attribute::as defined in symbol.h
      uses function type_difference(struct ctype *,struct ctype *,unsigned long,unsigned long) defined in evaluate.c
      uses function target_qualifiers(struct symbol *) defined in evaluate.c
      uses function expression_error(struct expression *,const char *,...) defined in lib.c
      uses macro definition NULL defined in sm_implied3.c
   function evaluate_conditional_expression(struct expression *) in line 1098
      protection public
      127 lines of code
      1 parameters
      33 conditional paths
      uses variable symbol::ctype defined in struct.c
      uses function evaluate_conditional(struct expression *,int) defined in evaluate.c
      uses variable expression::conditional defined in expression.h
      uses macro definition NULL defined in sm_implied3.c
      uses function evaluate_expression(struct expression *) defined in evaluate.c
      uses variable expression::cond_false defined in expression.h
      uses function degenerate(struct expression *) defined in evaluate.c
      uses variable expression::cond_true defined in expression.h
      uses variable expression::flags defined in expression.h
      uses enumvalue Int_const_expr defined in expression.h
      uses function classify_type(struct symbol *,struct symbol **) defined in evaluate.c
      uses enumvalue TYPE_NUM defined in evaluate.c
      uses function usual_conversions(int,struct expression *,struct expression *,int,int,struct symbol *,struct symbol *) defined in evaluate.c
      uses function cast_to(struct expression *,struct symbol *) defined in evaluate.c
      uses enumvalue TYPE_PTR defined in evaluate.c
      uses function is_null_pointer_constant(struct expression *) defined in evaluate.c
      uses function bad_null(struct expression *) defined in evaluate.c
      uses variable ctype::attribute defined in struct.c
      uses variable attribute::as defined in symbol.h
      uses function examine_pointer_target(struct symbol *) defined in symbol.c
      uses function target_qualifiers(struct symbol *) defined in evaluate.c
      uses function type_difference(struct ctype *,struct ctype *,unsigned long,unsigned long) defined in evaluate.c
      uses function expression_error(struct expression *,const char *,...) defined in lib.c
      uses variable expression::ctype defined in expression.h
      uses variable ctype::modifiers defined in struct.c
      uses variable sym defined in smatch_type.c
      uses function alloc_symbol(struct position,int) defined in symbol.c
      uses enumvalue SYM_PTR defined in symbol.h
   function compatible_float_op(int) in line 1227
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses function op(void) defined in loop2.c
      uses enumvalue SPECIAL_ADD_ASSIGN defined in token.h
      uses enumvalue SPECIAL_SUB_ASSIGN defined in token.h
      uses enumvalue SPECIAL_MUL_ASSIGN defined in token.h
      uses enumvalue SPECIAL_DIV_ASSIGN defined in token.h
   function evaluate_assign_op(struct expression *) in line 1235
      protection public
      54 lines of code
      1 parameters
      13 conditional paths
      uses variable expression::left defined in expression.h
      uses variable expression::ctype defined in expression.h
      uses variable expression::right defined in expression.h
      uses function classify_type(struct symbol *,struct symbol **) defined in evaluate.c
      uses function op(void) defined in loop2.c
      uses variable expression::op defined in expression.h
      uses enumvalue TYPE_NUM defined in evaluate.c
      uses enumvalue TYPE_FLOAT defined in evaluate.c
      uses function compatible_float_op(int) defined in evaluate.c
      uses function expression_error(struct expression *,const char *,...) defined in lib.c
      uses enumvalue TYPE_RESTRICT defined in evaluate.c
      uses function restricted_binop(int,struct symbol *) defined in evaluate.c
      uses function warning(struct position,const char *,...) defined in lib.c
      uses variable expression::pos defined in expression.h
      uses function show_special(int) defined in token.h
      uses function show_typename(struct symbol *) defined in show-parse.c
      uses function cast_to(struct expression *,struct symbol *) defined in evaluate.c
      uses enumvalue TYPE_FOULED defined in evaluate.c
      uses function unfoul(struct symbol *) defined in evaluate.c
      uses function restricted_value(struct expression *,struct symbol *) defined in evaluate.c
      uses function info(struct position,const char *,...) defined in lib.c
      uses enumvalue TYPE_PTR defined in evaluate.c
      uses macro definition is_int defined in evaluate.c
      uses enumvalue SPECIAL_ADD_ASSIGN defined in token.h
      uses enumvalue SPECIAL_SUB_ASSIGN defined in token.h
      uses function unrestrict(struct expression *,int,struct symbol **) defined in evaluate.c
      uses function evaluate_ptr_add(struct expression *,struct symbol *) defined in evaluate.c
   function whitelist_pointers(struct symbol *,struct symbol *) in line 1290
      protection public
      20 lines of code
      2 parameters
      9 conditional paths
      uses function classify_type(struct symbol *,struct symbol **) defined in evaluate.c
      uses enumvalue TYPE_NUM defined in evaluate.c
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::modifiers defined in struct.c
      uses macro definition MOD_CHAR defined in symbol.h
      uses macro definition MOD_SIZE defined in symbol.h
      uses variable Wtypesign defined in lib.c
   function check_assignment_types(struct symbol *,struct expression **,const char **) in line 1311
      protection public
      81 lines of code
      3 parameters
      23 conditional paths
      uses function degenerate(struct expression *) defined in evaluate.c
      uses function classify_type(struct symbol *,struct symbol **) defined in evaluate.c
      uses enumvalue TYPE_NUM defined in evaluate.c
      uses enumvalue TYPE_RESTRICT defined in evaluate.c
      uses enumvalue TYPE_FOULED defined in evaluate.c
      uses function unfoul(struct symbol *) defined in evaluate.c
      uses function restricted_value(struct expression *,struct symbol *) defined in evaluate.c
      uses enumvalue TYPE_PTR defined in evaluate.c
      uses function is_null_pointer_constant(struct expression *) defined in evaluate.c
      uses function bad_null(struct expression *) defined in evaluate.c
      uses function examine_pointer_target(struct symbol *) defined in symbol.c
      uses function target_qualifiers(struct symbol *) defined in evaluate.c
      uses function whitelist_pointers(struct symbol *,struct symbol *) defined in evaluate.c
      uses function type_difference(struct ctype *,struct ctype *,unsigned long,unsigned long) defined in evaluate.c
      uses enumvalue TYPE_COMPOUND defined in evaluate.c
      uses function cast_to(struct expression *,struct symbol *) defined in evaluate.c
   function compatible_assignment_types(struct expression *,struct symbol *,struct expression **,const char *) in line 1393
      protection public
      16 lines of code
      4 parameters
      2 conditional paths
      uses function degenerate(struct expression *) defined in evaluate.c
      uses function check_assignment_types(struct symbol *,struct expression **,const char **) defined in evaluate.c
      uses function warning(struct position,const char *,...) defined in lib.c
      uses variable expression::pos defined in expression.h
      uses function info(struct position,const char *,...) defined in lib.c
      uses function show_typename(struct symbol *) defined in show-parse.c
      uses function cast_to(struct expression *,struct symbol *) defined in evaluate.c
   function compatible_transparent_union(struct symbol *,struct expression **) in line 1410
      protection public
      16 lines of code
      2 parameters
      3 conditional paths
      uses variable member defined in smdb.py
      uses function classify_type(struct symbol *,struct symbol **) defined in evaluate.c
      uses enumvalue SYM_UNION defined in symbol.h
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses function check_assignment_types(struct symbol *,struct expression **,const char **) defined in evaluate.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function compatible_argument_type(struct expression *,struct symbol *,struct expression **,const char *) in line 1427
      protection public
      8 lines of code
      4 parameters
      2 conditional paths
      uses function compatible_transparent_union(struct symbol *,struct expression **) defined in evaluate.c
      uses function compatible_assignment_types(struct expression *,struct symbol *,struct expression **,const char *) defined in evaluate.c
   function mark_assigned(struct expression *) in line 1436
      protection public
      32 lines of code
      1 parameters
      9 conditional paths
      uses variable sym defined in smatch_type.c
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_SYMBOL defined in expression.h
      uses variable expression::symbol defined in expression.h
      uses variable symbol::type defined in struct.c
      uses enumvalue SYM_NODE defined in symbol.h
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::modifiers defined in struct.c
      uses macro definition MOD_ASSIGNED defined in symbol.h
      uses enumvalue EXPR_BINOP defined in expression.h
      uses variable expression::left defined in expression.h
      uses variable expression::right defined in expression.h
      uses enumvalue EXPR_CAST defined in expression.h
      uses enumvalue EXPR_FORCE_CAST defined in expression.h
      uses variable expression::cast_expression defined in expression.h
      uses enumvalue EXPR_SLICE defined in expression.h
      uses variable expression::base defined in expression.h
   function evaluate_assign_to(struct expression *,struct symbol *) in line 1469
      protection public
      8 lines of code
      2 parameters
      2 conditional paths
      uses macro definition MOD_CONST defined in symbol.h
      uses function expression_error(struct expression *,const char *,...) defined in lib.c
      uses function mark_assigned(struct expression *) defined in evaluate.c
      uses variable expression::unop defined in expression.h
   function evaluate_assignment(struct expression *) in line 1478
      protection public
      26 lines of code
      1 parameters
      5 conditional paths
      uses variable expression::left defined in expression.h
      uses function lvalue_expression(struct expression *) defined in evaluate.c
      uses function expression_error(struct expression *,const char *,...) defined in lib.c
      uses macro definition NULL defined in sm_implied3.c
      uses variable expression::ctype defined in expression.h
      uses variable expression::op defined in expression.h
      uses function evaluate_assign_op(struct expression *) defined in evaluate.c
      uses function compatible_assignment_types(struct expression *,struct symbol *,struct expression **,const char *) defined in evaluate.c
      uses variable expression::right defined in expression.h
      uses function evaluate_assign_to(struct expression *,struct symbol *) defined in evaluate.c
   function convert_to_as_mod(struct symbol *,int,int) in line 1540
      protection public
      13 lines of code
      3 parameters
      2 conditional paths
      uses variable sym defined in smatch_type.c
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::modifiers defined in struct.c
      uses variable ctype::attribute defined in struct.c
      uses variable attribute::as defined in symbol.h
      uses function alloc_symbol(struct position,int) defined in symbol.c
      uses variable symbol::pos defined in struct.c
      uses enumvalue SYM_NODE defined in symbol.h
   function create_pointer(struct expression *,struct symbol *,int) in line 1554
      protection public
      31 lines of code
      3 parameters
      4 conditional paths
      uses function alloc_symbol(struct position,int) defined in symbol.c
      uses variable expression::pos defined in expression.h
      uses enumvalue SYM_NODE defined in symbol.h
      uses variable ptr defined in sm_null_deref2.c
      uses enumvalue SYM_PTR defined in symbol.h
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::base_type defined in struct.c
      uses variable bits_in_pointer defined in target.c
      uses variable pointer_alignment defined in target.c
      uses variable symbol::bit_size defined in struct.c
      uses variable ctype::alignment defined in struct.c
      uses function access_symbol(struct symbol *) defined in symbol.c
      uses variable sym defined in smatch_type.c
      uses variable ctype::modifiers defined in struct.c
      uses macro definition MOD_REGISTER defined in symbol.h
      uses function warning(struct position,const char *,...) defined in lib.c
      uses function show_ident(const struct ident *) defined in token.h
      uses variable symbol::ident defined in struct.c
      uses variable symbol::type defined in struct.c
      uses macro definition MOD_PTRINHERIT defined in symbol.h
      uses function degenerate(struct expression *) defined in evaluate.c
      uses enumvalue SYM_ARRAY defined in symbol.h
   function evaluate_addressof(struct expression *) in line 1665
      protection public
      29 lines of code
      1 parameters
      4 conditional paths
      uses function op(void) defined in loop2.c
      uses variable expression::unop defined in expression.h
      uses variable symbol::ctype defined in struct.c
      uses enumvalue EXPR_PREOP defined in expression.h
      uses function expression_error(struct expression *,const char *,...) defined in lib.c
      uses macro definition NULL defined in sm_implied3.c
      uses variable expression::flags defined in expression.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_SYMBOL defined in expression.h
      uses variable sym defined in smatch_type.c
      uses variable expression::symbol defined in expression.h
      uses variable ctype::modifiers defined in struct.c
      uses macro definition MOD_ADDRESSABLE defined in symbol.h
      uses variable expression::ctype defined in expression.h
      uses function create_pointer(struct expression *,struct symbol *,int) defined in evaluate.c
   function evaluate_dereference(struct expression *) in line 1696
      protection public
      52 lines of code
      1 parameters
      6 conditional paths
      uses function op(void) defined in loop2.c
      uses variable expression::unop defined in expression.h
      uses enumvalue EXPR_PREOP defined in expression.h
      uses variable expression::flags defined in expression.h
      uses variable expression::ctype defined in expression.h
      uses variable ctype::type defined in struct.c
      uses enumvalue SYM_NODE defined in symbol.h
      uses variable ctype::base_type defined in struct.c
      uses function alloc_symbol(struct position,int) defined in symbol.c
      uses variable expression::pos defined in expression.h
      uses function expression_error(struct expression *,const char *,...) defined in lib.c
      uses macro definition NULL defined in sm_implied3.c
      uses enumvalue SYM_PTR defined in symbol.h
      uses macro definition MOD_SPECIFIER defined in symbol.h
      uses function merge_type(struct symbol *,struct symbol *) defined in symbol.c
      uses enumvalue SYM_ARRAY defined in symbol.h
      uses function lvalue_expression(struct expression *) defined in evaluate.c
   function evaluate_postop(struct expression *) in line 1752
      protection public
      37 lines of code
      1 parameters
      8 conditional paths
      uses function op(void) defined in loop2.c
      uses variable expression::unop defined in expression.h
      uses function classify_type(struct symbol *,struct symbol **) defined in evaluate.c
      uses enumvalue TYPE_COMPOUND defined in evaluate.c
      uses function expression_error(struct expression *,const char *,...) defined in lib.c
      uses macro definition NULL defined in sm_implied3.c
      uses function lvalue_expression(struct expression *) defined in evaluate.c
      uses enumvalue TYPE_RESTRICT defined in evaluate.c
      uses function restricted_unop(int,struct symbol **) defined in evaluate.c
      uses variable expression::op defined in expression.h
      uses function unrestrict(struct expression *,int,struct symbol **) defined in evaluate.c
      uses enumvalue TYPE_NUM defined in evaluate.c
      uses enumvalue TYPE_PTR defined in evaluate.c
      uses function examine_pointer_target(struct symbol *) defined in symbol.c
      uses variable symbol::bit_size defined in struct.c
      uses function evaluate_assign_to(struct expression *,struct symbol *) defined in evaluate.c
      uses variable expression::op_value defined in expression.h
      uses variable expression::ctype defined in expression.h
      uses variable symbol::ctype defined in struct.c
   function evaluate_sign(struct expression *) in line 1790
      protection public
      29 lines of code
      1 parameters
      9 conditional paths
      uses variable expression::unop defined in expression.h
      uses variable expression::ctype defined in expression.h
      uses function classify_type(struct symbol *,struct symbol **) defined in evaluate.c
      uses variable expression::flags defined in expression.h
      uses enumvalue Int_const_expr defined in expression.h
      uses enumvalue TYPE_NUM defined in evaluate.c
      uses function bad_expr_type(struct expression *) defined in evaluate.c
      uses enumvalue TYPE_RESTRICT defined in evaluate.c
      uses enumvalue TYPE_FLOAT defined in evaluate.c
      uses function integer_promotion(struct symbol *) defined in evaluate.c
      uses function cast_to(struct expression *,struct symbol *) defined in evaluate.c
      uses variable expression::op defined in expression.h
      uses function restricted_unop(int,struct symbol **) defined in evaluate.c
      uses function unrestrict(struct expression *,int,struct symbol **) defined in evaluate.c
   function evaluate_preop(struct expression *) in line 1820
      protection public
      55 lines of code
      1 parameters
      14 conditional paths
      uses variable expression::unop defined in expression.h
      uses variable expression::ctype defined in expression.h
      uses variable expression::op defined in expression.h
      uses variable symbol::ctype defined in struct.c
      uses function evaluate_sign(struct expression *) defined in evaluate.c
      uses function evaluate_dereference(struct expression *) defined in evaluate.c
      uses function evaluate_addressof(struct expression *) defined in evaluate.c
      uses enumvalue SPECIAL_INCREMENT defined in token.h
      uses enumvalue SPECIAL_DECREMENT defined in token.h
      uses function evaluate_postop(struct expression *) defined in evaluate.c
      uses variable expression::flags defined in expression.h
      uses enumvalue Int_const_expr defined in expression.h
      uses macro definition is_safe_type defined in evaluate.c
      uses function warning(struct position,const char *,...) defined in lib.c
      uses variable expression::pos defined in expression.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_COMPARE defined in expression.h
      uses enumvalue SPECIAL_EQUAL defined in token.h
      uses variable expression::left defined in expression.h
      uses variable expression::right defined in expression.h
      uses enumvalue EXPR_FVALUE defined in expression.h
      uses variable expression::fvalue defined in expression.h
      uses macro definition is_fouled_type defined in symbol.h
      uses function show_typename(struct symbol *) defined in show-parse.c
      uses variable ctype::base_type defined in struct.c
   function find_identifier(struct ident *,struct symbol_list *,int *) in line 1876
      protection public
      33 lines of code
      3 parameters
      8 conditional paths
      uses variable ptr_list::list defined in ptrlist.h
      uses macro definition NULL defined in sm_implied3.c
      uses variable sym defined in smatch_type.c
      uses variable symbol::ident defined in struct.c
      uses variable offset defined in sm_implied10.c
      uses variable symbol::offset defined in struct.c
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::base_type defined in struct.c
      uses macro definition sub defined in sm_macros.c
      uses variable ctype::type defined in struct.c
      uses enumvalue SYM_UNION defined in symbol.h
      uses enumvalue SYM_STRUCT defined in symbol.h
      uses variable ptr_list::next defined in ptrlist.h
   function evaluate_offset(struct expression *,unsigned long) in line 1910
      protection public
      27 lines of code
      2 parameters
      1 conditional paths
      uses macro definition add defined in sm_macros.c
      uses variable expression::pos defined in expression.h
      uses enumvalue EXPR_BINOP defined in expression.h
      uses enumvalue EXPR_VALUE defined in expression.h
      uses variable offset defined in sm_implied10.c
   function evaluate_member_dereference(struct expression *) in line 1939
      protection public
      83 lines of code
      1 parameters
      10 conditional paths
      uses variable offset defined in sm_implied10.c
      uses variable symbol::ctype defined in struct.c
      uses variable member defined in smdb.py
      uses variable expression::deref defined in expression.h
      uses macro definition add defined in sm_macros.c
      uses variable expression::member defined in expression.h
      uses function evaluate_expression(struct expression *) defined in evaluate.c
      uses macro definition NULL defined in sm_implied3.c
      uses function expression_error(struct expression *,const char *,...) defined in lib.c
      uses function examine_symbol_type(struct symbol *) defined in symbol.c
      uses variable ctype::attribute defined in struct.c
      uses variable attribute::as defined in symbol.h
      uses variable ctype::modifiers defined in struct.c
      uses variable ctype::type defined in struct.c
      uses enumvalue SYM_NODE defined in symbol.h
      uses variable ctype::base_type defined in struct.c
      uses enumvalue SYM_STRUCT defined in symbol.h
      uses enumvalue SYM_UNION defined in symbol.h
      uses function find_identifier(struct ident *,struct symbol_list *,int *) defined in evaluate.c
      uses variable name defined in smatch_type.c
      uses function show_ident(const struct ident *) defined in token.h
      uses function convert_to_as_mod(struct symbol *,int,int) defined in evaluate.c
      uses function lvalue_expression(struct expression *) defined in evaluate.c
      uses enumvalue EXPR_SLICE defined in expression.h
      uses variable expression::base defined in expression.h
      uses variable expression::r_bitpos defined in expression.h
      uses variable expression::type defined in expression.h
      uses variable expression::r_nrbits defined in expression.h
      uses variable expression::ctype defined in expression.h
      uses function evaluate_offset(struct expression *,unsigned long) defined in evaluate.c
      uses enumvalue EXPR_PREOP defined in expression.h
      uses variable expression::op defined in expression.h
      uses variable expression::unop defined in expression.h
   function is_promoted(struct expression *) in line 2023
      protection public
      28 lines of code
      1 parameters
      11 conditional paths
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_BINOP defined in expression.h
      uses enumvalue EXPR_SELECT defined in expression.h
      uses enumvalue EXPR_CONDITIONAL defined in expression.h
      uses enumvalue EXPR_COMMA defined in expression.h
      uses variable expression::right defined in expression.h
      uses enumvalue EXPR_PREOP defined in expression.h
      uses variable expression::op defined in expression.h
      uses variable expression::unop defined in expression.h
      uses function evaluate_cast(struct expression *) defined in evaluate.c
   function evaluate_cast(struct expression *) in line 2053
      protection public
      131 lines of code
      1 parameters
      27 conditional paths
      uses variable expression::cast_expression defined in expression.h
      uses variable symbol::ctype defined in struct.c
      uses macro definition NULL defined in sm_implied3.c
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_INITIALIZER defined in expression.h
      uses variable sym defined in smatch_type.c
      uses variable expression::cast_type defined in expression.h
      uses variable expression::pos defined in expression.h
      uses enumvalue EXPR_SYMBOL defined in expression.h
      uses variable symbol::initializer defined in struct.c
      uses function evaluate_symbol(struct symbol *) defined in evaluate.c
      uses variable expression::ctype defined in expression.h
      uses variable expression::symbol defined in expression.h
      uses enumvalue EXPR_PREOP defined in expression.h
      uses variable expression::op defined in expression.h
      uses variable expression::unop defined in expression.h
      uses function examine_symbol_type(struct symbol *) defined in symbol.c
      uses function evaluate_expression(struct expression *) defined in evaluate.c
      uses function degenerate(struct expression *) defined in evaluate.c
      uses function classify_type(struct symbol *,struct symbol **) defined in evaluate.c
      uses macro definition is_int defined in evaluate.c
      uses variable expression::flags defined in expression.h
      uses enumvalue Int_const_expr defined in expression.h
      uses enumvalue TYPE_COMPOUND defined in evaluate.c
      uses enumvalue TYPE_FN defined in evaluate.c
      uses function warning(struct position,const char *,...) defined in lib.c
      uses function expression_error(struct expression *,const char *,...) defined in lib.c
      uses enumvalue EXPR_FORCE_CAST defined in expression.h
      uses enumvalue TYPE_FOULED defined in evaluate.c
      uses function unfoul(struct symbol *) defined in evaluate.c
      uses enumvalue TYPE_RESTRICT defined in evaluate.c
      uses function show_typename(struct symbol *) defined in show-parse.c
      uses enumvalue TYPE_PTR defined in evaluate.c
      uses function examine_pointer_target(struct symbol *) defined in symbol.c
      uses variable ctype::attribute defined in struct.c
      uses variable attribute::as defined in symbol.h
      uses function is_null_pointer_constant(struct expression *) defined in evaluate.c
      uses variable Wcast_to_as defined in lib.c
      uses variable ctype::modifiers defined in struct.c
      uses macro definition MOD_PTRINHERIT defined in symbol.h
      uses variable ctype::base_type defined in struct.c
      uses function is_zero_constant(struct expression *) defined in expand.c
      uses enumvalue EXPR_VALUE defined in expression.h
      uses variable null_ctype defined in symbol.c
      uses variable expression::value defined in expression.h
   function evaluate_type_information(struct expression *) in line 2055
      protection public
      25 lines of code
      1 parameters
      7 conditional paths
      uses variable sym defined in smatch_type.c
      uses variable expression::cast_type defined in expression.h
      uses function evaluate_expression(struct expression *) defined in evaluate.c
      uses variable expression::cast_expression defined in expression.h
      uses macro definition NULL defined in sm_implied3.c
      uses macro definition is_restricted_type defined in symbol.h
      uses variable symbol::bit_size defined in struct.c
      uses variable bits_in_int defined in target.c
      uses function is_promoted(struct expression *) defined in evaluate.c
      uses macro definition is_fouled_type defined in symbol.h
      uses function examine_symbol_type(struct symbol *) defined in symbol.c
      uses macro definition is_bitfield_type defined in symbol.h
      uses function expression_error(struct expression *,const char *,...) defined in lib.c
   function evaluate_sizeof(struct expression *) in line 2081
      protection public
      36 lines of code
      1 parameters
      7 conditional paths
      uses function evaluate_type_information(struct expression *) defined in evaluate.c
      uses macro definition NULL defined in sm_implied3.c
      uses function warning(struct position,const char *,...) defined in lib.c
      uses variable expression::pos defined in expression.h
      uses variable bits_in_char defined in target.c
      uses variable Wsizeof_bool defined in lib.c
      uses function expression_error(struct expression *,const char *,...) defined in lib.c
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_VALUE defined in expression.h
      uses variable expression::value defined in expression.h
      uses variable expression::taint defined in expression.h
      uses variable expression::ctype defined in expression.h
      uses variable size_t_ctype defined in target.c
   function evaluate_ptrsizeof(struct expression *) in line 2118
      protection public
      33 lines of code
      1 parameters
      8 conditional paths
      uses function evaluate_type_information(struct expression *) defined in evaluate.c
      uses macro definition NULL defined in sm_implied3.c
      uses enumvalue SYM_NODE defined in symbol.h
      uses enumvalue SYM_ARRAY defined in symbol.h
      uses enumvalue SYM_PTR defined in symbol.h
      uses function expression_error(struct expression *,const char *,...) defined in lib.c
      uses variable bits_in_char defined in target.c
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_VALUE defined in expression.h
      uses variable expression::value defined in expression.h
      uses variable expression::taint defined in expression.h
      uses variable expression::ctype defined in expression.h
      uses variable size_t_ctype defined in target.c
   function evaluate_alignof(struct expression *) in line 2152
      protection public
      14 lines of code
      1 parameters
      2 conditional paths
      uses function evaluate_type_information(struct expression *) defined in evaluate.c
      uses macro definition NULL defined in sm_implied3.c
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_VALUE defined in expression.h
      uses variable expression::value defined in expression.h
      uses variable expression::taint defined in expression.h
      uses variable expression::ctype defined in expression.h
      uses variable size_t_ctype defined in target.c
   function evaluate_arguments(struct symbol *,struct symbol *,struct expression_list *) in line 2167
      protection public
      45 lines of code
      3 parameters
      9 conditional paths
      uses macro definition PREPARE_PTR_LIST defined in ptrlist.h
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable p defined in cond_expr2.c
      uses macro definition THIS_ADDRESS defined in ptrlist.h
      uses variable symbol::ctype defined in struct.c
      uses function evaluate_expression(struct expression *) defined in evaluate.c
      uses function classify_type(struct symbol *,struct symbol **) defined in evaluate.c
      uses macro definition is_int defined in evaluate.c
      uses function cast_to(struct expression *,struct symbol *) defined in evaluate.c
      uses function integer_promotion(struct symbol *) defined in evaluate.c
      uses enumvalue TYPE_FLOAT defined in evaluate.c
      uses macro definition MOD_LONG_ALL defined in symbol.h
      uses enumvalue TYPE_PTR defined in evaluate.c
      uses variable expression::ctype defined in expression.h
      uses variable null_ctype defined in symbol.c
      uses function degenerate(struct expression *) defined in evaluate.c
      uses variable symbol::forced_arg defined in struct.c
      uses function examine_symbol_type(struct symbol *) defined in symbol.c
      uses function sprintf(char *,char *,char *) defined in sm_overflow6.c
      uses function compatible_argument_type(struct expression *,struct symbol *,struct expression **,const char *) defined in evaluate.c
      uses macro definition NEXT_PTR_LIST defined in ptrlist.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses macro definition FINISH_PTR_LIST defined in ptrlist.h
   function convert_index(struct expression *) in line 2213
      protection public
      10 lines of code
      1 parameters
      1 conditional paths
      uses enumvalue EXPR_POS defined in expression.h
   function convert_ident(struct expression *) in line 2224
      protection public
      10 lines of code
      1 parameters
      1 conditional paths
      uses variable offset defined in sm_implied10.c
      uses enumvalue EXPR_POS defined in expression.h
   function convert_designators(struct expression *) in line 2235
      protection public
      12 lines of code
      1 parameters
      4 conditional paths
      uses enumvalue EXPR_INDEX defined in expression.h
      uses function convert_index(struct expression *) defined in evaluate.c
      uses enumvalue EXPR_IDENTIFIER defined in expression.h
      uses function convert_ident(struct expression *) defined in evaluate.c
   function excess(struct expression *,const char *) in line 2248
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function warning(struct position,const char *,...) defined in lib.c
   function first_subobject(struct symbol *,int,struct expression **) in line 2256
      protection public
      31 lines of code
      3 parameters
      6 conditional paths
      uses function v(int,...) defined in builtin_va_arg_pack.c
      uses variable ctype::type defined in struct.c
      uses enumvalue SYM_NODE defined in symbol.h
      uses variable ctype::base_type defined in struct.c
      uses enumvalue TYPE_PTR defined in evaluate.c
      uses macro definition NULL defined in sm_implied3.c
      uses enumvalue EXPR_INDEX defined in expression.h
      uses variable p defined in cond_expr2.c
      uses macro definition PREPARE_PTR_LIST defined in ptrlist.h
      uses macro definition is_bitfield_type defined in symbol.h
      uses macro definition NEXT_PTR_LIST defined in ptrlist.h
      uses macro definition FINISH_PTR_LIST defined in ptrlist.h
      uses enumvalue EXPR_IDENTIFIER defined in expression.h
   function check_designators(struct expression *,struct symbol *) in line 2292
      protection public
      58 lines of code
      2 parameters
      13 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses variable ctype::type defined in struct.c
      uses enumvalue SYM_NODE defined in symbol.h
      uses variable ctype::base_type defined in struct.c
      uses enumvalue EXPR_INDEX defined in expression.h
      uses enumvalue SYM_ARRAY defined in symbol.h
      uses variable offset defined in sm_implied10.c
      uses enumvalue EXPR_IDENTIFIER defined in expression.h
      uses enumvalue SYM_STRUCT defined in symbol.h
      uses enumvalue SYM_UNION defined in symbol.h
      uses function find_identifier(struct ident *,struct symbol_list *,int *) defined in evaluate.c
      uses variable symbol::ctype defined in struct.c
      uses enumvalue EXPR_POS defined in expression.h
      uses function expression_error(struct expression *,const char *,...) defined in lib.c
   function next_designators(struct expression *,struct symbol *,struct expression *,struct expression **) in line 2359
      protection public
      71 lines of code
      4 parameters
      8 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_INDEX defined in expression.h
      uses variable expression::idx_expression defined in expression.h
      uses variable expression::ctype defined in expression.h
      uses function v(int,...) defined in builtin_va_arg_pack.c
      uses variable expression::idx_to defined in expression.h
      uses variable symbol::bit_size defined in struct.c
      uses function convert_index(struct expression *) defined in evaluate.c
      uses enumvalue EXPR_IDENTIFIER defined in expression.h
      uses variable offset defined in sm_implied10.c
      uses variable expression::ident_expression defined in expression.h
      uses variable expression::field defined in expression.h
      uses variable symbol::next_subobject defined in struct.c
      uses function convert_ident(struct expression *) defined in evaluate.c
      uses variable expression::offset defined in expression.h
      uses variable symbol::offset defined in struct.c
      uses function handle_simple_initializer(struct expression **,int,int,struct symbol *) defined in evaluate.c
      uses variable symbol::ep defined in struct.c
   function handle_simple_initializer(struct expression **,int,int,struct symbol *) in line 2431
      protection public
      84 lines of code
      4 parameters
      21 conditional paths
      uses function is_string(struct expression *) defined in smatch.h
      uses function is_string_type(struct symbol *) defined in evaluate.c
      uses variable p defined in cond_expr2.c
      uses enumvalue TYPE_COMPOUND defined in evaluate.c
      uses function handle_scalar(struct expression *,int) defined in evaluate.c
      uses variable symbol::ep defined in struct.c
      uses function evaluate_expression(struct expression *) defined in evaluate.c
      uses function compatible_assignment_types(struct expression *,struct symbol *,struct expression **,const char *) defined in evaluate.c
      uses enumvalue EXPR_INITIALIZER defined in expression.h
      uses function v(int,...) defined in builtin_va_arg_pack.c
      uses macro definition NULL defined in sm_implied3.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses function is_string_literal(struct expression **) defined in evaluate.c
      uses function handle_list_initializer(struct expression *,int,struct symbol *) defined in evaluate.c
      uses variable ctype::type defined in struct.c
      uses enumvalue SYM_NODE defined in symbol.h
      uses variable ctype::base_type defined in struct.c
      uses variable symbol::ctype defined in struct.c
      uses enumvalue EXPR_STRING defined in expression.h
      uses function warning(struct position,const char *,...) defined in lib.c
      uses variable Winit_cstring defined in lib.c
      uses variable bits_in_char defined in target.c
   function handle_list_initializer(struct expression *,int,struct symbol *) in line 2437
      protection public
      83 lines of code
      3 parameters
      12 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable expression::expr_list defined in expression.h
      uses function v(int,...) defined in builtin_va_arg_pack.c
      uses enumvalue EXPR_INDEX defined in expression.h
      uses enumvalue EXPR_IDENTIFIER defined in expression.h
      uses function first_subobject(struct symbol *,int,struct expression **) defined in evaluate.c
      uses function next_designators(struct expression *,struct symbol *,struct expression *,struct expression **) defined in evaluate.c
      uses function excess(struct expression *,const char *) defined in evaluate.c
      uses enumvalue TYPE_PTR defined in evaluate.c
      uses macro definition DELETE_CURRENT_PTR defined in ptrlist.h
      uses variable ctype::type defined in struct.c
      uses enumvalue SYM_NODE defined in symbol.h
      uses variable ctype::base_type defined in struct.c
      uses variable symbol::ctype defined in struct.c
      uses variable Wdesignated_init defined in lib.c
      uses variable symbol::designated_init defined in struct.c
      uses function warning(struct position,const char *,...) defined in lib.c
      uses function get_type_name(enum type type) defined in symbol.c
      uses variable symbol::type defined in struct.c
      uses function show_ident(const struct ident *) defined in token.h
      uses variable symbol::ident defined in struct.c
      uses macro definition REPLACE_CURRENT_PTR defined in ptrlist.h
      uses function check_designators(struct expression *,struct symbol *) defined in evaluate.c
      uses function convert_designators(struct expression *) defined in evaluate.c
      uses function classify_type(struct symbol *,struct symbol **) defined in evaluate.c
      uses function handle_simple_initializer(struct expression **,int,int,struct symbol *) defined in evaluate.c
      uses enumvalue TYPE_COMPOUND defined in evaluate.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses variable expression::ctype defined in expression.h
   function is_string_literal(struct expression **) in line 2521
      protection public
      13 lines of code
      1 parameters
      4 conditional paths
      uses function v(int,...) defined in builtin_va_arg_pack.c
      uses enumvalue EXPR_PREOP defined in expression.h
      uses enumvalue EXPR_STRING defined in expression.h
      uses variable Wparen_string defined in lib.c
      uses function warning(struct position,const char *,...) defined in lib.c
   function handle_scalar(struct expression *,int) in line 2541
      protection public
      28 lines of code
      2 parameters
      8 conditional paths
      uses function v(int,...) defined in builtin_va_arg_pack.c
      uses macro definition NULL defined in sm_implied3.c
      uses variable p defined in cond_expr2.c
      uses enumvalue EXPR_INITIALIZER defined in expression.h
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses enumvalue EXPR_INDEX defined in expression.h
      uses enumvalue EXPR_IDENTIFIER defined in expression.h
      uses function warning(struct position,const char *,...) defined in lib.c
   function evaluate_initializer(struct symbol *,struct expression **) in line 2673
      protection public
      7 lines of code
      2 parameters
      2 conditional paths
      uses function classify_type(struct symbol *,struct symbol **) defined in evaluate.c
      uses function handle_simple_initializer(struct expression **,int,int,struct symbol *) defined in evaluate.c
      uses function expression_error(struct expression *,const char *,...) defined in lib.c
   function evaluate_symbol_call(struct expression *) in line 2818
      protection public
      29 lines of code
      1 parameters
      5 conditional paths
      uses variable expression::fn defined in expression.h
      uses enumvalue EXPR_PREOP defined in expression.h
      uses variable ctype::modifiers defined in struct.c
      uses macro definition MOD_INLINE defined in symbol.h
      uses variable current_fn defined in evaluate.c
      uses variable ctype::base_type defined in struct.c
      uses function inline_function(struct expression *,struct symbol *) defined in inline.c
   function evaluate_call(struct expression *) in line 2848
      protection public
      52 lines of code
      1 parameters
      12 conditional paths
      uses variable symbol::ctype defined in struct.c
      uses variable sym defined in smatch_type.c
      uses variable expression::fn defined in expression.h
      uses variable expression::args defined in expression.h
      uses function evaluate_expression(struct expression *) defined in evaluate.c
      uses macro definition NULL defined in sm_implied3.c
      uses variable ctype::type defined in struct.c
      uses enumvalue SYM_NODE defined in symbol.h
      uses variable ctype::base_type defined in struct.c
      uses enumvalue SYM_PTR defined in symbol.h
      uses enumvalue SYM_FN defined in symbol.h
      uses function expression_error(struct expression *,const char *,...) defined in lib.c
      uses function show_ident(const struct ident *) defined in token.h
      uses variable symbol::ident defined in struct.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses function examine_fn_arguments(struct symbol *) defined in evaluate.c
      uses variable symbol::type defined in struct.c
      uses enumvalue EXPR_PREOP defined in expression.h
      uses variable symbol::op defined in struct.c
      uses variable symbol_op::args defined in symbol.h
      uses function evaluate_arguments(struct symbol *,struct symbol *,struct expression_list *) defined in evaluate.c
      uses function evaluate_symbol_call(struct expression *) defined in evaluate.c
      uses variable expression::ctype defined in expression.h
   function evaluate_offsetof(struct expression *) in line 2901
      protection public
      87 lines of code
      1 parameters
      12 conditional paths
      uses variable expression::down defined in expression.h
      uses variable expression::in defined in expression.h
      uses variable expression::op defined in expression.h
      uses variable offset defined in sm_implied10.c
      uses function expression_error(struct expression *,const char *,...) defined in lib.c
      uses macro definition NULL defined in sm_implied3.c
      uses function examine_symbol_type(struct symbol *) defined in symbol.c
      uses function classify_type(struct symbol *,struct symbol **) defined in evaluate.c
      uses enumvalue TYPE_COMPOUND defined in evaluate.c
      uses function find_identifier(struct ident *,struct symbol_list *,int *) defined in evaluate.c
      uses variable expression::ident defined in expression.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_VALUE defined in expression.h
      uses variable expression::flags defined in expression.h
      uses enumvalue Int_const_expr defined in expression.h
      uses variable expression::value defined in expression.h
      uses variable expression::taint defined in expression.h
      uses variable expression::ctype defined in expression.h
      uses variable size_t_ctype defined in target.c
      uses enumvalue TYPE_PTR defined in evaluate.c
      uses variable ctype::base_type defined in struct.c
      uses variable expression::index defined in expression.h
      uses function evaluate_expression(struct expression *) defined in evaluate.c
      uses macro definition is_int defined in evaluate.c
      uses function unrestrict(struct expression *,int,struct symbol **) defined in evaluate.c
      uses function cast_to(struct expression *,struct symbol *) defined in evaluate.c
      uses variable expression::pos defined in expression.h
      uses enumvalue EXPR_BINOP defined in expression.h
      uses variable expression::left defined in expression.h
      uses variable expression::right defined in expression.h
      uses enumvalue EXPR_OFFSETOF defined in expression.h
   function evaluate_expression(struct expression *) in line 2989
      protection public
      97 lines of code
      1 parameters
      1 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses variable expression::ctype defined in expression.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_VALUE defined in expression.h
      uses enumvalue EXPR_FVALUE defined in expression.h
      uses function expression_error(struct expression *,const char *,...) defined in lib.c
      uses enumvalue EXPR_STRING defined in expression.h
      uses function evaluate_string(struct expression *) defined in evaluate.c
      uses enumvalue EXPR_SYMBOL defined in expression.h
      uses function evaluate_symbol_expression(struct expression *) defined in evaluate.c
      uses enumvalue EXPR_BINOP defined in expression.h
      uses function evaluate_expression(struct expression *) defined in evaluate.c
      uses variable expression::left defined in expression.h
      uses variable expression::right defined in expression.h
      uses function evaluate_binop(struct expression *) defined in evaluate.c
      uses enumvalue EXPR_LOGICAL defined in expression.h
      uses function evaluate_logical(struct expression *) defined in evaluate.c
      uses enumvalue EXPR_COMMA defined in expression.h
      uses function evaluate_comma(struct expression *) defined in evaluate.c
      uses enumvalue EXPR_COMPARE defined in expression.h
      uses function evaluate_compare(struct expression *) defined in evaluate.c
      uses enumvalue EXPR_ASSIGNMENT defined in expression.h
      uses function evaluate_assignment(struct expression *) defined in evaluate.c
      uses enumvalue EXPR_PREOP defined in expression.h
      uses variable expression::unop defined in expression.h
      uses function evaluate_preop(struct expression *) defined in evaluate.c
      uses enumvalue EXPR_POSTOP defined in expression.h
      uses function evaluate_postop(struct expression *) defined in evaluate.c
      uses enumvalue EXPR_CAST defined in expression.h
      uses enumvalue EXPR_FORCE_CAST defined in expression.h
      uses enumvalue EXPR_IMPLIED_CAST defined in expression.h
      uses function evaluate_cast(struct expression *) defined in evaluate.c
      uses enumvalue EXPR_SIZEOF defined in expression.h
      uses function evaluate_sizeof(struct expression *) defined in evaluate.c
      uses enumvalue EXPR_PTRSIZEOF defined in expression.h
      uses function evaluate_ptrsizeof(struct expression *) defined in evaluate.c
      uses enumvalue EXPR_ALIGNOF defined in expression.h
      uses function evaluate_alignof(struct expression *) defined in evaluate.c
      uses enumvalue EXPR_DEREF defined in expression.h
      uses function evaluate_member_dereference(struct expression *) defined in evaluate.c
      uses enumvalue EXPR_CALL defined in expression.h
      uses function evaluate_call(struct expression *) defined in evaluate.c
      uses enumvalue EXPR_SELECT defined in expression.h
      uses enumvalue EXPR_CONDITIONAL defined in expression.h
      uses function evaluate_conditional_expression(struct expression *) defined in evaluate.c
      uses enumvalue EXPR_STATEMENT defined in expression.h
      uses function evaluate_statement(struct statement *) defined in evaluate.c
      uses variable expression::statement defined in expression.h
      uses enumvalue EXPR_LABEL defined in expression.h
      uses enumvalue EXPR_TYPE defined in expression.h
      uses function evaluate_symbol(struct symbol *) defined in evaluate.c
      uses variable expression::symbol defined in expression.h
      uses enumvalue EXPR_OFFSETOF defined in expression.h
      uses function evaluate_offsetof(struct expression *) defined in evaluate.c
      uses enumvalue EXPR_INITIALIZER defined in expression.h
      uses enumvalue EXPR_IDENTIFIER defined in expression.h
      uses enumvalue EXPR_INDEX defined in expression.h
      uses enumvalue EXPR_POS defined in expression.h
      uses enumvalue EXPR_SLICE defined in expression.h
   function check_duplicates(struct symbol *) in line 3087
      protection public
      38 lines of code
      1 parameters
      9 conditional paths
      uses variable sym defined in smatch_type.c
      uses variable symbol::initialized defined in struct.c
      uses variable symbol::initializer defined in struct.c
      uses macro definition NULL defined in sm_implied3.c
      uses variable symbol::same_symbol defined in struct.c
      uses function evaluate_symbol(struct symbol *) defined in evaluate.c
      uses function sparse_error(struct position,const char *,...) defined in lib.c
      uses variable symbol::pos defined in struct.c
      uses function show_ident(const struct ident *) defined in token.h
      uses variable symbol::ident defined in struct.c
      uses function stream_name(int) defined in token.h
      uses variable position::stream defined in lib.h
      uses variable position::line defined in lib.h
      uses function type_difference(struct ctype *,struct ctype *,unsigned long,unsigned long) defined in evaluate.c
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::modifiers defined in struct.c
      uses macro definition MOD_STATIC defined in symbol.h
      uses macro definition MOD_REGISTER defined in symbol.h
      uses macro definition MOD_TOPLEVEL defined in symbol.h
      uses variable Wdecl defined in lib.c
      uses function warning(struct position,const char *,...) defined in lib.c
   function evaluate_symbol_list(struct symbol_list *) in line 3166
      protection public
      9 lines of code
      1 parameters
      1 conditional paths
      uses variable sym defined in smatch_type.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses function evaluate_symbol(struct symbol *) defined in evaluate.c
      uses function check_duplicates(struct symbol *) defined in evaluate.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function evaluate_return_expression(struct statement *) in line 3176
      protection public
      24 lines of code
      1 parameters
      6 conditional paths
      uses variable statement::expression defined in parse.h
      uses function evaluate_expression(struct expression *) defined in evaluate.c
      uses variable current_fn defined in evaluate.c
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::base_type defined in struct.c
      uses variable expression::ctype defined in expression.h
      uses function expression_error(struct expression *,const char *,...) defined in lib.c
      uses variable Wreturn_void defined in lib.c
      uses function warning(struct position,const char *,...) defined in lib.c
      uses variable symbol::stmt defined in struct.c
      uses variable statement::pos defined in parse.h
      uses macro definition NULL defined in sm_implied3.c
      uses function sparse_error(struct position,const char *,...) defined in lib.c
      uses function compatible_assignment_types(struct expression *,struct symbol *,struct expression **,const char *) defined in evaluate.c
   function evaluate_if_statement(struct statement *) in line 3201
      protection public
      9 lines of code
      1 parameters
      2 conditional paths
      uses variable symbol::stmt defined in struct.c
      uses variable statement::if_conditional defined in parse.h
      uses function evaluate_conditional(struct expression *,int) defined in evaluate.c
      uses function evaluate_statement(struct statement *) defined in evaluate.c
      uses variable statement::if_true defined in parse.h
      uses variable statement::if_false defined in parse.h
   function evaluate_iterator(struct statement *) in line 3211
      protection public
      9 lines of code
      1 parameters
      1 conditional paths
      uses function evaluate_symbol_list(struct symbol_list *) defined in evaluate.c
      uses variable symbol::stmt defined in struct.c
      uses variable statement::iterator_syms defined in parse.h
      uses function evaluate_conditional(struct expression *,int) defined in evaluate.c
      uses variable statement::iterator_pre_condition defined in parse.h
      uses variable statement::iterator_post_condition defined in parse.h
      uses function evaluate_statement(struct statement *) defined in evaluate.c
      uses variable statement::iterator_pre_statement defined in parse.h
      uses variable statement::iterator_statement defined in parse.h
      uses variable statement::iterator_post_statement defined in parse.h
   function verify_output_constraint(struct expression *,const char *) in line 3221
      protection public
      10 lines of code
      2 parameters
      3 conditional paths
      uses function expression_error(struct expression *,const char *,...) defined in lib.c
   function verify_input_constraint(struct expression *,const char *) in line 3232
      protection public
      8 lines of code
      2 parameters
      3 conditional paths
      uses function expression_error(struct expression *,const char *,...) defined in lib.c
   function evaluate_asm_statement(struct statement *) in line 3241
      protection public
      82 lines of code
      1 parameters
      16 conditional paths
      uses variable sym defined in smatch_type.c
      uses variable symbol::stmt defined in struct.c
      uses variable statement::asm_string defined in parse.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_STRING defined in expression.h
      uses function sparse_error(struct position,const char *,...) defined in lib.c
      uses variable statement::pos defined in parse.h
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable statement::asm_outputs defined in parse.h
      uses variable expression::pos defined in expression.h
      uses macro definition THIS_ADDRESS defined in ptrlist.h
      uses macro definition NULL defined in sm_implied3.c
      uses function verify_output_constraint(struct expression *,const char *) defined in evaluate.c
      uses variable expression::string defined in expression.h
      uses variable string::data defined in token.h
      uses function evaluate_expression(struct expression *) defined in evaluate.c
      uses function lvalue_expression(struct expression *) defined in evaluate.c
      uses function warning(struct position,const char *,...) defined in lib.c
      uses function evaluate_assign_to(struct expression *,struct symbol *) defined in evaluate.c
      uses variable expression::ctype defined in expression.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses variable statement::asm_inputs defined in parse.h
      uses function verify_input_constraint(struct expression *,const char *) defined in evaluate.c
      uses variable statement::asm_clobbers defined in parse.h
      uses function expression_error(struct expression *,const char *,...) defined in lib.c
      uses variable statement::asm_labels defined in parse.h
      uses variable symbol::type defined in struct.c
      uses enumvalue SYM_LABEL defined in symbol.h
   function evaluate_case_statement(struct statement *) in line 3324
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses function evaluate_expression(struct expression *) defined in evaluate.c
      uses variable symbol::stmt defined in struct.c
      uses variable statement::case_expression defined in parse.h
      uses variable statement::case_to defined in parse.h
      uses function evaluate_statement(struct statement *) defined in evaluate.c
      uses variable statement::case_statement defined in parse.h
   function check_case_type(struct expression *,struct expression *,struct expression **) in line 3331
      protection public
      47 lines of code
      3 parameters
      13 conditional paths
      uses variable expression::ctype defined in expression.h
      uses function evaluate_expression(struct expression *) defined in evaluate.c
      uses function warn_for_different_enum_types(struct position,struct symbol *,struct symbol *) defined in evaluate.c
      uses variable expression::pos defined in expression.h
      uses variable symbol::ctype defined in struct.c
      uses function classify_type(struct symbol *,struct symbol **) defined in evaluate.c
      uses enumvalue TYPE_NUM defined in evaluate.c
      uses enumvalue TYPE_FLOAT defined in evaluate.c
      uses enumvalue TYPE_RESTRICT defined in evaluate.c
      uses function restricted_binop_type(int,struct expression *,struct expression *,int,int,struct symbol *,struct symbol *) defined in evaluate.c
      uses enumvalue SPECIAL_EQUAL defined in token.h
      uses function unrestrict(struct expression *,int,struct symbol **) defined in evaluate.c
      uses function expression_error(struct expression *,const char *,...) defined in lib.c
   function evaluate_switch_statement(struct statement *) in line 3379
      protection public
      20 lines of code
      1 parameters
      3 conditional paths
      uses variable sym defined in smatch_type.c
      uses macro definition NULL defined in sm_implied3.c
      uses variable statement::switch_expression defined in parse.h
      uses function evaluate_expression(struct expression *) defined in evaluate.c
      uses function evaluate_statement(struct statement *) defined in evaluate.c
      uses variable statement::switch_statement defined in parse.h
      uses variable expression::ctype defined in expression.h
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable statement::switch_case defined in parse.h
      uses variable symbol::symbol_list defined in struct.c
      uses variable symbol::stmt defined in struct.c
      uses function check_case_type(struct expression *,struct expression *,struct expression **) defined in evaluate.c
      uses variable statement::case_expression defined in parse.h
      uses variable statement::case_to defined in parse.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function evaluate_goto_statement(struct statement *) in line 3400
      protection public
      9 lines of code
      1 parameters
      2 conditional paths
      uses variable symbol::stmt defined in struct.c
      uses variable statement::goto_label defined in parse.h
      uses function sparse_error(struct position,const char *,...) defined in lib.c
      uses variable statement::pos defined in parse.h
      uses function show_ident(const struct ident *) defined in token.h
      uses variable symbol::ident defined in struct.c
      uses function evaluate_expression(struct expression *) defined in evaluate.c
      uses variable statement::goto_expression defined in parse.h
   function evaluate_statement(struct statement *) in line 3410
      protection public
      76 lines of code
      1 parameters
      1 conditional paths
      uses variable symbol::stmt defined in struct.c
      uses macro definition NULL defined in sm_implied3.c
      uses variable statement::type defined in parse.h
      uses enumvalue STMT_DECLARATION defined in parse.h
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable statement::declaration defined in parse.h
      uses function evaluate_symbol(struct symbol *) defined in evaluate.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses enumvalue STMT_RETURN defined in parse.h
      uses function evaluate_return_expression(struct statement *) defined in evaluate.c
      uses enumvalue STMT_EXPRESSION defined in parse.h
      uses function evaluate_expression(struct expression *) defined in evaluate.c
      uses variable statement::expression defined in parse.h
      uses variable expression::ctype defined in expression.h
      uses variable null_ctype defined in symbol.c
      uses function cast_to(struct expression *,struct symbol *) defined in evaluate.c
      uses function degenerate(struct expression *) defined in evaluate.c
      uses enumvalue STMT_COMPOUND defined in parse.h
      uses variable statement::ret defined in parse.h
      uses function evaluate_statement(struct statement *) defined in evaluate.c
      uses variable statement::args defined in parse.h
      uses variable statement::stmts defined in parse.h
      uses enumvalue STMT_IF defined in parse.h
      uses function evaluate_if_statement(struct statement *) defined in evaluate.c
      uses enumvalue STMT_ITERATOR defined in parse.h
      uses function evaluate_iterator(struct statement *) defined in evaluate.c
      uses enumvalue STMT_SWITCH defined in parse.h
      uses function evaluate_switch_statement(struct statement *) defined in evaluate.c
      uses enumvalue STMT_CASE defined in parse.h
      uses function evaluate_case_statement(struct statement *) defined in evaluate.c
      uses enumvalue STMT_LABEL defined in parse.h
      uses variable statement::label_statement defined in parse.h
      uses enumvalue STMT_GOTO defined in parse.h
      uses function evaluate_goto_statement(struct statement *) defined in evaluate.c
      uses enumvalue STMT_NONE defined in parse.h
      uses enumvalue STMT_ASM defined in parse.h
      uses function evaluate_asm_statement(struct statement *) defined in evaluate.c
      uses enumvalue STMT_CONTEXT defined in parse.h
      uses enumvalue STMT_RANGE defined in parse.h
      uses variable statement::range_expression defined in parse.h
      uses variable statement::range_low defined in parse.h
      uses variable statement::range_high defined in parse.h
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/example.c
module example.c
   macro definition TAG_DEAD in line 111
      protection public
   macro definition TAG_DIRTY in line 112
      protection public
   macro definition SWITCH_REG in line 115
      protection public
   macro definition REGNO in line 134
      protection public
   macro definition REG_EBP in line 135
      protection public
   macro definition REG_ESP in line 136
      protection public
   macro definition output_insn in line 272
      protection public
   macro definition MAX_ASM_ARG in line 1253
      protection public
   macro definition VERY_BUSY in line 1459
      protection public
   macro definition REG_FIXED in line 1460
      protection public
   enumeration optype in line 149
      protection public
   variable opcodes in line 17
      protection public
   variable last_reg in line 101
      protection public
   variable stack_offset in line 101
      protection public
   variable hardregs in line 117
      protection public
   variable conditional in line 1060
      protection public
   variable asm_arguments in line 1223
      protection public
   enumvalue OP_UNDEF in line 150
      protection public
   enumvalue OP_REG in line 151
      protection public
   enumvalue OP_VAL in line 152
      protection public
   enumvalue OP_MEM in line 153
      protection public
   enumvalue OP_ADDR in line 154
      protection public
   function output_bb(struct basic_block *,unsigned long) in line 117
      protection public
      27 lines of code
      2 parameters
      1 conditional paths
      uses variable basic_block::generation defined in linearize.h
      uses function generate_list(struct basic_block_list *,unsigned long) defined in example.c
      uses variable basic_block::parents defined in linearize.h
      uses variable bb_state::pos defined in example.c
      uses variable basic_block::pos defined in linearize.h
      uses variable bb_state::inputs defined in example.c
      uses function gather_storage(struct basic_block *,enum inout_enum) defined in storage.c
      uses enumvalue STOR_IN defined in storage.h
      uses variable bb_state::outputs defined in example.c
      uses enumvalue STOR_OUT defined in storage.h
      uses variable bb_state::internal defined in example.c
      uses macro definition NULL defined in sm_implied3.c
      uses variable bb_state::cc_opcode defined in example.c
      uses variable bb_state::cc_target defined in example.c
      uses function mark_used_registers(struct basic_block *,struct bb_state *) defined in example.c
      uses function generate(struct basic_block *,struct bb_state *) defined in example.c
      uses macro definition free_ptr_list defined in ptrlist.h
      uses variable basic_block::children defined in linearize.h
   function show_op(struct bb_state *,struct operand *) in line 173
      protection public
      41 lines of code
      2 parameters
      10 conditional paths
      uses variable buf defined in sm_fake_assignment.c
      uses variable p defined in cond_expr2.c
      uses function op(void) defined in loop2.c
      uses enumvalue OP_UNDEF defined in example.c
      uses enumvalue OP_REG defined in example.c
      uses enumvalue OP_VAL defined in example.c
      uses function sprintf(char *,char *,char *) defined in sm_overflow6.c
      uses enumvalue OP_MEM defined in example.c
      uses enumvalue OP_ADDR defined in example.c
      uses function show_ident(const struct ident *) defined in token.h
   function find_storage_hash(pseudo_t,struct storage_hash_list *) in line 215
      protection public
      9 lines of code
      2 parameters
      2 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses macro definition NULL defined in sm_implied3.c
   function find_or_create_hash(pseudo_t,struct storage_hash_list **) in line 225
      protection public
      12 lines of code
      2 parameters
      2 conditional paths
      uses function find_storage_hash(pseudo_t,struct storage_hash_list *) defined in example.c
      uses variable storage_hash::pseudo defined in storage.h
      uses macro definition add_ptr_list defined in ptrlist.h
   function FORMAT_ATTR(2) in line 239
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses macro definition output_insn defined in example.c
   function show_memop(struct storage *) in line 289
      protection public
      20 lines of code
      1 parameters
      5 conditional paths
      uses variable storage::type defined in storage.h
      uses enumvalue REG_FRAME defined in storage.h
      uses function sprintf(char *,char *,char *) defined in sm_overflow6.c
      uses variable storage::offset defined in storage.h
      uses enumvalue REG_STACK defined in storage.h
      uses enumvalue REG_REG defined in storage.h
      uses variable hardregs defined in example.c
      uses variable storage::regno defined in storage.h
      uses variable hardreg::name defined in example.c
      uses function show_storage(struct storage *) defined in storage.c
   function alloc_stack_offset(int) in line 310
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses variable stack_offset defined in example.c
   function alloc_stack(struct bb_state *,struct storage *) in line 317
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses variable storage::type defined in storage.h
      uses enumvalue REG_STACK defined in storage.h
      uses variable storage::offset defined in storage.h
      uses function alloc_stack_offset(int) defined in example.c
   function can_regenerate(struct bb_state *,pseudo_t) in line 330
      protection public
      19 lines of code
      2 parameters
      5 conditional paths
      uses variable pseudo::type defined in linearize.h
      uses enumvalue PSEUDO_VAL defined in linearize.h
      uses enumvalue PSEUDO_SYM defined in linearize.h
      uses function find_storage_hash(pseudo_t,struct storage_hash_list *) defined in example.c
      uses variable bb_state::inputs defined in example.c
      uses variable storage_hash::storage defined in storage.h
      uses variable storage::type defined in storage.h
      uses enumvalue REG_REG defined in storage.h
      uses variable bb_state::internal defined in example.c
   function flush_one_pseudo(struct bb_state *,struct hardreg *,pseudo_t) in line 350
      protection public
      34 lines of code
      3 parameters
      6 conditional paths
      uses function can_regenerate(struct bb_state *,pseudo_t) defined in example.c
      uses function show_pseudo(pseudo_t) defined in linearize.c
      uses variable hardreg::name defined in example.c
      uses function find_storage_hash(pseudo_t,struct storage_hash_list *) defined in example.c
      uses variable bb_state::internal defined in example.c
      uses variable bb_state::outputs defined in example.c
      uses function find_or_create_hash(pseudo_t,struct storage_hash_list **) defined in example.c
      uses variable storage_hash::storage defined in storage.h
      uses variable storage::type defined in storage.h
      uses enumvalue REG_UDEF defined in storage.h
      uses function alloc_stack(struct bb_state *,struct storage *) defined in example.c
      uses enumvalue REG_STACK defined in storage.h
      uses macro definition output_insn defined in example.c
      uses function show_memop(struct storage *) defined in example.c
   function flush_reg(struct bb_state *,struct hardreg *) in line 386
      protection public
      19 lines of code
      2 parameters
      5 conditional paths
      uses variable storage::pseudo defined in storage.h
      uses variable storage::reg defined in storage.h
      uses variable reg_info::name defined in compile-i386.c
      uses variable reg_info::contains defined in compile-i386.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses macro definition CURRENT_TAG defined in ptrlist.h
      uses macro definition TAG_DEAD defined in example.c
      uses macro definition TAG_DIRTY defined in example.c
      uses function flush_one_pseudo(struct bb_state *,struct hardreg *,pseudo_t) defined in example.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses macro definition free_ptr_list defined in ptrlist.h
   function find_pseudo_storage(struct bb_state *,pseudo_t,struct hardreg *) in line 406
      protection public
      38 lines of code
      3 parameters
      7 conditional paths
      uses variable src defined in sm_user_data3.c
      uses function find_storage_hash(pseudo_t,struct storage_hash_list *) defined in example.c
      uses variable bb_state::internal defined in example.c
      uses variable bb_state::inputs defined in example.c
      uses variable bb_state::outputs defined in example.c
      uses macro definition NULL defined in sm_implied3.c
      uses enumvalue REG_STACK defined in storage.h
      uses enumvalue REG_UDEF defined in storage.h
      uses variable hardreg::used defined in example.c
      uses enumvalue REG_REG defined in storage.h
      uses variable hardregs defined in example.c
      uses function alloc_stack(struct bb_state *,struct storage *) defined in example.c
   function mark_reg_dead(struct bb_state *,pseudo_t,struct hardreg *) in line 445
      protection public
      14 lines of code
      3 parameters
      3 conditional paths
      uses variable p defined in cond_expr2.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable hardreg::contains defined in example.c
      uses macro definition CURRENT_TAG defined in ptrlist.h
      uses macro definition TAG_DEAD defined in example.c
      uses function show_pseudo(pseudo_t) defined in linearize.c
      uses variable hardreg::name defined in example.c
      uses macro definition TAG_CURRENT defined in ptrlist.h
      uses variable hardreg::dead defined in example.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function add_pseudo_reg(struct bb_state *,pseudo_t,struct hardreg *) in line 460
      protection public
      5 lines of code
      3 parameters
      1 conditional paths
      uses function show_pseudo(pseudo_t) defined in linearize.c
      uses variable hardreg::name defined in example.c
      uses macro definition add_ptr_list_tag defined in ptrlist.h
      uses variable hardreg::contains defined in example.c
      uses macro definition TAG_DIRTY defined in example.c
   function preferred_reg(struct bb_state *,pseudo_t) in line 466
      protection public
      12 lines of code
      2 parameters
      3 conditional paths
      uses function find_storage_hash(pseudo_t,struct storage_hash_list *) defined in example.c
      uses variable bb_state::outputs defined in example.c
      uses variable storage_hash::storage defined in storage.h
      uses variable storage::type defined in storage.h
      uses enumvalue REG_REG defined in storage.h
      uses variable hardregs defined in example.c
      uses variable storage::regno defined in storage.h
      uses macro definition NULL defined in sm_implied3.c
   function empty_reg(struct bb_state *) in line 479
      protection public
      11 lines of code
      1 parameters
      3 conditional paths
      uses variable hardregs defined in example.c
      uses macro definition REGNO defined in example.c
      uses variable hardreg::contains defined in example.c
      uses macro definition NULL defined in sm_implied3.c
   function target_reg(struct bb_state *,pseudo_t,pseudo_t) in line 491
      protection public
      33 lines of code
      3 parameters
      9 conditional paths
      uses function preferred_reg(struct bb_state *,pseudo_t) defined in example.c
      uses variable hardreg::contains defined in example.c
      uses function empty_reg(struct bb_state *) defined in example.c
      uses variable last_reg defined in example.c
      uses macro definition REGNO defined in example.c
      uses variable hardregs defined in example.c
      uses variable hardreg::busy defined in example.c
      uses function flush_reg(struct bb_state *,struct hardreg *) defined in example.c
      uses macro definition assert defined in sort.c
      uses function add_pseudo_reg(struct bb_state *,pseudo_t,struct hardreg *) defined in example.c
   function find_in_reg(struct bb_state *,pseudo_t) in line 525
      protection public
      19 lines of code
      2 parameters
      3 conditional paths
      uses macro definition REGNO defined in example.c
      uses variable p defined in cond_expr2.c
      uses variable hardregs defined in example.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable hardreg::contains defined in example.c
      uses variable last_reg defined in example.c
      uses function show_pseudo(pseudo_t) defined in linearize.c
      uses variable hardreg::name defined in example.c
      uses variable hardreg::busy defined in example.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses macro definition NULL defined in sm_implied3.c
   function flush_pseudo(struct bb_state *,pseudo_t,struct storage *) in line 545
      protection public
      7 lines of code
      3 parameters
      2 conditional paths
      uses function find_in_reg(struct bb_state *,pseudo_t) defined in example.c
      uses function flush_reg(struct bb_state *,struct hardreg *) defined in example.c
   function flush_cc_cache_to_reg(struct bb_state *,pseudo_t,struct hardreg *) in line 553
      protection public
      8 lines of code
      3 parameters
      1 conditional paths
      uses variable bb_state::cc_opcode defined in example.c
      uses variable bb_state::cc_target defined in example.c
      uses macro definition NULL defined in sm_implied3.c
      uses macro definition output_insn defined in example.c
      uses variable opcodes defined in example.c
      uses variable hardreg::name defined in example.c
   function flush_cc_cache(struct bb_state *) in line 562
      protection public
      15 lines of code
      1 parameters
      3 conditional paths
      uses variable bb_state::cc_target defined in example.c
      uses macro definition NULL defined in sm_implied3.c
      uses variable bb_state::cc_dead defined in example.c
      uses function target_reg(struct bb_state *,pseudo_t,pseudo_t) defined in example.c
      uses function flush_cc_cache_to_reg(struct bb_state *,pseudo_t,struct hardreg *) defined in example.c
   function add_cc_cache(struct bb_state *,int,pseudo_t) in line 578
      protection public
      8 lines of code
      3 parameters
      1 conditional paths
      uses macro definition assert defined in sort.c
      uses variable bb_state::cc_target defined in example.c
      uses variable bb_state::cc_opcode defined in example.c
      uses variable bb_state::cc_dead defined in example.c
      uses variable opcodes defined in example.c
   function fill_reg(struct bb_state *,struct hardreg *,pseudo_t) in line 588
      protection public
      56 lines of code
      3 parameters
      13 conditional paths
      uses variable src defined in sm_user_data3.c
      uses variable bb_state::cc_target defined in example.c
      uses function flush_cc_cache_to_reg(struct bb_state *,pseudo_t,struct hardreg *) defined in example.c
      uses variable pseudo::type defined in linearize.h
      uses enumvalue PSEUDO_VAL defined in linearize.h
      uses macro definition output_insn defined in example.c
      uses variable pseudo::value defined in linearize.h
      uses variable hardreg::name defined in example.c
      uses enumvalue PSEUDO_SYM defined in linearize.h
      uses function find_pseudo_storage(struct bb_state *,pseudo_t,struct hardreg *) defined in example.c
      uses macro definition NULL defined in sm_implied3.c
      uses function show_pseudo(pseudo_t) defined in linearize.c
      uses enumvalue REG_REG defined in storage.h
      uses function find_or_create_hash(pseudo_t,struct storage_hash_list **) defined in example.c
      uses variable bb_state::internal defined in example.c
      uses function alloc_stack(struct bb_state *,struct storage *) defined in example.c
      uses enumvalue REG_STACK defined in storage.h
      uses enumvalue REG_FRAME defined in storage.h
      uses function flush_pseudo(struct bb_state *,pseudo_t,struct storage *) defined in example.c
      uses function show_memop(struct storage *) defined in example.c
      uses enumvalue PSEUDO_ARG defined in linearize.h
      uses enumvalue PSEUDO_REG defined in linearize.h
      uses variable pseudo::def defined in linearize.h
      uses variable instruction::opcode defined in linearize.h
      uses enumvalue OP_SETVAL defined in linearize.h
      uses variable instruction::target defined in linearize.h
      uses macro definition TAG_DEAD defined in example.c
      uses function mark_reg_dead(struct bb_state *,pseudo_t,struct hardreg *) defined in example.c
   function getreg(struct bb_state *,pseudo_t,pseudo_t) in line 645
      protection public
      10 lines of code
      3 parameters
      2 conditional paths
      uses function find_in_reg(struct bb_state *,pseudo_t) defined in example.c
      uses function target_reg(struct bb_state *,pseudo_t,pseudo_t) defined in example.c
      uses function fill_reg(struct bb_state *,struct hardreg *,pseudo_t) defined in example.c
   function move_reg(struct bb_state *,struct hardreg *,struct hardreg *) in line 656
      protection public
      4 lines of code
      3 parameters
      1 conditional paths
      uses macro definition output_insn defined in example.c
      uses variable src defined in sm_user_data3.c
      uses variable hardreg::name defined in example.c
   function copy_reg(struct bb_state *,struct hardreg *,pseudo_t) in line 661
      protection public
      32 lines of code
      3 parameters
      6 conditional paths
      uses variable src defined in sm_user_data3.c
      uses function preferred_reg(struct bb_state *,pseudo_t) defined in example.c
      uses variable hardreg::contains defined in example.c
      uses function show_pseudo(pseudo_t) defined in linearize.c
      uses variable hardreg::name defined in example.c
      uses function move_reg(struct bb_state *,struct hardreg *,struct hardreg *) defined in example.c
      uses macro definition REGNO defined in example.c
      uses variable hardregs defined in example.c
      uses macro definition output_insn defined in example.c
      uses function flush_reg(struct bb_state *,struct hardreg *) defined in example.c
   function put_operand(struct bb_state *,struct operand *) in line 694
      protection public
      17 lines of code
      2 parameters
      6 conditional paths
      uses function op(void) defined in loop2.c
      uses enumvalue OP_REG defined in example.c
      uses enumvalue OP_ADDR defined in example.c
      uses enumvalue OP_MEM defined in example.c
   function alloc_op(void) in line 712
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses function op(void) defined in loop2.c
      uses function malloc(int) defined in sm_buf_size2.c
      uses function memset(void *,int,int) defined in check_byte_count-ice.c
   function get_register_operand(struct bb_state *,pseudo_t,pseudo_t) in line 719
      protection public
      8 lines of code
      3 parameters
      1 conditional paths
      uses function op(void) defined in loop2.c
      uses function alloc_op(void) defined in example.c
      uses enumvalue OP_REG defined in example.c
      uses function getreg(struct bb_state *,pseudo_t,pseudo_t) defined in example.c
   function get_sym_frame_offset(struct bb_state *,pseudo_t) in line 728
      protection public
      9 lines of code
      2 parameters
      2 conditional paths
      uses variable offset defined in sm_implied10.c
      uses variable pseudo::nr defined in linearize.h
      uses function alloc_stack_offset(int) defined in example.c
   function get_generic_operand(struct bb_state *,pseudo_t) in line 738
      protection public
      60 lines of code
      2 parameters
      9 conditional paths
      uses variable src defined in sm_user_data3.c
      uses function hash(struct hashtable *,void *) defined in hashtable.c
      uses function op(void) defined in loop2.c
      uses function malloc(int) defined in sm_buf_size2.c
      uses function memset(void *,int,int) defined in check_byte_count-ice.c
      uses variable pseudo::type defined in linearize.h
      uses enumvalue PSEUDO_VAL defined in linearize.h
      uses enumvalue OP_VAL defined in example.c
      uses variable pseudo::value defined in linearize.h
      uses enumvalue PSEUDO_SYM defined in linearize.h
      uses variable sym defined in smatch_type.c
      uses variable pseudo::sym defined in linearize.h
      uses enumvalue OP_ADDR defined in example.c
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::modifiers defined in struct.c
      uses macro definition MOD_NONLOCAL defined in symbol.h
      uses variable hardregs defined in example.c
      uses macro definition REG_EBP defined in example.c
      uses function get_sym_frame_offset(struct bb_state *,pseudo_t) defined in example.c
      uses function find_in_reg(struct bb_state *,pseudo_t) defined in example.c
      uses enumvalue OP_REG defined in example.c
      uses variable hardreg::busy defined in example.c
      uses function find_pseudo_storage(struct bb_state *,pseudo_t,struct hardreg *) defined in example.c
      uses macro definition NULL defined in sm_implied3.c
      uses enumvalue REG_REG defined in storage.h
      uses enumvalue REG_FRAME defined in storage.h
      uses enumvalue OP_MEM defined in example.c
      uses enumvalue REG_STACK defined in storage.h
      uses macro definition REG_ESP defined in example.c
   function generic(struct bb_state *,pseudo_t) in line 800
      protection public
      29 lines of code
      2 parameters
      5 conditional paths
      uses function op(void) defined in loop2.c
      uses function get_generic_operand(struct bb_state *,pseudo_t) defined in example.c
      uses variable buf defined in sm_fake_assignment.c
      uses variable str defined in sm_overflow6.c
      uses enumvalue OP_ADDR defined in example.c
      uses function sprintf(char *,char *,char *) defined in sm_overflow6.c
      uses function show_op(struct bb_state *,struct operand *) defined in example.c
      uses function put_operand(struct bb_state *,struct operand *) defined in example.c
      uses function target_reg(struct bb_state *,pseudo_t,pseudo_t) defined in example.c
      uses macro definition NULL defined in sm_implied3.c
      uses macro definition output_insn defined in example.c
      uses variable hardreg::name defined in example.c
   function get_address_operand(struct bb_state *,struct instruction *) in line 830
      protection public
      20 lines of code
      2 parameters
      2 conditional paths
      uses function op(void) defined in loop2.c
      uses function get_generic_operand(struct bb_state *,pseudo_t) defined in example.c
      uses variable instruction::src defined in linearize.h
      uses enumvalue OP_ADDR defined in example.c
      uses variable instruction::offset defined in linearize.h
      uses function put_operand(struct bb_state *,struct operand *) defined in example.c
      uses function getreg(struct bb_state *,pseudo_t,pseudo_t) defined in example.c
      uses macro definition NULL defined in sm_implied3.c
      uses variable hardreg::busy defined in example.c
   function address(struct bb_state *,struct instruction *) in line 851
      protection public
      7 lines of code
      2 parameters
      1 conditional paths
      uses function op(void) defined in loop2.c
      uses function get_address_operand(struct bb_state *,struct instruction *) defined in example.c
      uses variable str defined in sm_overflow6.c
      uses function show_op(struct bb_state *,struct operand *) defined in example.c
      uses function put_operand(struct bb_state *,struct operand *) defined in example.c
   function reg_or_imm(struct bb_state *,pseudo_t) in line 859
      protection public
      9 lines of code
      2 parameters
      2 conditional paths
      uses variable pseudo::type defined in linearize.h
      uses enumvalue PSEUDO_VAL defined in linearize.h
      uses function show_pseudo(pseudo_t) defined in linearize.c
      uses function getreg(struct bb_state *,pseudo_t,pseudo_t) defined in example.c
      uses macro definition NULL defined in sm_implied3.c
      uses variable hardreg::name defined in example.c
   function kill_dead_reg(struct hardreg *) in line 869
      protection public
      15 lines of code
      1 parameters
      3 conditional paths
      uses variable hardreg::dead defined in example.c
      uses variable p defined in cond_expr2.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable hardreg::contains defined in example.c
      uses macro definition CURRENT_TAG defined in ptrlist.h
      uses macro definition TAG_DEAD defined in example.c
      uses macro definition DELETE_CURRENT_PTR defined in ptrlist.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses macro definition PACK_PTR_LIST defined in ptrlist.h
      uses macro definition assert defined in sort.c
   function target_copy_reg(struct bb_state *,struct hardreg *,pseudo_t) in line 885
      protection public
      5 lines of code
      3 parameters
      1 conditional paths
      uses function kill_dead_reg(struct hardreg *) defined in example.c
      uses variable src defined in sm_user_data3.c
      uses function copy_reg(struct bb_state *,struct hardreg *,pseudo_t) defined in example.c
   function do_binop(struct bb_state *,struct instruction *,pseudo_t,pseudo_t) in line 891
      protection public
      13 lines of code
      4 parameters
      1 conditional paths
      uses function op(void) defined in loop2.c
      uses variable opcodes defined in example.c
      uses variable src defined in sm_user_data3.c
      uses function get_register_operand(struct bb_state *,pseudo_t,pseudo_t) defined in example.c
      uses function get_generic_operand(struct bb_state *,pseudo_t) defined in example.c
      uses function target_copy_reg(struct bb_state *,struct hardreg *,pseudo_t) defined in example.c
      uses macro definition output_insn defined in example.c
      uses function show_op(struct bb_state *,struct operand *) defined in example.c
      uses variable hardreg::name defined in example.c
      uses function put_operand(struct bb_state *,struct operand *) defined in example.c
      uses function add_pseudo_reg(struct bb_state *,pseudo_t,struct hardreg *) defined in example.c
   function generate_binop(struct bb_state *,struct instruction *) in line 905
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses function flush_cc_cache(struct bb_state *) defined in example.c
      uses function do_binop(struct bb_state *,struct instruction *,pseudo_t,pseudo_t) defined in example.c
   function is_dead_reg(struct bb_state *,pseudo_t,struct hardreg *) in line 911
      protection public
      9 lines of code
      3 parameters
      2 conditional paths
      uses variable p defined in cond_expr2.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable hardreg::contains defined in example.c
      uses macro definition CURRENT_TAG defined in ptrlist.h
      uses macro definition TAG_DEAD defined in example.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function generate_commutative_binop(struct bb_state *,struct instruction *) in line 926
      protection public
      29 lines of code
      2 parameters
      11 conditional paths
      uses function flush_cc_cache(struct bb_state *) defined in example.c
      uses function find_in_reg(struct bb_state *,pseudo_t) defined in example.c
      uses function is_dead_reg(struct bb_state *,pseudo_t,struct hardreg *) defined in example.c
      uses function preferred_reg(struct bb_state *,pseudo_t) defined in example.c
      uses function do_binop(struct bb_state *,struct instruction *,pseudo_t,pseudo_t) defined in example.c
   function mark_pseudo_dead(struct bb_state *,pseudo_t) in line 961
      protection public
      13 lines of code
      2 parameters
      4 conditional paths
      uses variable src defined in sm_user_data3.c
      uses variable bb_state::cc_target defined in example.c
      uses variable bb_state::cc_dead defined in example.c
      uses function find_pseudo_storage(struct bb_state *,pseudo_t,struct hardreg *) defined in example.c
      uses macro definition NULL defined in sm_implied3.c
      uses macro definition TAG_DEAD defined in example.c
      uses macro definition REGNO defined in example.c
      uses function mark_reg_dead(struct bb_state *,pseudo_t,struct hardreg *) defined in example.c
      uses variable hardregs defined in example.c
   function kill_dead_pseudos(struct bb_state *) in line 975
      protection public
      8 lines of code
      1 parameters
      2 conditional paths
      uses macro definition REGNO defined in example.c
      uses function kill_dead_reg(struct hardreg *) defined in example.c
      uses variable hardregs defined in example.c
   function generate_store(struct instruction *,struct bb_state *) in line 984
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses macro definition output_insn defined in example.c
      uses function reg_or_imm(struct bb_state *,pseudo_t) defined in example.c
      uses function address(struct bb_state *,struct instruction *) defined in example.c
   function generate_load(struct instruction *,struct bb_state *) in line 989
      protection public
      9 lines of code
      2 parameters
      1 conditional paths
      uses function address(struct bb_state *,struct instruction *) defined in example.c
      uses function kill_dead_pseudos(struct bb_state *) defined in example.c
      uses function target_reg(struct bb_state *,pseudo_t,pseudo_t) defined in example.c
      uses macro definition NULL defined in sm_implied3.c
      uses macro definition output_insn defined in example.c
      uses variable hardreg::name defined in example.c
   function kill_pseudo(struct bb_state *,pseudo_t) in line 999
      protection public
      22 lines of code
      2 parameters
      4 conditional paths
      uses function show_pseudo(pseudo_t) defined in linearize.c
      uses macro definition REGNO defined in example.c
      uses variable p defined in cond_expr2.c
      uses variable hardregs defined in example.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable hardreg::contains defined in example.c
      uses macro definition CURRENT_TAG defined in ptrlist.h
      uses macro definition TAG_DEAD defined in example.c
      uses variable hardreg::dead defined in example.c
      uses variable hardreg::name defined in example.c
      uses macro definition DELETE_CURRENT_PTR defined in ptrlist.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses macro definition PACK_PTR_LIST defined in ptrlist.h
   function generate_copy(struct bb_state *,struct instruction *) in line 1022
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
      uses variable src defined in sm_user_data3.c
      uses function getreg(struct bb_state *,pseudo_t,pseudo_t) defined in example.c
      uses function kill_pseudo(struct bb_state *,pseudo_t) defined in example.c
      uses function add_pseudo_reg(struct bb_state *,pseudo_t,struct hardreg *) defined in example.c
   function generate_cast(struct bb_state *,struct instruction *) in line 1029
      protection public
      28 lines of code
      2 parameters
      3 conditional paths
      uses variable src defined in sm_user_data3.c
      uses function getreg(struct bb_state *,pseudo_t,pseudo_t) defined in example.c
      uses function add_pseudo_reg(struct bb_state *,pseudo_t,struct hardreg *) defined in example.c
      uses function target_copy_reg(struct bb_state *,struct hardreg *,pseudo_t) defined in example.c
      uses macro definition MOD_SIGNED defined in symbol.h
      uses macro definition output_insn defined in example.c
      uses variable hardreg::name defined in example.c
      uses function generate_output_storage(struct bb_state *) defined in example.c
   function generate_output_storage(struct bb_state *) in line 1058
      protection public
      38 lines of code
      1 parameters
      6 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable bb_state::outputs defined in example.c
      uses variable storage::type defined in storage.h
      uses enumvalue REG_REG defined in storage.h
      uses variable hardregs defined in example.c
      uses variable storage::regno defined in storage.h
      uses variable p defined in cond_expr2.c
      uses variable hardreg::busy defined in example.c
      uses macro definition REG_FIXED defined in example.c
      uses variable hardreg::contains defined in example.c
      uses macro definition CURRENT_TAG defined in ptrlist.h
      uses macro definition TAG_DEAD defined in example.c
      uses function final_pseudo_flush(struct bb_state *,pseudo_t,struct hardreg *) defined in example.c
      uses macro definition DELETE_CURRENT_PTR defined in ptrlist.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses macro definition PACK_PTR_LIST defined in ptrlist.h
      uses function flush_reg(struct bb_state *,struct hardreg *) defined in example.c
      uses function fill_output(struct bb_state *,pseudo_t,struct storage *) defined in example.c
   function generate_branch(struct bb_state *,struct instruction *) in line 1074
      protection public
      22 lines of code
      2 parameters
      4 conditional paths
      uses variable instruction::cond defined in linearize.h
      uses variable bb_state::cc_target defined in example.c
      uses variable conditional defined in example.c
      uses variable bb_state::cc_opcode defined in example.c
      uses function getreg(struct bb_state *,pseudo_t,pseudo_t) defined in example.c
      uses macro definition NULL defined in sm_implied3.c
      uses macro definition output_insn defined in example.c
      uses variable hardreg::name defined in example.c
      uses function generate_output_storage(struct bb_state *) defined in example.c
      uses variable instruction::bb_true defined in linearize.h
      uses variable instruction::bb_false defined in linearize.h
   function generate_switch(struct bb_state *,struct instruction *) in line 1098
      protection public
      8 lines of code
      2 parameters
      1 conditional paths
      uses variable hardregs defined in example.c
      uses macro definition SWITCH_REG defined in example.c
      uses function generate_output_storage(struct bb_state *) defined in example.c
      uses macro definition output_insn defined in example.c
      uses variable hardreg::name defined in example.c
      uses function show_instruction(struct instruction *) defined in linearize.c
   function generate_ret(struct bb_state *,struct instruction *) in line 1107
      protection public
      10 lines of code
      2 parameters
      3 conditional paths
      uses variable instruction::src defined in linearize.h
      uses macro definition VOID defined in linearize.h
      uses variable hardregs defined in example.c
      uses function getreg(struct bb_state *,pseudo_t,pseudo_t) defined in example.c
      uses macro definition NULL defined in sm_implied3.c
      uses macro definition output_insn defined in example.c
      uses variable hardreg::name defined in example.c
   function generate_call(struct bb_state *,struct instruction *) in line 1121
      protection public
      18 lines of code
      2 parameters
      3 conditional paths
      uses variable offset defined in sm_implied10.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses macro definition output_insn defined in example.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses function flush_reg(struct bb_state *,struct hardreg *) defined in example.c
      uses variable hardregs defined in example.c
      uses function show_pseudo(pseudo_t) defined in linearize.c
      uses macro definition VOID defined in linearize.h
      uses function add_pseudo_reg(struct bb_state *,pseudo_t,struct hardreg *) defined in example.c
   function generate_select(struct bb_state *,struct instruction *) in line 1140
      protection public
      20 lines of code
      2 parameters
      2 conditional paths
      uses function getreg(struct bb_state *,pseudo_t,pseudo_t) defined in example.c
      uses macro definition NULL defined in sm_implied3.c
      uses function copy_reg(struct bb_state *,struct hardreg *,pseudo_t) defined in example.c
      uses function add_pseudo_reg(struct bb_state *,pseudo_t,struct hardreg *) defined in example.c
      uses variable bb_state::cc_target defined in example.c
      uses variable conditional defined in example.c
      uses variable bb_state::cc_opcode defined in example.c
      uses macro definition output_insn defined in example.c
      uses variable hardreg::name defined in example.c
   function replace_asm_arg(char **,struct asm_arg *) in line 1168
      protection public
      8 lines of code
      2 parameters
      1 conditional paths
      uses function strlen(char *) defined in sm_overflow6.c
      uses function memcpy(void *,void *,int) defined in sm_struct_assign1.c
   function replace_asm_percent(const char **,char **,struct asm_arg *,int) in line 1177
      protection public
      17 lines of code
      4 parameters
      3 conditional paths
      uses variable src defined in sm_user_data3.c
      uses variable c defined in sm_array_overflow.c
      uses function replace_asm_arg(char **,struct asm_arg *) defined in example.c
   function replace_asm_named(const char **,char **,struct asm_arg *,int) in line 1195
      protection public
      27 lines of code
      4 parameters
      7 conditional paths
      uses variable src defined in sm_user_data3.c
      uses variable c defined in sm_array_overflow.c
      uses variable asm_arg::name defined in example.c
      uses variable ident::len defined in token.h
      uses variable ident::name defined in token.h
      uses function replace_asm_arg(char **,struct asm_arg *) defined in example.c
   function replace_asm_args(const char *,struct asm_arg *,int) in line 1223
      protection public
      29 lines of code
      3 parameters
      6 conditional paths
      uses variable p defined in cond_expr2.c
      uses variable c defined in sm_array_overflow.c
      uses variable str defined in sm_overflow6.c
      uses function replace_asm_percent(const char **,char **,struct asm_arg *,int) defined in example.c
      uses function replace_asm_named(const char **,char **,struct asm_arg *,int) defined in example.c
   function generate_asm_inputs(struct bb_state *,struct asm_constraint_list *,struct asm_arg *) in line 1256
      protection public
      41 lines of code
      3 parameters
      4 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable symbol::string defined in struct.c
      uses function getreg(struct bb_state *,pseudo_t,pseudo_t) defined in example.c
      uses macro definition NULL defined in sm_implied3.c
      uses variable hardreg::name defined in example.c
      uses variable asm_arguments defined in example.c
      uses variable asm_arg::reg defined in example.c
      uses function find_in_reg(struct bb_state *,pseudo_t) defined in example.c
      uses function move_reg(struct bb_state *,struct hardreg *,struct hardreg *) defined in example.c
      uses function fill_reg(struct bb_state *,struct hardreg *,pseudo_t) defined in example.c
      uses variable symbol::pseudo defined in struct.c
      uses macro definition output_insn defined in example.c
      uses function show_pseudo(pseudo_t) defined in linearize.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function generate_asm_outputs(struct bb_state *,struct asm_constraint_list *,struct asm_arg *) in line 1298
      protection public
      32 lines of code
      3 parameters
      3 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable symbol::string defined in struct.c
      uses function target_reg(struct bb_state *,pseudo_t,pseudo_t) defined in example.c
      uses macro definition NULL defined in sm_implied3.c
      uses variable symbol::pseudo defined in struct.c
      uses variable hardreg::name defined in example.c
      uses macro definition output_insn defined in example.c
      uses function show_pseudo(pseudo_t) defined in linearize.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function generate_asm(struct bb_state *,struct instruction *) in line 1331
      protection public
      13 lines of code
      2 parameters
      2 conditional paths
      uses variable str defined in sm_overflow6.c
      uses function generate_asm_outputs(struct bb_state *,struct asm_constraint_list *,struct asm_arg *) defined in example.c
      uses variable asm_arguments defined in example.c
      uses function generate_asm_inputs(struct bb_state *,struct asm_constraint_list *,struct asm_arg *) defined in example.c
      uses function replace_asm_args(const char *,struct asm_arg *,int) defined in example.c
      uses macro definition output_insn defined in example.c
   function generate_compare(struct bb_state *,struct instruction *) in line 1345
      protection public
      20 lines of code
      2 parameters
      1 conditional paths
      uses variable src defined in sm_user_data3.c
      uses function flush_cc_cache(struct bb_state *) defined in example.c
      uses function getreg(struct bb_state *,pseudo_t,pseudo_t) defined in example.c
      uses macro definition output_insn defined in example.c
      uses function add_cc_cache(struct bb_state *,int,pseudo_t) defined in example.c
   function generate_one_insn(struct instruction *,struct bb_state *) in line 1366
      protection public
      92 lines of code
      2 parameters
      38 conditional paths
      uses variable verbose defined in lib.c
      uses function show_instruction(struct instruction *) defined in linearize.c
      uses enumvalue OP_ENTRY defined in linearize.h
      uses variable sym defined in smatch_type.c
      uses variable hardreg::name defined in example.c
      uses function show_ident(const struct ident *) defined in token.h
      uses variable symbol::ident defined in struct.c
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::modifiers defined in struct.c
      uses macro definition MOD_STATIC defined in symbol.h
      uses function printf(char *,...) defined in test-be.c
      uses enumvalue OP_SETVAL defined in linearize.h
      uses enumvalue OP_STORE defined in linearize.h
      uses function generate_store(struct instruction *,struct bb_state *) defined in example.c
      uses enumvalue OP_LOAD defined in linearize.h
      uses function generate_load(struct instruction *,struct bb_state *) defined in example.c
      uses enumvalue OP_DEATHNOTE defined in linearize.h
      uses function mark_pseudo_dead(struct bb_state *,pseudo_t) defined in example.c
      uses enumvalue OP_COPY defined in linearize.h
      uses function generate_copy(struct bb_state *,struct instruction *) defined in example.c
      uses enumvalue OP_ADD defined in linearize.h
      uses enumvalue OP_MULU defined in linearize.h
      uses enumvalue OP_MULS defined in linearize.h
      uses enumvalue OP_AND defined in linearize.h
      uses enumvalue OP_OR defined in linearize.h
      uses enumvalue OP_XOR defined in linearize.h
      uses enumvalue OP_AND_BOOL defined in linearize.h
      uses enumvalue OP_OR_BOOL defined in linearize.h
      uses function generate_commutative_binop(struct bb_state *,struct instruction *) defined in example.c
      uses enumvalue OP_SUB defined in linearize.h
      uses enumvalue OP_DIVU defined in linearize.h
      uses enumvalue OP_DIVS defined in linearize.h
      uses enumvalue OP_MODU defined in linearize.h
      uses enumvalue OP_MODS defined in linearize.h
      uses enumvalue OP_SHL defined in linearize.h
      uses enumvalue OP_LSR defined in linearize.h
      uses enumvalue OP_ASR defined in linearize.h
      uses function generate_binop(struct bb_state *,struct instruction *) defined in example.c
      uses enumvalue OP_BINCMP defined in linearize.h
      uses enumvalue OP_BINCMP_END defined in linearize.h
      uses function generate_compare(struct bb_state *,struct instruction *) defined in example.c
      uses enumvalue OP_CAST defined in linearize.h
      uses enumvalue OP_SCAST defined in linearize.h
      uses enumvalue OP_FPCAST defined in linearize.h
      uses enumvalue OP_PTRCAST defined in linearize.h
      uses function generate_cast(struct bb_state *,struct instruction *) defined in example.c
      uses enumvalue OP_SEL defined in linearize.h
      uses function generate_select(struct bb_state *,struct instruction *) defined in example.c
      uses enumvalue OP_BR defined in linearize.h
      uses function generate_branch(struct bb_state *,struct instruction *) defined in example.c
      uses enumvalue OP_SWITCH defined in linearize.h
      uses function generate_switch(struct bb_state *,struct instruction *) defined in example.c
      uses enumvalue OP_CALL defined in linearize.h
      uses function generate_call(struct bb_state *,struct instruction *) defined in example.c
      uses enumvalue OP_RET defined in linearize.h
      uses function generate_ret(struct bb_state *,struct instruction *) defined in example.c
      uses enumvalue OP_ASM defined in linearize.h
      uses function generate_asm(struct bb_state *,struct instruction *) defined in example.c
      uses enumvalue OP_PHI defined in linearize.h
      uses enumvalue OP_PHISOURCE defined in linearize.h
      uses macro definition output_insn defined in example.c
      uses function kill_dead_pseudos(struct bb_state *) defined in example.c
   function write_reg_to_storage(struct bb_state *,struct hardreg *,pseudo_t,struct storage *) in line 1462
      protection public
      40 lines of code
      4 parameters
      7 conditional paths
      uses variable storage::type defined in storage.h
      uses enumvalue REG_REG defined in storage.h
      uses variable hardregs defined in example.c
      uses variable storage::regno defined in storage.h
      uses macro definition output_insn defined in example.c
      uses variable hardreg::name defined in example.c
      uses enumvalue REG_UDEF defined in storage.h
      uses variable hardreg::busy defined in example.c
      uses macro definition VERY_BUSY defined in example.c
      uses macro definition REG_FIXED defined in example.c
      uses macro definition REGNO defined in example.c
      uses variable hardreg::contains defined in example.c
      uses function alloc_stack(struct bb_state *,struct storage *) defined in example.c
      uses function show_memop(struct storage *) defined in example.c
   function write_val_to_storage(struct bb_state *,pseudo_t,struct storage *) in line 1503
      protection public
      15 lines of code
      3 parameters
      3 conditional paths
      uses variable storage::type defined in storage.h
      uses enumvalue REG_UDEF defined in storage.h
      uses function alloc_stack(struct bb_state *,struct storage *) defined in example.c
      uses macro definition output_insn defined in example.c
      uses function show_pseudo(pseudo_t) defined in linearize.c
      uses variable src defined in sm_user_data3.c
      uses function show_memop(struct storage *) defined in example.c
      uses enumvalue REG_REG defined in storage.h
      uses variable hardregs defined in example.c
      uses variable storage::regno defined in storage.h
      uses variable hardreg::name defined in example.c
   function fill_output(struct bb_state *,pseudo_t,struct storage *) in line 1519
      protection public
      59 lines of code
      3 parameters
      12 conditional paths
      uses variable pseudo::type defined in linearize.h
      uses enumvalue PSEUDO_VAL defined in linearize.h
      uses function write_val_to_storage(struct bb_state *,pseudo_t,struct storage *) defined in example.c
      uses enumvalue PSEUDO_REG defined in linearize.h
      uses variable pseudo::def defined in linearize.h
      uses variable instruction::opcode defined in linearize.h
      uses enumvalue OP_SETVAL defined in linearize.h
      uses macro definition REGNO defined in example.c
      uses variable hardregs defined in example.c
      uses variable p defined in cond_expr2.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable hardreg::contains defined in example.c
      uses function write_reg_to_storage(struct bb_state *,struct hardreg *,pseudo_t,struct storage *) defined in example.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses function find_storage_hash(pseudo_t,struct storage_hash_list *) defined in example.c
      uses variable bb_state::internal defined in example.c
      uses variable bb_state::inputs defined in example.c
      uses variable storage::type defined in storage.h
      uses enumvalue REG_UDEF defined in storage.h
      uses variable storage_hash::storage defined in storage.h
      uses enumvalue REG_REG defined in storage.h
      uses macro definition output_insn defined in example.c
      uses function show_memop(struct storage *) defined in example.c
      uses variable storage::regno defined in storage.h
      uses variable hardreg::name defined in example.c
   function final_pseudo_flush(struct bb_state *,pseudo_t,struct hardreg *) in line 1579
      protection public
      56 lines of code
      3 parameters
      11 conditional paths
      uses function hash(struct hashtable *,void *) defined in hashtable.c
      uses function find_storage_hash(pseudo_t,struct storage_hash_list *) defined in example.c
      uses variable bb_state::outputs defined in example.c
      uses variable storage::type defined in storage.h
      uses enumvalue REG_REG defined in storage.h
      uses variable hardregs defined in example.c
      uses variable storage::regno defined in storage.h
      uses variable hardreg::contains defined in example.c
      uses variable hardreg::busy defined in example.c
      uses macro definition VERY_BUSY defined in example.c
      uses function empty_reg(struct bb_state *) defined in example.c
      uses enumvalue REG_UDEF defined in storage.h
      uses macro definition output_insn defined in example.c
      uses variable hardreg::name defined in example.c
      uses function show_memop(struct storage *) defined in example.c
      uses function add_pseudo_reg(struct bb_state *,pseudo_t,struct hardreg *) defined in example.c
   function generate(struct basic_block *,struct bb_state *) in line 1679
      protection public
      47 lines of code
      2 parameters
      5 conditional paths
      uses macro definition REGNO defined in example.c
      uses macro definition free_ptr_list defined in ptrlist.h
      uses variable hardregs defined in example.c
      uses variable hardreg::contains defined in example.c
      uses variable hardreg::busy defined in example.c
      uses variable hardreg::dead defined in example.c
      uses variable hardreg::used defined in example.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable bb_state::inputs defined in example.c
      uses variable hardreg::name defined in example.c
      uses function show_storage(struct storage *) defined in storage.c
      uses function show_pseudo(pseudo_t) defined in linearize.c
      uses variable storage::type defined in storage.h
      uses enumvalue REG_REG defined in storage.h
      uses variable storage::regno defined in storage.h
      uses function add_pseudo_reg(struct bb_state *,pseudo_t,struct hardreg *) defined in example.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses variable basic_block::insns defined in linearize.h
      uses function generate_one_insn(struct instruction *,struct bb_state *) defined in example.c
      uses variable verbose defined in lib.c
      uses variable bb_state::internal defined in example.c
      uses variable bb_state::outputs defined in example.c
      uses function printf(char *,...) defined in test-be.c
   function generate_list(struct basic_block_list *,unsigned long) in line 1727
      protection public
      9 lines of code
      2 parameters
      2 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable basic_block::generation defined in linearize.h
      uses function output_bb(struct basic_block *,unsigned long) defined in example.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function mark_used_registers(struct basic_block *,struct bb_state *) in line 1744
      protection public
      17 lines of code
      2 parameters
      2 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable basic_block::parents defined in linearize.h
      uses function gather_storage(struct basic_block *,enum inout_enum) defined in storage.c
      uses enumvalue STOR_OUT defined in storage.h
      uses enumvalue REG_REG defined in storage.h
      uses variable hardregs defined in example.c
      uses variable hardreg::used defined in example.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function set_up_arch_entry(struct entrypoint *,struct instruction *) in line 1801
      protection public
      39 lines of code
      2 parameters
      5 conditional paths
      uses variable sym defined in smatch_type.c
      uses variable offset defined in sm_implied10.c
      uses variable symbol::ep defined in struct.c
      uses variable entrypoint::name defined in linearize.h
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::modifiers defined in struct.c
      uses macro definition MOD_ADDRESSABLE defined in symbol.h
      uses variable ctype::base_type defined in struct.c
      uses macro definition PREPARE_PTR_LIST defined in ptrlist.h
      uses variable symbol::arguments defined in struct.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses function lookup_storage(struct basic_block *,pseudo_t,enum inout_enum) defined in storage.c
      uses enumvalue STOR_IN defined in storage.h
      uses function add_storage(struct storage *,struct basic_block *,pseudo_t,enum inout_enum) defined in storage.c
      uses variable storage::type defined in storage.h
      uses enumvalue REG_REG defined in storage.h
      uses variable storage::regno defined in storage.h
      uses variable symbol::bit_size defined in struct.c
      uses variable bits_in_int defined in target.c
      uses enumvalue REG_FRAME defined in storage.h
      uses variable storage::offset defined in storage.h
      uses macro definition NEXT_PTR_LIST defined in ptrlist.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses macro definition FINISH_PTR_LIST defined in ptrlist.h
   function set_up_arch_exit(struct basic_block *,struct instruction *) in line 1849
      protection public
      14 lines of code
      2 parameters
      3 conditional paths
      uses variable instruction::src defined in linearize.h
      uses macro definition VOID defined in linearize.h
      uses function lookup_storage(struct basic_block *,pseudo_t,enum inout_enum) defined in storage.c
      uses enumvalue STOR_OUT defined in storage.h
      uses function add_storage(struct storage *,struct basic_block *,pseudo_t,enum inout_enum) defined in storage.c
      uses variable storage::type defined in storage.h
      uses enumvalue REG_REG defined in storage.h
      uses variable storage::regno defined in storage.h
   function set_up_arch_switch(struct basic_block *,struct instruction *) in line 1870
      protection public
      11 lines of code
      2 parameters
      2 conditional paths
      uses function lookup_storage(struct basic_block *,pseudo_t,enum inout_enum) defined in storage.c
      uses enumvalue STOR_OUT defined in storage.h
      uses function add_storage(struct storage *,struct basic_block *,pseudo_t,enum inout_enum) defined in storage.c
      uses variable storage::type defined in storage.h
      uses enumvalue REG_REG defined in storage.h
      uses variable storage::regno defined in storage.h
      uses macro definition SWITCH_REG defined in example.c
   function arch_set_up_storage(struct entrypoint *) in line 1882
      protection public
      23 lines of code
      1 parameters
      4 conditional paths
      uses function set_up_arch_entry(struct entrypoint *,struct instruction *) defined in example.c
      uses variable symbol::ep defined in struct.c
      uses variable entrypoint::entry defined in linearize.h
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable entrypoint::bbs defined in linearize.h
      uses variable basic_block::insns defined in linearize.h
      uses enumvalue OP_RET defined in linearize.h
      uses function set_up_arch_exit(struct basic_block *,struct instruction *) defined in example.c
      uses enumvalue OP_SWITCH defined in linearize.h
      uses function set_up_arch_switch(struct basic_block *,struct instruction *) defined in example.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function output(struct entrypoint *) in line 1906
      protection public
      22 lines of code
      1 parameters
      1 conditional paths
      uses variable bb_generation defined in flow.c
      uses variable last_reg defined in example.c
      uses variable stack_offset defined in example.c
      uses function unssa(struct entrypoint *) defined in linearize.h
      uses variable symbol::ep defined in struct.c
      uses function set_up_storage(struct entrypoint *) defined in storage.c
      uses function arch_set_up_storage(struct entrypoint *) defined in example.c
      uses function output_bb(struct basic_block *,unsigned long) defined in example.c
      uses variable entrypoint::entry defined in linearize.h
      uses variable instruction::bb defined in linearize.h
      uses function free_storage(void) defined in storage.c
   function compile(struct symbol_list *) in line 1929
      protection public
      13 lines of code
      1 parameters
      2 conditional paths
      uses variable sym defined in smatch_type.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable symbol::ep defined in struct.c
      uses function expand_symbol(struct symbol *) defined in expand.c
      uses function linearize_symbol(struct symbol *) defined in linearize.c
      uses function output(struct entrypoint *) defined in example.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function main(int,char **) in line 1943
      protection public
      12 lines of code
      2 parameters
      1 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses function compile(struct symbol_list *) defined in example.c
      uses function sparse_initialize(int,char **,struct string_list **) defined in lib.c
      uses variable dbg_dead defined in lib.c
      uses macro definition FOR_EACH_PTR_NOTAG defined in ptrlist.h
      uses function sparse(char *) defined in lib.c
      uses macro definition END_FOR_EACH_PTR_NOTAG defined in ptrlist.h
   variable hardreg::busy in line 106
      protection public
   variable hardreg::contains in line 105
      protection public
   variable hardreg::dead in line 107
      protection public
   variable hardreg::name in line 104
      protection public
   variable hardreg::used in line 108
      protection public
   variable bb_state::cc_dead in line 145
      protection public
   variable bb_state::cc_opcode in line 145
      protection public
   variable bb_state::cc_target in line 146
      protection public
   variable bb_state::inputs in line 140
      protection public
   variable bb_state::internal in line 142
      protection public
   variable bb_state::outputs in line 141
      protection public
   variable bb_state::pos in line 108
      protection public
   variable operand::@28 in line 170
      protection public
   variable operand::base in line 167
      protection public
   variable operand::index in line 168
      protection public
   variable operand::offset in line 164
      protection public
   variable operand::reg in line 161
      protection public
   variable operand::scale in line 165
      protection public
   variable operand::size in line 159
      protection public
   variable operand::sym in line 166
      protection public
   variable operand::type in line 146
      protection public
   variable operand::value in line 162
      protection public
   variable operand::@27::@30 in line 169
      protection public
   variable operand::@27::reg in line 161
      protection public
   variable operand::@27::value in line 162
      protection public
   variable operand::@27::@29::base in line 167
      protection public
   variable operand::@27::@29::index in line 168
      protection public
   variable operand::@27::@29::offset in line 164
      protection public
   variable operand::@27::@29::scale in line 165
      protection public
   variable operand::@27::@29::sym in line 166
      protection public
   variable asm_arg::name in line 1162
      protection public
   variable asm_arg::pseudo in line 1164
      protection public
   variable asm_arg::reg in line 1165
      protection public
   variable asm_arg::value in line 1163
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/expand.c
module expand.c
   macro definition SIDE_EFFECTS in line 46
      protection public
   macro definition UNSAFE in line 47
      protection public
   macro definition SELECT_COST in line 48
      protection public
   macro definition BRANCH_COST in line 49
      protection public
   macro definition CONVERT in line 176
      protection public
   macro definition SIGNED in line 177
      protection public
   macro definition UNSIGNED in line 178
      protection public
   macro definition MOD_IGN in line 486
      protection public
   variable conservative in line 53
      protection public
   function expand_expression(struct expression *) in line 51
      protection public
      90 lines of code
      1 parameters
      34 conditional paths
      uses variable expression::ctype defined in expression.h
      uses macro definition UNSAFE defined in expand.c
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_VALUE defined in expression.h
      uses enumvalue EXPR_FVALUE defined in expression.h
      uses enumvalue EXPR_STRING defined in expression.h
      uses enumvalue EXPR_TYPE defined in expression.h
      uses enumvalue EXPR_SYMBOL defined in expression.h
      uses function expand_symbol_expression(struct expression *) defined in expand.c
      uses enumvalue EXPR_BINOP defined in expression.h
      uses function expand_binop(struct expression *) defined in expand.c
      uses enumvalue EXPR_LOGICAL defined in expression.h
      uses function expand_logical(struct expression *) defined in expand.c
      uses enumvalue EXPR_COMMA defined in expression.h
      uses function expand_comma(struct expression *) defined in expand.c
      uses enumvalue EXPR_COMPARE defined in expression.h
      uses function expand_compare(struct expression *) defined in expand.c
      uses enumvalue EXPR_ASSIGNMENT defined in expression.h
      uses function expand_assignment(struct expression *) defined in expand.c
      uses enumvalue EXPR_PREOP defined in expression.h
      uses function expand_preop(struct expression *) defined in expand.c
      uses enumvalue EXPR_POSTOP defined in expression.h
      uses function expand_postop(struct expression *) defined in expand.c
      uses enumvalue EXPR_CAST defined in expression.h
      uses enumvalue EXPR_FORCE_CAST defined in expression.h
      uses enumvalue EXPR_IMPLIED_CAST defined in expression.h
      uses function expand_cast(struct expression *) defined in expand.c
      uses enumvalue EXPR_CALL defined in expression.h
      uses function expand_call(struct expression *) defined in expand.c
      uses enumvalue EXPR_DEREF defined in expression.h
      uses function warning(struct position,const char *,...) defined in lib.c
      uses variable expression::pos defined in expression.h
      uses enumvalue EXPR_SELECT defined in expression.h
      uses enumvalue EXPR_CONDITIONAL defined in expression.h
      uses function expand_conditional(struct expression *) defined in expand.c
      uses enumvalue EXPR_STATEMENT defined in expression.h
      uses variable expression::statement defined in expression.h
      uses function expand_statement(struct statement *) defined in expand.c
      uses variable statement::type defined in parse.h
      uses enumvalue STMT_EXPRESSION defined in parse.h
      uses variable statement::expression defined in parse.h
      uses enumvalue EXPR_LABEL defined in expression.h
      uses enumvalue EXPR_INITIALIZER defined in expression.h
      uses function sort_expression_list(struct expression_list **) defined in expand.c
      uses variable expression::expr_list defined in expression.h
      uses function verify_nonoverlapping(struct expression_list **) defined in expand.c
      uses function expand_expression_list(struct expression_list *) defined in expand.c
      uses enumvalue EXPR_IDENTIFIER defined in expression.h
      uses enumvalue EXPR_INDEX defined in expression.h
      uses enumvalue EXPR_SLICE defined in expression.h
      uses variable expression::base defined in expression.h
      uses enumvalue EXPR_POS defined in expression.h
      uses function expand_pos_expression(struct expression *) defined in expand.c
      uses enumvalue EXPR_SIZEOF defined in expression.h
      uses enumvalue EXPR_PTRSIZEOF defined in expression.h
      uses enumvalue EXPR_ALIGNOF defined in expression.h
      uses enumvalue EXPR_OFFSETOF defined in expression.h
      uses function expression_error(struct expression *,const char *,...) defined in lib.c
      uses macro definition SIDE_EFFECTS defined in expand.c
   function expand_statement(struct statement *) in line 52
      protection public
      70 lines of code
      1 parameters
      16 conditional paths
      uses variable statement::type defined in parse.h
      uses enumvalue STMT_DECLARATION defined in parse.h
      uses variable sym defined in smatch_type.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable symbol::stmt defined in struct.c
      uses variable statement::declaration defined in parse.h
      uses function expand_symbol(struct symbol *) defined in expand.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses macro definition SIDE_EFFECTS defined in expand.c
      uses enumvalue STMT_RETURN defined in parse.h
      uses function expand_return_expression(struct statement *) defined in expand.c
      uses enumvalue STMT_EXPRESSION defined in parse.h
      uses function expand_expression(struct expression *) defined in expand.c
      uses variable statement::expression defined in parse.h
      uses enumvalue STMT_COMPOUND defined in parse.h
      uses function expand_compound(struct statement *) defined in expand.c
      uses enumvalue STMT_IF defined in parse.h
      uses function expand_if_statement(struct statement *) defined in expand.c
      uses enumvalue STMT_ITERATOR defined in parse.h
      uses variable statement::iterator_pre_condition defined in parse.h
      uses variable statement::iterator_post_condition defined in parse.h
      uses variable statement::iterator_pre_statement defined in parse.h
      uses variable statement::iterator_statement defined in parse.h
      uses variable statement::iterator_post_statement defined in parse.h
      uses enumvalue STMT_SWITCH defined in parse.h
      uses variable statement::switch_expression defined in parse.h
      uses variable statement::switch_statement defined in parse.h
      uses enumvalue STMT_CASE defined in parse.h
      uses function expand_const_expression(struct expression *,const char *) defined in expand.c
      uses variable statement::case_expression defined in parse.h
      uses variable statement::case_to defined in parse.h
      uses variable statement::case_statement defined in parse.h
      uses enumvalue STMT_LABEL defined in parse.h
      uses variable statement::label_statement defined in parse.h
      uses enumvalue STMT_GOTO defined in parse.h
      uses variable statement::goto_expression defined in parse.h
      uses enumvalue STMT_NONE defined in parse.h
      uses enumvalue STMT_ASM defined in parse.h
      uses enumvalue STMT_CONTEXT defined in parse.h
      uses enumvalue STMT_RANGE defined in parse.h
      uses variable statement::range_expression defined in parse.h
      uses variable statement::range_low defined in parse.h
      uses variable statement::range_high defined in parse.h
   function expand_symbol_expression(struct expression *) in line 55
      protection public
      15 lines of code
      1 parameters
      3 conditional paths
      uses variable sym defined in smatch_type.c
      uses variable expression::symbol defined in expression.h
      uses variable zero_int defined in symbol.c
      uses variable Wundef defined in lib.c
      uses function warning(struct position,const char *,...) defined in lib.c
      uses variable expression::pos defined in expression.h
      uses function show_ident(const struct ident *) defined in token.h
      uses variable expression::symbol_name defined in expression.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_VALUE defined in expression.h
      uses variable expression::value defined in expression.h
      uses variable expression::taint defined in expression.h
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::modifiers defined in struct.c
      uses macro definition MOD_STATIC defined in symbol.h
      uses macro definition MOD_EXTERN defined in symbol.h
   function get_longlong(struct expression *) in line 71
      protection public
      15 lines of code
      1 parameters
      3 conditional paths
      uses variable expression::ctype defined in expression.h
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::modifiers defined in struct.c
      uses macro definition MOD_UNSIGNED defined in symbol.h
      uses variable symbol::bit_size defined in struct.c
      uses variable expression::value defined in expression.h
   function cast_value(struct expression *,struct symbol *,struct expression *,struct symbol *) in line 87
      protection public
      77 lines of code
      4 parameters
      1 conditional paths
      uses variable symbol::bit_size defined in struct.c
      uses variable symbol::value defined in struct.c
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::base_type defined in struct.c
      uses variable fp_type defined in symbol.c
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_VALUE defined in expression.h
      uses variable expression::taint defined in expression.h
      uses variable expression::value defined in expression.h
      uses function get_longlong(struct expression *) defined in expand.c
      uses variable conservative defined in expand.c
      uses function warning(struct position,const char *,...) defined in lib.c
      uses variable expression::pos defined in expression.h
      uses variable Wcast_truncate defined in lib.c
      uses variable expression::fvalue defined in expression.h
      uses variable ctype::modifiers defined in struct.c
      uses macro definition MOD_LONGLONG defined in symbol.h
      uses macro definition MOD_LONGLONGLONG defined in symbol.h
      uses macro definition MOD_LONG defined in symbol.h
      uses enumvalue EXPR_FVALUE defined in expression.h
   function check_shift_count(struct expression *,struct symbol *,unsigned int) in line 165
      protection public
      6 lines of code
      3 parameters
      1 conditional paths
      uses function warning(struct position,const char *,...) defined in lib.c
      uses variable expression::pos defined in expression.h
      uses function show_typename(struct symbol *) defined in show-parse.c
   function simplify_int_binop(struct expression *,struct symbol *) in line 179
      protection public
      119 lines of code
      2 parameters
      42 conditional paths
      uses variable expression::left defined in expression.h
      uses variable expression::right defined in expression.h
      uses function v(int,...) defined in builtin_va_arg_pack.c
      uses variable l defined in sm_casts4.c
      uses variable r defined in cond_expr2.c
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_VALUE defined in expression.h
      uses variable expression::value defined in expression.h
      uses variable expression::op defined in expression.h
      uses enumvalue SPECIAL_LEFTSHIFT defined in token.h
      uses enumvalue SPECIAL_RIGHTSHIFT defined in token.h
      uses variable conservative defined in expand.c
      uses function check_shift_count(struct expression *,struct symbol *,unsigned int) defined in expand.c
      uses variable ctype::modifiers defined in struct.c
      uses macro definition MOD_UNSIGNED defined in symbol.h
      uses macro definition CONVERT defined in expand.c
      uses macro definition SIGNED defined in expand.c
      uses macro definition UNSIGNED defined in expand.c
      uses variable expression::taint defined in expression.h
      uses function warning(struct position,const char *,...) defined in lib.c
      uses variable expression::pos defined in expression.h
   function simplify_cmp_binop(struct expression *,struct symbol *) in line 299
      protection public
      31 lines of code
      2 parameters
      14 conditional paths
      uses variable expression::left defined in expression.h
      uses variable expression::right defined in expression.h
      uses variable l defined in sm_casts4.c
      uses variable r defined in cond_expr2.c
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_VALUE defined in expression.h
      uses variable expression::value defined in expression.h
      uses variable expression::op defined in expression.h
      uses enumvalue SPECIAL_LTE defined in token.h
      uses enumvalue SPECIAL_GTE defined in token.h
      uses enumvalue SPECIAL_EQUAL defined in token.h
      uses enumvalue SPECIAL_NOTEQUAL defined in token.h
      uses enumvalue SPECIAL_UNSIGNED_LT defined in token.h
      uses enumvalue SPECIAL_UNSIGNED_GT defined in token.h
      uses enumvalue SPECIAL_UNSIGNED_LTE defined in token.h
      uses enumvalue SPECIAL_UNSIGNED_GTE defined in token.h
      uses variable expression::taint defined in expression.h
   function simplify_float_binop(struct expression *) in line 331
      protection public
      48 lines of code
      1 parameters
      23 conditional paths
      uses variable expression::left defined in expression.h
      uses variable expression::right defined in expression.h
      uses variable expression::ctype defined in expression.h
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::modifiers defined in struct.c
      uses variable l defined in sm_casts4.c
      uses variable r defined in cond_expr2.c
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_FVALUE defined in expression.h
      uses variable expression::fvalue defined in expression.h
      uses macro definition MOD_LONGLONG defined in symbol.h
      uses variable expression::op defined in expression.h
      uses macro definition MOD_LONG defined in symbol.h
      uses variable conservative defined in expand.c
      uses function warning(struct position,const char *,...) defined in lib.c
      uses variable expression::pos defined in expression.h
   function simplify_float_cmp(struct expression *,struct symbol *) in line 380
      protection public
      22 lines of code
      2 parameters
      8 conditional paths
      uses variable expression::left defined in expression.h
      uses variable expression::right defined in expression.h
      uses variable l defined in sm_casts4.c
      uses variable r defined in cond_expr2.c
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_FVALUE defined in expression.h
      uses variable expression::fvalue defined in expression.h
      uses variable expression::op defined in expression.h
      uses variable expression::value defined in expression.h
      uses enumvalue SPECIAL_LTE defined in token.h
      uses enumvalue SPECIAL_GTE defined in token.h
      uses enumvalue SPECIAL_EQUAL defined in token.h
      uses enumvalue SPECIAL_NOTEQUAL defined in token.h
      uses enumvalue EXPR_VALUE defined in expression.h
      uses variable expression::taint defined in expression.h
   function expand_binop(struct expression *) in line 403
      protection public
      12 lines of code
      1 parameters
      3 conditional paths
      uses function expand_expression(struct expression *) defined in expand.c
      uses variable expression::left defined in expression.h
      uses variable expression::right defined in expression.h
      uses function simplify_int_binop(struct expression *,struct symbol *) defined in expand.c
      uses variable expression::ctype defined in expression.h
      uses function simplify_float_binop(struct expression *) defined in expand.c
   function expand_logical(struct expression *) in line 416
      protection public
      51 lines of code
      1 parameters
      7 conditional paths
      uses variable expression::left defined in expression.h
      uses variable expression::right defined in expression.h
      uses function expand_expression(struct expression *) defined in expand.c
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_VALUE defined in expression.h
      uses variable expression::op defined in expression.h
      uses enumvalue SPECIAL_LOGICAL_AND defined in token.h
      uses variable expression::value defined in expression.h
      uses variable expression::taint defined in expression.h
      uses macro definition BRANCH_COST defined in expand.c
      uses enumvalue EXPR_BINOP defined in expression.h
   function expand_comma(struct expression *) in line 468
      protection public
      17 lines of code
      1 parameters
      3 conditional paths
      uses function expand_expression(struct expression *) defined in expand.c
      uses variable expression::left defined in expression.h
      uses variable expression::right defined in expression.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_VALUE defined in expression.h
      uses enumvalue EXPR_FVALUE defined in expression.h
      uses variable expression::flags defined in expression.h
      uses variable expression::taint defined in expression.h
      uses enumvalue Taint_comma defined in expression.h
   function compare_types(int,struct symbol *,struct symbol *) in line 488
      protection public
      20 lines of code
      3 parameters
      7 conditional paths
      uses variable ctype::base_type defined in struct.c
      uses variable null_attr defined in symbol.c
      uses function op(void) defined in loop2.c
      uses enumvalue SPECIAL_EQUAL defined in token.h
      uses function type_difference(struct ctype *,struct ctype *,unsigned long,unsigned long) defined in evaluate.c
      uses macro definition MOD_IGN defined in expand.c
      uses enumvalue SPECIAL_NOTEQUAL defined in token.h
      uses macro definition NULL defined in sm_implied3.c
      uses variable symbol::bit_size defined in struct.c
      uses enumvalue SPECIAL_LTE defined in token.h
      uses enumvalue SPECIAL_GTE defined in token.h
   function expand_compare(struct expression *) in line 509
      protection public
      24 lines of code
      1 parameters
      5 conditional paths
      uses variable expression::left defined in expression.h
      uses variable expression::right defined in expression.h
      uses function expand_expression(struct expression *) defined in expand.c
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_TYPE defined in expression.h
      uses function op(void) defined in loop2.c
      uses variable expression::op defined in expression.h
      uses enumvalue EXPR_VALUE defined in expression.h
      uses variable expression::value defined in expression.h
      uses function compare_types(int,struct symbol *,struct symbol *) defined in expand.c
      uses variable expression::symbol defined in expression.h
      uses variable expression::taint defined in expression.h
      uses function simplify_cmp_binop(struct expression *,struct symbol *) defined in expand.c
      uses variable expression::ctype defined in expression.h
      uses function simplify_float_cmp(struct expression *,struct symbol *) defined in expand.c
   function expand_conditional(struct expression *) in line 534
      protection public
      32 lines of code
      1 parameters
      6 conditional paths
      uses variable expression::conditional defined in expression.h
      uses variable expression::cond_true defined in expression.h
      uses variable expression::cond_false defined in expression.h
      uses function expand_expression(struct expression *) defined in expand.c
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_VALUE defined in expression.h
      uses variable expression::flags defined in expression.h
      uses variable expression::value defined in expression.h
      uses variable expression::taint defined in expression.h
      uses macro definition SELECT_COST defined in expand.c
      uses enumvalue EXPR_SELECT defined in expression.h
      uses macro definition BRANCH_COST defined in expand.c
   function expand_assignment(struct expression *) in line 567
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses function expand_expression(struct expression *) defined in expand.c
      uses variable expression::left defined in expression.h
      uses variable expression::right defined in expression.h
      uses macro definition SIDE_EFFECTS defined in expand.c
   function expand_addressof(struct expression *) in line 574
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function expand_expression(struct expression *) defined in expand.c
      uses variable expression::unop defined in expression.h
   function constant_symbol_value(struct symbol *,int) in line 586
      protection public
      27 lines of code
      2 parameters
      8 conditional paths
      uses variable expression::value defined in expression.h
      uses variable sym defined in smatch_type.c
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::modifiers defined in struct.c
      uses macro definition MOD_ASSIGNED defined in symbol.h
      uses macro definition MOD_ADDRESSABLE defined in symbol.h
      uses macro definition NULL defined in sm_implied3.c
      uses variable symbol::initializer defined in struct.c
      uses enumvalue EXPR_INITIALIZER defined in expression.h
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses enumvalue EXPR_POS defined in expression.h
      uses variable offset defined in sm_implied10.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function expand_dereference(struct expression *) in line 614
      protection public
      55 lines of code
      1 parameters
      8 conditional paths
      uses variable expression::unop defined in expression.h
      uses variable offset defined in sm_implied10.c
      uses function expand_expression(struct expression *) defined in expand.c
      uses variable expression::ctype defined in expression.h
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::modifiers defined in struct.c
      uses macro definition MOD_NODEREF defined in symbol.h
      uses function warning(struct position,const char *,...) defined in lib.c
      uses variable expression::pos defined in expression.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_BINOP defined in expression.h
      uses variable expression::op defined in expression.h
      uses variable expression::right defined in expression.h
      uses enumvalue EXPR_VALUE defined in expression.h
      uses variable expression::value defined in expression.h
      uses variable expression::left defined in expression.h
      uses enumvalue EXPR_SYMBOL defined in expression.h
      uses variable sym defined in smatch_type.c
      uses variable expression::symbol defined in expression.h
      uses function constant_symbol_value(struct symbol *,int) defined in expand.c
      uses variable expression::taint defined in expression.h
      uses enumvalue EXPR_FVALUE defined in expression.h
      uses variable expression::fvalue defined in expression.h
      uses macro definition MOD_STATIC defined in symbol.h
      uses macro definition MOD_EXTERN defined in symbol.h
      uses macro definition UNSAFE defined in expand.c
   function simplify_preop(struct expression *) in line 670
      protection public
      32 lines of code
      1 parameters
      9 conditional paths
      uses function op(void) defined in loop2.c
      uses variable expression::unop defined in expression.h
      uses function v(int,...) defined in builtin_va_arg_pack.c
      uses enumvalue EXPR_VALUE defined in expression.h
      uses variable expression::ctype defined in expression.h
      uses variable symbol::bit_size defined in struct.c
      uses variable expression::op defined in expression.h
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::modifiers defined in struct.c
      uses macro definition MOD_UNSIGNED defined in symbol.h
      uses variable expression::value defined in expression.h
      uses variable expression::type defined in expression.h
      uses variable expression::taint defined in expression.h
      uses variable conservative defined in expand.c
      uses function warning(struct position,const char *,...) defined in lib.c
      uses variable expression::pos defined in expression.h
   function simplify_float_preop(struct expression *) in line 703
      protection public
      17 lines of code
      1 parameters
      4 conditional paths
      uses function op(void) defined in loop2.c
      uses variable expression::unop defined in expression.h
      uses function v(int,...) defined in builtin_va_arg_pack.c
      uses enumvalue EXPR_FVALUE defined in expression.h
      uses variable expression::op defined in expression.h
      uses variable expression::fvalue defined in expression.h
      uses variable expression::type defined in expression.h
   function expand_postop(struct expression *) in line 724
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function expand_expression(struct expression *) defined in expand.c
      uses variable expression::unop defined in expression.h
      uses macro definition SIDE_EFFECTS defined in expand.c
   function expand_preop(struct expression *) in line 730
      protection public
      30 lines of code
      1 parameters
      7 conditional paths
      uses variable expression::op defined in expression.h
      uses function expand_dereference(struct expression *) defined in expand.c
      uses function expand_addressof(struct expression *) defined in expand.c
      uses enumvalue SPECIAL_INCREMENT defined in token.h
      uses enumvalue SPECIAL_DECREMENT defined in token.h
      uses function expand_postop(struct expression *) defined in expand.c
      uses function expand_expression(struct expression *) defined in expand.c
      uses variable expression::unop defined in expression.h
      uses function simplify_preop(struct expression *) defined in expand.c
      uses function simplify_float_preop(struct expression *) defined in expand.c
   function expand_arguments(struct expression_list *) in line 761
      protection public
      10 lines of code
      1 parameters
      1 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses function expand_expression(struct expression *) defined in expand.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function expand_cast(struct expression *) in line 772
      protection public
      14 lines of code
      1 parameters
      2 conditional paths
      uses variable expression::cast_expression defined in expression.h
      uses function expand_expression(struct expression *) defined in expand.c
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_VALUE defined in expression.h
      uses enumvalue EXPR_FVALUE defined in expression.h
      uses function cast_value(struct expression *,struct symbol *,struct expression *,struct symbol *) defined in expand.c
      uses variable expression::ctype defined in expression.h
   function expand_constant_p(struct expression *,int) in line 788
      protection public
      7 lines of code
      2 parameters
      1 conditional paths
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_VALUE defined in expression.h
      uses variable expression::value defined in expression.h
      uses variable expression::taint defined in expression.h
   function expand_safe_p(struct expression *,int) in line 797
      protection public
      7 lines of code
      2 parameters
      1 conditional paths
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_VALUE defined in expression.h
      uses variable expression::value defined in expression.h
      uses macro definition SIDE_EFFECTS defined in expand.c
      uses variable expression::taint defined in expression.h
   function expand_symbol_call(struct expression *,int) in line 809
      protection public
      16 lines of code
      2 parameters
      4 conditional paths
      uses variable expression::fn defined in expression.h
      uses enumvalue EXPR_PREOP defined in expression.h
      uses macro definition SIDE_EFFECTS defined in expand.c
      uses variable ctype::modifiers defined in struct.c
      uses macro definition MOD_PURE defined in symbol.h
   function expand_call(struct expression *) in line 826
      protection public
      17 lines of code
      1 parameters
      3 conditional paths
      uses variable sym defined in smatch_type.c
      uses variable expression::fn defined in expression.h
      uses function expand_arguments(struct expression_list *) defined in expand.c
      uses variable expression::args defined in expression.h
      uses function expression_error(struct expression *,const char *,...) defined in lib.c
      uses macro definition SIDE_EFFECTS defined in expand.c
      uses variable symbol::type defined in struct.c
      uses enumvalue SYM_NODE defined in symbol.h
      uses function expand_symbol_call(struct expression *,int) defined in expand.c
   function expand_expression_list(struct expression_list *) in line 844
      protection public
      10 lines of code
      1 parameters
      1 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses function expand_expression(struct expression *) defined in expand.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function expand_pos_expression(struct expression *) in line 859
      protection public
      49 lines of code
      1 parameters
      6 conditional paths
      uses variable expression::init_expr defined in expression.h
      uses variable offset defined in sm_implied10.c
      uses variable expression::init_offset defined in expression.h
      uses variable expression::init_nr defined in expression.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_POS defined in expression.h
      uses enumvalue EXPR_INITIALIZER defined in expression.h
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable expression::expr_list defined in expression.h
      uses variable expression::ctype defined in expression.h
      uses macro definition REPLACE_CURRENT_PTR defined in ptrlist.h
      uses macro definition NULL defined in sm_implied3.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses function expand_expression(struct expression *) defined in expand.c
   function bit_offset(const struct expression *) in line 909
      protection public
      11 lines of code
      1 parameters
      3 conditional paths
      uses variable offset defined in sm_implied10.c
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_POS defined in expression.h
      uses variable expression::init_offset defined in expression.h
      uses variable expression::init_expr defined in expression.h
      uses variable expression::ctype defined in expression.h
      uses variable symbol::bit_offset defined in struct.c
   function compare_expressions(const void *,const void *) in line 921
      protection public
      9 lines of code
      2 parameters
      1 conditional paths
      uses function bit_offset(const struct expression *) defined in expand.c
   function sort_expression_list(struct expression_list **) in line 931
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function sort_list(struct ptr_list **,int(*)(const void *, const void *)) defined in ptrlist.h
      uses function compare_expressions(const void *,const void *) defined in expand.c
   function verify_nonoverlapping(struct expression_list **) in line 936
      protection public
      16 lines of code
      1 parameters
      3 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses macro definition b defined in preprocessor5.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses function bit_offset(const struct expression *) defined in expand.c
      uses function warning(struct position,const char *,...) defined in lib.c
      uses function info(struct position,const char *,...) defined in lib.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function expand_const_expression(struct expression *,const char *) in line 1044
      protection public
      8 lines of code
      2 parameters
      3 conditional paths
      uses function expand_expression(struct expression *) defined in expand.c
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_VALUE defined in expression.h
      uses function expression_error(struct expression *,const char *,...) defined in lib.c
   function expand_symbol(struct symbol *) in line 1053
      protection public
      19 lines of code
      1 parameters
      1 conditional paths
      uses variable sym defined in smatch_type.c
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::base_type defined in struct.c
      uses function expand_expression(struct expression *) defined in expand.c
      uses variable symbol::initializer defined in struct.c
      uses variable symbol::type defined in struct.c
      uses enumvalue SYM_FN defined in symbol.h
      uses variable symbol::stmt defined in struct.c
      uses function expand_statement(struct statement *) defined in expand.c
   function expand_return_expression(struct statement *) in line 1073
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function expand_expression(struct expression *) defined in expand.c
      uses variable symbol::stmt defined in struct.c
      uses variable statement::expression defined in parse.h
   function expand_if_statement(struct statement *) in line 1078
      protection public
      30 lines of code
      1 parameters
      4 conditional paths
      uses variable statement::if_conditional defined in parse.h
      uses variable expression::ctype defined in expression.h
      uses macro definition UNSAFE defined in expand.c
      uses function expand_expression(struct expression *) defined in expand.c
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_VALUE defined in expression.h
      uses variable expression::value defined in expression.h
      uses variable statement::if_true defined in parse.h
      uses variable statement::if_false defined in parse.h
      uses variable statement::type defined in parse.h
      uses enumvalue STMT_NONE defined in parse.h
      uses function expand_statement(struct statement *) defined in expand.c
      uses macro definition SIDE_EFFECTS defined in expand.c
   function expand_compound(struct statement *) in line 1119
      protection public
      22 lines of code
      1 parameters
      3 conditional paths
      uses variable statement::ret defined in parse.h
      uses function expand_symbol(struct symbol *) defined in expand.c
      uses variable statement::args defined in parse.h
      uses function expand_statement(struct statement *) defined in expand.c
      uses macro definition NULL defined in sm_implied3.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable statement::stmts defined in parse.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function bad_integer_constant_expression(struct expression *) in line 1213
      protection public
      8 lines of code
      1 parameters
      3 conditional paths
      uses variable expression::flags defined in expression.h
      uses enumvalue Int_const_expr defined in expression.h
      uses variable expression::taint defined in expression.h
      uses enumvalue Taint_comma defined in expression.h
   function __get_expression_value(struct expression *,int) in line 1222
      protection public
      34 lines of code
      2 parameters
      9 conditional paths
      uses variable symbol::value defined in struct.c
      uses variable symbol::ctype defined in struct.c
      uses function evaluate_expression(struct expression *) defined in evaluate.c
      uses function expression_error(struct expression *,const char *,...) defined in lib.c
      uses function expand_expression(struct expression *) defined in expand.c
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_VALUE defined in expression.h
      uses function bad_integer_constant_expression(struct expression *) defined in expand.c
      uses variable expression::value defined in expression.h
      uses variable ctype::type defined in struct.c
      uses enumvalue SYM_BASETYPE defined in symbol.h
      uses variable ctype::base_type defined in struct.c
      uses variable ctype::modifiers defined in struct.c
      uses macro definition MOD_UNSIGNED defined in symbol.h
   function get_expression_value(struct expression *) in line 1257
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function __get_expression_value(struct expression *,int) defined in expand.c
   function const_expression_value(struct expression *) in line 1262
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function __get_expression_value(struct expression *,int) defined in expand.c
   function get_expression_value_silent(struct expression *) in line 1267
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function __get_expression_value(struct expression *,int) defined in expand.c
   function is_zero_constant(struct expression *) in line 1273
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses variable conservative defined in expand.c
      uses function expand_expression(struct expression *) defined in expand.c
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_VALUE defined in expression.h
      uses variable expression::value defined in expression.h
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/expression.c
module expression.c
   macro definition ULLONG_MAX in line 238
      protection public
   macro definition LR_BINOP_EXPRESSION in line 747
      protection public
   function match_oplist(int,...) in line 47
      protection public
      13 lines of code
      2 parameters
      2 conditional paths
      uses function op(void) defined in loop2.c
      uses function comma_expression(struct token *,struct expression **) defined in expression.c
   function comma_expression(struct token *,struct expression **) in line 61
      protection public
      7 lines of code
      2 parameters
      1 conditional paths
      uses macro definition LR_BINOP_EXPRESSION defined in expression.c
      uses enumvalue EXPR_COMMA defined in expression.h
      uses function assignment_expression(struct token *,struct expression **) defined in expression.c
      uses function op(void) defined in loop2.c
   function parens_expression(struct token *,struct expression **,const char *) in line 63
      protection public
      16 lines of code
      3 parameters
      1 conditional paths
      uses function expect(struct token *,int,const char *) defined in lib.c
      uses variable token::pos defined in token.h
      uses enumvalue EXPR_STATEMENT defined in expression.h
      uses function alloc_statement(struct position,int) defined in expression.h
      uses enumvalue STMT_COMPOUND defined in parse.h
      uses function start_symbol_scope(struct position) defined in scope.c
      uses function compound_statement(struct token *,struct statement *) defined in expression.h
      uses variable token::next defined in token.h
      uses function end_symbol_scope(void) defined in scope.c
      uses function parse_expression(struct token *,struct expression **) defined in expression.c
   function handle_func(struct token *) in line 84
      protection public
      45 lines of code
      1 parameters
      3 conditional paths
      uses variable token::ident defined in token.h
      uses macro definition NULL defined in sm_implied3.c
      uses variable current_fn defined in evaluate.c
      uses variable symbol::ident defined in struct.c
      uses function alloc_symbol(struct position,int) defined in symbol.c
      uses variable token::pos defined in token.h
      uses enumvalue SYM_ARRAY defined in symbol.h
      uses enumvalue SYM_NODE defined in symbol.h
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::base_type defined in struct.c
      uses variable ctype::alignment defined in struct.c
      uses variable ctype::modifiers defined in struct.c
      uses macro definition MOD_STATIC defined in symbol.h
      uses variable symbol::endpos defined in struct.c
      uses function bind_symbol(struct symbol *,struct ident *,enum namespace) defined in symbol.c
      uses enumvalue NS_LABEL defined in symbol.h
      uses variable symbol::namespace defined in struct.c
      uses enumvalue NS_SYMBOL defined in symbol.h
      uses variable ident::len defined in token.h
      uses function memcpy(void *,void *,int) defined in sm_struct_assign1.c
      uses variable string::data defined in token.h
      uses variable ident::name defined in token.h
      uses variable symbol::initializer defined in struct.c
      uses enumvalue EXPR_STRING defined in expression.h
      uses variable expression::string defined in expression.h
      uses variable expression::ctype defined in expression.h
      uses variable symbol::array_size defined in struct.c
      uses variable symbol::bit_size defined in struct.c
   function parse_type(struct token *,struct expression **) in line 130
      protection public
      13 lines of code
      2 parameters
      2 conditional paths
      uses variable sym defined in smatch_type.c
      uses variable token::pos defined in token.h
      uses enumvalue EXPR_TYPE defined in expression.h
      uses enumvalue Int_const_expr defined in expression.h
      uses macro definition NULL defined in sm_implied3.c
      uses variable symbol::ident defined in struct.c
      uses function sparse_error(struct position,const char *,...) defined in lib.c
      uses variable ident::name defined in token.h
   function builtin_types_compatible_p_expr(struct token *,struct expression **) in line 144
      protection public
      26 lines of code
      2 parameters
      4 conditional paths
      uses variable token::pos defined in token.h
      uses enumvalue EXPR_COMPARE defined in expression.h
      uses variable expression::flags defined in expression.h
      uses enumvalue Int_const_expr defined in expression.h
      uses variable expression::op defined in expression.h
      uses enumvalue SPECIAL_EQUAL defined in token.h
      uses variable token::next defined in token.h
      uses function expect(struct token *,int,const char *) defined in lib.c
      uses function parse_type(struct token *,struct expression **) defined in expression.c
      uses variable expression::left defined in expression.h
      uses variable expression::right defined in expression.h
   function builtin_offsetof_expr(struct token *,struct expression **) in line 171
      protection public
      65 lines of code
      2 parameters
      11 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses variable p defined in cond_expr2.c
      uses variable sym defined in smatch_type.c
      uses function op(void) defined in loop2.c
      uses variable token::next defined in token.h
      uses function expect(struct token *,int,const char *) defined in lib.c
      uses variable symbol::ident defined in struct.c
      uses function sparse_error(struct position,const char *,...) defined in lib.c
      uses variable token::pos defined in token.h
      uses variable ident::name defined in token.h
      uses variable expression::in defined in expression.h
      uses enumvalue SPECIAL_DEREFERENCE defined in token.h
      uses enumvalue EXPR_OFFSETOF defined in expression.h
      uses enumvalue Int_const_expr defined in expression.h
      uses enumvalue TOKEN_IDENT defined in token.h
      uses variable token::ident defined in token.h
      uses function parse_expression(struct token *,struct expression **) defined in expression.c
      uses enumvalue TOKEN_SPECIAL defined in token.h
      uses variable token::special defined in token.h
   function parse_num(const char *,char **) in line 241
      protection public
      6 lines of code
      2 parameters
      2 conditional paths
   function get_number_value(struct expression *,struct token *) in line 248
      protection public
      123 lines of code
      2 parameters
      44 conditional paths
      uses variable str defined in sm_overflow6.c
      uses variable token::number defined in token.h
      uses variable expression::value defined in expression.h
      uses function parse_num(const char *,char **) defined in expression.c
      uses macro definition ULLONG_MAX defined in expression.c
      uses variable c defined in sm_array_overflow.c
      uses variable bits_in_int defined in target.c
      uses variable bits_in_long defined in target.c
      uses variable bits_in_longlong defined in target.c
      uses function warning(struct position,const char *,...) defined in lib.c
      uses variable expression::pos defined in expression.h
      uses function show_token(const struct token *) defined in token.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_VALUE defined in expression.h
      uses variable expression::flags defined in expression.h
      uses enumvalue Int_const_expr defined in expression.h
      uses variable expression::ctype defined in expression.h
      uses function ctype_integer(int,int) defined in parse.c
      uses function error_die(struct position,const char *,...) defined in lib.c
      uses variable expression::fvalue defined in expression.h
      uses function string_to_ld(const char *,char **) defined in strtold.c
      uses enumvalue Float_literal defined in expression.h
      uses enumvalue EXPR_FVALUE defined in expression.h
   function primary_expression(struct token *,struct expression **) in line 372
      protection public
      100 lines of code
      2 parameters
      1 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses enumvalue TOKEN_CHAR defined in token.h
      uses enumvalue TOKEN_WIDE_CHAR_EMBEDDED_3 defined in token.h
      uses variable token::pos defined in token.h
      uses enumvalue EXPR_VALUE defined in expression.h
      uses variable expression::flags defined in expression.h
      uses enumvalue Int_const_expr defined in expression.h
      uses variable expression::ctype defined in expression.h
      uses enumvalue TOKEN_WIDE_CHAR defined in token.h
      uses function get_char_constant(struct token *,unsigned long long *) defined in char.c
      uses variable expression::value defined in expression.h
      uses variable token::next defined in token.h
      uses enumvalue TOKEN_NUMBER defined in token.h
      uses function get_number_value(struct expression *,struct token *) defined in expression.c
      uses enumvalue TOKEN_ZERO_IDENT defined in token.h
      uses enumvalue EXPR_SYMBOL defined in expression.h
      uses variable expression::symbol defined in expression.h
      uses variable zero_int defined in symbol.c
      uses variable expression::symbol_name defined in expression.h
      uses variable token::ident defined in token.h
      uses enumvalue TOKEN_IDENT defined in token.h
      uses variable sym defined in smatch_type.c
      uses function lookup_symbol(struct ident *,enum namespace) defined in symbol.c
      uses enumvalue NS_SYMBOL defined in symbol.h
      uses enumvalue NS_TYPEDEF defined in symbol.h
      uses function handle_func(struct token *) defined in expression.c
      uses function builtin_types_compatible_p_expr(struct token *,struct expression **) defined in expression.c
      uses function builtin_offsetof_expr(struct token *,struct expression **) defined in expression.c
      uses variable symbol::enum_member defined in struct.c
      uses variable symbol::initializer defined in struct.c
      uses variable expression::pos defined in expression.h
      uses variable symbol::namespace defined in struct.c
      uses function sparse_error(struct position,const char *,...) defined in lib.c
      uses enumvalue TOKEN_STRING defined in token.h
      uses enumvalue TOKEN_WIDE_STRING defined in token.h
      uses enumvalue EXPR_STRING defined in expression.h
      uses function get_string_constant(struct token *,struct expression *) defined in char.c
      uses enumvalue TOKEN_SPECIAL defined in token.h
      uses variable token::special defined in token.h
      uses enumvalue EXPR_PREOP defined in expression.h
      uses variable expression::op defined in expression.h
      uses function parens_expression(struct token *,struct expression **,const char *) defined in expression.c
      uses variable expression::unop defined in expression.h
      uses enumvalue EXPR_TYPE defined in expression.h
      uses function expect(struct token *,int,const char *) defined in lib.c
   function expression_list(struct token *,struct expression_list **) in line 473
      protection public
      14 lines of code
      2 parameters
      4 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses function assignment_expression(struct token *,struct expression **) defined in expression.c
      uses variable token::next defined in token.h
   function postfix_expression(struct token *,struct expression **,struct expression *) in line 492
      protection public
      74 lines of code
      3 parameters
      10 conditional paths
      uses function primary_expression(struct token *,struct expression **) defined in expression.c
      uses enumvalue TOKEN_SPECIAL defined in token.h
      uses variable token::special defined in token.h
      uses variable token::pos defined in token.h
      uses enumvalue EXPR_PREOP defined in expression.h
      uses macro definition add defined in sm_macros.c
      uses enumvalue EXPR_BINOP defined in expression.h
      uses function parse_expression(struct token *,struct expression **) defined in expression.c
      uses variable token::next defined in token.h
      uses function expect(struct token *,int,const char *) defined in lib.c
      uses enumvalue SPECIAL_INCREMENT defined in token.h
      uses enumvalue SPECIAL_DECREMENT defined in token.h
      uses enumvalue EXPR_POSTOP defined in expression.h
      uses variable expression::op defined in expression.h
      uses variable expression::unop defined in expression.h
      uses enumvalue SPECIAL_DEREFERENCE defined in token.h
      uses enumvalue EXPR_DEREF defined in expression.h
      uses enumvalue TOKEN_IDENT defined in token.h
      uses function sparse_error(struct position,const char *,...) defined in lib.c
      uses variable token::ident defined in token.h
      uses enumvalue EXPR_CALL defined in expression.h
      uses variable expression::fn defined in expression.h
      uses function expression_list(struct token *,struct expression_list **) defined in expression.c
      uses variable expression::args defined in expression.h
      uses function cast_expression(struct token *,struct expression **) defined in expression.c
      uses function unary_expression(struct token *,struct expression **) defined in expression.c
   function cast_expression(struct token *,struct expression **) in line 567
      protection public
      36 lines of code
      2 parameters
      9 conditional paths
      uses variable ident::next defined in token.h
      uses variable token::next defined in token.h
      uses enumvalue EXPR_CAST defined in expression.h
      uses function v(int,...) defined in builtin_va_arg_pack.c
      uses variable sym defined in smatch_type.c
      uses variable expression::cast_type defined in expression.h
      uses function expect(struct token *,int,const char *) defined in lib.c
      uses function warning(struct position,const char *,...) defined in lib.c
      uses variable symbol::pos defined in struct.c
      uses function initializer(struct expression **,struct token *) defined in expression.h
      uses variable expression::cast_expression defined in expression.h
      uses function postfix_expression(struct token *,struct expression **,struct expression *) defined in expression.c
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_FORCE_CAST defined in expression.h
      uses enumvalue Int_const_expr defined in expression.h
      uses variable expression::flags defined in expression.h
      uses enumvalue Float_literal defined in expression.h
      uses function unary_expression(struct token *,struct expression **) defined in expression.c
   function unary_expression(struct token *,struct expression **) in line 568
      protection public
      79 lines of code
      2 parameters
      12 conditional paths
      uses enumvalue TOKEN_IDENT defined in token.h
      uses variable token::ident defined in token.h
      uses variable ident::reserved defined in token.h
      uses enumvalue EXPR_SIZEOF defined in expression.h
      uses enumvalue EXPR_ALIGNOF defined in expression.h
      uses enumvalue EXPR_PTRSIZEOF defined in expression.h
      uses macro definition ARRAY_SIZE defined in lib.h
      uses function type_info_expression(struct token *,struct expression **,int) defined in expression.c
      uses enumvalue TOKEN_SPECIAL defined in token.h
      uses function match_oplist(int,...) defined in expression.c
      uses variable token::special defined in token.h
      uses enumvalue SPECIAL_INCREMENT defined in token.h
      uses enumvalue SPECIAL_DECREMENT defined in token.h
      uses variable expression::unop defined in expression.h
      uses variable ident::next defined in token.h
      uses function cast_expression(struct token *,struct expression **) defined in expression.c
      uses variable token::next defined in token.h
      uses function sparse_error(struct position,const char *,...) defined in lib.c
      uses variable token::pos defined in token.h
      uses macro definition NULL defined in sm_implied3.c
      uses enumvalue EXPR_PREOP defined in expression.h
      uses variable expression::op defined in expression.h
      uses variable expression::flags defined in expression.h
      uses enumvalue Int_const_expr defined in expression.h
      uses enumvalue SPECIAL_LOGICAL_AND defined in token.h
      uses enumvalue EXPR_LABEL defined in expression.h
      uses variable sym defined in smatch_type.c
      uses function label_symbol(struct token *) defined in parse.c
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::modifiers defined in struct.c
      uses macro definition MOD_ADDRESSABLE defined in symbol.h
      uses function add_symbol(struct symbol_list **,struct symbol *) defined in symbol.h
      uses variable function_computed_target_list defined in parse.c
      uses variable expression::label_symbol defined in expression.h
      uses function postfix_expression(struct token *,struct expression **,struct expression *) defined in expression.c
   function type_info_expression(struct token *,struct expression **,int) in line 570
      protection public
      38 lines of code
      3 parameters
      4 conditional paths
      uses variable token::pos defined in token.h
      uses variable p defined in cond_expr2.c
      uses variable expression::flags defined in expression.h
      uses enumvalue Int_const_expr defined in expression.h
      uses variable token::next defined in token.h
      uses function unary_expression(struct token *,struct expression **) defined in expression.c
      uses variable expression::cast_expression defined in expression.h
      uses variable expression::cast_type defined in expression.h
      uses macro definition NULL defined in sm_implied3.c
      uses enumvalue EXPR_SIZEOF defined in expression.h
      uses enumvalue EXPR_ALIGNOF defined in expression.h
      uses enumvalue EXPR_PTRSIZEOF defined in expression.h
      uses function expect(struct token *,int,const char *) defined in lib.c
      uses enumvalue EXPR_CAST defined in expression.h
      uses function initializer(struct expression **,struct token *) defined in expression.h
      uses function postfix_expression(struct token *,struct expression **,struct expression *) defined in expression.c
   function multiplicative_expression(struct token *,struct expression **) in line 776
      protection public
      7 lines of code
      2 parameters
      1 conditional paths
      uses macro definition LR_BINOP_EXPRESSION defined in expression.c
      uses enumvalue EXPR_BINOP defined in expression.h
      uses function cast_expression(struct token *,struct expression **) defined in expression.c
      uses function op(void) defined in loop2.c
   function additive_expression(struct token *,struct expression **) in line 784
      protection public
      7 lines of code
      2 parameters
      1 conditional paths
      uses macro definition LR_BINOP_EXPRESSION defined in expression.c
      uses enumvalue EXPR_BINOP defined in expression.h
      uses function multiplicative_expression(struct token *,struct expression **) defined in expression.c
      uses function op(void) defined in loop2.c
   function shift_expression(struct token *,struct expression **) in line 792
      protection public
      7 lines of code
      2 parameters
      1 conditional paths
      uses macro definition LR_BINOP_EXPRESSION defined in expression.c
      uses enumvalue EXPR_BINOP defined in expression.h
      uses function additive_expression(struct token *,struct expression **) defined in expression.c
      uses function op(void) defined in loop2.c
      uses enumvalue SPECIAL_LEFTSHIFT defined in token.h
      uses enumvalue SPECIAL_RIGHTSHIFT defined in token.h
   function relational_expression(struct token *,struct expression **) in line 800
      protection public
      8 lines of code
      2 parameters
      1 conditional paths
      uses macro definition LR_BINOP_EXPRESSION defined in expression.c
      uses enumvalue EXPR_COMPARE defined in expression.h
      uses function shift_expression(struct token *,struct expression **) defined in expression.c
      uses function op(void) defined in loop2.c
      uses enumvalue SPECIAL_LTE defined in token.h
      uses enumvalue SPECIAL_GTE defined in token.h
   function equality_expression(struct token *,struct expression **) in line 809
      protection public
      7 lines of code
      2 parameters
      1 conditional paths
      uses macro definition LR_BINOP_EXPRESSION defined in expression.c
      uses enumvalue EXPR_COMPARE defined in expression.h
      uses function relational_expression(struct token *,struct expression **) defined in expression.c
      uses function op(void) defined in loop2.c
      uses enumvalue SPECIAL_EQUAL defined in token.h
      uses enumvalue SPECIAL_NOTEQUAL defined in token.h
   function bitwise_and_expression(struct token *,struct expression **) in line 817
      protection public
      7 lines of code
      2 parameters
      1 conditional paths
      uses macro definition LR_BINOP_EXPRESSION defined in expression.c
      uses enumvalue EXPR_BINOP defined in expression.h
      uses function equality_expression(struct token *,struct expression **) defined in expression.c
      uses function op(void) defined in loop2.c
   function bitwise_xor_expression(struct token *,struct expression **) in line 825
      protection public
      7 lines of code
      2 parameters
      1 conditional paths
      uses macro definition LR_BINOP_EXPRESSION defined in expression.c
      uses enumvalue EXPR_BINOP defined in expression.h
      uses function bitwise_and_expression(struct token *,struct expression **) defined in expression.c
      uses function op(void) defined in loop2.c
   function bitwise_or_expression(struct token *,struct expression **) in line 833
      protection public
      7 lines of code
      2 parameters
      1 conditional paths
      uses macro definition LR_BINOP_EXPRESSION defined in expression.c
      uses enumvalue EXPR_BINOP defined in expression.h
      uses function bitwise_xor_expression(struct token *,struct expression **) defined in expression.c
      uses function op(void) defined in loop2.c
   function logical_and_expression(struct token *,struct expression **) in line 841
      protection public
      7 lines of code
      2 parameters
      1 conditional paths
      uses macro definition LR_BINOP_EXPRESSION defined in expression.c
      uses enumvalue EXPR_LOGICAL defined in expression.h
      uses function bitwise_or_expression(struct token *,struct expression **) defined in expression.c
      uses function op(void) defined in loop2.c
      uses enumvalue SPECIAL_LOGICAL_AND defined in token.h
   function logical_or_expression(struct token *,struct expression **) in line 849
      protection public
      7 lines of code
      2 parameters
      1 conditional paths
      uses macro definition LR_BINOP_EXPRESSION defined in expression.c
      uses enumvalue EXPR_LOGICAL defined in expression.h
      uses function logical_and_expression(struct token *,struct expression **) defined in expression.c
      uses function op(void) defined in loop2.c
      uses enumvalue SPECIAL_LOGICAL_OR defined in token.h
   function conditional_expression(struct token *,struct expression **) in line 857
      protection public
      22 lines of code
      2 parameters
      1 conditional paths
      uses function logical_or_expression(struct token *,struct expression **) defined in expression.c
      uses variable token::pos defined in token.h
      uses enumvalue EXPR_CONDITIONAL defined in expression.h
      uses variable expression::op defined in expression.h
      uses variable token::special defined in token.h
      uses variable expression::left defined in expression.h
      uses function parse_expression(struct token *,struct expression **) defined in expression.c
      uses variable token::next defined in token.h
      uses variable expression::cond_true defined in expression.h
      uses function expect(struct token *,int,const char *) defined in lib.c
      uses function conditional_expression(struct token *,struct expression **) defined in expression.c
      uses variable expression::cond_false defined in expression.h
      uses variable expression::flags defined in expression.h
      uses enumvalue Int_const_expr defined in expression.h
   function assignment_expression(struct token *,struct expression **) in line 880
      protection public
      23 lines of code
      2 parameters
      1 conditional paths
      uses function conditional_expression(struct token *,struct expression **) defined in expression.c
      uses enumvalue TOKEN_SPECIAL defined in token.h
      uses enumvalue SPECIAL_ADD_ASSIGN defined in token.h
      uses enumvalue SPECIAL_SUB_ASSIGN defined in token.h
      uses enumvalue SPECIAL_MUL_ASSIGN defined in token.h
      uses enumvalue SPECIAL_DIV_ASSIGN defined in token.h
      uses enumvalue SPECIAL_MOD_ASSIGN defined in token.h
      uses enumvalue SPECIAL_SHL_ASSIGN defined in token.h
      uses enumvalue SPECIAL_SHR_ASSIGN defined in token.h
      uses enumvalue SPECIAL_AND_ASSIGN defined in token.h
      uses enumvalue SPECIAL_OR_ASSIGN defined in token.h
      uses enumvalue SPECIAL_XOR_ASSIGN defined in token.h
      uses function op(void) defined in loop2.c
      uses variable token::special defined in token.h
      uses macro definition ARRAY_SIZE defined in lib.h
      uses variable token::pos defined in token.h
      uses enumvalue EXPR_ASSIGNMENT defined in expression.h
      uses variable expression::left defined in expression.h
      uses variable expression::op defined in expression.h
      uses function assignment_expression(struct token *,struct expression **) defined in expression.c
      uses variable token::next defined in token.h
      uses variable expression::right defined in expression.h
   function parse_expression(struct token *,struct expression **) in line 912
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function comma_expression(struct token *,struct expression **) defined in expression.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/expression.h
module expression.h
   macro definition constant_expression in line 241
      protection public
   enumeration expression_type in line 36
      protection public
   enumeration @31 in line 69
      protection public
   enumeration @32 in line 74
      protection public
   enumeration @33 in line 78
      protection public
   enumvalue EXPR_VALUE in line 37
      protection public
   enumvalue EXPR_STRING in line 38
      protection public
   enumvalue EXPR_SYMBOL in line 39
      protection public
   enumvalue EXPR_TYPE in line 40
      protection public
   enumvalue EXPR_BINOP in line 41
      protection public
   enumvalue EXPR_ASSIGNMENT in line 42
      protection public
   enumvalue EXPR_LOGICAL in line 43
      protection public
   enumvalue EXPR_DEREF in line 44
      protection public
   enumvalue EXPR_PREOP in line 45
      protection public
   enumvalue EXPR_POSTOP in line 46
      protection public
   enumvalue EXPR_CAST in line 47
      protection public
   enumvalue EXPR_FORCE_CAST in line 48
      protection public
   enumvalue EXPR_IMPLIED_CAST in line 49
      protection public
   enumvalue EXPR_SIZEOF in line 50
      protection public
   enumvalue EXPR_ALIGNOF in line 51
      protection public
   enumvalue EXPR_PTRSIZEOF in line 52
      protection public
   enumvalue EXPR_CONDITIONAL in line 53
      protection public
   enumvalue EXPR_SELECT in line 54
      protection public
   enumvalue EXPR_STATEMENT in line 55
      protection public
   enumvalue EXPR_CALL in line 56
      protection public
   enumvalue EXPR_COMMA in line 57
      protection public
   enumvalue EXPR_COMPARE in line 58
      protection public
   enumvalue EXPR_LABEL in line 59
      protection public
   enumvalue EXPR_INITIALIZER in line 60
      protection public
   enumvalue EXPR_IDENTIFIER in line 61
      protection public
   enumvalue EXPR_INDEX in line 62
      protection public
   enumvalue EXPR_POS in line 63
      protection public
   enumvalue EXPR_FVALUE in line 64
      protection public
   enumvalue EXPR_SLICE in line 65
      protection public
   enumvalue EXPR_OFFSETOF in line 66
      protection public
   enumvalue Int_const_expr in line 70
      protection public
   enumvalue Float_literal in line 71
      protection public
   enumvalue Handled in line 75
      protection public
   enumvalue Taint_comma in line 79
      protection public
   function is_zero_constant(struct expression *) in line 187
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_VALUE defined in expression.h
      uses variable expression::value defined in expression.h
   function get_expression_value(struct expression *) in line 188
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function const_expression_value(struct expression *) in line 189
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function get_expression_value_silent(struct expression *) in line 190
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
   function parse_expression(struct token *,struct expression **) in line 193
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function conditional_expression(struct token *,struct expression **) in line 194
      protection public
      22 lines of code
      2 parameters
      4 conditional paths
      uses function alloc_expression(struct position,int) defined in expression.h
      uses variable token::pos defined in token.h
      uses enumvalue EXPR_CONDITIONAL defined in expression.h
      uses variable expression::op defined in expression.h
      uses variable token::special defined in token.h
      uses variable expression::left defined in expression.h
      uses function parse_expression(struct token *,struct expression **) defined in expression.c
      uses variable token::next defined in token.h
      uses variable expression::cond_true defined in expression.h
      uses function expect(struct token *,int,const char *) defined in lib.c
      uses function conditional_expression(struct token *,struct expression **) defined in expression.c
      uses variable expression::cond_false defined in expression.h
      uses variable expression::flags defined in expression.h
      uses enumvalue Int_const_expr defined in expression.h
   function primary_expression(struct token *,struct expression **) in line 195
      protection public
      100 lines of code
      2 parameters
      16 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses enumvalue TOKEN_CHAR defined in token.h
      uses enumvalue TOKEN_WIDE_CHAR_EMBEDDED_3 defined in token.h
      uses function alloc_expression(struct position,int) defined in expression.h
      uses variable token::pos defined in token.h
      uses enumvalue EXPR_VALUE defined in expression.h
      uses variable expression::flags defined in expression.h
      uses enumvalue Int_const_expr defined in expression.h
      uses variable expression::ctype defined in expression.h
      uses enumvalue TOKEN_WIDE_CHAR defined in token.h
      uses function get_char_constant(struct token *,unsigned long long *) defined in char.c
      uses variable expression::value defined in expression.h
      uses variable token::next defined in token.h
      uses enumvalue TOKEN_NUMBER defined in token.h
      uses enumvalue TOKEN_ZERO_IDENT defined in token.h
      uses enumvalue EXPR_SYMBOL defined in expression.h
      uses variable expression::symbol defined in expression.h
      uses variable zero_int defined in symbol.c
      uses variable expression::symbol_name defined in expression.h
      uses variable token::ident defined in token.h
      uses enumvalue TOKEN_IDENT defined in token.h
      uses variable sym defined in smatch_type.c
      uses function lookup_symbol(struct ident *,enum namespace) defined in symbol.c
      uses enumvalue NS_SYMBOL defined in symbol.h
      uses enumvalue NS_TYPEDEF defined in symbol.h
      uses variable symbol::enum_member defined in struct.c
      uses variable symbol::initializer defined in struct.c
      uses variable expression::pos defined in expression.h
      uses variable symbol::namespace defined in struct.c
      uses function sparse_error(struct position,const char *,...) defined in lib.c
      uses enumvalue TOKEN_STRING defined in token.h
      uses enumvalue TOKEN_WIDE_STRING defined in token.h
      uses enumvalue EXPR_STRING defined in expression.h
      uses function get_string_constant(struct token *,struct expression *) defined in char.c
      uses enumvalue TOKEN_SPECIAL defined in token.h
      uses variable token::special defined in token.h
      uses enumvalue EXPR_PREOP defined in expression.h
      uses variable expression::op defined in expression.h
      uses function parens_expression(struct token *,struct expression **,const char *) defined in expression.c
      uses variable expression::unop defined in expression.h
      uses function lookup_type(struct token *) defined in expression.h
      uses enumvalue EXPR_TYPE defined in expression.h
      uses function expect(struct token *,int,const char *) defined in lib.c
   function parens_expression(struct token *,struct expression **,const char *) in line 196
      protection public
      16 lines of code
      3 parameters
      2 conditional paths
      uses function expect(struct token *,int,const char *) defined in lib.c
      uses function alloc_expression(struct position,int) defined in expression.h
      uses variable token::pos defined in token.h
      uses enumvalue EXPR_STATEMENT defined in expression.h
      uses function alloc_statement(struct position,int) defined in expression.h
      uses enumvalue STMT_COMPOUND defined in parse.h
      uses function start_symbol_scope(struct position) defined in scope.c
      uses function compound_statement(struct token *,struct statement *) defined in expression.h
      uses variable token::next defined in token.h
      uses function end_symbol_scope(void) defined in scope.c
      uses function parse_expression(struct token *,struct expression **) defined in expression.c
   function assignment_expression(struct token *,struct expression **) in line 197
      protection public
      23 lines of code
      2 parameters
      4 conditional paths
      uses function conditional_expression(struct token *,struct expression **) defined in expression.c
      uses enumvalue TOKEN_SPECIAL defined in token.h
      uses enumvalue SPECIAL_ADD_ASSIGN defined in token.h
      uses enumvalue SPECIAL_SUB_ASSIGN defined in token.h
      uses enumvalue SPECIAL_MUL_ASSIGN defined in token.h
      uses enumvalue SPECIAL_DIV_ASSIGN defined in token.h
      uses enumvalue SPECIAL_MOD_ASSIGN defined in token.h
      uses enumvalue SPECIAL_SHL_ASSIGN defined in token.h
      uses enumvalue SPECIAL_SHR_ASSIGN defined in token.h
      uses enumvalue SPECIAL_AND_ASSIGN defined in token.h
      uses enumvalue SPECIAL_OR_ASSIGN defined in token.h
      uses enumvalue SPECIAL_XOR_ASSIGN defined in token.h
      uses function op(void) defined in loop2.c
      uses variable token::special defined in token.h
      uses macro definition ARRAY_SIZE defined in lib.h
      uses function alloc_expression(struct position,int) defined in expression.h
      uses variable token::pos defined in token.h
      uses enumvalue EXPR_ASSIGNMENT defined in expression.h
      uses variable expression::left defined in expression.h
      uses variable expression::op defined in expression.h
      uses function assignment_expression(struct token *,struct expression **) defined in expression.c
      uses variable token::next defined in token.h
      uses variable expression::right defined in expression.h
   function evaluate_symbol_list(struct symbol_list *) in line 199
      protection public
      9 lines of code
      1 parameters
      1 conditional paths
      uses variable sym defined in smatch_type.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function evaluate_statement(struct statement *) in line 200
      protection public
      76 lines of code
      1 parameters
      19 conditional paths
      uses variable symbol::stmt defined in struct.c
      uses macro definition NULL defined in sm_implied3.c
      uses variable statement::type defined in parse.h
      uses enumvalue STMT_DECLARATION defined in parse.h
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable statement::declaration defined in parse.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses enumvalue STMT_RETURN defined in parse.h
      uses enumvalue STMT_EXPRESSION defined in parse.h
      uses function evaluate_expression(struct expression *) defined in evaluate.c
      uses variable statement::expression defined in parse.h
      uses variable expression::ctype defined in expression.h
      uses variable null_ctype defined in symbol.c
      uses enumvalue STMT_COMPOUND defined in parse.h
      uses variable statement::ret defined in parse.h
      uses function evaluate_statement(struct statement *) defined in evaluate.c
      uses variable statement::args defined in parse.h
      uses variable statement::stmts defined in parse.h
      uses enumvalue STMT_IF defined in parse.h
      uses enumvalue STMT_ITERATOR defined in parse.h
      uses enumvalue STMT_SWITCH defined in parse.h
      uses enumvalue STMT_CASE defined in parse.h
      uses enumvalue STMT_LABEL defined in parse.h
      uses variable statement::label_statement defined in parse.h
      uses enumvalue STMT_GOTO defined in parse.h
      uses enumvalue STMT_NONE defined in parse.h
      uses enumvalue STMT_ASM defined in parse.h
      uses enumvalue STMT_CONTEXT defined in parse.h
      uses enumvalue STMT_RANGE defined in parse.h
      uses variable statement::range_expression defined in parse.h
      uses variable statement::range_low defined in parse.h
      uses variable statement::range_high defined in parse.h
   function evaluate_expression(struct expression *) in line 201
      protection public
      97 lines of code
      1 parameters
      42 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses variable expression::ctype defined in expression.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_VALUE defined in expression.h
      uses enumvalue EXPR_FVALUE defined in expression.h
      uses function expression_error(struct expression *,const char *,...) defined in lib.c
      uses enumvalue EXPR_STRING defined in expression.h
      uses enumvalue EXPR_SYMBOL defined in expression.h
      uses enumvalue EXPR_BINOP defined in expression.h
      uses function evaluate_expression(struct expression *) defined in evaluate.c
      uses variable expression::left defined in expression.h
      uses variable expression::right defined in expression.h
      uses enumvalue EXPR_LOGICAL defined in expression.h
      uses enumvalue EXPR_COMMA defined in expression.h
      uses enumvalue EXPR_COMPARE defined in expression.h
      uses enumvalue EXPR_ASSIGNMENT defined in expression.h
      uses enumvalue EXPR_PREOP defined in expression.h
      uses variable expression::unop defined in expression.h
      uses enumvalue EXPR_POSTOP defined in expression.h
      uses enumvalue EXPR_CAST defined in expression.h
      uses enumvalue EXPR_FORCE_CAST defined in expression.h
      uses enumvalue EXPR_IMPLIED_CAST defined in expression.h
      uses enumvalue EXPR_SIZEOF defined in expression.h
      uses enumvalue EXPR_PTRSIZEOF defined in expression.h
      uses enumvalue EXPR_ALIGNOF defined in expression.h
      uses enumvalue EXPR_DEREF defined in expression.h
      uses enumvalue EXPR_CALL defined in expression.h
      uses enumvalue EXPR_SELECT defined in expression.h
      uses enumvalue EXPR_CONDITIONAL defined in expression.h
      uses enumvalue EXPR_STATEMENT defined in expression.h
      uses function evaluate_statement(struct statement *) defined in evaluate.c
      uses variable expression::statement defined in expression.h
      uses enumvalue EXPR_LABEL defined in expression.h
      uses enumvalue EXPR_TYPE defined in expression.h
      uses variable expression::symbol defined in expression.h
      uses enumvalue EXPR_OFFSETOF defined in expression.h
      uses enumvalue EXPR_INITIALIZER defined in expression.h
      uses enumvalue EXPR_IDENTIFIER defined in expression.h
      uses enumvalue EXPR_INDEX defined in expression.h
      uses enumvalue EXPR_POS defined in expression.h
      uses enumvalue EXPR_SLICE defined in expression.h
   function expand_symbol(struct symbol *) in line 203
      protection public
      19 lines of code
      1 parameters
      5 conditional paths
      uses variable sym defined in smatch_type.c
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::base_type defined in struct.c
      uses variable symbol::initializer defined in struct.c
      uses variable symbol::type defined in struct.c
      uses enumvalue SYM_FN defined in symbol.h
      uses variable symbol::stmt defined in struct.c
   function alloc_expression(struct position,int) in line 205
      protection public
      7 lines of code
      2 parameters
      1 conditional paths
      uses variable expression::type defined in expression.h
      uses variable expression::pos defined in expression.h
   function alloc_const_expression(struct position,int) in line 213
      protection public
      9 lines of code
      2 parameters
      1 conditional paths
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_VALUE defined in expression.h
      uses variable expression::pos defined in expression.h
      uses variable expression::value defined in expression.h
      uses variable expression::ctype defined in expression.h
   function typename(struct token *,struct symbol **,int *) in line 224
      protection public
      24 lines of code
      3 parameters
      1 conditional paths
      uses variable decl_state::prefer_abstract defined in symbol.h
      uses variable null_attr defined in symbol.c
      uses variable sym defined in smatch_type.c
      uses function alloc_symbol(struct position,int) defined in symbol.c
      uses variable token::pos defined in token.h
      uses enumvalue SYM_NODE defined in symbol.h
      uses variable p defined in cond_expr2.c
      uses variable symbol::ctype defined in struct.c
      uses variable decl_state::ctype defined in symbol.h
      uses variable symbol::endpos defined in struct.c
      uses enumvalue SForced defined in parse.c
      uses function warning(struct position,const char *,...) defined in lib.c
      uses variable symbol::pos defined in struct.c
      uses function show_typename(struct symbol *) defined in show-parse.c
   function lookup_type(struct token *) in line 226
      protection public
      8 lines of code
      1 parameters
      2 conditional paths
      uses variable token::pos defined in token.h
      uses variable position::type defined in lib.h
      uses enumvalue TOKEN_IDENT defined in token.h
      uses variable sym defined in smatch_type.c
      uses function lookup_symbol(struct ident *,enum namespace) defined in symbol.c
      uses variable token::ident defined in token.h
      uses enumvalue NS_SYMBOL defined in symbol.h
      uses enumvalue NS_TYPEDEF defined in symbol.h
      uses variable symbol::namespace defined in struct.c
      uses function alloc_statement(struct position,int) defined in expression.h
      uses variable expression::pos defined in expression.h
      uses function initializer(struct expression **,struct token *) defined in expression.h
      uses function compound_statement(struct token *,struct statement *) defined in expression.h
   function alloc_statement(struct position,int) in line 236
      protection public
      7 lines of code
      2 parameters
      1 conditional paths
      uses variable statement::type defined in parse.h
      uses variable init_keyword::type defined in parse.c
      uses variable statement::pos defined in parse.h
   function initializer(struct expression **,struct token *) in line 237
      protection public
      10 lines of code
      2 parameters
      1 conditional paths
      uses function alloc_expression(struct position,int) defined in expression.h
      uses variable token::pos defined in token.h
      uses enumvalue EXPR_INITIALIZER defined in expression.h
      uses variable expression::expr_list defined in expression.h
      uses variable token::next defined in token.h
      uses function expect(struct token *,int,const char *) defined in lib.c
      uses function assignment_expression(struct token *,struct expression **) defined in expression.c
   function compound_statement(struct token *,struct statement *) in line 238
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses variable statement::stmts defined in parse.h
   function cast_value(struct expression *,struct symbol *,struct expression *,struct symbol *) in line 244
      protection public
      77 lines of code
      4 parameters
      14 conditional paths
      uses variable symbol::bit_size defined in struct.c
      uses variable symbol::value defined in struct.c
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::base_type defined in struct.c
      uses variable fp_type defined in symbol.c
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_VALUE defined in expression.h
      uses variable expression::taint defined in expression.h
      uses variable expression::value defined in expression.h
      uses function warning(struct position,const char *,...) defined in lib.c
      uses variable expression::pos defined in expression.h
      uses variable Wcast_truncate defined in lib.c
      uses variable expression::fvalue defined in expression.h
      uses variable ctype::modifiers defined in struct.c
      uses macro definition MOD_LONGLONG defined in symbol.h
      uses macro definition MOD_LONGLONGLONG defined in symbol.h
      uses macro definition MOD_LONG defined in symbol.h
      uses enumvalue EXPR_FVALUE defined in expression.h
   variable expression::@35 in line 183
      protection public
   variable expression::args in line 149
      protection public
   variable expression::base in line 133
      protection public
   variable expression::cast_expression in line 139
      protection public
   variable expression::cast_type in line 138
      protection public
   variable expression::cond_false in line 144
      protection public
   variable expression::cond_true in line 144
      protection public
   variable expression::conditional in line 144
      protection public
   variable expression::ctype in line 89
      protection public
   variable expression::deref in line 127
      protection public
   variable expression::down in line 177
      protection public
   variable expression::expr_ident in line 160
      protection public
   variable expression::expr_list in line 156
      protection public
   variable expression::field in line 161
      protection public
   variable expression::flags in line 85
      protection public
   variable expression::fn in line 148
      protection public
   variable expression::fvalue in line 98
      protection public
   variable expression::ident in line 179
      protection public
   variable expression::ident_expression in line 162
      protection public
   variable expression::idx_expression in line 167
      protection public
   variable expression::idx_from in line 166
      protection public
   variable expression::idx_to in line 166
      protection public
   variable expression::in in line 176
      protection public
   variable expression::index in line 180
      protection public
   variable expression::init_expr in line 172
      protection public
   variable expression::init_nr in line 171
      protection public
   variable expression::init_offset in line 171
      protection public
   variable expression::label_symbol in line 153
      protection public
   variable expression::left in line 123
      protection public
   variable expression::member in line 128
      protection public
   variable expression::member_offset in line 129
      protection public
   variable expression::offset in line 159
      protection public
   variable expression::op in line 87
      protection public
   variable expression::op_value in line 109
      protection public
   variable expression::parent in line 83
      protection public
   variable expression::pos in line 87
      protection public
   variable expression::r_bitpos in line 134
      protection public
   variable expression::r_nrbits in line 134
      protection public
   variable expression::right in line 123
      protection public
   variable expression::smatch_flags in line 86
      protection public
   variable expression::statement in line 119
      protection public
   variable expression::string in line 103
      protection public
   variable expression::symbol in line 114
      protection public
   variable expression::symbol_name in line 115
      protection public
   variable expression::taint in line 94
      protection public
   variable expression::type in line 83
      protection public
   variable expression::unop in line 108
      protection public
   variable expression::value in line 93
      protection public
   variable expression::wide in line 102
      protection public
   variable expression::@34::@37 in line 95
      protection public
   variable expression::@34::@39 in line 104
      protection public
   variable expression::@34::@41 in line 110
      protection public
   variable expression::@34::@43 in line 116
      protection public
   variable expression::@34::@45 in line 124
      protection public
   variable expression::@34::@47 in line 130
      protection public
   variable expression::@34::@49 in line 135
      protection public
   variable expression::@34::@51 in line 140
      protection public
   variable expression::@34::@53 in line 145
      protection public
   variable expression::@34::@55 in line 150
      protection public
   variable expression::@34::@57 in line 154
      protection public
   variable expression::@34::@59 in line 163
      protection public
   variable expression::@34::@61 in line 168
      protection public
   variable expression::@34::@63 in line 173
      protection public
   variable expression::@34::@65 in line 182
      protection public
   variable expression::@34::expr_list in line 156
      protection public
   variable expression::@34::fvalue in line 98
      protection public
   variable expression::@34::statement in line 119
      protection public
   variable expression::@34::@36::taint in line 94
      protection public
   variable expression::@34::@36::value in line 93
      protection public
   variable expression::@34::@38::string in line 103
      protection public
   variable expression::@34::@38::wide in line 102
      protection public
   variable expression::@34::@40::op_value in line 109
      protection public
   variable expression::@34::@40::unop in line 108
      protection public
   variable expression::@34::@42::symbol in line 114
      protection public
   variable expression::@34::@42::symbol_name in line 115
      protection public
   variable expression::@34::@44::left in line 123
      protection public
   variable expression::@34::@44::right in line 123
      protection public
   variable expression::@34::@46::deref in line 127
      protection public
   variable expression::@34::@46::member in line 128
      protection public
   variable expression::@34::@46::member_offset in line 129
      protection public
   variable expression::@34::@48::base in line 133
      protection public
   variable expression::@34::@48::r_bitpos in line 134
      protection public
   variable expression::@34::@48::r_nrbits in line 134
      protection public
   variable expression::@34::@50::cast_expression in line 139
      protection public
   variable expression::@34::@50::cast_type in line 138
      protection public
   variable expression::@34::@52::cond_false in line 144
      protection public
   variable expression::@34::@52::cond_true in line 144
      protection public
   variable expression::@34::@52::conditional in line 144
      protection public
   variable expression::@34::@54::args in line 149
      protection public
   variable expression::@34::@54::fn in line 148
      protection public
   variable expression::@34::@56::label_symbol in line 153
      protection public
   variable expression::@34::@58::expr_ident in line 160
      protection public
   variable expression::@34::@58::field in line 161
      protection public
   variable expression::@34::@58::ident_expression in line 162
      protection public
   variable expression::@34::@58::offset in line 159
      protection public
   variable expression::@34::@60::idx_expression in line 167
      protection public
   variable expression::@34::@60::idx_from in line 166
      protection public
   variable expression::@34::@60::idx_to in line 166
      protection public
   variable expression::@34::@62::init_expr in line 172
      protection public
   variable expression::@34::@62::init_nr in line 171
      protection public
   variable expression::@34::@62::init_offset in line 171
      protection public
   variable expression::@34::@64::@67 in line 181
      protection public
   variable expression::@34::@64::down in line 177
      protection public
   variable expression::@34::@64::in in line 176
      protection public
   variable expression::@34::@64::@66::ident in line 179
      protection public
   variable expression::@34::@64::@66::index in line 180
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/flow.c
module flow.c
   variable bb_generation in line 21
      protection public
   function rewrite_branch(struct basic_block *,struct basic_block **,struct basic_block *,struct basic_block *) in line 28
      protection public
      16 lines of code
      4 parameters
      2 conditional paths
      uses variable ptr defined in sm_null_deref2.c
      uses variable repeat_phase defined in cse.c
      uses macro definition REPEAT_CSE defined in flow.h
      uses variable basic_block::children defined in linearize.h
      uses variable basic_block::parents defined in linearize.h
   function pseudo_truth_value(pseudo_t) in line 49
      protection public
      18 lines of code
      1 parameters
      4 conditional paths
      uses variable pseudo::type defined in linearize.h
      uses enumvalue PSEUDO_VAL defined in linearize.h
      uses variable pseudo::value defined in linearize.h
      uses enumvalue PSEUDO_REG defined in linearize.h
      uses variable pseudo::def defined in linearize.h
      uses enumvalue OP_SYMADDR defined in linearize.h
   function bb_depends_on(struct basic_block *,struct basic_block *) in line 71
      protection public
      10 lines of code
      2 parameters
      2 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable src defined in sm_user_data3.c
      uses function pseudo_in_list(struct pseudo_list *,pseudo_t) defined in flow.h
      uses variable instruction::target defined in linearize.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function try_to_simplify_bb(struct basic_block *,struct instruction *,struct instruction *) in line 93
      protection public
      34 lines of code
      3 parameters
      7 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable instruction::phi_list defined in linearize.h
      uses variable pseudo::def defined in linearize.h
      uses variable instruction::bb defined in linearize.h
      uses variable instruction::src1 defined in linearize.h
      uses variable basic_block::insns defined in linearize.h
      uses variable instruction::opcode defined in linearize.h
      uses enumvalue OP_BR defined in linearize.h
      uses function pseudo_truth_value(pseudo_t) defined in flow.c
      uses variable instruction::target defined in linearize.h
      uses variable instruction::bb_true defined in linearize.h
      uses variable instruction::bb_false defined in linearize.h
      uses function bb_depends_on(struct basic_block *,struct basic_block *) defined in flow.c
      uses function rewrite_branch(struct basic_block *,struct basic_block **,struct basic_block *,struct basic_block *) defined in flow.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function bb_has_side_effects(struct basic_block *) in line 128
      protection public
      23 lines of code
      1 parameters
      5 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable instruction::bb defined in linearize.h
      uses variable basic_block::insns defined in linearize.h
      uses enumvalue OP_CALL defined in linearize.h
      uses enumvalue OP_STORE defined in linearize.h
      uses enumvalue OP_CONTEXT defined in linearize.h
      uses enumvalue OP_ASM defined in linearize.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function simplify_phi_branch(struct basic_block *,struct instruction *) in line 152
      protection public
      14 lines of code
      2 parameters
      4 conditional paths
      uses variable instruction::cond defined in linearize.h
      uses variable pseudo::type defined in linearize.h
      uses enumvalue PSEUDO_REG defined in linearize.h
      uses variable pseudo::def defined in linearize.h
      uses variable instruction::bb defined in linearize.h
      uses variable instruction::opcode defined in linearize.h
      uses enumvalue OP_PHI defined in linearize.h
      uses function bb_has_side_effects(struct basic_block *) defined in flow.c
      uses function try_to_simplify_bb(struct basic_block *,struct instruction *,struct instruction *) defined in flow.c
   function simplify_branch_branch(struct basic_block *,struct instruction *,struct basic_block **,int) in line 167
      protection public
      35 lines of code
      4 parameters
      8 conditional paths
      uses variable instruction::target defined in linearize.h
      uses variable instruction::bb defined in linearize.h
      uses enumvalue OP_BR defined in linearize.h
      uses variable instruction::cond defined in linearize.h
      uses function bb_has_side_effects(struct basic_block *) defined in flow.c
      uses function bb_depends_on(struct basic_block *,struct basic_block *) defined in flow.c
      uses function rewrite_branch(struct basic_block *,struct basic_block **,struct basic_block *,struct basic_block *) defined in flow.c
      uses function insert_branch(struct basic_block *,struct instruction *,struct basic_block *) defined in linearize.c
      uses function kill_instruction(struct instruction *) defined in flow.h
   function simplify_one_branch(struct basic_block *,struct instruction *) in line 203
      protection public
      7 lines of code
      2 parameters
      2 conditional paths
      uses function simplify_phi_branch(struct basic_block *,struct instruction *) defined in flow.c
      uses variable instruction::bb defined in linearize.h
      uses function simplify_branch_branch(struct basic_block *,struct instruction *,struct basic_block **,int) defined in flow.c
      uses variable instruction::bb_true defined in linearize.h
      uses variable instruction::bb_false defined in linearize.h
   function simplify_branch_nodes(struct entrypoint *) in line 211
      protection public
      14 lines of code
      1 parameters
      2 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable basic_block::ep defined in linearize.h
      uses variable entrypoint::bbs defined in linearize.h
      uses variable instruction::bb defined in linearize.h
      uses variable basic_block::insns defined in linearize.h
      uses variable instruction::opcode defined in linearize.h
      uses enumvalue OP_BR defined in linearize.h
      uses variable instruction::bb_false defined in linearize.h
      uses function simplify_one_branch(struct basic_block *,struct instruction *) defined in flow.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function simplify_flow(struct entrypoint *) in line 229
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function simplify_branch_nodes(struct entrypoint *) defined in flow.c
   function concat_user_list(struct pseudo_user_list *,struct pseudo_user_list **) in line 234
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function concat_ptr_list(struct ptr_list *,struct ptr_list **) defined in ptrlist.c
      uses variable src defined in sm_user_data3.c
   function convert_instruction_target(struct instruction *,pseudo_t) in line 239
      protection public
      19 lines of code
      2 parameters
      1 conditional paths
      uses variable instruction::target defined in linearize.h
      uses variable src defined in sm_user_data3.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable pseudo::users defined in linearize.h
      uses variable pseudo_user::userp defined in linearize.h
      uses macro definition VOID defined in linearize.h
      uses macro definition assert defined in sort.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses function concat_user_list(struct pseudo_user_list *,struct pseudo_user_list **) defined in flow.c
      uses macro definition NULL defined in sm_implied3.c
   function convert_load_instruction(struct instruction *,pseudo_t) in line 259
      protection public
      7 lines of code
      2 parameters
      1 conditional paths
      uses function convert_instruction_target(struct instruction *,pseudo_t) defined in flow.c
      uses variable src defined in sm_user_data3.c
      uses enumvalue OP_LNOP defined in linearize.h
      uses macro definition NULL defined in sm_implied3.c
   function overlapping_memop(struct instruction *,struct instruction *) in line 267
      protection public
      13 lines of code
      2 parameters
      3 conditional paths
   function same_memop(struct instruction *,struct instruction *) in line 281
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function dominates(pseudo_t,struct instruction *,struct instruction *,int) in line 292
      protection public
      26 lines of code
      4 parameters
      1 conditional paths
      uses variable instruction::opcode defined in linearize.h
      uses enumvalue OP_CALL defined in linearize.h
      uses enumvalue OP_ENTRY defined in linearize.h
      uses enumvalue OP_LOAD defined in linearize.h
      uses enumvalue OP_STORE defined in linearize.h
      uses variable instruction::src defined in linearize.h
      uses variable pseudo::type defined in linearize.h
      uses enumvalue PSEUDO_SYM defined in linearize.h
      uses function same_memop(struct instruction *,struct instruction *) defined in flow.c
      uses function overlapping_memop(struct instruction *,struct instruction *) defined in flow.c
   function find_dominating_parents(pseudo_t,struct instruction *,struct basic_block *,unsigned long,struct pseudo_list **,int,int) in line 319
      protection public
      50 lines of code
      7 parameters
      12 conditional paths
      uses variable basic_block::parents defined in linearize.h
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable one defined in sm_equiv1.c
      uses macro definition FOR_EACH_PTR_REVERSE defined in ptrlist.h
      uses variable basic_block::insns defined in linearize.h
      uses function dominates(pseudo_t,struct instruction *,struct instruction *,int) defined in flow.c
      uses enumvalue OP_LOAD defined in linearize.h
      uses macro definition END_FOR_EACH_PTR_REVERSE defined in ptrlist.h
      uses variable basic_block::generation defined in linearize.h
      uses function alloc_phi(struct basic_block *,pseudo_t,int) defined in linearize.c
      uses variable pseudo::ident defined in linearize.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function rewrite_load_instruction(struct instruction *,struct pseudo_list *) in line 374
      protection public
      33 lines of code
      2 parameters
      1 conditional paths
      uses variable pseudo::def defined in linearize.h
      uses variable instruction::src1 defined in linearize.h
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable pseudo::ident defined in linearize.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses variable instruction::bb defined in linearize.h
      uses macro definition NULL defined in sm_implied3.c
      uses function convert_load_instruction(struct instruction *,pseudo_t) defined in flow.c
      uses enumvalue PSEUDO_SYM defined in linearize.h
      uses function kill_use(pseudo_t *) defined in flow.h
      uses enumvalue OP_PHI defined in linearize.h
   function find_dominating_stores(pseudo_t,struct instruction *,unsigned long,int) in line 408
      protection public
      70 lines of code
      4 parameters
      12 conditional paths
      uses variable one defined in sm_equiv1.c
      uses macro definition NULL defined in sm_implied3.c
      uses enumvalue OP_LNOP defined in linearize.h
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable basic_block::insns defined in linearize.h
      uses function dominates(pseudo_t,struct instruction *,struct instruction *,int) defined in flow.c
      uses enumvalue OP_LOAD defined in linearize.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses function warning(struct position,const char *,...) defined in lib.c
      uses variable pseudo::sym defined in linearize.h
      uses variable symbol::pos defined in struct.c
      uses function convert_load_instruction(struct instruction *,pseudo_t) defined in flow.c
      uses variable instruction::target defined in linearize.h
      uses variable basic_block::generation defined in linearize.h
      uses function find_dominating_parents(pseudo_t,struct instruction *,struct basic_block *,unsigned long,struct pseudo_list **,int,int) defined in flow.c
      uses function check_access(struct instruction *) defined in flow.c
      uses function value_pseudo(long long) defined in linearize.c
      uses function rewrite_load_instruction(struct instruction *,struct pseudo_list *) defined in flow.c
   function kill_store(struct instruction *) in line 479
      protection public
      8 lines of code
      1 parameters
      2 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses enumvalue OP_SNOP defined in linearize.h
      uses function kill_use(pseudo_t *) defined in flow.h
   function kill_dead_stores(pseudo_t,unsigned long,struct basic_block *,int) in line 489
      protection public
      39 lines of code
      4 parameters
      10 conditional paths
      uses variable basic_block::generation defined in linearize.h
      uses macro definition FOR_EACH_PTR_REVERSE defined in ptrlist.h
      uses variable basic_block::insns defined in linearize.h
      uses enumvalue OP_LOAD defined in linearize.h
      uses enumvalue OP_STORE defined in linearize.h
      uses enumvalue OP_CALL defined in linearize.h
      uses function kill_store(struct instruction *) defined in flow.c
      uses enumvalue PSEUDO_SYM defined in linearize.h
      uses macro definition END_FOR_EACH_PTR_REVERSE defined in ptrlist.h
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable basic_block::parents defined in linearize.h
      uses variable basic_block::children defined in linearize.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function kill_dominated_stores(pseudo_t,struct instruction *,unsigned long,struct basic_block *,int,int) in line 533
      protection public
      46 lines of code
      6 parameters
      10 conditional paths
      uses variable one defined in sm_equiv1.c
      uses function kill_store(struct instruction *) defined in flow.c
      uses variable basic_block::generation defined in linearize.h
      uses macro definition FOR_EACH_PTR_REVERSE defined in ptrlist.h
      uses variable basic_block::insns defined in linearize.h
      uses function dominates(pseudo_t,struct instruction *,struct instruction *,int) defined in flow.c
      uses enumvalue OP_LOAD defined in linearize.h
      uses macro definition END_FOR_EACH_PTR_REVERSE defined in ptrlist.h
      uses function warning(struct position,const char *,...) defined in lib.c
      uses variable basic_block::pos defined in linearize.h
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable basic_block::parents defined in linearize.h
      uses variable basic_block::children defined in linearize.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function check_access(struct instruction *) in line 580
      protection public
      15 lines of code
      1 parameters
      1 conditional paths
      uses variable pseudo::type defined in linearize.h
      uses enumvalue PSEUDO_SYM defined in linearize.h
      uses variable offset defined in sm_implied10.c
      uses variable sym defined in smatch_type.c
      uses variable pseudo::sym defined in linearize.h
      uses variable symbol::bit_size defined in struct.c
      uses function warning(struct position,const char *,...) defined in lib.c
      uses function show_ident(const struct ident *) defined in token.h
      uses variable symbol::ident defined in struct.c
   function simplify_one_symbol(struct entrypoint *,struct symbol *) in line 596
      protection public
      117 lines of code
      2 parameters
      26 conditional paths
      uses variable symbol::pseudo defined in struct.c
      uses variable src defined in sm_user_data3.c
      uses variable sym defined in smatch_type.c
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::modifiers defined in struct.c
      uses macro definition MOD_VOLATILE defined in symbol.h
      uses macro definition MOD_NONLOCAL defined in symbol.h
      uses macro definition MOD_STATIC defined in symbol.h
      uses macro definition MOD_ADDRESSABLE defined in symbol.h
      uses macro definition NULL defined in sm_implied3.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable pseudo::users defined in linearize.h
      uses variable pseudo_user::insn defined in linearize.h
      uses enumvalue OP_STORE defined in linearize.h
      uses enumvalue OP_LOAD defined in linearize.h
      uses enumvalue OP_SYMADDR defined in linearize.h
      uses enumvalue OP_NOP defined in linearize.h
      uses enumvalue OP_SNOP defined in linearize.h
      uses enumvalue OP_LNOP defined in linearize.h
      uses enumvalue OP_PHI defined in linearize.h
      uses function warning(struct position,const char *,...) defined in lib.c
      uses variable symbol::pos defined in struct.c
      uses function show_ident(const struct ident *) defined in token.h
      uses variable symbol::ident defined in struct.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses macro definition VOID defined in linearize.h
      uses variable instruction::target defined in linearize.h
      uses function check_access(struct instruction *) defined in flow.c
      uses function convert_load_instruction(struct instruction *,pseudo_t) defined in flow.c
      uses function kill_store(struct instruction *) defined in flow.c
      uses macro definition FOR_EACH_PTR_REVERSE defined in ptrlist.h
      uses function find_dominating_stores(pseudo_t,struct instruction *,unsigned long,int) defined in flow.c
      uses variable bb_generation defined in flow.c
      uses macro definition END_FOR_EACH_PTR_REVERSE defined in ptrlist.h
      uses function kill_dominated_stores(pseudo_t,struct instruction *,unsigned long,struct basic_block *,int,int) defined in flow.c
      uses variable basic_block::ep defined in linearize.h
      uses variable entrypoint::bbs defined in linearize.h
      uses variable basic_block::children defined in linearize.h
      uses function kill_dead_stores(pseudo_t,unsigned long,struct basic_block *,int) defined in flow.c
   function simplify_symbol_usage(struct entrypoint *) in line 714
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable basic_block::ep defined in linearize.h
      uses variable entrypoint::accesses defined in linearize.h
      uses function simplify_one_symbol(struct entrypoint *,struct symbol *) defined in flow.c
      uses variable pseudo::sym defined in linearize.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function mark_bb_reachable(struct basic_block *,unsigned long) in line 723
      protection public
      11 lines of code
      2 parameters
      2 conditional paths
      uses variable basic_block::generation defined in linearize.h
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable basic_block::children defined in linearize.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function kill_defs(struct instruction *) in line 735
      protection public
      11 lines of code
      1 parameters
      3 conditional paths
      uses variable pseudo::def defined in linearize.h
      uses function convert_instruction_target(struct instruction *,pseudo_t) defined in flow.c
      uses macro definition VOID defined in linearize.h
   function kill_bb(struct basic_block *) in line 747
      protection public
      26 lines of code
      1 parameters
      1 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable basic_block::insns defined in linearize.h
      uses function kill_instruction(struct instruction *) defined in flow.h
      uses function kill_defs(struct instruction *) defined in flow.c
      uses macro definition NULL defined in sm_implied3.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses variable basic_block::children defined in linearize.h
      uses variable basic_block::parents defined in linearize.h
   function kill_unreachable_bbs(struct entrypoint *) in line 774
      protection public
      16 lines of code
      1 parameters
      1 conditional paths
      uses variable basic_block::generation defined in linearize.h
      uses variable bb_generation defined in flow.c
      uses function mark_bb_reachable(struct basic_block *,unsigned long) defined in flow.c
      uses variable basic_block::ep defined in linearize.h
      uses variable entrypoint::entry defined in linearize.h
      uses variable instruction::bb defined in linearize.h
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable entrypoint::bbs defined in linearize.h
      uses function kill_bb(struct basic_block *) defined in flow.c
      uses macro definition NULL defined in sm_implied3.c
      uses macro definition DELETE_CURRENT_PTR defined in ptrlist.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses macro definition PACK_PTR_LIST defined in ptrlist.h
   function rewrite_parent_branch(struct basic_block *,struct basic_block *,struct basic_block *) in line 791
      protection public
      30 lines of code
      3 parameters
      5 conditional paths
      uses variable instruction::bb defined in linearize.h
      uses variable basic_block::insns defined in linearize.h
      uses enumvalue OP_BR defined in linearize.h
      uses function rewrite_branch(struct basic_block *,struct basic_block **,struct basic_block *,struct basic_block *) defined in flow.c
      uses macro definition assert defined in sort.c
      uses enumvalue OP_SWITCH defined in linearize.h
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable multijmp::target defined in linearize.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function rewrite_branch_bb(struct basic_block *,struct instruction *) in line 822
      protection public
      23 lines of code
      2 parameters
      5 conditional paths
      uses variable instruction::bb_true defined in linearize.h
      uses variable instruction::bb_false defined in linearize.h
      uses variable instruction::cond defined in linearize.h
      uses variable pseudo::type defined in linearize.h
      uses enumvalue PSEUDO_VAL defined in linearize.h
      uses macro definition NULL defined in sm_implied3.c
      uses variable pseudo::value defined in linearize.h
      uses variable basic_block::parents defined in linearize.h
      uses function rewrite_parent_branch(struct basic_block *,struct basic_block *,struct basic_block *) defined in flow.c
   function vrfy_bb_in_list(struct basic_block *,struct basic_block_list *) in line 846
      protection public
      13 lines of code
      2 parameters
      3 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses macro definition assert defined in sort.c
   function vrfy_parents(struct basic_block *) in line 860
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable basic_block::parents defined in linearize.h
      uses function vrfy_bb_in_list(struct basic_block *,struct basic_block_list *) defined in flow.c
      uses variable basic_block::children defined in linearize.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function vrfy_children(struct basic_block *) in line 868
      protection public
      29 lines of code
      1 parameters
      5 conditional paths
      uses variable instruction::bb defined in linearize.h
      uses variable basic_block::insns defined in linearize.h
      uses macro definition assert defined in sort.c
      uses variable basic_block::children defined in linearize.h
      uses variable instruction::opcode defined in linearize.h
      uses enumvalue OP_BR defined in linearize.h
      uses function vrfy_bb_in_list(struct basic_block *,struct basic_block_list *) defined in flow.c
      uses variable instruction::bb_true defined in linearize.h
      uses variable instruction::bb_false defined in linearize.h
      uses enumvalue OP_SWITCH defined in linearize.h
      uses enumvalue OP_COMPUTEDGOTO defined in linearize.h
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable instruction::multijmp_list defined in linearize.h
      uses variable multijmp::target defined in linearize.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses variable basic_block::parents defined in linearize.h
   function vrfy_bb_flow(struct basic_block *) in line 898
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function vrfy_children(struct basic_block *) defined in flow.c
      uses function vrfy_parents(struct basic_block *) defined in flow.c
   function vrfy_flow(struct entrypoint *) in line 904
      protection public
      12 lines of code
      1 parameters
      1 conditional paths
      uses variable basic_block::ep defined in linearize.h
      uses variable entrypoint::entry defined in linearize.h
      uses variable instruction::bb defined in linearize.h
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable entrypoint::bbs defined in linearize.h
      uses macro definition NULL defined in sm_implied3.c
      uses function vrfy_bb_flow(struct basic_block *) defined in flow.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses macro definition assert defined in sort.c
   function pack_basic_blocks(struct entrypoint *) in line 917
      protection public
      88 lines of code
      1 parameters
      1 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable basic_block::ep defined in linearize.h
      uses variable entrypoint::bbs defined in linearize.h
      uses variable basic_block::insns defined in linearize.h
      uses variable instruction::bb defined in linearize.h
      uses variable instruction::opcode defined in linearize.h
      uses enumvalue OP_NOP defined in linearize.h
      uses enumvalue OP_LNOP defined in linearize.h
      uses enumvalue OP_SNOP defined in linearize.h
      uses enumvalue OP_BR defined in linearize.h
      uses function rewrite_branch_bb(struct basic_block *,struct instruction *) defined in flow.c
      uses function kill_bb(struct basic_block *) defined in flow.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses macro definition NULL defined in sm_implied3.c
      uses variable basic_block::parents defined in linearize.h
      uses variable basic_block::children defined in linearize.h
      uses variable repeat_phase defined in cse.c
      uses macro definition REPEAT_CSE defined in flow.h
      uses function kill_instruction(struct instruction *) defined in flow.h
      uses macro definition assert defined in sort.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/flow.h
module flow.h
   macro definition REPEAT_CSE in line 8
      protection public
   macro definition REPEAT_SYMBOL_CLEANUP in line 9
      protection public
   variable bb_generation in line 6
      protection public
   function simplify_flow(struct entrypoint *) in line 14
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function simplify_symbol_usage(struct entrypoint *) in line 16
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable basic_block::ep defined in linearize.h
      uses variable entrypoint::accesses defined in linearize.h
      uses variable pseudo::sym defined in linearize.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function simplify_memops(struct entrypoint *) in line 17
      protection public
      12 lines of code
      1 parameters
      1 conditional paths
      uses macro definition FOR_EACH_PTR_REVERSE defined in ptrlist.h
      uses variable basic_block::ep defined in linearize.h
      uses variable entrypoint::bbs defined in linearize.h
      uses macro definition END_FOR_EACH_PTR_REVERSE defined in ptrlist.h
   function pack_basic_blocks(struct entrypoint *) in line 18
      protection public
      88 lines of code
      1 parameters
      17 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable basic_block::ep defined in linearize.h
      uses variable entrypoint::bbs defined in linearize.h
      uses variable basic_block::insns defined in linearize.h
      uses variable instruction::bb defined in linearize.h
      uses variable instruction::opcode defined in linearize.h
      uses enumvalue OP_NOP defined in linearize.h
      uses enumvalue OP_LNOP defined in linearize.h
      uses enumvalue OP_SNOP defined in linearize.h
      uses enumvalue OP_BR defined in linearize.h
      uses function kill_bb(struct basic_block *) defined in flow.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses macro definition NULL defined in sm_implied3.c
      uses variable basic_block::parents defined in linearize.h
      uses variable basic_block::children defined in linearize.h
      uses variable repeat_phase defined in cse.c
      uses macro definition REPEAT_CSE defined in flow.h
      uses function kill_instruction(struct instruction *) defined in flow.h
      uses macro definition assert defined in sort.c
   function convert_instruction_target(struct instruction *,pseudo_t) in line 20
      protection public
      19 lines of code
      2 parameters
      3 conditional paths
      uses variable instruction::target defined in linearize.h
      uses variable src defined in sm_user_data3.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable pseudo::users defined in linearize.h
      uses variable pseudo_user::userp defined in linearize.h
      uses macro definition VOID defined in linearize.h
      uses macro definition assert defined in sort.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses macro definition NULL defined in sm_implied3.c
   function cleanup_and_cse(struct entrypoint *) in line 21
      protection public
      37 lines of code
      1 parameters
      10 conditional paths
      uses function simplify_memops(struct entrypoint *) defined in flow.h
      uses variable repeat_phase defined in cse.c
      uses macro definition INSN_HASH_SIZE defined in cse.c
      uses macro definition NULL defined in sm_implied3.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses macro definition free_ptr_list defined in ptrlist.h
      uses macro definition REPEAT_SYMBOL_CLEANUP defined in flow.h
      uses macro definition REPEAT_CSE defined in flow.h
   function simplify_instruction(struct instruction *) in line 22
      protection public
      65 lines of code
      1 parameters
      1 conditional paths
      uses enumvalue OP_ADD defined in linearize.h
      uses enumvalue OP_MULS defined in linearize.h
      uses enumvalue OP_AND defined in linearize.h
      uses enumvalue OP_OR defined in linearize.h
      uses enumvalue OP_XOR defined in linearize.h
      uses enumvalue OP_AND_BOOL defined in linearize.h
      uses enumvalue OP_OR_BOOL defined in linearize.h
      uses macro definition REPEAT_CSE defined in flow.h
      uses enumvalue OP_MULU defined in linearize.h
      uses enumvalue OP_SET_EQ defined in linearize.h
      uses enumvalue OP_SET_NE defined in linearize.h
      uses enumvalue OP_SUB defined in linearize.h
      uses enumvalue OP_DIVU defined in linearize.h
      uses enumvalue OP_DIVS defined in linearize.h
      uses enumvalue OP_MODU defined in linearize.h
      uses enumvalue OP_MODS defined in linearize.h
      uses enumvalue OP_SHL defined in linearize.h
      uses enumvalue OP_LSR defined in linearize.h
      uses enumvalue OP_ASR defined in linearize.h
      uses enumvalue OP_SET_LE defined in linearize.h
      uses enumvalue OP_SET_GE defined in linearize.h
      uses enumvalue OP_SET_LT defined in linearize.h
      uses enumvalue OP_SET_GT defined in linearize.h
      uses enumvalue OP_SET_B defined in linearize.h
      uses enumvalue OP_SET_A defined in linearize.h
      uses enumvalue OP_SET_BE defined in linearize.h
      uses enumvalue OP_SET_AE defined in linearize.h
      uses enumvalue OP_NOT defined in linearize.h
      uses enumvalue OP_NEG defined in linearize.h
      uses enumvalue OP_LOAD defined in linearize.h
      uses enumvalue OP_STORE defined in linearize.h
      uses enumvalue OP_SYMADDR defined in linearize.h
      uses macro definition NULL defined in sm_implied3.c
      uses macro definition REPEAT_SYMBOL_CLEANUP defined in flow.h
      uses enumvalue OP_CAST defined in linearize.h
      uses enumvalue OP_SCAST defined in linearize.h
      uses enumvalue OP_FPCAST defined in linearize.h
      uses enumvalue OP_PTRCAST defined in linearize.h
      uses enumvalue OP_PHI defined in linearize.h
      uses enumvalue OP_PHISOURCE defined in linearize.h
      uses enumvalue OP_SEL defined in linearize.h
      uses enumvalue OP_BR defined in linearize.h
      uses enumvalue OP_SWITCH defined in linearize.h
      uses enumvalue OP_RANGE defined in linearize.h
   function kill_bb(struct basic_block *) in line 24
      protection public
      26 lines of code
      1 parameters
      1 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable basic_block::insns defined in linearize.h
      uses function kill_instruction(struct instruction *) defined in flow.h
      uses macro definition NULL defined in sm_implied3.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses variable basic_block::children defined in linearize.h
      uses variable basic_block::parents defined in linearize.h
   function kill_use(pseudo_t *) in line 25
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses variable p defined in cond_expr2.c
      uses macro definition VOID defined in linearize.h
   function kill_instruction(struct instruction *) in line 26
      protection public
      44 lines of code
      1 parameters
      1 conditional paths
      uses enumvalue OP_BINARY defined in linearize.h
      uses enumvalue OP_BINCMP_END defined in linearize.h
      uses macro definition NULL defined in sm_implied3.c
      uses function kill_use(pseudo_t *) defined in simplify.c
      uses variable repeat_phase defined in cse.c
      uses macro definition REPEAT_CSE defined in flow.h
      uses enumvalue OP_NOT defined in linearize.h
      uses enumvalue OP_NEG defined in linearize.h
      uses enumvalue OP_PHI defined in linearize.h
      uses enumvalue OP_SYMADDR defined in linearize.h
      uses macro definition REPEAT_SYMBOL_CLEANUP defined in flow.h
      uses enumvalue OP_RANGE defined in linearize.h
      uses enumvalue OP_BR defined in linearize.h
   function kill_unreachable_bbs(struct entrypoint *) in line 27
      protection public
      16 lines of code
      1 parameters
      2 conditional paths
      uses variable basic_block::generation defined in linearize.h
      uses variable bb_generation defined in flow.c
      uses variable basic_block::ep defined in linearize.h
      uses variable entrypoint::entry defined in linearize.h
      uses variable instruction::bb defined in linearize.h
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable entrypoint::bbs defined in linearize.h
      uses function kill_bb(struct basic_block *) defined in flow.c
      uses macro definition NULL defined in sm_implied3.c
      uses macro definition DELETE_CURRENT_PTR defined in ptrlist.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses macro definition PACK_PTR_LIST defined in ptrlist.h
   function check_access(struct instruction *) in line 29
      protection public
      15 lines of code
      1 parameters
      3 conditional paths
      uses variable pseudo::type defined in linearize.h
      uses enumvalue PSEUDO_SYM defined in linearize.h
      uses variable offset defined in sm_implied10.c
      uses variable sym defined in smatch_type.c
      uses variable pseudo::sym defined in linearize.h
      uses variable symbol::bit_size defined in struct.c
      uses function warning(struct position,const char *,...) defined in lib.c
      uses function show_ident(const struct ident *) defined in token.h
      uses variable symbol::ident defined in struct.c
   function convert_load_instruction(struct instruction *,pseudo_t) in line 30
      protection public
      7 lines of code
      2 parameters
      1 conditional paths
      uses function convert_instruction_target(struct instruction *,pseudo_t) defined in flow.c
      uses variable src defined in sm_user_data3.c
      uses enumvalue OP_LNOP defined in linearize.h
      uses macro definition NULL defined in sm_implied3.c
   function rewrite_load_instruction(struct instruction *,struct pseudo_list *) in line 31
      protection public
      33 lines of code
      2 parameters
      4 conditional paths
      uses variable pseudo::def defined in linearize.h
      uses variable instruction::src1 defined in linearize.h
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable pseudo::ident defined in linearize.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses variable instruction::bb defined in linearize.h
      uses macro definition NULL defined in sm_implied3.c
      uses function convert_load_instruction(struct instruction *,pseudo_t) defined in flow.c
      uses enumvalue PSEUDO_SYM defined in linearize.h
      uses function kill_use(pseudo_t *) defined in flow.h
      uses enumvalue OP_PHI defined in linearize.h
   function dominates(pseudo_t,struct instruction *,struct instruction *,int) in line 32
      protection public
      26 lines of code
      4 parameters
      9 conditional paths
      uses variable instruction::opcode defined in linearize.h
      uses enumvalue OP_CALL defined in linearize.h
      uses enumvalue OP_ENTRY defined in linearize.h
      uses enumvalue OP_LOAD defined in linearize.h
      uses enumvalue OP_STORE defined in linearize.h
      uses variable instruction::src defined in linearize.h
      uses variable pseudo::type defined in linearize.h
      uses enumvalue PSEUDO_SYM defined in linearize.h
   function clear_liveness(struct entrypoint *) in line 34
      protection public
      9 lines of code
      1 parameters
      1 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable basic_block::ep defined in linearize.h
      uses variable entrypoint::bbs defined in linearize.h
      uses macro definition free_ptr_list defined in ptrlist.h
      uses variable basic_block::needs defined in linearize.h
      uses variable basic_block::defines defined in linearize.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function track_pseudo_liveness(struct entrypoint *) in line 35
      protection public
      39 lines of code
      1 parameters
      1 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable basic_block::ep defined in linearize.h
      uses variable entrypoint::bbs defined in linearize.h
      uses variable instruction::bb defined in linearize.h
      uses variable basic_block::insns defined in linearize.h
      uses macro definition assert defined in sort.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses macro definition FOR_EACH_PTR_REVERSE defined in ptrlist.h
      uses macro definition END_FOR_EACH_PTR_REVERSE defined in ptrlist.h
      uses variable basic_block::defines defined in linearize.h
      uses variable basic_block::children defined in linearize.h
      uses function pseudo_in_list(struct pseudo_list *,pseudo_t) defined in liveness.c
      uses variable basic_block::needs defined in linearize.h
      uses macro definition DELETE_CURRENT_PTR defined in ptrlist.h
      uses macro definition PACK_PTR_LIST defined in ptrlist.h
   function track_pseudo_death(struct entrypoint *) in line 36
      protection public
      12 lines of code
      1 parameters
      1 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable basic_block::ep defined in linearize.h
      uses variable entrypoint::bbs defined in linearize.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function track_phi_uses(struct instruction *) in line 37
      protection public
      12 lines of code
      1 parameters
      1 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses macro definition VOID defined in linearize.h
      uses variable pseudo::def defined in linearize.h
      uses macro definition assert defined in sort.c
      uses variable instruction::opcode defined in linearize.h
      uses enumvalue OP_PHISOURCE defined in linearize.h
      uses macro definition add_ptr_list defined in ptrlist.h
      uses variable instruction::phi_users defined in linearize.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function vrfy_flow(struct entrypoint *) in line 39
      protection public
      12 lines of code
      1 parameters
      2 conditional paths
      uses variable basic_block::ep defined in linearize.h
      uses variable entrypoint::entry defined in linearize.h
      uses variable instruction::bb defined in linearize.h
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable entrypoint::bbs defined in linearize.h
      uses macro definition NULL defined in sm_implied3.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses macro definition assert defined in sort.c
   function pseudo_in_list(struct pseudo_list *,pseudo_t) in line 40
      protection public
      9 lines of code
      2 parameters
      1 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/graph.c
module graph.c
   function graph_ep(struct entrypoint *) in line 44
      protection public
      69 lines of code
      1 parameters
      8 conditional paths
      uses function show_ident(const struct ident *) defined in token.h
      uses variable entrypoint::name defined in linearize.h
      uses variable symbol::ident defined in struct.c
      uses function stream_name(int) defined in token.h
      uses variable entrypoint::entry defined in linearize.h
      uses variable instruction::bb defined in linearize.h
      uses variable basic_block::pos defined in linearize.h
      uses variable position::stream defined in lib.h
      uses function printf(char *,...) defined in test-be.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable entrypoint::bbs defined in linearize.h
      uses variable position::line defined in lib.h
      uses variable position::pos defined in lib.h
      uses variable basic_block::insns defined in linearize.h
      uses enumvalue OP_STORE defined in linearize.h
      uses enumvalue PSEUDO_SYM defined in linearize.h
      uses enumvalue OP_LOAD defined in linearize.h
      uses enumvalue OP_RET defined in linearize.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses variable basic_block::children defined in linearize.h
   function graph_calls(struct entrypoint *,int) in line 118
      protection public
      42 lines of code
      2 parameters
      8 conditional paths
      uses function show_ident(const struct ident *) defined in token.h
      uses variable entrypoint::name defined in linearize.h
      uses variable symbol::ident defined in struct.c
      uses function stream_name(int) defined in token.h
      uses variable entrypoint::entry defined in linearize.h
      uses variable instruction::bb defined in linearize.h
      uses variable basic_block::pos defined in linearize.h
      uses variable position::stream defined in lib.h
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable entrypoint::bbs defined in linearize.h
      uses variable basic_block::parents defined in linearize.h
      uses variable basic_block::children defined in linearize.h
      uses variable basic_block::insns defined in linearize.h
      uses variable verbose defined in lib.c
      uses enumvalue OP_CALL defined in linearize.h
      uses macro definition MOD_EXTERN defined in symbol.h
      uses variable sym defined in smatch_type.c
      uses enumvalue PSEUDO_SYM defined in linearize.h
      uses variable symbol::next_id defined in struct.c
      uses variable symbol::namespace defined in struct.c
      uses enumvalue NS_SYMBOL defined in symbol.h
      uses variable symbol::ep defined in struct.c
      uses function printf(char *,...) defined in test-be.c
      uses function show_pseudo(pseudo_t) defined in linearize.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function main(int,char **) in line 161
      protection public
      42 lines of code
      2 parameters
      3 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses variable sym defined in smatch_type.c
      uses function printf(char *,...) defined in test-be.c
      uses function sparse_initialize(int,char **,struct string_list **) defined in lib.c
      uses macro definition FOR_EACH_PTR_NOTAG defined in ptrlist.h
      uses function sparse(char *) defined in lib.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses function expand_symbol(struct symbol *) defined in expand.c
      uses function linearize_symbol(struct symbol *) defined in linearize.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses variable symbol::ep defined in struct.c
      uses function graph_ep(struct entrypoint *) defined in graph.c
      uses function graph_calls(struct entrypoint *,int) defined in graph.c
      uses macro definition END_FOR_EACH_PTR_NOTAG defined in ptrlist.h
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/ident-list.h
module ident-list.h
   macro definition IDENT in line 2
      protection public
   macro definition IDENT_RESERVED in line 3
      protection public
   macro definition IDENT in line 2
      protection public
   macro definition IDENT_RESERVED in line 3
      protection public
   function IDENT_RESERVED(sizeof) in line 6
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function IDENT_RESERVED(if) in line 7
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function IDENT_RESERVED(else) in line 8
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function IDENT_RESERVED(return) in line 9
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function IDENT_RESERVED(switch) in line 10
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function IDENT_RESERVED(case) in line 11
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function IDENT_RESERVED(default) in line 12
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function IDENT_RESERVED(break) in line 13
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function IDENT_RESERVED(continue) in line 14
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function IDENT_RESERVED(for) in line 15
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function IDENT_RESERVED(while) in line 16
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function IDENT_RESERVED(do) in line 17
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function IDENT_RESERVED(goto) in line 18
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function IDENT(struct) in line 21
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function IDENT(union) in line 22
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function IDENT(enum) in line 23
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function IDENT(__attribute) in line 24
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function IDENT(__attribute__) in line 24
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function IDENT(volatile) in line 25
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function IDENT(__volatile) in line 25
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function IDENT(__volatile__) in line 25
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function IDENT(double) in line 26
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function IDENT(L) in line 29
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function IDENT(asm) in line 32
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function IDENT_RESERVED(__asm) in line 32
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function IDENT_RESERVED(__asm__) in line 32
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function IDENT(alignof) in line 33
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function IDENT_RESERVED(__alignof) in line 33
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function IDENT_RESERVED(__alignof__) in line 33
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function IDENT_RESERVED(__sizeof_ptr__) in line 34
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function IDENT_RESERVED(__builtin_types_compatible_p) in line 35
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function IDENT_RESERVED(__builtin_offsetof) in line 36
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function IDENT_RESERVED(__label__) in line 37
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function IDENT(packed) in line 40
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function IDENT(__packed__) in line 40
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function IDENT(aligned) in line 41
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function IDENT(__aligned__) in line 41
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function IDENT(nocast) in line 42
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function IDENT(noderef) in line 43
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function IDENT(safe) in line 44
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function IDENT(force) in line 45
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function IDENT(address_space) in line 46
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function IDENT(context) in line 47
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function IDENT(mode) in line 48
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function IDENT(__mode__) in line 48
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function IDENT(QI) in line 49
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function IDENT(__QI__) in line 49
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function IDENT(HI) in line 50
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function IDENT(__HI__) in line 50
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function IDENT(SI) in line 51
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function IDENT(__SI__) in line 51
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function IDENT(DI) in line 52
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function IDENT(__DI__) in line 52
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function IDENT(word) in line 53
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function IDENT(__word__) in line 53
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function IDENT(format) in line 54
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function IDENT(__format__) in line 54
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function IDENT(section) in line 55
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function IDENT(__section__) in line 55
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function IDENT(unused) in line 56
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function IDENT(__unused__) in line 56
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function IDENT(__const) in line 57
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function IDENT(__const__) in line 57
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function IDENT(used) in line 58
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function IDENT(__used__) in line 58
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function IDENT(warn_unused_result) in line 59
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function IDENT(__warn_unused_result__) in line 59
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function IDENT(noinline) in line 60
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function IDENT(__noinline__) in line 60
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function IDENT(deprecated) in line 61
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function IDENT(__deprecated__) in line 61
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function IDENT(noreturn) in line 62
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function IDENT(__noreturn__) in line 62
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function IDENT(regparm) in line 63
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function IDENT(__regparm__) in line 63
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function IDENT(weak) in line 64
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function IDENT(__weak__) in line 64
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function IDENT(no_instrument_function) in line 65
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function IDENT(__no_instrument_function__) in line 65
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function IDENT(sentinel) in line 66
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function IDENT(__sentinel__) in line 66
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function IDENT(alias) in line 67
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function IDENT(__alias__) in line 67
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function IDENT(pure) in line 68
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function IDENT(__pure__) in line 68
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function IDENT(always_inline) in line 69
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function IDENT(__always_inline__) in line 69
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function IDENT(syscall_linkage) in line 70
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function IDENT(__syscall_linkage__) in line 70
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function IDENT(visibility) in line 71
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function IDENT(__visibility__) in line 71
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function IDENT(bitwise) in line 72
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function IDENT(__bitwise__) in line 72
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function IDENT(model) in line 73
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function IDENT(__model__) in line 73
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function IDENT(format_arg) in line 74
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function IDENT(__format_arg__) in line 74
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function IDENT(nothrow) in line 75
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function IDENT(__nothrow) in line 75
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function IDENT(__nothrow__) in line 75
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function IDENT(__transparent_union__) in line 76
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function IDENT(malloc) in line 77
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function IDENT(__malloc__) in line 78
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function IDENT(nonnull) in line 79
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function IDENT(__nonnull) in line 79
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function IDENT(__nonnull__) in line 79
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function IDENT(constructor) in line 80
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function IDENT(__constructor__) in line 80
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function IDENT(destructor) in line 81
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function IDENT(__destructor__) in line 81
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function IDENT(cold) in line 82
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function IDENT(__cold__) in line 82
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function IDENT(hot) in line 83
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function IDENT(__hot__) in line 83
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function IDENT(cdecl) in line 84
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function IDENT(__cdecl__) in line 84
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function IDENT(stdcall) in line 85
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function IDENT(__stdcall__) in line 85
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function IDENT(fastcall) in line 86
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function IDENT(__fastcall__) in line 86
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function IDENT(dllimport) in line 87
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function IDENT(__dllimport__) in line 87
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function IDENT(dllexport) in line 88
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function IDENT(__dllexport__) in line 88
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function IDENT(restrict) in line 89
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function IDENT(__restrict) in line 89
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function IDENT(artificial) in line 90
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function IDENT(__artificial__) in line 90
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function IDENT(leaf) in line 91
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function IDENT(__leaf__) in line 91
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function IDENT(vector_size) in line 92
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function IDENT(__vector_size__) in line 92
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function IDENT(error) in line 93
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function IDENT(__error__) in line 93
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function IDENT(static) in line 94
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function IDENT(defined) in line 99
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function IDENT(once) in line 100
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function __IDENT(pragma_ident,"__pragma__",0) in line 101
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function __IDENT(__VA_ARGS___ident,"__VA_ARGS__",0) in line 102
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function __IDENT(__LINE___ident,"__LINE__",0) in line 103
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function __IDENT(__FILE___ident,"__FILE__",0) in line 104
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function __IDENT(__DATE___ident,"__DATE__",0) in line 105
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function __IDENT(__TIME___ident,"__TIME__",0) in line 106
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function __IDENT(__func___ident,"__func__",0) in line 107
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function __IDENT(__FUNCTION___ident,"__FUNCTION__",0) in line 108
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function __IDENT(__PRETTY_FUNCTION___ident,"__PRETTY_FUNCTION__",0) in line 109
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function IDENT_RESERVED(__context__) in line 112
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function IDENT_RESERVED(__range__) in line 113
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function IDENT(memset) in line 116
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function IDENT(memcpy) in line 116
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function IDENT(copy_to_user) in line 117
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function IDENT(copy_from_user) in line 117
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function IDENT(main) in line 118
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/inline.c
module inline.c
   function dup_expression(struct expression *) in line 36
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses variable expression::pos defined in expression.h
      uses variable expression::type defined in expression.h
   function dup_statement(struct statement *) in line 43
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses function alloc_statement(struct position,int) defined in expression.h
      uses variable statement::pos defined in parse.h
      uses variable statement::type defined in parse.h
   function copy_symbol(struct position,struct symbol *) in line 50
      protection public
      12 lines of code
      2 parameters
      4 conditional paths
      uses variable sym defined in smatch_type.c
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::modifiers defined in struct.c
      uses macro definition MOD_STATIC defined in symbol.h
      uses macro definition MOD_EXTERN defined in symbol.h
      uses macro definition MOD_TOPLEVEL defined in symbol.h
      uses macro definition MOD_INLINE defined in symbol.h
      uses variable symbol::replace defined in struct.c
      uses function warning(struct position,const char *,...) defined in lib.c
      uses variable symbol::pos defined in struct.c
      uses function show_ident(const struct ident *) defined in token.h
      uses variable symbol::ident defined in struct.c
   function copy_symbol_list(struct symbol_list *) in line 63
      protection public
      11 lines of code
      1 parameters
      1 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses variable sym defined in smatch_type.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable src defined in sm_user_data3.c
      uses function copy_symbol(struct position,struct symbol *) defined in inline.c
      uses variable symbol::pos defined in struct.c
      uses function add_symbol(struct symbol_list **,struct symbol *) defined in symbol.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function copy_expression(struct expression *) in line 75
      protection public
      204 lines of code
      1 parameters
      42 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_SYMBOL defined in expression.h
      uses variable sym defined in smatch_type.c
      uses function copy_symbol(struct position,struct symbol *) defined in inline.c
      uses variable expression::pos defined in expression.h
      uses variable expression::symbol defined in expression.h
      uses function dup_expression(struct expression *) defined in inline.c
      uses enumvalue EXPR_VALUE defined in expression.h
      uses enumvalue EXPR_STRING defined in expression.h
      uses enumvalue EXPR_FVALUE defined in expression.h
      uses enumvalue EXPR_TYPE defined in expression.h
      uses enumvalue EXPR_PREOP defined in expression.h
      uses enumvalue EXPR_POSTOP defined in expression.h
      uses variable expression::unop defined in expression.h
      uses enumvalue EXPR_SLICE defined in expression.h
      uses variable expression::base defined in expression.h
      uses enumvalue EXPR_BINOP defined in expression.h
      uses enumvalue EXPR_COMMA defined in expression.h
      uses enumvalue EXPR_COMPARE defined in expression.h
      uses enumvalue EXPR_LOGICAL defined in expression.h
      uses variable expression::left defined in expression.h
      uses variable expression::right defined in expression.h
      uses enumvalue EXPR_ASSIGNMENT defined in expression.h
      uses variable expression::op defined in expression.h
      uses enumvalue EXPR_DEREF defined in expression.h
      uses variable expression::deref defined in expression.h
      uses enumvalue EXPR_CAST defined in expression.h
      uses variable expression::cast_expression defined in expression.h
      uses enumvalue EXPR_INITIALIZER defined in expression.h
      uses variable expression::cast_type defined in expression.h
      uses function alloc_symbol(struct position,int) defined in symbol.c
      uses variable symbol::pos defined in struct.c
      uses variable symbol::type defined in struct.c
      uses enumvalue EXPR_FORCE_CAST defined in expression.h
      uses enumvalue EXPR_IMPLIED_CAST defined in expression.h
      uses enumvalue EXPR_SIZEOF defined in expression.h
      uses enumvalue EXPR_PTRSIZEOF defined in expression.h
      uses enumvalue EXPR_ALIGNOF defined in expression.h
      uses enumvalue EXPR_SELECT defined in expression.h
      uses enumvalue EXPR_CONDITIONAL defined in expression.h
      uses variable expression::conditional defined in expression.h
      uses variable expression::cond_true defined in expression.h
      uses variable expression::cond_false defined in expression.h
      uses enumvalue EXPR_STATEMENT defined in expression.h
      uses function alloc_statement(struct position,int) defined in expression.h
      uses enumvalue STMT_COMPOUND defined in parse.h
      uses function copy_statement(struct statement *,struct statement *) defined in inline.c
      uses variable expression::statement defined in expression.h
      uses enumvalue EXPR_CALL defined in expression.h
      uses variable expression::fn defined in expression.h
      uses variable expression::args defined in expression.h
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses variable expression::expr_list defined in expression.h
      uses enumvalue EXPR_LABEL defined in expression.h
      uses function label_symbol(struct token *) defined in parse.c
      uses variable expression::label_symbol defined in expression.h
      uses enumvalue EXPR_INDEX defined in expression.h
      uses variable expression::idx_expression defined in expression.h
      uses enumvalue EXPR_IDENTIFIER defined in expression.h
      uses variable expression::ident_expression defined in expression.h
      uses enumvalue EXPR_POS defined in expression.h
      uses variable expression::init_expr defined in expression.h
      uses enumvalue EXPR_OFFSETOF defined in expression.h
      uses variable expression::down defined in expression.h
      uses variable expression::index defined in expression.h
      uses function warning(struct position,const char *,...) defined in lib.c
   function copy_asm_constraints(struct expression_list *) in line 280
      protection public
      21 lines of code
      1 parameters
      4 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable expression::in defined in expression.h
      uses function copy_expression(struct expression *) defined in inline.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function set_replace(struct symbol *,struct symbol *) in line 302
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses variable symbol::replace defined in struct.c
   function unset_replace(struct symbol *) in line 308
      protection public
      10 lines of code
      1 parameters
      2 conditional paths
      uses variable r defined in cond_expr2.c
      uses variable sym defined in smatch_type.c
      uses variable symbol::replace defined in struct.c
      uses function warning(struct position,const char *,...) defined in lib.c
      uses variable symbol::pos defined in struct.c
      uses function show_ident(const struct ident *) defined in token.h
      uses variable symbol::ident defined in struct.c
      uses macro definition NULL defined in sm_implied3.c
   function unset_replace_list(struct symbol_list *) in line 319
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses variable sym defined in smatch_type.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses function unset_replace(struct symbol *) defined in inline.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function copy_one_statement(struct statement *) in line 327
      protection public
      134 lines of code
      1 parameters
      20 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses variable statement::type defined in parse.h
      uses enumvalue STMT_NONE defined in parse.h
      uses enumvalue STMT_DECLARATION defined in parse.h
      uses variable sym defined in smatch_type.c
      uses function dup_statement(struct statement *) defined in inline.c
      uses variable statement::declaration defined in parse.h
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses function copy_symbol(struct position,struct symbol *) defined in inline.c
      uses variable symbol::stmt defined in struct.c
      uses variable statement::pos defined in parse.h
      uses variable symbol::initializer defined in struct.c
      uses function copy_expression(struct expression *) defined in inline.c
      uses function add_symbol(struct symbol_list **,struct symbol *) defined in symbol.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses enumvalue STMT_CONTEXT defined in parse.h
      uses enumvalue STMT_EXPRESSION defined in parse.h
      uses variable statement::expression defined in parse.h
      uses enumvalue STMT_RANGE defined in parse.h
      uses variable statement::range_expression defined in parse.h
      uses enumvalue STMT_COMPOUND defined in parse.h
      uses function alloc_statement(struct position,int) defined in expression.h
      uses function copy_statement(struct statement *,struct statement *) defined in inline.c
      uses enumvalue STMT_IF defined in parse.h
      uses variable statement::if_conditional defined in parse.h
      uses variable statement::if_true defined in parse.h
      uses variable statement::if_false defined in parse.h
      uses enumvalue STMT_RETURN defined in parse.h
      uses variable statement::ret_value defined in parse.h
      uses variable statement::ret_target defined in parse.h
      uses enumvalue STMT_CASE defined in parse.h
      uses variable statement::case_label defined in parse.h
      uses variable statement::case_expression defined in parse.h
      uses variable statement::case_to defined in parse.h
      uses variable statement::case_statement defined in parse.h
      uses enumvalue STMT_SWITCH defined in parse.h
      uses variable statement::switch_break defined in parse.h
      uses variable statement::switch_case defined in parse.h
      uses variable statement::switch_expression defined in parse.h
      uses variable statement::switch_statement defined in parse.h
      uses variable symbol::symbol_list defined in struct.c
      uses function copy_symbol_list(struct symbol_list *) defined in inline.c
      uses enumvalue STMT_ITERATOR defined in parse.h
      uses variable statement::iterator_break defined in parse.h
      uses variable statement::iterator_continue defined in parse.h
      uses variable statement::iterator_syms defined in parse.h
      uses variable statement::iterator_pre_statement defined in parse.h
      uses variable statement::iterator_pre_condition defined in parse.h
      uses variable statement::iterator_statement defined in parse.h
      uses variable statement::iterator_post_statement defined in parse.h
      uses variable statement::iterator_post_condition defined in parse.h
      uses enumvalue STMT_LABEL defined in parse.h
      uses variable statement::label_identifier defined in parse.h
      uses variable statement::label_statement defined in parse.h
      uses enumvalue STMT_GOTO defined in parse.h
      uses variable statement::goto_label defined in parse.h
      uses variable statement::goto_expression defined in parse.h
      uses variable statement::target_list defined in parse.h
      uses enumvalue STMT_ASM defined in parse.h
      uses variable statement::asm_inputs defined in parse.h
      uses function copy_asm_constraints(struct expression_list *) defined in inline.c
      uses variable statement::asm_outputs defined in parse.h
      uses function warning(struct position,const char *,...) defined in lib.c
   function copy_statement(struct statement *,struct statement *) in line 471
      protection public
      11 lines of code
      2 parameters
      1 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable src defined in sm_user_data3.c
      uses variable statement::stmts defined in parse.h
      uses function copy_one_statement(struct statement *) defined in inline.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses variable statement::args defined in parse.h
      uses variable statement::ret defined in parse.h
      uses function copy_symbol(struct position,struct symbol *) defined in inline.c
      uses variable statement::inline_fn defined in parse.h
   function create_copy_symbol(struct symbol *) in line 483
      protection public
      13 lines of code
      1 parameters
      2 conditional paths
      uses variable sym defined in smatch_type.c
      uses function alloc_symbol(struct position,int) defined in symbol.c
      uses variable symbol::pos defined in struct.c
      uses variable symbol::type defined in struct.c
      uses variable symbol::bb_target defined in struct.c
      uses macro definition NULL defined in sm_implied3.c
      uses variable symbol::pseudo defined in struct.c
      uses function set_replace(struct symbol *,struct symbol *) defined in inline.c
   function create_symbol_list(struct symbol_list *) in line 497
      protection public
      11 lines of code
      1 parameters
      1 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses variable sym defined in smatch_type.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable src defined in sm_user_data3.c
      uses function create_copy_symbol(struct symbol *) defined in inline.c
      uses function add_symbol(struct symbol_list **,struct symbol *) defined in symbol.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function inline_function(struct expression *,struct symbol *) in line 509
      protection public
      61 lines of code
      2 parameters
      1 conditional paths
      uses variable sym defined in smatch_type.c
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::base_type defined in struct.c
      uses variable expression::args defined in expression.h
      uses function alloc_statement(struct position,int) defined in expression.h
      uses variable expression::pos defined in expression.h
      uses enumvalue STMT_COMPOUND defined in parse.h
      uses variable name defined in smatch_type.c
      uses function sparse_error(struct position,const char *,...) defined in lib.c
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_STATEMENT defined in expression.h
      uses variable expression::statement defined in expression.h
      uses variable expression::ctype defined in expression.h
      uses function create_symbol_list(struct symbol_list *) defined in inline.c
      uses variable symbol::inline_symbol_list defined in struct.c
      uses macro definition NULL defined in sm_implied3.c
      uses macro definition PREPARE_PTR_LIST defined in ptrlist.h
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses function alloc_symbol(struct position,int) defined in symbol.c
      uses enumvalue SYM_NODE defined in symbol.h
      uses function set_replace(struct symbol *,struct symbol *) defined in inline.c
      uses function add_symbol(struct symbol_list **,struct symbol *) defined in symbol.h
      uses macro definition NEXT_PTR_LIST defined in ptrlist.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses macro definition FINISH_PTR_LIST defined in ptrlist.h
      uses function copy_statement(struct statement *,struct statement *) defined in inline.c
      uses variable symbol::stmt defined in struct.c
      uses enumvalue STMT_DECLARATION defined in parse.h
      uses variable statement::declaration defined in parse.h
      uses variable statement::args defined in parse.h
      uses variable statement::inline_fn defined in parse.h
      uses function unset_replace_list(struct symbol_list *) defined in inline.c
      uses function evaluate_statement(struct statement *) defined in evaluate.c
   function uninline(struct symbol *) in line 571
      protection public
      15 lines of code
      1 parameters
      1 conditional paths
      uses variable sym defined in smatch_type.c
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::base_type defined in struct.c
      uses variable p defined in cond_expr2.c
      uses variable symbol::symbol_list defined in struct.c
      uses function create_symbol_list(struct symbol_list *) defined in inline.c
      uses variable symbol::inline_symbol_list defined in struct.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses function alloc_statement(struct position,int) defined in expression.h
      uses enumvalue STMT_COMPOUND defined in parse.h
      uses function copy_statement(struct statement *,struct statement *) defined in inline.c
      uses function unset_replace_list(struct symbol_list *) defined in inline.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/lib.c
module lib.c
   macro definition __GNUC__ in line 52
      protection public
   macro definition __GNUC_MINOR__ in line 53
      protection public
   macro definition __GNUC_PATCHLEVEL__ in line 54
      protection public
   macro definition ARCH_M64_DEFAULT in line 259
      protection public
   macro definition CMDLINE_INCLUDE in line 265
      protection public
   enumeration @68 in line 250
      protection public
   enumeration @69 in line 461
      protection public
   variable verbose in line 48
      protection public
   variable optimize in line 48
      protection public
   variable optimize_size in line 48
      protection public
   variable preprocessing in line 48
      protection public
   variable die_if_error in line 49
      protection public
   variable gcc_major in line 57
      protection public
   variable gcc_minor in line 58
      protection public
   variable gcc_patchlevel in line 59
      protection public
   variable gcc_base_dir in line 61
      protection public
   variable max_warnings in line 115
      protection public
   variable show_info in line 116
      protection public
   variable pre_buffer_begin in line 214
      protection public
   variable pre_buffer_end in line 215
      protection public
   variable Waddress_space in line 217
      protection public
   variable Wbitwise in line 218
      protection public
   variable Wcast_to_as in line 219
      protection public
   variable Wcast_truncate in line 220
      protection public
   variable Wcontext in line 221
      protection public
   variable Wdecl in line 222
      protection public
   variable Wdeclarationafterstatement in line 223
      protection public
   variable Wdefault_bitfield_sign in line 224
      protection public
   variable Wdesignated_init in line 225
      protection public
   variable Wdo_while in line 226
      protection public
   variable Winit_cstring in line 227
      protection public
   variable Wenum_mismatch in line 228
      protection public
   variable Werror in line 229
      protection public
   variable Wnon_pointer_null in line 230
      protection public
   variable Wold_initializer in line 231
      protection public
   variable Wone_bit_signed_bitfield in line 232
      protection public
   variable Wparen_string in line 233
      protection public
   variable Wptr_subtraction_blows in line 234
      protection public
   variable Wreturn_void in line 235
      protection public
   variable Wshadow in line 236
      protection public
   variable Wsizeof_bool in line 237
      protection public
   variable Wtransparent_union in line 238
      protection public
   variable Wtypesign in line 239
      protection public
   variable Wundef in line 240
      protection public
   variable Wuninitialized in line 241
      protection public
   variable Wunknown_attribute in line 242
      protection public
   variable Wvla in line 243
      protection public
   variable dbg_entry in line 245
      protection public
   variable dbg_dead in line 246
      protection public
   variable preprocess_only in line 248
      protection public
   variable standard in line 254
      protection public
   variable arch_m64 in line 262
      protection public
   variable arch_msize_long in line 263
      protection public
   variable cmdline_include_nr in line 266
      protection public
   variable cmdline_include in line 267
      protection public
   variable warnings in line 459
      protection public
   variable debugs in line 500
      protection public
   variable funsigned_char in line 605
      protection public
   enumvalue STANDARD_C89 in line 250
      protection public
   enumvalue STANDARD_C94 in line 251
      protection public
   enumvalue STANDARD_C99 in line 252
      protection public
   enumvalue STANDARD_GNU89 in line 253
      protection public
   enumvalue STANDARD_GNU99 in line 254
      protection public
   enumvalue WARNING_OFF in line 462
      protection public
   enumvalue WARNING_ON in line 463
      protection public
   enumvalue WARNING_FORCE_OFF in line 465
      protection public
   function skip_to(struct token *,int) in line 63
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
      uses function op(void) defined in loop2.c
      uses macro definition eof_token defined in token.h
      uses variable token::next defined in token.h
   function expect(struct token *,int,const char *) in line 70
      protection public
      15 lines of code
      3 parameters
      1 conditional paths
      uses function op(void) defined in loop2.c
      uses variable token::next defined in token.h
      uses function sparse_error(struct position,const char *,...) defined in lib.c
      uses variable token::pos defined in token.h
      uses function show_special(int) defined in token.h
      uses function show_token(const struct token *) defined in token.h
      uses function skip_to(struct token *,int) defined in lib.c
   function hexval(unsigned int) in line 86
      protection public
      16 lines of code
      1 parameters
      1 conditional paths
      uses variable c defined in sm_array_overflow.c
   function do_warn(const char *,struct position,const char *,va_list) in line 103
      protection public
      11 lines of code
      4 parameters
      1 conditional paths
      uses variable name defined in smatch_type.c
      uses function stream_name(int) defined in token.h
      uses variable token::pos defined in token.h
      uses variable position::stream defined in lib.h
      uses variable position::line defined in lib.h
      uses variable position::pos defined in lib.h
   function info(struct position,const char *,...) in line 118
      protection public
      10 lines of code
      3 parameters
      1 conditional paths
      uses variable show_info defined in lib.c
      uses function do_warn(const char *,struct position,const char *,va_list) defined in lib.c
      uses variable token::pos defined in token.h
   function do_error(struct position,const char *,va_list) in line 129
      protection public
      19 lines of code
      3 parameters
      3 conditional paths
      uses variable die_if_error defined in lib.c
      uses variable show_info defined in lib.c
      uses variable max_warnings defined in lib.c
      uses function do_warn(const char *,struct position,const char *,va_list) defined in lib.c
      uses variable token::pos defined in token.h
   function warning(struct position,const char *,...) in line 149
      protection public
      25 lines of code
      3 parameters
      1 conditional paths
      uses variable Werror defined in lib.c
      uses function do_error(struct position,const char *,va_list) defined in lib.c
      uses variable token::pos defined in token.h
      uses variable max_warnings defined in lib.c
      uses variable show_info defined in lib.c
      uses function do_warn(const char *,struct position,const char *,va_list) defined in lib.c
   function sparse_error(struct position,const char *,...) in line 175
      protection public
      7 lines of code
      3 parameters
      1 conditional paths
      uses function do_error(struct position,const char *,va_list) defined in lib.c
      uses variable token::pos defined in token.h
   function expression_error(struct expression *,const char *,...) in line 183
      protection public
      8 lines of code
      3 parameters
      1 conditional paths
      uses function do_error(struct position,const char *,va_list) defined in lib.c
      uses variable expression::pos defined in expression.h
      uses variable expression::ctype defined in expression.h
   function error_die(struct position,const char *,...) in line 192
      protection public
      8 lines of code
      3 parameters
      1 conditional paths
      uses function do_warn(const char *,struct position,const char *,va_list) defined in lib.c
      uses variable token::pos defined in token.h
      uses function exit(int) defined in test-be.c
   function die(const char *,...) in line 201
      protection public
      12 lines of code
      2 parameters
      1 conditional paths
      uses function exit(int) defined in test-be.c
   function add_pre_buffer(const char *,...) in line 270
      protection public
      17 lines of code
      2 parameters
      1 conditional paths
      uses function tokenize_buffer(void *,unsigned long,struct token **) defined in token.h
      uses variable pre_buffer_begin defined in lib.c
      uses variable pre_buffer_end defined in lib.c
      uses variable token::next defined in token.h
   function handle_switch_D(char *,char **) in line 288
      protection public
      22 lines of code
      2 parameters
      5 conditional paths
      uses variable name defined in smatch_type.c
      uses function die(const char *,...) defined in lib.c
      uses variable c defined in sm_array_overflow.c
      uses function add_pre_buffer(const char *,...) defined in lib.c
      uses variable token::next defined in token.h
   function handle_switch_E(char *,char **) in line 311
      protection public
      6 lines of code
      2 parameters
      2 conditional paths
      uses variable preprocess_only defined in lib.c
      uses variable token::next defined in token.h
   function handle_switch_I(char *,char **) in line 318
      protection public
      19 lines of code
      2 parameters
      4 conditional paths
      uses function add_pre_buffer(const char *,...) defined in lib.c
      uses variable token::next defined in token.h
      uses function die(const char *,...) defined in lib.c
   function add_cmdline_include(char *) in line 338
      protection public
      6 lines of code
      1 parameters
      2 conditional paths
      uses variable cmdline_include_nr defined in lib.c
      uses macro definition CMDLINE_INCLUDE defined in lib.c
      uses function die(const char *,...) defined in lib.c
      uses variable cmdline_include defined in lib.c
   function handle_switch_i(char *,char **) in line 345
      protection public
      19 lines of code
      2 parameters
      7 conditional paths
      uses variable token::next defined in token.h
      uses function add_cmdline_include(char *) defined in lib.c
      uses function die(const char *,...) defined in lib.c
      uses function add_pre_buffer(const char *,...) defined in lib.c
   function handle_switch_M(char *,char **) in line 365
      protection public
      9 lines of code
      2 parameters
      3 conditional paths
      uses variable token::next defined in token.h
      uses function die(const char *,...) defined in lib.c
   function handle_switch_m(char *,char **) in line 375
      protection public
      11 lines of code
      2 parameters
      4 conditional paths
      uses variable arch_m64 defined in lib.c
      uses variable arch_msize_long defined in lib.c
      uses variable token::next defined in token.h
   function handle_arch_m64_finalize(void) in line 387
      protection public
      14 lines of code
      1 parameters
      2 conditional paths
      uses variable arch_m64 defined in lib.c
      uses variable bits_in_long defined in target.c
      uses variable max_int_alignment defined in target.c
      uses variable bits_in_pointer defined in target.c
      uses variable pointer_alignment defined in target.c
      uses variable size_t_ctype defined in target.c
      uses variable ssize_t_ctype defined in target.c
      uses function add_pre_buffer(const char *,...) defined in lib.c
   function handle_arch_msize_long_finalize(void) in line 402
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses variable arch_msize_long defined in lib.c
      uses variable size_t_ctype defined in target.c
      uses variable ssize_t_ctype defined in target.c
   function handle_arch_finalize(void) in line 410
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function handle_arch_m64_finalize(void) defined in lib.c
      uses function handle_arch_msize_long_finalize(void) defined in lib.c
   function handle_switch_o(char *,char **) in line 417
      protection public
      10 lines of code
      2 parameters
      3 conditional paths
      uses variable token::next defined in token.h
      uses function die(const char *,...) defined in lib.c
   function handle_onoff_switch(char *,char **,const struct warning,int) in line 468
      protection public
      31 lines of code
      4 parameters
      8 conditional paths
      uses variable warning::flag defined in lib.c
      uses enumvalue WARNING_ON defined in lib.c
      uses variable p defined in cond_expr2.c
      uses variable warnings defined in lib.c
      uses enumvalue WARNING_FORCE_OFF defined in lib.c
      uses variable Werror defined in lib.c
      uses variable warning::name defined in lib.c
      uses macro definition NULL defined in sm_implied3.c
   function handle_switch_W(char *,char **) in line 500
      protection public
      9 lines of code
      2 parameters
      2 conditional paths
      uses function handle_onoff_switch(char *,char **,const struct warning,int) defined in lib.c
      uses variable warnings defined in lib.c
      uses macro definition ARRAY_SIZE defined in lib.h
   function handle_switch_v(char *,char **) in line 516
      protection public
      12 lines of code
      2 parameters
      3 conditional paths
      uses function handle_onoff_switch(char *,char **,const struct warning,int) defined in lib.c
      uses variable debugs defined in lib.c
      uses macro definition ARRAY_SIZE defined in lib.h
      uses variable verbose defined in lib.c
   function handle_onoff_switch_finalize(const struct warning,int) in line 530
      protection public
      9 lines of code
      2 parameters
      3 conditional paths
      uses variable warnings defined in lib.c
      uses variable warning::flag defined in lib.c
      uses enumvalue WARNING_FORCE_OFF defined in lib.c
      uses enumvalue WARNING_OFF defined in lib.c
   function handle_switch_W_finalize(void) in line 540
      protection public
      26 lines of code
      1 parameters
      7 conditional paths
      uses function handle_onoff_switch_finalize(const struct warning,int) defined in lib.c
      uses variable warnings defined in lib.c
      uses macro definition ARRAY_SIZE defined in lib.h
      uses variable Wdeclarationafterstatement defined in lib.c
      uses variable standard defined in lib.c
      uses enumvalue STANDARD_C89 defined in lib.c
      uses enumvalue STANDARD_C94 defined in lib.c
      uses enumvalue STANDARD_C99 defined in lib.c
      uses enumvalue STANDARD_GNU89 defined in lib.c
      uses enumvalue STANDARD_GNU99 defined in lib.c
      uses macro definition assert defined in sort.c
   function handle_switch_v_finalize(void) in line 567
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function handle_onoff_switch_finalize(const struct warning,int) defined in lib.c
      uses variable debugs defined in lib.c
      uses macro definition ARRAY_SIZE defined in lib.h
   function handle_switch_U(char *,char **) in line 572
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
      uses variable warning::name defined in lib.c
      uses function add_pre_buffer(const char *,...) defined in lib.c
   function handle_switch_O(char *,char **) in line 579
      protection public
      9 lines of code
      2 parameters
      2 conditional paths
      uses variable optimize defined in lib.c
      uses variable optimize_size defined in lib.c
   function handle_switch_ftabstop(char *,char **) in line 589
      protection public
      15 lines of code
      2 parameters
      3 conditional paths
      uses function die(const char *,...) defined in lib.c
      uses variable tabstop defined in token.h
   function handle_funsigned_char(void) in line 606
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses variable funsigned_char defined in lib.c
      uses macro definition MOD_SIGNED defined in symbol.h
      uses macro definition MOD_UNSIGNED defined in symbol.h
   function handle_switch_f(char *,char **) in line 614
      protection public
      20 lines of code
      2 parameters
      4 conditional paths
      uses function handle_switch_ftabstop(char *,char **) defined in lib.c
      uses variable funsigned_char defined in lib.c
   function handle_switch_G(char *,char **) in line 635
      protection public
      7 lines of code
      2 parameters
      2 conditional paths
   function handle_switch_a(char *,char **) in line 643
      protection public
      7 lines of code
      2 parameters
      2 conditional paths
      uses variable standard defined in lib.c
      uses enumvalue STANDARD_C89 defined in lib.c
   function handle_switch_s(char *,char **) in line 651
      protection public
      31 lines of code
      2 parameters
      7 conditional paths
      uses variable standard defined in lib.c
      uses enumvalue STANDARD_C89 defined in lib.c
      uses enumvalue STANDARD_C94 defined in lib.c
      uses enumvalue STANDARD_C99 defined in lib.c
      uses enumvalue STANDARD_GNU89 defined in lib.c
      uses enumvalue STANDARD_GNU99 defined in lib.c
      uses function die(const char *,...) defined in lib.c
   function handle_nostdinc(char *,char **) in line 683
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses function add_pre_buffer(const char *,...) defined in lib.c
   function handle_switch_n(char *,char **) in line 689
      protection public
      7 lines of code
      2 parameters
      2 conditional paths
      uses function handle_nostdinc(char *,char **) defined in lib.c
   function handle_base_dir(char *,char **) in line 697
      protection public
      7 lines of code
      2 parameters
      2 conditional paths
      uses variable gcc_base_dir defined in lib.c
      uses function die(const char *,...) defined in lib.c
   function handle_no_lineno(char *,char **) in line 705
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses variable no_lineno defined in token.h
   function handle_switch_g(char *,char **) in line 711
      protection public
      7 lines of code
      2 parameters
      2 conditional paths
      uses function handle_base_dir(char *,char **) defined in lib.c
   function handle_version(char *,char **) in line 719
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses function printf(char *,...) defined in test-be.c
      uses function exit(int) defined in test-be.c
   function handle_param(char *,char **) in line 725
      protection public
      16 lines of code
      2 parameters
      4 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses function die(const char *,...) defined in lib.c
   function handle_long_options(char *,char **) in line 748
      protection public
      20 lines of code
      2 parameters
      3 conditional paths
      uses function handle_param(char *,char **) defined in lib.c
      uses function handle_version(char *,char **) defined in lib.c
      uses function handle_nostdinc(char *,char **) defined in lib.c
      uses function handle_base_dir(char *,char **) defined in lib.c
      uses function handle_no_lineno(char *,char **) defined in lib.c
      uses macro definition NULL defined in sm_implied3.c
      uses function strlen(char *) defined in sm_overflow6.c
   function handle_switch(char *,char **) in line 769
      protection public
      31 lines of code
      2 parameters
      19 conditional paths
      uses function handle_switch_a(char *,char **) defined in lib.c
      uses function handle_switch_D(char *,char **) defined in lib.c
      uses function handle_switch_E(char *,char **) defined in lib.c
      uses function handle_switch_f(char *,char **) defined in lib.c
      uses function handle_switch_g(char *,char **) defined in lib.c
      uses function handle_switch_G(char *,char **) defined in lib.c
      uses function handle_switch_I(char *,char **) defined in lib.c
      uses function handle_switch_i(char *,char **) defined in lib.c
      uses function handle_switch_M(char *,char **) defined in lib.c
      uses function handle_switch_m(char *,char **) defined in lib.c
      uses function handle_switch_n(char *,char **) defined in lib.c
      uses function handle_switch_o(char *,char **) defined in lib.c
      uses function handle_switch_O(char *,char **) defined in lib.c
      uses function handle_switch_s(char *,char **) defined in lib.c
      uses function handle_switch_U(char *,char **) defined in lib.c
      uses function handle_switch_v(char *,char **) defined in lib.c
      uses function handle_switch_W(char *,char **) defined in lib.c
      uses function handle_long_options(char *,char **) defined in lib.c
   function declare_builtin_functions(void) in line 801
      protection public
      109 lines of code
      1 parameters
      1 conditional paths
      uses function add_pre_buffer(const char *,...) defined in lib.c
   function create_builtin_stream(void) in line 911
      protection public
      81 lines of code
      1 parameters
      1 conditional paths
      uses function add_pre_buffer(const char *,...) defined in lib.c
      uses variable gcc_major defined in lib.c
      uses variable gcc_minor defined in lib.c
      uses variable gcc_patchlevel defined in lib.c
      uses variable gcc_base_dir defined in lib.c
      uses variable size_t_ctype defined in target.c
      uses variable standard defined in lib.c
      uses enumvalue STANDARD_C89 defined in lib.c
      uses enumvalue STANDARD_C94 defined in lib.c
      uses enumvalue STANDARD_C99 defined in lib.c
      uses enumvalue STANDARD_GNU89 defined in lib.c
      uses enumvalue STANDARD_GNU99 defined in lib.c
      uses macro definition assert defined in sort.c
      uses variable optimize defined in lib.c
      uses variable optimize_size defined in lib.c
      uses macro definition STRINGIFY defined in lib.h
   function sparse_tokenstream(struct token *) in line 993
      protection public
      31 lines of code
      1 parameters
      7 conditional paths
      uses function preprocess(struct token *) defined in pre-process.c
      uses variable preprocess_only defined in lib.c
      uses macro definition eof_token defined in token.h
      uses variable token::next defined in token.h
      uses variable token::pos defined in token.h
      uses variable position::whitespace defined in lib.h
      uses variable position::newline defined in lib.h
      uses variable position::pos defined in lib.h
      uses function printf(char *,...) defined in test-be.c
      uses function show_token(const struct token *) defined in token.h
      uses macro definition NULL defined in sm_implied3.c
      uses function external_declaration(struct token *,struct symbol_list **) defined in parse.c
      uses variable translation_unit_used_list defined in symbol.c
   function sparse_file(const char *) in line 1025
      protection public
      20 lines of code
      1 parameters
      3 conditional paths
      uses function die(const char *,...) defined in lib.c
      uses function tokenize(const char *,int,struct token *,const char **) defined in token.h
      uses macro definition NULL defined in sm_implied3.c
      uses variable includepath defined in pre-process.c
      uses function store_all_tokens(struct token *) defined in token.h
      uses function sparse_tokenstream(struct token *) defined in lib.c
   function sparse_initial(void) in line 1055
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses variable cmdline_include_nr defined in lib.c
      uses function add_pre_buffer(const char *,...) defined in lib.c
      uses variable cmdline_include defined in lib.c
      uses function sparse_tokenstream(struct token *) defined in lib.c
      uses variable pre_buffer_begin defined in lib.c
   function sparse_initialize(int,char **,struct string_list **) in line 1067
      protection public
      46 lines of code
      3 parameters
      1 conditional paths
      uses function init_symbols(void) defined in symbol.c
      uses function handle_switch(char *,char **) defined in lib.c
      uses macro definition add_ptr_list_notag defined in ptrlist.h
      uses function handle_switch_W_finalize(void) defined in lib.c
      uses function handle_switch_v_finalize(void) defined in lib.c
      uses function handle_arch_finalize(void) defined in lib.c
      uses macro definition NULL defined in sm_implied3.c
      uses macro definition ptr_list_empty defined in ptrlist.h
      uses function init_ctype(void) defined in symbol.c
      uses function handle_funsigned_char(void) defined in lib.c
      uses function create_builtin_stream(void) defined in lib.c
      uses function add_pre_buffer(const char *,...) defined in lib.c
      uses variable preprocess_only defined in lib.c
      uses function declare_builtin_functions(void) defined in lib.c
      uses function sparse_initial(void) defined in lib.c
   function sparse_keep_tokens(char *) in line 1114
      protection public
      13 lines of code
      1 parameters
      1 conditional paths
      uses variable translation_unit_used_list defined in symbol.c
      uses macro definition NULL defined in sm_implied3.c
      uses function new_file_scope(void) defined in scope.c
      uses function sparse_file(const char *) defined in lib.c
   function __sparse(char *) in line 1129
      protection public
      12 lines of code
      1 parameters
      1 conditional paths
      uses function sparse_keep_tokens(char *) defined in lib.c
   function sparse(char *) in line 1142
      protection public
      9 lines of code
      1 parameters
      1 conditional paths
      uses function __sparse(char *) defined in lib.c
      uses function evaluate_symbol_list(struct symbol_list *) defined in evaluate.c
   variable warning::flag in line 430
      protection public
   variable warning::name in line 429
      protection public
   variable switches::fn in line 744
      protection public
   variable switches::name in line 743
      protection public
   variable switches::prefix in line 745
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/lib.h
module lib.h
   macro definition DO_STRINGIFY in line 36
      protection public
   macro definition STRINGIFY in line 37
      protection public
   macro definition ARRAY_SIZE in line 40
      protection public
   macro definition FORMAT_ATTR in line 90
      protection public
   macro definition NORETURN_ATTR in line 91
      protection public
   macro definition SENTINEL_ATTR in line 92
      protection public
   macro definition hashval in line 244
      protection public
   typedef pseudo_t in line 81
      protection public
   variable verbose in line 43
      protection public
   variable optimize in line 43
      protection public
   variable optimize_size in line 43
      protection public
   variable preprocessing in line 43
      protection public
   variable die_if_error in line 44
      protection public
   variable repeat_phase in line 45
      protection public
   variable merge_phi_sources in line 45
      protection public
   variable gcc_major in line 46
      protection public
   variable gcc_minor in line 46
      protection public
   variable gcc_patchlevel in line 46
      protection public
   variable preprocess_only in line 103
      protection public
   variable Waddress_space in line 105
      protection public
   variable Wbitwise in line 106
      protection public
   variable Wcast_to_as in line 107
      protection public
   variable Wcast_truncate in line 108
      protection public
   variable Wcontext in line 109
      protection public
   variable Wdecl in line 110
      protection public
   variable Wdeclarationafterstatement in line 111
      protection public
   variable Wdefault_bitfield_sign in line 112
      protection public
   variable Wdesignated_init in line 113
      protection public
   variable Wdo_while in line 114
      protection public
   variable Wenum_mismatch in line 115
      protection public
   variable Werror in line 116
      protection public
   variable Winit_cstring in line 117
      protection public
   variable Wnon_pointer_null in line 118
      protection public
   variable Wold_initializer in line 119
      protection public
   variable Wone_bit_signed_bitfield in line 120
      protection public
   variable Wparen_string in line 121
      protection public
   variable Wptr_subtraction_blows in line 122
      protection public
   variable Wreturn_void in line 123
      protection public
   variable Wshadow in line 124
      protection public
   variable Wsizeof_bool in line 125
      protection public
   variable Wtransparent_union in line 126
      protection public
   variable Wtypesign in line 127
      protection public
   variable Wundef in line 128
      protection public
   variable Wuninitialized in line 129
      protection public
   variable Wunknown_attribute in line 130
      protection public
   variable Wvla in line 131
      protection public
   variable dbg_entry in line 133
      protection public
   variable dbg_dead in line 134
      protection public
   variable arch_m64 in line 136
      protection public
   function hexval(unsigned int) in line 48
      protection public
      16 lines of code
      1 parameters
      4 conditional paths
      uses variable c defined in sm_array_overflow.c
   function DECLARE_PTR_LIST(symbol_list,struct symbol) in line 71
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function DECLARE_PTR_LIST(statement_list,struct statement) in line 72
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function DECLARE_PTR_LIST(expression_list,struct expression) in line 73
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function DECLARE_PTR_LIST(basic_block_list,struct basic_block) in line 74
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function DECLARE_PTR_LIST(instruction_list,struct instruction) in line 75
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function DECLARE_PTR_LIST(context_list,struct context) in line 76
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function DECLARE_PTR_LIST(multijmp_list,struct multijmp) in line 77
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function DECLARE_PTR_LIST(pseudo_list,struct pseudo) in line 78
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function DECLARE_PTR_LIST(string_list,char) in line 79
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function skip_to(struct token *,int) in line 83
      protection public
      6 lines of code
      2 parameters
      2 conditional paths
      uses function op(void) defined in loop2.c
      uses macro definition eof_token defined in token.h
      uses variable token::next defined in token.h
   function expect(struct token *,int,const char *) in line 84
      protection public
      15 lines of code
      3 parameters
      4 conditional paths
      uses function op(void) defined in loop2.c
      uses variable token::next defined in token.h
      uses function sparse_error(struct position,const char *,...) defined in lib.c
      uses variable token::pos defined in token.h
      uses function show_special(int) defined in token.h
      uses function show_token(const struct token *) defined in token.h
      uses function skip_to(struct token *,int) defined in lib.c
   function die(const char *,...) in line 94
      protection public
      12 lines of code
      2 parameters
      1 conditional paths
      uses function exit(int) defined in test-be.c
   function info(struct position,const char *,...) in line 95
      protection public
      10 lines of code
      3 parameters
      2 conditional paths
      uses variable token::pos defined in token.h
   function warning(struct position,const char *,...) in line 96
      protection public
      25 lines of code
      3 parameters
      4 conditional paths
      uses variable Werror defined in lib.c
      uses variable token::pos defined in token.h
   function sparse_error(struct position,const char *,...) in line 97
      protection public
      7 lines of code
      3 parameters
      1 conditional paths
      uses variable token::pos defined in token.h
   function error_die(struct position,const char *,...) in line 98
      protection public
      8 lines of code
      3 parameters
      1 conditional paths
      uses variable token::pos defined in token.h
      uses function exit(int) defined in test-be.c
   function expression_error(struct expression *,const char *,...) in line 99
      protection public
      8 lines of code
      3 parameters
      1 conditional paths
      uses variable expression::pos defined in expression.h
      uses variable expression::ctype defined in expression.h
   function add_pre_buffer(const char *,...) in line 101
      protection public
      17 lines of code
      2 parameters
      3 conditional paths
      uses function tokenize_buffer(void *,unsigned long,struct token **) defined in token.h
      uses variable token::next defined in token.h
   function declare_builtin_functions(void) in line 138
      protection public
      109 lines of code
      1 parameters
      1 conditional paths
      uses function add_pre_buffer(const char *,...) defined in lib.c
   function create_builtin_stream(void) in line 139
      protection public
      81 lines of code
      1 parameters
      9 conditional paths
      uses function add_pre_buffer(const char *,...) defined in lib.c
      uses variable gcc_major defined in lib.c
      uses variable gcc_minor defined in lib.c
      uses variable gcc_patchlevel defined in lib.c
      uses variable size_t_ctype defined in target.c
      uses enumvalue STANDARD_C89 defined in lib.c
      uses enumvalue STANDARD_C94 defined in lib.c
      uses enumvalue STANDARD_C99 defined in lib.c
      uses enumvalue STANDARD_GNU89 defined in lib.c
      uses enumvalue STANDARD_GNU99 defined in lib.c
      uses macro definition assert defined in sort.c
      uses variable optimize defined in lib.c
      uses variable optimize_size defined in lib.c
      uses macro definition STRINGIFY defined in lib.h
   function sparse_initialize(int,char **,struct string_list **) in line 140
      protection public
      46 lines of code
      3 parameters
      6 conditional paths
      uses function init_symbols(void) defined in symbol.c
      uses macro definition add_ptr_list_notag defined in ptrlist.h
      uses macro definition NULL defined in sm_implied3.c
      uses macro definition ptr_list_empty defined in ptrlist.h
      uses function init_ctype(void) defined in symbol.c
      uses function create_builtin_stream(void) defined in lib.c
      uses function add_pre_buffer(const char *,...) defined in lib.c
      uses variable preprocess_only defined in lib.c
      uses function declare_builtin_functions(void) defined in lib.c
   function __sparse(char *) in line 141
      protection public
      12 lines of code
      1 parameters
      1 conditional paths
      uses function sparse_keep_tokens(char *) defined in lib.c
   function sparse_keep_tokens(char *) in line 142
      protection public
      13 lines of code
      1 parameters
      1 conditional paths
      uses variable translation_unit_used_list defined in symbol.c
      uses macro definition NULL defined in sm_implied3.c
      uses function new_file_scope(void) defined in scope.c
   function sparse(char *) in line 143
      protection public
      9 lines of code
      1 parameters
      1 conditional paths
      uses function __sparse(char *) defined in lib.c
      uses function evaluate_symbol_list(struct symbol_list *) defined in evaluate.c
   function symbol_list_size(struct symbol_list *) in line 145
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function ptr_list_size(struct ptr_list *) defined in ptrlist.c
   function statement_list_size(struct statement_list *) in line 150
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function ptr_list_size(struct ptr_list *) defined in ptrlist.c
   function context_list_size(struct context_list *) in line 155
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function ptr_list_size(struct ptr_list *) defined in ptrlist.c
   function expression_list_size(struct expression_list *) in line 160
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function ptr_list_size(struct ptr_list *) defined in ptrlist.c
   function instruction_list_size(struct instruction_list *) in line 165
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function ptr_list_size(struct ptr_list *) defined in ptrlist.c
   function pseudo_list_size(struct pseudo_list *) in line 170
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function ptr_list_size(struct ptr_list *) defined in ptrlist.c
   function bb_list_size(struct basic_block_list *) in line 175
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function ptr_list_size(struct ptr_list *) defined in ptrlist.c
   function free_instruction_list(struct instruction_list **) in line 180
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses macro definition free_ptr_list defined in ptrlist.h
   function delete_last_instruction(struct instruction_list **) in line 185
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function undo_ptr_list_last(struct ptr_list **) defined in ptrlist.c
   function delete_last_basic_block(struct basic_block_list **) in line 190
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function delete_ptr_list_last(struct ptr_list **) defined in ptrlist.c
   function first_basic_block(struct basic_block_list *) in line 195
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function last_instruction(struct instruction_list *) in line 199
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function first_instruction(struct instruction_list *) in line 204
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function first_pseudo(struct pseudo_list *) in line 209
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function concat_symbol_list(struct symbol_list *,struct symbol_list **) in line 214
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function concat_ptr_list(struct ptr_list *,struct ptr_list **) defined in ptrlist.c
      uses variable instruction::from defined in linearize.h
   function concat_basic_block_list(struct basic_block_list *,struct basic_block_list **) in line 219
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function concat_ptr_list(struct ptr_list *,struct ptr_list **) defined in ptrlist.c
      uses variable instruction::from defined in linearize.h
   function concat_instruction_list(struct instruction_list *,struct instruction_list **) in line 224
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function concat_ptr_list(struct ptr_list *,struct ptr_list **) defined in ptrlist.c
      uses variable instruction::from defined in linearize.h
   function add_symbol(struct symbol_list **,struct symbol *) in line 229
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses macro definition add_ptr_list defined in ptrlist.h
      uses variable sym defined in smatch_type.c
   function add_statement(struct statement_list **,struct statement *) in line 234
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses macro definition add_ptr_list defined in ptrlist.h
   function add_expression(struct expression_list **,struct expression *) in line 239
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses macro definition add_ptr_list defined in ptrlist.h
   variable position::line in line 56
      protection public
   variable position::newline in line 53
      protection public
   variable position::noexpand in line 57
      protection public
   variable position::pos in line 55
      protection public
   variable position::stream in line 52
      protection public
   variable position::type in line 51
      protection public
   variable position::whitespace in line 54
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/linearize.c
module linearize.c
   macro definition MAX_VAL_HASH in line 779
      protection public
   variable void_pseudo in line 34
      protection public
   variable current_pos in line 34
      protection public
   variable opcodes in line 161
      protection public
   function linearize_statement(struct entrypoint *,struct statement *) in line 25
      protection public
      135 lines of code
      2 parameters
      24 conditional paths
      uses macro definition VOID defined in linearize.h
      uses variable basic_block::ep defined in linearize.h
      uses variable entrypoint::active defined in linearize.h
      uses variable basic_block::insns defined in linearize.h
      uses variable basic_block::pos defined in linearize.h
      uses variable statement::pos defined in parse.h
      uses variable current_pos defined in linearize.c
      uses variable statement::type defined in parse.h
      uses enumvalue STMT_NONE defined in parse.h
      uses enumvalue STMT_DECLARATION defined in parse.h
      uses function linearize_declaration(struct entrypoint *,struct statement *) defined in linearize.c
      uses enumvalue STMT_CONTEXT defined in parse.h
      uses function linearize_context(struct entrypoint *,struct statement *) defined in linearize.c
      uses enumvalue STMT_RANGE defined in parse.h
      uses function linearize_range(struct entrypoint *,struct statement *) defined in linearize.c
      uses enumvalue STMT_EXPRESSION defined in parse.h
      uses function linearize_expression(struct entrypoint *,struct expression *) defined in linearize.c
      uses variable statement::expression defined in parse.h
      uses enumvalue STMT_ASM defined in parse.h
      uses function linearize_asm_statement(struct entrypoint *,struct statement *) defined in linearize.c
      uses enumvalue STMT_RETURN defined in parse.h
      uses function linearize_return(struct entrypoint *,struct statement *) defined in linearize.c
      uses enumvalue STMT_CASE defined in parse.h
      uses function add_label(struct entrypoint *,struct symbol *) defined in linearize.c
      uses variable statement::case_label defined in parse.h
      uses variable statement::case_statement defined in parse.h
      uses enumvalue STMT_LABEL defined in parse.h
      uses variable symbol::stmt defined in struct.c
      uses variable statement::label_identifier defined in parse.h
      uses variable symbol::used defined in struct.c
      uses variable symbol::ep defined in struct.c
      uses variable statement::label_statement defined in parse.h
      uses enumvalue STMT_GOTO defined in parse.h
      uses variable sym defined in smatch_type.c
      uses variable statement::goto_label defined in parse.h
      uses function add_goto(struct entrypoint *,struct basic_block *) defined in linearize.c
      uses function get_bound_block(struct entrypoint *,struct symbol *) defined in linearize.c
      uses variable statement::goto_expression defined in parse.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_LABEL defined in expression.h
      uses variable expression::label_symbol defined in expression.h
      uses function alloc_instruction(int,int) defined in linearize.c
      uses enumvalue OP_COMPUTEDGOTO defined in linearize.h
      uses variable instruction::target defined in linearize.h
      uses function add_one_insn(struct entrypoint *,struct instruction *) defined in linearize.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable statement::target_list defined in parse.h
      uses function alloc_multijmp(struct basic_block *,int,int) defined in linearize.c
      uses variable instruction::multijmp_list defined in linearize.h
      uses variable basic_block::parents defined in linearize.h
      uses variable basic_block::children defined in linearize.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses function finish_block(struct entrypoint *) defined in linearize.c
      uses enumvalue STMT_COMPOUND defined in parse.h
      uses variable statement::inline_fn defined in parse.h
      uses function linearize_inlined_call(struct entrypoint *,struct statement *) defined in linearize.c
      uses function linearize_compound_statement(struct entrypoint *,struct statement *) defined in linearize.c
      uses enumvalue STMT_IF defined in parse.h
      uses variable statement::if_conditional defined in parse.h
      uses function alloc_basic_block(struct entrypoint *,struct position) defined in linearize.c
      uses function linearize_cond_branch(struct entrypoint *,struct expression *,struct basic_block *,struct basic_block *) defined in linearize.c
      uses function set_activeblock(struct entrypoint *,struct basic_block *) defined in linearize.c
      uses variable statement::if_true defined in parse.h
      uses variable statement::if_false defined in parse.h
      uses enumvalue STMT_SWITCH defined in parse.h
      uses function linearize_switch(struct entrypoint *,struct statement *) defined in linearize.c
      uses enumvalue STMT_ITERATOR defined in parse.h
      uses function linearize_iterator(struct entrypoint *,struct statement *) defined in linearize.c
   function linearize_expression(struct entrypoint *,struct expression *) in line 26
      protection public
      73 lines of code
      2 parameters
      25 conditional paths
      uses macro definition VOID defined in linearize.h
      uses variable current_pos defined in linearize.c
      uses variable expression::pos defined in expression.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_SYMBOL defined in expression.h
      uses function linearize_one_symbol(struct entrypoint *,struct symbol *) defined in linearize.c
      uses variable expression::symbol defined in expression.h
      uses function add_symbol_address(struct entrypoint *,struct symbol *) defined in linearize.c
      uses enumvalue EXPR_VALUE defined in expression.h
      uses function value_pseudo(long long) defined in linearize.c
      uses variable expression::value defined in expression.h
      uses enumvalue EXPR_STRING defined in expression.h
      uses enumvalue EXPR_FVALUE defined in expression.h
      uses enumvalue EXPR_LABEL defined in expression.h
      uses function add_setval(struct entrypoint *,struct symbol *,struct expression *) defined in linearize.c
      uses variable expression::ctype defined in expression.h
      uses enumvalue EXPR_STATEMENT defined in expression.h
      uses function linearize_statement(struct entrypoint *,struct statement *) defined in linearize.c
      uses variable expression::statement defined in expression.h
      uses enumvalue EXPR_CALL defined in expression.h
      uses function linearize_call_expression(struct entrypoint *,struct expression *) defined in linearize.c
      uses enumvalue EXPR_BINOP defined in expression.h
      uses function linearize_binop(struct entrypoint *,struct expression *) defined in linearize.c
      uses enumvalue EXPR_LOGICAL defined in expression.h
      uses function linearize_logical(struct entrypoint *,struct expression *) defined in linearize.c
      uses enumvalue EXPR_COMPARE defined in expression.h
      uses function linearize_compare(struct entrypoint *,struct expression *) defined in linearize.c
      uses enumvalue EXPR_SELECT defined in expression.h
      uses function linearize_select(struct entrypoint *,struct expression *) defined in linearize.c
      uses enumvalue EXPR_CONDITIONAL defined in expression.h
      uses variable expression::cond_true defined in expression.h
      uses function linearize_short_conditional(struct entrypoint *,struct expression *,struct expression *,struct expression *) defined in linearize.c
      uses variable expression::conditional defined in expression.h
      uses variable expression::cond_false defined in expression.h
      uses function linearize_conditional(struct entrypoint *,struct expression *,struct expression *,struct expression *,struct expression *) defined in linearize.c
      uses enumvalue EXPR_COMMA defined in expression.h
      uses variable expression::left defined in expression.h
      uses variable expression::right defined in expression.h
      uses enumvalue EXPR_ASSIGNMENT defined in expression.h
      uses function linearize_assignment(struct entrypoint *,struct expression *) defined in linearize.c
      uses enumvalue EXPR_PREOP defined in expression.h
      uses function linearize_preop(struct entrypoint *,struct expression *) defined in linearize.c
      uses enumvalue EXPR_POSTOP defined in expression.h
      uses function linearize_postop(struct entrypoint *,struct expression *) defined in linearize.c
      uses enumvalue EXPR_CAST defined in expression.h
      uses enumvalue EXPR_FORCE_CAST defined in expression.h
      uses enumvalue EXPR_IMPLIED_CAST defined in expression.h
      uses function linearize_cast(struct entrypoint *,struct expression *) defined in linearize.c
      uses enumvalue EXPR_SLICE defined in expression.h
      uses function linearize_slice(struct entrypoint *,struct expression *) defined in linearize.c
      uses enumvalue EXPR_INITIALIZER defined in expression.h
      uses enumvalue EXPR_POS defined in expression.h
      uses function warning(struct position,const char *,...) defined in lib.c
      uses variable expression::op defined in expression.h
   function add_binary_op(struct entrypoint *,struct symbol *,int,pseudo_t,pseudo_t) in line 28
      protection public
      10 lines of code
      5 parameters
      1 conditional paths
      uses function alloc_typed_instruction(int,struct symbol *) defined in linearize.c
      uses function op(void) defined in loop2.c
      uses variable instruction::target defined in linearize.h
      uses function alloc_pseudo(struct instruction *) defined in linearize.c
      uses function add_one_insn(struct entrypoint *,struct instruction *) defined in linearize.c
   function add_setval(struct entrypoint *,struct symbol *,struct expression *) in line 29
      protection public
      9 lines of code
      3 parameters
      1 conditional paths
      uses function alloc_typed_instruction(int,struct symbol *) defined in linearize.c
      uses enumvalue OP_SETVAL defined in linearize.h
      uses variable instruction::target defined in linearize.h
      uses function alloc_pseudo(struct instruction *) defined in linearize.c
      uses variable instruction::val defined in linearize.h
      uses function add_one_insn(struct entrypoint *,struct instruction *) defined in linearize.c
   function linearize_one_symbol(struct entrypoint *,struct symbol *) in line 30
      protection public
      18 lines of code
      2 parameters
      3 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses variable sym defined in smatch_type.c
      uses variable symbol::initializer defined in struct.c
      uses variable symbol::initialized defined in struct.c
      uses macro definition VOID defined in linearize.h
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::modifiers defined in struct.c
      uses macro definition MOD_STATIC defined in symbol.h
      uses macro definition MOD_TOPLEVEL defined in symbol.h
      uses variable access_data::address defined in linearize.c
      uses function symbol_pseudo(struct entrypoint *,struct symbol *) defined in linearize.c
      uses function linearize_initializer(struct entrypoint *,struct expression *,struct access_data *) defined in linearize.c
      uses function finish_address_gen(struct entrypoint *,struct access_data *) defined in linearize.c
   function add_load(struct entrypoint *,struct access_data *) in line 33
      protection public
      19 lines of code
      2 parameters
      2 conditional paths
      uses variable access_data::origval defined in linearize.c
      uses function alloc_typed_instruction(int,struct symbol *) defined in linearize.c
      uses enumvalue OP_LOAD defined in linearize.h
      uses variable access_data::source_type defined in linearize.c
      uses function alloc_pseudo(struct instruction *) defined in linearize.c
      uses variable access_data::offset defined in linearize.c
      uses variable access_data::address defined in linearize.c
      uses function add_one_insn(struct entrypoint *,struct instruction *) defined in linearize.c
   function linearize_initializer(struct entrypoint *,struct expression *,struct access_data *) in line 34
      protection public
      24 lines of code
      3 parameters
      3 conditional paths
      uses function initializer(struct expression **,struct token *) defined in expression.h
      uses enumvalue EXPR_INITIALIZER defined in expression.h
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses enumvalue EXPR_POS defined in expression.h
      uses function linearize_position(struct entrypoint *,struct expression *,struct access_data *) defined in linearize.c
      uses function linearize_expression(struct entrypoint *,struct expression *) defined in linearize.c
      uses variable access_data::source_type defined in linearize.c
      uses function base_type(struct symbol *) defined in linearize.c
      uses variable access_data::result_type defined in linearize.c
      uses function linearize_store_gen(struct entrypoint *,pseudo_t,struct access_data *) defined in linearize.c
      uses variable expression::value defined in expression.h
      uses macro definition VOID defined in linearize.h
   function ALLOCATOR(pseudo_user,"pseudo_user") in line 40
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function alloc_instruction(int,int) in line 42
      protection public
      8 lines of code
      2 parameters
      1 conditional paths
      uses variable instruction::size defined in linearize.h
      uses variable current_pos defined in linearize.c
   function type_size(struct symbol *) in line 51
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function alloc_typed_instruction(int,struct symbol *) in line 56
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
      uses function alloc_instruction(int,int) defined in linearize.c
      uses function type_size(struct symbol *) defined in linearize.c
   function alloc_entrypoint(void) in line 63
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function alloc_basic_block(struct entrypoint *,struct position) in line 68
      protection public
      8 lines of code
      2 parameters
      1 conditional paths
      uses variable basic_block::context defined in linearize.h
      uses variable basic_block::pos defined in linearize.h
      uses variable basic_block::ep defined in linearize.h
   function alloc_multijmp(struct basic_block *,int,int) in line 77
      protection public
      8 lines of code
      3 parameters
      1 conditional paths
      uses variable multijmp::target defined in linearize.h
      uses variable multijmp::begin defined in linearize.h
      uses variable multijmp::end defined in linearize.h
   function regno(pseudo_t) in line 86
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses enumvalue PSEUDO_REG defined in linearize.h
   function show_pseudo(pseudo_t) in line 94
      protection public
      66 lines of code
      1 parameters
      1 conditional paths
      uses variable buf defined in sm_fake_assignment.c
      uses macro definition VOID defined in linearize.h
      uses variable pseudo::type defined in linearize.h
      uses enumvalue PSEUDO_SYM defined in linearize.h
      uses variable sym defined in smatch_type.c
      uses variable pseudo::sym defined in linearize.h
      uses variable symbol::bb_target defined in struct.c
      uses function snprintf(char *,int,char *,char *) defined in sm_overflow6.c
      uses variable symbol::ident defined in struct.c
      uses function show_ident(const struct ident *) defined in token.h
      uses variable symbol::initializer defined in struct.c
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_VALUE defined in expression.h
      uses variable expression::value defined in expression.h
      uses enumvalue EXPR_STRING defined in expression.h
      uses function show_string(const struct string *) defined in token.h
      uses variable expression::string defined in expression.h
      uses enumvalue PSEUDO_REG defined in linearize.h
      uses variable pseudo::nr defined in linearize.h
      uses variable pseudo::ident defined in linearize.h
      uses function sprintf(char *,char *,char *) defined in sm_overflow6.c
      uses enumvalue PSEUDO_VAL defined in linearize.h
      uses variable pseudo::value defined in linearize.h
      uses enumvalue PSEUDO_ARG defined in linearize.h
      uses enumvalue PSEUDO_PHI defined in linearize.h
   function show_asm_constraints(char *,const char *,struct asm_constraint_list *) in line 249
      protection public
      14 lines of code
      3 parameters
      3 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable buf defined in sm_fake_assignment.c
      uses function sprintf(char *,char *,char *) defined in sm_overflow6.c
      uses function show_pseudo(pseudo_t) defined in linearize.c
      uses function show_ident(const struct ident *) defined in token.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function show_asm(char *,struct instruction *) in line 264
      protection public
      10 lines of code
      2 parameters
      1 conditional paths
      uses variable buf defined in sm_fake_assignment.c
      uses function sprintf(char *,char *,char *) defined in sm_overflow6.c
      uses function show_asm_constraints(char *,const char *,struct asm_constraint_list *) defined in linearize.c
      uses variable asm_rules::outputs defined in linearize.h
      uses variable asm_rules::inputs defined in linearize.h
      uses variable asm_rules::clobbers defined in linearize.h
   function show_instruction(struct instruction *) in line 275
      protection public
      196 lines of code
      1 parameters
      1 conditional paths
      uses variable buf defined in sm_fake_assignment.c
      uses function sprintf(char *,char *,char *) defined in sm_overflow6.c
      uses macro definition ARRAY_SIZE defined in lib.h
      uses variable opcodes defined in linearize.c
      uses function op(void) defined in loop2.c
      uses function memset(void *,int,int) defined in check_byte_count-ice.c
      uses enumvalue OP_RET defined in linearize.h
      uses macro definition VOID defined in linearize.h
      uses function show_pseudo(pseudo_t) defined in linearize.c
      uses enumvalue OP_BR defined in linearize.h
      uses enumvalue OP_SYMADDR defined in linearize.h
      uses variable sym defined in smatch_type.c
      uses variable symbol::bb_target defined in struct.c
      uses variable symbol::ident defined in struct.c
      uses function show_ident(const struct ident *) defined in token.h
      uses enumvalue OP_SETVAL defined in linearize.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_VALUE defined in expression.h
      uses variable expression::value defined in expression.h
      uses enumvalue EXPR_FVALUE defined in expression.h
      uses variable expression::fvalue defined in expression.h
      uses enumvalue EXPR_STRING defined in expression.h
      uses function show_string(const struct string *) defined in token.h
      uses variable expression::string defined in expression.h
      uses enumvalue EXPR_SYMBOL defined in expression.h
      uses variable expression::symbol defined in expression.h
      uses enumvalue EXPR_LABEL defined in expression.h
      uses enumvalue OP_SWITCH defined in linearize.h
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable multijmp::begin defined in linearize.h
      uses variable multijmp::end defined in linearize.h
      uses variable multijmp::target defined in linearize.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses enumvalue OP_COMPUTEDGOTO defined in linearize.h
      uses enumvalue OP_PHISOURCE defined in linearize.h
      uses variable instruction::target defined in linearize.h
      uses enumvalue OP_PHI defined in linearize.h
      uses enumvalue OP_LOAD defined in linearize.h
      uses enumvalue OP_LNOP defined in linearize.h
      uses enumvalue OP_STORE defined in linearize.h
      uses enumvalue OP_SNOP defined in linearize.h
      uses enumvalue OP_INLINED_CALL defined in linearize.h
      uses enumvalue OP_CALL defined in linearize.h
      uses enumvalue OP_CAST defined in linearize.h
      uses enumvalue OP_SCAST defined in linearize.h
      uses enumvalue OP_FPCAST defined in linearize.h
      uses enumvalue OP_PTRCAST defined in linearize.h
      uses function type_size(struct symbol *) defined in linearize.c
      uses enumvalue OP_BINARY defined in linearize.h
      uses enumvalue OP_BINARY_END defined in linearize.h
      uses enumvalue OP_BINCMP defined in linearize.h
      uses enumvalue OP_BINCMP_END defined in linearize.h
      uses enumvalue OP_SEL defined in linearize.h
      uses enumvalue OP_SLICE defined in linearize.h
      uses enumvalue OP_NOT defined in linearize.h
      uses enumvalue OP_NEG defined in linearize.h
      uses enumvalue OP_CONTEXT defined in linearize.h
      uses enumvalue OP_RANGE defined in linearize.h
      uses enumvalue OP_NOP defined in linearize.h
      uses enumvalue OP_DEATHNOTE defined in linearize.h
      uses enumvalue OP_ASM defined in linearize.h
      uses function show_asm(char *,struct instruction *) defined in linearize.c
      uses enumvalue OP_COPY defined in linearize.h
      uses function die(const char *,...) defined in lib.c
   function show_bb(struct basic_block *) in line 472
      protection public
      56 lines of code
      1 parameters
      1 conditional paths
      uses function printf(char *,...) defined in test-be.c
      uses variable instruction::bb defined in linearize.h
      uses variable verbose defined in lib.c
      uses function stream_name(int) defined in token.h
      uses variable basic_block::pos defined in linearize.h
      uses variable position::stream defined in lib.h
      uses variable position::line defined in lib.h
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable basic_block::needs defined in linearize.h
      uses variable pseudo::def defined in linearize.h
      uses variable instruction::opcode defined in linearize.h
      uses enumvalue OP_PHI defined in linearize.h
      uses function show_pseudo(pseudo_t) defined in linearize.c
      uses variable instruction::phi_list defined in linearize.h
      uses macro definition VOID defined in linearize.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses variable basic_block::defines defined in linearize.h
      uses variable basic_block::parents defined in linearize.h
      uses variable position::pos defined in lib.h
      uses variable basic_block::children defined in linearize.h
      uses variable basic_block::insns defined in linearize.h
      uses function show_instruction(struct instruction *) defined in linearize.c
   function show_symbol_usage(pseudo_t) in line 529
      protection public
      10 lines of code
      1 parameters
      2 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable pseudo::users defined in linearize.h
      uses function printf(char *,...) defined in test-be.c
      uses function show_instruction(struct instruction *) defined in linearize.c
      uses variable pseudo_user::insn defined in linearize.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function show_entry(struct entrypoint *) in line 540
      protection public
      35 lines of code
      1 parameters
      1 conditional paths
      uses variable sym defined in smatch_type.c
      uses function printf(char *,...) defined in test-be.c
      uses function show_ident(const struct ident *) defined in token.h
      uses variable basic_block::ep defined in linearize.h
      uses variable entrypoint::name defined in linearize.h
      uses variable symbol::ident defined in struct.c
      uses variable verbose defined in lib.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable entrypoint::syms defined in linearize.h
      uses variable symbol::pseudo defined in struct.c
      uses variable pseudo::users defined in linearize.h
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::modifiers defined in struct.c
      uses macro definition MOD_EXTERN defined in symbol.h
      uses macro definition MOD_STATIC defined in symbol.h
      uses macro definition MOD_ADDRESSABLE defined in symbol.h
      uses function show_symbol_usage(pseudo_t) defined in linearize.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses variable entrypoint::bbs defined in linearize.h
      uses variable basic_block::parents defined in linearize.h
      uses variable basic_block::children defined in linearize.h
      uses variable basic_block::insns defined in linearize.h
      uses function show_bb(struct basic_block *) defined in linearize.c
   function bind_label(struct symbol *,struct basic_block *,struct position) in line 576
      protection public
      6 lines of code
      3 parameters
      2 conditional paths
      uses variable symbol::bb_target defined in struct.c
      uses function warning(struct position,const char *,...) defined in lib.c
      uses variable basic_block::pos defined in linearize.h
      uses function show_ident(const struct ident *) defined in token.h
      uses variable symbol::ident defined in struct.c
   function get_bound_block(struct entrypoint *,struct symbol *) in line 583
      protection public
      10 lines of code
      2 parameters
      2 conditional paths
      uses variable symbol::bb_target defined in struct.c
      uses function alloc_basic_block(struct entrypoint *,struct position) defined in linearize.c
      uses variable basic_block::ep defined in linearize.h
      uses variable symbol::pos defined in struct.c
   function finish_block(struct entrypoint *) in line 594
      protection public
      6 lines of code
      1 parameters
      2 conditional paths
      uses variable src defined in sm_user_data3.c
      uses variable basic_block::ep defined in linearize.h
      uses variable entrypoint::active defined in linearize.h
      uses macro definition NULL defined in sm_implied3.c
   function add_goto(struct entrypoint *,struct basic_block *) in line 601
      protection public
      13 lines of code
      2 parameters
      2 conditional paths
      uses variable src defined in sm_user_data3.c
      uses variable basic_block::ep defined in linearize.h
      uses variable entrypoint::active defined in linearize.h
      uses function alloc_instruction(int,int) defined in linearize.c
      uses enumvalue OP_BR defined in linearize.h
      uses variable instruction::bb_true defined in linearize.h
      uses variable basic_block::parents defined in linearize.h
      uses variable instruction::bb defined in linearize.h
      uses macro definition NULL defined in sm_implied3.c
   function add_one_insn(struct entrypoint *,struct instruction *) in line 615
      protection public
      9 lines of code
      2 parameters
      2 conditional paths
      uses variable basic_block::ep defined in linearize.h
      uses variable entrypoint::active defined in linearize.h
      uses variable basic_block::insns defined in linearize.h
   function set_activeblock(struct entrypoint *,struct basic_block *) in line 625
      protection public
      9 lines of code
      2 parameters
      3 conditional paths
      uses variable basic_block::ep defined in linearize.h
      uses variable entrypoint::active defined in linearize.h
      uses function add_goto(struct entrypoint *,struct basic_block *) defined in linearize.c
      uses variable entrypoint::bbs defined in linearize.h
   function remove_parent(struct basic_block *,struct basic_block *) in line 635
      protection public
      6 lines of code
      2 parameters
      2 conditional paths
      uses variable basic_block::parents defined in linearize.h
      uses function kill_bb(struct basic_block *) defined in flow.c
   function insert_branch(struct basic_block *,struct instruction *,struct basic_block *) in line 643
      protection public
      24 lines of code
      3 parameters
      1 conditional paths
      uses variable basic_block::insns defined in linearize.h
      uses macro definition assert defined in sort.c
      uses function alloc_instruction(int,int) defined in linearize.c
      uses enumvalue OP_BR defined in linearize.h
      uses variable instruction::bb defined in linearize.h
      uses variable instruction::bb_true defined in linearize.h
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable basic_block::children defined in linearize.h
      uses macro definition NULL defined in sm_implied3.c
      uses macro definition DELETE_CURRENT_PTR defined in ptrlist.h
      uses function remove_parent(struct basic_block *,struct basic_block *) defined in linearize.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses macro definition PACK_PTR_LIST defined in ptrlist.h
   function insert_select(struct basic_block *,struct instruction *,struct instruction *,pseudo_t,pseudo_t) in line 669
      protection public
      25 lines of code
      5 parameters
      1 conditional paths
      uses variable instruction::bb defined in linearize.h
      uses variable basic_block::insns defined in linearize.h
      uses function alloc_instruction(int,int) defined in linearize.c
      uses enumvalue OP_SEL defined in linearize.h
      uses variable instruction::size defined in linearize.h
      uses macro definition assert defined in sort.c
      uses variable instruction::cond defined in linearize.h
      uses variable instruction::src1 defined in linearize.h
      uses variable instruction::target defined in linearize.h
      uses variable pseudo::def defined in linearize.h
      uses variable instruction::src2 defined in linearize.h
      uses variable instruction::src3 defined in linearize.h
   function bb_empty(struct basic_block *) in line 695
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable instruction::bb defined in linearize.h
      uses variable basic_block::insns defined in linearize.h
   function add_label(struct entrypoint *,struct symbol *) in line 701
      protection public
      16 lines of code
      2 parameters
      3 conditional paths
      uses variable symbol::bb_target defined in struct.c
      uses function set_activeblock(struct entrypoint *,struct basic_block *) defined in linearize.c
      uses variable basic_block::ep defined in linearize.h
      uses variable entrypoint::active defined in linearize.h
      uses function bb_empty(struct basic_block *) defined in linearize.c
      uses function alloc_basic_block(struct entrypoint *,struct position) defined in linearize.c
      uses variable symbol::pos defined in struct.c
   function add_branch(struct entrypoint *,struct expression *,pseudo_t,struct basic_block *,struct basic_block *) in line 718
      protection public
      17 lines of code
      5 parameters
      2 conditional paths
      uses variable basic_block::ep defined in linearize.h
      uses variable entrypoint::active defined in linearize.h
      uses variable instruction::bb defined in linearize.h
      uses function alloc_instruction(int,int) defined in linearize.c
      uses enumvalue OP_BR defined in linearize.h
      uses variable instruction::cond defined in linearize.h
      uses variable instruction::bb_true defined in linearize.h
      uses variable instruction::bb_false defined in linearize.h
      uses variable basic_block::parents defined in linearize.h
      uses variable basic_block::children defined in linearize.h
      uses function add_one_insn(struct entrypoint *,struct instruction *) defined in linearize.c
   function alloc_pseudo(struct instruction *) in line 737
      protection public
      9 lines of code
      1 parameters
      1 conditional paths
      uses variable pseudo::type defined in linearize.h
      uses enumvalue PSEUDO_REG defined in linearize.h
      uses variable pseudo::nr defined in linearize.h
      uses variable pseudo::def defined in linearize.h
   function clear_symbol_pseudos(struct entrypoint *) in line 747
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable entrypoint::accesses defined in linearize.h
      uses variable pseudo::sym defined in linearize.h
      uses variable symbol::pseudo defined in struct.c
      uses macro definition NULL defined in sm_implied3.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function symbol_pseudo(struct entrypoint *,struct symbol *) in line 756
      protection public
      20 lines of code
      2 parameters
      3 conditional paths
      uses variable sym defined in smatch_type.c
      uses macro definition VOID defined in linearize.h
      uses variable symbol::pseudo defined in struct.c
      uses variable pseudo::nr defined in linearize.h
      uses variable pseudo::type defined in linearize.h
      uses enumvalue PSEUDO_SYM defined in linearize.h
      uses variable pseudo::sym defined in linearize.h
      uses variable pseudo::ident defined in linearize.h
      uses variable symbol::ident defined in struct.c
      uses variable entrypoint::accesses defined in linearize.h
   function value_pseudo(long long) in line 777
      protection public
      21 lines of code
      1 parameters
      1 conditional paths
      uses macro definition MAX_VAL_HASH defined in linearize.c
      uses function hash(struct hashtable *,void *) defined in hashtable.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable pseudo::value defined in linearize.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses variable pseudo::type defined in linearize.h
      uses enumvalue PSEUDO_VAL defined in linearize.h
   function argument_pseudo(struct entrypoint *,int) in line 799
      protection public
      13 lines of code
      2 parameters
      1 conditional paths
      uses variable entrypoint::entry defined in linearize.h
      uses variable pseudo::type defined in linearize.h
      uses enumvalue PSEUDO_ARG defined in linearize.h
      uses variable pseudo::nr defined in linearize.h
      uses variable pseudo::def defined in linearize.h
   function alloc_phi(struct basic_block *,pseudo_t,int) in line 813
      protection public
      16 lines of code
      3 parameters
      1 conditional paths
      uses function alloc_instruction(int,int) defined in linearize.c
      uses enumvalue OP_PHISOURCE defined in linearize.h
      uses variable instruction::size defined in linearize.h
      uses variable pseudo::type defined in linearize.h
      uses enumvalue PSEUDO_PHI defined in linearize.h
      uses variable pseudo::nr defined in linearize.h
      uses variable pseudo::def defined in linearize.h
      uses variable basic_block::insns defined in linearize.h
   function finish_address_gen(struct entrypoint *,struct access_data *) in line 845
      protection public
      3 lines of code
      2 parameters
      1 conditional paths
   function linearize_simple_address(struct entrypoint *,struct expression *,struct access_data *) in line 849
      protection public
      20 lines of code
      3 parameters
      5 conditional paths
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_SYMBOL defined in expression.h
      uses function linearize_one_symbol(struct entrypoint *,struct symbol *) defined in linearize.c
      uses variable expression::symbol defined in expression.h
      uses variable access_data::address defined in linearize.c
      uses function symbol_pseudo(struct entrypoint *,struct symbol *) defined in linearize.c
      uses enumvalue EXPR_BINOP defined in expression.h
      uses variable expression::right defined in expression.h
      uses enumvalue EXPR_VALUE defined in expression.h
      uses variable expression::op defined in expression.h
      uses variable access_data::offset defined in linearize.c
      uses function get_expression_value(struct expression *) defined in expand.c
      uses variable expression::left defined in expression.h
      uses function linearize_expression(struct entrypoint *,struct expression *) defined in linearize.c
   function base_type(struct symbol *) in line 870
      protection public
      12 lines of code
      1 parameters
      4 conditional paths
      uses variable sym defined in smatch_type.c
      uses variable symbol::type defined in struct.c
      uses enumvalue SYM_NODE defined in symbol.h
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::base_type defined in struct.c
      uses enumvalue SYM_BITFIELD defined in symbol.h
   function linearize_address_gen(struct entrypoint *,struct expression *,struct access_data *) in line 883
      protection public
      20 lines of code
      3 parameters
      3 conditional paths
      uses variable expression::ctype defined in expression.h
      uses variable access_data::pos defined in linearize.c
      uses variable expression::pos defined in expression.h
      uses variable access_data::result_type defined in linearize.c
      uses variable symbol::ctype defined in struct.c
      uses variable access_data::source_type defined in linearize.c
      uses function base_type(struct symbol *) defined in linearize.c
      uses variable access_data::bit_size defined in linearize.c
      uses variable access_data::alignment defined in linearize.c
      uses variable ctype::alignment defined in struct.c
      uses variable access_data::bit_offset defined in linearize.c
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_PREOP defined in expression.h
      uses variable expression::op defined in expression.h
      uses function linearize_simple_address(struct entrypoint *,struct expression *,struct access_data *) defined in linearize.c
      uses variable symbol::ep defined in struct.c
      uses variable expression::unop defined in expression.h
      uses function warning(struct position,const char *,...) defined in lib.c
   function add_store(struct entrypoint *,struct access_data *,pseudo_t) in line 924
      protection public
      12 lines of code
      3 parameters
      2 conditional paths
      uses variable basic_block::ep defined in linearize.h
      uses variable entrypoint::active defined in linearize.h
      uses function alloc_typed_instruction(int,struct symbol *) defined in linearize.c
      uses enumvalue OP_STORE defined in linearize.h
      uses variable access_data::source_type defined in linearize.c
      uses variable instruction::offset defined in linearize.h
      uses variable access_data::offset defined in linearize.c
      uses variable instruction::target defined in linearize.h
      uses variable access_data::address defined in linearize.c
      uses variable instruction::src defined in linearize.h
      uses function add_one_insn(struct entrypoint *,struct instruction *) defined in linearize.c
   function linearize_store_gen(struct entrypoint *,pseudo_t,struct access_data *) in line 937
      protection public
      21 lines of code
      3 parameters
      3 conditional paths
      uses function type_size(struct symbol *) defined in linearize.c
      uses variable access_data::source_type defined in linearize.c
      uses variable access_data::result_type defined in linearize.c
      uses function add_load(struct entrypoint *,struct access_data *) defined in linearize.c
      uses variable access_data::bit_offset defined in linearize.c
      uses variable access_data::bit_size defined in linearize.c
      uses function add_binary_op(struct entrypoint *,struct symbol *,int,pseudo_t,pseudo_t) defined in linearize.c
      uses enumvalue OP_SHL defined in linearize.h
      uses function value_pseudo(long long) defined in linearize.c
      uses enumvalue OP_AND defined in linearize.h
      uses enumvalue OP_OR defined in linearize.h
      uses function add_store(struct entrypoint *,struct access_data *,pseudo_t) defined in linearize.c
   function add_symbol_address(struct entrypoint *,struct symbol *) in line 980
      protection public
      10 lines of code
      2 parameters
      1 conditional paths
      uses function alloc_instruction(int,int) defined in linearize.c
      uses enumvalue OP_SYMADDR defined in linearize.h
      uses variable bits_in_pointer defined in target.c
      uses variable instruction::target defined in linearize.h
      uses function alloc_pseudo(struct instruction *) defined in linearize.c
      uses function symbol_pseudo(struct entrypoint *,struct symbol *) defined in linearize.c
      uses variable sym defined in smatch_type.c
      uses function add_one_insn(struct entrypoint *,struct instruction *) defined in linearize.c
   function linearize_load_gen(struct entrypoint *,struct access_data *) in line 991
      protection public
      12 lines of code
      2 parameters
      2 conditional paths
      uses function add_load(struct entrypoint *,struct access_data *) defined in linearize.c
      uses variable access_data::bit_offset defined in linearize.c
      uses function value_pseudo(long long) defined in linearize.c
      uses function add_binary_op(struct entrypoint *,struct symbol *,int,pseudo_t,pseudo_t) defined in linearize.c
      uses variable access_data::source_type defined in linearize.c
      uses enumvalue OP_LSR defined in linearize.h
   function linearize_access(struct entrypoint *,struct expression *) in line 1004
      protection public
      11 lines of code
      2 parameters
      2 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses function linearize_address_gen(struct entrypoint *,struct expression *,struct access_data *) defined in linearize.c
      uses macro definition VOID defined in linearize.h
      uses function linearize_load_gen(struct entrypoint *,struct access_data *) defined in linearize.c
      uses function finish_address_gen(struct entrypoint *,struct access_data *) defined in linearize.c
   function linearize_inc_dec(struct entrypoint *,struct expression *,int) in line 1017
      protection public
      16 lines of code
      3 parameters
      2 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses variable one defined in sm_equiv1.c
      uses function op(void) defined in loop2.c
      uses variable expression::op defined in expression.h
      uses enumvalue SPECIAL_INCREMENT defined in token.h
      uses enumvalue OP_ADD defined in linearize.h
      uses enumvalue OP_SUB defined in linearize.h
      uses function linearize_address_gen(struct entrypoint *,struct expression *,struct access_data *) defined in linearize.c
      uses variable expression::unop defined in expression.h
      uses macro definition VOID defined in linearize.h
      uses function linearize_load_gen(struct entrypoint *,struct access_data *) defined in linearize.c
      uses function value_pseudo(long long) defined in linearize.c
      uses variable expression::op_value defined in expression.h
      uses function add_binary_op(struct entrypoint *,struct symbol *,int,pseudo_t,pseudo_t) defined in linearize.c
      uses variable expression::ctype defined in expression.h
      uses function linearize_store_gen(struct entrypoint *,pseudo_t,struct access_data *) defined in linearize.c
      uses function finish_address_gen(struct entrypoint *,struct access_data *) defined in linearize.c
   function add_uniop(struct entrypoint *,struct expression *,int,pseudo_t) in line 1034
      protection public
      10 lines of code
      4 parameters
      1 conditional paths
      uses function alloc_typed_instruction(int,struct symbol *) defined in linearize.c
      uses function op(void) defined in loop2.c
      uses variable expression::ctype defined in expression.h
      uses function alloc_pseudo(struct instruction *) defined in linearize.c
      uses variable src defined in sm_user_data3.c
      uses function add_one_insn(struct entrypoint *,struct instruction *) defined in linearize.c
   function linearize_slice(struct entrypoint *,struct expression *) in line 1045
      protection public
      13 lines of code
      2 parameters
      1 conditional paths
      uses function linearize_expression(struct entrypoint *,struct expression *) defined in linearize.c
      uses variable expression::base defined in expression.h
      uses function alloc_typed_instruction(int,struct symbol *) defined in linearize.c
      uses enumvalue OP_SLICE defined in linearize.h
      uses variable expression::ctype defined in expression.h
      uses function alloc_pseudo(struct instruction *) defined in linearize.c
      uses variable expression::r_bitpos defined in expression.h
      uses variable expression::r_nrbits defined in expression.h
      uses function add_one_insn(struct entrypoint *,struct instruction *) defined in linearize.c
   function linearize_regular_preop(struct entrypoint *,struct expression *) in line 1059
      protection public
      17 lines of code
      2 parameters
      5 conditional paths
      uses function linearize_expression(struct entrypoint *,struct expression *) defined in linearize.c
      uses variable expression::unop defined in expression.h
      uses variable expression::op defined in expression.h
      uses function zero(void) defined in sm_impossible1.c
      uses function value_pseudo(long long) defined in linearize.c
      uses function add_binary_op(struct entrypoint *,struct symbol *,int,pseudo_t,pseudo_t) defined in linearize.c
      uses variable expression::ctype defined in expression.h
      uses enumvalue OP_SET_EQ defined in linearize.h
      uses function add_uniop(struct entrypoint *,struct expression *,int,pseudo_t) defined in linearize.c
      uses enumvalue OP_NOT defined in linearize.h
      uses enumvalue OP_NEG defined in linearize.h
      uses macro definition VOID defined in linearize.h
   function linearize_preop(struct entrypoint *,struct expression *) in line 1077
      protection public
      13 lines of code
      2 parameters
      3 conditional paths
      uses variable expression::op defined in expression.h
      uses function linearize_access(struct entrypoint *,struct expression *) defined in linearize.c
      uses enumvalue SPECIAL_INCREMENT defined in token.h
      uses enumvalue SPECIAL_DECREMENT defined in token.h
      uses function linearize_inc_dec(struct entrypoint *,struct expression *,int) defined in linearize.c
      uses function linearize_regular_preop(struct entrypoint *,struct expression *) defined in linearize.c
   function linearize_postop(struct entrypoint *,struct expression *) in line 1091
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function linearize_inc_dec(struct entrypoint *,struct expression *,int) defined in linearize.c
   function alloc_cast_instruction(struct symbol *,struct symbol *) in line 1102
      protection public
      18 lines of code
      2 parameters
      6 conditional paths
      uses enumvalue OP_CAST defined in linearize.h
      uses variable src defined in sm_user_data3.c
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::modifiers defined in struct.c
      uses macro definition MOD_SIGNED defined in symbol.h
      uses enumvalue OP_SCAST defined in linearize.h
      uses variable symbol::type defined in struct.c
      uses enumvalue SYM_NODE defined in symbol.h
      uses variable ctype::base_type defined in struct.c
      uses enumvalue SYM_PTR defined in symbol.h
      uses enumvalue OP_PTRCAST defined in linearize.h
      uses variable fp_type defined in symbol.c
      uses enumvalue OP_FPCAST defined in linearize.h
      uses function alloc_typed_instruction(int,struct symbol *) defined in linearize.c
   function cast_pseudo(struct entrypoint *,pseudo_t,struct symbol *,struct symbol *) in line 1121
      protection public
      19 lines of code
      4 parameters
      4 conditional paths
      uses variable src defined in sm_user_data3.c
      uses macro definition VOID defined in linearize.h
      uses variable instruction::from defined in linearize.h
      uses variable symbol::bit_size defined in struct.c
      uses function alloc_cast_instruction(struct symbol *,struct symbol *) defined in linearize.c
      uses function alloc_pseudo(struct instruction *) defined in linearize.c
      uses function add_one_insn(struct entrypoint *,struct instruction *) defined in linearize.c
   function opcode_sign(int,struct symbol *) in line 1141
      protection public
      10 lines of code
      2 parameters
      6 conditional paths
      uses variable ctype::modifiers defined in struct.c
      uses macro definition MOD_SIGNED defined in symbol.h
      uses enumvalue OP_MULU defined in linearize.h
      uses enumvalue OP_DIVU defined in linearize.h
      uses enumvalue OP_MODU defined in linearize.h
      uses enumvalue OP_LSR defined in linearize.h
   function linearize_assignment(struct entrypoint *,struct expression *) in line 1152
      protection public
      39 lines of code
      2 parameters
      4 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses variable expression::left defined in expression.h
      uses variable src defined in sm_user_data3.c
      uses variable expression::right defined in expression.h
      uses variable expression::value defined in expression.h
      uses function linearize_expression(struct entrypoint *,struct expression *) defined in linearize.c
      uses function linearize_address_gen(struct entrypoint *,struct expression *,struct access_data *) defined in linearize.c
      uses variable expression::op defined in expression.h
      uses function linearize_load_gen(struct entrypoint *,struct access_data *) defined in linearize.c
      uses enumvalue SPECIAL_ADD_ASSIGN defined in token.h
      uses enumvalue SPECIAL_BASE defined in token.h
      uses enumvalue OP_ADD defined in linearize.h
      uses enumvalue SPECIAL_SUB_ASSIGN defined in token.h
      uses enumvalue OP_SUB defined in linearize.h
      uses enumvalue SPECIAL_MUL_ASSIGN defined in token.h
      uses enumvalue OP_MULU defined in linearize.h
      uses enumvalue SPECIAL_DIV_ASSIGN defined in token.h
      uses enumvalue OP_DIVU defined in linearize.h
      uses enumvalue SPECIAL_MOD_ASSIGN defined in token.h
      uses enumvalue OP_MODU defined in linearize.h
      uses enumvalue SPECIAL_SHL_ASSIGN defined in token.h
      uses enumvalue OP_SHL defined in linearize.h
      uses enumvalue SPECIAL_SHR_ASSIGN defined in token.h
      uses enumvalue OP_LSR defined in linearize.h
      uses enumvalue SPECIAL_AND_ASSIGN defined in token.h
      uses enumvalue OP_AND defined in linearize.h
      uses enumvalue SPECIAL_OR_ASSIGN defined in token.h
      uses enumvalue OP_OR defined in linearize.h
      uses enumvalue SPECIAL_XOR_ASSIGN defined in token.h
      uses enumvalue OP_XOR defined in linearize.h
      uses macro definition VOID defined in linearize.h
      uses function cast_pseudo(struct entrypoint *,pseudo_t,struct symbol *,struct symbol *) defined in linearize.c
      uses variable expression::ctype defined in expression.h
      uses function opcode_sign(int,struct symbol *) defined in linearize.c
      uses function add_binary_op(struct entrypoint *,struct symbol *,int,pseudo_t,pseudo_t) defined in linearize.c
      uses function linearize_store_gen(struct entrypoint *,pseudo_t,struct access_data *) defined in linearize.c
      uses function finish_address_gen(struct entrypoint *,struct access_data *) defined in linearize.c
   function linearize_call_expression(struct entrypoint *,struct expression *) in line 1192
      protection public
      77 lines of code
      2 parameters
      14 conditional paths
      uses function alloc_typed_instruction(int,struct symbol *) defined in linearize.c
      uses enumvalue OP_CALL defined in linearize.h
      uses variable expression::ctype defined in expression.h
      uses macro definition NULL defined in sm_implied3.c
      uses variable context::context defined in symbol.h
      uses function warning(struct position,const char *,...) defined in lib.c
      uses variable expression::pos defined in expression.h
      uses macro definition VOID defined in linearize.h
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable expression::args defined in expression.h
      uses function linearize_expression(struct entrypoint *,struct expression *) defined in linearize.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses variable expression::fn defined in expression.h
      uses variable symbol::type defined in struct.c
      uses enumvalue SYM_NODE defined in symbol.h
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::base_type defined in struct.c
      uses enumvalue EXPR_PREOP defined in expression.h
      uses enumvalue EXPR_SYMBOL defined in expression.h
      uses variable sym defined in smatch_type.c
      uses enumvalue SYM_FN defined in symbol.h
      uses function symbol_pseudo(struct entrypoint *,struct symbol *) defined in linearize.c
      uses variable symbol::ep defined in struct.c
      uses function alloc_pseudo(struct instruction *) defined in linearize.c
      uses function add_one_insn(struct entrypoint *,struct instruction *) defined in linearize.c
      uses variable ctype::attribute defined in struct.c
      uses variable attribute::contexts defined in symbol.h
      uses variable context::in defined in symbol.h
      uses variable context::out defined in symbol.h
      uses function alloc_instruction(int,int) defined in linearize.c
      uses enumvalue OP_CONTEXT defined in linearize.h
   function linearize_binop(struct entrypoint *,struct expression *) in line 1270
      protection public
      21 lines of code
      2 parameters
      1 conditional paths
      uses enumvalue OP_ADD defined in linearize.h
      uses enumvalue OP_SUB defined in linearize.h
      uses enumvalue OP_MULU defined in linearize.h
      uses enumvalue OP_DIVU defined in linearize.h
      uses enumvalue OP_MODU defined in linearize.h
      uses enumvalue OP_AND defined in linearize.h
      uses enumvalue OP_OR defined in linearize.h
      uses enumvalue OP_XOR defined in linearize.h
      uses enumvalue SPECIAL_LEFTSHIFT defined in token.h
      uses enumvalue OP_SHL defined in linearize.h
      uses enumvalue SPECIAL_RIGHTSHIFT defined in token.h
      uses enumvalue OP_LSR defined in linearize.h
      uses enumvalue SPECIAL_LOGICAL_AND defined in token.h
      uses enumvalue OP_AND_BOOL defined in linearize.h
      uses enumvalue SPECIAL_LOGICAL_OR defined in token.h
      uses enumvalue OP_OR_BOOL defined in linearize.h
      uses function op(void) defined in loop2.c
      uses function linearize_expression(struct entrypoint *,struct expression *) defined in linearize.c
      uses variable symbol::ep defined in struct.c
      uses variable expression::left defined in expression.h
      uses variable expression::right defined in expression.h
      uses function opcode_sign(int,struct symbol *) defined in linearize.c
      uses variable expression::op defined in expression.h
      uses variable expression::ctype defined in expression.h
      uses function add_binary_op(struct entrypoint *,struct symbol *,int,pseudo_t,pseudo_t) defined in linearize.c
      uses function linearize_logical_branch(struct entrypoint *,struct expression *,struct basic_block *,struct basic_block *) defined in linearize.c
      uses function linearize_cond_branch(struct entrypoint *,struct expression *,struct basic_block *,struct basic_block *) defined in linearize.c
   function linearize_logical_branch(struct entrypoint *,struct expression *,struct basic_block *,struct basic_block *) in line 1292
      protection public
      12 lines of code
      4 parameters
      2 conditional paths
      uses function alloc_basic_block(struct entrypoint *,struct position) defined in linearize.c
      uses variable basic_block::ep defined in linearize.h
      uses variable expression::pos defined in expression.h
      uses variable expression::op defined in expression.h
      uses enumvalue SPECIAL_LOGICAL_OR defined in token.h
      uses function linearize_cond_branch(struct entrypoint *,struct expression *,struct basic_block *,struct basic_block *) defined in linearize.c
      uses variable expression::left defined in expression.h
      uses function set_activeblock(struct entrypoint *,struct basic_block *) defined in linearize.c
      uses variable expression::right defined in expression.h
      uses macro definition VOID defined in linearize.h
   function linearize_cond_branch(struct entrypoint *,struct expression *,struct basic_block *,struct basic_block *) in line 1294
      protection public
      40 lines of code
      4 parameters
      9 conditional paths
      uses variable entrypoint::active defined in linearize.h
      uses macro definition VOID defined in linearize.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_STRING defined in expression.h
      uses enumvalue EXPR_VALUE defined in expression.h
      uses function add_goto(struct entrypoint *,struct basic_block *) defined in linearize.c
      uses variable expression::value defined in expression.h
      uses enumvalue EXPR_FVALUE defined in expression.h
      uses variable expression::fvalue defined in expression.h
      uses enumvalue EXPR_LOGICAL defined in expression.h
      uses function linearize_logical_branch(struct entrypoint *,struct expression *,struct basic_block *,struct basic_block *) defined in linearize.c
      uses enumvalue EXPR_COMPARE defined in expression.h
      uses function linearize_compare(struct entrypoint *,struct expression *) defined in linearize.c
      uses function add_branch(struct entrypoint *,struct expression *,pseudo_t,struct basic_block *,struct basic_block *) defined in linearize.c
      uses enumvalue EXPR_PREOP defined in expression.h
      uses variable expression::op defined in expression.h
      uses variable expression::unop defined in expression.h
      uses function linearize_expression(struct entrypoint *,struct expression *) defined in linearize.c
   function linearize_select(struct entrypoint *,struct expression *) in line 1296
      protection public
      21 lines of code
      2 parameters
      2 conditional paths
      uses function linearize_expression(struct entrypoint *,struct expression *) defined in linearize.c
      uses variable expression::cond_true defined in expression.h
      uses variable expression::cond_false defined in expression.h
      uses variable instruction::cond defined in linearize.h
      uses variable expression::conditional defined in expression.h
      uses function alloc_typed_instruction(int,struct symbol *) defined in linearize.c
      uses enumvalue OP_SEL defined in linearize.h
      uses variable expression::ctype defined in expression.h
      uses function alloc_pseudo(struct instruction *) defined in linearize.c
      uses function add_one_insn(struct entrypoint *,struct instruction *) defined in linearize.c
   function add_join_conditional(struct entrypoint *,struct expression *,pseudo_t,pseudo_t) in line 1318
      protection public
      18 lines of code
      4 parameters
      3 conditional paths
      uses variable instruction::target defined in linearize.h
      uses macro definition VOID defined in linearize.h
      uses function alloc_typed_instruction(int,struct symbol *) defined in linearize.c
      uses enumvalue OP_PHI defined in linearize.h
      uses variable expression::ctype defined in expression.h
      uses variable instruction::phi_list defined in linearize.h
      uses function alloc_pseudo(struct instruction *) defined in linearize.c
      uses function add_one_insn(struct entrypoint *,struct instruction *) defined in linearize.c
   function linearize_short_conditional(struct entrypoint *,struct expression *,struct expression *,struct expression *) in line 1337
      protection public
      25 lines of code
      4 parameters
      2 conditional paths
      uses variable instruction::src1 defined in linearize.h
      uses variable instruction::src2 defined in linearize.h
      uses function alloc_basic_block(struct entrypoint *,struct position) defined in linearize.c
      uses variable basic_block::ep defined in linearize.h
      uses variable expression::pos defined in expression.h
      uses function type_size(struct symbol *) defined in linearize.c
      uses variable expression::ctype defined in expression.h
      uses variable entrypoint::active defined in linearize.h
      uses macro definition VOID defined in linearize.h
      uses function linearize_expression(struct entrypoint *,struct expression *) defined in linearize.c
      uses function alloc_phi(struct basic_block *,pseudo_t,int) defined in linearize.c
      uses function add_branch(struct entrypoint *,struct expression *,pseudo_t,struct basic_block *,struct basic_block *) defined in linearize.c
      uses function set_activeblock(struct entrypoint *,struct basic_block *) defined in linearize.c
      uses function add_join_conditional(struct entrypoint *,struct expression *,pseudo_t,pseudo_t) defined in linearize.c
   function linearize_conditional(struct entrypoint *,struct expression *,struct expression *,struct expression *,struct expression *) in line 1363
      protection public
      30 lines of code
      5 parameters
      2 conditional paths
      uses function type_size(struct symbol *) defined in linearize.c
      uses variable expression::ctype defined in expression.h
      uses variable basic_block::ep defined in linearize.h
      uses variable entrypoint::active defined in linearize.h
      uses macro definition VOID defined in linearize.h
      uses function alloc_basic_block(struct entrypoint *,struct position) defined in linearize.c
      uses variable expression::pos defined in expression.h
      uses function linearize_cond_branch(struct entrypoint *,struct expression *,struct basic_block *,struct basic_block *) defined in linearize.c
      uses function set_activeblock(struct entrypoint *,struct basic_block *) defined in linearize.c
      uses function linearize_expression(struct entrypoint *,struct expression *) defined in linearize.c
      uses function alloc_phi(struct basic_block *,pseudo_t,int) defined in linearize.c
      uses function add_goto(struct entrypoint *,struct basic_block *) defined in linearize.c
      uses function add_join_conditional(struct entrypoint *,struct expression *,pseudo_t,pseudo_t) defined in linearize.c
   function linearize_logical(struct entrypoint *,struct expression *) in line 1394
      protection public
      10 lines of code
      2 parameters
      2 conditional paths
      uses variable expression::pos defined in expression.h
      uses variable expression::op defined in expression.h
      uses enumvalue SPECIAL_LOGICAL_OR defined in token.h
      uses variable expression::ctype defined in expression.h
      uses function linearize_conditional(struct entrypoint *,struct expression *,struct expression *,struct expression *,struct expression *) defined in linearize.c
      uses variable expression::left defined in expression.h
      uses variable expression::right defined in expression.h
   function linearize_compare(struct entrypoint *,struct expression *) in line 1405
      protection public
      19 lines of code
      2 parameters
      1 conditional paths
      uses enumvalue OP_SET_GT defined in linearize.h
      uses enumvalue OP_SET_LT defined in linearize.h
      uses enumvalue SPECIAL_EQUAL defined in token.h
      uses enumvalue OP_SET_EQ defined in linearize.h
      uses enumvalue SPECIAL_NOTEQUAL defined in token.h
      uses enumvalue OP_SET_NE defined in linearize.h
      uses enumvalue SPECIAL_GTE defined in token.h
      uses enumvalue OP_SET_GE defined in linearize.h
      uses enumvalue SPECIAL_LTE defined in token.h
      uses enumvalue OP_SET_LE defined in linearize.h
      uses enumvalue SPECIAL_UNSIGNED_LT defined in token.h
      uses enumvalue OP_SET_B defined in linearize.h
      uses enumvalue SPECIAL_UNSIGNED_GT defined in token.h
      uses enumvalue OP_SET_A defined in linearize.h
      uses enumvalue SPECIAL_UNSIGNED_LTE defined in token.h
      uses enumvalue OP_SET_BE defined in linearize.h
      uses enumvalue SPECIAL_UNSIGNED_GTE defined in token.h
      uses enumvalue OP_SET_AE defined in linearize.h
      uses function linearize_expression(struct entrypoint *,struct expression *) defined in linearize.c
      uses variable expression::left defined in expression.h
      uses variable expression::right defined in expression.h
      uses function add_binary_op(struct entrypoint *,struct symbol *,int,pseudo_t,pseudo_t) defined in linearize.c
      uses variable expression::ctype defined in expression.h
      uses variable expression::op defined in expression.h
   function linearize_cast(struct entrypoint *,struct expression *) in line 1482
      protection public
      11 lines of code
      2 parameters
      2 conditional paths
      uses variable src defined in sm_user_data3.c
      uses variable expression::cast_expression defined in expression.h
      uses macro definition VOID defined in linearize.h
      uses function linearize_expression(struct entrypoint *,struct expression *) defined in linearize.c
      uses function cast_pseudo(struct entrypoint *,pseudo_t,struct symbol *,struct symbol *) defined in linearize.c
      uses variable expression::ctype defined in expression.h
   function linearize_position(struct entrypoint *,struct expression *,struct access_data *) in line 1494
      protection public
      9 lines of code
      3 parameters
      1 conditional paths
      uses variable expression::init_expr defined in expression.h
      uses variable access_data::pos defined in linearize.c
      uses variable access_data::offset defined in linearize.c
      uses variable access_data::source_type defined in linearize.c
      uses function base_type(struct symbol *) defined in linearize.c
      uses variable expression::ctype defined in expression.h
      uses variable access_data::result_type defined in linearize.c
      uses function linearize_initializer(struct entrypoint *,struct expression *,struct access_data *) defined in linearize.c
   function linearize_argument(struct entrypoint *,struct symbol *,int) in line 1529
      protection public
      10 lines of code
      3 parameters
      1 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses variable access_data::source_type defined in linearize.c
      uses variable access_data::result_type defined in linearize.c
      uses variable access_data::address defined in linearize.c
      uses function symbol_pseudo(struct entrypoint *,struct symbol *) defined in linearize.c
      uses function linearize_store_gen(struct entrypoint *,pseudo_t,struct access_data *) defined in linearize.c
      uses function argument_pseudo(struct entrypoint *,int) defined in linearize.c
      uses function finish_address_gen(struct entrypoint *,struct access_data *) defined in linearize.c
   function linearize_compound_statement(struct entrypoint *,struct statement *) in line 1633
      protection public
      28 lines of code
      2 parameters
      4 conditional paths
      uses variable symbol::stmt defined in struct.c
      uses variable statement::ret defined in parse.h
      uses macro definition VOID defined in linearize.h
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable statement::stmts defined in parse.h
      uses function linearize_statement(struct entrypoint *,struct statement *) defined in linearize.c
      uses variable symbol::ep defined in struct.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses function add_label(struct entrypoint *,struct symbol *) defined in linearize.c
      uses variable basic_block::ep defined in linearize.h
      uses variable instruction::bb defined in linearize.h
      uses variable basic_block::insns defined in linearize.h
      uses variable instruction::phi_list defined in linearize.h
      uses macro definition assert defined in sort.c
      uses variable pseudo::type defined in linearize.h
      uses enumvalue PSEUDO_PHI defined in linearize.h
      uses variable pseudo::def defined in linearize.h
      uses variable instruction::src1 defined in linearize.h
      uses variable instruction::target defined in linearize.h
   function linearize_inlined_call(struct entrypoint *,struct statement *) in line 1662
      protection public
      25 lines of code
      2 parameters
      3 conditional paths
      uses function alloc_instruction(int,int) defined in linearize.c
      uses enumvalue OP_INLINED_CALL defined in linearize.h
      uses variable statement::args defined in parse.h
      uses variable sym defined in smatch_type.c
      uses variable statement::declaration defined in parse.h
      uses variable symbol::ep defined in struct.c
      uses variable entrypoint::syms defined in linearize.h
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses function linearize_one_symbol(struct entrypoint *,struct symbol *) defined in linearize.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses function linearize_compound_statement(struct entrypoint *,struct statement *) defined in linearize.c
      uses variable symbol::stmt defined in struct.c
      uses function symbol_pseudo(struct entrypoint *,struct symbol *) defined in linearize.c
      uses variable statement::inline_fn defined in parse.h
      uses variable entrypoint::active defined in linearize.h
      uses variable basic_block::insns defined in linearize.h
      uses variable basic_block::pos defined in linearize.h
      uses variable statement::pos defined in parse.h
      uses function add_one_insn(struct entrypoint *,struct instruction *) defined in linearize.c
      uses variable symbol::pseudo defined in struct.c
   function linearize_context(struct entrypoint *,struct statement *) in line 1688
      protection public
      14 lines of code
      2 parameters
      2 conditional paths
      uses function alloc_instruction(int,int) defined in linearize.c
      uses enumvalue OP_CONTEXT defined in linearize.h
      uses variable statement::expression defined in parse.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_VALUE defined in expression.h
      uses variable expression::value defined in expression.h
      uses variable statement::context defined in parse.h
      uses function add_one_insn(struct entrypoint *,struct instruction *) defined in linearize.c
      uses macro definition VOID defined in linearize.h
   function linearize_range(struct entrypoint *,struct statement *) in line 1703
      protection public
      10 lines of code
      2 parameters
      1 conditional paths
      uses function alloc_instruction(int,int) defined in linearize.c
      uses enumvalue OP_RANGE defined in linearize.h
      uses function linearize_expression(struct entrypoint *,struct expression *) defined in linearize.c
      uses variable statement::range_expression defined in parse.h
      uses variable statement::range_low defined in parse.h
      uses variable statement::range_high defined in parse.h
      uses function add_one_insn(struct entrypoint *,struct instruction *) defined in linearize.c
      uses macro definition VOID defined in linearize.h
      uses function ALLOCATOR(pseudo_user,"pseudo_user") defined in linearize.c
   function ALLOCATOR(asm_rules,"asm rules") in line 1714
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function ALLOCATOR(asm_constraint,"asm constraints") in line 1715
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function add_asm_input(struct entrypoint *,struct instruction *,struct expression *,const char *,const struct ident *) in line 1717
      protection public
      11 lines of code
      5 parameters
      1 conditional paths
      uses function linearize_expression(struct entrypoint *,struct expression *) defined in linearize.c
      uses variable asm_constraint::ident defined in linearize.h
      uses variable asm_constraint::constraint defined in linearize.h
      uses variable asm_constraint::pseudo defined in linearize.h
      uses macro definition add_ptr_list defined in ptrlist.h
   function add_asm_output(struct entrypoint *,struct instruction *,struct expression *,const char *,const struct ident *) in line 1729
      protection public
      17 lines of code
      5 parameters
      2 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses function alloc_pseudo(struct instruction *) defined in linearize.c
      uses function linearize_address_gen(struct entrypoint *,struct expression *,struct access_data *) defined in linearize.c
      uses function linearize_store_gen(struct entrypoint *,pseudo_t,struct access_data *) defined in linearize.c
      uses function finish_address_gen(struct entrypoint *,struct access_data *) defined in linearize.c
      uses variable asm_constraint::ident defined in linearize.h
      uses variable asm_constraint::constraint defined in linearize.h
      uses variable asm_constraint::pseudo defined in linearize.h
      uses macro definition add_ptr_list defined in ptrlist.h
   function linearize_asm_statement(struct entrypoint *,struct statement *) in line 1747
      protection public
      68 lines of code
      2 parameters
      8 conditional paths
      uses function alloc_instruction(int,int) defined in linearize.c
      uses enumvalue OP_ASM defined in linearize.h
      uses variable statement::asm_string defined in parse.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_STRING defined in expression.h
      uses function warning(struct position,const char *,...) defined in lib.c
      uses variable statement::pos defined in parse.h
      uses macro definition VOID defined in linearize.h
      uses variable expression::string defined in expression.h
      uses variable string::data defined in token.h
      uses macro definition NULL defined in sm_implied3.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable statement::asm_inputs defined in parse.h
      uses function add_asm_input(struct entrypoint *,struct instruction *,struct expression *,const char *,const struct ident *) defined in linearize.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses function add_one_insn(struct entrypoint *,struct instruction *) defined in linearize.c
      uses variable statement::asm_outputs defined in parse.h
      uses function add_asm_output(struct entrypoint *,struct instruction *,struct expression *,const char *,const struct ident *) defined in linearize.c
   function multijmp_cmp(const void *,const void *) in line 1816
      protection public
      20 lines of code
      2 parameters
      6 conditional paths
   function sort_switch_cases(struct instruction *) in line 1837
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function sort_list(struct ptr_list **,int(*)(const void *, const void *)) defined in ptrlist.h
      uses function multijmp_cmp(const void *,const void *) defined in linearize.c
   function linearize_declaration(struct entrypoint *,struct statement *) in line 1842
      protection public
      11 lines of code
      2 parameters
      1 conditional paths
      uses variable sym defined in smatch_type.c
      uses variable symbol::stmt defined in struct.c
      uses variable statement::declaration defined in parse.h
      uses variable symbol::ep defined in struct.c
      uses variable entrypoint::syms defined in linearize.h
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses function linearize_one_symbol(struct entrypoint *,struct symbol *) defined in linearize.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses macro definition VOID defined in linearize.h
   function linearize_return(struct entrypoint *,struct statement *) in line 1854
      protection public
      23 lines of code
      2 parameters
      3 conditional paths
      uses variable statement::expression defined in parse.h
      uses function get_bound_block(struct entrypoint *,struct symbol *) defined in linearize.c
      uses variable basic_block::ep defined in linearize.h
      uses variable statement::ret_target defined in parse.h
      uses variable src defined in sm_user_data3.c
      uses function linearize_expression(struct entrypoint *,struct expression *) defined in linearize.c
      uses variable entrypoint::active defined in linearize.h
      uses variable void_pseudo defined in linearize.c
      uses variable basic_block::insns defined in linearize.h
      uses function alloc_typed_instruction(int,struct symbol *) defined in linearize.c
      uses enumvalue OP_PHI defined in linearize.h
      uses variable expression::ctype defined in expression.h
      uses variable instruction::target defined in linearize.h
      uses function alloc_pseudo(struct instruction *) defined in linearize.c
      uses variable instruction::bb defined in linearize.h
      uses function alloc_phi(struct basic_block *,pseudo_t,int) defined in linearize.c
      uses function type_size(struct symbol *) defined in linearize.c
      uses variable pseudo::ident defined in linearize.h
      uses variable instruction::phi_list defined in linearize.h
      uses function add_goto(struct entrypoint *,struct basic_block *) defined in linearize.c
      uses macro definition VOID defined in linearize.h
   function linearize_switch(struct entrypoint *,struct statement *) in line 1878
      protection public
      62 lines of code
      2 parameters
      6 conditional paths
      uses variable sym defined in smatch_type.c
      uses function alloc_basic_block(struct entrypoint *,struct position) defined in linearize.c
      uses variable basic_block::ep defined in linearize.h
      uses variable statement::pos defined in parse.h
      uses function linearize_expression(struct entrypoint *,struct expression *) defined in linearize.c
      uses variable statement::switch_expression defined in parse.h
      uses variable entrypoint::active defined in linearize.h
      uses macro definition VOID defined in linearize.h
      uses function alloc_instruction(int,int) defined in linearize.c
      uses enumvalue OP_SWITCH defined in linearize.h
      uses variable instruction::cond defined in linearize.h
      uses function add_one_insn(struct entrypoint *,struct instruction *) defined in linearize.c
      uses function finish_block(struct entrypoint *) defined in linearize.c
      uses macro definition NULL defined in sm_implied3.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable statement::switch_case defined in parse.h
      uses variable symbol::symbol_list defined in struct.c
      uses variable symbol::stmt defined in struct.c
      uses function get_bound_block(struct entrypoint *,struct symbol *) defined in linearize.c
      uses variable statement::case_expression defined in parse.h
      uses variable expression::value defined in expression.h
      uses variable statement::case_to defined in parse.h
      uses function alloc_multijmp(struct basic_block *,int,int) defined in linearize.c
      uses variable instruction::multijmp_list defined in linearize.h
      uses variable basic_block::parents defined in linearize.h
      uses variable basic_block::children defined in linearize.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses function bind_label(struct symbol *,struct basic_block *,struct position) defined in linearize.c
      uses variable statement::switch_break defined in parse.h
      uses function linearize_statement(struct entrypoint *,struct statement *) defined in linearize.c
      uses variable statement::switch_statement defined in parse.h
      uses function set_activeblock(struct entrypoint *,struct basic_block *) defined in linearize.c
      uses function sort_switch_cases(struct instruction *) defined in linearize.c
   function linearize_iterator(struct entrypoint *,struct statement *) in line 1941
      protection public
      42 lines of code
      2 parameters
      4 conditional paths
      uses variable statement::iterator_pre_statement defined in parse.h
      uses variable statement::iterator_pre_condition defined in parse.h
      uses variable statement::iterator_statement defined in parse.h
      uses variable statement::iterator_post_statement defined in parse.h
      uses variable statement::iterator_post_condition defined in parse.h
      uses variable statement::iterator_syms defined in parse.h
      uses variable basic_block::ep defined in linearize.h
      uses variable entrypoint::syms defined in linearize.h
      uses function linearize_statement(struct entrypoint *,struct statement *) defined in linearize.c
      uses function alloc_basic_block(struct entrypoint *,struct position) defined in linearize.c
      uses variable statement::pos defined in parse.h
      uses function set_activeblock(struct entrypoint *,struct basic_block *) defined in linearize.c
      uses function linearize_cond_branch(struct entrypoint *,struct expression *,struct basic_block *,struct basic_block *) defined in linearize.c
      uses function bind_label(struct symbol *,struct basic_block *,struct position) defined in linearize.c
      uses variable statement::iterator_continue defined in parse.h
      uses variable statement::iterator_break defined in parse.h
      uses function add_goto(struct entrypoint *,struct basic_block *) defined in linearize.c
      uses macro definition VOID defined in linearize.h
   function linearize_fn(struct symbol *,struct symbol *) in line 2120
      protection public
      88 lines of code
      2 parameters
      8 conditional paths
      uses function base_type(struct symbol *) defined in linearize.c
      uses variable symbol::stmt defined in struct.c
      uses macro definition NULL defined in sm_implied3.c
      uses function alloc_entrypoint(void) defined in linearize.c
      uses variable instruction::bb defined in linearize.h
      uses function alloc_basic_block(struct entrypoint *,struct position) defined in linearize.c
      uses variable sym defined in smatch_type.c
      uses variable symbol::pos defined in struct.c
      uses variable entrypoint::name defined in linearize.h
      uses variable symbol::ep defined in struct.c
      uses function set_activeblock(struct entrypoint *,struct basic_block *) defined in linearize.c
      uses function alloc_instruction(int,int) defined in linearize.c
      uses enumvalue OP_ENTRY defined in linearize.h
      uses function add_one_insn(struct entrypoint *,struct instruction *) defined in linearize.c
      uses variable entrypoint::entry defined in linearize.h
      uses variable symbol::arguments defined in struct.c
      uses variable entrypoint::syms defined in linearize.h
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses function linearize_argument(struct entrypoint *,struct symbol *,int) defined in linearize.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses function linearize_statement(struct entrypoint *,struct statement *) defined in linearize.c
      uses variable entrypoint::active defined in linearize.h
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::base_type defined in struct.c
      uses function alloc_typed_instruction(int,struct symbol *) defined in linearize.c
      uses enumvalue OP_RET defined in linearize.h
      uses function type_size(struct symbol *) defined in linearize.c
      uses function kill_unreachable_bbs(struct entrypoint *) defined in flow.c
      uses function simplify_symbol_usage(struct entrypoint *) defined in flow.c
      uses function cleanup_and_cse(struct entrypoint *) defined in cse.c
      uses function pack_basic_blocks(struct entrypoint *) defined in flow.c
      uses variable repeat_phase defined in cse.c
      uses macro definition REPEAT_CSE defined in flow.h
      uses function vrfy_flow(struct entrypoint *) defined in flow.c
      uses function clear_symbol_pseudos(struct entrypoint *) defined in linearize.c
      uses function track_pseudo_liveness(struct entrypoint *) defined in flow.h
      uses function simplify_flow(struct entrypoint *) defined in flow.c
      uses function clear_liveness(struct entrypoint *) defined in flow.h
      uses variable dbg_dead defined in lib.c
      uses function track_pseudo_death(struct entrypoint *) defined in flow.h
   function linearize_symbol(struct symbol *) in line 2209
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
      uses function base_type(struct symbol *) defined in linearize.c
      uses variable sym defined in smatch_type.c
      uses macro definition NULL defined in sm_implied3.c
      uses variable current_pos defined in linearize.c
      uses variable symbol::pos defined in struct.c
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::base_type defined in struct.c
      uses variable symbol::type defined in struct.c
      uses enumvalue SYM_FN defined in symbol.h
      uses function linearize_fn(struct symbol *,struct symbol *) defined in linearize.c
   variable access_data::address in line 838
      protection public
   variable access_data::alignment in line 840
      protection public
   variable access_data::bit_offset in line 841
      protection public
   variable access_data::bit_size in line 841
      protection public
   variable access_data::offset in line 840
      protection public
   variable access_data::origval in line 839
      protection public
   variable access_data::pos in line 841
      protection public
   variable access_data::result_type in line 836
      protection public
   variable access_data::source_type in line 837
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/linearize.h
module linearize.h
   macro definition VOID in line 46
      protection public
   enumeration pseudo_type in line 22
      protection public
   enumeration opcode in line 133
      protection public
   variable void_pseudo in line 19
      protection public
   enumvalue PSEUDO_VOID in line 23
      protection public
   enumvalue PSEUDO_REG in line 24
      protection public
   enumvalue PSEUDO_SYM in line 25
      protection public
   enumvalue PSEUDO_VAL in line 26
      protection public
   enumvalue PSEUDO_ARG in line 27
      protection public
   enumvalue PSEUDO_PHI in line 28
      protection public
   enumvalue OP_BADOP in line 134
      protection public
   enumvalue OP_ENTRY in line 137
      protection public
   enumvalue OP_TERMINATOR in line 140
      protection public
   enumvalue OP_RET in line 141
      protection public
   enumvalue OP_BR in line 142
      protection public
   enumvalue OP_SWITCH in line 143
      protection public
   enumvalue OP_INVOKE in line 144
      protection public
   enumvalue OP_COMPUTEDGOTO in line 145
      protection public
   enumvalue OP_UNWIND in line 146
      protection public
   enumvalue OP_TERMINATOR_END in line 147
      protection public
   enumvalue OP_BINARY in line 150
      protection public
   enumvalue OP_ADD in line 151
      protection public
   enumvalue OP_SUB in line 152
      protection public
   enumvalue OP_MULU in line 153
      protection public
   enumvalue OP_MULS in line 153
      protection public
   enumvalue OP_DIVU in line 154
      protection public
   enumvalue OP_DIVS in line 154
      protection public
   enumvalue OP_MODU in line 155
      protection public
   enumvalue OP_MODS in line 155
      protection public
   enumvalue OP_SHL in line 156
      protection public
   enumvalue OP_LSR in line 157
      protection public
   enumvalue OP_ASR in line 157
      protection public
   enumvalue OP_AND in line 160
      protection public
   enumvalue OP_OR in line 161
      protection public
   enumvalue OP_XOR in line 162
      protection public
   enumvalue OP_AND_BOOL in line 163
      protection public
   enumvalue OP_OR_BOOL in line 164
      protection public
   enumvalue OP_BINARY_END in line 165
      protection public
   enumvalue OP_BINCMP in line 168
      protection public
   enumvalue OP_SET_EQ in line 169
      protection public
   enumvalue OP_SET_NE in line 170
      protection public
   enumvalue OP_SET_LE in line 171
      protection public
   enumvalue OP_SET_GE in line 172
      protection public
   enumvalue OP_SET_LT in line 173
      protection public
   enumvalue OP_SET_GT in line 174
      protection public
   enumvalue OP_SET_B in line 175
      protection public
   enumvalue OP_SET_A in line 176
      protection public
   enumvalue OP_SET_BE in line 177
      protection public
   enumvalue OP_SET_AE in line 178
      protection public
   enumvalue OP_BINCMP_END in line 179
      protection public
   enumvalue OP_NOT in line 182
      protection public
   enumvalue OP_NEG in line 183
      protection public
   enumvalue OP_SEL in line 186
      protection public
   enumvalue OP_MALLOC in line 189
      protection public
   enumvalue OP_FREE in line 190
      protection public
   enumvalue OP_ALLOCA in line 191
      protection public
   enumvalue OP_LOAD in line 192
      protection public
   enumvalue OP_STORE in line 193
      protection public
   enumvalue OP_SETVAL in line 194
      protection public
   enumvalue OP_SYMADDR in line 195
      protection public
   enumvalue OP_GET_ELEMENT_PTR in line 196
      protection public
   enumvalue OP_PHI in line 199
      protection public
   enumvalue OP_PHISOURCE in line 200
      protection public
   enumvalue OP_CAST in line 201
      protection public
   enumvalue OP_SCAST in line 202
      protection public
   enumvalue OP_FPCAST in line 203
      protection public
   enumvalue OP_PTRCAST in line 204
      protection public
   enumvalue OP_INLINED_CALL in line 205
      protection public
   enumvalue OP_CALL in line 206
      protection public
   enumvalue OP_VANEXT in line 207
      protection public
   enumvalue OP_VAARG in line 208
      protection public
   enumvalue OP_SLICE in line 209
      protection public
   enumvalue OP_SNOP in line 210
      protection public
   enumvalue OP_LNOP in line 211
      protection public
   enumvalue OP_NOP in line 212
      protection public
   enumvalue OP_DEATHNOTE in line 213
      protection public
   enumvalue OP_ASM in line 214
      protection public
   enumvalue OP_CONTEXT in line 217
      protection public
   enumvalue OP_RANGE in line 218
      protection public
   enumvalue OP_COPY in line 221
      protection public
   function DECLARE_PTR_LIST(pseudo_ptr_list,pseudo_t) in line 11
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function DECLARE_ALLOCATOR(pseudo_user) in line 18
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function DECLARE_PTR_LIST(pseudo_user_list,struct pseudo_user) in line 19
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function DECLARE_ALLOCATOR(asm_constraint) in line 59
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function DECLARE_PTR_LIST(asm_constraint_list,struct asm_constraint) in line 60
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function DECLARE_ALLOCATOR(asm_rules) in line 68
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function is_branch_goto(struct instruction *) in line 239
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable instruction::opcode defined in linearize.h
      uses enumvalue OP_BR defined in linearize.h
      uses variable instruction::bb_true defined in linearize.h
      uses variable instruction::bb_false defined in linearize.h
   function add_bb(struct basic_block_list **,struct basic_block *) in line 244
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses macro definition add_ptr_list defined in ptrlist.h
   function add_instruction(struct instruction_list **,struct instruction *) in line 249
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses macro definition add_ptr_list defined in ptrlist.h
      uses variable pseudo_user::insn defined in linearize.h
   function add_multijmp(struct multijmp_list **,struct multijmp *) in line 254
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses macro definition add_ptr_list defined in ptrlist.h
   function add_pseudo(struct pseudo_list **,pseudo_t) in line 259
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses macro definition add_ptr_list defined in ptrlist.h
   function remove_pseudo(struct pseudo_list **,pseudo_t) in line 264
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function delete_ptr_list_entry(struct ptr_list **,void *,int) defined in ptrlist.c
   function bb_terminated(struct basic_block *) in line 269
      protection public
      9 lines of code
      1 parameters
      2 conditional paths
      uses variable pseudo_user::insn defined in linearize.h
      uses variable instruction::bb defined in linearize.h
      uses variable basic_block::insns defined in linearize.h
      uses variable instruction::opcode defined in linearize.h
      uses enumvalue OP_TERMINATOR defined in linearize.h
      uses enumvalue OP_TERMINATOR_END defined in linearize.h
   function bb_reachable(struct basic_block *) in line 279
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable instruction::bb defined in linearize.h
      uses macro definition NULL defined in sm_implied3.c
   function add_pseudo_ptr(pseudo_t *,struct pseudo_ptr_list **) in line 284
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses macro definition add_ptr_list defined in ptrlist.h
      uses variable ptr defined in sm_null_deref2.c
   function add_pseudo_user_ptr(struct pseudo_user *,struct pseudo_user_list **) in line 289
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses macro definition add_ptr_list defined in ptrlist.h
   function has_use_list(pseudo_t) in line 294
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable p defined in cond_expr2.c
      uses enumvalue PSEUDO_VOID defined in linearize.h
      uses enumvalue PSEUDO_VAL defined in linearize.h
   function alloc_pseudo_user(struct instruction *,pseudo_t *) in line 299
      protection public
      7 lines of code
      2 parameters
      1 conditional paths
      uses variable pseudo_user::userp defined in linearize.h
      uses variable pseudo_user::insn defined in linearize.h
   function use_pseudo(struct instruction *,pseudo_t,pseudo_t *) in line 307
      protection public
      6 lines of code
      3 parameters
      2 conditional paths
      uses variable p defined in cond_expr2.c
      uses function has_use_list(pseudo_t) defined in linearize.h
      uses function add_pseudo_user_ptr(struct pseudo_user *,struct pseudo_user_list **) defined in linearize.h
      uses function alloc_pseudo_user(struct instruction *,pseudo_t *) defined in linearize.h
      uses variable pseudo_user::insn defined in linearize.h
   function remove_bb_from_list(struct basic_block_list **,struct basic_block *,int) in line 314
      protection public
      4 lines of code
      3 parameters
      1 conditional paths
      uses function delete_ptr_list_entry(struct ptr_list **,void *,int) defined in ptrlist.c
   function replace_bb_in_list(struct basic_block_list **,struct basic_block *,struct basic_block *,int) in line 319
      protection public
      5 lines of code
      4 parameters
      1 conditional paths
      uses function replace_ptr_list_entry(struct ptr_list **,void *,void *,int) defined in ptrlist.c
   function insert_select(struct basic_block *,struct instruction *,struct instruction *,pseudo_t,pseudo_t) in line 334
      protection public
      25 lines of code
      5 parameters
      1 conditional paths
      uses variable instruction::bb defined in linearize.h
      uses variable basic_block::insns defined in linearize.h
      uses enumvalue OP_SEL defined in linearize.h
      uses variable instruction::size defined in linearize.h
      uses macro definition assert defined in sort.c
      uses variable instruction::cond defined in linearize.h
      uses function use_pseudo(struct instruction *,pseudo_t,pseudo_t *) defined in linearize.h
      uses variable instruction::src1 defined in linearize.h
      uses variable instruction::target defined in linearize.h
      uses variable pseudo::def defined in linearize.h
      uses variable instruction::src2 defined in linearize.h
      uses variable instruction::src3 defined in linearize.h
      uses function add_instruction(struct instruction_list **,struct instruction *) defined in linearize.h
   function insert_branch(struct basic_block *,struct instruction *,struct basic_block *) in line 335
      protection public
      24 lines of code
      3 parameters
      2 conditional paths
      uses variable basic_block::insns defined in linearize.h
      uses macro definition assert defined in sort.c
      uses enumvalue OP_BR defined in linearize.h
      uses variable instruction::bb defined in linearize.h
      uses variable instruction::bb_true defined in linearize.h
      uses function add_instruction(struct instruction_list **,struct instruction *) defined in linearize.h
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable basic_block::children defined in linearize.h
      uses macro definition NULL defined in sm_implied3.c
      uses macro definition DELETE_CURRENT_PTR defined in ptrlist.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses macro definition PACK_PTR_LIST defined in ptrlist.h
   function alloc_phi(struct basic_block *,pseudo_t,int) in line 337
      protection public
      16 lines of code
      3 parameters
      1 conditional paths
      uses enumvalue OP_PHISOURCE defined in linearize.h
      uses variable instruction::size defined in linearize.h
      uses variable pseudo::type defined in linearize.h
      uses enumvalue PSEUDO_PHI defined in linearize.h
      uses variable pseudo::nr defined in linearize.h
      uses variable pseudo::def defined in linearize.h
      uses function use_pseudo(struct instruction *,pseudo_t,pseudo_t *) defined in linearize.h
      uses function add_instruction(struct instruction_list **,struct instruction *) defined in linearize.h
      uses variable basic_block::insns defined in linearize.h
   function alloc_pseudo(struct instruction *) in line 338
      protection public
      9 lines of code
      1 parameters
      1 conditional paths
      uses variable pseudo::type defined in linearize.h
      uses enumvalue PSEUDO_REG defined in linearize.h
      uses variable pseudo::nr defined in linearize.h
      uses variable pseudo::def defined in linearize.h
   function value_pseudo(long long) in line 339
      protection public
      21 lines of code
      1 parameters
      2 conditional paths
      uses macro definition MAX_VAL_HASH defined in linearize.c
      uses function hash(struct hashtable *,void *) defined in hashtable.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable pseudo::value defined in linearize.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses variable pseudo::type defined in linearize.h
      uses enumvalue PSEUDO_VAL defined in linearize.h
      uses function add_pseudo(struct pseudo_list **,pseudo_t) defined in linearize.h
   function linearize_symbol(struct symbol *) in line 341
      protection public
      14 lines of code
      1 parameters
      4 conditional paths
      uses variable sym defined in smatch_type.c
      uses macro definition NULL defined in sm_implied3.c
      uses variable symbol::pos defined in struct.c
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::base_type defined in struct.c
      uses variable symbol::type defined in struct.c
      uses enumvalue SYM_FN defined in symbol.h
   function unssa(struct entrypoint *) in line 342
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable basic_block::ep defined in linearize.h
      uses variable entrypoint::bbs defined in linearize.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function show_entry(struct entrypoint *) in line 343
      protection public
      35 lines of code
      1 parameters
      7 conditional paths
      uses variable sym defined in smatch_type.c
      uses function printf(char *,...) defined in test-be.c
      uses function show_ident(const struct ident *) defined in token.h
      uses variable basic_block::ep defined in linearize.h
      uses variable entrypoint::name defined in linearize.h
      uses variable symbol::ident defined in struct.c
      uses variable verbose defined in lib.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable entrypoint::syms defined in linearize.h
      uses variable symbol::pseudo defined in struct.c
      uses variable pseudo::users defined in linearize.h
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::modifiers defined in struct.c
      uses macro definition MOD_EXTERN defined in symbol.h
      uses macro definition MOD_STATIC defined in symbol.h
      uses macro definition MOD_ADDRESSABLE defined in symbol.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses variable entrypoint::bbs defined in linearize.h
      uses variable basic_block::parents defined in linearize.h
      uses variable basic_block::children defined in linearize.h
      uses variable basic_block::insns defined in linearize.h
      uses function show_bb(struct basic_block *) defined in linearize.c
   function show_pseudo(pseudo_t) in line 344
      protection public
      66 lines of code
      1 parameters
      16 conditional paths
      uses variable buf defined in sm_fake_assignment.c
      uses macro definition VOID defined in linearize.h
      uses variable pseudo::type defined in linearize.h
      uses enumvalue PSEUDO_SYM defined in linearize.h
      uses variable sym defined in smatch_type.c
      uses variable pseudo::sym defined in linearize.h
      uses variable symbol::bb_target defined in struct.c
      uses function snprintf(char *,int,char *,char *) defined in sm_overflow6.c
      uses variable symbol::ident defined in struct.c
      uses function show_ident(const struct ident *) defined in token.h
      uses variable symbol::initializer defined in struct.c
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_VALUE defined in expression.h
      uses variable expression::value defined in expression.h
      uses enumvalue EXPR_STRING defined in expression.h
      uses function show_string(const struct string *) defined in token.h
      uses variable expression::string defined in expression.h
      uses enumvalue PSEUDO_REG defined in linearize.h
      uses variable pseudo::nr defined in linearize.h
      uses variable pseudo::ident defined in linearize.h
      uses function sprintf(char *,char *,char *) defined in sm_overflow6.c
      uses enumvalue PSEUDO_VAL defined in linearize.h
      uses variable pseudo::value defined in linearize.h
      uses enumvalue PSEUDO_ARG defined in linearize.h
      uses enumvalue PSEUDO_PHI defined in linearize.h
   function show_bb(struct basic_block *) in line 345
      protection public
      56 lines of code
      1 parameters
      8 conditional paths
      uses function printf(char *,...) defined in test-be.c
      uses variable instruction::bb defined in linearize.h
      uses variable verbose defined in lib.c
      uses function stream_name(int) defined in token.h
      uses variable basic_block::pos defined in linearize.h
      uses variable position::stream defined in lib.h
      uses variable position::line defined in lib.h
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable basic_block::needs defined in linearize.h
      uses variable pseudo::def defined in linearize.h
      uses variable instruction::opcode defined in linearize.h
      uses enumvalue OP_PHI defined in linearize.h
      uses function show_pseudo(pseudo_t) defined in linearize.c
      uses variable instruction::phi_list defined in linearize.h
      uses macro definition VOID defined in linearize.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses variable basic_block::defines defined in linearize.h
      uses variable basic_block::parents defined in linearize.h
      uses variable position::pos defined in lib.h
      uses variable basic_block::children defined in linearize.h
      uses variable basic_block::insns defined in linearize.h
      uses function show_instruction(struct instruction *) defined in linearize.c
      uses function bb_terminated(struct basic_block *) defined in linearize.h
   function show_instruction(struct instruction *) in line 346
      protection public
      196 lines of code
      1 parameters
      51 conditional paths
      uses variable buf defined in sm_fake_assignment.c
      uses function sprintf(char *,char *,char *) defined in sm_overflow6.c
      uses macro definition ARRAY_SIZE defined in lib.h
      uses function op(void) defined in loop2.c
      uses function memset(void *,int,int) defined in check_byte_count-ice.c
      uses enumvalue OP_RET defined in linearize.h
      uses macro definition VOID defined in linearize.h
      uses function show_pseudo(pseudo_t) defined in linearize.c
      uses enumvalue OP_BR defined in linearize.h
      uses enumvalue OP_SYMADDR defined in linearize.h
      uses variable sym defined in smatch_type.c
      uses variable symbol::bb_target defined in struct.c
      uses variable symbol::ident defined in struct.c
      uses function show_ident(const struct ident *) defined in token.h
      uses enumvalue OP_SETVAL defined in linearize.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_VALUE defined in expression.h
      uses variable expression::value defined in expression.h
      uses enumvalue EXPR_FVALUE defined in expression.h
      uses variable expression::fvalue defined in expression.h
      uses enumvalue EXPR_STRING defined in expression.h
      uses function show_string(const struct string *) defined in token.h
      uses variable expression::string defined in expression.h
      uses enumvalue EXPR_SYMBOL defined in expression.h
      uses variable expression::symbol defined in expression.h
      uses enumvalue EXPR_LABEL defined in expression.h
      uses enumvalue OP_SWITCH defined in linearize.h
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable multijmp::begin defined in linearize.h
      uses variable multijmp::end defined in linearize.h
      uses variable multijmp::target defined in linearize.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses enumvalue OP_COMPUTEDGOTO defined in linearize.h
      uses enumvalue OP_PHISOURCE defined in linearize.h
      uses variable instruction::target defined in linearize.h
      uses enumvalue OP_PHI defined in linearize.h
      uses enumvalue OP_LOAD defined in linearize.h
      uses enumvalue OP_LNOP defined in linearize.h
      uses enumvalue OP_STORE defined in linearize.h
      uses enumvalue OP_SNOP defined in linearize.h
      uses enumvalue OP_INLINED_CALL defined in linearize.h
      uses enumvalue OP_CALL defined in linearize.h
      uses enumvalue OP_CAST defined in linearize.h
      uses enumvalue OP_SCAST defined in linearize.h
      uses enumvalue OP_FPCAST defined in linearize.h
      uses enumvalue OP_PTRCAST defined in linearize.h
      uses enumvalue OP_BINARY defined in linearize.h
      uses enumvalue OP_BINARY_END defined in linearize.h
      uses enumvalue OP_BINCMP defined in linearize.h
      uses enumvalue OP_BINCMP_END defined in linearize.h
      uses enumvalue OP_SEL defined in linearize.h
      uses enumvalue OP_SLICE defined in linearize.h
      uses enumvalue OP_NOT defined in linearize.h
      uses enumvalue OP_NEG defined in linearize.h
      uses enumvalue OP_CONTEXT defined in linearize.h
      uses enumvalue OP_RANGE defined in linearize.h
      uses enumvalue OP_NOP defined in linearize.h
      uses enumvalue OP_DEATHNOTE defined in linearize.h
      uses enumvalue OP_ASM defined in linearize.h
      uses enumvalue OP_COPY defined in linearize.h
      uses function die(const char *,...) defined in lib.c
   variable pseudo_user::insn in line 14
      protection public
   variable pseudo_user::userp in line 15
      protection public
   variable pseudo::@71 in line 40
      protection public
   variable pseudo::def in line 38
      protection public
   variable pseudo::ident in line 35
      protection public
   variable pseudo::nr in line 32
      protection public
   variable pseudo::priv in line 41
      protection public
   variable pseudo::sym in line 37
      protection public
   variable pseudo::type in line 32
      protection public
   variable pseudo::users in line 34
      protection public
   variable pseudo::value in line 39
      protection public
   variable pseudo::@70::def in line 38
      protection public
   variable pseudo::@70::sym in line 37
      protection public
   variable pseudo::@70::value in line 39
      protection public
   variable multijmp::begin in line 50
      protection public
   variable multijmp::end in line 50
      protection public
   variable multijmp::target in line 49
      protection public
   variable asm_constraint::constraint in line 55
      protection public
   variable asm_constraint::ident in line 56
      protection public
   variable asm_constraint::pseudo in line 54
      protection public
   variable asm_rules::clobbers in line 65
      protection public
   variable asm_rules::inputs in line 63
      protection public
   variable asm_rules::outputs in line 64
      protection public
   variable instruction::@73 in line 79
      protection public
   variable instruction::@75 in line 130
      protection public
   variable instruction::arg_list in line 82
      protection public
   variable instruction::arguments in line 118
      protection public
   variable instruction::asm_rules in line 128
      protection public
   variable instruction::base in line 106
      protection public
   variable instruction::bb in line 73
      protection public
   variable instruction::bb_false in line 85
      protection public
   variable instruction::bb_true in line 85
      protection public
   variable instruction::begin in line 110
      protection public
   variable instruction::check in line 123
      protection public
   variable instruction::cond in line 78
      protection public
   variable instruction::context_expr in line 124
      protection public
   variable instruction::end in line 110
      protection public
   variable instruction::fntype in line 119
      protection public
   variable instruction::from in line 107
      protection public
   variable instruction::func in line 117
      protection public
   variable instruction::increment in line 122
      protection public
   variable instruction::len in line 107
      protection public
   variable instruction::multijmp_list in line 88
      protection public
   variable instruction::offset in line 100
      protection public
   variable instruction::opcode in line 71
      protection public
   variable instruction::orig_type in line 99
      protection public
   variable instruction::phi_list in line 91
      protection public
   variable instruction::phi_src in line 94
      protection public
   variable instruction::phi_users in line 95
      protection public
   variable instruction::pos in line 73
      protection public
   variable instruction::size in line 72
      protection public
   variable instruction::src in line 98
      protection public
   variable instruction::src1 in line 103
      protection public
   variable instruction::src2 in line 103
      protection public
   variable instruction::src3 in line 103
      protection public
   variable instruction::string in line 127
      protection public
   variable instruction::symbol in line 113
      protection public
   variable instruction::target in line 77
      protection public
   variable instruction::type in line 75
      protection public
   variable instruction::val in line 114
      protection public
   variable instruction::@72::cond in line 78
      protection public
   variable instruction::@72::target in line 77
      protection public
   variable instruction::@74::@101 in line 129
      protection public
   variable instruction::@74::@77 in line 83
      protection public
   variable instruction::@74::@79 in line 86
      protection public
   variable instruction::@74::@81 in line 89
      protection public
   variable instruction::@74::@83 in line 92
      protection public
   variable instruction::@74::@85 in line 96
      protection public
   variable instruction::@74::@87 in line 101
      protection public
   variable instruction::@74::@89 in line 104
      protection public
   variable instruction::@74::@91 in line 108
      protection public
   variable instruction::@74::@93 in line 111
      protection public
   variable instruction::@74::@95 in line 115
      protection public
   variable instruction::@74::@97 in line 120
      protection public
   variable instruction::@74::@99 in line 125
      protection public
   variable instruction::@74::@76::arg_list in line 82
      protection public
   variable instruction::@74::@78::bb_false in line 85
      protection public
   variable instruction::@74::@78::bb_true in line 85
      protection public
   variable instruction::@74::@80::multijmp_list in line 88
      protection public
   variable instruction::@74::@82::phi_list in line 91
      protection public
   variable instruction::@74::@84::phi_src in line 94
      protection public
   variable instruction::@74::@84::phi_users in line 95
      protection public
   variable instruction::@74::@86::offset in line 100
      protection public
   variable instruction::@74::@86::orig_type in line 99
      protection public
   variable instruction::@74::@86::src in line 98
      protection public
   variable instruction::@74::@88::src1 in line 103
      protection public
   variable instruction::@74::@88::src2 in line 103
      protection public
   variable instruction::@74::@88::src3 in line 103
      protection public
   variable instruction::@74::@90::base in line 106
      protection public
   variable instruction::@74::@90::from in line 107
      protection public
   variable instruction::@74::@90::len in line 107
      protection public
   variable instruction::@74::@92::begin in line 110
      protection public
   variable instruction::@74::@92::end in line 110
      protection public
   variable instruction::@74::@94::symbol in line 113
      protection public
   variable instruction::@74::@94::val in line 114
      protection public
   variable instruction::@74::@96::arguments in line 118
      protection public
   variable instruction::@74::@96::fntype in line 119
      protection public
   variable instruction::@74::@96::func in line 117
      protection public
   variable instruction::@74::@98::check in line 123
      protection public
   variable instruction::@74::@98::context_expr in line 124
      protection public
   variable instruction::@74::@98::increment in line 122
      protection public
   variable instruction::@74::@100::asm_rules in line 128
      protection public
   variable instruction::@74::@100::string in line 127
      protection public
   variable basic_block::children in line 233
      protection public
   variable basic_block::context in line 230
      protection public
   variable basic_block::defines in line 235
      protection public
   variable basic_block::ep in line 231
      protection public
   variable basic_block::generation in line 229
      protection public
   variable basic_block::insns in line 234
      protection public
   variable basic_block::needs in line 235
      protection public
   variable basic_block::parents in line 232
      protection public
   variable basic_block::pos in line 128
      protection public
   variable basic_block::priv in line 236
      protection public
   variable entrypoint::accesses in line 328
      protection public
   variable entrypoint::active in line 330
      protection public
   variable entrypoint::bbs in line 329
      protection public
   variable entrypoint::entry in line 331
      protection public
   variable entrypoint::name in line 326
      protection public
   variable entrypoint::syms in line 327
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/liveness.c
module liveness.c
   macro definition USES in line 55
      protection public
   macro definition DEFINES in line 56
      protection public
   variable liveness_changed in line 172
      protection public
   variable live_list in line 304
      protection public
   variable dead_list in line 305
      protection public
   function phi_defines(struct instruction *,pseudo_t,void(*)(struct basic_block *, struct instruction *, pseudo_t)) in line 15
      protection public
      18 lines of code
      3 parameters
      4 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable instruction::phi_list defined in linearize.h
      uses macro definition VOID defined in linearize.h
      uses variable pseudo::def defined in linearize.h
      uses variable instruction::bb defined in linearize.h
      uses variable instruction::opcode defined in linearize.h
      uses enumvalue OP_PHI defined in linearize.h
      uses variable instruction::target defined in linearize.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function asm_liveness(struct basic_block *,struct instruction *,void(*)(struct basic_block *, struct instruction *, pseudo_t),void(*)(struct basic_block *, struct instruction *, pseudo_t)) in line 34
      protection public
      14 lines of code
      4 parameters
      1 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function track_instruction_usage(struct basic_block *,struct instruction *,void(*)(struct basic_block *, struct instruction *, pseudo_t),void(*)(struct basic_block *, struct instruction *, pseudo_t)) in line 49
      protection public
      112 lines of code
      4 parameters
      38 conditional paths
      uses variable asm_constraint::pseudo defined in linearize.h
      uses enumvalue OP_RET defined in linearize.h
      uses macro definition USES defined in liveness.c
      uses variable src defined in sm_user_data3.c
      uses enumvalue OP_BR defined in linearize.h
      uses enumvalue OP_SWITCH defined in linearize.h
      uses enumvalue OP_COMPUTEDGOTO defined in linearize.h
      uses enumvalue OP_BINARY defined in linearize.h
      uses enumvalue OP_BINARY_END defined in linearize.h
      uses enumvalue OP_BINCMP defined in linearize.h
      uses enumvalue OP_BINCMP_END defined in linearize.h
      uses macro definition DEFINES defined in liveness.c
      uses enumvalue OP_NOT defined in linearize.h
      uses enumvalue OP_NEG defined in linearize.h
      uses enumvalue OP_SEL defined in linearize.h
      uses enumvalue OP_LOAD defined in linearize.h
      uses enumvalue OP_STORE defined in linearize.h
      uses enumvalue OP_SETVAL defined in linearize.h
      uses enumvalue OP_SYMADDR defined in linearize.h
      uses enumvalue OP_PHI defined in linearize.h
      uses function phi_defines(struct instruction *,pseudo_t,void(*)(struct basic_block *, struct instruction *, pseudo_t)) defined in liveness.c
      uses enumvalue OP_PHISOURCE defined in linearize.h
      uses enumvalue OP_CAST defined in linearize.h
      uses enumvalue OP_SCAST defined in linearize.h
      uses enumvalue OP_FPCAST defined in linearize.h
      uses enumvalue OP_PTRCAST defined in linearize.h
      uses enumvalue OP_CALL defined in linearize.h
      uses macro definition func defined in preprocessor1.c
      uses macro definition VOID defined in linearize.h
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses enumvalue OP_SLICE defined in linearize.h
      uses enumvalue OP_ASM defined in linearize.h
      uses function asm_liveness(struct basic_block *,struct instruction *,void(*)(struct basic_block *, struct instruction *, pseudo_t),void(*)(struct basic_block *, struct instruction *, pseudo_t)) defined in liveness.c
      uses enumvalue OP_RANGE defined in linearize.h
      uses enumvalue OP_BADOP defined in linearize.h
      uses enumvalue OP_INVOKE defined in linearize.h
      uses enumvalue OP_UNWIND defined in linearize.h
      uses enumvalue OP_MALLOC defined in linearize.h
      uses enumvalue OP_FREE defined in linearize.h
      uses enumvalue OP_ALLOCA defined in linearize.h
      uses enumvalue OP_GET_ELEMENT_PTR defined in linearize.h
      uses enumvalue OP_VANEXT defined in linearize.h
      uses enumvalue OP_VAARG defined in linearize.h
      uses enumvalue OP_SNOP defined in linearize.h
      uses enumvalue OP_LNOP defined in linearize.h
      uses enumvalue OP_NOP defined in linearize.h
      uses enumvalue OP_CONTEXT defined in linearize.h
   function pseudo_in_list(struct pseudo_list *,pseudo_t) in line 162
      protection public
      9 lines of code
      2 parameters
      2 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function add_pseudo_exclusive(struct pseudo_list **,pseudo_t) in line 174
      protection public
      7 lines of code
      2 parameters
      2 conditional paths
      uses function pseudo_in_list(struct pseudo_list *,pseudo_t) defined in liveness.c
      uses variable liveness_changed defined in liveness.c
   function trackable_pseudo(pseudo_t) in line 182
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable pseudo::type defined in linearize.h
      uses enumvalue PSEUDO_REG defined in linearize.h
      uses enumvalue PSEUDO_ARG defined in linearize.h
   function insn_uses(struct basic_block *,struct instruction *,pseudo_t) in line 187
      protection public
      8 lines of code
      3 parameters
      3 conditional paths
      uses function trackable_pseudo(pseudo_t) defined in liveness.c
      uses variable pseudo::def defined in linearize.h
      uses variable pseudo::type defined in linearize.h
      uses enumvalue PSEUDO_REG defined in linearize.h
      uses variable instruction::bb defined in linearize.h
      uses variable instruction::opcode defined in linearize.h
      uses enumvalue OP_PHI defined in linearize.h
      uses function add_pseudo_exclusive(struct pseudo_list **,pseudo_t) defined in liveness.c
      uses variable basic_block::needs defined in linearize.h
   function insn_defines(struct basic_block *,struct instruction *,pseudo_t) in line 196
      protection public
      5 lines of code
      3 parameters
      1 conditional paths
      uses macro definition assert defined in sort.c
      uses function trackable_pseudo(pseudo_t) defined in liveness.c
      uses variable instruction::bb defined in linearize.h
      uses variable basic_block::defines defined in linearize.h
   function track_bb_liveness(struct basic_block *) in line 202
      protection public
      13 lines of code
      1 parameters
      2 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable instruction::bb defined in linearize.h
      uses variable basic_block::needs defined in linearize.h
      uses variable basic_block::parents defined in linearize.h
      uses function pseudo_in_list(struct pseudo_list *,pseudo_t) defined in liveness.c
      uses variable basic_block::defines defined in linearize.h
      uses function add_pseudo_exclusive(struct pseudo_list **,pseudo_t) defined in liveness.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function clear_liveness(struct entrypoint *) in line 220
      protection public
      9 lines of code
      1 parameters
      1 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable basic_block::ep defined in linearize.h
      uses variable entrypoint::bbs defined in linearize.h
      uses macro definition free_ptr_list defined in ptrlist.h
      uses variable basic_block::needs defined in linearize.h
      uses variable basic_block::defines defined in linearize.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function track_pseudo_liveness(struct entrypoint *) in line 234
      protection public
      39 lines of code
      1 parameters
      5 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable basic_block::ep defined in linearize.h
      uses variable entrypoint::bbs defined in linearize.h
      uses variable instruction::bb defined in linearize.h
      uses variable basic_block::insns defined in linearize.h
      uses macro definition assert defined in sort.c
      uses function track_instruction_usage(struct basic_block *,struct instruction *,void(*)(struct basic_block *, struct instruction *, pseudo_t),void(*)(struct basic_block *, struct instruction *, pseudo_t)) defined in liveness.c
      uses function insn_defines(struct basic_block *,struct instruction *,pseudo_t) defined in liveness.c
      uses function insn_uses(struct basic_block *,struct instruction *,pseudo_t) defined in liveness.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses variable liveness_changed defined in liveness.c
      uses macro definition FOR_EACH_PTR_REVERSE defined in ptrlist.h
      uses function track_bb_liveness(struct basic_block *) defined in liveness.c
      uses macro definition END_FOR_EACH_PTR_REVERSE defined in ptrlist.h
      uses variable basic_block::defines defined in linearize.h
      uses variable basic_block::children defined in linearize.h
      uses function pseudo_in_list(struct pseudo_list *,pseudo_t) defined in liveness.c
      uses variable basic_block::needs defined in linearize.h
      uses macro definition DELETE_CURRENT_PTR defined in ptrlist.h
      uses macro definition PACK_PTR_LIST defined in ptrlist.h
   function merge_pseudo_list(struct pseudo_list *,struct pseudo_list **) in line 274
      protection public
      7 lines of code
      2 parameters
      1 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable src defined in sm_user_data3.c
      uses function add_pseudo_exclusive(struct pseudo_list **,pseudo_t) defined in liveness.c
      uses variable dest defined in sm_user_data2.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function track_phi_uses(struct instruction *) in line 282
      protection public
      12 lines of code
      1 parameters
      2 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses macro definition VOID defined in linearize.h
      uses variable pseudo::def defined in linearize.h
      uses macro definition assert defined in sort.c
      uses variable instruction::opcode defined in linearize.h
      uses enumvalue OP_PHISOURCE defined in linearize.h
      uses macro definition add_ptr_list defined in ptrlist.h
      uses variable instruction::phi_users defined in linearize.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function track_bb_phi_uses(struct basic_block *) in line 295
      protection public
      8 lines of code
      1 parameters
      2 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable instruction::bb defined in linearize.h
      uses variable basic_block::insns defined in linearize.h
      uses enumvalue OP_PHI defined in linearize.h
      uses function track_phi_uses(struct instruction *) defined in liveness.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function death_def(struct basic_block *,struct instruction *,pseudo_t) in line 307
      protection public
      3 lines of code
      3 parameters
      1 conditional paths
   function death_use(struct basic_block *,struct instruction *,pseudo_t) in line 311
      protection public
      7 lines of code
      3 parameters
      2 conditional paths
      uses function trackable_pseudo(pseudo_t) defined in liveness.c
      uses function pseudo_in_list(struct pseudo_list *,pseudo_t) defined in liveness.c
      uses variable live_list defined in liveness.c
      uses variable dead_list defined in liveness.c
   function track_pseudo_death_bb(struct basic_block *) in line 319
      protection public
      31 lines of code
      1 parameters
      3 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable instruction::bb defined in linearize.h
      uses variable basic_block::children defined in linearize.h
      uses function merge_pseudo_list(struct pseudo_list *,struct pseudo_list **) defined in liveness.c
      uses variable basic_block::needs defined in linearize.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses variable live_list defined in liveness.c
      uses macro definition FOR_EACH_PTR_REVERSE defined in ptrlist.h
      uses variable basic_block::insns defined in linearize.h
      uses variable dead_list defined in liveness.c
      uses function track_instruction_usage(struct basic_block *,struct instruction *,void(*)(struct basic_block *, struct instruction *, pseudo_t),void(*)(struct basic_block *, struct instruction *, pseudo_t)) defined in liveness.c
      uses function death_def(struct basic_block *,struct instruction *,pseudo_t) defined in liveness.c
      uses function death_use(struct basic_block *,struct instruction *,pseudo_t) defined in liveness.c
      uses variable instruction::opcode defined in linearize.h
      uses enumvalue OP_DEATHNOTE defined in linearize.h
      uses variable instruction::target defined in linearize.h
      uses macro definition INSERT_CURRENT defined in ptrlist.h
      uses macro definition free_ptr_list defined in ptrlist.h
      uses macro definition END_FOR_EACH_PTR_REVERSE defined in ptrlist.h
   function track_pseudo_death(struct entrypoint *) in line 351
      protection public
      12 lines of code
      1 parameters
      1 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable basic_block::ep defined in linearize.h
      uses variable entrypoint::bbs defined in linearize.h
      uses function track_bb_phi_uses(struct basic_block *) defined in liveness.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses function track_pseudo_death_bb(struct basic_block *) defined in liveness.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/macro_table.c
module macro_table.c
   variable macro_table in line 32
      protection public
   function DEFINE_HASHTABLE_INSERT(do_insert_macro,struct position,char) in line 34
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function DEFINE_HASHTABLE_SEARCH(do_search_macro,struct position,char) in line 35
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function position_hash(void *) in line 37
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses variable position::pos defined in lib.h
   function equalkeys(void *,void *) in line 44
      protection public
      8 lines of code
      2 parameters
      1 conditional paths
      uses variable position::line defined in lib.h
      uses variable position::pos defined in lib.h
      uses variable position::stream defined in lib.h
   function store_macro_pos(struct token *) in line 53
      protection public
      10 lines of code
      1 parameters
      1 conditional paths
      uses variable macro_table defined in macro_table.c
      uses function create_hashtable(unsigned int,unsigned int(*)(void *),int(*)(void *, void *)) defined in hashtable.c
      uses function position_hash(void *) defined in macro_table.c
      uses function equalkeys(void *,void *) defined in macro_table.c
      uses function get_macro_name(struct position) defined in macro_table.c
      uses variable token::pos defined in token.h
      uses variable token::ident defined in token.h
      uses variable ident::name defined in token.h
   function get_macro_name(struct position) in line 64
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable macro_table defined in macro_table.c
      uses variable position::pos defined in lib.h
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/memops.c
module memops.c
   function find_dominating_parents(pseudo_t,struct instruction *,struct basic_block *,unsigned long,struct pseudo_list **,int,int) in line 19
      protection public
      47 lines of code
      7 parameters
      11 conditional paths
      uses variable basic_block::parents defined in linearize.h
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable one defined in sm_equiv1.c
      uses macro definition FOR_EACH_PTR_REVERSE defined in ptrlist.h
      uses variable basic_block::insns defined in linearize.h
      uses function dominates(pseudo_t,struct instruction *,struct instruction *,int) defined in flow.c
      uses enumvalue OP_LOAD defined in linearize.h
      uses macro definition END_FOR_EACH_PTR_REVERSE defined in ptrlist.h
      uses variable basic_block::generation defined in linearize.h
      uses function alloc_phi(struct basic_block *,pseudo_t,int) defined in linearize.c
      uses variable pseudo::ident defined in linearize.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function address_taken(pseudo_t) in line 67
      protection public
      10 lines of code
      1 parameters
      2 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable pseudo::users defined in linearize.h
      uses variable pseudo_user::insn defined in linearize.h
      uses enumvalue OP_LOAD defined in linearize.h
      uses enumvalue OP_STORE defined in linearize.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function local_pseudo(pseudo_t) in line 78
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses variable pseudo::type defined in linearize.h
      uses enumvalue PSEUDO_SYM defined in linearize.h
      uses variable pseudo::sym defined in linearize.h
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::modifiers defined in struct.c
      uses macro definition MOD_STATIC defined in symbol.h
      uses macro definition MOD_NONLOCAL defined in symbol.h
      uses function address_taken(pseudo_t) defined in memops.c
   function simplify_loads(struct basic_block *) in line 85
      protection public
      55 lines of code
      1 parameters
      13 conditional paths
      uses macro definition FOR_EACH_PTR_REVERSE defined in ptrlist.h
      uses variable instruction::bb defined in linearize.h
      uses variable basic_block::insns defined in linearize.h
      uses enumvalue OP_LOAD defined in linearize.h
      uses function local_pseudo(pseudo_t) defined in memops.c
      uses function check_access(struct instruction *) defined in flow.c
      uses macro definition RECURSE_PTR_REVERSE defined in ptrlist.h
      uses function dominates(pseudo_t,struct instruction *,struct instruction *,int) defined in flow.c
      uses variable instruction::opcode defined in linearize.h
      uses function convert_load_instruction(struct instruction *,pseudo_t) defined in flow.c
      uses variable instruction::target defined in linearize.h
      uses macro definition END_FOR_EACH_PTR_REVERSE defined in ptrlist.h
      uses variable bb_generation defined in flow.c
      uses variable basic_block::generation defined in linearize.h
      uses macro definition NULL defined in sm_implied3.c
      uses function find_dominating_parents(pseudo_t,struct instruction *,struct basic_block *,unsigned long,struct pseudo_list **,int,int) defined in memops.c
      uses macro definition assert defined in sort.c
      uses variable pseudo::type defined in linearize.h
      uses enumvalue PSEUDO_ARG defined in linearize.h
      uses function value_pseudo(long long) defined in linearize.c
      uses function rewrite_load_instruction(struct instruction *,struct pseudo_list *) defined in flow.c
   function kill_store(struct instruction *) in line 141
      protection public
      8 lines of code
      1 parameters
      2 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses enumvalue OP_SNOP defined in linearize.h
      uses function kill_use(pseudo_t *) defined in flow.h
   function kill_dominated_stores(struct basic_block *) in line 150
      protection public
      34 lines of code
      1 parameters
      9 conditional paths
      uses macro definition FOR_EACH_PTR_REVERSE defined in ptrlist.h
      uses variable instruction::bb defined in linearize.h
      uses variable basic_block::insns defined in linearize.h
      uses enumvalue OP_STORE defined in linearize.h
      uses function local_pseudo(pseudo_t) defined in memops.c
      uses macro definition RECURSE_PTR_REVERSE defined in ptrlist.h
      uses function dominates(pseudo_t,struct instruction *,struct instruction *,int) defined in flow.c
      uses variable instruction::opcode defined in linearize.h
      uses enumvalue OP_LOAD defined in linearize.h
      uses function kill_store(struct instruction *) defined in memops.c
      uses macro definition END_FOR_EACH_PTR_REVERSE defined in ptrlist.h
   function simplify_memops(struct entrypoint *) in line 185
      protection public
      12 lines of code
      1 parameters
      1 conditional paths
      uses macro definition FOR_EACH_PTR_REVERSE defined in ptrlist.h
      uses variable basic_block::ep defined in linearize.h
      uses variable entrypoint::bbs defined in linearize.h
      uses function simplify_loads(struct basic_block *) defined in memops.c
      uses macro definition END_FOR_EACH_PTR_REVERSE defined in ptrlist.h
      uses function kill_dominated_stores(struct basic_block *) defined in memops.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/obfuscate.c
module obfuscate.c
   function emit_entrypoint(struct entrypoint *) in line 43
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function emit_symbol(struct symbol *) in line 48
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses function linearize_symbol(struct symbol *) defined in linearize.c
      uses variable sym defined in smatch_type.c
      uses function emit_entrypoint(struct entrypoint *) defined in obfuscate.c
   function emit_symbol_list(struct symbol_list *) in line 56
      protection public
      9 lines of code
      1 parameters
      1 conditional paths
      uses variable sym defined in smatch_type.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses function expand_symbol(struct symbol *) defined in expand.c
      uses function emit_symbol(struct symbol *) defined in obfuscate.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function main(int,char **) in line 66
      protection public
      11 lines of code
      2 parameters
      1 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses function emit_symbol_list(struct symbol_list *) defined in obfuscate.c
      uses function sparse_initialize(int,char **,struct string_list **) defined in lib.c
      uses macro definition FOR_EACH_PTR_NOTAG defined in ptrlist.h
      uses function sparse(char *) defined in lib.c
      uses macro definition END_FOR_EACH_PTR_NOTAG defined in ptrlist.h
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/parse.c
module parse.c
   enumeration @102 in line 92
      protection public
   enumeration @103 in line 107
      protection public
   enumeration @104 in line 111
      protection public
   enumeration kind in line 1662
      protection public
   typedef declarator_t in line 54
      protection public
   typedef attr_t in line 77
      protection public
   typedef to_mode_t in line 87
      protection public
   variable function_symbol_list in line 47
      protection public
   variable function_computed_target_list in line 48
      protection public
   variable function_computed_goto_list in line 49
      protection public
   variable struct_specifier in line 56
      protection public
   variable union_specifier in line 56
      protection public
   variable enum_specifier in line 56
      protection public
   variable attribute_specifier in line 57
      protection public
   variable typeof_specifier in line 57
      protection public
   variable parse_asm_declarator in line 57
      protection public
   variable typedef_specifier in line 58
      protection public
   variable inline_specifier in line 58
      protection public
   variable auto_specifier in line 58
      protection public
   variable register_specifier in line 59
      protection public
   variable static_specifier in line 59
      protection public
   variable extern_specifier in line 59
      protection public
   variable thread_specifier in line 60
      protection public
   variable const_qualifier in line 60
      protection public
   variable volatile_qualifier in line 60
      protection public
   variable attribute_packed in line 81
      protection public
   variable attribute_aligned in line 81
      protection public
   variable attribute_modifier in line 81
      protection public
   variable attribute_address_space in line 82
      protection public
   variable attribute_context in line 82
      protection public
   variable attribute_designated_init in line 83
      protection public
   variable attribute_transparent_union in line 84
      protection public
   variable ignore_attribute in line 84
      protection public
   variable attribute_mode in line 85
      protection public
   variable attribute_force in line 85
      protection public
   variable to_QI_mode in line 90
      protection public
   variable to_HI_mode in line 90
      protection public
   variable to_SI_mode in line 90
      protection public
   variable to_DI_mode in line 90
      protection public
   variable to_TI_mode in line 90
      protection public
   variable to_word_mode in line 90
      protection public
   variable typedef_op in line 90
      protection public
   variable inline_op in line 90
      protection public
   variable auto_op in line 90
      protection public
   variable register_op in line 90
      protection public
   variable static_op in line 90
      protection public
   variable extern_op in line 90
      protection public
   variable thread_op in line 90
      protection public
   variable const_op in line 90
      protection public
   variable volatile_op in line 90
      protection public
   variable restrict_op in line 90
      protection public
   variable typeof_op in line 90
      protection public
   variable attribute_op in line 90
      protection public
   variable struct_op in line 90
      protection public
   variable union_op in line 90
      protection public
   variable enum_op in line 90
      protection public
   variable spec_op in line 90
      protection public
   variable char_op in line 90
      protection public
   variable int_op in line 90
      protection public
   variable double_op in line 90
      protection public
   variable float_op in line 90
      protection public
   variable short_op in line 90
      protection public
   variable signed_op in line 90
      protection public
   variable unsigned_op in line 90
      protection public
   variable long_op in line 90
      protection public
   variable if_op in line 90
      protection public
   variable return_op in line 90
      protection public
   variable loop_iter_op in line 90
      protection public
   variable default_op in line 90
      protection public
   variable case_op in line 90
      protection public
   variable switch_op in line 90
      protection public
   variable for_op in line 90
      protection public
   variable while_op in line 90
      protection public
   variable do_op in line 90
      protection public
   variable goto_op in line 90
      protection public
   variable __context___op in line 90
      protection public
   variable range_op in line 90
      protection public
   variable asm_op in line 90
      protection public
   variable packed_op in line 90
      protection public
   variable aligned_op in line 90
      protection public
   variable attr_mod_op in line 90
      protection public
   variable attr_force_op in line 90
      protection public
   variable address_space_op in line 90
      protection public
   variable mode_op in line 90
      protection public
   variable context_op in line 90
      protection public
   variable designated_init_op in line 90
      protection public
   variable transparent_union_op in line 90
      protection public
   variable ignore_attr_op in line 90
      protection public
   variable mode_QI_op in line 90
      protection public
   variable mode_HI_op in line 90
      protection public
   variable mode_SI_op in line 90
      protection public
   variable mode_DI_op in line 90
      protection public
   variable mode_TI_op in line 90
      protection public
   variable mode_word_op in line 90
      protection public
   variable keyword_table in line 502
      protection public
   variable ignored_attributes in line 504
      protection public
   variable storage_class in line 1270
      protection public
   variable int_types in line 1424
      protection public
   variable signed_types in line 1426
      protection public
   variable unsigned_types in line 1429
      protection public
   variable real_types in line 1432
      protection public
   variable char_types in line 1434
      protection public
   variable types in line 1436
      protection public
   enumvalue Set_T in line 93
      protection public
   enumvalue Set_S in line 94
      protection public
   enumvalue Set_Char in line 95
      protection public
   enumvalue Set_Int in line 96
      protection public
   enumvalue Set_Double in line 97
      protection public
   enumvalue Set_Float in line 98
      protection public
   enumvalue Set_Signed in line 99
      protection public
   enumvalue Set_Unsigned in line 100
      protection public
   enumvalue Set_Short in line 101
      protection public
   enumvalue Set_Long in line 102
      protection public
   enumvalue Set_Vlong in line 103
      protection public
   enumvalue Set_Any in line 105
      protection public
   enumvalue CInt in line 108
      protection public
   enumvalue CSInt in line 108
      protection public
   enumvalue CUInt in line 108
      protection public
   enumvalue CReal in line 108
      protection public
   enumvalue CChar in line 108
      protection public
   enumvalue CSChar in line 108
      protection public
   enumvalue CUChar in line 109
      protection public
   enumvalue SNone in line 112
      protection public
   enumvalue STypedef in line 112
      protection public
   enumvalue SAuto in line 112
      protection public
   enumvalue SRegister in line 112
      protection public
   enumvalue SExtern in line 112
      protection public
   enumvalue SStatic in line 112
      protection public
   enumvalue SForced in line 113
      protection public
   enumvalue Empty in line 1663
      protection public
   enumvalue K_R in line 1663
      protection public
   enumvalue Proto in line 1663
      protection public
   enumvalue Bad_Func in line 1663
      protection public
   function statement(struct token *,struct statement **) in line 51
      protection public
      34 lines of code
      2 parameters
      6 conditional paths
      uses function alloc_statement(struct position,int) defined in parse.c
      uses variable token::pos defined in token.h
      uses enumvalue STMT_NONE defined in parse.h
      uses enumvalue TOKEN_IDENT defined in token.h
      uses variable token::ident defined in token.h
      uses enumvalue NS_KEYWORD defined in symbol.h
      uses variable symbol::stmt defined in struct.c
      uses variable token::next defined in token.h
      uses function label_symbol(struct token *) defined in parse.c
      uses variable statement::type defined in parse.h
      uses enumvalue STMT_LABEL defined in parse.h
      uses variable statement::label_identifier defined in parse.h
      uses function sparse_error(struct position,const char *,...) defined in lib.c
      uses variable statement::pos defined in parse.h
      uses function show_ident(const struct ident *) defined in token.h
      uses function skip_attributes(struct token *) defined in parse.c
      uses variable statement::label_statement defined in parse.h
      uses enumvalue STMT_COMPOUND defined in parse.h
      uses function start_symbol_scope(struct position) defined in scope.c
      uses function compound_statement(struct token *,struct statement *) defined in parse.c
      uses function end_symbol_scope(void) defined in scope.c
      uses function expect(struct token *,int,const char *) defined in lib.c
      uses enumvalue STMT_EXPRESSION defined in parse.h
      uses function expression_statement(struct token *,struct expression **) defined in parse.c
      uses variable statement::expression defined in parse.h
   function handle_attributes(struct token *,struct decl_state *,unsigned int) in line 52
      protection public
      16 lines of code
      3 parameters
      5 conditional paths
      uses enumvalue TOKEN_IDENT defined in token.h
      uses variable token::ident defined in token.h
      uses enumvalue NS_KEYWORD defined in symbol.h
      uses enumvalue NS_TYPEDEF defined in symbol.h
      uses enumvalue SYM_KEYWORD defined in symbol.h
      uses variable token::next defined in token.h
      uses enumvalue KW_ATTRIBUTE defined in symbol.h
   function parse_if_statement(struct token *,struct statement *) in line 62
      protection public
      11 lines of code
      2 parameters
      3 conditional paths
      uses variable statement::type defined in parse.h
      uses enumvalue STMT_IF defined in parse.h
      uses function parens_expression(struct token *,struct expression **,const char *) defined in expression.c
      uses variable token::next defined in token.h
      uses variable statement::if_conditional defined in parse.h
      uses function statement(struct token *,struct statement **) defined in parse.c
      uses variable statement::if_true defined in parse.h
      uses enumvalue TOKEN_IDENT defined in token.h
      uses variable token::ident defined in token.h
      uses variable statement::if_false defined in parse.h
   function parse_return_statement(struct token *,struct statement *) in line 63
      protection public
      10 lines of code
      2 parameters
      2 conditional paths
      uses function lookup_symbol(struct ident *,enum namespace) defined in symbol.c
      uses enumvalue NS_ITERATOR defined in symbol.h
      uses function error_die(struct position,const char *,...) defined in lib.c
      uses variable token::pos defined in token.h
      uses variable symbol::stmt defined in struct.c
      uses variable statement::type defined in parse.h
      uses enumvalue STMT_RETURN defined in parse.h
      uses variable statement::ret_target defined in parse.h
      uses function expression_statement(struct token *,struct expression **) defined in parse.c
      uses variable token::next defined in token.h
      uses variable statement::ret_value defined in parse.h
   function parse_loop_iterator(struct token *,struct statement *) in line 64
      protection public
      9 lines of code
      2 parameters
      2 conditional paths
      uses function lookup_symbol(struct ident *,enum namespace) defined in symbol.c
      uses variable token::ident defined in token.h
      uses enumvalue NS_ITERATOR defined in symbol.h
      uses variable symbol::stmt defined in struct.c
      uses variable statement::type defined in parse.h
      uses enumvalue STMT_GOTO defined in parse.h
      uses variable statement::goto_label defined in parse.h
      uses function sparse_error(struct position,const char *,...) defined in lib.c
      uses variable statement::pos defined in parse.h
      uses function expect(struct token *,int,const char *) defined in lib.c
      uses variable token::next defined in token.h
   function parse_default_statement(struct token *,struct statement *) in line 65
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function case_statement(struct token *,struct statement *) defined in parse.c
      uses variable token::next defined in token.h
   function parse_case_statement(struct token *,struct statement *) in line 66
      protection public
      7 lines of code
      2 parameters
      2 conditional paths
      uses function parse_expression(struct token *,struct expression **) defined in expression.c
      uses variable token::next defined in token.h
      uses variable statement::case_expression defined in parse.h
      uses enumvalue SPECIAL_ELLIPSIS defined in token.h
      uses variable statement::case_to defined in parse.h
      uses function case_statement(struct token *,struct statement *) defined in parse.c
   function parse_switch_statement(struct token *,struct statement *) in line 67
      protection public
      9 lines of code
      2 parameters
      1 conditional paths
      uses variable statement::type defined in parse.h
      uses enumvalue STMT_SWITCH defined in parse.h
      uses function start_switch(struct statement *) defined in parse.c
      uses function parens_expression(struct token *,struct expression **,const char *) defined in expression.c
      uses variable token::next defined in token.h
      uses variable statement::switch_expression defined in parse.h
      uses function statement(struct token *,struct statement **) defined in parse.c
      uses variable statement::switch_statement defined in parse.h
      uses function end_switch(struct statement *) defined in parse.c
   function parse_for_statement(struct token *,struct statement *) in line 68
      protection public
      34 lines of code
      2 parameters
      2 conditional paths
      uses function start_iterator(struct statement *) defined in parse.c
      uses function expect(struct token *,int,const char *) defined in lib.c
      uses variable token::next defined in token.h
      uses macro definition NULL defined in sm_implied3.c
      uses function external_declaration(struct token *,struct symbol_list **) defined in parse.c
      uses function parse_expression(struct token *,struct expression **) defined in expression.c
      uses function statement(struct token *,struct statement **) defined in parse.c
      uses variable statement::iterator_syms defined in parse.h
      uses variable statement::iterator_pre_statement defined in parse.h
      uses function make_statement(struct expression *) defined in parse.c
      uses variable statement::iterator_pre_condition defined in parse.h
      uses variable statement::iterator_post_statement defined in parse.h
      uses variable statement::iterator_post_condition defined in parse.h
      uses variable statement::iterator_statement defined in parse.h
      uses function end_iterator(struct statement *) defined in parse.c
   function parse_while_statement(struct token *,struct statement *) in line 69
      protection public
      16 lines of code
      2 parameters
      1 conditional paths
      uses function start_iterator(struct statement *) defined in parse.c
      uses function parens_expression(struct token *,struct expression **,const char *) defined in expression.c
      uses variable token::next defined in token.h
      uses function statement(struct token *,struct statement **) defined in parse.c
      uses variable statement::iterator_pre_condition defined in parse.h
      uses variable statement::iterator_post_condition defined in parse.h
      uses macro definition NULL defined in sm_implied3.c
      uses variable statement::iterator_statement defined in parse.h
      uses function end_iterator(struct statement *) defined in parse.c
   function parse_do_statement(struct token *,struct statement *) in line 70
      protection public
      22 lines of code
      2 parameters
      3 conditional paths
      uses function start_iterator(struct statement *) defined in parse.c
      uses function statement(struct token *,struct statement **) defined in parse.c
      uses variable token::next defined in token.h
      uses enumvalue TOKEN_IDENT defined in token.h
      uses variable token::ident defined in token.h
      uses function sparse_error(struct position,const char *,...) defined in lib.c
      uses variable token::pos defined in token.h
      uses function parens_expression(struct token *,struct expression **,const char *) defined in expression.c
      uses variable statement::iterator_post_condition defined in parse.h
      uses variable statement::iterator_statement defined in parse.h
      uses function end_iterator(struct statement *) defined in parse.c
      uses variable statement::type defined in parse.h
      uses enumvalue STMT_COMPOUND defined in parse.h
      uses variable Wdo_while defined in lib.c
      uses function warning(struct position,const char *,...) defined in lib.c
      uses variable statement::pos defined in parse.h
      uses function expect(struct token *,int,const char *) defined in lib.c
   function parse_goto_statement(struct token *,struct statement *) in line 71
      protection public
      15 lines of code
      2 parameters
      3 conditional paths
      uses variable statement::type defined in parse.h
      uses enumvalue STMT_GOTO defined in parse.h
      uses variable token::next defined in token.h
      uses function parse_expression(struct token *,struct expression **) defined in expression.c
      uses variable statement::goto_expression defined in parse.h
      uses variable function_computed_goto_list defined in parse.c
      uses enumvalue TOKEN_IDENT defined in token.h
      uses variable statement::goto_label defined in parse.h
      uses function label_symbol(struct token *) defined in parse.c
      uses function sparse_error(struct position,const char *,...) defined in lib.c
      uses variable token::pos defined in token.h
      uses function expect(struct token *,int,const char *) defined in lib.c
   function parse_context_statement(struct token *,struct statement *) in line 72
      protection public
      14 lines of code
      2 parameters
      2 conditional paths
      uses variable statement::type defined in parse.h
      uses enumvalue STMT_CONTEXT defined in parse.h
      uses function parse_expression(struct token *,struct expression **) defined in expression.c
      uses variable token::next defined in token.h
      uses variable statement::expression defined in parse.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_PREOP defined in expression.h
      uses variable expression::op defined in expression.h
      uses variable expression::unop defined in expression.h
      uses enumvalue EXPR_COMMA defined in expression.h
      uses variable statement::context defined in parse.h
      uses variable expression::left defined in expression.h
      uses variable expression::right defined in expression.h
      uses function expect(struct token *,int,const char *) defined in lib.c
   function parse_range_statement(struct token *,struct statement *) in line 73
      protection public
      10 lines of code
      2 parameters
      1 conditional paths
      uses variable statement::type defined in parse.h
      uses enumvalue STMT_RANGE defined in parse.h
      uses function assignment_expression(struct token *,struct expression **) defined in expression.c
      uses variable token::next defined in token.h
      uses variable statement::range_expression defined in parse.h
      uses function expect(struct token *,int,const char *) defined in lib.c
      uses variable statement::range_low defined in parse.h
      uses variable statement::range_high defined in parse.h
   function parse_asm_statement(struct token *,struct statement *) in line 74
      protection public
      26 lines of code
      2 parameters
      7 conditional paths
      uses variable token::next defined in token.h
      uses variable statement::type defined in parse.h
      uses enumvalue STMT_ASM defined in parse.h
      uses function match_idents(struct token *,...) defined in parse.c
      uses macro definition NULL defined in sm_implied3.c
      uses enumvalue TOKEN_IDENT defined in token.h
      uses variable token::ident defined in token.h
      uses function expect(struct token *,int,const char *) defined in lib.c
      uses function parse_expression(struct token *,struct expression **) defined in expression.c
      uses variable statement::asm_string defined in parse.h
      uses function parse_asm_operands(struct token *,struct statement *,struct expression_list **) defined in parse.c
      uses variable statement::asm_outputs defined in parse.h
      uses variable statement::asm_inputs defined in parse.h
      uses function parse_asm_clobbers(struct token *,struct statement *,struct expression_list **) defined in parse.c
      uses variable statement::asm_clobbers defined in parse.h
      uses function parse_asm_labels(struct token *,struct statement *,struct symbol_list **) defined in parse.c
      uses variable statement::asm_labels defined in parse.h
   function toplevel_asm_declaration(struct token *,struct symbol_list **) in line 75
      protection public
      15 lines of code
      2 parameters
      1 conditional paths
      uses function alloc_symbol(struct position,int) defined in symbol.c
      uses variable token::pos defined in token.h
      uses enumvalue SYM_NODE defined in symbol.h
      uses enumvalue SYM_FN defined in symbol.h
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::base_type defined in struct.c
      uses function alloc_statement(struct position,int) defined in parse.c
      uses enumvalue STMT_NONE defined in parse.h
      uses function parse_asm_statement(struct token *,struct statement *) defined in parse.c
      uses function add_symbol(struct symbol_list **,struct symbol *) defined in symbol.h
   function init_parser(int) in line 607
      protection public
      22 lines of code
      1 parameters
      1 conditional paths
      uses macro definition ARRAY_SIZE defined in lib.h
      uses variable keyword_table defined in parse.c
      uses variable ptr defined in sm_null_deref2.c
      uses variable sym defined in smatch_type.c
      uses function create_symbol(int,const char *,int,int) defined in symbol.c
      uses enumvalue SYM_KEYWORD defined in symbol.h
      uses variable symbol::ident defined in struct.c
      uses variable ident::keyword defined in token.h
      uses enumvalue NS_TYPEDEF defined in symbol.h
      uses variable ident::reserved defined in token.h
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::modifiers defined in struct.c
      uses variable ctype::base_type defined in struct.c
      uses variable symbol::op defined in struct.c
      uses variable ignored_attributes defined in parse.c
      uses variable init_keyword::name defined in parse.c
      uses enumvalue NS_KEYWORD defined in symbol.h
      uses variable ignore_attr_op defined in parse.c
   function fn_local_symbol(struct symbol *) in line 632
      protection public
      5 lines of code
      1 parameters
      2 conditional paths
      uses variable function_symbol_list defined in parse.c
      uses function add_symbol(struct symbol_list **,struct symbol *) defined in symbol.h
      uses variable sym defined in smatch_type.c
   function match_idents(struct token *,...) in line 638
      protection public
      16 lines of code
      2 parameters
      3 conditional paths
      uses variable ident::next defined in token.h
      uses enumvalue TOKEN_IDENT defined in token.h
      uses variable token::ident defined in token.h
   function alloc_statement(struct position,int) in line 656
      protection public
      7 lines of code
      2 parameters
      1 conditional paths
      uses variable statement::type defined in parse.h
      uses variable init_keyword::type defined in parse.c
      uses variable statement::pos defined in parse.h
      uses function struct_declaration_list(struct token *,struct symbol_list **) defined in parse.c
   function struct_declaration_list(struct token *,struct symbol_list **) in line 664
      protection public
      13 lines of code
      2 parameters
      4 conditional paths
      uses function declaration_list(struct token *,struct symbol_list **) defined in parse.c
      uses function sparse_error(struct position,const char *,...) defined in lib.c
      uses variable token::pos defined in token.h
      uses variable token::next defined in token.h
   function apply_modifiers(struct position,struct decl_state *) in line 666
      protection public
      13 lines of code
      2 parameters
      3 conditional paths
      uses variable symbol::ctype defined in struct.c
      uses variable decl_state::mode defined in symbol.h
      uses variable symbol_op::to_mode defined in symbol.h
      uses variable decl_state::ctype defined in symbol.h
      uses variable ctype::base_type defined in struct.c
      uses function sparse_error(struct position,const char *,...) defined in lib.c
      uses variable symbol::pos defined in struct.c
      uses function show_typename(struct symbol *) defined in show-parse.c
   function alloc_indirect_symbol(struct position,struct ctype *,int) in line 680
      protection public
      11 lines of code
      3 parameters
      1 conditional paths
      uses variable sym defined in smatch_type.c
      uses function alloc_symbol(struct position,int) defined in symbol.c
      uses variable symbol::pos defined in struct.c
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::base_type defined in struct.c
      uses variable ctype::modifiers defined in struct.c
   function label_symbol(struct token *) in line 697
      protection public
      10 lines of code
      1 parameters
      1 conditional paths
      uses variable sym defined in smatch_type.c
      uses function lookup_symbol(struct ident *,enum namespace) defined in symbol.c
      uses variable token::ident defined in token.h
      uses enumvalue NS_LABEL defined in symbol.h
      uses function alloc_symbol(struct position,int) defined in symbol.c
      uses variable token::pos defined in token.h
      uses enumvalue SYM_LABEL defined in symbol.h
      uses function bind_symbol(struct symbol *,struct ident *,enum namespace) defined in symbol.c
      uses function fn_local_symbol(struct symbol *) defined in parse.c
   function struct_union_enum_specifier(enum type,struct token *,struct decl_state *,struct token *(*)(struct token *, struct symbol *)) in line 708
      protection public
      55 lines of code
      4 parameters
      7 conditional paths
      uses variable sym defined in smatch_type.c
      uses function handle_attributes(struct token *,struct decl_state *,unsigned int) defined in parse.c
      uses enumvalue KW_ATTRIBUTE defined in symbol.h
      uses enumvalue TOKEN_IDENT defined in token.h
      uses function lookup_symbol(struct ident *,enum namespace) defined in symbol.c
      uses variable token::ident defined in token.h
      uses enumvalue NS_STRUCT defined in symbol.h
      uses function is_outer_scope(struct scope *) defined in scope.c
      uses variable symbol::scope defined in struct.c
      uses variable token::next defined in token.h
      uses function alloc_symbol(struct position,int) defined in symbol.c
      uses variable token::pos defined in token.h
      uses function bind_symbol(struct symbol *,struct ident *,enum namespace) defined in symbol.c
      uses variable symbol::type defined in struct.c
      uses function error_die(struct position,const char *,...) defined in lib.c
      uses function show_typename(struct symbol *) defined in show-parse.c
      uses variable decl_state::ctype defined in symbol.h
      uses variable ctype::base_type defined in struct.c
      uses variable symbol::symbol_list defined in struct.c
      uses variable symbol::pos defined in struct.c
      uses function expect(struct token *,int,const char *) defined in lib.c
      uses variable symbol::examined defined in struct.c
      uses variable symbol::endpos defined in struct.c
      uses function sparse_error(struct position,const char *,...) defined in lib.c
   function parse_struct_declaration(struct token *,struct symbol *) in line 764
      protection public
      17 lines of code
      2 parameters
      4 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses function struct_declaration_list(struct token *,struct symbol_list **) defined in parse.c
      uses variable sym defined in smatch_type.c
      uses variable symbol::symbol_list defined in struct.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable symbol::type defined in struct.c
      uses enumvalue SYM_BITFIELD defined in symbol.h
      uses variable symbol::next_subobject defined in struct.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function parse_union_declaration(struct token *,struct symbol *) in line 782
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function struct_declaration_list(struct token *,struct symbol_list **) defined in parse.c
      uses variable sym defined in smatch_type.c
      uses variable symbol::symbol_list defined in struct.c
   function struct_specifier(struct token *,struct decl_state *) in line 787
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function struct_union_enum_specifier(enum type,struct token *,struct decl_state *,struct token *(*)(struct token *, struct symbol *)) defined in parse.c
      uses enumvalue SYM_STRUCT defined in symbol.h
      uses function parse_struct_declaration(struct token *,struct symbol *) defined in parse.c
   function union_specifier(struct token *,struct decl_state *) in line 792
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function struct_union_enum_specifier(enum type,struct token *,struct decl_state *,struct token *(*)(struct token *, struct symbol *)) defined in parse.c
      uses enumvalue SYM_UNION defined in symbol.h
      uses function parse_union_declaration(struct token *,struct symbol *) defined in parse.c
   function upper_boundary(Num *,Num *) in line 803
      protection public
      11 lines of code
      2 parameters
      4 conditional paths
      uses function v(int,...) defined in builtin_va_arg_pack.c
   function lower_boundary(Num *,Num *) in line 815
      protection public
      11 lines of code
      2 parameters
      4 conditional paths
      uses function v(int,...) defined in builtin_va_arg_pack.c
   function type_is_ok(struct symbol *,Num *,Num *) in line 827
      protection public
      13 lines of code
      3 parameters
      4 conditional paths
      uses macro definition MOD_UNSIGNED defined in symbol.h
      uses variable Num::x defined in parse.c
      uses variable Num::y defined in parse.c
   function bigger_enum_type(struct symbol *,struct symbol *) in line 841
      protection public
      12 lines of code
      2 parameters
      5 conditional paths
      uses variable s2 defined in designated-init.c
      uses macro definition MOD_UNSIGNED defined in symbol.h
      uses variable bits_in_int defined in target.c
      uses variable s1 defined in designated-init.c
   function cast_enum_list(struct symbol_list *,struct symbol *) in line 854
      protection public
      15 lines of code
      2 parameters
      3 conditional paths
      uses variable sym defined in smatch_type.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable symbol::initializer defined in struct.c
      uses variable symbol::ctype defined in struct.c
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_VALUE defined in expression.h
      uses variable expression::ctype defined in expression.h
      uses variable symbol::bit_size defined in struct.c
      uses function cast_value(struct expression *,struct symbol *,struct expression *,struct symbol *) defined in expand.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function parse_enum_declaration(struct token *,struct symbol *) in line 870
      protection public
      119 lines of code
      2 parameters
      27 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses variable symbol::examined defined in struct.c
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::base_type defined in struct.c
      uses enumvalue TOKEN_IDENT defined in token.h
      uses variable token::next defined in token.h
      uses variable sym defined in smatch_type.c
      uses macro definition constant_expression defined in expression.h
      uses function get_expression_value(struct expression *) defined in expand.c
      uses variable expression::ctype defined in expression.h
      uses function error_die(struct position,const char *,...) defined in lib.c
      uses variable token::pos defined in token.h
      uses enumvalue EXPR_VALUE defined in expression.h
      uses variable expression::value defined in expression.h
      uses function alloc_symbol(struct position,int) defined in symbol.c
      uses enumvalue SYM_NODE defined in symbol.h
      uses function bind_symbol(struct symbol *,struct ident *,enum namespace) defined in symbol.c
      uses variable token::ident defined in token.h
      uses enumvalue NS_SYMBOL defined in symbol.h
      uses variable ctype::modifiers defined in struct.c
      uses macro definition MOD_ADDRESSABLE defined in symbol.h
      uses variable symbol::initializer defined in struct.c
      uses variable symbol::enum_member defined in struct.c
      uses macro definition add_ptr_list defined in ptrlist.h
      uses variable symbol::symbol_list defined in struct.c
      uses variable ctype::type defined in struct.c
      uses enumvalue SYM_ENUM defined in symbol.h
      uses function bigger_enum_type(struct symbol *,struct symbol *) defined in parse.c
      uses function v(int,...) defined in builtin_va_arg_pack.c
      uses macro definition MOD_UNSIGNED defined in symbol.h
      uses function upper_boundary(Num *,Num *) defined in parse.c
      uses function lower_boundary(Num *,Num *) defined in parse.c
      uses variable symbol::endpos defined in struct.c
      uses function sparse_error(struct position,const char *,...) defined in lib.c
      uses function type_is_ok(struct symbol *,Num *,Num *) defined in parse.c
      uses function cast_enum_list(struct symbol_list *,struct symbol *) defined in parse.c
   function enum_specifier(struct token *,struct decl_state *) in line 990
      protection public
      10 lines of code
      2 parameters
      2 conditional paths
      uses function struct_union_enum_specifier(enum type,struct token *,struct decl_state *,struct token *(*)(struct token *, struct symbol *)) defined in parse.c
      uses enumvalue SYM_ENUM defined in symbol.h
      uses function parse_enum_declaration(struct token *,struct symbol *) defined in parse.c
      uses variable decl_state::ctype defined in symbol.h
      uses variable ctype::base_type defined in struct.c
      uses variable symbol::ctype defined in struct.c
      uses function apply_ctype(struct position,struct ctype *,struct ctype *) defined in parse.c
   function apply_ctype(struct position,struct ctype *,struct ctype *) in line 1001
      protection public
      14 lines of code
      3 parameters
      3 conditional paths
      uses variable ctype::modifiers defined in struct.c
      uses function apply_qualifier(struct position *,struct ctype *,unsigned long) defined in parse.c
      uses variable token::pos defined in token.h
      uses variable ctype::alignment defined in struct.c
   function typeof_specifier(struct token *,struct decl_state *) in line 1003
      protection public
      25 lines of code
      2 parameters
      4 conditional paths
      uses variable sym defined in smatch_type.c
      uses function sparse_error(struct position,const char *,...) defined in lib.c
      uses variable token::pos defined in token.h
      uses variable token::next defined in token.h
      uses macro definition NULL defined in sm_implied3.c
      uses variable decl_state::ctype defined in symbol.h
      uses variable ctype::base_type defined in struct.c
      uses variable symbol::ctype defined in struct.c
      uses function apply_ctype(struct position,struct ctype *,struct ctype *) defined in parse.c
      uses function alloc_symbol(struct position,int) defined in symbol.c
      uses enumvalue SYM_TYPEOF defined in symbol.h
      uses function parse_expression(struct token *,struct expression **) defined in expression.c
      uses variable symbol::initializer defined in struct.c
      uses variable symbol::endpos defined in struct.c
      uses function expect(struct token *,int,const char *) defined in lib.c
   function ignore_attribute(struct token *,struct symbol *,struct decl_state *) in line 1029
      protection public
      7 lines of code
      3 parameters
      2 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses function parens_expression(struct token *,struct expression **,const char *) defined in expression.c
   function attribute_packed(struct token *,struct symbol *,struct decl_state *) in line 1037
      protection public
      7 lines of code
      3 parameters
      2 conditional paths
      uses variable decl_state::ctype defined in symbol.h
      uses variable ctype::alignment defined in struct.c
   function attribute_aligned(struct token *,struct symbol *,struct decl_state *) in line 1045
      protection public
      17 lines of code
      3 parameters
      5 conditional paths
      uses variable max_alignment defined in target.c
      uses macro definition NULL defined in sm_implied3.c
      uses function parens_expression(struct token *,struct expression **,const char *) defined in expression.c
      uses function const_expression_value(struct expression *) defined in expand.c
      uses function warning(struct position,const char *,...) defined in lib.c
      uses variable token::pos defined in token.h
      uses variable decl_state::ctype defined in symbol.h
      uses variable ctype::alignment defined in struct.c
   function apply_qualifier(struct position *,struct ctype *,unsigned long) in line 1063
      protection public
      6 lines of code
      3 parameters
      2 conditional paths
      uses variable ctype::modifiers defined in struct.c
      uses function warning(struct position,const char *,...) defined in lib.c
      uses variable expression::pos defined in expression.h
      uses function modifier_string(unsigned long) defined in show-parse.c
   function attribute_modifier(struct token *,struct symbol *,struct decl_state *) in line 1070
      protection public
      5 lines of code
      3 parameters
      1 conditional paths
      uses function apply_qualifier(struct position *,struct ctype *,unsigned long) defined in parse.c
      uses variable token::pos defined in token.h
      uses variable decl_state::ctype defined in symbol.h
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::modifiers defined in struct.c
   function attribute_address_space(struct token *,struct symbol *,struct decl_state *) in line 1076
      protection public
      14 lines of code
      3 parameters
      3 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses function expect(struct token *,int,const char *) defined in lib.c
      uses function conditional_expression(struct token *,struct expression **) defined in expression.c
      uses function const_expression_value(struct expression *) defined in expand.c
      uses variable Waddress_space defined in lib.c
      uses variable decl_state::ctype defined in symbol.h
   function to_QI_mode(struct symbol *) in line 1091
      protection public
      9 lines of code
      1 parameters
      3 conditional paths
      uses variable ctype::base_type defined in struct.c
      uses macro definition NULL defined in sm_implied3.c
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::modifiers defined in struct.c
      uses macro definition MOD_UNSIGNED defined in symbol.h
   function to_HI_mode(struct symbol *) in line 1101
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses variable ctype::base_type defined in struct.c
      uses macro definition NULL defined in sm_implied3.c
      uses variable ctype::modifiers defined in struct.c
      uses macro definition MOD_UNSIGNED defined in symbol.h
   function to_SI_mode(struct symbol *) in line 1109
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses variable ctype::base_type defined in struct.c
      uses macro definition NULL defined in sm_implied3.c
      uses variable ctype::modifiers defined in struct.c
      uses macro definition MOD_UNSIGNED defined in symbol.h
   function to_DI_mode(struct symbol *) in line 1117
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses variable ctype::base_type defined in struct.c
      uses macro definition NULL defined in sm_implied3.c
      uses variable ctype::modifiers defined in struct.c
      uses macro definition MOD_UNSIGNED defined in symbol.h
   function to_TI_mode(struct symbol *) in line 1125
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses variable ctype::base_type defined in struct.c
      uses macro definition NULL defined in sm_implied3.c
      uses variable ctype::modifiers defined in struct.c
      uses macro definition MOD_UNSIGNED defined in symbol.h
   function to_word_mode(struct symbol *) in line 1133
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses variable ctype::base_type defined in struct.c
      uses macro definition NULL defined in sm_implied3.c
      uses variable ctype::modifiers defined in struct.c
      uses macro definition MOD_UNSIGNED defined in symbol.h
   function attribute_mode(struct token *,struct symbol *,struct decl_state *) in line 1141
      protection public
      15 lines of code
      3 parameters
      3 conditional paths
      uses function expect(struct token *,int,const char *) defined in lib.c
      uses enumvalue TOKEN_IDENT defined in token.h
      uses variable token::ident defined in token.h
      uses enumvalue NS_KEYWORD defined in symbol.h
      uses variable symbol::op defined in struct.c
      uses variable symbol_op::type defined in symbol.h
      uses enumvalue KW_MODE defined in symbol.h
      uses variable decl_state::mode defined in symbol.h
      uses function sparse_error(struct position,const char *,...) defined in lib.c
      uses variable token::pos defined in token.h
      uses function show_ident(const struct ident *) defined in token.h
      uses variable token::next defined in token.h
   function attribute_context(struct token *,struct symbol *,struct decl_state *) in line 1157
      protection public
      43 lines of code
      3 parameters
      10 conditional paths
      uses function alloc_context(void) defined in symbol.c
      uses variable expression::args defined in expression.h
      uses function expect(struct token *,int,const char *) defined in lib.c
      uses macro definition NULL defined in sm_implied3.c
      uses function conditional_expression(struct token *,struct expression **) defined in expression.c
      uses variable token::next defined in token.h
      uses function sparse_error(struct position,const char *,...) defined in lib.c
      uses variable token::pos defined in token.h
      uses variable context::in defined in symbol.h
      uses function get_expression_value(struct expression *) defined in expand.c
      uses variable context::out defined in symbol.h
      uses variable context::context defined in symbol.h
      uses variable decl_state::ctype defined in symbol.h
   function attribute_designated_init(struct token *,struct symbol *,struct decl_state *) in line 1201
      protection public
      8 lines of code
      3 parameters
      2 conditional paths
      uses variable decl_state::ctype defined in symbol.h
      uses variable ctype::base_type defined in struct.c
      uses variable symbol::type defined in struct.c
      uses enumvalue SYM_STRUCT defined in symbol.h
      uses variable symbol::designated_init defined in struct.c
      uses function warning(struct position,const char *,...) defined in lib.c
      uses variable token::pos defined in token.h
   function attribute_transparent_union(struct token *,struct symbol *,struct decl_state *) in line 1210
      protection public
      11 lines of code
      3 parameters
      3 conditional paths
      uses variable Wtransparent_union defined in lib.c
      uses function warning(struct position,const char *,...) defined in lib.c
      uses variable token::pos defined in token.h
      uses variable decl_state::ctype defined in symbol.h
      uses variable ctype::base_type defined in struct.c
      uses variable symbol::type defined in struct.c
      uses enumvalue SYM_UNION defined in symbol.h
      uses variable symbol::transparent_union defined in struct.c
   function recover_unknown_attribute(struct token *) in line 1222
      protection public
      11 lines of code
      1 parameters
      3 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses variable Wunknown_attribute defined in lib.c
      uses function sparse_error(struct position,const char *,...) defined in lib.c
      uses variable token::pos defined in token.h
      uses function show_ident(const struct ident *) defined in token.h
      uses variable token::ident defined in token.h
      uses variable token::next defined in token.h
      uses function parens_expression(struct token *,struct expression **,const char *) defined in expression.c
   function attribute_specifier(struct token *,struct decl_state *) in line 1234
      protection public
      35 lines of code
      2 parameters
      8 conditional paths
      uses function expect(struct token *,int,const char *) defined in lib.c
      uses variable symbol::attr defined in struct.c
      uses macro definition eof_token defined in token.h
      uses enumvalue TOKEN_IDENT defined in token.h
      uses variable token::ident defined in token.h
      uses enumvalue NS_KEYWORD defined in symbol.h
      uses variable token::next defined in token.h
      uses function recover_unknown_attribute(struct token *) defined in parse.c
      uses variable decl_state::ctype defined in symbol.h
      uses variable ctype::attribute defined in struct.c
      uses variable attribute::is_packed defined in symbol.h
      uses variable ctype::base_type defined in struct.c
      uses variable symbol::ctype defined in struct.c
   function storage_modifiers(struct decl_state *) in line 1280
      protection public
      12 lines of code
      1 parameters
      1 conditional paths
      uses enumvalue SAuto defined in parse.c
      uses macro definition MOD_AUTO defined in symbol.h
      uses enumvalue SExtern defined in parse.c
      uses macro definition MOD_EXTERN defined in symbol.h
      uses enumvalue SStatic defined in parse.c
      uses macro definition MOD_STATIC defined in symbol.h
      uses enumvalue SRegister defined in parse.c
      uses macro definition MOD_REGISTER defined in symbol.h
      uses variable decl_state::storage_class defined in symbol.h
      uses variable decl_state::is_inline defined in symbol.h
      uses macro definition MOD_INLINE defined in symbol.h
      uses variable decl_state::is_tls defined in symbol.h
      uses macro definition MOD_TLS defined in symbol.h
   function set_storage_class(struct position *,struct decl_state *,int) in line 1293
      protection public
      18 lines of code
      3 parameters
      4 conditional paths
      uses variable decl_state::is_tls defined in symbol.h
      uses enumvalue SStatic defined in parse.c
      uses enumvalue SExtern defined in parse.c
      uses function sparse_error(struct position,const char *,...) defined in lib.c
      uses variable symbol::pos defined in struct.c
      uses variable decl_state::storage_class defined in symbol.h
      uses variable storage_class defined in parse.c
   function typedef_specifier(struct token *,struct decl_state *) in line 1312
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses function set_storage_class(struct position *,struct decl_state *,int) defined in parse.c
      uses variable token::next defined in token.h
      uses variable token::pos defined in token.h
      uses enumvalue STypedef defined in parse.c
   function auto_specifier(struct token *,struct decl_state *) in line 1318
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses function set_storage_class(struct position *,struct decl_state *,int) defined in parse.c
      uses variable token::next defined in token.h
      uses variable token::pos defined in token.h
      uses enumvalue SAuto defined in parse.c
   function register_specifier(struct token *,struct decl_state *) in line 1324
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses function set_storage_class(struct position *,struct decl_state *,int) defined in parse.c
      uses variable token::next defined in token.h
      uses variable token::pos defined in token.h
      uses enumvalue SRegister defined in parse.c
   function static_specifier(struct token *,struct decl_state *) in line 1330
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses function set_storage_class(struct position *,struct decl_state *,int) defined in parse.c
      uses variable token::next defined in token.h
      uses variable token::pos defined in token.h
      uses enumvalue SStatic defined in parse.c
   function extern_specifier(struct token *,struct decl_state *) in line 1336
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses function set_storage_class(struct position *,struct decl_state *,int) defined in parse.c
      uses variable token::next defined in token.h
      uses variable token::pos defined in token.h
      uses enumvalue SExtern defined in parse.c
   function thread_specifier(struct token *,struct decl_state *) in line 1342
      protection public
      13 lines of code
      2 parameters
      2 conditional paths
      uses variable decl_state::storage_class defined in symbol.h
      uses enumvalue SStatic defined in parse.c
      uses enumvalue SExtern defined in parse.c
      uses variable decl_state::is_tls defined in symbol.h
      uses function sparse_error(struct position,const char *,...) defined in lib.c
      uses variable token::next defined in token.h
      uses variable token::pos defined in token.h
   function attribute_force(struct token *,struct symbol *,struct decl_state *) in line 1356
      protection public
      5 lines of code
      3 parameters
      1 conditional paths
      uses function set_storage_class(struct position *,struct decl_state *,int) defined in parse.c
      uses variable token::pos defined in token.h
      uses enumvalue SForced defined in parse.c
   function inline_specifier(struct token *,struct decl_state *) in line 1362
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses variable decl_state::is_inline defined in symbol.h
      uses variable token::next defined in token.h
   function const_qualifier(struct token *,struct decl_state *) in line 1368
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses function apply_qualifier(struct position *,struct ctype *,unsigned long) defined in parse.c
      uses variable token::next defined in token.h
      uses variable token::pos defined in token.h
      uses variable decl_state::ctype defined in symbol.h
      uses macro definition MOD_CONST defined in symbol.h
   function volatile_qualifier(struct token *,struct decl_state *) in line 1374
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses function apply_qualifier(struct position *,struct ctype *,unsigned long) defined in parse.c
      uses variable token::next defined in token.h
      uses variable token::pos defined in token.h
      uses variable decl_state::ctype defined in symbol.h
      uses macro definition MOD_VOLATILE defined in symbol.h
   function specifier_conflict(struct position,int,struct ident *) in line 1395
      protection public
      28 lines of code
      3 parameters
      10 conditional paths
      uses enumvalue Set_S defined in parse.c
      uses enumvalue Set_T defined in parse.c
      uses enumvalue Set_Char defined in parse.c
      uses enumvalue Set_Double defined in parse.c
      uses enumvalue Set_Float defined in parse.c
      uses enumvalue Set_Signed defined in parse.c
      uses enumvalue Set_Unsigned defined in parse.c
      uses enumvalue Set_Short defined in parse.c
      uses enumvalue Set_Long defined in parse.c
      uses function sparse_error(struct position,const char *,...) defined in lib.c
      uses variable token::pos defined in token.h
      uses function show_ident(const struct ident *) defined in token.h
   function ctype_integer(int,int) in line 1441
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses variable types defined in parse.c
      uses enumvalue CUInt defined in parse.c
      uses enumvalue CInt defined in parse.c
   function handle_qualifiers(struct token *,struct decl_state *) in line 1446
      protection public
      16 lines of code
      2 parameters
      6 conditional paths
      uses enumvalue TOKEN_IDENT defined in token.h
      uses function lookup_symbol(struct ident *,enum namespace) defined in symbol.c
      uses enumvalue NS_TYPEDEF defined in symbol.h
      uses enumvalue SYM_KEYWORD defined in symbol.h
      uses enumvalue KW_ATTRIBUTE defined in symbol.h
      uses enumvalue KW_QUALIFIER defined in symbol.h
   function declaration_specifiers(struct token *,struct decl_state *) in line 1463
      protection public
      74 lines of code
      2 parameters
      16 conditional paths
      uses enumvalue CInt defined in parse.c
      uses enumvalue TOKEN_IDENT defined in token.h
      uses function lookup_symbol(struct ident *,enum namespace) defined in symbol.c
      uses variable token::ident defined in token.h
      uses enumvalue NS_TYPEDEF defined in symbol.h
      uses enumvalue NS_SYMBOL defined in symbol.h
      uses enumvalue SYM_KEYWORD defined in symbol.h
      uses enumvalue Set_Any defined in parse.c
      uses enumvalue Set_S defined in parse.c
      uses enumvalue Set_T defined in parse.c
      uses variable decl_state::ctype defined in symbol.h
      uses variable ctype::base_type defined in struct.c
      uses function apply_ctype(struct position,struct ctype *,struct ctype *) defined in parse.c
      uses variable token::pos defined in token.h
      uses variable token::next defined in token.h
      uses enumvalue KW_SPECIFIER defined in symbol.h
      uses function specifier_conflict(struct position,int,struct ident *) defined in parse.c
      uses variable init_keyword::op defined in parse.c
      uses enumvalue KW_SHORT defined in symbol.h
      uses enumvalue KW_LONG defined in symbol.h
      uses enumvalue CReal defined in parse.c
      uses enumvalue Set_Vlong defined in parse.c
      uses enumvalue KW_EXACT defined in symbol.h
      uses variable ctype::modifiers defined in struct.c
      uses variable types defined in parse.c
      uses macro definition MOD_BITWISE defined in symbol.h
      uses variable init_keyword::type defined in parse.c
      uses function sparse_error(struct position,const char *,...) defined in lib.c
      uses function alloc_symbol(struct position,int) defined in symbol.c
      uses enumvalue SYM_BASETYPE defined in symbol.h
      uses variable symbol::ctype defined in struct.c
      uses macro definition MOD_SPECIFIER defined in symbol.h
      uses variable symbol::type defined in struct.c
      uses enumvalue SYM_RESTRICT defined in symbol.h
      uses function create_fouled(struct symbol *) defined in symbol.c
   function abstract_array_static_declarator(struct token *,int *) in line 1538
      protection public
      12 lines of code
      2 parameters
      3 conditional paths
      uses variable token::ident defined in token.h
      uses function sparse_error(struct position,const char *,...) defined in lib.c
      uses variable token::pos defined in token.h
      uses variable token::next defined in token.h
   function abstract_array_declarator(struct token *,struct symbol *) in line 1551
      protection public
      13 lines of code
      2 parameters
      2 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses function abstract_array_static_declarator(struct token *,int *) defined in parse.c
      uses function match_idents(struct token *,...) defined in parse.c
      uses variable token::next defined in token.h
      uses function parse_expression(struct token *,struct expression **) defined in expression.c
      uses variable sym defined in smatch_type.c
      uses variable symbol::array_size defined in struct.c
      uses function parameter_type_list(struct token *,struct symbol *) defined in parse.c
      uses function identifier_list(struct token *,struct symbol *) defined in parse.c
      uses function declarator(struct token *,struct decl_state *) defined in parse.c
   function parameter_type_list(struct token *,struct symbol *) in line 1565
      protection public
      28 lines of code
      2 parameters
      6 conditional paths
      uses variable sym defined in smatch_type.c
      uses enumvalue SPECIAL_ELLIPSIS defined in token.h
      uses variable token::next defined in token.h
      uses function alloc_symbol(struct position,int) defined in symbol.c
      uses variable token::pos defined in token.h
      uses enumvalue SYM_NODE defined in symbol.h
      uses function parameter_declaration(struct token *,struct symbol *) defined in parse.c
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::base_type defined in struct.c
      uses variable symbol::ident defined in struct.c
      uses function warning(struct position,const char *,...) defined in lib.c
      uses function add_symbol(struct symbol_list **,struct symbol *) defined in symbol.h
   function identifier_list(struct token *,struct symbol *) in line 1566
      protection public
      18 lines of code
      2 parameters
      3 conditional paths
      uses variable sym defined in smatch_type.c
      uses function alloc_symbol(struct position,int) defined in symbol.c
      uses variable token::pos defined in token.h
      uses enumvalue SYM_NODE defined in symbol.h
      uses variable symbol::ident defined in struct.c
      uses variable token::ident defined in token.h
      uses variable token::next defined in token.h
      uses variable symbol::endpos defined in struct.c
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::base_type defined in struct.c
      uses function add_symbol(struct symbol_list **,struct symbol *) defined in symbol.h
      uses enumvalue TOKEN_IDENT defined in token.h
   function declarator(struct token *,struct decl_state *) in line 1567
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses function pointer(struct token *,struct decl_state *) defined in parse.c
      uses function direct_declarator(struct token *,struct decl_state *) defined in parse.c
   function skip_attribute(struct token *) in line 1569
      protection public
      18 lines of code
      1 parameters
      6 conditional paths
      uses variable token::next defined in token.h
      uses macro definition eof_token defined in token.h
      uses enumvalue TOKEN_SPECIAL defined in token.h
      uses variable token::special defined in token.h
   function skip_attributes(struct token *) in line 1588
      protection public
      30 lines of code
      1 parameters
      10 conditional paths
      uses enumvalue TOKEN_IDENT defined in token.h
      uses variable token::ident defined in token.h
      uses enumvalue NS_KEYWORD defined in symbol.h
      uses enumvalue NS_TYPEDEF defined in symbol.h
      uses enumvalue SYM_KEYWORD defined in symbol.h
      uses enumvalue KW_ATTRIBUTE defined in symbol.h
      uses function expect(struct token *,int,const char *) defined in lib.c
      uses variable token::next defined in token.h
      uses macro definition eof_token defined in token.h
      uses function skip_attribute(struct token *) defined in parse.c
   function is_nested(struct token *,struct token **,int) in line 1636
      protection public
      25 lines of code
      3 parameters
      4 conditional paths
      uses variable token::next defined in token.h
      uses variable p defined in cond_expr2.c
      uses function skip_attributes(struct token *) defined in parse.c
      uses enumvalue TOKEN_IDENT defined in token.h
      uses enumvalue SPECIAL_ELLIPSIS defined in token.h
   function which_func(struct token *,struct ident **,int) in line 1636
      protection public
      37 lines of code
      3 parameters
      8 conditional paths
      uses variable token::next defined in token.h
      uses enumvalue TOKEN_IDENT defined in token.h
      uses enumvalue Proto defined in parse.c
      uses function warning(struct position,const char *,...) defined in lib.c
      uses variable token::pos defined in token.h
      uses enumvalue K_R defined in parse.c
      uses enumvalue TOKEN_SPECIAL defined in token.h
      uses enumvalue Bad_Func defined in parse.c
      uses variable token::special defined in token.h
      uses enumvalue Empty defined in parse.c
      uses function show_ident(const struct ident *) defined in token.h
      uses enumvalue SPECIAL_ELLIPSIS defined in token.h
   function direct_declarator(struct token *,struct decl_state *) in line 1704
      protection public
      46 lines of code
      2 parameters
      9 conditional paths
      uses variable decl_state::ctype defined in symbol.h
      uses variable token::next defined in token.h
      uses variable p defined in cond_expr2.c
      uses variable decl_state::ident defined in symbol.h
      uses enumvalue TOKEN_IDENT defined in token.h
      uses variable token::ident defined in token.h
      uses function is_nested(struct token *,struct token **,int) defined in parse.c
      uses variable ident::next defined in token.h
      uses variable decl_state::prefer_abstract defined in symbol.h
      uses variable ctype::base_type defined in struct.c
      uses function handle_attributes(struct token *,struct decl_state *,unsigned int) defined in parse.c
      uses enumvalue KW_ATTRIBUTE defined in symbol.h
      uses function declarator(struct token *,struct decl_state *) defined in parse.c
      uses function expect(struct token *,int,const char *) defined in lib.c
      uses variable symbol::ctype defined in struct.c
      uses macro definition NULL defined in sm_implied3.c
      uses function which_func(struct token *,struct ident **,int) defined in parse.c
      uses function alloc_indirect_symbol(struct position,struct ctype *,int) defined in parse.c
      uses variable token::pos defined in token.h
      uses enumvalue SYM_FN defined in symbol.h
      uses enumvalue K_R defined in parse.c
      uses function identifier_list(struct token *,struct symbol *) defined in parse.c
      uses enumvalue Proto defined in parse.c
      uses function parameter_type_list(struct token *,struct symbol *) defined in parse.c
      uses enumvalue SYM_ARRAY defined in symbol.h
      uses function abstract_array_declarator(struct token *,struct symbol *) defined in parse.c
   function pointer(struct token *,struct decl_state *) in line 1751
      protection public
      17 lines of code
      2 parameters
      2 conditional paths
      uses variable ptr defined in sm_null_deref2.c
      uses function alloc_symbol(struct position,int) defined in symbol.c
      uses variable token::pos defined in token.h
      uses enumvalue SYM_PTR defined in symbol.h
      uses variable decl_state::ctype defined in symbol.h
      uses variable ctype::modifiers defined in struct.c
      uses variable ctype::base_type defined in struct.c
      uses variable ctype::attribute defined in struct.c
      uses variable null_attr defined in symbol.c
      uses variable ctype::alignment defined in struct.c
      uses function handle_qualifiers(struct token *,struct decl_state *) defined in parse.c
      uses variable token::next defined in token.h
      uses variable symbol::endpos defined in struct.c
   function handle_bitfield(struct token *,struct decl_state *) in line 1775
      protection public
      47 lines of code
      2 parameters
      7 conditional paths
      uses variable decl_state::ctype defined in symbol.h
      uses variable ctype::base_type defined in struct.c
      uses function sparse_error(struct position,const char *,...) defined in lib.c
      uses variable token::pos defined in token.h
      uses function show_typename(struct symbol *) defined in show-parse.c
      uses function conditional_expression(struct token *,struct expression **) defined in expression.c
      uses variable token::next defined in token.h
      uses function alloc_indirect_symbol(struct position,struct ctype *,int) defined in parse.c
      uses enumvalue SYM_BITFIELD defined in symbol.h
      uses function const_expression_value(struct expression *) defined in expand.c
      uses variable symbol::bit_size defined in struct.c
      uses variable decl_state::ident defined in symbol.h
      uses function show_ident(const struct ident *) defined in token.h
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::modifiers defined in struct.c
      uses macro definition MOD_UNSIGNED defined in symbol.h
      uses variable Wone_bit_signed_bitfield defined in lib.c
      uses variable Wdefault_bitfield_sign defined in lib.c
      uses variable symbol::type defined in struct.c
      uses enumvalue SYM_ENUM defined in symbol.h
      uses macro definition MOD_EXPLICITLY_SIGNED defined in symbol.h
      uses function warning(struct position,const char *,...) defined in lib.c
      uses variable symbol::endpos defined in struct.c
   function declaration_list(struct token *,struct symbol_list **) in line 1823
      protection public
      31 lines of code
      2 parameters
      4 conditional paths
      uses variable decl_state::prefer_abstract defined in symbol.h
      uses variable null_attr defined in symbol.c
      uses function declaration_specifiers(struct token *,struct decl_state *) defined in parse.c
      uses function storage_modifiers(struct decl_state *) defined in parse.c
      uses variable decl_state::ctype defined in symbol.h
      uses function alloc_symbol(struct position,int) defined in symbol.c
      uses variable token::pos defined in token.h
      uses enumvalue SYM_NODE defined in symbol.h
      uses variable decl_state::ident defined in symbol.h
      uses variable symbol::ident defined in struct.c
      uses function declarator(struct token *,struct decl_state *) defined in parse.c
      uses function handle_bitfield(struct token *,struct decl_state *) defined in parse.c
      uses function handle_attributes(struct token *,struct decl_state *,unsigned int) defined in parse.c
      uses enumvalue KW_ATTRIBUTE defined in symbol.h
      uses function apply_modifiers(struct position,struct decl_state *) defined in parse.c
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::modifiers defined in struct.c
      uses variable symbol::endpos defined in struct.c
      uses function add_symbol(struct symbol_list **,struct symbol *) defined in symbol.h
      uses variable token::next defined in token.h
   function parameter_declaration(struct token *,struct symbol *) in line 1869
      protection public
      15 lines of code
      2 parameters
      1 conditional paths
      uses variable decl_state::prefer_abstract defined in symbol.h
      uses variable null_attr defined in symbol.c
      uses function declaration_specifiers(struct token *,struct decl_state *) defined in parse.c
      uses variable decl_state::ident defined in symbol.h
      uses variable sym defined in smatch_type.c
      uses variable symbol::ident defined in struct.c
      uses function declarator(struct token *,struct decl_state *) defined in parse.c
      uses function handle_attributes(struct token *,struct decl_state *,unsigned int) defined in parse.c
      uses enumvalue KW_ATTRIBUTE defined in symbol.h
      uses function apply_modifiers(struct position,struct decl_state *) defined in parse.c
      uses variable token::pos defined in token.h
      uses variable symbol::ctype defined in struct.c
      uses variable decl_state::ctype defined in symbol.h
      uses variable ctype::modifiers defined in struct.c
      uses function storage_modifiers(struct decl_state *) defined in parse.c
      uses variable symbol::endpos defined in struct.c
      uses variable symbol::forced_arg defined in struct.c
      uses variable decl_state::storage_class defined in symbol.h
      uses enumvalue SForced defined in parse.c
   function typename(struct token *,struct symbol **,int *) in line 1885
      protection public
      24 lines of code
      3 parameters
      4 conditional paths
      uses variable decl_state::prefer_abstract defined in symbol.h
      uses variable null_attr defined in symbol.c
      uses variable sym defined in smatch_type.c
      uses function alloc_symbol(struct position,int) defined in symbol.c
      uses variable token::pos defined in token.h
      uses enumvalue SYM_NODE defined in symbol.h
      uses variable p defined in cond_expr2.c
      uses function declaration_specifiers(struct token *,struct decl_state *) defined in parse.c
      uses function declarator(struct token *,struct decl_state *) defined in parse.c
      uses function apply_modifiers(struct position,struct decl_state *) defined in parse.c
      uses variable symbol::ctype defined in struct.c
      uses variable decl_state::ctype defined in symbol.h
      uses variable symbol::endpos defined in struct.c
      uses variable storage_class defined in parse.c
      uses enumvalue SForced defined in parse.c
      uses function warning(struct position,const char *,...) defined in lib.c
      uses variable symbol::pos defined in struct.c
      uses function show_typename(struct symbol *) defined in show-parse.c
   function expression_statement(struct token *,struct expression **) in line 1910
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses function parse_expression(struct token *,struct expression **) defined in expression.c
      uses function expect(struct token *,int,const char *) defined in lib.c
   function parse_asm_operands(struct token *,struct statement *,struct expression_list **) in line 1916
      protection public
      24 lines of code
      3 parameters
      4 conditional paths
      uses variable token::next defined in token.h
      uses macro definition NULL defined in sm_implied3.c
      uses enumvalue TOKEN_IDENT defined in token.h
      uses variable token::ident defined in token.h
      uses function primary_expression(struct token *,struct expression **) defined in expression.c
      uses function parens_expression(struct token *,struct expression **,const char *) defined in expression.c
   function parse_asm_clobbers(struct token *,struct statement *,struct expression_list **) in line 1941
      protection public
      12 lines of code
      3 parameters
      3 conditional paths
      uses function primary_expression(struct token *,struct expression **) defined in expression.c
      uses variable token::next defined in token.h
   function parse_asm_labels(struct token *,struct statement *,struct symbol_list **) in line 1954
      protection public
      15 lines of code
      3 parameters
      3 conditional paths
      uses variable token::next defined in token.h
      uses enumvalue TOKEN_IDENT defined in token.h
      uses function label_symbol(struct token *) defined in parse.c
      uses function add_symbol(struct symbol_list **,struct symbol *) defined in symbol.h
   function parse_asm_declarator(struct token *,struct decl_state *) in line 1997
      protection public
      8 lines of code
      2 parameters
      1 conditional paths
      uses function expect(struct token *,int,const char *) defined in lib.c
      uses function parse_expression(struct token *,struct expression **) defined in expression.c
      uses variable token::next defined in token.h
   function make_statement(struct expression *) in line 2007
      protection public
      10 lines of code
      1 parameters
      2 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses function alloc_statement(struct position,int) defined in parse.c
      uses variable expression::pos defined in expression.h
      uses enumvalue STMT_EXPRESSION defined in parse.h
      uses variable statement::expression defined in parse.h
   function start_iterator(struct statement *) in line 2027
      protection public
      18 lines of code
      1 parameters
      1 conditional paths
      uses function start_symbol_scope(struct position) defined in scope.c
      uses variable symbol::stmt defined in struct.c
      uses variable statement::pos defined in parse.h
      uses function alloc_symbol(struct position,int) defined in symbol.c
      uses enumvalue SYM_NODE defined in symbol.h
      uses function bind_symbol(struct symbol *,struct ident *,enum namespace) defined in symbol.c
      uses enumvalue NS_ITERATOR defined in symbol.h
      uses variable statement::type defined in parse.h
      uses enumvalue STMT_ITERATOR defined in parse.h
      uses variable statement::iterator_break defined in parse.h
      uses variable statement::iterator_continue defined in parse.h
      uses function fn_local_symbol(struct symbol *) defined in parse.c
   function end_iterator(struct statement *) in line 2046
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function end_symbol_scope(void) defined in scope.c
   function start_function(struct symbol *) in line 2051
      protection public
      19 lines of code
      1 parameters
      1 conditional paths
      uses function alloc_statement(struct position,int) defined in parse.c
      uses variable sym defined in smatch_type.c
      uses variable symbol::pos defined in struct.c
      uses enumvalue STMT_COMPOUND defined in parse.h
      uses function start_function_scope(struct position) defined in scope.c
      uses variable statement::pos defined in parse.h
      uses variable statement::ret defined in parse.h
      uses function alloc_symbol(struct position,int) defined in symbol.c
      uses enumvalue SYM_NODE defined in symbol.h
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::base_type defined in struct.c
      uses variable ctype::modifiers defined in struct.c
      uses macro definition MOD_STORAGE defined in symbol.h
      uses macro definition MOD_CONST defined in symbol.h
      uses macro definition MOD_VOLATILE defined in symbol.h
      uses macro definition MOD_TLS defined in symbol.h
      uses macro definition MOD_INLINE defined in symbol.h
      uses macro definition MOD_ADDRESSABLE defined in symbol.h
      uses macro definition MOD_NOCAST defined in symbol.h
      uses macro definition MOD_NODEREF defined in symbol.h
      uses macro definition MOD_ACCESSED defined in symbol.h
      uses macro definition MOD_TOPLEVEL defined in symbol.h
      uses macro definition MOD_AUTO defined in symbol.h
      uses macro definition MOD_REGISTER defined in symbol.h
      uses function bind_symbol(struct symbol *,struct ident *,enum namespace) defined in symbol.c
      uses enumvalue NS_ITERATOR defined in symbol.h
      uses function fn_local_symbol(struct symbol *) defined in parse.c
      uses variable current_fn defined in evaluate.c
   function end_function(struct symbol *) in line 2071
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable current_fn defined in evaluate.c
      uses macro definition NULL defined in sm_implied3.c
      uses function end_function_scope(void) defined in scope.c
   function start_switch(struct statement *) in line 2089
      protection public
      20 lines of code
      1 parameters
      1 conditional paths
      uses function start_symbol_scope(struct position) defined in scope.c
      uses variable symbol::stmt defined in struct.c
      uses variable statement::pos defined in parse.h
      uses function alloc_symbol(struct position,int) defined in symbol.c
      uses enumvalue SYM_NODE defined in symbol.h
      uses function bind_symbol(struct symbol *,struct ident *,enum namespace) defined in symbol.c
      uses enumvalue NS_ITERATOR defined in symbol.h
      uses variable statement::type defined in parse.h
      uses enumvalue STMT_SWITCH defined in parse.h
      uses variable statement::switch_break defined in parse.h
      uses variable statement::switch_case defined in parse.h
      uses function fn_local_symbol(struct symbol *) defined in parse.c
   function end_switch(struct statement *) in line 2110
      protection public
      6 lines of code
      1 parameters
      2 conditional paths
      uses variable symbol::stmt defined in struct.c
      uses variable statement::switch_case defined in parse.h
      uses variable symbol::symbol_list defined in struct.c
      uses function warning(struct position,const char *,...) defined in lib.c
      uses variable statement::pos defined in parse.h
      uses function end_symbol_scope(void) defined in scope.c
   function add_case_statement(struct statement *) in line 2117
      protection public
      16 lines of code
      1 parameters
      2 conditional paths
      uses function lookup_symbol(struct ident *,enum namespace) defined in symbol.c
      uses enumvalue NS_ITERATOR defined in symbol.h
      uses variable sym defined in smatch_type.c
      uses function sparse_error(struct position,const char *,...) defined in lib.c
      uses variable symbol::stmt defined in struct.c
      uses variable statement::pos defined in parse.h
      uses variable statement::type defined in parse.h
      uses enumvalue STMT_NONE defined in parse.h
      uses function alloc_symbol(struct position,int) defined in symbol.c
      uses enumvalue SYM_NODE defined in symbol.h
      uses function add_symbol(struct symbol_list **,struct symbol *) defined in symbol.h
      uses variable symbol::symbol_list defined in struct.c
      uses variable statement::case_label defined in parse.h
      uses function fn_local_symbol(struct symbol *) defined in parse.c
   function case_statement(struct token *,struct statement *) in line 2232
      protection public
      7 lines of code
      2 parameters
      1 conditional paths
      uses variable statement::type defined in parse.h
      uses enumvalue STMT_CASE defined in parse.h
      uses function expect(struct token *,int,const char *) defined in lib.c
      uses function add_case_statement(struct statement *) defined in parse.c
      uses function statement(struct token *,struct statement **) defined in parse.c
      uses variable statement::case_statement defined in parse.h
   function label_statement(struct token *) in line 2351
      protection public
      15 lines of code
      1 parameters
      3 conditional paths
      uses enumvalue TOKEN_IDENT defined in token.h
      uses variable sym defined in smatch_type.c
      uses function alloc_symbol(struct position,int) defined in symbol.c
      uses variable token::pos defined in token.h
      uses enumvalue SYM_LABEL defined in symbol.h
      uses function bind_symbol(struct symbol *,struct ident *,enum namespace) defined in symbol.c
      uses variable token::ident defined in token.h
      uses enumvalue NS_SYMBOL defined in symbol.h
      uses variable symbol::namespace defined in struct.c
      uses enumvalue NS_LABEL defined in symbol.h
      uses function fn_local_symbol(struct symbol *) defined in parse.c
      uses variable token::next defined in token.h
      uses function expect(struct token *,int,const char *) defined in lib.c
   function statement_list(struct token *,struct statement_list **) in line 2367
      protection public
      27 lines of code
      2 parameters
      7 conditional paths
      uses enumvalue TOKEN_IDENT defined in token.h
      uses variable token::ident defined in token.h
      uses function label_statement(struct token *) defined in parse.c
      uses variable token::next defined in token.h
      uses macro definition eof_token defined in token.h
      uses function warning(struct position,const char *,...) defined in lib.c
      uses variable token::pos defined in token.h
      uses function alloc_statement(struct position,int) defined in parse.c
      uses enumvalue STMT_DECLARATION defined in parse.h
      uses function external_declaration(struct token *,struct symbol_list **) defined in parse.c
      uses variable statement::declaration defined in parse.h
      uses variable Wdeclarationafterstatement defined in lib.c
      uses function statement(struct token *,struct statement **) defined in parse.c
   function compound_statement(struct token *,struct statement *) in line 2443
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses function statement_list(struct token *,struct statement_list **) defined in parse.c
      uses variable statement::stmts defined in parse.h
   function identifier_expression(struct token *) in line 2449
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses variable token::pos defined in token.h
      uses enumvalue EXPR_IDENTIFIER defined in expression.h
      uses variable expression::expr_ident defined in expression.h
      uses variable token::ident defined in token.h
   function index_expression(struct expression *,struct expression *) in line 2456
      protection public
      16 lines of code
      2 parameters
      3 conditional paths
      uses variable expression::idx_from defined in expression.h
      uses variable expression::idx_to defined in expression.h
      uses variable expression::pos defined in expression.h
      uses enumvalue EXPR_INDEX defined in expression.h
      uses function const_expression_value(struct expression *) defined in expand.c
      uses function warning(struct position,const char *,...) defined in lib.c
   function single_initializer(struct expression **,struct token *) in line 2473
      protection public
      59 lines of code
      2 parameters
      14 conditional paths
      uses variable token::next defined in token.h
      uses macro definition NULL defined in sm_implied3.c
      uses enumvalue TOKEN_IDENT defined in token.h
      uses function identifier_expression(struct token *) defined in parse.c
      uses variable Wold_initializer defined in lib.c
      uses function warning(struct position,const char *,...) defined in lib.c
      uses variable token::pos defined in token.h
      uses function initializer(struct expression **,struct token *) defined in parse.c
      uses variable expression::ident_expression defined in expression.h
      uses macro definition constant_expression defined in expression.h
      uses function sparse_error(struct position,const char *,...) defined in lib.c
      uses enumvalue SPECIAL_ELLIPSIS defined in token.h
      uses function index_expression(struct expression *,struct expression *) defined in parse.c
      uses variable expression::idx_expression defined in expression.h
      uses function expect(struct token *,int,const char *) defined in lib.c
   function initializer_list(struct expression_list **,struct token *) in line 2533
      protection public
      15 lines of code
      2 parameters
      4 conditional paths
      uses function single_initializer(struct expression **,struct token *) defined in parse.c
      uses variable token::next defined in token.h
   function initializer(struct expression **,struct token *) in line 2549
      protection public
      10 lines of code
      2 parameters
      2 conditional paths
      uses variable token::pos defined in token.h
      uses enumvalue EXPR_INITIALIZER defined in expression.h
      uses function initializer_list(struct expression_list **,struct token *) defined in parse.c
      uses variable expression::expr_list defined in expression.h
      uses variable token::next defined in token.h
      uses function expect(struct token *,int,const char *) defined in lib.c
      uses function assignment_expression(struct token *,struct expression **) defined in expression.c
   function declare_argument(struct symbol *,struct symbol *) in line 2560
      protection public
      8 lines of code
      2 parameters
      2 conditional paths
      uses variable sym defined in smatch_type.c
      uses variable symbol::ident defined in struct.c
      uses function sparse_error(struct position,const char *,...) defined in lib.c
      uses variable symbol::pos defined in struct.c
      uses function bind_symbol(struct symbol *,struct ident *,enum namespace) defined in symbol.c
      uses enumvalue NS_SYMBOL defined in symbol.h
   function parse_function_body(struct token *,struct symbol *,struct symbol_list **) in line 2569
      protection public
      65 lines of code
      3 parameters
      10 conditional paths
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::base_type defined in struct.c
      uses variable p defined in cond_expr2.c
      uses variable function_symbol_list defined in parse.c
      uses variable ctype::modifiers defined in struct.c
      uses macro definition MOD_INLINE defined in symbol.h
      uses variable symbol::inline_symbol_list defined in struct.c
      uses variable symbol::inline_stmt defined in struct.c
      uses variable symbol::symbol_list defined in struct.c
      uses variable symbol::stmt defined in struct.c
      uses variable function_computed_target_list defined in parse.c
      uses macro definition NULL defined in sm_implied3.c
      uses variable function_computed_goto_list defined in parse.c
      uses macro definition MOD_EXTERN defined in symbol.h
      uses function warning(struct position,const char *,...) defined in lib.c
      uses variable symbol::pos defined in struct.c
      uses function show_ident(const struct ident *) defined in token.h
      uses variable symbol::ident defined in struct.c
      uses macro definition MOD_STATIC defined in symbol.h
      uses function start_function(struct symbol *) defined in parse.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable symbol::arguments defined in struct.c
      uses function declare_argument(struct symbol *,struct symbol *) defined in parse.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses function compound_statement(struct token *,struct statement *) defined in parse.c
      uses variable token::next defined in token.h
      uses function end_function(struct symbol *) defined in parse.c
      uses function add_symbol(struct symbol_list **,struct symbol *) defined in symbol.h
      uses function check_declaration(struct symbol *) defined in symbol.c
      uses variable symbol::definition defined in struct.c
      uses variable symbol::same_symbol defined in struct.c
      uses function info(struct position,const char *,...) defined in lib.c
      uses function rebind_scope(struct symbol *,struct scope *) defined in scope.c
      uses variable symbol::scope defined in struct.c
      uses variable statement::target_list defined in parse.h
      uses function expect(struct token *,int,const char *) defined in lib.c
   function promote_k_r_types(struct symbol *) in line 2635
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::base_type defined in struct.c
      uses variable ctype::modifiers defined in struct.c
      uses macro definition MOD_CHAR defined in symbol.h
      uses macro definition MOD_SHORT defined in symbol.h
   function apply_k_r_types(struct symbol_list *,struct symbol *) in line 2643
      protection public
      29 lines of code
      2 parameters
      4 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable init_keyword::type defined in parse.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses function sparse_error(struct position,const char *,...) defined in lib.c
      uses function show_ident(const struct ident *) defined in token.h
      uses function promote_k_r_types(struct symbol *) defined in parse.c
      uses function warning(struct position,const char *,...) defined in lib.c
   function parse_k_r_arguments(struct token *,struct symbol *,struct symbol_list **) in line 2673
      protection public
      23 lines of code
      3 parameters
      4 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses function warning(struct position,const char *,...) defined in lib.c
      uses variable token::pos defined in token.h
      uses function show_ident(const struct ident *) defined in token.h
      uses variable symbol::ident defined in struct.c
      uses function declaration_list(struct token *,struct symbol_list **) defined in parse.c
      uses function sparse_error(struct position,const char *,...) defined in lib.c
      uses variable token::next defined in token.h
      uses function apply_k_r_types(struct symbol_list *,struct symbol *) defined in parse.c
      uses function parse_function_body(struct token *,struct symbol *,struct symbol_list **) defined in parse.c
   function external_declaration(struct token *,struct symbol_list **) in line 2713
      protection public
      127 lines of code
      2 parameters
      1 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses variable decl_state::ident defined in symbol.h
      uses variable null_attr defined in symbol.c
      uses enumvalue TOKEN_IDENT defined in token.h
      uses variable token::ident defined in token.h
      uses enumvalue NS_KEYWORD defined in symbol.h
      uses function declaration_specifiers(struct token *,struct decl_state *) defined in parse.c
      uses function storage_modifiers(struct decl_state *) defined in parse.c
      uses function alloc_symbol(struct position,int) defined in symbol.c
      uses variable token::pos defined in token.h
      uses enumvalue SYM_NODE defined in symbol.h
      uses function apply_modifiers(struct position,struct decl_state *) defined in parse.c
      uses variable token::next defined in token.h
      uses variable decl_state::ctype defined in symbol.h
      uses function declarator(struct token *,struct decl_state *) defined in parse.c
      uses function handle_attributes(struct token *,struct decl_state *,unsigned int) defined in parse.c
      uses enumvalue KW_ATTRIBUTE defined in symbol.h
      uses enumvalue KW_ASM defined in symbol.h
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::modifiers defined in struct.c
      uses variable symbol::endpos defined in struct.c
      uses function warning(struct position,const char *,...) defined in lib.c
      uses function expect(struct token *,int,const char *) defined in lib.c
      uses variable decl_state::storage_class defined in symbol.h
      uses enumvalue STypedef defined in parse.c
      uses macro definition MOD_USERTYPE defined in symbol.h
      uses function bind_symbol(struct symbol *,struct ident *,enum namespace) defined in symbol.c
      uses enumvalue NS_TYPEDEF defined in symbol.h
      uses enumvalue NS_SYMBOL defined in symbol.h
      uses variable ctype::base_type defined in struct.c
      uses variable symbol::ident defined in struct.c
      uses variable symbol::type defined in struct.c
      uses enumvalue SYM_STRUCT defined in symbol.h
      uses enumvalue SYM_UNION defined in symbol.h
      uses enumvalue SYM_ENUM defined in symbol.h
      uses enumvalue SYM_RESTRICT defined in symbol.h
      uses enumvalue SYM_FN defined in symbol.h
      uses function parse_k_r_arguments(struct token *,struct symbol *,struct symbol_list **) defined in parse.c
      uses function parse_function_body(struct token *,struct symbol *,struct symbol_list **) defined in parse.c
      uses macro definition MOD_STATIC defined in symbol.h
      uses macro definition MOD_EXTERN defined in symbol.h
      uses function sparse_error(struct position,const char *,...) defined in lib.c
      uses variable symbol::pos defined in struct.c
      uses function initializer(struct expression **,struct token *) defined in parse.c
      uses variable symbol::initializer defined in struct.c
      uses macro definition MOD_INLINE defined in symbol.h
      uses function add_symbol(struct symbol_list **,struct symbol *) defined in symbol.h
      uses function fn_local_symbol(struct symbol *) defined in parse.c
      uses function check_declaration(struct symbol *) defined in symbol.c
      uses variable symbol::same_symbol defined in struct.c
      uses variable symbol::definition defined in struct.c
   variable init_keyword::modifiers in line 384
      protection public
   variable init_keyword::name in line 382
      protection public
   variable init_keyword::ns in line 382
      protection public
   variable init_keyword::op in line 385
      protection public
   variable init_keyword::type in line 386
      protection public
   variable Num::x in line 799
      protection public
   variable Num::y in line 800
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/parse.h
module parse.h
   enumeration statement_type in line 30
      protection public
   variable function_computed_target_list in line 132
      protection public
   variable function_computed_goto_list in line 133
      protection public
   enumvalue STMT_NONE in line 31
      protection public
   enumvalue STMT_DECLARATION in line 32
      protection public
   enumvalue STMT_EXPRESSION in line 33
      protection public
   enumvalue STMT_COMPOUND in line 34
      protection public
   enumvalue STMT_IF in line 35
      protection public
   enumvalue STMT_RETURN in line 36
      protection public
   enumvalue STMT_CASE in line 37
      protection public
   enumvalue STMT_SWITCH in line 38
      protection public
   enumvalue STMT_ITERATOR in line 39
      protection public
   enumvalue STMT_LABEL in line 40
      protection public
   enumvalue STMT_GOTO in line 41
      protection public
   enumvalue STMT_ASM in line 42
      protection public
   enumvalue STMT_CONTEXT in line 43
      protection public
   enumvalue STMT_RANGE in line 44
      protection public
   function parse_expression(struct token *,struct expression **) in line 135
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function label_symbol(struct token *) in line 136
      protection public
      10 lines of code
      1 parameters
      2 conditional paths
      uses variable sym defined in smatch_type.c
      uses function lookup_symbol(struct ident *,enum namespace) defined in symbol.c
      uses variable token::ident defined in token.h
      uses enumvalue NS_LABEL defined in symbol.h
      uses function alloc_symbol(struct position,int) defined in symbol.c
      uses variable token::pos defined in token.h
      uses enumvalue SYM_LABEL defined in symbol.h
      uses function bind_symbol(struct symbol *,struct ident *,enum namespace) defined in symbol.c
   function show_statement(struct statement *) in line 138
      protection public
      152 lines of code
      1 parameters
      1 conditional paths
      uses variable symbol::stmt defined in struct.c
      uses variable statement::type defined in parse.h
      uses enumvalue STMT_DECLARATION defined in parse.h
      uses variable statement::declaration defined in parse.h
      uses enumvalue STMT_RETURN defined in parse.h
      uses enumvalue STMT_COMPOUND defined in parse.h
      uses variable statement::inline_fn defined in parse.h
      uses variable statement::args defined in parse.h
      uses function printf(char *,...) defined in test-be.c
      uses function show_ident(const struct ident *) defined in token.h
      uses variable symbol::ident defined in struct.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable statement::stmts defined in parse.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses variable statement::ret defined in parse.h
      uses variable symbol::bit_size defined in struct.c
      uses enumvalue STMT_EXPRESSION defined in parse.h
      uses function show_expression(struct expression *) defined in show-parse.c
      uses variable statement::expression defined in parse.h
      uses enumvalue STMT_IF defined in parse.h
      uses variable statement::if_conditional defined in parse.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_VALUE defined in expression.h
      uses variable statement::if_true defined in parse.h
      uses variable expression::value defined in expression.h
      uses variable statement::if_false defined in parse.h
      uses enumvalue STMT_SWITCH defined in parse.h
      uses enumvalue STMT_CASE defined in parse.h
      uses variable statement::case_label defined in parse.h
      uses variable statement::case_statement defined in parse.h
      uses enumvalue STMT_ITERATOR defined in parse.h
      uses variable statement::iterator_pre_statement defined in parse.h
      uses variable statement::iterator_pre_condition defined in parse.h
      uses variable statement::iterator_statement defined in parse.h
      uses variable statement::iterator_post_statement defined in parse.h
      uses variable statement::iterator_post_condition defined in parse.h
      uses variable statement::iterator_syms defined in parse.h
      uses variable statement::iterator_continue defined in parse.h
      uses variable symbol::used defined in struct.c
      uses variable statement::iterator_break defined in parse.h
      uses enumvalue STMT_NONE defined in parse.h
      uses enumvalue STMT_LABEL defined in parse.h
      uses variable statement::label_identifier defined in parse.h
      uses variable statement::label_statement defined in parse.h
      uses enumvalue STMT_GOTO defined in parse.h
      uses variable statement::goto_expression defined in parse.h
      uses variable statement::goto_label defined in parse.h
      uses variable symbol::bb_target defined in struct.c
      uses enumvalue STMT_ASM defined in parse.h
      uses enumvalue STMT_CONTEXT defined in parse.h
      uses enumvalue STMT_RANGE defined in parse.h
      uses variable statement::range_expression defined in parse.h
      uses variable statement::range_low defined in parse.h
      uses variable statement::range_high defined in parse.h
   function show_statement_list(struct statement_list *,const char *) in line 139
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function show_expression(struct expression *) in line 140
      protection public
      78 lines of code
      1 parameters
      1 conditional paths
      uses variable expression::ctype defined in expression.h
      uses variable position::pos defined in lib.h
      uses variable expression::pos defined in expression.h
      uses function printf(char *,...) defined in test-be.c
      uses function stream_name(int) defined in token.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_CALL defined in expression.h
      uses enumvalue EXPR_ASSIGNMENT defined in expression.h
      uses enumvalue EXPR_COMMA defined in expression.h
      uses enumvalue EXPR_BINOP defined in expression.h
      uses enumvalue EXPR_COMPARE defined in expression.h
      uses enumvalue EXPR_LOGICAL defined in expression.h
      uses enumvalue EXPR_PREOP defined in expression.h
      uses enumvalue EXPR_POSTOP defined in expression.h
      uses enumvalue EXPR_SYMBOL defined in expression.h
      uses variable expression::symbol defined in expression.h
      uses enumvalue EXPR_DEREF defined in expression.h
      uses enumvalue EXPR_SIZEOF defined in expression.h
      uses enumvalue EXPR_PTRSIZEOF defined in expression.h
      uses enumvalue EXPR_ALIGNOF defined in expression.h
      uses enumvalue EXPR_OFFSETOF defined in expression.h
      uses function warning(struct position,const char *,...) defined in lib.c
      uses enumvalue EXPR_CAST defined in expression.h
      uses enumvalue EXPR_FORCE_CAST defined in expression.h
      uses enumvalue EXPR_IMPLIED_CAST defined in expression.h
      uses enumvalue EXPR_VALUE defined in expression.h
      uses enumvalue EXPR_FVALUE defined in expression.h
      uses enumvalue EXPR_STRING defined in expression.h
      uses enumvalue EXPR_INITIALIZER defined in expression.h
      uses enumvalue EXPR_SELECT defined in expression.h
      uses enumvalue EXPR_CONDITIONAL defined in expression.h
      uses enumvalue EXPR_STATEMENT defined in expression.h
      uses enumvalue EXPR_LABEL defined in expression.h
      uses enumvalue EXPR_SLICE defined in expression.h
      uses enumvalue EXPR_POS defined in expression.h
      uses enumvalue EXPR_IDENTIFIER defined in expression.h
      uses enumvalue EXPR_INDEX defined in expression.h
      uses enumvalue EXPR_TYPE defined in expression.h
   function external_declaration(struct token *,struct symbol_list **) in line 142
      protection public
      127 lines of code
      2 parameters
      28 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses variable decl_state::ident defined in symbol.h
      uses variable null_attr defined in symbol.c
      uses enumvalue TOKEN_IDENT defined in token.h
      uses variable token::ident defined in token.h
      uses enumvalue NS_KEYWORD defined in symbol.h
      uses function alloc_symbol(struct position,int) defined in symbol.c
      uses variable token::pos defined in token.h
      uses enumvalue SYM_NODE defined in symbol.h
      uses variable token::next defined in token.h
      uses variable decl_state::ctype defined in symbol.h
      uses enumvalue KW_ATTRIBUTE defined in symbol.h
      uses enumvalue KW_ASM defined in symbol.h
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::modifiers defined in struct.c
      uses variable symbol::endpos defined in struct.c
      uses function warning(struct position,const char *,...) defined in lib.c
      uses function expect(struct token *,int,const char *) defined in lib.c
      uses variable decl_state::storage_class defined in symbol.h
      uses enumvalue STypedef defined in parse.c
      uses macro definition MOD_USERTYPE defined in symbol.h
      uses function bind_symbol(struct symbol *,struct ident *,enum namespace) defined in symbol.c
      uses enumvalue NS_TYPEDEF defined in symbol.h
      uses enumvalue NS_SYMBOL defined in symbol.h
      uses variable ctype::base_type defined in struct.c
      uses variable symbol::ident defined in struct.c
      uses variable symbol::type defined in struct.c
      uses enumvalue SYM_STRUCT defined in symbol.h
      uses enumvalue SYM_UNION defined in symbol.h
      uses enumvalue SYM_ENUM defined in symbol.h
      uses enumvalue SYM_RESTRICT defined in symbol.h
      uses enumvalue SYM_FN defined in symbol.h
      uses macro definition MOD_STATIC defined in symbol.h
      uses macro definition MOD_EXTERN defined in symbol.h
      uses function sparse_error(struct position,const char *,...) defined in lib.c
      uses variable symbol::pos defined in struct.c
      uses function initializer(struct expression **,struct token *) defined in parse.c
      uses variable symbol::initializer defined in struct.c
      uses macro definition MOD_INLINE defined in symbol.h
      uses function add_symbol(struct symbol_list **,struct symbol *) defined in symbol.h
      uses function check_declaration(struct symbol *) defined in symbol.c
      uses variable symbol::same_symbol defined in struct.c
      uses variable symbol::definition defined in struct.c
   function ctype_integer(int,int) in line 144
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses enumvalue CUInt defined in parse.c
      uses enumvalue CInt defined in parse.c
   function copy_statement(struct statement *,struct statement *) in line 146
      protection public
      11 lines of code
      2 parameters
      1 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable src defined in sm_user_data3.c
      uses variable statement::stmts defined in parse.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses variable statement::args defined in parse.h
      uses variable statement::ret defined in parse.h
      uses variable statement::inline_fn defined in parse.h
   function inline_function(struct expression *,struct symbol *) in line 147
      protection public
      61 lines of code
      2 parameters
      5 conditional paths
      uses variable sym defined in smatch_type.c
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::base_type defined in struct.c
      uses variable expression::args defined in expression.h
      uses function alloc_statement(struct position,int) defined in expression.h
      uses variable expression::pos defined in expression.h
      uses enumvalue STMT_COMPOUND defined in parse.h
      uses variable name defined in smatch_type.c
      uses function sparse_error(struct position,const char *,...) defined in lib.c
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_STATEMENT defined in expression.h
      uses variable expression::statement defined in expression.h
      uses variable expression::ctype defined in expression.h
      uses variable symbol::inline_symbol_list defined in struct.c
      uses macro definition NULL defined in sm_implied3.c
      uses macro definition PREPARE_PTR_LIST defined in ptrlist.h
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses function alloc_symbol(struct position,int) defined in symbol.c
      uses enumvalue SYM_NODE defined in symbol.h
      uses function add_symbol(struct symbol_list **,struct symbol *) defined in symbol.h
      uses macro definition NEXT_PTR_LIST defined in ptrlist.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses macro definition FINISH_PTR_LIST defined in ptrlist.h
      uses function copy_statement(struct statement *,struct statement *) defined in inline.c
      uses variable symbol::stmt defined in struct.c
      uses enumvalue STMT_DECLARATION defined in parse.h
      uses variable statement::declaration defined in parse.h
      uses variable statement::args defined in parse.h
      uses variable statement::inline_fn defined in parse.h
      uses function evaluate_statement(struct statement *) defined in evaluate.c
   function uninline(struct symbol *) in line 148
      protection public
      15 lines of code
      1 parameters
      1 conditional paths
      uses variable sym defined in smatch_type.c
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::base_type defined in struct.c
      uses variable p defined in cond_expr2.c
      uses variable symbol::symbol_list defined in struct.c
      uses variable symbol::inline_symbol_list defined in struct.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses function alloc_statement(struct position,int) defined in expression.h
      uses enumvalue STMT_COMPOUND defined in parse.h
      uses function copy_statement(struct statement *,struct statement *) defined in inline.c
   function init_parser(int) in line 149
      protection public
      22 lines of code
      1 parameters
      4 conditional paths
      uses macro definition ARRAY_SIZE defined in lib.h
      uses variable ptr defined in sm_null_deref2.c
      uses variable sym defined in smatch_type.c
      uses function create_symbol(int,const char *,int,int) defined in symbol.c
      uses enumvalue SYM_KEYWORD defined in symbol.h
      uses variable symbol::ident defined in struct.c
      uses variable ident::keyword defined in token.h
      uses enumvalue NS_TYPEDEF defined in symbol.h
      uses variable ident::reserved defined in token.h
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::modifiers defined in struct.c
      uses variable ctype::base_type defined in struct.c
      uses variable symbol::op defined in struct.c
      uses variable ignored_attributes defined in parse.c
      uses variable init_keyword::name defined in parse.c
      uses enumvalue NS_KEYWORD defined in symbol.h
   variable statement::@106 in line 129
      protection public
   variable statement::args in line 72
      protection public
   variable statement::asm_clobbers in line 121
      protection public
   variable statement::asm_inputs in line 120
      protection public
   variable statement::asm_labels in line 122
      protection public
   variable statement::asm_outputs in line 119
      protection public
   variable statement::asm_string in line 118
      protection public
   variable statement::bb_conditional in line 109
      protection public
   variable statement::bb_target in line 110
      protection public
   variable statement::case_expression in line 79
      protection public
   variable statement::case_label in line 82
      protection public
   variable statement::case_statement in line 81
      protection public
   variable statement::case_to in line 80
      protection public
   variable statement::context in line 57
      protection public
   variable statement::declaration in line 53
      protection public
   variable statement::expression in line 56
      protection public
   variable statement::goto_expression in line 105
      protection public
   variable statement::goto_label in line 102
      protection public
   variable statement::if_conditional in line 64
      protection public
   variable statement::if_false in line 66
      protection public
   variable statement::if_true in line 65
      protection public
   variable statement::inline_fn in line 71
      protection public
   variable statement::iterator_break in line 90
      protection public
   variable statement::iterator_continue in line 91
      protection public
   variable statement::iterator_post_condition in line 99
      protection public
   variable statement::iterator_post_statement in line 98
      protection public
   variable statement::iterator_pre_condition in line 94
      protection public
   variable statement::iterator_pre_statement in line 93
      protection public
   variable statement::iterator_statement in line 96
      protection public
   variable statement::iterator_syms in line 92
      protection public
   variable statement::label_identifier in line 75
      protection public
   variable statement::label_statement in line 76
      protection public
   variable statement::multi_from in line 113
      protection public
   variable statement::multi_target in line 115
      protection public
   variable statement::multi_to in line 114
      protection public
   variable statement::parent in line 50
      protection public
   variable statement::pos in line 149
      protection public
   variable statement::range_expression in line 125
      protection public
   variable statement::range_high in line 127
      protection public
   variable statement::range_low in line 126
      protection public
   variable statement::ret in line 70
      protection public
   variable statement::ret_target in line 61
      protection public
   variable statement::ret_value in line 60
      protection public
   variable statement::stmts in line 69
      protection public
   variable statement::switch_break in line 87
      protection public
   variable statement::switch_case in line 87
      protection public
   variable statement::switch_expression in line 85
      protection public
   variable statement::switch_statement in line 86
      protection public
   variable statement::target_list in line 106
      protection public
   variable statement::type in line 149
      protection public
   variable statement::@105::@108 in line 54
      protection public
   variable statement::@105::@110 in line 58
      protection public
   variable statement::@105::@112 in line 62
      protection public
   variable statement::@105::@114 in line 67
      protection public
   variable statement::@105::@116 in line 73
      protection public
   variable statement::@105::@118 in line 77
      protection public
   variable statement::@105::@120 in line 83
      protection public
   variable statement::@105::@122 in line 88
      protection public
   variable statement::@105::@124 in line 100
      protection public
   variable statement::@105::@126 in line 107
      protection public
   variable statement::@105::@128 in line 111
      protection public
   variable statement::@105::@130 in line 116
      protection public
   variable statement::@105::@132 in line 123
      protection public
   variable statement::@105::@134 in line 128
      protection public
   variable statement::@105::@107::declaration in line 53
      protection public
   variable statement::@105::@109::context in line 57
      protection public
   variable statement::@105::@109::expression in line 56
      protection public
   variable statement::@105::@111::ret_target in line 61
      protection public
   variable statement::@105::@111::ret_value in line 60
      protection public
   variable statement::@105::@113::if_conditional in line 64
      protection public
   variable statement::@105::@113::if_false in line 66
      protection public
   variable statement::@105::@113::if_true in line 65
      protection public
   variable statement::@105::@115::args in line 72
      protection public
   variable statement::@105::@115::inline_fn in line 71
      protection public
   variable statement::@105::@115::ret in line 70
      protection public
   variable statement::@105::@115::stmts in line 69
      protection public
   variable statement::@105::@117::label_identifier in line 75
      protection public
   variable statement::@105::@117::label_statement in line 76
      protection public
   variable statement::@105::@119::case_expression in line 79
      protection public
   variable statement::@105::@119::case_label in line 82
      protection public
   variable statement::@105::@119::case_statement in line 81
      protection public
   variable statement::@105::@119::case_to in line 80
      protection public
   variable statement::@105::@121::switch_break in line 87
      protection public
   variable statement::@105::@121::switch_case in line 87
      protection public
   variable statement::@105::@121::switch_expression in line 85
      protection public
   variable statement::@105::@121::switch_statement in line 86
      protection public
   variable statement::@105::@123::iterator_break in line 90
      protection public
   variable statement::@105::@123::iterator_continue in line 91
      protection public
   variable statement::@105::@123::iterator_post_condition in line 99
      protection public
   variable statement::@105::@123::iterator_post_statement in line 98
      protection public
   variable statement::@105::@123::iterator_pre_condition in line 94
      protection public
   variable statement::@105::@123::iterator_pre_statement in line 93
      protection public
   variable statement::@105::@123::iterator_statement in line 96
      protection public
   variable statement::@105::@123::iterator_syms in line 92
      protection public
   variable statement::@105::@125::goto_expression in line 105
      protection public
   variable statement::@105::@125::goto_label in line 102
      protection public
   variable statement::@105::@125::target_list in line 106
      protection public
   variable statement::@105::@127::bb_conditional in line 109
      protection public
   variable statement::@105::@127::bb_target in line 110
      protection public
   variable statement::@105::@129::multi_from in line 113
      protection public
   variable statement::@105::@129::multi_target in line 115
      protection public
   variable statement::@105::@129::multi_to in line 114
      protection public
   variable statement::@105::@131::asm_clobbers in line 121
      protection public
   variable statement::@105::@131::asm_inputs in line 120
      protection public
   variable statement::@105::@131::asm_labels in line 122
      protection public
   variable statement::@105::@131::asm_outputs in line 119
      protection public
   variable statement::@105::@131::asm_string in line 118
      protection public
   variable statement::@105::@133::range_expression in line 125
      protection public
   variable statement::@105::@133::range_high in line 127
      protection public
   variable statement::@105::@133::range_low in line 126
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/pre-process.c
module pre-process.c
   macro definition INCLUDEPATHS in line 49
      protection public
   macro definition dirty_stream in line 63
      protection public
   macro definition end_group in line 72
      protection public
   macro definition nesting_error in line 83
      protection public
   variable false_nesting in line 47
      protection public
   variable includepath in line 50
      protection public
   variable quote_includepath in line 57
      protection public
   variable angle_includepath in line 58
      protection public
   variable isys_includepath in line 59
      protection public
   variable sys_includepath in line 60
      protection public
   variable dirafter_includepath in line 61
      protection public
   function alloc_token(struct position *) in line 90
      protection public
      10 lines of code
      1 parameters
      1 conditional paths
      uses variable token::pos defined in token.h
      uses variable position::stream defined in lib.h
      uses variable position::line defined in lib.h
      uses variable position::pos defined in lib.h
      uses variable position::whitespace defined in lib.h
      uses function expand(struct token **,struct symbol *) defined in pre-process.c
   function expand(struct token **,struct symbol *) in line 102
      protection public
      38 lines of code
      2 parameters
      5 conditional paths
      uses variable token::ident defined in token.h
      uses variable sym defined in smatch_type.c
      uses variable symbol::arglist defined in struct.c
      uses variable token::count defined in token.h
      uses variable argcount::normal defined in token.h
      uses variable ident::tainted defined in token.h
      uses variable token::pos defined in token.h
      uses variable position::noexpand defined in lib.h
      uses function scan_next(struct token **) defined in pre-process.c
      uses variable token::next defined in token.h
      uses function collect_arguments(struct token *,struct token *,struct arg *,struct token *) defined in pre-process.c
      uses function expand_arguments(int,struct arg *) defined in pre-process.c
      uses function substitute(struct token **,struct token *,struct arg *) defined in pre-process.c
      uses variable symbol::expansion defined in struct.c
      uses variable position::newline defined in lib.h
      uses variable position::whitespace defined in lib.h
   function replace_with_string(struct token *,const char *) in line 104
      protection public
      10 lines of code
      2 parameters
      1 conditional paths
      uses function strlen(char *) defined in sm_overflow6.c
      uses variable str defined in sm_overflow6.c
      uses function memcpy(void *,void *,int) defined in sm_struct_assign1.c
      uses enumvalue TOKEN_STRING defined in token.h
      uses variable token::string defined in token.h
   function replace_with_integer(struct token *,unsigned int) in line 115
      protection public
      7 lines of code
      2 parameters
      1 conditional paths
      uses variable buf defined in sm_fake_assignment.c
      uses function sprintf(char *,char *,char *) defined in sm_overflow6.c
      uses enumvalue TOKEN_NUMBER defined in token.h
      uses variable token::number defined in token.h
   function lookup_macro(struct ident *) in line 123
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses variable sym defined in smatch_type.c
      uses function lookup_symbol(struct ident *,enum namespace) defined in symbol.c
      uses enumvalue NS_MACRO defined in symbol.h
      uses enumvalue NS_UNDEF defined in symbol.h
      uses variable symbol::namespace defined in struct.c
      uses macro definition NULL defined in sm_implied3.c
   function token_defined(struct token *) in line 131
      protection public
      14 lines of code
      1 parameters
      3 conditional paths
      uses enumvalue TOKEN_IDENT defined in token.h
      uses variable sym defined in smatch_type.c
      uses function lookup_macro(struct ident *) defined in pre-process.c
      uses variable token::ident defined in token.h
      uses variable symbol::used_in defined in struct.c
      uses variable file_scope defined in scope.c
      uses function sparse_error(struct position,const char *,...) defined in lib.c
      uses variable token::pos defined in token.h
   function replace_with_defined(struct token *) in line 146
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses function token_defined(struct token *) defined in pre-process.c
      uses enumvalue TOKEN_NUMBER defined in token.h
      uses variable token::number defined in token.h
   function expand_one_symbol(struct token **) in line 155
      protection public
      33 lines of code
      1 parameters
      9 conditional paths
      uses variable sym defined in smatch_type.c
      uses variable token::pos defined in token.h
      uses variable position::noexpand defined in lib.h
      uses function lookup_macro(struct ident *) defined in pre-process.c
      uses variable token::ident defined in token.h
      uses function store_macro_pos(struct token *) defined in macro_table.c
      uses variable symbol::used_in defined in struct.c
      uses variable file_scope defined in scope.c
      uses function expand(struct token **,struct symbol *) defined in pre-process.c
      uses function replace_with_integer(struct token *,unsigned int) defined in pre-process.c
      uses variable position::line defined in lib.h
      uses function replace_with_string(struct token *,const char *) defined in pre-process.c
      uses function stream_name(int) defined in token.h
      uses variable position::stream defined in lib.h
   function scan_next(struct token **) in line 189
      protection public
      12 lines of code
      1 parameters
      3 conditional paths
      uses enumvalue TOKEN_UNTAINT defined in token.h
      uses variable token::ident defined in token.h
      uses variable ident::tainted defined in token.h
      uses variable token::next defined in token.h
   function expand_list(struct token **) in line 202
      protection public
      8 lines of code
      1 parameters
      3 conditional paths
      uses variable token::next defined in token.h
      uses macro definition eof_token defined in token.h
      uses function scan_next(struct token **) defined in pre-process.c
      uses enumvalue TOKEN_IDENT defined in token.h
      uses function expand_one_symbol(struct token **) defined in pre-process.c
      uses function preprocessor_line(struct stream *,struct token **) defined in pre-process.c
   function preprocessor_line(struct stream *,struct token **) in line 211
      protection public
      15 lines of code
      2 parameters
      3 conditional paths
      uses variable token::next defined in token.h
      uses variable token::pos defined in token.h
      uses variable position::newline defined in lib.h
      uses variable eof_token_entry defined in token.h
      uses function handle_preprocessor_line(struct stream *,struct token **,struct token *) defined in pre-process.c
   function collect_arg(struct token *,int,struct position *) in line 213
      protection public
      44 lines of code
      3 parameters
      11 conditional paths
      uses variable input_streams defined in token.h
      uses variable token::pos defined in token.h
      uses variable position::stream defined in lib.h
      uses variable p defined in cond_expr2.c
      uses variable token::next defined in token.h
      uses macro definition eof_token defined in token.h
      uses function scan_next(struct token **) defined in pre-process.c
      uses variable position::newline defined in lib.h
      uses variable position::noexpand defined in lib.h
      uses function sparse_error(struct position,const char *,...) defined in lib.c
      uses function preprocessor_line(struct stream *,struct token **) defined in pre-process.c
      uses enumvalue TOKEN_STREAMEND defined in token.h
      uses enumvalue TOKEN_STREAMBEGIN defined in token.h
      uses variable eof_token_entry defined in token.h
      uses variable false_nesting defined in pre-process.c
      uses variable position::line defined in lib.h
      uses variable position::pos defined in lib.h
   function collect_arguments(struct token *,struct token *,struct arg *,struct token *) in line 271
      protection public
      71 lines of code
      4 parameters
      22 conditional paths
      uses variable token::count defined in token.h
      uses variable argcount::normal defined in token.h
      uses variable token::next defined in token.h
      uses macro definition NULL defined in sm_implied3.c
      uses function collect_arg(struct token *,int,struct position *) defined in pre-process.c
      uses variable token::pos defined in token.h
      uses macro definition eof_token defined in token.h
      uses variable p defined in cond_expr2.c
      uses variable arg::arg defined in pre-process.c
      uses variable arg::n_normal defined in pre-process.c
      uses variable arg::n_quoted defined in pre-process.c
      uses variable arg::n_str defined in pre-process.c
      uses function sparse_error(struct position,const char *,...) defined in lib.c
      uses function show_token(const struct token *) defined in token.h
   function dup_list(struct token *) in line 343
      protection public
      14 lines of code
      1 parameters
      2 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses variable p defined in cond_expr2.c
      uses macro definition eof_token defined in token.h
      uses variable token::next defined in token.h
   function show_token_sequence(struct token *,int) in line 358
      protection public
      27 lines of code
      2 parameters
      5 conditional paths
      uses macro definition MAX_STRING defined in token.h
      uses variable ptr defined in sm_null_deref2.c
      uses macro definition eof_token defined in token.h
      uses function quote_token(const struct token *) defined in token.h
      uses function show_token(const struct token *) defined in token.h
      uses function strlen(char *) defined in sm_overflow6.c
      uses function sparse_error(struct position,const char *,...) defined in lib.c
      uses variable token::pos defined in token.h
      uses function memcpy(void *,void *,int) defined in sm_struct_assign1.c
      uses variable token::next defined in token.h
      uses variable position::whitespace defined in lib.h
   function stringify(struct token *) in line 386
      protection public
      15 lines of code
      1 parameters
      1 conditional paths
      uses function show_token_sequence(struct token *,int) defined in pre-process.c
      uses function strlen(char *) defined in sm_overflow6.c
      uses function memcpy(void *,void *,int) defined in sm_struct_assign1.c
      uses variable string::data defined in token.h
      uses variable token::pos defined in token.h
      uses enumvalue TOKEN_STRING defined in token.h
      uses variable token::string defined in token.h
      uses variable token::next defined in token.h
      uses variable eof_token_entry defined in token.h
   function expand_arguments(int,struct arg *) in line 402
      protection public
      22 lines of code
      2 parameters
      7 conditional paths
      uses variable arg::arg defined in pre-process.c
      uses variable eof_token_entry defined in token.h
      uses variable arg::n_str defined in pre-process.c
      uses variable arg::str defined in pre-process.c
      uses function stringify(struct token *) defined in pre-process.c
      uses variable arg::n_normal defined in pre-process.c
      uses variable arg::n_quoted defined in pre-process.c
      uses variable arg::expanded defined in pre-process.c
      uses macro definition NULL defined in sm_implied3.c
      uses macro definition eof_token defined in token.h
      uses function dup_list(struct token *) defined in pre-process.c
      uses function expand_list(struct token **) defined in pre-process.c
   function combine(struct token *,struct token *,char *) in line 402
      protection public
      53 lines of code
      3 parameters
      17 conditional paths
      uses enumvalue TOKEN_IDENT defined in token.h
      uses enumvalue TOKEN_NUMBER defined in token.h
      uses enumvalue TOKEN_SPECIAL defined in token.h
      uses enumvalue TOKEN_ERROR defined in token.h
      uses variable token::ident defined in token.h
      uses enumvalue TOKEN_CHAR defined in token.h
      uses enumvalue TOKEN_WIDE_CHAR defined in token.h
      uses enumvalue TOKEN_STRING defined in token.h
      uses enumvalue TOKEN_WIDE_STRING defined in token.h
      uses function strcpy(char *,char *,int) defined in sm_overflow3.c
      uses variable p defined in cond_expr2.c
      uses function show_token(const struct token *) defined in token.h
      uses function strlen(char *) defined in sm_overflow6.c
      uses variable token::special defined in token.h
   function merge(struct token *,struct token *) in line 492
      protection public
      50 lines of code
      2 parameters
      10 conditional paths
      uses function combine(struct token *,struct token *,char *) defined in pre-process.c
      uses enumvalue TOKEN_IDENT defined in token.h
      uses variable token::ident defined in token.h
      uses function built_in_ident(const char *) defined in token.h
      uses variable token::pos defined in token.h
      uses variable position::noexpand defined in lib.h
      uses enumvalue TOKEN_NUMBER defined in token.h
      uses variable token::number defined in token.h
      uses function strlen(char *) defined in sm_overflow6.c
      uses function memcpy(void *,void *,int) defined in sm_struct_assign1.c
      uses enumvalue TOKEN_SPECIAL defined in token.h
      uses enumvalue SPECIAL_BASE defined in token.h
      uses enumvalue SPECIAL_ARG_SEPARATOR defined in token.h
      uses variable combinations defined in token.h
      uses variable token::special defined in token.h
      uses enumvalue TOKEN_WIDE_CHAR defined in token.h
      uses enumvalue TOKEN_WIDE_STRING defined in token.h
      uses variable token::string defined in token.h
      uses enumvalue TOKEN_WIDE_CHAR_EMBEDDED_0 defined in token.h
      uses enumvalue TOKEN_WIDE_CHAR_EMBEDDED_3 defined in token.h
      uses variable token::embedded defined in token.h
      uses function sparse_error(struct position,const char *,...) defined in lib.c
   function dup_token(struct token *,struct position *) in line 543
      protection public
      10 lines of code
      2 parameters
      1 conditional paths
      uses function alloc_token(struct position *) defined in pre-process.c
      uses variable token::pos defined in token.h
      uses variable position::newline defined in lib.h
      uses variable position::whitespace defined in lib.h
      uses variable token::number defined in token.h
      uses variable position::noexpand defined in lib.h
   function copy(struct token **,struct token *,int *) in line 554
      protection public
      18 lines of code
      3 parameters
      4 conditional paths
      uses variable token::count defined in token.h
      uses macro definition eof_token defined in token.h
      uses function dup_token(struct token *,struct position *) defined in pre-process.c
      uses variable token::pos defined in token.h
      uses enumvalue TOKEN_IDENT defined in token.h
      uses variable token::ident defined in token.h
      uses variable ident::tainted defined in token.h
      uses variable position::noexpand defined in lib.h
      uses variable token::next defined in token.h
      uses variable eof_token_entry defined in token.h
   function handle_kludge(struct token **,struct arg *) in line 573
      protection public
      20 lines of code
      2 parameters
      5 conditional paths
      uses function v(int,...) defined in builtin_va_arg_pack.c
      uses enumvalue TOKEN_CONCAT defined in token.h
      uses variable p defined in cond_expr2.c
      uses macro definition eof_token defined in token.h
   function substitute(struct token **,struct token *,struct arg *) in line 594
      protection public
      102 lines of code
      3 parameters
      19 conditional paths
      uses variable position::pos defined in lib.h
      uses macro definition eof_token defined in token.h
      uses variable token::next defined in token.h
      uses variable arg::arg defined in pre-process.c
      uses enumvalue TOKEN_GNU_KLUDGE defined in token.h
      uses function handle_kludge(struct token **,struct arg *) defined in pre-process.c
      uses function dup_token(struct token *,struct position *) defined in pre-process.c
      uses enumvalue TOKEN_SPECIAL defined in token.h
      uses enumvalue TOKEN_STR_ARGUMENT defined in token.h
      uses variable token::argnum defined in token.h
      uses variable arg::str defined in pre-process.c
      uses variable token::count defined in token.h
      uses variable arg::n_str defined in pre-process.c
      uses enumvalue TOKEN_QUOTED_ARGUMENT defined in token.h
      uses variable arg::n_quoted defined in pre-process.c
      uses enumvalue TOKEN_MACRO_ARGUMENT defined in token.h
      uses variable arg::expanded defined in pre-process.c
      uses variable arg::n_normal defined in pre-process.c
      uses function copy(struct token **,struct token *,int *) defined in pre-process.c
      uses variable token::pos defined in token.h
      uses variable position::newline defined in lib.h
      uses variable position::whitespace defined in lib.h
      uses enumvalue TOKEN_CONCAT defined in token.h
      uses enumvalue TOKEN_IDENT defined in token.h
      uses variable token::ident defined in token.h
      uses variable ident::tainted defined in token.h
      uses variable position::noexpand defined in lib.h
      uses function merge(struct token *,struct token *) defined in pre-process.c
      uses variable eof_token_entry defined in token.h
   function token_name_sequence(struct token *,int,struct token *) in line 736
      protection public
      20 lines of code
      3 parameters
      4 conditional paths
      uses variable ptr defined in sm_null_deref2.c
      uses macro definition eof_token defined in token.h
      uses variable token::string defined in token.h
      uses variable string::data defined in token.h
      uses enumvalue TOKEN_STRING defined in token.h
      uses function show_token(const struct token *) defined in token.h
      uses function strlen(char *) defined in sm_overflow6.c
      uses function memcpy(void *,void *,int) defined in sm_struct_assign1.c
      uses variable token::next defined in token.h
      uses function sparse_error(struct position,const char *,...) defined in lib.c
      uses variable token::pos defined in token.h
   function already_tokenized(const char *) in line 757
      protection public
      23 lines of code
      1 parameters
      7 conditional paths
      uses function hash_stream(const char *) defined in token.h
      uses variable input_streams defined in token.h
      uses variable stream::path defined in token.h
      uses enumvalue CONSTANT_FILE_YES defined in token.h
      uses function lookup_macro(struct ident *) defined in pre-process.c
   function set_stream_include_path(struct stream *) in line 822
      protection public
      18 lines of code
      1 parameters
      3 conditional paths
      uses variable stream::path defined in token.h
      uses variable p defined in cond_expr2.c
      uses variable stream::name defined in token.h
      uses function malloc(int) defined in sm_buf_size2.c
      uses function memcpy(void *,void *,int) defined in sm_struct_assign1.c
      uses variable includepath defined in pre-process.c
   function try_include(const char *,const char *,int,struct token **,const char **) in line 841
      protection public
      24 lines of code
      5 parameters
      4 conditional paths
      uses variable stream::fd defined in token.h
      uses function strlen(char *) defined in sm_overflow6.c
      uses variable stream::path defined in token.h
      uses function memcpy(void *,void *,int) defined in sm_struct_assign1.c
      uses function already_tokenized(const char *) defined in pre-process.c
      uses function tokenize(const char *,int,struct token *,const char **) defined in token.h
      uses variable stream::next_path defined in token.h
   function do_include_path(const char **,struct token **,struct token *,const char *,int) in line 866
      protection public
      11 lines of code
      5 parameters
      3 conditional paths
      uses variable stream::path defined in token.h
      uses macro definition NULL defined in sm_implied3.c
      uses function try_include(const char *,const char *,int,struct token **,const char **) defined in pre-process.c
   function free_preprocessor_line(struct token *) in line 878
      protection public
      9 lines of code
      1 parameters
      2 conditional paths
      uses enumvalue TOKEN_EOF defined in token.h
      uses variable token::next defined in token.h
   function handle_include_path(struct stream *,struct token **,struct token *,int) in line 888
      protection public
      51 lines of code
      4 parameters
      9 conditional paths
      uses variable token::next defined in token.h
      uses function expect(struct token *,int,const char *) defined in lib.c
      uses function expand_list(struct token **) defined in pre-process.c
      uses function token_name_sequence(struct token *,int,struct token *) defined in pre-process.c
      uses function strlen(char *) defined in sm_overflow6.c
      uses function try_include(const char *,const char *,int,struct token **,const char **) defined in pre-process.c
      uses variable includepath defined in pre-process.c
      uses variable stream::next_path defined in token.h
      uses function set_stream_include_path(struct stream *) defined in pre-process.c
      uses variable angle_includepath defined in pre-process.c
      uses variable quote_includepath defined in pre-process.c
      uses function do_include_path(const char **,struct token **,struct token *,const char *,int) defined in pre-process.c
      uses function error_die(struct position,const char *,...) defined in lib.c
      uses variable token::pos defined in token.h
   function handle_include(struct stream *,struct token **,struct token *) in line 940
      protection public
      4 lines of code
      3 parameters
      1 conditional paths
      uses function handle_include_path(struct stream *,struct token **,struct token *,int) defined in pre-process.c
   function handle_include_next(struct stream *,struct token **,struct token *) in line 945
      protection public
      4 lines of code
      3 parameters
      1 conditional paths
      uses function handle_include_path(struct stream *,struct token **,struct token *,int) defined in pre-process.c
   function handle_argv_include(struct stream *,struct token **,struct token *) in line 950
      protection public
      4 lines of code
      3 parameters
      1 conditional paths
      uses function handle_include_path(struct stream *,struct token **,struct token *,int) defined in pre-process.c
   function token_different(struct token *,struct token *) in line 955
      protection public
      52 lines of code
      2 parameters
      19 conditional paths
      uses enumvalue TOKEN_IDENT defined in token.h
      uses variable token::ident defined in token.h
      uses enumvalue TOKEN_ARG_COUNT defined in token.h
      uses enumvalue TOKEN_UNTAINT defined in token.h
      uses enumvalue TOKEN_CONCAT defined in token.h
      uses enumvalue TOKEN_GNU_KLUDGE defined in token.h
      uses enumvalue TOKEN_NUMBER defined in token.h
      uses variable token::number defined in token.h
      uses enumvalue TOKEN_SPECIAL defined in token.h
      uses variable token::special defined in token.h
      uses enumvalue TOKEN_MACRO_ARGUMENT defined in token.h
      uses enumvalue TOKEN_QUOTED_ARGUMENT defined in token.h
      uses enumvalue TOKEN_STR_ARGUMENT defined in token.h
      uses variable token::argnum defined in token.h
      uses enumvalue TOKEN_CHAR_EMBEDDED_0 defined in token.h
      uses enumvalue TOKEN_CHAR_EMBEDDED_3 defined in token.h
      uses enumvalue TOKEN_WIDE_CHAR_EMBEDDED_0 defined in token.h
      uses enumvalue TOKEN_WIDE_CHAR_EMBEDDED_3 defined in token.h
      uses variable token::embedded defined in token.h
      uses enumvalue TOKEN_CHAR defined in token.h
      uses enumvalue TOKEN_WIDE_CHAR defined in token.h
      uses enumvalue TOKEN_STRING defined in token.h
      uses enumvalue TOKEN_WIDE_STRING defined in token.h
      uses variable s1 defined in designated-init.c
      uses variable s2 defined in designated-init.c
      uses variable token::string defined in token.h
   function token_list_different(struct token *,struct token *) in line 1008
      protection public
      13 lines of code
      2 parameters
      5 conditional paths
      uses function token_different(struct token *,struct token *) defined in pre-process.c
      uses variable token::next defined in token.h
   function set_arg_count(struct token *) in line 1022
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses enumvalue TOKEN_ARG_COUNT defined in token.h
      uses variable token::count defined in token.h
      uses variable argcount::normal defined in token.h
      uses variable argcount::quoted defined in token.h
      uses variable argcount::str defined in token.h
      uses variable argcount::vararg defined in token.h
   function parse_arguments(struct token *) in line 1029
      protection public
      98 lines of code
      1 parameters
      25 conditional paths
      uses variable token::next defined in token.h
      uses variable token::count defined in token.h
      uses function set_arg_count(struct token *) defined in pre-process.c
      uses variable eof_token_entry defined in token.h
      uses enumvalue TOKEN_IDENT defined in token.h
      uses variable argcount::normal defined in token.h
      uses enumvalue SPECIAL_ELLIPSIS defined in token.h
      uses macro definition eof_token defined in token.h
      uses function sparse_error(struct position,const char *,...) defined in lib.c
      uses macro definition NULL defined in sm_implied3.c
      uses function show_token(const struct token *) defined in token.h
   function try_arg(struct token *,enum token_type,struct token *) in line 1128
      protection public
      39 lines of code
      3 parameters
      7 conditional paths
      uses variable token::ident defined in token.h
      uses enumvalue TOKEN_IDENT defined in token.h
      uses variable token::next defined in token.h
      uses macro definition eof_token defined in token.h
      uses variable token::argnum defined in token.h
      uses enumvalue TOKEN_MACRO_ARGUMENT defined in token.h
      uses variable argcount::normal defined in token.h
      uses enumvalue TOKEN_QUOTED_ARGUMENT defined in token.h
      uses variable argcount::quoted defined in token.h
      uses variable argcount::str defined in token.h
      uses variable argcount::vararg defined in token.h
      uses enumvalue TOKEN_ERROR defined in token.h
   function handle_hash(struct token **,struct token *) in line 1168
      protection public
      19 lines of code
      2 parameters
      4 conditional paths
      uses variable p defined in cond_expr2.c
      uses variable token::next defined in token.h
      uses function try_arg(struct token *,enum token_type,struct token *) defined in pre-process.c
      uses enumvalue TOKEN_STR_ARGUMENT defined in token.h
      uses variable token::pos defined in token.h
      uses variable position::whitespace defined in lib.h
      uses variable position::noexpand defined in lib.h
      uses function sparse_error(struct position,const char *,...) defined in lib.c
      uses macro definition NULL defined in sm_implied3.c
   function handle_hashhash(struct token *,struct token *) in line 1189
      protection public
      52 lines of code
      2 parameters
      10 conditional paths
      uses function try_arg(struct token *,enum token_type,struct token *) defined in pre-process.c
      uses enumvalue TOKEN_QUOTED_ARGUMENT defined in token.h
      uses variable token::next defined in token.h
      uses enumvalue SPECIAL_HASHHASH defined in token.h
      uses enumvalue TOKEN_CONCAT defined in token.h
      uses macro definition eof_token defined in token.h
      uses function handle_hash(struct token **,struct token *) defined in pre-process.c
      uses macro definition NULL defined in sm_implied3.c
      uses enumvalue TOKEN_GNU_KLUDGE defined in token.h
      uses function sparse_error(struct position,const char *,...) defined in lib.c
      uses variable token::pos defined in token.h
   function parse_expansion(struct token *,struct token *,struct ident *) in line 1242
      protection public
      38 lines of code
      3 parameters
      10 conditional paths
      uses variable p defined in cond_expr2.c
      uses enumvalue SPECIAL_HASHHASH defined in token.h
      uses macro definition eof_token defined in token.h
      uses variable token::next defined in token.h
      uses function handle_hash(struct token **,struct token *) defined in pre-process.c
      uses macro definition NULL defined in sm_implied3.c
      uses function handle_hashhash(struct token *,struct token *) defined in pre-process.c
      uses function try_arg(struct token *,enum token_type,struct token *) defined in pre-process.c
      uses enumvalue TOKEN_MACRO_ARGUMENT defined in token.h
      uses enumvalue TOKEN_ERROR defined in token.h
      uses function alloc_token(struct position *) defined in pre-process.c
      uses variable token::pos defined in token.h
      uses enumvalue TOKEN_UNTAINT defined in token.h
      uses variable token::ident defined in token.h
      uses variable name defined in smatch_type.c
      uses function sparse_error(struct position,const char *,...) defined in lib.c
   function do_handle_define(struct stream *,struct token **,struct token *,int) in line 1281
      protection public
      74 lines of code
      4 parameters
      16 conditional paths
      uses variable token::next defined in token.h
      uses variable sym defined in smatch_type.c
      uses variable name defined in smatch_type.c
      uses enumvalue TOKEN_IDENT defined in token.h
      uses function sparse_error(struct position,const char *,...) defined in lib.c
      uses variable token::pos defined in token.h
      uses variable token::ident defined in token.h
      uses macro definition NULL defined in sm_implied3.c
      uses variable position::whitespace defined in lib.h
      uses function parse_arguments(struct token *) defined in pre-process.c
      uses macro definition eof_token defined in token.h
      uses function warning(struct position,const char *,...) defined in lib.c
      uses function parse_expansion(struct token *,struct token *,struct ident *) defined in pre-process.c
      uses function lookup_symbol(struct ident *,enum namespace) defined in symbol.c
      uses enumvalue NS_MACRO defined in symbol.h
      uses enumvalue NS_UNDEF defined in symbol.h
      uses variable symbol::attr defined in struct.c
      uses variable symbol::namespace defined in struct.c
      uses function token_list_different(struct token *,struct token *) defined in pre-process.c
      uses variable symbol::expansion defined in struct.c
      uses variable symbol::arglist defined in struct.c
      uses macro definition SYM_ATTR_NORMAL defined in symbol.h
      uses variable symbol::used_in defined in struct.c
      uses variable file_scope defined in scope.c
      uses function info(struct position,const char *,...) defined in lib.c
      uses variable symbol::pos defined in struct.c
      uses variable symbol::scope defined in struct.c
      uses function alloc_symbol(struct position,int) defined in symbol.c
      uses enumvalue SYM_NODE defined in symbol.h
      uses function bind_symbol(struct symbol *,struct ident *,enum namespace) defined in symbol.c
   function handle_define(struct stream *,struct token **,struct token *) in line 1356
      protection public
      4 lines of code
      3 parameters
      1 conditional paths
      uses function do_handle_define(struct stream *,struct token **,struct token *,int) defined in pre-process.c
      uses macro definition SYM_ATTR_NORMAL defined in symbol.h
   function handle_weak_define(struct stream *,struct token **,struct token *) in line 1361
      protection public
      4 lines of code
      3 parameters
      1 conditional paths
      uses function do_handle_define(struct stream *,struct token **,struct token *,int) defined in pre-process.c
      uses macro definition SYM_ATTR_WEAK defined in symbol.h
   function handle_strong_define(struct stream *,struct token **,struct token *) in line 1366
      protection public
      4 lines of code
      3 parameters
      1 conditional paths
      uses function do_handle_define(struct stream *,struct token **,struct token *,int) defined in pre-process.c
      uses macro definition SYM_ATTR_STRONG defined in symbol.h
   function do_handle_undef(struct stream *,struct token **,struct token *,int) in line 1371
      protection public
      30 lines of code
      4 parameters
      7 conditional paths
      uses variable token::next defined in token.h
      uses variable sym defined in smatch_type.c
      uses enumvalue TOKEN_IDENT defined in token.h
      uses function sparse_error(struct position,const char *,...) defined in lib.c
      uses variable token::pos defined in token.h
      uses function lookup_symbol(struct ident *,enum namespace) defined in symbol.c
      uses variable token::ident defined in token.h
      uses enumvalue NS_MACRO defined in symbol.h
      uses enumvalue NS_UNDEF defined in symbol.h
      uses variable symbol::attr defined in struct.c
      uses variable symbol::namespace defined in struct.c
      uses macro definition SYM_ATTR_NORMAL defined in symbol.h
      uses variable symbol::scope defined in struct.c
      uses variable file_scope defined in scope.c
      uses function alloc_symbol(struct position,int) defined in symbol.c
      uses enumvalue SYM_NODE defined in symbol.h
      uses function bind_symbol(struct symbol *,struct ident *,enum namespace) defined in symbol.c
      uses variable symbol::used_in defined in struct.c
      uses macro definition NULL defined in sm_implied3.c
   function handle_undef(struct stream *,struct token **,struct token *) in line 1402
      protection public
      4 lines of code
      3 parameters
      1 conditional paths
      uses function do_handle_undef(struct stream *,struct token **,struct token *,int) defined in pre-process.c
      uses macro definition SYM_ATTR_NORMAL defined in symbol.h
   function handle_strong_undef(struct stream *,struct token **,struct token *) in line 1407
      protection public
      4 lines of code
      3 parameters
      1 conditional paths
      uses function do_handle_undef(struct stream *,struct token **,struct token *,int) defined in pre-process.c
      uses macro definition SYM_ATTR_STRONG defined in symbol.h
   function preprocessor_if(struct stream *,struct token *,int) in line 1412
      protection public
      10 lines of code
      3 parameters
      2 conditional paths
      uses variable false_nesting defined in pre-process.c
      uses enumvalue TOKEN_SKIP_GROUPS defined in token.h
      uses enumvalue TOKEN_IF defined in token.h
      uses function free_preprocessor_line(struct token *) defined in pre-process.c
      uses variable token::next defined in token.h
      uses variable stream::top_if defined in token.h
   function handle_ifdef(struct stream *,struct token **,struct token *) in line 1423
      protection public
      14 lines of code
      3 parameters
      3 conditional paths
      uses variable token::next defined in token.h
      uses variable arg::arg defined in pre-process.c
      uses enumvalue TOKEN_IDENT defined in token.h
      uses function token_defined(struct token *) defined in pre-process.c
      uses macro definition dirty_stream defined in pre-process.c
      uses variable false_nesting defined in pre-process.c
      uses function sparse_error(struct position,const char *,...) defined in lib.c
      uses variable token::pos defined in token.h
      uses function preprocessor_if(struct stream *,struct token *,int) defined in pre-process.c
   function handle_ifndef(struct stream *,struct token **,struct token *) in line 1438
      protection public
      24 lines of code
      3 parameters
      6 conditional paths
      uses variable token::next defined in token.h
      uses variable arg::arg defined in pre-process.c
      uses enumvalue TOKEN_IDENT defined in token.h
      uses variable stream::dirty defined in token.h
      uses variable stream::ifndef defined in token.h
      uses variable stream::protect defined in token.h
      uses variable token::ident defined in token.h
      uses function token_defined(struct token *) defined in pre-process.c
      uses macro definition dirty_stream defined in pre-process.c
      uses variable false_nesting defined in pre-process.c
      uses function sparse_error(struct position,const char *,...) defined in lib.c
      uses variable token::pos defined in token.h
      uses function preprocessor_if(struct stream *,struct token *,int) defined in pre-process.c
      uses function show_token_sequence(struct token *,int) defined in pre-process.c
   function expression_value(struct token **) in line 1469
      protection public
      57 lines of code
      1 parameters
      14 conditional paths
      uses variable p defined in cond_expr2.c
      uses macro definition NULL defined in sm_implied3.c
      uses macro definition eof_token defined in token.h
      uses function scan_next(struct token **) defined in pre-process.c
      uses enumvalue TOKEN_IDENT defined in token.h
      uses function expand_one_symbol(struct token **) defined in pre-process.c
      uses enumvalue TOKEN_ZERO_IDENT defined in token.h
      uses function replace_with_defined(struct token *) defined in pre-process.c
      uses function sparse_error(struct position,const char *,...) defined in lib.c
      uses macro definition constant_expression defined in expression.h
      uses function show_token_sequence(struct token *,int) defined in pre-process.c
      uses function get_expression_value(struct expression *) defined in expand.c
   function handle_if(struct stream *,struct token **,struct token *) in line 1527
      protection public
      9 lines of code
      3 parameters
      2 conditional paths
      uses variable false_nesting defined in pre-process.c
      uses function expression_value(struct token **) defined in pre-process.c
      uses variable token::next defined in token.h
      uses macro definition dirty_stream defined in pre-process.c
      uses function preprocessor_if(struct stream *,struct token *,int) defined in pre-process.c
   function handle_elif(struct stream *,struct token **,struct token *) in line 1537
      protection public
      32 lines of code
      3 parameters
      7 conditional paths
      uses variable stream::top_if defined in token.h
      uses macro definition end_group defined in pre-process.c
      uses macro definition nesting_error defined in pre-process.c
      uses function sparse_error(struct position,const char *,...) defined in lib.c
      uses variable token::pos defined in token.h
      uses enumvalue TOKEN_ELSE defined in token.h
      uses variable false_nesting defined in pre-process.c
      uses macro definition dirty_stream defined in pre-process.c
      uses enumvalue TOKEN_IF defined in token.h
      uses function expression_value(struct token **) defined in pre-process.c
      uses variable token::next defined in token.h
      uses enumvalue TOKEN_SKIP_GROUPS defined in token.h
   function handle_else(struct stream *,struct token **,struct token *) in line 1570
      protection public
      24 lines of code
      3 parameters
      5 conditional paths
      uses variable stream::top_if defined in token.h
      uses macro definition end_group defined in pre-process.c
      uses macro definition nesting_error defined in pre-process.c
      uses function sparse_error(struct position,const char *,...) defined in lib.c
      uses variable token::pos defined in token.h
      uses enumvalue TOKEN_ELSE defined in token.h
      uses variable false_nesting defined in pre-process.c
      uses enumvalue TOKEN_IF defined in token.h
   function handle_endif(struct stream *,struct token **,struct token *) in line 1595
      protection public
      15 lines of code
      3 parameters
      3 conditional paths
      uses variable stream::top_if defined in token.h
      uses macro definition end_group defined in pre-process.c
      uses macro definition nesting_error defined in pre-process.c
      uses function sparse_error(struct position,const char *,...) defined in lib.c
      uses variable token::pos defined in token.h
      uses variable false_nesting defined in pre-process.c
      uses variable token::next defined in token.h
   function handle_warning(struct stream *,struct token **,struct token *) in line 1611
      protection public
      5 lines of code
      3 parameters
      1 conditional paths
      uses function warning(struct position,const char *,...) defined in lib.c
      uses variable token::pos defined in token.h
      uses function show_token_sequence(struct token *,int) defined in pre-process.c
      uses variable token::next defined in token.h
   function handle_error(struct stream *,struct token **,struct token *) in line 1617
      protection public
      5 lines of code
      3 parameters
      1 conditional paths
      uses function sparse_error(struct position,const char *,...) defined in lib.c
      uses variable token::pos defined in token.h
      uses function show_token_sequence(struct token *,int) defined in pre-process.c
      uses variable token::next defined in token.h
   function handle_nostdinc(struct stream *,struct token **,struct token *) in line 1623
      protection public
      9 lines of code
      3 parameters
      1 conditional paths
      uses variable sys_includepath defined in pre-process.c
      uses macro definition NULL defined in sm_implied3.c
   function update_inc_ptrs(const char ***) in line 1633
      protection public
      30 lines of code
      1 parameters
      9 conditional paths
      uses variable dirafter_includepath defined in pre-process.c
      uses variable sys_includepath defined in pre-process.c
      uses variable isys_includepath defined in pre-process.c
      uses variable angle_includepath defined in pre-process.c
   function add_path_entry(struct token *,const char *,const char ***) in line 1666
      protection public
      33 lines of code
      3 parameters
      5 conditional paths
      uses variable token::next defined in token.h
      uses variable includepath defined in pre-process.c
      uses macro definition INCLUDEPATHS defined in pre-process.c
      uses function error_die(struct position,const char *,...) defined in lib.c
      uses variable token::pos defined in token.h
      uses function update_inc_ptrs(const char ***) defined in pre-process.c
   function handle_add_include(struct stream *,struct token **,struct token *) in line 1700
      protection public
      13 lines of code
      3 parameters
      4 conditional paths
      uses variable token::next defined in token.h
      uses macro definition eof_token defined in token.h
      uses enumvalue TOKEN_STRING defined in token.h
      uses function warning(struct position,const char *,...) defined in lib.c
      uses variable token::pos defined in token.h
      uses function add_path_entry(struct token *,const char *,const char ***) defined in pre-process.c
      uses variable token::string defined in token.h
      uses variable string::data defined in token.h
      uses variable isys_includepath defined in pre-process.c
   function handle_add_isystem(struct stream *,struct token **,struct token *) in line 1714
      protection public
      13 lines of code
      3 parameters
      4 conditional paths
      uses variable token::next defined in token.h
      uses macro definition eof_token defined in token.h
      uses enumvalue TOKEN_STRING defined in token.h
      uses function sparse_error(struct position,const char *,...) defined in lib.c
      uses variable token::pos defined in token.h
      uses function add_path_entry(struct token *,const char *,const char ***) defined in pre-process.c
      uses variable token::string defined in token.h
      uses variable string::data defined in token.h
      uses variable sys_includepath defined in pre-process.c
   function handle_add_system(struct stream *,struct token **,struct token *) in line 1728
      protection public
      13 lines of code
      3 parameters
      4 conditional paths
      uses variable token::next defined in token.h
      uses macro definition eof_token defined in token.h
      uses enumvalue TOKEN_STRING defined in token.h
      uses function sparse_error(struct position,const char *,...) defined in lib.c
      uses variable token::pos defined in token.h
      uses function add_path_entry(struct token *,const char *,const char ***) defined in pre-process.c
      uses variable token::string defined in token.h
      uses variable string::data defined in token.h
      uses variable dirafter_includepath defined in pre-process.c
   function add_dirafter_entry(struct token *,const char *) in line 1743
      protection public
      15 lines of code
      2 parameters
      3 conditional paths
      uses variable includepath defined in pre-process.c
      uses macro definition INCLUDEPATHS defined in pre-process.c
      uses function error_die(struct position,const char *,...) defined in lib.c
      uses variable token::pos defined in token.h
      uses macro definition NULL defined in sm_implied3.c
   function handle_add_dirafter(struct stream *,struct token **,struct token *) in line 1759
      protection public
      13 lines of code
      3 parameters
      4 conditional paths
      uses variable token::next defined in token.h
      uses macro definition eof_token defined in token.h
      uses enumvalue TOKEN_STRING defined in token.h
      uses function sparse_error(struct position,const char *,...) defined in lib.c
      uses variable token::pos defined in token.h
      uses function add_dirafter_entry(struct token *,const char *) defined in pre-process.c
      uses variable token::string defined in token.h
      uses variable string::data defined in token.h
   function handle_split_include(struct stream *,struct token **,struct token *) in line 1773
      protection public
      18 lines of code
      3 parameters
      1 conditional paths
      uses variable quote_includepath defined in pre-process.c
      uses variable includepath defined in pre-process.c
      uses variable angle_includepath defined in pre-process.c
      uses variable sys_includepath defined in pre-process.c
   function handle_pragma(struct stream *,struct token **,struct token *) in line 1804
      protection public
      16 lines of code
      3 parameters
      2 conditional paths
      uses variable token::next defined in token.h
      uses macro definition eof_token defined in token.h
      uses variable stream::once defined in token.h
      uses variable token::ident defined in token.h
      uses variable token::pos defined in token.h
      uses variable position::newline defined in lib.h
      uses variable position::whitespace defined in lib.h
      uses variable position::pos defined in lib.h
   function handle_line(struct stream *,struct token **,struct token *) in line 1824
      protection public
      4 lines of code
      3 parameters
      1 conditional paths
   function handle_nondirective(struct stream *,struct token **,struct token *) in line 1829
      protection public
      5 lines of code
      3 parameters
      1 conditional paths
      uses function sparse_error(struct position,const char *,...) defined in lib.c
      uses variable token::pos defined in token.h
      uses function show_token_sequence(struct token *,int) defined in pre-process.c
   function init_preprocessor(void) in line 1836
      protection public
      51 lines of code
      1 parameters
      3 conditional paths
      uses function init_stream(const char *,int,const char **) defined in token.h
      uses variable includepath defined in pre-process.c
      uses variable name defined in smatch_type.c
      uses variable int defined in missing-ident.c
      uses function handle_define(struct stream *,struct token **,struct token *) defined in pre-process.c
      uses function handle_weak_define(struct stream *,struct token **,struct token *) defined in pre-process.c
      uses function handle_strong_define(struct stream *,struct token **,struct token *) defined in pre-process.c
      uses function handle_undef(struct stream *,struct token **,struct token *) defined in pre-process.c
      uses function handle_strong_undef(struct stream *,struct token **,struct token *) defined in pre-process.c
      uses function handle_warning(struct stream *,struct token **,struct token *) defined in pre-process.c
      uses function handle_error(struct stream *,struct token **,struct token *) defined in pre-process.c
      uses function handle_include(struct stream *,struct token **,struct token *) defined in pre-process.c
      uses function handle_include_next(struct stream *,struct token **,struct token *) defined in pre-process.c
      uses function handle_pragma(struct stream *,struct token **,struct token *) defined in pre-process.c
      uses function handle_line(struct stream *,struct token **,struct token *) defined in pre-process.c
      uses function handle_nostdinc(struct stream *,struct token **,struct token *) defined in pre-process.c
      uses function handle_add_include(struct stream *,struct token **,struct token *) defined in pre-process.c
      uses function handle_add_isystem(struct stream *,struct token **,struct token *) defined in pre-process.c
      uses function handle_add_system(struct stream *,struct token **,struct token *) defined in pre-process.c
      uses function handle_add_dirafter(struct stream *,struct token **,struct token *) defined in pre-process.c
      uses function handle_split_include(struct stream *,struct token **,struct token *) defined in pre-process.c
      uses function handle_argv_include(struct stream *,struct token **,struct token *) defined in pre-process.c
      uses variable token::special defined in token.h
      uses function handle_ifdef(struct stream *,struct token **,struct token *) defined in pre-process.c
      uses function handle_ifndef(struct stream *,struct token **,struct token *) defined in pre-process.c
      uses function handle_else(struct stream *,struct token **,struct token *) defined in pre-process.c
      uses function handle_endif(struct stream *,struct token **,struct token *) defined in pre-process.c
      uses function handle_if(struct stream *,struct token **,struct token *) defined in pre-process.c
      uses function handle_elif(struct stream *,struct token **,struct token *) defined in pre-process.c
      uses macro definition ARRAY_SIZE defined in lib.h
      uses variable sym defined in smatch_type.c
      uses function create_symbol(int,const char *,int,int) defined in symbol.c
      uses enumvalue SYM_PREPROCESSOR defined in symbol.h
      uses enumvalue NS_PREPROCESSOR defined in symbol.h
      uses variable symbol::handler defined in struct.c
      uses variable symbol::normal defined in struct.c
   function handle_preprocessor_line(struct stream *,struct token **,struct token *) in line 1888
      protection public
      34 lines of code
      3 parameters
      9 conditional paths
      uses variable int defined in missing-ident.c
      uses variable symbol::handler defined in struct.c
      uses variable token::next defined in token.h
      uses macro definition eof_token defined in token.h
      uses enumvalue TOKEN_IDENT defined in token.h
      uses variable sym defined in smatch_type.c
      uses function lookup_symbol(struct ident *,enum namespace) defined in symbol.c
      uses variable token::ident defined in token.h
      uses enumvalue NS_PREPROCESSOR defined in symbol.h
      uses variable symbol::normal defined in struct.c
      uses function handle_nondirective(struct stream *,struct token **,struct token *) defined in pre-process.c
      uses enumvalue TOKEN_NUMBER defined in token.h
      uses function handle_line(struct stream *,struct token **,struct token *) defined in pre-process.c
      uses macro definition dirty_stream defined in pre-process.c
      uses variable false_nesting defined in pre-process.c
      uses function free_preprocessor_line(struct token *) defined in pre-process.c
   function do_preprocess(struct token **) in line 1939
      protection public
      45 lines of code
      1 parameters
      10 conditional paths
      uses variable token::next defined in token.h
      uses macro definition eof_token defined in token.h
      uses function scan_next(struct token **) defined in pre-process.c
      uses variable input_streams defined in token.h
      uses variable token::pos defined in token.h
      uses variable position::stream defined in lib.h
      uses variable position::newline defined in lib.h
      uses variable position::noexpand defined in lib.h
      uses function preprocessor_line(struct stream *,struct token **) defined in pre-process.c
      uses enumvalue TOKEN_STREAMEND defined in token.h
      uses variable stream::top_if defined in token.h
      uses macro definition nesting_error defined in pre-process.c
      uses function sparse_error(struct position,const char *,...) defined in lib.c
      uses macro definition NULL defined in sm_implied3.c
      uses variable false_nesting defined in pre-process.c
      uses variable stream::dirty defined in token.h
      uses variable stream::constant defined in token.h
      uses enumvalue CONSTANT_FILE_YES defined in token.h
      uses enumvalue TOKEN_STREAMBEGIN defined in token.h
      uses macro definition dirty_stream defined in pre-process.c
      uses enumvalue TOKEN_IDENT defined in token.h
      uses function expand_one_symbol(struct token **) defined in pre-process.c
   function preprocess(struct token *) in line 1985
      protection public
      13 lines of code
      1 parameters
      1 conditional paths
      uses variable preprocessing defined in lib.c
      uses function init_preprocessor(void) defined in pre-process.c
      uses function do_preprocess(struct token **) defined in pre-process.c
   variable arg::arg in line 263
      protection public
   variable arg::expanded in line 264
      protection public
   variable arg::n_normal in line 266
      protection public
   variable arg::n_quoted in line 267
      protection public
   variable arg::n_str in line 268
      protection public
   variable arg::str in line 265
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/ptrlist.c
module ptrlist.c
   function __DECLARE_ALLOCATOR(struct ptr_list,ptrlist) in line 16
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function __ALLOCATOR(struct ptr_list,"ptr list",ptrlist) in line 17
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function ptr_list_size(struct ptr_list *) in line 19
      protection public
      12 lines of code
      1 parameters
      1 conditional paths
      uses variable ptr_list::list defined in ptrlist.h
      uses variable ptr_list::nr defined in ptrlist.h
   function linearize_ptr_list(struct ptr_list *,void **,int) in line 40
      protection public
      20 lines of code
      3 parameters
      1 conditional paths
      uses variable ptr_list::nr defined in ptrlist.h
      uses variable ptr_list::list defined in ptrlist.h
      uses function memcpy(void *,void *,int) defined in sm_struct_assign1.c
   function pack_ptr_list(struct ptr_list **) in line 67
      protection public
      32 lines of code
      1 parameters
      1 conditional paths
      uses variable ptr_list::next defined in ptrlist.h
      uses variable entry::next defined in hashtable_private.h
      uses variable ptr_list::prev defined in ptrlist.h
      uses macro definition NULL defined in sm_implied3.c
   function split_ptr_list_head(struct ptr_list *) in line 100
      protection public
      16 lines of code
      1 parameters
      1 conditional paths
      uses variable ptr_list::nr defined in ptrlist.h
      uses variable ptr_list::next defined in ptrlist.h
      uses variable ptr_list::prev defined in ptrlist.h
      uses function memcpy(void *,void *,int) defined in sm_struct_assign1.c
      uses variable ptr_list::list defined in ptrlist.h
      uses function memset(void *,int,int) defined in check_byte_count-ice.c
   function __add_ptr_list(struct ptr_list **,void *,unsigned long) in line 117
      protection public
      33 lines of code
      3 parameters
      1 conditional paths
      uses variable ptr_list::list defined in ptrlist.h
      uses macro definition NULL defined in sm_implied3.c
      uses variable ptr_list::nr defined in ptrlist.h
      uses macro definition assert defined in sort.c
      uses variable ptr defined in sm_null_deref2.c
      uses macro definition LIST_NODE_NR defined in ptrlist.h
      uses variable ptr_list::next defined in ptrlist.h
      uses variable ptr_list::prev defined in ptrlist.h
   function delete_ptr_list_entry(struct ptr_list **,void *,int) in line 151
      protection public
      16 lines of code
      3 parameters
      1 conditional paths
      uses variable ptr defined in sm_null_deref2.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable ptr_list::list defined in ptrlist.h
      uses macro definition DELETE_CURRENT_PTR defined in ptrlist.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses macro definition assert defined in sort.c
      uses function pack_ptr_list(struct ptr_list **) defined in ptrlist.c
   function replace_ptr_list_entry(struct ptr_list **,void *,void *,int) in line 168
      protection public
      15 lines of code
      4 parameters
      1 conditional paths
      uses variable ptr defined in sm_null_deref2.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable ptr_list::list defined in ptrlist.h
      uses macro definition REPLACE_CURRENT_PTR defined in ptrlist.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses macro definition assert defined in sort.c
   function undo_ptr_list_last(struct ptr_list **) in line 185
      protection public
      19 lines of code
      1 parameters
      1 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses variable ptr_list::prev defined in ptrlist.h
      uses variable ptr_list::nr defined in ptrlist.h
      uses variable ptr defined in sm_null_deref2.c
      uses variable ptr_list::list defined in ptrlist.h
   function delete_ptr_list_last(struct ptr_list **) in line 205
      protection public
      19 lines of code
      1 parameters
      1 conditional paths
      uses variable ptr defined in sm_null_deref2.c
      uses macro definition NULL defined in sm_implied3.c
      uses variable ptr_list::prev defined in ptrlist.h
      uses variable ptr_list::nr defined in ptrlist.h
      uses variable ptr_list::list defined in ptrlist.h
      uses variable ptr_list::next defined in ptrlist.h
   function concat_ptr_list(struct ptr_list *,struct ptr_list **) in line 225
      protection public
      7 lines of code
      2 parameters
      1 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses macro definition add_ptr_list defined in ptrlist.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function __free_ptr_list(struct ptr_list **) in line 233
      protection public
      16 lines of code
      1 parameters
      1 conditional paths
      uses variable ptr_list::list defined in ptrlist.h
      uses macro definition NULL defined in sm_implied3.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/ptrlist.h
module ptrlist.h
   macro definition DECLARE_PTR_LIST in line 13
      protection public
   macro definition CHECK_TYPE in line 14
      protection public
   macro definition TYPEOF in line 15
      protection public
   macro definition VRFY_PTR_LIST in line 16
      protection public
   macro definition MKTYPE in line 23
      protection public
   macro definition LIST_NODE_NR in line 25
      protection public
   macro definition ptr_list_empty in line 34
      protection public
   macro definition add_ptr_list_tag in line 54
      protection public
   macro definition add_ptr_list_notag in line 56
      protection public
   macro definition add_ptr_list in line 60
      protection public
   macro definition free_ptr_list in line 62
      protection public
   macro definition PTR_ENTRY_NOTAG in line 65
      protection public
   macro definition PTR_ENTRY in line 66
      protection public
   macro definition DO_PREPARE in line 84
      protection public
   macro definition DO_NEXT in line 93
      protection public
   macro definition DO_RESET in line 109
      protection public
   macro definition DO_FINISH in line 116
      protection public
   macro definition PREPARE_PTR_LIST in line 120
      protection public
   macro definition NEXT_PTR_LIST in line 123
      protection public
   macro definition RESET_PTR_LIST in line 126
      protection public
   macro definition FINISH_PTR_LIST in line 129
      protection public
   macro definition DO_FOR_EACH in line 132
      protection public
   macro definition DO_END_FOR_EACH in line 143
      protection public
   macro definition DO_FOR_EACH_REVERSE in line 151
      protection public
   macro definition DO_END_FOR_EACH_REVERSE in line 165
      protection public
   macro definition DO_REVERSE in line 174
      protection public
   macro definition RECURSE_PTR_REVERSE in line 190
      protection public
   macro definition DO_THIS_ADDRESS in line 194
      protection public
   macro definition FOR_EACH_PTR in line 197
      protection public
   macro definition END_FOR_EACH_PTR in line 200
      protection public
   macro definition FOR_EACH_PTR_NOTAG in line 203
      protection public
   macro definition END_FOR_EACH_PTR_NOTAG in line 206
      protection public
   macro definition FOR_EACH_PTR_REVERSE in line 208
      protection public
   macro definition END_FOR_EACH_PTR_REVERSE in line 211
      protection public
   macro definition FOR_EACH_PTR_REVERSE_NOTAG in line 214
      protection public
   macro definition END_FOR_EACH_PTR_REVERSE_NOTAG in line 217
      protection public
   macro definition THIS_ADDRESS in line 219
      protection public
   macro definition DO_SPLIT in line 224
      protection public
   macro definition DO_INSERT_CURRENT in line 232
      protection public
   macro definition INSERT_CURRENT in line 246
      protection public
   macro definition DO_DELETE_CURRENT in line 249
      protection public
   macro definition DELETE_CURRENT_PTR in line 260
      protection public
   macro definition REPLACE_CURRENT_PTR in line 263
      protection public
   macro definition PACK_PTR_LIST in line 268
      protection public
   macro definition CURRENT_TAG in line 281
      protection public
   macro definition TAG_CURRENT in line 282
      protection public
   function undo_ptr_list_last(struct ptr_list **) in line 36
      protection public
      19 lines of code
      1 parameters
      4 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses variable ptr_list::prev defined in ptrlist.h
      uses variable ptr_list::nr defined in ptrlist.h
      uses variable ptr defined in sm_null_deref2.c
      uses variable ptr_list::list defined in ptrlist.h
   function delete_ptr_list_last(struct ptr_list **) in line 37
      protection public
      19 lines of code
      1 parameters
      5 conditional paths
      uses variable ptr defined in sm_null_deref2.c
      uses macro definition NULL defined in sm_implied3.c
      uses variable ptr_list::prev defined in ptrlist.h
      uses variable ptr_list::nr defined in ptrlist.h
      uses variable ptr_list::list defined in ptrlist.h
      uses variable ptr_list::next defined in ptrlist.h
   function delete_ptr_list_entry(struct ptr_list **,void *,int) in line 38
      protection public
      16 lines of code
      3 parameters
      4 conditional paths
      uses variable ptr defined in sm_null_deref2.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable ptr_list::list defined in ptrlist.h
      uses macro definition DELETE_CURRENT_PTR defined in ptrlist.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses macro definition assert defined in sort.c
      uses function pack_ptr_list(struct ptr_list **) defined in ptrlist.c
   function replace_ptr_list_entry(struct ptr_list **,void *,void *,int) in line 39
      protection public
      15 lines of code
      4 parameters
      4 conditional paths
      uses variable ptr defined in sm_null_deref2.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable ptr_list::list defined in ptrlist.h
      uses macro definition REPLACE_CURRENT_PTR defined in ptrlist.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses macro definition assert defined in sort.c
   function sort_list(struct ptr_list **,int(*)(const void *, const void *)) in line 40
      protection public
      66 lines of code
      2 parameters
      1 conditional paths
      uses variable ptr_list::list defined in ptrlist.h
      uses variable ptr_list::next defined in ptrlist.h
      uses macro definition BEEN_THERE defined in sort.c
   function __add_ptr_list(struct ptr_list **,void *,unsigned long) in line 42
      protection public
      33 lines of code
      3 parameters
      3 conditional paths
      uses variable ptr_list::list defined in ptrlist.h
      uses macro definition NULL defined in sm_implied3.c
      uses variable ptr_list::nr defined in ptrlist.h
      uses macro definition assert defined in sort.c
      uses variable ptr defined in sm_null_deref2.c
      uses macro definition LIST_NODE_NR defined in ptrlist.h
      uses variable ptr_list::next defined in ptrlist.h
      uses variable ptr_list::prev defined in ptrlist.h
   function concat_ptr_list(struct ptr_list *,struct ptr_list **) in line 43
      protection public
      7 lines of code
      2 parameters
      1 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses macro definition add_ptr_list defined in ptrlist.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function __free_ptr_list(struct ptr_list **) in line 44
      protection public
      16 lines of code
      1 parameters
      3 conditional paths
      uses variable ptr_list::list defined in ptrlist.h
      uses macro definition NULL defined in sm_implied3.c
   function ptr_list_size(struct ptr_list *) in line 45
      protection public
      12 lines of code
      1 parameters
      3 conditional paths
      uses variable ptr_list::list defined in ptrlist.h
      uses variable ptr_list::nr defined in ptrlist.h
   function linearize_ptr_list(struct ptr_list *,void **,int) in line 46
      protection public
      20 lines of code
      3 parameters
      5 conditional paths
      uses variable ptr_list::nr defined in ptrlist.h
      uses variable ptr_list::list defined in ptrlist.h
      uses function memcpy(void *,void *,int) defined in sm_struct_assign1.c
   function first_ptr_list(struct ptr_list *) in line 68
      protection public
      6 lines of code
      1 parameters
      2 conditional paths
      uses variable ptr_list::list defined in ptrlist.h
      uses macro definition NULL defined in sm_implied3.c
      uses macro definition PTR_ENTRY defined in ptrlist.h
   function last_ptr_list(struct ptr_list *) in line 75
      protection public
      8 lines of code
      1 parameters
      2 conditional paths
      uses variable ptr_list::list defined in ptrlist.h
      uses macro definition NULL defined in sm_implied3.c
      uses macro definition PTR_ENTRY defined in ptrlist.h
   function split_ptr_list_head(struct ptr_list *) in line 222
      protection public
      16 lines of code
      1 parameters
      1 conditional paths
      uses variable ptr_list::nr defined in ptrlist.h
      uses variable ptr_list::next defined in ptrlist.h
      uses variable ptr_list::prev defined in ptrlist.h
      uses function memcpy(void *,void *,int) defined in sm_struct_assign1.c
      uses variable ptr_list::list defined in ptrlist.h
      uses function memset(void *,int,int) defined in check_byte_count-ice.c
   function pack_ptr_list(struct ptr_list **) in line 266
      protection public
      32 lines of code
      1 parameters
      7 conditional paths
      uses variable ptr_list::next defined in ptrlist.h
      uses variable entry::next defined in hashtable_private.h
      uses variable ptr_list::prev defined in ptrlist.h
      uses macro definition NULL defined in sm_implied3.c
   function update_tag(void *,unsigned long) in line 270
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses variable ptr defined in sm_null_deref2.c
      uses variable p defined in cond_expr2.c
   function tag_ptr(void *,unsigned long) in line 276
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses variable ptr defined in sm_null_deref2.c
   variable ptr_list::list in line 31
      protection public
   variable ptr_list::next in line 30
      protection public
   variable ptr_list::nr in line 28
      protection public
   variable ptr_list::prev in line 29
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/scope.c
module scope.c
   variable builtin_scope in line 31
      protection public
   variable block_scope in line 38
      protection public
   variable function_scope in line 39
      protection public
   variable file_scope in line 40
      protection public
   variable global_scope in line 41
      protection public
   function bind_scope(struct symbol *,struct scope *) in line 43
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses variable sym defined in smatch_type.c
      uses variable symbol::scope defined in struct.c
      uses function add_symbol(struct symbol_list **,struct symbol *) defined in symbol.h
      uses variable scope::symbols defined in scope.h
   function rebind_scope(struct symbol *,struct scope *) in line 49
      protection public
      12 lines of code
      2 parameters
      1 conditional paths
      uses variable sym defined in smatch_type.c
      uses variable symbol::scope defined in struct.c
      uses function delete_ptr_list_entry(struct ptr_list **,void *,int) defined in ptrlist.c
      uses variable scope::symbols defined in scope.h
      uses function bind_scope(struct symbol *,struct scope *) defined in scope.c
   function start_scope(struct scope **,struct position) in line 62
      protection public
      9 lines of code
      2 parameters
      1 conditional paths
      uses function memset(void *,int,int) defined in check_byte_count-ice.c
      uses variable scope::token defined in scope.h
      uses variable token::pos defined in token.h
      uses variable scope::next defined in scope.h
   function start_file_scope(void) in line 72
      protection public
      12 lines of code
      1 parameters
      1 conditional paths
      uses function memset(void *,int,int) defined in check_byte_count-ice.c
      uses variable scope::next defined in scope.h
      uses variable builtin_scope defined in scope.c
      uses variable file_scope defined in scope.c
      uses variable function_scope defined in scope.c
      uses variable block_scope defined in scope.c
   function start_symbol_scope(struct position) in line 85
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function start_scope(struct scope **,struct position) defined in scope.c
      uses variable block_scope defined in scope.c
   function start_function_scope(struct position) in line 90
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function start_scope(struct scope **,struct position) defined in scope.c
      uses variable function_scope defined in scope.c
      uses variable block_scope defined in scope.c
   function remove_symbol_scope(struct symbol *) in line 96
      protection public
      8 lines of code
      1 parameters
      2 conditional paths
      uses variable ptr defined in sm_null_deref2.c
      uses variable sym defined in smatch_type.c
      uses variable symbol::ident defined in struct.c
      uses variable ident::symbols defined in token.h
      uses variable symbol::next_id defined in struct.c
   function end_scope(struct scope **) in line 105
      protection public
      12 lines of code
      1 parameters
      1 conditional paths
      uses variable scope::symbols defined in scope.h
      uses variable sym defined in smatch_type.c
      uses variable scope::next defined in scope.h
      uses macro definition NULL defined in sm_implied3.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses function remove_symbol_scope(struct symbol *) defined in scope.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function end_file_scope(void) in line 118
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function end_scope(struct scope **) defined in scope.c
      uses variable file_scope defined in scope.c
   function new_file_scope(void) in line 123
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses variable file_scope defined in scope.c
      uses variable builtin_scope defined in scope.c
      uses function end_file_scope(void) defined in scope.c
      uses function start_file_scope(void) defined in scope.c
   function end_symbol_scope(void) in line 130
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function end_scope(struct scope **) defined in scope.c
      uses variable block_scope defined in scope.c
   function end_function_scope(void) in line 135
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function end_scope(struct scope **) defined in scope.c
      uses variable block_scope defined in scope.c
      uses variable function_scope defined in scope.c
   function is_outer_scope(struct scope *) in line 141
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses variable block_scope defined in scope.c
      uses variable builtin_scope defined in scope.c
      uses variable scope::next defined in scope.h
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/scope.h
module scope.h
   variable block_scope in line 38
      protection public
   variable function_scope in line 39
      protection public
   variable file_scope in line 40
      protection public
   variable global_scope in line 41
      protection public
   function toplevel(struct scope *) in line 43
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable file_scope defined in scope.h
      uses variable global_scope defined in scope.h
      uses function start_file_scope(void) defined in scope.h
      uses function end_file_scope(void) defined in scope.h
      uses function new_file_scope(void) defined in scope.h
      uses function start_symbol_scope(struct position) defined in scope.h
      uses function end_symbol_scope(void) defined in scope.h
      uses function start_function_scope(struct position) defined in scope.h
      uses function end_function_scope(void) defined in scope.h
      uses function bind_scope(struct symbol *,struct scope *) defined in scope.h
      uses function rebind_scope(struct symbol *,struct scope *) defined in scope.h
      uses function is_outer_scope(struct scope *) defined in scope.h
   function start_file_scope(void) in line 48
      protection public
      12 lines of code
      1 parameters
      1 conditional paths
      uses function memset(void *,int,int) defined in check_byte_count-ice.c
      uses variable scope::next defined in scope.h
      uses variable file_scope defined in scope.c
      uses variable function_scope defined in scope.c
      uses variable block_scope defined in scope.c
   function end_file_scope(void) in line 49
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable file_scope defined in scope.c
   function new_file_scope(void) in line 50
      protection public
      6 lines of code
      1 parameters
      2 conditional paths
      uses variable file_scope defined in scope.c
      uses function end_file_scope(void) defined in scope.c
      uses function start_file_scope(void) defined in scope.c
   function start_symbol_scope(struct position) in line 52
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable block_scope defined in scope.c
   function end_symbol_scope(void) in line 53
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable block_scope defined in scope.c
   function start_function_scope(struct position) in line 55
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable function_scope defined in scope.c
      uses variable block_scope defined in scope.c
   function end_function_scope(void) in line 56
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable block_scope defined in scope.c
      uses variable function_scope defined in scope.c
   function bind_scope(struct symbol *,struct scope *) in line 58
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses variable sym defined in smatch_type.c
      uses variable symbol::scope defined in struct.c
      uses function add_symbol(struct symbol_list **,struct symbol *) defined in symbol.h
      uses variable scope::symbols defined in scope.h
   function rebind_scope(struct symbol *,struct scope *) in line 59
      protection public
      12 lines of code
      2 parameters
      3 conditional paths
      uses variable sym defined in smatch_type.c
      uses variable symbol::scope defined in struct.c
      uses function delete_ptr_list_entry(struct ptr_list **,void *,int) defined in ptrlist.c
      uses variable scope::symbols defined in scope.h
      uses function bind_scope(struct symbol *,struct scope *) defined in scope.c
   function is_outer_scope(struct scope *) in line 61
      protection public
      8 lines of code
      1 parameters
      3 conditional paths
      uses variable block_scope defined in scope.c
      uses variable scope::next defined in scope.h
   variable scope::next in line 34
      protection public
   variable scope::symbols in line 33
      protection public
   variable scope::token in line 32
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/show-parse.c
module show-parse.c
   variable typenames in line 253
      protection public
   function show_symbol_expr(struct symbol *) in line 44
      protection public
      18 lines of code
      1 parameters
      4 conditional paths
      uses function new_pseudo(void) defined in show-parse.c
      uses variable sym defined in smatch_type.c
      uses variable symbol::initializer defined in struct.c
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_STRING defined in expression.h
      uses function show_string_expr(struct expression *) defined in show-parse.c
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::modifiers defined in struct.c
      uses macro definition MOD_TOPLEVEL defined in symbol.h
      uses macro definition MOD_EXTERN defined in symbol.h
      uses macro definition MOD_STATIC defined in symbol.h
      uses function printf(char *,...) defined in test-be.c
      uses variable bits_in_pointer defined in target.c
      uses function show_ident(const struct ident *) defined in token.h
      uses variable symbol::ident defined in struct.c
      uses macro definition MOD_ADDRESSABLE defined in symbol.h
      uses variable symbol::value defined in struct.c
   function show_string_expr(struct expression *) in line 45
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses function new_pseudo(void) defined in show-parse.c
      uses function printf(char *,...) defined in test-be.c
      uses variable bits_in_pointer defined in target.c
      uses function show_string(const struct string *) defined in token.h
      uses variable expression::string defined in expression.h
   function do_debug_symbol(struct symbol *,int) in line 47
      protection public
      54 lines of code
      2 parameters
      3 conditional paths
      uses enumvalue SYM_UNINITIALIZED defined in symbol.h
      uses enumvalue SYM_PREPROCESSOR defined in symbol.h
      uses enumvalue SYM_BASETYPE defined in symbol.h
      uses enumvalue SYM_NODE defined in symbol.h
      uses enumvalue SYM_PTR defined in symbol.h
      uses enumvalue SYM_FN defined in symbol.h
      uses enumvalue SYM_ARRAY defined in symbol.h
      uses enumvalue SYM_STRUCT defined in symbol.h
      uses enumvalue SYM_UNION defined in symbol.h
      uses enumvalue SYM_ENUM defined in symbol.h
      uses enumvalue SYM_TYPEDEF defined in symbol.h
      uses enumvalue SYM_TYPEOF defined in symbol.h
      uses enumvalue SYM_MEMBER defined in symbol.h
      uses enumvalue SYM_BITFIELD defined in symbol.h
      uses enumvalue SYM_LABEL defined in symbol.h
      uses enumvalue SYM_RESTRICT defined in symbol.h
      uses enumvalue SYM_FOULED defined in symbol.h
      uses enumvalue SYM_BAD defined in symbol.h
      uses variable context::context defined in symbol.h
      uses variable sym defined in smatch_type.c
      uses variable symbol::type defined in struct.c
      uses variable symbol::bit_size defined in struct.c
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::alignment defined in struct.c
      uses function modifier_string(unsigned long) defined in show-parse.c
      uses variable ctype::modifiers defined in struct.c
      uses function show_ident(const struct ident *) defined in token.h
      uses variable symbol::ident defined in struct.c
      uses variable ctype::attribute defined in struct.c
      uses variable attribute::as defined in symbol.h
      uses function stream_name(int) defined in token.h
      uses variable symbol::pos defined in struct.c
      uses variable position::stream defined in lib.h
      uses variable position::line defined in lib.h
      uses variable position::pos defined in lib.h
      uses function builtin_typename(struct symbol *) defined in show-parse.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable attribute::contexts defined in symbol.h
      uses variable context::in defined in symbol.h
      uses variable context::out defined in symbol.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses variable symbol::arguments defined in struct.c
      uses variable ctype::base_type defined in struct.c
   function debug_symbol(struct symbol *) in line 102
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function do_debug_symbol(struct symbol *,int) defined in show-parse.c
      uses variable sym defined in smatch_type.c
   function modifier_string(unsigned long) in line 111
      protection public
      55 lines of code
      1 parameters
      1 conditional paths
      uses variable name defined in smatch_type.c
      uses macro definition MOD_AUTO defined in symbol.h
      uses macro definition MOD_REGISTER defined in symbol.h
      uses macro definition MOD_STATIC defined in symbol.h
      uses macro definition MOD_EXTERN defined in symbol.h
      uses macro definition MOD_CONST defined in symbol.h
      uses macro definition MOD_VOLATILE defined in symbol.h
      uses macro definition MOD_SIGNED defined in symbol.h
      uses macro definition MOD_UNSIGNED defined in symbol.h
      uses macro definition MOD_CHAR defined in symbol.h
      uses macro definition MOD_SHORT defined in symbol.h
      uses macro definition MOD_LONG defined in symbol.h
      uses macro definition MOD_LONGLONG defined in symbol.h
      uses macro definition MOD_LONGLONGLONG defined in symbol.h
      uses macro definition MOD_TYPEDEF defined in symbol.h
      uses macro definition MOD_TLS defined in symbol.h
      uses macro definition MOD_INLINE defined in symbol.h
      uses macro definition MOD_ADDRESSABLE defined in symbol.h
      uses macro definition MOD_NOCAST defined in symbol.h
      uses macro definition MOD_NODEREF defined in symbol.h
      uses macro definition MOD_ACCESSED defined in symbol.h
      uses macro definition MOD_TOPLEVEL defined in symbol.h
      uses macro definition MOD_ASSIGNED defined in symbol.h
      uses macro definition MOD_TYPE defined in symbol.h
      uses macro definition MOD_SAFE defined in symbol.h
      uses macro definition MOD_USERTYPE defined in symbol.h
      uses macro definition MOD_NORETURN defined in symbol.h
      uses macro definition MOD_EXPLICITLY_SIGNED defined in symbol.h
      uses macro definition MOD_BITWISE defined in symbol.h
      uses macro definition MOD_PURE defined in symbol.h
      uses macro definition ARRAY_SIZE defined in lib.h
      uses variable c defined in sm_array_overflow.c
   function show_struct_member(struct symbol *) in line 167
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function printf(char *,...) defined in test-be.c
      uses function show_ident(const struct ident *) defined in token.h
      uses variable sym defined in smatch_type.c
      uses variable symbol::ident defined in struct.c
      uses variable symbol::bit_size defined in struct.c
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::alignment defined in struct.c
      uses variable symbol::offset defined in struct.c
      uses variable symbol::bit_offset defined in struct.c
   function show_symbol_list(struct symbol_list *,const char *) in line 173
      protection public
      11 lines of code
      2 parameters
      1 conditional paths
      uses variable sym defined in smatch_type.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses function show_symbol(struct symbol *) defined in show-parse.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function FORMAT_ATTR(2) in line 190
      protection public
      13 lines of code
      1 parameters
      1 conditional paths
      uses variable name defined in smatch_type.c
      uses function memcpy(void *,void *,int) defined in sm_struct_assign1.c
      uses function append(char *,const char *,int) defined in smatch.h
   function builtin_typename(struct symbol *) in line 255
      protection public
      9 lines of code
      1 parameters
      1 conditional paths
      uses macro definition ARRAY_SIZE defined in lib.h
      uses variable typenames defined in show-parse.c
      uses variable sym defined in smatch_type.c
      uses variable ctype_name::name defined in show-parse.c
      uses macro definition NULL defined in sm_implied3.c
   function builtin_ctypename(struct ctype *) in line 265
      protection public
      9 lines of code
      1 parameters
      1 conditional paths
      uses macro definition ARRAY_SIZE defined in lib.h
      uses variable typenames defined in show-parse.c
      uses variable sym defined in smatch_type.c
      uses variable symbol::ctype defined in struct.c
      uses variable ctype_name::name defined in show-parse.c
      uses macro definition NULL defined in sm_implied3.c
   function do_show_type(struct symbol *,struct type_name *) in line 275
      protection public
      129 lines of code
      2 parameters
      33 conditional paths
      uses variable sym defined in smatch_type.c
      uses variable symbol::type defined in struct.c
      uses enumvalue SYM_NODE defined in symbol.h
      uses enumvalue SYM_ARRAY defined in symbol.h
      uses enumvalue SYM_BITFIELD defined in symbol.h
      uses variable name defined in smatch_type.c
      uses function modifier_string(unsigned long) defined in show-parse.c
      uses function strlen(char *) defined in sm_overflow6.c
      uses function memcpy(void *,void *,int) defined in sm_struct_assign1.c
      uses function builtin_typename(struct symbol *) defined in show-parse.c
      uses enumvalue SYM_PTR defined in symbol.h
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::modifiers defined in struct.c
      uses variable ctype::attribute defined in struct.c
      uses variable attribute::as defined in symbol.h
      uses enumvalue SYM_FN defined in symbol.h
      uses function append(char *,const char *,int) defined in smatch.h
      uses enumvalue SYM_STRUCT defined in symbol.h
      uses function show_ident(const struct ident *) defined in token.h
      uses variable symbol::ident defined in struct.c
      uses enumvalue SYM_UNION defined in symbol.h
      uses enumvalue SYM_ENUM defined in symbol.h
      uses variable symbol::bit_size defined in struct.c
      uses enumvalue SYM_LABEL defined in symbol.h
      uses function get_expression_value(struct expression *) defined in expand.c
      uses variable symbol::array_size defined in struct.c
      uses enumvalue SYM_RESTRICT defined in symbol.h
      uses enumvalue SYM_FOULED defined in symbol.h
      uses variable ctype::base_type defined in struct.c
   function show_type(struct symbol *) in line 405
      protection public
      10 lines of code
      1 parameters
      1 conditional paths
      uses variable name defined in smatch_type.c
      uses function do_show_type(struct symbol *,struct type_name *) defined in show-parse.c
      uses variable sym defined in smatch_type.c
      uses function printf(char *,...) defined in test-be.c
   function show_typename(struct symbol *) in line 416
      protection public
      10 lines of code
      1 parameters
      1 conditional paths
      uses variable name defined in smatch_type.c
      uses function do_show_type(struct symbol *,struct type_name *) defined in show-parse.c
      uses variable sym defined in smatch_type.c
   function show_symbol(struct symbol *) in line 427
      protection public
      55 lines of code
      1 parameters
      1 conditional paths
      uses variable sym defined in smatch_type.c
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::alignment defined in struct.c
      uses function printf(char *,...) defined in test-be.c
      uses function show_type(struct symbol *) defined in show-parse.c
      uses variable ctype::base_type defined in struct.c
      uses variable member defined in smdb.py
      uses enumvalue SYM_STRUCT defined in symbol.h
      uses enumvalue SYM_UNION defined in symbol.h
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses function show_struct_member(struct symbol *) defined in show-parse.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses enumvalue SYM_FN defined in symbol.h
      uses function show_statement(struct statement *) defined in show-parse.c
      uses variable statement::ret defined in parse.h
      uses variable symbol::bit_size defined in struct.c
      uses variable symbol::initializer defined in struct.c
      uses function show_expression(struct expression *) defined in show-parse.c
      uses function show_symbol_init(struct symbol *) defined in show-parse.c
   function show_symbol_init(struct symbol *) in line 483
      protection public
      14 lines of code
      1 parameters
      2 conditional paths
      uses variable sym defined in smatch_type.c
      uses variable symbol::initializer defined in struct.c
      uses variable expression::ctype defined in expression.h
      uses variable symbol::bit_size defined in struct.c
      uses function show_expression(struct expression *) defined in show-parse.c
      uses function show_symbol_expr(struct symbol *) defined in show-parse.c
      uses function show_store_gen(int,int,struct expression *,int) defined in show-parse.c
      uses macro definition NULL defined in sm_implied3.c
   function new_pseudo(void) in line 485
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
   function new_label(void) in line 491
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
   function show_switch_statement(struct statement *) in line 497
      protection public
      44 lines of code
      1 parameters
      6 conditional paths
      uses function show_expression(struct expression *) defined in show-parse.c
      uses variable statement::switch_expression defined in parse.h
      uses variable sym defined in smatch_type.c
      uses function printf(char *,...) defined in test-be.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable symbol::stmt defined in struct.c
      uses variable statement::switch_case defined in parse.h
      uses variable symbol::symbol_list defined in struct.c
      uses variable statement::case_expression defined in parse.h
      uses variable statement::case_to defined in parse.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_VALUE defined in expression.h
      uses variable expression::value defined in expression.h
      uses variable symbol::bb_target defined in struct.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses function show_statement(struct statement *) defined in show-parse.c
      uses variable statement::switch_statement defined in parse.h
      uses variable statement::switch_break defined in parse.h
      uses variable symbol::used defined in struct.c
   function show_symbol_decl(struct symbol_list *) in line 542
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses variable sym defined in smatch_type.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses function show_symbol_init(struct symbol *) defined in show-parse.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses function show_return_stmt(struct statement *) defined in show-parse.c
      uses variable symbol::stmt defined in struct.c
   function show_return_stmt(struct statement *) in line 550
      protection public
      14 lines of code
      1 parameters
      2 conditional paths
      uses variable statement::ret_value defined in parse.h
      uses variable symbol::stmt defined in struct.c
      uses variable statement::ret_target defined in parse.h
      uses variable expression::ctype defined in expression.h
      uses function show_expression(struct expression *) defined in show-parse.c
      uses variable symbol::bit_size defined in struct.c
      uses function show_symbol_expr(struct symbol *) defined in show-parse.c
      uses function show_store_gen(int,int,struct expression *,int) defined in show-parse.c
      uses macro definition NULL defined in sm_implied3.c
      uses function printf(char *,...) defined in test-be.c
   function show_statement(struct statement *) in line 555
      protection public
      152 lines of code
      1 parameters
      33 conditional paths
      uses variable symbol::stmt defined in struct.c
      uses variable statement::type defined in parse.h
      uses enumvalue STMT_DECLARATION defined in parse.h
      uses function show_symbol_decl(struct symbol_list *) defined in show-parse.c
      uses variable statement::declaration defined in parse.h
      uses enumvalue STMT_RETURN defined in parse.h
      uses function show_return_stmt(struct statement *) defined in show-parse.c
      uses enumvalue STMT_COMPOUND defined in parse.h
      uses variable statement::inline_fn defined in parse.h
      uses variable statement::args defined in parse.h
      uses function printf(char *,...) defined in test-be.c
      uses function show_ident(const struct ident *) defined in token.h
      uses variable symbol::ident defined in struct.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable statement::stmts defined in parse.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses variable statement::ret defined in parse.h
      uses function show_symbol_expr(struct symbol *) defined in show-parse.c
      uses variable symbol::bit_size defined in struct.c
      uses function new_pseudo(void) defined in show-parse.c
      uses enumvalue STMT_EXPRESSION defined in parse.h
      uses function show_expression(struct expression *) defined in show-parse.c
      uses variable statement::expression defined in parse.h
      uses enumvalue STMT_IF defined in parse.h
      uses variable statement::if_conditional defined in parse.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_VALUE defined in expression.h
      uses variable statement::if_true defined in parse.h
      uses variable expression::value defined in expression.h
      uses variable statement::if_false defined in parse.h
      uses function new_label(void) defined in show-parse.c
      uses enumvalue STMT_SWITCH defined in parse.h
      uses function show_switch_statement(struct statement *) defined in show-parse.c
      uses enumvalue STMT_CASE defined in parse.h
      uses variable statement::case_label defined in parse.h
      uses variable statement::case_statement defined in parse.h
      uses enumvalue STMT_ITERATOR defined in parse.h
      uses variable statement::iterator_pre_statement defined in parse.h
      uses variable statement::iterator_pre_condition defined in parse.h
      uses variable statement::iterator_statement defined in parse.h
      uses variable statement::iterator_post_statement defined in parse.h
      uses variable statement::iterator_post_condition defined in parse.h
      uses variable statement::iterator_syms defined in parse.h
      uses variable statement::iterator_continue defined in parse.h
      uses variable symbol::used defined in struct.c
      uses variable statement::iterator_break defined in parse.h
      uses enumvalue STMT_NONE defined in parse.h
      uses enumvalue STMT_LABEL defined in parse.h
      uses variable statement::label_identifier defined in parse.h
      uses variable statement::label_statement defined in parse.h
      uses enumvalue STMT_GOTO defined in parse.h
      uses variable statement::goto_expression defined in parse.h
      uses variable statement::goto_label defined in parse.h
      uses variable symbol::bb_target defined in struct.c
      uses enumvalue STMT_ASM defined in parse.h
      uses enumvalue STMT_CONTEXT defined in parse.h
      uses enumvalue STMT_RANGE defined in parse.h
      uses variable statement::range_expression defined in parse.h
      uses variable statement::range_low defined in parse.h
      uses variable statement::range_high defined in parse.h
   function show_call_expression(struct expression *) in line 708
      protection public
      44 lines of code
      1 parameters
      7 conditional paths
      uses variable expression::ctype defined in expression.h
      uses function warning(struct position,const char *,...) defined in lib.c
      uses variable expression::pos defined in expression.h
      uses macro definition FOR_EACH_PTR_REVERSE defined in ptrlist.h
      uses variable expression::args defined in expression.h
      uses function show_expression(struct expression *) defined in show-parse.c
      uses function printf(char *,...) defined in test-be.c
      uses macro definition END_FOR_EACH_PTR_REVERSE defined in ptrlist.h
      uses variable expression::fn defined in expression.h
      uses macro definition NULL defined in sm_implied3.c
      uses enumvalue EXPR_PREOP defined in expression.h
      uses enumvalue EXPR_SYMBOL defined in expression.h
      uses variable sym defined in smatch_type.c
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::base_type defined in struct.c
      uses variable symbol::type defined in struct.c
      uses enumvalue SYM_FN defined in symbol.h
      uses function show_ident(const struct ident *) defined in token.h
      uses variable symbol::ident defined in struct.c
      uses variable bits_in_pointer defined in target.c
      uses function new_pseudo(void) defined in show-parse.c
      uses variable symbol::bit_size defined in struct.c
   function show_comma(struct expression *) in line 753
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function show_expression(struct expression *) defined in show-parse.c
      uses variable expression::left defined in expression.h
      uses variable expression::right defined in expression.h
   function show_binop(struct expression *) in line 759
      protection public
      22 lines of code
      1 parameters
      2 conditional paths
      uses function show_expression(struct expression *) defined in show-parse.c
      uses variable expression::left defined in expression.h
      uses variable expression::right defined in expression.h
      uses function new_pseudo(void) defined in show-parse.c
      uses variable name defined in smatch_type.c
      uses function op(void) defined in loop2.c
      uses variable expression::op defined in expression.h
      uses function show_special(int) defined in token.h
      uses macro definition ARRAY_SIZE defined in lib.h
      uses function printf(char *,...) defined in test-be.c
      uses variable expression::ctype defined in expression.h
      uses variable symbol::bit_size defined in struct.c
   function show_slice(struct expression *) in line 782
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses function show_expression(struct expression *) defined in show-parse.c
      uses variable expression::base defined in expression.h
      uses function new_pseudo(void) defined in show-parse.c
      uses function printf(char *,...) defined in test-be.c
      uses variable expression::r_nrbits defined in expression.h
      uses variable expression::r_bitpos defined in expression.h
   function show_regular_preop(struct expression *) in line 790
      protection public
      17 lines of code
      1 parameters
      2 conditional paths
      uses function show_expression(struct expression *) defined in show-parse.c
      uses variable expression::unop defined in expression.h
      uses function new_pseudo(void) defined in show-parse.c
      uses variable name defined in smatch_type.c
      uses function op(void) defined in loop2.c
      uses variable expression::op defined in expression.h
      uses function show_special(int) defined in token.h
      uses macro definition ARRAY_SIZE defined in lib.h
      uses function printf(char *,...) defined in test-be.c
      uses variable expression::ctype defined in expression.h
      uses variable symbol::bit_size defined in struct.c
   function show_address_gen(struct expression *) in line 812
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function show_expression(struct expression *) defined in show-parse.c
      uses variable expression::unop defined in expression.h
   function show_load_gen(int,struct expression *,int) in line 817
      protection public
      7 lines of code
      3 parameters
      1 conditional paths
      uses function new_pseudo(void) defined in show-parse.c
      uses function printf(char *,...) defined in test-be.c
   function show_store_gen(int,int,struct expression *,int) in line 825
      protection public
      5 lines of code
      4 parameters
      1 conditional paths
      uses function printf(char *,...) defined in test-be.c
   function show_assignment(struct expression *) in line 831
      protection public
      14 lines of code
      1 parameters
      2 conditional paths
      uses variable expression::left defined in expression.h
      uses variable expression::ctype defined in expression.h
      uses variable symbol::bit_size defined in struct.c
      uses function show_expression(struct expression *) defined in show-parse.c
      uses variable expression::right defined in expression.h
      uses function show_address_gen(struct expression *) defined in show-parse.c
      uses function show_store_gen(int,int,struct expression *,int) defined in show-parse.c
   function show_initialization(struct symbol *,struct expression *) in line 861
      protection public
      15 lines of code
      2 parameters
      2 conditional paths
      uses variable expression::ctype defined in expression.h
      uses variable symbol::bit_size defined in struct.c
      uses function show_expression(struct expression *) defined in show-parse.c
      uses function show_symbol_expr(struct symbol *) defined in show-parse.c
      uses variable sym defined in smatch_type.c
      uses function show_store_gen(int,int,struct expression *,int) defined in show-parse.c
      uses macro definition NULL defined in sm_implied3.c
   function show_access(struct expression *) in line 877
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function show_address_gen(struct expression *) defined in show-parse.c
      uses function show_load_gen(int,struct expression *,int) defined in show-parse.c
      uses variable expression::ctype defined in expression.h
      uses variable symbol::bit_size defined in struct.c
   function show_inc_dec(struct expression *,int) in line 883
      protection public
      15 lines of code
      2 parameters
      2 conditional paths
      uses function show_address_gen(struct expression *) defined in show-parse.c
      uses variable expression::unop defined in expression.h
      uses variable expression::op defined in expression.h
      uses enumvalue SPECIAL_INCREMENT defined in token.h
      uses variable expression::ctype defined in expression.h
      uses variable symbol::bit_size defined in struct.c
      uses function show_load_gen(int,struct expression *,int) defined in show-parse.c
      uses function new_pseudo(void) defined in show-parse.c
      uses function printf(char *,...) defined in test-be.c
      uses function show_store_gen(int,int,struct expression *,int) defined in show-parse.c
   function show_preop(struct expression *) in line 899
      protection public
      13 lines of code
      1 parameters
      3 conditional paths
      uses variable expression::op defined in expression.h
      uses function show_access(struct expression *) defined in show-parse.c
      uses enumvalue SPECIAL_INCREMENT defined in token.h
      uses enumvalue SPECIAL_DECREMENT defined in token.h
      uses function show_inc_dec(struct expression *,int) defined in show-parse.c
      uses function show_regular_preop(struct expression *) defined in show-parse.c
   function show_postop(struct expression *) in line 913
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function show_inc_dec(struct expression *,int) defined in show-parse.c
   function type_is_signed(struct symbol *) in line 952
      protection public
      8 lines of code
      1 parameters
      3 conditional paths
      uses variable sym defined in smatch_type.c
      uses variable symbol::type defined in struct.c
      uses enumvalue SYM_NODE defined in symbol.h
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::base_type defined in struct.c
      uses enumvalue SYM_PTR defined in symbol.h
      uses variable ctype::modifiers defined in struct.c
      uses macro definition MOD_UNSIGNED defined in symbol.h
   function show_cast_expr(struct expression *) in line 961
      protection public
      23 lines of code
      1 parameters
      3 conditional paths
      uses function op(void) defined in loop2.c
      uses function show_expression(struct expression *) defined in show-parse.c
      uses variable expression::cast_expression defined in expression.h
      uses variable expression::ctype defined in expression.h
      uses variable expression::cast_type defined in expression.h
      uses variable symbol::bit_size defined in struct.c
      uses function new_pseudo(void) defined in show-parse.c
      uses function type_is_signed(struct symbol *) defined in show-parse.c
      uses function printf(char *,...) defined in test-be.c
   function show_value(struct expression *) in line 985
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses function new_pseudo(void) defined in show-parse.c
      uses variable expression::value defined in expression.h
      uses function printf(char *,...) defined in test-be.c
      uses variable expression::ctype defined in expression.h
      uses variable symbol::bit_size defined in struct.c
   function show_fvalue(struct expression *) in line 994
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses function new_pseudo(void) defined in show-parse.c
      uses variable expression::fvalue defined in expression.h
      uses function printf(char *,...) defined in test-be.c
      uses variable expression::ctype defined in expression.h
      uses variable symbol::bit_size defined in struct.c
   function show_label_expr(struct expression *) in line 1011
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses function new_pseudo(void) defined in show-parse.c
      uses function printf(char *,...) defined in test-be.c
      uses variable bits_in_pointer defined in target.c
      uses variable expression::label_symbol defined in expression.h
   function show_conditional_expr(struct expression *) in line 1018
      protection public
      10 lines of code
      1 parameters
      1 conditional paths
      uses function show_expression(struct expression *) defined in show-parse.c
      uses variable expression::conditional defined in expression.h
      uses variable expression::cond_true defined in expression.h
      uses variable expression::cond_false defined in expression.h
      uses function new_pseudo(void) defined in show-parse.c
      uses function printf(char *,...) defined in test-be.c
      uses variable expression::ctype defined in expression.h
      uses variable symbol::bit_size defined in struct.c
   function show_statement_expr(struct expression *) in line 1029
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function show_statement(struct statement *) defined in show-parse.c
      uses variable expression::statement defined in expression.h
   function show_position_expr(struct expression *,struct symbol *) in line 1034
      protection public
      13 lines of code
      2 parameters
      1 conditional paths
      uses function show_expression(struct expression *) defined in show-parse.c
      uses variable expression::init_expr defined in expression.h
      uses variable expression::ctype defined in expression.h
      uses function printf(char *,...) defined in test-be.c
      uses variable expression::init_offset defined in expression.h
      uses function show_ident(const struct ident *) defined in token.h
      uses variable symbol::ident defined in struct.c
   function show_initializer_expr(struct expression *,struct symbol *) in line 1048
      protection public
      35 lines of code
      2 parameters
      7 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable expression::expr_list defined in expression.h
      uses enumvalue EXPR_INITIALIZER defined in expression.h
      uses enumvalue EXPR_IDENTIFIER defined in expression.h
      uses function printf(char *,...) defined in test-be.c
      uses function show_ident(const struct ident *) defined in token.h
      uses enumvalue EXPR_INDEX defined in expression.h
      uses enumvalue EXPR_POS defined in expression.h
      uses function show_position_expr(struct expression *,struct symbol *) defined in show-parse.c
      uses function show_initialization(struct symbol *,struct expression *) defined in show-parse.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function show_symbol_expr_init(struct symbol *) in line 1084
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses variable sym defined in smatch_type.c
      uses variable symbol::initializer defined in struct.c
      uses function show_expression(struct expression *) defined in show-parse.c
      uses function show_symbol_expr(struct symbol *) defined in show-parse.c
   function show_expression(struct expression *) in line 1097
      protection public
      78 lines of code
      1 parameters
      33 conditional paths
      uses variable expression::ctype defined in expression.h
      uses variable position::pos defined in lib.h
      uses variable expression::pos defined in expression.h
      uses function printf(char *,...) defined in test-be.c
      uses function stream_name(int) defined in token.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_CALL defined in expression.h
      uses function show_call_expression(struct expression *) defined in show-parse.c
      uses enumvalue EXPR_ASSIGNMENT defined in expression.h
      uses function show_assignment(struct expression *) defined in show-parse.c
      uses enumvalue EXPR_COMMA defined in expression.h
      uses function show_comma(struct expression *) defined in show-parse.c
      uses enumvalue EXPR_BINOP defined in expression.h
      uses enumvalue EXPR_COMPARE defined in expression.h
      uses enumvalue EXPR_LOGICAL defined in expression.h
      uses function show_binop(struct expression *) defined in show-parse.c
      uses enumvalue EXPR_PREOP defined in expression.h
      uses function show_preop(struct expression *) defined in show-parse.c
      uses enumvalue EXPR_POSTOP defined in expression.h
      uses function show_postop(struct expression *) defined in show-parse.c
      uses enumvalue EXPR_SYMBOL defined in expression.h
      uses function show_symbol_expr(struct symbol *) defined in show-parse.c
      uses variable expression::symbol defined in expression.h
      uses enumvalue EXPR_DEREF defined in expression.h
      uses enumvalue EXPR_SIZEOF defined in expression.h
      uses enumvalue EXPR_PTRSIZEOF defined in expression.h
      uses enumvalue EXPR_ALIGNOF defined in expression.h
      uses enumvalue EXPR_OFFSETOF defined in expression.h
      uses function warning(struct position,const char *,...) defined in lib.c
      uses enumvalue EXPR_CAST defined in expression.h
      uses enumvalue EXPR_FORCE_CAST defined in expression.h
      uses enumvalue EXPR_IMPLIED_CAST defined in expression.h
      uses function show_cast_expr(struct expression *) defined in show-parse.c
      uses enumvalue EXPR_VALUE defined in expression.h
      uses function show_value(struct expression *) defined in show-parse.c
      uses enumvalue EXPR_FVALUE defined in expression.h
      uses function show_fvalue(struct expression *) defined in show-parse.c
      uses enumvalue EXPR_STRING defined in expression.h
      uses function show_string_expr(struct expression *) defined in show-parse.c
      uses enumvalue EXPR_INITIALIZER defined in expression.h
      uses function show_initializer_expr(struct expression *,struct symbol *) defined in show-parse.c
      uses enumvalue EXPR_SELECT defined in expression.h
      uses enumvalue EXPR_CONDITIONAL defined in expression.h
      uses function show_conditional_expr(struct expression *) defined in show-parse.c
      uses enumvalue EXPR_STATEMENT defined in expression.h
      uses function show_statement_expr(struct expression *) defined in show-parse.c
      uses enumvalue EXPR_LABEL defined in expression.h
      uses function show_label_expr(struct expression *) defined in show-parse.c
      uses enumvalue EXPR_SLICE defined in expression.h
      uses function show_slice(struct expression *) defined in show-parse.c
      uses enumvalue EXPR_POS defined in expression.h
      uses enumvalue EXPR_IDENTIFIER defined in expression.h
      uses enumvalue EXPR_INDEX defined in expression.h
      uses enumvalue EXPR_TYPE defined in expression.h
   variable type_name::end in line 187
      protection public
   variable type_name::start in line 186
      protection public
   variable ctype_name::name in line 220
      protection public
   variable ctype_name::sym in line 219
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/simplify.c
module simplify.c
   function phi_parent(struct basic_block *,pseudo_t) in line 16
      protection public
      12 lines of code
      2 parameters
      4 conditional paths
      uses variable pseudo::type defined in linearize.h
      uses enumvalue PSEUDO_REG defined in linearize.h
      uses variable pseudo::def defined in linearize.h
      uses variable instruction::bb defined in linearize.h
      uses variable basic_block::children defined in linearize.h
      uses variable basic_block::parents defined in linearize.h
   function clear_phi(struct instruction *) in line 29
      protection public
      9 lines of code
      1 parameters
      1 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses macro definition THIS_ADDRESS defined in ptrlist.h
      uses macro definition VOID defined in linearize.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function if_convert_phi(struct instruction *) in line 39
      protection public
      77 lines of code
      1 parameters
      7 conditional paths
      uses variable basic_block::parents defined in linearize.h
      uses variable instruction::bb defined in linearize.h
      uses function linearize_ptr_list(struct ptr_list *,void **,int) defined in ptrlist.c
      uses function phi_parent(struct basic_block *,pseudo_t) defined in simplify.c
      uses variable basic_block::insns defined in linearize.h
      uses variable instruction::opcode defined in linearize.h
      uses enumvalue OP_BR defined in linearize.h
      uses macro definition assert defined in sort.c
      uses variable instruction::cond defined in linearize.h
      uses variable instruction::bb_false defined in linearize.h
      uses variable instruction::bb_true defined in linearize.h
      uses variable p defined in cond_expr2.c
      uses function insert_select(struct basic_block *,struct instruction *,struct instruction *,pseudo_t,pseudo_t) defined in linearize.c
      uses function clear_phi(struct instruction *) defined in simplify.c
      uses macro definition REPEAT_CSE defined in flow.h
   function clean_up_phi(struct instruction *) in line 117
      protection public
      32 lines of code
      1 parameters
      6 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses macro definition VOID defined in linearize.h
      uses variable pseudo::def defined in linearize.h
      uses variable instruction::src1 defined in linearize.h
      uses variable instruction::bb defined in linearize.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses function convert_instruction_target(struct instruction *,pseudo_t) defined in flow.c
      uses function clear_phi(struct instruction *) defined in simplify.c
      uses macro definition REPEAT_CSE defined in flow.h
      uses function if_convert_phi(struct instruction *) defined in simplify.c
   function delete_pseudo_user_list_entry(struct pseudo_user_list **,pseudo_t *,int) in line 150
      protection public
      16 lines of code
      3 parameters
      4 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable pseudo_user::userp defined in linearize.h
      uses macro definition DELETE_CURRENT_PTR defined in ptrlist.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses macro definition assert defined in sort.c
      uses function pack_ptr_list(struct ptr_list **) defined in ptrlist.c
   function remove_usage(pseudo_t,pseudo_t *) in line 167
      protection public
      8 lines of code
      2 parameters
      3 conditional paths
      uses variable p defined in cond_expr2.c
      uses function delete_pseudo_user_list_entry(struct pseudo_user_list **,pseudo_t *,int) defined in simplify.c
      uses function kill_instruction(struct instruction *) defined in simplify.c
   function kill_use(pseudo_t *) in line 176
      protection public
      8 lines of code
      1 parameters
      2 conditional paths
      uses variable p defined in cond_expr2.c
      uses macro definition VOID defined in linearize.h
      uses function remove_usage(pseudo_t,pseudo_t *) defined in simplify.c
   function kill_instruction(struct instruction *) in line 185
      protection public
      44 lines of code
      1 parameters
      10 conditional paths
      uses enumvalue OP_BINARY defined in linearize.h
      uses enumvalue OP_BINCMP_END defined in linearize.h
      uses macro definition NULL defined in sm_implied3.c
      uses function kill_use(pseudo_t *) defined in simplify.c
      uses variable repeat_phase defined in cse.c
      uses macro definition REPEAT_CSE defined in flow.h
      uses enumvalue OP_NOT defined in linearize.h
      uses enumvalue OP_NEG defined in linearize.h
      uses enumvalue OP_PHI defined in linearize.h
      uses enumvalue OP_SYMADDR defined in linearize.h
      uses macro definition REPEAT_SYMBOL_CLEANUP defined in flow.h
      uses enumvalue OP_RANGE defined in linearize.h
      uses enumvalue OP_BR defined in linearize.h
   function dead_insn(struct instruction *,pseudo_t *,pseudo_t *,pseudo_t *) in line 233
      protection public
      14 lines of code
      4 parameters
      2 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable pseudo_user::userp defined in linearize.h
      uses macro definition VOID defined in linearize.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses macro definition NULL defined in sm_implied3.c
      uses function kill_use(pseudo_t *) defined in simplify.c
      uses macro definition REPEAT_CSE defined in flow.h
   function constant(pseudo_t) in line 248
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable pseudo::type defined in linearize.h
      uses enumvalue PSEUDO_VAL defined in linearize.h
   function replace_with_pseudo(struct instruction *,pseudo_t) in line 253
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
      uses function convert_instruction_target(struct instruction *,pseudo_t) defined in flow.c
      uses macro definition NULL defined in sm_implied3.c
      uses macro definition REPEAT_CSE defined in flow.h
   function value_size(long long) in line 260
      protection public
      13 lines of code
      1 parameters
      4 conditional paths
   function operand_size(struct instruction *,pseudo_t) in line 280
      protection public
      19 lines of code
      2 parameters
      6 conditional paths
      uses variable pseudo::type defined in linearize.h
      uses enumvalue PSEUDO_REG defined in linearize.h
      uses variable src defined in sm_user_data3.c
      uses variable pseudo::def defined in linearize.h
      uses enumvalue OP_CAST defined in linearize.h
      uses variable instruction::size defined in linearize.h
      uses enumvalue PSEUDO_VAL defined in linearize.h
      uses function value_size(long long) defined in simplify.c
      uses variable pseudo::value defined in linearize.h
   function simplify_asr(struct instruction *,pseudo_t,long long) in line 300
      protection public
      12 lines of code
      3 parameters
      3 conditional paths
      uses variable instruction::size defined in linearize.h
      uses function operand_size(struct instruction *,pseudo_t) defined in simplify.c
      uses function warning(struct position,const char *,...) defined in lib.c
      uses function replace_with_pseudo(struct instruction *,pseudo_t) defined in simplify.c
      uses function value_pseudo(long long) defined in linearize.c
   function simplify_constant_rightside(struct instruction *) in line 313
      protection public
      35 lines of code
      1 parameters
      17 conditional paths
      uses enumvalue OP_SUB defined in linearize.h
      uses enumvalue OP_ADD defined in linearize.h
      uses function value_pseudo(long long) defined in linearize.c
      uses macro definition REPEAT_CSE defined in flow.h
      uses enumvalue OP_OR defined in linearize.h
      uses enumvalue OP_XOR defined in linearize.h
      uses enumvalue OP_OR_BOOL defined in linearize.h
      uses enumvalue OP_SHL defined in linearize.h
      uses enumvalue OP_LSR defined in linearize.h
      uses function replace_with_pseudo(struct instruction *,pseudo_t) defined in simplify.c
      uses enumvalue OP_ASR defined in linearize.h
      uses function simplify_asr(struct instruction *,pseudo_t,long long) defined in simplify.c
      uses enumvalue OP_MULU defined in linearize.h
      uses enumvalue OP_MULS defined in linearize.h
      uses enumvalue OP_AND_BOOL defined in linearize.h
      uses enumvalue OP_AND defined in linearize.h
   function simplify_constant_leftside(struct instruction *) in line 349
      protection public
      20 lines of code
      1 parameters
      12 conditional paths
      uses enumvalue OP_ADD defined in linearize.h
      uses enumvalue OP_OR defined in linearize.h
      uses enumvalue OP_XOR defined in linearize.h
      uses function replace_with_pseudo(struct instruction *,pseudo_t) defined in simplify.c
      uses enumvalue OP_SHL defined in linearize.h
      uses enumvalue OP_LSR defined in linearize.h
      uses enumvalue OP_ASR defined in linearize.h
      uses enumvalue OP_AND defined in linearize.h
      uses enumvalue OP_MULU defined in linearize.h
      uses enumvalue OP_MULS defined in linearize.h
   function simplify_constant_binop(struct instruction *) in line 370
      protection public
      120 lines of code
      1 parameters
      35 conditional paths
      uses variable ul defined in sm_casts4.c
      uses enumvalue OP_ADD defined in linearize.h
      uses enumvalue OP_SUB defined in linearize.h
      uses enumvalue OP_MULU defined in linearize.h
      uses enumvalue OP_MULS defined in linearize.h
      uses enumvalue OP_DIVU defined in linearize.h
      uses enumvalue OP_DIVS defined in linearize.h
      uses enumvalue OP_MODU defined in linearize.h
      uses enumvalue OP_MODS defined in linearize.h
      uses enumvalue OP_SHL defined in linearize.h
      uses enumvalue OP_LSR defined in linearize.h
      uses enumvalue OP_ASR defined in linearize.h
      uses enumvalue OP_AND defined in linearize.h
      uses enumvalue OP_OR defined in linearize.h
      uses enumvalue OP_XOR defined in linearize.h
      uses enumvalue OP_AND_BOOL defined in linearize.h
      uses enumvalue OP_OR_BOOL defined in linearize.h
      uses enumvalue OP_SET_EQ defined in linearize.h
      uses enumvalue OP_SET_NE defined in linearize.h
      uses enumvalue OP_SET_LE defined in linearize.h
      uses enumvalue OP_SET_GE defined in linearize.h
      uses enumvalue OP_SET_LT defined in linearize.h
      uses enumvalue OP_SET_GT defined in linearize.h
      uses enumvalue OP_SET_B defined in linearize.h
      uses enumvalue OP_SET_A defined in linearize.h
      uses enumvalue OP_SET_BE defined in linearize.h
      uses enumvalue OP_SET_AE defined in linearize.h
      uses function replace_with_pseudo(struct instruction *,pseudo_t) defined in simplify.c
      uses function value_pseudo(long long) defined in linearize.c
      uses macro definition REPEAT_CSE defined in flow.h
   function simplify_binop(struct instruction *) in line 491
      protection public
      13 lines of code
      1 parameters
      5 conditional paths
      uses function dead_insn(struct instruction *,pseudo_t *,pseudo_t *,pseudo_t *) defined in simplify.c
      uses macro definition NULL defined in sm_implied3.c
      uses macro definition REPEAT_CSE defined in flow.h
      uses function constant(pseudo_t) defined in simplify.c
      uses function simplify_constant_binop(struct instruction *) defined in simplify.c
      uses function simplify_constant_leftside(struct instruction *) defined in simplify.c
      uses function simplify_constant_rightside(struct instruction *) defined in simplify.c
   function switch_pseudo(struct instruction *,pseudo_t *,struct instruction *,pseudo_t *) in line 505
      protection public
      9 lines of code
      4 parameters
      1 conditional paths
      uses function remove_usage(pseudo_t,pseudo_t *) defined in simplify.c
   function canonical_order(pseudo_t,pseudo_t) in line 515
      protection public
      11 lines of code
      2 parameters
      3 conditional paths
      uses variable pseudo::type defined in linearize.h
      uses enumvalue PSEUDO_VAL defined in linearize.h
      uses enumvalue PSEUDO_SYM defined in linearize.h
   function simplify_commutative_binop(struct instruction *) in line 527
      protection public
      8 lines of code
      1 parameters
      2 conditional paths
      uses function canonical_order(pseudo_t,pseudo_t) defined in simplify.c
      uses function switch_pseudo(struct instruction *,pseudo_t *,struct instruction *,pseudo_t *) defined in simplify.c
      uses macro definition REPEAT_CSE defined in flow.h
   function simple_pseudo(pseudo_t) in line 536
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable pseudo::type defined in linearize.h
      uses enumvalue PSEUDO_VAL defined in linearize.h
      uses enumvalue PSEUDO_SYM defined in linearize.h
   function simplify_associative_binop(struct instruction *) in line 541
      protection public
      21 lines of code
      1 parameters
      7 conditional paths
      uses function simple_pseudo(pseudo_t) defined in simplify.c
      uses variable pseudo::type defined in linearize.h
      uses enumvalue PSEUDO_REG defined in linearize.h
      uses variable pseudo::def defined in linearize.h
      uses variable instruction::opcode defined in linearize.h
      uses variable instruction::src2 defined in linearize.h
      uses function ptr_list_size(struct ptr_list *) defined in ptrlist.c
      uses variable instruction::target defined in linearize.h
      uses variable pseudo::users defined in linearize.h
      uses function switch_pseudo(struct instruction *,pseudo_t *,struct instruction *,pseudo_t *) defined in simplify.c
      uses variable instruction::src1 defined in linearize.h
      uses macro definition REPEAT_CSE defined in flow.h
   function simplify_constant_unop(struct instruction *) in line 563
      protection public
      21 lines of code
      1 parameters
      3 conditional paths
      uses variable instruction::val defined in linearize.h
      uses enumvalue OP_NOT defined in linearize.h
      uses enumvalue OP_NEG defined in linearize.h
      uses function replace_with_pseudo(struct instruction *,pseudo_t) defined in simplify.c
      uses function value_pseudo(long long) defined in linearize.c
      uses macro definition REPEAT_CSE defined in flow.h
   function simplify_unop(struct instruction *) in line 585
      protection public
      8 lines of code
      1 parameters
      3 conditional paths
      uses function dead_insn(struct instruction *,pseudo_t *,pseudo_t *,pseudo_t *) defined in simplify.c
      uses macro definition NULL defined in sm_implied3.c
      uses macro definition REPEAT_CSE defined in flow.h
      uses function constant(pseudo_t) defined in simplify.c
      uses function simplify_constant_unop(struct instruction *) defined in simplify.c
   function simplify_one_memop(struct instruction *,pseudo_t) in line 594
      protection public
      39 lines of code
      2 parameters
      10 conditional paths
      uses variable pseudo::type defined in linearize.h
      uses enumvalue PSEUDO_REG defined in linearize.h
      uses variable pseudo::def defined in linearize.h
      uses variable instruction::opcode defined in linearize.h
      uses enumvalue OP_SYMADDR defined in linearize.h
      uses variable instruction::src defined in linearize.h
      uses function kill_use(pseudo_t *) defined in simplify.c
      uses macro definition REPEAT_CSE defined in flow.h
      uses macro definition REPEAT_SYMBOL_CLEANUP defined in flow.h
      uses enumvalue OP_ADD defined in linearize.h
      uses variable instruction::src1 defined in linearize.h
      uses variable instruction::src2 defined in linearize.h
      uses function constant(pseudo_t) defined in simplify.c
      uses variable offset defined in sm_implied10.c
      uses macro definition VOID defined in linearize.h
      uses function warning(struct position,const char *,...) defined in lib.c
      uses variable pseudo::value defined in linearize.h
      uses function remove_usage(pseudo_t,pseudo_t *) defined in simplify.c
   function simplify_memop(struct instruction *) in line 638
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses variable one defined in sm_equiv1.c
      uses function simplify_one_memop(struct instruction *,pseudo_t) defined in simplify.c
   function get_cast_value(long long,int,int,int) in line 650
      protection public
      12 lines of code
      4 parameters
      3 conditional paths
      uses variable instruction::val defined in linearize.h
   function simplify_cast(struct instruction *) in line 663
      protection public
      53 lines of code
      1 parameters
      14 conditional paths
      uses variable src defined in sm_user_data3.c
      uses function dead_insn(struct instruction *,pseudo_t *,pseudo_t *,pseudo_t *) defined in simplify.c
      uses macro definition NULL defined in sm_implied3.c
      uses macro definition REPEAT_CSE defined in flow.h
      uses variable symbol::bit_size defined in struct.c
      uses function constant(pseudo_t) defined in simplify.c
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::modifiers defined in struct.c
      uses macro definition MOD_SIGNED defined in symbol.h
      uses function get_cast_value(long long,int,int,int) defined in simplify.c
      uses function value_pseudo(long long) defined in linearize.c
      uses enumvalue PSEUDO_REG defined in linearize.h
      uses variable instruction::opcode defined in linearize.h
      uses enumvalue OP_AND defined in linearize.h
      uses variable instruction::size defined in linearize.h
      uses variable instruction::val defined in linearize.h
      uses variable instruction::src2 defined in linearize.h
      uses variable expression::type defined in expression.h
      uses enumvalue PSEUDO_VAL defined in linearize.h
      uses variable expression::value defined in expression.h
      uses function op(void) defined in loop2.c
      uses variable instruction::orig_type defined in linearize.h
      uses enumvalue OP_SCAST defined in linearize.h
      uses enumvalue OP_CAST defined in linearize.h
      uses function replace_with_pseudo(struct instruction *,pseudo_t) defined in simplify.c
   function simplify_select(struct instruction *) in line 717
      protection public
      38 lines of code
      1 parameters
      6 conditional paths
      uses variable instruction::cond defined in linearize.h
      uses variable instruction::src1 defined in linearize.h
      uses variable instruction::src2 defined in linearize.h
      uses function dead_insn(struct instruction *,pseudo_t *,pseudo_t *,pseudo_t *) defined in simplify.c
      uses macro definition REPEAT_CSE defined in flow.h
      uses function constant(pseudo_t) defined in simplify.c
      uses function kill_use(pseudo_t *) defined in simplify.c
      uses variable pseudo::value defined in linearize.h
      uses function replace_with_pseudo(struct instruction *,pseudo_t) defined in simplify.c
      uses enumvalue OP_SET_EQ defined in linearize.h
      uses enumvalue OP_SET_NE defined in linearize.h
   function is_in_range(pseudo_t,long long,long long) in line 756
      protection public
      12 lines of code
      3 parameters
      2 conditional paths
      uses variable src defined in sm_user_data3.c
      uses enumvalue PSEUDO_VAL defined in linearize.h
   function simplify_range(struct instruction *) in line 769
      protection public
      15 lines of code
      1 parameters
      3 conditional paths
      uses variable instruction::src1 defined in linearize.h
      uses variable instruction::src2 defined in linearize.h
      uses variable instruction::src3 defined in linearize.h
      uses variable pseudo::type defined in linearize.h
      uses enumvalue PSEUDO_VAL defined in linearize.h
      uses function is_in_range(pseudo_t,long long,long long) defined in simplify.c
      uses variable pseudo::value defined in linearize.h
      uses function kill_instruction(struct instruction *) defined in simplify.c
      uses macro definition REPEAT_CSE defined in flow.h
   function simplify_cond_branch(struct instruction *,pseudo_t,struct instruction *,pseudo_t *) in line 788
      protection public
      12 lines of code
      4 parameters
      2 conditional paths
      uses variable instruction::cond defined in linearize.h
      uses function remove_usage(pseudo_t,pseudo_t *) defined in simplify.c
      uses variable instruction::opcode defined in linearize.h
      uses enumvalue OP_SET_EQ defined in linearize.h
      uses variable instruction::bb_true defined in linearize.h
      uses variable instruction::bb_false defined in linearize.h
      uses macro definition REPEAT_CSE defined in flow.h
   function simplify_branch(struct instruction *) in line 801
      protection public
      69 lines of code
      1 parameters
      15 conditional paths
      uses function constant(pseudo_t) defined in simplify.c
      uses function insert_branch(struct basic_block *,struct instruction *,struct basic_block *) defined in linearize.c
      uses variable pseudo::value defined in linearize.h
      uses macro definition REPEAT_CSE defined in flow.h
      uses variable basic_block::parents defined in linearize.h
      uses variable basic_block::children defined in linearize.h
      uses macro definition NULL defined in sm_implied3.c
      uses function kill_use(pseudo_t *) defined in simplify.c
      uses variable pseudo::type defined in linearize.h
      uses enumvalue PSEUDO_REG defined in linearize.h
      uses variable instruction::cond defined in linearize.h
      uses variable pseudo::def defined in linearize.h
      uses variable instruction::opcode defined in linearize.h
      uses enumvalue OP_SET_NE defined in linearize.h
      uses enumvalue OP_SET_EQ defined in linearize.h
      uses variable instruction::src1 defined in linearize.h
      uses function simplify_cond_branch(struct instruction *,pseudo_t,struct instruction *,pseudo_t *) defined in simplify.c
      uses variable instruction::src2 defined in linearize.h
      uses enumvalue OP_SEL defined in linearize.h
      uses variable instruction::src3 defined in linearize.h
      uses function remove_usage(pseudo_t,pseudo_t *) defined in simplify.c
      uses enumvalue OP_CAST defined in linearize.h
      uses enumvalue OP_SCAST defined in linearize.h
      uses variable instruction::orig_type defined in linearize.h
      uses variable symbol::bit_size defined in struct.c
      uses variable instruction::size defined in linearize.h
      uses variable instruction::src defined in linearize.h
   function simplify_switch(struct instruction *) in line 871
      protection public
      24 lines of code
      1 parameters
      6 conditional paths
      uses function constant(pseudo_t) defined in simplify.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable multijmp::begin defined in linearize.h
      uses variable multijmp::end defined in linearize.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses function warning(struct position,const char *,...) defined in lib.c
      uses function insert_branch(struct basic_block *,struct instruction *,struct basic_block *) defined in linearize.c
      uses variable multijmp::target defined in linearize.h
      uses macro definition REPEAT_CSE defined in flow.h
   function simplify_instruction(struct instruction *) in line 896
      protection public
      65 lines of code
      1 parameters
      49 conditional paths
      uses enumvalue OP_ADD defined in linearize.h
      uses enumvalue OP_MULS defined in linearize.h
      uses enumvalue OP_AND defined in linearize.h
      uses enumvalue OP_OR defined in linearize.h
      uses enumvalue OP_XOR defined in linearize.h
      uses enumvalue OP_AND_BOOL defined in linearize.h
      uses enumvalue OP_OR_BOOL defined in linearize.h
      uses function simplify_binop(struct instruction *) defined in simplify.c
      uses macro definition REPEAT_CSE defined in flow.h
      uses function simplify_commutative_binop(struct instruction *) defined in simplify.c
      uses function simplify_associative_binop(struct instruction *) defined in simplify.c
      uses enumvalue OP_MULU defined in linearize.h
      uses enumvalue OP_SET_EQ defined in linearize.h
      uses enumvalue OP_SET_NE defined in linearize.h
      uses enumvalue OP_SUB defined in linearize.h
      uses enumvalue OP_DIVU defined in linearize.h
      uses enumvalue OP_DIVS defined in linearize.h
      uses enumvalue OP_MODU defined in linearize.h
      uses enumvalue OP_MODS defined in linearize.h
      uses enumvalue OP_SHL defined in linearize.h
      uses enumvalue OP_LSR defined in linearize.h
      uses enumvalue OP_ASR defined in linearize.h
      uses enumvalue OP_SET_LE defined in linearize.h
      uses enumvalue OP_SET_GE defined in linearize.h
      uses enumvalue OP_SET_LT defined in linearize.h
      uses enumvalue OP_SET_GT defined in linearize.h
      uses enumvalue OP_SET_B defined in linearize.h
      uses enumvalue OP_SET_A defined in linearize.h
      uses enumvalue OP_SET_BE defined in linearize.h
      uses enumvalue OP_SET_AE defined in linearize.h
      uses enumvalue OP_NOT defined in linearize.h
      uses enumvalue OP_NEG defined in linearize.h
      uses function simplify_unop(struct instruction *) defined in simplify.c
      uses enumvalue OP_LOAD defined in linearize.h
      uses enumvalue OP_STORE defined in linearize.h
      uses function simplify_memop(struct instruction *) defined in simplify.c
      uses enumvalue OP_SYMADDR defined in linearize.h
      uses function dead_insn(struct instruction *,pseudo_t *,pseudo_t *,pseudo_t *) defined in simplify.c
      uses macro definition NULL defined in sm_implied3.c
      uses macro definition REPEAT_SYMBOL_CLEANUP defined in flow.h
      uses function replace_with_pseudo(struct instruction *,pseudo_t) defined in simplify.c
      uses enumvalue OP_CAST defined in linearize.h
      uses enumvalue OP_SCAST defined in linearize.h
      uses enumvalue OP_FPCAST defined in linearize.h
      uses enumvalue OP_PTRCAST defined in linearize.h
      uses function simplify_cast(struct instruction *) defined in simplify.c
      uses enumvalue OP_PHI defined in linearize.h
      uses function clear_phi(struct instruction *) defined in simplify.c
      uses function clean_up_phi(struct instruction *) defined in simplify.c
      uses enumvalue OP_PHISOURCE defined in linearize.h
      uses enumvalue OP_SEL defined in linearize.h
      uses function simplify_select(struct instruction *) defined in simplify.c
      uses enumvalue OP_BR defined in linearize.h
      uses function simplify_branch(struct instruction *) defined in simplify.c
      uses enumvalue OP_SWITCH defined in linearize.h
      uses function simplify_switch(struct instruction *) defined in simplify.c
      uses enumvalue OP_RANGE defined in linearize.h
      uses function simplify_range(struct instruction *) defined in simplify.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/smatch.c
module smatch.c
   macro definition CK in line 43
      protection public
   macro definition OPTION in line 160
      protection public
   typedef reg_func in line 42
      protection public
   variable option_debug_check in line 24
      protection public
   variable option_project_str in line 25
      protection public
   variable option_project in line 25
      protection public
   variable data_dir in line 27
      protection public
   variable option_no_data in line 28
      protection public
   variable option_spammy in line 29
      protection public
   variable option_info in line 30
      protection public
   variable option_full_path in line 31
      protection public
   variable option_param_mapper in line 32
      protection public
   variable option_call_tree in line 33
      protection public
   variable option_no_db in line 34
      protection public
   variable option_enable in line 35
      protection public
   variable option_debug_related in line 36
      protection public
   variable option_file_output in line 37
      protection public
   variable option_time in line 38
      protection public
   variable option_datadir_str in line 39
      protection public
   variable sm_outfd in line 40
      protection public
   variable reg_funcs in line 51
      protection public
   variable num_checks in line 53
      protection public
   function check_name(unsigned short) in line 55
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses macro definition ARRAY_SIZE defined in lib.h
      uses variable reg_funcs defined in smatch.c
      uses variable reg_func_info::name defined in smatch.c
   function id_from_name(const char *) in line 63
      protection public
      10 lines of code
      1 parameters
      3 conditional paths
      uses macro definition ARRAY_SIZE defined in lib.h
      uses variable reg_funcs defined in smatch.c
      uses variable reg_func_info::name defined in smatch.c
   function show_checks(void) in line 74
      protection public
      10 lines of code
      1 parameters
      3 conditional paths
      uses macro definition ARRAY_SIZE defined in lib.h
      uses variable reg_funcs defined in smatch.c
      uses variable reg_func_info::name defined in smatch.c
      uses function printf(char *,...) defined in test-be.c
      uses function exit(int) defined in test-be.c
   function enable_check(int) in line 84
      protection public
      5 lines of code
      1 parameters
      2 conditional paths
      uses macro definition ARRAY_SIZE defined in lib.h
      uses variable reg_funcs defined in smatch.c
      uses variable reg_func_info::enabled defined in smatch.c
   function enable_checks(const char *) in line 90
      protection public
      30 lines of code
      1 parameters
      8 conditional paths
      uses function enable_check(int) defined in smatch.c
      uses function exit(int) defined in test-be.c
   function help(void) in line 121
      protection public
      18 lines of code
      1 parameters
      1 conditional paths
      uses function printf(char *,...) defined in test-be.c
      uses function exit(int) defined in test-be.c
   function match_option(const char *,const char *) in line 140
      protection public
      19 lines of code
      2 parameters
      4 conditional paths
      uses variable str defined in sm_overflow6.c
      uses function malloc(int) defined in sm_buf_size2.c
      uses function strlen(char *) defined in sm_overflow6.c
      uses function snprintf(char *,int,char *,char *) defined in sm_overflow6.c
   function parse_args(int *,char ***) in line 168
      protection public
      67 lines of code
      2 parameters
      13 conditional paths
      uses function help(void) defined in smatch.c
      uses function show_checks(void) defined in smatch.c
      uses variable option_project_str defined in smatch.c
      uses variable option_datadir_str defined in smatch.c
      uses variable option_debug_check defined in smatch.c
      uses variable trace_variable defined in check_debug.c
      uses function enable_checks(const char *) defined in smatch.c
      uses variable option_enable defined in smatch.c
      uses macro definition OPTION defined in smatch.c
      uses function info(struct position,const char *,...) defined in lib.c
      uses variable option_project defined in smatch.c
      uses enumvalue PROJ_KERNEL defined in smatch.h
      uses enumvalue PROJ_WINE defined in smatch.h
   function get_data_dir(char *) in line 236
      protection public
      38 lines of code
      1 parameters
      6 conditional paths
      uses variable buf defined in sm_fake_assignment.c
      uses variable option_no_data defined in smatch.c
      uses macro definition NULL defined in sm_implied3.c
      uses variable option_datadir_str defined in smatch.c
      uses function printf(char *,...) defined in test-be.c
      uses function alloc_string(const char *) defined in smatch.h
      uses function free_string(char *) defined in smatch.h
      uses function strlen(char *) defined in sm_overflow6.c
      uses function snprintf(char *,int,char *,char *) defined in sm_overflow6.c
   function main(int,char **) in line 275
      protection public
      28 lines of code
      2 parameters
      3 conditional paths
      uses variable reg_func_info::func defined in smatch.c
      uses variable sm_outfd defined in smatch.c
      uses function parse_args(int *,char ***) defined in smatch.c
      uses variable final_pass defined in smatch.h
      uses variable data_dir defined in smatch.c
      uses function get_data_dir(char *) defined in smatch.c
      uses function allocate_hook_memory(void) defined in smatch.h
      uses function create_function_hook_hash(void) defined in smatch.h
      uses function open_smatch_db(void) defined in smatch.h
      uses macro definition ARRAY_SIZE defined in lib.h
      uses variable reg_funcs defined in smatch.c
      uses variable option_enable defined in smatch.c
      uses variable reg_func_info::enabled defined in smatch.c
      uses variable reg_func_info::name defined in smatch.c
      uses function smatch(int,char **) defined in smatch.h
      uses function free_string(char *) defined in smatch.h
   variable reg_func_info::enabled in line 47
      protection public
   variable reg_func_info::func in line 46
      protection public
   variable reg_func_info::name in line 45
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/smatch.h
module smatch.h
   macro definition STATE in line 44
      protection public
   macro definition TRUE in line 132
      protection public
   macro definition FALSE in line 133
      protection public
   macro definition sm_printf in line 195
      protection public
   macro definition sm_msg in line 204
      protection public
   macro definition local_debug in line 216
      protection public
   macro definition sm_debug in line 235
      protection public
   macro definition sm_info in line 237
      protection public
   macro definition SMATCH_EXTRA in line 457
      protection public
   macro definition STRLEN_MAX_RET in line 523
      protection public
   macro definition run_sql in line 686
      protection public
   macro definition mem_sql in line 697
      protection public
   enumeration hook_type in line 94
      protection public
   enumeration info_type in line 631
      protection public
   enumeration project_type in line 749
      protection public
   typedef merge_func_t in line 137
      protection public
   typedef unmatched_func_t in line 137
      protection public
   typedef scope_hook in line 143
      protection public
   typedef func_hook in line 145
      protection public
   typedef implication_hook in line 146
      protection public
   typedef return_implies_hook in line 148
      protection public
   typedef implied_return_hook in line 150
      protection public
   typedef modification_hook in line 175
      protection public
   variable undefined in line 47
      protection public
   variable ghost in line 47
      protection public
   variable merged in line 47
      protection public
   variable true_state in line 47
      protection public
   variable false_state in line 47
      protection public
   variable final_pass in line 185
      protection public
   variable cur_func_sym in line 186
      protection public
   variable option_debug in line 187
      protection public
   variable local_debug in line 188
      protection public
   variable option_info in line 189
      protection public
   variable trace_variable in line 190
      protection public
   variable global_states in line 191
      protection public
   variable sm_outfd in line 194
      protection public
   variable implied_debug_msg in line 222
      protection public
   variable __in_fake_assign in line 401
      protection public
   variable __in_function_def in line 410
      protection public
   variable option_assume_loops in line 411
      protection public
   variable option_two_passes in line 412
      protection public
   variable option_no_db in line 413
      protection public
   variable option_file_output in line 414
      protection public
   variable option_time in line 415
      protection public
   variable big_expression_stack in line 416
      protection public
   variable big_statement_stack in line 417
      protection public
   variable __inline_call in line 420
      protection public
   variable __inline_fn in line 421
      protection public
   variable __in_pre_condition in line 422
      protection public
   variable __bail_on_rest_of_function in line 423
      protection public
   variable __prev_stmt in line 424
      protection public
   variable __cur_stmt in line 425
      protection public
   variable __next_stmt in line 426
      protection public
   variable option_debug_implied in line 444
      protection public
   variable option_debug_related in line 445
      protection public
   variable valid_ptr_min in line 464
      protection public
   variable valid_ptr_max in line 464
      protection public
   variable valid_ptr_min_sval in line 465
      protection public
   variable valid_ptr_max_sval in line 465
      protection public
   variable array_min_sval in line 466
      protection public
   variable array_max_sval in line 470
      protection public
   variable text_seg_min in line 474
      protection public
   variable text_seg_max in line 478
      protection public
   variable data_seg_min in line 482
      protection public
   variable data_seg_max in line 486
      protection public
   variable bss_seg_min in line 490
      protection public
   variable bss_seg_max in line 494
      protection public
   variable stack_seg_min in line 498
      protection public
   variable stack_seg_max in line 502
      protection public
   variable kmalloc_seg_min in line 506
      protection public
   variable kmalloc_seg_max in line 510
      protection public
   variable vmalloc_seg_min in line 514
      protection public
   variable vmalloc_seg_max in line 518
      protection public
   variable __last_base_slist in line 584
      protection public
   variable option_debug_check in line 739
      protection public
   variable option_project_str in line 740
      protection public
   variable data_dir in line 741
      protection public
   variable option_no_data in line 742
      protection public
   variable option_spammy in line 743
      protection public
   variable option_full_path in line 744
      protection public
   variable option_param_mapper in line 745
      protection public
   variable option_call_tree in line 746
      protection public
   variable num_checks in line 747
      protection public
   variable option_project in line 747
      protection public
   enumvalue EXPR_HOOK in line 95
      protection public
   enumvalue STMT_HOOK in line 96
      protection public
   enumvalue STMT_HOOK_AFTER in line 97
      protection public
   enumvalue SYM_HOOK in line 98
      protection public
   enumvalue STRING_HOOK in line 99
      protection public
   enumvalue DECLARATION_HOOK in line 100
      protection public
   enumvalue ASSIGNMENT_HOOK in line 101
      protection public
   enumvalue RAW_ASSIGNMENT_HOOK in line 102
      protection public
   enumvalue GLOBAL_ASSIGNMENT_HOOK in line 103
      protection public
   enumvalue LOGIC_HOOK in line 104
      protection public
   enumvalue CONDITION_HOOK in line 105
      protection public
   enumvalue PRELOOP_HOOK in line 106
      protection public
   enumvalue SELECT_HOOK in line 107
      protection public
   enumvalue WHOLE_CONDITION_HOOK in line 108
      protection public
   enumvalue FUNCTION_CALL_HOOK in line 109
      protection public
   enumvalue CALL_HOOK_AFTER_INLINE in line 110
      protection public
   enumvalue FUNCTION_CALL_HOOK_AFTER in line 111
      protection public
   enumvalue CALL_ASSIGNMENT_HOOK in line 112
      protection public
   enumvalue MACRO_ASSIGNMENT_HOOK in line 113
      protection public
   enumvalue BINOP_HOOK in line 114
      protection public
   enumvalue OP_HOOK in line 115
      protection public
   enumvalue DEREF_HOOK in line 116
      protection public
   enumvalue CASE_HOOK in line 117
      protection public
   enumvalue ASM_HOOK in line 118
      protection public
   enumvalue CAST_HOOK in line 119
      protection public
   enumvalue SIZEOF_HOOK in line 120
      protection public
   enumvalue BASE_HOOK in line 121
      protection public
   enumvalue FUNC_DEF_HOOK in line 122
      protection public
   enumvalue AFTER_DEF_HOOK in line 123
      protection public
   enumvalue END_FUNC_HOOK in line 124
      protection public
   enumvalue AFTER_FUNC_HOOK in line 125
      protection public
   enumvalue RETURN_HOOK in line 126
      protection public
   enumvalue INLINE_FN_START in line 127
      protection public
   enumvalue INLINE_FN_END in line 128
      protection public
   enumvalue END_FILE_HOOK in line 129
      protection public
   enumvalue INTERNAL in line 632
      protection public
   enumvalue PARAM_CLEARED in line 639
      protection public
   enumvalue PARAM_LIMIT in line 640
      protection public
   enumvalue PARAM_FILTER in line 641
      protection public
   enumvalue PARAM_VALUE in line 643
      protection public
   enumvalue BUF_SIZE in line 644
      protection public
   enumvalue USER_DATA in line 645
      protection public
   enumvalue CAPPED_DATA in line 646
      protection public
   enumvalue RETURN_VALUE in line 647
      protection public
   enumvalue DEREFERENCE in line 648
      protection public
   enumvalue RANGE_CAP in line 649
      protection public
   enumvalue LOCK_HELD in line 650
      protection public
   enumvalue LOCK_RELEASED in line 651
      protection public
   enumvalue ABSOLUTE_LIMITS in line 652
      protection public
   enumvalue PARAM_ADD in line 653
      protection public
   enumvalue PARAM_FREED in line 654
      protection public
   enumvalue DATA_SOURCE in line 655
      protection public
   enumvalue FUZZY_MAX in line 656
      protection public
   enumvalue STR_LEN in line 657
      protection public
   enumvalue ARRAY_LEN in line 658
      protection public
   enumvalue CAPABLE in line 659
      protection public
   enumvalue NS_CAPABLE in line 660
      protection public
   enumvalue TYPE_LINK in line 661
      protection public
   enumvalue UNTRACKED_PARAM in line 662
      protection public
   enumvalue CULL_PATH in line 663
      protection public
   enumvalue PARAM_SET in line 664
      protection public
   enumvalue PARAM_USED in line 665
      protection public
   enumvalue USER_DATA3 in line 668
      protection public
   enumvalue USER_DATA_SET in line 669
      protection public
   enumvalue USER_DATA_LIMITED in line 670
      protection public
   enumvalue PROJ_NONE in line 750
      protection public
   enumvalue PROJ_KERNEL in line 751
      protection public
   enumvalue PROJ_WINE in line 752
      protection public
   function DECLARE_ALLOCATOR(smatch_state) in line 50
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function INT_PTR(int) in line 52
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function PTR_INT(void *) in line 57
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable symbol::p defined in struct.c
   function DECLARE_ALLOCATOR(tracker) in line 67
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function DECLARE_PTR_LIST(tracker_list,struct tracker) in line 68
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function DECLARE_PTR_LIST(stree_stack,struct stree) in line 69
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function DECLARE_ALLOCATOR(var_sym) in line 91
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function DECLARE_PTR_LIST(var_sym_list,struct var_sym) in line 92
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function add_hook(void *,enum hook_type) in line 137
      protection public
      114 lines of code
      2 parameters
      1 conditional paths
      uses variable hook_container::hook_type defined in smatch_hooks.c
      uses variable hook_container::fn defined in smatch_hooks.c
      uses macro definition func defined in preprocessor1.c
      uses enumvalue EXPR_HOOK defined in smatch.h
      uses variable hook_container::data_type defined in smatch_hooks.c
      uses enumvalue EXPR_PTR defined in smatch_hooks.c
      uses enumvalue STMT_HOOK defined in smatch.h
      uses enumvalue STMT_PTR defined in smatch_hooks.c
      uses enumvalue STMT_HOOK_AFTER defined in smatch.h
      uses enumvalue SYM_HOOK defined in smatch.h
      uses enumvalue STRING_HOOK defined in smatch.h
      uses enumvalue DECLARATION_HOOK defined in smatch.h
      uses enumvalue SYMBOL_PTR defined in smatch_hooks.c
      uses enumvalue ASSIGNMENT_HOOK defined in smatch.h
      uses enumvalue RAW_ASSIGNMENT_HOOK defined in smatch.h
      uses enumvalue GLOBAL_ASSIGNMENT_HOOK defined in smatch.h
      uses enumvalue CALL_ASSIGNMENT_HOOK defined in smatch.h
      uses enumvalue MACRO_ASSIGNMENT_HOOK defined in smatch.h
      uses enumvalue BINOP_HOOK defined in smatch.h
      uses enumvalue OP_HOOK defined in smatch.h
      uses enumvalue LOGIC_HOOK defined in smatch.h
      uses enumvalue PRELOOP_HOOK defined in smatch.h
      uses enumvalue CONDITION_HOOK defined in smatch.h
      uses enumvalue SELECT_HOOK defined in smatch.h
      uses enumvalue WHOLE_CONDITION_HOOK defined in smatch.h
      uses enumvalue FUNCTION_CALL_HOOK defined in smatch.h
      uses enumvalue CALL_HOOK_AFTER_INLINE defined in smatch.h
      uses enumvalue FUNCTION_CALL_HOOK_AFTER defined in smatch.h
      uses enumvalue DEREF_HOOK defined in smatch.h
      uses enumvalue CASE_HOOK defined in smatch.h
      uses enumvalue ASM_HOOK defined in smatch.h
      uses enumvalue CAST_HOOK defined in smatch.h
      uses enumvalue SIZEOF_HOOK defined in smatch.h
      uses enumvalue BASE_HOOK defined in smatch.h
      uses enumvalue FUNC_DEF_HOOK defined in smatch.h
      uses enumvalue AFTER_DEF_HOOK defined in smatch.h
      uses enumvalue END_FUNC_HOOK defined in smatch.h
      uses enumvalue AFTER_FUNC_HOOK defined in smatch.h
      uses enumvalue RETURN_HOOK defined in smatch.h
      uses enumvalue INLINE_FN_START defined in smatch.h
      uses enumvalue INLINE_FN_END defined in smatch.h
      uses enumvalue END_FILE_HOOK defined in smatch.h
      uses enumvalue SYM_LIST_PTR defined in smatch_hooks.c
      uses macro definition add_ptr_list defined in ptrlist.h
   function add_merge_hook(int,merge_func_t *) in line 140
      protection public
      7 lines of code
      2 parameters
      1 conditional paths
      uses variable hook_container::data_type defined in smatch_hooks.c
      uses variable hook_container::fn defined in smatch_hooks.c
      uses macro definition func defined in preprocessor1.c
      uses macro definition add_ptr_list defined in ptrlist.h
   function add_unmatched_state_hook(int,unmatched_func_t *) in line 141
      protection public
      7 lines of code
      2 parameters
      1 conditional paths
      uses variable hook_container::data_type defined in smatch_hooks.c
      uses variable hook_container::fn defined in smatch_hooks.c
      uses macro definition func defined in preprocessor1.c
      uses macro definition add_ptr_list defined in ptrlist.h
   function add_pre_merge_hook(int,void(*)(struct sm_state *sm)) in line 142
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses variable pre_merge_hooks defined in smatch_hooks.c
   function add_scope_hook(scope_hook *,void *) in line 144
      protection public
      14 lines of code
      2 parameters
      1 conditional paths
      uses variable hook_container::fn defined in smatch_hooks.c
      uses variable scope_container::data defined in smatch_hooks.c
      uses macro definition add_ptr_list defined in ptrlist.h
   function add_function_hook(const char *,func_hook *,void *) in line 151
      protection public
      7 lines of code
      3 parameters
      1 conditional paths
      uses macro definition REGULAR_CALL defined in smatch_function_hooks.c
      uses variable fcall_back::call_back defined in smatch_function_hooks.c
      uses variable fcall_back::info defined in smatch_function_hooks.c
   function add_function_assign_hook(const char *,func_hook *,void *) in line 153
      protection public
      8 lines of code
      3 parameters
      1 conditional paths
      uses macro definition ASSIGN_CALL defined in smatch_function_hooks.c
      uses variable fcall_back::call_back defined in smatch_function_hooks.c
      uses variable fcall_back::info defined in smatch_function_hooks.c
   function add_implied_return_hook(const char *,implied_return_hook *,void *) in line 155
      protection public
      9 lines of code
      3 parameters
      1 conditional paths
      uses macro definition IMPLIED_RETURN defined in smatch_function_hooks.c
      uses variable fcall_back::call_back defined in smatch_function_hooks.c
      uses variable fcall_back::info defined in smatch_function_hooks.c
   function add_macro_assign_hook(const char *,func_hook *,void *) in line 158
      protection public
      8 lines of code
      3 parameters
      1 conditional paths
      uses macro definition MACRO_ASSIGN defined in smatch_function_hooks.c
      uses variable fcall_back::call_back defined in smatch_function_hooks.c
      uses variable fcall_back::info defined in smatch_function_hooks.c
   function add_macro_assign_hook_extra(const char *,func_hook *,void *) in line 160
      protection public
      8 lines of code
      3 parameters
      1 conditional paths
      uses macro definition MACRO_ASSIGN_EXTRA defined in smatch_function_hooks.c
      uses variable fcall_back::call_back defined in smatch_function_hooks.c
      uses variable fcall_back::info defined in smatch_function_hooks.c
   function return_implies_state(const char *,long long,long long,implication_hook *,void *) in line 162
      protection public
      9 lines of code
      5 parameters
      1 conditional paths
      uses macro definition RANGED_CALL defined in smatch_function_hooks.c
      uses variable fcall_back::call_back defined in smatch_function_hooks.c
      uses variable fcall_back::info defined in smatch_function_hooks.c
      uses variable fcall_back::range defined in smatch_function_hooks.c
      uses function alloc_range_perm(sval_t,sval_t) defined in smatch_extra.h
      uses function ll_to_sval(long long) defined in smatch.h
   function select_return_states_hook(int,return_implies_hook *) in line 164
      protection public
      8 lines of code
      2 parameters
      1 conditional paths
      uses variable return_implies_callback::type defined in smatch_function_hooks.c
      uses variable fcall_back::type defined in smatch_function_hooks.c
      uses variable return_implies_callback::callback defined in smatch_function_hooks.c
      uses macro definition add_ptr_list defined in ptrlist.h
   function select_return_states_before(void(*)(void)) in line 165
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function select_return_states_after(void(*)(void)) in line 166
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function get_implied_return(struct expression *,struct range_list **) in line 167
      protection public
      27 lines of code
      2 parameters
      1 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses function strip_expr(struct expression *) defined in smatch.h
      uses function expr_to_var(struct expression *) defined in smatch.h
      uses variable expression::fn defined in expression.h
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable fcall_back::type defined in smatch_function_hooks.c
      uses macro definition IMPLIED_RETURN defined in smatch_function_hooks.c
      uses variable fcall_back::u defined in smatch_function_hooks.c
      uses variable fcall_back::implied_return defined in smatch_function_hooks.c
      uses variable fcall_back::info defined in smatch_function_hooks.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses function free_string(char *) defined in smatch.h
   function allocate_hook_memory(void) in line 168
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable pre_merge_hooks defined in smatch_hooks.c
      uses function malloc(int) defined in sm_buf_size2.c
      uses variable num_checks defined in smatch.c
      uses function memset(void *,int,int) defined in check_byte_count-ice.c
   function add_modification_hook(int,modification_hook *) in line 176
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function add_indirect_modification_hook(int,modification_hook *) in line 177
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function get_modification_state(struct expression *) in line 178
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function get_state_expr(int,struct expression *) defined in smatch.h
   function outside_of_function(void) in line 180
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable cur_func_sym defined in smatch_flow.c
      uses macro definition NULL defined in sm_implied3.c
   function get_filename(void) in line 181
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses variable option_info defined in smatch.c
      uses variable option_full_path defined in smatch.c
   function get_base_file(void) in line 182
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function get_function(void) in line 183
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function get_lineno(void) in line 184
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function is_silenced_function(void) in line 192
      protection public
      11 lines of code
      1 parameters
      1 conditional paths
      uses macro definition func defined in preprocessor1.c
      uses function get_function(void) defined in smatch.h
   function sm_prefix(void) in line 197
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses macro definition sm_printf defined in smatch.h
      uses function get_filename(void) defined in smatch.h
      uses function get_lineno(void) defined in smatch.h
      uses function get_function(void) defined in smatch.h
      uses function print_implied_debug_msg(void) defined in smatch.h
   function print_implied_debug_msg(void) in line 202
      protection public
      11 lines of code
      1 parameters
      3 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses variable implied_debug_msg defined in smatch.h
      uses variable cur_func_sym defined in smatch.h
      uses macro definition sm_msg defined in smatch.h
   function get_state(int,const char *,struct symbol *) in line 246
      protection public
      6 lines of code
      3 parameters
      1 conditional paths
      uses function __get_state_hook(int,const char *,struct symbol *) defined in smatch.h
      uses variable name defined in smatch_type.c
      uses variable sym defined in smatch_type.c
      uses function get_state_stree(struct stree *,int,const char *,struct symbol *) defined in smatch_slist.c
   function get_state_expr(int,struct expression *) in line 247
      protection public
      15 lines of code
      2 parameters
      1 conditional paths
      uses variable name defined in smatch_type.c
      uses variable sym defined in smatch_type.c
      uses macro definition NULL defined in sm_implied3.c
      uses function strip_expr(struct expression *) defined in smatch.h
      uses function expr_to_var_sym(struct expression *,struct symbol **) defined in smatch.h
      uses function get_state(int,const char *,struct symbol *) defined in smatch_states.c
      uses function free_string(char *) defined in smatch.h
   function get_possible_states(int,const char *,struct symbol *) in line 248
      protection public
      9 lines of code
      3 parameters
      1 conditional paths
      uses function get_sm_state_stree(struct stree *,int,const char *,struct symbol *) defined in smatch_slist.c
      uses variable sm_state::owner defined in smatch.h
      uses variable name defined in smatch_type.c
      uses variable sym defined in smatch_type.c
      uses variable sm_state::possible defined in smatch.h
      uses macro definition NULL defined in sm_implied3.c
   function get_possible_states_expr(int,struct expression *) in line 250
      protection public
      15 lines of code
      2 parameters
      1 conditional paths
      uses variable name defined in smatch_type.c
      uses variable sym defined in smatch_type.c
      uses macro definition NULL defined in sm_implied3.c
      uses function strip_expr(struct expression *) defined in smatch.h
      uses function expr_to_var_sym(struct expression *,struct symbol **) defined in smatch.h
      uses function get_possible_states(int,const char *,struct symbol *) defined in smatch_states.c
      uses function free_string(char *) defined in smatch.h
   function set_state(int,const char *,struct symbol *,struct smatch_state *) in line 251
      protection public
      37 lines of code
      4 parameters
      1 conditional paths
      uses variable name defined in smatch_type.c
      uses macro definition NULL defined in sm_implied3.c
      uses macro definition sm_msg defined in smatch.h
      uses variable option_debug defined in smatch_states.c
      uses function check_name(unsigned short) defined in smatch.c
      uses variable sm_state::owner defined in smatch.h
      uses variable option_debug_check defined in smatch.c
      uses function get_state(int,const char *,struct symbol *) defined in smatch_states.c
      uses variable sym defined in smatch_type.c
      uses function show_state(struct smatch_state *) defined in smatch.h
      uses function unreachable(void) defined in smatch_states.c
      uses function set_state_stree_stack(struct stree_stack **,int,const char *,struct symbol *,struct smatch_state *) defined in smatch_slist.c
      uses function set_state_stree(struct stree **,int,const char *,struct symbol *,struct smatch_state *) defined in smatch_slist.c
   function set_state_expr(int,struct expression *,struct smatch_state *) in line 253
      protection public
      15 lines of code
      3 parameters
      1 conditional paths
      uses variable name defined in smatch_type.c
      uses variable sym defined in smatch_type.c
      uses macro definition NULL defined in sm_implied3.c
      uses function strip_expr(struct expression *) defined in smatch.h
      uses function expr_to_var_sym(struct expression *,struct symbol **) defined in smatch.h
      uses function set_state(int,const char *,struct symbol *,struct smatch_state *) defined in smatch_states.c
      uses variable sm_state::owner defined in smatch.h
      uses variable sm_state::state defined in smatch.h
      uses function free_string(char *) defined in smatch.h
   function delete_state(int,const char *,struct symbol *) in line 255
      protection public
      9 lines of code
      3 parameters
      1 conditional paths
      uses function delete_state_stree(struct stree **,int,const char *,struct symbol *) defined in smatch_slist.c
      uses variable sm_state::owner defined in smatch.h
      uses variable name defined in smatch_type.c
      uses variable sym defined in smatch_type.c
      uses function delete_state_stree_stack(struct stree_stack **,int,const char *,struct symbol *) defined in smatch_slist.c
   function delete_state_expr(int,struct expression *) in line 256
      protection public
      13 lines of code
      2 parameters
      1 conditional paths
      uses variable name defined in smatch_type.c
      uses variable sym defined in smatch_type.c
      uses function strip_expr(struct expression *) defined in smatch.h
      uses function expr_to_var_sym(struct expression *,struct symbol **) defined in smatch.h
      uses function delete_state(int,const char *,struct symbol *) defined in smatch_states.c
      uses function free_string(char *) defined in smatch.h
   function set_true_false_states(int,const char *,struct symbol *,struct smatch_state *,struct smatch_state *) in line 257
      protection public
      31 lines of code
      5 parameters
      1 conditional paths
      uses macro definition sm_msg defined in smatch.h
      uses variable option_debug defined in smatch_states.c
      uses function check_name(unsigned short) defined in smatch.c
      uses variable option_debug_check defined in smatch.c
      uses function get_state(int,const char *,struct symbol *) defined in smatch_states.c
      uses variable name defined in smatch_type.c
      uses variable sym defined in smatch_type.c
      uses function show_state(struct smatch_state *) defined in smatch.h
      uses variable true_state defined in smatch_states.c
      uses variable false_state defined in smatch_states.c
      uses function unreachable(void) defined in smatch_states.c
      uses function printf(char *,...) defined in test-be.c
      uses function set_state_stree(struct stree **,int,const char *,struct symbol *,struct smatch_state *) defined in smatch_slist.c
      uses function set_state_stree_stack(struct stree_stack **,int,const char *,struct symbol *,struct smatch_state *) defined in smatch_slist.c
   function set_true_false_states_expr(int,struct expression *,struct smatch_state *,struct smatch_state *) in line 260
      protection public
      15 lines of code
      4 parameters
      1 conditional paths
      uses variable name defined in smatch_type.c
      uses variable sym defined in smatch_type.c
      uses function strip_expr(struct expression *) defined in smatch.h
      uses function expr_to_var_sym(struct expression *,struct symbol **) defined in smatch.h
      uses function set_true_false_states(int,const char *,struct symbol *,struct smatch_state *,struct smatch_state *) defined in smatch_states.c
      uses variable true_state defined in smatch_states.c
      uses variable false_state defined in smatch_states.c
      uses function free_string(char *) defined in smatch.h
   function get_all_states_from_stree(int,struct stree *) in line 264
      protection public
      12 lines of code
      2 parameters
      1 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses macro definition FOR_EACH_SM defined in avl.h
      uses variable sm_state::owner defined in smatch.h
      uses function avl_insert(struct stree **,const struct sm_state *) defined in avl.c
      uses macro definition END_FOR_EACH_SM defined in avl.h
   function get_all_states_stree(int) in line 265
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function get_all_states_from_stree(int,struct stree *) defined in smatch_states.c
   function __get_cur_stree(void) in line 266
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function is_reachable(void) in line 267
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function alloc_string(const char *) in line 270
      protection public
      10 lines of code
      1 parameters
      1 conditional paths
      uses variable str defined in sm_overflow6.c
      uses macro definition NULL defined in sm_implied3.c
      uses function malloc(int) defined in sm_buf_size2.c
      uses function strlen(char *) defined in sm_overflow6.c
      uses function strcpy(char *,char *,int) defined in sm_overflow3.c
   function free_string(char *) in line 271
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable str defined in sm_overflow6.c
   function append(char *,const char *,int) in line 272
      protection public
      4 lines of code
      3 parameters
      1 conditional paths
      uses variable dest defined in sm_user_data2.c
      uses variable smatch_state::data defined in smatch.h
      uses function strlen(char *) defined in sm_overflow6.c
   function remove_parens(char *) in line 273
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
      uses variable src defined in sm_user_data3.c
      uses variable str defined in sm_overflow6.c
   function alloc_state_num(int) in line 274
      protection public
      12 lines of code
      1 parameters
      1 conditional paths
      uses function snprintf(char *,int,char *,char *) defined in sm_overflow6.c
      uses variable smatch_state::name defined in smatch.h
      uses function alloc_string(const char *) defined in smatch_helper.c
      uses variable smatch_state::data defined in smatch.h
      uses function INT_PTR(int) defined in smatch.h
   function alloc_state_str(const char *) in line 275
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses variable smatch_state::name defined in smatch.h
      uses function alloc_string(const char *) defined in smatch_helper.c
      uses variable name defined in smatch_type.c
   function get_argument_from_call_expr(struct expression_list *,int) in line 276
      protection public
      16 lines of code
      2 parameters
      1 conditional paths
      uses variable expression::args defined in expression.h
      uses macro definition NULL defined in sm_implied3.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function expr_to_var(struct expression *) in line 279
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function expr_to_var_sym(struct expression *,struct symbol **) defined in smatch_helper.c
      uses macro definition NULL defined in sm_implied3.c
   function expr_to_sym(struct expression *) in line 280
      protection public
      9 lines of code
      1 parameters
      1 conditional paths
      uses variable sym defined in smatch_type.c
      uses variable name defined in smatch_type.c
      uses function expr_to_var_sym(struct expression *,struct symbol **) defined in smatch_helper.c
      uses function free_string(char *) defined in smatch_helper.c
   function expr_to_str(struct expression *) in line 281
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function expr_to_str_sym(struct expression *,struct symbol **) defined in smatch_helper.c
      uses macro definition NULL defined in sm_implied3.c
   function expr_to_str_sym(struct expression *,struct symbol **) in line 282
      protection public
      18 lines of code
      2 parameters
      1 conditional paths
      uses macro definition VAR_LEN defined in smatch_helper.c
      uses macro definition NULL defined in sm_implied3.c
      uses function alloc_string(const char *) defined in smatch_helper.c
   function expr_to_var_sym(struct expression *,struct symbol **) in line 284
      protection public
      23 lines of code
      2 parameters
      1 conditional paths
      uses macro definition VAR_LEN defined in smatch_helper.c
      uses macro definition NULL defined in sm_implied3.c
      uses function strip_expr(struct expression *) defined in smatch_helper.c
      uses function alloc_string(const char *) defined in smatch_helper.c
   function expr_to_known_chunk_sym(struct expression *,struct symbol **) in line 286
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function expr_to_chunk_helper(struct expression *,struct symbol **,struct var_sym_list **) defined in smatch_helper.c
      uses variable sym defined in smatch_type.c
      uses macro definition NULL defined in sm_implied3.c
   function expr_to_chunk_sym_vsl(struct expression *,struct symbol **,struct var_sym_list **) in line 287
      protection public
      4 lines of code
      3 parameters
      1 conditional paths
      uses function expr_to_chunk_helper(struct expression *,struct symbol **,struct var_sym_list **) defined in smatch_helper.c
      uses variable sym defined in smatch_type.c
   function get_complication_score(struct expression *) in line 288
      protection public
      36 lines of code
      1 parameters
      1 conditional paths
      uses function strip_expr(struct expression *) defined in smatch_helper.c
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_CALL defined in expression.h
      uses enumvalue EXPR_COMPARE defined in expression.h
      uses enumvalue EXPR_BINOP defined in expression.h
      uses variable expression::left defined in expression.h
      uses variable expression::right defined in expression.h
      uses enumvalue EXPR_SYMBOL defined in expression.h
      uses function is_local_variable(struct expression *) defined in smatch.h
      uses enumvalue EXPR_PREOP defined in expression.h
      uses variable expression::op defined in expression.h
      uses variable expression::unop defined in expression.h
      uses enumvalue EXPR_DEREF defined in expression.h
      uses variable expression::deref defined in expression.h
      uses enumvalue EXPR_VALUE defined in expression.h
   function sym_name_is(const char *,struct expression *) in line 290
      protection public
      10 lines of code
      2 parameters
      1 conditional paths
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_SYMBOL defined in expression.h
      uses variable expression::symbol_name defined in expression.h
      uses variable ident::name defined in token.h
      uses variable name defined in smatch_type.c
   function get_const_value(struct expression *,sval_t *) in line 291
      protection public
      16 lines of code
      2 parameters
      1 conditional paths
      uses variable sym defined in smatch_type.c
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_SYMBOL defined in expression.h
      uses variable expression::symbol defined in expression.h
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::modifiers defined in struct.c
      uses macro definition MOD_CONST defined in symbol.h
      uses function get_value(struct expression *,sval_t *) defined in smatch_math.c
      uses variable symbol::initializer defined in struct.c
      uses function sval_cast(struct symbol *,sval_t) defined in smatch.h
      uses function get_type(struct expression *) defined in smatch.h
   function get_value(struct expression *,sval_t *) in line 292
      protection public
      10 lines of code
      2 parameters
      1 conditional paths
      uses enumvalue RL_EXACT defined in smatch_math.c
      uses function rl_to_sval(struct range_list *,sval_t *) defined in smatch_extra.h
   function get_implied_value(struct expression *,sval_t *) in line 293
      protection public
      10 lines of code
      2 parameters
      1 conditional paths
      uses enumvalue RL_IMPLIED defined in smatch_math.c
      uses function rl_to_sval(struct range_list *,sval_t *) defined in smatch_extra.h
   function get_implied_min(struct expression *,sval_t *) in line 294
      protection public
      11 lines of code
      2 parameters
      1 conditional paths
      uses enumvalue RL_IMPLIED defined in smatch_math.c
      uses function rl_min(struct range_list *) defined in smatch_extra.h
   function get_implied_max(struct expression *,sval_t *) in line 295
      protection public
      11 lines of code
      2 parameters
      1 conditional paths
      uses enumvalue RL_IMPLIED defined in smatch_math.c
      uses function rl_max(struct range_list *) defined in smatch_extra.h
   function get_hard_max(struct expression *,sval_t *) in line 296
      protection public
      11 lines of code
      2 parameters
      1 conditional paths
      uses enumvalue RL_HARD defined in smatch_math.c
      uses function rl_max(struct range_list *) defined in smatch_extra.h
   function get_fuzzy_min(struct expression *,sval_t *) in line 297
      protection public
      15 lines of code
      2 parameters
      1 conditional paths
      uses enumvalue RL_FUZZY defined in smatch_math.c
      uses function rl_min(struct range_list *) defined in smatch_extra.h
      uses function sval_is_negative(sval_t) defined in smatch.h
      uses function sval_is_min(sval_t) defined in smatch.h
   function get_fuzzy_max(struct expression *,sval_t *) in line 298
      protection public
      15 lines of code
      2 parameters
      1 conditional paths
      uses enumvalue RL_FUZZY defined in smatch_math.c
      uses function rl_max(struct range_list *) defined in smatch_extra.h
      uses variable sval_t::uvalue defined in smatch.h
   function get_absolute_min(struct expression *,sval_t *) in line 299
      protection public
      19 lines of code
      2 parameters
      1 conditional paths
      uses function get_type(struct expression *) defined in smatch.h
      uses enumvalue RL_ABSOLUTE defined in smatch_math.c
      uses function rl_min(struct range_list *) defined in smatch_extra.h
      uses function sval_type_min(struct symbol *) defined in smatch.h
      uses function sval_cmp(sval_t,sval_t) defined in smatch.h
   function get_absolute_max(struct expression *,sval_t *) in line 300
      protection public
      19 lines of code
      2 parameters
      1 conditional paths
      uses function get_type(struct expression *) defined in smatch.h
      uses enumvalue RL_ABSOLUTE defined in smatch_math.c
      uses function rl_max(struct range_list *) defined in smatch_extra.h
      uses function sval_type_max(struct symbol *) defined in smatch.h
      uses function sval_cmp(sval_t,sval_t) defined in smatch.h
   function parse_call_math(struct expression *,char *,sval_t *) in line 301
      protection public
      10 lines of code
      3 parameters
      1 conditional paths
      uses function parse_call_math_rl(struct expression *,char *,struct range_list **) defined in smatch_parse_call_math.c
      uses function rl_to_sval(struct range_list *,sval_t *) defined in smatch_extra.h
   function parse_call_math_rl(struct expression *,char *,struct range_list **) in line 302
      protection public
      44 lines of code
      3 parameters
      1 conditional paths
      uses variable c defined in sm_array_overflow.c
      uses variable option_debug defined in smatch.h
      uses macro definition sm_msg defined in smatch.h
      uses function push_rl(struct range_list_stack **,struct range_list *) defined in smatch_extra.h
      uses function show_rl(struct range_list *) defined in smatch_extra.h
      uses function pop_rl(struct range_list_stack **) defined in smatch_extra.h
   function get_value_in_terms_of_parameter_math(struct expression *) in line 303
      protection public
      16 lines of code
      1 parameters
      1 conditional paths
      uses variable buf defined in sm_fake_assignment.c
      uses function get_assigned_expr(struct expression *) defined in check_assigned_expr.c
      uses macro definition NULL defined in sm_implied3.c
      uses function alloc_sname(const char *) defined in smatch_slist.c
   function get_value_in_terms_of_parameter_math_var_sym(const char *,struct symbol *) in line 304
      protection public
      17 lines of code
      2 parameters
      1 conditional paths
      uses variable buf defined in sm_fake_assignment.c
      uses function get_assigned_expr_name_sym(const char *,struct symbol *) defined in check_assigned_expr.c
      uses variable sm_state::name defined in smatch.h
      uses variable sm_state::sym defined in smatch.h
      uses macro definition NULL defined in sm_implied3.c
      uses function alloc_sname(const char *) defined in smatch_slist.c
   function is_zero(struct expression *) in line 305
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses function get_value(struct expression *,sval_t *) defined in smatch.h
      uses variable sval_t::value defined in smatch.h
   function known_condition_true(struct expression *) in line 306
      protection public
      12 lines of code
      1 parameters
      1 conditional paths
      uses function get_value(struct expression *,sval_t *) defined in smatch_math.c
      uses variable sval_t::value defined in smatch.h
   function known_condition_false(struct expression *) in line 307
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
      uses function is_zero(struct expression *) defined in smatch.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_CALL defined in expression.h
      uses function sym_name_is(const char *,struct expression *) defined in smatch.h
      uses variable expression::fn defined in expression.h
   function implied_condition_true(struct expression *) in line 308
      protection public
      40 lines of code
      1 parameters
      1 conditional paths
      uses function known_condition_true(struct expression *) defined in smatch_math.c
      uses function get_implied_value(struct expression *,sval_t *) defined in smatch_math.c
      uses variable sval_t::value defined in smatch.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_POSTOP defined in expression.h
      uses variable expression::unop defined in expression.h
      uses enumvalue EXPR_PREOP defined in expression.h
      uses variable expression::op defined in expression.h
      uses enumvalue SPECIAL_DECREMENT defined in token.h
      uses function implied_not_equal(struct expression *,long long) defined in smatch_extra.c
      uses enumvalue SPECIAL_INCREMENT defined in token.h
      uses function strip_expr(struct expression *) defined in smatch.h
      uses enumvalue EXPR_COMPARE defined in expression.h
      uses function implied_condition_false(struct expression *) defined in smatch_math.c
   function implied_condition_false(struct expression *) in line 309
      protection public
      32 lines of code
      1 parameters
      1 conditional paths
      uses function known_condition_false(struct expression *) defined in smatch_math.c
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_COMPARE defined in expression.h
      uses enumvalue EXPR_PREOP defined in expression.h
      uses variable expression::op defined in expression.h
      uses function implied_condition_true(struct expression *) defined in smatch_math.c
      uses variable expression::unop defined in expression.h
      uses function strip_expr(struct expression *) defined in smatch.h
      uses function get_implied_value(struct expression *,sval_t *) defined in smatch_math.c
      uses variable sval_t::value defined in smatch.h
   function can_integer_overflow(struct symbol *,struct expression *) in line 310
      protection public
      43 lines of code
      2 parameters
      1 conditional paths
      uses function op(void) defined in loop2.c
      uses function strip_expr(struct expression *) defined in smatch.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_ASSIGNMENT defined in expression.h
      uses variable expression::op defined in expression.h
      uses enumvalue SPECIAL_MUL_ASSIGN defined in token.h
      uses enumvalue SPECIAL_ADD_ASSIGN defined in token.h
      uses enumvalue SPECIAL_SHL_ASSIGN defined in token.h
      uses enumvalue SPECIAL_LEFTSHIFT defined in token.h
      uses enumvalue EXPR_BINOP defined in expression.h
      uses function get_absolute_max(struct expression *,sval_t *) defined in smatch_math.c
      uses variable expression::left defined in expression.h
      uses variable expression::right defined in expression.h
      uses function sval_binop_overflows(sval_t,int,sval_t) defined in smatch.h
      uses function sval_binop(sval_t,int,sval_t) defined in smatch.h
      uses function sval_cmp(sval_t,sval_t) defined in smatch.h
      uses function sval_type_max(struct symbol *) defined in smatch.h
   function is_array(struct expression *) in line 312
      protection public
      23 lines of code
      1 parameters
      1 conditional paths
      uses function strip_expr(struct expression *) defined in smatch_helper.c
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_PREOP defined in expression.h
      uses variable expression::op defined in expression.h
      uses variable expression::unop defined in expression.h
      uses enumvalue EXPR_BINOP defined in expression.h
      uses function get_type(struct expression *) defined in smatch.h
      uses variable expression::left defined in expression.h
      uses enumvalue SYM_ARRAY defined in symbol.h
   function get_array_base(struct expression *) in line 313
      protection public
      11 lines of code
      1 parameters
      1 conditional paths
      uses function is_array(struct expression *) defined in smatch_helper.c
      uses macro definition NULL defined in sm_implied3.c
      uses function strip_expr(struct expression *) defined in smatch_helper.c
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_PREOP defined in expression.h
      uses variable expression::op defined in expression.h
      uses variable expression::unop defined in expression.h
      uses enumvalue EXPR_BINOP defined in expression.h
      uses function strip_parens(struct expression *) defined in smatch_helper.c
      uses variable expression::left defined in expression.h
   function get_array_offset(struct expression *) in line 314
      protection public
      11 lines of code
      1 parameters
      1 conditional paths
      uses function is_array(struct expression *) defined in smatch_helper.c
      uses macro definition NULL defined in sm_implied3.c
      uses function strip_expr(struct expression *) defined in smatch_helper.c
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_PREOP defined in expression.h
      uses variable expression::op defined in expression.h
      uses variable expression::unop defined in expression.h
      uses enumvalue EXPR_BINOP defined in expression.h
      uses function strip_parens(struct expression *) defined in smatch_helper.c
      uses variable expression::right defined in expression.h
   function show_state(struct smatch_state *) in line 315
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses variable smatch_state::name defined in smatch.h
   function get_expression_statement(struct expression *) in line 316
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_PREOP defined in expression.h
      uses macro definition NULL defined in sm_implied3.c
      uses variable expression::op defined in expression.h
      uses variable expression::unop defined in expression.h
      uses enumvalue EXPR_STATEMENT defined in expression.h
      uses variable expression::statement defined in expression.h
      uses variable statement::type defined in parse.h
      uses enumvalue STMT_COMPOUND defined in parse.h
   function strip_parens(struct expression *) in line 317
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_PREOP defined in expression.h
      uses variable expression::op defined in expression.h
      uses variable expression::unop defined in expression.h
      uses enumvalue EXPR_STATEMENT defined in expression.h
      uses variable expression::statement defined in expression.h
      uses variable statement::type defined in parse.h
      uses enumvalue STMT_COMPOUND defined in parse.h
   function strip_expr(struct expression *) in line 318
      protection public
      50 lines of code
      1 parameters
      1 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_FORCE_CAST defined in expression.h
      uses enumvalue EXPR_CAST defined in expression.h
      uses variable expression::cast_expression defined in expression.h
      uses enumvalue EXPR_PREOP defined in expression.h
      uses variable expression::unop defined in expression.h
      uses variable expression::op defined in expression.h
      uses enumvalue EXPR_STATEMENT defined in expression.h
      uses variable expression::statement defined in expression.h
      uses variable statement::type defined in parse.h
      uses enumvalue STMT_COMPOUND defined in parse.h
      uses function get_type(struct expression *) defined in smatch.h
      uses enumvalue SYM_ARRAY defined in symbol.h
      uses enumvalue EXPR_CONDITIONAL defined in expression.h
      uses function known_condition_true(struct expression *) defined in smatch.h
      uses variable expression::conditional defined in expression.h
      uses variable expression::cond_true defined in expression.h
      uses function known_condition_false(struct expression *) defined in smatch.h
      uses variable expression::cond_false defined in expression.h
      uses enumvalue EXPR_CALL defined in expression.h
      uses function sym_name_is(const char *,struct expression *) defined in smatch_helper.c
      uses variable expression::fn defined in expression.h
      uses function get_argument_from_call_expr(struct expression_list *,int) defined in smatch_helper.c
      uses variable expression::args defined in expression.h
   function scoped_state(int,const char *,struct symbol *) in line 319
      protection public
      7 lines of code
      3 parameters
      1 conditional paths
      uses function alloc_tracker(int,const char *,struct symbol *) defined in smatch.h
      uses variable name defined in smatch_type.c
      uses variable sym defined in smatch_type.c
      uses function add_scope_hook(scope_hook *,void *) defined in smatch.h
   function is_error_return(struct expression *) in line 320
      protection public
      23 lines of code
      1 parameters
      1 conditional paths
      uses variable cur_func_sym defined in smatch.h
      uses enumvalue SYM_NODE defined in symbol.h
      uses enumvalue SYM_FN defined in symbol.h
      uses function get_implied_value(struct expression *,sval_t *) defined in smatch.h
      uses variable sval_t::value defined in smatch.h
      uses enumvalue SYM_PTR defined in symbol.h
   function getting_address(void) in line 321
      protection public
      19 lines of code
      1 parameters
      1 conditional paths
      uses macro definition FOR_EACH_PTR_REVERSE defined in ptrlist.h
      uses variable big_expression_stack defined in smatch.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_PREOP defined in expression.h
      uses variable expression::op defined in expression.h
      uses macro definition END_FOR_EACH_PTR_REVERSE defined in ptrlist.h
   function get_member_name(struct expression *) in line 322
      protection public
      29 lines of code
      1 parameters
      1 conditional paths
      uses variable buf defined in sm_fake_assignment.c
      uses variable sym defined in smatch_type.c
      uses function strip_expr(struct expression *) defined in smatch_helper.c
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_DEREF defined in expression.h
      uses macro definition NULL defined in sm_implied3.c
      uses variable expression::member defined in expression.h
      uses function get_type(struct expression *) defined in smatch.h
      uses variable expression::deref defined in expression.h
      uses variable symbol::type defined in struct.c
      uses enumvalue SYM_UNION defined in symbol.h
      uses function expr_to_sym(struct expression *) defined in smatch_helper.c
      uses function get_real_base_type(struct symbol *) defined in smatch.h
      uses enumvalue SYM_PTR defined in symbol.h
      uses variable symbol::ident defined in struct.c
      uses function snprintf(char *,int,char *,char *) defined in sm_overflow6.c
      uses variable ident::name defined in token.h
      uses function alloc_string(const char *) defined in smatch_helper.c
   function get_fnptr_name(struct expression *) in line 323
      protection public
      51 lines of code
      1 parameters
      1 conditional paths
      uses variable name defined in smatch_type.c
      uses function strip_expr(struct expression *) defined in smatch.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_PREOP defined in expression.h
      uses variable expression::op defined in expression.h
      uses variable expression::unop defined in expression.h
      uses function get_returned_ptr(struct expression *) defined in smatch_function_ptrs.c
      uses function get_member_name(struct expression *) defined in smatch.h
      uses enumvalue EXPR_SYMBOL defined in expression.h
      uses variable param defined in smatch_parse_call_math.c
      uses variable buf defined in sm_fake_assignment.c
      uses variable sym defined in smatch_type.c
      uses function get_param_num_from_sym(struct symbol *) defined in smatch.h
      uses variable expression::symbol defined in expression.h
      uses function snprintf(char *,int,char *,char *) defined in sm_overflow6.c
      uses function get_function(void) defined in smatch.h
      uses function alloc_string(const char *) defined in smatch.h
      uses function expr_to_var_sym(struct expression *,struct symbol **) defined in smatch.h
      uses macro definition NULL defined in sm_implied3.c
      uses function get_type(struct expression *) defined in smatch.h
      uses enumvalue SYM_PTR defined in symbol.h
      uses function free_string(char *) defined in smatch.h
      uses function expr_to_var(struct expression *) defined in smatch.h
   function cmp_pos(struct position,struct position) in line 324
      protection public
      20 lines of code
      2 parameters
      1 conditional paths
      uses variable position::stream defined in lib.h
      uses variable position::line defined in lib.h
      uses variable position::pos defined in lib.h
   function positions_eq(struct position,struct position) in line 325
      protection public
      10 lines of code
      2 parameters
      1 conditional paths
      uses variable position::line defined in lib.h
      uses variable position::pos defined in lib.h
      uses variable position::stream defined in lib.h
   function get_current_statement(void) in line 326
      protection public
      18 lines of code
      1 parameters
      1 conditional paths
      uses variable big_statement_stack defined in smatch.h
      uses function get_macro_name(struct position) defined in macro_table.c
      uses variable statement::pos defined in parse.h
      uses macro definition FOR_EACH_PTR_REVERSE defined in ptrlist.h
      uses function positions_eq(struct position,struct position) defined in smatch_helper.c
      uses variable position::line defined in lib.h
      uses macro definition END_FOR_EACH_PTR_REVERSE defined in ptrlist.h
   function get_prev_statement(void) in line 327
      protection public
      12 lines of code
      1 parameters
      1 conditional paths
      uses macro definition FOR_EACH_PTR_REVERSE defined in ptrlist.h
      uses variable big_statement_stack defined in smatch.h
      uses macro definition END_FOR_EACH_PTR_REVERSE defined in ptrlist.h
      uses macro definition NULL defined in sm_implied3.c
   function get_param_num_from_sym(struct symbol *) in line 328
      protection public
      16 lines of code
      1 parameters
      1 conditional paths
      uses variable cur_func_sym defined in smatch.h
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::base_type defined in struct.c
      uses variable symbol::arguments defined in struct.c
      uses variable sym defined in smatch_type.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function get_param_num(struct expression *) in line 329
      protection public
      13 lines of code
      1 parameters
      1 conditional paths
      uses variable sym defined in smatch_type.c
      uses variable name defined in smatch_type.c
      uses variable cur_func_sym defined in smatch.h
      uses function expr_to_var_sym(struct expression *,struct symbol **) defined in smatch_helper.c
      uses function free_string(char *) defined in smatch_helper.c
      uses function get_param_num_from_sym(struct symbol *) defined in smatch_helper.c
   function ms_since(struct timeval *) in line 330
      protection public
      10 lines of code
      1 parameters
      1 conditional paths
      uses macro definition NULL defined in sm_implied3.c
   function parent_is_gone_var_sym(const char *,struct symbol *) in line 331
      protection public
      10 lines of code
      2 parameters
      1 conditional paths
      uses variable name defined in smatch_type.c
      uses variable sym defined in smatch_type.c
      uses function parent_is_null_var_sym(const char *,struct symbol *) defined in smatch_extra.c
      uses function parent_is_free_var_sym(const char *,struct symbol *) defined in check_free.c
   function parent_is_gone(struct expression *) in line 332
      protection public
      15 lines of code
      1 parameters
      1 conditional paths
      uses variable sym defined in smatch_type.c
      uses function strip_expr(struct expression *) defined in smatch_helper.c
      uses function expr_to_var_sym(struct expression *,struct symbol **) defined in smatch_helper.c
      uses function parent_is_gone_var_sym(const char *,struct symbol *) defined in smatch_helper.c
      uses function free_string(char *) defined in smatch_helper.c
   function invert_op(int) in line 333
      protection public
      18 lines of code
      1 parameters
      1 conditional paths
      uses function op(void) defined in loop2.c
      uses enumvalue SPECIAL_LEFTSHIFT defined in token.h
      uses enumvalue SPECIAL_RIGHTSHIFT defined in token.h
   function expr_equiv(struct expression *,struct expression *) in line 334
      protection public
      27 lines of code
      2 parameters
      1 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses variable one defined in sm_equiv1.c
      uses variable two defined in sm_equiv1.c
      uses function expr_to_str_sym(struct expression *,struct symbol **) defined in smatch_helper.c
      uses function free_string(char *) defined in smatch_helper.c
   function get_real_base_type(struct symbol *) in line 337
      protection public
      13 lines of code
      1 parameters
      1 conditional paths
      uses variable sym defined in smatch_type.c
      uses macro definition NULL defined in sm_implied3.c
      uses variable symbol::type defined in struct.c
      uses enumvalue SYM_RESTRICT defined in symbol.h
      uses enumvalue SYM_NODE defined in symbol.h
   function type_bits(struct symbol *) in line 338
      protection public
      10 lines of code
      1 parameters
      1 conditional paths
      uses enumvalue SYM_PTR defined in symbol.h
      uses variable bits_in_pointer defined in target.c
      uses function examine_symbol_type(struct symbol *) defined in symbol.c
   function type_bytes(struct symbol *) in line 339
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses function type_bits(struct symbol *) defined in smatch_type.c
   function type_positive_bits(struct symbol *) in line 340
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses function type_unsigned(struct symbol *) defined in smatch_type.c
      uses function type_bits(struct symbol *) defined in smatch_type.c
   function get_pointer_type(struct expression *) in line 341
      protection public
      16 lines of code
      1 parameters
      1 conditional paths
      uses variable sym defined in smatch_type.c
      uses function get_type(struct expression *) defined in smatch_type.c
      uses macro definition NULL defined in sm_implied3.c
      uses variable symbol::type defined in struct.c
      uses enumvalue SYM_NODE defined in symbol.h
      uses function get_real_base_type(struct symbol *) defined in smatch_type.c
      uses enumvalue SYM_PTR defined in symbol.h
      uses enumvalue SYM_ARRAY defined in symbol.h
   function get_type(struct expression *) in line 342
      protection public
      68 lines of code
      1 parameters
      1 conditional paths
      uses function strip_parens(struct expression *) defined in smatch.h
      uses macro definition NULL defined in sm_implied3.c
      uses variable expression::ctype defined in expression.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_STRING defined in expression.h
      uses enumvalue EXPR_SYMBOL defined in expression.h
      uses enumvalue EXPR_DEREF defined in expression.h
      uses enumvalue EXPR_PREOP defined in expression.h
      uses enumvalue EXPR_POSTOP defined in expression.h
      uses variable expression::op defined in expression.h
      uses function get_pointer_type(struct expression *) defined in smatch_type.c
      uses variable expression::unop defined in expression.h
      uses enumvalue EXPR_ASSIGNMENT defined in expression.h
      uses variable expression::left defined in expression.h
      uses enumvalue EXPR_CAST defined in expression.h
      uses enumvalue EXPR_FORCE_CAST defined in expression.h
      uses enumvalue EXPR_IMPLIED_CAST defined in expression.h
      uses function get_real_base_type(struct symbol *) defined in smatch_type.c
      uses variable expression::cast_type defined in expression.h
      uses enumvalue EXPR_COMPARE defined in expression.h
      uses enumvalue EXPR_BINOP defined in expression.h
      uses enumvalue EXPR_CALL defined in expression.h
      uses enumvalue EXPR_STATEMENT defined in expression.h
      uses variable expression::statement defined in expression.h
      uses enumvalue EXPR_CONDITIONAL defined in expression.h
      uses enumvalue EXPR_SELECT defined in expression.h
      uses enumvalue EXPR_SIZEOF defined in expression.h
      uses enumvalue EXPR_LOGICAL defined in expression.h
      uses variable symbol::type defined in struct.c
      uses enumvalue SYM_TYPEOF defined in symbol.h
      uses variable symbol::initializer defined in struct.c
   function type_unsigned(struct symbol *) in line 343
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::modifiers defined in struct.c
      uses macro definition MOD_UNSIGNED defined in symbol.h
   function type_signed(struct symbol *) in line 344
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::modifiers defined in struct.c
      uses macro definition MOD_SIGNED defined in symbol.h
   function expr_unsigned(struct expression *) in line 345
      protection public
      11 lines of code
      1 parameters
      1 conditional paths
      uses variable sym defined in smatch_type.c
      uses function get_type(struct expression *) defined in smatch_type.c
      uses function type_unsigned(struct symbol *) defined in smatch_type.c
   function expr_signed(struct expression *) in line 346
      protection public
      11 lines of code
      1 parameters
      1 conditional paths
      uses variable sym defined in smatch_type.c
      uses function get_type(struct expression *) defined in smatch_type.c
      uses function type_signed(struct symbol *) defined in smatch_type.c
   function returns_unsigned(struct symbol *) in line 347
      protection public
      10 lines of code
      1 parameters
      1 conditional paths
      uses variable sym defined in smatch_type.c
      uses variable symbol::type defined in struct.c
      uses enumvalue SYM_FN defined in symbol.h
      uses function type_unsigned(struct symbol *) defined in smatch_type.c
   function is_pointer(struct expression *) in line 348
      protection public
      13 lines of code
      1 parameters
      1 conditional paths
      uses variable sym defined in smatch_type.c
      uses function get_type(struct expression *) defined in smatch_type.c
      uses variable symbol::type defined in struct.c
      uses enumvalue SYM_PTR defined in symbol.h
   function returns_pointer(struct symbol *) in line 349
      protection public
      12 lines of code
      1 parameters
      1 conditional paths
      uses variable sym defined in smatch_type.c
      uses variable symbol::type defined in struct.c
      uses enumvalue SYM_FN defined in symbol.h
      uses enumvalue SYM_PTR defined in symbol.h
   function sval_type_max(struct symbol *) in line 350
      protection public
      11 lines of code
      1 parameters
      1 conditional paths
      uses function type_bits(struct symbol *) defined in smatch_type.c
      uses variable sval_t::type defined in smatch.h
      uses variable sval_t::value defined in smatch.h
      uses function type_positive_bits(struct symbol *) defined in smatch_type.c
   function sval_type_min(struct symbol *) in line 351
      protection public
      17 lines of code
      1 parameters
      1 conditional paths
      uses function type_bits(struct symbol *) defined in smatch_type.c
      uses variable sval_t::type defined in smatch.h
      uses function type_unsigned(struct symbol *) defined in smatch_type.c
      uses variable sval_t::value defined in smatch.h
      uses function type_positive_bits(struct symbol *) defined in smatch_type.c
   function nr_bits(struct expression *) in line 352
      protection public
      9 lines of code
      1 parameters
      1 conditional paths
      uses function get_type(struct expression *) defined in smatch_type.c
      uses function type_bits(struct symbol *) defined in smatch_type.c
   function is_void_pointer(struct expression *) in line 353
      protection public
      12 lines of code
      1 parameters
      1 conditional paths
      uses function get_type(struct expression *) defined in smatch_type.c
      uses enumvalue SYM_PTR defined in symbol.h
      uses function get_real_base_type(struct symbol *) defined in smatch_type.c
   function is_char_pointer(struct expression *) in line 354
      protection public
      12 lines of code
      1 parameters
      1 conditional paths
      uses function get_type(struct expression *) defined in smatch_type.c
      uses enumvalue SYM_PTR defined in symbol.h
      uses function get_real_base_type(struct symbol *) defined in smatch_type.c
   function is_string(struct expression *) in line 355
      protection public
      9 lines of code
      1 parameters
      1 conditional paths
      uses function strip_expr(struct expression *) defined in smatch.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_STRING defined in expression.h
      uses variable expression::string defined in expression.h
   function is_static(struct expression *) in line 356
      protection public
      16 lines of code
      1 parameters
      1 conditional paths
      uses variable name defined in smatch_type.c
      uses variable sym defined in smatch_type.c
      uses function expr_to_str_sym(struct expression *,struct symbol **) defined in smatch.h
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::modifiers defined in struct.c
      uses macro definition MOD_STATIC defined in symbol.h
      uses function free_string(char *) defined in smatch.h
   function is_local_variable(struct expression *) in line 357
      protection public
      15 lines of code
      1 parameters
      1 conditional paths
      uses variable sym defined in smatch_type.c
      uses variable name defined in smatch_type.c
      uses function expr_to_var_sym(struct expression *,struct symbol **) defined in smatch.h
      uses function free_string(char *) defined in smatch.h
      uses variable symbol::scope defined in struct.c
      uses variable scope::token defined in scope.h
      uses function cmp_pos(struct position,struct position) defined in smatch.h
      uses variable token::pos defined in token.h
      uses variable cur_func_sym defined in smatch.h
      uses variable symbol::pos defined in struct.c
      uses function is_static(struct expression *) defined in smatch_type.c
   function types_equiv(struct symbol *,struct symbol *) in line 358
      protection public
      14 lines of code
      2 parameters
      1 conditional paths
      uses variable one defined in sm_equiv1.c
      uses variable two defined in sm_equiv1.c
      uses enumvalue SYM_PTR defined in symbol.h
      uses function get_real_base_type(struct symbol *) defined in smatch_type.c
      uses function type_positive_bits(struct symbol *) defined in smatch_type.c
   function fn_static(void) in line 359
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable cur_func_sym defined in smatch.h
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::modifiers defined in struct.c
      uses macro definition MOD_STATIC defined in symbol.h
   function global_static(void) in line 360
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses variable cur_func_sym defined in smatch.h
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::modifiers defined in struct.c
      uses macro definition MOD_STATIC defined in symbol.h
   function cur_func_return_type(void) in line 361
      protection public
      10 lines of code
      1 parameters
      1 conditional paths
      uses variable sym defined in smatch_type.c
      uses function get_real_base_type(struct symbol *) defined in smatch_type.c
      uses variable cur_func_sym defined in smatch.h
      uses variable symbol::type defined in struct.c
      uses enumvalue SYM_FN defined in symbol.h
      uses macro definition NULL defined in sm_implied3.c
   function get_arg_type(struct expression *,int) in line 362
      protection public
      26 lines of code
      2 parameters
      1 conditional paths
      uses function get_type(struct expression *) defined in smatch_type.c
      uses macro definition NULL defined in sm_implied3.c
      uses variable symbol::type defined in struct.c
      uses enumvalue SYM_PTR defined in symbol.h
      uses function get_real_base_type(struct symbol *) defined in smatch_type.c
      uses enumvalue SYM_FN defined in symbol.h
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable symbol::arguments defined in struct.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function get_member_type_from_key(struct expression *,char *) in line 363
      protection public
      26 lines of code
      2 parameters
      1 conditional paths
      uses variable sym defined in smatch_type.c
      uses function get_type(struct expression *) defined in smatch_type.c
      uses variable symbol::type defined in struct.c
      uses enumvalue SYM_PTR defined in symbol.h
      uses macro definition NULL defined in sm_implied3.c
      uses function get_real_base_type(struct symbol *) defined in smatch_type.c
      uses variable symbol::symbol_list defined in struct.c
   function is_struct(struct expression *) in line 364
      protection public
      9 lines of code
      1 parameters
      1 conditional paths
      uses function get_type(struct expression *) defined in smatch_type.c
      uses enumvalue SYM_STRUCT defined in symbol.h
   function type_to_str(struct symbol *) in line 365
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses variable buf defined in sm_fake_assignment.c
   function add_ignore(int,const char *,struct symbol *) in line 368
      protection public
      10 lines of code
      3 parameters
      1 conditional paths
      uses function malloc(int) defined in sm_buf_size2.c
      uses variable tracker::name defined in smatch.h
      uses function alloc_string(const char *) defined in smatch.h
      uses variable name defined in smatch_type.c
      uses variable tracker::owner defined in smatch.h
      uses variable tracker::sym defined in smatch.h
      uses variable sym defined in smatch_type.c
      uses macro definition add_ptr_list defined in ptrlist.h
   function is_ignored(int,const char *,struct symbol *) in line 369
      protection public
      11 lines of code
      3 parameters
      1 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable tracker::owner defined in smatch.h
      uses variable tracker::sym defined in smatch.h
      uses variable sym defined in smatch_type.c
      uses variable tracker::name defined in smatch.h
      uses variable name defined in smatch_type.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function alloc_var_sym(const char *,struct symbol *) in line 372
      protection public
      9 lines of code
      2 parameters
      1 conditional paths
      uses variable var_sym::var defined in smatch.h
      uses function alloc_string(const char *) defined in smatch.h
      uses variable var_sym::sym defined in smatch.h
      uses variable sym defined in smatch_type.c
   function expr_to_vsl(struct expression *) in line 373
      protection public
      33 lines of code
      1 parameters
      1 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses variable sym defined in smatch_type.c
      uses function strip_expr(struct expression *) defined in smatch.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_PREOP defined in expression.h
      uses variable expression::op defined in expression.h
      uses variable expression::unop defined in expression.h
      uses enumvalue EXPR_BINOP defined in expression.h
      uses enumvalue EXPR_LOGICAL defined in expression.h
      uses enumvalue EXPR_COMPARE defined in expression.h
      uses variable expression::left defined in expression.h
      uses variable expression::right defined in expression.h
      uses function combine_var_sym_lists(struct var_sym_list *,struct var_sym_list *) defined in smatch_var_sym.c
      uses function free_var_syms_and_list(struct var_sym_list **) defined in smatch_var_sym.c
      uses function expr_to_var_sym(struct expression *,struct symbol **) defined in smatch.h
      uses function free_string(char *) defined in smatch.h
      uses function add_var_sym(struct var_sym_list **,const char *,struct symbol *) defined in smatch_var_sym.c
   function add_var_sym(struct var_sym_list **,const char *,struct symbol *) in line 374
      protection public
      9 lines of code
      3 parameters
      1 conditional paths
      uses function in_var_sym_list(struct var_sym_list *,const char *,struct symbol *) defined in smatch_var_sym.c
      uses variable sym defined in smatch_type.c
      uses function alloc_var_sym(const char *,struct symbol *) defined in smatch_var_sym.c
      uses macro definition add_ptr_list defined in ptrlist.h
   function add_var_sym_expr(struct var_sym_list **,struct expression *) in line 375
      protection public
      12 lines of code
      2 parameters
      1 conditional paths
      uses variable sym defined in smatch_type.c
      uses function expr_to_var_sym(struct expression *,struct symbol **) defined in smatch.h
      uses function add_var_sym(struct var_sym_list **,const char *,struct symbol *) defined in smatch_var_sym.c
      uses function free_string(char *) defined in smatch.h
   function del_var_sym(struct var_sym_list **,const char *,struct symbol *) in line 376
      protection public
      12 lines of code
      3 parameters
      1 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable var_sym::sym defined in smatch.h
      uses variable sym defined in smatch_type.c
      uses variable var_sym::var defined in smatch.h
      uses macro definition DELETE_CURRENT_PTR defined in ptrlist.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function in_var_sym_list(struct var_sym_list *,const char *,struct symbol *) in line 377
      protection public
      10 lines of code
      3 parameters
      1 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable var_sym::sym defined in smatch.h
      uses variable sym defined in smatch_type.c
      uses variable var_sym::var defined in smatch.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function clone_var_sym_list(struct var_sym_list *) in line 378
      protection public
      11 lines of code
      1 parameters
      1 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses function alloc_var_sym(const char *,struct symbol *) defined in smatch_var_sym.c
      uses variable var_sym::var defined in smatch.h
      uses variable var_sym::sym defined in smatch.h
      uses macro definition add_ptr_list defined in ptrlist.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function merge_var_sym_list(struct var_sym_list **,struct var_sym_list *) in line 379
      protection public
      8 lines of code
      2 parameters
      1 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable src defined in sm_user_data3.c
      uses function add_var_sym(struct var_sym_list **,const char *,struct symbol *) defined in smatch_var_sym.c
      uses variable dest defined in sm_user_data2.c
      uses variable var_sym::var defined in smatch.h
      uses variable var_sym::sym defined in smatch.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function combine_var_sym_lists(struct var_sym_list *,struct var_sym_list *) in line 380
      protection public
      8 lines of code
      2 parameters
      1 conditional paths
      uses function clone_var_sym_list(struct var_sym_list *) defined in smatch_var_sym.c
      uses variable one defined in sm_equiv1.c
      uses function merge_var_sym_list(struct var_sym_list **,struct var_sym_list *) defined in smatch_var_sym.c
      uses variable two defined in sm_equiv1.c
   function free_var_sym_list(struct var_sym_list **) in line 381
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function __free_ptr_list(struct ptr_list **) defined in ptrlist.c
   function free_var_syms_and_list(struct var_sym_list **) in line 382
      protection public
      9 lines of code
      1 parameters
      1 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses function free_var_sym_list(struct var_sym_list **) defined in smatch_var_sym.c
   function alloc_tracker(int,const char *,struct symbol *) in line 385
      protection public
      10 lines of code
      3 parameters
      1 conditional paths
      uses variable tracker::name defined in smatch.h
      uses function alloc_string(const char *) defined in smatch.h
      uses variable name defined in smatch_type.c
      uses variable tracker::owner defined in smatch.h
      uses variable tracker::sym defined in smatch.h
      uses variable sym defined in smatch_type.c
   function add_tracker(struct tracker_list **,int,const char *,struct symbol *) in line 386
      protection public
      10 lines of code
      4 parameters
      1 conditional paths
      uses function in_tracker_list(struct tracker_list *,int,const char *,struct symbol *) defined in smatch_tracker.c
      uses variable tracker::owner defined in smatch.h
      uses variable name defined in smatch_type.c
      uses variable sym defined in smatch_type.c
      uses function alloc_tracker(int,const char *,struct symbol *) defined in smatch_tracker.c
      uses macro definition add_ptr_list defined in ptrlist.h
   function add_tracker_expr(struct tracker_list **,int,struct expression *) in line 388
      protection public
      12 lines of code
      3 parameters
      1 conditional paths
      uses variable name defined in smatch_type.c
      uses variable sym defined in smatch_type.c
      uses function expr_to_var_sym(struct expression *,struct symbol **) defined in smatch.h
      uses function add_tracker(struct tracker_list **,int,const char *,struct symbol *) defined in smatch_tracker.c
      uses function free_string(char *) defined in smatch.h
   function del_tracker(struct tracker_list **,int,const char *,struct symbol *) in line 389
      protection public
      14 lines of code
      4 parameters
      1 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable tracker::owner defined in smatch.h
      uses variable tracker::sym defined in smatch.h
      uses variable sym defined in smatch_type.c
      uses variable tracker::name defined in smatch.h
      uses variable name defined in smatch_type.c
      uses macro definition DELETE_CURRENT_PTR defined in ptrlist.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function in_tracker_list(struct tracker_list *,int,const char *,struct symbol *) in line 391
      protection public
      12 lines of code
      4 parameters
      1 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable tracker::owner defined in smatch.h
      uses variable tracker::sym defined in smatch.h
      uses variable sym defined in smatch_type.c
      uses variable tracker::name defined in smatch.h
      uses variable name defined in smatch_type.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function free_tracker_list(struct tracker_list **) in line 393
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function __free_ptr_list(struct ptr_list **) defined in ptrlist.c
   function free_trackers_and_list(struct tracker_list **) in line 394
      protection public
      9 lines of code
      1 parameters
      1 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses function free_tracker_list(struct tracker_list **) defined in smatch_tracker.c
   function in_condition(void) in line 397
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function smatch(int,char **) in line 402
      protection public
      27 lines of code
      2 parameters
      1 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses function printf(char *,...) defined in test-be.c
      uses function exit(int) defined in test-be.c
      uses function sparse_initialize(int,char **,struct string_list **) defined in lib.c
      uses macro definition FOR_EACH_PTR_NOTAG defined in ptrlist.h
      uses variable option_file_output defined in smatch.c
      uses variable buf defined in sm_fake_assignment.c
      uses function snprintf(char *,int,char *,char *) defined in sm_overflow6.c
      uses variable sm_outfd defined in smatch.c
      uses function sparse_keep_tokens(char *) defined in lib.c
      uses macro definition END_FOR_EACH_PTR_NOTAG defined in ptrlist.h
   function inside_loop(void) in line 403
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function definitely_inside_loop(void) in line 404
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function get_switch_expr(void) in line 405
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses function top_expression(struct expression_list *) defined in smatch_expression_stacks.c
   function in_expression_statement(void) in line 406
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses variable __expr_stmt_count defined in smatch_flow.c
      uses variable expression::expr_list defined in expression.h
      uses variable expression::parent defined in expression.h
      uses variable sym defined in smatch_type.c
   function __process_post_op_stack(void) in line 407
      protection public
      10 lines of code
      1 parameters
      1 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses function __pass_to_client(void *,enum hook_type) defined in smatch.h
      uses enumvalue OP_HOOK defined in smatch.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses function __free_ptr_list(struct ptr_list **) defined in ptrlist.c
   function __split_expr(struct expression *) in line 408
      protection public
      200 lines of code
      1 parameters
      1 conditional paths
      uses variable __in_fake_assign defined in smatch_flow.c
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_ASSIGNMENT defined in expression.h
      uses function push_expression(struct expression_list **,struct expression *) defined in smatch_expression_stacks.c
      uses variable big_expression_stack defined in smatch_flow.c
      uses variable expression::pos defined in expression.h
      uses function __pass_to_client(void *,enum hook_type) defined in smatch.h
      uses enumvalue EXPR_HOOK defined in smatch.h
      uses enumvalue EXPR_PREOP defined in expression.h
      uses variable expression::unop defined in expression.h
      uses variable expression::op defined in expression.h
      uses enumvalue DEREF_HOOK defined in smatch.h
      uses enumvalue OP_HOOK defined in smatch.h
      uses enumvalue EXPR_POSTOP defined in expression.h
      uses enumvalue EXPR_STATEMENT defined in expression.h
      uses variable __expr_stmt_count defined in smatch_flow.c
      uses function __split_stmt(struct statement *) defined in smatch_flow.c
      uses variable expression::statement defined in expression.h
      uses enumvalue EXPR_LOGICAL defined in expression.h
      uses enumvalue EXPR_COMPARE defined in expression.h
      uses variable expression::left defined in expression.h
      uses variable expression::right defined in expression.h
      uses enumvalue LOGIC_HOOK defined in smatch.h
      uses function __handle_logic(struct expression *) defined in smatch.h
      uses enumvalue EXPR_BINOP defined in expression.h
      uses enumvalue BINOP_HOOK defined in smatch.h
      uses enumvalue EXPR_COMMA defined in expression.h
      uses function __process_post_op_stack(void) defined in smatch_flow.c
      uses enumvalue RAW_ASSIGNMENT_HOOK defined in smatch.h
      uses function __handle_condition_assigns(struct expression *) defined in smatch.h
      uses function __handle_select_assigns(struct expression *) defined in smatch.h
      uses function __handle_expr_statement_assigns(struct expression *) defined in smatch.h
      uses function outside_of_function(void) defined in smatch_flow.c
      uses enumvalue GLOBAL_ASSIGNMENT_HOOK defined in smatch.h
      uses enumvalue ASSIGNMENT_HOOK defined in smatch.h
      uses function __fake_struct_member_assignments(struct expression *) defined in smatch.h
      uses function strip_expr(struct expression *) defined in smatch.h
      uses enumvalue EXPR_CALL defined in expression.h
      uses enumvalue CALL_ASSIGNMENT_HOOK defined in smatch.h
      uses function is_fake_call(struct expression *) defined in smatch_extra.h
      uses enumvalue FUNCTION_CALL_HOOK_AFTER defined in smatch.h
      uses function get_macro_name(struct position) defined in macro_table.c
      uses enumvalue MACRO_ASSIGNMENT_HOOK defined in smatch.h
      uses enumvalue EXPR_DEREF defined in expression.h
      uses variable expression::deref defined in expression.h
      uses enumvalue EXPR_SLICE defined in expression.h
      uses variable expression::base defined in expression.h
      uses enumvalue EXPR_CAST defined in expression.h
      uses enumvalue EXPR_FORCE_CAST defined in expression.h
      uses variable expression::cast_expression defined in expression.h
      uses enumvalue CAST_HOOK defined in smatch.h
      uses enumvalue EXPR_SIZEOF defined in expression.h
      uses function strip_parens(struct expression *) defined in smatch.h
      uses enumvalue SIZEOF_HOOK defined in smatch.h
      uses enumvalue EXPR_OFFSETOF defined in expression.h
      uses enumvalue EXPR_ALIGNOF defined in expression.h
      uses function evaluate_expression(struct expression *) defined in evaluate.c
      uses enumvalue EXPR_CONDITIONAL defined in expression.h
      uses enumvalue EXPR_SELECT defined in expression.h
      uses variable expression::conditional defined in expression.h
      uses variable expression::cond_true defined in expression.h
      uses variable expression::cond_false defined in expression.h
      uses function known_condition_true(struct expression *) defined in smatch.h
      uses function known_condition_false(struct expression *) defined in smatch.h
      uses enumvalue SELECT_HOOK defined in smatch.h
      uses function __split_whole_condition(struct expression *) defined in smatch.h
      uses function __push_true_states(void) defined in smatch.h
      uses function __use_false_states(void) defined in smatch.h
      uses function __merge_true_states(void) defined in smatch.h
      uses variable expression::fn defined in expression.h
      uses function sym_name_is(const char *,struct expression *) defined in smatch.h
      uses variable expression::args defined in expression.h
      uses variable expression::symbol defined in expression.h
      uses function inlinable(struct expression *) defined in smatch_flow.c
      uses variable __inline_call defined in smatch_flow.c
      uses enumvalue FUNCTION_CALL_HOOK defined in smatch.h
      uses enumvalue CALL_HOOK_AFTER_INLINE defined in smatch.h
      uses function is_assigned_call(struct expression *) defined in smatch_flow.c
      uses function nullify_path(void) defined in smatch.h
      uses enumvalue EXPR_INITIALIZER defined in expression.h
      uses variable expression::expr_list defined in expression.h
      uses enumvalue EXPR_IDENTIFIER defined in expression.h
      uses variable expression::ident_expression defined in expression.h
      uses enumvalue EXPR_INDEX defined in expression.h
      uses variable expression::idx_expression defined in expression.h
      uses enumvalue EXPR_POS defined in expression.h
      uses variable expression::init_expr defined in expression.h
      uses enumvalue EXPR_SYMBOL defined in expression.h
      uses enumvalue SYM_HOOK defined in smatch.h
      uses enumvalue EXPR_STRING defined in expression.h
      uses enumvalue STRING_HOOK defined in smatch.h
      uses function pop_expression(struct expression_list **) defined in smatch_expression_stacks.c
   function __split_stmt(struct statement *) in line 409
      protection public
      157 lines of code
      1 parameters
      1 conditional paths
      uses variable __bail_on_rest_of_function defined in smatch_flow.c
      uses function out_of_memory(void) defined in smatch_slist.c
      uses macro definition sm_msg defined in smatch.h
      uses variable final_pass defined in smatch_flow.c
      uses macro definition add_ptr_list defined in ptrlist.h
      uses variable big_statement_stack defined in smatch_flow.c
      uses function free_expression_stack(struct expression_list **) defined in smatch_expression_stacks.c
      uses variable big_expression_stack defined in smatch_flow.c
      uses variable statement::pos defined in parse.h
      uses function __pass_to_client(void *,enum hook_type) defined in smatch.h
      uses enumvalue STMT_HOOK defined in smatch.h
      uses variable statement::type defined in parse.h
      uses enumvalue STMT_DECLARATION defined in parse.h
      uses variable statement::declaration defined in parse.h
      uses enumvalue STMT_RETURN defined in parse.h
      uses function __split_expr(struct expression *) defined in smatch_flow.c
      uses variable statement::ret_value defined in parse.h
      uses enumvalue RETURN_HOOK defined in smatch.h
      uses function __process_post_op_stack(void) defined in smatch_flow.c
      uses function nullify_path(void) defined in smatch.h
      uses enumvalue STMT_EXPRESSION defined in parse.h
      uses variable statement::expression defined in parse.h
      uses enumvalue STMT_COMPOUND defined in parse.h
      uses enumvalue STMT_IF defined in parse.h
      uses variable statement::if_true defined in parse.h
      uses variable statement::if_false defined in parse.h
      uses function known_condition_true(struct expression *) defined in smatch.h
      uses variable statement::if_conditional defined in parse.h
      uses function known_condition_false(struct expression *) defined in smatch.h
      uses function __split_whole_condition(struct expression *) defined in smatch.h
      uses function get_macro_name(struct position) defined in macro_table.c
      uses function __push_true_states(void) defined in smatch.h
      uses function __use_false_states(void) defined in smatch.h
      uses function __merge_true_states(void) defined in smatch.h
      uses enumvalue STMT_ITERATOR defined in parse.h
      uses variable statement::iterator_pre_statement defined in parse.h
      uses variable statement::iterator_statement defined in parse.h
      uses variable statement::iterator_post_statement defined in parse.h
      uses variable statement::iterator_pre_condition defined in parse.h
      uses variable statement::iterator_post_condition defined in parse.h
      uses enumvalue STMT_SWITCH defined in parse.h
      uses variable statement::switch_statement defined in parse.h
      uses function get_value(struct expression *,sval_t *) defined in smatch.h
      uses variable statement::switch_expression defined in parse.h
      uses function push_expression(struct expression_list **,struct expression *) defined in smatch_expression_stacks.c
      uses function __save_switch_states(struct expression *) defined in smatch.h
      uses function top_expression(struct expression_list *) defined in smatch_expression_stacks.c
      uses function __push_default(void) defined in smatch.h
      uses function __push_breaks(void) defined in smatch.h
      uses function __pop_default(void) defined in smatch.h
      uses function __merge_switches(struct expression *,struct expression *,struct expression *) defined in smatch.h
      uses macro definition NULL defined in sm_implied3.c
      uses function __discard_switches(void) defined in smatch.h
      uses function __merge_breaks(void) defined in smatch.h
      uses function pop_expression(struct expression_list **) defined in smatch_expression_stacks.c
      uses enumvalue STMT_CASE defined in parse.h
      uses variable statement::case_expression defined in parse.h
      uses variable statement::case_to defined in parse.h
      uses function __pass_case_to_client(struct expression *,struct expression *) defined in smatch.h
      uses function __set_default(void) defined in smatch.h
      uses variable statement::case_statement defined in parse.h
      uses enumvalue STMT_LABEL defined in parse.h
      uses variable statement::label_identifier defined in parse.h
      uses variable symbol::type defined in struct.c
      uses enumvalue SYM_LABEL defined in symbol.h
      uses variable symbol::ident defined in struct.c
      uses function __merge_gotos(const char *) defined in smatch.h
      uses variable ident::name defined in token.h
      uses variable statement::label_statement defined in parse.h
      uses enumvalue STMT_GOTO defined in parse.h
      uses variable statement::goto_expression defined in parse.h
      uses variable statement::goto_label defined in parse.h
      uses enumvalue SYM_NODE defined in symbol.h
      uses function __process_breaks(void) defined in smatch.h
      uses function __process_continues(void) defined in smatch.h
      uses function __save_gotos(const char *) defined in smatch.h
      uses enumvalue STMT_NONE defined in parse.h
      uses enumvalue STMT_ASM defined in parse.h
      uses enumvalue ASM_HOOK defined in smatch.h
      uses variable statement::asm_string defined in parse.h
      uses variable statement::asm_outputs defined in parse.h
      uses variable statement::asm_inputs defined in parse.h
      uses variable statement::asm_clobbers defined in parse.h
      uses enumvalue STMT_CONTEXT defined in parse.h
      uses enumvalue STMT_RANGE defined in parse.h
      uses variable statement::range_expression defined in parse.h
      uses variable statement::range_low defined in parse.h
      uses variable statement::range_high defined in parse.h
      uses enumvalue STMT_HOOK_AFTER defined in smatch.h
   function is_assigned_call(struct expression *) in line 418
      protection public
      13 lines of code
      1 parameters
      1 conditional paths
      uses macro definition FOR_EACH_PTR_REVERSE defined in ptrlist.h
      uses variable big_expression_stack defined in smatch_flow.c
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_ASSIGNMENT defined in expression.h
      uses variable expression::op defined in expression.h
      uses function strip_expr(struct expression *) defined in smatch.h
      uses variable expression::right defined in expression.h
      uses variable expression::pos defined in expression.h
      uses variable position::line defined in lib.h
      uses macro definition END_FOR_EACH_PTR_REVERSE defined in ptrlist.h
   function inlinable(struct expression *) in line 419
      protection public
      37 lines of code
      1 parameters
      1 conditional paths
      uses variable sym defined in smatch_type.c
      uses macro definition NULL defined in sm_implied3.c
      uses variable __inline_fn defined in smatch_flow.c
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_SYMBOL defined in expression.h
      uses variable expression::symbol defined in expression.h
      uses function is_no_inline_function(const char *) defined in smatch.h
      uses variable symbol::ident defined in struct.c
      uses variable ident::name defined in token.h
      uses variable symbol::stmt defined in struct.c
      uses variable statement::type defined in parse.h
      uses enumvalue STMT_COMPOUND defined in parse.h
      uses function ptr_list_size(struct ptr_list *) defined in ptrlist.c
      uses variable statement::stmts defined in parse.h
      uses variable symbol::inline_stmt defined in struct.c
      uses variable statement::pos defined in parse.h
      uses variable position::line defined in lib.h
      uses variable symbol::pos defined in struct.c
   function get_faked_expression(void) in line 429
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses variable __in_fake_assign defined in smatch.h
      uses macro definition NULL defined in sm_implied3.c
   function __fake_struct_member_assignments(struct expression *) in line 430
      protection public
      16 lines of code
      1 parameters
      1 conditional paths
      uses variable struct_type defined in smdb.py
      uses function is_zero(struct expression *) defined in smatch.h
      uses variable expression::right defined in expression.h
      uses variable expression::left defined in expression.h
      uses enumvalue COPY_MEMSET defined in smatch_struct_assignment.c
      uses function zero_expr(void) defined in smatch_expressions.c
      uses enumvalue COPY_NORMAL defined in smatch_struct_assignment.c
   function is_no_inline_function(const char *) in line 433
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function __split_whole_condition(struct expression *) in line 436
      protection public
      17 lines of code
      1 parameters
      1 conditional paths
      uses macro definition sm_debug defined in smatch.h
      uses function get_lineno(void) defined in smatch.h
      uses function __save_pre_cond_states(void) defined in smatch.h
      uses function __push_cond_stacks(void) defined in smatch.h
      uses function push_expression(struct expression_list **,struct expression *) defined in smatch_expression_stacks.c
      uses variable big_expression_stack defined in smatch.h
      uses function __use_cond_states(void) defined in smatch.h
      uses function __pass_to_client(void *,enum hook_type) defined in smatch.h
      uses enumvalue WHOLE_CONDITION_HOOK defined in smatch.h
      uses function pop_expression(struct expression_list **) defined in smatch_expression_stacks.c
   function __handle_logic(struct expression *) in line 437
      protection public
      18 lines of code
      1 parameters
      1 conditional paths
      uses macro definition sm_debug defined in smatch.h
      uses function get_lineno(void) defined in smatch.h
      uses function __save_pre_cond_states(void) defined in smatch.h
      uses function __push_cond_stacks(void) defined in smatch.h
      uses function push_expression(struct expression_list **,struct expression *) defined in smatch_expression_stacks.c
      uses variable big_expression_stack defined in smatch.h
      uses function __use_cond_states(void) defined in smatch.h
      uses function __pass_to_client(void *,enum hook_type) defined in smatch.h
      uses enumvalue WHOLE_CONDITION_HOOK defined in smatch.h
      uses function pop_expression(struct expression_list **) defined in smatch_expression_stacks.c
      uses function __merge_false_states(void) defined in smatch.h
   function is_condition(struct expression *) in line 438
      protection public
      17 lines of code
      1 parameters
      1 conditional paths
      uses function strip_expr(struct expression *) defined in smatch.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_LOGICAL defined in expression.h
      uses enumvalue EXPR_COMPARE defined in expression.h
      uses enumvalue EXPR_PREOP defined in expression.h
      uses variable expression::op defined in expression.h
   function __handle_condition_assigns(struct expression *) in line 439
      protection public
      32 lines of code
      1 parameters
      1 conditional paths
      uses variable expression::right defined in expression.h
      uses variable expression::op defined in expression.h
      uses function strip_expr(struct expression *) defined in smatch.h
      uses function is_condition(struct expression *) defined in smatch_conditions.c
      uses macro definition sm_debug defined in smatch.h
      uses function get_lineno(void) defined in smatch.h
      uses function __save_pre_cond_states(void) defined in smatch.h
      uses function __push_cond_stacks(void) defined in smatch.h
      uses function push_expression(struct expression_list **,struct expression *) defined in smatch_expression_stacks.c
      uses variable big_expression_stack defined in smatch.h
      uses function __use_cond_states(void) defined in smatch.h
      uses function set_extra_expr_mod(struct expression *,struct smatch_state *) defined in smatch_extra.c
      uses variable expression::left defined in expression.h
      uses function alloc_estate_sval(sval_t) defined in smatch_estate.c
      uses function sval_type_val(struct symbol *,long long) defined in smatch.h
      uses function get_type(struct expression *) defined in smatch.h
      uses function __pass_to_client(void *,enum hook_type) defined in smatch.h
      uses enumvalue WHOLE_CONDITION_HOOK defined in smatch.h
      uses function pop_expression(struct expression_list **) defined in smatch_expression_stacks.c
      uses function __push_true_states(void) defined in smatch.h
      uses function __use_false_states(void) defined in smatch.h
      uses function __merge_true_states(void) defined in smatch.h
      uses enumvalue ASSIGNMENT_HOOK defined in smatch.h
   function __handle_select_assigns(struct expression *) in line 440
      protection public
      52 lines of code
      1 parameters
      1 conditional paths
      uses variable expression::right defined in expression.h
      uses macro definition NULL defined in sm_implied3.c
      uses macro definition sm_debug defined in smatch.h
      uses function get_lineno(void) defined in smatch.h
      uses variable sm_state::right defined in smatch.h
      uses function strip_expr(struct expression *) defined in smatch.h
      uses function implied_condition_true(struct expression *) defined in smatch.h
      uses function implied_condition_false(struct expression *) defined in smatch.h
      uses function __save_pre_cond_states(void) defined in smatch.h
      uses function __split_whole_condition(struct expression *) defined in smatch_conditions.c
      uses variable expression::cond_true defined in expression.h
      uses variable expression::left defined in expression.h
      uses variable expression::op defined in expression.h
      uses variable expression::conditional defined in expression.h
      uses function __split_expr(struct expression *) defined in smatch.h
      uses function clone_stree(struct stree *) defined in avl.c
      uses function __get_cur_stree(void) defined in smatch.h
      uses function __use_false_states(void) defined in smatch.h
      uses variable expression::cond_false defined in expression.h
      uses function merge_stree(struct stree **,struct stree *) defined in smatch_slist.c
      uses function __use_pre_cond_states(void) defined in smatch.h
      uses macro definition FOR_EACH_SM defined in avl.h
      uses function __set_sm(struct sm_state *) defined in smatch.h
      uses macro definition END_FOR_EACH_SM defined in avl.h
      uses function free_stree(struct stree **) defined in avl.c
   function __handle_expr_statement_assigns(struct expression *) in line 441
      protection public
      54 lines of code
      1 parameters
      1 conditional paths
      uses variable expression::right defined in expression.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_PREOP defined in expression.h
      uses variable expression::op defined in expression.h
      uses variable expression::unop defined in expression.h
      uses enumvalue EXPR_STATEMENT defined in expression.h
      uses variable __expr_stmt_count defined in smatch_conditions.c
      uses variable expression::statement defined in expression.h
      uses variable statement::type defined in parse.h
      uses enumvalue STMT_COMPOUND defined in parse.h
      uses variable fake_assign defined in smatch_unknown_value.c
      uses variable expression::pos defined in expression.h
      uses variable position::pos defined in lib.h
      uses enumvalue EXPR_ASSIGNMENT defined in expression.h
      uses variable expression::left defined in expression.h
      uses function __split_expr(struct expression *) defined in smatch.h
      uses function __call_scope_hooks(void) defined in smatch.h
      uses enumvalue STMT_EXPRESSION defined in parse.h
      uses variable statement::pos defined in parse.h
      uses variable statement::expression defined in parse.h
      uses function __split_stmt(struct statement *) defined in smatch.h
   function __implied_case_stree(struct expression *,struct expression *,struct expression *,struct range_list_stack **,struct stree **) in line 447
      protection public
      47 lines of code
      5 parameters
      1 conditional paths
      uses variable name defined in smatch_type.c
      uses macro definition NULL defined in sm_implied3.c
      uses variable sym defined in smatch_type.c
      uses function clone_stree(struct stree *) defined in avl.c
      uses function expr_to_var_sym(struct expression *,struct symbol **) defined in smatch.h
      uses function get_sm_state_stree(struct stree *,int,const char *,struct symbol *) defined in smatch_slist.c
      uses macro definition SMATCH_EXTRA defined in smatch.h
      uses function get_value(struct expression *,sval_t *) defined in smatch.h
      uses function filter_top_rl(struct range_list_stack **,sval_t,sval_t) defined in smatch_extra.h
      uses function add_range(struct range_list **,sval_t,sval_t) defined in smatch_extra.h
      uses function clone_rl(struct range_list *) defined in smatch_extra.h
      uses function top_rl(struct range_list_stack *) defined in smatch_extra.h
      uses enumvalue SPECIAL_EQUAL defined in token.h
      uses function __push_fake_cur_stree(void) defined in smatch.h
      uses function __unnullify_path(void) defined in smatch.h
      uses function set_extra_nomod(const char *,struct symbol *,struct smatch_state *) defined in smatch_extra.c
      uses function alloc_estate_rl(struct range_list *) defined in smatch_estate.c
      uses function __pop_fake_cur_stree(void) defined in smatch.h
      uses function overwrite_stree(struct stree *,struct stree **) defined in smatch_slist.c
      uses function free_stree(struct stree **) defined in avl.c
      uses function free_string(char *) defined in smatch.h
   function __get_implied_values(struct expression *) in line 452
      protection public
      24 lines of code
      1 parameters
      1 conditional paths
      uses variable name defined in smatch_type.c
      uses variable sym defined in smatch_type.c
      uses macro definition NULL defined in sm_implied3.c
      uses function expr_to_var_sym(struct expression *,struct symbol **) defined in smatch.h
      uses function get_state(int,const char *,struct symbol *) defined in smatch.h
      uses macro definition SMATCH_EXTRA defined in smatch.h
      uses function clone_rl(struct range_list *) defined in smatch_extra.h
      uses function estate_rl(struct smatch_state *) defined in smatch_estate.c
      uses function free_string(char *) defined in smatch.h
      uses function get_type(struct expression *) defined in smatch.h
      uses function alloc_rl(sval_t,sval_t) defined in smatch_extra.h
      uses function sval_type_min(struct symbol *) defined in smatch.h
      uses function sval_type_max(struct symbol *) defined in smatch.h
   function overwrite_states_using_pool(struct sm_state *) in line 453
      protection public
      16 lines of code
      1 parameters
      1 conditional paths
      uses variable sm_state::pool defined in smatch.h
      uses macro definition FOR_EACH_SM defined in avl.h
      uses function get_sm_state(int,const char *,struct symbol *) defined in smatch.h
      uses variable sm_state::owner defined in smatch.h
      uses variable sm_state::name defined in smatch.h
      uses variable sm_state::sym defined in smatch.h
      uses variable sm_state::possible defined in smatch.h
      uses function set_state(int,const char *,struct symbol *,struct smatch_state *) defined in smatch.h
      uses variable sm_state::state defined in smatch.h
      uses macro definition END_FOR_EACH_SM defined in avl.h
      uses function __extra_match_condition(struct expression *) defined in smatch_implied.c
      uses function __comparison_match_condition(struct expression *) defined in smatch_implied.c
      uses function __stored_condition(struct expression *) defined in smatch_implied.c
   function add_pool(struct stree_stack **,struct stree *) in line 454
      protection public
      16 lines of code
      2 parameters
      1 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses macro definition INSERT_CURRENT defined in ptrlist.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses macro definition add_ptr_list defined in ptrlist.h
   function get_absolute_min_helper(struct expression *,sval_t *) in line 526
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function get_absolute_max_helper(struct expression *,sval_t *) in line 527
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function get_local_rl(struct expression *,struct range_list **) in line 530
      protection public
      26 lines of code
      2 parameters
      1 conditional paths
      uses variable name defined in smatch_type.c
      uses function is_static(struct expression *) defined in smatch.h
      uses function expr_to_var(struct expression *) defined in smatch.h
      uses macro definition NULL defined in sm_implied3.c
      uses macro definition run_sql defined in smatch.h
      uses function get_filename(void) defined in smatch.h
      uses function free_string(char *) defined in smatch.h
      uses function str_to_rl(struct symbol *,char *,struct range_list **) defined in smatch_extra.h
      uses function cast_rl(struct symbol *,struct range_list *) defined in smatch_extra.h
      uses function get_type(struct expression *) defined in smatch.h
   function get_local_max_helper(struct expression *,sval_t *) in line 531
      protection public
      9 lines of code
      2 parameters
      1 conditional paths
      uses function get_local_rl(struct expression *,struct range_list **) defined in smatch_local_values.c
      uses function rl_max(struct range_list *) defined in smatch_extra.h
   function get_local_min_helper(struct expression *,sval_t *) in line 532
      protection public
      9 lines of code
      2 parameters
      1 conditional paths
      uses function get_local_rl(struct expression *,struct range_list **) defined in smatch_local_values.c
      uses function rl_min(struct range_list *) defined in smatch_extra.h
   function get_db_type_rl(struct expression *,struct range_list **) in line 535
      protection public
      24 lines of code
      2 parameters
      1 conditional paths
      uses variable member defined in smdb.py
      uses function get_member_name(struct expression *) defined in smatch.h
      uses macro definition NULL defined in sm_implied3.c
      uses macro definition run_sql defined in smatch.h
      uses function free_string(char *) defined in smatch.h
      uses function str_to_rl(struct symbol *,char *,struct range_list **) defined in smatch_extra.h
      uses function cast_rl(struct symbol *,struct range_list *) defined in smatch_extra.h
      uses function get_type(struct expression *) defined in smatch.h
      uses function is_whole_rl(struct range_list *) defined in smatch_extra.h
   function __swap_cur_stree(struct stree *) in line 538
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function free_stree(struct stree **) defined in avl.c
   function __push_fake_cur_stree(void) in line 539
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function push_stree(struct stree_stack **,struct stree *) defined in smatch_slist.c
      uses macro definition NULL defined in sm_implied3.c
      uses function __save_pre_cond_states(void) defined in smatch_states.c
   function __pop_fake_cur_stree(void) in line 540
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses macro definition sm_msg defined in smatch.h
      uses function __use_pre_cond_states(void) defined in smatch_states.c
      uses function pop_stree(struct stree_stack **) defined in smatch_slist.c
   function __free_fake_cur_stree(void) in line 541
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses function __pop_fake_cur_stree(void) defined in smatch_states.c
      uses function free_stree(struct stree **) defined in avl.c
   function __set_fake_cur_stree_fast(struct stree *) in line 542
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses function push_stree(struct stree_stack **,struct stree *) defined in smatch_slist.c
   function __pop_fake_cur_stree_fast(void) in line 543
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function pop_stree(struct stree_stack **) defined in smatch_slist.c
   function __merge_stree_into_cur(struct stree *) in line 544
      protection public
      15 lines of code
      1 parameters
      1 conditional paths
      uses variable merged defined in smatch_states.c
      uses macro definition FOR_EACH_SM defined in avl.h
      uses function get_sm_state(int,const char *,struct symbol *) defined in smatch_states.c
      uses variable sm_state::owner defined in smatch.h
      uses variable sm_state::name defined in smatch.h
      uses variable sm_state::sym defined in smatch.h
      uses function merge_sm_states(struct sm_state *,struct sm_state *) defined in smatch_slist.c
      uses function __set_sm(struct sm_state *) defined in smatch_states.c
      uses macro definition END_FOR_EACH_SM defined in avl.h
   function unreachable(void) in line 546
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function __set_sm(struct sm_state *) in line 547
      protection public
      33 lines of code
      1 parameters
      1 conditional paths
      uses macro definition sm_msg defined in smatch.h
      uses variable option_debug defined in smatch_states.c
      uses function check_name(unsigned short) defined in smatch.c
      uses variable sm_state::owner defined in smatch.h
      uses variable option_debug_check defined in smatch.c
      uses function get_state(int,const char *,struct symbol *) defined in smatch_states.c
      uses variable sm_state::name defined in smatch.h
      uses variable sm_state::sym defined in smatch.h
      uses function show_state(struct smatch_state *) defined in smatch.h
      uses variable sm_state::state defined in smatch.h
      uses function unreachable(void) defined in smatch_states.c
      uses function overwrite_sm_state_stree_stack(struct stree_stack **,struct sm_state *) defined in smatch_slist.c
      uses function overwrite_sm_state_stree(struct stree **,struct sm_state *) defined in smatch_slist.c
   function __use_orig_if_not_set(struct sm_state *) in line 548
      protection public
      42 lines of code
      1 parameters
      1 conditional paths
      uses macro definition sm_msg defined in smatch.h
      uses variable option_debug defined in smatch_states.c
      uses function check_name(unsigned short) defined in smatch.c
      uses variable sm_state::owner defined in smatch.h
      uses variable option_debug_check defined in smatch.c
      uses function get_state(int,const char *,struct symbol *) defined in smatch_states.c
      uses variable sm_state::name defined in smatch.h
      uses variable sm_state::sym defined in smatch.h
      uses function show_state(struct smatch_state *) defined in smatch.h
      uses variable sm_state::state defined in smatch.h
      uses function unreachable(void) defined in smatch_states.c
      uses function overwrite_sm_state_stree_stack(struct stree_stack **,struct sm_state *) defined in smatch_slist.c
      uses function overwrite_sm_state_stree(struct stree **,struct sm_state *) defined in smatch_slist.c
      uses function pop_stree(struct stree_stack **) defined in smatch_slist.c
      uses function get_sm_state_stree(struct stree *,int,const char *,struct symbol *) defined in smatch_slist.c
      uses function push_stree(struct stree_stack **,struct stree *) defined in smatch_slist.c
   function __set_true_false_sm(struct sm_state *,struct sm_state *) in line 549
      protection public
      17 lines of code
      2 parameters
      1 conditional paths
      uses function unreachable(void) defined in smatch_states.c
      uses function printf(char *,...) defined in test-be.c
      uses function overwrite_sm_state_stree(struct stree **,struct sm_state *) defined in smatch_slist.c
      uses function overwrite_sm_state_stree_stack(struct stree_stack **,struct sm_state *) defined in smatch_slist.c
   function nullify_path(void) in line 551
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function free_stree(struct stree **) defined in avl.c
   function __match_nullify_path_hook(const char *,struct expression *,void *) in line 552
      protection public
      5 lines of code
      3 parameters
      1 conditional paths
      uses function nullify_path(void) defined in smatch_states.c
   function __unnullify_path(void) in line 554
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function set_state(int,const char *,struct symbol *,struct smatch_state *) defined in smatch_states.c
      uses macro definition NULL defined in sm_implied3.c
      uses variable true_state defined in smatch_states.c
   function __path_is_null(void) in line 555
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function save_all_states(void) in line 556
      protection public
      34 lines of code
      1 parameters
      1 conditional paths
      uses function __add_ptr_list(struct ptr_list **,void *,unsigned long) defined in ptrlist.c
      uses macro definition NULL defined in sm_implied3.c
   function restore_all_states(void) in line 557
      protection public
      21 lines of code
      1 parameters
      1 conditional paths
   function free_goto_stack(void) in line 558
      protection public
      9 lines of code
      1 parameters
      1 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses function free_stree(struct stree **) defined in avl.c
      uses variable named_stree::stree defined in smatch_slist.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses function __free_ptr_list(struct ptr_list **) defined in ptrlist.c
   function clear_all_states(void) in line 559
      protection public
      16 lines of code
      1 parameters
      1 conditional paths
      uses function nullify_path(void) defined in smatch_states.c
      uses function free_goto_stack(void) defined in smatch_states.c
      uses function free_every_single_sm_state(void) defined in smatch_slist.c
   function get_sm_state(int,const char *,struct symbol *) in line 561
      protection public
      4 lines of code
      3 parameters
      1 conditional paths
      uses function get_sm_state_stree(struct stree *,int,const char *,struct symbol *) defined in smatch_slist.c
      uses variable sm_state::owner defined in smatch.h
      uses variable name defined in smatch_type.c
      uses variable sym defined in smatch_type.c
   function get_sm_state_expr(int,struct expression *) in line 563
      protection public
      15 lines of code
      2 parameters
      1 conditional paths
      uses variable name defined in smatch_type.c
      uses variable sym defined in smatch_type.c
      uses macro definition NULL defined in sm_implied3.c
      uses function strip_expr(struct expression *) defined in smatch.h
      uses function expr_to_var_sym(struct expression *,struct symbol **) defined in smatch.h
      uses function get_sm_state(int,const char *,struct symbol *) defined in smatch_states.c
      uses variable sm_state::owner defined in smatch.h
      uses function free_string(char *) defined in smatch.h
   function __push_true_states(void) in line 564
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function push_stree(struct stree_stack **,struct stree *) defined in smatch_slist.c
      uses function clone_stree(struct stree *) defined in avl.c
   function __use_false_states(void) in line 565
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function free_stree(struct stree **) defined in avl.c
      uses function pop_stree(struct stree_stack **) defined in smatch_slist.c
   function __discard_false_states(void) in line 566
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses function pop_stree(struct stree_stack **) defined in smatch_slist.c
      uses function free_stree(struct stree **) defined in avl.c
   function __merge_false_states(void) in line 567
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses function pop_stree(struct stree_stack **) defined in smatch_slist.c
      uses function merge_stree(struct stree **,struct stree *) defined in smatch_slist.c
      uses function free_stree(struct stree **) defined in avl.c
   function __merge_true_states(void) in line 568
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses function pop_stree(struct stree_stack **) defined in smatch_slist.c
      uses function merge_stree(struct stree **,struct stree *) defined in smatch_slist.c
      uses function free_stree(struct stree **) defined in avl.c
   function __negate_cond_stacks(void) in line 570
      protection public
      10 lines of code
      1 parameters
      1 conditional paths
      uses function pop_stree(struct stree_stack **) defined in smatch_slist.c
      uses function push_stree(struct stree_stack **,struct stree *) defined in smatch_slist.c
   function __use_pre_cond_states(void) in line 571
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function free_stree(struct stree **) defined in avl.c
      uses function pop_stree(struct stree_stack **) defined in smatch_slist.c
   function __use_cond_true_states(void) in line 572
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function __use_cond_false_states(void) in line 573
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function __push_cond_stacks(void) in line 574
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function push_stree(struct stree_stack **,struct stree *) defined in smatch_slist.c
      uses macro definition NULL defined in sm_implied3.c
   function __copy_cond_true_states(void) in line 575
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses function pop_stree(struct stree_stack **) defined in smatch_slist.c
      uses function push_stree(struct stree_stack **,struct stree *) defined in smatch_slist.c
      uses function clone_stree(struct stree *) defined in avl.c
   function __copy_cond_false_states(void) in line 576
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses function pop_stree(struct stree_stack **) defined in smatch_slist.c
      uses function push_stree(struct stree_stack **,struct stree *) defined in smatch_slist.c
      uses function clone_stree(struct stree *) defined in avl.c
   function __pop_cond_true_stack(void) in line 577
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function pop_stree(struct stree_stack **) defined in smatch_slist.c
   function __pop_cond_false_stack(void) in line 578
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function pop_stree(struct stree_stack **) defined in smatch_slist.c
   function __and_cond_states(void) in line 579
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function and_stree_stack(struct stree_stack **) defined in smatch_slist.c
      uses function or_stree_stack(struct stree_stack **,struct stree *,struct stree_stack **) defined in smatch_slist.c
   function __or_cond_states(void) in line 580
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function or_stree_stack(struct stree_stack **,struct stree *,struct stree_stack **) defined in smatch_slist.c
      uses function and_stree_stack(struct stree_stack **) defined in smatch_slist.c
   function __save_pre_cond_states(void) in line 581
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function push_stree(struct stree_stack **,struct stree *) defined in smatch_slist.c
      uses function clone_stree(struct stree *) defined in avl.c
   function __discard_pre_cond_states(void) in line 582
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses function pop_stree(struct stree_stack **) defined in smatch_slist.c
      uses function free_stree(struct stree **) defined in avl.c
   function __use_cond_states(void) in line 583
      protection public
      19 lines of code
      1 parameters
      1 conditional paths
      uses function pop_stree(struct stree_stack **) defined in smatch_slist.c
      uses function clone_stree(struct stree *) defined in avl.c
      uses function overwrite_stree(struct stree *,struct stree **) defined in smatch_slist.c
      uses function free_stree(struct stree **) defined in avl.c
      uses function push_stree(struct stree_stack **,struct stree *) defined in smatch_slist.c
   function __push_continues(void) in line 586
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function push_stree(struct stree_stack **,struct stree *) defined in smatch_slist.c
      uses macro definition NULL defined in sm_implied3.c
   function __discard_continues(void) in line 587
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses function pop_stree(struct stree_stack **) defined in smatch_slist.c
      uses function free_stree(struct stree **) defined in avl.c
   function __process_continues(void) in line 588
      protection public
      12 lines of code
      1 parameters
      1 conditional paths
      uses function pop_stree(struct stree_stack **) defined in smatch_slist.c
      uses function clone_stree(struct stree *) defined in avl.c
      uses function merge_stree(struct stree **,struct stree *) defined in smatch_slist.c
      uses function push_stree(struct stree_stack **,struct stree *) defined in smatch_slist.c
   function __merge_continues(void) in line 589
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses function pop_stree(struct stree_stack **) defined in smatch_slist.c
      uses function merge_stree(struct stree **,struct stree *) defined in smatch_slist.c
      uses function free_stree(struct stree **) defined in avl.c
   function __push_breaks(void) in line 591
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function push_stree(struct stree_stack **,struct stree *) defined in smatch_slist.c
      uses macro definition NULL defined in sm_implied3.c
   function __process_breaks(void) in line 592
      protection public
      12 lines of code
      1 parameters
      1 conditional paths
      uses function pop_stree(struct stree_stack **) defined in smatch_slist.c
      uses function clone_stree(struct stree *) defined in avl.c
      uses function merge_stree(struct stree **,struct stree *) defined in smatch_slist.c
      uses function push_stree(struct stree_stack **,struct stree *) defined in smatch_slist.c
   function __has_breaks(void) in line 593
      protection public
      10 lines of code
      1 parameters
      1 conditional paths
      uses function pop_stree(struct stree_stack **) defined in smatch_slist.c
      uses function push_stree(struct stree_stack **,struct stree *) defined in smatch_slist.c
   function __merge_breaks(void) in line 594
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses function pop_stree(struct stree_stack **) defined in smatch_slist.c
      uses function merge_stree(struct stree **,struct stree *) defined in smatch_slist.c
      uses function free_stree(struct stree **) defined in avl.c
   function __use_breaks(void) in line 595
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function free_stree(struct stree **) defined in avl.c
      uses function pop_stree(struct stree_stack **) defined in smatch_slist.c
   function __save_switch_states(struct expression *) in line 597
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function push_rl(struct range_list_stack **,struct range_list *) defined in smatch_extra.h
      uses function __get_implied_values(struct expression *) defined in smatch.h
      uses function push_stree(struct stree_stack **,struct stree *) defined in smatch_slist.c
      uses function clone_stree(struct stree *) defined in avl.c
   function __discard_switches(void) in line 598
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses function pop_rl(struct range_list_stack **) defined in smatch_extra.h
      uses function pop_stree(struct stree_stack **) defined in smatch_slist.c
      uses function free_stree(struct stree **) defined in avl.c
   function __merge_switches(struct expression *,struct expression *,struct expression *) in line 599
      protection public
      11 lines of code
      3 parameters
      1 conditional paths
      uses function pop_stree(struct stree_stack **) defined in smatch_slist.c
      uses function __implied_case_stree(struct expression *,struct expression *,struct expression *,struct range_list_stack **,struct stree **) defined in smatch.h
      uses function merge_stree(struct stree **,struct stree *) defined in smatch_slist.c
      uses function free_stree(struct stree **) defined in avl.c
      uses function push_stree(struct stree_stack **,struct stree *) defined in smatch_slist.c
   function __push_default(void) in line 600
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function push_stree(struct stree_stack **,struct stree *) defined in smatch_slist.c
      uses macro definition NULL defined in sm_implied3.c
   function __set_default(void) in line 601
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function set_state_stree_stack(struct stree_stack **,int,const char *,struct symbol *,struct smatch_state *) defined in smatch_slist.c
      uses macro definition NULL defined in sm_implied3.c
      uses variable true_state defined in smatch_states.c
   function __pop_default(void) in line 602
      protection public
      11 lines of code
      1 parameters
      1 conditional paths
      uses function pop_stree(struct stree_stack **) defined in smatch_slist.c
      uses function free_stree(struct stree **) defined in avl.c
   function __push_conditions(void) in line 604
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function __discard_conditions(void) in line 605
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function __save_gotos(const char *) in line 607
      protection public
      17 lines of code
      1 parameters
      1 conditional paths
      uses function get_named_stree(struct named_stree_stack *,const char *) defined in smatch_slist.c
      uses variable name defined in smatch_type.c
      uses function merge_stree(struct stree **,struct stree *) defined in smatch_slist.c
      uses function clone_stree(struct stree *) defined in avl.c
      uses macro definition add_ptr_list defined in ptrlist.h
   function __merge_gotos(const char *) in line 608
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses function get_named_stree(struct named_stree_stack *,const char *) defined in smatch_slist.c
      uses variable name defined in smatch_type.c
      uses function merge_stree(struct stree **,struct stree *) defined in smatch_slist.c
   function __print_cur_stree(void) in line 610
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function __print_stree(struct stree *) defined in smatch_slist.c
   function __pass_to_client(void *,enum hook_type) in line 613
      protection public
      23 lines of code
      2 parameters
      1 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable hook_container::hook_type defined in smatch_hooks.c
      uses variable hook_container::data_type defined in smatch_hooks.c
      uses enumvalue EXPR_PTR defined in smatch_hooks.c
      uses variable hook_container::fn defined in smatch_hooks.c
      uses enumvalue STMT_PTR defined in smatch_hooks.c
      uses enumvalue SYMBOL_PTR defined in smatch_hooks.c
      uses enumvalue SYM_LIST_PTR defined in smatch_hooks.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function __pass_to_client_no_data(enum hook_type) in line 614
      protection public
      9 lines of code
      1 parameters
      1 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable hook_container::hook_type defined in smatch_hooks.c
      uses variable hook_container::fn defined in smatch_hooks.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function __pass_case_to_client(struct expression *,struct expression *) in line 615
      protection public
      12 lines of code
      2 parameters
      1 conditional paths
      uses function void(x,int) defined in identifier_list.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable hook_container::hook_type defined in smatch_hooks.c
      uses enumvalue CASE_HOOK defined in smatch.h
      uses variable hook_container::fn defined in smatch_hooks.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function __has_merge_function(int) in line 617
      protection public
      10 lines of code
      1 parameters
      1 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable hook_container::data_type defined in smatch_hooks.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function __client_merge_function(int,struct smatch_state *,struct smatch_state *) in line 618
      protection public
      20 lines of code
      3 parameters
      1 conditional paths
      uses variable s1 defined in designated-init.c
      uses variable s2 defined in designated-init.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable hook_container::data_type defined in smatch_hooks.c
      uses variable hook_container::fn defined in smatch_hooks.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses variable undefined defined in smatch.h
   function __client_unmatched_state_function(struct sm_state *) in line 621
      protection public
      10 lines of code
      1 parameters
      1 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable hook_container::data_type defined in smatch_hooks.c
      uses variable sm_state::owner defined in smatch.h
      uses variable hook_container::fn defined in smatch_hooks.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses variable undefined defined in smatch.h
   function call_pre_merge_hook(struct sm_state *) in line 622
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses variable sm_state::owner defined in smatch.h
      uses variable num_checks defined in smatch.c
      uses variable pre_merge_hooks defined in smatch_hooks.c
   function __push_scope_hooks(void) in line 623
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses macro definition NULL defined in sm_implied3.c
   function __call_scope_hooks(void) in line 624
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable scope_container::fn defined in smatch_hooks.c
      uses variable scope_container::data defined in smatch_hooks.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function create_function_hook_hash(void) in line 627
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function __match_initializer_call(struct symbol *) in line 628
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function debug_sql(const char *) in line 673
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses variable option_debug defined in smatch.h
      uses macro definition sm_msg defined in smatch.h
      uses function sql_exec(int(*)(void *, int, char **, char **),void *,const char *) defined in smatch_db.c
      uses macro definition NULL defined in sm_implied3.c
   function debug_mem_sql(const char *) in line 674
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses variable option_debug defined in smatch.h
      uses macro definition sm_msg defined in smatch.h
      uses function sql_mem_exec(int(*)(void *, int, char **, char **),void *,const char *) defined in smatch_db.c
      uses macro definition NULL defined in sm_implied3.c
   function select_caller_info_hook(void(*)(const char *name, struct symbol *sym, char *key, char *value),int) in line 675
      protection public
      8 lines of code
      2 parameters
      1 conditional paths
      uses variable def_callback::hook_type defined in smatch_db.c
      uses variable def_callback::callback defined in smatch_db.c
      uses macro definition add_ptr_list defined in ptrlist.h
   function add_member_info_callback(int,void(*)(struct expression *call, int param, char *printed_name, struct sm_state *sm)) in line 676
      protection public
      8 lines of code
      2 parameters
      1 conditional paths
      uses variable member_info_callback::owner defined in smatch_db.c
      uses variable member_info_callback::callback defined in smatch_db.c
      uses variable def_callback::callback defined in smatch_db.c
      uses macro definition add_ptr_list defined in ptrlist.h
   function add_split_return_callback(void(*)(int return_id, char *return_ranges, struct expression *returned_expr)) in line 677
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses variable def_callback::callback defined in smatch_db.c
      uses macro definition add_ptr_list defined in ptrlist.h
   function add_returned_member_callback(int,void(*)(int return_id, char *return_ranges, struct expression *expr, char *printed_name, struct smatch_state *state)) in line 678
      protection public
      8 lines of code
      2 parameters
      1 conditional paths
      uses variable returned_member_callback::owner defined in smatch_db.c
      uses variable returned_member_callback::callback defined in smatch_db.c
      uses variable def_callback::callback defined in smatch_db.c
      uses macro definition add_ptr_list defined in ptrlist.h
   function select_call_implies_hook(int,void(*)(struct expression *arg, char *key, char *value)) in line 679
      protection public
      8 lines of code
      2 parameters
      1 conditional paths
      uses variable call_implies_callback::type defined in smatch_db.c
      uses variable call_implies_callback::callback defined in smatch_db.c
      uses variable def_callback::callback defined in smatch_db.c
      uses macro definition add_ptr_list defined in ptrlist.h
   function db_return_vals(struct expression *) in line 680
      protection public
      32 lines of code
      1 parameters
      1 conditional paths
      uses variable buf defined in sm_fake_assignment.c
      uses function is_fake_call(struct expression *) defined in smatch_extra.h
      uses macro definition NULL defined in sm_implied3.c
      uses function snprintf(char *,int,char *,char *) defined in sm_overflow6.c
      uses function get_sm_state(int,const char *,struct symbol *) defined in smatch.h
      uses macro definition SMATCH_EXTRA defined in smatch.h
      uses function clone_rl(struct range_list *) defined in smatch_extra.h
      uses function estate_rl(struct smatch_state *) defined in smatch_estate.c
      uses variable sm_state::state defined in smatch.h
      uses function get_type(struct expression *) defined in smatch.h
      uses variable expression::fn defined in expression.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_SYMBOL defined in expression.h
      uses variable expression::symbol defined in expression.h
      uses function inlinable(struct expression *) defined in smatch.h
      uses macro definition mem_sql defined in smatch.h
      uses macro definition run_sql defined in smatch.h
      uses function get_static_filter(struct symbol *) defined in smatch_db.c
   function return_state_to_var_sym(struct expression *,int,char *,struct symbol **) in line 681
      protection public
      38 lines of code
      4 parameters
      1 conditional paths
      uses variable name defined in smatch_type.c
      uses macro definition NULL defined in sm_implied3.c
      uses variable sym defined in smatch_type.c
      uses variable param defined in smatch_parse_call_math.c
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_ASSIGNMENT defined in expression.h
      uses function expr_to_var_sym(struct expression *,struct symbol **) defined in smatch.h
      uses variable expression::left defined in expression.h
      uses function snprintf(char *,int,char *,char *) defined in sm_overflow6.c
      uses function free_string(char *) defined in smatch.h
      uses function alloc_string(const char *) defined in smatch.h
      uses function strip_expr(struct expression *) defined in smatch.h
      uses variable expression::right defined in expression.h
      uses enumvalue EXPR_CALL defined in expression.h
      uses function get_argument_from_call_expr(struct expression_list *,int) defined in smatch.h
      uses variable expression::args defined in expression.h
      uses function get_variable_from_key(struct expression *,char *,struct symbol **) defined in smatch_db.c
   function get_variable_from_key(struct expression *,char *,struct symbol **) in line 682
      protection public
      43 lines of code
      3 parameters
      1 conditional paths
      uses variable buf defined in sm_fake_assignment.c
      uses macro definition NULL defined in sm_implied3.c
      uses function strip_expr(struct expression *) defined in smatch.h
      uses function expr_to_var_sym(struct expression *,struct symbol **) defined in smatch.h
      uses variable sym defined in smatch_type.c
      uses enumvalue EXPR_PREOP defined in expression.h
      uses function snprintf(char *,int,char *,char *) defined in sm_overflow6.c
      uses function free_string(char *) defined in smatch.h
      uses function alloc_string(const char *) defined in smatch.h
   function get_param_name(struct sm_state *) in line 683
      protection public
      23 lines of code
      1 parameters
      1 conditional paths
      uses variable buf defined in sm_fake_assignment.c
      uses variable sm_state::sym defined in smatch.h
      uses variable symbol::ident defined in struct.c
      uses macro definition NULL defined in sm_implied3.c
      uses variable ident::name defined in token.h
      uses function strlen(char *) defined in sm_overflow6.c
      uses variable sm_state::name defined in smatch.h
      uses function snprintf(char *,int,char *,char *) defined in sm_overflow6.c
   function get_data_info_name(struct expression *) in line 684
      protection public
      25 lines of code
      1 parameters
      1 conditional paths
      uses variable sym defined in smatch_type.c
      uses variable name defined in smatch_type.c
      uses variable buf defined in sm_fake_assignment.c
      uses macro definition NULL defined in sm_implied3.c
      uses function strip_expr(struct expression *) defined in smatch.h
      uses function get_member_name(struct expression *) defined in smatch.h
      uses function expr_to_var_sym(struct expression *,struct symbol **) defined in smatch.h
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::modifiers defined in struct.c
      uses macro definition MOD_TOPLEVEL defined in symbol.h
      uses macro definition MOD_STATIC defined in symbol.h
      uses function snprintf(char *,int,char *,char *) defined in sm_overflow6.c
      uses function alloc_sname(const char *) defined in smatch_slist.c
      uses function free_string(char *) defined in smatch.h
   function get_static_filter(struct symbol *) in line 707
      protection public
      15 lines of code
      1 parameters
      1 conditional paths
      uses variable sym defined in smatch_type.c
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::modifiers defined in struct.c
      uses macro definition MOD_STATIC defined in symbol.h
      uses function snprintf(char *,int,char *,char *) defined in sm_overflow6.c
      uses function get_base_file(void) defined in smatch.h
      uses variable symbol::ident defined in struct.c
      uses variable ident::name defined in token.h
   function sql_insert_return_states(int,const char *,int,int,const char *,const char *) in line 709
      protection public
      9 lines of code
      6 parameters
      1 conditional paths
      uses function strlen(char *) defined in sm_overflow6.c
      uses macro definition sql_insert defined in smatch_db.c
      uses function get_base_file(void) defined in smatch.h
      uses function get_function(void) defined in smatch.h
      uses variable __inline_fn defined in smatch.h
      uses function fn_static(void) defined in smatch.h
      uses variable param defined in smatch_parse_call_math.c
   function sql_insert_caller_info(struct expression *,int,int,const char *,const char *) in line 711
      protection public
      35 lines of code
      5 parameters
      1 conditional paths
      uses variable option_info defined in smatch.c
      uses variable __inline_call defined in smatch.h
      uses function strlen(char *) defined in sm_overflow6.c
      uses function get_fnptr_name(struct expression *) defined in smatch.h
      uses variable expression::fn defined in expression.h
      uses macro definition mem_sql defined in smatch.h
      uses macro definition NULL defined in sm_implied3.c
      uses function get_base_file(void) defined in smatch.h
      uses function get_function(void) defined in smatch.h
      uses function is_static(struct expression *) defined in smatch.h
      uses variable param defined in smatch_parse_call_math.c
      uses macro definition sm_msg defined in smatch.h
      uses function free_string(char *) defined in smatch.h
   function sql_insert_function_ptr(const char *,const char *) in line 713
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses macro definition sql_insert defined in smatch_db.c
      uses function get_base_file(void) defined in smatch.h
   function sql_insert_return_values(const char *) in line 714
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function sql_insert_call_implies(int,int,const char *,const char *) in line 715
      protection public
      6 lines of code
      4 parameters
      1 conditional paths
      uses macro definition sql_insert defined in smatch_db.c
      uses function get_base_file(void) defined in smatch.h
      uses function get_function(void) defined in smatch.h
      uses variable __inline_fn defined in smatch.h
      uses function fn_static(void) defined in smatch.h
      uses variable param defined in smatch_parse_call_math.c
   function sql_insert_function_type_size(const char *,const char *) in line 716
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses macro definition sql_insert defined in smatch_db.c
      uses function get_base_file(void) defined in smatch.h
      uses function get_function(void) defined in smatch.h
      uses variable member defined in smdb.py
   function sql_insert_local_values(const char *,const char *) in line 717
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses macro definition sql_insert defined in smatch_db.c
      uses function get_base_file(void) defined in smatch.h
      uses variable name defined in smatch_type.c
   function sql_insert_function_type_value(const char *,const char *) in line 718
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses macro definition sql_insert defined in smatch_db.c
      uses function function_type_value((null),(null)) defined in smdb.py
      uses function get_base_file(void) defined in smatch.h
      uses function get_function(void) defined in smatch.h
   function sql_insert_function_type_info(int,const char *) in line 719
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses macro definition sql_insert defined in smatch_db.c
      uses function get_base_file(void) defined in smatch.h
      uses function get_function(void) defined in smatch.h
      uses function fn_static(void) defined in smatch.h
      uses variable param defined in smatch_parse_call_math.c
   function sql_insert_data_info(struct expression *,int,const char *) in line 720
      protection public
      9 lines of code
      3 parameters
      1 conditional paths
      uses function get_data_info_name(struct expression *) defined in smatch_db.c
      uses macro definition sql_insert defined in smatch_db.c
      uses function get_base_file(void) defined in smatch.h
   function sql_select_return_states(const char *,struct expression *,int(*)(void *, int, char **, char **),void *) in line 722
      protection public
      27 lines of code
      4 parameters
      1 conditional paths
      uses function is_fake_call(struct expression *) defined in smatch_extra.h
      uses variable expression::fn defined in expression.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_SYMBOL defined in expression.h
      uses variable expression::symbol defined in expression.h
      uses variable def_callback::callback defined in smatch_db.c
      uses function info(struct position,const char *,...) defined in lib.c
      uses function inlinable(struct expression *) defined in smatch.h
      uses macro definition mem_sql defined in smatch.h
      uses macro definition run_sql defined in smatch.h
      uses function get_static_filter(struct symbol *) defined in smatch_db.c
   function sql_select_caller_info(const char *,struct symbol *,int(*)(void *, int, char **, char **)) in line 724
      protection public
      14 lines of code
      3 parameters
      1 conditional paths
      uses variable __inline_fn defined in smatch.h
      uses macro definition mem_sql defined in smatch.h
      uses variable def_callback::callback defined in smatch_db.c
      uses macro definition NULL defined in sm_implied3.c
      uses macro definition run_sql defined in smatch.h
      uses function get_static_filter(struct symbol *) defined in smatch_db.c
      uses variable sym defined in smatch_type.c
   function sql_select_call_implies(const char *,struct expression *,int(*)(void *, int, char **, char **)) in line 726
      protection public
      16 lines of code
      3 parameters
      1 conditional paths
      uses variable expression::fn defined in expression.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_SYMBOL defined in expression.h
      uses variable expression::symbol defined in expression.h
      uses function inlinable(struct expression *) defined in smatch.h
      uses macro definition mem_sql defined in smatch.h
      uses variable def_callback::callback defined in smatch_db.c
      uses macro definition NULL defined in sm_implied3.c
      uses macro definition run_sql defined in smatch.h
      uses function get_static_filter(struct symbol *) defined in smatch_db.c
   function sql_exec(int(*)(void *, int, char **, char **),void *,const char *) in line 729
      protection public
      14 lines of code
      3 parameters
      1 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses variable option_no_db defined in smatch.c
      uses variable def_callback::callback defined in smatch_db.c
   function sql_mem_exec(int(*)(void *, int, char **, char **),void *,const char *) in line 730
      protection public
      14 lines of code
      3 parameters
      1 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses variable def_callback::callback defined in smatch_db.c
   function open_smatch_db(void) in line 732
      protection public
      16 lines of code
      1 parameters
      1 conditional paths
      uses variable option_no_db defined in smatch.c
      uses macro definition NULL defined in sm_implied3.c
   function open_data_file(const char *) in line 735
      protection public
      15 lines of code
      1 parameters
      1 conditional paths
      uses variable buf defined in sm_fake_assignment.c
      uses function exit(int) defined in test-be.c
      uses variable data_dir defined in smatch.c
      uses function snprintf(char *,int,char *,char *) defined in sm_overflow6.c
   function get_tokens_file(const char *) in line 736
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
      uses variable option_no_data defined in smatch.c
      uses macro definition NULL defined in sm_implied3.c
      uses function open_data_file(const char *) defined in smatch_files.c
      uses function tokenize(const char *,int,struct token *,const char **) defined in token.h
   function check_name(unsigned short) in line 755
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses macro definition ARRAY_SIZE defined in lib.h
      uses variable reg_func_info::name defined in smatch.c
   function get_array_size(struct expression *) in line 759
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses function get_array_size_bytes_max(struct expression *) defined in smatch_buf_size.c
   function get_array_size_bytes(struct expression *) in line 760
      protection public
      12 lines of code
      1 parameters
      1 conditional paths
      uses function get_array_size_bytes_rl(struct expression *) defined in smatch_buf_size.c
      uses function rl_to_sval(struct range_list *,sval_t *) defined in smatch_extra.h
      uses variable sval_t::uvalue defined in smatch.h
      uses variable sval_t::value defined in smatch.h
   function get_array_size_bytes_min(struct expression *) in line 761
      protection public
      21 lines of code
      1 parameters
      1 conditional paths
      uses function get_array_size_bytes_rl(struct expression *) defined in smatch_buf_size.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable data_range::min defined in smatch.h
      uses variable sval_t::value defined in smatch.h
      uses variable data_range::max defined in smatch.h
      uses variable sval_t::uvalue defined in smatch.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function get_array_size_bytes_max(struct expression *) in line 762
      protection public
      16 lines of code
      1 parameters
      1 conditional paths
      uses function get_array_size_bytes_rl(struct expression *) defined in smatch_buf_size.c
      uses function rl_min(struct range_list *) defined in smatch_extra.h
      uses variable sval_t::value defined in smatch.h
      uses function rl_max(struct range_list *) defined in smatch_extra.h
      uses variable sval_t::uvalue defined in smatch.h
   function get_array_size_bytes_rl(struct expression *) in line 763
      protection public
      65 lines of code
      1 parameters
      1 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_STRING defined in expression.h
      uses variable expression::string defined in expression.h
      uses variable string::length defined in token.h
      uses enumvalue EXPR_BINOP defined in expression.h
      uses variable expression::op defined in expression.h
      uses variable offset defined in sm_implied10.c
      uses function get_implied_value(struct expression *,sval_t *) defined in smatch.h
      uses variable expression::right defined in expression.h
      uses function get_type(struct expression *) defined in smatch.h
      uses variable expression::left defined in expression.h
      uses enumvalue SYM_ARRAY defined in symbol.h
      uses enumvalue SYM_PTR defined in symbol.h
      uses function get_real_base_type(struct symbol *) defined in smatch.h
      uses function type_bytes(struct symbol *) defined in smatch.h
      uses function get_array_size_bytes(struct expression *) defined in smatch_buf_size.c
      uses function get_real_array_size(struct expression *) defined in smatch_buf_size.c
   function get_real_array_size(struct expression *) in line 764
      protection public
      25 lines of code
      1 parameters
      1 conditional paths
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_BINOP defined in expression.h
      uses function get_type(struct expression *) defined in smatch.h
      uses enumvalue SYM_ARRAY defined in symbol.h
      uses function get_implied_value(struct expression *,sval_t *) defined in smatch.h
      uses variable sval_t::value defined in smatch.h
   function get_implied_strlen(struct expression *,struct range_list **) in line 766
      protection public
      15 lines of code
      2 parameters
      1 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses function strip_expr(struct expression *) defined in smatch.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_STRING defined in expression.h
   function get_size_from_strlen(struct expression *) in line 767
      protection public
      13 lines of code
      1 parameters
      1 conditional paths
      uses function get_implied_strlen(struct expression *,struct range_list **) defined in smatch_strlen.c
      uses function rl_max(struct range_list *) defined in smatch_extra.h
      uses function sval_is_negative(sval_t) defined in smatch.h
      uses function sval_is_max(sval_t) defined in smatch.h
      uses variable sval_t::value defined in smatch.h
   function is_capped(struct expression *) in line 770
      protection public
      45 lines of code
      1 parameters
      1 conditional paths
      uses function strip_expr(struct expression *) defined in smatch.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_POSTOP defined in expression.h
      uses variable expression::unop defined in expression.h
      uses function get_hard_max(struct expression *,sval_t *) defined in smatch.h
      uses enumvalue EXPR_BINOP defined in expression.h
      uses variable expression::op defined in expression.h
      uses enumvalue SPECIAL_RIGHTSHIFT defined in token.h
      uses variable expression::right defined in expression.h
      uses variable expression::left defined in expression.h
      uses function get_absolute_rl(struct expression *,struct range_list **) defined in smatch_extra.h
      uses function sval_is_negative(sval_t) defined in smatch.h
      uses function rl_min(struct range_list *) defined in smatch_extra.h
      uses function get_state_expr(int,struct expression *) defined in smatch.h
   function is_capped_var_sym(const char *,struct symbol *) in line 771
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
      uses function get_state(int,const char *,struct symbol *) defined in smatch.h
      uses variable name defined in smatch_type.c
      uses variable sym defined in smatch_type.c
   function is_user_macro(struct expression *) in line 774
      protection public
      17 lines of code
      1 parameters
      5 conditional paths
      uses function get_macro_name(struct position) defined in macro_table.c
      uses variable expression::pos defined in expression.h
      uses function get_implied_rl(struct expression *,struct range_list **) defined in smatch_extra.h
      uses function is_whole_rl(struct range_list *) defined in smatch_extra.h
      uses enumvalue SET_DATA defined in check_user_data.c
   function is_user_data(struct expression *) in line 775
      protection public
      40 lines of code
      1 parameters
      12 conditional paths
      uses function is_capped(struct expression *) defined in smatch.h
      uses function is_user_macro(struct expression *) defined in check_user_data.c
      uses function strip_expr(struct expression *) defined in smatch.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_BINOP defined in expression.h
      uses function is_user_data(struct expression *) defined in check_user_data.c
      uses variable expression::left defined in expression.h
      uses function is_array(struct expression *) defined in smatch.h
      uses variable expression::right defined in expression.h
      uses enumvalue EXPR_PREOP defined in expression.h
      uses variable expression::op defined in expression.h
      uses variable expression::unop defined in expression.h
   function is_capped_user_data(struct expression *) in line 776
      protection public
      11 lines of code
      1 parameters
      3 conditional paths
      uses function get_sm_state_expr(int,struct expression *) defined in smatch.h
      uses function slist_has_state(struct state_list *,struct smatch_state *) defined in smatch_slist.c
      uses variable sm_state::possible defined in smatch.h
   function implied_user_data(struct expression *,struct range_list **) in line 777
      protection public
      7 lines of code
      2 parameters
      2 conditional paths
      uses function is_user_data(struct expression *) defined in check_user_data.c
      uses function get_absolute_rl(struct expression *,struct range_list **) defined in smatch_extra.h
   function get_user_rl(struct expression *,struct range_list **) in line 778
      protection public
      11 lines of code
      2 parameters
      2 conditional paths
      uses function custom_get_absolute_rl(struct expression *,struct range_list *(*)(struct expression *expr),struct range_list **) defined in smatch_extra.h
      uses macro definition NULL defined in sm_implied3.c
   function get_user_rl_var_sym(const char *,struct symbol *,struct range_list **) in line 779
      protection public
      11 lines of code
      3 parameters
      2 conditional paths
      uses function get_state(int,const char *,struct symbol *) defined in smatch.h
      uses variable name defined in smatch_type.c
      uses variable sym defined in smatch_type.c
      uses function estate_rl(struct smatch_state *) defined in smatch_estate.c
   function print_held_locks(void) in line 782
      protection public
      15 lines of code
      1 parameters
      3 conditional paths
      uses function __get_cur_stree(void) defined in smatch.h
      uses macro definition FOR_EACH_MY_SM defined in avl.h
      uses variable sm_state::state defined in smatch.h
      uses macro definition sm_printf defined in smatch.h
      uses variable sm_state::name defined in smatch.h
      uses macro definition END_FOR_EACH_SM defined in avl.h
   function get_assigned_expr(struct expression *) in line 785
      protection public
      9 lines of code
      1 parameters
      2 conditional paths
      uses function get_state_expr(int,struct expression *) defined in smatch.h
      uses macro definition NULL defined in sm_implied3.c
      uses variable smatch_state::data defined in smatch.h
   function get_assigned_expr_name_sym(const char *,struct symbol *) in line 786
      protection public
      9 lines of code
      2 parameters
      2 conditional paths
      uses function get_state(int,const char *,struct symbol *) defined in smatch.h
      uses variable name defined in smatch_type.c
      uses variable sym defined in smatch_type.c
      uses macro definition NULL defined in sm_implied3.c
      uses variable smatch_state::data defined in smatch.h
   function get_comparison(struct expression *,struct expression *) in line 796
      protection public
      19 lines of code
      2 parameters
      1 conditional paths
      uses variable one defined in sm_equiv1.c
      uses macro definition NULL defined in sm_implied3.c
      uses variable two defined in sm_equiv1.c
      uses function get_comparison_strings(const char *,const char *) defined in smatch_comparison.c
      uses function free_string(char *) defined in smatch.h
   function get_comparison_strings(const char *,const char *) in line 797
      protection public
      28 lines of code
      2 parameters
      1 conditional paths
      uses variable buf defined in sm_fake_assignment.c
      uses variable one defined in sm_equiv1.c
      uses variable two defined in sm_equiv1.c
      uses enumvalue SPECIAL_EQUAL defined in token.h
      uses function snprintf(char *,int,char *,char *) defined in sm_overflow6.c
      uses function get_state(int,const char *,struct symbol *) defined in smatch.h
      uses macro definition NULL defined in sm_implied3.c
      uses function flip_comparison(int) defined in smatch_comparison.c
   function possible_comparison(struct expression *,int,struct expression *) in line 798
      protection public
      57 lines of code
      3 parameters
      1 conditional paths
      uses variable one defined in sm_equiv1.c
      uses macro definition NULL defined in sm_implied3.c
      uses variable two defined in sm_equiv1.c
      uses variable buf defined in sm_fake_assignment.c
      uses enumvalue SPECIAL_EQUAL defined in token.h
      uses function flip_comparison(int) defined in smatch_comparison.c
      uses function snprintf(char *,int,char *,char *) defined in sm_overflow6.c
      uses function get_sm_state(int,const char *,struct symbol *) defined in smatch.h
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable sm_state::possible defined in smatch.h
      uses variable sm_state::state defined in smatch.h
      uses variable smatch_state::data defined in smatch.h
      uses enumvalue SPECIAL_LTE defined in token.h
      uses enumvalue SPECIAL_GTE defined in token.h
      uses enumvalue SPECIAL_UNSIGNED_LTE defined in token.h
      uses enumvalue SPECIAL_UNSIGNED_GTE defined in token.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses function free_string(char *) defined in smatch.h
   function get_all_comparisons(struct expression *) in line 799
      protection public
      23 lines of code
      1 parameters
      1 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses variable sm_state::state defined in smatch.h
      uses function get_state_expr(int,struct expression *) defined in smatch.h
      uses variable smatch_state::data defined in smatch.h
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses function get_sm_state(int,const char *,struct symbol *) defined in smatch.h
      uses macro definition add_ptr_list defined in ptrlist.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function get_all_possible_equal_comparisons(struct expression *) in line 800
      protection public
      26 lines of code
      1 parameters
      1 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses variable sm_state::state defined in smatch.h
      uses function get_state_expr(int,struct expression *) defined in smatch.h
      uses variable smatch_state::data defined in smatch.h
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses function get_sm_state(int,const char *,struct symbol *) defined in smatch.h
      uses variable smatch_state::name defined in smatch.h
      uses macro definition add_ptr_list defined in ptrlist.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function __add_comparison_info(struct expression *,struct expression *,const char *) in line 801
      protection public
      11 lines of code
      3 parameters
      1 conditional paths
      uses variable c defined in sm_array_overflow.c
      uses function str_to_comparison_arg(const char *,struct expression *,int *,struct expression **) defined in smatch_extra.h
   function name_sym_to_param_comparison(const char *,struct symbol *) in line 802
      protection public
      22 lines of code
      2 parameters
      1 conditional paths
      uses variable param defined in smatch_parse_call_math.c
      uses variable buf defined in sm_fake_assignment.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable cur_func_sym defined in smatch.h
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::base_type defined in struct.c
      uses variable symbol::arguments defined in struct.c
      uses function snprintf(char *,int,char *,char *) defined in sm_overflow6.c
      uses function get_comparison_strings(const char *,const char *) defined in smatch_comparison.c
      uses variable name defined in smatch_type.c
      uses function show_special(int) defined in token.h
      uses function alloc_sname(const char *) defined in smatch_slist.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses macro definition NULL defined in sm_implied3.c
   function expr_equal_to_param(struct expression *,int) in line 803
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function expr_lte_to_param(struct expression *,int) in line 804
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function expr_param_comparison(struct expression *,int) in line 805
      protection public
      33 lines of code
      2 parameters
      1 conditional paths
      uses variable param defined in smatch_parse_call_math.c
      uses macro definition NULL defined in sm_implied3.c
      uses variable buf defined in sm_fake_assignment.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable cur_func_sym defined in smatch.h
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::base_type defined in struct.c
      uses variable symbol::arguments defined in struct.c
      uses function snprintf(char *,int,char *,char *) defined in sm_overflow6.c
      uses function get_comparison_strings(const char *,const char *) defined in smatch_comparison.c
      uses function show_special(int) defined in token.h
      uses function alloc_sname(const char *) defined in smatch_slist.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses function free_string(char *) defined in smatch.h
   function flip_comparison(int) in line 806
      protection public
      30 lines of code
      1 parameters
      1 conditional paths
      uses function op(void) defined in loop2.c
      uses enumvalue SPECIAL_UNSIGNED_LT defined in token.h
      uses enumvalue SPECIAL_UNSIGNED_GT defined in token.h
      uses enumvalue SPECIAL_LTE defined in token.h
      uses enumvalue SPECIAL_GTE defined in token.h
      uses enumvalue SPECIAL_UNSIGNED_LTE defined in token.h
      uses enumvalue SPECIAL_UNSIGNED_GTE defined in token.h
      uses enumvalue SPECIAL_EQUAL defined in token.h
      uses enumvalue SPECIAL_NOTEQUAL defined in token.h
      uses macro definition sm_msg defined in smatch.h
   function negate_comparison(int) in line 807
      protection public
      30 lines of code
      1 parameters
      1 conditional paths
      uses function op(void) defined in loop2.c
      uses enumvalue SPECIAL_GTE defined in token.h
      uses enumvalue SPECIAL_UNSIGNED_LT defined in token.h
      uses enumvalue SPECIAL_UNSIGNED_GTE defined in token.h
      uses enumvalue SPECIAL_LTE defined in token.h
      uses enumvalue SPECIAL_UNSIGNED_LTE defined in token.h
      uses enumvalue SPECIAL_UNSIGNED_GT defined in token.h
      uses enumvalue SPECIAL_EQUAL defined in token.h
      uses enumvalue SPECIAL_NOTEQUAL defined in token.h
      uses macro definition sm_msg defined in smatch.h
   function filter_by_comparison(struct range_list **,int,struct range_list *) in line 808
      protection public
      55 lines of code
      3 parameters
      1 conditional paths
      uses macro definition min defined in sm_select_assign.c
      uses function rl_type(struct range_list *) defined in smatch_ranges.c
      uses function sval_type_max(struct symbol *) defined in smatch.h
      uses function sval_type_min(struct symbol *) defined in smatch.h
      uses function cast_rl(struct symbol *,struct range_list *) defined in smatch_ranges.c
      uses enumvalue SPECIAL_UNSIGNED_LT defined in token.h
      uses function remove_range(struct range_list *,sval_t,sval_t) defined in smatch_ranges.c
      uses function rl_max(struct range_list *) defined in smatch_ranges.c
      uses enumvalue SPECIAL_LTE defined in token.h
      uses enumvalue SPECIAL_UNSIGNED_LTE defined in token.h
      uses function sval_is_max(sval_t) defined in smatch.h
      uses enumvalue SPECIAL_EQUAL defined in token.h
      uses function sval_is_min(sval_t) defined in smatch.h
      uses function rl_min(struct range_list *) defined in smatch_ranges.c
      uses enumvalue SPECIAL_GTE defined in token.h
      uses enumvalue SPECIAL_UNSIGNED_GTE defined in token.h
      uses enumvalue SPECIAL_UNSIGNED_GT defined in token.h
      uses enumvalue SPECIAL_NOTEQUAL defined in token.h
      uses function sval_cmp(sval_t,sval_t) defined in smatch.h
      uses macro definition sm_msg defined in smatch.h
      uses function show_special(int) defined in token.h
   function comparison_implication_hook(struct expression *,struct stree_stack **,struct stree_stack **) in line 809
      protection public
      43 lines of code
      3 parameters
      1 conditional paths
      uses variable sm_state::left defined in smatch.h
      uses variable sm_state::right defined in smatch.h
      uses function op(void) defined in loop2.c
      uses variable buf defined in sm_fake_assignment.c
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_COMPARE defined in expression.h
      uses macro definition NULL defined in sm_implied3.c
      uses variable expression::op defined in expression.h
      uses function expr_to_var(struct expression *) defined in smatch.h
      uses variable expression::left defined in expression.h
      uses variable expression::right defined in expression.h
      uses function free_string(char *) defined in smatch.h
      uses function flip_comparison(int) defined in smatch_comparison.c
      uses function snprintf(char *,int,char *,char *) defined in sm_overflow6.c
      uses function get_sm_state(int,const char *,struct symbol *) defined in smatch.h
      uses variable sm_state::merged defined in smatch.h
   function sval_alloc(sval_t) in line 814
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
   function sval_alloc_permanent(sval_t) in line 815
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses function malloc(int) defined in sm_buf_size2.c
   function sval_blank(struct expression *) in line 816
      protection public
      11 lines of code
      1 parameters
      1 conditional paths
      uses variable sval_t::type defined in smatch.h
      uses function get_type(struct expression *) defined in smatch.h
      uses variable sval_t::value defined in smatch.h
   function sval_type_val(struct symbol *,long long) in line 817
      protection public
      11 lines of code
      2 parameters
      1 conditional paths
      uses variable sval_t::type defined in smatch.h
      uses variable sval_t::value defined in smatch.h
   function sval_from_val(struct expression *,long long) in line 818
      protection public
      10 lines of code
      2 parameters
      1 conditional paths
      uses function sval_blank(struct expression *) defined in smatch_sval.c
      uses variable sval_t::value defined in smatch.h
      uses function sval_cast(struct symbol *,sval_t) defined in smatch_sval.c
      uses function get_type(struct expression *) defined in smatch.h
   function sval_unsigned(sval_t) in line 819
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function type_unsigned(struct symbol *) defined in smatch.h
      uses variable sval_t::type defined in smatch.h
   function sval_signed(sval_t) in line 820
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function type_unsigned(struct symbol *) defined in smatch.h
      uses variable sval_t::type defined in smatch.h
   function sval_bits(sval_t) in line 821
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function type_bits(struct symbol *) defined in smatch.h
      uses variable sval_t::type defined in smatch.h
   function sval_positive_bits(sval_t) in line 822
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function type_positive_bits(struct symbol *) defined in smatch.h
      uses variable sval_t::type defined in smatch.h
   function sval_bits_used(sval_t) in line 823
      protection public
      10 lines of code
      1 parameters
      1 conditional paths
      uses variable sval_t::uvalue defined in smatch.h
   function sval_is_negative(sval_t) in line 824
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses function type_unsigned(struct symbol *) defined in smatch.h
      uses variable sval_t::type defined in smatch.h
      uses variable sval_t::value defined in smatch.h
   function sval_is_positive(sval_t) in line 825
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function sval_is_negative(sval_t) defined in smatch_sval.c
   function sval_is_min(sval_t) in line 826
      protection public
      12 lines of code
      1 parameters
      1 conditional paths
      uses macro definition min defined in sm_select_assign.c
      uses function sval_type_min(struct symbol *) defined in smatch.h
      uses variable sval_t::type defined in smatch.h
      uses function sval_unsigned(sval_t) defined in smatch_sval.c
      uses variable sval_t::uvalue defined in smatch.h
      uses variable sval_t::value defined in smatch.h
   function sval_is_max(sval_t) in line 827
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses function sval_type_max(struct symbol *) defined in smatch.h
      uses variable sval_t::type defined in smatch.h
      uses function sval_unsigned(sval_t) defined in smatch_sval.c
      uses variable sval_t::uvalue defined in smatch.h
      uses variable sval_t::value defined in smatch.h
   function sval_is_a_min(sval_t) in line 828
      protection public
      10 lines of code
      1 parameters
      1 conditional paths
      uses function sval_signed(sval_t) defined in smatch_sval.c
      uses variable sval_t::value defined in smatch.h
   function sval_is_a_max(sval_t) in line 829
      protection public
      19 lines of code
      1 parameters
      1 conditional paths
      uses variable sval_t::uvalue defined in smatch.h
      uses function sval_unsigned(sval_t) defined in smatch_sval.c
      uses macro definition ULLONG_MAX defined in expression.c
      uses variable sval_t::value defined in smatch.h
      uses variable valid_ptr_max defined in smatch.h
   function sval_is_negative_min(sval_t) in line 830
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses function sval_is_negative(sval_t) defined in smatch_sval.c
      uses function sval_is_min(sval_t) defined in smatch_sval.c
   function sval_cmp(sval_t,sval_t) in line 831
      protection public
      27 lines of code
      2 parameters
      1 conditional paths
      uses variable one defined in sm_equiv1.c
      uses function sval_positive_bits(sval_t) defined in smatch_sval.c
      uses variable two defined in sm_equiv1.c
      uses function type_bits(struct symbol *) defined in smatch.h
      uses function sval_cast(struct symbol *,sval_t) defined in smatch_sval.c
      uses function type_unsigned(struct symbol *) defined in smatch.h
   function sval_cmp_t(struct symbol *,sval_t,sval_t) in line 832
      protection public
      8 lines of code
      3 parameters
      1 conditional paths
      uses function sval_cast(struct symbol *,sval_t) defined in smatch_sval.c
      uses variable one defined in sm_equiv1.c
      uses variable two defined in sm_equiv1.c
      uses function sval_cmp(sval_t,sval_t) defined in smatch_sval.c
   function sval_cmp_val(sval_t,long long) in line 833
      protection public
      7 lines of code
      2 parameters
      1 conditional paths
      uses function sval_type_val(struct symbol *,long long) defined in smatch_sval.c
      uses function sval_cmp(sval_t,sval_t) defined in smatch_sval.c
      uses variable one defined in sm_equiv1.c
   function sval_min(sval_t,sval_t) in line 834
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
      uses function sval_cmp(sval_t,sval_t) defined in smatch_sval.c
      uses variable one defined in sm_equiv1.c
      uses variable two defined in sm_equiv1.c
   function sval_max(sval_t,sval_t) in line 835
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
      uses function sval_cmp(sval_t,sval_t) defined in smatch_sval.c
      uses variable one defined in sm_equiv1.c
      uses variable two defined in sm_equiv1.c
   function sval_too_low(struct symbol *,sval_t) in line 836
      protection public
      10 lines of code
      2 parameters
      1 conditional paths
      uses function sval_is_negative(sval_t) defined in smatch_sval.c
      uses function type_unsigned(struct symbol *) defined in smatch.h
      uses function type_signed(struct symbol *) defined in smatch.h
      uses function sval_unsigned(sval_t) defined in smatch_sval.c
      uses function sval_cmp(sval_t,sval_t) defined in smatch_sval.c
      uses function sval_type_min(struct symbol *) defined in smatch.h
   function sval_too_high(struct symbol *,sval_t) in line 837
      protection public
      8 lines of code
      2 parameters
      1 conditional paths
      uses function sval_is_negative(sval_t) defined in smatch_sval.c
      uses variable sval_t::uvalue defined in smatch.h
      uses function sval_type_max(struct symbol *) defined in smatch.h
   function sval_fits(struct symbol *,sval_t) in line 838
      protection public
      8 lines of code
      2 parameters
      1 conditional paths
      uses function sval_too_low(struct symbol *,sval_t) defined in smatch_sval.c
      uses function sval_too_high(struct symbol *,sval_t) defined in smatch_sval.c
   function sval_cast(struct symbol *,sval_t) in line 839
      protection public
      33 lines of code
      2 parameters
      1 conditional paths
      uses variable sval_t::type defined in smatch.h
      uses function sval_bits(sval_t) defined in smatch_sval.c
      uses function sval_unsigned(sval_t) defined in smatch_sval.c
      uses variable sval_t::value defined in smatch.h
      uses variable int defined in missing-ident.c
   function sval_preop(sval_t,int) in line 840
      protection public
      17 lines of code
      2 parameters
      1 conditional paths
      uses function op(void) defined in loop2.c
      uses variable sval_t::value defined in smatch.h
      uses function sval_cast(struct symbol *,sval_t) defined in smatch_sval.c
      uses variable sval_t::type defined in smatch.h
   function sval_binop(sval_t,int,sval_t) in line 841
      protection public
      17 lines of code
      3 parameters
      1 conditional paths
      uses variable sval_t::type defined in smatch.h
      uses function sval_positive_bits(sval_t) defined in smatch_sval.c
      uses function type_positive_bits(struct symbol *) defined in smatch.h
      uses function type_unsigned(struct symbol *) defined in smatch.h
      uses function op(void) defined in loop2.c
      uses function sval_cast(struct symbol *,sval_t) defined in smatch_sval.c
   function sval_binop_overflows(sval_t,int,sval_t) in line 842
      protection public
      58 lines of code
      3 parameters
      1 conditional paths
      uses macro definition min defined in sm_select_assign.c
      uses variable sval_t::type defined in smatch.h
      uses function type_positive_bits(struct symbol *) defined in smatch.h
      uses function sval_type_max(struct symbol *) defined in smatch.h
      uses function sval_type_min(struct symbol *) defined in smatch.h
      uses function op(void) defined in loop2.c
      uses function sval_is_negative(sval_t) defined in smatch_sval.c
      uses variable sval_t::value defined in smatch.h
      uses variable sval_t::uvalue defined in smatch.h
      uses function type_unsigned(struct symbol *) defined in smatch.h
      uses function sval_cmp(sval_t,sval_t) defined in smatch_sval.c
      uses function sval_preop(sval_t,int) defined in smatch_sval.c
      uses enumvalue SPECIAL_LEFTSHIFT defined in token.h
      uses function sval_binop(sval_t,int,sval_t) defined in smatch_sval.c
      uses function invert_op(int) defined in smatch.h
   function fls_mask(unsigned long long) in line 843
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
   function sval_fls_mask(sval_t) in line 844
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function fls_mask(unsigned long long) defined in smatch_sval.c
      uses variable sval_t::uvalue defined in smatch.h
   function sval_to_str(sval_t) in line 845
      protection public
      34 lines of code
      1 parameters
      1 conditional paths
      uses variable buf defined in sm_fake_assignment.c
      uses function sval_unsigned(sval_t) defined in smatch_sval.c
      uses variable sval_t::value defined in smatch.h
      uses macro definition ULLONG_MAX defined in expression.c
      uses function sval_signed(sval_t) defined in smatch_sval.c
      uses function snprintf(char *,int,char *,char *) defined in sm_overflow6.c
      uses function alloc_sname(const char *) defined in smatch_slist.c
   function sval_to_numstr(sval_t) in line 846
      protection public
      13 lines of code
      1 parameters
      1 conditional paths
      uses variable buf defined in sm_fake_assignment.c
      uses function sval_unsigned(sval_t) defined in smatch_sval.c
      uses function snprintf(char *,int,char *,char *) defined in sm_overflow6.c
      uses variable sval_t::value defined in smatch.h
      uses function alloc_sname(const char *) defined in smatch_slist.c
   function ll_to_sval(long long) in line 847
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses variable sval_t::type defined in smatch.h
      uses variable sval_t::value defined in smatch.h
   function list_has_string(struct string_list *,const char *) in line 850
      protection public
      16 lines of code
      2 parameters
      1 conditional paths
      uses variable str defined in sm_overflow6.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function insert_string(struct string_list **,const char *) in line 851
      protection public
      17 lines of code
      2 parameters
      1 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses macro definition INSERT_CURRENT defined in ptrlist.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses macro definition add_ptr_list defined in ptrlist.h
   function clone_str_list(struct string_list *) in line 852
      protection public
      10 lines of code
      1 parameters
      1 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses macro definition add_ptr_list defined in ptrlist.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function combine_string_lists(struct string_list *,struct string_list *) in line 853
      protection public
      11 lines of code
      2 parameters
      1 conditional paths
      uses function clone_str_list(struct string_list *) defined in smatch_string_list.c
      uses variable one defined in sm_equiv1.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable two defined in sm_equiv1.c
      uses function insert_string(struct string_list **,const char *) defined in smatch_string_list.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function get_start_states(void) in line 856
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function has_symbol(struct expression *,struct symbol *) in line 859
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses variable sym defined in smatch_type.c
   function has_variable(struct expression *,struct expression *) in line 860
      protection public
      14 lines of code
      2 parameters
      1 conditional paths
      uses variable expr_name_sym::expr defined in smatch_recurse.c
      uses variable expr_name_sym::name defined in smatch_recurse.c
      uses function expr_to_var_sym(struct expression *,struct symbol **) defined in smatch.h
      uses variable expr_name_sym::sym defined in smatch_recurse.c
      uses function free_string(char *) defined in smatch.h
   function has_inc_dec(struct expression *) in line 861
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable expr_name_sym::expr defined in smatch_recurse.c
      uses macro definition NULL defined in sm_implied3.c
   function get_stored_condition(struct expression *) in line 864
      protection public
      13 lines of code
      1 parameters
      1 conditional paths
      uses variable name defined in smatch_type.c
      uses function expr_to_str(struct expression *) defined in smatch.h
      uses macro definition NULL defined in sm_implied3.c
      uses function get_state(int,const char *,struct symbol *) defined in smatch.h
      uses function free_string(char *) defined in smatch.h
   function stored_condition_implication_hook(struct expression *,struct stree_stack **,struct stree_stack **) in line 865
      protection public
      52 lines of code
      3 parameters
      1 conditional paths
      uses variable name defined in smatch_type.c
      uses macro definition NULL defined in sm_implied3.c
      uses function strip_expr(struct expression *) defined in smatch.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_BINOP defined in expression.h
      uses function expr_to_str(struct expression *) defined in smatch.h
      uses function get_sm_state(int,const char *,struct symbol *) defined in smatch.h
      uses function free_string(char *) defined in smatch.h
      uses variable sm_state::merged defined in smatch.h
      uses macro definition RECURSE_LIMIT defined in smatch_stored_conditions.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses function add_pool(struct stree_stack **,struct stree *) defined in smatch.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses function free_stree_stack(struct stree_stack **) defined in smatch_slist.c
   function get_formatted_string_size(struct expression *,int) in line 870
      protection public
      28 lines of code
      2 parameters
      5 conditional paths
      uses variable p defined in cond_expr2.c
      uses function get_argument_from_call_expr(struct expression_list *,int) defined in smatch.h
      uses variable expression::args defined in expression.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_STRING defined in expression.h
      uses variable expression::string defined in expression.h
      uses variable string::data defined in token.h
   function param_was_set(struct expression *) in line 873
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses function get_state_expr(int,struct expression *) defined in smatch.h
   function param_has_filter_data(struct sm_state *) in line 875
      protection public
      11 lines of code
      1 parameters
      1 conditional paths
      uses function get_state(int,const char *,struct symbol *) defined in smatch.h
      uses variable sm_state::name defined in smatch.h
      uses variable sm_state::sym defined in smatch.h
      uses function estate_rl(struct smatch_state *) defined in smatch_estate.c
   function set_up_link_functions(int,int) in line 878
      protection public
      11 lines of code
      2 parameters
      1 conditional paths
      uses function printf(char *,...) defined in test-be.c
      uses function exit(int) defined in test-be.c
      uses function add_merge_hook(int,merge_func_t *) defined in smatch.h
      uses function merge_link_states(struct smatch_state *,struct smatch_state *) defined in smatch_links.c
      uses function add_modification_hook(int,modification_hook *) defined in smatch.h
   function merge_link_states(struct smatch_state *,struct smatch_state *) in line 879
      protection public
      9 lines of code
      2 parameters
      1 conditional paths
      uses function clone_var_sym_list(struct var_sym_list *) defined in smatch.h
      uses function merge_var_sym_list(struct var_sym_list **,struct var_sym_list *) defined in smatch.h
   function store_link(int,const char *,struct symbol *,const char *,struct symbol *) in line 880
      protection public
      15 lines of code
      5 parameters
      1 conditional paths
      uses function get_state(int,const char *,struct symbol *) defined in smatch.h
      uses variable sym defined in smatch_type.c
      uses function clone_var_sym_list(struct var_sym_list *) defined in smatch.h
      uses variable smatch_state::data defined in smatch.h
      uses macro definition NULL defined in sm_implied3.c
      uses function add_var_sym(struct var_sym_list **,const char *,struct symbol *) defined in smatch.h
      uses function set_state(int,const char *,struct symbol *,struct smatch_state *) defined in smatch.h
   function set_auto_copy(int) in line 883
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses variable num_checks defined in smatch.c
      uses function printf(char *,...) defined in test-be.c
   function get_size_variable(struct expression *) in line 886
      protection public
      9 lines of code
      1 parameters
      1 conditional paths
      uses function get_state_expr(int,struct expression *) defined in smatch.h
      uses variable buf defined in sm_fake_assignment.c
      uses variable smatch_state::data defined in smatch.h
      uses macro definition NULL defined in sm_implied3.c
   function add_untracked_param_hook(void(func)(struct expression *call, int param)) in line 889
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses variable p defined in cond_expr2.c
      uses function malloc(int) defined in sm_buf_size2.c
      uses macro definition func defined in preprocessor1.c
      uses macro definition add_ptr_list defined in ptrlist.h
   function is_impossible_path(void) in line 892
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses function get_state(int,const char *,struct symbol *) defined in smatch.h
      uses macro definition NULL defined in sm_implied3.c
   function get_strings(struct expression *) in line 895
      protection public
      37 lines of code
      1 parameters
      1 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses function strip_expr(struct expression *) defined in smatch.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_STRING defined in expression.h
      uses variable sm_state::state defined in smatch.h
      uses function alloc_state_str(const char *) defined in smatch.h
      uses variable expression::string defined in expression.h
      uses variable string::data defined in token.h
      uses function alloc_sm_state(int,const char *,struct symbol *,struct smatch_state *) defined in smatch_slist.c
      uses macro definition add_ptr_list defined in ptrlist.h
      uses enumvalue EXPR_CONDITIONAL defined in expression.h
      uses enumvalue EXPR_SELECT defined in expression.h
      uses function known_condition_true(struct expression *) defined in smatch.h
      uses variable expression::conditional defined in expression.h
      uses variable expression::cond_true defined in expression.h
      uses function known_condition_false(struct expression *) defined in smatch.h
      uses variable expression::cond_false defined in expression.h
      uses function concat_ptr_list(struct ptr_list *,struct ptr_list **) defined in ptrlist.c
      uses function free_slist(struct state_list **) defined in smatch_slist.c
      uses function get_sm_state_expr(int,struct expression *) defined in smatch.h
      uses function clone_slist(struct state_list *) defined in smatch_slist.c
      uses variable sm_state::possible defined in smatch.h
   function estate_get_single_value(struct smatch_state *,sval_t *) in line 898
      protection public
      11 lines of code
      2 parameters
      1 conditional paths
   function get_address_rl(struct expression *,struct range_list **) in line 901
      protection public
      47 lines of code
      2 parameters
      1 conditional paths
      uses function strip_expr(struct expression *) defined in smatch.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_STRING defined in expression.h
      uses function alloc_rl(sval_t,sval_t) defined in smatch_extra.h
      uses variable text_seg_min defined in smatch.h
      uses variable text_seg_max defined in smatch.h
      uses enumvalue EXPR_PREOP defined in expression.h
      uses variable expression::op defined in expression.h
      uses variable expression::unop defined in expression.h
      uses enumvalue EXPR_SYMBOL defined in expression.h
      uses variable expression::symbol defined in expression.h
      uses enumvalue EXPR_DEREF defined in expression.h
      uses variable offset defined in sm_implied10.c
      uses function get_absolute_rl(struct expression *,struct range_list **) defined in smatch_extra.h
      uses variable array_min_sval defined in smatch.h
      uses variable array_max_sval defined in smatch.h
   function __get_state_hook(int,const char *,struct symbol *) in line 904
      protection public
      15 lines of code
      3 parameters
      1 conditional paths
      uses variable option_info defined in smatch.c
      uses variable __in_fake_assign defined in smatch.h
      uses function get_param_num_from_sym(struct symbol *) defined in smatch.h
      uses variable sym defined in smatch_type.c
      uses function set_state_stree(struct stree **,int,const char *,struct symbol *,struct smatch_state *) defined in smatch_slist.c
      uses variable used_stree defined in smatch_param_used.c
      uses variable name defined in smatch_type.c
   function db_var_is_array_limit(struct expression *,const char *,struct var_sym_list *) in line 907
      protection public
      16 lines of code
      3 parameters
      1 conditional paths
      uses function get_data_info_name(struct expression *) defined in smatch.h
      uses variable db_info::name defined in smatch_buf_comparison.c
      uses macro definition run_sql defined in smatch.h
      uses enumvalue ARRAY_LEN defined in smatch.h
      uses variable db_info::ret defined in smatch_buf_comparison.c
   variable sval_t::@136 in line 37
      protection public
   variable sval_t::type in line 33
      protection public
   variable sval_t::uvalue in line 36
      protection public
   variable sval_t::value in line 35
      protection public
   variable sval_t::@135::uvalue in line 36
      protection public
   variable sval_t::@135::value in line 35
      protection public
   variable smatch_state::data in line 42
      protection public
   variable smatch_state::name in line 41
      protection public
   variable tracker::name in line 63
      protection public
   variable tracker::owner in line 65
      protection public
   variable tracker::sym in line 64
      protection public
   variable sm_state::implied in line 77
      protection public
   variable sm_state::left in line 82
      protection public
   variable sm_state::line in line 79
      protection public
   variable sm_state::merged in line 76
      protection public
   variable sm_state::name in line 73
      protection public
   variable sm_state::nr_children in line 78
      protection public
   variable sm_state::owner in line 75
      protection public
   variable sm_state::pool in line 81
      protection public
   variable sm_state::possible in line 84
      protection public
   variable sm_state::right in line 83
      protection public
   variable sm_state::state in line 80
      protection public
   variable sm_state::sym in line 74
      protection public
   variable var_sym::sym in line 89
      protection public
   variable var_sym::var in line 88
      protection public
   variable modification_data::cur in line 172
      protection public
   variable modification_data::prev in line 171
      protection public
   variable data_range::max in line 461
      protection public
   variable data_range::min in line 460
      protection public
   variable compare_data::comparison in line 792
      protection public
   variable compare_data::var1 in line 790
      protection public
   variable compare_data::var2 in line 793
      protection public
   variable compare_data::vsl1 in line 791
      protection public
   variable compare_data::vsl2 in line 794
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/smatch_address.c
module smatch_address.c
   function is_non_null_array(struct expression *) in line 22
      protection public
      44 lines of code
      1 parameters
      11 conditional paths
      uses variable sym defined in smatch_type.c
      uses variable name defined in smatch_type.c
      uses function get_type(struct expression *) defined in smatch.h
      uses enumvalue SYM_ARRAY defined in symbol.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_SYMBOL defined in expression.h
      uses function implied_not_equal(struct expression *,long long) defined in smatch_extra.c
      uses enumvalue EXPR_DEREF defined in expression.h
      uses variable expression::member defined in expression.h
      uses function expr_to_var_sym(struct expression *,struct symbol **) defined in smatch.h
      uses function free_string(char *) defined in smatch.h
      uses function get_real_base_type(struct symbol *) defined in smatch.h
      uses enumvalue SYM_PTR defined in symbol.h
      uses enumvalue SYM_STRUCT defined in symbol.h
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable symbol::ident defined in struct.c
      uses variable ident::name defined in token.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function get_member_offset(struct expression *) in line 67
      protection public
      31 lines of code
      1 parameters
      6 conditional paths
      uses variable member defined in smdb.py
      uses variable offset defined in sm_implied10.c
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_DEREF defined in expression.h
      uses variable expression::member defined in expression.h
      uses variable expression::member_offset defined in expression.h
      uses function get_type(struct expression *) defined in smatch.h
      uses variable expression::deref defined in expression.h
      uses enumvalue SYM_STRUCT defined in symbol.h
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable symbol::ident defined in struct.c
      uses variable ident::name defined in token.h
      uses function type_bytes(struct symbol *) defined in smatch.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function add_offset_to_min(struct range_list **,int) in line 99
      protection public
      32 lines of code
      2 parameters
      3 conditional paths
      uses function rl_min(struct range_list *) defined in smatch_extra.h
      uses variable sval_t::value defined in smatch.h
      uses variable offset defined in sm_implied10.c
      uses function alloc_rl(sval_t,sval_t) defined in smatch_extra.h
      uses function rl_binop(struct range_list *,int,struct range_list *) defined in smatch_extra.h
      uses function rl_max(struct range_list *) defined in smatch_extra.h
      uses function rl_intersection(struct range_list *,struct range_list *) defined in smatch_extra.h
   function where_allocated_rl(struct symbol *) in line 132
      protection public
      10 lines of code
      1 parameters
      3 conditional paths
      uses variable sym defined in smatch_type.c
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::modifiers defined in struct.c
      uses macro definition MOD_TOPLEVEL defined in symbol.h
      uses macro definition MOD_STATIC defined in symbol.h
      uses variable symbol::initializer defined in struct.c
      uses function alloc_rl(sval_t,sval_t) defined in smatch_extra.h
   function get_address_rl(struct expression *,struct range_list **) in line 143
      protection public
      47 lines of code
      2 parameters
      9 conditional paths
      uses function strip_expr(struct expression *) defined in smatch.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_STRING defined in expression.h
      uses function alloc_rl(sval_t,sval_t) defined in smatch_extra.h
      uses enumvalue EXPR_PREOP defined in expression.h
      uses variable expression::op defined in expression.h
      uses variable expression::unop defined in expression.h
      uses enumvalue EXPR_SYMBOL defined in expression.h
      uses function where_allocated_rl(struct symbol *) defined in smatch_address.c
      uses variable expression::symbol defined in expression.h
      uses enumvalue EXPR_DEREF defined in expression.h
      uses variable offset defined in sm_implied10.c
      uses function get_member_offset(struct expression *) defined in smatch_address.c
      uses function get_absolute_rl(struct expression *,struct range_list **) defined in smatch_extra.h
      uses function add_offset_to_min(struct range_list **,int) defined in smatch_address.c
      uses function is_non_null_array(struct expression *) defined in smatch_address.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/smatch_annotate.c
module smatch_annotate.c
   function param_caps_return(struct expression *,void *,struct range_list **) in line 26
      protection public
      11 lines of code
      3 parameters
      2 conditional paths
      uses function get_argument_from_call_expr(struct expression_list *,int) defined in smatch.h
      uses variable expression::args defined in expression.h
      uses function get_implied_rl(struct expression *,struct range_list **) defined in smatch_extra.h
      uses function rl_max(struct range_list *) defined in smatch_extra.h
      uses function alloc_rl(sval_t,sval_t) defined in smatch_extra.h
      uses function sval_type_val(struct symbol *,long long) defined in smatch.h
      uses function rl_type(struct range_list *) defined in smatch_extra.h
   function register_annotate(int) in line 38
      protection public
      10 lines of code
      1 parameters
      1 conditional paths
      uses function add_implied_return_hook(const char *,implied_return_hook *,void *) defined in smatch.h
      uses function param_caps_return(struct expression *,void *,struct range_list **) defined in smatch_annotate.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/smatch_auto_copy.c
module smatch_auto_copy.c
   variable my_id in line 21
      protection public
   variable auto_copy in line 23
      protection public
   function set_auto_copy(int) in line 25
      protection public
      8 lines of code
      1 parameters
      2 conditional paths
      uses variable num_checks defined in smatch.c
      uses function printf(char *,...) defined in test-be.c
      uses variable auto_copy defined in smatch_auto_copy.c
   function match_assign(struct expression *) in line 34
      protection public
      37 lines of code
      1 parameters
      9 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses function expr_to_var_sym(struct expression *,struct symbol **) defined in smatch.h
      uses variable expression::left defined in expression.h
      uses variable expression::right defined in expression.h
      uses macro definition FOR_EACH_SM defined in avl.h
      uses function __get_cur_stree(void) defined in smatch.h
      uses variable sm_state::owner defined in smatch.h
      uses variable num_checks defined in smatch.c
      uses variable auto_copy defined in smatch_auto_copy.c
      uses variable sm_state::sym defined in smatch.h
      uses variable sm_state::name defined in smatch.h
      uses macro definition add_ptr_list defined in ptrlist.h
      uses macro definition END_FOR_EACH_SM defined in avl.h
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses function set_state(int,const char *,struct symbol *,struct smatch_state *) defined in smatch.h
      uses variable sm_state::state defined in smatch.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses function free_slist(struct state_list **) defined in smatch_slist.c
      uses function free_string(char *) defined in smatch.h
   function register_auto_copy(int) in line 72
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses variable my_id defined in smatch_auto_copy.c
      uses variable auto_copy defined in smatch_auto_copy.c
      uses function malloc(int) defined in sm_buf_size2.c
      uses variable num_checks defined in smatch.c
      uses function memset(void *,int,int) defined in check_byte_count-ice.c
      uses function add_hook(void *,enum hook_type) defined in smatch.h
      uses function match_assign(struct expression *) defined in smatch_auto_copy.c
      uses enumvalue ASSIGNMENT_HOOK defined in smatch.h
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/smatch_buf_comparison.c
module smatch_buf_comparison.c
   variable size_id in line 28
      protection public
   variable link_id in line 29
      protection public
   function unmatched_state(struct sm_state *) in line 40
      protection public
      12 lines of code
      1 parameters
      3 conditional paths
      uses variable sm_state::state defined in smatch.h
      uses variable smatch_state::data defined in smatch.h
      uses variable undefined defined in smatch.h
      uses function get_implied_value(struct expression *,sval_t *) defined in smatch.h
      uses variable sval_t::value defined in smatch.h
   function match_modify(struct sm_state *,struct expression *) in line 53
      protection public
      9 lines of code
      2 parameters
      2 conditional paths
      uses variable sm_state::state defined in smatch.h
      uses variable smatch_state::data defined in smatch.h
      uses function set_state_expr(int,struct expression *,struct smatch_state *) defined in smatch.h
      uses variable size_id defined in smatch_buf_comparison.c
      uses variable undefined defined in smatch.h
   function alloc_expr_state(struct expression *) in line 63
      protection public
      13 lines of code
      1 parameters
      1 conditional paths
      uses variable name defined in smatch_type.c
      uses function strip_expr(struct expression *) defined in smatch.h
      uses function expr_to_str(struct expression *) defined in smatch.h
      uses variable smatch_state::name defined in smatch.h
      uses function alloc_sname(const char *) defined in smatch_slist.c
      uses function free_string(char *) defined in smatch.h
      uses variable smatch_state::data defined in smatch.h
   function bytes_per_element(struct expression *) in line 77
      protection public
      14 lines of code
      1 parameters
      3 conditional paths
      uses function get_type(struct expression *) defined in smatch.h
      uses enumvalue SYM_PTR defined in symbol.h
      uses enumvalue SYM_ARRAY defined in symbol.h
      uses function type_bytes(struct symbol *) defined in smatch.h
   function db_save_type_links(struct expression *,struct expression *) in line 92
      protection public
      9 lines of code
      2 parameters
      2 conditional paths
      uses function get_data_info_name(struct expression *) defined in smatch.h
      uses function sql_insert_data_info(struct expression *,int,const char *) defined in smatch.h
      uses enumvalue ARRAY_LEN defined in smatch.h
   function match_alloc(const char *,struct expression *,void *) in line 102
      protection public
      33 lines of code
      3 parameters
      5 conditional paths
      uses variable pointer defined in sm_user_data1.c
      uses function strip_expr(struct expression *) defined in smatch.h
      uses variable expression::left defined in expression.h
      uses variable expression::right defined in expression.h
      uses function get_argument_from_call_expr(struct expression_list *,int) defined in smatch.h
      uses variable expression::args defined in expression.h
      uses enumvalue EXPR_BINOP defined in expression.h
      uses function get_implied_value(struct expression *,sval_t *) defined in smatch.h
      uses variable sval_t::value defined in smatch.h
      uses function bytes_per_element(struct expression *) defined in smatch_buf_comparison.c
      uses function db_save_type_links(struct expression *,struct expression *) defined in smatch_buf_comparison.c
      uses function set_state_expr(int,struct expression *,struct smatch_state *) defined in smatch.h
      uses variable size_id defined in smatch_buf_comparison.c
      uses function alloc_expr_state(struct expression *) defined in smatch_buf_comparison.c
      uses variable link_id defined in smatch_buf_comparison.c
   function match_calloc(const char *,struct expression *,void *) in line 136
      protection public
      19 lines of code
      3 parameters
      3 conditional paths
      uses variable pointer defined in sm_user_data1.c
      uses function strip_expr(struct expression *) defined in smatch.h
      uses variable expression::left defined in expression.h
      uses variable expression::right defined in expression.h
      uses function get_argument_from_call_expr(struct expression_list *,int) defined in smatch.h
      uses variable expression::args defined in expression.h
      uses function get_implied_value(struct expression *,sval_t *) defined in smatch.h
      uses variable sval_t::value defined in smatch.h
      uses function bytes_per_element(struct expression *) defined in smatch_buf_comparison.c
      uses function db_save_type_links(struct expression *,struct expression *) defined in smatch_buf_comparison.c
      uses function set_state_expr(int,struct expression *,struct smatch_state *) defined in smatch.h
      uses variable size_id defined in smatch_buf_comparison.c
      uses function alloc_expr_state(struct expression *) defined in smatch_buf_comparison.c
      uses variable link_id defined in smatch_buf_comparison.c
   function get_size_variable(struct expression *) in line 156
      protection public
      9 lines of code
      1 parameters
      2 conditional paths
      uses function get_state_expr(int,struct expression *) defined in smatch.h
      uses variable size_id defined in smatch_buf_comparison.c
      uses variable buf defined in sm_fake_assignment.c
      uses variable smatch_state::data defined in smatch.h
      uses macro definition NULL defined in sm_implied3.c
   function array_check(struct expression *) in line 166
      protection public
      25 lines of code
      1 parameters
      4 conditional paths
      uses variable offset defined in sm_implied10.c
      uses function strip_expr(struct expression *) defined in smatch.h
      uses function is_array(struct expression *) defined in smatch.h
      uses function get_array_base(struct expression *) defined in smatch.h
      uses function get_size_variable(struct expression *) defined in smatch_buf_comparison.c
      uses function get_array_offset(struct expression *) defined in smatch.h
      uses function possible_comparison(struct expression *,int,struct expression *) defined in smatch.h
      uses enumvalue SPECIAL_EQUAL defined in token.h
      uses function expr_to_str(struct expression *) defined in smatch.h
      uses macro definition sm_msg defined in smatch.h
      uses function free_string(char *) defined in smatch.h
   function db_limitter_callback(void *,int,char **,char **) in line 197
      protection public
      13 lines of code
      4 parameters
      2 conditional paths
      uses function info(struct position,const char *,...) defined in lib.c
   function vsl_to_data_info_name(const char *,struct var_sym_list *) in line 211
      protection public
      36 lines of code
      2 parameters
      11 conditional paths
      uses variable buf defined in sm_fake_assignment.c
      uses variable p defined in cond_expr2.c
      uses function ptr_list_size(struct ptr_list *) defined in ptrlist.c
      uses macro definition NULL defined in sm_implied3.c
      uses function get_real_base_type(struct symbol *) defined in smatch.h
      uses variable var_sym::sym defined in smatch.h
      uses enumvalue SYM_PTR defined in symbol.h
      uses enumvalue SYM_STRUCT defined in symbol.h
      uses variable db_info::name defined in smatch_buf_comparison.c
      uses function snprintf(char *,int,char *,char *) defined in sm_overflow6.c
      uses function alloc_sname(const char *) defined in smatch_slist.c
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::modifiers defined in struct.c
      uses macro definition MOD_TOPLEVEL defined in symbol.h
      uses macro definition MOD_STATIC defined in symbol.h
   function db_var_is_array_limit(struct expression *,const char *,struct var_sym_list *) in line 248
      protection public
      16 lines of code
      3 parameters
      2 conditional paths
      uses function get_data_info_name(struct expression *) defined in smatch.h
      uses variable db_info::name defined in smatch_buf_comparison.c
      uses function vsl_to_data_info_name(const char *,struct var_sym_list *) defined in smatch_buf_comparison.c
      uses macro definition run_sql defined in smatch.h
      uses function db_limitter_callback(void *,int,char **,char **) defined in smatch_buf_comparison.c
      uses enumvalue ARRAY_LEN defined in smatch.h
      uses variable db_info::ret defined in smatch_buf_comparison.c
   function known_access_ok_comparison(struct expression *) in line 265
      protection public
      18 lines of code
      1 parameters
      3 conditional paths
      uses variable offset defined in sm_implied10.c
      uses function get_array_base(struct expression *) defined in smatch.h
      uses function get_size_variable(struct expression *) defined in smatch_buf_comparison.c
      uses function get_array_offset(struct expression *) defined in smatch.h
      uses function get_comparison(struct expression *,struct expression *) defined in smatch.h
      uses enumvalue SPECIAL_UNSIGNED_GT defined in token.h
   function known_access_ok_numbers(struct expression *) in line 284
      protection public
      19 lines of code
      1 parameters
      3 conditional paths
      uses variable offset defined in sm_implied10.c
      uses function get_array_base(struct expression *) defined in smatch.h
      uses function get_array_offset(struct expression *) defined in smatch.h
      uses function get_array_size(struct expression *) defined in smatch.h
      uses function get_absolute_max(struct expression *,sval_t *) defined in smatch.h
      uses variable sval_t::uvalue defined in smatch.h
   function array_check_data_info(struct expression *) in line 304
      protection public
      54 lines of code
      1 parameters
      12 conditional paths
      uses variable offset defined in sm_implied10.c
      uses macro definition NULL defined in sm_implied3.c
      uses function strip_expr(struct expression *) defined in smatch.h
      uses function is_array(struct expression *) defined in smatch.h
      uses function known_access_ok_numbers(struct expression *) defined in smatch_buf_comparison.c
      uses function known_access_ok_comparison(struct expression *) defined in smatch_buf_comparison.c
      uses function get_array_base(struct expression *) defined in smatch.h
      uses function get_array_offset(struct expression *) defined in smatch.h
      uses function expr_to_var(struct expression *) defined in smatch.h
      uses function get_all_possible_equal_comparisons(struct expression *) defined in smatch.h
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable sm_state::state defined in smatch.h
      uses variable smatch_state::data defined in smatch.h
      uses variable compare_data::var1 defined in smatch.h
      uses function db_var_is_array_limit(struct expression *,const char *,struct var_sym_list *) defined in smatch_buf_comparison.c
      uses variable compare_data::var2 defined in smatch.h
      uses variable compare_data::vsl2 defined in smatch.h
      uses variable compare_data::vsl1 defined in smatch.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses function expr_to_str(struct expression *) defined in smatch.h
      uses macro definition sm_msg defined in smatch.h
      uses function free_string(char *) defined in smatch.h
      uses function free_slist(struct state_list **) defined in smatch_slist.c
   function add_allocation_function(const char *,void *,int) in line 359
      protection public
      4 lines of code
      3 parameters
      1 conditional paths
      uses function add_function_assign_hook(const char *,func_hook *,void *) defined in smatch.h
      uses macro definition func defined in preprocessor1.c
      uses variable param defined in smatch_parse_call_math.c
   function buf_size_param_comparison(struct expression *,struct expression_list *) in line 364
      protection public
      24 lines of code
      2 parameters
      4 conditional paths
      uses variable buf defined in sm_fake_assignment.c
      uses function get_size_variable(struct expression *) defined in smatch_buf_comparison.c
      uses macro definition NULL defined in sm_implied3.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable expression::args defined in expression.h
      uses function expr_equiv(struct expression *,struct expression *) defined in smatch.h
      uses function snprintf(char *,int,char *,char *) defined in sm_overflow6.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function match_call(struct expression *) in line 389
      protection public
      17 lines of code
      1 parameters
      3 conditional paths
      uses variable param defined in smatch_parse_call_math.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable expression::args defined in expression.h
      uses function is_pointer(struct expression *) defined in smatch.h
      uses function buf_size_param_comparison(struct expression *,struct expression_list *) defined in smatch_buf_comparison.c
      uses function sql_insert_caller_info(struct expression *,int,int,const char *,const char *) defined in smatch.h
      uses enumvalue ARRAY_LEN defined in smatch.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function get_param(int,char **,struct symbol **) in line 407
      protection public
      27 lines of code
      3 parameters
      3 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable cur_func_sym defined in smatch.h
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::base_type defined in struct.c
      uses variable symbol::arguments defined in struct.c
      uses variable param defined in smatch_parse_call_math.c
      uses variable db_info::name defined in smatch_buf_comparison.c
      uses variable sym defined in smatch_type.c
      uses macro definition TRUE defined in smatch.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses macro definition FALSE defined in smatch.h
   function set_param_compare(const char *,struct symbol *,char *,char *) in line 435
      protection public
      24 lines of code
      4 parameters
      4 conditional paths
      uses variable param defined in smatch_parse_call_math.c
      uses macro definition NULL defined in sm_implied3.c
      uses function get_param(int,char **,struct symbol **) defined in smatch_buf_comparison.c
      uses function symbol_expression(struct symbol *) defined in smatch_expressions.c
      uses function set_state_expr(int,struct expression *,struct smatch_state *) defined in smatch.h
      uses variable size_id defined in smatch_buf_comparison.c
      uses function alloc_expr_state(struct expression *) defined in smatch_buf_comparison.c
      uses variable link_id defined in smatch_buf_comparison.c
   function munge_start_states(struct statement *) in line 460
      protection public
      28 lines of code
      1 parameters
      3 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses macro definition FOR_EACH_MY_SM defined in avl.h
      uses variable size_id defined in smatch_buf_comparison.c
      uses function __get_cur_stree(void) defined in smatch.h
      uses variable sm_state::state defined in smatch.h
      uses variable merged defined in smatch.h
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable sm_state::possible defined in smatch.h
      uses variable undefined defined in smatch.h
      uses macro definition add_ptr_list defined in ptrlist.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses macro definition END_FOR_EACH_SM defined in avl.h
      uses function set_state(int,const char *,struct symbol *,struct smatch_state *) defined in smatch.h
      uses variable sm_state::name defined in smatch.h
      uses variable sm_state::sym defined in smatch.h
      uses function free_slist(struct state_list **) defined in smatch_slist.c
   function register_buf_comparison(int) in line 489
      protection public
      33 lines of code
      1 parameters
      2 conditional paths
      uses variable size_id defined in smatch_buf_comparison.c
      uses function add_unmatched_state_hook(int,unmatched_func_t *) defined in smatch.h
      uses function unmatched_state(struct sm_state *) defined in smatch_buf_comparison.c
      uses function add_allocation_function(const char *,void *,int) defined in smatch_buf_comparison.c
      uses function match_alloc(const char *,struct expression *,void *) defined in smatch_buf_comparison.c
      uses variable option_project defined in smatch.c
      uses enumvalue PROJ_KERNEL defined in smatch.h
      uses function match_calloc(const char *,struct expression *,void *) defined in smatch_buf_comparison.c
      uses function add_hook(void *,enum hook_type) defined in smatch.h
      uses function array_check(struct expression *) defined in smatch_buf_comparison.c
      uses enumvalue OP_HOOK defined in smatch.h
      uses function array_check_data_info(struct expression *) defined in smatch_buf_comparison.c
      uses function match_call(struct expression *) defined in smatch_buf_comparison.c
      uses enumvalue FUNCTION_CALL_HOOK defined in smatch.h
      uses function select_caller_info_hook(void(*)(const char *name, struct symbol *sym, char *key, char *value),int) defined in smatch.h
      uses function set_param_compare(const char *,struct symbol *,char *,char *) defined in smatch_buf_comparison.c
      uses enumvalue ARRAY_LEN defined in smatch.h
      uses function munge_start_states(struct statement *) defined in smatch_buf_comparison.c
      uses enumvalue AFTER_DEF_HOOK defined in smatch.h
   function register_buf_comparison_links(int) in line 523
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable link_id defined in smatch_buf_comparison.c
      uses function add_modification_hook(int,modification_hook *) defined in smatch.h
      uses function match_modify(struct sm_state *,struct expression *) defined in smatch_buf_comparison.c
   variable db_info::name in line 193
      protection public
   variable db_info::ret in line 194
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/smatch_buf_size.c
module smatch_buf_size.c
   macro definition UNKNOWN_SIZE in line 26
      protection public
   variable my_size_id in line 28
      protection public
   variable allocation_funcs in line 32
      protection public
   variable db_size_rl in line 190
      protection public
   function DEFINE_HASHTABLE_INSERT(insert_func,char,int) in line 30
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function DEFINE_HASHTABLE_SEARCH(search_func,char,int) in line 31
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function get_fn_name(struct expression *) in line 34
      protection public
      8 lines of code
      1 parameters
      3 conditional paths
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_CALL defined in expression.h
      uses macro definition NULL defined in sm_implied3.c
      uses variable expression::fn defined in expression.h
      uses enumvalue EXPR_SYMBOL defined in expression.h
      uses function expr_to_var(struct expression *) defined in smatch.h
   function is_allocation_function(struct expression *) in line 43
      protection public
      13 lines of code
      1 parameters
      3 conditional paths
      uses macro definition func defined in preprocessor1.c
      uses function get_fn_name(struct expression *) defined in smatch_buf_size.c
      uses variable allocation_funcs defined in smatch_buf_size.c
      uses function free_string(char *) defined in smatch.h
   function add_allocation_function(const char *,void *,int) in line 57
      protection public
      5 lines of code
      3 parameters
      1 conditional paths
      uses variable allocation_funcs defined in smatch_buf_size.c
      uses macro definition func defined in preprocessor1.c
      uses function add_function_assign_hook(const char *,func_hook *,void *) defined in smatch.h
      uses variable param defined in smatch_parse_call_math.c
   function estate_to_size(struct smatch_state *) in line 63
      protection public
      9 lines of code
      1 parameters
      2 conditional paths
      uses function estate_rl(struct smatch_state *) defined in smatch_estate.c
      uses function estate_max(struct smatch_state *) defined in smatch_estate.c
      uses variable sval_t::value defined in smatch.h
   function size_to_estate(int) in line 73
      protection public
      9 lines of code
      1 parameters
      1 conditional paths
      uses variable sval_t::type defined in smatch.h
      uses variable sval_t::value defined in smatch.h
      uses function alloc_estate_sval(sval_t) defined in smatch_estate.c
   function size_to_rl(int) in line 83
      protection public
      9 lines of code
      1 parameters
      1 conditional paths
      uses variable sval_t::type defined in smatch.h
      uses variable sval_t::value defined in smatch.h
      uses function alloc_rl(sval_t,sval_t) defined in smatch_extra.h
   function unmatched_size_state(struct sm_state *) in line 93
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function size_to_estate(int) defined in smatch_buf_size.c
      uses macro definition UNKNOWN_SIZE defined in smatch_buf_size.c
   function set_size_undefined(struct sm_state *,struct expression *) in line 98
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function set_state(int,const char *,struct symbol *,struct smatch_state *) defined in smatch.h
      uses variable sm_state::owner defined in smatch.h
      uses variable sm_state::name defined in smatch.h
      uses variable sm_state::sym defined in smatch.h
      uses function size_to_estate(int) defined in smatch_buf_size.c
      uses macro definition UNKNOWN_SIZE defined in smatch_buf_size.c
   function merge_size_func(struct smatch_state *,struct smatch_state *) in line 103
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function merge_estates(struct smatch_state *,struct smatch_state *) defined in smatch_estate.c
   function set_param_buf_size(const char *,struct symbol *,char *,char *) in line 108
      protection public
      17 lines of code
      4 parameters
      3 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses function snprintf(char *,int,char *,char *) defined in sm_overflow6.c
      uses variable name defined in smatch_type.c
      uses function str_to_rl(struct symbol *,char *,struct range_list **) defined in smatch_extra.h
      uses function is_whole_rl(struct range_list *) defined in smatch_extra.h
      uses function alloc_estate_rl(struct range_list *) defined in smatch_estate.c
      uses function set_state(int,const char *,struct symbol *,struct smatch_state *) defined in smatch.h
      uses variable my_size_id defined in smatch_buf_size.c
      uses variable sym defined in smatch_type.c
   function bytes_per_element(struct expression *) in line 126
      protection public
      18 lines of code
      1 parameters
      5 conditional paths
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_STRING defined in expression.h
      uses function get_type(struct expression *) defined in smatch.h
      uses enumvalue SYM_PTR defined in symbol.h
      uses enumvalue SYM_ARRAY defined in symbol.h
      uses function type_bytes(struct symbol *) defined in smatch.h
   function bytes_to_elements(struct expression *,int) in line 145
      protection public
      9 lines of code
      2 parameters
      2 conditional paths
      uses function bytes_per_element(struct expression *) defined in smatch_buf_size.c
   function elements_to_bytes(struct expression *,int) in line 155
      protection public
      7 lines of code
      2 parameters
      1 conditional paths
      uses function bytes_per_element(struct expression *) defined in smatch_buf_size.c
   function get_initializer_size(struct expression *) in line 163
      protection public
      26 lines of code
      1 parameters
      6 conditional paths
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_STRING defined in expression.h
      uses variable expression::string defined in expression.h
      uses variable string::length defined in token.h
      uses enumvalue EXPR_INITIALIZER defined in expression.h
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable expression::expr_list defined in expression.h
      uses enumvalue EXPR_INDEX defined in expression.h
      uses variable expression::idx_to defined in expression.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses enumvalue EXPR_SYMBOL defined in expression.h
      uses function get_array_size(struct expression *) defined in smatch_buf_size.c
   function db_size_callback(void *,int,char **,char **) in line 191
      protection public
      12 lines of code
      4 parameters
      2 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses variable db_size_rl defined in smatch_buf_size.c
      uses function str_to_rl(struct symbol *,char *,struct range_list **) defined in smatch_extra.h
      uses function rl_union(struct range_list *,struct range_list *) defined in smatch_extra.h
   function size_from_db(struct expression *) in line 204
      protection public
      29 lines of code
      1 parameters
      5 conditional paths
      uses variable name defined in smatch_type.c
      uses function get_member_name(struct expression *) defined in smatch.h
      uses function is_static(struct expression *) defined in smatch.h
      uses function expr_to_var(struct expression *) defined in smatch.h
      uses variable db_size_rl defined in smatch_buf_size.c
      uses macro definition NULL defined in sm_implied3.c
      uses macro definition run_sql defined in smatch.h
      uses function db_size_callback(void *,int,char **,char **) defined in smatch_buf_size.c
      uses function get_filename(void) defined in smatch.h
   function db_returns_buf_size(struct expression *,int,char *,char *) in line 234
      protection public
      13 lines of code
      4 parameters
      3 conditional paths
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_ASSIGNMENT defined in expression.h
      uses function strip_expr(struct expression *) defined in smatch.h
      uses variable expression::right defined in expression.h
      uses function parse_call_math(struct expression *,char *,sval_t *) defined in smatch.h
      uses function set_state_expr(int,struct expression *,struct smatch_state *) defined in smatch.h
      uses variable my_size_id defined in smatch_buf_size.c
      uses variable expression::left defined in expression.h
      uses function size_to_estate(int) defined in smatch_buf_size.c
      uses variable sval_t::value defined in smatch.h
   function get_real_array_size(struct expression *) in line 248
      protection public
      25 lines of code
      1 parameters
      7 conditional paths
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_BINOP defined in expression.h
      uses function get_type(struct expression *) defined in smatch.h
      uses enumvalue SYM_ARRAY defined in symbol.h
      uses function get_implied_value(struct expression *,sval_t *) defined in smatch.h
      uses variable sval_t::value defined in smatch.h
   function get_size_from_initializer(struct expression *) in line 274
      protection public
      8 lines of code
      1 parameters
      3 conditional paths
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_SYMBOL defined in expression.h
      uses variable expression::symbol defined in expression.h
      uses variable symbol::initializer defined in struct.c
      uses function get_initializer_size(struct expression *) defined in smatch_buf_size.c
   function get_stored_size_bytes(struct expression *) in line 283
      protection public
      9 lines of code
      1 parameters
      2 conditional paths
      uses function get_state_expr(int,struct expression *) defined in smatch.h
      uses variable my_size_id defined in smatch_buf_size.c
      uses macro definition NULL defined in sm_implied3.c
      uses function estate_rl(struct smatch_state *) defined in smatch_estate.c
   function get_bytes_from_address(struct expression *) in line 293
      protection public
      22 lines of code
      1 parameters
      6 conditional paths
      uses variable option_spammy defined in smatch.c
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_PREOP defined in expression.h
      uses variable expression::op defined in expression.h
      uses function get_type(struct expression *) defined in smatch.h
      uses enumvalue SYM_PTR defined in symbol.h
      uses function type_bytes(struct symbol *) defined in smatch.h
   function remove_addr_fluff(struct expression *) in line 316
      protection public
      27 lines of code
      1 parameters
      6 conditional paths
      uses function strip_expr(struct expression *) defined in smatch.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_PREOP defined in expression.h
      uses variable expression::op defined in expression.h
      uses variable expression::unop defined in expression.h
      uses macro definition NULL defined in sm_implied3.c
      uses enumvalue EXPR_BINOP defined in expression.h
      uses function get_value(struct expression *,sval_t *) defined in smatch.h
      uses variable expression::right defined in expression.h
      uses variable sval_t::value defined in smatch.h
      uses variable expression::left defined in expression.h
   function is_last_member_of_struct(struct symbol *,struct ident *) in line 344
      protection public
      16 lines of code
      2 parameters
      3 conditional paths
      uses macro definition FOR_EACH_PTR_REVERSE defined in ptrlist.h
      uses variable sym defined in smatch_type.c
      uses variable symbol::symbol_list defined in struct.c
      uses variable symbol::ident defined in struct.c
      uses variable member defined in smdb.py
      uses macro definition END_FOR_EACH_PTR_REVERSE defined in ptrlist.h
   function last_member_is_resizable(struct symbol *) in line 361
      protection public
      24 lines of code
      1 parameters
      6 conditional paths
      uses variable sym defined in smatch_type.c
      uses variable symbol::symbol_list defined in struct.c
      uses variable symbol::ident defined in struct.c
      uses function get_real_base_type(struct symbol *) defined in smatch.h
      uses enumvalue SYM_STRUCT defined in symbol.h
      uses enumvalue SYM_ARRAY defined in symbol.h
      uses function get_implied_value(struct expression *,sval_t *) defined in smatch.h
      uses variable sval_t::value defined in smatch.h
   function get_stored_size_end_struct_bytes(struct expression *) in line 386
      protection public
      38 lines of code
      1 parameters
      11 conditional paths
      uses variable sym defined in smatch_type.c
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_BINOP defined in expression.h
      uses enumvalue EXPR_PREOP defined in expression.h
      uses variable expression::op defined in expression.h
      uses function strip_parens(struct expression *) defined in smatch.h
      uses variable expression::unop defined in expression.h
      uses function expr_to_sym(struct expression *) defined in smatch.h
      uses variable symbol::ident defined in struct.c
      uses function type_bytes(struct symbol *) defined in smatch.h
      uses variable symbol::type defined in struct.c
      uses enumvalue SYM_NODE defined in symbol.h
      uses function get_real_base_type(struct symbol *) defined in smatch.h
      uses enumvalue SYM_PTR defined in symbol.h
      uses enumvalue SYM_STRUCT defined in symbol.h
      uses function is_last_member_of_struct(struct symbol *,struct ident *) defined in smatch_buf_size.c
      uses variable expression::member defined in expression.h
      uses function last_member_is_resizable(struct symbol *) defined in smatch_buf_size.c
      uses function get_state(int,const char *,struct symbol *) defined in smatch.h
      uses variable my_size_id defined in smatch_buf_size.c
      uses variable ident::name defined in token.h
      uses function estate_to_size(struct smatch_state *) defined in smatch_buf_size.c
      uses function get_type(struct expression *) defined in smatch.h
   function alloc_int_rl(int) in line 425
      protection public
      9 lines of code
      1 parameters
      1 conditional paths
      uses variable sval_t::type defined in smatch.h
      uses variable symbol::value defined in struct.c
      uses function alloc_rl(sval_t,sval_t) defined in smatch_extra.h
   function get_array_size_bytes_rl(struct expression *) in line 435
      protection public
      65 lines of code
      1 parameters
      15 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses function remove_addr_fluff(struct expression *) defined in smatch_buf_size.c
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_STRING defined in expression.h
      uses function alloc_int_rl(int) defined in smatch_buf_size.c
      uses variable expression::string defined in expression.h
      uses variable string::length defined in token.h
      uses enumvalue EXPR_BINOP defined in expression.h
      uses variable expression::op defined in expression.h
      uses variable offset defined in sm_implied10.c
      uses function get_implied_value(struct expression *,sval_t *) defined in smatch.h
      uses variable expression::right defined in expression.h
      uses function get_type(struct expression *) defined in smatch.h
      uses variable expression::left defined in expression.h
      uses enumvalue SYM_ARRAY defined in symbol.h
      uses enumvalue SYM_PTR defined in symbol.h
      uses function get_real_base_type(struct symbol *) defined in smatch.h
      uses function type_bytes(struct symbol *) defined in smatch.h
      uses function get_array_size_bytes(struct expression *) defined in smatch_buf_size.c
      uses function get_real_array_size(struct expression *) defined in smatch_buf_size.c
      uses function elements_to_bytes(struct expression *,int) defined in smatch_buf_size.c
      uses function get_stored_size_bytes(struct expression *) defined in smatch_buf_size.c
      uses function get_stored_size_end_struct_bytes(struct expression *) defined in smatch_buf_size.c
      uses function get_size_from_initializer(struct expression *) defined in smatch_buf_size.c
      uses function get_bytes_from_address(struct expression *) defined in smatch_buf_size.c
      uses function size_from_db(struct expression *) defined in smatch_buf_size.c
   function get_array_size_bytes(struct expression *) in line 501
      protection public
      12 lines of code
      1 parameters
      3 conditional paths
      uses function get_array_size_bytes_rl(struct expression *) defined in smatch_buf_size.c
      uses function rl_to_sval(struct range_list *,sval_t *) defined in smatch_extra.h
      uses variable sval_t::uvalue defined in smatch.h
      uses variable sval_t::value defined in smatch.h
   function get_array_size_bytes_max(struct expression *) in line 514
      protection public
      16 lines of code
      1 parameters
      4 conditional paths
      uses function get_array_size_bytes_rl(struct expression *) defined in smatch_buf_size.c
      uses function rl_min(struct range_list *) defined in smatch_extra.h
      uses variable sval_t::value defined in smatch.h
      uses function rl_max(struct range_list *) defined in smatch_extra.h
      uses variable sval_t::uvalue defined in smatch.h
   function get_array_size_bytes_min(struct expression *) in line 531
      protection public
      21 lines of code
      1 parameters
      5 conditional paths
      uses function get_array_size_bytes_rl(struct expression *) defined in smatch_buf_size.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable data_range::min defined in smatch.h
      uses variable sval_t::value defined in smatch.h
      uses variable data_range::max defined in smatch.h
      uses variable sval_t::uvalue defined in smatch.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function get_array_size(struct expression *) in line 553
      protection public
      6 lines of code
      1 parameters
      2 conditional paths
      uses function bytes_to_elements(struct expression *,int) defined in smatch_buf_size.c
      uses function get_array_size_bytes_max(struct expression *) defined in smatch_buf_size.c
   function strip_ampersands(struct expression *) in line 560
      protection public
      13 lines of code
      1 parameters
      4 conditional paths
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_PREOP defined in expression.h
      uses variable expression::op defined in expression.h
      uses function get_type(struct expression *) defined in smatch.h
      uses variable expression::unop defined in expression.h
      uses enumvalue SYM_ARRAY defined in symbol.h
   function info_record_alloction(struct expression *,struct range_list *) in line 574
      protection public
      19 lines of code
      2 parameters
      5 conditional paths
      uses variable name defined in smatch_type.c
      uses variable option_info defined in smatch.c
      uses function get_member_name(struct expression *) defined in smatch.h
      uses function is_static(struct expression *) defined in smatch.h
      uses function expr_to_var(struct expression *) defined in smatch.h
      uses function is_whole_rl(struct range_list *) defined in smatch_extra.h
      uses function sql_insert_function_type_size(const char *,const char *) defined in smatch.h
      uses function show_rl(struct range_list *) defined in smatch_extra.h
      uses function free_string(char *) defined in smatch.h
   function store_alloc(struct expression *,struct range_list *) in line 594
      protection public
      22 lines of code
      2 parameters
      6 conditional paths
      uses function clone_rl(struct range_list *) defined in smatch_extra.h
      uses function set_state_expr(int,struct expression *,struct smatch_state *) defined in smatch.h
      uses variable my_size_id defined in smatch_buf_size.c
      uses function alloc_estate_rl(struct range_list *) defined in smatch_estate.c
      uses function get_type(struct expression *) defined in smatch.h
      uses enumvalue SYM_PTR defined in symbol.h
      uses function get_real_base_type(struct symbol *) defined in smatch.h
      uses enumvalue SYM_BASETYPE defined in symbol.h
      uses function info_record_alloction(struct expression *,struct range_list *) defined in smatch_buf_size.c
   function match_array_assignment(struct expression *) in line 617
      protection public
      39 lines of code
      1 parameters
      7 conditional paths
      uses variable expression::left defined in expression.h
      uses variable expression::right defined in expression.h
      uses variable expression::op defined in expression.h
      uses function strip_expr(struct expression *) defined in smatch.h
      uses function strip_ampersands(struct expression *) defined in smatch_buf_size.c
      uses function is_pointer(struct expression *) defined in smatch.h
      uses function is_allocation_function(struct expression *) defined in smatch_buf_size.c
      uses function get_member_name(struct expression *) defined in smatch.h
      uses function free_string(char *) defined in smatch.h
      uses function get_implied_value(struct expression *,sval_t *) defined in smatch.h
      uses variable sval_t::value defined in smatch.h
      uses function alloc_int_rl(int) defined in smatch_buf_size.c
      uses function get_array_size_bytes_rl(struct expression *) defined in smatch_buf_size.c
      uses function store_alloc(struct expression *,struct range_list *) defined in smatch_buf_size.c
   function match_alloc(const char *,struct expression *,void *) in line 657
      protection public
      13 lines of code
      3 parameters
      1 conditional paths
      uses variable expression::right defined in expression.h
      uses function strip_expr(struct expression *) defined in smatch.h
      uses function get_argument_from_call_expr(struct expression_list *,int) defined in smatch.h
      uses variable expression::args defined in expression.h
      uses function get_absolute_rl(struct expression *,struct range_list **) defined in smatch_extra.h
      uses function cast_rl(struct symbol *,struct range_list *) defined in smatch_extra.h
      uses function store_alloc(struct expression *,struct range_list *) defined in smatch_buf_size.c
      uses variable expression::left defined in expression.h
   function match_calloc(const char *,struct expression *,void *) in line 671
      protection public
      17 lines of code
      3 parameters
      3 conditional paths
      uses variable expression::right defined in expression.h
      uses function strip_expr(struct expression *) defined in smatch.h
      uses function get_argument_from_call_expr(struct expression_list *,int) defined in smatch.h
      uses variable expression::args defined in expression.h
      uses function get_implied_value(struct expression *,sval_t *) defined in smatch.h
      uses function store_alloc(struct expression *,struct range_list *) defined in smatch_buf_size.c
      uses variable expression::left defined in expression.h
      uses function size_to_rl(int) defined in smatch_buf_size.c
      uses variable sval_t::value defined in smatch.h
   function match_page(const char *,struct expression *,void *) in line 689
      protection public
      9 lines of code
      3 parameters
      1 conditional paths
      uses variable sval_t::type defined in smatch.h
      uses variable symbol::value defined in struct.c
      uses function store_alloc(struct expression *,struct range_list *) defined in smatch_buf_size.c
      uses variable expression::left defined in expression.h
      uses function alloc_rl(sval_t,sval_t) defined in smatch_extra.h
   function match_strndup(const char *,struct expression *,void *) in line 699
      protection public
      16 lines of code
      3 parameters
      2 conditional paths
      uses function strip_expr(struct expression *) defined in smatch.h
      uses variable expression::right defined in expression.h
      uses function get_argument_from_call_expr(struct expression_list *,int) defined in smatch.h
      uses variable expression::args defined in expression.h
      uses function get_implied_max(struct expression *,sval_t *) defined in smatch.h
      uses variable sval_t::value defined in smatch.h
      uses function store_alloc(struct expression *,struct range_list *) defined in smatch_buf_size.c
      uses variable expression::left defined in expression.h
      uses function size_to_rl(int) defined in smatch_buf_size.c
   function match_call(struct expression *) in line 716
      protection public
      21 lines of code
      1 parameters
      4 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable expression::args defined in expression.h
      uses function get_type(struct expression *) defined in smatch.h
      uses enumvalue SYM_PTR defined in symbol.h
      uses enumvalue SYM_ARRAY defined in symbol.h
      uses function get_array_size_bytes_rl(struct expression *) defined in smatch_buf_size.c
      uses function is_whole_rl(struct range_list *) defined in smatch_extra.h
      uses function sql_insert_caller_info(struct expression *,int,int,const char *,const char *) defined in smatch.h
      uses enumvalue BUF_SIZE defined in smatch.h
      uses function show_rl(struct range_list *) defined in smatch_extra.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function struct_member_callback(struct expression *,int,char *,struct sm_state *) in line 738
      protection public
      9 lines of code
      4 parameters
      2 conditional paths
      uses variable sm_state::state defined in smatch.h
      uses variable merged defined in smatch.h
      uses variable smatch_state::name defined in smatch.h
      uses function sql_insert_caller_info(struct expression *,int,int,const char *,const char *) defined in smatch.h
      uses enumvalue BUF_SIZE defined in smatch.h
      uses variable param defined in smatch_parse_call_math.c
   function register_buf_size(int) in line 748
      protection public
      44 lines of code
      1 parameters
      3 conditional paths
      uses variable my_size_id defined in smatch_buf_size.c
      uses function add_unmatched_state_hook(int,unmatched_func_t *) defined in smatch.h
      uses function unmatched_size_state(struct sm_state *) defined in smatch_buf_size.c
      uses function select_caller_info_hook(void(*)(const char *name, struct symbol *sym, char *key, char *value),int) defined in smatch.h
      uses function set_param_buf_size(const char *,struct symbol *,char *,char *) defined in smatch_buf_size.c
      uses enumvalue BUF_SIZE defined in smatch.h
      uses function select_return_states_hook(int,return_implies_hook *) defined in smatch.h
      uses function db_returns_buf_size(struct expression *,int,char *,char *) defined in smatch_buf_size.c
      uses variable allocation_funcs defined in smatch_buf_size.c
      uses function add_allocation_function(const char *,void *,int) defined in smatch_buf_size.c
      uses function match_alloc(const char *,struct expression *,void *) defined in smatch_buf_size.c
      uses function match_calloc(const char *,struct expression *,void *) defined in smatch_buf_size.c
      uses variable option_project defined in smatch.c
      uses enumvalue PROJ_KERNEL defined in smatch.h
      uses function match_page(const char *,struct expression *,void *) defined in smatch_buf_size.c
      uses function match_strndup(const char *,struct expression *,void *) defined in smatch_buf_size.c
      uses function add_modification_hook(int,modification_hook *) defined in smatch.h
      uses function set_size_undefined(struct sm_state *,struct expression *) defined in smatch_buf_size.c
      uses function add_merge_hook(int,merge_func_t *) defined in smatch.h
      uses function merge_size_func(struct smatch_state *,struct smatch_state *) defined in smatch_buf_size.c
   function register_buf_size_late(int) in line 793
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses function add_hook(void *,enum hook_type) defined in smatch.h
      uses function match_array_assignment(struct expression *) defined in smatch_buf_size.c
      uses enumvalue ASSIGNMENT_HOOK defined in smatch.h
      uses function match_call(struct expression *) defined in smatch_buf_size.c
      uses enumvalue FUNCTION_CALL_HOOK defined in smatch.h
      uses function add_member_info_callback(int,void(*)(struct expression *call, int param, char *printed_name, struct sm_state *sm)) defined in smatch.h
      uses variable my_size_id defined in smatch_buf_size.c
      uses function struct_member_callback(struct expression *,int,char *,struct sm_state *) defined in smatch_buf_size.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/smatch_capped.c
module smatch_capped.c
   variable my_id in line 31
      protection public
   function STATE(capped) in line 33
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function STATE(uncapped) in line 34
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function unmatched_state(struct sm_state *) in line 36
      protection public
      9 lines of code
      1 parameters
      2 conditional paths
      uses function get_state(int,const char *,struct symbol *) defined in smatch.h
      uses macro definition SMATCH_EXTRA defined in smatch.h
      uses variable sm_state::name defined in smatch.h
      uses variable sm_state::sym defined in smatch.h
      uses function estate_is_whole(struct smatch_state *) defined in smatch_estate.c
   function is_capped_macro(struct expression *) in line 46
      protection public
      17 lines of code
      1 parameters
      5 conditional paths
      uses variable name defined in smatch_type.c
      uses function get_macro_name(struct position) defined in macro_table.c
      uses variable expression::pos defined in expression.h
   function is_capped(struct expression *) in line 64
      protection public
      45 lines of code
      1 parameters
      15 conditional paths
      uses function strip_expr(struct expression *) defined in smatch.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_POSTOP defined in expression.h
      uses variable expression::unop defined in expression.h
      uses function get_hard_max(struct expression *,sval_t *) defined in smatch.h
      uses function is_capped_macro(struct expression *) defined in smatch_capped.c
      uses enumvalue EXPR_BINOP defined in expression.h
      uses variable expression::op defined in expression.h
      uses enumvalue SPECIAL_RIGHTSHIFT defined in token.h
      uses variable expression::right defined in expression.h
      uses variable expression::left defined in expression.h
      uses function get_absolute_rl(struct expression *,struct range_list **) defined in smatch_extra.h
      uses function sval_is_negative(sval_t) defined in smatch.h
      uses function rl_min(struct range_list *) defined in smatch_extra.h
      uses function get_state_expr(int,struct expression *) defined in smatch.h
      uses variable my_id defined in smatch_capped.c
   function is_capped_var_sym(const char *,struct symbol *) in line 110
      protection public
      6 lines of code
      2 parameters
      2 conditional paths
      uses function get_state(int,const char *,struct symbol *) defined in smatch.h
      uses variable my_id defined in smatch_capped.c
      uses variable name defined in smatch_type.c
      uses variable sym defined in smatch_type.c
   function set_param_capped_data(const char *,struct symbol *,char *,char *) in line 117
      protection public
      9 lines of code
      4 parameters
      2 conditional paths
      uses function snprintf(char *,int,char *,char *) defined in sm_overflow6.c
      uses variable name defined in smatch_type.c
      uses function set_state(int,const char *,struct symbol *,struct smatch_state *) defined in smatch.h
      uses variable my_id defined in smatch_capped.c
      uses variable sym defined in smatch_type.c
   function match_condition(struct expression *) in line 127
      protection public
      42 lines of code
      1 parameters
      12 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_COMPARE defined in expression.h
      uses variable expression::op defined in expression.h
      uses enumvalue SPECIAL_LTE defined in token.h
      uses enumvalue SPECIAL_UNSIGNED_LT defined in token.h
      uses enumvalue SPECIAL_UNSIGNED_LTE defined in token.h
      uses enumvalue SPECIAL_GTE defined in token.h
      uses enumvalue SPECIAL_UNSIGNED_GT defined in token.h
      uses enumvalue SPECIAL_UNSIGNED_GTE defined in token.h
      uses enumvalue SPECIAL_EQUAL defined in token.h
      uses enumvalue SPECIAL_NOTEQUAL defined in token.h
      uses function set_true_false_states_expr(int,struct expression *,struct smatch_state *,struct smatch_state *) defined in smatch.h
      uses variable my_id defined in smatch_capped.c
      uses variable expression::left defined in expression.h
      uses variable expression::right defined in expression.h
   function match_assign(struct expression *) in line 170
      protection public
      9 lines of code
      1 parameters
      3 conditional paths
      uses function is_capped(struct expression *) defined in smatch_capped.c
      uses variable expression::right defined in expression.h
      uses function set_state_expr(int,struct expression *,struct smatch_state *) defined in smatch.h
      uses variable my_id defined in smatch_capped.c
      uses variable expression::left defined in expression.h
      uses function get_state_expr(int,struct expression *) defined in smatch.h
   function match_caller_info(struct expression *) in line 180
      protection public
      16 lines of code
      1 parameters
      3 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable expression::args defined in expression.h
      uses function get_implied_value(struct expression *,sval_t *) defined in smatch.h
      uses function is_capped(struct expression *) defined in smatch_capped.c
      uses function sql_insert_caller_info(struct expression *,int,int,const char *,const char *) defined in smatch.h
      uses enumvalue CAPPED_DATA defined in smatch.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function struct_member_callback(struct expression *,int,char *,struct sm_state *) in line 197
      protection public
      12 lines of code
      4 parameters
      3 conditional paths
      uses variable sm_state::state defined in smatch.h
      uses function get_state(int,const char *,struct symbol *) defined in smatch.h
      uses macro definition SMATCH_EXTRA defined in smatch.h
      uses variable sm_state::name defined in smatch.h
      uses variable sm_state::sym defined in smatch.h
      uses function estate_get_single_value(struct smatch_state *,sval_t *) defined in smatch.h
      uses function sql_insert_caller_info(struct expression *,int,int,const char *,const char *) defined in smatch.h
      uses enumvalue CAPPED_DATA defined in smatch.h
      uses variable param defined in smatch_parse_call_math.c
   function print_return_implies_capped(int,char *,struct expression *) in line 210
      protection public
      32 lines of code
      3 parameters
      6 conditional paths
      uses variable param defined in smatch_parse_call_math.c
      uses macro definition FOR_EACH_MY_SM defined in avl.h
      uses variable my_id defined in smatch_capped.c
      uses function __get_cur_stree(void) defined in smatch.h
      uses variable sm_state::state defined in smatch.h
      uses function get_param_num_from_sym(struct symbol *) defined in smatch.h
      uses variable sm_state::sym defined in smatch.h
      uses function get_state(int,const char *,struct symbol *) defined in smatch.h
      uses macro definition SMATCH_EXTRA defined in smatch.h
      uses variable sm_state::name defined in smatch.h
      uses function estate_get_single_value(struct smatch_state *,sval_t *) defined in smatch.h
      uses function get_state_stree(struct stree *,int,const char *,struct symbol *) defined in smatch_slist.c
      uses function get_start_states(void) defined in smatch.h
      uses function get_param_name(struct sm_state *) defined in smatch.h
      uses function sql_insert_return_states(int,const char *,int,int,const char *,const char *) defined in smatch.h
      uses enumvalue CAPPED_DATA defined in smatch.h
      uses macro definition END_FOR_EACH_SM defined in avl.h
   function db_return_states_capped(struct expression *,int,char *,char *) in line 243
      protection public
      13 lines of code
      4 parameters
      3 conditional paths
      uses variable name defined in smatch_type.c
      uses variable sym defined in smatch_type.c
      uses function return_state_to_var_sym(struct expression *,int,char *,struct symbol **) defined in smatch.h
      uses variable param defined in smatch_parse_call_math.c
      uses function set_state(int,const char *,struct symbol *,struct smatch_state *) defined in smatch.h
      uses variable my_id defined in smatch_capped.c
      uses function free_string(char *) defined in smatch.h
   function register_capped(int) in line 257
      protection public
      15 lines of code
      1 parameters
      1 conditional paths
      uses variable my_id defined in smatch_capped.c
      uses function add_unmatched_state_hook(int,unmatched_func_t *) defined in smatch.h
      uses function unmatched_state(struct sm_state *) defined in smatch_capped.c
      uses function select_caller_info_hook(void(*)(const char *name, struct symbol *sym, char *key, char *value),int) defined in smatch.h
      uses function set_param_capped_data(const char *,struct symbol *,char *,char *) defined in smatch_capped.c
      uses enumvalue CAPPED_DATA defined in smatch.h
      uses function add_hook(void *,enum hook_type) defined in smatch.h
      uses function match_condition(struct expression *) defined in smatch_capped.c
      uses enumvalue CONDITION_HOOK defined in smatch.h
      uses function match_assign(struct expression *) defined in smatch_capped.c
      uses enumvalue ASSIGNMENT_HOOK defined in smatch.h
      uses function match_caller_info(struct expression *) defined in smatch_capped.c
      uses enumvalue FUNCTION_CALL_HOOK defined in smatch.h
      uses function add_member_info_callback(int,void(*)(struct expression *call, int param, char *printed_name, struct sm_state *sm)) defined in smatch.h
      uses function struct_member_callback(struct expression *,int,char *,struct sm_state *) defined in smatch_capped.c
      uses function add_split_return_callback(void(*)(int return_id, char *return_ranges, struct expression *returned_expr)) defined in smatch.h
      uses function print_return_implies_capped(int,char *,struct expression *) defined in smatch_capped.c
      uses function select_return_states_hook(int,return_implies_hook *) defined in smatch.h
      uses function db_return_states_capped(struct expression *,int,char *,char *) defined in smatch_capped.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/smatch_common_functions.c
module smatch_common_functions.c
   function match_strlen(struct expression *,void *,struct range_list **) in line 22
      protection public
      22 lines of code
      3 parameters
      3 conditional paths
      uses variable str defined in sm_overflow6.c
      uses function get_argument_from_call_expr(struct expression_list *,int) defined in smatch.h
      uses variable expression::args defined in expression.h
      uses function get_implied_strlen(struct expression *,struct range_list **) defined in smatch.h
      uses function sval_is_positive(sval_t) defined in smatch.h
      uses function rl_min(struct range_list *) defined in smatch_extra.h
      uses function cast_rl(struct symbol *,struct range_list *) defined in smatch_extra.h
      uses function get_array_size_bytes_max(struct expression *) defined in smatch.h
      uses function alloc_rl(sval_t,sval_t) defined in smatch_extra.h
      uses function sval_type_val(struct symbol *,long long) defined in smatch.h
      uses macro definition STRLEN_MAX_RET defined in smatch.h
   function match_strnlen(struct expression *,void *,struct range_list **) in line 45
      protection public
      23 lines of code
      3 parameters
      4 conditional paths
      uses function sval_type_val(struct symbol *,long long) defined in smatch.h
      uses function match_strlen(struct expression *,void *,struct range_list **) defined in smatch_common_functions.c
      uses macro definition NULL defined in sm_implied3.c
      uses function get_argument_from_call_expr(struct expression_list *,int) defined in smatch.h
      uses variable expression::args defined in expression.h
      uses function get_implied_max(struct expression *,sval_t *) defined in smatch.h
      uses function sval_cmp(sval_t,sval_t) defined in smatch.h
      uses function rl_to_sval(struct range_list *,sval_t *) defined in smatch_extra.h
      uses function alloc_rl(sval_t,sval_t) defined in smatch_extra.h
      uses function remove_range(struct range_list *,sval_t,sval_t) defined in smatch_extra.h
   function match_sprintf(struct expression *,void *,struct range_list **) in line 69
      protection public
      16 lines of code
      3 parameters
      2 conditional paths
      uses function get_formatted_string_size(struct expression *,int) defined in check_string_len.c
      uses function alloc_whole_rl(struct symbol *) defined in smatch_extra.h
      uses function alloc_rl(sval_t,sval_t) defined in smatch_extra.h
      uses function ll_to_sval(long long) defined in smatch.h
   function register_common_functions(int) in line 86
      protection public
      11 lines of code
      1 parameters
      1 conditional paths
      uses function add_implied_return_hook(const char *,implied_return_hook *,void *) defined in smatch.h
      uses function match_strlen(struct expression *,void *,struct range_list **) defined in smatch_common_functions.c
      uses macro definition NULL defined in sm_implied3.c
      uses function match_strnlen(struct expression *,void *,struct range_list **) defined in smatch_common_functions.c
      uses function match_sprintf(struct expression *,void *,struct range_list **) defined in smatch_common_functions.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/smatch_comparison.c
module smatch_comparison.c
   variable compare_id in line 35
      protection public
   variable link_id in line 36
      protection public
   variable inc_dec_id in line 37
      protection public
   variable inc_dec_link_id in line 38
      protection public
   function STATE(start) in line 41
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function STATE(incremented) in line 42
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ALLOCATOR(compare_data,"compare data") in line 44
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function vsl_to_sym(struct var_sym_list *) in line 46
      protection public
      11 lines of code
      1 parameters
      3 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses function ptr_list_size(struct ptr_list *) defined in ptrlist.c
      uses variable var_sym::sym defined in smatch.h
   function alloc_compare_state(const char *,struct var_sym_list *,int,const char *,struct var_sym_list *) in line 58
      protection public
      19 lines of code
      5 parameters
      1 conditional paths
      uses variable smatch_state::name defined in smatch.h
      uses function alloc_sname(const char *) defined in smatch_slist.c
      uses function show_special(int) defined in token.h
      uses variable compare_data::var1 defined in smatch.h
      uses variable compare_data::vsl1 defined in smatch.h
      uses function clone_var_sym_list(struct var_sym_list *) defined in smatch.h
      uses variable compare_data::comparison defined in smatch.h
      uses variable compare_data::var2 defined in smatch.h
      uses variable compare_data::vsl2 defined in smatch.h
      uses variable smatch_state::data defined in smatch.h
   function state_to_comparison(struct smatch_state *) in line 78
      protection public
      6 lines of code
      1 parameters
      2 conditional paths
      uses variable smatch_state::data defined in smatch.h
   function flip_comparison(int) in line 88
      protection public
      30 lines of code
      1 parameters
      12 conditional paths
      uses function op(void) defined in loop2.c
      uses enumvalue SPECIAL_UNSIGNED_LT defined in token.h
      uses enumvalue SPECIAL_UNSIGNED_GT defined in token.h
      uses enumvalue SPECIAL_LTE defined in token.h
      uses enumvalue SPECIAL_GTE defined in token.h
      uses enumvalue SPECIAL_UNSIGNED_LTE defined in token.h
      uses enumvalue SPECIAL_UNSIGNED_GTE defined in token.h
      uses enumvalue SPECIAL_EQUAL defined in token.h
      uses enumvalue SPECIAL_NOTEQUAL defined in token.h
      uses macro definition sm_msg defined in smatch.h
   function negate_comparison(int) in line 119
      protection public
      30 lines of code
      1 parameters
      12 conditional paths
      uses function op(void) defined in loop2.c
      uses enumvalue SPECIAL_GTE defined in token.h
      uses enumvalue SPECIAL_UNSIGNED_LT defined in token.h
      uses enumvalue SPECIAL_UNSIGNED_GTE defined in token.h
      uses enumvalue SPECIAL_LTE defined in token.h
      uses enumvalue SPECIAL_UNSIGNED_LTE defined in token.h
      uses enumvalue SPECIAL_UNSIGNED_GT defined in token.h
      uses enumvalue SPECIAL_EQUAL defined in token.h
      uses enumvalue SPECIAL_NOTEQUAL defined in token.h
      uses macro definition sm_msg defined in smatch.h
   function rl_comparison(struct range_list *,struct range_list *) in line 150
      protection public
      28 lines of code
      2 parameters
      7 conditional paths
      uses function rl_min(struct range_list *) defined in smatch_extra.h
      uses function rl_max(struct range_list *) defined in smatch_extra.h
      uses variable sval_t::value defined in smatch.h
      uses enumvalue SPECIAL_EQUAL defined in token.h
      uses function sval_cmp(sval_t,sval_t) defined in smatch.h
      uses enumvalue SPECIAL_LTE defined in token.h
      uses enumvalue SPECIAL_GTE defined in token.h
   function get_orig_rl(struct var_sym_list *) in line 179
      protection public
      13 lines of code
      1 parameters
      3 conditional paths
      uses variable sym defined in smatch_type.c
      uses macro definition NULL defined in sm_implied3.c
      uses function vsl_to_sym(struct var_sym_list *) defined in smatch_comparison.c
      uses variable symbol::ident defined in struct.c
      uses function get_orig_estate(const char *,struct symbol *) defined in smatch_extra.h
      uses variable ident::name defined in token.h
      uses function estate_rl(struct smatch_state *) defined in smatch_estate.c
   function unmatched_comparison(struct sm_state *) in line 193
      protection public
      25 lines of code
      1 parameters
      7 conditional paths
      uses variable sm_state::state defined in smatch.h
      uses variable smatch_state::data defined in smatch.h
      uses function op(void) defined in loop2.c
      uses variable undefined defined in smatch.h
      uses variable compare_data::var1 defined in smatch.h
      uses function get_orig_rl(struct var_sym_list *) defined in smatch_comparison.c
      uses variable compare_data::vsl1 defined in smatch.h
      uses function get_implied_rl_var_sym(const char *,struct symbol *,struct range_list **) defined in smatch_extra.h
      uses function vsl_to_sym(struct var_sym_list *) defined in smatch_comparison.c
      uses variable compare_data::var2 defined in smatch.h
      uses variable compare_data::vsl2 defined in smatch.h
      uses function rl_comparison(struct range_list *,struct range_list *) defined in smatch_comparison.c
      uses function alloc_compare_state(const char *,struct var_sym_list *,int,const char *,struct var_sym_list *) defined in smatch_comparison.c
   function remove_unsigned_from_comparison(int) in line 220
      protection public
      15 lines of code
      1 parameters
      5 conditional paths
      uses function op(void) defined in loop2.c
      uses enumvalue SPECIAL_UNSIGNED_LT defined in token.h
      uses enumvalue SPECIAL_UNSIGNED_LTE defined in token.h
      uses enumvalue SPECIAL_LTE defined in token.h
      uses enumvalue SPECIAL_UNSIGNED_GTE defined in token.h
      uses enumvalue SPECIAL_GTE defined in token.h
      uses enumvalue SPECIAL_UNSIGNED_GT defined in token.h
   function merge_comparisons(int,int) in line 240
      protection public
      64 lines of code
      2 parameters
      18 conditional paths
      uses variable one defined in sm_equiv1.c
      uses function remove_unsigned_from_comparison(int) defined in smatch_comparison.c
      uses variable two defined in sm_equiv1.c
      uses enumvalue SPECIAL_LTE defined in token.h
      uses enumvalue SPECIAL_EQUAL defined in token.h
      uses enumvalue SPECIAL_GTE defined in token.h
      uses enumvalue SPECIAL_NOTEQUAL defined in token.h
   function combine_comparisons(int,int) in line 314
      protection public
      58 lines of code
      2 parameters
      15 conditional paths
      uses function remove_unsigned_from_comparison(int) defined in smatch_comparison.c
      uses enumvalue SPECIAL_LTE defined in token.h
      uses enumvalue SPECIAL_EQUAL defined in token.h
      uses enumvalue SPECIAL_GTE defined in token.h
   function filter_comparison(int,int) in line 373
      protection public
      117 lines of code
      2 parameters
      58 conditional paths
      uses function op(void) defined in loop2.c
      uses enumvalue SPECIAL_LTE defined in token.h
      uses enumvalue SPECIAL_NOTEQUAL defined in token.h
      uses enumvalue SPECIAL_EQUAL defined in token.h
      uses enumvalue SPECIAL_GTE defined in token.h
      uses enumvalue SPECIAL_UNSIGNED_LTE defined in token.h
      uses enumvalue SPECIAL_UNSIGNED_GTE defined in token.h
      uses enumvalue SPECIAL_UNSIGNED_LT defined in token.h
      uses enumvalue SPECIAL_UNSIGNED_GT defined in token.h
   function merge_compare_states(struct smatch_state *,struct smatch_state *) in line 491
      protection public
      10 lines of code
      2 parameters
      2 conditional paths
      uses function op(void) defined in loop2.c
      uses function merge_comparisons(int,int) defined in smatch_comparison.c
      uses function state_to_comparison(struct smatch_state *) defined in smatch_comparison.c
      uses function alloc_compare_state(const char *,struct var_sym_list *,int,const char *,struct var_sym_list *) defined in smatch_comparison.c
      uses variable compare_data::var1 defined in smatch.h
      uses variable compare_data::vsl1 defined in smatch.h
      uses variable compare_data::var2 defined in smatch.h
      uses variable compare_data::vsl2 defined in smatch.h
      uses variable undefined defined in smatch.h
   function alloc_link_state(struct string_list *) in line 502
      protection public
      23 lines of code
      1 parameters
      2 conditional paths
      uses variable buf defined in sm_fake_assignment.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses function snprintf(char *,int,char *,char *) defined in sm_overflow6.c
      uses function append(char *,const char *,int) defined in smatch.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses variable smatch_state::name defined in smatch.h
      uses function alloc_sname(const char *) defined in smatch_slist.c
      uses variable smatch_state::data defined in smatch.h
   function save_start_states(struct statement *) in line 526
      protection public
      29 lines of code
      1 parameters
      2 conditional paths
      uses variable param defined in smatch_parse_call_math.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable cur_func_sym defined in smatch.h
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::base_type defined in struct.c
      uses variable symbol::arguments defined in struct.c
      uses macro definition NULL defined in sm_implied3.c
      uses function snprintf(char *,int,char *,char *) defined in sm_overflow6.c
      uses function add_var_sym(struct var_sym_list **,const char *,struct symbol *) defined in smatch.h
      uses function alloc_compare_state(const char *,struct var_sym_list *,int,const char *,struct var_sym_list *) defined in smatch_comparison.c
      uses enumvalue SPECIAL_EQUAL defined in token.h
      uses function alloc_sname(const char *) defined in smatch_slist.c
      uses function set_state(int,const char *,struct symbol *,struct smatch_state *) defined in smatch.h
      uses variable compare_id defined in smatch_comparison.c
      uses function insert_string(struct string_list **,const char *) defined in smatch.h
      uses function alloc_link_state(struct string_list *) defined in smatch_comparison.c
      uses variable link_id defined in smatch_comparison.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function merge_links(struct smatch_state *,struct smatch_state *) in line 556
      protection public
      9 lines of code
      2 parameters
      1 conditional paths
      uses function combine_string_lists(struct string_list *,struct string_list *) defined in smatch.h
      uses function alloc_link_state(struct string_list *) defined in smatch_comparison.c
   function save_link_var_sym(const char *,struct symbol *,const char *) in line 566
      protection public
      18 lines of code
      3 parameters
      2 conditional paths
      uses function get_state(int,const char *,struct symbol *) defined in smatch.h
      uses variable link_id defined in smatch_comparison.c
      uses variable sym defined in smatch_type.c
      uses function clone_str_list(struct string_list *) defined in smatch.h
      uses variable smatch_state::data defined in smatch.h
      uses macro definition NULL defined in sm_implied3.c
      uses function alloc_sname(const char *) defined in smatch_slist.c
      uses function insert_string(struct string_list **,const char *) defined in smatch.h
      uses function alloc_link_state(struct string_list *) defined in smatch_comparison.c
      uses function set_state(int,const char *,struct symbol *,struct smatch_state *) defined in smatch.h
   function match_inc(struct sm_state *) in line 585
      protection public
      29 lines of code
      1 parameters
      6 conditional paths
      uses variable sm_state::state defined in smatch.h
      uses variable smatch_state::data defined in smatch.h
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses function get_state(int,const char *,struct symbol *) defined in smatch.h
      uses variable compare_id defined in smatch_comparison.c
      uses macro definition NULL defined in sm_implied3.c
      uses function state_to_comparison(struct smatch_state *) defined in smatch_comparison.c
      uses enumvalue SPECIAL_EQUAL defined in token.h
      uses enumvalue SPECIAL_GTE defined in token.h
      uses enumvalue SPECIAL_UNSIGNED_GTE defined in token.h
      uses enumvalue SPECIAL_UNSIGNED_GT defined in token.h
      uses function alloc_compare_state(const char *,struct var_sym_list *,int,const char *,struct var_sym_list *) defined in smatch_comparison.c
      uses function set_state(int,const char *,struct symbol *,struct smatch_state *) defined in smatch.h
      uses variable undefined defined in smatch.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function match_dec(struct sm_state *) in line 615
      protection public
      29 lines of code
      1 parameters
      6 conditional paths
      uses variable sm_state::state defined in smatch.h
      uses variable smatch_state::data defined in smatch.h
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses function get_state(int,const char *,struct symbol *) defined in smatch.h
      uses variable compare_id defined in smatch_comparison.c
      uses macro definition NULL defined in sm_implied3.c
      uses function state_to_comparison(struct smatch_state *) defined in smatch_comparison.c
      uses enumvalue SPECIAL_EQUAL defined in token.h
      uses enumvalue SPECIAL_LTE defined in token.h
      uses enumvalue SPECIAL_UNSIGNED_LTE defined in token.h
      uses enumvalue SPECIAL_UNSIGNED_LT defined in token.h
      uses function alloc_compare_state(const char *,struct var_sym_list *,int,const char *,struct var_sym_list *) defined in smatch_comparison.c
      uses function set_state(int,const char *,struct symbol *,struct smatch_state *) defined in smatch.h
      uses variable undefined defined in smatch.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function match_inc_dec(struct sm_state *,struct expression *) in line 645
      protection public
      17 lines of code
      2 parameters
      5 conditional paths
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_PREOP defined in expression.h
      uses enumvalue EXPR_POSTOP defined in expression.h
      uses variable expression::op defined in expression.h
      uses enumvalue SPECIAL_INCREMENT defined in token.h
      uses function match_inc(struct sm_state *) defined in smatch_comparison.c
      uses enumvalue SPECIAL_DECREMENT defined in token.h
      uses function match_dec(struct sm_state *) defined in smatch_comparison.c
   function match_modify(struct sm_state *,struct expression *) in line 663
      protection public
      18 lines of code
      2 parameters
      2 conditional paths
      uses function match_inc_dec(struct sm_state *,struct expression *) defined in smatch_comparison.c
      uses variable sm_state::state defined in smatch.h
      uses variable smatch_state::data defined in smatch.h
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses function set_state(int,const char *,struct symbol *,struct smatch_state *) defined in smatch.h
      uses variable compare_id defined in smatch_comparison.c
      uses macro definition NULL defined in sm_implied3.c
      uses variable undefined defined in smatch.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses variable link_id defined in smatch_comparison.c
      uses variable sm_state::name defined in smatch.h
      uses variable sm_state::sym defined in smatch.h
   function chunk_to_var_sym(struct expression *,struct symbol **) in line 682
      protection public
      44 lines of code
      2 parameters
      11 conditional paths
      uses variable name defined in smatch_type.c
      uses variable buf defined in sm_fake_assignment.c
      uses function strip_expr(struct expression *) defined in smatch.h
      uses macro definition NULL defined in sm_implied3.c
      uses variable sym defined in smatch_type.c
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_PREOP defined in expression.h
      uses variable expression::op defined in expression.h
      uses enumvalue SPECIAL_INCREMENT defined in token.h
      uses enumvalue SPECIAL_DECREMENT defined in token.h
      uses variable expression::unop defined in expression.h
      uses function expr_to_var_sym(struct expression *,struct symbol **) defined in smatch.h
      uses function free_string(char *) defined in smatch.h
      uses enumvalue EXPR_BINOP defined in expression.h
      uses function expr_to_var(struct expression *) defined in smatch.h
      uses variable expression::left defined in expression.h
      uses variable expression::right defined in expression.h
      uses function snprintf(char *,int,char *,char *) defined in sm_overflow6.c
      uses function show_special(int) defined in token.h
      uses function alloc_string(const char *) defined in smatch.h
   function chunk_to_var(struct expression *) in line 727
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function chunk_to_var_sym(struct expression *,struct symbol **) defined in smatch_comparison.c
      uses macro definition NULL defined in sm_implied3.c
   function save_link(struct expression *,char *) in line 732
      protection public
      27 lines of code
      2 parameters
      5 conditional paths
      uses variable sym defined in smatch_type.c
      uses function strip_expr(struct expression *) defined in smatch.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_BINOP defined in expression.h
      uses function chunk_to_var(struct expression *) defined in smatch_comparison.c
      uses variable expression::left defined in expression.h
      uses variable expression::right defined in expression.h
      uses function save_link_var_sym(const char *,struct symbol *,const char *) defined in smatch_comparison.c
      uses macro definition NULL defined in sm_implied3.c
      uses function expr_to_var_sym(struct expression *,struct symbol **) defined in smatch.h
      uses function free_string(char *) defined in smatch.h
   function get_orig_comparison(struct stree *,const char *,const char *) in line 760
      protection public
      25 lines of code
      3 parameters
      4 conditional paths
      uses function snprintf(char *,int,char *,char *) defined in sm_overflow6.c
      uses function get_state_stree(struct stree *,int,const char *,struct symbol *) defined in smatch_slist.c
      uses variable compare_id defined in smatch_comparison.c
      uses macro definition NULL defined in sm_implied3.c
      uses variable smatch_state::data defined in smatch.h
      uses function flip_comparison(int) defined in smatch_comparison.c
      uses variable compare_data::comparison defined in smatch.h
   function update_tf_links(struct stree *,const char *,struct var_sym_list *,int,int,const char *,struct var_sym_list *,struct string_list *) in line 795
      protection public
      81 lines of code
      8 parameters
      10 conditional paths
      uses variable true_state defined in smatch.h
      uses variable false_state defined in smatch.h
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses function get_state_stree(struct stree *,int,const char *,struct symbol *) defined in smatch_slist.c
      uses variable compare_id defined in smatch_comparison.c
      uses macro definition NULL defined in sm_implied3.c
      uses variable smatch_state::data defined in smatch.h
      uses variable compare_data::comparison defined in smatch.h
      uses variable compare_data::var2 defined in smatch.h
      uses variable compare_data::vsl2 defined in smatch.h
      uses variable compare_data::var1 defined in smatch.h
      uses variable compare_data::vsl1 defined in smatch.h
      uses function flip_comparison(int) defined in smatch_comparison.c
      uses function get_orig_comparison(struct stree *,const char *,const char *) defined in smatch_comparison.c
      uses function combine_comparisons(int,int) defined in smatch_comparison.c
      uses function filter_comparison(int,int) defined in smatch_comparison.c
      uses function alloc_compare_state(const char *,struct var_sym_list *,int,const char *,struct var_sym_list *) defined in smatch_comparison.c
      uses function snprintf(char *,int,char *,char *) defined in sm_overflow6.c
      uses function set_true_false_states(int,const char *,struct symbol *,struct smatch_state *,struct smatch_state *) defined in smatch.h
      uses function save_link_var_sym(const char *,struct symbol *,const char *) defined in smatch_comparison.c
      uses variable var_sym::var defined in smatch.h
      uses variable var_sym::sym defined in smatch.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses function vsl_to_sym(struct var_sym_list *) defined in smatch_comparison.c
   function update_tf_data(struct stree *,const char *,struct var_sym_list *,const char *,struct var_sym_list *,int,int) in line 877
      protection public
      15 lines of code
      7 parameters
      3 conditional paths
      uses function get_state_stree(struct stree *,int,const char *,struct symbol *) defined in smatch_slist.c
      uses variable link_id defined in smatch_comparison.c
      uses function vsl_to_sym(struct var_sym_list *) defined in smatch_comparison.c
      uses function update_tf_links(struct stree *,const char *,struct var_sym_list *,int,int,const char *,struct var_sym_list *,struct string_list *) defined in smatch_comparison.c
      uses variable smatch_state::data defined in smatch.h
      uses function flip_comparison(int) defined in smatch_comparison.c
   function iter_modify(struct sm_state *,struct expression *) in line 893
      protection public
      10 lines of code
      2 parameters
      2 conditional paths
      uses variable sm_state::state defined in smatch.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_PREOP defined in expression.h
      uses enumvalue EXPR_POSTOP defined in expression.h
      uses variable expression::op defined in expression.h
      uses enumvalue SPECIAL_INCREMENT defined in token.h
      uses function set_state(int,const char *,struct symbol *,struct smatch_state *) defined in smatch.h
      uses variable inc_dec_id defined in smatch_comparison.c
      uses variable sm_state::name defined in smatch.h
      uses variable sm_state::sym defined in smatch.h
      uses variable undefined defined in smatch.h
   function handle_for_loops(struct expression *,char *,struct smatch_state *) in line 904
      protection public
      55 lines of code
      3 parameters
      11 conditional paths
      uses variable expression::op defined in expression.h
      uses enumvalue SPECIAL_UNSIGNED_LT defined in token.h
      uses variable __cur_stmt defined in smatch.h
      uses variable __prev_stmt defined in smatch.h
      uses variable statement::type defined in parse.h
      uses enumvalue STMT_ITERATOR defined in parse.h
      uses variable statement::iterator_pre_condition defined in parse.h
      uses function get_value(struct expression *,sval_t *) defined in smatch.h
      uses variable expression::right defined in expression.h
      uses variable statement::iterator_pre_statement defined in parse.h
      uses function get_implied_value(struct expression *,sval_t *) defined in smatch.h
      uses variable expression::left defined in expression.h
      uses variable sval_t::value defined in smatch.h
      uses function expr_to_var_sym(struct expression *,struct symbol **) defined in smatch.h
      uses function free_string(char *) defined in smatch.h
      uses function set_state(int,const char *,struct symbol *,struct smatch_state *) defined in smatch.h
      uses variable inc_dec_id defined in smatch_comparison.c
      uses function store_link(int,const char *,struct symbol *,const char *,struct symbol *) defined in smatch.h
      uses variable inc_dec_link_id defined in smatch_comparison.c
      uses variable statement::iterator_post_statement defined in parse.h
      uses function get_state_expr(int,struct expression *) defined in smatch.h
      uses variable false_state defined in smatch.h
      uses variable smatch_state::data defined in smatch.h
      uses function alloc_compare_state(const char *,struct var_sym_list *,int,const char *,struct var_sym_list *) defined in smatch_comparison.c
      uses variable compare_data::var1 defined in smatch.h
      uses variable compare_data::vsl1 defined in smatch.h
      uses enumvalue SPECIAL_EQUAL defined in token.h
      uses variable compare_data::var2 defined in smatch.h
      uses variable compare_data::vsl2 defined in smatch.h
      uses function set_true_false_states(int,const char *,struct symbol *,struct smatch_state *,struct smatch_state *) defined in smatch.h
      uses variable compare_id defined in smatch_comparison.c
      uses macro definition NULL defined in sm_implied3.c
   function __comparison_match_condition(struct expression *) in line 960
      protection public
      74 lines of code
      1 parameters
      1 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses function op(void) defined in loop2.c
      uses variable true_state defined in smatch.h
      uses variable false_state defined in smatch.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_COMPARE defined in expression.h
      uses variable expression::op defined in expression.h
      uses function negate_comparison(int) defined in smatch_comparison.c
      uses enumvalue SPECIAL_UNSIGNED_LT defined in token.h
      uses function get_implied_value(struct expression *,sval_t *) defined in smatch.h
      uses variable expression::left defined in expression.h
      uses variable sval_t::value defined in smatch.h
      uses enumvalue SPECIAL_EQUAL defined in token.h
      uses enumvalue SPECIAL_UNSIGNED_GT defined in token.h
      uses variable expression::right defined in expression.h
      uses function chunk_to_var_sym(struct expression *,struct symbol **) defined in smatch_comparison.c
      uses function expr_to_vsl(struct expression *) defined in smatch.h
      uses function flip_comparison(int) defined in smatch_comparison.c
      uses function get_comparison_strings(const char *,const char *) defined in smatch_comparison.c
      uses function filter_comparison(int,int) defined in smatch_comparison.c
      uses function snprintf(char *,int,char *,char *) defined in sm_overflow6.c
      uses function alloc_compare_state(const char *,struct var_sym_list *,int,const char *,struct var_sym_list *) defined in smatch_comparison.c
      uses function clone_stree(struct stree *) defined in avl.c
      uses function __get_cur_stree(void) defined in smatch.h
      uses function update_tf_data(struct stree *,const char *,struct var_sym_list *,const char *,struct var_sym_list *,int,int) defined in smatch_comparison.c
      uses function free_stree(struct stree **) defined in avl.c
      uses function set_true_false_states(int,const char *,struct symbol *,struct smatch_state *,struct smatch_state *) defined in smatch.h
      uses variable compare_id defined in smatch_comparison.c
      uses function save_link(struct expression *,char *) defined in smatch_comparison.c
      uses function handle_for_loops(struct expression *,char *,struct smatch_state *) defined in smatch_comparison.c
      uses function free_string(char *) defined in smatch.h
   function add_comparison_var_sym(const char *,struct var_sym_list *,int,const char *,struct var_sym_list *) in line 1035
      protection public
      31 lines of code
      5 parameters
      2 conditional paths
      uses function flip_comparison(int) defined in smatch_comparison.c
      uses function snprintf(char *,int,char *,char *) defined in sm_overflow6.c
      uses function alloc_compare_state(const char *,struct var_sym_list *,int,const char *,struct var_sym_list *) defined in smatch_comparison.c
      uses function set_state(int,const char *,struct symbol *,struct smatch_state *) defined in smatch.h
      uses variable compare_id defined in smatch_comparison.c
      uses macro definition NULL defined in sm_implied3.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses function save_link_var_sym(const char *,struct symbol *,const char *) defined in smatch_comparison.c
      uses variable var_sym::var defined in smatch.h
      uses variable var_sym::sym defined in smatch.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function add_comparison(struct expression *,int,struct expression *) in line 1067
      protection public
      42 lines of code
      3 parameters
      6 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses function chunk_to_var_sym(struct expression *,struct symbol **) defined in smatch_comparison.c
      uses function expr_to_vsl(struct expression *) defined in smatch.h
      uses function flip_comparison(int) defined in smatch_comparison.c
      uses function snprintf(char *,int,char *,char *) defined in sm_overflow6.c
      uses function alloc_compare_state(const char *,struct var_sym_list *,int,const char *,struct var_sym_list *) defined in smatch_comparison.c
      uses function set_state(int,const char *,struct symbol *,struct smatch_state *) defined in smatch.h
      uses variable compare_id defined in smatch_comparison.c
      uses function save_link(struct expression *,char *) defined in smatch_comparison.c
      uses function free_string(char *) defined in smatch.h
   function match_assign_add(struct expression *) in line 1110
      protection public
      23 lines of code
      1 parameters
      5 conditional paths
      uses variable expression::right defined in expression.h
      uses function strip_expr(struct expression *) defined in smatch.h
      uses variable expression::left defined in expression.h
      uses function get_absolute_min(struct expression *,sval_t *) defined in smatch.h
      uses variable sval_t::value defined in smatch.h
      uses function add_comparison(struct expression *,int,struct expression *) defined in smatch_comparison.c
      uses enumvalue SPECIAL_GTE defined in token.h
   function match_assign_sub(struct expression *) in line 1134
      protection public
      26 lines of code
      1 parameters
      5 conditional paths
      uses variable expression::right defined in expression.h
      uses macro definition min defined in sm_select_assign.c
      uses function strip_expr(struct expression *) defined in smatch.h
      uses variable expression::left defined in expression.h
      uses function get_absolute_min(struct expression *,sval_t *) defined in smatch.h
      uses function sval_is_negative(sval_t) defined in smatch.h
      uses function get_comparison(struct expression *,struct expression *) defined in smatch_comparison.c
      uses enumvalue SPECIAL_GTE defined in token.h
      uses function implied_not_equal(struct expression *,long long) defined in smatch_extra.c
      uses function add_comparison(struct expression *,int,struct expression *) defined in smatch_comparison.c
   function match_assign_divide(struct expression *) in line 1161
      protection public
      14 lines of code
      1 parameters
      2 conditional paths
      uses variable expression::right defined in expression.h
      uses macro definition min defined in sm_select_assign.c
      uses function strip_expr(struct expression *) defined in smatch.h
      uses variable expression::left defined in expression.h
      uses function get_implied_min(struct expression *,sval_t *) defined in smatch.h
      uses function add_comparison(struct expression *,int,struct expression *) defined in smatch_comparison.c
   function match_binop_assign(struct expression *) in line 1176
      protection public
      12 lines of code
      1 parameters
      4 conditional paths
      uses variable expression::right defined in expression.h
      uses function strip_expr(struct expression *) defined in smatch.h
      uses variable expression::op defined in expression.h
      uses function match_assign_add(struct expression *) defined in smatch_comparison.c
      uses function match_assign_sub(struct expression *) defined in smatch_comparison.c
      uses function match_assign_divide(struct expression *) defined in smatch_comparison.c
   function copy_comparisons(struct expression *,struct expression *) in line 1189
      protection public
      46 lines of code
      2 parameters
      8 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses function chunk_to_var_sym(struct expression *,struct symbol **) defined in smatch_comparison.c
      uses function expr_to_vsl(struct expression *) defined in smatch.h
      uses function get_state(int,const char *,struct symbol *) defined in smatch.h
      uses variable link_id defined in smatch_comparison.c
      uses variable smatch_state::data defined in smatch.h
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable compare_id defined in smatch_comparison.c
      uses variable compare_data::comparison defined in smatch.h
      uses variable compare_data::var2 defined in smatch.h
      uses variable compare_data::vsl2 defined in smatch.h
      uses variable compare_data::var1 defined in smatch.h
      uses variable compare_data::vsl1 defined in smatch.h
      uses function flip_comparison(int) defined in smatch_comparison.c
      uses function add_comparison_var_sym(const char *,struct var_sym_list *,int,const char *,struct var_sym_list *) defined in smatch_comparison.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses function free_string(char *) defined in smatch.h
   function match_assign(struct expression *) in line 1236
      protection public
      19 lines of code
      1 parameters
      5 conditional paths
      uses variable expression::right defined in expression.h
      uses variable expression::op defined in expression.h
      uses variable __in_fake_assign defined in smatch.h
      uses function outside_of_function(void) defined in smatch.h
      uses function is_struct(struct expression *) defined in smatch.h
      uses variable expression::left defined in expression.h
      uses function copy_comparisons(struct expression *,struct expression *) defined in smatch_comparison.c
      uses function add_comparison(struct expression *,int,struct expression *) defined in smatch_comparison.c
      uses enumvalue SPECIAL_EQUAL defined in token.h
      uses function strip_expr(struct expression *) defined in smatch.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_BINOP defined in expression.h
      uses function match_binop_assign(struct expression *) defined in smatch_comparison.c
   function get_comparison_strings(const char *,const char *) in line 1256
      protection public
      28 lines of code
      2 parameters
      5 conditional paths
      uses variable buf defined in sm_fake_assignment.c
      uses variable one defined in sm_equiv1.c
      uses variable two defined in sm_equiv1.c
      uses enumvalue SPECIAL_EQUAL defined in token.h
      uses function snprintf(char *,int,char *,char *) defined in sm_overflow6.c
      uses function get_state(int,const char *,struct symbol *) defined in smatch.h
      uses variable compare_id defined in smatch_comparison.c
      uses macro definition NULL defined in sm_implied3.c
      uses function state_to_comparison(struct smatch_state *) defined in smatch_comparison.c
      uses function flip_comparison(int) defined in smatch_comparison.c
   function get_comparison(struct expression *,struct expression *) in line 1285
      protection public
      19 lines of code
      2 parameters
      5 conditional paths
      uses variable one defined in sm_equiv1.c
      uses macro definition NULL defined in sm_implied3.c
      uses variable two defined in sm_equiv1.c
      uses function chunk_to_var(struct expression *) defined in smatch_comparison.c
      uses function get_comparison_strings(const char *,const char *) defined in smatch_comparison.c
      uses function free_string(char *) defined in smatch.h
   function possible_comparison(struct expression *,int,struct expression *) in line 1305
      protection public
      57 lines of code
      3 parameters
      15 conditional paths
      uses variable one defined in sm_equiv1.c
      uses macro definition NULL defined in sm_implied3.c
      uses variable two defined in sm_equiv1.c
      uses variable buf defined in sm_fake_assignment.c
      uses function chunk_to_var(struct expression *) defined in smatch_comparison.c
      uses enumvalue SPECIAL_EQUAL defined in token.h
      uses function flip_comparison(int) defined in smatch_comparison.c
      uses function snprintf(char *,int,char *,char *) defined in sm_overflow6.c
      uses function get_sm_state(int,const char *,struct symbol *) defined in smatch.h
      uses variable compare_id defined in smatch_comparison.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable sm_state::possible defined in smatch.h
      uses variable sm_state::state defined in smatch.h
      uses variable smatch_state::data defined in smatch.h
      uses enumvalue SPECIAL_LTE defined in token.h
      uses enumvalue SPECIAL_GTE defined in token.h
      uses enumvalue SPECIAL_UNSIGNED_LTE defined in token.h
      uses enumvalue SPECIAL_UNSIGNED_GTE defined in token.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses function free_string(char *) defined in smatch.h
   function get_all_comparisons(struct expression *) in line 1363
      protection public
      23 lines of code
      1 parameters
      3 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses variable sm_state::state defined in smatch.h
      uses function get_state_expr(int,struct expression *) defined in smatch.h
      uses variable link_id defined in smatch_comparison.c
      uses variable smatch_state::data defined in smatch.h
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses function get_sm_state(int,const char *,struct symbol *) defined in smatch.h
      uses variable compare_id defined in smatch_comparison.c
      uses macro definition add_ptr_list defined in ptrlist.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function get_all_possible_equal_comparisons(struct expression *) in line 1387
      protection public
      26 lines of code
      1 parameters
      5 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses variable sm_state::state defined in smatch.h
      uses function get_state_expr(int,struct expression *) defined in smatch.h
      uses variable link_id defined in smatch_comparison.c
      uses variable smatch_state::data defined in smatch.h
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses function get_sm_state(int,const char *,struct symbol *) defined in smatch.h
      uses variable compare_id defined in smatch_comparison.c
      uses variable smatch_state::name defined in smatch.h
      uses macro definition add_ptr_list defined in ptrlist.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function update_links_from_call(struct expression *,int,struct expression *) in line 1414
      protection public
      51 lines of code
      3 parameters
      9 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses function chunk_to_var_sym(struct expression *,struct symbol **) defined in smatch_comparison.c
      uses function expr_to_vsl(struct expression *) defined in smatch.h
      uses function get_state(int,const char *,struct symbol *) defined in smatch.h
      uses variable link_id defined in smatch_comparison.c
      uses variable smatch_state::data defined in smatch.h
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable compare_id defined in smatch_comparison.c
      uses variable compare_data::comparison defined in smatch.h
      uses variable compare_data::var2 defined in smatch.h
      uses variable compare_data::vsl2 defined in smatch.h
      uses variable compare_data::var1 defined in smatch.h
      uses variable compare_data::vsl1 defined in smatch.h
      uses function flip_comparison(int) defined in smatch_comparison.c
      uses function combine_comparisons(int,int) defined in smatch_comparison.c
      uses function add_comparison_var_sym(const char *,struct var_sym_list *,int,const char *,struct var_sym_list *) defined in smatch_comparison.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses function free_string(char *) defined in smatch.h
   function __add_comparison_info(struct expression *,struct expression *,const char *) in line 1466
      protection public
      11 lines of code
      3 parameters
      2 conditional paths
      uses variable c defined in sm_array_overflow.c
      uses function str_to_comparison_arg(const char *,struct expression *,int *,struct expression **) defined in smatch_extra.h
      uses function update_links_from_call(struct expression *,int,struct expression *) defined in smatch_comparison.c
      uses function add_comparison(struct expression *,int,struct expression *) defined in smatch_comparison.c
   function range_comparison_to_param_helper(struct expression *,char,int) in line 1478
      protection public
      35 lines of code
      3 parameters
      7 conditional paths
      uses variable param defined in smatch_parse_call_math.c
      uses macro definition NULL defined in sm_implied3.c
      uses variable buf defined in sm_fake_assignment.c
      uses function chunk_to_var(struct expression *) defined in smatch_comparison.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable cur_func_sym defined in smatch.h
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::base_type defined in struct.c
      uses variable symbol::arguments defined in struct.c
      uses function snprintf(char *,int,char *,char *) defined in sm_overflow6.c
      uses function get_comparison_strings(const char *,const char *) defined in smatch_comparison.c
      uses function show_special(int) defined in token.h
      uses function alloc_sname(const char *) defined in smatch_slist.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses function free_string(char *) defined in smatch.h
   function name_sym_to_param_comparison(const char *,struct symbol *) in line 1514
      protection public
      22 lines of code
      2 parameters
      3 conditional paths
      uses variable param defined in smatch_parse_call_math.c
      uses variable buf defined in sm_fake_assignment.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable cur_func_sym defined in smatch.h
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::base_type defined in struct.c
      uses variable symbol::arguments defined in struct.c
      uses function snprintf(char *,int,char *,char *) defined in sm_overflow6.c
      uses function get_comparison_strings(const char *,const char *) defined in smatch_comparison.c
      uses variable name defined in smatch_type.c
      uses function show_special(int) defined in token.h
      uses function alloc_sname(const char *) defined in smatch_slist.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses macro definition NULL defined in sm_implied3.c
   function expr_equal_to_param(struct expression *,int) in line 1537
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function range_comparison_to_param_helper(struct expression *,char,int) defined in smatch_comparison.c
   function expr_lte_to_param(struct expression *,int) in line 1542
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function range_comparison_to_param_helper(struct expression *,char,int) defined in smatch_comparison.c
   function expr_param_comparison(struct expression *,int) in line 1547
      protection public
      33 lines of code
      2 parameters
      6 conditional paths
      uses variable param defined in smatch_parse_call_math.c
      uses macro definition NULL defined in sm_implied3.c
      uses variable buf defined in sm_fake_assignment.c
      uses function chunk_to_var(struct expression *) defined in smatch_comparison.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable cur_func_sym defined in smatch.h
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::base_type defined in struct.c
      uses variable symbol::arguments defined in struct.c
      uses function snprintf(char *,int,char *,char *) defined in sm_overflow6.c
      uses function get_comparison_strings(const char *,const char *) defined in smatch_comparison.c
      uses function show_special(int) defined in token.h
      uses function alloc_sname(const char *) defined in smatch_slist.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses function free_string(char *) defined in smatch.h
   function free_data(struct symbol *) in line 1581
      protection public
      6 lines of code
      1 parameters
      2 conditional paths
      uses variable __inline_fn defined in smatch.h
   function register_comparison(int) in line 1588
      protection public
      9 lines of code
      1 parameters
      1 conditional paths
      uses variable compare_id defined in smatch_comparison.c
      uses function add_hook(void *,enum hook_type) defined in smatch.h
      uses function match_assign(struct expression *) defined in smatch_comparison.c
      uses enumvalue ASSIGNMENT_HOOK defined in smatch.h
      uses function save_start_states(struct statement *) defined in smatch_comparison.c
      uses enumvalue AFTER_DEF_HOOK defined in smatch.h
      uses function add_unmatched_state_hook(int,unmatched_func_t *) defined in smatch.h
      uses function unmatched_comparison(struct sm_state *) defined in smatch_comparison.c
      uses function add_merge_hook(int,merge_func_t *) defined in smatch.h
      uses function merge_compare_states(struct smatch_state *,struct smatch_state *) defined in smatch_comparison.c
      uses function free_data(struct symbol *) defined in smatch_comparison.c
      uses enumvalue AFTER_FUNC_HOOK defined in smatch.h
   function register_comparison_links(int) in line 1598
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses variable link_id defined in smatch_comparison.c
      uses function add_merge_hook(int,merge_func_t *) defined in smatch.h
      uses function merge_links(struct smatch_state *,struct smatch_state *) defined in smatch_comparison.c
      uses function add_modification_hook(int,modification_hook *) defined in smatch.h
      uses function match_modify(struct sm_state *,struct expression *) defined in smatch_comparison.c
   function register_comparison_inc_dec(int) in line 1605
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable inc_dec_id defined in smatch_comparison.c
      uses function add_modification_hook(int,modification_hook *) defined in smatch.h
      uses function iter_modify(struct sm_state *,struct expression *) defined in smatch_comparison.c
   function register_comparison_inc_dec_links(int) in line 1611
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable inc_dec_link_id defined in smatch_comparison.c
      uses function set_up_link_functions(int,int) defined in smatch.h
      uses variable inc_dec_id defined in smatch_comparison.c
   function filter_by_sm(struct sm_state *,int,struct stree_stack **,struct stree_stack **) in line 1617
      protection public
      37 lines of code
      4 parameters
      9 conditional paths
      uses variable sm_state::state defined in smatch.h
      uses variable smatch_state::data defined in smatch.h
      uses variable sm_state::merged defined in smatch.h
      uses variable sm_state::left defined in smatch.h
      uses function op(void) defined in loop2.c
      uses variable sm_state::right defined in smatch.h
      uses variable compare_data::comparison defined in smatch.h
      uses function filter_comparison(int,int) defined in smatch_comparison.c
      uses function negate_comparison(int) defined in smatch_comparison.c
      uses function add_pool(struct stree_stack **,struct stree *) defined in smatch.h
      uses variable sm_state::pool defined in smatch.h
   function comparison_implication_hook(struct expression *,struct stree_stack **,struct stree_stack **) in line 1655
      protection public
      43 lines of code
      3 parameters
      7 conditional paths
      uses variable sm_state::left defined in smatch.h
      uses variable sm_state::right defined in smatch.h
      uses function op(void) defined in loop2.c
      uses variable buf defined in sm_fake_assignment.c
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_COMPARE defined in expression.h
      uses macro definition NULL defined in sm_implied3.c
      uses variable expression::op defined in expression.h
      uses function expr_to_var(struct expression *) defined in smatch.h
      uses variable expression::left defined in expression.h
      uses variable expression::right defined in expression.h
      uses function free_string(char *) defined in smatch.h
      uses function flip_comparison(int) defined in smatch_comparison.c
      uses function snprintf(char *,int,char *,char *) defined in sm_overflow6.c
      uses function get_sm_state(int,const char *,struct symbol *) defined in smatch.h
      uses variable compare_id defined in smatch_comparison.c
      uses variable sm_state::merged defined in smatch.h
      uses function filter_by_sm(struct sm_state *,int,struct stree_stack **,struct stree_stack **) defined in smatch_comparison.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/smatch_conditions.c
module smatch_conditions.c
   variable __expr_stmt_count in line 62
      protection public
   variable inside_condition in line 433
      protection public
   function split_conditions(struct expression *) in line 64
      protection public
      66 lines of code
      1 parameters
      21 conditional paths
      uses variable option_debug defined in smatch.h
      uses function expr_to_str(struct expression *) defined in smatch.h
      uses macro definition sm_msg defined in smatch.h
      uses function get_lineno(void) defined in smatch.h
      uses function free_string(char *) defined in smatch.h
      uses function strip_expr(struct expression *) defined in smatch.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_LOGICAL defined in expression.h
      uses function __pass_to_client(void *,enum hook_type) defined in smatch.h
      uses enumvalue LOGIC_HOOK defined in smatch.h
      uses function handle_logical(struct expression *) defined in smatch_conditions.c
      uses enumvalue EXPR_COMPARE defined in expression.h
      uses function hackup_unsigned_compares(struct expression *) defined in smatch_conditions.c
      uses function handle_zero_comparisons(struct expression *) defined in smatch_conditions.c
      uses enumvalue EXPR_CALL defined in expression.h
      uses function ignore_builtin_expect(struct expression *) defined in smatch_conditions.c
      uses enumvalue EXPR_PREOP defined in expression.h
      uses function handle_preop(struct expression *) defined in smatch_conditions.c
      uses enumvalue EXPR_CONDITIONAL defined in expression.h
      uses enumvalue EXPR_SELECT defined in expression.h
      uses function handle_select(struct expression *) defined in smatch_conditions.c
      uses enumvalue EXPR_COMMA defined in expression.h
      uses function handle_comma(struct expression *) defined in smatch_conditions.c
      uses function push_expression(struct expression_list **,struct expression *) defined in smatch_expression_stacks.c
      uses variable big_expression_stack defined in smatch.h
      uses variable expression::left defined in expression.h
      uses enumvalue EXPR_POSTOP defined in expression.h
      uses function __split_expr(struct expression *) defined in smatch.h
      uses variable expression::right defined in expression.h
      uses enumvalue CONDITION_HOOK defined in smatch.h
      uses function __process_post_op_stack(void) defined in smatch.h
      uses function pop_expression(struct expression_list **) defined in smatch_expression_stacks.c
   function is_logical_and(struct expression *) in line 66
      protection public
      6 lines of code
      1 parameters
      2 conditional paths
      uses variable expression::op defined in expression.h
      uses enumvalue SPECIAL_LOGICAL_AND defined in token.h
   function handle_zero_comparisons(struct expression *) in line 73
      protection public
      27 lines of code
      1 parameters
      5 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses function is_zero(struct expression *) defined in smatch.h
      uses variable expression::left defined in expression.h
      uses variable expression::right defined in expression.h
      uses variable expression::op defined in expression.h
      uses enumvalue SPECIAL_NOTEQUAL defined in token.h
      uses function split_conditions(struct expression *) defined in smatch_conditions.c
      uses enumvalue SPECIAL_EQUAL defined in token.h
      uses function __negate_cond_stacks(void) defined in smatch.h
   function ignore_builtin_expect(struct expression *) in line 105
      protection public
      8 lines of code
      1 parameters
      2 conditional paths
      uses function sym_name_is(const char *,struct expression *) defined in smatch.h
      uses variable expression::fn defined in expression.h
      uses function split_conditions(struct expression *) defined in smatch_conditions.c
      uses variable expression::args defined in expression.h
   function handle_compound_stmt(struct statement *) in line 118
      protection public
      19 lines of code
      1 parameters
      3 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses variable statement::stmts defined in parse.h
      uses variable statement::type defined in parse.h
      uses enumvalue STMT_EXPRESSION defined in parse.h
      uses variable statement::expression defined in parse.h
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses function __split_stmt(struct statement *) defined in smatch.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses function split_conditions(struct expression *) defined in smatch_conditions.c
   function handle_preop(struct expression *) in line 138
      protection public
      16 lines of code
      1 parameters
      3 conditional paths
      uses variable expression::op defined in expression.h
      uses function split_conditions(struct expression *) defined in smatch_conditions.c
      uses variable expression::unop defined in expression.h
      uses function __negate_cond_stacks(void) defined in smatch.h
      uses function get_expression_statement(struct expression *) defined in smatch.h
      uses function handle_compound_stmt(struct statement *) defined in smatch_conditions.c
   function handle_logical(struct expression *) in line 155
      protection public
      37 lines of code
      1 parameters
      3 conditional paths
      uses function split_conditions(struct expression *) defined in smatch_conditions.c
      uses variable expression::left defined in expression.h
      uses function __process_post_op_stack(void) defined in smatch.h
      uses function is_logical_and(struct expression *) defined in smatch_conditions.c
      uses function __use_cond_false_states(void) defined in smatch.h
      uses function __push_cond_stacks(void) defined in smatch.h
      uses function __save_pre_cond_states(void) defined in smatch.h
      uses variable expression::right defined in expression.h
      uses function __discard_pre_cond_states(void) defined in smatch.h
      uses function __and_cond_states(void) defined in smatch.h
      uses function __or_cond_states(void) defined in smatch.h
      uses function __use_cond_true_states(void) defined in smatch.h
   function combine_strees(struct stree *,struct stree *,struct stree *) in line 193
      protection public
      11 lines of code
      3 parameters
      1 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses function overwrite_stree(struct stree *,struct stree **) defined in smatch_slist.c
      uses function free_stree(struct stree **) defined in avl.c
   function handle_select(struct expression *) in line 216
      protection public
      119 lines of code
      1 parameters
      5 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses function __save_pre_cond_states(void) defined in smatch.h
      uses function split_conditions(struct expression *) defined in smatch_conditions.c
      uses variable expression::conditional defined in expression.h
      uses function __copy_cond_true_states(void) defined in smatch.h
      uses function __copy_cond_false_states(void) defined in smatch.h
      uses function __push_cond_stacks(void) defined in smatch.h
      uses function __push_fake_cur_stree(void) defined in smatch.h
      uses variable expression::cond_true defined in expression.h
      uses function __process_post_op_stack(void) defined in smatch.h
      uses function __pop_fake_cur_stree(void) defined in smatch.h
      uses function combine_strees(struct stree *,struct stree *,struct stree *) defined in smatch_conditions.c
      uses function __pop_cond_true_stack(void) defined in smatch.h
      uses function __pop_cond_false_stack(void) defined in smatch.h
      uses function __use_cond_false_states(void) defined in smatch.h
      uses variable expression::cond_false defined in expression.h
      uses function __use_pre_cond_states(void) defined in smatch.h
      uses function implied_condition_true(struct expression *) defined in smatch.h
      uses function free_stree(struct stree **) defined in avl.c
      uses function clone_stree(struct stree *) defined in avl.c
      uses function overwrite_stree(struct stree *,struct stree **) defined in smatch_slist.c
      uses function implied_condition_false(struct expression *) defined in smatch.h
      uses function merge_stree(struct stree **,struct stree *) defined in smatch_slist.c
      uses macro definition FOR_EACH_SM defined in avl.h
      uses function __set_true_false_sm(struct sm_state *,struct sm_state *) defined in smatch.h
      uses macro definition END_FOR_EACH_SM defined in avl.h
   function handle_comma(struct expression *) in line 336
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function __split_expr(struct expression *) defined in smatch.h
      uses variable expression::left defined in expression.h
      uses function split_conditions(struct expression *) defined in smatch_conditions.c
      uses variable expression::right defined in expression.h
   function make_op_unsigned(int) in line 342
      protection public
      14 lines of code
      1 parameters
      5 conditional paths
      uses function op(void) defined in loop2.c
      uses enumvalue SPECIAL_UNSIGNED_LT defined in token.h
      uses enumvalue SPECIAL_LTE defined in token.h
      uses enumvalue SPECIAL_UNSIGNED_LTE defined in token.h
      uses enumvalue SPECIAL_UNSIGNED_GT defined in token.h
      uses enumvalue SPECIAL_GTE defined in token.h
      uses enumvalue SPECIAL_UNSIGNED_GTE defined in token.h
   function hackup_unsigned_compares(struct expression *) in line 357
      protection public
      8 lines of code
      1 parameters
      3 conditional paths
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_COMPARE defined in expression.h
      uses function type_unsigned(struct symbol *) defined in smatch.h
      uses function get_type(struct expression *) defined in smatch.h
      uses variable expression::op defined in expression.h
      uses function make_op_unsigned(int) defined in smatch_conditions.c
   function __split_whole_condition(struct expression *) in line 434
      protection public
      17 lines of code
      1 parameters
      2 conditional paths
      uses macro definition sm_debug defined in smatch.h
      uses function get_lineno(void) defined in smatch.h
      uses variable inside_condition defined in smatch_conditions.c
      uses function __save_pre_cond_states(void) defined in smatch.h
      uses function __push_cond_stacks(void) defined in smatch.h
      uses function push_expression(struct expression_list **,struct expression *) defined in smatch_expression_stacks.c
      uses variable big_expression_stack defined in smatch.h
      uses function split_conditions(struct expression *) defined in smatch_conditions.c
      uses function __use_cond_states(void) defined in smatch.h
      uses function __pass_to_client(void *,enum hook_type) defined in smatch.h
      uses enumvalue WHOLE_CONDITION_HOOK defined in smatch.h
      uses function pop_expression(struct expression_list **) defined in smatch_expression_stacks.c
   function __handle_logic(struct expression *) in line 452
      protection public
      18 lines of code
      1 parameters
      2 conditional paths
      uses macro definition sm_debug defined in smatch.h
      uses function get_lineno(void) defined in smatch.h
      uses variable inside_condition defined in smatch_conditions.c
      uses function __save_pre_cond_states(void) defined in smatch.h
      uses function __push_cond_stacks(void) defined in smatch.h
      uses function push_expression(struct expression_list **,struct expression *) defined in smatch_expression_stacks.c
      uses variable big_expression_stack defined in smatch.h
      uses function split_conditions(struct expression *) defined in smatch_conditions.c
      uses function __use_cond_states(void) defined in smatch.h
      uses function __pass_to_client(void *,enum hook_type) defined in smatch.h
      uses enumvalue WHOLE_CONDITION_HOOK defined in smatch.h
      uses function pop_expression(struct expression_list **) defined in smatch_expression_stacks.c
      uses function __merge_false_states(void) defined in smatch.h
   function is_condition(struct expression *) in line 471
      protection public
      17 lines of code
      1 parameters
      6 conditional paths
      uses function strip_expr(struct expression *) defined in smatch.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_LOGICAL defined in expression.h
      uses enumvalue EXPR_COMPARE defined in expression.h
      uses enumvalue EXPR_PREOP defined in expression.h
      uses variable expression::op defined in expression.h
   function __handle_condition_assigns(struct expression *) in line 489
      protection public
      32 lines of code
      1 parameters
      3 conditional paths
      uses variable expression::right defined in expression.h
      uses variable expression::op defined in expression.h
      uses function strip_expr(struct expression *) defined in smatch.h
      uses function is_condition(struct expression *) defined in smatch_conditions.c
      uses macro definition sm_debug defined in smatch.h
      uses function get_lineno(void) defined in smatch.h
      uses variable inside_condition defined in smatch_conditions.c
      uses function __save_pre_cond_states(void) defined in smatch.h
      uses function __push_cond_stacks(void) defined in smatch.h
      uses function push_expression(struct expression_list **,struct expression *) defined in smatch_expression_stacks.c
      uses variable big_expression_stack defined in smatch.h
      uses function split_conditions(struct expression *) defined in smatch_conditions.c
      uses function __use_cond_states(void) defined in smatch.h
      uses function set_extra_expr_mod(struct expression *,struct smatch_state *) defined in smatch_extra.c
      uses variable expression::left defined in expression.h
      uses function alloc_estate_sval(sval_t) defined in smatch_estate.c
      uses function sval_type_val(struct symbol *,long long) defined in smatch.h
      uses function get_type(struct expression *) defined in smatch.h
      uses function __pass_to_client(void *,enum hook_type) defined in smatch.h
      uses enumvalue WHOLE_CONDITION_HOOK defined in smatch.h
      uses function pop_expression(struct expression_list **) defined in smatch_expression_stacks.c
      uses function __push_true_states(void) defined in smatch.h
      uses function __use_false_states(void) defined in smatch.h
      uses function __merge_true_states(void) defined in smatch.h
      uses enumvalue ASSIGNMENT_HOOK defined in smatch.h
   function is_select_assign(struct expression *) in line 522
      protection public
      13 lines of code
      1 parameters
      4 conditional paths
      uses variable expression::right defined in expression.h
      uses variable expression::op defined in expression.h
      uses function strip_expr(struct expression *) defined in smatch.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_CONDITIONAL defined in expression.h
      uses enumvalue EXPR_SELECT defined in expression.h
   function set_fake_assign(struct expression *,struct expression *,int,struct expression *) in line 536
      protection public
      10 lines of code
      4 parameters
      1 conditional paths
      uses variable expression::left defined in expression.h
      uses variable expression::pos defined in expression.h
      uses function op(void) defined in loop2.c
      uses enumvalue EXPR_ASSIGNMENT defined in expression.h
      uses variable expression::right defined in expression.h
   function __handle_select_assigns(struct expression *) in line 547
      protection public
      52 lines of code
      1 parameters
      5 conditional paths
      uses variable expression::right defined in expression.h
      uses macro definition NULL defined in sm_implied3.c
      uses function is_select_assign(struct expression *) defined in smatch_conditions.c
      uses macro definition sm_debug defined in smatch.h
      uses function get_lineno(void) defined in smatch.h
      uses variable sm_state::right defined in smatch.h
      uses function strip_expr(struct expression *) defined in smatch.h
      uses function implied_condition_true(struct expression *) defined in smatch.h
      uses function implied_condition_false(struct expression *) defined in smatch.h
      uses function __save_pre_cond_states(void) defined in smatch.h
      uses function __split_whole_condition(struct expression *) defined in smatch_conditions.c
      uses variable expression::cond_true defined in expression.h
      uses function set_fake_assign(struct expression *,struct expression *,int,struct expression *) defined in smatch_conditions.c
      uses variable expression::left defined in expression.h
      uses variable expression::op defined in expression.h
      uses variable expression::conditional defined in expression.h
      uses function __split_expr(struct expression *) defined in smatch.h
      uses function clone_stree(struct stree *) defined in avl.c
      uses function __get_cur_stree(void) defined in smatch.h
      uses function __use_false_states(void) defined in smatch.h
      uses variable expression::cond_false defined in expression.h
      uses function merge_stree(struct stree **,struct stree *) defined in smatch_slist.c
      uses function __use_pre_cond_states(void) defined in smatch.h
      uses macro definition FOR_EACH_SM defined in avl.h
      uses function __set_sm(struct sm_state *) defined in smatch.h
      uses macro definition END_FOR_EACH_SM defined in avl.h
      uses function free_stree(struct stree **) defined in avl.c
   function split_then_return_last(struct statement *) in line 600
      protection public
      17 lines of code
      1 parameters
      3 conditional paths
      uses variable statement::stmts defined in parse.h
      uses macro definition NULL defined in sm_implied3.c
      uses function __push_scope_hooks(void) defined in smatch.h
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses function __split_stmt(struct statement *) defined in smatch.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function __handle_expr_statement_assigns(struct expression *) in line 618
      protection public
      54 lines of code
      1 parameters
      6 conditional paths
      uses variable expression::right defined in expression.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_PREOP defined in expression.h
      uses variable expression::op defined in expression.h
      uses variable expression::unop defined in expression.h
      uses enumvalue EXPR_STATEMENT defined in expression.h
      uses variable __expr_stmt_count defined in smatch_conditions.c
      uses variable expression::statement defined in expression.h
      uses variable statement::type defined in parse.h
      uses enumvalue STMT_COMPOUND defined in parse.h
      uses variable fake_assign defined in smatch_unknown_value.c
      uses function split_then_return_last(struct statement *) defined in smatch_conditions.c
      uses variable expression::pos defined in expression.h
      uses variable position::pos defined in lib.h
      uses enumvalue EXPR_ASSIGNMENT defined in expression.h
      uses variable expression::left defined in expression.h
      uses function __split_expr(struct expression *) defined in smatch.h
      uses function __call_scope_hooks(void) defined in smatch.h
      uses enumvalue STMT_EXPRESSION defined in parse.h
      uses variable statement::pos defined in parse.h
      uses variable statement::expression defined in parse.h
      uses function __split_stmt(struct statement *) defined in smatch.h
   function in_condition(void) in line 673
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable inside_condition defined in smatch_conditions.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/smatch_data/db/smdb.py
module smdb.py
   variable con in line 12
      protection public
   variable function_ptrs in line 29
      protection public
   variable searched_ptrs in line 30
      protection public
   variable db_types in line 51
      protection public
   variable printed_funcs in line 193
      protection public
   variable func in line 271
      protection public
   variable struct_type in line 291
      protection public
   variable member in line 292
      protection public
   variable filename in line 310
      protection public
   variable variable in line 311
      protection public
   variable param in line 322
      protection public
   function usage() in line 17
      protection public
      12 lines of code
      0 parameters
      1 conditional paths
   function get_function_pointers_helper((null)) in line 31
      protection public
      12 lines of code
      1 parameters
      1 conditional paths
   function get_function_pointers((null)) in line 43
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses function get_function_pointers_helper((null)) defined in smdb.py
   function type_to_str((null)) in line 82
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses variable int defined in missing-ident.c
   function type_to_int((null)) in line 89
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function display_caller_info((null),(null)) in line 95
      protection public
      10 lines of code
      2 parameters
      1 conditional paths
      uses function type_to_str((null)) defined in smdb.py
   function get_caller_info((null),(null)) in line 105
      protection public
      10 lines of code
      2 parameters
      1 conditional paths
      uses function type_to_int((null)) defined in smdb.py
      uses function display_caller_info((null),(null)) defined in smdb.py
   function print_caller_info((null),(null)) in line 115
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function get_function_pointers((null)) defined in smdb.py
      uses function get_caller_info((null),(null)) defined in smdb.py
   function print_return_states((null)) in line 119
      protection public
      13 lines of code
      1 parameters
      1 conditional paths
      uses function type_to_str((null)) defined in smdb.py
   function print_call_implies((null)) in line 132
      protection public
      12 lines of code
      1 parameters
      1 conditional paths
      uses function type_to_str((null)) defined in smdb.py
   function print_type_size((null),(null)) in line 144
      protection public
      12 lines of code
      2 parameters
      1 conditional paths
   function print_data_info((null),(null)) in line 156
      protection public
      7 lines of code
      2 parameters
      1 conditional paths
      uses function type_to_str((null)) defined in smdb.py
   function print_fn_ptrs((null)) in line 163
      protection public
      13 lines of code
      1 parameters
      1 conditional paths
      uses function get_function_pointers((null)) defined in smdb.py
   function print_functions((null)) in line 176
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
   function get_callers((null)) in line 183
      protection public
      10 lines of code
      1 parameters
      1 conditional paths
      uses function get_function_pointers((null)) defined in smdb.py
   function call_tree_helper((null),(null)) in line 194
      protection public
      17 lines of code
      2 parameters
      1 conditional paths
      uses function get_callers((null)) defined in smdb.py
   function print_call_tree((null)) in line 211
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function call_tree_helper((null),(null)) defined in smdb.py
   function function_type_value((null),(null)) in line 216
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
   function trace_callers((null),(null)) in line 222
      protection public
      17 lines of code
      2 parameters
      1 conditional paths
      uses function get_function_pointers((null)) defined in smdb.py
      uses variable int defined in missing-ident.c
   function trace_param_helper((null),(null),(null)) in line 239
      protection public
      22 lines of code
      3 parameters
      1 conditional paths
      uses function trace_callers((null),(null)) defined in smdb.py
      uses variable int defined in missing-ident.c
   function trace_param((null),(null)) in line 261
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
      uses function trace_param_helper((null),(null),(null)) defined in smdb.py
      uses function usage() defined in smdb.py
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/smatch_data_source.c
module smatch_data_source.c
   variable my_id in line 22
      protection public
   function get_source_parameter(struct expression *) in line 24
      protection public
      28 lines of code
      1 parameters
      8 conditional paths
      uses variable sym defined in smatch_type.c
      uses variable name defined in smatch_type.c
      uses variable param defined in smatch_parse_call_math.c
      uses macro definition NULL defined in sm_implied3.c
      uses variable buf defined in sm_fake_assignment.c
      uses function strip_expr(struct expression *) defined in smatch.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_SYMBOL defined in expression.h
      uses function expr_to_var_sym(struct expression *,struct symbol **) defined in smatch.h
      uses function get_param_num_from_sym(struct symbol *) defined in smatch.h
      uses function param_was_set(struct expression *) defined in smatch.h
      uses function snprintf(char *,int,char *,char *) defined in sm_overflow6.c
      uses function alloc_string(const char *) defined in smatch.h
      uses function free_string(char *) defined in smatch.h
   function get_source_assignment(struct expression *) in line 53
      protection public
      23 lines of code
      1 parameters
      5 conditional paths
      uses variable expression::right defined in expression.h
      uses variable name defined in smatch_type.c
      uses variable buf defined in sm_fake_assignment.c
      uses function get_assigned_expr(struct expression *) defined in check_assigned_expr.c
      uses function strip_expr(struct expression *) defined in smatch.h
      uses macro definition NULL defined in sm_implied3.c
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_CALL defined in expression.h
      uses variable expression::fn defined in expression.h
      uses enumvalue EXPR_SYMBOL defined in expression.h
      uses function is_fake_call(struct expression *) defined in smatch_extra.h
      uses function expr_to_str(struct expression *) defined in smatch.h
      uses function snprintf(char *,int,char *,char *) defined in sm_overflow6.c
      uses function alloc_string(const char *) defined in smatch.h
      uses function free_string(char *) defined in smatch.h
   function get_source_str(struct expression *) in line 77
      protection public
      9 lines of code
      1 parameters
      2 conditional paths
      uses function get_source_parameter(struct expression *) defined in smatch_data_source.c
      uses function get_source_assignment(struct expression *) defined in smatch_data_source.c
   function match_caller_info(struct expression *) in line 87
      protection public
      16 lines of code
      1 parameters
      2 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable expression::args defined in expression.h
      uses function get_source_str(struct expression *) defined in smatch_data_source.c
      uses function sql_insert_caller_info(struct expression *,int,int,const char *,const char *) defined in smatch.h
      uses enumvalue DATA_SOURCE defined in smatch.h
      uses function free_string(char *) defined in smatch.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function register_data_source(int) in line 104
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses variable my_id defined in smatch_data_source.c
      uses function add_hook(void *,enum hook_type) defined in smatch.h
      uses function match_caller_info(struct expression *) defined in smatch_data_source.c
      uses enumvalue FUNCTION_CALL_HOOK defined in smatch.h
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/smatch_db.c
module smatch_db.c
   macro definition sql_insert in line 31
      protection public
   variable db in line 26
      protection public
   variable mem_db in line 27
      protection public
   variable return_id in line 29
      protection public
   variable callbacks in line 65
      protection public
   variable member_callbacks in line 73
      protection public
   variable returned_state_callbacks in line 80
      protection public
   variable returned_member_callbacks in line 88
      protection public
   variable call_implies_cb_list in line 96
      protection public
   variable common_funcs in line 167
      protection public
   variable row_count in line 279
      protection public
   variable static_call_expr in line 413
      protection public
   variable static_returns_call in line 414
      protection public
   variable return_type in line 415
      protection public
   variable return_range_list in line 416
      protection public
   variable final_states in line 571
      protection public
   variable prev_func_id in line 572
      protection public
   variable ptr_names_done in line 626
      protection public
   variable ptr_names in line 627
      protection public
   function ALLOCATOR(def_callback,"definition db hook callbacks") in line 63
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function DECLARE_PTR_LIST(callback_list,struct def_callback) in line 64
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function ALLOCATOR(member_info_callback,"caller_info callbacks") in line 71
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function DECLARE_PTR_LIST(member_info_cb_list,struct member_info_callback) in line 72
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function ALLOCATOR(returned_state_callback,"returned state callbacks") in line 78
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function DECLARE_PTR_LIST(returned_state_cb_list,struct returned_state_callback) in line 79
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function ALLOCATOR(returned_member_callback,"returned member callbacks") in line 86
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function DECLARE_PTR_LIST(returned_member_cb_list,struct returned_member_callback) in line 87
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function ALLOCATOR(call_implies_callback,"call_implies callbacks") in line 94
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function DECLARE_PTR_LIST(call_implies_cb_list,struct call_implies_callback) in line 95
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function print_sql_output(void *,int,char **,char **) in line 98
      protection public
      12 lines of code
      4 parameters
      3 conditional paths
      uses function printf(char *,...) defined in test-be.c
      uses macro definition sm_printf defined in smatch.h
   function debug_sql(const char *) in line 111
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses variable option_debug defined in smatch.h
      uses macro definition sm_msg defined in smatch.h
      uses function sql_exec(int(*)(void *, int, char **, char **),void *,const char *) defined in smatch_db.c
      uses function print_sql_output(void *,int,char **,char **) defined in smatch_db.c
      uses macro definition NULL defined in sm_implied3.c
   function debug_mem_sql(const char *) in line 119
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses variable option_debug defined in smatch.h
      uses macro definition sm_msg defined in smatch.h
      uses function sql_mem_exec(int(*)(void *, int, char **, char **),void *,const char *) defined in smatch_db.c
      uses function print_sql_output(void *,int,char **,char **) defined in smatch_db.c
      uses macro definition NULL defined in sm_implied3.c
   function sql_exec(int(*)(void *, int, char **, char **),void *,const char *) in line 127
      protection public
      14 lines of code
      3 parameters
      3 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses variable option_no_db defined in smatch.c
      uses variable db defined in smatch_db.c
      uses variable def_callback::callback defined in smatch_db.c
   function sql_mem_exec(int(*)(void *, int, char **, char **),void *,const char *) in line 142
      protection public
      14 lines of code
      3 parameters
      3 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses variable mem_db defined in smatch_db.c
      uses variable def_callback::callback defined in smatch_db.c
   function sql_insert_return_states(int,const char *,int,int,const char *,const char *) in line 157
      protection public
      9 lines of code
      6 parameters
      2 conditional paths
      uses function strlen(char *) defined in sm_overflow6.c
      uses macro definition sql_insert defined in smatch_db.c
      uses function get_base_file(void) defined in smatch.h
      uses function get_function(void) defined in smatch.h
      uses variable __inline_fn defined in smatch.h
      uses variable return_id defined in smatch_db.c
      uses function fn_static(void) defined in smatch.h
      uses variable param defined in smatch_parse_call_math.c
   function is_common_function(const char *) in line 168
      protection public
      14 lines of code
      1 parameters
      3 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable common_funcs defined in smatch_db.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function sql_insert_caller_info(struct expression *,int,int,const char *,const char *) in line 183
      protection public
      35 lines of code
      5 parameters
      7 conditional paths
      uses variable option_info defined in smatch.c
      uses variable __inline_call defined in smatch.h
      uses function strlen(char *) defined in sm_overflow6.c
      uses function get_fnptr_name(struct expression *) defined in smatch.h
      uses variable expression::fn defined in expression.h
      uses macro definition mem_sql defined in smatch.h
      uses macro definition NULL defined in sm_implied3.c
      uses function get_base_file(void) defined in smatch.h
      uses function get_function(void) defined in smatch.h
      uses function is_static(struct expression *) defined in smatch.h
      uses variable param defined in smatch_parse_call_math.c
      uses function is_common_function(const char *) defined in smatch_db.c
      uses macro definition sm_msg defined in smatch.h
      uses function free_string(char *) defined in smatch.h
   function sql_insert_function_ptr(const char *,const char *) in line 219
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses macro definition sql_insert defined in smatch_db.c
      uses function get_base_file(void) defined in smatch.h
   function sql_insert_call_implies(int,int,const char *,const char *) in line 225
      protection public
      6 lines of code
      4 parameters
      1 conditional paths
      uses macro definition sql_insert defined in smatch_db.c
      uses function get_base_file(void) defined in smatch.h
      uses function get_function(void) defined in smatch.h
      uses variable __inline_fn defined in smatch.h
      uses function fn_static(void) defined in smatch.h
      uses variable param defined in smatch_parse_call_math.c
   function sql_insert_function_type_size(const char *,const char *) in line 232
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses macro definition sql_insert defined in smatch_db.c
      uses function get_base_file(void) defined in smatch.h
      uses function get_function(void) defined in smatch.h
      uses variable member defined in smdb.py
   function sql_insert_local_values(const char *,const char *) in line 237
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses macro definition sql_insert defined in smatch_db.c
      uses function get_base_file(void) defined in smatch.h
      uses variable name defined in smatch_type.c
   function sql_insert_function_type_value(const char *,const char *) in line 242
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses macro definition sql_insert defined in smatch_db.c
      uses function function_type_value((null),(null)) defined in smdb.py
      uses function get_base_file(void) defined in smatch.h
      uses function get_function(void) defined in smatch.h
   function sql_insert_function_type_info(int,const char *) in line 247
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses macro definition sql_insert defined in smatch_db.c
      uses function get_base_file(void) defined in smatch.h
      uses function get_function(void) defined in smatch.h
      uses function fn_static(void) defined in smatch.h
      uses variable param defined in smatch_parse_call_math.c
   function sql_insert_data_info(struct expression *,int,const char *) in line 253
      protection public
      9 lines of code
      3 parameters
      2 conditional paths
      uses function get_data_info_name(struct expression *) defined in smatch_db.c
      uses macro definition sql_insert defined in smatch_db.c
      uses function get_base_file(void) defined in smatch.h
   function get_static_filter(struct symbol *) in line 263
      protection public
      15 lines of code
      1 parameters
      2 conditional paths
      uses variable sym defined in smatch_type.c
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::modifiers defined in struct.c
      uses macro definition MOD_STATIC defined in symbol.h
      uses function snprintf(char *,int,char *,char *) defined in sm_overflow6.c
      uses function get_base_file(void) defined in smatch.h
      uses variable symbol::ident defined in struct.c
      uses variable ident::name defined in token.h
   function get_row_count(void *,int,char **,char **) in line 280
      protection public
      7 lines of code
      4 parameters
      2 conditional paths
      uses variable row_count defined in smatch_db.c
   function sql_select_return_states_pointer(const char *,struct expression *,int(*)(void *, int, char **, char **),void *) in line 288
      protection public
      15 lines of code
      4 parameters
      2 conditional paths
      uses variable ptr defined in sm_null_deref2.c
      uses function get_fnptr_name(struct expression *) defined in smatch.h
      uses variable expression::fn defined in expression.h
      uses macro definition run_sql defined in smatch.h
      uses variable def_callback::callback defined in smatch_db.c
      uses function info(struct position,const char *,...) defined in lib.c
   function sql_select_return_states(const char *,struct expression *,int(*)(void *, int, char **, char **),void *) in line 304
      protection public
      27 lines of code
      4 parameters
      5 conditional paths
      uses function is_fake_call(struct expression *) defined in smatch_extra.h
      uses variable expression::fn defined in expression.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_SYMBOL defined in expression.h
      uses variable expression::symbol defined in expression.h
      uses function sql_select_return_states_pointer(const char *,struct expression *,int(*)(void *, int, char **, char **),void *) defined in smatch_db.c
      uses variable def_callback::callback defined in smatch_db.c
      uses function info(struct position,const char *,...) defined in lib.c
      uses function inlinable(struct expression *) defined in smatch.h
      uses macro definition mem_sql defined in smatch.h
      uses variable row_count defined in smatch_db.c
      uses macro definition run_sql defined in smatch.h
      uses function get_row_count(void *,int,char **,char **) defined in smatch_db.c
      uses function get_static_filter(struct symbol *) defined in smatch_db.c
   function sql_select_call_implies(const char *,struct expression *,int(*)(void *, int, char **, char **)) in line 332
      protection public
      16 lines of code
      3 parameters
      3 conditional paths
      uses variable expression::fn defined in expression.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_SYMBOL defined in expression.h
      uses variable expression::symbol defined in expression.h
      uses function inlinable(struct expression *) defined in smatch.h
      uses macro definition mem_sql defined in smatch.h
      uses variable def_callback::callback defined in smatch_db.c
      uses macro definition NULL defined in sm_implied3.c
      uses macro definition run_sql defined in smatch.h
      uses function get_static_filter(struct symbol *) defined in smatch_db.c
   function sql_select_caller_info(const char *,struct symbol *,int(*)(void *, int, char **, char **)) in line 349
      protection public
      14 lines of code
      3 parameters
      2 conditional paths
      uses variable __inline_fn defined in smatch.h
      uses macro definition mem_sql defined in smatch.h
      uses variable def_callback::callback defined in smatch_db.c
      uses macro definition NULL defined in sm_implied3.c
      uses macro definition run_sql defined in smatch.h
      uses function get_static_filter(struct symbol *) defined in smatch_db.c
      uses variable sym defined in smatch_type.c
   function select_caller_info_hook(void(*)(const char *name, struct symbol *sym, char *key, char *value),int) in line 364
      protection public
      8 lines of code
      2 parameters
      1 conditional paths
      uses variable def_callback::hook_type defined in smatch_db.c
      uses variable def_callback::callback defined in smatch_db.c
      uses macro definition add_ptr_list defined in ptrlist.h
      uses variable callbacks defined in smatch_db.c
   function add_member_info_callback(int,void(*)(struct expression *call, int param, char *printed_name, struct sm_state *sm)) in line 378
      protection public
      8 lines of code
      2 parameters
      1 conditional paths
      uses variable member_info_callback::owner defined in smatch_db.c
      uses variable member_info_callback::callback defined in smatch_db.c
      uses variable def_callback::callback defined in smatch_db.c
      uses macro definition add_ptr_list defined in ptrlist.h
      uses variable member_callbacks defined in smatch_db.c
   function add_split_return_callback(void(*)(int return_id, char *return_ranges, struct expression *returned_expr)) in line 387
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses variable def_callback::callback defined in smatch_db.c
      uses macro definition add_ptr_list defined in ptrlist.h
      uses variable returned_state_callbacks defined in smatch_db.c
   function add_returned_member_callback(int,void(*)(int return_id, char *return_ranges, struct expression *expr, char *printed_name, struct smatch_state *state)) in line 395
      protection public
      8 lines of code
      2 parameters
      1 conditional paths
      uses variable returned_member_callback::owner defined in smatch_db.c
      uses variable returned_member_callback::callback defined in smatch_db.c
      uses variable def_callback::callback defined in smatch_db.c
      uses macro definition add_ptr_list defined in ptrlist.h
      uses variable returned_member_callbacks defined in smatch_db.c
   function select_call_implies_hook(int,void(*)(struct expression *arg, char *key, char *value)) in line 404
      protection public
      8 lines of code
      2 parameters
      1 conditional paths
      uses variable call_implies_callback::type defined in smatch_db.c
      uses variable call_implies_callback::callback defined in smatch_db.c
      uses variable def_callback::callback defined in smatch_db.c
      uses macro definition add_ptr_list defined in ptrlist.h
      uses variable call_implies_cb_list defined in smatch_db.c
   function db_return_callback(void *,int,char **,char **) in line 417
      protection public
      11 lines of code
      4 parameters
      2 conditional paths
      uses variable static_returns_call defined in smatch_db.c
      uses function call_results_to_rl(struct expression *,struct symbol *,char *,struct range_list **) defined in smatch_extra.h
      uses variable return_range_list defined in smatch_db.c
      uses function rl_union(struct range_list *,struct range_list *) defined in smatch_extra.h
   function db_return_vals(struct expression *) in line 429
      protection public
      32 lines of code
      1 parameters
      6 conditional paths
      uses variable buf defined in sm_fake_assignment.c
      uses function is_fake_call(struct expression *) defined in smatch_extra.h
      uses macro definition NULL defined in sm_implied3.c
      uses function snprintf(char *,int,char *,char *) defined in sm_overflow6.c
      uses function get_sm_state(int,const char *,struct symbol *) defined in smatch.h
      uses macro definition SMATCH_EXTRA defined in smatch.h
      uses function clone_rl(struct range_list *) defined in smatch_extra.h
      uses function estate_rl(struct smatch_state *) defined in smatch_estate.c
      uses variable sm_state::state defined in smatch.h
      uses variable static_returns_call defined in smatch_db.c
      uses function get_type(struct expression *) defined in smatch.h
      uses variable expression::fn defined in expression.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_SYMBOL defined in expression.h
      uses variable expression::symbol defined in expression.h
      uses variable return_range_list defined in smatch_db.c
      uses function inlinable(struct expression *) defined in smatch.h
      uses macro definition mem_sql defined in smatch.h
      uses function db_return_callback(void *,int,char **,char **) defined in smatch_db.c
      uses macro definition run_sql defined in smatch.h
      uses function get_static_filter(struct symbol *) defined in smatch_db.c
   function match_call_marker(struct expression *) in line 462
      protection public
      10 lines of code
      1 parameters
      1 conditional paths
      uses function sql_insert_caller_info(struct expression *,int,int,const char *,const char *) defined in smatch_db.c
      uses enumvalue INTERNAL defined in smatch.h
   function print_struct_members(struct expression *,struct expression *,int,struct stree *,void(*)(struct expression *call, int param, char *printed_name, struct sm_state *sm)) in line 473
      protection public
      44 lines of code
      5 parameters
      10 conditional paths
      uses variable name defined in smatch_type.c
      uses variable sym defined in smatch_type.c
      uses function strip_expr(struct expression *) defined in smatch.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_PREOP defined in expression.h
      uses variable expression::op defined in expression.h
      uses variable expression::unop defined in expression.h
      uses function expr_to_var_sym(struct expression *,struct symbol **) defined in smatch.h
      uses function strlen(char *) defined in sm_overflow6.c
      uses macro definition FOR_EACH_SM defined in avl.h
      uses variable sm_state::sym defined in smatch.h
      uses variable sm_state::name defined in smatch.h
      uses function snprintf(char *,int,char *,char *) defined in sm_overflow6.c
      uses variable def_callback::callback defined in smatch_db.c
      uses variable param defined in smatch_parse_call_math.c
      uses macro definition END_FOR_EACH_SM defined in avl.h
      uses function free_string(char *) defined in smatch.h
   function match_call_info(struct expression *) in line 518
      protection public
      24 lines of code
      1 parameters
      2 conditional paths
      uses variable name defined in smatch_type.c
      uses function get_fnptr_name(struct expression *) defined in smatch.h
      uses variable expression::fn defined in expression.h
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable member_callbacks defined in smatch_db.c
      uses function get_all_states_stree(int) defined in smatch.h
      uses variable member_info_callback::owner defined in smatch_db.c
      uses variable expression::args defined in expression.h
      uses function print_struct_members(struct expression *,struct expression *,int,struct stree *,void(*)(struct expression *call, int param, char *printed_name, struct sm_state *sm)) defined in smatch_db.c
      uses variable member_info_callback::callback defined in smatch_db.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses function free_stree(struct stree **) defined in avl.c
      uses function free_string(char *) defined in smatch.h
   function get_param(int,char **,struct symbol **) in line 543
      protection public
      27 lines of code
      3 parameters
      3 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable cur_func_sym defined in smatch.h
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::base_type defined in struct.c
      uses variable symbol::arguments defined in struct.c
      uses variable param defined in smatch_parse_call_math.c
      uses variable name defined in smatch_type.c
      uses variable sym defined in smatch_type.c
      uses macro definition TRUE defined in smatch.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses macro definition FALSE defined in smatch.h
   function caller_info_callback(void *,int,char **,char **) in line 573
      protection public
      46 lines of code
      4 parameters
      7 conditional paths
      uses variable param defined in smatch_parse_call_math.c
      uses variable name defined in smatch_type.c
      uses macro definition NULL defined in sm_implied3.c
      uses variable sym defined in smatch_type.c
      uses variable prev_func_id defined in smatch_db.c
      uses function __pop_fake_cur_stree(void) defined in smatch.h
      uses function merge_stree(struct stree **,struct stree *) defined in smatch_slist.c
      uses variable final_states defined in smatch_db.c
      uses function free_stree(struct stree **) defined in avl.c
      uses function __push_fake_cur_stree(void) defined in smatch.h
      uses function __unnullify_path(void) defined in smatch.h
      uses function get_param(int,char **,struct symbol **) defined in smatch_db.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable callbacks defined in smatch_db.c
      uses variable def_callback::hook_type defined in smatch_db.c
      uses variable def_callback::callback defined in smatch_db.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function get_direct_callers(struct symbol *) in line 620
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function sql_select_caller_info(const char *,struct symbol *,int(*)(void *, int, char **, char **)) defined in smatch_db.c
      uses variable sym defined in smatch_type.c
      uses function caller_info_callback(void *,int,char **,char **) defined in smatch_db.c
   function get_ptr_name(void *,int,char **,char **) in line 629
      protection public
      5 lines of code
      4 parameters
      1 conditional paths
      uses function insert_string(struct string_list **,const char *) defined in smatch.h
      uses variable ptr_names defined in smatch_db.c
      uses function alloc_string(const char *) defined in smatch.h
   function get_next_ptr_name(void) in line 635
      protection public
      12 lines of code
      1 parameters
      2 conditional paths
      uses variable ptr defined in sm_null_deref2.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable ptr_names defined in smatch_db.c
      uses function list_has_string(struct string_list *,const char *) defined in smatch.h
      uses variable ptr_names_done defined in smatch_db.c
      uses function insert_string(struct string_list **,const char *) defined in smatch.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses macro definition NULL defined in sm_implied3.c
   function get_ptr_names(const char *,const char *) in line 648
      protection public
      25 lines of code
      2 parameters
      4 conditional paths
      uses function snprintf(char *,int,char *,char *) defined in sm_overflow6.c
      uses variable name defined in smatch_type.c
      uses function ptr_list_size(struct ptr_list *) defined in ptrlist.c
      uses variable ptr_names defined in smatch_db.c
      uses macro definition run_sql defined in smatch.h
      uses function get_ptr_name(void *,int,char **,char **) defined in smatch_db.c
      uses macro definition NULL defined in sm_implied3.c
      uses function get_next_ptr_name(void) defined in smatch_db.c
   function match_data_from_db(struct symbol *) in line 674
      protection public
      54 lines of code
      1 parameters
      5 conditional paths
      uses variable sym defined in smatch_type.c
      uses variable symbol::ident defined in struct.c
      uses function __push_fake_cur_stree(void) defined in smatch.h
      uses function __unnullify_path(void) defined in smatch.h
      uses variable prev_func_id defined in smatch_db.c
      uses variable __inline_fn defined in smatch.h
      uses variable ptr defined in sm_null_deref2.c
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::modifiers defined in struct.c
      uses macro definition MOD_STATIC defined in symbol.h
      uses function get_ptr_names(const char *,const char *) defined in smatch_db.c
      uses function get_base_file(void) defined in smatch.h
      uses variable ident::name defined in token.h
      uses macro definition NULL defined in sm_implied3.c
      uses function ptr_list_size(struct ptr_list *) defined in ptrlist.c
      uses variable ptr_names defined in smatch_db.c
      uses function __free_ptr_list(struct ptr_list **) defined in ptrlist.c
      uses variable ptr_names_done defined in smatch_db.c
      uses function __pop_fake_cur_stree(void) defined in smatch.h
      uses function free_stree(struct stree **) defined in avl.c
      uses function get_direct_callers(struct symbol *) defined in smatch_db.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses macro definition run_sql defined in smatch.h
      uses function caller_info_callback(void *,int,char **,char **) defined in smatch_db.c
      uses function free_string(char *) defined in smatch.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses function merge_stree(struct stree **,struct stree *) defined in smatch_slist.c
      uses variable final_states defined in smatch_db.c
      uses macro definition FOR_EACH_SM defined in avl.h
      uses function __set_sm(struct sm_state *) defined in smatch.h
      uses macro definition END_FOR_EACH_SM defined in avl.h
   function call_implies_callbacks(void *,int,char **,char **) in line 729
      protection public
      27 lines of code
      4 parameters
      5 conditional paths
      uses variable static_call_expr defined in smatch_db.c
      uses macro definition NULL defined in sm_implied3.c
      uses variable param defined in smatch_parse_call_math.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable call_implies_cb_list defined in smatch_db.c
      uses variable call_implies_callback::type defined in smatch_db.c
      uses function get_argument_from_call_expr(struct expression_list *,int) defined in smatch.h
      uses variable expression::args defined in expression.h
      uses variable call_implies_callback::callback defined in smatch_db.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function match_call_implies(struct expression *) in line 757
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses variable static_call_expr defined in smatch_db.c
      uses function sql_select_call_implies(const char *,struct expression *,int(*)(void *, int, char **, char **)) defined in smatch_db.c
      uses function call_implies_callbacks(void *,int,char **,char **) defined in smatch_db.c
   function print_initializer_list(struct expression_list *,struct symbol *) in line 765
      protection public
      27 lines of code
      2 parameters
      6 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_INDEX defined in expression.h
      uses variable expression::idx_expression defined in expression.h
      uses enumvalue EXPR_INITIALIZER defined in expression.h
      uses variable expression::expr_list defined in expression.h
      uses variable struct_type defined in smdb.py
      uses enumvalue EXPR_IDENTIFIER defined in expression.h
      uses variable expression::expr_ident defined in expression.h
      uses variable expression::ident_expression defined in expression.h
      uses variable expression::symbol_name defined in expression.h
      uses function get_type(struct expression *) defined in smatch.h
      uses variable symbol::type defined in struct.c
      uses enumvalue SYM_FN defined in symbol.h
      uses function snprintf(char *,int,char *,char *) defined in sm_overflow6.c
      uses variable ident::name defined in token.h
      uses function sql_insert_function_ptr(const char *,const char *) defined in smatch_db.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function global_variable(struct symbol *) in line 793
      protection public
      20 lines of code
      1 parameters
      7 conditional paths
      uses variable struct_type defined in smdb.py
      uses variable sym defined in smatch_type.c
      uses variable symbol::ident defined in struct.c
      uses variable symbol::initializer defined in struct.c
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_INITIALIZER defined in expression.h
      uses enumvalue SYM_ARRAY defined in symbol.h
      uses enumvalue SYM_STRUCT defined in symbol.h
      uses function print_initializer_list(struct expression_list *,struct symbol *) defined in smatch_db.c
      uses variable expression::expr_list defined in expression.h
   function match_return_info(int,char *,struct expression *) in line 814
      protection public
      4 lines of code
      3 parameters
      1 conditional paths
      uses function sql_insert_return_states(int,const char *,int,int,const char *,const char *) defined in smatch_db.c
      uses variable return_id defined in smatch_db.c
      uses enumvalue INTERNAL defined in smatch.h
   function call_return_state_hooks_conditional(struct expression *) in line 819
      protection public
      41 lines of code
      1 parameters
      3 conditional paths
      uses variable final_pass defined in smatch.h
      uses function __push_fake_cur_stree(void) defined in smatch.h
      uses function __split_whole_condition(struct expression *) defined in smatch.h
      uses variable expression::conditional defined in expression.h
      uses function get_implied_rl(struct expression *,struct range_list **) defined in smatch_extra.h
      uses variable expression::cond_true defined in expression.h
      uses function cast_rl(struct symbol *,struct range_list *) defined in smatch_extra.h
      uses function cur_func_return_type(void) defined in smatch.h
      uses function alloc_whole_rl(struct symbol *) defined in smatch_extra.h
      uses function get_type(struct expression *) defined in smatch.h
      uses function show_rl(struct range_list *) defined in smatch_extra.h
      uses variable return_id defined in smatch_db.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable returned_state_callbacks defined in smatch_db.c
      uses variable returned_state_callback::callback defined in smatch_db.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses function __push_true_states(void) defined in smatch.h
      uses function __use_false_states(void) defined in smatch.h
      uses variable expression::cond_false defined in expression.h
      uses function __merge_true_states(void) defined in smatch.h
      uses function __free_fake_cur_stree(void) defined in smatch.h
   function call_return_state_hooks_compare(struct expression *) in line 861
      protection public
      31 lines of code
      1 parameters
      1 conditional paths
      uses variable final_pass defined in smatch.h
      uses function __push_fake_cur_stree(void) defined in smatch.h
      uses function __split_whole_condition(struct expression *) defined in smatch.h
      uses function alloc_sname(const char *) defined in smatch_slist.c
      uses variable return_id defined in smatch_db.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable returned_state_callbacks defined in smatch_db.c
      uses variable returned_state_callback::callback defined in smatch_db.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses function __push_true_states(void) defined in smatch.h
      uses function __use_false_states(void) defined in smatch.h
      uses function __merge_true_states(void) defined in smatch.h
      uses function __free_fake_cur_stree(void) defined in smatch.h
   function split_helper(struct sm_state *,struct expression *) in line 893
      protection public
      64 lines of code
      2 parameters
      6 conditional paths
      uses variable buf defined in sm_fake_assignment.c
      uses variable sm_state::merged defined in smatch.h
      uses function too_many_possible(struct sm_state *) defined in smatch_slist.c
      uses function ptr_list_size(struct ptr_list *) defined in ptrlist.c
      uses variable sm_state::possible defined in smatch.h
      uses function stree_count(const struct stree *) defined in avl.c
      uses function __get_cur_stree(void) defined in smatch.h
      uses variable option_info defined in smatch.c
      uses function expr_lte_to_param(struct expression *,int) defined in smatch.h
      uses function clone_stree(struct stree *) defined in avl.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses function __push_fake_cur_stree(void) defined in smatch.h
      uses macro definition FOR_EACH_SM defined in avl.h
      uses function __set_sm(struct sm_state *) defined in smatch.h
      uses macro definition END_FOR_EACH_SM defined in avl.h
      uses function overwrite_states_using_pool(struct sm_state *) defined in smatch.h
      uses function cast_rl(struct symbol *,struct range_list *) defined in smatch_extra.h
      uses function cur_func_return_type(void) defined in smatch.h
      uses function estate_rl(struct smatch_state *) defined in smatch_estate.c
      uses variable sm_state::state defined in smatch.h
      uses function show_rl(struct range_list *) defined in smatch_extra.h
      uses function snprintf(char *,int,char *,char *) defined in sm_overflow6.c
      uses function alloc_sname(const char *) defined in smatch_slist.c
      uses variable return_id defined in smatch_db.c
      uses variable returned_state_callbacks defined in smatch_db.c
      uses variable returned_state_callback::callback defined in smatch_db.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses function __free_fake_cur_stree(void) defined in smatch.h
      uses function free_stree(struct stree **) defined in avl.c
   function call_return_state_hooks_split_possible(struct expression *) in line 958
      protection public
      62 lines of code
      1 parameters
      7 conditional paths
      uses variable buf defined in sm_fake_assignment.c
      uses function expr_equal_to_param(struct expression *,int) defined in smatch.h
      uses function get_sm_state_expr(int,struct expression *) defined in smatch.h
      uses macro definition SMATCH_EXTRA defined in smatch.h
      uses variable sm_state::merged defined in smatch.h
      uses function too_many_possible(struct sm_state *) defined in smatch_slist.c
      uses function ptr_list_size(struct ptr_list *) defined in ptrlist.c
      uses variable sm_state::possible defined in smatch.h
      uses function stree_count(const struct stree *) defined in avl.c
      uses function __get_cur_stree(void) defined in smatch.h
      uses variable option_info defined in smatch.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses function __push_fake_cur_stree(void) defined in smatch.h
      uses function overwrite_states_using_pool(struct sm_state *) defined in smatch.h
      uses function cast_rl(struct symbol *,struct range_list *) defined in smatch_extra.h
      uses function cur_func_return_type(void) defined in smatch.h
      uses function estate_rl(struct smatch_state *) defined in smatch_estate.c
      uses variable sm_state::state defined in smatch.h
      uses function show_rl(struct range_list *) defined in smatch_extra.h
      uses function expr_lte_to_param(struct expression *,int) defined in smatch.h
      uses function snprintf(char *,int,char *,char *) defined in sm_overflow6.c
      uses function alloc_sname(const char *) defined in smatch_slist.c
      uses variable return_id defined in smatch_db.c
      uses variable returned_state_callbacks defined in smatch_db.c
      uses variable returned_state_callback::callback defined in smatch_db.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses function __free_fake_cur_stree(void) defined in smatch.h
   function call_return_state_hooks_split_success_fail(struct expression *) in line 1021
      protection public
      52 lines of code
      1 parameters
      7 conditional paths
      uses variable final_pass defined in smatch.h
      uses variable option_project defined in smatch.c
      uses enumvalue PROJ_KERNEL defined in smatch.h
      uses function stree_count(const struct stree *) defined in avl.c
      uses function __get_cur_stree(void) defined in smatch.h
      uses function get_value(struct expression *,sval_t *) defined in smatch.h
      uses function get_implied_rl(struct expression *,struct range_list **) defined in smatch_extra.h
      uses function rl_min(struct range_list *) defined in smatch_extra.h
      uses function rl_max(struct range_list *) defined in smatch_extra.h
      uses function __push_fake_cur_stree(void) defined in smatch.h
      uses function __split_whole_condition(struct expression *) defined in smatch.h
      uses function show_rl(struct range_list *) defined in smatch_extra.h
      uses function rl_filter(struct range_list *,struct range_list *) defined in smatch_extra.h
      uses function rl_zero(void) defined in smatch_extra.h
      uses variable return_id defined in smatch_db.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable returned_state_callbacks defined in smatch_db.c
      uses variable returned_state_callback::callback defined in smatch_db.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses function __push_true_states(void) defined in smatch.h
      uses function __use_false_states(void) defined in smatch.h
      uses function alloc_sname(const char *) defined in smatch_slist.c
      uses function __merge_true_states(void) defined in smatch.h
      uses function __free_fake_cur_stree(void) defined in smatch.h
   function get_return_ranges_str(struct expression *) in line 1074
      protection public
      43 lines of code
      1 parameters
      7 conditional paths
      uses variable buf defined in sm_fake_assignment.c
      uses function alloc_sname(const char *) defined in smatch_slist.c
      uses function get_implied_value(struct expression *,sval_t *) defined in smatch.h
      uses function sval_to_str(sval_t) defined in smatch.h
      uses function expr_equal_to_param(struct expression *,int) defined in smatch.h
      uses function get_value_in_terms_of_parameter_math(struct expression *) defined in smatch.h
      uses function get_implied_rl(struct expression *,struct range_list **) defined in smatch_extra.h
      uses function cast_rl(struct symbol *,struct range_list *) defined in smatch_extra.h
      uses function cur_func_return_type(void) defined in smatch.h
      uses function show_rl(struct range_list *) defined in smatch_extra.h
      uses function alloc_whole_rl(struct symbol *) defined in smatch_extra.h
      uses function get_type(struct expression *) defined in smatch.h
      uses function snprintf(char *,int,char *,char *) defined in sm_overflow6.c
      uses function expr_lte_to_param(struct expression *,int) defined in smatch.h
   function is_boolean(struct expression *) in line 1118
      protection public
      10 lines of code
      1 parameters
      3 conditional paths
      uses function get_implied_rl(struct expression *,struct range_list **) defined in smatch_extra.h
      uses function rl_min(struct range_list *) defined in smatch_extra.h
      uses function rl_max(struct range_list *) defined in smatch_extra.h
   function is_conditional(struct expression *) in line 1129
      protection public
      8 lines of code
      1 parameters
      3 conditional paths
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_CONDITIONAL defined in expression.h
      uses enumvalue EXPR_SELECT defined in expression.h
   function splitable_function_call(struct expression *) in line 1138
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses variable buf defined in sm_fake_assignment.c
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_CALL defined in expression.h
      uses function snprintf(char *,int,char *,char *) defined in sm_overflow6.c
      uses function get_sm_state(int,const char *,struct symbol *) defined in smatch.h
      uses macro definition SMATCH_EXTRA defined in smatch.h
      uses macro definition NULL defined in sm_implied3.c
      uses function split_helper(struct sm_state *,struct expression *) defined in smatch_db.c
   function call_return_state_hooks(struct expression *) in line 1150
      protection public
      36 lines of code
      1 parameters
      7 conditional paths
      uses function strip_expr(struct expression *) defined in smatch.h
      uses function get_implied_value(struct expression *,sval_t *) defined in smatch.h
      uses function is_condition(struct expression *) defined in smatch.h
      uses function is_boolean(struct expression *) defined in smatch_db.c
      uses function call_return_state_hooks_compare(struct expression *) defined in smatch_db.c
      uses function is_conditional(struct expression *) defined in smatch_db.c
      uses function call_return_state_hooks_conditional(struct expression *) defined in smatch_db.c
      uses function call_return_state_hooks_split_possible(struct expression *) defined in smatch_db.c
      uses function call_return_state_hooks_split_success_fail(struct expression *) defined in smatch_db.c
      uses function splitable_function_call(struct expression *) defined in smatch_db.c
      uses function get_return_ranges_str(struct expression *) defined in smatch_db.c
      uses variable return_id defined in smatch_db.c
      uses function stree_count(const struct stree *) defined in avl.c
      uses function __get_cur_stree(void) defined in smatch.h
      uses function match_return_info(int,char *,struct expression *) defined in smatch_db.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable returned_state_callbacks defined in smatch_db.c
      uses variable returned_state_callback::callback defined in smatch_db.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function print_returned_struct_members(int,char *,struct expression *) in line 1187
      protection public
      40 lines of code
      3 parameters
      6 conditional paths
      uses variable name defined in smatch_type.c
      uses function get_type(struct expression *) defined in smatch.h
      uses enumvalue SYM_PTR defined in symbol.h
      uses function expr_to_var(struct expression *) defined in smatch.h
      uses function strcpy(char *,char *,int) defined in sm_overflow3.c
      uses function strlen(char *) defined in sm_overflow6.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable returned_member_callbacks defined in smatch_db.c
      uses function __get_cur_stree(void) defined in smatch.h
      uses macro definition FOR_EACH_MY_SM defined in avl.h
      uses variable returned_member_callback::owner defined in smatch_db.c
      uses variable sm_state::name defined in smatch.h
      uses variable returned_member_callback::callback defined in smatch_db.c
      uses variable return_id defined in smatch_db.c
      uses variable sm_state::state defined in smatch.h
      uses function snprintf(char *,int,char *,char *) defined in sm_overflow6.c
      uses macro definition END_FOR_EACH_SM defined in avl.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses function free_string(char *) defined in smatch.h
   function reset_memdb(void) in line 1228
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses macro definition mem_sql defined in smatch.h
      uses macro definition NULL defined in sm_implied3.c
   function match_end_func_info(struct symbol *) in line 1235
      protection public
      8 lines of code
      1 parameters
      3 conditional paths
      uses function __path_is_null(void) defined in smatch.h
      uses function call_return_state_hooks(struct expression *) defined in smatch_db.c
      uses macro definition NULL defined in sm_implied3.c
      uses variable __inline_fn defined in smatch.h
      uses function reset_memdb(void) defined in smatch_db.c
   function init_memdb(void) in line 1244
      protection public
      48 lines of code
      1 parameters
      6 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses variable buf defined in sm_fake_assignment.c
      uses variable mem_db defined in smatch_db.c
      uses function printf(char *,...) defined in test-be.c
      uses macro definition ARRAY_SIZE defined in lib.h
      uses function open_data_file(const char *) defined in smatch.h
   function open_smatch_db(void) in line 1293
      protection public
      16 lines of code
      1 parameters
      3 conditional paths
      uses variable option_no_db defined in smatch.c
      uses function init_memdb(void) defined in smatch_db.c
      uses variable db defined in smatch_db.c
      uses macro definition NULL defined in sm_implied3.c
   function register_common_funcs(void) in line 1310
      protection public
      26 lines of code
      1 parameters
      6 conditional paths
      uses macro definition func defined in preprocessor1.c
      uses variable option_project defined in smatch.c
      uses enumvalue PROJ_NONE defined in smatch.h
      uses function strcpy(char *,char *,int) defined in sm_overflow3.c
      uses function snprintf(char *,int,char *,char *) defined in sm_overflow6.c
      uses variable option_project_str defined in smatch.c
      uses function get_tokens_file(const char *) defined in smatch.h
      uses enumvalue TOKEN_STREAMBEGIN defined in token.h
      uses variable token::next defined in token.h
      uses enumvalue TOKEN_STREAMEND defined in token.h
      uses enumvalue TOKEN_IDENT defined in token.h
      uses function alloc_string(const char *) defined in smatch.h
      uses function show_ident(const struct ident *) defined in token.h
      uses variable token::ident defined in token.h
      uses macro definition add_ptr_list defined in ptrlist.h
      uses variable common_funcs defined in smatch_db.c
   function register_definition_db_callbacks(int) in line 1338
      protection public
      15 lines of code
      1 parameters
      1 conditional paths
      uses function add_hook(void *,enum hook_type) defined in smatch.h
      uses function match_call_info(struct expression *) defined in smatch_db.c
      uses enumvalue FUNCTION_CALL_HOOK defined in smatch.h
      uses function global_variable(struct symbol *) defined in smatch_db.c
      uses enumvalue BASE_HOOK defined in smatch.h
      uses enumvalue DECLARATION_HOOK defined in smatch.h
      uses function add_split_return_callback(void(*)(int return_id, char *return_ranges, struct expression *returned_expr)) defined in smatch_db.c
      uses function match_return_info(int,char *,struct expression *) defined in smatch_db.c
      uses function print_returned_struct_members(int,char *,struct expression *) defined in smatch_db.c
      uses function call_return_state_hooks(struct expression *) defined in smatch_db.c
      uses enumvalue RETURN_HOOK defined in smatch.h
      uses function match_end_func_info(struct symbol *) defined in smatch_db.c
      uses enumvalue END_FUNC_HOOK defined in smatch.h
      uses function match_data_from_db(struct symbol *) defined in smatch_db.c
      uses enumvalue FUNC_DEF_HOOK defined in smatch.h
      uses function match_call_implies(struct expression *) defined in smatch_db.c
      uses enumvalue CALL_HOOK_AFTER_INLINE defined in smatch.h
      uses function register_common_funcs(void) defined in smatch_db.c
   function register_db_call_marker(int) in line 1354
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function add_hook(void *,enum hook_type) defined in smatch.h
      uses function match_call_marker(struct expression *) defined in smatch_db.c
      uses enumvalue FUNCTION_CALL_HOOK defined in smatch.h
   function return_state_to_var_sym(struct expression *,int,char *,struct symbol **) in line 1359
      protection public
      38 lines of code
      4 parameters
      9 conditional paths
      uses variable name defined in smatch_type.c
      uses macro definition NULL defined in sm_implied3.c
      uses variable sym defined in smatch_type.c
      uses variable param defined in smatch_parse_call_math.c
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_ASSIGNMENT defined in expression.h
      uses function expr_to_var_sym(struct expression *,struct symbol **) defined in smatch.h
      uses variable expression::left defined in expression.h
      uses function snprintf(char *,int,char *,char *) defined in sm_overflow6.c
      uses function free_string(char *) defined in smatch.h
      uses function alloc_string(const char *) defined in smatch.h
      uses function strip_expr(struct expression *) defined in smatch.h
      uses variable expression::right defined in expression.h
      uses enumvalue EXPR_CALL defined in expression.h
      uses function get_argument_from_call_expr(struct expression_list *,int) defined in smatch.h
      uses variable expression::args defined in expression.h
      uses function get_variable_from_key(struct expression *,char *,struct symbol **) defined in smatch_db.c
   function get_variable_from_key(struct expression *,char *,struct symbol **) in line 1398
      protection public
      43 lines of code
      3 parameters
      9 conditional paths
      uses variable buf defined in sm_fake_assignment.c
      uses macro definition NULL defined in sm_implied3.c
      uses function strip_expr(struct expression *) defined in smatch.h
      uses function expr_to_var_sym(struct expression *,struct symbol **) defined in smatch.h
      uses variable sym defined in smatch_type.c
      uses enumvalue EXPR_PREOP defined in expression.h
      uses function snprintf(char *,int,char *,char *) defined in sm_overflow6.c
      uses function free_string(char *) defined in smatch.h
      uses function alloc_string(const char *) defined in smatch.h
   function get_param_name(struct sm_state *) in line 1442
      protection public
      23 lines of code
      1 parameters
      5 conditional paths
      uses variable buf defined in sm_fake_assignment.c
      uses variable sm_state::sym defined in smatch.h
      uses variable symbol::ident defined in struct.c
      uses macro definition NULL defined in sm_implied3.c
      uses variable ident::name defined in token.h
      uses function strlen(char *) defined in sm_overflow6.c
      uses variable sm_state::name defined in smatch.h
      uses function snprintf(char *,int,char *,char *) defined in sm_overflow6.c
   function get_data_info_name(struct expression *) in line 1466
      protection public
      25 lines of code
      1 parameters
      7 conditional paths
      uses variable sym defined in smatch_type.c
      uses variable name defined in smatch_type.c
      uses variable buf defined in sm_fake_assignment.c
      uses macro definition NULL defined in sm_implied3.c
      uses function strip_expr(struct expression *) defined in smatch.h
      uses function get_member_name(struct expression *) defined in smatch.h
      uses function expr_to_var_sym(struct expression *,struct symbol **) defined in smatch.h
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::modifiers defined in struct.c
      uses macro definition MOD_TOPLEVEL defined in symbol.h
      uses macro definition MOD_STATIC defined in symbol.h
      uses function snprintf(char *,int,char *,char *) defined in sm_overflow6.c
      uses function alloc_sname(const char *) defined in smatch_slist.c
      uses function free_string(char *) defined in smatch.h
   variable def_callback::callback in line 61
      protection public
   variable def_callback::hook_type in line 60
      protection public
   variable member_info_callback::callback in line 69
      protection public
   variable member_info_callback::owner in line 68
      protection public
   variable returned_state_callback::callback in line 76
      protection public
   variable returned_member_callback::callback in line 84
      protection public
   variable returned_member_callback::owner in line 83
      protection public
   variable call_implies_callback::callback in line 92
      protection public
   variable call_implies_callback::type in line 91
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/smatch_equiv.c
module smatch_equiv.c
   function ALLOCATOR(relation,"related variables") in line 34
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function alloc_relation(const char *,struct symbol *) in line 36
      protection public
      9 lines of code
      2 parameters
      1 conditional paths
      uses variable relation::name defined in smatch_extra.h
      uses function alloc_string(const char *) defined in smatch.h
      uses variable name defined in smatch_type.c
      uses variable relation::sym defined in smatch_extra.h
      uses variable sym defined in smatch_type.c
   function clone_related_list(struct related_list *) in line 46
      protection public
      11 lines of code
      1 parameters
      1 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses macro definition add_ptr_list defined in ptrlist.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function cmp_relation(struct relation *,struct relation *) in line 58
      protection public
      18 lines of code
      2 parameters
      5 conditional paths
   function get_shared_relations(struct related_list *,struct related_list *) in line 77
      protection public
      27 lines of code
      2 parameters
      1 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses macro definition PREPARE_PTR_LIST defined in ptrlist.h
      uses variable one defined in sm_equiv1.c
      uses variable two defined in sm_equiv1.c
      uses function cmp_relation(struct relation *,struct relation *) defined in smatch_equiv.c
      uses macro definition NEXT_PTR_LIST defined in ptrlist.h
      uses macro definition add_ptr_list defined in ptrlist.h
      uses macro definition FINISH_PTR_LIST defined in ptrlist.h
   function debug_addition(struct related_list *,const char *) in line 105
      protection public
      14 lines of code
      2 parameters
      2 conditional paths
      uses variable option_debug_related defined in smatch.c
      uses macro definition sm_printf defined in smatch.h
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable relation::name defined in smatch_extra.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses variable name defined in smatch_type.c
   function add_related(struct related_list **,const char *,struct symbol *) in line 120
      protection public
      23 lines of code
      3 parameters
      3 conditional paths
      uses variable relation::name defined in smatch_extra.h
      uses variable name defined in smatch_type.c
      uses variable sym defined in smatch_type.c
      uses function debug_addition(struct related_list *,const char *) defined in smatch_equiv.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses function cmp_relation(struct relation *,struct relation *) defined in smatch_equiv.c
      uses function alloc_relation(const char *,struct symbol *) defined in smatch_equiv.c
      uses macro definition INSERT_CURRENT defined in ptrlist.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses macro definition add_ptr_list defined in ptrlist.h
   function del_related(struct smatch_state *,const char *,struct symbol *) in line 144
      protection public
      18 lines of code
      3 parameters
      3 conditional paths
      uses variable relation::name defined in smatch_extra.h
      uses variable name defined in smatch_type.c
      uses variable sym defined in smatch_type.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses function estate_related(struct smatch_state *) defined in smatch_estate.c
      uses function cmp_relation(struct relation *,struct relation *) defined in smatch_equiv.c
      uses macro definition DELETE_CURRENT_PTR defined in ptrlist.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function del_equiv(struct smatch_state *,const char *,struct symbol *) in line 163
      protection public
      4 lines of code
      3 parameters
      1 conditional paths
      uses function del_related(struct smatch_state *,const char *,struct symbol *) defined in smatch_equiv.c
      uses variable name defined in smatch_type.c
      uses variable sym defined in smatch_type.c
   function remove_from_equiv(const char *,struct symbol *) in line 168
      protection public
      28 lines of code
      2 parameters
      1 conditional paths
      uses function get_sm_state(int,const char *,struct symbol *) defined in smatch.h
      uses macro definition SMATCH_EXTRA defined in smatch.h
      uses variable name defined in smatch_type.c
      uses variable sym defined in smatch_type.c
      uses function get_dinfo(struct smatch_state *) defined in smatch_estate.c
      uses variable sm_state::state defined in smatch.h
      uses variable data_info::related defined in smatch_extra.h
      uses function clone_estate(struct smatch_state *) defined in smatch_estate.c
      uses function del_equiv(struct smatch_state *,const char *,struct symbol *) defined in smatch_equiv.c
      uses function ptr_list_size(struct ptr_list *) defined in ptrlist.c
      uses macro definition NULL defined in sm_implied3.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses function clone_sm(struct sm_state *) defined in smatch_slist.c
      uses variable sm_state::name defined in smatch.h
      uses variable relation::name defined in smatch_extra.h
      uses variable sm_state::sym defined in smatch.h
      uses variable relation::sym defined in smatch_extra.h
      uses function __set_sm(struct sm_state *) defined in smatch.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function remove_from_equiv_expr(struct expression *) in line 197
      protection public
      12 lines of code
      1 parameters
      1 conditional paths
      uses variable name defined in smatch_type.c
      uses variable sym defined in smatch_type.c
      uses function expr_to_var_sym(struct expression *,struct symbol **) defined in smatch.h
      uses function remove_from_equiv(const char *,struct symbol *) defined in smatch_equiv.c
      uses function free_string(char *) defined in smatch.h
   function set_related(struct smatch_state *,struct related_list *) in line 210
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
      uses function estate_related(struct smatch_state *) defined in smatch_estate.c
      uses function get_dinfo(struct smatch_state *) defined in smatch_estate.c
      uses variable data_info::related defined in smatch_extra.h
   function set_equiv(struct expression *,struct expression *) in line 222
      protection public
      42 lines of code
      2 parameters
      1 conditional paths
      uses function expr_to_var_sym(struct expression *,struct symbol **) defined in smatch.h
      uses function get_sm_state_expr(int,struct expression *) defined in smatch.h
      uses macro definition SMATCH_EXTRA defined in smatch.h
      uses function set_state_expr(int,struct expression *,struct smatch_state *) defined in smatch.h
      uses function alloc_estate_whole(struct symbol *) defined in smatch_estate.c
      uses function get_type(struct expression *) defined in smatch.h
      uses function remove_from_equiv(const char *,struct symbol *) defined in smatch_equiv.c
      uses function clone_related_list(struct related_list *) defined in smatch_equiv.c
      uses function estate_related(struct smatch_state *) defined in smatch_estate.c
      uses variable sm_state::state defined in smatch.h
      uses function add_related(struct related_list **,const char *,struct symbol *) defined in smatch_equiv.c
      uses variable sm_state::name defined in smatch.h
      uses variable sm_state::sym defined in smatch.h
      uses function clone_estate(struct smatch_state *) defined in smatch_estate.c
      uses function get_dinfo(struct smatch_state *) defined in smatch_estate.c
      uses variable data_info::related defined in smatch_extra.h
      uses function call_extra_mod_hooks(const char *,struct symbol *,struct smatch_state *) defined in smatch_extra.c
      uses function clone_estate_cast(struct symbol *,struct smatch_state *) defined in smatch_estate.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses function clone_sm(struct sm_state *) defined in smatch_slist.c
      uses variable relation::name defined in smatch_extra.h
      uses variable relation::sym defined in smatch_extra.h
      uses function __set_sm(struct sm_state *) defined in smatch.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses function free_string(char *) defined in smatch.h
   function set_equiv_state_expr(int,struct expression *,struct smatch_state *) in line 265
      protection public
      14 lines of code
      3 parameters
      1 conditional paths
      uses function get_state_expr(int,struct expression *) defined in smatch.h
      uses macro definition SMATCH_EXTRA defined in smatch.h
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses function get_dinfo(struct smatch_state *) defined in smatch_estate.c
      uses function set_state(int,const char *,struct symbol *,struct smatch_state *) defined in smatch.h
      uses variable relation::name defined in smatch_extra.h
      uses variable relation::sym defined in smatch_extra.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/smatch_estate.c
module smatch_estate.c
   macro definition __USE_ISOC99 in line 25
      protection public
   function merge_estates(struct smatch_state *,struct smatch_state *) in line 33
      protection public
      20 lines of code
      2 parameters
      1 conditional paths
      uses function estates_equiv(struct smatch_state *,struct smatch_state *) defined in smatch_estate.c
      uses variable s1 defined in designated-init.c
      uses function rl_union(struct range_list *,struct range_list *) defined in smatch_extra.h
      uses function estate_rl(struct smatch_state *) defined in smatch_estate.c
      uses function alloc_estate_rl(struct range_list *) defined in smatch_estate.c
      uses function get_shared_relations(struct related_list *,struct related_list *) defined in smatch_equiv.c
      uses function estate_related(struct smatch_state *) defined in smatch_estate.c
      uses function set_related(struct smatch_state *,struct related_list *) defined in smatch_equiv.c
      uses function estate_has_hard_max(struct smatch_state *) defined in smatch_estate.c
      uses function estate_set_hard_max(struct smatch_state *) defined in smatch_estate.c
      uses function estate_set_fuzzy_max(struct smatch_state *,sval_t) defined in smatch_estate.c
      uses function sval_max(sval_t,sval_t) defined in smatch.h
      uses function estate_get_fuzzy_max(struct smatch_state *) defined in smatch_estate.c
   function get_dinfo(struct smatch_state *) in line 54
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses variable smatch_state::data defined in smatch.h
   function estate_rl(struct smatch_state *) in line 61
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses function get_dinfo(struct smatch_state *) defined in smatch_estate.c
      uses variable data_info::value_ranges defined in smatch_extra.h
   function estate_related(struct smatch_state *) in line 68
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses function get_dinfo(struct smatch_state *) defined in smatch_estate.c
      uses variable data_info::related defined in smatch_extra.h
   function estate_get_fuzzy_max(struct smatch_state *) in line 75
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses function get_dinfo(struct smatch_state *) defined in smatch_estate.c
      uses variable data_info::fuzzy_max defined in smatch_extra.h
   function estate_has_fuzzy_max(struct smatch_state *) in line 84
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses function estate_get_fuzzy_max(struct smatch_state *) defined in smatch_estate.c
   function estate_set_fuzzy_max(struct smatch_state *,sval_t) in line 91
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
      uses function rl_has_sval(struct range_list *,sval_t) defined in smatch_extra.h
      uses function estate_rl(struct smatch_state *) defined in smatch_estate.c
      uses function get_dinfo(struct smatch_state *) defined in smatch_estate.c
      uses variable data_info::fuzzy_max defined in smatch_extra.h
   function estate_copy_fuzzy_max(struct smatch_state *,struct smatch_state *) in line 98
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
      uses function estate_has_fuzzy_max(struct smatch_state *) defined in smatch_estate.c
      uses function estate_set_fuzzy_max(struct smatch_state *,sval_t) defined in smatch_estate.c
      uses function estate_get_fuzzy_max(struct smatch_state *) defined in smatch_estate.c
   function estate_clear_fuzzy_max(struct smatch_state *) in line 105
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses function get_dinfo(struct smatch_state *) defined in smatch_estate.c
      uses variable data_info::fuzzy_max defined in smatch_extra.h
   function estate_has_hard_max(struct smatch_state *) in line 112
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses function get_dinfo(struct smatch_state *) defined in smatch_estate.c
      uses variable data_info::hard_max defined in smatch_extra.h
   function estate_set_hard_max(struct smatch_state *) in line 119
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function get_dinfo(struct smatch_state *) defined in smatch_estate.c
      uses variable data_info::hard_max defined in smatch_extra.h
   function estate_clear_hard_max(struct smatch_state *) in line 124
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function get_dinfo(struct smatch_state *) defined in smatch_estate.c
      uses variable data_info::hard_max defined in smatch_extra.h
   function estate_get_hard_max(struct smatch_state *,sval_t *) in line 129
      protection public
      7 lines of code
      2 parameters
      1 conditional paths
      uses function get_dinfo(struct smatch_state *) defined in smatch_estate.c
      uses function estate_rl(struct smatch_state *) defined in smatch_estate.c
      uses function rl_max(struct range_list *) defined in smatch_extra.h
   function estate_min(struct smatch_state *) in line 137
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function rl_min(struct range_list *) defined in smatch_extra.h
      uses function estate_rl(struct smatch_state *) defined in smatch_estate.c
   function estate_max(struct smatch_state *) in line 142
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function rl_max(struct range_list *) defined in smatch_extra.h
      uses function estate_rl(struct smatch_state *) defined in smatch_estate.c
   function estate_type(struct smatch_state *) in line 147
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function rl_max(struct range_list *) defined in smatch_extra.h
      uses function estate_rl(struct smatch_state *) defined in smatch_estate.c
      uses variable sval_t::type defined in smatch.h
   function rlists_equiv(struct related_list *,struct related_list *) in line 152
      protection public
      24 lines of code
      2 parameters
      6 conditional paths
      uses macro definition PREPARE_PTR_LIST defined in ptrlist.h
      uses variable one defined in sm_equiv1.c
      uses variable two defined in sm_equiv1.c
      uses variable relation::sym defined in smatch_extra.h
      uses variable relation::name defined in smatch_extra.h
      uses macro definition NEXT_PTR_LIST defined in ptrlist.h
      uses macro definition FINISH_PTR_LIST defined in ptrlist.h
   function estates_equiv(struct smatch_state *,struct smatch_state *) in line 177
      protection public
      12 lines of code
      2 parameters
      1 conditional paths
      uses variable one defined in sm_equiv1.c
      uses variable two defined in sm_equiv1.c
      uses function rlists_equiv(struct related_list *,struct related_list *) defined in smatch_estate.c
      uses function estate_related(struct smatch_state *) defined in smatch_estate.c
   function estate_is_whole(struct smatch_state *) in line 190
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function is_whole_rl(struct range_list *) defined in smatch_extra.h
      uses function estate_rl(struct smatch_state *) defined in smatch_estate.c
   function estate_is_unknown(struct smatch_state *) in line 195
      protection public
      10 lines of code
      1 parameters
      1 conditional paths
      uses function estate_is_whole(struct smatch_state *) defined in smatch_estate.c
      uses function estate_related(struct smatch_state *) defined in smatch_estate.c
      uses function estate_has_fuzzy_max(struct smatch_state *) defined in smatch_estate.c
   function estate_get_single_value(struct smatch_state *,sval_t *) in line 206
      protection public
      11 lines of code
      2 parameters
      1 conditional paths
      uses macro definition min defined in sm_select_assign.c
      uses function rl_min(struct range_list *) defined in smatch_extra.h
      uses function estate_rl(struct smatch_state *) defined in smatch_estate.c
      uses function rl_max(struct range_list *) defined in smatch_extra.h
      uses function sval_cmp(sval_t,sval_t) defined in smatch.h
   function alloc_dinfo(void) in line 218
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses function memset(void *,int,int) defined in check_byte_count-ice.c
   function alloc_dinfo_range(sval_t,sval_t) in line 227
      protection public
      8 lines of code
      2 parameters
      1 conditional paths
      uses function alloc_dinfo(void) defined in smatch_estate.c
      uses function add_range(struct range_list **,sval_t,sval_t) defined in smatch_extra.h
      uses variable data_info::value_ranges defined in smatch_extra.h
      uses macro definition min defined in sm_select_assign.c
   function alloc_dinfo_range_list(struct range_list *) in line 236
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses function alloc_dinfo(void) defined in smatch_estate.c
      uses variable data_info::value_ranges defined in smatch_extra.h
   function clone_dinfo(struct data_info *) in line 245
      protection public
      11 lines of code
      1 parameters
      1 conditional paths
      uses function alloc_dinfo(void) defined in smatch_estate.c
      uses variable data_info::related defined in smatch_extra.h
      uses function clone_related_list(struct related_list *) defined in smatch_equiv.c
      uses variable data_info::value_ranges defined in smatch_extra.h
      uses function clone_rl(struct range_list *) defined in smatch_extra.h
      uses variable data_info::hard_max defined in smatch_extra.h
      uses variable data_info::fuzzy_max defined in smatch_extra.h
   function clone_estate(struct smatch_state *) in line 257
      protection public
      12 lines of code
      1 parameters
      1 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses variable smatch_state::name defined in smatch.h
      uses variable smatch_state::data defined in smatch.h
      uses function clone_dinfo(struct data_info *) defined in smatch_estate.c
      uses function get_dinfo(struct smatch_state *) defined in smatch_estate.c
   function alloc_estate_empty(void) in line 270
      protection public
      11 lines of code
      1 parameters
      1 conditional paths
      uses function alloc_dinfo(void) defined in smatch_estate.c
      uses variable smatch_state::data defined in smatch.h
      uses variable smatch_state::name defined in smatch.h
   function alloc_estate_whole(struct symbol *) in line 282
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function alloc_estate_rl(struct range_list *) defined in smatch_estate.c
      uses function alloc_whole_rl(struct symbol *) defined in smatch_extra.h
   function extra_empty(void) in line 287
      protection public
      9 lines of code
      1 parameters
      1 conditional paths
      uses variable smatch_state::name defined in smatch.h
      uses variable smatch_state::data defined in smatch.h
      uses function alloc_dinfo(void) defined in smatch_estate.c
   function alloc_estate_sval(sval_t) in line 297
      protection public
      11 lines of code
      1 parameters
      1 conditional paths
      uses variable smatch_state::data defined in smatch.h
      uses function alloc_dinfo_range(sval_t,sval_t) defined in smatch_estate.c
      uses variable smatch_state::name defined in smatch.h
      uses function show_rl(struct range_list *) defined in smatch_extra.h
      uses function get_dinfo(struct smatch_state *) defined in smatch_estate.c
      uses function estate_set_hard_max(struct smatch_state *) defined in smatch_estate.c
      uses function estate_set_fuzzy_max(struct smatch_state *,sval_t) defined in smatch_estate.c
   function alloc_estate_range(sval_t,sval_t) in line 309
      protection public
      9 lines of code
      2 parameters
      1 conditional paths
      uses variable smatch_state::data defined in smatch.h
      uses function alloc_dinfo_range(sval_t,sval_t) defined in smatch_estate.c
      uses macro definition min defined in sm_select_assign.c
      uses variable smatch_state::name defined in smatch.h
      uses function show_rl(struct range_list *) defined in smatch_extra.h
      uses function get_dinfo(struct smatch_state *) defined in smatch_estate.c
   function alloc_estate_rl(struct range_list *) in line 319
      protection public
      12 lines of code
      1 parameters
      1 conditional paths
      uses function extra_empty(void) defined in smatch_estate.c
      uses variable smatch_state::data defined in smatch.h
      uses function alloc_dinfo_range_list(struct range_list *) defined in smatch_estate.c
      uses variable smatch_state::name defined in smatch.h
      uses function show_rl(struct range_list *) defined in smatch_extra.h
   function clone_estate_cast(struct symbol *,struct smatch_state *) in line 332
      protection public
      17 lines of code
      2 parameters
      1 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses function alloc_dinfo(void) defined in smatch_estate.c
      uses variable data_info::value_ranges defined in smatch_extra.h
      uses function clone_rl(struct range_list *) defined in smatch_extra.h
      uses function cast_rl(struct symbol *,struct range_list *) defined in smatch_extra.h
      uses function estate_rl(struct smatch_state *) defined in smatch_estate.c
      uses variable smatch_state::name defined in smatch.h
      uses function show_rl(struct range_list *) defined in smatch_extra.h
      uses variable smatch_state::data defined in smatch.h
   function get_implied_estate(struct expression *) in line 350
      protection public
      12 lines of code
      1 parameters
      1 conditional paths
      uses function get_state_expr(int,struct expression *) defined in smatch.h
      uses macro definition SMATCH_EXTRA defined in smatch.h
      uses function get_implied_rl(struct expression *,struct range_list **) defined in smatch_extra.h
      uses function alloc_whole_rl(struct symbol *) defined in smatch_extra.h
      uses function get_type(struct expression *) defined in smatch.h
      uses function alloc_estate_rl(struct range_list *) defined in smatch_estate.c
   function estate_filter_range(struct smatch_state *,sval_t,sval_t) in line 363
      protection public
      17 lines of code
      3 parameters
      1 conditional paths
      uses function alloc_estate_whole(struct symbol *) defined in smatch_estate.c
      uses variable sval_t::type defined in smatch.h
      uses function remove_range(struct range_list *,sval_t,sval_t) defined in smatch_extra.h
      uses function estate_rl(struct smatch_state *) defined in smatch_estate.c
      uses function alloc_estate_rl(struct range_list *) defined in smatch_estate.c
      uses function estate_has_hard_max(struct smatch_state *) defined in smatch_estate.c
      uses function estate_set_hard_max(struct smatch_state *) defined in smatch_estate.c
      uses function estate_has_fuzzy_max(struct smatch_state *) defined in smatch_estate.c
      uses function estate_set_fuzzy_max(struct smatch_state *,sval_t) defined in smatch_estate.c
      uses function estate_get_fuzzy_max(struct smatch_state *) defined in smatch_estate.c
   function estate_filter_sval(struct smatch_state *,sval_t) in line 381
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function estate_filter_range(struct smatch_state *,sval_t,sval_t) defined in smatch_estate.c
   function clone_dinfo_perm(struct data_info *) in line 390
      protection public
      12 lines of code
      1 parameters
      1 conditional paths
      uses function malloc(int) defined in sm_buf_size2.c
      uses function memset(void *,int,int) defined in check_byte_count-ice.c
      uses variable data_info::related defined in smatch_extra.h
      uses macro definition NULL defined in sm_implied3.c
      uses variable data_info::value_ranges defined in smatch_extra.h
      uses function clone_rl_permanent(struct range_list *) defined in smatch_extra.h
      uses variable data_info::hard_max defined in smatch_extra.h
      uses variable data_info::fuzzy_max defined in smatch_extra.h
   function clone_estate_perm(struct smatch_state *) in line 403
      protection public
      9 lines of code
      1 parameters
      1 conditional paths
      uses function malloc(int) defined in sm_buf_size2.c
      uses variable smatch_state::name defined in smatch.h
      uses function alloc_string(const char *) defined in smatch.h
      uses variable smatch_state::data defined in smatch.h
      uses function clone_dinfo_perm(struct data_info *) defined in smatch_estate.c
      uses function get_dinfo(struct smatch_state *) defined in smatch_estate.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/smatch_expression_stacks.c
module smatch_expression_stacks.c
   function push_expression(struct expression_list **,struct expression *) in line 21
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses macro definition add_ptr_list defined in ptrlist.h
   function pop_expression(struct expression_list **) in line 26
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses function delete_ptr_list_last(struct ptr_list **) defined in ptrlist.c
   function top_expression(struct expression_list *) in line 35
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
   function free_expression_stack(struct expression_list **) in line 43
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function __free_ptr_list(struct ptr_list **) defined in ptrlist.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/smatch_expression_stacks.h
module smatch_expression_stacks.h
   function push_expression(struct expression_list **,struct expression *) in line 1
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses macro definition add_ptr_list defined in ptrlist.h
   function pop_expression(struct expression_list **) in line 2
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses function delete_ptr_list_last(struct ptr_list **) defined in ptrlist.c
   function top_expression(struct expression_list *) in line 3
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
   function free_expression_stack(struct expression_list **) in line 4
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function __free_ptr_list(struct ptr_list **) defined in ptrlist.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/smatch_expressions.c
module smatch_expressions.c
   function get_cur_pos(void) in line 4
      protection public
      17 lines of code
      1 parameters
      3 conditional paths
      uses variable position::pos defined in lib.h
      uses variable big_expression_stack defined in smatch.h
      uses variable big_statement_stack defined in smatch.h
      uses variable expression::pos defined in expression.h
      uses variable statement::pos defined in parse.h
   function zero_expr(void) in line 21
      protection public
      12 lines of code
      1 parameters
      1 conditional paths
      uses function zero(void) defined in sm_impossible1.c
      uses function get_cur_pos(void) defined in smatch_expressions.c
      uses enumvalue EXPR_VALUE defined in expression.h
   function value_expr(long long) in line 34
      protection public
      12 lines of code
      1 parameters
      1 conditional paths
      uses function zero_expr(void) defined in smatch_expressions.c
      uses function get_cur_pos(void) defined in smatch_expressions.c
      uses enumvalue EXPR_VALUE defined in expression.h
      uses variable expression::value defined in expression.h
      uses variable expression::ctype defined in expression.h
   function member_expression(struct expression *,int,struct ident *) in line 47
      protection public
      10 lines of code
      3 parameters
      1 conditional paths
      uses enumvalue EXPR_DEREF defined in expression.h
      uses variable expression::op defined in expression.h
      uses function op(void) defined in loop2.c
      uses variable expression::deref defined in expression.h
      uses variable expression::member defined in expression.h
      uses variable member defined in smdb.py
   function deref_expression(struct expression *) in line 58
      protection public
      9 lines of code
      1 parameters
      1 conditional paths
      uses variable expression::pos defined in expression.h
      uses enumvalue EXPR_PREOP defined in expression.h
      uses variable expression::unop defined in expression.h
      uses variable expression::op defined in expression.h
   function assign_expression(struct expression *,struct expression *) in line 68
      protection public
      10 lines of code
      2 parameters
      1 conditional paths
      uses variable expression::right defined in expression.h
      uses variable expression::pos defined in expression.h
      uses enumvalue EXPR_ASSIGNMENT defined in expression.h
      uses variable expression::op defined in expression.h
      uses variable expression::left defined in expression.h
   function binop_expression(struct expression *,int,struct expression *) in line 79
      protection public
      10 lines of code
      3 parameters
      1 conditional paths
      uses variable expression::right defined in expression.h
      uses variable expression::pos defined in expression.h
      uses enumvalue EXPR_BINOP defined in expression.h
      uses variable expression::op defined in expression.h
      uses function op(void) defined in loop2.c
      uses variable expression::left defined in expression.h
   function array_element_expression(struct expression *,struct expression *) in line 90
      protection public
      7 lines of code
      2 parameters
      1 conditional paths
      uses function binop_expression(struct expression *,int,struct expression *) defined in smatch_expressions.c
      uses variable offset defined in sm_implied10.c
      uses function deref_expression(struct expression *) defined in smatch_expressions.c
   function symbol_expression(struct symbol *) in line 98
      protection public
      9 lines of code
      1 parameters
      1 conditional paths
      uses variable sym defined in smatch_type.c
      uses variable symbol::pos defined in struct.c
      uses enumvalue EXPR_SYMBOL defined in expression.h
      uses variable expression::symbol defined in expression.h
      uses variable expression::symbol_name defined in expression.h
      uses variable symbol::ident defined in struct.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/smatch_extra.c
module smatch_extra.c
   macro definition __USE_ISOC99 in line 26
      protection public
   typedef mod_hook in line 60
      protection public
   variable my_id in line 34
      protection public
   variable link_id in line 35
      protection public
   variable __ignored_macros in line 39
      protection public
   variable extra_mod_hooks in line 62
      protection public
   variable unmatched_stree in line 592
      protection public
   function match_link_modify(struct sm_state *,struct expression *) in line 37
      protection public
      16 lines of code
      2 parameters
      2 conditional paths
      uses variable sm_state::state defined in smatch.h
      uses variable smatch_state::data defined in smatch.h
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses function get_state(int,const char *,struct symbol *) defined in smatch.h
      uses macro definition SMATCH_EXTRA defined in smatch.h
      uses variable var_sym::var defined in smatch.h
      uses variable var_sym::sym defined in smatch.h
      uses function set_state(int,const char *,struct symbol *,struct smatch_state *) defined in smatch.h
      uses function alloc_estate_whole(struct symbol *) defined in smatch_estate.c
      uses function estate_type(struct smatch_state *) defined in smatch_estate.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses variable link_id defined in smatch_extra.c
      uses variable sm_state::name defined in smatch.h
      uses variable sm_state::sym defined in smatch.h
      uses variable undefined defined in smatch.h
   function in_warn_on_macro(void) in line 40
      protection public
      19 lines of code
      1 parameters
      4 conditional paths
      uses function get_current_statement(void) defined in smatch.h
      uses function get_macro_name(struct position) defined in macro_table.c
      uses variable statement::pos defined in parse.h
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable __ignored_macros defined in smatch_extra.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function DECLARE_PTR_LIST(void_fn_list,mod_hook *) in line 61
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function add_extra_mod_hook(mod_hook *) in line 63
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses variable p defined in cond_expr2.c
      uses function malloc(int) defined in sm_buf_size2.c
      uses macro definition add_ptr_list defined in ptrlist.h
      uses variable extra_mod_hooks defined in smatch_extra.c
   function call_extra_mod_hooks(const char *,struct symbol *,struct smatch_state *) in line 70
      protection public
      8 lines of code
      3 parameters
      1 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable extra_mod_hooks defined in smatch_extra.c
      uses variable name defined in smatch_type.c
      uses variable sym defined in smatch_type.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function set_extra_mod_helper(const char *,struct symbol *,struct smatch_state *) in line 79
      protection public
      8 lines of code
      3 parameters
      2 conditional paths
      uses function remove_from_equiv(const char *,struct symbol *) defined in smatch_equiv.c
      uses variable name defined in smatch_type.c
      uses variable sym defined in smatch_type.c
      uses function call_extra_mod_hooks(const char *,struct symbol *,struct smatch_state *) defined in smatch_extra.c
      uses variable sm_state::state defined in smatch.h
      uses variable __in_fake_assign defined in smatch.h
      uses function estate_is_unknown(struct smatch_state *) defined in smatch_estate.c
      uses function get_state(int,const char *,struct symbol *) defined in smatch.h
      uses macro definition SMATCH_EXTRA defined in smatch.h
      uses macro definition NULL defined in sm_implied3.c
      uses function set_state(int,const char *,struct symbol *,struct smatch_state *) defined in smatch.h
   function get_other_name_sym(const char *,struct symbol *,struct symbol **) in line 88
      protection public
      49 lines of code
      3 parameters
      11 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses variable buf defined in sm_fake_assignment.c
      uses variable sym defined in smatch_type.c
      uses variable symbol::ident defined in struct.c
      uses function strlen(char *) defined in sm_overflow6.c
      uses variable ident::name defined in token.h
      uses variable name defined in smatch_type.c
      uses function get_assigned_expr_name_sym(const char *,struct symbol *) defined in check_assigned_expr.c
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_PREOP defined in expression.h
      uses variable expression::op defined in expression.h
      uses function expr_to_var_sym(struct expression *,struct symbol **) defined in smatch.h
      uses function snprintf(char *,int,char *,char *) defined in sm_overflow6.c
      uses function alloc_string(const char *) defined in smatch.h
      uses function free_string(char *) defined in smatch.h
      uses enumvalue EXPR_DEREF defined in expression.h
   function set_extra_mod(const char *,struct symbol *,struct smatch_state *) in line 138
      protection public
      13 lines of code
      3 parameters
      1 conditional paths
      uses function set_extra_mod_helper(const char *,struct symbol *,struct smatch_state *) defined in smatch_extra.c
      uses variable name defined in smatch_type.c
      uses variable sym defined in smatch_type.c
      uses variable sm_state::state defined in smatch.h
      uses function get_other_name_sym(const char *,struct symbol *,struct symbol **) defined in smatch_extra.c
      uses function free_string(char *) defined in smatch.h
   function clear_array_states(struct expression *) in line 152
      protection public
      8 lines of code
      1 parameters
      2 conditional paths
      uses function get_sm_state_expr(int,struct expression *) defined in smatch.h
      uses variable link_id defined in smatch_extra.c
      uses function match_link_modify(struct sm_state *,struct expression *) defined in smatch_extra.c
      uses macro definition NULL defined in sm_implied3.c
   function set_extra_array_mod(struct expression *,struct smatch_state *) in line 161
      protection public
      30 lines of code
      2 parameters
      3 conditional paths
      uses variable offset defined in sm_implied10.c
      uses variable name defined in smatch_type.c
      uses variable sym defined in smatch_type.c
      uses macro definition NULL defined in sm_implied3.c
      uses function get_array_base(struct expression *) defined in smatch.h
      uses function get_array_offset(struct expression *) defined in smatch.h
      uses function expr_to_chunk_sym_vsl(struct expression *,struct symbol **,struct var_sym_list **) defined in smatch.h
      uses function get_value(struct expression *,sval_t *) defined in smatch.h
      uses function clear_array_states(struct expression *) defined in smatch_extra.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses function store_link(int,const char *,struct symbol *,const char *,struct symbol *) defined in smatch.h
      uses variable link_id defined in smatch_extra.c
      uses variable var_sym::var defined in smatch.h
      uses variable var_sym::sym defined in smatch.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses function set_state(int,const char *,struct symbol *,struct smatch_state *) defined in smatch.h
      uses macro definition SMATCH_EXTRA defined in smatch.h
      uses variable sm_state::state defined in smatch.h
      uses function free_string(char *) defined in smatch.h
   function set_extra_expr_mod(struct expression *,struct smatch_state *) in line 192
      protection public
      18 lines of code
      2 parameters
      1 conditional paths
      uses variable sym defined in smatch_type.c
      uses variable name defined in smatch_type.c
      uses macro definition NULL defined in sm_implied3.c
      uses function is_array(struct expression *) defined in smatch.h
      uses function set_extra_array_mod(struct expression *,struct smatch_state *) defined in smatch_extra.c
      uses variable sm_state::state defined in smatch.h
      uses function strip_expr(struct expression *) defined in smatch.h
      uses function expr_to_var_sym(struct expression *,struct symbol **) defined in smatch.h
      uses function set_extra_mod(const char *,struct symbol *,struct smatch_state *) defined in smatch_extra.c
      uses function free_string(char *) defined in smatch.h
   function set_extra_nomod(const char *,struct symbol *,struct smatch_state *) in line 211
      protection public
      31 lines of code
      3 parameters
      1 conditional paths
      uses function get_state(int,const char *,struct symbol *) defined in smatch.h
      uses macro definition SMATCH_EXTRA defined in smatch.h
      uses variable name defined in smatch_type.c
      uses variable sym defined in smatch_type.c
      uses function get_other_name_sym(const char *,struct symbol *,struct symbol **) defined in smatch_extra.c
      uses function set_state(int,const char *,struct symbol *,struct smatch_state *) defined in smatch.h
      uses function free_string(char *) defined in smatch.h
      uses function estate_related(struct smatch_state *) defined in smatch_estate.c
      uses function set_related(struct smatch_state *,struct related_list *) defined in smatch_equiv.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable option_debug_related defined in smatch.c
      uses macro definition sm_msg defined in smatch.h
      uses variable relation::name defined in smatch_extra.h
      uses variable smatch_state::name defined in smatch.h
      uses variable relation::sym defined in smatch_extra.h
      uses function clone_estate_cast(struct symbol *,struct smatch_state *) defined in smatch_estate.c
      uses function estate_type(struct smatch_state *) defined in smatch_estate.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function set_extra_expr_nomod(struct expression *,struct smatch_state *) in line 246
      protection public
      13 lines of code
      2 parameters
      1 conditional paths
      uses variable name defined in smatch_type.c
      uses variable sym defined in smatch_type.c
      uses function expr_to_var_sym(struct expression *,struct symbol **) defined in smatch.h
      uses function set_extra_nomod(const char *,struct symbol *,struct smatch_state *) defined in smatch_extra.c
      uses function free_string(char *) defined in smatch.h
   function set_extra_true_false(const char *,struct symbol *,struct smatch_state *,struct smatch_state *) in line 260
      protection public
      34 lines of code
      4 parameters
      6 conditional paths
      uses function in_warn_on_macro(void) defined in smatch_extra.c
      uses function get_other_name_sym(const char *,struct symbol *,struct symbol **) defined in smatch_extra.c
      uses variable name defined in smatch_type.c
      uses variable sym defined in smatch_type.c
      uses function set_true_false_states(int,const char *,struct symbol *,struct smatch_state *,struct smatch_state *) defined in smatch.h
      uses macro definition SMATCH_EXTRA defined in smatch.h
      uses variable true_state defined in smatch.h
      uses variable false_state defined in smatch.h
      uses function free_string(char *) defined in smatch.h
      uses function get_state(int,const char *,struct symbol *) defined in smatch.h
      uses function estate_related(struct smatch_state *) defined in smatch_estate.c
      uses function set_related(struct smatch_state *,struct related_list *) defined in smatch_equiv.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable relation::name defined in smatch_extra.h
      uses variable relation::sym defined in smatch_extra.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function set_extra_chunk_true_false(struct expression *,struct smatch_state *,struct smatch_state *) in line 295
      protection public
      30 lines of code
      3 parameters
      5 conditional paths
      uses variable name defined in smatch_type.c
      uses variable sym defined in smatch_type.c
      uses function in_warn_on_macro(void) defined in smatch_extra.c
      uses function get_type(struct expression *) defined in smatch.h
      uses function expr_to_chunk_sym_vsl(struct expression *,struct symbol **,struct var_sym_list **) defined in smatch.h
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses function store_link(int,const char *,struct symbol *,const char *,struct symbol *) defined in smatch.h
      uses variable link_id defined in smatch_extra.c
      uses variable var_sym::var defined in smatch.h
      uses variable var_sym::sym defined in smatch.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses function set_true_false_states(int,const char *,struct symbol *,struct smatch_state *,struct smatch_state *) defined in smatch.h
      uses macro definition SMATCH_EXTRA defined in smatch.h
      uses function clone_estate(struct smatch_state *) defined in smatch_estate.c
      uses variable true_state defined in smatch.h
      uses variable false_state defined in smatch.h
      uses function free_string(char *) defined in smatch.h
   function set_extra_expr_true_false(struct expression *,struct smatch_state *,struct smatch_state *) in line 326
      protection public
      21 lines of code
      3 parameters
      3 conditional paths
      uses variable name defined in smatch_type.c
      uses variable sym defined in smatch_type.c
      uses function get_value(struct expression *,sval_t *) defined in smatch.h
      uses function strip_expr(struct expression *) defined in smatch.h
      uses function expr_to_var_sym(struct expression *,struct symbol **) defined in smatch.h
      uses function free_string(char *) defined in smatch.h
      uses function set_extra_chunk_true_false(struct expression *,struct smatch_state *,struct smatch_state *) defined in smatch_extra.c
      uses variable true_state defined in smatch.h
      uses variable false_state defined in smatch.h
      uses function set_extra_true_false(const char *,struct symbol *,struct smatch_state *,struct smatch_state *) defined in smatch_extra.c
   function handle_canonical_while_count_down(struct statement *) in line 348
      protection public
      44 lines of code
      1 parameters
      12 conditional paths
      uses variable condition defined in context.c
      uses function strip_expr(struct expression *) defined in smatch.h
      uses variable statement::iterator_pre_condition defined in parse.h
      uses macro definition NULL defined in sm_implied3.c
      uses enumvalue EXPR_PREOP defined in expression.h
      uses enumvalue EXPR_POSTOP defined in expression.h
      uses enumvalue SPECIAL_DECREMENT defined in token.h
      uses function get_sm_state_expr(int,struct expression *) defined in smatch.h
      uses macro definition SMATCH_EXTRA defined in smatch.h
      uses function sval_cmp_val(sval_t,long long) defined in smatch.h
      uses function estate_min(struct smatch_state *) defined in smatch_estate.c
      uses variable sm_state::state defined in smatch.h
      uses function estate_max(struct smatch_state *) defined in smatch_estate.c
      uses function sval_is_max(sval_t) defined in smatch.h
      uses variable sval_t::value defined in smatch.h
      uses function alloc_estate_range(sval_t,sval_t) defined in smatch_estate.c
      uses function sval_type_val(struct symbol *,long long) defined in smatch.h
      uses variable sval_t::type defined in smatch.h
      uses function estate_has_hard_max(struct smatch_state *) defined in smatch_estate.c
      uses function estate_set_hard_max(struct smatch_state *) defined in smatch_estate.c
      uses function estate_copy_fuzzy_max(struct smatch_state *,struct smatch_state *) defined in smatch_estate.c
      uses function set_extra_expr_mod(struct expression *,struct smatch_state *) defined in smatch_extra.c
   function handle_canonical_for_inc(struct expression *,struct expression *) in line 393
      protection public
      49 lines of code
      2 parameters
      14 conditional paths
      uses variable expression::unop defined in expression.h
      uses function get_sm_state_expr(int,struct expression *) defined in smatch.h
      uses macro definition SMATCH_EXTRA defined in smatch.h
      uses macro definition NULL defined in sm_implied3.c
      uses function estate_get_single_value(struct smatch_state *,sval_t *) defined in smatch.h
      uses variable sm_state::state defined in smatch.h
      uses function get_implied_max(struct expression *,sval_t *) defined in smatch.h
      uses variable condition defined in context.c
      uses function sval_cast(struct symbol *,sval_t) defined in smatch.h
      uses function get_type(struct expression *) defined in smatch.h
      uses function sval_type_max(struct symbol *) defined in smatch.h
      uses enumvalue SPECIAL_UNSIGNED_LT defined in token.h
      uses enumvalue SPECIAL_NOTEQUAL defined in token.h
      uses function sval_is_min(sval_t) defined in smatch.h
      uses variable sval_t::value defined in smatch.h
      uses enumvalue SPECIAL_UNSIGNED_LTE defined in token.h
      uses enumvalue SPECIAL_LTE defined in token.h
      uses function sval_cmp(sval_t,sval_t) defined in smatch.h
      uses function alloc_estate_range(sval_t,sval_t) defined in smatch_estate.c
      uses function get_hard_max(struct expression *,sval_t *) defined in smatch.h
      uses function estate_set_hard_max(struct smatch_state *) defined in smatch_estate.c
      uses function estate_set_fuzzy_max(struct smatch_state *,sval_t) defined in smatch_estate.c
      uses function set_extra_expr_mod(struct expression *,struct smatch_state *) defined in smatch_extra.c
   function handle_canonical_for_dec(struct expression *,struct expression *) in line 443
      protection public
      38 lines of code
      2 parameters
      10 conditional paths
      uses variable expression::unop defined in expression.h
      uses function get_sm_state_expr(int,struct expression *) defined in smatch.h
      uses macro definition SMATCH_EXTRA defined in smatch.h
      uses macro definition NULL defined in sm_implied3.c
      uses function estate_get_single_value(struct smatch_state *,sval_t *) defined in smatch.h
      uses variable sm_state::state defined in smatch.h
      uses function get_implied_min(struct expression *,sval_t *) defined in smatch.h
      uses variable condition defined in context.c
      uses function sval_type_min(struct symbol *) defined in smatch.h
      uses function get_type(struct expression *) defined in smatch.h
      uses enumvalue SPECIAL_NOTEQUAL defined in token.h
      uses function sval_is_min(sval_t) defined in smatch.h
      uses function sval_is_max(sval_t) defined in smatch.h
      uses variable sval_t::value defined in smatch.h
      uses enumvalue SPECIAL_GTE defined in token.h
      uses function sval_cmp(sval_t,sval_t) defined in smatch.h
      uses function alloc_estate_range(sval_t,sval_t) defined in smatch_estate.c
      uses function estate_set_hard_max(struct smatch_state *) defined in smatch_estate.c
      uses function estate_set_fuzzy_max(struct smatch_state *,sval_t) defined in smatch_estate.c
      uses function estate_get_fuzzy_max(struct smatch_state *) defined in smatch_estate.c
      uses function set_extra_expr_mod(struct expression *,struct smatch_state *) defined in smatch_extra.c
   function handle_canonical_for_loops(struct statement *) in line 482
      protection public
      22 lines of code
      1 parameters
      7 conditional paths
      uses variable condition defined in context.c
      uses variable statement::iterator_post_statement defined in parse.h
      uses macro definition NULL defined in sm_implied3.c
      uses variable statement::type defined in parse.h
      uses enumvalue STMT_EXPRESSION defined in parse.h
      uses variable statement::expression defined in parse.h
      uses variable statement::iterator_pre_condition defined in parse.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_COMPARE defined in expression.h
      uses variable expression::op defined in expression.h
      uses enumvalue SPECIAL_INCREMENT defined in token.h
      uses function handle_canonical_for_inc(struct expression *,struct expression *) defined in smatch_extra.c
      uses enumvalue SPECIAL_DECREMENT defined in token.h
      uses function handle_canonical_for_dec(struct expression *,struct expression *) defined in smatch_extra.c
   function __extra_handle_canonical_loops(struct statement *,struct stree **) in line 505
      protection public
      12 lines of code
      2 parameters
      1 conditional paths
      uses function __push_fake_cur_stree(void) defined in smatch.h
      uses variable statement::iterator_post_statement defined in parse.h
      uses function handle_canonical_while_count_down(struct statement *) defined in smatch_extra.c
      uses function handle_canonical_for_loops(struct statement *) defined in smatch_extra.c
      uses function __pop_fake_cur_stree(void) defined in smatch.h
   function __iterator_unchanged(struct sm_state *) in line 518
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses function get_sm_state(int,const char *,struct symbol *) defined in smatch.h
      uses variable my_id defined in smatch_extra.c
      uses variable sm_state::name defined in smatch.h
      uses variable sm_state::sym defined in smatch.h
   function while_count_down_after(struct sm_state *,struct expression *) in line 527
      protection public
      16 lines of code
      2 parameters
      4 conditional paths
      uses variable condition defined in context.c
      uses function strip_expr(struct expression *) defined in smatch.h
      uses enumvalue EXPR_PREOP defined in expression.h
      uses enumvalue EXPR_POSTOP defined in expression.h
      uses enumvalue SPECIAL_DECREMENT defined in token.h
      uses function estate_min(struct smatch_state *) defined in smatch_estate.c
      uses variable sm_state::state defined in smatch.h
      uses variable sval_t::value defined in smatch.h
      uses function set_extra_mod(const char *,struct symbol *,struct smatch_state *) defined in smatch_extra.c
      uses variable sm_state::name defined in smatch.h
      uses variable sm_state::sym defined in smatch.h
      uses function alloc_estate_sval(sval_t) defined in smatch_estate.c
   function __extra_pre_loop_hook_after(struct sm_state *,struct statement *,struct expression *) in line 544
      protection public
      47 lines of code
      3 parameters
      1 conditional paths
      uses function while_count_down_after(struct sm_state *,struct expression *) defined in smatch_extra.c
      uses variable condition defined in context.c
      uses variable statement::expression defined in parse.h
      uses enumvalue EXPR_COMPARE defined in expression.h
      uses variable expression::op defined in expression.h
      uses enumvalue SPECIAL_INCREMENT defined in token.h
      uses function sval_binop(sval_t,int,sval_t) defined in smatch.h
      uses function estate_max(struct smatch_state *) defined in smatch_estate.c
      uses variable sm_state::state defined in smatch.h
      uses function sval_type_val(struct symbol *,long long) defined in smatch.h
      uses function estate_type(struct smatch_state *) defined in smatch_estate.c
      uses function estate_min(struct smatch_state *) defined in smatch_estate.c
      uses function estate_has_hard_max(struct smatch_state *) defined in smatch_estate.c
      uses function __has_breaks(void) defined in smatch.h
      uses function alloc_estate_range(sval_t,sval_t) defined in smatch_estate.c
      uses function alloc_estate_sval(sval_t) defined in smatch_estate.c
      uses function estate_clear_hard_max(struct smatch_state *) defined in smatch_estate.c
      uses function estate_has_fuzzy_max(struct smatch_state *) defined in smatch_estate.c
      uses function estate_get_fuzzy_max(struct smatch_state *) defined in smatch_estate.c
      uses function sval_cmp(sval_t,sval_t) defined in smatch.h
      uses function estate_clear_fuzzy_max(struct smatch_state *) defined in smatch_estate.c
      uses function set_extra_mod(const char *,struct symbol *,struct smatch_state *) defined in smatch_extra.c
      uses variable sm_state::name defined in smatch.h
      uses variable sm_state::sym defined in smatch.h
   function unmatched_state(struct sm_state *) in line 593
      protection public
      13 lines of code
      1 parameters
      4 conditional paths
      uses variable unmatched_stree defined in smatch_extra.c
      uses function get_state_stree(struct stree *,int,const char *,struct symbol *) defined in smatch_slist.c
      uses macro definition SMATCH_EXTRA defined in smatch.h
      uses variable sm_state::name defined in smatch.h
      uses variable sm_state::sym defined in smatch.h
      uses function parent_is_gone_var_sym(const char *,struct symbol *) defined in smatch.h
      uses function alloc_estate_empty(void) defined in smatch_estate.c
      uses function alloc_estate_whole(struct symbol *) defined in smatch_estate.c
      uses function estate_type(struct smatch_state *) defined in smatch_estate.c
      uses variable sm_state::state defined in smatch.h
   function clear_the_pointed_at(struct expression *) in line 607
      protection public
      25 lines of code
      1 parameters
      6 conditional paths
      uses variable name defined in smatch_type.c
      uses variable sym defined in smatch_type.c
      uses function expr_to_var_sym(struct expression *,struct symbol **) defined in smatch.h
      uses function __get_cur_stree(void) defined in smatch.h
      uses macro definition FOR_EACH_MY_SM defined in avl.h
      uses macro definition SMATCH_EXTRA defined in smatch.h
      uses variable sm_state::name defined in smatch.h
      uses variable sm_state::sym defined in smatch.h
      uses function set_extra_mod(const char *,struct symbol *,struct smatch_state *) defined in smatch_extra.c
      uses function alloc_estate_whole(struct symbol *) defined in smatch_estate.c
      uses function estate_type(struct smatch_state *) defined in smatch_estate.c
      uses variable sm_state::state defined in smatch.h
      uses macro definition END_FOR_EACH_SM defined in avl.h
      uses function free_string(char *) defined in smatch.h
   function match_function_call(struct expression *) in line 633
      protection public
      19 lines of code
      1 parameters
      4 conditional paths
      uses variable option_no_db defined in smatch.c
      uses function inlinable(struct expression *) defined in smatch.h
      uses variable expression::fn defined in expression.h
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable expression::args defined in expression.h
      uses function strip_expr(struct expression *) defined in smatch.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_PREOP defined in expression.h
      uses variable expression::op defined in expression.h
      uses function set_extra_expr_mod(struct expression *,struct smatch_state *) defined in smatch_extra.c
      uses variable expression::unop defined in expression.h
      uses function alloc_estate_whole(struct symbol *) defined in smatch_estate.c
      uses function get_type(struct expression *) defined in smatch.h
      uses function clear_the_pointed_at(struct expression *) defined in smatch_extra.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function values_fit_type(struct expression *,struct expression *) in line 653
      protection public
      15 lines of code
      2 parameters
      4 conditional paths
      uses function get_type(struct expression *) defined in smatch.h
      uses function get_absolute_rl(struct expression *,struct range_list **) defined in smatch_extra.h
      uses function sval_cmp(sval_t,sval_t) defined in smatch.h
      uses function sval_type_min(struct symbol *) defined in smatch.h
      uses function rl_min(struct range_list *) defined in smatch_extra.h
      uses function sval_type_max(struct symbol *) defined in smatch.h
      uses function rl_max(struct range_list *) defined in smatch_extra.h
   function save_chunk_info(struct expression *,struct expression *) in line 669
      protection public
      32 lines of code
      2 parameters
      7 conditional paths
      uses variable name defined in smatch_type.c
      uses variable sym defined in smatch_type.c
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_BINOP defined in expression.h
      uses variable expression::op defined in expression.h
      uses function get_value(struct expression *,sval_t *) defined in smatch.h
      uses variable expression::left defined in expression.h
      uses function expr_to_sym(struct expression *) defined in smatch.h
      uses variable expression::right defined in expression.h
      uses function binop_expression(struct expression *,int,struct expression *) defined in smatch_expressions.c
      uses function get_type(struct expression *) defined in smatch.h
      uses function expr_to_chunk_sym_vsl(struct expression *,struct symbol **,struct var_sym_list **) defined in smatch.h
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses function store_link(int,const char *,struct symbol *,const char *,struct symbol *) defined in smatch.h
      uses variable link_id defined in smatch_extra.c
      uses variable var_sym::var defined in smatch.h
      uses variable var_sym::sym defined in smatch.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses function set_state(int,const char *,struct symbol *,struct smatch_state *) defined in smatch.h
      uses macro definition SMATCH_EXTRA defined in smatch.h
      uses function alloc_estate_sval(sval_t) defined in smatch_estate.c
      uses function sval_cast(struct symbol *,sval_t) defined in smatch.h
      uses function free_string(char *) defined in smatch.h
   function do_array_assign(struct expression *,int,struct expression *) in line 702
      protection public
      13 lines of code
      3 parameters
      2 conditional paths
      uses function op(void) defined in loop2.c
      uses function get_absolute_rl(struct expression *,struct range_list **) defined in smatch_extra.h
      uses function cast_rl(struct symbol *,struct range_list *) defined in smatch_extra.h
      uses function get_type(struct expression *) defined in smatch.h
      uses function alloc_whole_rl(struct symbol *) defined in smatch_extra.h
      uses function set_extra_array_mod(struct expression *,struct smatch_state *) defined in smatch_extra.c
      uses function alloc_estate_rl(struct range_list *) defined in smatch_estate.c
   function match_untracked_array(struct expression *,int) in line 716
      protection public
      9 lines of code
      2 parameters
      1 conditional paths
      uses function get_argument_from_call_expr(struct expression_list *,int) defined in smatch.h
      uses variable expression::args defined in expression.h
      uses variable param defined in smatch_parse_call_math.c
      uses function strip_expr(struct expression *) defined in smatch.h
      uses function clear_array_states(struct expression *) defined in smatch_extra.c
   function match_vanilla_assign(struct expression *,struct expression *) in line 726
      protection public
      56 lines of code
      2 parameters
      9 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses variable sym defined in smatch_type.c
      uses variable name defined in smatch_type.c
      uses function is_struct(struct expression *) defined in smatch.h
      uses function save_chunk_info(struct expression *,struct expression *) defined in smatch_extra.c
      uses function expr_to_var_sym(struct expression *,struct symbol **) defined in smatch.h
      uses function is_array(struct expression *) defined in smatch.h
      uses function do_array_assign(struct expression *,int,struct expression *) defined in smatch_extra.c
      uses function get_type(struct expression *) defined in smatch.h
      uses variable __in_fake_assign defined in smatch.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_PREOP defined in expression.h
      uses variable expression::op defined in expression.h
      uses function values_fit_type(struct expression *,struct expression *) defined in smatch_extra.c
      uses function has_symbol(struct expression *,struct symbol *) defined in smatch.h
      uses function set_equiv(struct expression *,struct expression *) defined in smatch_equiv.c
      uses function is_pointer(struct expression *) defined in smatch.h
      uses function get_address_rl(struct expression *,struct range_list **) defined in smatch.h
      uses function alloc_estate_rl(struct range_list *) defined in smatch_estate.c
      uses function get_implied_rl(struct expression *,struct range_list **) defined in smatch_extra.h
      uses function cast_rl(struct symbol *,struct range_list *) defined in smatch_extra.h
      uses function get_hard_max(struct expression *,sval_t *) defined in smatch.h
      uses function estate_set_hard_max(struct smatch_state *) defined in smatch_estate.c
      uses function estate_set_fuzzy_max(struct smatch_state *,sval_t) defined in smatch_estate.c
      uses function alloc_whole_rl(struct symbol *) defined in smatch_extra.h
      uses function set_extra_mod(const char *,struct symbol *,struct smatch_state *) defined in smatch_extra.c
      uses function free_string(char *) defined in smatch.h
   function op_remove_assign(int) in line 783
      protection public
      27 lines of code
      1 parameters
      11 conditional paths
      uses function op(void) defined in loop2.c
      uses enumvalue SPECIAL_ADD_ASSIGN defined in token.h
      uses enumvalue SPECIAL_SUB_ASSIGN defined in token.h
      uses enumvalue SPECIAL_MUL_ASSIGN defined in token.h
      uses enumvalue SPECIAL_DIV_ASSIGN defined in token.h
      uses enumvalue SPECIAL_MOD_ASSIGN defined in token.h
      uses enumvalue SPECIAL_AND_ASSIGN defined in token.h
      uses enumvalue SPECIAL_OR_ASSIGN defined in token.h
      uses enumvalue SPECIAL_XOR_ASSIGN defined in token.h
      uses enumvalue SPECIAL_SHL_ASSIGN defined in token.h
      uses enumvalue SPECIAL_LEFTSHIFT defined in token.h
      uses enumvalue SPECIAL_SHR_ASSIGN defined in token.h
      uses enumvalue SPECIAL_RIGHTSHIFT defined in token.h
   function match_assign(struct expression *) in line 811
      protection public
      100 lines of code
      1 parameters
      25 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses variable expression::left defined in expression.h
      uses variable expression::right defined in expression.h
      uses variable sym defined in smatch_type.c
      uses variable name defined in smatch_type.c
      uses function strip_expr(struct expression *) defined in smatch.h
      uses function strip_parens(struct expression *) defined in smatch.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_CALL defined in expression.h
      uses function sym_name_is(const char *,struct expression *) defined in smatch.h
      uses variable expression::fn defined in expression.h
      uses function get_argument_from_call_expr(struct expression_list *,int) defined in smatch.h
      uses variable expression::args defined in expression.h
      uses enumvalue EXPR_ASSIGNMENT defined in expression.h
      uses variable expression::op defined in expression.h
      uses function is_condition(struct expression *) defined in smatch.h
      uses function match_vanilla_assign(struct expression *,struct expression *) defined in smatch_extra.c
      uses function expr_to_var_sym(struct expression *,struct symbol **) defined in smatch.h
      uses function get_type(struct expression *) defined in smatch.h
      uses function sval_type_min(struct symbol *) defined in smatch.h
      uses function sval_type_max(struct symbol *) defined in smatch.h
      uses enumvalue SPECIAL_ADD_ASSIGN defined in token.h
      uses function get_absolute_max(struct expression *,sval_t *) defined in smatch.h
      uses function sval_binop_overflows(sval_t,int,sval_t) defined in smatch.h
      uses function get_implied_min(struct expression *,sval_t *) defined in smatch.h
      uses function sval_is_negative_min(sval_t) defined in smatch.h
      uses function sval_binop(sval_t,int,sval_t) defined in smatch.h
      uses function sval_cast(struct symbol *,sval_t) defined in smatch.h
      uses function inside_loop(void) defined in smatch.h
      uses enumvalue SPECIAL_SUB_ASSIGN defined in token.h
      uses function get_implied_max(struct expression *,sval_t *) defined in smatch.h
      uses function sval_is_max(sval_t) defined in smatch.h
      uses function sval_is_min(sval_t) defined in smatch.h
      uses enumvalue SPECIAL_AND_ASSIGN defined in token.h
      uses enumvalue SPECIAL_MOD_ASSIGN defined in token.h
      uses enumvalue SPECIAL_SHL_ASSIGN defined in token.h
      uses enumvalue SPECIAL_SHR_ASSIGN defined in token.h
      uses enumvalue SPECIAL_OR_ASSIGN defined in token.h
      uses enumvalue SPECIAL_XOR_ASSIGN defined in token.h
      uses enumvalue SPECIAL_MUL_ASSIGN defined in token.h
      uses enumvalue SPECIAL_DIV_ASSIGN defined in token.h
      uses function binop_expression(struct expression *,int,struct expression *) defined in smatch_expressions.c
      uses function op_remove_assign(int) defined in smatch_extra.c
      uses function get_absolute_rl(struct expression *,struct range_list **) defined in smatch_extra.h
      uses function cast_rl(struct symbol *,struct range_list *) defined in smatch_extra.h
      uses function set_extra_mod(const char *,struct symbol *,struct smatch_state *) defined in smatch_extra.c
      uses function alloc_estate_rl(struct range_list *) defined in smatch_estate.c
      uses function alloc_rl(sval_t,sval_t) defined in smatch_extra.h
      uses function free_string(char *) defined in smatch.h
   function increment_state(struct smatch_state *) in line 912
      protection public
      17 lines of code
      1 parameters
      5 conditional paths
      uses macro definition min defined in sm_select_assign.c
      uses function estate_min(struct smatch_state *) defined in smatch_estate.c
      uses function estate_max(struct smatch_state *) defined in smatch_estate.c
      uses function estate_rl(struct smatch_state *) defined in smatch_estate.c
      uses macro definition NULL defined in sm_implied3.c
      uses function inside_loop(void) defined in smatch.h
      uses function sval_type_max(struct symbol *) defined in smatch.h
      uses variable sval_t::type defined in smatch.h
      uses function sval_is_min(sval_t) defined in smatch.h
      uses function sval_is_max(sval_t) defined in smatch.h
      uses variable sval_t::value defined in smatch.h
      uses function alloc_estate_range(sval_t,sval_t) defined in smatch_estate.c
   function decrement_state(struct smatch_state *) in line 930
      protection public
      17 lines of code
      1 parameters
      5 conditional paths
      uses macro definition min defined in sm_select_assign.c
      uses function estate_min(struct smatch_state *) defined in smatch_estate.c
      uses function estate_max(struct smatch_state *) defined in smatch_estate.c
      uses function estate_rl(struct smatch_state *) defined in smatch_estate.c
      uses macro definition NULL defined in sm_implied3.c
      uses function inside_loop(void) defined in smatch.h
      uses function sval_type_min(struct symbol *) defined in smatch.h
      uses function sval_is_min(sval_t) defined in smatch.h
      uses function sval_is_max(sval_t) defined in smatch.h
      uses variable sval_t::value defined in smatch.h
      uses function alloc_estate_range(sval_t,sval_t) defined in smatch_estate.c
   function unop_expr(struct expression *) in line 948
      protection public
      26 lines of code
      1 parameters
      6 conditional paths
      uses variable expression::smatch_flags defined in expression.h
      uses enumvalue Handled defined in expression.h
      uses variable expression::op defined in expression.h
      uses enumvalue SPECIAL_INCREMENT defined in token.h
      uses function get_state_expr(int,struct expression *) defined in smatch.h
      uses macro definition SMATCH_EXTRA defined in smatch.h
      uses variable expression::unop defined in expression.h
      uses function increment_state(struct smatch_state *) defined in smatch_extra.c
      uses function alloc_estate_whole(struct symbol *) defined in smatch_estate.c
      uses function get_type(struct expression *) defined in smatch.h
      uses function set_extra_expr_mod(struct expression *,struct smatch_state *) defined in smatch_extra.c
      uses enumvalue SPECIAL_DECREMENT defined in token.h
      uses function decrement_state(struct smatch_state *) defined in smatch_extra.c
   function asm_expr(struct statement *) in line 975
      protection public
      21 lines of code
      1 parameters
      4 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable symbol::stmt defined in struct.c
      uses variable statement::asm_outputs defined in parse.h
      uses function get_type(struct expression *) defined in smatch.h
      uses function strip_expr(struct expression *) defined in smatch.h
      uses function set_extra_expr_mod(struct expression *,struct smatch_state *) defined in smatch_extra.c
      uses function alloc_estate_whole(struct symbol *) defined in smatch_estate.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function check_dereference(struct expression *) in line 997
      protection public
      6 lines of code
      1 parameters
      2 conditional paths
      uses function outside_of_function(void) defined in smatch.h
      uses function set_extra_expr_nomod(struct expression *,struct smatch_state *) defined in smatch_extra.c
      uses function alloc_estate_range(sval_t,sval_t) defined in smatch_estate.c
      uses variable valid_ptr_min_sval defined in smatch.h
      uses variable valid_ptr_max_sval defined in smatch.h
   function match_dereferences(struct expression *) in line 1004
      protection public
      6 lines of code
      1 parameters
      2 conditional paths
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_PREOP defined in expression.h
      uses function check_dereference(struct expression *) defined in smatch_extra.c
      uses variable expression::unop defined in expression.h
   function match_pointer_as_array(struct expression *) in line 1011
      protection public
      6 lines of code
      1 parameters
      2 conditional paths
      uses function is_array(struct expression *) defined in smatch.h
      uses function check_dereference(struct expression *) defined in smatch_extra.c
      uses function get_array_base(struct expression *) defined in smatch.h
   function set_param_dereferenced(struct expression *,char *,char *) in line 1018
      protection public
      14 lines of code
      3 parameters
      3 conditional paths
      uses variable sym defined in smatch_type.c
      uses variable name defined in smatch_type.c
      uses function get_variable_from_key(struct expression *,char *,struct symbol **) defined in smatch.h
      uses function set_extra_nomod(const char *,struct symbol *,struct smatch_state *) defined in smatch_extra.c
      uses function alloc_estate_range(sval_t,sval_t) defined in smatch_estate.c
      uses variable valid_ptr_min_sval defined in smatch.h
      uses variable valid_ptr_max_sval defined in smatch.h
      uses function free_string(char *) defined in smatch.h
   function add_one(sval_t) in line 1033
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable sval_t::value defined in smatch.h
   function sub_one(sval_t) in line 1039
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable sval_t::value defined in smatch.h
   function handle_comparison(struct symbol *,struct expression *,int,struct expression *) in line 1045
      protection public
      279 lines of code
      4 parameters
      89 conditional paths
      uses macro definition min defined in sm_select_assign.c
      uses variable expression::op defined in expression.h
      uses enumvalue SPECIAL_INCREMENT defined in token.h
      uses enumvalue SPECIAL_DECREMENT defined in token.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_POSTOP defined in expression.h
      uses variable expression::smatch_flags defined in expression.h
      uses enumvalue Handled defined in expression.h
      uses function strip_parens(struct expression *) defined in smatch.h
      uses variable expression::unop defined in expression.h
      uses enumvalue EXPR_ASSIGNMENT defined in expression.h
      uses variable expression::left defined in expression.h
      uses function get_implied_rl(struct expression *,struct range_list **) defined in smatch_extra.h
      uses function cast_rl(struct symbol *,struct range_list *) defined in smatch_extra.h
      uses function sval_type_min(struct symbol *) defined in smatch.h
      uses function get_type(struct expression *) defined in smatch.h
      uses function sval_type_max(struct symbol *) defined in smatch.h
      uses function alloc_rl(sval_t,sval_t) defined in smatch_extra.h
      uses function clone_rl(struct range_list *) defined in smatch_extra.h
      uses function op(void) defined in loop2.c
      uses enumvalue SPECIAL_UNSIGNED_LT defined in token.h
      uses function remove_range(struct range_list *,sval_t,sval_t) defined in smatch_extra.h
      uses function rl_max(struct range_list *) defined in smatch_extra.h
      uses function sval_is_min(sval_t) defined in smatch.h
      uses function rl_min(struct range_list *) defined in smatch_extra.h
      uses function sub_one(sval_t) defined in smatch_extra.c
      uses function sval_is_max(sval_t) defined in smatch.h
      uses function add_one(sval_t) defined in smatch_extra.c
      uses enumvalue SPECIAL_UNSIGNED_LTE defined in token.h
      uses enumvalue SPECIAL_LTE defined in token.h
      uses function sval_cmp(sval_t,sval_t) defined in smatch.h
      uses enumvalue SPECIAL_EQUAL defined in token.h
      uses enumvalue SPECIAL_UNSIGNED_GTE defined in token.h
      uses enumvalue SPECIAL_GTE defined in token.h
      uses enumvalue SPECIAL_UNSIGNED_GT defined in token.h
      uses enumvalue SPECIAL_NOTEQUAL defined in token.h
      uses function rl_truncate_cast(struct symbol *,struct range_list *) defined in smatch_extra.h
      uses function strip_expr(struct expression *) defined in smatch.h
      uses function alloc_estate_rl(struct range_list *) defined in smatch_estate.c
      uses function get_hard_max(struct expression *,sval_t *) defined in smatch.h
      uses function estate_set_hard_max(struct smatch_state *) defined in smatch_estate.c
      uses variable sval_t::value defined in smatch.h
      uses function estate_set_fuzzy_max(struct smatch_state *,sval_t) defined in smatch_estate.c
      uses function get_implied_value(struct expression *,sval_t *) defined in smatch.h
      uses function increment_state(struct smatch_state *) defined in smatch_extra.c
      uses function decrement_state(struct smatch_state *) defined in smatch_extra.c
      uses function estate_rl(struct smatch_state *) defined in smatch_estate.c
      uses function estates_equiv(struct smatch_state *,struct smatch_state *) defined in smatch_estate.c
      uses macro definition NULL defined in sm_implied3.c
      uses function set_extra_expr_true_false(struct expression *,struct smatch_state *,struct smatch_state *) defined in smatch_extra.c
   function is_simple_math(struct expression *) in line 1325
      protection public
      14 lines of code
      1 parameters
      6 conditional paths
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_BINOP defined in expression.h
      uses variable expression::op defined in expression.h
   function move_known_values(struct expression **,struct expression **) in line 1340
      protection public
      60 lines of code
      2 parameters
      15 conditional paths
      uses variable expression::left defined in expression.h
      uses variable expression::right defined in expression.h
      uses function get_implied_value(struct expression *,sval_t *) defined in smatch.h
      uses function is_simple_math(struct expression *) defined in smatch_extra.c
      uses variable expression::op defined in expression.h
      uses function get_value(struct expression *,sval_t *) defined in smatch.h
      uses variable sval_t::value defined in smatch.h
      uses function binop_expression(struct expression *,int,struct expression *) defined in smatch_expressions.c
      uses function invert_op(int) defined in smatch.h
   function match_func_comparison(struct expression *) in line 1401
      protection public
      33 lines of code
      1 parameters
      5 conditional paths
      uses variable expression::left defined in expression.h
      uses function strip_expr(struct expression *) defined in smatch.h
      uses variable expression::right defined in expression.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_CALL defined in expression.h
      uses function get_implied_value(struct expression *,sval_t *) defined in smatch.h
      uses function handle_comparison(struct symbol *,struct expression *,int,struct expression *) defined in smatch_extra.c
      uses function get_type(struct expression *) defined in smatch.h
      uses variable expression::op defined in expression.h
      uses function function_comparison(struct expression *,int,struct expression *) defined in smatch_extra.h
   function match_comparison(struct expression *) in line 1435
      protection public
      36 lines of code
      1 parameters
      5 conditional paths
      uses function strip_parens(struct expression *) defined in smatch.h
      uses variable expression::left defined in expression.h
      uses variable expression::right defined in expression.h
      uses function match_func_comparison(struct expression *) defined in smatch_extra.c
      uses function get_type(struct expression *) defined in smatch.h
      uses function move_known_values(struct expression **,struct expression **) defined in smatch_extra.c
      uses function handle_comparison(struct symbol *,struct expression *,int,struct expression *) defined in smatch_extra.c
      uses variable expression::op defined in expression.h
      uses function get_assigned_expr(struct expression *) defined in check_assigned_expr.c
      uses function is_simple_math(struct expression *) defined in smatch_extra.c
      uses function has_variable(struct expression *,struct expression *) defined in smatch.h
   function handle_AND_condition(struct expression *) in line 1472
      protection public
      21 lines of code
      1 parameters
      3 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses function get_implied_value(struct expression *,sval_t *) defined in smatch.h
      uses variable expression::left defined in expression.h
      uses variable sval_t::value defined in smatch.h
      uses function get_absolute_rl(struct expression *,struct range_list **) defined in smatch_extra.h
      uses variable expression::right defined in expression.h
      uses function remove_range(struct range_list *,sval_t,sval_t) defined in smatch_extra.h
      uses function sval_type_val(struct symbol *,long long) defined in smatch.h
      uses variable sval_t::type defined in smatch.h
      uses function set_extra_expr_true_false(struct expression *,struct smatch_state *,struct smatch_state *) defined in smatch_extra.c
      uses function alloc_estate_rl(struct range_list *) defined in smatch_estate.c
   function __extra_match_condition(struct expression *) in line 1495
      protection public
      40 lines of code
      1 parameters
      1 conditional paths
      uses variable true_state defined in smatch.h
      uses variable false_state defined in smatch.h
      uses function strip_expr(struct expression *) defined in smatch.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_CALL defined in expression.h
      uses function function_comparison(struct expression *,int,struct expression *) defined in smatch_extra.h
      uses enumvalue SPECIAL_NOTEQUAL defined in token.h
      uses function zero_expr(void) defined in smatch_expressions.c
      uses enumvalue EXPR_PREOP defined in expression.h
      uses enumvalue EXPR_SYMBOL defined in expression.h
      uses enumvalue EXPR_DEREF defined in expression.h
      uses function zero(void) defined in sm_impossible1.c
      uses function sval_blank(struct expression *) defined in smatch.h
      uses function get_extra_state(struct expression *) defined in smatch_extra.c
      uses function estate_filter_sval(struct smatch_state *,sval_t) defined in smatch_estate.c
      uses function possibly_true(struct expression *,int,struct expression *) defined in smatch_extra.h
      uses enumvalue SPECIAL_EQUAL defined in token.h
      uses function alloc_estate_sval(sval_t) defined in smatch_estate.c
      uses function alloc_estate_empty(void) defined in smatch_estate.c
      uses function set_extra_expr_true_false(struct expression *,struct smatch_state *,struct smatch_state *) defined in smatch_extra.c
      uses enumvalue EXPR_COMPARE defined in expression.h
      uses function match_comparison(struct expression *) defined in smatch_extra.c
      uses enumvalue EXPR_ASSIGNMENT defined in expression.h
      uses function __extra_match_condition(struct expression *) defined in smatch_extra.c
      uses variable expression::left defined in expression.h
      uses enumvalue EXPR_BINOP defined in expression.h
      uses variable expression::op defined in expression.h
      uses function handle_AND_condition(struct expression *) defined in smatch_extra.c
   function assume_indexes_are_valid(struct expression *) in line 1536
      protection public
      37 lines of code
      1 parameters
      6 conditional paths
      uses variable offset defined in sm_implied10.c
      uses macro definition NULL defined in sm_implied3.c
      uses function strip_expr(struct expression *) defined in smatch.h
      uses function is_array(struct expression *) defined in smatch.h
      uses function get_array_offset(struct expression *) defined in smatch.h
      uses function get_type(struct expression *) defined in smatch.h
      uses function type_signed(struct symbol *) defined in smatch.h
      uses function alloc_rl(sval_t,sval_t) defined in smatch_extra.h
      uses function sval_type_min(struct symbol *) defined in smatch.h
      uses function sval_type_val(struct symbol *,long long) defined in smatch.h
      uses function get_array_base(struct expression *) defined in smatch.h
      uses function get_real_array_size(struct expression *) defined in smatch.h
      uses function add_range(struct range_list **,sval_t,sval_t) defined in smatch_extra.h
      uses function sval_type_max(struct symbol *) defined in smatch.h
      uses function get_absolute_rl(struct expression *,struct range_list **) defined in smatch_extra.h
      uses function rl_filter(struct range_list *,struct range_list *) defined in smatch_extra.h
      uses function rl_equiv(struct range_list *,struct range_list *) defined in smatch_extra.h
      uses function set_extra_expr_nomod(struct expression *,struct smatch_state *) defined in smatch_extra.c
      uses function alloc_estate_rl(struct range_list *) defined in smatch_estate.c
   function implied_not_equal(struct expression *,long long) in line 1575
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function possibly_false(struct expression *,int,struct expression *) defined in smatch_extra.h
      uses enumvalue SPECIAL_NOTEQUAL defined in token.h
      uses function value_expr(long long) defined in smatch_expressions.c
   function implied_not_equal_name_sym(char *,struct symbol *,long long) in line 1580
      protection public
      11 lines of code
      3 parameters
      1 conditional paths
      uses function get_state(int,const char *,struct symbol *) defined in smatch.h
      uses macro definition SMATCH_EXTRA defined in smatch.h
      uses variable name defined in smatch_type.c
      uses variable sym defined in smatch_type.c
      uses function rl_has_sval(struct range_list *,sval_t) defined in smatch_extra.h
      uses function estate_rl(struct smatch_state *) defined in smatch_estate.c
      uses function sval_type_val(struct symbol *,long long) defined in smatch.h
      uses function estate_type(struct smatch_state *) defined in smatch_estate.c
   function parent_is_null_var_sym(const char *,struct symbol *) in line 1592
      protection public
      38 lines of code
      2 parameters
      1 conditional paths
      uses variable buf defined in sm_fake_assignment.c
      uses variable name defined in smatch_type.c
      uses function get_state(int,const char *,struct symbol *) defined in smatch.h
      uses macro definition SMATCH_EXTRA defined in smatch.h
      uses variable sym defined in smatch_type.c
      uses function estate_rl(struct smatch_state *) defined in smatch_estate.c
      uses function estate_min(struct smatch_state *) defined in smatch_estate.c
      uses function estate_max(struct smatch_state *) defined in smatch_estate.c
   function parent_is_null(struct expression *) in line 1631
      protection public
      15 lines of code
      1 parameters
      1 conditional paths
      uses variable sym defined in smatch_type.c
      uses function strip_expr(struct expression *) defined in smatch.h
      uses function expr_to_var_sym(struct expression *,struct symbol **) defined in smatch.h
      uses function parent_is_null_var_sym(const char *,struct symbol *) defined in smatch_extra.c
      uses function free_string(char *) defined in smatch.h
   function param_used_callback(void *,int,char **,char **) in line 1647
      protection public
      5 lines of code
      4 parameters
      1 conditional paths
   function filter_unused_kzalloc_info(struct expression *,int,char *,struct sm_state *) in line 1653
      protection public
      36 lines of code
      4 parameters
      5 conditional paths
      uses variable expression::fn defined in expression.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_SYMBOL defined in expression.h
      uses function estate_get_single_value(struct smatch_state *,sval_t *) defined in smatch.h
      uses variable sm_state::state defined in smatch.h
      uses variable sval_t::value defined in smatch.h
      uses macro definition run_sql defined in smatch.h
      uses function param_used_callback(void *,int,char **,char **) defined in smatch_extra.c
      uses function get_static_filter(struct symbol *) defined in smatch.h
      uses variable expression::symbol defined in expression.h
      uses enumvalue PARAM_USED defined in smatch.h
      uses variable param defined in smatch_parse_call_math.c
   function struct_member_callback(struct expression *,int,char *,struct sm_state *) in line 1690
      protection public
      11 lines of code
      4 parameters
      4 conditional paths
      uses function estate_is_whole(struct smatch_state *) defined in smatch_estate.c
      uses variable sm_state::state defined in smatch.h
      uses function filter_unused_kzalloc_info(struct expression *,int,char *,struct sm_state *) defined in smatch_extra.c
      uses variable param defined in smatch_parse_call_math.c
      uses function sql_insert_caller_info(struct expression *,int,int,const char *,const char *) defined in smatch.h
      uses enumvalue PARAM_VALUE defined in smatch.h
      uses variable smatch_state::name defined in smatch.h
      uses function estate_has_fuzzy_max(struct smatch_state *) defined in smatch_estate.c
      uses enumvalue FUZZY_MAX defined in smatch.h
      uses function sval_to_str(sval_t) defined in smatch.h
      uses function estate_get_fuzzy_max(struct smatch_state *) defined in smatch_estate.c
   function returned_struct_members(int,char *,struct expression *) in line 1702
      protection public
      32 lines of code
      3 parameters
      7 conditional paths
      uses variable buf defined in sm_fake_assignment.c
      uses function expr_to_sym(struct expression *) defined in smatch.h
      uses macro definition FOR_EACH_MY_SM defined in avl.h
      uses variable my_id defined in smatch_extra.c
      uses function __get_cur_stree(void) defined in smatch.h
      uses function estate_rl(struct smatch_state *) defined in smatch_estate.c
      uses variable sm_state::state defined in smatch.h
      uses variable sm_state::sym defined in smatch.h
      uses function get_param_name(struct sm_state *) defined in smatch.h
      uses function name_sym_to_param_comparison(const char *,struct symbol *) defined in smatch.h
      uses variable sm_state::name defined in smatch.h
      uses function estate_is_whole(struct smatch_state *) defined in smatch_estate.c
      uses function snprintf(char *,int,char *,char *) defined in sm_overflow6.c
      uses variable smatch_state::name defined in smatch.h
      uses function sql_insert_return_states(int,const char *,int,int,const char *,const char *) defined in smatch.h
      uses enumvalue PARAM_VALUE defined in smatch.h
      uses macro definition END_FOR_EACH_SM defined in avl.h
   function db_limited_before(void) in line 1735
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable unmatched_stree defined in smatch_extra.c
      uses function clone_stree(struct stree *) defined in avl.c
      uses function __get_cur_stree(void) defined in smatch.h
   function db_limited_after(void) in line 1740
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function free_stree(struct stree **) defined in avl.c
      uses variable unmatched_stree defined in smatch_extra.c
   function db_param_limit_filter(struct expression *,int,char *,char *,enum info_type) in line 1745
      protection public
      54 lines of code
      5 parameters
      10 conditional paths
      uses variable name defined in smatch_type.c
      uses variable sym defined in smatch_type.c
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_ASSIGNMENT defined in expression.h
      uses function strip_expr(struct expression *) defined in smatch.h
      uses variable expression::right defined in expression.h
      uses enumvalue EXPR_CALL defined in expression.h
      uses function get_argument_from_call_expr(struct expression_list *,int) defined in smatch.h
      uses variable expression::args defined in expression.h
      uses variable param defined in smatch_parse_call_math.c
      uses function get_variable_from_key(struct expression *,char *,struct symbol **) defined in smatch.h
      uses function get_arg_type(struct expression *,int) defined in smatch.h
      uses variable expression::fn defined in expression.h
      uses function get_member_type_from_key(struct expression *,char *) defined in smatch.h
      uses function get_sm_state(int,const char *,struct symbol *) defined in smatch.h
      uses macro definition SMATCH_EXTRA defined in smatch.h
      uses function estate_rl(struct smatch_state *) defined in smatch_estate.c
      uses variable sm_state::state defined in smatch.h
      uses function alloc_whole_rl(struct symbol *) defined in smatch_extra.h
      uses function call_results_to_rl(struct expression *,struct symbol *,char *,struct range_list **) defined in smatch_extra.h
      uses function rl_intersection(struct range_list *,struct range_list *) defined in smatch_extra.h
      uses function cast_rl(struct symbol *,struct range_list *) defined in smatch_extra.h
      uses function rl_equiv(struct range_list *,struct range_list *) defined in smatch_extra.h
      uses function __set_sm(struct sm_state *) defined in smatch.h
      uses function op(void) defined in loop2.c
      uses enumvalue PARAM_LIMIT defined in smatch.h
      uses function set_extra_nomod(const char *,struct symbol *,struct smatch_state *) defined in smatch_extra.c
      uses function alloc_estate_rl(struct range_list *) defined in smatch_estate.c
      uses function set_extra_mod(const char *,struct symbol *,struct smatch_state *) defined in smatch_extra.c
      uses function free_string(char *) defined in smatch.h
   function db_param_limit(struct expression *,int,char *,char *) in line 1800
      protection public
      4 lines of code
      4 parameters
      1 conditional paths
      uses function db_param_limit_filter(struct expression *,int,char *,char *,enum info_type) defined in smatch_extra.c
      uses variable param defined in smatch_parse_call_math.c
      uses enumvalue PARAM_LIMIT defined in smatch.h
   function db_param_filter(struct expression *,int,char *,char *) in line 1805
      protection public
      4 lines of code
      4 parameters
      1 conditional paths
      uses function db_param_limit_filter(struct expression *,int,char *,char *,enum info_type) defined in smatch_extra.c
      uses variable param defined in smatch_parse_call_math.c
      uses enumvalue PARAM_FILTER defined in smatch.h
   function db_param_add_set(struct expression *,int,char *,char *,enum info_type) in line 1810
      protection public
      38 lines of code
      5 parameters
      8 conditional paths
      uses variable name defined in smatch_type.c
      uses variable sym defined in smatch_type.c
      uses macro definition NULL defined in sm_implied3.c
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_ASSIGNMENT defined in expression.h
      uses function strip_expr(struct expression *) defined in smatch.h
      uses variable expression::right defined in expression.h
      uses enumvalue EXPR_CALL defined in expression.h
      uses function get_argument_from_call_expr(struct expression_list *,int) defined in smatch.h
      uses variable expression::args defined in expression.h
      uses variable param defined in smatch_parse_call_math.c
      uses function get_member_type_from_key(struct expression *,char *) defined in smatch.h
      uses function get_variable_from_key(struct expression *,char *,struct symbol **) defined in smatch.h
      uses function get_state(int,const char *,struct symbol *) defined in smatch.h
      uses macro definition SMATCH_EXTRA defined in smatch.h
      uses function estate_rl(struct smatch_state *) defined in smatch_estate.c
      uses function call_results_to_rl(struct expression *,struct symbol *,char *,struct range_list **) defined in smatch_extra.h
      uses function op(void) defined in loop2.c
      uses enumvalue PARAM_SET defined in smatch.h
      uses function rl_union(struct range_list *,struct range_list *) defined in smatch_extra.h
      uses function set_extra_mod(const char *,struct symbol *,struct smatch_state *) defined in smatch_extra.c
      uses function alloc_estate_rl(struct range_list *) defined in smatch_estate.c
      uses function free_string(char *) defined in smatch.h
   function db_param_add(struct expression *,int,char *,char *) in line 1849
      protection public
      4 lines of code
      4 parameters
      1 conditional paths
      uses function db_param_add_set(struct expression *,int,char *,char *,enum info_type) defined in smatch_extra.c
      uses variable param defined in smatch_parse_call_math.c
      uses enumvalue PARAM_ADD defined in smatch.h
   function db_param_set(struct expression *,int,char *,char *) in line 1854
      protection public
      4 lines of code
      4 parameters
      1 conditional paths
      uses function db_param_add_set(struct expression *,int,char *,char *,enum info_type) defined in smatch_extra.c
      uses variable param defined in smatch_parse_call_math.c
      uses enumvalue PARAM_SET defined in smatch.h
   function db_param_value(struct expression *,int,char *,char *) in line 1859
      protection public
      28 lines of code
      4 parameters
      6 conditional paths
      uses variable name defined in smatch_type.c
      uses variable sym defined in smatch_type.c
      uses macro definition NULL defined in sm_implied3.c
      uses variable param defined in smatch_parse_call_math.c
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_ASSIGNMENT defined in expression.h
      uses function strip_expr(struct expression *) defined in smatch.h
      uses variable expression::right defined in expression.h
      uses enumvalue EXPR_CALL defined in expression.h
      uses function get_member_type_from_key(struct expression *,char *) defined in smatch.h
      uses variable expression::left defined in expression.h
      uses function get_variable_from_key(struct expression *,char *,struct symbol **) defined in smatch.h
      uses function call_results_to_rl(struct expression *,struct symbol *,char *,struct range_list **) defined in smatch_extra.h
      uses function set_extra_mod(const char *,struct symbol *,struct smatch_state *) defined in smatch_extra.c
      uses function alloc_estate_rl(struct range_list *) defined in smatch_estate.c
      uses function free_string(char *) defined in smatch.h
   function match_call_info(struct expression *) in line 1888
      protection public
      26 lines of code
      1 parameters
      4 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable expression::args defined in expression.h
      uses function get_arg_type(struct expression *,int) defined in smatch.h
      uses variable expression::fn defined in expression.h
      uses function get_implied_rl(struct expression *,struct range_list **) defined in smatch_extra.h
      uses function cast_rl(struct symbol *,struct range_list *) defined in smatch_extra.h
      uses function alloc_whole_rl(struct symbol *) defined in smatch_extra.h
      uses function get_type(struct expression *) defined in smatch.h
      uses function is_whole_rl(struct range_list *) defined in smatch_extra.h
      uses function sql_insert_caller_info(struct expression *,int,int,const char *,const char *) defined in smatch.h
      uses enumvalue PARAM_VALUE defined in smatch.h
      uses function show_rl(struct range_list *) defined in smatch_extra.h
      uses function get_state_expr(int,struct expression *) defined in smatch.h
      uses macro definition SMATCH_EXTRA defined in smatch.h
      uses function estate_has_fuzzy_max(struct smatch_state *) defined in smatch_estate.c
      uses enumvalue FUZZY_MAX defined in smatch.h
      uses function sval_to_str(sval_t) defined in smatch.h
      uses function estate_get_fuzzy_max(struct smatch_state *) defined in smatch_estate.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function set_param_value(const char *,struct symbol *,char *,char *) in line 1915
      protection public
      19 lines of code
      4 parameters
      3 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses function snprintf(char *,int,char *,char *) defined in sm_overflow6.c
      uses variable name defined in smatch_type.c
      uses function get_member_type_from_key(struct expression *,char *) defined in smatch.h
      uses function symbol_expression(struct symbol *) defined in smatch_expressions.c
      uses variable sym defined in smatch_type.c
      uses function str_to_rl(struct symbol *,char *,struct range_list **) defined in smatch_extra.h
      uses function alloc_estate_rl(struct range_list *) defined in smatch_estate.c
      uses function set_state(int,const char *,struct symbol *,struct smatch_state *) defined in smatch.h
      uses macro definition SMATCH_EXTRA defined in smatch.h
   function set_param_hard_max(const char *,struct symbol *,char *,char *) in line 1935
      protection public
      24 lines of code
      4 parameters
      5 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses function snprintf(char *,int,char *,char *) defined in sm_overflow6.c
      uses variable name defined in smatch_type.c
      uses function get_state(int,const char *,struct symbol *) defined in smatch.h
      uses macro definition SMATCH_EXTRA defined in smatch.h
      uses variable sym defined in smatch_type.c
      uses function get_member_type_from_key(struct expression *,char *) defined in smatch.h
      uses function symbol_expression(struct symbol *) defined in smatch_expressions.c
      uses function str_to_rl(struct symbol *,char *,struct range_list **) defined in smatch_extra.h
      uses function rl_to_sval(struct range_list *,sval_t *) defined in smatch_extra.h
      uses function estate_set_fuzzy_max(struct smatch_state *,sval_t) defined in smatch_estate.c
   function get_extra_state(struct expression *) in line 1960
      protection public
      19 lines of code
      1 parameters
      1 conditional paths
      uses variable name defined in smatch_type.c
      uses variable sym defined in smatch_type.c
      uses macro definition NULL defined in sm_implied3.c
      uses function is_pointer(struct expression *) defined in smatch.h
      uses function get_address_rl(struct expression *,struct range_list **) defined in smatch.h
      uses function alloc_estate_rl(struct range_list *) defined in smatch_estate.c
      uses function expr_to_known_chunk_sym(struct expression *,struct symbol **) defined in smatch.h
      uses function get_state(int,const char *,struct symbol *) defined in smatch.h
      uses macro definition SMATCH_EXTRA defined in smatch.h
      uses function free_string(char *) defined in smatch.h
   function register_smatch_extra(int) in line 1980
      protection public
      16 lines of code
      1 parameters
      1 conditional paths
      uses variable my_id defined in smatch_extra.c
      uses function add_merge_hook(int,merge_func_t *) defined in smatch.h
      uses function merge_estates(struct smatch_state *,struct smatch_state *) defined in smatch_estate.c
      uses function add_unmatched_state_hook(int,unmatched_func_t *) defined in smatch.h
      uses function unmatched_state(struct sm_state *) defined in smatch_extra.c
      uses function select_caller_info_hook(void(*)(const char *name, struct symbol *sym, char *key, char *value),int) defined in smatch.h
      uses function set_param_value(const char *,struct symbol *,char *,char *) defined in smatch_extra.c
      uses enumvalue PARAM_VALUE defined in smatch.h
      uses function set_param_hard_max(const char *,struct symbol *,char *,char *) defined in smatch_extra.c
      uses enumvalue FUZZY_MAX defined in smatch.h
      uses function select_return_states_before(void(*)(void)) defined in smatch.h
      uses function db_limited_before(void) defined in smatch_extra.c
      uses function select_return_states_hook(int,return_implies_hook *) defined in smatch.h
      uses enumvalue PARAM_LIMIT defined in smatch.h
      uses function db_param_limit(struct expression *,int,char *,char *) defined in smatch_extra.c
      uses enumvalue PARAM_FILTER defined in smatch.h
      uses function db_param_filter(struct expression *,int,char *,char *) defined in smatch_extra.c
      uses enumvalue PARAM_ADD defined in smatch.h
      uses function db_param_add(struct expression *,int,char *,char *) defined in smatch_extra.c
      uses enumvalue PARAM_SET defined in smatch.h
      uses function db_param_set(struct expression *,int,char *,char *) defined in smatch_extra.c
      uses function db_param_value(struct expression *,int,char *,char *) defined in smatch_extra.c
      uses function select_return_states_after(void(*)(void)) defined in smatch.h
      uses function db_limited_after(void) defined in smatch_extra.c
   function register_smatch_extra_links(int) in line 2014
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable link_id defined in smatch_extra.c
   function register_smatch_extra_late(int) in line 2019
      protection public
      20 lines of code
      1 parameters
      1 conditional paths
      uses function add_merge_hook(int,merge_func_t *) defined in smatch.h
      uses variable link_id defined in smatch_extra.c
      uses function merge_link_states(struct smatch_state *,struct smatch_state *) defined in smatch.h
      uses function add_modification_hook(int,modification_hook *) defined in smatch.h
      uses function match_link_modify(struct sm_state *,struct expression *) defined in smatch_extra.c
      uses function add_hook(void *,enum hook_type) defined in smatch.h
      uses function match_dereferences(struct expression *) defined in smatch_extra.c
      uses enumvalue DEREF_HOOK defined in smatch.h
      uses function match_pointer_as_array(struct expression *) defined in smatch_extra.c
      uses enumvalue OP_HOOK defined in smatch.h
      uses function select_call_implies_hook(int,void(*)(struct expression *arg, char *key, char *value)) defined in smatch.h
      uses enumvalue DEREFERENCE defined in smatch.h
      uses function set_param_dereferenced(struct expression *,char *,char *) defined in smatch_extra.c
      uses function match_function_call(struct expression *) defined in smatch_extra.c
      uses enumvalue FUNCTION_CALL_HOOK defined in smatch.h
      uses function match_assign(struct expression *) defined in smatch_extra.c
      uses enumvalue ASSIGNMENT_HOOK defined in smatch.h
      uses enumvalue GLOBAL_ASSIGNMENT_HOOK defined in smatch.h
      uses function unop_expr(struct expression *) defined in smatch_extra.c
      uses function asm_expr(struct statement *) defined in smatch_extra.c
      uses enumvalue ASM_HOOK defined in smatch.h
      uses function add_untracked_param_hook(void(func)(struct expression *call, int param)) defined in smatch.h
      uses function match_untracked_array(struct expression *,int) defined in smatch_extra.c
      uses function match_call_info(struct expression *) defined in smatch_extra.c
      uses function add_member_info_callback(int,void(*)(struct expression *call, int param, char *printed_name, struct sm_state *sm)) defined in smatch.h
      uses variable my_id defined in smatch_extra.c
      uses function struct_member_callback(struct expression *,int,char *,struct sm_state *) defined in smatch_extra.c
      uses function add_split_return_callback(void(*)(int return_id, char *return_ranges, struct expression *returned_expr)) defined in smatch.h
      uses function returned_struct_members(int,char *,struct expression *) defined in smatch_extra.c
      uses function assume_indexes_are_valid(struct expression *) defined in smatch_extra.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/smatch_extra.h
module smatch_extra.h
   variable __ignored_macros in line 36
      protection public
   function DECLARE_PTR_LIST(range_list,struct data_range) in line 18
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function DECLARE_PTR_LIST(range_list_stack,struct range_list) in line 19
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function DECLARE_PTR_LIST(related_list,struct relation) in line 26
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function DECLARE_ALLOCATOR(data_info) in line 34
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function rl_zero(void) in line 39
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function alloc_rl(sval_t,sval_t) defined in smatch_extra.h
   function rl_one(void) in line 40
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function alloc_rl(sval_t,sval_t) defined in smatch_extra.h
   function show_rl(struct range_list *) in line 41
      protection public
      21 lines of code
      1 parameters
      1 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses function strlen(char *) defined in sm_overflow6.c
      uses function sval_cmp(sval_t,sval_t) defined in smatch.h
      uses variable data_range::min defined in smatch.h
      uses variable data_range::max defined in smatch.h
      uses function sval_to_str(sval_t) defined in smatch.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses function alloc_sname(const char *) defined in smatch_slist.c
   function str_to_comparison_arg(const char *,struct expression *,int *,struct expression **) in line 42
      protection public
      11 lines of code
      4 parameters
      1 conditional paths
      uses variable str defined in sm_overflow6.c
      uses macro definition NULL defined in sm_implied3.c
   function str_to_rl(struct symbol *,char *,struct range_list **) in line 43
      protection public
      7 lines of code
      3 parameters
      1 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses variable data_info::value_ranges defined in smatch_extra.h
   function call_results_to_rl(struct expression *,struct symbol *,char *,struct range_list **) in line 44
      protection public
      7 lines of code
      4 parameters
      1 conditional paths
      uses function strip_expr(struct expression *) defined in smatch.h
      uses variable data_info::value_ranges defined in smatch_extra.h
   function alloc_range(sval_t,sval_t) in line 46
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses macro definition min defined in sm_select_assign.c
      uses variable data_range::max defined in smatch.h
   function alloc_range_perm(sval_t,sval_t) in line 47
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses macro definition min defined in sm_select_assign.c
      uses variable data_range::max defined in smatch.h
   function alloc_rl(sval_t,sval_t) in line 49
      protection public
      10 lines of code
      2 parameters
      1 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses function sval_cmp(sval_t,sval_t) defined in smatch.h
      uses macro definition min defined in sm_select_assign.c
      uses function alloc_whole_rl(struct symbol *) defined in smatch_ranges.c
      uses function add_range(struct range_list **,sval_t,sval_t) defined in smatch_ranges.c
   function clone_rl(struct range_list *) in line 50
      protection public
      10 lines of code
      1 parameters
      1 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses macro definition add_ptr_list defined in ptrlist.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function clone_rl_permanent(struct range_list *) in line 51
      protection public
      12 lines of code
      1 parameters
      1 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses function alloc_range_perm(sval_t,sval_t) defined in smatch_ranges.c
      uses variable data_range::min defined in smatch.h
      uses variable data_range::max defined in smatch.h
      uses macro definition add_ptr_list defined in ptrlist.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function alloc_whole_rl(struct symbol *) in line 52
      protection public
      9 lines of code
      1 parameters
      1 conditional paths
      uses function type_positive_bits(struct symbol *) defined in smatch.h
      uses enumvalue SYM_ARRAY defined in symbol.h
      uses function alloc_rl(sval_t,sval_t) defined in smatch_ranges.c
      uses function sval_type_min(struct symbol *) defined in smatch.h
      uses function sval_type_max(struct symbol *) defined in smatch.h
   function add_range(struct range_list **,sval_t,sval_t) in line 54
      protection public
      88 lines of code
      3 parameters
      1 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses function sval_cmp(sval_t,sval_t) defined in smatch.h
      uses macro definition min defined in sm_select_assign.c
      uses variable data_range::max defined in smatch.h
      uses function sval_type_min(struct symbol *) defined in smatch.h
      uses function sval_type_max(struct symbol *) defined in smatch.h
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses function sval_is_max(sval_t) defined in smatch.h
      uses variable sval_t::value defined in smatch.h
      uses variable data_range::min defined in smatch.h
      uses macro definition DELETE_CURRENT_PTR defined in ptrlist.h
      uses function alloc_range(sval_t,sval_t) defined in smatch_ranges.c
      uses macro definition REPLACE_CURRENT_PTR defined in ptrlist.h
      uses macro definition INSERT_CURRENT defined in ptrlist.h
      uses function sval_is_min(sval_t) defined in smatch.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses macro definition add_ptr_list defined in ptrlist.h
   function remove_range(struct range_list *,sval_t,sval_t) in line 55
      protection public
      31 lines of code
      3 parameters
      1 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses function sval_cmp(sval_t,sval_t) defined in smatch.h
      uses variable data_range::max defined in smatch.h
      uses macro definition min defined in sm_select_assign.c
      uses function add_range(struct range_list **,sval_t,sval_t) defined in smatch_ranges.c
      uses variable data_range::min defined in smatch.h
      uses variable sval_t::value defined in smatch.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function tack_on(struct range_list **,struct data_range *) in line 56
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses macro definition add_ptr_list defined in ptrlist.h
   function true_comparison_range(struct data_range *,int,struct data_range *) in line 58
      protection public
      43 lines of code
      3 parameters
      1 conditional paths
      uses enumvalue SPECIAL_UNSIGNED_LT defined in token.h
      uses function sval_cmp(sval_t,sval_t) defined in smatch.h
      uses variable data_range::min defined in smatch.h
      uses variable data_range::max defined in smatch.h
      uses enumvalue SPECIAL_UNSIGNED_LTE defined in token.h
      uses enumvalue SPECIAL_LTE defined in token.h
      uses enumvalue SPECIAL_EQUAL defined in token.h
      uses enumvalue SPECIAL_UNSIGNED_GTE defined in token.h
      uses enumvalue SPECIAL_GTE defined in token.h
      uses enumvalue SPECIAL_UNSIGNED_GT defined in token.h
      uses enumvalue SPECIAL_NOTEQUAL defined in token.h
      uses macro definition sm_msg defined in smatch.h
   function true_comparison_range_LR(int,struct data_range *,struct data_range *,int) in line 59
      protection public
      7 lines of code
      4 parameters
      1 conditional paths
      uses function true_comparison_range(struct data_range *,int,struct data_range *) defined in smatch_ranges.c
   function false_comparison_range_LR(int,struct data_range *,struct data_range *,int) in line 60
      protection public
      7 lines of code
      4 parameters
      1 conditional paths
   function possibly_true(struct expression *,int,struct expression *) in line 62
      protection public
      28 lines of code
      3 parameters
      1 conditional paths
      uses function get_implied_rl(struct expression *,struct range_list **) defined in smatch_extra.h
      uses function rl_type(struct range_list *) defined in smatch_ranges.c
      uses function type_positive_bits(struct symbol *) defined in smatch.h
      uses function cast_rl(struct symbol *,struct range_list *) defined in smatch_ranges.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses function true_comparison_range(struct data_range *,int,struct data_range *) defined in smatch_ranges.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function possibly_true_rl(struct range_list *,int,struct range_list *) in line 63
      protection public
      25 lines of code
      3 parameters
      1 conditional paths
      uses function rl_type(struct range_list *) defined in smatch_ranges.c
      uses function type_positive_bits(struct symbol *) defined in smatch.h
      uses function cast_rl(struct symbol *,struct range_list *) defined in smatch_ranges.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses function true_comparison_range(struct data_range *,int,struct data_range *) defined in smatch_ranges.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function possibly_true_rl_LR(int,struct range_list *,struct range_list *,int) in line 64
      protection public
      7 lines of code
      4 parameters
      1 conditional paths
      uses function possibly_true_rl(struct range_list *,int,struct range_list *) defined in smatch_ranges.c
   function possibly_false(struct expression *,int,struct expression *) in line 66
      protection public
      28 lines of code
      3 parameters
      1 conditional paths
      uses function get_implied_rl(struct expression *,struct range_list **) defined in smatch_extra.h
      uses function rl_type(struct range_list *) defined in smatch_ranges.c
      uses function type_positive_bits(struct symbol *) defined in smatch.h
      uses function cast_rl(struct symbol *,struct range_list *) defined in smatch_ranges.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function possibly_false_rl(struct range_list *,int,struct range_list *) in line 67
      protection public
      25 lines of code
      3 parameters
      1 conditional paths
      uses function rl_type(struct range_list *) defined in smatch_ranges.c
      uses function type_positive_bits(struct symbol *) defined in smatch.h
      uses function cast_rl(struct symbol *,struct range_list *) defined in smatch_ranges.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function possibly_false_rl_LR(int,struct range_list *,struct range_list *,int) in line 68
      protection public
      7 lines of code
      4 parameters
      1 conditional paths
      uses function possibly_false_rl(struct range_list *,int,struct range_list *) defined in smatch_ranges.c
   function rl_has_sval(struct range_list *,sval_t) in line 70
      protection public
      11 lines of code
      2 parameters
      1 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses function sval_cmp(sval_t,sval_t) defined in smatch.h
      uses variable data_range::min defined in smatch.h
      uses variable data_range::max defined in smatch.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function ranges_equiv(struct data_range *,struct data_range *) in line 71
      protection public
      12 lines of code
      2 parameters
      1 conditional paths
      uses variable one defined in sm_equiv1.c
      uses variable two defined in sm_equiv1.c
      uses function sval_cmp(sval_t,sval_t) defined in smatch.h
   function rl_equiv(struct range_list *,struct range_list *) in line 73
      protection public
      23 lines of code
      2 parameters
      1 conditional paths
      uses variable one defined in sm_equiv1.c
      uses variable two defined in sm_equiv1.c
      uses macro definition PREPARE_PTR_LIST defined in ptrlist.h
      uses function ranges_equiv(struct data_range *,struct data_range *) defined in smatch_ranges.c
      uses macro definition NEXT_PTR_LIST defined in ptrlist.h
      uses macro definition FINISH_PTR_LIST defined in ptrlist.h
   function is_whole_rl(struct range_list *) in line 74
      protection public
      11 lines of code
      1 parameters
      1 conditional paths
      uses macro definition ptr_list_empty defined in ptrlist.h
      uses function sval_is_min(sval_t) defined in smatch.h
      uses variable data_range::min defined in smatch.h
      uses function sval_is_max(sval_t) defined in smatch.h
      uses variable data_range::max defined in smatch.h
   function estate_is_unknown(struct smatch_state *) in line 75
      protection public
      10 lines of code
      1 parameters
      4 conditional paths
      uses function estate_is_whole(struct smatch_state *) defined in smatch_estate.c
      uses function estate_related(struct smatch_state *) defined in smatch_estate.c
      uses function estate_has_fuzzy_max(struct smatch_state *) defined in smatch_estate.c
   function rl_min(struct range_list *) in line 77
      protection public
      12 lines of code
      1 parameters
      1 conditional paths
      uses variable sval_t::type defined in smatch.h
      uses variable sval_t::value defined in smatch.h
      uses macro definition ptr_list_empty defined in ptrlist.h
      uses variable data_range::min defined in smatch.h
   function rl_max(struct range_list *) in line 78
      protection public
      12 lines of code
      1 parameters
      1 conditional paths
      uses variable sval_t::type defined in smatch.h
      uses variable sval_t::value defined in smatch.h
      uses macro definition ptr_list_empty defined in ptrlist.h
      uses variable data_range::max defined in smatch.h
   function rl_to_sval(struct range_list *,sval_t *) in line 79
      protection public
      14 lines of code
      2 parameters
      1 conditional paths
      uses macro definition min defined in sm_select_assign.c
      uses variable data_range::max defined in smatch.h
      uses function rl_min(struct range_list *) defined in smatch_ranges.c
      uses function rl_max(struct range_list *) defined in smatch_ranges.c
      uses function sval_cmp(sval_t,sval_t) defined in smatch.h
   function rl_type(struct range_list *) in line 80
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses function rl_min(struct range_list *) defined in smatch_ranges.c
      uses variable sval_t::type defined in smatch.h
   function rl_invert(struct range_list *) in line 82
      protection public
      27 lines of code
      1 parameters
      1 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses function sval_type_min(struct symbol *) defined in smatch.h
      uses function rl_min(struct range_list *) defined in smatch_ranges.c
      uses function sval_type_max(struct symbol *) defined in smatch.h
      uses function rl_max(struct range_list *) defined in smatch_ranges.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses function sval_cmp(sval_t,sval_t) defined in smatch.h
      uses variable data_range::min defined in smatch.h
      uses function sval_type_val(struct symbol *,long long) defined in smatch.h
      uses variable sval_t::type defined in smatch.h
      uses variable sval_t::value defined in smatch.h
      uses function add_range(struct range_list **,sval_t,sval_t) defined in smatch_ranges.c
      uses variable data_range::max defined in smatch.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function rl_filter(struct range_list *,struct range_list *) in line 83
      protection public
      10 lines of code
      2 parameters
      1 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses function remove_range(struct range_list *,sval_t,sval_t) defined in smatch_ranges.c
      uses variable data_range::min defined in smatch.h
      uses variable data_range::max defined in smatch.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function rl_intersection(struct range_list *,struct range_list *) in line 84
      protection public
      48 lines of code
      2 parameters
      1 conditional paths
      uses variable two defined in sm_equiv1.c
      uses macro definition NULL defined in sm_implied3.c
      uses variable one defined in sm_equiv1.c
      uses function rl_type(struct range_list *) defined in smatch_ranges.c
      uses function type_bits(struct symbol *) defined in smatch.h
      uses function cast_rl(struct symbol *,struct range_list *) defined in smatch_ranges.c
      uses function rl_invert(struct range_list *) defined in smatch_ranges.c
      uses function rl_filter(struct range_list *,struct range_list *) defined in smatch_ranges.c
   function rl_union(struct range_list *,struct range_list *) in line 85
      protection public
      13 lines of code
      2 parameters
      1 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable one defined in sm_equiv1.c
      uses function add_range(struct range_list **,sval_t,sval_t) defined in smatch_ranges.c
      uses variable data_range::min defined in smatch.h
      uses variable data_range::max defined in smatch.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses variable two defined in sm_equiv1.c
   function rl_binop(struct range_list *,int,struct range_list *) in line 86
      protection public
      53 lines of code
      3 parameters
      1 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses function rl_type(struct range_list *) defined in smatch_ranges.c
      uses function sval_type_max(struct symbol *) defined in smatch.h
      uses function cast_rl(struct symbol *,struct range_list *) defined in smatch_ranges.c
      uses function alloc_whole_rl(struct symbol *) defined in smatch_ranges.c
      uses function rl_to_sval(struct range_list *,sval_t *) defined in smatch_ranges.c
      uses function sval_binop(sval_t,int,sval_t) defined in smatch.h
      uses function op(void) defined in loop2.c
      uses function alloc_rl(sval_t,sval_t) defined in smatch_ranges.c
      uses enumvalue SPECIAL_RIGHTSHIFT defined in token.h
      uses enumvalue SPECIAL_LEFTSHIFT defined in token.h
   function push_rl(struct range_list_stack **,struct range_list *) in line 88
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses macro definition add_ptr_list defined in ptrlist.h
   function pop_rl(struct range_list_stack **) in line 89
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses function delete_ptr_list_last(struct ptr_list **) defined in ptrlist.c
   function top_rl(struct range_list_stack *) in line 90
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
   function filter_top_rl(struct range_list_stack **,sval_t,sval_t) in line 91
      protection public
      8 lines of code
      3 parameters
      1 conditional paths
      uses function pop_rl(struct range_list_stack **) defined in smatch_ranges.c
      uses function remove_range(struct range_list *,sval_t,sval_t) defined in smatch_ranges.c
      uses function push_rl(struct range_list_stack **,struct range_list *) defined in smatch_ranges.c
   function rl_truncate_cast(struct symbol *,struct range_list *) in line 93
      protection public
      28 lines of code
      2 parameters
      1 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses macro definition min defined in sm_select_assign.c
      uses function rl_type(struct range_list *) defined in smatch_ranges.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable data_range::min defined in smatch.h
      uses variable data_range::max defined in smatch.h
      uses function type_bits(struct symbol *) defined in smatch.h
      uses variable sval_t::uvalue defined in smatch.h
      uses function sval_cmp(sval_t,sval_t) defined in smatch.h
      uses function sval_cast(struct symbol *,sval_t) defined in smatch.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function cast_rl(struct symbol *,struct range_list *) in line 94
      protection public
      24 lines of code
      2 parameters
      1 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses function alloc_whole_rl(struct symbol *) defined in smatch_ranges.c
      uses function rl_type(struct range_list *) defined in smatch_ranges.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable data_range::min defined in smatch.h
      uses variable data_range::max defined in smatch.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function get_implied_rl(struct expression *,struct range_list **) in line 95
      protection public
      9 lines of code
      2 parameters
      1 conditional paths
      uses enumvalue RL_IMPLIED defined in smatch_math.c
   function get_absolute_rl(struct expression *,struct range_list **) in line 96
      protection public
      9 lines of code
      2 parameters
      1 conditional paths
      uses enumvalue RL_ABSOLUTE defined in smatch_math.c
      uses function alloc_whole_rl(struct symbol *) defined in smatch_extra.h
      uses function get_type(struct expression *) defined in smatch.h
   function get_real_absolute_rl(struct expression *,struct range_list **) in line 97
      protection public
      9 lines of code
      2 parameters
      1 conditional paths
      uses enumvalue RL_REAL_ABSOLUTE defined in smatch_math.c
      uses function alloc_whole_rl(struct symbol *) defined in smatch_extra.h
      uses function get_type(struct expression *) defined in smatch.h
   function var_to_absolute_rl(struct expression *) in line 98
      protection public
      21 lines of code
      1 parameters
      1 conditional paths
      uses function get_extra_state(struct expression *) defined in smatch_extra.c
      uses function is_whole_rl(struct range_list *) defined in smatch_extra.h
      uses function estate_rl(struct smatch_state *) defined in smatch_estate.c
      uses function get_real_absolute_state(struct expression *) defined in smatch_extra.h
      uses variable smatch_state::data defined in smatch.h
      uses function estate_is_whole(struct smatch_state *) defined in smatch_estate.c
      uses function clone_rl(struct range_list *) defined in smatch_extra.h
      uses function get_local_rl(struct expression *,struct range_list **) defined in smatch.h
      uses function get_db_type_rl(struct expression *,struct range_list **) defined in smatch.h
      uses function alloc_whole_rl(struct symbol *) defined in smatch_extra.h
      uses function get_type(struct expression *) defined in smatch.h
   function custom_get_absolute_rl(struct expression *,struct range_list *(*)(struct expression *expr),struct range_list **) in line 99
      protection public
      12 lines of code
      3 parameters
      1 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses enumvalue RL_REAL_ABSOLUTE defined in smatch_math.c
   function get_implied_rl_var_sym(const char *,struct symbol *,struct range_list **) in line 102
      protection public
      10 lines of code
      3 parameters
      1 conditional paths
      uses function get_state(int,const char *,struct symbol *) defined in smatch.h
      uses macro definition SMATCH_EXTRA defined in smatch.h
      uses variable sym defined in smatch_type.c
      uses function estate_rl(struct smatch_state *) defined in smatch_estate.c
   function free_rl(struct range_list **) in line 104
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function __free_ptr_list(struct ptr_list **) defined in ptrlist.c
   function free_data_info_allocs(void) in line 105
      protection public
      18 lines of code
      1 parameters
      1 conditional paths
      uses variable allocator_struct::blobs defined in allocate.h
      uses macro definition NULL defined in sm_implied3.c
      uses variable allocator_struct::allocations defined in allocate.h
      uses variable allocator_struct::total_bytes defined in allocate.h
      uses variable allocator_struct::useful_bytes defined in allocate.h
      uses variable allocator_struct::freelist defined in allocate.h
      uses variable allocation_blob::next defined in allocate.h
      uses function blob_free(void *,unsigned long) defined in mmap-blob.c
      uses variable allocator_struct::chunking defined in allocate.h
   function alloc_estate_empty(void) in line 109
      protection public
      11 lines of code
      1 parameters
      1 conditional paths
      uses variable smatch_state::data defined in smatch.h
      uses variable smatch_state::name defined in smatch.h
   function alloc_estate_sval(sval_t) in line 110
      protection public
      11 lines of code
      1 parameters
      1 conditional paths
      uses variable smatch_state::data defined in smatch.h
      uses variable smatch_state::name defined in smatch.h
      uses function show_rl(struct range_list *) defined in smatch_extra.h
      uses function get_dinfo(struct smatch_state *) defined in smatch_estate.c
      uses function estate_set_hard_max(struct smatch_state *) defined in smatch_estate.c
      uses function estate_set_fuzzy_max(struct smatch_state *,sval_t) defined in smatch_estate.c
   function alloc_estate_range(sval_t,sval_t) in line 111
      protection public
      9 lines of code
      2 parameters
      1 conditional paths
      uses variable smatch_state::data defined in smatch.h
      uses macro definition min defined in sm_select_assign.c
      uses variable smatch_state::name defined in smatch.h
      uses function show_rl(struct range_list *) defined in smatch_extra.h
      uses function get_dinfo(struct smatch_state *) defined in smatch_estate.c
   function alloc_estate_rl(struct range_list *) in line 112
      protection public
      12 lines of code
      1 parameters
      2 conditional paths
      uses function extra_empty(void) defined in smatch_estate.c
      uses variable smatch_state::data defined in smatch.h
      uses variable smatch_state::name defined in smatch.h
      uses function show_rl(struct range_list *) defined in smatch_extra.h
   function alloc_estate_whole(struct symbol *) in line 113
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function alloc_estate_rl(struct range_list *) defined in smatch_estate.c
      uses function alloc_whole_rl(struct symbol *) defined in smatch_extra.h
   function clone_estate(struct smatch_state *) in line 114
      protection public
      12 lines of code
      1 parameters
      2 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses variable smatch_state::name defined in smatch.h
      uses variable smatch_state::data defined in smatch.h
      uses function get_dinfo(struct smatch_state *) defined in smatch_estate.c
   function clone_estate_cast(struct symbol *,struct smatch_state *) in line 115
      protection public
      17 lines of code
      2 parameters
      2 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses variable data_info::value_ranges defined in smatch_extra.h
      uses function clone_rl(struct range_list *) defined in smatch_extra.h
      uses function cast_rl(struct symbol *,struct range_list *) defined in smatch_extra.h
      uses function estate_rl(struct smatch_state *) defined in smatch_estate.c
      uses variable smatch_state::name defined in smatch.h
      uses function show_rl(struct range_list *) defined in smatch_extra.h
      uses variable smatch_state::data defined in smatch.h
   function merge_estates(struct smatch_state *,struct smatch_state *) in line 117
      protection public
      20 lines of code
      2 parameters
      3 conditional paths
      uses function estates_equiv(struct smatch_state *,struct smatch_state *) defined in smatch_estate.c
      uses variable s1 defined in designated-init.c
      uses function rl_union(struct range_list *,struct range_list *) defined in smatch_extra.h
      uses function estate_rl(struct smatch_state *) defined in smatch_estate.c
      uses function alloc_estate_rl(struct range_list *) defined in smatch_estate.c
      uses function get_shared_relations(struct related_list *,struct related_list *) defined in smatch_equiv.c
      uses function estate_related(struct smatch_state *) defined in smatch_estate.c
      uses function set_related(struct smatch_state *,struct related_list *) defined in smatch_equiv.c
      uses function estate_has_hard_max(struct smatch_state *) defined in smatch_estate.c
      uses function estate_set_hard_max(struct smatch_state *) defined in smatch_estate.c
      uses function estate_set_fuzzy_max(struct smatch_state *,sval_t) defined in smatch_estate.c
      uses function sval_max(sval_t,sval_t) defined in smatch.h
      uses function estate_get_fuzzy_max(struct smatch_state *) defined in smatch_estate.c
   function estates_equiv(struct smatch_state *,struct smatch_state *) in line 119
      protection public
      12 lines of code
      2 parameters
      5 conditional paths
      uses variable one defined in sm_equiv1.c
      uses variable two defined in sm_equiv1.c
      uses function estate_related(struct smatch_state *) defined in smatch_estate.c
   function estate_is_whole(struct smatch_state *) in line 120
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function is_whole_rl(struct range_list *) defined in smatch_extra.h
      uses function estate_rl(struct smatch_state *) defined in smatch_estate.c
   function estate_rl(struct smatch_state *) in line 122
      protection public
      6 lines of code
      1 parameters
      2 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses function get_dinfo(struct smatch_state *) defined in smatch_estate.c
      uses variable data_info::value_ranges defined in smatch_extra.h
   function estate_related(struct smatch_state *) in line 123
      protection public
      6 lines of code
      1 parameters
      2 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses function get_dinfo(struct smatch_state *) defined in smatch_estate.c
      uses variable data_info::related defined in smatch_extra.h
   function estate_min(struct smatch_state *) in line 125
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function rl_min(struct range_list *) defined in smatch_extra.h
      uses function estate_rl(struct smatch_state *) defined in smatch_estate.c
   function estate_max(struct smatch_state *) in line 126
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function rl_max(struct range_list *) defined in smatch_extra.h
      uses function estate_rl(struct smatch_state *) defined in smatch_estate.c
   function estate_type(struct smatch_state *) in line 127
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function rl_max(struct range_list *) defined in smatch_extra.h
      uses function estate_rl(struct smatch_state *) defined in smatch_estate.c
      uses variable sval_t::type defined in smatch.h
   function estate_has_fuzzy_max(struct smatch_state *) in line 129
      protection public
      6 lines of code
      1 parameters
      2 conditional paths
      uses function estate_get_fuzzy_max(struct smatch_state *) defined in smatch_estate.c
   function estate_get_fuzzy_max(struct smatch_state *) in line 130
      protection public
      8 lines of code
      1 parameters
      2 conditional paths
      uses function get_dinfo(struct smatch_state *) defined in smatch_estate.c
      uses variable data_info::fuzzy_max defined in smatch_extra.h
   function estate_set_fuzzy_max(struct smatch_state *,sval_t) in line 131
      protection public
      6 lines of code
      2 parameters
      2 conditional paths
      uses function rl_has_sval(struct range_list *,sval_t) defined in smatch_extra.h
      uses function estate_rl(struct smatch_state *) defined in smatch_estate.c
      uses function get_dinfo(struct smatch_state *) defined in smatch_estate.c
      uses variable data_info::fuzzy_max defined in smatch_extra.h
   function estate_copy_fuzzy_max(struct smatch_state *,struct smatch_state *) in line 132
      protection public
      6 lines of code
      2 parameters
      2 conditional paths
      uses function estate_has_fuzzy_max(struct smatch_state *) defined in smatch_estate.c
      uses function estate_set_fuzzy_max(struct smatch_state *,sval_t) defined in smatch_estate.c
      uses function estate_get_fuzzy_max(struct smatch_state *) defined in smatch_estate.c
   function estate_clear_fuzzy_max(struct smatch_state *) in line 133
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses function get_dinfo(struct smatch_state *) defined in smatch_estate.c
      uses variable data_info::fuzzy_max defined in smatch_extra.h
   function estate_has_hard_max(struct smatch_state *) in line 134
      protection public
      6 lines of code
      1 parameters
      2 conditional paths
      uses function get_dinfo(struct smatch_state *) defined in smatch_estate.c
      uses variable data_info::hard_max defined in smatch_extra.h
   function estate_set_hard_max(struct smatch_state *) in line 135
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function get_dinfo(struct smatch_state *) defined in smatch_estate.c
      uses variable data_info::hard_max defined in smatch_extra.h
   function estate_clear_hard_max(struct smatch_state *) in line 136
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function get_dinfo(struct smatch_state *) defined in smatch_estate.c
      uses variable data_info::hard_max defined in smatch_extra.h
   function estate_get_hard_max(struct smatch_state *,sval_t *) in line 137
      protection public
      7 lines of code
      2 parameters
      2 conditional paths
      uses function get_dinfo(struct smatch_state *) defined in smatch_estate.c
      uses function estate_rl(struct smatch_state *) defined in smatch_estate.c
      uses function rl_max(struct range_list *) defined in smatch_extra.h
   function estate_get_single_value(struct smatch_state *,sval_t *) in line 139
      protection public
      11 lines of code
      2 parameters
      2 conditional paths
      uses macro definition min defined in sm_select_assign.c
      uses function rl_min(struct range_list *) defined in smatch_extra.h
      uses function estate_rl(struct smatch_state *) defined in smatch_estate.c
      uses function rl_max(struct range_list *) defined in smatch_extra.h
      uses function sval_cmp(sval_t,sval_t) defined in smatch.h
   function get_implied_estate(struct expression *) in line 140
      protection public
      12 lines of code
      1 parameters
      3 conditional paths
      uses function get_state_expr(int,struct expression *) defined in smatch.h
      uses macro definition SMATCH_EXTRA defined in smatch.h
      uses function get_implied_rl(struct expression *,struct range_list **) defined in smatch_extra.h
      uses function alloc_whole_rl(struct symbol *) defined in smatch_extra.h
      uses function get_type(struct expression *) defined in smatch.h
      uses function alloc_estate_rl(struct range_list *) defined in smatch_estate.c
   function estate_filter_sval(struct smatch_state *,sval_t) in line 142
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function estate_filter_range(struct smatch_state *,sval_t,sval_t) defined in smatch_estate.c
   function estate_filter_range(struct smatch_state *,sval_t,sval_t) in line 143
      protection public
      17 lines of code
      3 parameters
      4 conditional paths
      uses function alloc_estate_whole(struct symbol *) defined in smatch_estate.c
      uses variable sval_t::type defined in smatch.h
      uses function remove_range(struct range_list *,sval_t,sval_t) defined in smatch_extra.h
      uses function estate_rl(struct smatch_state *) defined in smatch_estate.c
      uses function alloc_estate_rl(struct range_list *) defined in smatch_estate.c
      uses function estate_has_hard_max(struct smatch_state *) defined in smatch_estate.c
      uses function estate_set_hard_max(struct smatch_state *) defined in smatch_estate.c
      uses function estate_has_fuzzy_max(struct smatch_state *) defined in smatch_estate.c
      uses function estate_set_fuzzy_max(struct smatch_state *,sval_t) defined in smatch_estate.c
      uses function estate_get_fuzzy_max(struct smatch_state *) defined in smatch_estate.c
   function clone_dinfo_perm(struct data_info *) in line 144
      protection public
      12 lines of code
      1 parameters
      1 conditional paths
      uses function malloc(int) defined in sm_buf_size2.c
      uses function memset(void *,int,int) defined in check_byte_count-ice.c
      uses variable data_info::related defined in smatch_extra.h
      uses macro definition NULL defined in sm_implied3.c
      uses variable data_info::value_ranges defined in smatch_extra.h
      uses function clone_rl_permanent(struct range_list *) defined in smatch_extra.h
      uses variable data_info::hard_max defined in smatch_extra.h
      uses variable data_info::fuzzy_max defined in smatch_extra.h
   function clone_estate_perm(struct smatch_state *) in line 145
      protection public
      9 lines of code
      1 parameters
      1 conditional paths
      uses function malloc(int) defined in sm_buf_size2.c
      uses variable smatch_state::name defined in smatch.h
      uses function alloc_string(const char *) defined in smatch.h
      uses variable smatch_state::data defined in smatch.h
      uses function clone_dinfo_perm(struct data_info *) defined in smatch_estate.c
      uses function get_dinfo(struct smatch_state *) defined in smatch_estate.c
   function get_extra_state(struct expression *) in line 148
      protection public
      19 lines of code
      1 parameters
      4 conditional paths
      uses variable name defined in smatch_type.c
      uses variable sym defined in smatch_type.c
      uses macro definition NULL defined in sm_implied3.c
      uses function is_pointer(struct expression *) defined in smatch.h
      uses function get_address_rl(struct expression *,struct range_list **) defined in smatch.h
      uses function alloc_estate_rl(struct range_list *) defined in smatch_estate.c
      uses function expr_to_known_chunk_sym(struct expression *,struct symbol **) defined in smatch.h
      uses function get_state(int,const char *,struct symbol *) defined in smatch.h
      uses macro definition SMATCH_EXTRA defined in smatch.h
      uses function free_string(char *) defined in smatch.h
   function call_extra_mod_hooks(const char *,struct symbol *,struct smatch_state *) in line 149
      protection public
      8 lines of code
      3 parameters
      1 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable name defined in smatch_type.c
      uses variable sym defined in smatch_type.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function set_extra_mod(const char *,struct symbol *,struct smatch_state *) in line 150
      protection public
      13 lines of code
      3 parameters
      2 conditional paths
      uses function set_extra_mod_helper(const char *,struct symbol *,struct smatch_state *) defined in smatch_extra.c
      uses variable name defined in smatch_type.c
      uses variable sym defined in smatch_type.c
      uses variable sm_state::state defined in smatch.h
      uses function free_string(char *) defined in smatch.h
   function set_extra_expr_mod(struct expression *,struct smatch_state *) in line 151
      protection public
      18 lines of code
      2 parameters
      4 conditional paths
      uses variable sym defined in smatch_type.c
      uses variable name defined in smatch_type.c
      uses macro definition NULL defined in sm_implied3.c
      uses function is_array(struct expression *) defined in smatch.h
      uses variable sm_state::state defined in smatch.h
      uses function strip_expr(struct expression *) defined in smatch.h
      uses function expr_to_var_sym(struct expression *,struct symbol **) defined in smatch.h
      uses function set_extra_mod(const char *,struct symbol *,struct smatch_state *) defined in smatch_extra.c
      uses function free_string(char *) defined in smatch.h
   function set_extra_nomod(const char *,struct symbol *,struct smatch_state *) in line 152
      protection public
      31 lines of code
      3 parameters
      5 conditional paths
      uses function get_state(int,const char *,struct symbol *) defined in smatch.h
      uses macro definition SMATCH_EXTRA defined in smatch.h
      uses variable name defined in smatch_type.c
      uses variable sym defined in smatch_type.c
      uses function set_state(int,const char *,struct symbol *,struct smatch_state *) defined in smatch.h
      uses function free_string(char *) defined in smatch.h
      uses function estate_related(struct smatch_state *) defined in smatch_estate.c
      uses function set_related(struct smatch_state *,struct related_list *) defined in smatch_equiv.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable option_debug_related defined in smatch.c
      uses macro definition sm_msg defined in smatch.h
      uses variable relation::name defined in smatch_extra.h
      uses variable smatch_state::name defined in smatch.h
      uses variable relation::sym defined in smatch_extra.h
      uses function clone_estate_cast(struct symbol *,struct smatch_state *) defined in smatch_estate.c
      uses function estate_type(struct smatch_state *) defined in smatch_estate.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function set_extra_expr_nomod(struct expression *,struct smatch_state *) in line 153
      protection public
      13 lines of code
      2 parameters
      3 conditional paths
      uses variable name defined in smatch_type.c
      uses variable sym defined in smatch_type.c
      uses function expr_to_var_sym(struct expression *,struct symbol **) defined in smatch.h
      uses function set_extra_nomod(const char *,struct symbol *,struct smatch_state *) defined in smatch_extra.c
      uses function free_string(char *) defined in smatch.h
   function get_dinfo(struct smatch_state *) in line 155
      protection public
      6 lines of code
      1 parameters
      2 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses variable smatch_state::data defined in smatch.h
   function add_extra_mod_hook(void(*)(const char *name, struct symbol *sym, struct smatch_state *state)) in line 157
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function implied_not_equal(struct expression *,long long) in line 158
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function possibly_false(struct expression *,int,struct expression *) defined in smatch_extra.h
      uses enumvalue SPECIAL_NOTEQUAL defined in token.h
      uses function value_expr(long long) defined in smatch_expressions.c
   function implied_not_equal_name_sym(char *,struct symbol *,long long) in line 159
      protection public
      11 lines of code
      3 parameters
      3 conditional paths
      uses function get_state(int,const char *,struct symbol *) defined in smatch.h
      uses macro definition SMATCH_EXTRA defined in smatch.h
      uses variable name defined in smatch_type.c
      uses variable sym defined in smatch_type.c
      uses function rl_has_sval(struct range_list *,sval_t) defined in smatch_extra.h
      uses function estate_rl(struct smatch_state *) defined in smatch_estate.c
      uses function sval_type_val(struct symbol *,long long) defined in smatch.h
      uses function estate_type(struct smatch_state *) defined in smatch_estate.c
   function parent_is_null_var_sym(const char *,struct symbol *) in line 160
      protection public
      38 lines of code
      2 parameters
      9 conditional paths
      uses variable buf defined in sm_fake_assignment.c
      uses variable name defined in smatch_type.c
      uses function get_state(int,const char *,struct symbol *) defined in smatch.h
      uses macro definition SMATCH_EXTRA defined in smatch.h
      uses variable sym defined in smatch_type.c
      uses function estate_rl(struct smatch_state *) defined in smatch_estate.c
      uses function estate_min(struct smatch_state *) defined in smatch_estate.c
      uses function estate_max(struct smatch_state *) defined in smatch_estate.c
   function parent_is_null(struct expression *) in line 161
      protection public
      15 lines of code
      1 parameters
      3 conditional paths
      uses variable sym defined in smatch_type.c
      uses function strip_expr(struct expression *) defined in smatch.h
      uses function expr_to_var_sym(struct expression *,struct symbol **) defined in smatch.h
      uses function parent_is_null_var_sym(const char *,struct symbol *) defined in smatch_extra.c
      uses function free_string(char *) defined in smatch.h
   function parent_is_free_var_sym(const char *,struct symbol *) in line 162
      protection public
      22 lines of code
      2 parameters
      4 conditional paths
      uses variable buf defined in sm_fake_assignment.c
      uses variable name defined in smatch_type.c
      uses function get_state(int,const char *,struct symbol *) defined in smatch.h
      uses variable sym defined in smatch_type.c
   function parent_is_free(struct expression *) in line 163
      protection public
      15 lines of code
      1 parameters
      3 conditional paths
      uses variable sym defined in smatch_type.c
      uses function strip_expr(struct expression *) defined in smatch.h
      uses function expr_to_var_sym(struct expression *,struct symbol **) defined in smatch.h
      uses function parent_is_free_var_sym(const char *,struct symbol *) defined in check_free.c
      uses function free_string(char *) defined in smatch.h
   function __extra_handle_canonical_loops(struct statement *,struct stree **) in line 165
      protection public
      12 lines of code
      2 parameters
      2 conditional paths
      uses function __push_fake_cur_stree(void) defined in smatch.h
      uses variable statement::iterator_post_statement defined in parse.h
      uses function __pop_fake_cur_stree(void) defined in smatch.h
   function __iterator_unchanged(struct sm_state *) in line 166
      protection public
      8 lines of code
      1 parameters
      3 conditional paths
      uses function get_sm_state(int,const char *,struct symbol *) defined in smatch.h
      uses variable sm_state::name defined in smatch.h
      uses variable sm_state::sym defined in smatch.h
   function __extra_pre_loop_hook_after(struct sm_state *,struct statement *,struct expression *) in line 167
      protection public
      47 lines of code
      3 parameters
      10 conditional paths
      uses variable condition defined in context.c
      uses variable statement::expression defined in parse.h
      uses enumvalue EXPR_COMPARE defined in expression.h
      uses variable expression::op defined in expression.h
      uses enumvalue SPECIAL_INCREMENT defined in token.h
      uses function sval_binop(sval_t,int,sval_t) defined in smatch.h
      uses function estate_max(struct smatch_state *) defined in smatch_estate.c
      uses variable sm_state::state defined in smatch.h
      uses function sval_type_val(struct symbol *,long long) defined in smatch.h
      uses function estate_type(struct smatch_state *) defined in smatch_estate.c
      uses function estate_min(struct smatch_state *) defined in smatch_estate.c
      uses function estate_has_hard_max(struct smatch_state *) defined in smatch_estate.c
      uses function __has_breaks(void) defined in smatch.h
      uses function alloc_estate_range(sval_t,sval_t) defined in smatch_estate.c
      uses function alloc_estate_sval(sval_t) defined in smatch_estate.c
      uses function estate_clear_hard_max(struct smatch_state *) defined in smatch_estate.c
      uses function estate_has_fuzzy_max(struct smatch_state *) defined in smatch_estate.c
      uses function estate_get_fuzzy_max(struct smatch_state *) defined in smatch_estate.c
      uses function sval_cmp(sval_t,sval_t) defined in smatch.h
      uses function estate_clear_fuzzy_max(struct smatch_state *) defined in smatch_estate.c
      uses function set_extra_mod(const char *,struct symbol *,struct smatch_state *) defined in smatch_extra.c
      uses variable sm_state::name defined in smatch.h
      uses variable sm_state::sym defined in smatch.h
   function set_equiv(struct expression *,struct expression *) in line 172
      protection public
      42 lines of code
      2 parameters
      6 conditional paths
      uses function expr_to_var_sym(struct expression *,struct symbol **) defined in smatch.h
      uses function get_sm_state_expr(int,struct expression *) defined in smatch.h
      uses macro definition SMATCH_EXTRA defined in smatch.h
      uses function set_state_expr(int,struct expression *,struct smatch_state *) defined in smatch.h
      uses function alloc_estate_whole(struct symbol *) defined in smatch_estate.c
      uses function get_type(struct expression *) defined in smatch.h
      uses function remove_from_equiv(const char *,struct symbol *) defined in smatch_equiv.c
      uses function clone_related_list(struct related_list *) defined in smatch_equiv.c
      uses function estate_related(struct smatch_state *) defined in smatch_estate.c
      uses variable sm_state::state defined in smatch.h
      uses variable sm_state::name defined in smatch.h
      uses variable sm_state::sym defined in smatch.h
      uses function clone_estate(struct smatch_state *) defined in smatch_estate.c
      uses function get_dinfo(struct smatch_state *) defined in smatch_estate.c
      uses variable data_info::related defined in smatch_extra.h
      uses function call_extra_mod_hooks(const char *,struct symbol *,struct smatch_state *) defined in smatch_extra.c
      uses function clone_estate_cast(struct symbol *,struct smatch_state *) defined in smatch_estate.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses function clone_sm(struct sm_state *) defined in smatch_slist.c
      uses variable relation::name defined in smatch_extra.h
      uses variable relation::sym defined in smatch_extra.h
      uses function __set_sm(struct sm_state *) defined in smatch.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses function free_string(char *) defined in smatch.h
   function set_related(struct smatch_state *,struct related_list *) in line 173
      protection public
      6 lines of code
      2 parameters
      2 conditional paths
      uses function estate_related(struct smatch_state *) defined in smatch_estate.c
      uses function get_dinfo(struct smatch_state *) defined in smatch_estate.c
      uses variable data_info::related defined in smatch_extra.h
   function get_shared_relations(struct related_list *,struct related_list *) in line 174
      protection public
      27 lines of code
      2 parameters
      5 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses macro definition PREPARE_PTR_LIST defined in ptrlist.h
      uses variable one defined in sm_equiv1.c
      uses variable two defined in sm_equiv1.c
      uses macro definition NEXT_PTR_LIST defined in ptrlist.h
      uses macro definition add_ptr_list defined in ptrlist.h
      uses macro definition FINISH_PTR_LIST defined in ptrlist.h
   function clone_related_list(struct related_list *) in line 176
      protection public
      11 lines of code
      1 parameters
      1 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses macro definition add_ptr_list defined in ptrlist.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function remove_from_equiv(const char *,struct symbol *) in line 177
      protection public
      28 lines of code
      2 parameters
      3 conditional paths
      uses function get_sm_state(int,const char *,struct symbol *) defined in smatch.h
      uses macro definition SMATCH_EXTRA defined in smatch.h
      uses variable name defined in smatch_type.c
      uses variable sym defined in smatch_type.c
      uses function get_dinfo(struct smatch_state *) defined in smatch_estate.c
      uses variable sm_state::state defined in smatch.h
      uses variable data_info::related defined in smatch_extra.h
      uses function clone_estate(struct smatch_state *) defined in smatch_estate.c
      uses function ptr_list_size(struct ptr_list *) defined in ptrlist.c
      uses macro definition NULL defined in sm_implied3.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses function clone_sm(struct sm_state *) defined in smatch_slist.c
      uses variable sm_state::name defined in smatch.h
      uses variable relation::name defined in smatch_extra.h
      uses variable sm_state::sym defined in smatch.h
      uses variable relation::sym defined in smatch_extra.h
      uses function __set_sm(struct sm_state *) defined in smatch.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function remove_from_equiv_expr(struct expression *) in line 178
      protection public
      12 lines of code
      1 parameters
      3 conditional paths
      uses variable name defined in smatch_type.c
      uses variable sym defined in smatch_type.c
      uses function expr_to_var_sym(struct expression *,struct symbol **) defined in smatch.h
      uses function remove_from_equiv(const char *,struct symbol *) defined in smatch_equiv.c
      uses function free_string(char *) defined in smatch.h
   function set_equiv_state_expr(int,struct expression *,struct smatch_state *) in line 179
      protection public
      14 lines of code
      3 parameters
      2 conditional paths
      uses function get_state_expr(int,struct expression *) defined in smatch.h
      uses macro definition SMATCH_EXTRA defined in smatch.h
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses function get_dinfo(struct smatch_state *) defined in smatch_estate.c
      uses function set_state(int,const char *,struct symbol *,struct smatch_state *) defined in smatch.h
      uses variable relation::name defined in smatch_extra.h
      uses variable relation::sym defined in smatch_extra.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function function_comparison(struct expression *,int,struct expression *) in line 182
      protection public
      29 lines of code
      3 parameters
      1 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_CALL defined in expression.h
      uses function get_absolute_rl(struct expression *,struct range_list **) defined in smatch_extra.h
      uses function rl_to_sval(struct range_list *,sval_t *) defined in smatch_extra.h
      uses function free_stree(struct stree **) defined in avl.c
   function zero_expr(void) in line 185
      protection public
      12 lines of code
      1 parameters
      2 conditional paths
      uses function zero(void) defined in sm_impossible1.c
      uses enumvalue EXPR_VALUE defined in expression.h
   function value_expr(long long) in line 186
      protection public
      12 lines of code
      1 parameters
      2 conditional paths
      uses function zero_expr(void) defined in smatch_expressions.c
      uses enumvalue EXPR_VALUE defined in expression.h
      uses variable expression::value defined in expression.h
      uses variable expression::ctype defined in expression.h
   function member_expression(struct expression *,int,struct ident *) in line 187
      protection public
      10 lines of code
      3 parameters
      1 conditional paths
      uses enumvalue EXPR_DEREF defined in expression.h
      uses variable expression::op defined in expression.h
      uses function op(void) defined in loop2.c
      uses variable expression::deref defined in expression.h
      uses variable expression::member defined in expression.h
      uses variable member defined in smdb.py
   function deref_expression(struct expression *) in line 188
      protection public
      9 lines of code
      1 parameters
      1 conditional paths
      uses variable expression::pos defined in expression.h
      uses enumvalue EXPR_PREOP defined in expression.h
      uses variable expression::unop defined in expression.h
      uses variable expression::op defined in expression.h
   function assign_expression(struct expression *,struct expression *) in line 189
      protection public
      10 lines of code
      2 parameters
      1 conditional paths
      uses variable expression::right defined in expression.h
      uses variable expression::pos defined in expression.h
      uses enumvalue EXPR_ASSIGNMENT defined in expression.h
      uses variable expression::op defined in expression.h
      uses variable expression::left defined in expression.h
   function binop_expression(struct expression *,int,struct expression *) in line 190
      protection public
      10 lines of code
      3 parameters
      1 conditional paths
      uses variable expression::right defined in expression.h
      uses variable expression::pos defined in expression.h
      uses enumvalue EXPR_BINOP defined in expression.h
      uses variable expression::op defined in expression.h
      uses function op(void) defined in loop2.c
      uses variable expression::left defined in expression.h
   function array_element_expression(struct expression *,struct expression *) in line 191
      protection public
      7 lines of code
      2 parameters
      1 conditional paths
      uses function binop_expression(struct expression *,int,struct expression *) defined in smatch_expressions.c
      uses variable offset defined in sm_implied10.c
      uses function deref_expression(struct expression *) defined in smatch_expressions.c
   function symbol_expression(struct symbol *) in line 192
      protection public
      9 lines of code
      1 parameters
      1 conditional paths
      uses variable sym defined in smatch_type.c
      uses variable symbol::pos defined in struct.c
      uses enumvalue EXPR_SYMBOL defined in expression.h
      uses variable expression::symbol defined in expression.h
      uses variable expression::symbol_name defined in expression.h
      uses variable symbol::ident defined in struct.c
   function unknown_value_expression(struct expression *) in line 193
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function is_fake_call(struct expression *) in line 194
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function get_orig_estate(const char *,struct symbol *) in line 197
      protection public
      13 lines of code
      2 parameters
      1 conditional paths
      uses function get_state(int,const char *,struct symbol *) defined in smatch.h
      uses variable name defined in smatch_type.c
      uses variable sym defined in smatch_type.c
      uses macro definition SMATCH_EXTRA defined in smatch.h
      uses function alloc_estate_rl(struct range_list *) defined in smatch_estate.c
      uses function alloc_whole_rl(struct symbol *) defined in smatch_extra.h
      uses function get_real_base_type(struct symbol *) defined in smatch.h
   function get_real_absolute_state(struct expression *) in line 200
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function get_state_expr(int,struct expression *) defined in smatch.h
   variable relation::name in line 22
      protection public
   variable relation::sym in line 23
      protection public
   variable data_info::fuzzy_max in line 31
      protection public
   variable data_info::hard_max in line 32
      protection public
   variable data_info::related in line 29
      protection public
   variable data_info::value_ranges in line 30
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/smatch_files.c
module smatch_files.c
   function open_data_file(const char *) in line 24
      protection public
      15 lines of code
      1 parameters
      5 conditional paths
      uses variable buf defined in sm_fake_assignment.c
      uses function exit(int) defined in test-be.c
      uses variable data_dir defined in smatch.c
      uses function snprintf(char *,int,char *,char *) defined in sm_overflow6.c
   function get_tokens_file(const char *) in line 40
      protection public
      14 lines of code
      1 parameters
      3 conditional paths
      uses variable option_no_data defined in smatch.c
      uses macro definition NULL defined in sm_implied3.c
      uses function open_data_file(const char *) defined in smatch_files.c
      uses function tokenize(const char *,int,struct token *,const char **) defined in token.h
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/smatch_flow.c
module smatch_flow.c
   macro definition _GNU_SOURCE in line 18
      protection public
   typedef fake_cb in line 1031
      protection public
   variable __in_fake_assign in line 28
      protection public
   variable final_pass in line 29
      protection public
   variable __inline_call in line 30
      protection public
   variable __inline_fn in line 31
      protection public
   variable __smatch_lineno in line 33
      protection public
   variable base_file in line 35
      protection public
   variable filename in line 36
      protection public
   variable pathname in line 37
      protection public
   variable full_filename in line 38
      protection public
   variable cur_func in line 39
      protection public
   variable loop_count in line 40
      protection public
   variable last_goto_statement_handled in line 41
      protection public
   variable __expr_stmt_count in line 42
      protection public
   variable __in_function_def in line 43
      protection public
   variable switch_expr_stack in line 44
      protection public
   variable post_op_stack in line 45
      protection public
   variable big_expression_stack in line 47
      protection public
   variable big_statement_stack in line 48
      protection public
   variable __prev_stmt in line 49
      protection public
   variable __cur_stmt in line 50
      protection public
   variable __next_stmt in line 51
      protection public
   variable __in_pre_condition in line 52
      protection public
   variable __bail_on_rest_of_function in line 53
      protection public
   variable fn_start_time in line 53
      protection public
   variable option_assume_loops in line 68
      protection public
   variable option_two_passes in line 69
      protection public
   variable cur_func_sym in line 70
      protection public
   variable global_states in line 71
      protection public
   variable valid_ptr_min in line 73
      protection public
   variable valid_ptr_max in line 74
      protection public
   variable valid_ptr_min_sval in line 75
      protection public
   variable valid_ptr_max_sval in line 79
      protection public
   variable loop_num in line 494
      protection public
   variable inlines_called in line 1464
      protection public
   function get_function(void) in line 55
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses variable cur_func defined in smatch_flow.c
   function get_lineno(void) in line 56
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses variable __smatch_lineno defined in smatch_flow.c
   function inside_loop(void) in line 57
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses variable loop_count defined in smatch_flow.c
   function definitely_inside_loop(void) in line 58
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses variable loop_count defined in smatch_flow.c
   function get_switch_expr(void) in line 59
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses function top_expression(struct expression_list *) defined in smatch_expression_stacks.c
      uses variable switch_expr_stack defined in smatch_flow.c
   function in_expression_statement(void) in line 60
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses variable __expr_stmt_count defined in smatch_flow.c
      uses function split_symlist(struct symbol_list *) defined in smatch_flow.c
      uses function split_declaration(struct symbol_list *) defined in smatch_flow.c
      uses function split_expr_list(struct expression_list *,struct expression *) defined in smatch_flow.c
      uses variable expression::expr_list defined in expression.h
      uses variable expression::parent defined in expression.h
      uses function add_inline_function(struct symbol *) defined in smatch_flow.c
      uses variable sym defined in smatch_type.c
      uses function parse_inline(struct expression *) defined in smatch_flow.c
   function split_symlist(struct symbol_list *) in line 62
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses variable sym defined in smatch_type.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses function split_sym(struct symbol *) defined in smatch_flow.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function split_declaration(struct symbol_list *) in line 63
      protection public
      10 lines of code
      1 parameters
      1 conditional paths
      uses variable sym defined in smatch_type.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses function __pass_to_client(void *,enum hook_type) defined in smatch.h
      uses enumvalue DECLARATION_HOOK defined in smatch.h
      uses function do_initializer_stuff(struct symbol *) defined in smatch_flow.c
      uses function split_sym(struct symbol *) defined in smatch_flow.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function split_expr_list(struct expression_list *,struct expression *) in line 64
      protection public
      10 lines of code
      2 parameters
      1 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable expression::expr_list defined in expression.h
      uses function set_parent(struct expression *,struct expression *) defined in smatch_flow.c
      uses variable expression::parent defined in expression.h
      uses function __split_expr(struct expression *) defined in smatch_flow.c
      uses function __process_post_op_stack(void) defined in smatch_flow.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function add_inline_function(struct symbol *) in line 65
      protection public
      13 lines of code
      1 parameters
      2 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable sym defined in smatch_type.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses macro definition add_ptr_list defined in ptrlist.h
      uses variable inlines_called defined in smatch_flow.c
   function parse_inline(struct expression *) in line 66
      protection public
      55 lines of code
      1 parameters
      2 conditional paths
      uses variable loop_num defined in smatch_flow.c
      uses variable final_pass defined in smatch_flow.c
      uses variable cur_func defined in smatch_flow.c
      uses variable big_statement_stack defined in smatch_flow.c
      uses variable big_expression_stack defined in smatch_flow.c
      uses variable switch_expr_stack defined in smatch_flow.c
      uses variable cur_func_sym defined in smatch_flow.c
      uses function __pass_to_client(void *,enum hook_type) defined in smatch.h
      uses enumvalue INLINE_FN_START defined in smatch.h
      uses variable __inline_fn defined in smatch_flow.c
      uses variable expression::fn defined in expression.h
      uses variable expression::symbol defined in expression.h
      uses variable symbol::ident defined in struct.c
      uses variable ident::name defined in token.h
      uses macro definition NULL defined in sm_implied3.c
      uses function set_position(struct position) defined in smatch_flow.c
      uses variable symbol::pos defined in struct.c
      uses function save_all_states(void) defined in smatch.h
      uses macro definition sm_debug defined in smatch.h
      uses function __unnullify_path(void) defined in smatch.h
      uses function start_function_definition(struct symbol *) defined in smatch_flow.c
      uses function __split_stmt(struct statement *) defined in smatch_flow.c
      uses variable symbol::stmt defined in struct.c
      uses variable symbol::inline_stmt defined in struct.c
      uses enumvalue END_FUNC_HOOK defined in smatch.h
      uses enumvalue AFTER_FUNC_HOOK defined in smatch.h
      uses function free_expression_stack(struct expression_list **) defined in smatch_expression_stacks.c
      uses function __free_ptr_list(struct ptr_list **) defined in ptrlist.c
      uses function nullify_path(void) defined in smatch.h
      uses function free_goto_stack(void) defined in smatch.h
      uses function restore_all_states(void) defined in smatch.h
      uses variable expression::pos defined in expression.h
      uses enumvalue INLINE_FN_END defined in smatch.h
   function set_valid_ptr_max(void) in line 84
      protection public
      9 lines of code
      1 parameters
      3 conditional paths
      uses function type_bits(struct symbol *) defined in smatch.h
      uses variable valid_ptr_max defined in smatch_flow.c
      uses variable valid_ptr_max_sval defined in smatch_flow.c
      uses variable sval_t::value defined in smatch.h
   function outside_of_function(void) in line 94
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable cur_func_sym defined in smatch_flow.c
      uses macro definition NULL defined in sm_implied3.c
   function get_filename(void) in line 99
      protection public
      8 lines of code
      1 parameters
      3 conditional paths
      uses variable option_info defined in smatch.c
      uses variable base_file defined in smatch_flow.c
      uses variable option_full_path defined in smatch.c
      uses variable full_filename defined in smatch_flow.c
      uses variable filename defined in smatch_flow.c
   function get_base_file(void) in line 108
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable base_file defined in smatch_flow.c
   function set_position(struct position) in line 113
      protection public
      26 lines of code
      1 parameters
      4 conditional paths
      uses variable position::stream defined in lib.h
      uses variable position::line defined in lib.h
      uses variable __smatch_lineno defined in smatch_flow.c
      uses variable filename defined in smatch_flow.c
      uses function stream_name(int) defined in token.h
      uses variable full_filename defined in smatch_flow.c
      uses variable pathname defined in smatch_flow.c
      uses macro definition NULL defined in sm_implied3.c
      uses function strlen(char *) defined in sm_overflow6.c
      uses function malloc(int) defined in sm_buf_size2.c
      uses function snprintf(char *,int,char *,char *) defined in sm_overflow6.c
      uses function alloc_string(const char *) defined in smatch.h
   function set_parent(struct expression *,struct expression *) in line 140
      protection public
      6 lines of code
      2 parameters
      2 conditional paths
      uses variable expression::parent defined in expression.h
   function set_parent_stmt(struct statement *,struct statement *) in line 147
      protection public
      6 lines of code
      2 parameters
      2 conditional paths
      uses variable statement::parent defined in parse.h
   function is_assigned_call(struct expression *) in line 154
      protection public
      13 lines of code
      1 parameters
      3 conditional paths
      uses macro definition FOR_EACH_PTR_REVERSE defined in ptrlist.h
      uses variable big_expression_stack defined in smatch_flow.c
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_ASSIGNMENT defined in expression.h
      uses variable expression::op defined in expression.h
      uses function strip_expr(struct expression *) defined in smatch.h
      uses variable expression::right defined in expression.h
      uses variable expression::pos defined in expression.h
      uses variable position::line defined in lib.h
      uses macro definition END_FOR_EACH_PTR_REVERSE defined in ptrlist.h
   function is_inline_func(struct expression *) in line 168
      protection public
      8 lines of code
      1 parameters
      3 conditional paths
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_SYMBOL defined in expression.h
      uses variable expression::symbol defined in expression.h
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::modifiers defined in struct.c
      uses macro definition MOD_INLINE defined in symbol.h
   function is_noreturn_func(struct expression *) in line 177
      protection public
      8 lines of code
      1 parameters
      3 conditional paths
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_SYMBOL defined in expression.h
      uses variable expression::symbol defined in expression.h
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::modifiers defined in struct.c
      uses macro definition MOD_NORETURN defined in symbol.h
   function inlinable(struct expression *) in line 186
      protection public
      37 lines of code
      1 parameters
      12 conditional paths
      uses variable sym defined in smatch_type.c
      uses macro definition NULL defined in sm_implied3.c
      uses variable __inline_fn defined in smatch_flow.c
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_SYMBOL defined in expression.h
      uses variable expression::symbol defined in expression.h
      uses function is_no_inline_function(const char *) defined in smatch.h
      uses variable symbol::ident defined in struct.c
      uses variable ident::name defined in token.h
      uses variable symbol::stmt defined in struct.c
      uses variable statement::type defined in parse.h
      uses enumvalue STMT_COMPOUND defined in parse.h
      uses function ptr_list_size(struct ptr_list *) defined in ptrlist.c
      uses variable statement::stmts defined in parse.h
      uses variable symbol::inline_stmt defined in struct.c
      uses variable statement::pos defined in parse.h
      uses variable position::line defined in lib.h
      uses variable symbol::pos defined in struct.c
   function __process_post_op_stack(void) in line 224
      protection public
      10 lines of code
      1 parameters
      1 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable post_op_stack defined in smatch_flow.c
      uses function __pass_to_client(void *,enum hook_type) defined in smatch.h
      uses enumvalue OP_HOOK defined in smatch.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses function __free_ptr_list(struct ptr_list **) defined in ptrlist.c
   function handle_comma_assigns(struct expression *) in line 235
      protection public
      17 lines of code
      1 parameters
      2 conditional paths
      uses variable expression::right defined in expression.h
      uses function strip_expr(struct expression *) defined in smatch.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_COMMA defined in expression.h
      uses function __split_expr(struct expression *) defined in smatch_flow.c
      uses variable expression::left defined in expression.h
      uses function __process_post_op_stack(void) defined in smatch_flow.c
      uses function assign_expression(struct expression *,struct expression *) defined in smatch_expressions.c
   function prev_expression_is_getting_address(struct expression *) in line 253
      protection public
      21 lines of code
      1 parameters
      8 conditional paths
      uses variable expression::parent defined in expression.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_PREOP defined in expression.h
      uses variable expression::op defined in expression.h
      uses enumvalue EXPR_DEREF defined in expression.h
   function __split_expr(struct expression *) in line 275
      protection public
      200 lines of code
      1 parameters
      47 conditional paths
      uses variable __in_fake_assign defined in smatch_flow.c
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_ASSIGNMENT defined in expression.h
      uses function push_expression(struct expression_list **,struct expression *) defined in smatch_expression_stacks.c
      uses variable big_expression_stack defined in smatch_flow.c
      uses function set_position(struct position) defined in smatch_flow.c
      uses variable expression::pos defined in expression.h
      uses function __pass_to_client(void *,enum hook_type) defined in smatch.h
      uses enumvalue EXPR_HOOK defined in smatch.h
      uses enumvalue EXPR_PREOP defined in expression.h
      uses function set_parent(struct expression *,struct expression *) defined in smatch_flow.c
      uses variable expression::unop defined in expression.h
      uses variable expression::op defined in expression.h
      uses function prev_expression_is_getting_address(struct expression *) defined in smatch_flow.c
      uses enumvalue DEREF_HOOK defined in smatch.h
      uses enumvalue OP_HOOK defined in smatch.h
      uses enumvalue EXPR_POSTOP defined in expression.h
      uses variable post_op_stack defined in smatch_flow.c
      uses enumvalue EXPR_STATEMENT defined in expression.h
      uses variable __expr_stmt_count defined in smatch_flow.c
      uses function __split_stmt(struct statement *) defined in smatch_flow.c
      uses variable expression::statement defined in expression.h
      uses enumvalue EXPR_LOGICAL defined in expression.h
      uses enumvalue EXPR_COMPARE defined in expression.h
      uses variable expression::left defined in expression.h
      uses variable expression::right defined in expression.h
      uses enumvalue LOGIC_HOOK defined in smatch.h
      uses function __handle_logic(struct expression *) defined in smatch.h
      uses enumvalue EXPR_BINOP defined in expression.h
      uses enumvalue BINOP_HOOK defined in smatch.h
      uses enumvalue EXPR_COMMA defined in expression.h
      uses function __process_post_op_stack(void) defined in smatch_flow.c
      uses enumvalue RAW_ASSIGNMENT_HOOK defined in smatch.h
      uses function __handle_condition_assigns(struct expression *) defined in smatch.h
      uses function __handle_select_assigns(struct expression *) defined in smatch.h
      uses function __handle_expr_statement_assigns(struct expression *) defined in smatch.h
      uses function handle_comma_assigns(struct expression *) defined in smatch_flow.c
      uses function outside_of_function(void) defined in smatch_flow.c
      uses enumvalue GLOBAL_ASSIGNMENT_HOOK defined in smatch.h
      uses enumvalue ASSIGNMENT_HOOK defined in smatch.h
      uses function __fake_struct_member_assignments(struct expression *) defined in smatch.h
      uses function strip_expr(struct expression *) defined in smatch.h
      uses enumvalue EXPR_CALL defined in expression.h
      uses enumvalue CALL_ASSIGNMENT_HOOK defined in smatch.h
      uses function is_fake_call(struct expression *) defined in smatch_extra.h
      uses enumvalue FUNCTION_CALL_HOOK_AFTER defined in smatch.h
      uses function get_macro_name(struct position) defined in macro_table.c
      uses enumvalue MACRO_ASSIGNMENT_HOOK defined in smatch.h
      uses enumvalue EXPR_DEREF defined in expression.h
      uses variable expression::deref defined in expression.h
      uses enumvalue EXPR_SLICE defined in expression.h
      uses variable expression::base defined in expression.h
      uses enumvalue EXPR_CAST defined in expression.h
      uses enumvalue EXPR_FORCE_CAST defined in expression.h
      uses variable expression::cast_expression defined in expression.h
      uses enumvalue CAST_HOOK defined in smatch.h
      uses enumvalue EXPR_SIZEOF defined in expression.h
      uses function strip_parens(struct expression *) defined in smatch.h
      uses enumvalue SIZEOF_HOOK defined in smatch.h
      uses enumvalue EXPR_OFFSETOF defined in expression.h
      uses enumvalue EXPR_ALIGNOF defined in expression.h
      uses function evaluate_expression(struct expression *) defined in evaluate.c
      uses enumvalue EXPR_CONDITIONAL defined in expression.h
      uses enumvalue EXPR_SELECT defined in expression.h
      uses variable expression::conditional defined in expression.h
      uses variable expression::cond_true defined in expression.h
      uses variable expression::cond_false defined in expression.h
      uses function known_condition_true(struct expression *) defined in smatch.h
      uses function known_condition_false(struct expression *) defined in smatch.h
      uses enumvalue SELECT_HOOK defined in smatch.h
      uses function __split_whole_condition(struct expression *) defined in smatch.h
      uses function __push_true_states(void) defined in smatch.h
      uses function __use_false_states(void) defined in smatch.h
      uses function __merge_true_states(void) defined in smatch.h
      uses variable expression::fn defined in expression.h
      uses function sym_name_is(const char *,struct expression *) defined in smatch.h
      uses function split_expr_list(struct expression_list *,struct expression *) defined in smatch_flow.c
      uses variable expression::args defined in expression.h
      uses function is_inline_func(struct expression *) defined in smatch_flow.c
      uses function add_inline_function(struct symbol *) defined in smatch_flow.c
      uses variable expression::symbol defined in expression.h
      uses function inlinable(struct expression *) defined in smatch_flow.c
      uses variable __inline_call defined in smatch_flow.c
      uses enumvalue FUNCTION_CALL_HOOK defined in smatch.h
      uses function parse_inline(struct expression *) defined in smatch_flow.c
      uses enumvalue CALL_HOOK_AFTER_INLINE defined in smatch.h
      uses function is_assigned_call(struct expression *) defined in smatch_flow.c
      uses function is_noreturn_func(struct expression *) defined in smatch_flow.c
      uses function nullify_path(void) defined in smatch.h
      uses enumvalue EXPR_INITIALIZER defined in expression.h
      uses variable expression::expr_list defined in expression.h
      uses enumvalue EXPR_IDENTIFIER defined in expression.h
      uses variable expression::ident_expression defined in expression.h
      uses enumvalue EXPR_INDEX defined in expression.h
      uses variable expression::idx_expression defined in expression.h
      uses enumvalue EXPR_POS defined in expression.h
      uses variable expression::init_expr defined in expression.h
      uses enumvalue EXPR_SYMBOL defined in expression.h
      uses enumvalue SYM_HOOK defined in smatch.h
      uses enumvalue EXPR_STRING defined in expression.h
      uses enumvalue STRING_HOOK defined in smatch.h
      uses function pop_expression(struct expression_list **) defined in smatch_expression_stacks.c
   function is_forever_loop(struct statement *) in line 476
      protection public
      17 lines of code
      1 parameters
      4 conditional paths
      uses function strip_expr(struct expression *) defined in smatch.h
      uses variable statement::iterator_pre_condition defined in parse.h
      uses variable statement::iterator_post_condition defined in parse.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_VALUE defined in expression.h
      uses variable expression::value defined in expression.h
   function get_loop_name(int) in line 495
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses variable buf defined in sm_fake_assignment.c
      uses function snprintf(char *,int,char *,char *) defined in sm_overflow6.c
      uses function alloc_sname(const char *) defined in smatch_slist.c
   function handle_pre_loop(struct statement *) in line 507
      protection public
      79 lines of code
      1 parameters
      7 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses function get_loop_name(int) defined in smatch_flow.c
      uses variable loop_num defined in smatch_flow.c
      uses function __split_stmt(struct statement *) defined in smatch_flow.c
      uses variable statement::iterator_pre_statement defined in parse.h
      uses variable __prev_stmt defined in smatch_flow.c
      uses function implied_condition_true(struct expression *) defined in smatch.h
      uses variable statement::iterator_pre_condition defined in parse.h
      uses variable loop_count defined in smatch_flow.c
      uses function __push_continues(void) defined in smatch.h
      uses function __push_breaks(void) defined in smatch.h
      uses function __merge_gotos(const char *) defined in smatch.h
      uses function __extra_handle_canonical_loops(struct statement *,struct stree **) defined in smatch_extra.c
      uses variable __in_pre_condition defined in smatch_flow.c
      uses function __pass_to_client(void *,enum hook_type) defined in smatch.h
      uses enumvalue PRELOOP_HOOK defined in smatch.h
      uses function __split_whole_condition(struct expression *) defined in smatch.h
      uses macro definition FOR_EACH_SM defined in avl.h
      uses function set_state(int,const char *,struct symbol *,struct smatch_state *) defined in smatch.h
      uses variable sm_state::owner defined in smatch.h
      uses variable sm_state::name defined in smatch.h
      uses variable sm_state::sym defined in smatch.h
      uses variable sm_state::state defined in smatch.h
      uses macro definition END_FOR_EACH_SM defined in avl.h
      uses function free_stree(struct stree **) defined in avl.c
      uses function get_sm_state(int,const char *,struct symbol *) defined in smatch.h
      uses variable option_assume_loops defined in smatch_flow.c
      uses variable statement::iterator_statement defined in parse.h
      uses function is_forever_loop(struct statement *) defined in smatch_flow.c
      uses function __merge_continues(void) defined in smatch.h
      uses function __save_gotos(const char *) defined in smatch.h
      uses function __push_fake_cur_stree(void) defined in smatch.h
      uses variable statement::iterator_post_statement defined in parse.h
      uses function __pop_fake_cur_stree(void) defined in smatch.h
      uses function __discard_false_states(void) defined in smatch.h
      uses function __use_breaks(void) defined in smatch.h
      uses function __path_is_null(void) defined in smatch.h
      uses function __merge_stree_into_cur(struct stree *) defined in smatch.h
      uses function __iterator_unchanged(struct sm_state *) defined in smatch_extra.c
      uses variable __cur_stmt defined in smatch_flow.c
      uses function nullify_path(void) defined in smatch.h
      uses function __merge_false_states(void) defined in smatch.h
      uses function __extra_pre_loop_hook_after(struct sm_state *,struct statement *,struct expression *) defined in smatch_extra.c
      uses function __merge_breaks(void) defined in smatch.h
   function handle_post_loop(struct statement *) in line 590
      protection public
      25 lines of code
      1 parameters
      3 conditional paths
      uses function get_loop_name(int) defined in smatch_flow.c
      uses variable loop_num defined in smatch_flow.c
      uses variable loop_count defined in smatch_flow.c
      uses function __push_continues(void) defined in smatch.h
      uses function __push_breaks(void) defined in smatch.h
      uses function __merge_gotos(const char *) defined in smatch.h
      uses function __split_stmt(struct statement *) defined in smatch_flow.c
      uses variable statement::iterator_statement defined in parse.h
      uses function __merge_continues(void) defined in smatch.h
      uses function is_zero(struct expression *) defined in smatch.h
      uses variable statement::iterator_post_condition defined in parse.h
      uses function __save_gotos(const char *) defined in smatch.h
      uses function is_forever_loop(struct statement *) defined in smatch_flow.c
      uses function __use_breaks(void) defined in smatch.h
      uses function __split_whole_condition(struct expression *) defined in smatch.h
      uses function __use_false_states(void) defined in smatch.h
      uses function __merge_breaks(void) defined in smatch.h
   function empty_statement(struct statement *) in line 616
      protection public
      8 lines of code
      1 parameters
      3 conditional paths
      uses variable statement::type defined in parse.h
      uses enumvalue STMT_EXPRESSION defined in parse.h
      uses variable statement::expression defined in parse.h
   function last_stmt_on_same_line(void) in line 625
      protection public
      14 lines of code
      1 parameters
      3 conditional paths
      uses macro definition FOR_EACH_PTR_REVERSE defined in ptrlist.h
      uses variable big_statement_stack defined in smatch_flow.c
      uses variable statement::pos defined in parse.h
      uses variable position::line defined in lib.h
      uses function get_lineno(void) defined in smatch_flow.c
      uses macro definition END_FOR_EACH_PTR_REVERSE defined in ptrlist.h
   function split_asm_constraints(struct expression_list *) in line 640
      protection public
      18 lines of code
      1 parameters
      4 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable expression::expr_list defined in expression.h
      uses function __split_expr(struct expression *) defined in smatch_flow.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function is_case_val(struct statement *,sval_t) in line 659
      protection public
      16 lines of code
      2 parameters
      5 conditional paths
      uses variable statement::type defined in parse.h
      uses enumvalue STMT_CASE defined in parse.h
      uses variable statement::case_expression defined in parse.h
      uses function __set_default(void) defined in smatch.h
      uses function get_value(struct expression *,sval_t *) defined in smatch.h
      uses variable sval_t::value defined in smatch.h
   function split_known_switch(struct statement *,sval_t) in line 676
      protection public
      40 lines of code
      2 parameters
      6 conditional paths
      uses function __split_expr(struct expression *) defined in smatch_flow.c
      uses variable statement::switch_expression defined in parse.h
      uses function push_expression(struct expression_list **,struct expression *) defined in smatch_expression_stacks.c
      uses variable switch_expr_stack defined in smatch_flow.c
      uses function __save_switch_states(struct expression *) defined in smatch.h
      uses function top_expression(struct expression_list *) defined in smatch_expression_stacks.c
      uses function nullify_path(void) defined in smatch.h
      uses function __push_default(void) defined in smatch.h
      uses function __push_breaks(void) defined in smatch.h
      uses variable statement::switch_statement defined in parse.h
      uses function __push_scope_hooks(void) defined in smatch.h
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable statement::stmts defined in parse.h
      uses variable __smatch_lineno defined in smatch_flow.c
      uses variable statement::pos defined in parse.h
      uses variable position::line defined in lib.h
      uses function is_case_val(struct statement *,sval_t) defined in smatch_flow.c
      uses function __merge_switches(struct expression *,struct expression *,struct expression *) defined in smatch.h
      uses variable statement::case_expression defined in parse.h
      uses variable statement::case_to defined in parse.h
      uses function __pass_case_to_client(struct expression *,struct expression *) defined in smatch.h
      uses function __path_is_null(void) defined in smatch.h
      uses function __split_stmt(struct statement *) defined in smatch_flow.c
      uses function __set_default(void) defined in smatch.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses function __call_scope_hooks(void) defined in smatch.h
      uses function __pop_default(void) defined in smatch.h
      uses macro definition NULL defined in sm_implied3.c
      uses function __discard_switches(void) defined in smatch.h
      uses function __merge_breaks(void) defined in smatch.h
      uses function pop_expression(struct expression_list **) defined in smatch_expression_stacks.c
   function taking_too_long(void) in line 717
      protection public
      9 lines of code
      1 parameters
      2 conditional paths
      uses function ms_since(struct timeval *) defined in smatch.h
      uses variable fn_start_time defined in smatch_flow.c
   function is_last_stmt(struct statement *) in line 727
      protection public
      19 lines of code
      1 parameters
      6 conditional paths
      uses variable cur_func_sym defined in smatch_flow.c
      uses variable statement::type defined in parse.h
      uses enumvalue STMT_COMPOUND defined in parse.h
      uses variable statement::stmts defined in parse.h
      uses enumvalue STMT_LABEL defined in parse.h
      uses variable statement::label_statement defined in parse.h
   function handle_backward_goto(struct statement *) in line 747
      protection public
      44 lines of code
      1 parameters
      11 conditional paths
      uses variable cur_func_sym defined in smatch_flow.c
      uses variable option_info defined in smatch.c
      uses variable last_goto_statement_handled defined in smatch_flow.c
      uses variable statement::goto_label defined in parse.h
      uses variable symbol::type defined in struct.c
      uses enumvalue SYM_LABEL defined in symbol.h
      uses variable symbol::ident defined in struct.c
      uses variable ident::name defined in token.h
      uses variable symbol::stmt defined in struct.c
      uses variable symbol::inline_stmt defined in struct.c
      uses variable statement::type defined in parse.h
      uses enumvalue STMT_COMPOUND defined in parse.h
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable statement::stmts defined in parse.h
      uses enumvalue STMT_LABEL defined in parse.h
      uses variable statement::label_identifier defined in parse.h
      uses function __split_stmt(struct statement *) defined in smatch_flow.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function fake_a_return(void) in line 792
      protection public
      14 lines of code
      1 parameters
      2 conditional paths
      uses function nullify_path(void) defined in smatch.h
      uses function __unnullify_path(void) defined in smatch.h
      uses function get_real_base_type(struct symbol *) defined in smatch.h
      uses variable cur_func_sym defined in smatch_flow.c
      uses function __pass_to_client(void *,enum hook_type) defined in smatch.h
      uses function unknown_value_expression(struct expression *) defined in smatch_extra.h
      uses macro definition NULL defined in sm_implied3.c
      uses enumvalue RETURN_HOOK defined in smatch.h
   function split_compound(struct statement *) in line 807
      protection public
      30 lines of code
      1 parameters
      3 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses function __push_scope_hooks(void) defined in smatch.h
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable statement::stmts defined in parse.h
      uses function set_parent_stmt(struct statement *,struct statement *) defined in smatch_flow.c
      uses variable __prev_stmt defined in smatch_flow.c
      uses variable __next_stmt defined in smatch_flow.c
      uses variable __cur_stmt defined in smatch_flow.c
      uses function __split_stmt(struct statement *) defined in smatch_flow.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses function __call_scope_hooks(void) defined in smatch.h
   function __split_stmt(struct statement *) in line 838
      protection public
      157 lines of code
      1 parameters
      33 conditional paths
      uses variable __bail_on_rest_of_function defined in smatch_flow.c
      uses function out_of_memory(void) defined in smatch_slist.c
      uses function taking_too_long(void) defined in smatch_flow.c
      uses macro definition sm_msg defined in smatch.h
      uses function fake_a_return(void) defined in smatch_flow.c
      uses variable final_pass defined in smatch_flow.c
      uses macro definition add_ptr_list defined in ptrlist.h
      uses variable big_statement_stack defined in smatch_flow.c
      uses function free_expression_stack(struct expression_list **) defined in smatch_expression_stacks.c
      uses variable big_expression_stack defined in smatch_flow.c
      uses function set_position(struct position) defined in smatch_flow.c
      uses variable statement::pos defined in parse.h
      uses function __pass_to_client(void *,enum hook_type) defined in smatch.h
      uses enumvalue STMT_HOOK defined in smatch.h
      uses variable statement::type defined in parse.h
      uses enumvalue STMT_DECLARATION defined in parse.h
      uses function split_declaration(struct symbol_list *) defined in smatch_flow.c
      uses variable statement::declaration defined in parse.h
      uses enumvalue STMT_RETURN defined in parse.h
      uses function __split_expr(struct expression *) defined in smatch_flow.c
      uses variable statement::ret_value defined in parse.h
      uses enumvalue RETURN_HOOK defined in smatch.h
      uses function __process_post_op_stack(void) defined in smatch_flow.c
      uses function nullify_path(void) defined in smatch.h
      uses enumvalue STMT_EXPRESSION defined in parse.h
      uses variable statement::expression defined in parse.h
      uses enumvalue STMT_COMPOUND defined in parse.h
      uses function split_compound(struct statement *) defined in smatch_flow.c
      uses enumvalue STMT_IF defined in parse.h
      uses function set_parent_stmt(struct statement *,struct statement *) defined in smatch_flow.c
      uses variable statement::if_true defined in parse.h
      uses variable statement::if_false defined in parse.h
      uses function known_condition_true(struct expression *) defined in smatch.h
      uses variable statement::if_conditional defined in parse.h
      uses function known_condition_false(struct expression *) defined in smatch.h
      uses function __split_whole_condition(struct expression *) defined in smatch.h
      uses function empty_statement(struct statement *) defined in smatch_flow.c
      uses function last_stmt_on_same_line(void) defined in smatch_flow.c
      uses function get_macro_name(struct position) defined in macro_table.c
      uses function __push_true_states(void) defined in smatch.h
      uses function __use_false_states(void) defined in smatch.h
      uses function __merge_true_states(void) defined in smatch.h
      uses enumvalue STMT_ITERATOR defined in parse.h
      uses variable statement::iterator_pre_statement defined in parse.h
      uses variable statement::iterator_statement defined in parse.h
      uses variable statement::iterator_post_statement defined in parse.h
      uses variable statement::iterator_pre_condition defined in parse.h
      uses function handle_pre_loop(struct statement *) defined in smatch_flow.c
      uses variable statement::iterator_post_condition defined in parse.h
      uses function handle_post_loop(struct statement *) defined in smatch_flow.c
      uses enumvalue STMT_SWITCH defined in parse.h
      uses variable statement::switch_statement defined in parse.h
      uses function get_value(struct expression *,sval_t *) defined in smatch.h
      uses variable statement::switch_expression defined in parse.h
      uses function split_known_switch(struct statement *,sval_t) defined in smatch_flow.c
      uses function push_expression(struct expression_list **,struct expression *) defined in smatch_expression_stacks.c
      uses variable switch_expr_stack defined in smatch_flow.c
      uses function __save_switch_states(struct expression *) defined in smatch.h
      uses function top_expression(struct expression_list *) defined in smatch_expression_stacks.c
      uses function __push_default(void) defined in smatch.h
      uses function __push_breaks(void) defined in smatch.h
      uses function __pop_default(void) defined in smatch.h
      uses function __merge_switches(struct expression *,struct expression *,struct expression *) defined in smatch.h
      uses macro definition NULL defined in sm_implied3.c
      uses function __discard_switches(void) defined in smatch.h
      uses function __merge_breaks(void) defined in smatch.h
      uses function pop_expression(struct expression_list **) defined in smatch_expression_stacks.c
      uses enumvalue STMT_CASE defined in parse.h
      uses variable statement::case_expression defined in parse.h
      uses variable statement::case_to defined in parse.h
      uses function __pass_case_to_client(struct expression *,struct expression *) defined in smatch.h
      uses function __set_default(void) defined in smatch.h
      uses variable statement::case_statement defined in parse.h
      uses enumvalue STMT_LABEL defined in parse.h
      uses variable statement::label_identifier defined in parse.h
      uses variable symbol::type defined in struct.c
      uses enumvalue SYM_LABEL defined in symbol.h
      uses variable symbol::ident defined in struct.c
      uses variable loop_count defined in smatch_flow.c
      uses function __merge_gotos(const char *) defined in smatch.h
      uses variable ident::name defined in token.h
      uses variable statement::label_statement defined in parse.h
      uses enumvalue STMT_GOTO defined in parse.h
      uses variable statement::goto_expression defined in parse.h
      uses variable statement::goto_label defined in parse.h
      uses enumvalue SYM_NODE defined in symbol.h
      uses function __process_breaks(void) defined in smatch.h
      uses function __process_continues(void) defined in smatch.h
      uses function __save_gotos(const char *) defined in smatch.h
      uses function is_last_stmt(struct statement *) defined in smatch_flow.c
      uses function handle_backward_goto(struct statement *) defined in smatch_flow.c
      uses enumvalue STMT_NONE defined in parse.h
      uses enumvalue STMT_ASM defined in parse.h
      uses enumvalue ASM_HOOK defined in smatch.h
      uses variable statement::asm_string defined in parse.h
      uses function split_asm_constraints(struct expression_list *) defined in smatch_flow.c
      uses variable statement::asm_outputs defined in parse.h
      uses variable statement::asm_inputs defined in parse.h
      uses variable statement::asm_clobbers defined in parse.h
      uses enumvalue STMT_CONTEXT defined in parse.h
      uses enumvalue STMT_RANGE defined in parse.h
      uses variable statement::range_expression defined in parse.h
      uses variable statement::range_low defined in parse.h
      uses variable statement::range_high defined in parse.h
      uses enumvalue STMT_HOOK_AFTER defined in smatch.h
   function split_sym(struct symbol *) in line 1007
      protection public
      14 lines of code
      1 parameters
      3 conditional paths
      uses variable sym defined in smatch_type.c
      uses variable symbol::namespace defined in struct.c
      uses enumvalue NS_SYMBOL defined in symbol.h
      uses function __split_stmt(struct statement *) defined in smatch_flow.c
      uses variable symbol::stmt defined in struct.c
      uses function __split_expr(struct expression *) defined in smatch_flow.c
      uses variable symbol::array_size defined in struct.c
      uses function split_symlist(struct symbol_list *) defined in smatch_flow.c
      uses variable symbol::arguments defined in struct.c
      uses variable symbol::symbol_list defined in struct.c
      uses variable symbol::inline_stmt defined in struct.c
      uses variable symbol::inline_symbol_list defined in struct.c
   function member_to_number(struct expression *,struct ident *) in line 1033
      protection public
      24 lines of code
      2 parameters
      5 conditional paths
      uses variable name defined in smatch_type.c
      uses variable member defined in smdb.py
      uses function get_type(struct expression *) defined in smatch.h
      uses enumvalue SYM_STRUCT defined in symbol.h
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable symbol::ident defined in struct.c
      uses variable ident::name defined in token.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function number_to_member(struct expression *,int) in line 1058
      protection public
      16 lines of code
      2 parameters
      3 conditional paths
      uses variable member defined in smdb.py
      uses function get_type(struct expression *) defined in smatch.h
      uses enumvalue SYM_STRUCT defined in symbol.h
      uses macro definition NULL defined in sm_implied3.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses function fake_element_assigns_helper(struct expression *,struct expression_list *,fake_cb *) defined in smatch_flow.c
   function fake_element_assigns_helper(struct expression *,struct expression_list *,fake_cb *) in line 1075
      protection public
      35 lines of code
      3 parameters
      8 conditional paths
      uses variable offset defined in sm_implied10.c
      uses function ptr_list_size(struct ptr_list *) defined in ptrlist.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_INDEX defined in expression.h
      uses variable expression::idx_from defined in expression.h
      uses variable expression::idx_to defined in expression.h
      uses variable expression::idx_expression defined in expression.h
      uses function value_expr(long long) defined in smatch_expressions.c
      uses function array_element_expression(struct expression *,struct expression *) defined in smatch_expressions.c
      uses enumvalue EXPR_INITIALIZER defined in expression.h
      uses function get_type(struct expression *) defined in smatch.h
      uses enumvalue SYM_ARRAY defined in symbol.h
      uses variable expression::expr_list defined in expression.h
      uses function fake_member_assigns_helper(struct expression *,struct expression_list *,fake_cb *) defined in smatch_flow.c
      uses function assign_expression(struct expression *,struct expression *) defined in smatch_expressions.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function alloc_member_set(struct symbol *) in line 1082
      protection public
      18 lines of code
      1 parameters
      1 conditional paths
      uses variable member defined in smdb.py
      uses function ptr_list_size(struct ptr_list *) defined in ptrlist.c
      uses function malloc(int) defined in sm_buf_size2.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable member_set::ident defined in smatch_flow.c
      uses variable member_set::set defined in smatch_flow.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function mark_member_as_set(struct symbol *,struct member_set *,struct ident *) in line 1101
      protection public
      14 lines of code
      3 parameters
      3 conditional paths
      uses function ptr_list_size(struct ptr_list *) defined in ptrlist.c
      uses variable member_set::set defined in smatch_flow.c
   function set_inner_struct_members(struct expression *,struct symbol *) in line 1116
      protection public
      36 lines of code
      2 parameters
      7 conditional paths
      uses function get_real_base_type(struct symbol *) defined in smatch.h
      uses variable member defined in smdb.py
      uses function member_expression(struct expression *,int,struct ident *) defined in smatch_expressions.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable symbol::symbol_list defined in struct.c
      uses variable symbol::ident defined in struct.c
      uses function get_state_expr(int,struct expression *) defined in smatch.h
      uses macro definition SMATCH_EXTRA defined in smatch.h
      uses enumvalue SYM_UNION defined in symbol.h
      uses enumvalue SYM_STRUCT defined in symbol.h
      uses function assign_expression(struct expression *,struct expression *) defined in smatch_expressions.c
      uses function zero_expr(void) defined in smatch_expressions.c
      uses function __split_expr(struct expression *) defined in smatch_flow.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function set_unset_to_zero(struct symbol *,struct expression *) in line 1153
      protection public
      35 lines of code
      2 parameters
      8 conditional paths
      uses variable member defined in smdb.py
      uses function op(void) defined in loop2.c
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_PREOP defined in expression.h
      uses variable expression::op defined in expression.h
      uses function strip_expr(struct expression *) defined in smatch.h
      uses variable expression::unop defined in expression.h
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses function get_real_base_type(struct symbol *) defined in smatch.h
      uses variable symbol::ident defined in struct.c
      uses function member_expression(struct expression *,int,struct ident *) defined in smatch_expressions.c
      uses function get_state_expr(int,struct expression *) defined in smatch.h
      uses macro definition SMATCH_EXTRA defined in smatch.h
      uses enumvalue SYM_UNION defined in symbol.h
      uses enumvalue SYM_STRUCT defined in symbol.h
      uses function set_inner_struct_members(struct expression *,struct symbol *) defined in smatch_flow.c
      uses enumvalue SYM_ARRAY defined in symbol.h
      uses function assign_expression(struct expression *,struct expression *) defined in smatch_expressions.c
      uses function zero_expr(void) defined in smatch_expressions.c
      uses function __split_expr(struct expression *) defined in smatch_flow.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function fake_member_assigns_helper(struct expression *,struct expression_list *,fake_cb *) in line 1189
      protection public
      40 lines of code
      3 parameters
      5 conditional paths
      uses variable struct_type defined in smdb.py
      uses variable member defined in smdb.py
      uses function get_type(struct expression *) defined in smatch.h
      uses enumvalue SYM_STRUCT defined in symbol.h
      uses enumvalue SYM_UNION defined in symbol.h
      uses function alloc_member_set(struct symbol *) defined in smatch_flow.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses function number_to_member(struct expression *,int) defined in smatch_flow.c
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_IDENTIFIER defined in expression.h
      uses variable expression::expr_ident defined in expression.h
      uses function member_to_number(struct expression *,struct ident *) defined in smatch_flow.c
      uses variable expression::ident_expression defined in expression.h
      uses function mark_member_as_set(struct symbol *,struct member_set *,struct ident *) defined in smatch_flow.c
      uses function member_expression(struct expression *,int,struct ident *) defined in smatch_expressions.c
      uses enumvalue EXPR_INITIALIZER defined in expression.h
      uses enumvalue SYM_ARRAY defined in symbol.h
      uses function fake_element_assigns_helper(struct expression *,struct expression_list *,fake_cb *) defined in smatch_flow.c
      uses variable expression::expr_list defined in expression.h
      uses function assign_expression(struct expression *,struct expression *) defined in smatch_expressions.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses function set_unset_to_zero(struct symbol *,struct expression *) defined in smatch_flow.c
   function fake_member_assigns(struct symbol *,fake_cb *) in line 1230
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses function fake_member_assigns_helper(struct expression *,struct expression_list *,fake_cb *) defined in smatch_flow.c
      uses function symbol_expression(struct symbol *) defined in smatch_expressions.c
      uses variable sym defined in smatch_type.c
      uses variable symbol::initializer defined in struct.c
      uses variable expression::expr_list defined in expression.h
   function fake_element_assigns(struct symbol *,fake_cb *) in line 1272
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function fake_element_assigns_helper(struct expression *,struct expression_list *,fake_cb *) defined in smatch_flow.c
      uses function symbol_expression(struct symbol *) defined in smatch_expressions.c
      uses variable sym defined in smatch_type.c
      uses variable symbol::initializer defined in struct.c
      uses variable expression::expr_list defined in expression.h
   function fake_assign_expr(struct symbol *) in line 1277
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses variable expression::symbol defined in expression.h
      uses function symbol_expression(struct symbol *) defined in smatch_expressions.c
      uses variable sym defined in smatch_type.c
      uses function assign_expression(struct expression *,struct expression *) defined in smatch_expressions.c
      uses variable symbol::initializer defined in struct.c
      uses function __split_expr(struct expression *) defined in smatch_flow.c
   function call_split_expr(struct expression *) in line 1286
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function __split_expr(struct expression *) defined in smatch_flow.c
   function do_initializer_stuff(struct symbol *) in line 1291
      protection public
      14 lines of code
      1 parameters
      4 conditional paths
      uses variable sym defined in smatch_type.c
      uses variable symbol::initializer defined in struct.c
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_INITIALIZER defined in expression.h
      uses function get_real_base_type(struct symbol *) defined in smatch.h
      uses enumvalue SYM_ARRAY defined in symbol.h
      uses function fake_element_assigns(struct symbol *,fake_cb *) defined in smatch_flow.c
      uses function call_split_expr(struct expression *) defined in smatch_flow.c
      uses function fake_member_assigns(struct symbol *,fake_cb *) defined in smatch_flow.c
      uses function fake_assign_expr(struct symbol *) defined in smatch_flow.c
   function call_global_assign_hooks(struct expression *) in line 1317
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function __pass_to_client(void *,enum hook_type) defined in smatch.h
      uses enumvalue GLOBAL_ASSIGNMENT_HOOK defined in smatch.h
   function fake_global_assign(struct symbol *) in line 1322
      protection public
      33 lines of code
      1 parameters
      8 conditional paths
      uses variable expression::symbol defined in expression.h
      uses function get_real_base_type(struct symbol *) defined in smatch.h
      uses variable sym defined in smatch_type.c
      uses enumvalue SYM_ARRAY defined in symbol.h
      uses variable symbol::initializer defined in struct.c
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_INITIALIZER defined in expression.h
      uses function fake_element_assigns(struct symbol *,fake_cb *) defined in smatch_flow.c
      uses function call_global_assign_hooks(struct expression *) defined in smatch_flow.c
      uses function symbol_expression(struct symbol *) defined in smatch_expressions.c
      uses function assign_expression(struct expression *,struct expression *) defined in smatch_expressions.c
      uses function __pass_to_client(void *,enum hook_type) defined in smatch.h
      uses enumvalue GLOBAL_ASSIGNMENT_HOOK defined in smatch.h
      uses function fake_element_assigns_helper(struct expression *,struct expression_list *,fake_cb *) defined in smatch_flow.c
      uses macro definition NULL defined in sm_implied3.c
      uses enumvalue SYM_STRUCT defined in symbol.h
      uses function fake_member_assigns(struct symbol *,fake_cb *) defined in smatch_flow.c
      uses function fake_member_assigns_helper(struct expression *,struct expression_list *,fake_cb *) defined in smatch_flow.c
      uses function zero_expr(void) defined in smatch_expressions.c
   function start_function_definition(struct symbol *) in line 1356
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses variable __in_function_def defined in smatch_flow.c
      uses function __pass_to_client(void *,enum hook_type) defined in smatch.h
      uses variable sym defined in smatch_type.c
      uses enumvalue FUNC_DEF_HOOK defined in smatch.h
      uses enumvalue AFTER_DEF_HOOK defined in smatch.h
   function split_function(struct symbol *) in line 1365
      protection public
      42 lines of code
      1 parameters
      4 conditional paths
      uses variable sym defined in smatch_type.c
      uses variable symbol::stmt defined in struct.c
      uses variable symbol::inline_stmt defined in struct.c
      uses variable fn_start_time defined in smatch_flow.c
      uses macro definition NULL defined in sm_implied3.c
      uses variable cur_func_sym defined in smatch_flow.c
      uses variable symbol::ident defined in struct.c
      uses variable cur_func defined in smatch_flow.c
      uses variable ident::name defined in token.h
      uses variable __smatch_lineno defined in smatch_flow.c
      uses variable symbol::pos defined in struct.c
      uses variable position::line defined in lib.h
      uses variable loop_count defined in smatch_flow.c
      uses variable last_goto_statement_handled defined in smatch_flow.c
      uses macro definition sm_debug defined in smatch.h
      uses variable __stree_id defined in smatch_slist.c
      uses variable option_two_passes defined in smatch_flow.c
      uses function __unnullify_path(void) defined in smatch.h
      uses variable loop_num defined in smatch_flow.c
      uses variable final_pass defined in smatch_flow.c
      uses function start_function_definition(struct symbol *) defined in smatch_flow.c
      uses function __split_stmt(struct statement *) defined in smatch_flow.c
      uses function nullify_path(void) defined in smatch.h
      uses function __pass_to_client(void *,enum hook_type) defined in smatch.h
      uses enumvalue END_FUNC_HOOK defined in smatch.h
      uses enumvalue AFTER_FUNC_HOOK defined in smatch.h
      uses function clear_all_states(void) defined in smatch.h
      uses function free_data_info_allocs(void) defined in smatch_extra.h
      uses function free_expression_stack(struct expression_list **) defined in smatch_expression_stacks.c
      uses variable switch_expr_stack defined in smatch_flow.c
      uses function __free_ptr_list(struct ptr_list **) defined in ptrlist.c
      uses variable big_statement_stack defined in smatch_flow.c
      uses variable __bail_on_rest_of_function defined in smatch_flow.c
   function process_inlines(void) in line 1479
      protection public
      9 lines of code
      1 parameters
      1 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable inlines_called defined in smatch_flow.c
      uses function split_function(struct symbol *) defined in smatch_flow.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses macro definition free_ptr_list defined in ptrlist.h
   function get_last_scoped_symbol(struct symbol_list *,int) in line 1489
      protection public
      15 lines of code
      2 parameters
      4 conditional paths
      uses variable sym defined in smatch_type.c
      uses macro definition FOR_EACH_PTR_REVERSE defined in ptrlist.h
      uses variable symbol::scope defined in struct.c
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::modifiers defined in struct.c
      uses macro definition MOD_STATIC defined in symbol.h
      uses macro definition END_FOR_EACH_PTR_REVERSE defined in ptrlist.h
      uses macro definition NULL defined in sm_implied3.c
   function split_inlines_in_scope(struct symbol *) in line 1505
      protection public
      27 lines of code
      1 parameters
      6 conditional paths
      uses variable sym defined in smatch_type.c
      uses variable symbol::scope defined in struct.c
      uses variable scope::symbols defined in scope.h
      uses variable symbol::pos defined in struct.c
      uses variable position::stream defined in lib.h
      uses macro definition FOR_EACH_PTR_REVERSE defined in ptrlist.h
      uses variable symbol::type defined in struct.c
      uses enumvalue SYM_NODE defined in symbol.h
      uses enumvalue SYM_FN defined in symbol.h
      uses variable symbol::inline_stmt defined in struct.c
      uses function add_inline_function(struct symbol *) defined in smatch_flow.c
      uses macro definition END_FOR_EACH_PTR_REVERSE defined in ptrlist.h
      uses function process_inlines(void) defined in smatch_flow.c
   function split_inlines(struct symbol_list *) in line 1533
      protection public
      11 lines of code
      1 parameters
      3 conditional paths
      uses variable sym defined in smatch_type.c
      uses function get_last_scoped_symbol(struct symbol_list *,int) defined in smatch_flow.c
      uses function split_inlines_in_scope(struct symbol *) defined in smatch_flow.c
   function clone_estates_perm(struct stree *) in line 1545
      protection public
      11 lines of code
      1 parameters
      1 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses macro definition FOR_EACH_SM defined in avl.h
      uses function set_state_stree_perm(struct stree **,int,const char *,struct symbol *,struct smatch_state *) defined in smatch_slist.c
      uses variable sm_state::owner defined in smatch.h
      uses variable sm_state::name defined in smatch.h
      uses variable sm_state::sym defined in smatch.h
      uses function clone_estate_perm(struct smatch_state *) defined in smatch_estate.c
      uses variable sm_state::state defined in smatch.h
      uses macro definition END_FOR_EACH_SM defined in avl.h
   function split_functions(struct symbol_list *) in line 1557
      protection public
      25 lines of code
      1 parameters
      3 conditional paths
      uses variable sym defined in smatch_type.c
      uses function __unnullify_path(void) defined in smatch.h
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses function set_position(struct position) defined in smatch_flow.c
      uses variable symbol::pos defined in struct.c
      uses variable symbol::type defined in struct.c
      uses enumvalue SYM_NODE defined in symbol.h
      uses enumvalue SYM_FN defined in symbol.h
      uses function __pass_to_client(void *,enum hook_type) defined in smatch.h
      uses enumvalue BASE_HOOK defined in smatch.h
      uses function fake_global_assign(struct symbol *) defined in smatch_flow.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses variable global_states defined in smatch_flow.c
      uses function clone_estates_perm(struct stree *) defined in smatch_flow.c
      uses function get_all_states_stree(int) defined in smatch.h
      uses macro definition SMATCH_EXTRA defined in smatch.h
      uses function nullify_path(void) defined in smatch.h
      uses function split_function(struct symbol *) defined in smatch_flow.c
      uses function process_inlines(void) defined in smatch_flow.c
      uses function split_inlines(struct symbol_list *) defined in smatch_flow.c
      uses enumvalue END_FILE_HOOK defined in smatch.h
   function smatch(int,char **) in line 1583
      protection public
      27 lines of code
      2 parameters
      4 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses function printf(char *,...) defined in test-be.c
      uses function exit(int) defined in test-be.c
      uses function sparse_initialize(int,char **,struct string_list **) defined in lib.c
      uses function set_valid_ptr_max(void) defined in smatch_flow.c
      uses macro definition FOR_EACH_PTR_NOTAG defined in ptrlist.h
      uses variable base_file defined in smatch_flow.c
      uses variable option_file_output defined in smatch.c
      uses variable buf defined in sm_fake_assignment.c
      uses function snprintf(char *,int,char *,char *) defined in sm_overflow6.c
      uses variable sm_outfd defined in smatch.c
      uses function sparse_keep_tokens(char *) defined in lib.c
      uses function split_functions(struct symbol_list *) defined in smatch_flow.c
      uses macro definition END_FOR_EACH_PTR_NOTAG defined in ptrlist.h
   variable member_set::ident in line 1078
      protection public
   variable member_set::set in line 1079
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/smatch_function_hashtable.h
module smatch_function_hashtable.h
   macro definition DEFINE_FUNCTION_ADD_HOOK in line 41
      protection public
   macro definition DEFINE_FUNCTION_HASHTABLE in line 68
      protection public
   macro definition DEFINE_FUNCTION_HASHTABLE_STATIC in line 74
      protection public
   macro definition DEFINE_STRING_HASHTABLE_STATIC in line 80
      protection public
   macro definition load_strings in line 108
      protection public
   function djb2_hash(void *) in line 24
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses variable str defined in sm_overflow6.c
      uses function hash(struct hashtable *,void *) defined in hashtable.c
      uses variable c defined in sm_array_overflow.c
   function equalkeys(void *,void *) in line 36
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function create_function_hashtable(int) in line 58
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function create_hashtable(unsigned int,unsigned int(*)(void *),int(*)(void *, void *)) defined in hashtable.c
      uses function djb2_hash(void *) defined in smatch_function_hashtable.h
      uses function equalkeys(void *,void *) defined in smatch_function_hashtable.h
   function destroy_function_hashtable(struct hashtable *) in line 63
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function hashtable_destroy(struct hashtable *,int) defined in hashtable.c
      uses variable hashtable::table defined in hashtable_private.h
   function load_hashtable_helper(const char *,int(*)(struct hashtable *, char *, int *),struct hashtable *) in line 85
      protection public
      22 lines of code
      3 parameters
      5 conditional paths
      uses variable name defined in smatch_type.c
      uses function snprintf(char *,int,char *,char *) defined in sm_overflow6.c
      uses variable option_project_str defined in smatch.c
      uses function get_tokens_file(const char *) defined in smatch.h
      uses enumvalue TOKEN_STREAMBEGIN defined in token.h
      uses variable token::next defined in token.h
      uses enumvalue TOKEN_STREAMEND defined in token.h
      uses enumvalue TOKEN_IDENT defined in token.h
      uses function alloc_string(const char *) defined in smatch.h
      uses function show_ident(const struct ident *) defined in token.h
      uses variable token::ident defined in token.h
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/smatch_function_hooks.c
module smatch_function_hooks.c
   macro definition REGULAR_CALL in line 53
      protection public
   macro definition RANGED_CALL in line 54
      protection public
   macro definition ASSIGN_CALL in line 55
      protection public
   macro definition IMPLIED_RETURN in line 56
      protection public
   macro definition MACRO_ASSIGN in line 57
      protection public
   macro definition MACRO_ASSIGN_EXTRA in line 58
      protection public
   typedef void_fn in line 68
      protection public
   variable func_hash in line 51
      protection public
   variable db_return_states_list in line 66
      protection public
   variable return_states_before in line 70
      protection public
   variable return_states_after in line 71
      protection public
   function ALLOCATOR(fcall_back,"call backs") in line 47
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function DECLARE_PTR_LIST(call_back_list,struct fcall_back) in line 48
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function DEFINE_FUNCTION_HASHTABLE_STATIC(callback,struct fcall_back,struct call_back_list) in line 50
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function ALLOCATOR(return_implies_callback,"return_implies callbacks") in line 64
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function DECLARE_PTR_LIST(db_implies_list,struct return_implies_callback) in line 65
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function DECLARE_PTR_LIST(void_fn_list,void_fn *) in line 69
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function alloc_fcall_back(int,void *,void *) in line 73
      protection public
      11 lines of code
      3 parameters
      1 conditional paths
      uses variable fcall_back::type defined in smatch_function_hooks.c
      uses variable fcall_back::u defined in smatch_function_hooks.c
      uses variable fcall_back::call_back defined in smatch_function_hooks.c
      uses variable fcall_back::info defined in smatch_function_hooks.c
   function add_function_hook(const char *,func_hook *,void *) in line 85
      protection public
      7 lines of code
      3 parameters
      1 conditional paths
      uses function alloc_fcall_back(int,void *,void *) defined in smatch_function_hooks.c
      uses macro definition REGULAR_CALL defined in smatch_function_hooks.c
      uses variable fcall_back::call_back defined in smatch_function_hooks.c
      uses variable fcall_back::info defined in smatch_function_hooks.c
      uses variable func_hash defined in smatch_function_hooks.c
   function add_function_assign_hook(const char *,func_hook *,void *) in line 93
      protection public
      8 lines of code
      3 parameters
      1 conditional paths
      uses function alloc_fcall_back(int,void *,void *) defined in smatch_function_hooks.c
      uses macro definition ASSIGN_CALL defined in smatch_function_hooks.c
      uses variable fcall_back::call_back defined in smatch_function_hooks.c
      uses variable fcall_back::info defined in smatch_function_hooks.c
      uses variable func_hash defined in smatch_function_hooks.c
   function add_implied_return_hook(const char *,implied_return_hook *,void *) in line 102
      protection public
      9 lines of code
      3 parameters
      1 conditional paths
      uses function alloc_fcall_back(int,void *,void *) defined in smatch_function_hooks.c
      uses macro definition IMPLIED_RETURN defined in smatch_function_hooks.c
      uses variable fcall_back::call_back defined in smatch_function_hooks.c
      uses variable fcall_back::info defined in smatch_function_hooks.c
      uses variable func_hash defined in smatch_function_hooks.c
   function add_macro_assign_hook(const char *,func_hook *,void *) in line 112
      protection public
      8 lines of code
      3 parameters
      1 conditional paths
      uses function alloc_fcall_back(int,void *,void *) defined in smatch_function_hooks.c
      uses macro definition MACRO_ASSIGN defined in smatch_function_hooks.c
      uses variable fcall_back::call_back defined in smatch_function_hooks.c
      uses variable fcall_back::info defined in smatch_function_hooks.c
      uses variable func_hash defined in smatch_function_hooks.c
   function add_macro_assign_hook_extra(const char *,func_hook *,void *) in line 121
      protection public
      8 lines of code
      3 parameters
      1 conditional paths
      uses function alloc_fcall_back(int,void *,void *) defined in smatch_function_hooks.c
      uses macro definition MACRO_ASSIGN_EXTRA defined in smatch_function_hooks.c
      uses variable fcall_back::call_back defined in smatch_function_hooks.c
      uses variable fcall_back::info defined in smatch_function_hooks.c
      uses variable func_hash defined in smatch_function_hooks.c
   function return_implies_state(const char *,long long,long long,implication_hook *,void *) in line 130
      protection public
      9 lines of code
      5 parameters
      1 conditional paths
      uses function alloc_fcall_back(int,void *,void *) defined in smatch_function_hooks.c
      uses macro definition RANGED_CALL defined in smatch_function_hooks.c
      uses variable fcall_back::call_back defined in smatch_function_hooks.c
      uses variable fcall_back::info defined in smatch_function_hooks.c
      uses variable fcall_back::range defined in smatch_function_hooks.c
      uses function alloc_range_perm(sval_t,sval_t) defined in smatch_extra.h
      uses function ll_to_sval(long long) defined in smatch.h
      uses variable func_hash defined in smatch_function_hooks.c
   function select_return_states_hook(int,return_implies_hook *) in line 140
      protection public
      8 lines of code
      2 parameters
      1 conditional paths
      uses variable return_implies_callback::type defined in smatch_function_hooks.c
      uses variable fcall_back::type defined in smatch_function_hooks.c
      uses variable return_implies_callback::callback defined in smatch_function_hooks.c
      uses macro definition add_ptr_list defined in ptrlist.h
      uses variable db_return_states_list defined in smatch_function_hooks.c
   function select_return_states_before(void_fn *) in line 149
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses variable p defined in cond_expr2.c
      uses function malloc(int) defined in sm_buf_size2.c
      uses macro definition add_ptr_list defined in ptrlist.h
      uses variable return_states_before defined in smatch_function_hooks.c
   function select_return_states_after(void_fn *) in line 156
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses variable p defined in cond_expr2.c
      uses function malloc(int) defined in sm_buf_size2.c
      uses macro definition add_ptr_list defined in ptrlist.h
      uses variable return_states_after defined in smatch_function_hooks.c
   function call_return_states_before_hooks(void) in line 163
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable return_states_before defined in smatch_function_hooks.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function call_return_states_after_hooks(void) in line 172
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable return_states_after defined in smatch_function_hooks.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function call_call_backs(struct call_back_list *,int,const char *,struct expression *) in line 181
      protection public
      15 lines of code
      4 parameters
      2 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable fcall_back::type defined in smatch_function_hooks.c
      uses variable fcall_back::u defined in smatch_function_hooks.c
      uses variable fcall_back::call_back defined in smatch_function_hooks.c
      uses variable fcall_back::info defined in smatch_function_hooks.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function call_ranged_call_backs(struct call_back_list *,const char *,struct expression *,struct expression *) in line 197
      protection public
      10 lines of code
      4 parameters
      1 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable fcall_back::u defined in smatch_function_hooks.c
      uses variable fcall_back::ranged defined in smatch_function_hooks.c
      uses variable fcall_back::info defined in smatch_function_hooks.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function get_same_ranged_call_backs(struct call_back_list *,struct data_range *) in line 208
      protection public
      14 lines of code
      2 parameters
      3 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable fcall_back::type defined in smatch_function_hooks.c
      uses macro definition RANGED_CALL defined in smatch_function_hooks.c
      uses function ranges_equiv(struct data_range *,struct data_range *) defined in smatch_extra.h
      uses variable fcall_back::range defined in smatch_function_hooks.c
      uses macro definition add_ptr_list defined in ptrlist.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function in_list_exact_sval(struct range_list *,struct data_range *) in line 223
      protection public
      10 lines of code
      2 parameters
      2 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses function ranges_equiv(struct data_range *,struct data_range *) defined in smatch_extra.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function assign_ranged_funcs(const char *,struct expression *,struct call_back_list *) in line 234
      protection public
      52 lines of code
      3 parameters
      6 conditional paths
      uses variable sym defined in smatch_type.c
      uses macro definition NULL defined in sm_implied3.c
      uses function expr_to_var_sym(struct expression *,struct symbol **) defined in smatch.h
      uses variable expression::left defined in expression.h
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable fcall_back::type defined in smatch_function_hooks.c
      uses macro definition RANGED_CALL defined in smatch_function_hooks.c
      uses function in_list_exact_sval(struct range_list *,struct data_range *) defined in smatch_function_hooks.c
      uses variable fcall_back::range defined in smatch_function_hooks.c
      uses function __push_fake_cur_stree(void) defined in smatch.h
      uses function tack_on(struct range_list **,struct data_range *) defined in smatch_extra.h
      uses function get_same_ranged_call_backs(struct call_back_list *,struct data_range *) defined in smatch_function_hooks.c
      uses function call_ranged_call_backs(struct call_back_list *,const char *,struct expression *,struct expression *) defined in smatch_function_hooks.c
      uses variable expression::right defined in expression.h
      uses function __free_ptr_list(struct ptr_list **) defined in ptrlist.c
      uses function alloc_estate_range(sval_t,sval_t) defined in smatch_estate.c
      uses variable data_range::min defined in smatch.h
      uses variable data_range::max defined in smatch.h
      uses function set_extra_mod(const char *,struct symbol *,struct smatch_state *) defined in smatch_extra.c
      uses function __pop_fake_cur_stree(void) defined in smatch.h
      uses function merge_fake_stree(struct stree **,struct stree *) defined in smatch_slist.c
      uses function free_stree(struct stree **) defined in avl.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses macro definition FOR_EACH_SM defined in avl.h
      uses function __set_sm(struct sm_state *) defined in smatch.h
      uses macro definition END_FOR_EACH_SM defined in avl.h
      uses function free_string(char *) defined in smatch.h
   function call_implies_callbacks(int,struct expression *,sval_t,int,struct stree **,struct stree **) in line 287
      protection public
      49 lines of code
      6 parameters
      7 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses variable expression::fn defined in expression.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_SYMBOL defined in expression.h
      uses variable expression::symbol defined in expression.h
      uses variable symbol::ident defined in struct.c
      uses variable ident::name defined in token.h
      uses variable func_hash defined in smatch_function_hooks.c
      uses function alloc_range(sval_t,sval_t) defined in smatch_extra.h
      uses function __push_fake_cur_stree(void) defined in smatch.h
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable fcall_back::type defined in smatch_function_hooks.c
      uses macro definition RANGED_CALL defined in smatch_function_hooks.c
      uses function true_comparison_range_LR(int,struct data_range *,struct data_range *,int) defined in smatch_extra.h
      uses variable fcall_back::range defined in smatch_function_hooks.c
      uses variable fcall_back::u defined in smatch_function_hooks.c
      uses variable fcall_back::ranged defined in smatch_function_hooks.c
      uses variable fcall_back::info defined in smatch_function_hooks.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses function __pop_fake_cur_stree(void) defined in smatch.h
      uses function merge_fake_stree(struct stree **,struct stree *) defined in smatch_slist.c
      uses function free_stree(struct stree **) defined in avl.c
      uses function false_comparison_range_LR(int,struct data_range *,struct data_range *,int) defined in smatch_extra.h
   function store_return_state(struct db_callback_info *,struct smatch_state *) in line 351
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function set_return_state(struct expression *,struct db_callback_info *) in line 356
      protection public
      8 lines of code
      2 parameters
      2 conditional paths
      uses function set_extra_expr_mod(struct expression *,struct smatch_state *) defined in smatch_extra.c
      uses macro definition NULL defined in sm_implied3.c
   function handle_ret_equals_param(char *,struct range_list *,struct expression *) in line 365
      protection public
      21 lines of code
      3 parameters
      4 conditional paths
      uses variable str defined in sm_overflow6.c
      uses variable param defined in smatch_parse_call_math.c
      uses macro definition NULL defined in sm_implied3.c
      uses function get_argument_from_call_expr(struct expression_list *,int) defined in smatch.h
      uses variable expression::args defined in expression.h
      uses function get_absolute_rl(struct expression *,struct range_list **) defined in smatch_extra.h
      uses function rl_intersection(struct range_list *,struct range_list *) defined in smatch_extra.h
      uses function set_extra_expr_nomod(struct expression *,struct smatch_state *) defined in smatch_extra.c
      uses function alloc_estate_rl(struct range_list *) defined in smatch_estate.c
   function impossible_limit(struct expression *,int,char *,char *) in line 387
      protection public
      34 lines of code
      4 parameters
      10 conditional paths
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_ASSIGNMENT defined in expression.h
      uses function strip_expr(struct expression *) defined in smatch.h
      uses variable expression::right defined in expression.h
      uses enumvalue EXPR_CALL defined in expression.h
      uses function get_argument_from_call_expr(struct expression_list *,int) defined in smatch.h
      uses variable expression::args defined in expression.h
      uses variable param defined in smatch_parse_call_math.c
      uses function get_implied_rl(struct expression *,struct range_list **) defined in smatch_extra.h
      uses function is_whole_rl(struct range_list *) defined in smatch_extra.h
      uses function get_arg_type(struct expression *,int) defined in smatch.h
      uses variable expression::fn defined in expression.h
      uses function cast_rl(struct symbol *,struct range_list *) defined in smatch_extra.h
      uses function call_results_to_rl(struct expression *,struct symbol *,char *,struct range_list **) defined in smatch_extra.h
      uses function possibly_true_rl(struct range_list *,int,struct range_list *) defined in smatch_extra.h
      uses enumvalue SPECIAL_EQUAL defined in token.h
      uses variable option_debug defined in smatch.h
      uses macro definition local_debug defined in smatch.h
      uses macro definition sm_msg defined in smatch.h
      uses function show_rl(struct range_list *) defined in smatch_extra.h
   function db_compare_callback(void *,int,char **,char **) in line 422
      protection public
      71 lines of code
      4 parameters
      13 conditional paths
      uses variable fcall_back::type defined in smatch_function_hooks.c
      uses variable param defined in smatch_parse_call_math.c
      uses function set_return_state(struct expression *,struct db_callback_info *) defined in smatch_function_hooks.c
      uses function __pop_fake_cur_stree(void) defined in smatch.h
      uses function merge_fake_stree(struct stree **,struct stree *) defined in smatch_slist.c
      uses function free_stree(struct stree **) defined in avl.c
      uses function __push_fake_cur_stree(void) defined in smatch.h
      uses enumvalue CULL_PATH defined in smatch.h
      uses enumvalue PARAM_LIMIT defined in smatch.h
      uses function impossible_limit(struct expression *,int,char *,char *) defined in smatch_function_hooks.c
      uses function call_results_to_rl(struct expression *,struct symbol *,char *,struct range_list **) defined in smatch_extra.h
      uses function get_type(struct expression *) defined in smatch.h
      uses function strip_expr(struct expression *) defined in smatch.h
      uses function cast_rl(struct symbol *,struct range_list *) defined in smatch_extra.h
      uses function alloc_whole_rl(struct symbol *) defined in smatch_extra.h
      uses function flip_comparison(int) defined in smatch.h
      uses function possibly_true_rl(struct range_list *,int,struct range_list *) defined in smatch_extra.h
      uses function filter_by_comparison(struct range_list **,int,struct range_list *) defined in smatch.h
      uses function possibly_false_rl(struct range_list *,int,struct range_list *) defined in smatch_extra.h
      uses function negate_comparison(int) defined in smatch.h
      uses function handle_ret_equals_param(char *,struct range_list *,struct expression *) defined in smatch_function_hooks.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable return_implies_callback::type defined in smatch_function_hooks.c
      uses variable return_implies_callback::callback defined in smatch_function_hooks.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses function store_return_state(struct db_callback_info *,struct smatch_state *) defined in smatch_function_hooks.c
      uses function alloc_estate_rl(struct range_list *) defined in smatch_estate.c
      uses function clone_rl(struct range_list *) defined in smatch_extra.h
   function compare_db_return_states_callbacks(struct expression *,int,struct expression *,struct stree *,struct stree *) in line 494
      protection public
      108 lines of code
      5 parameters
      4 conditional paths
      uses function clone_stree(struct stree *) defined in avl.c
      uses function __get_cur_stree(void) defined in smatch.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_CALL defined in expression.h
      uses function get_absolute_rl(struct expression *,struct range_list **) defined in smatch_extra.h
      uses variable db_return_states_list defined in smatch_function_hooks.c
      uses function call_return_states_before_hooks(void) defined in smatch_function_hooks.c
      uses macro definition NULL defined in sm_implied3.c
      uses function __push_fake_cur_stree(void) defined in smatch.h
      uses function sql_select_return_states(const char *,struct expression *,int(*)(void *, int, char **, char **),void *) defined in smatch.h
      uses function db_compare_callback(void *,int,char **,char **) defined in smatch_function_hooks.c
      uses function set_return_state(struct expression *,struct db_callback_info *) defined in smatch_function_hooks.c
      uses function __pop_fake_cur_stree(void) defined in smatch.h
      uses function merge_fake_stree(struct stree **,struct stree *) defined in smatch_slist.c
      uses function free_stree(struct stree **) defined in avl.c
      uses macro definition FOR_EACH_SM defined in avl.h
      uses function __use_orig_if_not_set(struct sm_state *) defined in smatch.h
      uses macro definition END_FOR_EACH_SM defined in avl.h
      uses function __set_true_false_sm(struct sm_state *,struct sm_state *) defined in smatch.h
      uses function call_return_states_after_hooks(void) defined in smatch_function_hooks.c
   function function_comparison(struct expression *,int,struct expression *) in line 603
      protection public
      29 lines of code
      3 parameters
      3 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_CALL defined in expression.h
      uses function get_absolute_rl(struct expression *,struct range_list **) defined in smatch_extra.h
      uses function rl_to_sval(struct range_list *,sval_t *) defined in smatch_extra.h
      uses function call_implies_callbacks(int,struct expression *,sval_t,int,struct stree **,struct stree **) defined in smatch_function_hooks.c
      uses function compare_db_return_states_callbacks(struct expression *,int,struct expression *,struct stree *,struct stree *) defined in smatch_function_hooks.c
      uses function free_stree(struct stree **) defined in avl.c
   function db_assign_return_states_callback(void *,int,char **,char **) in line 633
      protection public
      52 lines of code
      4 parameters
      9 conditional paths
      uses variable fcall_back::type defined in smatch_function_hooks.c
      uses variable param defined in smatch_parse_call_math.c
      uses function set_return_state(struct expression *,struct db_callback_info *) defined in smatch_function_hooks.c
      uses function __pop_fake_cur_stree(void) defined in smatch.h
      uses function merge_fake_stree(struct stree **,struct stree *) defined in smatch_slist.c
      uses function free_stree(struct stree **) defined in avl.c
      uses function __push_fake_cur_stree(void) defined in smatch.h
      uses enumvalue CULL_PATH defined in smatch.h
      uses enumvalue PARAM_LIMIT defined in smatch.h
      uses function impossible_limit(struct expression *,int,char *,char *) defined in smatch_function_hooks.c
      uses function call_results_to_rl(struct expression *,struct symbol *,char *,struct range_list **) defined in smatch_extra.h
      uses function get_type(struct expression *) defined in smatch.h
      uses function strip_expr(struct expression *) defined in smatch.h
      uses function __add_comparison_info(struct expression *,struct expression *,const char *) defined in smatch.h
      uses function alloc_whole_rl(struct symbol *) defined in smatch_extra.h
      uses function cast_rl(struct symbol *,struct range_list *) defined in smatch_extra.h
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable db_return_states_list defined in smatch_function_hooks.c
      uses variable return_implies_callback::type defined in smatch_function_hooks.c
      uses variable return_implies_callback::callback defined in smatch_function_hooks.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses function store_return_state(struct db_callback_info *,struct smatch_state *) defined in smatch_function_hooks.c
      uses function alloc_estate_rl(struct range_list *) defined in smatch_estate.c
   function db_return_states_assign(struct expression *) in line 686
      protection public
      41 lines of code
      1 parameters
      3 conditional paths
      uses variable expression::right defined in expression.h
      uses function strip_expr(struct expression *) defined in smatch.h
      uses variable db_callback_info::expr defined in smatch_function_hooks.c
      uses macro definition NULL defined in sm_implied3.c
      uses function call_return_states_before_hooks(void) defined in smatch_function_hooks.c
      uses function __push_fake_cur_stree(void) defined in smatch.h
      uses function sql_select_return_states(const char *,struct expression *,int(*)(void *, int, char **, char **),void *) defined in smatch.h
      uses function db_assign_return_states_callback(void *,int,char **,char **) defined in smatch_function_hooks.c
      uses variable option_debug defined in smatch.h
      uses macro definition sm_msg defined in smatch.h
      uses variable db_info::name defined in smatch_buf_comparison.c
      uses function set_return_state(struct expression *,struct db_callback_info *) defined in smatch_function_hooks.c
      uses function __pop_fake_cur_stree(void) defined in smatch.h
      uses function merge_fake_stree(struct stree **,struct stree *) defined in smatch_slist.c
      uses function free_stree(struct stree **) defined in avl.c
      uses macro definition FOR_EACH_SM defined in avl.h
      uses function __set_sm(struct sm_state *) defined in smatch.h
      uses macro definition END_FOR_EACH_SM defined in avl.h
      uses function call_return_states_after_hooks(void) defined in smatch_function_hooks.c
   function handle_implied_return(struct expression *) in line 728
      protection public
      10 lines of code
      1 parameters
      2 conditional paths
      uses function get_implied_return(struct expression *,struct range_list **) defined in smatch_function_hooks.c
      uses variable expression::right defined in expression.h
      uses function cast_rl(struct symbol *,struct range_list *) defined in smatch_extra.h
      uses function get_type(struct expression *) defined in smatch.h
      uses variable expression::left defined in expression.h
      uses function set_extra_expr_mod(struct expression *,struct smatch_state *) defined in smatch_extra.c
      uses function alloc_estate_rl(struct range_list *) defined in smatch_estate.c
   function match_assign_call(struct expression *) in line 739
      protection public
      45 lines of code
      1 parameters
      7 conditional paths
      uses variable expression::right defined in expression.h
      uses variable expression::op defined in expression.h
      uses function strip_expr(struct expression *) defined in smatch.h
      uses variable expression::fn defined in expression.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_SYMBOL defined in expression.h
      uses variable expression::symbol defined in expression.h
      uses function db_return_states_assign(struct expression *) defined in smatch_function_hooks.c
      uses function is_fake_call(struct expression *) defined in smatch_extra.h
      uses function set_extra_expr_mod(struct expression *,struct smatch_state *) defined in smatch_extra.c
      uses variable expression::left defined in expression.h
      uses function alloc_estate_whole(struct symbol *) defined in smatch_estate.c
      uses function get_type(struct expression *) defined in smatch.h
      uses variable symbol::ident defined in struct.c
      uses variable ident::name defined in token.h
      uses variable func_hash defined in smatch_function_hooks.c
      uses function call_call_backs(struct call_back_list *,int,const char *,struct expression *) defined in smatch_function_hooks.c
      uses macro definition ASSIGN_CALL defined in smatch_function_hooks.c
      uses function assign_ranged_funcs(const char *,struct expression *,struct call_back_list *) defined in smatch_function_hooks.c
      uses function handle_implied_return(struct expression *) defined in smatch_function_hooks.c
      uses function get_absolute_rl(struct expression *,struct range_list **) defined in smatch_extra.h
      uses function cast_rl(struct symbol *,struct range_list *) defined in smatch_extra.h
      uses function alloc_estate_rl(struct range_list *) defined in smatch_estate.c
   function db_return_states_callback(void *,int,char **,char **) in line 785
      protection public
      56 lines of code
      4 parameters
      8 conditional paths
      uses variable fcall_back::type defined in smatch_function_hooks.c
      uses variable param defined in smatch_parse_call_math.c
      uses variable buf defined in sm_fake_assignment.c
      uses function __pop_fake_cur_stree(void) defined in smatch.h
      uses function merge_fake_stree(struct stree **,struct stree *) defined in smatch_slist.c
      uses function free_stree(struct stree **) defined in avl.c
      uses function __push_fake_cur_stree(void) defined in smatch.h
      uses function __unnullify_path(void) defined in smatch.h
      uses enumvalue CULL_PATH defined in smatch.h
      uses enumvalue PARAM_LIMIT defined in smatch.h
      uses function impossible_limit(struct expression *,int,char *,char *) defined in smatch_function_hooks.c
      uses function call_results_to_rl(struct expression *,struct symbol *,char *,struct range_list **) defined in smatch_extra.h
      uses function get_type(struct expression *) defined in smatch.h
      uses function strip_expr(struct expression *) defined in smatch.h
      uses function cast_rl(struct symbol *,struct range_list *) defined in smatch_extra.h
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable db_return_states_list defined in smatch_function_hooks.c
      uses variable return_implies_callback::type defined in smatch_function_hooks.c
      uses variable return_implies_callback::callback defined in smatch_function_hooks.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses function snprintf(char *,int,char *,char *) defined in sm_overflow6.c
      uses function set_state(int,const char *,struct symbol *,struct smatch_state *) defined in smatch.h
      uses macro definition SMATCH_EXTRA defined in smatch.h
      uses macro definition NULL defined in sm_implied3.c
      uses function alloc_estate_rl(struct range_list *) defined in smatch_estate.c
   function db_return_states(struct expression *) in line 842
      protection public
      31 lines of code
      1 parameters
      3 conditional paths
      uses function __get_cur_stree(void) defined in smatch.h
      uses variable db_callback_info::expr defined in smatch_function_hooks.c
      uses macro definition NULL defined in sm_implied3.c
      uses function call_return_states_before_hooks(void) defined in smatch_function_hooks.c
      uses function __push_fake_cur_stree(void) defined in smatch.h
      uses function __unnullify_path(void) defined in smatch.h
      uses function sql_select_return_states(const char *,struct expression *,int(*)(void *, int, char **, char **),void *) defined in smatch.h
      uses function db_return_states_callback(void *,int,char **,char **) defined in smatch_function_hooks.c
      uses function __pop_fake_cur_stree(void) defined in smatch.h
      uses function merge_fake_stree(struct stree **,struct stree *) defined in smatch_slist.c
      uses function free_stree(struct stree **) defined in avl.c
      uses macro definition FOR_EACH_SM defined in avl.h
      uses function __set_sm(struct sm_state *) defined in smatch.h
      uses macro definition END_FOR_EACH_SM defined in avl.h
      uses function call_return_states_after_hooks(void) defined in smatch_function_hooks.c
   function db_return_states_call(struct expression *) in line 874
      protection public
      6 lines of code
      1 parameters
      2 conditional paths
      uses function is_assigned_call(struct expression *) defined in smatch.h
      uses variable db_callback_info::expr defined in smatch_function_hooks.c
      uses function db_return_states(struct expression *) defined in smatch_function_hooks.c
   function match_function_call(struct expression *) in line 881
      protection public
      12 lines of code
      1 parameters
      3 conditional paths
      uses variable expression::fn defined in expression.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_SYMBOL defined in expression.h
      uses variable expression::symbol defined in expression.h
      uses variable func_hash defined in smatch_function_hooks.c
      uses variable symbol::ident defined in struct.c
      uses variable ident::name defined in token.h
      uses function call_call_backs(struct call_back_list *,int,const char *,struct expression *) defined in smatch_function_hooks.c
      uses macro definition REGULAR_CALL defined in smatch_function_hooks.c
      uses function db_return_states_call(struct expression *) defined in smatch_function_hooks.c
   function match_macro_assign(struct expression *) in line 894
      protection public
      14 lines of code
      1 parameters
      2 conditional paths
      uses variable expression::right defined in expression.h
      uses function strip_expr(struct expression *) defined in smatch.h
      uses function get_macro_name(struct position) defined in macro_table.c
      uses variable expression::pos defined in expression.h
      uses variable func_hash defined in smatch_function_hooks.c
      uses function call_call_backs(struct call_back_list *,int,const char *,struct expression *) defined in smatch_function_hooks.c
      uses macro definition MACRO_ASSIGN defined in smatch_function_hooks.c
      uses macro definition MACRO_ASSIGN_EXTRA defined in smatch_function_hooks.c
   function get_implied_return(struct expression *,struct range_list **) in line 909
      protection public
      27 lines of code
      2 parameters
      4 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses function strip_expr(struct expression *) defined in smatch.h
      uses function expr_to_var(struct expression *) defined in smatch.h
      uses variable expression::fn defined in expression.h
      uses variable func_hash defined in smatch_function_hooks.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable fcall_back::type defined in smatch_function_hooks.c
      uses macro definition IMPLIED_RETURN defined in smatch_function_hooks.c
      uses variable fcall_back::u defined in smatch_function_hooks.c
      uses variable fcall_back::implied_return defined in smatch_function_hooks.c
      uses variable fcall_back::info defined in smatch_function_hooks.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses function free_string(char *) defined in smatch.h
   function create_function_hook_hash(void) in line 937
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable func_hash defined in smatch_function_hooks.c
   function register_function_hooks(int) in line 942
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses function add_hook(void *,enum hook_type) defined in smatch.h
      uses function match_function_call(struct expression *) defined in smatch_function_hooks.c
      uses enumvalue CALL_HOOK_AFTER_INLINE defined in smatch.h
      uses function match_assign_call(struct expression *) defined in smatch_function_hooks.c
      uses enumvalue CALL_ASSIGNMENT_HOOK defined in smatch.h
      uses function match_macro_assign(struct expression *) defined in smatch_function_hooks.c
      uses enumvalue MACRO_ASSIGNMENT_HOOK defined in smatch.h
   variable fcall_back::call_back in line 40
      protection public
   variable fcall_back::implied_return in line 42
      protection public
   variable fcall_back::info in line 44
      protection public
   variable fcall_back::range in line 38
      protection public
   variable fcall_back::ranged in line 41
      protection public
   variable fcall_back::type in line 37
      protection public
   variable fcall_back::u in line 43
      protection public
   variable fcall_back::@137::call_back in line 40
      protection public
   variable fcall_back::@137::implied_return in line 42
      protection public
   variable fcall_back::@137::ranged in line 41
      protection public
   variable return_implies_callback::callback in line 62
      protection public
   variable return_implies_callback::type in line 61
      protection public
   variable db_callback_info::callbacks in line 344
      protection public
   variable db_callback_info::comparison in line 339
      protection public
   variable db_callback_info::cull in line 346
      protection public
   variable db_callback_info::expr in line 340
      protection public
   variable db_callback_info::left in line 342
      protection public
   variable db_callback_info::prev_return_id in line 345
      protection public
   variable db_callback_info::ret_state in line 347
      protection public
   variable db_callback_info::rl in line 341
      protection public
   variable db_callback_info::stree in line 343
      protection public
   variable db_callback_info::true_side in line 338
      protection public
   variable db_callback_info::var_expr in line 348
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/smatch_function_info.c
module smatch_function_info.c
   variable my_id in line 26
      protection public
   function match_def(struct symbol *) in line 28
      protection public
      11 lines of code
      1 parameters
      1 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable sym defined in smatch_type.c
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::base_type defined in struct.c
      uses variable symbol::arguments defined in struct.c
      uses function sql_insert_function_type_info(int,const char *) defined in smatch.h
      uses function type_to_str(struct symbol *) defined in smatch.h
      uses function get_real_base_type(struct symbol *) defined in smatch.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function register_function_info(int) in line 40
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable my_id defined in smatch_function_info.c
      uses function add_hook(void *,enum hook_type) defined in smatch.h
      uses function match_def(struct symbol *) defined in smatch_function_info.c
      uses enumvalue FUNC_DEF_HOOK defined in smatch.h
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/smatch_function_ptrs.c
module smatch_function_ptrs.c
   variable my_id in line 28
      protection public
   function get_from__symbol_get(struct expression *) in line 30
      protection public
      22 lines of code
      1 parameters
      4 conditional paths
      uses function strip_expr(struct expression *) defined in smatch.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_CALL defined in expression.h
      uses macro definition NULL defined in sm_implied3.c
      uses function sym_name_is(const char *,struct expression *) defined in smatch.h
      uses variable expression::fn defined in expression.h
      uses function get_argument_from_call_expr(struct expression_list *,int) defined in smatch.h
      uses variable expression::args defined in expression.h
      uses enumvalue EXPR_STRING defined in expression.h
      uses function alloc_string(const char *) defined in smatch.h
   function get_array_ptr(struct expression *) in line 53
      protection public
      38 lines of code
      1 parameters
      8 conditional paths
      uses variable name defined in smatch_type.c
      uses variable buf defined in sm_fake_assignment.c
      uses function get_array_base(struct expression *) defined in smatch.h
      uses function get_member_name(struct expression *) defined in smatch.h
      uses function get_type(struct expression *) defined in smatch.h
      uses enumvalue SYM_ARRAY defined in symbol.h
      uses function expr_to_var(struct expression *) defined in smatch.h
      uses macro definition NULL defined in sm_implied3.c
      uses function snprintf(char *,int,char *,char *) defined in sm_overflow6.c
      uses function alloc_string(const char *) defined in smatch.h
      uses function get_assigned_expr(struct expression *) defined in check_assigned_expr.c
      uses function free_string(char *) defined in smatch.h
   function is_local_symbol(struct symbol *) in line 92
      protection public
      8 lines of code
      1 parameters
      3 conditional paths
      uses variable sym defined in smatch_type.c
      uses variable symbol::scope defined in struct.c
      uses variable scope::token defined in scope.h
      uses function positions_eq(struct position,struct position) defined in smatch.h
      uses variable token::pos defined in token.h
      uses variable cur_func_sym defined in smatch.h
      uses variable symbol::pos defined in struct.c
   function ptr_prefix(struct symbol *) in line 101
      protection public
      14 lines of code
      1 parameters
      3 conditional paths
      uses variable buf defined in sm_fake_assignment.c
      uses function is_local_symbol(struct symbol *) defined in smatch_function_ptrs.c
      uses variable sym defined in smatch_type.c
      uses function snprintf(char *,int,char *,char *) defined in sm_overflow6.c
      uses function get_function(void) defined in smatch.h
      uses variable symbol::scope defined in struct.c
      uses function get_base_file(void) defined in smatch.h
   function get_returned_ptr(struct expression *) in line 116
      protection public
      24 lines of code
      1 parameters
      6 conditional paths
      uses variable name defined in smatch_type.c
      uses variable buf defined in sm_fake_assignment.c
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_CALL defined in expression.h
      uses macro definition NULL defined in sm_implied3.c
      uses variable expression::fn defined in expression.h
      uses enumvalue EXPR_SYMBOL defined in expression.h
      uses function get_type(struct expression *) defined in smatch.h
      uses enumvalue SYM_PTR defined in symbol.h
      uses function get_real_base_type(struct symbol *) defined in smatch.h
      uses enumvalue SYM_FN defined in symbol.h
      uses function expr_to_var(struct expression *) defined in smatch.h
      uses function snprintf(char *,int,char *,char *) defined in sm_overflow6.c
      uses function free_string(char *) defined in smatch.h
      uses function alloc_string(const char *) defined in smatch.h
   function get_fnptr_name(struct expression *) in line 141
      protection public
      51 lines of code
      1 parameters
      10 conditional paths
      uses variable name defined in smatch_type.c
      uses function strip_expr(struct expression *) defined in smatch.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_PREOP defined in expression.h
      uses variable expression::op defined in expression.h
      uses variable expression::unop defined in expression.h
      uses function get_from__symbol_get(struct expression *) defined in smatch_function_ptrs.c
      uses function get_array_ptr(struct expression *) defined in smatch_function_ptrs.c
      uses function get_returned_ptr(struct expression *) defined in smatch_function_ptrs.c
      uses function get_member_name(struct expression *) defined in smatch.h
      uses enumvalue EXPR_SYMBOL defined in expression.h
      uses variable param defined in smatch_parse_call_math.c
      uses variable buf defined in sm_fake_assignment.c
      uses variable sym defined in smatch_type.c
      uses function get_param_num_from_sym(struct symbol *) defined in smatch.h
      uses variable expression::symbol defined in expression.h
      uses function snprintf(char *,int,char *,char *) defined in sm_overflow6.c
      uses function get_function(void) defined in smatch.h
      uses function alloc_string(const char *) defined in smatch.h
      uses function expr_to_var_sym(struct expression *,struct symbol **) defined in smatch.h
      uses macro definition NULL defined in sm_implied3.c
      uses function get_type(struct expression *) defined in smatch.h
      uses enumvalue SYM_PTR defined in symbol.h
      uses function ptr_prefix(struct symbol *) defined in smatch_function_ptrs.c
      uses function free_string(char *) defined in smatch.h
      uses function expr_to_var(struct expression *) defined in smatch.h
   function match_passes_function_pointer(struct expression *) in line 193
      protection public
      39 lines of code
      1 parameters
      7 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable expression::args defined in expression.h
      uses function strip_expr(struct expression *) defined in smatch.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_PREOP defined in expression.h
      uses variable expression::op defined in expression.h
      uses variable expression::unop defined in expression.h
      uses function get_type(struct expression *) defined in smatch.h
      uses enumvalue SYM_PTR defined in symbol.h
      uses function get_real_base_type(struct symbol *) defined in smatch.h
      uses enumvalue SYM_FN defined in symbol.h
      uses function expr_to_var(struct expression *) defined in smatch.h
      uses variable expression::fn defined in expression.h
      uses function get_fnptr_name(struct expression *) defined in smatch_function_ptrs.c
      uses function snprintf(char *,int,char *,char *) defined in sm_overflow6.c
      uses function sql_insert_function_ptr(const char *,const char *) defined in smatch.h
      uses function free_string(char *) defined in smatch.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function match_function_assign(struct expression *) in line 233
      protection public
      43 lines of code
      1 parameters
      14 conditional paths
      uses variable expression::right defined in expression.h
      uses variable sym defined in smatch_type.c
      uses variable __in_fake_assign defined in smatch.h
      uses function strip_expr(struct expression *) defined in smatch.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_PREOP defined in expression.h
      uses variable expression::op defined in expression.h
      uses variable expression::unop defined in expression.h
      uses enumvalue EXPR_SYMBOL defined in expression.h
      uses enumvalue EXPR_DEREF defined in expression.h
      uses enumvalue EXPR_CALL defined in expression.h
      uses function get_type(struct expression *) defined in smatch.h
      uses variable symbol::type defined in struct.c
      uses enumvalue SYM_NODE defined in symbol.h
      uses function get_real_base_type(struct symbol *) defined in smatch.h
      uses enumvalue SYM_FN defined in symbol.h
      uses enumvalue SYM_PTR defined in symbol.h
      uses enumvalue SYM_ARRAY defined in symbol.h
      uses function get_fnptr_name(struct expression *) defined in smatch_function_ptrs.c
      uses variable expression::left defined in expression.h
      uses function sql_insert_function_ptr(const char *,const char *) defined in smatch.h
      uses function free_string(char *) defined in smatch.h
   function match_returns_function_pointer(struct expression *) in line 277
      protection public
      28 lines of code
      1 parameters
      7 conditional paths
      uses variable __inline_fn defined in smatch.h
      uses function get_real_base_type(struct symbol *) defined in smatch.h
      uses variable cur_func_sym defined in smatch.h
      uses enumvalue SYM_FN defined in symbol.h
      uses enumvalue SYM_PTR defined in symbol.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_PREOP defined in expression.h
      uses variable expression::op defined in expression.h
      uses function strip_expr(struct expression *) defined in smatch.h
      uses variable expression::unop defined in expression.h
      uses function get_fnptr_name(struct expression *) defined in smatch_function_ptrs.c
      uses function snprintf(char *,int,char *,char *) defined in sm_overflow6.c
      uses function get_function(void) defined in smatch.h
      uses function sql_insert_function_ptr(const char *,const char *) defined in smatch.h
   function register_function_ptrs(int) in line 306
      protection public
      12 lines of code
      1 parameters
      2 conditional paths
      uses variable my_id defined in smatch_function_ptrs.c
      uses variable option_info defined in smatch.c
      uses function add_hook(void *,enum hook_type) defined in smatch.h
      uses function match_passes_function_pointer(struct expression *) defined in smatch_function_ptrs.c
      uses enumvalue FUNCTION_CALL_HOOK defined in smatch.h
      uses function match_returns_function_pointer(struct expression *) defined in smatch_function_ptrs.c
      uses enumvalue RETURN_HOOK defined in smatch.h
      uses function match_function_assign(struct expression *) defined in smatch_function_ptrs.c
      uses enumvalue ASSIGNMENT_HOOK defined in smatch.h
      uses enumvalue GLOBAL_ASSIGNMENT_HOOK defined in smatch.h
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/smatch_helper.c
module smatch_helper.c
   macro definition VAR_LEN in line 28
      protection public
   function alloc_string(const char *) in line 30
      protection public
      10 lines of code
      1 parameters
      2 conditional paths
      uses variable str defined in sm_overflow6.c
      uses macro definition NULL defined in sm_implied3.c
      uses function malloc(int) defined in sm_buf_size2.c
      uses function strlen(char *) defined in sm_overflow6.c
      uses function strcpy(char *,char *,int) defined in sm_overflow3.c
   function free_string(char *) in line 41
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable str defined in sm_overflow6.c
   function remove_parens(char *) in line 46
      protection public
      14 lines of code
      1 parameters
      3 conditional paths
      uses variable src defined in sm_user_data3.c
      uses variable str defined in sm_overflow6.c
   function alloc_state_num(int) in line 61
      protection public
      12 lines of code
      1 parameters
      1 conditional paths
      uses function snprintf(char *,int,char *,char *) defined in sm_overflow6.c
      uses variable smatch_state::name defined in smatch.h
      uses function alloc_string(const char *) defined in smatch_helper.c
      uses variable smatch_state::data defined in smatch.h
   function alloc_state_str(const char *) in line 74
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses variable smatch_state::name defined in smatch.h
      uses function alloc_string(const char *) defined in smatch_helper.c
      uses variable name defined in smatch_type.c
   function append(char *,const char *,int) in line 83
      protection public
      4 lines of code
      3 parameters
      1 conditional paths
      uses variable dest defined in sm_user_data2.c
      uses variable smatch_state::data defined in smatch.h
      uses function strlen(char *) defined in sm_overflow6.c
   function get_argument_from_call_expr(struct expression_list *,int) in line 93
      protection public
      16 lines of code
      2 parameters
      3 conditional paths
      uses variable expression::args defined in expression.h
      uses macro definition NULL defined in sm_implied3.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function get_array_expr(struct expression *) in line 110
      protection public
      12 lines of code
      1 parameters
      3 conditional paths
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_BINOP defined in expression.h
      uses variable expression::op defined in expression.h
      uses macro definition NULL defined in sm_implied3.c
      uses function get_type(struct expression *) defined in smatch.h
      uses variable expression::left defined in expression.h
      uses enumvalue SYM_ARRAY defined in symbol.h
   function __get_variable_from_expr(struct symbol **,char *,struct expression *,int,int *,int) in line 123
      protection public
      164 lines of code
      6 parameters
      36 conditional paths
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_DEREF defined in expression.h
      uses function op(void) defined in loop2.c
      uses variable expression::deref defined in expression.h
      uses variable expression::unop defined in expression.h
      uses function strip_expr(struct expression *) defined in smatch_helper.c
      uses enumvalue EXPR_PREOP defined in expression.h
      uses variable expression::op defined in expression.h
      uses variable buf defined in sm_fake_assignment.c
      uses function append(char *,const char *,int) defined in smatch_helper.c
      uses variable expression::member defined in expression.h
      uses variable ident::name defined in token.h
      uses enumvalue EXPR_SYMBOL defined in expression.h
      uses variable expression::symbol_name defined in expression.h
      uses variable expression::symbol defined in expression.h
      uses function get_expression_statement(struct expression *) defined in smatch_helper.c
      uses function get_array_expr(struct expression *) defined in smatch_helper.c
      uses function show_special(int) defined in token.h
      uses enumvalue SPECIAL_DECREMENT defined in token.h
      uses enumvalue SPECIAL_INCREMENT defined in token.h
      uses enumvalue EXPR_POSTOP defined in expression.h
      uses enumvalue EXPR_ASSIGNMENT defined in expression.h
      uses enumvalue EXPR_COMPARE defined in expression.h
      uses enumvalue EXPR_LOGICAL defined in expression.h
      uses enumvalue EXPR_BINOP defined in expression.h
      uses variable expression::left defined in expression.h
      uses function snprintf(char *,int,char *,char *) defined in sm_overflow6.c
      uses macro definition NULL defined in sm_implied3.c
      uses variable expression::right defined in expression.h
      uses enumvalue EXPR_VALUE defined in expression.h
      uses variable expression::value defined in expression.h
      uses enumvalue EXPR_STRING defined in expression.h
      uses variable expression::string defined in expression.h
      uses variable string::data defined in token.h
      uses enumvalue EXPR_CALL defined in expression.h
      uses variable expression::fn defined in expression.h
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable expression::args defined in expression.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses enumvalue EXPR_CAST defined in expression.h
      uses enumvalue EXPR_FORCE_CAST defined in expression.h
      uses variable expression::cast_expression defined in expression.h
      uses enumvalue EXPR_SIZEOF defined in expression.h
      uses variable expression::cast_type defined in expression.h
      uses function type_bytes(struct symbol *) defined in smatch.h
      uses enumvalue EXPR_IDENTIFIER defined in expression.h
      uses variable expression::expr_ident defined in expression.h
   function expr_to_str_sym(struct expression *,struct symbol **) in line 297
      protection public
      18 lines of code
      2 parameters
      4 conditional paths
      uses macro definition VAR_LEN defined in smatch_helper.c
      uses macro definition NULL defined in sm_implied3.c
      uses function __get_variable_from_expr(struct symbol **,char *,struct expression *,int,int *,int) defined in smatch_helper.c
      uses function alloc_string(const char *) defined in smatch_helper.c
   function expr_to_str(struct expression *) in line 316
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function expr_to_str_sym(struct expression *,struct symbol **) defined in smatch_helper.c
      uses macro definition NULL defined in sm_implied3.c
   function expr_to_var_sym(struct expression *,struct symbol **) in line 326
      protection public
      23 lines of code
      2 parameters
      5 conditional paths
      uses macro definition VAR_LEN defined in smatch_helper.c
      uses macro definition NULL defined in sm_implied3.c
      uses function strip_expr(struct expression *) defined in smatch_helper.c
      uses function __get_variable_from_expr(struct symbol **,char *,struct expression *,int,int *,int) defined in smatch_helper.c
      uses function alloc_string(const char *) defined in smatch_helper.c
   function expr_to_var(struct expression *) in line 350
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function expr_to_var_sym(struct expression *,struct symbol **) defined in smatch_helper.c
      uses macro definition NULL defined in sm_implied3.c
   function expr_to_sym(struct expression *) in line 355
      protection public
      9 lines of code
      1 parameters
      1 conditional paths
      uses variable sym defined in smatch_type.c
      uses variable name defined in smatch_type.c
      uses function expr_to_var_sym(struct expression *,struct symbol **) defined in smatch_helper.c
      uses function free_string(char *) defined in smatch_helper.c
   function get_complication_score(struct expression *) in line 365
      protection public
      36 lines of code
      1 parameters
      10 conditional paths
      uses function strip_expr(struct expression *) defined in smatch_helper.c
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_CALL defined in expression.h
      uses enumvalue EXPR_COMPARE defined in expression.h
      uses enumvalue EXPR_BINOP defined in expression.h
      uses variable expression::left defined in expression.h
      uses variable expression::right defined in expression.h
      uses enumvalue EXPR_SYMBOL defined in expression.h
      uses function is_local_variable(struct expression *) defined in smatch.h
      uses enumvalue EXPR_PREOP defined in expression.h
      uses variable expression::op defined in expression.h
      uses variable expression::unop defined in expression.h
      uses enumvalue EXPR_DEREF defined in expression.h
      uses variable expression::deref defined in expression.h
      uses enumvalue EXPR_VALUE defined in expression.h
   function expr_to_chunk_helper(struct expression *,struct symbol **,struct var_sym_list **) in line 402
      protection public
      35 lines of code
      3 parameters
      10 conditional paths
      uses variable name defined in smatch_type.c
      uses macro definition NULL defined in sm_implied3.c
      uses variable sym defined in smatch_type.c
      uses function strip_parens(struct expression *) defined in smatch_helper.c
      uses function expr_to_var_sym(struct expression *,struct symbol **) defined in smatch_helper.c
      uses function expr_to_vsl(struct expression *) defined in smatch.h
      uses function free_string(char *) defined in smatch_helper.c
      uses function get_complication_score(struct expression *) defined in smatch_helper.c
      uses function expr_to_str(struct expression *) defined in smatch_helper.c
   function expr_to_known_chunk_sym(struct expression *,struct symbol **) in line 438
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function expr_to_chunk_helper(struct expression *,struct symbol **,struct var_sym_list **) defined in smatch_helper.c
      uses variable sym defined in smatch_type.c
      uses macro definition NULL defined in sm_implied3.c
   function expr_to_chunk_sym_vsl(struct expression *,struct symbol **,struct var_sym_list **) in line 443
      protection public
      4 lines of code
      3 parameters
      1 conditional paths
      uses function expr_to_chunk_helper(struct expression *,struct symbol **,struct var_sym_list **) defined in smatch_helper.c
      uses variable sym defined in smatch_type.c
   function sym_name_is(const char *,struct expression *) in line 448
      protection public
      10 lines of code
      2 parameters
      4 conditional paths
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_SYMBOL defined in expression.h
      uses variable expression::symbol_name defined in expression.h
      uses variable ident::name defined in token.h
      uses variable name defined in smatch_type.c
   function is_zero(struct expression *) in line 459
      protection public
      8 lines of code
      1 parameters
      2 conditional paths
      uses function get_value(struct expression *,sval_t *) defined in smatch.h
      uses variable sval_t::value defined in smatch.h
   function is_array(struct expression *) in line 468
      protection public
      23 lines of code
      1 parameters
      6 conditional paths
      uses function strip_expr(struct expression *) defined in smatch_helper.c
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_PREOP defined in expression.h
      uses variable expression::op defined in expression.h
      uses variable expression::unop defined in expression.h
      uses enumvalue EXPR_BINOP defined in expression.h
      uses function get_type(struct expression *) defined in smatch.h
      uses variable expression::left defined in expression.h
      uses enumvalue SYM_ARRAY defined in symbol.h
   function get_array_base(struct expression *) in line 492
      protection public
      11 lines of code
      1 parameters
      4 conditional paths
      uses function is_array(struct expression *) defined in smatch_helper.c
      uses macro definition NULL defined in sm_implied3.c
      uses function strip_expr(struct expression *) defined in smatch_helper.c
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_PREOP defined in expression.h
      uses variable expression::op defined in expression.h
      uses variable expression::unop defined in expression.h
      uses enumvalue EXPR_BINOP defined in expression.h
      uses function strip_parens(struct expression *) defined in smatch_helper.c
      uses variable expression::left defined in expression.h
   function get_array_offset(struct expression *) in line 504
      protection public
      11 lines of code
      1 parameters
      4 conditional paths
      uses function is_array(struct expression *) defined in smatch_helper.c
      uses macro definition NULL defined in sm_implied3.c
      uses function strip_expr(struct expression *) defined in smatch_helper.c
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_PREOP defined in expression.h
      uses variable expression::op defined in expression.h
      uses variable expression::unop defined in expression.h
      uses enumvalue EXPR_BINOP defined in expression.h
      uses function strip_parens(struct expression *) defined in smatch_helper.c
      uses variable expression::right defined in expression.h
   function show_state(struct smatch_state *) in line 516
      protection public
      6 lines of code
      1 parameters
      2 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses variable smatch_state::name defined in smatch.h
   function get_expression_statement(struct expression *) in line 523
      protection public
      14 lines of code
      1 parameters
      5 conditional paths
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_PREOP defined in expression.h
      uses macro definition NULL defined in sm_implied3.c
      uses variable expression::op defined in expression.h
      uses variable expression::unop defined in expression.h
      uses enumvalue EXPR_STATEMENT defined in expression.h
      uses variable expression::statement defined in expression.h
      uses variable statement::type defined in parse.h
      uses enumvalue STMT_COMPOUND defined in parse.h
   function strip_parens(struct expression *) in line 538
      protection public
      14 lines of code
      1 parameters
      5 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_PREOP defined in expression.h
      uses variable expression::op defined in expression.h
      uses variable expression::unop defined in expression.h
      uses enumvalue EXPR_STATEMENT defined in expression.h
      uses variable expression::statement defined in expression.h
      uses variable statement::type defined in parse.h
      uses enumvalue STMT_COMPOUND defined in parse.h
   function strip_expr(struct expression *) in line 553
      protection public
      50 lines of code
      1 parameters
      15 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_FORCE_CAST defined in expression.h
      uses enumvalue EXPR_CAST defined in expression.h
      uses variable expression::cast_expression defined in expression.h
      uses enumvalue EXPR_PREOP defined in expression.h
      uses variable expression::unop defined in expression.h
      uses variable expression::op defined in expression.h
      uses enumvalue EXPR_STATEMENT defined in expression.h
      uses variable expression::statement defined in expression.h
      uses variable statement::type defined in parse.h
      uses enumvalue STMT_COMPOUND defined in parse.h
      uses function get_type(struct expression *) defined in smatch.h
      uses enumvalue SYM_ARRAY defined in symbol.h
      uses enumvalue EXPR_CONDITIONAL defined in expression.h
      uses function known_condition_true(struct expression *) defined in smatch.h
      uses variable expression::conditional defined in expression.h
      uses variable expression::cond_true defined in expression.h
      uses function known_condition_false(struct expression *) defined in smatch.h
      uses variable expression::cond_false defined in expression.h
      uses enumvalue EXPR_CALL defined in expression.h
      uses function sym_name_is(const char *,struct expression *) defined in smatch_helper.c
      uses variable expression::fn defined in expression.h
      uses function get_argument_from_call_expr(struct expression_list *,int) defined in smatch_helper.c
      uses variable expression::args defined in expression.h
   function delete_state_tracker(struct tracker *) in line 604
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function delete_state(int,const char *,struct symbol *) defined in smatch.h
   function scoped_state(int,const char *,struct symbol *) in line 610
      protection public
      7 lines of code
      3 parameters
      1 conditional paths
      uses function alloc_tracker(int,const char *,struct symbol *) defined in smatch.h
      uses variable name defined in smatch_type.c
      uses variable sym defined in smatch_type.c
      uses function add_scope_hook(scope_hook *,void *) defined in smatch.h
      uses function delete_state_tracker(struct tracker *) defined in smatch_helper.c
   function is_error_return(struct expression *) in line 618
      protection public
      23 lines of code
      1 parameters
      8 conditional paths
      uses variable cur_func_sym defined in smatch.h
      uses enumvalue SYM_NODE defined in symbol.h
      uses enumvalue SYM_FN defined in symbol.h
      uses function get_implied_value(struct expression *,sval_t *) defined in smatch.h
      uses variable sval_t::value defined in smatch.h
      uses enumvalue SYM_PTR defined in symbol.h
   function getting_address(void) in line 642
      protection public
      19 lines of code
      1 parameters
      5 conditional paths
      uses macro definition FOR_EACH_PTR_REVERSE defined in ptrlist.h
      uses variable big_expression_stack defined in smatch.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_PREOP defined in expression.h
      uses variable expression::op defined in expression.h
      uses macro definition END_FOR_EACH_PTR_REVERSE defined in ptrlist.h
   function get_member_name(struct expression *) in line 662
      protection public
      29 lines of code
      1 parameters
      8 conditional paths
      uses variable buf defined in sm_fake_assignment.c
      uses variable sym defined in smatch_type.c
      uses function strip_expr(struct expression *) defined in smatch_helper.c
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_DEREF defined in expression.h
      uses macro definition NULL defined in sm_implied3.c
      uses variable expression::member defined in expression.h
      uses function get_type(struct expression *) defined in smatch.h
      uses variable expression::deref defined in expression.h
      uses variable symbol::type defined in struct.c
      uses enumvalue SYM_UNION defined in symbol.h
      uses function expr_to_sym(struct expression *) defined in smatch_helper.c
      uses function get_real_base_type(struct symbol *) defined in smatch.h
      uses enumvalue SYM_PTR defined in symbol.h
      uses variable symbol::ident defined in struct.c
      uses function snprintf(char *,int,char *,char *) defined in sm_overflow6.c
      uses variable ident::name defined in token.h
      uses function alloc_string(const char *) defined in smatch_helper.c
   function cmp_pos(struct position,struct position) in line 692
      protection public
      20 lines of code
      2 parameters
      7 conditional paths
      uses variable position::stream defined in lib.h
      uses variable position::line defined in lib.h
      uses variable position::pos defined in lib.h
   function positions_eq(struct position,struct position) in line 713
      protection public
      10 lines of code
      2 parameters
      4 conditional paths
      uses variable position::line defined in lib.h
      uses variable position::pos defined in lib.h
      uses variable position::stream defined in lib.h
   function get_current_statement(void) in line 724
      protection public
      18 lines of code
      1 parameters
      4 conditional paths
      uses variable big_statement_stack defined in smatch.h
      uses function get_macro_name(struct position) defined in macro_table.c
      uses variable statement::pos defined in parse.h
      uses macro definition FOR_EACH_PTR_REVERSE defined in ptrlist.h
      uses function positions_eq(struct position,struct position) defined in smatch_helper.c
      uses variable position::line defined in lib.h
      uses macro definition END_FOR_EACH_PTR_REVERSE defined in ptrlist.h
   function get_prev_statement(void) in line 743
      protection public
      12 lines of code
      1 parameters
      2 conditional paths
      uses macro definition FOR_EACH_PTR_REVERSE defined in ptrlist.h
      uses variable big_statement_stack defined in smatch.h
      uses macro definition END_FOR_EACH_PTR_REVERSE defined in ptrlist.h
      uses macro definition NULL defined in sm_implied3.c
   function get_param_num_from_sym(struct symbol *) in line 756
      protection public
      16 lines of code
      1 parameters
      3 conditional paths
      uses variable cur_func_sym defined in smatch.h
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::base_type defined in struct.c
      uses variable symbol::arguments defined in struct.c
      uses variable sym defined in smatch_type.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function get_param_num(struct expression *) in line 773
      protection public
      13 lines of code
      1 parameters
      3 conditional paths
      uses variable sym defined in smatch_type.c
      uses variable name defined in smatch_type.c
      uses variable cur_func_sym defined in smatch.h
      uses function expr_to_var_sym(struct expression *,struct symbol **) defined in smatch_helper.c
      uses function free_string(char *) defined in smatch_helper.c
      uses function get_param_num_from_sym(struct symbol *) defined in smatch_helper.c
   function ms_since(struct timeval *) in line 787
      protection public
      10 lines of code
      1 parameters
      1 conditional paths
      uses macro definition NULL defined in sm_implied3.c
   function parent_is_gone_var_sym(const char *,struct symbol *) in line 798
      protection public
      10 lines of code
      2 parameters
      3 conditional paths
      uses variable name defined in smatch_type.c
      uses variable sym defined in smatch_type.c
      uses function parent_is_null_var_sym(const char *,struct symbol *) defined in smatch_extra.c
      uses function parent_is_free_var_sym(const char *,struct symbol *) defined in check_free.c
   function parent_is_gone(struct expression *) in line 809
      protection public
      15 lines of code
      1 parameters
      3 conditional paths
      uses variable sym defined in smatch_type.c
      uses function strip_expr(struct expression *) defined in smatch_helper.c
      uses function expr_to_var_sym(struct expression *,struct symbol **) defined in smatch_helper.c
      uses function parent_is_gone_var_sym(const char *,struct symbol *) defined in smatch_helper.c
      uses function free_string(char *) defined in smatch_helper.c
   function invert_op(int) in line 825
      protection public
      18 lines of code
      1 parameters
      7 conditional paths
      uses function op(void) defined in loop2.c
      uses enumvalue SPECIAL_LEFTSHIFT defined in token.h
      uses enumvalue SPECIAL_RIGHTSHIFT defined in token.h
   function expr_equiv(struct expression *,struct expression *) in line 844
      protection public
      27 lines of code
      2 parameters
      10 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses variable one defined in sm_equiv1.c
      uses variable two defined in sm_equiv1.c
      uses function expr_to_str_sym(struct expression *,struct symbol **) defined in smatch_helper.c
      uses function free_string(char *) defined in smatch_helper.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/smatch_hooks.c
module smatch_hooks.c
   enumeration data_type in line 20
      protection public
   variable hook_funcs in line 34
      protection public
   variable merge_funcs in line 35
      protection public
   variable unmatched_state_funcs in line 36
      protection public
   variable pre_merge_hooks in line 37
      protection public
   variable scope_hooks in line 46
      protection public
   enumvalue EXPR_PTR in line 21
      protection public
   enumvalue STMT_PTR in line 22
      protection public
   enumvalue SYMBOL_PTR in line 23
      protection public
   enumvalue SYM_LIST_PTR in line 24
      protection public
   function ALLOCATOR(hook_container,"hook functions") in line 32
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function DECLARE_PTR_LIST(hook_func_list,struct hook_container) in line 33
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function ALLOCATOR(scope_container,"scope hook functions") in line 43
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function DECLARE_PTR_LIST(scope_hook_list,struct scope_container) in line 44
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function DECLARE_PTR_LIST(scope_hook_stack,struct scope_hook_list) in line 45
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function add_hook(void *,enum hook_type) in line 48
      protection public
      114 lines of code
      2 parameters
      36 conditional paths
      uses variable hook_container::hook_type defined in smatch_hooks.c
      uses variable hook_container::fn defined in smatch_hooks.c
      uses macro definition func defined in preprocessor1.c
      uses enumvalue EXPR_HOOK defined in smatch.h
      uses variable hook_container::data_type defined in smatch_hooks.c
      uses enumvalue EXPR_PTR defined in smatch_hooks.c
      uses enumvalue STMT_HOOK defined in smatch.h
      uses enumvalue STMT_PTR defined in smatch_hooks.c
      uses enumvalue STMT_HOOK_AFTER defined in smatch.h
      uses enumvalue SYM_HOOK defined in smatch.h
      uses enumvalue STRING_HOOK defined in smatch.h
      uses enumvalue DECLARATION_HOOK defined in smatch.h
      uses enumvalue SYMBOL_PTR defined in smatch_hooks.c
      uses enumvalue ASSIGNMENT_HOOK defined in smatch.h
      uses enumvalue RAW_ASSIGNMENT_HOOK defined in smatch.h
      uses enumvalue GLOBAL_ASSIGNMENT_HOOK defined in smatch.h
      uses enumvalue CALL_ASSIGNMENT_HOOK defined in smatch.h
      uses enumvalue MACRO_ASSIGNMENT_HOOK defined in smatch.h
      uses enumvalue BINOP_HOOK defined in smatch.h
      uses enumvalue OP_HOOK defined in smatch.h
      uses enumvalue LOGIC_HOOK defined in smatch.h
      uses enumvalue PRELOOP_HOOK defined in smatch.h
      uses enumvalue CONDITION_HOOK defined in smatch.h
      uses enumvalue SELECT_HOOK defined in smatch.h
      uses enumvalue WHOLE_CONDITION_HOOK defined in smatch.h
      uses enumvalue FUNCTION_CALL_HOOK defined in smatch.h
      uses enumvalue CALL_HOOK_AFTER_INLINE defined in smatch.h
      uses enumvalue FUNCTION_CALL_HOOK_AFTER defined in smatch.h
      uses enumvalue DEREF_HOOK defined in smatch.h
      uses enumvalue CASE_HOOK defined in smatch.h
      uses enumvalue ASM_HOOK defined in smatch.h
      uses enumvalue CAST_HOOK defined in smatch.h
      uses enumvalue SIZEOF_HOOK defined in smatch.h
      uses enumvalue BASE_HOOK defined in smatch.h
      uses enumvalue FUNC_DEF_HOOK defined in smatch.h
      uses enumvalue AFTER_DEF_HOOK defined in smatch.h
      uses enumvalue END_FUNC_HOOK defined in smatch.h
      uses enumvalue AFTER_FUNC_HOOK defined in smatch.h
      uses enumvalue RETURN_HOOK defined in smatch.h
      uses enumvalue INLINE_FN_START defined in smatch.h
      uses enumvalue INLINE_FN_END defined in smatch.h
      uses enumvalue END_FILE_HOOK defined in smatch.h
      uses enumvalue SYM_LIST_PTR defined in smatch_hooks.c
      uses macro definition add_ptr_list defined in ptrlist.h
      uses variable hook_funcs defined in smatch_hooks.c
   function add_merge_hook(int,merge_func_t *) in line 163
      protection public
      7 lines of code
      2 parameters
      1 conditional paths
      uses variable hook_container::data_type defined in smatch_hooks.c
      uses variable hook_container::fn defined in smatch_hooks.c
      uses macro definition func defined in preprocessor1.c
      uses macro definition add_ptr_list defined in ptrlist.h
      uses variable merge_funcs defined in smatch_hooks.c
   function add_unmatched_state_hook(int,unmatched_func_t *) in line 171
      protection public
      7 lines of code
      2 parameters
      1 conditional paths
      uses variable hook_container::data_type defined in smatch_hooks.c
      uses variable hook_container::fn defined in smatch_hooks.c
      uses macro definition func defined in preprocessor1.c
      uses macro definition add_ptr_list defined in ptrlist.h
      uses variable unmatched_state_funcs defined in smatch_hooks.c
   function add_pre_merge_hook(int,void(*)(struct sm_state *sm)) in line 179
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses variable pre_merge_hooks defined in smatch_hooks.c
   function pass_to_client(void *) in line 184
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function void(x,int) defined in identifier_list.c
      uses variable hook_container::fn defined in smatch_hooks.c
   function pass_expr_to_client(void *,void *) in line 190
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses function void(x,int) defined in identifier_list.c
      uses variable hook_container::fn defined in smatch_hooks.c
   function pass_stmt_to_client(void *,void *) in line 196
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses function void(x,int) defined in identifier_list.c
      uses variable hook_container::fn defined in smatch_hooks.c
   function pass_sym_to_client(void *,void *) in line 202
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses function void(x,int) defined in identifier_list.c
      uses variable sym defined in smatch_type.c
      uses variable hook_container::fn defined in smatch_hooks.c
   function pass_sym_list_to_client(void *,void *) in line 208
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses function void(x,int) defined in identifier_list.c
      uses variable hook_container::fn defined in smatch_hooks.c
   function __pass_to_client(void *,enum hook_type) in line 214
      protection public
      23 lines of code
      2 parameters
      6 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable hook_funcs defined in smatch_hooks.c
      uses variable hook_container::hook_type defined in smatch_hooks.c
      uses variable hook_container::data_type defined in smatch_hooks.c
      uses enumvalue EXPR_PTR defined in smatch_hooks.c
      uses function pass_expr_to_client(void *,void *) defined in smatch_hooks.c
      uses variable hook_container::fn defined in smatch_hooks.c
      uses enumvalue STMT_PTR defined in smatch_hooks.c
      uses function pass_stmt_to_client(void *,void *) defined in smatch_hooks.c
      uses enumvalue SYMBOL_PTR defined in smatch_hooks.c
      uses function pass_sym_to_client(void *,void *) defined in smatch_hooks.c
      uses enumvalue SYM_LIST_PTR defined in smatch_hooks.c
      uses function pass_sym_list_to_client(void *,void *) defined in smatch_hooks.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function __pass_to_client_no_data(enum hook_type) in line 238
      protection public
      9 lines of code
      1 parameters
      2 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable hook_funcs defined in smatch_hooks.c
      uses variable hook_container::hook_type defined in smatch_hooks.c
      uses function pass_to_client(void *) defined in smatch_hooks.c
      uses variable hook_container::fn defined in smatch_hooks.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function __pass_case_to_client(struct expression *,struct expression *) in line 248
      protection public
      12 lines of code
      2 parameters
      2 conditional paths
      uses function void(x,int) defined in identifier_list.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable hook_funcs defined in smatch_hooks.c
      uses variable hook_container::hook_type defined in smatch_hooks.c
      uses enumvalue CASE_HOOK defined in smatch.h
      uses variable hook_container::fn defined in smatch_hooks.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function __has_merge_function(int) in line 261
      protection public
      10 lines of code
      1 parameters
      2 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable merge_funcs defined in smatch_hooks.c
      uses variable hook_container::data_type defined in smatch_hooks.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function __client_merge_function(int,struct smatch_state *,struct smatch_state *) in line 272
      protection public
      20 lines of code
      3 parameters
      3 conditional paths
      uses variable s1 defined in designated-init.c
      uses variable s2 defined in designated-init.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable merge_funcs defined in smatch_hooks.c
      uses variable hook_container::data_type defined in smatch_hooks.c
      uses variable hook_container::fn defined in smatch_hooks.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses variable undefined defined in smatch.h
   function __client_unmatched_state_function(struct sm_state *) in line 293
      protection public
      10 lines of code
      1 parameters
      2 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable unmatched_state_funcs defined in smatch_hooks.c
      uses variable hook_container::data_type defined in smatch_hooks.c
      uses variable sm_state::owner defined in smatch.h
      uses variable hook_container::fn defined in smatch_hooks.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses variable undefined defined in smatch.h
   function call_pre_merge_hook(struct sm_state *) in line 304
      protection public
      8 lines of code
      1 parameters
      3 conditional paths
      uses variable sm_state::owner defined in smatch.h
      uses variable num_checks defined in smatch.c
      uses variable pre_merge_hooks defined in smatch_hooks.c
   function pop_scope_hook_list(struct scope_hook_stack **) in line 313
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses function delete_ptr_list_last(struct ptr_list **) defined in ptrlist.c
   function push_scope_hook_list(struct scope_hook_stack **,struct scope_hook_list *) in line 322
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses macro definition add_ptr_list defined in ptrlist.h
      uses variable l defined in sm_casts4.c
   function add_scope_hook(scope_hook *,void *) in line 327
      protection public
      14 lines of code
      2 parameters
      2 conditional paths
      uses variable scope_hooks defined in smatch_hooks.c
      uses function pop_scope_hook_list(struct scope_hook_stack **) defined in smatch_hooks.c
      uses variable hook_container::fn defined in smatch_hooks.c
      uses variable scope_container::data defined in smatch_hooks.c
      uses macro definition add_ptr_list defined in ptrlist.h
      uses function push_scope_hook_list(struct scope_hook_stack **,struct scope_hook_list *) defined in smatch_hooks.c
   function __push_scope_hooks(void) in line 342
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function push_scope_hook_list(struct scope_hook_stack **,struct scope_hook_list *) defined in smatch_hooks.c
      uses variable scope_hooks defined in smatch_hooks.c
      uses macro definition NULL defined in sm_implied3.c
   function __call_scope_hooks(void) in line 347
      protection public
      14 lines of code
      1 parameters
      2 conditional paths
      uses variable scope_hooks defined in smatch_hooks.c
      uses function pop_scope_hook_list(struct scope_hook_stack **) defined in smatch_hooks.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable scope_container::fn defined in smatch_hooks.c
      uses variable scope_container::data defined in smatch_hooks.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function allocate_hook_memory(void) in line 362
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable pre_merge_hooks defined in smatch_hooks.c
      uses function malloc(int) defined in sm_buf_size2.c
      uses variable num_checks defined in smatch.c
      uses function memset(void *,int,int) defined in check_byte_count-ice.c
   variable hook_container::data_type in line 28
      protection public
   variable hook_container::fn in line 30
      protection public
   variable hook_container::hook_type in line 28
      protection public
   variable scope_container::data in line 41
      protection public
   variable scope_container::fn in line 40
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/smatch_ignore.c
module smatch_ignore.c
   variable ignored in line 20
      protection public
   function add_ignore(int,const char *,struct symbol *) in line 22
      protection public
      10 lines of code
      3 parameters
      1 conditional paths
      uses function malloc(int) defined in sm_buf_size2.c
      uses variable tracker::name defined in smatch.h
      uses function alloc_string(const char *) defined in smatch.h
      uses variable name defined in smatch_type.c
      uses variable tracker::owner defined in smatch.h
      uses variable tracker::sym defined in smatch.h
      uses variable sym defined in smatch_type.c
      uses macro definition add_ptr_list defined in ptrlist.h
      uses variable ignored defined in smatch_ignore.c
   function is_ignored(int,const char *,struct symbol *) in line 33
      protection public
      11 lines of code
      3 parameters
      2 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable ignored defined in smatch_ignore.c
      uses variable tracker::owner defined in smatch.h
      uses variable tracker::sym defined in smatch.h
      uses variable sym defined in smatch_type.c
      uses variable tracker::name defined in smatch.h
      uses variable name defined in smatch_type.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function clear_ignores(void) in line 45
      protection public
      6 lines of code
      1 parameters
      2 conditional paths
      uses variable __inline_fn defined in smatch.h
      uses function __free_ptr_list(struct ptr_list **) defined in ptrlist.c
      uses variable ignored defined in smatch_ignore.c
   function register_smatch_ignore(int) in line 52
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function add_hook(void *,enum hook_type) defined in smatch.h
      uses function clear_ignores(void) defined in smatch_ignore.c
      uses enumvalue END_FUNC_HOOK defined in smatch.h
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/smatch_implied.c
module smatch_implied.c
   macro definition DIMPLIED in line 66
      protection public
   variable implied_debug_msg in line 65
      protection public
   variable option_debug_implied in line 68
      protection public
   variable saved_implied_true in line 568
      protection public
   variable saved_implied_false in line 569
      protection public
   function tmp_range_list(struct symbol *,long long) in line 75
      protection public
      10 lines of code
      2 parameters
      1 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses function __free_ptr_list(struct ptr_list **) defined in ptrlist.c
      uses function alloc_range(sval_t,sval_t) defined in smatch_extra.h
      uses function ll_to_sval(long long) defined in smatch.h
      uses macro definition add_ptr_list defined in ptrlist.h
   function print_debug_tf(struct sm_state *,int,int) in line 86
      protection public
      19 lines of code
      3 parameters
      5 conditional paths
      uses variable option_debug_implied defined in smatch_implied.c
      uses variable option_debug defined in smatch.h
      uses function printf(char *,...) defined in test-be.c
      uses variable sm_state::name defined in smatch.h
      uses function show_state(struct smatch_state *) defined in smatch.h
      uses variable sm_state::state defined in smatch.h
      uses variable sm_state::line defined in smatch.h
      uses function get_stree_id(struct stree *) defined in avl.c
      uses variable sm_state::pool defined in smatch.h
   function add_pool(struct stree_stack **,struct stree *) in line 110
      protection public
      16 lines of code
      2 parameters
      3 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses macro definition INSERT_CURRENT defined in ptrlist.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses macro definition add_ptr_list defined in ptrlist.h
   function do_compare(struct sm_state *,int,struct range_list *,struct stree_stack **,struct stree_stack **) in line 131
      protection public
      40 lines of code
      5 parameters
      7 conditional paths
      uses variable sm_state::pool defined in smatch.h
      uses function is_implied(struct sm_state *) defined in smatch_slist.c
      uses function get_sm_state_stree(struct stree *,int,const char *,struct symbol *) defined in smatch_slist.c
      uses variable sm_state::owner defined in smatch.h
      uses variable sm_state::name defined in smatch.h
      uses variable sm_state::sym defined in smatch.h
      uses variable option_debug_implied defined in smatch_implied.c
      uses variable option_debug defined in smatch.h
      uses macro definition sm_msg defined in smatch.h
      uses variable sm_state::line defined in smatch.h
      uses function cast_rl(struct symbol *,struct range_list *) defined in smatch_extra.h
      uses function rl_type(struct range_list *) defined in smatch_extra.h
      uses function estate_rl(struct smatch_state *) defined in smatch_estate.c
      uses function possibly_false_rl(struct range_list *,int,struct range_list *) defined in smatch_extra.h
      uses function possibly_true_rl(struct range_list *,int,struct range_list *) defined in smatch_extra.h
      uses function print_debug_tf(struct sm_state *,int,int) defined in smatch_implied.c
      uses function add_pool(struct stree_stack **,struct stree *) defined in smatch_implied.c
   function pool_in_pools(struct stree *,const struct stree_stack *) in line 172
      protection public
      13 lines of code
      2 parameters
      3 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function is_checked(struct state_list *,struct sm_state *) in line 186
      protection public
      10 lines of code
      2 parameters
      2 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function separate_pools(struct sm_state *,int,struct range_list *,struct stree_stack **,struct stree_stack **,struct state_list **) in line 205
      protection public
      41 lines of code
      6 parameters
      7 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses variable sm_state::nr_children defined in smatch.h
      uses variable option_debug defined in smatch.h
      uses variable option_debug_implied defined in smatch_implied.c
      uses variable buf defined in sm_fake_assignment.c
      uses function snprintf(char *,int,char *,char *) defined in sm_overflow6.c
      uses variable sm_state::name defined in smatch.h
      uses function show_state(struct smatch_state *) defined in smatch.h
      uses variable sm_state::state defined in smatch.h
      uses variable implied_debug_msg defined in smatch_implied.c
      uses function is_checked(struct state_list *,struct sm_state *) defined in smatch_implied.c
      uses macro definition add_ptr_list defined in ptrlist.h
      uses function do_compare(struct sm_state *,int,struct range_list *,struct stree_stack **,struct stree_stack **) defined in smatch_implied.c
      uses variable sm_state::left defined in smatch.h
      uses variable sm_state::right defined in smatch.h
      uses function free_slist(struct state_list **) defined in smatch_slist.c
   function filter_pools(struct sm_state *,const struct stree_stack *,const struct stree_stack *,int *) in line 247
      protection public
      71 lines of code
      4 parameters
      10 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses variable sm_state::left defined in smatch.h
      uses variable sm_state::right defined in smatch.h
      uses variable sm_state::nr_children defined in smatch.h
      uses variable option_debug defined in smatch.h
      uses variable option_debug_implied defined in smatch_implied.c
      uses variable buf defined in sm_fake_assignment.c
      uses function snprintf(char *,int,char *,char *) defined in sm_overflow6.c
      uses variable sm_state::name defined in smatch.h
      uses function show_state(struct smatch_state *) defined in smatch.h
      uses variable sm_state::state defined in smatch.h
      uses variable implied_debug_msg defined in smatch_implied.c
      uses function pool_in_pools(struct stree *,const struct stree_stack *) defined in smatch_implied.c
      uses variable sm_state::pool defined in smatch.h
      uses macro definition DIMPLIED defined in smatch_implied.c
      uses function show_sm(struct sm_state *) defined in smatch_slist.c
      uses variable sm_state::line defined in smatch.h
      uses function get_stree_id(struct stree *) defined in avl.c
      uses function is_merged(struct sm_state *) defined in smatch_slist.c
      uses function clone_sm(struct sm_state *) defined in smatch_slist.c
      uses variable sm_state::merged defined in smatch.h
      uses function merge_sm_states(struct sm_state *,struct sm_state *) defined in smatch_slist.c
      uses variable sm_state::implied defined in smatch.h
   function highest_stree_id(struct sm_state *) in line 319
      protection public
      17 lines of code
      1 parameters
      5 conditional paths
      uses variable sm_state::left defined in smatch.h
      uses variable sm_state::right defined in smatch.h
      uses function get_stree_id(struct stree *) defined in avl.c
      uses variable sm_state::pool defined in smatch.h
   function filter_stack(struct sm_state *,struct stree *,const struct stree_stack *,const struct stree_stack *) in line 337
      protection public
      36 lines of code
      4 parameters
      6 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses macro definition FOR_EACH_SM defined in avl.h
      uses variable sm_state::merged defined in smatch.h
      uses function highest_stree_id(struct sm_state *) defined in smatch_implied.c
      uses macro definition DIMPLIED defined in smatch_implied.c
      uses variable sm_state::name defined in smatch.h
      uses function filter_pools(struct sm_state *,const struct stree_stack *,const struct stree_stack *,int *) defined in smatch_implied.c
      uses variable sm_state::sym defined in smatch.h
      uses function avl_insert(struct stree **,const struct sm_state *) defined in avl.c
      uses function out_of_memory(void) defined in smatch_slist.c
      uses macro definition END_FOR_EACH_SM defined in avl.h
   function separate_and_filter(struct sm_state *,int,struct range_list *,struct stree *,struct stree **,struct stree **) in line 374
      protection public
      41 lines of code
      6 parameters
      5 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses function is_merged(struct sm_state *) defined in smatch_slist.c
      uses macro definition DIMPLIED defined in smatch_implied.c
      uses function get_lineno(void) defined in smatch.h
      uses variable sm_state::name defined in smatch.h
      uses variable option_debug_implied defined in smatch_implied.c
      uses variable option_debug defined in smatch.h
      uses macro definition sm_msg defined in smatch.h
      uses function show_special(int) defined in token.h
      uses function show_rl(struct range_list *) defined in smatch_extra.h
      uses function separate_pools(struct sm_state *,int,struct range_list *,struct stree_stack **,struct stree_stack **,struct state_list **) defined in smatch_implied.c
      uses function filter_stack(struct sm_state *,struct stree *,const struct stree_stack *,const struct stree_stack *) defined in smatch_implied.c
      uses function free_stree_stack(struct stree_stack **) defined in smatch_slist.c
      uses function printf(char *,...) defined in test-be.c
      uses function __print_stree(struct stree *) defined in smatch_slist.c
      uses variable __bail_on_rest_of_function defined in smatch.h
   function get_left_most_expr(struct expression *) in line 416
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses function strip_expr(struct expression *) defined in smatch.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_ASSIGNMENT defined in expression.h
      uses variable expression::left defined in expression.h
   function is_merged_expr(struct expression *) in line 424
      protection public
      14 lines of code
      1 parameters
      4 conditional paths
      uses function get_value(struct expression *,sval_t *) defined in smatch.h
      uses function get_sm_state_expr(int,struct expression *) defined in smatch.h
      uses macro definition SMATCH_EXTRA defined in smatch.h
      uses function is_merged(struct sm_state *) defined in smatch_slist.c
   function delete_equiv_stree(struct stree **,const char *,struct symbol *) in line 439
      protection public
      15 lines of code
      3 parameters
      2 conditional paths
      uses function get_state(int,const char *,struct symbol *) defined in smatch.h
      uses macro definition SMATCH_EXTRA defined in smatch.h
      uses variable name defined in smatch_type.c
      uses variable sym defined in smatch_type.c
      uses function estate_related(struct smatch_state *) defined in smatch_estate.c
      uses function delete_state_stree(struct stree **,int,const char *,struct symbol *) defined in smatch_slist.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable relation::name defined in smatch_extra.h
      uses variable relation::sym defined in smatch_extra.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function handle_comparison(struct expression *,struct stree **,struct stree **) in line 455
      protection public
      40 lines of code
      3 parameters
      6 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses variable expression::left defined in expression.h
      uses variable expression::right defined in expression.h
      uses variable expression::op defined in expression.h
      uses function get_left_most_expr(struct expression *) defined in smatch_implied.c
      uses function is_merged_expr(struct expression *) defined in smatch_implied.c
      uses function get_sm_state_expr(int,struct expression *) defined in smatch.h
      uses macro definition SMATCH_EXTRA defined in smatch.h
      uses function get_implied_rl(struct expression *,struct range_list **) defined in smatch_extra.h
      uses function flip_comparison(int) defined in smatch.h
      uses function free_rl(struct range_list **) defined in smatch_extra.h
      uses function estate_type(struct smatch_state *) defined in smatch_estate.c
      uses variable sm_state::state defined in smatch.h
      uses function type_positive_bits(struct symbol *) defined in smatch.h
      uses function rl_type(struct range_list *) defined in smatch_extra.h
      uses function cast_rl(struct symbol *,struct range_list *) defined in smatch_extra.h
      uses function separate_and_filter(struct sm_state *,int,struct range_list *,struct stree *,struct stree **,struct stree **) defined in smatch_implied.c
      uses function __get_cur_stree(void) defined in smatch.h
      uses function delete_equiv_stree(struct stree **,const char *,struct symbol *) defined in smatch_implied.c
      uses variable sm_state::name defined in smatch.h
      uses variable sm_state::sym defined in smatch.h
   function handle_zero_comparison(struct expression *,struct stree **,struct stree **) in line 496
      protection public
      31 lines of code
      3 parameters
      7 conditional paths
      uses variable sym defined in smatch_type.c
      uses variable name defined in smatch_type.c
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_POSTOP defined in expression.h
      uses function strip_expr(struct expression *) defined in smatch.h
      uses variable expression::unop defined in expression.h
      uses enumvalue EXPR_ASSIGNMENT defined in expression.h
      uses variable expression::left defined in expression.h
      uses function expr_to_var_sym(struct expression *,struct symbol **) defined in smatch.h
      uses function get_sm_state(int,const char *,struct symbol *) defined in smatch.h
      uses macro definition SMATCH_EXTRA defined in smatch.h
      uses function separate_and_filter(struct sm_state *,int,struct range_list *,struct stree *,struct stree **,struct stree **) defined in smatch_implied.c
      uses enumvalue SPECIAL_NOTEQUAL defined in token.h
      uses function tmp_range_list(struct symbol *,long long) defined in smatch_implied.c
      uses function estate_type(struct smatch_state *) defined in smatch_estate.c
      uses variable sm_state::state defined in smatch.h
      uses function __get_cur_stree(void) defined in smatch.h
      uses function delete_equiv_stree(struct stree **,const char *,struct symbol *) defined in smatch_implied.c
      uses function free_string(char *) defined in smatch.h
   function handled_by_implied_hook(struct expression *,struct stree **,struct stree **) in line 528
      protection public
      26 lines of code
      3 parameters
      3 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses function comparison_implication_hook(struct expression *,struct stree_stack **,struct stree_stack **) defined in smatch.h
      uses function stored_condition_implication_hook(struct expression *,struct stree_stack **,struct stree_stack **) defined in smatch.h
      uses function clone_stree(struct stree *) defined in avl.c
      uses function __get_cur_stree(void) defined in smatch.h
      uses function filter_stack(struct sm_state *,struct stree *,const struct stree_stack *,const struct stree_stack *) defined in smatch_implied.c
      uses function free_stree(struct stree **) defined in avl.c
      uses function free_stree_stack(struct stree_stack **) defined in smatch_slist.c
   function get_tf_states(struct expression *,struct stree **,struct stree **) in line 555
      protection public
      12 lines of code
      3 parameters
      3 conditional paths
      uses function handled_by_implied_hook(struct expression *,struct stree **,struct stree **) defined in smatch_implied.c
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_COMPARE defined in expression.h
      uses function handle_comparison(struct expression *,struct stree **,struct stree **) defined in smatch_implied.c
      uses function handle_zero_comparison(struct expression *,struct stree **,struct stree **) defined in smatch_implied.c
   function save_implications_hook(struct expression *) in line 571
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function get_tf_states(struct expression *,struct stree **,struct stree **) defined in smatch_implied.c
      uses variable saved_implied_true defined in smatch_implied.c
      uses variable saved_implied_false defined in smatch_implied.c
   function set_implied_states(struct expression *) in line 576
      protection public
      32 lines of code
      1 parameters
      3 conditional paths
      uses macro definition FOR_EACH_SM defined in avl.h
      uses variable saved_implied_true defined in smatch_implied.c
      uses function get_state_stree(struct stree *,int,const char *,struct symbol *) defined in smatch_slist.c
      uses variable saved_implied_false defined in smatch_implied.c
      uses variable sm_state::owner defined in smatch.h
      uses variable sm_state::name defined in smatch.h
      uses variable sm_state::sym defined in smatch.h
      uses function get_sm_state(int,const char *,struct symbol *) defined in smatch.h
      uses function set_state_stree(struct stree **,int,const char *,struct symbol *,struct smatch_state *) defined in smatch_slist.c
      uses variable sm_state::state defined in smatch.h
      uses macro definition END_FOR_EACH_SM defined in avl.h
      uses function __set_true_false_sm(struct sm_state *,struct sm_state *) defined in smatch.h
      uses macro definition NULL defined in sm_implied3.c
      uses function free_stree(struct stree **) defined in avl.c
   function __get_implied_values(struct expression *) in line 609
      protection public
      24 lines of code
      1 parameters
      6 conditional paths
      uses variable name defined in smatch_type.c
      uses variable sym defined in smatch_type.c
      uses macro definition NULL defined in sm_implied3.c
      uses function expr_to_var_sym(struct expression *,struct symbol **) defined in smatch.h
      uses function get_state(int,const char *,struct symbol *) defined in smatch.h
      uses macro definition SMATCH_EXTRA defined in smatch.h
      uses function clone_rl(struct range_list *) defined in smatch_extra.h
      uses function estate_rl(struct smatch_state *) defined in smatch_estate.c
      uses function free_string(char *) defined in smatch.h
      uses function get_type(struct expression *) defined in smatch.h
      uses function alloc_rl(sval_t,sval_t) defined in smatch_extra.h
      uses function sval_type_min(struct symbol *) defined in smatch.h
      uses function sval_type_max(struct symbol *) defined in smatch.h
   function __implied_case_stree(struct expression *,struct expression *,struct expression *,struct range_list_stack **,struct stree **) in line 634
      protection public
      47 lines of code
      5 parameters
      6 conditional paths
      uses variable name defined in smatch_type.c
      uses macro definition NULL defined in sm_implied3.c
      uses variable sym defined in smatch_type.c
      uses function clone_stree(struct stree *) defined in avl.c
      uses function expr_to_var_sym(struct expression *,struct symbol **) defined in smatch.h
      uses function get_sm_state_stree(struct stree *,int,const char *,struct symbol *) defined in smatch_slist.c
      uses macro definition SMATCH_EXTRA defined in smatch.h
      uses function get_value(struct expression *,sval_t *) defined in smatch.h
      uses function filter_top_rl(struct range_list_stack **,sval_t,sval_t) defined in smatch_extra.h
      uses function add_range(struct range_list **,sval_t,sval_t) defined in smatch_extra.h
      uses function clone_rl(struct range_list *) defined in smatch_extra.h
      uses function top_rl(struct range_list_stack *) defined in smatch_extra.h
      uses function separate_and_filter(struct sm_state *,int,struct range_list *,struct stree *,struct stree **,struct stree **) defined in smatch_implied.c
      uses enumvalue SPECIAL_EQUAL defined in token.h
      uses function __push_fake_cur_stree(void) defined in smatch.h
      uses function __unnullify_path(void) defined in smatch.h
      uses function set_extra_nomod(const char *,struct symbol *,struct smatch_state *) defined in smatch_extra.c
      uses function alloc_estate_rl(struct range_list *) defined in smatch_estate.c
      uses function __pop_fake_cur_stree(void) defined in smatch.h
      uses function overwrite_stree(struct stree *,struct stree **) defined in smatch_slist.c
      uses function free_stree(struct stree **) defined in avl.c
      uses function free_string(char *) defined in smatch.h
   function match_end_func(struct symbol *) in line 682
      protection public
      6 lines of code
      1 parameters
      2 conditional paths
      uses variable __inline_fn defined in smatch.h
      uses variable implied_debug_msg defined in smatch_implied.c
      uses macro definition NULL defined in sm_implied3.c
   function sm_state_in_slist(struct sm_state *,struct state_list *) in line 689
      protection public
      10 lines of code
      2 parameters
      2 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function overwrite_states_using_pool(struct sm_state *) in line 706
      protection public
      16 lines of code
      1 parameters
      4 conditional paths
      uses variable sm_state::pool defined in smatch.h
      uses macro definition FOR_EACH_SM defined in avl.h
      uses function get_sm_state(int,const char *,struct symbol *) defined in smatch.h
      uses variable sm_state::owner defined in smatch.h
      uses variable sm_state::name defined in smatch.h
      uses variable sm_state::sym defined in smatch.h
      uses function sm_state_in_slist(struct sm_state *,struct state_list *) defined in smatch_implied.c
      uses variable sm_state::possible defined in smatch.h
      uses function set_state(int,const char *,struct symbol *,struct smatch_state *) defined in smatch.h
      uses variable sm_state::state defined in smatch.h
      uses macro definition END_FOR_EACH_SM defined in avl.h
      uses function __extra_match_condition(struct expression *) defined in smatch_implied.c
      uses function __comparison_match_condition(struct expression *) defined in smatch_implied.c
      uses function __stored_condition(struct expression *) defined in smatch_implied.c
   function __extra_match_condition(struct expression *) in line 723
      protection public
      40 lines of code
      1 parameters
      10 conditional paths
      uses variable true_state defined in smatch.h
      uses variable false_state defined in smatch.h
      uses function strip_expr(struct expression *) defined in smatch.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_CALL defined in expression.h
      uses function function_comparison(struct expression *,int,struct expression *) defined in smatch_extra.h
      uses enumvalue SPECIAL_NOTEQUAL defined in token.h
      uses function zero_expr(void) defined in smatch_expressions.c
      uses enumvalue EXPR_PREOP defined in expression.h
      uses enumvalue EXPR_SYMBOL defined in expression.h
      uses enumvalue EXPR_DEREF defined in expression.h
      uses function zero(void) defined in sm_impossible1.c
      uses function sval_blank(struct expression *) defined in smatch.h
      uses function get_extra_state(struct expression *) defined in smatch_extra.c
      uses function estate_filter_sval(struct smatch_state *,sval_t) defined in smatch_estate.c
      uses function possibly_true(struct expression *,int,struct expression *) defined in smatch_extra.h
      uses enumvalue SPECIAL_EQUAL defined in token.h
      uses function alloc_estate_sval(sval_t) defined in smatch_estate.c
      uses function alloc_estate_empty(void) defined in smatch_estate.c
      uses enumvalue EXPR_COMPARE defined in expression.h
      uses enumvalue EXPR_ASSIGNMENT defined in expression.h
      uses function __extra_match_condition(struct expression *) defined in smatch_extra.c
      uses variable expression::left defined in expression.h
      uses enumvalue EXPR_BINOP defined in expression.h
      uses variable expression::op defined in expression.h
   function __comparison_match_condition(struct expression *) in line 724
      protection public
      74 lines of code
      1 parameters
      9 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses function op(void) defined in loop2.c
      uses variable true_state defined in smatch.h
      uses variable false_state defined in smatch.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_COMPARE defined in expression.h
      uses variable expression::op defined in expression.h
      uses function negate_comparison(int) defined in smatch_comparison.c
      uses enumvalue SPECIAL_UNSIGNED_LT defined in token.h
      uses function get_implied_value(struct expression *,sval_t *) defined in smatch.h
      uses variable expression::left defined in expression.h
      uses variable sval_t::value defined in smatch.h
      uses enumvalue SPECIAL_EQUAL defined in token.h
      uses enumvalue SPECIAL_UNSIGNED_GT defined in token.h
      uses variable expression::right defined in expression.h
      uses function expr_to_vsl(struct expression *) defined in smatch.h
      uses function flip_comparison(int) defined in smatch_comparison.c
      uses function get_comparison_strings(const char *,const char *) defined in smatch_comparison.c
      uses function snprintf(char *,int,char *,char *) defined in sm_overflow6.c
      uses function clone_stree(struct stree *) defined in avl.c
      uses function __get_cur_stree(void) defined in smatch.h
      uses function free_stree(struct stree **) defined in avl.c
      uses function set_true_false_states(int,const char *,struct symbol *,struct smatch_state *,struct smatch_state *) defined in smatch.h
      uses function free_string(char *) defined in smatch.h
   function __stored_condition(struct expression *) in line 725
      protection public
      21 lines of code
      1 parameters
      1 conditional paths
      uses variable true_state defined in smatch.h
      uses variable false_state defined in smatch.h
      uses variable name defined in smatch_type.c
      uses function get_implied_value(struct expression *,sval_t *) defined in smatch.h
      uses function expr_to_str(struct expression *) defined in smatch.h
      uses macro definition TRUE defined in smatch.h
      uses macro definition FALSE defined in smatch.h
      uses function set_true_false_states(int,const char *,struct symbol *,struct smatch_state *,struct smatch_state *) defined in smatch.h
      uses macro definition NULL defined in sm_implied3.c
      uses function alloc_sname(const char *) defined in smatch_slist.c
      uses function free_string(char *) defined in smatch.h
   function register_implications(int) in line 726
      protection public
      9 lines of code
      1 parameters
      1 conditional paths
      uses function add_hook(void *,enum hook_type) defined in smatch.h
      uses function save_implications_hook(struct expression *) defined in smatch_implied.c
      uses enumvalue CONDITION_HOOK defined in smatch.h
      uses function set_implied_states(struct expression *) defined in smatch_implied.c
      uses function __extra_match_condition(struct expression *) defined in smatch_implied.c
      uses function __comparison_match_condition(struct expression *) defined in smatch_implied.c
      uses function __stored_condition(struct expression *) defined in smatch_implied.c
      uses function match_end_func(struct symbol *) defined in smatch_implied.c
      uses enumvalue END_FUNC_HOOK defined in smatch.h
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/smatch_impossible.c
module smatch_impossible.c
   variable my_id in line 21
      protection public
   variable my_return_id in line 22
      protection public
   function STATE(impossible) in line 24
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function is_impossible_path(void) in line 26
      protection public
      6 lines of code
      1 parameters
      2 conditional paths
      uses function get_state(int,const char *,struct symbol *) defined in smatch.h
      uses variable my_id defined in smatch_impossible.c
      uses macro definition NULL defined in sm_implied3.c
   function handle_compare(struct expression *,int,struct expression *) in line 33
      protection public
      24 lines of code
      3 parameters
      5 conditional paths
      uses function possibly_true(struct expression *,int,struct expression *) defined in smatch_extra.h
      uses variable sm_state::left defined in smatch.h
      uses function op(void) defined in loop2.c
      uses variable sm_state::right defined in smatch.h
      uses function possibly_false(struct expression *,int,struct expression *) defined in smatch_extra.h
      uses function set_true_false_states(int,const char *,struct symbol *,struct smatch_state *,struct smatch_state *) defined in smatch.h
      uses variable my_id defined in smatch_impossible.c
      uses macro definition NULL defined in sm_implied3.c
      uses variable undefined defined in smatch.h
      uses function inside_loop(void) defined in smatch.h
      uses variable my_return_id defined in smatch_impossible.c
   function match_condition(struct expression *) in line 58
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_COMPARE defined in expression.h
      uses function handle_compare(struct expression *,int,struct expression *) defined in smatch_impossible.c
      uses variable expression::left defined in expression.h
      uses variable expression::op defined in expression.h
      uses variable expression::right defined in expression.h
      uses enumvalue SPECIAL_NOTEQUAL defined in token.h
      uses function zero_expr(void) defined in smatch_expressions.c
   function print_impossible_return(int,char *,struct expression *) in line 66
      protection public
      8 lines of code
      3 parameters
      3 conditional paths
      uses function get_state(int,const char *,struct symbol *) defined in smatch.h
      uses variable my_return_id defined in smatch_impossible.c
      uses macro definition NULL defined in sm_implied3.c
      uses variable option_debug defined in smatch.h
      uses macro definition sm_msg defined in smatch.h
      uses function sql_insert_return_states(int,const char *,int,int,const char *,const char *) defined in smatch.h
      uses enumvalue CULL_PATH defined in smatch.h
   function register_impossible(int) in line 75
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses variable my_id defined in smatch_impossible.c
      uses function add_hook(void *,enum hook_type) defined in smatch.h
      uses function match_condition(struct expression *) defined in smatch_impossible.c
      uses enumvalue CONDITION_HOOK defined in smatch.h
   function register_impossible_return(int) in line 82
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses variable my_return_id defined in smatch_impossible.c
      uses function add_split_return_callback(void(*)(int return_id, char *return_ranges, struct expression *returned_expr)) defined in smatch.h
      uses function print_impossible_return(int,char *,struct expression *) defined in smatch_impossible.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/smatch_links.c
module smatch_links.c
   function alloc_link(struct var_sym_list *) in line 26
      protection public
      23 lines of code
      1 parameters
      2 conditional paths
      uses variable buf defined in sm_fake_assignment.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses function snprintf(char *,int,char *,char *) defined in sm_overflow6.c
      uses variable var_sym::var defined in smatch.h
      uses function append(char *,const char *,int) defined in smatch.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses variable smatch_state::name defined in smatch.h
      uses function alloc_sname(const char *) defined in smatch_slist.c
      uses variable smatch_state::data defined in smatch.h
   function merge_link_states(struct smatch_state *,struct smatch_state *) in line 50
      protection public
      9 lines of code
      2 parameters
      1 conditional paths
      uses function clone_var_sym_list(struct var_sym_list *) defined in smatch.h
      uses function merge_var_sym_list(struct var_sym_list **,struct var_sym_list *) defined in smatch.h
      uses function alloc_link(struct var_sym_list *) defined in smatch_links.c
   function store_link(int,const char *,struct symbol *,const char *,struct symbol *) in line 60
      protection public
      15 lines of code
      5 parameters
      2 conditional paths
      uses function get_state(int,const char *,struct symbol *) defined in smatch.h
      uses variable sym defined in smatch_type.c
      uses function clone_var_sym_list(struct var_sym_list *) defined in smatch.h
      uses variable smatch_state::data defined in smatch.h
      uses macro definition NULL defined in sm_implied3.c
      uses function add_var_sym(struct var_sym_list **,const char *,struct symbol *) defined in smatch.h
      uses function set_state(int,const char *,struct symbol *,struct smatch_state *) defined in smatch.h
      uses function alloc_link(struct var_sym_list *) defined in smatch_links.c
   function match_link_modify(struct sm_state *,struct expression *) in line 76
      protection public
      12 lines of code
      2 parameters
      1 conditional paths
      uses variable sm_state::state defined in smatch.h
      uses variable smatch_state::data defined in smatch.h
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses function set_state(int,const char *,struct symbol *,struct smatch_state *) defined in smatch.h
      uses variable sm_state::owner defined in smatch.h
      uses variable var_sym::var defined in smatch.h
      uses variable var_sym::sym defined in smatch.h
      uses variable undefined defined in smatch.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses variable sm_state::name defined in smatch.h
      uses variable sm_state::sym defined in smatch.h
   function set_up_link_functions(int,int) in line 89
      protection public
      11 lines of code
      2 parameters
      2 conditional paths
      uses function printf(char *,...) defined in test-be.c
      uses function exit(int) defined in test-be.c
      uses function add_merge_hook(int,merge_func_t *) defined in smatch.h
      uses function merge_link_states(struct smatch_state *,struct smatch_state *) defined in smatch_links.c
      uses function add_modification_hook(int,modification_hook *) defined in smatch.h
      uses function match_link_modify(struct sm_state *,struct expression *) defined in smatch_links.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/smatch_local_values.c
module smatch_local_values.c
   variable my_id in line 23
      protection public
   variable db_vals in line 35
      protection public
   variable cur_name in line 178
      protection public
   variable cur_symbol in line 179
      protection public
   variable cur_rl in line 180
      protection public
   function get_vals(void *,int,char **,char **) in line 36
      protection public
      5 lines of code
      4 parameters
      1 conditional paths
      uses variable db_vals defined in smatch_local_values.c
      uses function alloc_string(const char *) defined in smatch.h
   function is_array_symbol(struct expression *) in line 42
      protection public
      13 lines of code
      1 parameters
      4 conditional paths
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_SYMBOL defined in expression.h
      uses function get_type(struct expression *) defined in smatch.h
      uses enumvalue SYM_ARRAY defined in symbol.h
   function get_local_rl(struct expression *,struct range_list **) in line 56
      protection public
      26 lines of code
      2 parameters
      5 conditional paths
      uses variable name defined in smatch_type.c
      uses function is_static(struct expression *) defined in smatch.h
      uses function is_array_symbol(struct expression *) defined in smatch_local_values.c
      uses function expr_to_var(struct expression *) defined in smatch.h
      uses variable db_vals defined in smatch_local_values.c
      uses macro definition NULL defined in sm_implied3.c
      uses macro definition run_sql defined in smatch.h
      uses function get_vals(void *,int,char **,char **) defined in smatch_local_values.c
      uses function get_filename(void) defined in smatch.h
      uses function free_string(char *) defined in smatch.h
      uses function str_to_rl(struct symbol *,char *,struct range_list **) defined in smatch_extra.h
      uses function cast_rl(struct symbol *,struct range_list *) defined in smatch_extra.h
      uses function get_type(struct expression *) defined in smatch.h
   function get_local_max_helper(struct expression *,sval_t *) in line 83
      protection public
      9 lines of code
      2 parameters
      2 conditional paths
      uses function get_local_rl(struct expression *,struct range_list **) defined in smatch_local_values.c
      uses function rl_max(struct range_list *) defined in smatch_extra.h
   function get_local_min_helper(struct expression *,sval_t *) in line 93
      protection public
      9 lines of code
      2 parameters
      2 conditional paths
      uses function get_local_rl(struct expression *,struct range_list **) defined in smatch_local_values.c
      uses function rl_min(struct range_list *) defined in smatch_extra.h
   function unmatched_state(struct sm_state *) in line 103
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function alloc_estate_empty(void) defined in smatch_estate.c
   function extra_mod_hook(const char *,struct symbol *,struct smatch_state *) in line 108
      protection public
      14 lines of code
      3 parameters
      3 conditional paths
      uses variable sym defined in smatch_type.c
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::modifiers defined in struct.c
      uses macro definition MOD_STATIC defined in symbol.h
      uses function get_state(int,const char *,struct symbol *) defined in smatch.h
      uses variable my_id defined in smatch_local_values.c
      uses variable name defined in smatch_type.c
      uses function merge_estates(struct smatch_state *,struct smatch_state *) defined in smatch_estate.c
      uses function set_state(int,const char *,struct symbol *,struct smatch_state *) defined in smatch.h
   function process_states(struct stree *) in line 123
      protection public
      21 lines of code
      1 parameters
      3 conditional paths
      uses macro definition FOR_EACH_SM defined in avl.h
      uses variable sm_state::owner defined in smatch.h
      uses variable my_id defined in smatch_local_values.c
      uses function get_state_stree(struct stree *,int,const char *,struct symbol *) defined in smatch_slist.c
      uses macro definition SMATCH_EXTRA defined in smatch.h
      uses variable sm_state::name defined in smatch.h
      uses variable sm_state::sym defined in smatch.h
      uses function estate_rl(struct smatch_state *) defined in smatch_estate.c
      uses function rl_intersection(struct range_list *,struct range_list *) defined in smatch_extra.h
      uses variable sm_state::state defined in smatch.h
      uses function cast_rl(struct symbol *,struct range_list *) defined in smatch_extra.h
      uses macro definition mem_sql defined in smatch.h
      uses macro definition NULL defined in sm_implied3.c
      uses function get_filename(void) defined in smatch.h
      uses function show_rl(struct range_list *) defined in smatch_extra.h
      uses macro definition END_FOR_EACH_SM defined in avl.h
   function get_initial_value_sym(struct symbol *,char *,sval_t *) in line 145
      protection public
      32 lines of code
      3 parameters
      7 conditional paths
      uses variable sym defined in smatch_type.c
      uses variable symbol::initializer defined in struct.c
      uses function sval_type_val(struct symbol *,long long) defined in smatch.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_INITIALIZER defined in expression.h
      uses function get_value(struct expression *,sval_t *) defined in smatch.h
      uses function symbol_expression(struct symbol *) defined in smatch_expressions.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable expression::expr_list defined in expression.h
      uses enumvalue EXPR_IDENTIFIER defined in expression.h
      uses function member_expression(struct expression *,int,struct ident *) defined in smatch_expressions.c
      uses variable expression::expr_ident defined in expression.h
      uses function expr_to_var(struct expression *) defined in smatch.h
      uses variable name defined in smatch_type.c
      uses function free_string(char *) defined in smatch.h
      uses variable expression::ident_expression defined in expression.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function add_current_local(void) in line 181
      protection public
      17 lines of code
      1 parameters
      3 conditional paths
      uses function get_initial_value_sym(struct symbol *,char *,sval_t *) defined in smatch_local_values.c
      uses variable cur_symbol defined in smatch_local_values.c
      uses variable cur_name defined in smatch_local_values.c
      uses function free_string(char *) defined in smatch.h
      uses macro definition NULL defined in sm_implied3.c
      uses variable cur_rl defined in smatch_local_values.c
      uses function add_range(struct range_list **,sval_t,sval_t) defined in smatch_extra.h
      uses function is_whole_rl(struct range_list *) defined in smatch_extra.h
      uses function sql_insert_local_values(const char *,const char *) defined in smatch.h
      uses function show_rl(struct range_list *) defined in smatch_extra.h
   function save_final_values(void *,int,char **,char **) in line 199
      protection public
      22 lines of code
      4 parameters
      3 conditional paths
      uses variable name defined in smatch_type.c
      uses variable cur_name defined in smatch_local_values.c
      uses function alloc_string(const char *) defined in smatch.h
      uses variable cur_symbol defined in smatch_local_values.c
      uses macro definition NULL defined in sm_implied3.c
      uses function add_current_local(void) defined in smatch_local_values.c
      uses variable cur_rl defined in smatch_local_values.c
      uses function str_to_rl(struct symbol *,char *,struct range_list **) defined in smatch_extra.h
      uses function rl_union(struct range_list *,struct range_list *) defined in smatch_extra.h
   function match_end_file(struct symbol_list *) in line 222
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses macro definition mem_sql defined in smatch.h
      uses function save_final_values(void *,int,char **,char **) defined in smatch_local_values.c
      uses macro definition NULL defined in sm_implied3.c
      uses variable cur_name defined in smatch_local_values.c
      uses function add_current_local(void) defined in smatch_local_values.c
   function register_local_values(int) in line 230
      protection public
      14 lines of code
      1 parameters
      2 conditional paths
      uses variable my_id defined in smatch_local_values.c
      uses variable option_info defined in smatch.c
      uses function add_extra_mod_hook(mod_hook *) defined in smatch_extra.c
      uses function extra_mod_hook(const char *,struct symbol *,struct smatch_state *) defined in smatch_local_values.c
      uses function add_unmatched_state_hook(int,unmatched_func_t *) defined in smatch.h
      uses function unmatched_state(struct sm_state *) defined in smatch_local_values.c
      uses function add_merge_hook(int,merge_func_t *) defined in smatch.h
      uses function merge_estates(struct smatch_state *,struct smatch_state *) defined in smatch_estate.c
      uses function all_return_states_hook(void(*)(struct stree *stree)) defined in smatch_returns.c
      uses function process_states(struct stree *) defined in smatch_local_values.c
      uses function add_hook(void *,enum hook_type) defined in smatch.h
      uses function match_end_file(struct symbol_list *) defined in smatch_local_values.c
      uses enumvalue END_FILE_HOOK defined in smatch.h
      uses macro definition mem_sql defined in smatch.h
      uses macro definition NULL defined in sm_implied3.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/smatch_math.c
module smatch_math.c
   enumeration @138 in line 43
      protection public
   variable custom_handle_variable in line 24
      protection public
   variable zero in line 30
      protection public
   variable one in line 31
      protection public
   enumvalue RL_EXACT in line 44
      protection public
   enumvalue RL_HARD in line 45
      protection public
   enumvalue RL_FUZZY in line 46
      protection public
   enumvalue RL_IMPLIED in line 47
      protection public
   enumvalue RL_ABSOLUTE in line 48
      protection public
   enumvalue RL_REAL_ABSOLUTE in line 49
      protection public
   function _get_rl(struct expression *,int,int *) in line 23
      protection public
      69 lines of code
      3 parameters
      21 conditional paths
      uses function get_type(struct expression *) defined in smatch.h
      uses function strip_parens(struct expression *) defined in smatch.h
      uses macro definition NULL defined in sm_implied3.c
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_CAST defined in expression.h
      uses enumvalue EXPR_FORCE_CAST defined in expression.h
      uses enumvalue EXPR_IMPLIED_CAST defined in expression.h
      uses function handle_cast(struct expression *,int,int *) defined in smatch_math.c
      uses function strip_expr(struct expression *) defined in smatch.h
      uses enumvalue EXPR_VALUE defined in expression.h
      uses function sval_from_val(struct expression *,long long) defined in smatch.h
      uses variable expression::value defined in expression.h
      uses function alloc_rl(sval_t,sval_t) defined in smatch_extra.h
      uses enumvalue EXPR_PREOP defined in expression.h
      uses function handle_preop_rl(struct expression *,int,int *) defined in smatch_math.c
      uses enumvalue EXPR_POSTOP defined in expression.h
      uses variable expression::unop defined in expression.h
      uses enumvalue EXPR_BINOP defined in expression.h
      uses function handle_binop_rl(struct expression *,int,int *) defined in smatch_math.c
      uses enumvalue EXPR_COMPARE defined in expression.h
      uses function handle_comparison_rl(struct expression *,int,int *) defined in smatch_math.c
      uses enumvalue EXPR_LOGICAL defined in expression.h
      uses function handle_logical_rl(struct expression *,int,int *) defined in smatch_math.c
      uses enumvalue EXPR_PTRSIZEOF defined in expression.h
      uses enumvalue EXPR_SIZEOF defined in expression.h
      uses function handle_sizeof(struct expression *) defined in smatch_math.c
      uses enumvalue EXPR_SELECT defined in expression.h
      uses enumvalue EXPR_CONDITIONAL defined in expression.h
      uses function handle_conditional_rl(struct expression *,int,int *) defined in smatch_math.c
      uses enumvalue EXPR_CALL defined in expression.h
      uses function handle_call_rl(struct expression *,int,int *) defined in smatch_math.c
      uses function handle_variable(struct expression *,int,int *) defined in smatch_math.c
      uses enumvalue RL_ABSOLUTE defined in smatch_math.c
      uses enumvalue RL_REAL_ABSOLUTE defined in smatch_math.c
      uses function alloc_whole_rl(struct symbol *) defined in smatch_extra.h
   function handle_variable(struct expression *,int,int *) in line 24
      protection public
      63 lines of code
      3 parameters
      22 conditional paths
      uses macro definition min defined in sm_select_assign.c
      uses function get_const_value(struct expression *,sval_t *) defined in smatch_math.c
      uses function alloc_rl(sval_t,sval_t) defined in smatch_extra.h
      uses variable custom_handle_variable defined in smatch_math.c
      uses function var_to_absolute_rl(struct expression *) defined in smatch_math.c
      uses enumvalue RL_EXACT defined in smatch_math.c
      uses macro definition NULL defined in sm_implied3.c
      uses enumvalue RL_HARD defined in smatch_math.c
      uses enumvalue RL_IMPLIED defined in smatch_math.c
      uses enumvalue RL_ABSOLUTE defined in smatch_math.c
      uses function get_extra_state(struct expression *) defined in smatch_extra.c
      uses variable smatch_state::data defined in smatch.h
      uses function get_local_rl(struct expression *,struct range_list **) defined in smatch.h
      uses function get_db_type_rl(struct expression *,struct range_list **) defined in smatch.h
      uses function estate_has_hard_max(struct smatch_state *) defined in smatch_estate.c
      uses function clone_rl(struct range_list *) defined in smatch_extra.h
      uses function estate_rl(struct smatch_state *) defined in smatch_estate.c
      uses enumvalue RL_REAL_ABSOLUTE defined in smatch_math.c
      uses function is_whole_rl(struct range_list *) defined in smatch_extra.h
      uses function get_real_absolute_state(struct expression *) defined in smatch_extra.h
      uses enumvalue RL_FUZZY defined in smatch_math.c
      uses function get_fuzzy_min_helper(struct expression *,sval_t *) defined in smatch_math.c
      uses function sval_type_min(struct symbol *) defined in smatch.h
      uses function get_type(struct expression *) defined in smatch.h
      uses function get_fuzzy_max_helper(struct expression *,sval_t *) defined in smatch_math.c
      uses function sval_cmp(sval_t,sval_t) defined in smatch.h
   function get_implied_value_internal(struct expression *,sval_t *,int *) in line 27
      protection public
      9 lines of code
      3 parameters
      2 conditional paths
      uses function _get_rl(struct expression *,int,int *) defined in smatch_math.c
      uses enumvalue RL_IMPLIED defined in smatch_math.c
      uses function rl_to_sval(struct range_list *,sval_t *) defined in smatch_extra.h
   function get_absolute_rl_internal(struct expression *,struct range_list **,int *) in line 28
      protection public
      7 lines of code
      3 parameters
      2 conditional paths
      uses function _get_rl(struct expression *,int,int *) defined in smatch_math.c
      uses enumvalue RL_ABSOLUTE defined in smatch_math.c
      uses function alloc_whole_rl(struct symbol *) defined in smatch_extra.h
      uses function get_type(struct expression *) defined in smatch.h
   function rl_zero(void) in line 33
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function alloc_rl(sval_t,sval_t) defined in smatch_extra.h
      uses variable zero defined in smatch_math.c
   function rl_one(void) in line 38
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function alloc_rl(sval_t,sval_t) defined in smatch_extra.h
      uses variable one defined in smatch_math.c
   function last_stmt_rl(struct statement *,int,int *) in line 52
      protection public
      10 lines of code
      3 parameters
      3 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses variable statement::stmts defined in parse.h
      uses variable statement::type defined in parse.h
      uses enumvalue STMT_EXPRESSION defined in parse.h
      uses function _get_rl(struct expression *,int,int *) defined in smatch_math.c
      uses variable statement::expression defined in parse.h
   function handle_expression_statement_rl(struct expression *,int,int *) in line 63
      protection public
      4 lines of code
      3 parameters
      1 conditional paths
      uses function last_stmt_rl(struct statement *,int,int *) defined in smatch_math.c
      uses function get_expression_statement(struct expression *) defined in smatch.h
   function handle_ampersand_rl(struct expression *,int,int *) in line 68
      protection public
      10 lines of code
      3 parameters
      3 conditional paths
      uses enumvalue RL_EXACT defined in smatch_math.c
      uses enumvalue RL_HARD defined in smatch_math.c
      uses macro definition NULL defined in sm_implied3.c
      uses function get_address_rl(struct expression *,struct range_list **) defined in smatch.h
      uses function alloc_rl(sval_t,sval_t) defined in smatch_extra.h
      uses variable valid_ptr_min_sval defined in smatch.h
      uses variable valid_ptr_max_sval defined in smatch.h
   function handle_negate_rl(struct expression *,int,int *) in line 79
      protection public
      16 lines of code
      3 parameters
      6 conditional paths
      uses function known_condition_true(struct expression *) defined in smatch_math.c
      uses variable expression::unop defined in expression.h
      uses function rl_zero(void) defined in smatch_math.c
      uses function known_condition_false(struct expression *) defined in smatch_math.c
      uses function rl_one(void) defined in smatch_math.c
      uses enumvalue RL_EXACT defined in smatch_math.c
      uses macro definition NULL defined in sm_implied3.c
      uses function implied_condition_true(struct expression *) defined in smatch_math.c
      uses function implied_condition_false(struct expression *) defined in smatch_math.c
      uses function alloc_rl(sval_t,sval_t) defined in smatch_extra.h
      uses variable zero defined in smatch_math.c
      uses variable one defined in smatch_math.c
   function handle_bitwise_negate(struct expression *,int,int *) in line 96
      protection public
      12 lines of code
      3 parameters
      2 conditional paths
      uses function _get_rl(struct expression *,int,int *) defined in smatch_math.c
      uses variable expression::unop defined in expression.h
      uses function rl_to_sval(struct range_list *,sval_t *) defined in smatch_extra.h
      uses macro definition NULL defined in sm_implied3.c
      uses function sval_preop(sval_t,int) defined in smatch.h
      uses function sval_cast(struct symbol *,sval_t) defined in smatch.h
      uses function get_type(struct expression *) defined in smatch.h
      uses function alloc_rl(sval_t,sval_t) defined in smatch_extra.h
   function handle_minus_preop(struct expression *,int,int *) in line 109
      protection public
      11 lines of code
      3 parameters
      2 conditional paths
      uses function _get_rl(struct expression *,int,int *) defined in smatch_math.c
      uses variable expression::unop defined in expression.h
      uses function rl_to_sval(struct range_list *,sval_t *) defined in smatch_extra.h
      uses macro definition NULL defined in sm_implied3.c
      uses function sval_preop(sval_t,int) defined in smatch.h
      uses function alloc_rl(sval_t,sval_t) defined in smatch_extra.h
   function handle_preop_rl(struct expression *,int,int *) in line 121
      protection public
      19 lines of code
      3 parameters
      7 conditional paths
      uses variable expression::op defined in expression.h
      uses function handle_ampersand_rl(struct expression *,int,int *) defined in smatch_math.c
      uses function handle_negate_rl(struct expression *,int,int *) defined in smatch_math.c
      uses function handle_bitwise_negate(struct expression *,int,int *) defined in smatch_math.c
      uses function handle_minus_preop(struct expression *,int,int *) defined in smatch_math.c
      uses function handle_variable(struct expression *,int,int *) defined in smatch_math.c
      uses function handle_expression_statement_rl(struct expression *,int,int *) defined in smatch_math.c
      uses macro definition NULL defined in sm_implied3.c
   function handle_divide_rl(struct expression *,int,int *) in line 141
      protection public
      22 lines of code
      3 parameters
      4 conditional paths
      uses function get_type(struct expression *) defined in smatch.h
      uses function _get_rl(struct expression *,int,int *) defined in smatch_math.c
      uses variable expression::left defined in expression.h
      uses function cast_rl(struct symbol *,struct range_list *) defined in smatch_extra.h
      uses variable expression::right defined in expression.h
      uses macro definition NULL defined in sm_implied3.c
      uses enumvalue RL_REAL_ABSOLUTE defined in smatch_math.c
      uses function is_whole_rl(struct range_list *) defined in smatch_extra.h
      uses function rl_binop(struct range_list *,int,struct range_list *) defined in smatch_extra.h
   function handle_subtract_rl(struct expression *,int,int *) in line 164
      protection public
      63 lines of code
      3 parameters
      15 conditional paths
      uses macro definition min defined in sm_select_assign.c
      uses function get_type(struct expression *) defined in smatch.h
      uses function get_comparison(struct expression *,struct expression *) defined in smatch.h
      uses variable expression::left defined in expression.h
      uses variable expression::right defined in expression.h
      uses function _get_rl(struct expression *,int,int *) defined in smatch_math.c
      uses function cast_rl(struct symbol *,struct range_list *) defined in smatch_extra.h
      uses enumvalue RL_EXACT defined in smatch_math.c
      uses enumvalue RL_HARD defined in smatch_math.c
      uses enumvalue RL_FUZZY defined in smatch_math.c
      uses macro definition NULL defined in sm_implied3.c
      uses function alloc_whole_rl(struct symbol *) defined in smatch_extra.h
      uses function sval_is_negative(sval_t) defined in smatch.h
      uses function rl_min(struct range_list *) defined in smatch_extra.h
      uses function rl_max(struct range_list *) defined in smatch_extra.h
      uses enumvalue SPECIAL_UNSIGNED_GT defined in token.h
      uses function sval_type_val(struct symbol *,long long) defined in smatch.h
      uses enumvalue SPECIAL_GTE defined in token.h
      uses enumvalue SPECIAL_UNSIGNED_GTE defined in token.h
      uses function sval_binop_overflows(sval_t,int,sval_t) defined in smatch.h
      uses function sval_type_min(struct symbol *) defined in smatch.h
      uses function sval_binop(sval_t,int,sval_t) defined in smatch.h
      uses function sval_cmp(sval_t,sval_t) defined in smatch.h
      uses function sval_is_max(sval_t) defined in smatch.h
      uses function sval_is_min(sval_t) defined in smatch.h
      uses function alloc_rl(sval_t,sval_t) defined in smatch_extra.h
   function handle_mod_rl(struct expression *,int,int *) in line 228
      protection public
      26 lines of code
      3 parameters
      6 conditional paths
      uses enumvalue RL_EXACT defined in smatch_math.c
      uses function get_value(struct expression *,sval_t *) defined in smatch_math.c
      uses variable expression::right defined in expression.h
      uses macro definition NULL defined in sm_implied3.c
      uses variable expression::left defined in expression.h
      uses function sval_binop(sval_t,int,sval_t) defined in smatch.h
      uses function alloc_rl(sval_t,sval_t) defined in smatch_extra.h
      uses function get_implied_value_internal(struct expression *,sval_t *,int *) defined in smatch_math.c
      uses function sval_cast(struct symbol *,sval_t) defined in smatch.h
      uses function get_type(struct expression *) defined in smatch.h
      uses variable sval_t::value defined in smatch.h
      uses function _get_rl(struct expression *,int,int *) defined in smatch_math.c
      uses function rl_max(struct range_list *) defined in smatch_extra.h
      uses variable sval_t::uvalue defined in smatch.h
      uses variable zero defined in smatch_math.c
   function sval_lowest_set_bit(sval_t) in line 255
      protection public
      14 lines of code
      1 parameters
      4 conditional paths
      uses variable sval_t::uvalue defined in smatch.h
   function handle_bitwise_AND(struct expression *,int,int *) in line 270
      protection public
      62 lines of code
      3 parameters
      11 conditional paths
      uses enumvalue RL_IMPLIED defined in smatch_math.c
      uses enumvalue RL_ABSOLUTE defined in smatch_math.c
      uses enumvalue RL_REAL_ABSOLUTE defined in smatch_math.c
      uses macro definition NULL defined in sm_implied3.c
      uses function get_type(struct expression *) defined in smatch.h
      uses function get_implied_value_internal(struct expression *,sval_t *,int *) defined in smatch_math.c
      uses variable expression::left defined in expression.h
      uses macro definition min defined in sm_select_assign.c
      uses function sval_lowest_set_bit(sval_t) defined in smatch_math.c
      uses function alloc_rl(sval_t,sval_t) defined in smatch_extra.h
      uses function cast_rl(struct symbol *,struct range_list *) defined in smatch_extra.h
      uses function add_range(struct range_list **,sval_t,sval_t) defined in smatch_extra.h
      uses function sval_type_val(struct symbol *,long long) defined in smatch.h
      uses function _get_rl(struct expression *,int,int *) defined in smatch_math.c
      uses function rl_max(struct range_list *) defined in smatch_extra.h
      uses enumvalue RL_HARD defined in smatch_math.c
      uses function alloc_whole_rl(struct symbol *) defined in smatch_extra.h
      uses variable expression::right defined in expression.h
      uses function sval_binop(sval_t,int,sval_t) defined in smatch.h
      uses variable sval_t::value defined in smatch.h
      uses function sval_cmp(sval_t,sval_t) defined in smatch.h
      uses function remove_range(struct range_list *,sval_t,sval_t) defined in smatch_extra.h
      uses function rl_intersection(struct range_list *,struct range_list *) defined in smatch_extra.h
   function use_rl_binop(struct expression *,int,int *) in line 333
      protection public
      19 lines of code
      3 parameters
      3 conditional paths
      uses enumvalue RL_IMPLIED defined in smatch_math.c
      uses enumvalue RL_ABSOLUTE defined in smatch_math.c
      uses enumvalue RL_REAL_ABSOLUTE defined in smatch_math.c
      uses macro definition NULL defined in sm_implied3.c
      uses function get_type(struct expression *) defined in smatch.h
      uses function get_absolute_rl_internal(struct expression *,struct range_list **,int *) defined in smatch_math.c
      uses variable expression::left defined in expression.h
      uses variable expression::right defined in expression.h
      uses function cast_rl(struct symbol *,struct range_list *) defined in smatch_extra.h
      uses function rl_binop(struct range_list *,int,struct range_list *) defined in smatch_extra.h
      uses variable expression::op defined in expression.h
   function handle_right_shift(struct expression *,int,int *) in line 353
      protection public
      32 lines of code
      3 parameters
      6 conditional paths
      uses macro definition min defined in sm_select_assign.c
      uses enumvalue RL_EXACT defined in smatch_math.c
      uses enumvalue RL_HARD defined in smatch_math.c
      uses macro definition NULL defined in sm_implied3.c
      uses function _get_rl(struct expression *,int,int *) defined in smatch_math.c
      uses variable expression::left defined in expression.h
      uses function rl_max(struct range_list *) defined in smatch_extra.h
      uses function rl_min(struct range_list *) defined in smatch_extra.h
      uses enumvalue RL_FUZZY defined in smatch_math.c
      uses function sval_type_max(struct symbol *) defined in smatch.h
      uses function get_type(struct expression *) defined in smatch.h
      uses function sval_type_val(struct symbol *,long long) defined in smatch.h
      uses function get_implied_value_internal(struct expression *,sval_t *,int *) defined in smatch_math.c
      uses variable expression::right defined in expression.h
      uses function sval_binop(sval_t,int,sval_t) defined in smatch.h
      uses enumvalue SPECIAL_RIGHTSHIFT defined in token.h
      uses function sval_is_negative(sval_t) defined in smatch.h
      uses variable sval_t::type defined in smatch.h
      uses function alloc_rl(sval_t,sval_t) defined in smatch_extra.h
   function handle_left_shift(struct expression *,int,int *) in line 386
      protection public
      35 lines of code
      3 parameters
      7 conditional paths
      uses macro definition min defined in sm_select_assign.c
      uses enumvalue RL_EXACT defined in smatch_math.c
      uses enumvalue RL_HARD defined in smatch_math.c
      uses macro definition NULL defined in sm_implied3.c
      uses function get_implied_value_internal(struct expression *,sval_t *,int *) defined in smatch_math.c
      uses variable expression::right defined in expression.h
      uses function _get_rl(struct expression *,int,int *) defined in smatch_math.c
      uses variable expression::left defined in expression.h
      uses function rl_max(struct range_list *) defined in smatch_extra.h
      uses function rl_min(struct range_list *) defined in smatch_extra.h
      uses enumvalue RL_FUZZY defined in smatch_math.c
      uses function sval_type_max(struct symbol *) defined in smatch.h
      uses function get_type(struct expression *) defined in smatch.h
      uses function sval_type_val(struct symbol *,long long) defined in smatch.h
      uses function sval_binop(sval_t,int,sval_t) defined in smatch.h
      uses enumvalue SPECIAL_LEFTSHIFT defined in token.h
      uses function alloc_rl(sval_t,sval_t) defined in smatch_extra.h
      uses function rl_union(struct range_list *,struct range_list *) defined in smatch_extra.h
      uses function rl_zero(void) defined in smatch_math.c
   function handle_known_binop(struct expression *) in line 422
      protection public
      11 lines of code
      1 parameters
      3 conditional paths
      uses function get_value(struct expression *,sval_t *) defined in smatch_math.c
      uses variable expression::left defined in expression.h
      uses macro definition NULL defined in sm_implied3.c
      uses variable expression::right defined in expression.h
      uses function sval_binop(sval_t,int,sval_t) defined in smatch.h
      uses variable expression::op defined in expression.h
      uses function alloc_rl(sval_t,sval_t) defined in smatch_extra.h
   function has_actual_ranges(struct range_list *) in line 434
      protection public
      10 lines of code
      1 parameters
      2 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses function sval_cmp(sval_t,sval_t) defined in smatch.h
      uses variable data_range::min defined in smatch.h
      uses variable data_range::max defined in smatch.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function handle_implied_binop(struct range_list *,int,struct range_list *) in line 445
      protection public
      30 lines of code
      3 parameters
      6 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses function has_actual_ranges(struct range_list *) defined in smatch_math.c
      uses function ptr_list_size(struct ptr_list *) defined in ptrlist.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses function op(void) defined in loop2.c
      uses variable data_range::min defined in smatch.h
      uses variable sval_t::value defined in smatch.h
      uses function sval_binop(sval_t,int,sval_t) defined in smatch.h
      uses function add_range(struct range_list **,sval_t,sval_t) defined in smatch_extra.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function handle_binop_rl(struct expression *,int,int *) in line 476
      protection public
      61 lines of code
      3 parameters
      17 conditional paths
      uses macro definition min defined in sm_select_assign.c
      uses function handle_known_binop(struct expression *) defined in smatch_math.c
      uses enumvalue RL_EXACT defined in smatch_math.c
      uses macro definition NULL defined in sm_implied3.c
      uses function get_extra_state(struct expression *) defined in smatch_extra.c
      uses function is_whole_rl(struct range_list *) defined in smatch_extra.h
      uses function estate_rl(struct smatch_state *) defined in smatch_estate.c
      uses function clone_rl(struct range_list *) defined in smatch_extra.h
      uses function get_type(struct expression *) defined in smatch.h
      uses function _get_rl(struct expression *,int,int *) defined in smatch_math.c
      uses variable expression::left defined in expression.h
      uses function cast_rl(struct symbol *,struct range_list *) defined in smatch_extra.h
      uses variable expression::right defined in expression.h
      uses function handle_implied_binop(struct range_list *,int,struct range_list *) defined in smatch_math.c
      uses variable expression::op defined in expression.h
      uses function handle_mod_rl(struct expression *,int,int *) defined in smatch_math.c
      uses function handle_bitwise_AND(struct expression *,int,int *) defined in smatch_math.c
      uses function use_rl_binop(struct expression *,int,int *) defined in smatch_math.c
      uses enumvalue SPECIAL_RIGHTSHIFT defined in token.h
      uses function handle_right_shift(struct expression *,int,int *) defined in smatch_math.c
      uses enumvalue SPECIAL_LEFTSHIFT defined in token.h
      uses function handle_left_shift(struct expression *,int,int *) defined in smatch_math.c
      uses function handle_subtract_rl(struct expression *,int,int *) defined in smatch_math.c
      uses function handle_divide_rl(struct expression *,int,int *) defined in smatch_math.c
      uses function sval_binop_overflows(sval_t,int,sval_t) defined in smatch.h
      uses function rl_min(struct range_list *) defined in smatch_extra.h
      uses function rl_max(struct range_list *) defined in smatch_extra.h
      uses function sval_binop(sval_t,int,sval_t) defined in smatch.h
      uses function alloc_rl(sval_t,sval_t) defined in smatch_extra.h
   function do_comparison(struct expression *) in line 538
      protection public
      28 lines of code
      1 parameters
      4 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses function get_type(struct expression *) defined in smatch.h
      uses function get_absolute_rl(struct expression *,struct range_list **) defined in smatch_math.c
      uses variable expression::left defined in expression.h
      uses variable expression::right defined in expression.h
      uses function cast_rl(struct symbol *,struct range_list *) defined in smatch_extra.h
      uses function possibly_true_rl(struct range_list *,int,struct range_list *) defined in smatch_extra.h
      uses variable expression::op defined in expression.h
      uses function possibly_false_rl(struct range_list *,int,struct range_list *) defined in smatch_extra.h
      uses function free_rl(struct range_list **) defined in smatch_extra.h
   function handle_comparison_rl(struct expression *,int,int *) in line 567
      protection public
      28 lines of code
      3 parameters
      6 conditional paths
      uses function get_value(struct expression *,sval_t *) defined in smatch_math.c
      uses variable expression::left defined in expression.h
      uses variable expression::right defined in expression.h
      uses variable data_range::min defined in smatch.h
      uses variable data_range::max defined in smatch.h
      uses function true_comparison_range(struct data_range *,int,struct data_range *) defined in smatch_extra.h
      uses variable expression::op defined in expression.h
      uses function rl_one(void) defined in smatch_math.c
      uses function rl_zero(void) defined in smatch_math.c
      uses enumvalue RL_EXACT defined in smatch_math.c
      uses macro definition NULL defined in sm_implied3.c
      uses function do_comparison(struct expression *) defined in smatch_math.c
      uses function alloc_rl(sval_t,sval_t) defined in smatch_extra.h
      uses variable zero defined in smatch_math.c
      uses variable one defined in smatch_math.c
   function handle_logical_rl(struct expression *,int,int *) in line 596
      protection public
      43 lines of code
      3 parameters
      14 conditional paths
      uses enumvalue RL_EXACT defined in smatch_math.c
      uses function get_value(struct expression *,sval_t *) defined in smatch_math.c
      uses variable expression::left defined in expression.h
      uses variable expression::right defined in expression.h
      uses function get_implied_value_internal(struct expression *,sval_t *,int *) defined in smatch_math.c
      uses variable expression::op defined in expression.h
      uses enumvalue SPECIAL_LOGICAL_OR defined in token.h
      uses variable sval_t::value defined in smatch.h
      uses function rl_one(void) defined in smatch_math.c
      uses function rl_zero(void) defined in smatch_math.c
      uses enumvalue SPECIAL_LOGICAL_AND defined in token.h
      uses macro definition NULL defined in sm_implied3.c
      uses function alloc_rl(sval_t,sval_t) defined in smatch_extra.h
      uses variable zero defined in smatch_math.c
      uses variable one defined in smatch_math.c
   function handle_conditional_rl(struct expression *,int,int *) in line 640
      protection public
      44 lines of code
      3 parameters
      8 conditional paths
      uses variable final_pass defined in smatch.h
      uses function known_condition_true(struct expression *) defined in smatch_math.c
      uses variable expression::conditional defined in expression.h
      uses function _get_rl(struct expression *,int,int *) defined in smatch_math.c
      uses variable expression::cond_true defined in expression.h
      uses function known_condition_false(struct expression *) defined in smatch_math.c
      uses variable expression::cond_false defined in expression.h
      uses enumvalue RL_EXACT defined in smatch_math.c
      uses macro definition NULL defined in sm_implied3.c
      uses function implied_condition_true(struct expression *) defined in smatch_math.c
      uses function implied_condition_false(struct expression *) defined in smatch_math.c
      uses function low_on_memory(void) defined in smatch_slist.c
      uses function get_type(struct expression *) defined in smatch.h
      uses function __push_fake_cur_stree(void) defined in smatch.h
      uses function __split_whole_condition(struct expression *) defined in smatch.h
      uses function __push_true_states(void) defined in smatch.h
      uses function __use_false_states(void) defined in smatch.h
      uses function __merge_true_states(void) defined in smatch.h
      uses function __free_fake_cur_stree(void) defined in smatch.h
      uses function cast_rl(struct symbol *,struct range_list *) defined in smatch_extra.h
      uses function rl_union(struct range_list *,struct range_list *) defined in smatch_extra.h
   function get_fuzzy_max_helper(struct expression *,sval_t *) in line 685
      protection public
      16 lines of code
      2 parameters
      3 conditional paths
      uses function get_hard_max(struct expression *,sval_t *) defined in smatch_math.c
      uses function get_extra_state(struct expression *) defined in smatch_extra.c
      uses function estate_has_fuzzy_max(struct smatch_state *) defined in smatch_estate.c
      uses function sval_cast(struct symbol *,sval_t) defined in smatch.h
      uses function get_type(struct expression *) defined in smatch.h
      uses function estate_get_fuzzy_max(struct smatch_state *) defined in smatch_estate.c
   function get_fuzzy_min_helper(struct expression *,sval_t *) in line 702
      protection public
      19 lines of code
      2 parameters
      4 conditional paths
      uses function get_extra_state(struct expression *) defined in smatch_extra.c
      uses function estate_rl(struct smatch_state *) defined in smatch_estate.c
      uses function estate_min(struct smatch_state *) defined in smatch_estate.c
      uses function sval_is_negative(sval_t) defined in smatch.h
      uses function sval_is_min(sval_t) defined in smatch.h
      uses function sval_is_max(sval_t) defined in smatch.h
      uses macro definition min defined in sm_select_assign.c
      uses function sval_cast(struct symbol *,sval_t) defined in smatch.h
      uses function get_type(struct expression *) defined in smatch.h
   function get_const_value(struct expression *,sval_t *) in line 722
      protection public
      16 lines of code
      2 parameters
      4 conditional paths
      uses variable sym defined in smatch_type.c
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_SYMBOL defined in expression.h
      uses variable expression::symbol defined in expression.h
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::modifiers defined in struct.c
      uses macro definition MOD_CONST defined in symbol.h
      uses function get_value(struct expression *,sval_t *) defined in smatch_math.c
      uses variable symbol::initializer defined in struct.c
      uses function sval_cast(struct symbol *,sval_t) defined in smatch.h
      uses function get_type(struct expression *) defined in smatch.h
   function var_to_absolute_rl(struct expression *) in line 739
      protection public
      21 lines of code
      1 parameters
      6 conditional paths
      uses function get_extra_state(struct expression *) defined in smatch_extra.c
      uses function is_whole_rl(struct range_list *) defined in smatch_extra.h
      uses function estate_rl(struct smatch_state *) defined in smatch_estate.c
      uses function get_real_absolute_state(struct expression *) defined in smatch_extra.h
      uses variable smatch_state::data defined in smatch.h
      uses function estate_is_whole(struct smatch_state *) defined in smatch_estate.c
      uses function clone_rl(struct range_list *) defined in smatch_extra.h
      uses function get_local_rl(struct expression *,struct range_list **) defined in smatch.h
      uses function get_db_type_rl(struct expression *,struct range_list **) defined in smatch.h
      uses function alloc_whole_rl(struct symbol *) defined in smatch_extra.h
      uses function get_type(struct expression *) defined in smatch.h
   function handle_sizeof(struct expression *) in line 825
      protection public
      33 lines of code
      1 parameters
      7 conditional paths
      uses variable sym defined in smatch_type.c
      uses function sval_blank(struct expression *) defined in smatch.h
      uses variable expression::cast_type defined in expression.h
      uses function evaluate_expression(struct expression *) defined in evaluate.c
      uses variable expression::cast_expression defined in expression.h
      uses macro definition is_restricted_type defined in symbol.h
      uses function type_bits(struct symbol *) defined in smatch.h
      uses variable bits_in_int defined in target.c
      uses macro definition is_fouled_type defined in symbol.h
      uses function examine_symbol_type(struct symbol *) defined in symbol.c
      uses variable sval_t::type defined in smatch.h
      uses variable size_t_ctype defined in target.c
      uses function get_real_base_type(struct symbol *) defined in smatch.h
      uses variable sval_t::value defined in smatch.h
      uses function type_bytes(struct symbol *) defined in smatch.h
   function handle_strlen(struct expression *,int,int *) in line 859
      protection public
      25 lines of code
      3 parameters
      6 conditional paths
      uses variable sval_t::type defined in smatch.h
      uses enumvalue RL_EXACT defined in smatch_math.c
      uses macro definition NULL defined in sm_implied3.c
      uses function get_argument_from_call_expr(struct expression_list *,int) defined in smatch.h
      uses variable expression::args defined in expression.h
      uses enumvalue EXPR_STRING defined in expression.h
      uses variable sval_t::value defined in smatch.h
      uses function alloc_rl(sval_t,sval_t) defined in smatch_extra.h
      uses enumvalue RL_HARD defined in smatch_math.c
      uses enumvalue RL_FUZZY defined in smatch_math.c
      uses function get_implied_return(struct expression *,struct range_list **) defined in smatch.h
   function handle_call_rl(struct expression *,int,int *) in line 885
      protection public
      21 lines of code
      3 parameters
      5 conditional paths
      uses function sym_name_is(const char *,struct expression *) defined in smatch.h
      uses variable expression::fn defined in expression.h
      uses function get_argument_from_call_expr(struct expression_list *,int) defined in smatch.h
      uses variable expression::args defined in expression.h
      uses function _get_rl(struct expression *,int,int *) defined in smatch_math.c
      uses function handle_strlen(struct expression *,int,int *) defined in smatch_math.c
      uses enumvalue RL_EXACT defined in smatch_math.c
      uses enumvalue RL_HARD defined in smatch_math.c
      uses enumvalue RL_FUZZY defined in smatch_math.c
      uses macro definition NULL defined in sm_implied3.c
      uses function get_implied_return(struct expression *,struct range_list **) defined in smatch.h
      uses function db_return_vals(struct expression *) defined in smatch.h
   function handle_cast(struct expression *,int,int *) in line 907
      protection public
      16 lines of code
      3 parameters
      4 conditional paths
      uses function get_type(struct expression *) defined in smatch.h
      uses function _get_rl(struct expression *,int,int *) defined in smatch_math.c
      uses variable expression::cast_expression defined in expression.h
      uses function cast_rl(struct symbol *,struct range_list *) defined in smatch_extra.h
      uses enumvalue RL_ABSOLUTE defined in smatch_math.c
      uses enumvalue RL_REAL_ABSOLUTE defined in smatch_math.c
      uses function alloc_whole_rl(struct symbol *) defined in smatch_extra.h
      uses enumvalue RL_IMPLIED defined in smatch_math.c
      uses function type_bits(struct symbol *) defined in smatch.h
      uses macro definition NULL defined in sm_implied3.c
   function get_value(struct expression *,sval_t *) in line 995
      protection public
      10 lines of code
      2 parameters
      2 conditional paths
      uses function _get_rl(struct expression *,int,int *) defined in smatch_math.c
      uses enumvalue RL_EXACT defined in smatch_math.c
      uses function rl_to_sval(struct range_list *,sval_t *) defined in smatch_extra.h
   function get_implied_value(struct expression *,sval_t *) in line 1016
      protection public
      10 lines of code
      2 parameters
      2 conditional paths
      uses function _get_rl(struct expression *,int,int *) defined in smatch_math.c
      uses enumvalue RL_IMPLIED defined in smatch_math.c
      uses function rl_to_sval(struct range_list *,sval_t *) defined in smatch_extra.h
   function get_implied_min(struct expression *,sval_t *) in line 1027
      protection public
      11 lines of code
      2 parameters
      2 conditional paths
      uses function _get_rl(struct expression *,int,int *) defined in smatch_math.c
      uses enumvalue RL_IMPLIED defined in smatch_math.c
      uses function rl_min(struct range_list *) defined in smatch_extra.h
   function get_implied_max(struct expression *,sval_t *) in line 1039
      protection public
      11 lines of code
      2 parameters
      2 conditional paths
      uses function _get_rl(struct expression *,int,int *) defined in smatch_math.c
      uses enumvalue RL_IMPLIED defined in smatch_math.c
      uses function rl_max(struct range_list *) defined in smatch_extra.h
   function get_implied_rl(struct expression *,struct range_list **) in line 1051
      protection public
      9 lines of code
      2 parameters
      2 conditional paths
      uses function _get_rl(struct expression *,int,int *) defined in smatch_math.c
      uses enumvalue RL_IMPLIED defined in smatch_math.c
   function get_absolute_rl(struct expression *,struct range_list **) in line 1069
      protection public
      9 lines of code
      2 parameters
      2 conditional paths
      uses function _get_rl(struct expression *,int,int *) defined in smatch_math.c
      uses enumvalue RL_ABSOLUTE defined in smatch_math.c
      uses function alloc_whole_rl(struct symbol *) defined in smatch_extra.h
      uses function get_type(struct expression *) defined in smatch.h
   function get_real_absolute_rl(struct expression *,struct range_list **) in line 1079
      protection public
      9 lines of code
      2 parameters
      2 conditional paths
      uses function _get_rl(struct expression *,int,int *) defined in smatch_math.c
      uses enumvalue RL_REAL_ABSOLUTE defined in smatch_math.c
      uses function alloc_whole_rl(struct symbol *) defined in smatch_extra.h
      uses function get_type(struct expression *) defined in smatch.h
   function custom_get_absolute_rl(struct expression *,struct range_list *(*)(struct expression *expr),struct range_list **) in line 1089
      protection public
      12 lines of code
      3 parameters
      1 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses variable custom_handle_variable defined in smatch_math.c
      uses function _get_rl(struct expression *,int,int *) defined in smatch_math.c
      uses enumvalue RL_REAL_ABSOLUTE defined in smatch_math.c
   function get_implied_rl_var_sym(const char *,struct symbol *,struct range_list **) in line 1102
      protection public
      10 lines of code
      3 parameters
      2 conditional paths
      uses function get_state(int,const char *,struct symbol *) defined in smatch.h
      uses macro definition SMATCH_EXTRA defined in smatch.h
      uses variable sym defined in smatch_type.c
      uses function estate_rl(struct smatch_state *) defined in smatch_estate.c
   function get_hard_max(struct expression *,sval_t *) in line 1113
      protection public
      11 lines of code
      2 parameters
      2 conditional paths
      uses function _get_rl(struct expression *,int,int *) defined in smatch_math.c
      uses enumvalue RL_HARD defined in smatch_math.c
      uses function rl_max(struct range_list *) defined in smatch_extra.h
   function get_fuzzy_min(struct expression *,sval_t *) in line 1125
      protection public
      15 lines of code
      2 parameters
      3 conditional paths
      uses function _get_rl(struct expression *,int,int *) defined in smatch_math.c
      uses enumvalue RL_FUZZY defined in smatch_math.c
      uses function rl_min(struct range_list *) defined in smatch_extra.h
      uses function sval_is_negative(sval_t) defined in smatch.h
      uses function sval_is_min(sval_t) defined in smatch.h
   function get_fuzzy_max(struct expression *,sval_t *) in line 1141
      protection public
      15 lines of code
      2 parameters
      3 conditional paths
      uses function _get_rl(struct expression *,int,int *) defined in smatch_math.c
      uses enumvalue RL_FUZZY defined in smatch_math.c
      uses function rl_max(struct range_list *) defined in smatch_extra.h
      uses variable sval_t::uvalue defined in smatch.h
   function get_absolute_min(struct expression *,sval_t *) in line 1157
      protection public
      19 lines of code
      2 parameters
      4 conditional paths
      uses function get_type(struct expression *) defined in smatch.h
      uses function _get_rl(struct expression *,int,int *) defined in smatch_math.c
      uses enumvalue RL_ABSOLUTE defined in smatch_math.c
      uses function rl_min(struct range_list *) defined in smatch_extra.h
      uses function sval_type_min(struct symbol *) defined in smatch.h
      uses function sval_cmp(sval_t,sval_t) defined in smatch.h
   function get_absolute_max(struct expression *,sval_t *) in line 1177
      protection public
      19 lines of code
      2 parameters
      4 conditional paths
      uses function get_type(struct expression *) defined in smatch.h
      uses function _get_rl(struct expression *,int,int *) defined in smatch_math.c
      uses enumvalue RL_ABSOLUTE defined in smatch_math.c
      uses function rl_max(struct range_list *) defined in smatch_extra.h
      uses function sval_type_max(struct symbol *) defined in smatch.h
      uses function sval_cmp(sval_t,sval_t) defined in smatch.h
   function known_condition_true(struct expression *) in line 1197
      protection public
      12 lines of code
      1 parameters
      3 conditional paths
      uses function get_value(struct expression *,sval_t *) defined in smatch_math.c
      uses variable sval_t::value defined in smatch.h
   function known_condition_false(struct expression *) in line 1210
      protection public
      14 lines of code
      1 parameters
      5 conditional paths
      uses function is_zero(struct expression *) defined in smatch.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_CALL defined in expression.h
      uses function sym_name_is(const char *,struct expression *) defined in smatch.h
      uses variable expression::fn defined in expression.h
   function implied_condition_true(struct expression *) in line 1225
      protection public
      40 lines of code
      1 parameters
      13 conditional paths
      uses function known_condition_true(struct expression *) defined in smatch_math.c
      uses function get_implied_value(struct expression *,sval_t *) defined in smatch_math.c
      uses variable sval_t::value defined in smatch.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_POSTOP defined in expression.h
      uses variable expression::unop defined in expression.h
      uses enumvalue EXPR_PREOP defined in expression.h
      uses variable expression::op defined in expression.h
      uses enumvalue SPECIAL_DECREMENT defined in token.h
      uses function implied_not_equal(struct expression *,long long) defined in smatch_extra.c
      uses enumvalue SPECIAL_INCREMENT defined in token.h
      uses function strip_expr(struct expression *) defined in smatch.h
      uses enumvalue EXPR_COMPARE defined in expression.h
      uses function do_comparison(struct expression *) defined in smatch_math.c
      uses function implied_condition_false(struct expression *) defined in smatch_math.c
   function implied_condition_false(struct expression *) in line 1266
      protection public
      32 lines of code
      1 parameters
      10 conditional paths
      uses function known_condition_false(struct expression *) defined in smatch_math.c
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_COMPARE defined in expression.h
      uses function do_comparison(struct expression *) defined in smatch_math.c
      uses enumvalue EXPR_PREOP defined in expression.h
      uses variable expression::op defined in expression.h
      uses function implied_condition_true(struct expression *) defined in smatch_math.c
      uses variable expression::unop defined in expression.h
      uses function strip_expr(struct expression *) defined in smatch.h
      uses function get_implied_value(struct expression *,sval_t *) defined in smatch_math.c
      uses variable sval_t::value defined in smatch.h
   function can_integer_overflow(struct symbol *,struct expression *) in line 1299
      protection public
      43 lines of code
      2 parameters
      10 conditional paths
      uses function op(void) defined in loop2.c
      uses function strip_expr(struct expression *) defined in smatch.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_ASSIGNMENT defined in expression.h
      uses variable expression::op defined in expression.h
      uses enumvalue SPECIAL_MUL_ASSIGN defined in token.h
      uses enumvalue SPECIAL_ADD_ASSIGN defined in token.h
      uses enumvalue SPECIAL_SHL_ASSIGN defined in token.h
      uses enumvalue SPECIAL_LEFTSHIFT defined in token.h
      uses enumvalue EXPR_BINOP defined in expression.h
      uses function get_absolute_max(struct expression *,sval_t *) defined in smatch_math.c
      uses variable expression::left defined in expression.h
      uses variable expression::right defined in expression.h
      uses function sval_binop_overflows(sval_t,int,sval_t) defined in smatch.h
      uses function sval_binop(sval_t,int,sval_t) defined in smatch.h
      uses function sval_cmp(sval_t,sval_t) defined in smatch.h
      uses function sval_type_max(struct symbol *) defined in smatch.h
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/smatch_modification_hooks.c
module smatch_modification_hooks.c
   enumeration @139 in line 37
      protection public
   variable hooks in line 43
      protection public
   variable indirect_hooks in line 44
      protection public
   variable my_id in line 48
      protection public
   enumvalue match_none in line 38
      protection public
   enumvalue match_exact in line 39
      protection public
   enumvalue match_indirect in line 41
      protection public
   function ALLOCATOR(modification_data,"modification data") in line 46
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function alloc_my_state(struct expression *,struct smatch_state *) in line 49
      protection public
      19 lines of code
      2 parameters
      1 conditional paths
      uses variable name defined in smatch_type.c
      uses function strip_expr(struct expression *) defined in smatch.h
      uses function expr_to_str(struct expression *) defined in smatch.h
      uses variable smatch_state::name defined in smatch.h
      uses function alloc_sname(const char *) defined in smatch_slist.c
      uses function free_string(char *) defined in smatch.h
      uses variable modification_data::prev defined in smatch.h
      uses variable modification_data::cur defined in smatch.h
      uses variable smatch_state::data defined in smatch.h
   function add_modification_hook(int,modification_hook *) in line 69
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses variable hooks defined in smatch_modification_hooks.c
   function add_indirect_modification_hook(int,modification_hook *) in line 74
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses variable indirect_hooks defined in smatch_modification_hooks.c
   function matches(char *,struct symbol *,struct sm_state *) in line 79
      protection public
      24 lines of code
      3 parameters
      9 conditional paths
      uses variable sym defined in smatch_type.c
      uses variable sm_state::sym defined in smatch.h
      uses enumvalue match_none defined in smatch_modification_hooks.c
      uses function strlen(char *) defined in sm_overflow6.c
      uses variable name defined in smatch_type.c
      uses variable sm_state::name defined in smatch.h
      uses enumvalue match_exact defined in smatch_modification_hooks.c
      uses enumvalue match_indirect defined in smatch_modification_hooks.c
   function call_modification_hooks_name_sym(char *,struct symbol *,struct expression *) in line 104
      protection public
      24 lines of code
      3 parameters
      4 conditional paths
      uses function get_state(int,const char *,struct symbol *) defined in smatch.h
      uses variable my_id defined in smatch_modification_hooks.c
      uses variable name defined in smatch_type.c
      uses variable sym defined in smatch_type.c
      uses function set_state(int,const char *,struct symbol *,struct smatch_state *) defined in smatch.h
      uses function alloc_my_state(struct expression *,struct smatch_state *) defined in smatch_modification_hooks.c
      uses function __get_cur_stree(void) defined in smatch.h
      uses macro definition FOR_EACH_SM defined in avl.h
      uses variable sm_state::owner defined in smatch.h
      uses variable num_checks defined in smatch.c
      uses function matches(char *,struct symbol *,struct sm_state *) defined in smatch_modification_hooks.c
      uses variable hooks defined in smatch_modification_hooks.c
      uses enumvalue match_indirect defined in smatch_modification_hooks.c
      uses variable indirect_hooks defined in smatch_modification_hooks.c
      uses macro definition END_FOR_EACH_SM defined in avl.h
   function call_modification_hooks(struct expression *,struct expression *) in line 129
      protection public
      12 lines of code
      2 parameters
      3 conditional paths
      uses variable name defined in smatch_type.c
      uses variable sym defined in smatch_type.c
      uses function expr_to_known_chunk_sym(struct expression *,struct symbol **) defined in smatch.h
      uses function call_modification_hooks_name_sym(char *,struct symbol *,struct expression *) defined in smatch_modification_hooks.c
      uses function free_string(char *) defined in smatch.h
   function db_param_add(struct expression *,int,char *,char *) in line 142
      protection public
      23 lines of code
      4 parameters
      6 conditional paths
      uses variable name defined in smatch_type.c
      uses variable sym defined in smatch_type.c
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_ASSIGNMENT defined in expression.h
      uses function strip_expr(struct expression *) defined in smatch.h
      uses variable expression::right defined in expression.h
      uses enumvalue EXPR_CALL defined in expression.h
      uses function get_argument_from_call_expr(struct expression_list *,int) defined in smatch.h
      uses variable expression::args defined in expression.h
      uses variable param defined in smatch_parse_call_math.c
      uses function get_variable_from_key(struct expression *,char *,struct symbol **) defined in smatch.h
      uses function call_modification_hooks_name_sym(char *,struct symbol *,struct expression *) defined in smatch_modification_hooks.c
      uses function free_string(char *) defined in smatch.h
   function match_assign(struct expression *) in line 166
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function call_modification_hooks(struct expression *,struct expression *) defined in smatch_modification_hooks.c
      uses variable expression::left defined in expression.h
   function unop_expr(struct expression *) in line 171
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses variable expression::op defined in expression.h
      uses enumvalue SPECIAL_DECREMENT defined in token.h
      uses enumvalue SPECIAL_INCREMENT defined in token.h
      uses function call_modification_hooks(struct expression *,struct expression *) defined in smatch_modification_hooks.c
      uses variable expression::unop defined in expression.h
   function match_call(struct expression *) in line 179
      protection public
      12 lines of code
      1 parameters
      3 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable expression::args defined in expression.h
      uses function strip_expr(struct expression *) defined in smatch.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_PREOP defined in expression.h
      uses variable expression::op defined in expression.h
      uses function call_modification_hooks(struct expression *,struct expression *) defined in smatch_modification_hooks.c
      uses variable expression::unop defined in expression.h
      uses variable option_no_db defined in smatch.c
      uses function deref_expression(struct expression *) defined in smatch_expressions.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function asm_expr(struct statement *) in line 192
      protection public
      18 lines of code
      1 parameters
      4 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable statement::asm_outputs defined in parse.h
      uses function call_modification_hooks(struct expression *,struct expression *) defined in smatch_modification_hooks.c
      uses macro definition NULL defined in sm_implied3.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function scope_end(void *) in line 211
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses variable sym defined in smatch_type.c
      uses function symbol_expression(struct symbol *) defined in smatch_expressions.c
      uses function call_modification_hooks(struct expression *,struct expression *) defined in smatch_modification_hooks.c
      uses macro definition NULL defined in sm_implied3.c
   function match_declaration(struct symbol *) in line 219
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function add_scope_hook(scope_hook *,void *) defined in smatch.h
      uses function scope_end(void *) defined in smatch_modification_hooks.c
      uses variable sym defined in smatch_type.c
   function get_modification_state(struct expression *) in line 224
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function get_state_expr(int,struct expression *) defined in smatch.h
      uses variable my_id defined in smatch_modification_hooks.c
   function register_modification_hooks(int) in line 229
      protection public
      13 lines of code
      1 parameters
      1 conditional paths
      uses variable my_id defined in smatch_modification_hooks.c
      uses variable hooks defined in smatch_modification_hooks.c
      uses function malloc(int) defined in sm_buf_size2.c
      uses variable num_checks defined in smatch.c
      uses function memset(void *,int,int) defined in check_byte_count-ice.c
      uses variable indirect_hooks defined in smatch_modification_hooks.c
      uses function add_hook(void *,enum hook_type) defined in smatch.h
      uses function match_assign(struct expression *) defined in smatch_modification_hooks.c
      uses enumvalue ASSIGNMENT_HOOK defined in smatch.h
      uses function unop_expr(struct expression *) defined in smatch_modification_hooks.c
      uses enumvalue OP_HOOK defined in smatch.h
      uses function asm_expr(struct statement *) defined in smatch_modification_hooks.c
      uses enumvalue ASM_HOOK defined in smatch.h
   function register_modification_hooks_late(int) in line 243
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses function add_hook(void *,enum hook_type) defined in smatch.h
      uses function match_call(struct expression *) defined in smatch_modification_hooks.c
      uses enumvalue FUNCTION_CALL_HOOK defined in smatch.h
      uses function select_return_states_hook(int,return_implies_hook *) defined in smatch.h
      uses enumvalue PARAM_ADD defined in smatch.h
      uses function db_param_add(struct expression *,int,char *,char *) defined in smatch_modification_hooks.c
      uses enumvalue PARAM_SET defined in smatch.h
      uses function match_declaration(struct symbol *) defined in smatch_modification_hooks.c
      uses enumvalue DECLARATION_HOOK defined in smatch.h
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/smatch_param_cleared.c
module smatch_param_cleared.c
   macro definition USB_DIR_IN in line 134
      protection public
   variable my_id in line 33
      protection public
   function STATE(cleared) in line 35
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function STATE(zeroed) in line 36
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function db_param_cleared(struct expression *,int,char *,char *) in line 38
      protection public
      23 lines of code
      4 parameters
      6 conditional paths
      uses variable name defined in smatch_type.c
      uses variable sym defined in smatch_type.c
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_ASSIGNMENT defined in expression.h
      uses function strip_expr(struct expression *) defined in smatch.h
      uses variable expression::right defined in expression.h
      uses enumvalue EXPR_CALL defined in expression.h
      uses function get_argument_from_call_expr(struct expression_list *,int) defined in smatch.h
      uses variable expression::args defined in expression.h
      uses variable param defined in smatch_parse_call_math.c
      uses function get_variable_from_key(struct expression *,char *,struct symbol **) defined in smatch.h
      uses function set_state(int,const char *,struct symbol *,struct smatch_state *) defined in smatch.h
      uses variable my_id defined in smatch_param_cleared.c
      uses function free_string(char *) defined in smatch.h
   function match_memset(const char *,struct expression *,void *) in line 62
      protection public
      4 lines of code
      3 parameters
      1 conditional paths
      uses function db_param_cleared(struct expression *,int,char *,char *) defined in smatch_param_cleared.c
   function match_memcpy(const char *,struct expression *,void *) in line 67
      protection public
      4 lines of code
      3 parameters
      1 conditional paths
      uses function db_param_cleared(struct expression *,int,char *,char *) defined in smatch_param_cleared.c
   function print_return_value_param(int,char *,struct expression *) in line 72
      protection public
      29 lines of code
      3 parameters
      5 conditional paths
      uses variable param defined in smatch_parse_call_math.c
      uses function __get_cur_stree(void) defined in smatch.h
      uses macro definition FOR_EACH_MY_SM defined in avl.h
      uses variable my_id defined in smatch_param_cleared.c
      uses function get_param_num_from_sym(struct symbol *) defined in smatch.h
      uses variable sm_state::sym defined in smatch.h
      uses function get_param_name(struct sm_state *) defined in smatch.h
      uses variable sm_state::state defined in smatch.h
      uses function sql_insert_return_states(int,const char *,int,int,const char *,const char *) defined in smatch.h
      uses enumvalue PARAM_CLEARED defined in smatch.h
      uses macro definition END_FOR_EACH_SM defined in avl.h
   function register_clears_param(void) in line 102
      protection public
      31 lines of code
      1 parameters
      7 conditional paths
      uses variable name defined in smatch_type.c
      uses variable param defined in smatch_parse_call_math.c
      uses variable option_project defined in smatch.c
      uses enumvalue PROJ_NONE defined in smatch.h
      uses function snprintf(char *,int,char *,char *) defined in sm_overflow6.c
      uses variable option_project_str defined in smatch.c
      uses function get_tokens_file(const char *) defined in smatch.h
      uses enumvalue TOKEN_STREAMBEGIN defined in token.h
      uses variable token::next defined in token.h
      uses enumvalue TOKEN_STREAMEND defined in token.h
      uses enumvalue TOKEN_IDENT defined in token.h
      uses function show_ident(const struct ident *) defined in token.h
      uses variable token::ident defined in token.h
      uses enumvalue TOKEN_NUMBER defined in token.h
      uses variable token::number defined in token.h
      uses function add_function_hook(const char *,func_hook *,void *) defined in smatch.h
      uses function match_memcpy(const char *,struct expression *,void *) defined in smatch_param_cleared.c
   function match_usb_control_msg(const char *,struct expression *,void *) in line 135
      protection public
      12 lines of code
      3 parameters
      2 conditional paths
      uses function get_argument_from_call_expr(struct expression_list *,int) defined in smatch.h
      uses variable expression::args defined in expression.h
      uses function get_value(struct expression *,sval_t *) defined in smatch.h
      uses variable sval_t::uvalue defined in smatch.h
      uses macro definition USB_DIR_IN defined in smatch_param_cleared.c
      uses function db_param_cleared(struct expression *,int,char *,char *) defined in smatch_param_cleared.c
   function match_assign(struct expression *) in line 148
      protection public
      13 lines of code
      1 parameters
      2 conditional paths
      uses function get_type(struct expression *) defined in smatch.h
      uses variable expression::left defined in expression.h
      uses enumvalue SYM_STRUCT defined in symbol.h
      uses function set_state_expr(int,struct expression *,struct smatch_state *) defined in smatch.h
      uses variable my_id defined in smatch_param_cleared.c
   function match_array_assign(struct expression *) in line 162
      protection public
      10 lines of code
      1 parameters
      2 conditional paths
      uses function is_array(struct expression *) defined in smatch.h
      uses variable expression::left defined in expression.h
      uses function get_array_base(struct expression *) defined in smatch.h
      uses function set_state_expr(int,struct expression *,struct smatch_state *) defined in smatch.h
      uses variable my_id defined in smatch_param_cleared.c
   function register_param_cleared(int) in line 173
      protection public
      31 lines of code
      1 parameters
      2 conditional paths
      uses variable my_id defined in smatch_param_cleared.c
      uses function add_function_hook(const char *,func_hook *,void *) defined in smatch.h
      uses function match_memset(const char *,struct expression *,void *) defined in smatch_param_cleared.c
      uses function match_memcpy(const char *,struct expression *,void *) defined in smatch_param_cleared.c
      uses function add_hook(void *,enum hook_type) defined in smatch.h
      uses function match_assign(struct expression *) defined in smatch_param_cleared.c
      uses enumvalue ASSIGNMENT_HOOK defined in smatch.h
      uses function match_array_assign(struct expression *) defined in smatch_param_cleared.c
      uses function register_clears_param(void) defined in smatch_param_cleared.c
      uses function select_return_states_hook(int,return_implies_hook *) defined in smatch.h
      uses enumvalue PARAM_CLEARED defined in smatch.h
      uses function db_param_cleared(struct expression *,int,char *,char *) defined in smatch_param_cleared.c
      uses function add_split_return_callback(void(*)(int return_id, char *return_ranges, struct expression *returned_expr)) defined in smatch.h
      uses function print_return_value_param(int,char *,struct expression *) defined in smatch_param_cleared.c
      uses variable option_project defined in smatch.c
      uses enumvalue PROJ_KERNEL defined in smatch.h
      uses function match_usb_control_msg(const char *,struct expression *,void *) defined in smatch_param_cleared.c
      uses macro definition NULL defined in sm_implied3.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/smatch_param_filter.c
module smatch_param_filter.c
   variable my_id in line 36
      protection public
   variable start_states in line 38
      protection public
   variable saved_stack in line 39
      protection public
   function save_start_states(struct statement *) in line 40
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable start_states defined in smatch_param_filter.c
      uses function get_all_states_stree(int) defined in smatch.h
      uses macro definition SMATCH_EXTRA defined in smatch.h
   function free_start_states(void) in line 45
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function free_stree(struct stree **) defined in avl.c
      uses variable start_states defined in smatch_param_filter.c
   function match_save_states(struct expression *) in line 50
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function push_stree(struct stree_stack **,struct stree *) defined in smatch_slist.c
      uses variable saved_stack defined in smatch_param_filter.c
      uses variable start_states defined in smatch_param_filter.c
      uses macro definition NULL defined in sm_implied3.c
   function match_restore_states(struct expression *) in line 56
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function free_stree(struct stree **) defined in avl.c
      uses variable start_states defined in smatch_param_filter.c
      uses function pop_stree(struct stree_stack **) defined in smatch_slist.c
      uses variable saved_stack defined in smatch_param_filter.c
   function unmatched_state(struct sm_state *) in line 62
      protection public
      12 lines of code
      1 parameters
      3 conditional paths
      uses function parent_is_gone_var_sym(const char *,struct symbol *) defined in smatch.h
      uses variable sm_state::name defined in smatch.h
      uses variable sm_state::sym defined in smatch.h
      uses function alloc_estate_empty(void) defined in smatch_estate.c
      uses function get_state(int,const char *,struct symbol *) defined in smatch.h
      uses macro definition SMATCH_EXTRA defined in smatch.h
      uses function alloc_estate_whole(struct symbol *) defined in smatch_estate.c
      uses function estate_type(struct smatch_state *) defined in smatch_estate.c
      uses variable sm_state::state defined in smatch.h
   function pre_merge_hook(struct sm_state *) in line 75
      protection public
      18 lines of code
      1 parameters
      4 conditional paths
      uses function estate_rl(struct smatch_state *) defined in smatch_estate.c
      uses variable sm_state::state defined in smatch.h
      uses function get_state(int,const char *,struct symbol *) defined in smatch.h
      uses macro definition SMATCH_EXTRA defined in smatch.h
      uses variable sm_state::name defined in smatch.h
      uses variable sm_state::sym defined in smatch.h
      uses variable my_id defined in smatch_param_filter.c
      uses function rl_intersection(struct range_list *,struct range_list *) defined in smatch_extra.h
      uses function rl_equiv(struct range_list *,struct range_list *) defined in smatch_extra.h
      uses function set_state(int,const char *,struct symbol *,struct smatch_state *) defined in smatch.h
      uses function alloc_estate_rl(struct range_list *) defined in smatch_estate.c
      uses function clone_rl(struct range_list *) defined in smatch_extra.h
   function extra_mod_hook(const char *,struct symbol *,struct smatch_state *) in line 94
      protection public
      17 lines of code
      3 parameters
      4 conditional paths
      uses variable param defined in smatch_parse_call_math.c
      uses variable __in_fake_assign defined in smatch.h
      uses function get_param_num_from_sym(struct symbol *) defined in smatch.h
      uses variable sym defined in smatch_type.c
      uses variable symbol::ident defined in struct.c
      uses variable ident::name defined in token.h
      uses variable name defined in smatch_type.c
      uses function set_state(int,const char *,struct symbol *,struct smatch_state *) defined in smatch.h
      uses variable my_id defined in smatch_param_filter.c
      uses function alloc_estate_empty(void) defined in smatch_estate.c
   function parent_set(struct string_list *,const char *) in line 116
      protection public
      19 lines of code
      2 parameters
      4 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses function strlen(char *) defined in sm_overflow6.c
      uses variable name defined in smatch_type.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function print_one_mod_param(int,char *,int,struct sm_state *,struct string_list **) in line 136
      protection public
      18 lines of code
      5 parameters
      4 conditional paths
      uses function get_param_name(struct sm_state *) defined in smatch.h
      uses function is_whole_rl(struct range_list *) defined in smatch_extra.h
      uses function estate_rl(struct smatch_state *) defined in smatch_estate.c
      uses variable sm_state::state defined in smatch.h
      uses function insert_string(struct string_list **,const char *) defined in smatch.h
      uses variable sm_state::name defined in smatch.h
      uses function sql_insert_return_states(int,const char *,int,int,const char *,const char *) defined in smatch.h
      uses enumvalue PARAM_FILTER defined in smatch.h
      uses variable param defined in smatch_parse_call_math.c
      uses function show_rl(struct range_list *) defined in smatch_extra.h
   function print_return_value_param(int,char *,struct expression *) in line 155
      protection public
      26 lines of code
      3 parameters
      5 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses variable param defined in smatch_parse_call_math.c
      uses macro definition FOR_EACH_MY_SM defined in avl.h
      uses macro definition SMATCH_EXTRA defined in smatch.h
      uses function __get_cur_stree(void) defined in smatch.h
      uses function get_param_num_from_sym(struct symbol *) defined in smatch.h
      uses variable sm_state::sym defined in smatch.h
      uses variable symbol::ident defined in struct.c
      uses variable ident::name defined in token.h
      uses variable sm_state::name defined in smatch.h
      uses function parent_set(struct string_list *,const char *) defined in smatch_param_filter.c
      uses function get_sm_state(int,const char *,struct symbol *) defined in smatch.h
      uses variable my_id defined in smatch_param_filter.c
      uses function print_one_mod_param(int,char *,int,struct sm_state *,struct string_list **) defined in smatch_param_filter.c
      uses macro definition END_FOR_EACH_SM defined in avl.h
      uses macro definition free_ptr_list defined in ptrlist.h
   function param_has_filter_data(struct sm_state *) in line 182
      protection public
      11 lines of code
      1 parameters
      3 conditional paths
      uses function get_state(int,const char *,struct symbol *) defined in smatch.h
      uses variable my_id defined in smatch_param_filter.c
      uses variable sm_state::name defined in smatch.h
      uses variable sm_state::sym defined in smatch.h
      uses function estate_rl(struct smatch_state *) defined in smatch_estate.c
   function register_param_filter(int) in line 194
      protection public
      17 lines of code
      1 parameters
      1 conditional paths
      uses variable my_id defined in smatch_param_filter.c
      uses function add_hook(void *,enum hook_type) defined in smatch.h
      uses function save_start_states(struct statement *) defined in smatch_param_filter.c
      uses enumvalue AFTER_DEF_HOOK defined in smatch.h
      uses function free_start_states(void) defined in smatch_param_filter.c
      uses enumvalue END_FUNC_HOOK defined in smatch.h
      uses function add_extra_mod_hook(mod_hook *) defined in smatch_extra.c
      uses function extra_mod_hook(const char *,struct symbol *,struct smatch_state *) defined in smatch_param_filter.c
      uses function add_unmatched_state_hook(int,unmatched_func_t *) defined in smatch.h
      uses function unmatched_state(struct sm_state *) defined in smatch_param_filter.c
      uses function add_pre_merge_hook(int,void(*)(struct sm_state *sm)) defined in smatch.h
      uses function pre_merge_hook(struct sm_state *) defined in smatch_param_filter.c
      uses function add_merge_hook(int,merge_func_t *) defined in smatch.h
      uses function merge_estates(struct smatch_state *,struct smatch_state *) defined in smatch_estate.c
      uses function match_save_states(struct expression *) defined in smatch_param_filter.c
      uses enumvalue INLINE_FN_START defined in smatch.h
      uses function match_restore_states(struct expression *) defined in smatch_param_filter.c
      uses enumvalue INLINE_FN_END defined in smatch.h
      uses function add_split_return_callback(void(*)(int return_id, char *return_ranges, struct expression *returned_expr)) defined in smatch.h
      uses function print_return_value_param(int,char *,struct expression *) defined in smatch_param_filter.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/smatch_param_limit.c
module smatch_param_limit.c
   variable my_id in line 50
      protection public
   variable start_states in line 52
      protection public
   variable saved_stack in line 53
      protection public
   function save_start_states(struct statement *) in line 55
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable start_states defined in smatch_param_limit.c
      uses function get_all_states_stree(int) defined in smatch.h
      uses macro definition SMATCH_EXTRA defined in smatch.h
   function free_start_states(void) in line 60
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function free_stree(struct stree **) defined in avl.c
      uses variable start_states defined in smatch_param_limit.c
   function unmatched_state(struct sm_state *) in line 65
      protection public
      9 lines of code
      1 parameters
      2 conditional paths
      uses function get_state(int,const char *,struct symbol *) defined in smatch.h
      uses macro definition SMATCH_EXTRA defined in smatch.h
      uses variable sm_state::name defined in smatch.h
      uses variable sm_state::sym defined in smatch.h
      uses function alloc_estate_whole(struct symbol *) defined in smatch_estate.c
      uses function estate_type(struct smatch_state *) defined in smatch_estate.c
      uses variable sm_state::state defined in smatch.h
   function get_orig_estate(const char *,struct symbol *) in line 75
      protection public
      13 lines of code
      2 parameters
      3 conditional paths
      uses function get_state(int,const char *,struct symbol *) defined in smatch.h
      uses variable my_id defined in smatch_param_limit.c
      uses variable name defined in smatch_type.c
      uses variable sym defined in smatch_type.c
      uses macro definition SMATCH_EXTRA defined in smatch.h
      uses function alloc_estate_rl(struct range_list *) defined in smatch_estate.c
      uses function alloc_whole_rl(struct symbol *) defined in smatch_extra.h
      uses function get_real_base_type(struct symbol *) defined in smatch.h
   function get_orig_estate_type(const char *,struct symbol *,struct symbol *) in line 89
      protection public
      13 lines of code
      3 parameters
      3 conditional paths
      uses function get_state(int,const char *,struct symbol *) defined in smatch.h
      uses variable my_id defined in smatch_param_limit.c
      uses variable name defined in smatch_type.c
      uses variable sym defined in smatch_type.c
      uses macro definition SMATCH_EXTRA defined in smatch.h
      uses function alloc_estate_rl(struct range_list *) defined in smatch_estate.c
      uses function alloc_whole_rl(struct symbol *) defined in smatch_extra.h
   function print_return_value_param(int,char *,struct expression *) in line 103
      protection public
      30 lines of code
      3 parameters
      6 conditional paths
      uses variable param defined in smatch_parse_call_math.c
      uses macro definition FOR_EACH_MY_SM defined in avl.h
      uses macro definition SMATCH_EXTRA defined in smatch.h
      uses function __get_cur_stree(void) defined in smatch.h
      uses function get_param_num_from_sym(struct symbol *) defined in smatch.h
      uses variable sm_state::sym defined in smatch.h
      uses function get_param_name(struct sm_state *) defined in smatch.h
      uses variable sm_state::state defined in smatch.h
      uses function get_state(int,const char *,struct symbol *) defined in smatch.h
      uses variable my_id defined in smatch_param_limit.c
      uses variable sm_state::name defined in smatch.h
      uses function estate_is_whole(struct smatch_state *) defined in smatch_estate.c
      uses function get_state_stree(struct stree *,int,const char *,struct symbol *) defined in smatch_slist.c
      uses variable start_states defined in smatch_param_limit.c
      uses function estates_equiv(struct smatch_state *,struct smatch_state *) defined in smatch_estate.c
      uses function sql_insert_return_states(int,const char *,int,int,const char *,const char *) defined in smatch.h
      uses enumvalue PARAM_LIMIT defined in smatch.h
      uses variable smatch_state::name defined in smatch.h
      uses macro definition END_FOR_EACH_SM defined in avl.h
   function extra_mod_hook(const char *,struct symbol *,struct smatch_state *) in line 134
      protection public
      12 lines of code
      3 parameters
      2 conditional paths
      uses variable param defined in smatch_parse_call_math.c
      uses function get_param_num_from_sym(struct symbol *) defined in smatch.h
      uses variable sym defined in smatch_type.c
      uses function get_orig_estate_type(const char *,struct symbol *,struct symbol *) defined in smatch_param_limit.c
      uses variable name defined in smatch_type.c
      uses function estate_type(struct smatch_state *) defined in smatch_estate.c
      uses function set_state(int,const char *,struct symbol *,struct smatch_state *) defined in smatch.h
      uses variable my_id defined in smatch_param_limit.c
   function match_save_states(struct expression *) in line 147
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function push_stree(struct stree_stack **,struct stree *) defined in smatch_slist.c
      uses variable saved_stack defined in smatch_param_limit.c
      uses variable start_states defined in smatch_param_limit.c
      uses macro definition NULL defined in sm_implied3.c
   function match_restore_states(struct expression *) in line 153
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function free_stree(struct stree **) defined in avl.c
      uses variable start_states defined in smatch_param_limit.c
      uses function pop_stree(struct stree_stack **) defined in smatch_slist.c
      uses variable saved_stack defined in smatch_param_limit.c
   function register_param_limit(int) in line 159
      protection public
      16 lines of code
      1 parameters
      1 conditional paths
      uses variable my_id defined in smatch_param_limit.c
      uses function add_hook(void *,enum hook_type) defined in smatch.h
      uses function save_start_states(struct statement *) defined in smatch_param_limit.c
      uses enumvalue AFTER_DEF_HOOK defined in smatch.h
      uses function free_start_states(void) defined in smatch_param_limit.c
      uses enumvalue END_FUNC_HOOK defined in smatch.h
      uses function add_extra_mod_hook(mod_hook *) defined in smatch_extra.c
      uses function extra_mod_hook(const char *,struct symbol *,struct smatch_state *) defined in smatch_param_limit.c
      uses function add_unmatched_state_hook(int,unmatched_func_t *) defined in smatch.h
      uses function unmatched_state(struct sm_state *) defined in smatch_param_limit.c
      uses function add_merge_hook(int,merge_func_t *) defined in smatch.h
      uses function merge_estates(struct smatch_state *,struct smatch_state *) defined in smatch_estate.c
      uses function match_save_states(struct expression *) defined in smatch_param_limit.c
      uses enumvalue INLINE_FN_START defined in smatch.h
      uses function match_restore_states(struct expression *) defined in smatch_param_limit.c
      uses enumvalue INLINE_FN_END defined in smatch.h
      uses function add_split_return_callback(void(*)(int return_id, char *return_ranges, struct expression *returned_expr)) defined in smatch.h
      uses function print_return_value_param(int,char *,struct expression *) defined in smatch_param_limit.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/smatch_param_set.c
module smatch_param_set.c
   variable my_id in line 40
      protection public
   function unmatched_state(struct sm_state *) in line 42
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function alloc_estate_empty(void) defined in smatch_estate.c
   function extra_mod_hook(const char *,struct symbol *,struct smatch_state *) in line 47
      protection public
      8 lines of code
      3 parameters
      3 conditional paths
      uses variable __in_fake_assign defined in smatch.h
      uses function get_param_num_from_sym(struct symbol *) defined in smatch.h
      uses variable sym defined in smatch_type.c
      uses function set_state(int,const char *,struct symbol *,struct smatch_state *) defined in smatch.h
      uses variable my_id defined in smatch_param_set.c
      uses variable name defined in smatch_type.c
   function parent_set(struct string_list *,const char *) in line 60
      protection public
      19 lines of code
      2 parameters
      4 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses function strlen(char *) defined in sm_overflow6.c
      uses variable name defined in smatch_type.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function print_return_value_param(int,char *,struct expression *) in line 80
      protection public
      65 lines of code
      3 parameters
      10 conditional paths
      uses variable param defined in smatch_parse_call_math.c
      uses macro definition NULL defined in sm_implied3.c
      uses variable buf defined in sm_fake_assignment.c
      uses function __get_cur_stree(void) defined in smatch.h
      uses macro definition FOR_EACH_MY_SM defined in avl.h
      uses variable my_id defined in smatch_param_set.c
      uses function estate_rl(struct smatch_state *) defined in smatch_estate.c
      uses variable sm_state::state defined in smatch.h
      uses function get_state(int,const char *,struct symbol *) defined in smatch.h
      uses macro definition SMATCH_EXTRA defined in smatch.h
      uses variable sm_state::name defined in smatch.h
      uses variable sm_state::sym defined in smatch.h
      uses function rl_intersection(struct range_list *,struct range_list *) defined in smatch_extra.h
      uses function get_param_num_from_sym(struct symbol *) defined in smatch.h
      uses function get_param_name(struct sm_state *) defined in smatch.h
      uses function rl_to_sval(struct range_list *,sval_t *) defined in smatch_extra.h
      uses function insert_string(struct string_list **,const char *) defined in smatch.h
      uses function sql_insert_return_states(int,const char *,int,int,const char *,const char *) defined in smatch.h
      uses function param_has_filter_data(struct sm_state *) defined in smatch.h
      uses enumvalue PARAM_ADD defined in smatch.h
      uses enumvalue PARAM_SET defined in smatch.h
      uses function show_rl(struct range_list *) defined in smatch_extra.h
      uses function get_value_in_terms_of_parameter_math_var_sym(const char *,struct symbol *) defined in smatch.h
      uses function snprintf(char *,int,char *,char *) defined in sm_overflow6.c
      uses function is_whole_rl(struct range_list *) defined in smatch_extra.h
      uses function parent_set(struct string_list *,const char *) defined in smatch_param_set.c
      uses macro definition END_FOR_EACH_SM defined in avl.h
      uses macro definition free_ptr_list defined in ptrlist.h
   function param_was_set(struct expression *) in line 146
      protection public
      6 lines of code
      1 parameters
      2 conditional paths
      uses function get_state_expr(int,struct expression *) defined in smatch.h
      uses variable my_id defined in smatch_param_set.c
   function register_param_set(int) in line 153
      protection public
      9 lines of code
      1 parameters
      1 conditional paths
      uses variable my_id defined in smatch_param_set.c
      uses function add_extra_mod_hook(mod_hook *) defined in smatch_extra.c
      uses function extra_mod_hook(const char *,struct symbol *,struct smatch_state *) defined in smatch_param_set.c
      uses function add_unmatched_state_hook(int,unmatched_func_t *) defined in smatch.h
      uses function unmatched_state(struct sm_state *) defined in smatch_param_set.c
      uses function add_merge_hook(int,merge_func_t *) defined in smatch.h
      uses function merge_estates(struct smatch_state *,struct smatch_state *) defined in smatch_estate.c
      uses function add_split_return_callback(void(*)(int return_id, char *return_ranges, struct expression *returned_expr)) defined in smatch.h
      uses function print_return_value_param(int,char *,struct expression *) defined in smatch_param_set.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/smatch_param_used.c
module smatch_param_used.c
   variable my_id in line 21
      protection public
   variable used_stree in line 23
      protection public
   function STATE(used) in line 24
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function __get_state_hook(int,const char *,struct symbol *) in line 30
      protection public
      15 lines of code
      3 parameters
      4 conditional paths
      uses variable option_info defined in smatch.c
      uses variable __in_fake_assign defined in smatch.h
      uses function get_param_num_from_sym(struct symbol *) defined in smatch.h
      uses variable sym defined in smatch_type.c
      uses function set_state_stree(struct stree **,int,const char *,struct symbol *,struct smatch_state *) defined in smatch_slist.c
      uses variable used_stree defined in smatch_param_used.c
      uses variable my_id defined in smatch_param_used.c
      uses variable name defined in smatch_type.c
   function set_param_used(struct expression *,char *,char *) in line 46
      protection public
      18 lines of code
      3 parameters
      5 conditional paths
      uses variable sym defined in smatch_type.c
      uses variable name defined in smatch_type.c
      uses function get_variable_from_key(struct expression *,char *,struct symbol **) defined in smatch.h
      uses function get_param_num_from_sym(struct symbol *) defined in smatch.h
      uses function set_state(int,const char *,struct symbol *,struct smatch_state *) defined in smatch.h
      uses variable my_id defined in smatch_param_used.c
      uses variable symbol::used defined in struct.c
      uses function free_string(char *) defined in smatch.h
   function process_states(struct stree *) in line 65
      protection public
      16 lines of code
      1 parameters
      2 conditional paths
      uses variable name defined in smatch_type.c
      uses macro definition FOR_EACH_SM defined in avl.h
      uses variable used_stree defined in smatch_param_used.c
      uses function get_param_num_from_sym(struct symbol *) defined in smatch.h
      uses variable sm_state::sym defined in smatch.h
      uses function get_param_name(struct sm_state *) defined in smatch.h
      uses function sql_insert_call_implies(int,int,const char *,const char *) defined in smatch.h
      uses enumvalue PARAM_USED defined in smatch.h
      uses macro definition END_FOR_EACH_SM defined in avl.h
      uses function free_stree(struct stree **) defined in avl.c
   function register_param_used(int) in line 82
      protection public
      10 lines of code
      1 parameters
      2 conditional paths
      uses variable my_id defined in smatch_param_used.c
      uses variable option_info defined in smatch.c
      uses function select_call_implies_hook(int,void(*)(struct expression *arg, char *key, char *value)) defined in smatch.h
      uses enumvalue PARAM_USED defined in smatch.h
      uses function set_param_used(struct expression *,char *,char *) defined in smatch_param_used.c
      uses function all_return_states_hook(void(*)(struct stree *stree)) defined in smatch_returns.c
      uses function process_states(struct stree *) defined in smatch_param_used.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/smatch_parse_call_math.c
module smatch_parse_call_math.c
   variable my_id in line 22
      protection public
   variable func in line 25
      protection public
   variable param in line 26
      protection public
   variable alloc_functions in line 33
      protection public
   variable rl_stack in line 35
      protection public
   variable op_list in line 36
      protection public
   variable buf_size_recipe in line 487
      protection public
   function push_op(char) in line 38
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses variable p defined in cond_expr2.c
      uses function malloc(int) defined in sm_buf_size2.c
      uses variable c defined in sm_array_overflow.c
      uses macro definition add_ptr_list defined in ptrlist.h
      uses variable op_list defined in smatch_parse_call_math.c
   function pop_op(void) in line 47
      protection public
      18 lines of code
      1 parameters
      2 conditional paths
      uses variable p defined in cond_expr2.c
      uses variable c defined in sm_array_overflow.c
      uses variable op_list defined in smatch_parse_call_math.c
      uses macro definition sm_msg defined in smatch.h
      uses function delete_ptr_list_last(struct ptr_list **) defined in ptrlist.c
   function op_precedence(char) in line 66
      protection public
      13 lines of code
      1 parameters
      5 conditional paths
      uses variable c defined in sm_array_overflow.c
   function top_op_precedence(void) in line 80
      protection public
      10 lines of code
      1 parameters
      2 conditional paths
      uses variable p defined in cond_expr2.c
      uses variable op_list defined in smatch_parse_call_math.c
      uses function op_precedence(char) defined in smatch_parse_call_math.c
   function rl_pop_until(char) in line 91
      protection public
      14 lines of code
      1 parameters
      2 conditional paths
      uses function op(void) defined in loop2.c
      uses variable sm_state::left defined in smatch.h
      uses variable sm_state::right defined in smatch.h
      uses function top_op_precedence(void) defined in smatch_parse_call_math.c
      uses function op_precedence(char) defined in smatch_parse_call_math.c
      uses variable c defined in sm_array_overflow.c
      uses function pop_op(void) defined in smatch_parse_call_math.c
      uses function pop_rl(struct range_list_stack **) defined in smatch_extra.h
      uses variable rl_stack defined in smatch_parse_call_math.c
      uses function rl_binop(struct range_list *,int,struct range_list *) defined in smatch_extra.h
      uses function push_rl(struct range_list_stack **,struct range_list *) defined in smatch_extra.h
   function rl_discard_stacks(void) in line 106
      protection public
      7 lines of code
      1 parameters
      3 conditional paths
      uses variable op_list defined in smatch_parse_call_math.c
      uses function pop_op(void) defined in smatch_parse_call_math.c
      uses variable rl_stack defined in smatch_parse_call_math.c
      uses function pop_rl(struct range_list_stack **) defined in smatch_extra.h
   function read_rl_from_var(struct expression *,char *,char **,struct range_list **) in line 114
      protection public
      50 lines of code
      4 parameters
      7 conditional paths
      uses variable sm_state::state defined in smatch.h
      uses variable param defined in smatch_parse_call_math.c
      uses variable sm_state::name defined in smatch.h
      uses variable sm_state::sym defined in smatch.h
      uses variable buf defined in sm_fake_assignment.c
      uses variable p defined in cond_expr2.c
      uses function get_argument_from_call_expr(struct expression_list *,int) defined in smatch.h
      uses variable expression::args defined in expression.h
      uses function get_absolute_rl(struct expression *,struct range_list **) defined in smatch_extra.h
      uses enumvalue EXPR_PREOP defined in expression.h
      uses function strip_expr(struct expression *) defined in smatch.h
      uses function expr_to_var_sym(struct expression *,struct symbol **) defined in smatch.h
      uses function snprintf(char *,int,char *,char *) defined in sm_overflow6.c
      uses function free_string(char *) defined in smatch.h
      uses function strlen(char *) defined in sm_overflow6.c
      uses function get_state(int,const char *,struct symbol *) defined in smatch.h
      uses macro definition SMATCH_EXTRA defined in smatch.h
      uses function estate_rl(struct smatch_state *) defined in smatch_estate.c
   function read_var_num(struct expression *,char *,char **,struct range_list **) in line 165
      protection public
      17 lines of code
      4 parameters
      4 conditional paths
      uses variable p defined in cond_expr2.c
      uses function read_rl_from_var(struct expression *,char *,char **,struct range_list **) defined in smatch_parse_call_math.c
      uses variable sval_t::type defined in smatch.h
      uses variable sval_t::value defined in smatch.h
      uses function alloc_rl(sval_t,sval_t) defined in smatch_extra.h
   function read_op(char *) in line 183
      protection public
      15 lines of code
      1 parameters
      6 conditional paths
      uses variable p defined in cond_expr2.c
      uses macro definition NULL defined in sm_implied3.c
   function parse_call_math_rl(struct expression *,char *,struct range_list **) in line 199
      protection public
      44 lines of code
      3 parameters
      11 conditional paths
      uses variable c defined in sm_array_overflow.c
      uses variable option_debug defined in smatch.h
      uses macro definition sm_msg defined in smatch.h
      uses function read_var_num(struct expression *,char *,char **,struct range_list **) defined in smatch_parse_call_math.c
      uses function push_rl(struct range_list_stack **,struct range_list *) defined in smatch_extra.h
      uses variable rl_stack defined in smatch_parse_call_math.c
      uses function show_rl(struct range_list *) defined in smatch_extra.h
      uses function read_op(char *) defined in smatch_parse_call_math.c
      uses function rl_pop_until(char) defined in smatch_parse_call_math.c
      uses function push_op(char) defined in smatch_parse_call_math.c
      uses function pop_rl(struct range_list_stack **) defined in smatch_extra.h
      uses function rl_discard_stacks(void) defined in smatch_parse_call_math.c
   function parse_call_math(struct expression *,char *,sval_t *) in line 244
      protection public
      10 lines of code
      3 parameters
      3 conditional paths
      uses function parse_call_math_rl(struct expression *,char *,struct range_list **) defined in smatch_parse_call_math.c
      uses function rl_to_sval(struct range_list *,sval_t *) defined in smatch_extra.h
   function alloc_state_sname(char *) in line 255
      protection public
      9 lines of code
      1 parameters
      1 conditional paths
      uses variable sm_state::state defined in smatch.h
      uses variable smatch_state::name defined in smatch.h
      uses variable smatch_state::data defined in smatch.h
   function get_arg_number(struct expression *) in line 265
      protection public
      20 lines of code
      1 parameters
      3 conditional paths
      uses variable sm_state::sym defined in smatch.h
      uses function strip_expr(struct expression *) defined in smatch.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_SYMBOL defined in expression.h
      uses variable expression::symbol defined in expression.h
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable cur_func_sym defined in smatch.h
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::base_type defined in struct.c
      uses variable symbol::arguments defined in struct.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function format_variable_helper(char *,int,struct expression *) in line 286
      protection public
      37 lines of code
      3 parameters
      11 conditional paths
      uses variable sm_state::name defined in smatch.h
      uses variable sm_state::sym defined in smatch.h
      uses function expr_to_var_sym(struct expression *,struct symbol **) defined in smatch.h
      uses variable symbol::ident defined in struct.c
      uses function get_param_num_from_sym(struct symbol *) defined in smatch.h
      uses function param_was_set(struct expression *) defined in smatch.h
      uses variable ident::name defined in token.h
      uses function strlen(char *) defined in sm_overflow6.c
      uses function snprintf(char *,int,char *,char *) defined in sm_overflow6.c
      uses variable buf defined in sm_fake_assignment.c
      uses function free_string(char *) defined in smatch.h
   function format_expr_helper(char *,int,struct expression *) in line 324
      protection public
      46 lines of code
      3 parameters
      10 conditional paths
      uses variable buf defined in sm_fake_assignment.c
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_BINOP defined in expression.h
      uses variable expression::left defined in expression.h
      uses function snprintf(char *,int,char *,char *) defined in sm_overflow6.c
      uses function show_special(int) defined in token.h
      uses variable expression::op defined in expression.h
      uses variable expression::right defined in expression.h
      uses function get_implied_value(struct expression *,sval_t *) defined in smatch.h
      uses function sval_to_str(sval_t) defined in smatch.h
      uses function format_variable_helper(char *,int,struct expression *) defined in smatch_parse_call_math.c
   function format_expr(struct expression *) in line 371
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses variable buf defined in sm_fake_assignment.c
      uses function format_expr_helper(char *,int,struct expression *) defined in smatch_parse_call_math.c
      uses macro definition NULL defined in sm_implied3.c
      uses function alloc_sname(const char *) defined in smatch_slist.c
   function get_value_in_terms_of_parameter_math(struct expression *) in line 383
      protection public
      16 lines of code
      1 parameters
      3 conditional paths
      uses variable buf defined in sm_fake_assignment.c
      uses function get_assigned_expr(struct expression *) defined in check_assigned_expr.c
      uses function format_expr_helper(char *,int,struct expression *) defined in smatch_parse_call_math.c
      uses macro definition NULL defined in sm_implied3.c
      uses function alloc_sname(const char *) defined in smatch_slist.c
   function get_value_in_terms_of_parameter_math_var_sym(const char *,struct symbol *) in line 400
      protection public
      17 lines of code
      2 parameters
      3 conditional paths
      uses variable buf defined in sm_fake_assignment.c
      uses function get_assigned_expr_name_sym(const char *,struct symbol *) defined in check_assigned_expr.c
      uses variable sm_state::name defined in smatch.h
      uses variable sm_state::sym defined in smatch.h
      uses macro definition NULL defined in sm_implied3.c
      uses function format_expr_helper(char *,int,struct expression *) defined in smatch_parse_call_math.c
      uses function alloc_sname(const char *) defined in smatch_slist.c
   function match_alloc(const char *,struct expression *,void *) in line 418
      protection public
      15 lines of code
      3 parameters
      2 conditional paths
      uses variable sm_state::right defined in smatch.h
      uses function strip_expr(struct expression *) defined in smatch.h
      uses variable expression::right defined in expression.h
      uses function get_argument_from_call_expr(struct expression_list *,int) defined in smatch.h
      uses function format_expr(struct expression *) defined in smatch_parse_call_math.c
      uses function set_state_expr(int,struct expression *,struct smatch_state *) defined in smatch.h
      uses variable my_id defined in smatch_parse_call_math.c
      uses variable expression::left defined in expression.h
      uses function alloc_state_sname(char *) defined in smatch_parse_call_math.c
   function swap_format(struct expression *,char *) in line 434
      protection public
      52 lines of code
      2 parameters
      11 conditional paths
      uses variable buf defined in sm_fake_assignment.c
      uses variable param defined in smatch_parse_call_math.c
      uses variable p defined in cond_expr2.c
      uses macro definition NULL defined in sm_implied3.c
      uses function get_argument_from_call_expr(struct expression_list *,int) defined in smatch.h
      uses variable expression::args defined in expression.h
      uses function format_expr(struct expression *) defined in smatch_parse_call_math.c
      uses function get_arg_number(struct expression *) defined in smatch_parse_call_math.c
      uses function snprintf(char *,int,char *,char *) defined in sm_overflow6.c
      uses function get_implied_value(struct expression *,sval_t *) defined in smatch.h
      uses function sval_to_str(sval_t) defined in smatch.h
      uses function alloc_sname(const char *) defined in smatch_slist.c
   function db_buf_size_callback(void *,int,char **,char **) in line 488
      protection public
      11 lines of code
      4 parameters
      4 conditional paths
      uses variable buf_size_recipe defined in smatch_parse_call_math.c
      uses function alloc_sname(const char *) defined in smatch_slist.c
   function get_allocation_recipe_from_call(struct expression *) in line 500
      protection public
      41 lines of code
      1 parameters
      8 conditional paths
      uses variable sm_state::sym defined in smatch.h
      uses function is_fake_call(struct expression *) defined in smatch_extra.h
      uses macro definition NULL defined in sm_implied3.c
      uses function strip_expr(struct expression *) defined in smatch.h
      uses variable expression::fn defined in expression.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_SYMBOL defined in expression.h
      uses variable expression::symbol defined in expression.h
      uses macro definition ARRAY_SIZE defined in lib.h
      uses variable alloc_functions defined in smatch_parse_call_math.c
      uses variable symbol::ident defined in struct.c
      uses variable ident::name defined in token.h
      uses variable buf defined in sm_fake_assignment.c
      uses function snprintf(char *,int,char *,char *) defined in sm_overflow6.c
      uses variable param defined in smatch_parse_call_math.c
      uses variable buf_size_recipe defined in smatch_parse_call_math.c
      uses function alloc_sname(const char *) defined in smatch_slist.c
      uses function swap_format(struct expression *,char *) defined in smatch_parse_call_math.c
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::modifiers defined in struct.c
      uses macro definition MOD_STATIC defined in symbol.h
      uses function get_filename(void) defined in smatch.h
      uses macro definition run_sql defined in smatch.h
      uses function db_buf_size_callback(void *,int,char **,char **) defined in smatch_parse_call_math.c
      uses enumvalue BUF_SIZE defined in smatch.h
   function match_call_assignment(struct expression *) in line 542
      protection public
      9 lines of code
      1 parameters
      2 conditional paths
      uses function get_allocation_recipe_from_call(struct expression *) defined in smatch_parse_call_math.c
      uses variable expression::right defined in expression.h
      uses function set_state_expr(int,struct expression *,struct smatch_state *) defined in smatch.h
      uses variable my_id defined in smatch_parse_call_math.c
      uses variable expression::left defined in expression.h
      uses function alloc_state_sname(char *) defined in smatch_parse_call_math.c
   function match_returns_call(int,char *,struct expression *) in line 552
      protection public
      13 lines of code
      3 parameters
      3 conditional paths
      uses function get_allocation_recipe_from_call(struct expression *) defined in smatch_parse_call_math.c
      uses variable option_debug defined in smatch.h
      uses macro definition sm_msg defined in smatch.h
      uses function sql_insert_return_states(int,const char *,int,int,const char *,const char *) defined in smatch.h
      uses enumvalue BUF_SIZE defined in smatch.h
   function print_returned_allocations(int,char *,struct expression *) in line 566
      protection public
      28 lines of code
      3 parameters
      7 conditional paths
      uses variable sm_state::state defined in smatch.h
      uses variable sm_state::sym defined in smatch.h
      uses variable sm_state::name defined in smatch.h
      uses function strip_expr(struct expression *) defined in smatch.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_CALL defined in expression.h
      uses function match_returns_call(int,char *,struct expression *) defined in smatch_parse_call_math.c
      uses function expr_to_var_sym(struct expression *,struct symbol **) defined in smatch.h
      uses function get_state(int,const char *,struct symbol *) defined in smatch.h
      uses variable my_id defined in smatch_parse_call_math.c
      uses variable smatch_state::data defined in smatch.h
      uses function sql_insert_return_states(int,const char *,int,int,const char *,const char *) defined in smatch.h
      uses enumvalue BUF_SIZE defined in smatch.h
      uses variable smatch_state::name defined in smatch.h
      uses function free_string(char *) defined in smatch.h
   function register_parse_call_math(int) in line 595
      protection public
      12 lines of code
      1 parameters
      2 conditional paths
      uses variable my_id defined in smatch_parse_call_math.c
      uses macro definition ARRAY_SIZE defined in lib.h
      uses variable alloc_functions defined in smatch_parse_call_math.c
      uses function add_function_assign_hook(const char *,func_hook *,void *) defined in smatch.h
      uses variable func defined in smatch_parse_call_math.c
      uses function match_alloc(const char *,struct expression *,void *) defined in smatch_parse_call_math.c
      uses variable param defined in smatch_parse_call_math.c
      uses function add_hook(void *,enum hook_type) defined in smatch.h
      uses function match_call_assignment(struct expression *) defined in smatch_parse_call_math.c
      uses enumvalue CALL_ASSIGNMENT_HOOK defined in smatch.h
      uses function add_split_return_callback(void(*)(int return_id, char *return_ranges, struct expression *returned_expr)) defined in smatch.h
      uses function print_returned_allocations(int,char *,struct expression *) defined in smatch_parse_call_math.c
   variable @140::func in line 25
      protection public
   variable @140::param in line 26
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/smatch_project.c
module smatch_project.c
   variable silenced_funcs in line 31
      protection public
   variable no_inline_funcs in line 32
      protection public
   function DEFINE_HASHTABLE_INSERT(insert_func,char,int) in line 29
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function DEFINE_HASHTABLE_SEARCH(search_func,char,int) in line 30
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function is_silenced_function(void) in line 34
      protection public
      11 lines of code
      1 parameters
      3 conditional paths
      uses macro definition func defined in preprocessor1.c
      uses function get_function(void) defined in smatch.h
      uses variable silenced_funcs defined in smatch_project.c
   function is_no_inline_function(const char *) in line 46
      protection public
      6 lines of code
      1 parameters
      2 conditional paths
      uses variable no_inline_funcs defined in smatch_project.c
   function register_no_return_funcs(void) in line 53
      protection public
      26 lines of code
      1 parameters
      6 conditional paths
      uses macro definition func defined in preprocessor1.c
      uses variable name defined in smatch_type.c
      uses variable option_project defined in smatch.c
      uses enumvalue PROJ_NONE defined in smatch.h
      uses function strcpy(char *,char *,int) defined in sm_overflow3.c
      uses function snprintf(char *,int,char *,char *) defined in sm_overflow6.c
      uses variable option_project_str defined in smatch.c
      uses function get_tokens_file(const char *) defined in smatch.h
      uses enumvalue TOKEN_STREAMBEGIN defined in token.h
      uses variable token::next defined in token.h
      uses enumvalue TOKEN_STREAMEND defined in token.h
      uses enumvalue TOKEN_IDENT defined in token.h
      uses function show_ident(const struct ident *) defined in token.h
      uses variable token::ident defined in token.h
      uses function add_function_hook(const char *,func_hook *,void *) defined in smatch.h
      uses function __match_nullify_path_hook(const char *,struct expression *,void *) defined in smatch.h
      uses macro definition NULL defined in sm_implied3.c
   function register_ignored_macros(void) in line 80
      protection public
      26 lines of code
      1 parameters
      6 conditional paths
      uses variable name defined in smatch_type.c
      uses variable option_project defined in smatch.c
      uses enumvalue PROJ_NONE defined in smatch.h
      uses function strcpy(char *,char *,int) defined in sm_overflow3.c
      uses function snprintf(char *,int,char *,char *) defined in sm_overflow6.c
      uses variable option_project_str defined in smatch.c
      uses function get_tokens_file(const char *) defined in smatch.h
      uses enumvalue TOKEN_STREAMBEGIN defined in token.h
      uses variable token::next defined in token.h
      uses enumvalue TOKEN_STREAMEND defined in token.h
      uses enumvalue TOKEN_IDENT defined in token.h
      uses function alloc_string(const char *) defined in smatch.h
      uses function show_ident(const struct ident *) defined in token.h
      uses variable token::ident defined in token.h
      uses macro definition add_ptr_list defined in ptrlist.h
      uses variable __ignored_macros defined in smatch_extra.c
   function register_silenced_functions(void) in line 107
      protection public
      28 lines of code
      1 parameters
      6 conditional paths
      uses macro definition func defined in preprocessor1.c
      uses variable name defined in smatch_type.c
      uses variable silenced_funcs defined in smatch_project.c
      uses variable option_project defined in smatch.c
      uses enumvalue PROJ_NONE defined in smatch.h
      uses function snprintf(char *,int,char *,char *) defined in sm_overflow6.c
      uses variable option_project_str defined in smatch.c
      uses function get_tokens_file(const char *) defined in smatch.h
      uses enumvalue TOKEN_STREAMBEGIN defined in token.h
      uses variable token::next defined in token.h
      uses enumvalue TOKEN_STREAMEND defined in token.h
      uses enumvalue TOKEN_IDENT defined in token.h
      uses function alloc_string(const char *) defined in smatch.h
      uses function show_ident(const struct ident *) defined in token.h
      uses variable token::ident defined in token.h
   function register_no_inline_functions(void) in line 136
      protection public
      28 lines of code
      1 parameters
      6 conditional paths
      uses macro definition func defined in preprocessor1.c
      uses variable name defined in smatch_type.c
      uses variable no_inline_funcs defined in smatch_project.c
      uses variable option_project defined in smatch.c
      uses enumvalue PROJ_NONE defined in smatch.h
      uses function snprintf(char *,int,char *,char *) defined in sm_overflow6.c
      uses variable option_project_str defined in smatch.c
      uses function get_tokens_file(const char *) defined in smatch.h
      uses enumvalue TOKEN_STREAMBEGIN defined in token.h
      uses variable token::next defined in token.h
      uses enumvalue TOKEN_STREAMEND defined in token.h
      uses enumvalue TOKEN_IDENT defined in token.h
      uses function alloc_string(const char *) defined in smatch.h
      uses function show_ident(const struct ident *) defined in token.h
      uses variable token::ident defined in token.h
   function register_project(int) in line 165
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses function register_no_return_funcs(void) defined in smatch_project.c
      uses function register_ignored_macros(void) defined in smatch_project.c
      uses function register_silenced_functions(void) defined in smatch_project.c
      uses function register_no_inline_functions(void) defined in smatch_project.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/smatch_ranges.c
module smatch_ranges.c
   function ALLOCATOR(data_info,"smatch extra data") in line 23
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function ALLOCATOR(data_range,"data range") in line 24
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function __DO_ALLOCATOR(struct data_range,sizeof(struct data_range),__alignof__(struct data_range),"permanent ranges",perm_data_range) in line 25
      protection public
      1 lines of code
      5 parameters
      1 conditional paths
   function show_rl(struct range_list *) in line 28
      protection public
      21 lines of code
      1 parameters
      3 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses function strlen(char *) defined in sm_overflow6.c
      uses function sval_cmp(sval_t,sval_t) defined in smatch.h
      uses variable data_range::min defined in smatch.h
      uses variable data_range::max defined in smatch.h
      uses function sval_to_str(sval_t) defined in smatch.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses function alloc_sname(const char *) defined in smatch_slist.c
   function sval_too_big(struct symbol *,sval_t) in line 50
      protection public
      8 lines of code
      2 parameters
      3 conditional paths
      uses function type_bits(struct symbol *) defined in smatch.h
      uses variable sval_t::uvalue defined in smatch.h
   function add_range_t(struct symbol *,struct range_list **,sval_t,sval_t) in line 59
      protection public
      56 lines of code
      4 parameters
      9 conditional paths
      uses function sval_cmp(sval_t,sval_t) defined in smatch.h
      uses macro definition min defined in sm_select_assign.c
      uses variable data_range::max defined in smatch.h
      uses function add_range(struct range_list **,sval_t,sval_t) defined in smatch_ranges.c
      uses function sval_cast(struct symbol *,sval_t) defined in smatch.h
      uses function sval_fits(struct symbol *,sval_t) defined in smatch.h
      uses function sval_too_big(struct symbol *,sval_t) defined in smatch_ranges.c
      uses function sval_type_min(struct symbol *) defined in smatch.h
      uses function sval_type_max(struct symbol *) defined in smatch.h
      uses function sval_is_negative(sval_t) defined in smatch.h
      uses function type_unsigned(struct symbol *) defined in smatch.h
      uses function sval_is_positive(sval_t) defined in smatch.h
      uses function sval_too_high(struct symbol *,sval_t) defined in smatch.h
      uses function sval_type_val(struct symbol *,long long) defined in smatch.h
      uses function sval_unsigned(sval_t) defined in smatch.h
   function str_to_comparison_arg_helper(const char *,struct expression *,int *,struct expression **,char **) in line 116
      protection public
      55 lines of code
      5 parameters
      12 conditional paths
      uses variable param defined in smatch_parse_call_math.c
      uses variable c defined in sm_array_overflow.c
      uses variable str defined in sm_overflow6.c
      uses enumvalue SPECIAL_LTE defined in token.h
      uses enumvalue SPECIAL_EQUAL defined in token.h
      uses enumvalue SPECIAL_GTE defined in token.h
      uses enumvalue SPECIAL_NOTEQUAL defined in token.h
      uses function get_argument_from_call_expr(struct expression_list *,int) defined in smatch.h
      uses variable expression::args defined in expression.h
   function str_to_comparison_arg(const char *,struct expression *,int *,struct expression **) in line 172
      protection public
      11 lines of code
      4 parameters
      4 conditional paths
      uses variable str defined in sm_overflow6.c
      uses function str_to_comparison_arg_helper(const char *,struct expression *,int *,struct expression **,char **) defined in smatch_ranges.c
      uses macro definition NULL defined in sm_implied3.c
   function get_val_from_key(int,struct symbol *,char *,struct expression *,char **,sval_t *) in line 184
      protection public
      34 lines of code
      6 parameters
      7 conditional paths
      uses function sval_type_max(struct symbol *) defined in smatch.h
      uses function sval_type_min(struct symbol *) defined in smatch.h
      uses function str_to_comparison_arg_helper(const char *,struct expression *,int *,struct expression **,char **) defined in smatch_ranges.c
      uses variable c defined in sm_array_overflow.c
      uses function get_implied_max(struct expression *,sval_t *) defined in smatch.h
      uses variable sval_t::value defined in smatch.h
      uses function sval_binop(sval_t,int,sval_t) defined in smatch.h
      uses function get_implied_min(struct expression *,sval_t *) defined in smatch.h
   function add_one(sval_t) in line 219
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable sval_t::value defined in smatch.h
   function sub_one(sval_t) in line 225
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable sval_t::value defined in smatch.h
   function filter_by_comparison(struct range_list **,int,struct range_list *) in line 231
      protection public
      55 lines of code
      3 parameters
      18 conditional paths
      uses macro definition min defined in sm_select_assign.c
      uses function rl_type(struct range_list *) defined in smatch_ranges.c
      uses function sval_type_max(struct symbol *) defined in smatch.h
      uses function sval_type_min(struct symbol *) defined in smatch.h
      uses function cast_rl(struct symbol *,struct range_list *) defined in smatch_ranges.c
      uses enumvalue SPECIAL_UNSIGNED_LT defined in token.h
      uses function remove_range(struct range_list *,sval_t,sval_t) defined in smatch_ranges.c
      uses function rl_max(struct range_list *) defined in smatch_ranges.c
      uses enumvalue SPECIAL_LTE defined in token.h
      uses enumvalue SPECIAL_UNSIGNED_LTE defined in token.h
      uses function sval_is_max(sval_t) defined in smatch.h
      uses function add_one(sval_t) defined in smatch_ranges.c
      uses enumvalue SPECIAL_EQUAL defined in token.h
      uses function sval_is_min(sval_t) defined in smatch.h
      uses function rl_min(struct range_list *) defined in smatch_ranges.c
      uses function sub_one(sval_t) defined in smatch_ranges.c
      uses enumvalue SPECIAL_GTE defined in token.h
      uses enumvalue SPECIAL_UNSIGNED_GTE defined in token.h
      uses enumvalue SPECIAL_UNSIGNED_GT defined in token.h
      uses enumvalue SPECIAL_NOTEQUAL defined in token.h
      uses function sval_cmp(sval_t,sval_t) defined in smatch.h
      uses macro definition sm_msg defined in smatch.h
      uses function show_special(int) defined in token.h
   function filter_by_comparison_call(char *,struct expression *,char **,struct range_list *) in line 287
      protection public
      15 lines of code
      4 parameters
      3 conditional paths
      uses function str_to_comparison_arg_helper(const char *,struct expression *,int *,struct expression **,char **) defined in smatch_ranges.c
      uses variable c defined in sm_array_overflow.c
      uses macro definition NULL defined in sm_implied3.c
      uses function get_implied_rl(struct expression *,struct range_list **) defined in smatch_extra.h
      uses function filter_by_comparison(struct range_list **,int,struct range_list *) defined in smatch_ranges.c
   function parse_val(int,struct expression *,struct symbol *,char *,char **) in line 303
      protection public
      59 lines of code
      5 parameters
      17 conditional paths
      uses variable c defined in sm_array_overflow.c
      uses function sval_type_max(struct symbol *) defined in smatch.h
      uses function sval_type_val(struct symbol *,long long) defined in smatch.h
      uses macro definition ULLONG_MAX defined in expression.c
      uses function sval_type_min(struct symbol *) defined in smatch.h
      uses variable valid_ptr_max defined in smatch.h
      uses function get_val_from_key(int,struct symbol *,char *,struct expression *,char **,sval_t *) defined in smatch_ranges.c
   function jump_to_call_math(char *) in line 363
      protection public
      15 lines of code
      1 parameters
      4 conditional paths
      uses variable c defined in sm_array_overflow.c
      uses macro definition NULL defined in sm_implied3.c
   function str_to_rl_helper(struct expression *,struct symbol *,char *,char **,struct range_list **) in line 379
      protection public
      43 lines of code
      5 parameters
      10 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses macro definition min defined in sm_select_assign.c
      uses variable c defined in sm_array_overflow.c
      uses function sval_type_min(struct symbol *) defined in smatch.h
      uses function sval_type_max(struct symbol *) defined in smatch.h
      uses variable str defined in sm_overflow6.c
      uses function parse_val(int,struct expression *,struct symbol *,char *,char **) defined in smatch_ranges.c
      uses function add_range_t(struct symbol *,struct range_list **,sval_t,sval_t) defined in smatch_ranges.c
      uses macro definition sm_msg defined in smatch.h
   function str_to_dinfo(struct expression *,struct symbol *,char *,struct data_info *) in line 423
      protection public
      47 lines of code
      4 parameters
      13 conditional paths
      uses variable c defined in sm_array_overflow.c
      uses macro definition NULL defined in sm_implied3.c
      uses function str_to_comparison_arg(const char *,struct expression *,int *,struct expression **) defined in smatch_ranges.c
      uses function get_implied_rl(struct expression *,struct range_list **) defined in smatch_extra.h
      uses function str_to_rl_helper(struct expression *,struct symbol *,char *,char **,struct range_list **) defined in smatch_ranges.c
      uses function jump_to_call_math(char *) defined in smatch_ranges.c
      uses function parse_call_math_rl(struct expression *,char *,struct range_list **) defined in smatch.h
      uses function rl_intersection(struct range_list *,struct range_list *) defined in smatch_ranges.c
      uses function filter_by_comparison_call(char *,struct expression *,char **,struct range_list *) defined in smatch_ranges.c
      uses function cast_rl(struct symbol *,struct range_list *) defined in smatch_ranges.c
      uses variable data_info::value_ranges defined in smatch_extra.h
   function str_to_rl(struct symbol *,char *,struct range_list **) in line 471
      protection public
      7 lines of code
      3 parameters
      1 conditional paths
      uses function str_to_dinfo(struct expression *,struct symbol *,char *,struct data_info *) defined in smatch_ranges.c
      uses macro definition NULL defined in sm_implied3.c
      uses variable data_info::value_ranges defined in smatch_extra.h
   function call_results_to_rl(struct expression *,struct symbol *,char *,struct range_list **) in line 479
      protection public
      7 lines of code
      4 parameters
      1 conditional paths
      uses function str_to_dinfo(struct expression *,struct symbol *,char *,struct data_info *) defined in smatch_ranges.c
      uses function strip_expr(struct expression *) defined in smatch.h
      uses variable data_info::value_ranges defined in smatch_extra.h
   function is_whole_rl(struct range_list *) in line 487
      protection public
      11 lines of code
      1 parameters
      3 conditional paths
      uses macro definition ptr_list_empty defined in ptrlist.h
      uses function sval_is_min(sval_t) defined in smatch.h
      uses variable data_range::min defined in smatch.h
      uses function sval_is_max(sval_t) defined in smatch.h
      uses variable data_range::max defined in smatch.h
   function rl_min(struct range_list *) in line 499
      protection public
      12 lines of code
      1 parameters
      2 conditional paths
      uses variable sval_t::type defined in smatch.h
      uses variable sval_t::value defined in smatch.h
      uses macro definition ptr_list_empty defined in ptrlist.h
      uses variable data_range::min defined in smatch.h
   function rl_max(struct range_list *) in line 512
      protection public
      12 lines of code
      1 parameters
      2 conditional paths
      uses variable sval_t::type defined in smatch.h
      uses variable sval_t::value defined in smatch.h
      uses macro definition ptr_list_empty defined in ptrlist.h
      uses variable data_range::max defined in smatch.h
   function rl_to_sval(struct range_list *,sval_t *) in line 525
      protection public
      14 lines of code
      2 parameters
      3 conditional paths
      uses macro definition min defined in sm_select_assign.c
      uses variable data_range::max defined in smatch.h
      uses function rl_min(struct range_list *) defined in smatch_ranges.c
      uses function rl_max(struct range_list *) defined in smatch_ranges.c
      uses function sval_cmp(sval_t,sval_t) defined in smatch.h
   function rl_type(struct range_list *) in line 540
      protection public
      6 lines of code
      1 parameters
      2 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses function rl_min(struct range_list *) defined in smatch_ranges.c
      uses variable sval_t::type defined in smatch.h
   function alloc_range_helper_sval(sval_t,sval_t,int) in line 547
      protection public
      12 lines of code
      3 parameters
      2 conditional paths
      uses variable data_range::min defined in smatch.h
      uses macro definition min defined in sm_select_assign.c
      uses variable data_range::max defined in smatch.h
   function alloc_range(sval_t,sval_t) in line 560
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function alloc_range_helper_sval(sval_t,sval_t,int) defined in smatch_ranges.c
      uses macro definition min defined in sm_select_assign.c
      uses variable data_range::max defined in smatch.h
   function alloc_range_perm(sval_t,sval_t) in line 565
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function alloc_range_helper_sval(sval_t,sval_t,int) defined in smatch_ranges.c
      uses macro definition min defined in sm_select_assign.c
      uses variable data_range::max defined in smatch.h
   function alloc_rl(sval_t,sval_t) in line 570
      protection public
      10 lines of code
      2 parameters
      2 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses function sval_cmp(sval_t,sval_t) defined in smatch.h
      uses macro definition min defined in sm_select_assign.c
      uses function alloc_whole_rl(struct symbol *) defined in smatch_ranges.c
      uses function add_range(struct range_list **,sval_t,sval_t) defined in smatch_ranges.c
   function alloc_whole_rl(struct symbol *) in line 581
      protection public
      9 lines of code
      1 parameters
      3 conditional paths
      uses function type_positive_bits(struct symbol *) defined in smatch.h
      uses enumvalue SYM_ARRAY defined in symbol.h
      uses function alloc_rl(sval_t,sval_t) defined in smatch_ranges.c
      uses function sval_type_min(struct symbol *) defined in smatch.h
      uses function sval_type_max(struct symbol *) defined in smatch.h
   function add_range(struct range_list **,sval_t,sval_t) in line 591
      protection public
      88 lines of code
      3 parameters
      15 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses function sval_cmp(sval_t,sval_t) defined in smatch.h
      uses macro definition min defined in sm_select_assign.c
      uses variable data_range::max defined in smatch.h
      uses function sval_type_min(struct symbol *) defined in smatch.h
      uses function sval_type_max(struct symbol *) defined in smatch.h
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses function sval_is_max(sval_t) defined in smatch.h
      uses variable sval_t::value defined in smatch.h
      uses variable data_range::min defined in smatch.h
      uses macro definition DELETE_CURRENT_PTR defined in ptrlist.h
      uses function alloc_range(sval_t,sval_t) defined in smatch_ranges.c
      uses macro definition REPLACE_CURRENT_PTR defined in ptrlist.h
      uses macro definition INSERT_CURRENT defined in ptrlist.h
      uses function sval_is_min(sval_t) defined in smatch.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses macro definition add_ptr_list defined in ptrlist.h
   function clone_rl(struct range_list *) in line 680
      protection public
      10 lines of code
      1 parameters
      1 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses macro definition add_ptr_list defined in ptrlist.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function clone_rl_permanent(struct range_list *) in line 691
      protection public
      12 lines of code
      1 parameters
      1 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses function alloc_range_perm(sval_t,sval_t) defined in smatch_ranges.c
      uses variable data_range::min defined in smatch.h
      uses variable data_range::max defined in smatch.h
      uses macro definition add_ptr_list defined in ptrlist.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function rl_union(struct range_list *,struct range_list *) in line 704
      protection public
      13 lines of code
      2 parameters
      1 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable one defined in sm_equiv1.c
      uses function add_range(struct range_list **,sval_t,sval_t) defined in smatch_ranges.c
      uses variable data_range::min defined in smatch.h
      uses variable data_range::max defined in smatch.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses variable two defined in sm_equiv1.c
   function remove_range(struct range_list *,sval_t,sval_t) in line 718
      protection public
      31 lines of code
      3 parameters
      6 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses function sval_cmp(sval_t,sval_t) defined in smatch.h
      uses variable data_range::max defined in smatch.h
      uses macro definition min defined in sm_select_assign.c
      uses function add_range(struct range_list **,sval_t,sval_t) defined in smatch_ranges.c
      uses variable data_range::min defined in smatch.h
      uses variable sval_t::value defined in smatch.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function ranges_equiv(struct data_range *,struct data_range *) in line 750
      protection public
      12 lines of code
      2 parameters
      5 conditional paths
      uses variable one defined in sm_equiv1.c
      uses variable two defined in sm_equiv1.c
      uses function sval_cmp(sval_t,sval_t) defined in smatch.h
   function rl_equiv(struct range_list *,struct range_list *) in line 763
      protection public
      23 lines of code
      2 parameters
      5 conditional paths
      uses variable one defined in sm_equiv1.c
      uses variable two defined in sm_equiv1.c
      uses macro definition PREPARE_PTR_LIST defined in ptrlist.h
      uses function ranges_equiv(struct data_range *,struct data_range *) defined in smatch_ranges.c
      uses macro definition NEXT_PTR_LIST defined in ptrlist.h
      uses macro definition FINISH_PTR_LIST defined in ptrlist.h
   function true_comparison_range(struct data_range *,int,struct data_range *) in line 787
      protection public
      43 lines of code
      3 parameters
      20 conditional paths
      uses enumvalue SPECIAL_UNSIGNED_LT defined in token.h
      uses function sval_cmp(sval_t,sval_t) defined in smatch.h
      uses variable data_range::min defined in smatch.h
      uses variable data_range::max defined in smatch.h
      uses enumvalue SPECIAL_UNSIGNED_LTE defined in token.h
      uses enumvalue SPECIAL_LTE defined in token.h
      uses enumvalue SPECIAL_EQUAL defined in token.h
      uses enumvalue SPECIAL_UNSIGNED_GTE defined in token.h
      uses enumvalue SPECIAL_GTE defined in token.h
      uses enumvalue SPECIAL_UNSIGNED_GT defined in token.h
      uses enumvalue SPECIAL_NOTEQUAL defined in token.h
      uses macro definition sm_msg defined in smatch.h
   function true_comparison_range_LR(int,struct data_range *,struct data_range *,int) in line 831
      protection public
      7 lines of code
      4 parameters
      2 conditional paths
      uses function true_comparison_range(struct data_range *,int,struct data_range *) defined in smatch_ranges.c
   function false_comparison_range_sval(struct data_range *,int,struct data_range *) in line 839
      protection public
      43 lines of code
      3 parameters
      20 conditional paths
      uses enumvalue SPECIAL_UNSIGNED_LT defined in token.h
      uses function sval_cmp(sval_t,sval_t) defined in smatch.h
      uses variable data_range::max defined in smatch.h
      uses variable data_range::min defined in smatch.h
      uses enumvalue SPECIAL_UNSIGNED_LTE defined in token.h
      uses enumvalue SPECIAL_LTE defined in token.h
      uses enumvalue SPECIAL_EQUAL defined in token.h
      uses enumvalue SPECIAL_UNSIGNED_GTE defined in token.h
      uses enumvalue SPECIAL_GTE defined in token.h
      uses enumvalue SPECIAL_UNSIGNED_GT defined in token.h
      uses enumvalue SPECIAL_NOTEQUAL defined in token.h
      uses macro definition sm_msg defined in smatch.h
   function false_comparison_range_LR(int,struct data_range *,struct data_range *,int) in line 883
      protection public
      7 lines of code
      4 parameters
      2 conditional paths
      uses function false_comparison_range_sval(struct data_range *,int,struct data_range *) defined in smatch_ranges.c
   function possibly_true(struct expression *,int,struct expression *) in line 891
      protection public
      28 lines of code
      3 parameters
      6 conditional paths
      uses function get_implied_rl(struct expression *,struct range_list **) defined in smatch_extra.h
      uses function rl_type(struct range_list *) defined in smatch_ranges.c
      uses function type_positive_bits(struct symbol *) defined in smatch.h
      uses function cast_rl(struct symbol *,struct range_list *) defined in smatch_ranges.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses function true_comparison_range(struct data_range *,int,struct data_range *) defined in smatch_ranges.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function possibly_false(struct expression *,int,struct expression *) in line 920
      protection public
      28 lines of code
      3 parameters
      6 conditional paths
      uses function get_implied_rl(struct expression *,struct range_list **) defined in smatch_extra.h
      uses function rl_type(struct range_list *) defined in smatch_ranges.c
      uses function type_positive_bits(struct symbol *) defined in smatch.h
      uses function cast_rl(struct symbol *,struct range_list *) defined in smatch_ranges.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses function false_comparison_range_sval(struct data_range *,int,struct data_range *) defined in smatch_ranges.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function possibly_true_rl(struct range_list *,int,struct range_list *) in line 949
      protection public
      25 lines of code
      3 parameters
      5 conditional paths
      uses function rl_type(struct range_list *) defined in smatch_ranges.c
      uses function type_positive_bits(struct symbol *) defined in smatch.h
      uses function cast_rl(struct symbol *,struct range_list *) defined in smatch_ranges.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses function true_comparison_range(struct data_range *,int,struct data_range *) defined in smatch_ranges.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function possibly_false_rl(struct range_list *,int,struct range_list *) in line 975
      protection public
      25 lines of code
      3 parameters
      5 conditional paths
      uses function rl_type(struct range_list *) defined in smatch_ranges.c
      uses function type_positive_bits(struct symbol *) defined in smatch.h
      uses function cast_rl(struct symbol *,struct range_list *) defined in smatch_ranges.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses function false_comparison_range_sval(struct data_range *,int,struct data_range *) defined in smatch_ranges.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function possibly_true_rl_LR(int,struct range_list *,struct range_list *,int) in line 1002
      protection public
      7 lines of code
      4 parameters
      2 conditional paths
      uses function possibly_true_rl(struct range_list *,int,struct range_list *) defined in smatch_ranges.c
   function possibly_false_rl_LR(int,struct range_list *,struct range_list *,int) in line 1010
      protection public
      7 lines of code
      4 parameters
      2 conditional paths
      uses function possibly_false_rl(struct range_list *,int,struct range_list *) defined in smatch_ranges.c
   function rl_has_sval(struct range_list *,sval_t) in line 1018
      protection public
      11 lines of code
      2 parameters
      2 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses function sval_cmp(sval_t,sval_t) defined in smatch.h
      uses variable data_range::min defined in smatch.h
      uses variable data_range::max defined in smatch.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function tack_on(struct range_list **,struct data_range *) in line 1030
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses macro definition add_ptr_list defined in ptrlist.h
   function push_rl(struct range_list_stack **,struct range_list *) in line 1035
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses macro definition add_ptr_list defined in ptrlist.h
   function pop_rl(struct range_list_stack **) in line 1040
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses function delete_ptr_list_last(struct ptr_list **) defined in ptrlist.c
   function top_rl(struct range_list_stack *) in line 1049
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
   function filter_top_rl(struct range_list_stack **,sval_t,sval_t) in line 1057
      protection public
      8 lines of code
      3 parameters
      1 conditional paths
      uses function pop_rl(struct range_list_stack **) defined in smatch_ranges.c
      uses function remove_range(struct range_list *,sval_t,sval_t) defined in smatch_ranges.c
      uses function push_rl(struct range_list_stack **,struct range_list *) defined in smatch_ranges.c
   function rl_truncate_cast(struct symbol *,struct range_list *) in line 1066
      protection public
      28 lines of code
      2 parameters
      5 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses macro definition min defined in sm_select_assign.c
      uses function rl_type(struct range_list *) defined in smatch_ranges.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable data_range::min defined in smatch.h
      uses variable data_range::max defined in smatch.h
      uses function type_bits(struct symbol *) defined in smatch.h
      uses variable sval_t::uvalue defined in smatch.h
      uses function sval_cmp(sval_t,sval_t) defined in smatch.h
      uses function sval_cast(struct symbol *,sval_t) defined in smatch.h
      uses function add_range_t(struct symbol *,struct range_list **,sval_t,sval_t) defined in smatch_ranges.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function rl_is_sane(struct range_list *) in line 1095
      protection public
      17 lines of code
      1 parameters
      4 conditional paths
      uses function rl_type(struct range_list *) defined in smatch_ranges.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses function sval_fits(struct symbol *,sval_t) defined in smatch.h
      uses variable data_range::min defined in smatch.h
      uses variable data_range::max defined in smatch.h
      uses function sval_cmp(sval_t,sval_t) defined in smatch.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function rl_type_consistent(struct range_list *) in line 1113
      protection public
      12 lines of code
      1 parameters
      2 conditional paths
      uses function rl_type(struct range_list *) defined in smatch_ranges.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable data_range::min defined in smatch.h
      uses variable sval_t::type defined in smatch.h
      uses variable data_range::max defined in smatch.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function cast_rl(struct symbol *,struct range_list *) in line 1126
      protection public
      24 lines of code
      2 parameters
      6 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses function rl_is_sane(struct range_list *) defined in smatch_ranges.c
      uses function alloc_whole_rl(struct symbol *) defined in smatch_ranges.c
      uses function rl_type(struct range_list *) defined in smatch_ranges.c
      uses function rl_type_consistent(struct range_list *) defined in smatch_ranges.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses function add_range_t(struct symbol *,struct range_list **,sval_t,sval_t) defined in smatch_ranges.c
      uses variable data_range::min defined in smatch.h
      uses variable data_range::max defined in smatch.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function rl_invert(struct range_list *) in line 1151
      protection public
      27 lines of code
      1 parameters
      5 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses function sval_type_min(struct symbol *) defined in smatch.h
      uses function rl_min(struct range_list *) defined in smatch_ranges.c
      uses function sval_type_max(struct symbol *) defined in smatch.h
      uses function rl_max(struct range_list *) defined in smatch_ranges.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses function sval_cmp(sval_t,sval_t) defined in smatch.h
      uses variable data_range::min defined in smatch.h
      uses function sval_type_val(struct symbol *,long long) defined in smatch.h
      uses variable sval_t::type defined in smatch.h
      uses variable sval_t::value defined in smatch.h
      uses function add_range(struct range_list **,sval_t,sval_t) defined in smatch_ranges.c
      uses variable data_range::max defined in smatch.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function rl_filter(struct range_list *,struct range_list *) in line 1179
      protection public
      10 lines of code
      2 parameters
      1 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses function remove_range(struct range_list *,sval_t,sval_t) defined in smatch_ranges.c
      uses variable data_range::min defined in smatch.h
      uses variable data_range::max defined in smatch.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function rl_intersection(struct range_list *,struct range_list *) in line 1190
      protection public
      48 lines of code
      2 parameters
      4 conditional paths
      uses variable two defined in sm_equiv1.c
      uses macro definition NULL defined in sm_implied3.c
      uses variable one defined in sm_equiv1.c
      uses function rl_type(struct range_list *) defined in smatch_ranges.c
      uses function type_bits(struct symbol *) defined in smatch.h
      uses function cast_rl(struct symbol *,struct range_list *) defined in smatch_ranges.c
      uses function rl_invert(struct range_list *) defined in smatch_ranges.c
      uses function rl_filter(struct range_list *,struct range_list *) defined in smatch_ranges.c
   function handle_mod_rl(struct range_list *,struct range_list *) in line 1239
      protection public
      19 lines of code
      2 parameters
      5 conditional paths
      uses function zero(void) defined in sm_impossible1.c
      uses function rl_max(struct range_list *) defined in smatch_ranges.c
      uses function sval_is_max(sval_t) defined in smatch.h
      uses variable sval_t::value defined in smatch.h
      uses macro definition NULL defined in sm_implied3.c
      uses function sval_is_negative(sval_t) defined in smatch.h
      uses function sval_cmp(sval_t,sval_t) defined in smatch.h
      uses function alloc_rl(sval_t,sval_t) defined in smatch_ranges.c
   function get_neg_rl(struct range_list *) in line 1259
      protection public
      25 lines of code
      1 parameters
      5 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses function sval_is_positive(sval_t) defined in smatch.h
      uses function rl_min(struct range_list *) defined in smatch_ranges.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable data_range::min defined in smatch.h
      uses variable data_range::max defined in smatch.h
      uses function alloc_range(sval_t,sval_t) defined in smatch_ranges.c
      uses function add_range(struct range_list **,sval_t,sval_t) defined in smatch_ranges.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function get_pos_rl(struct range_list *) in line 1285
      protection public
      25 lines of code
      1 parameters
      5 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses function sval_is_negative(sval_t) defined in smatch.h
      uses function rl_max(struct range_list *) defined in smatch_ranges.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable data_range::max defined in smatch.h
      uses function sval_is_positive(sval_t) defined in smatch.h
      uses variable data_range::min defined in smatch.h
      uses function add_range(struct range_list **,sval_t,sval_t) defined in smatch_ranges.c
      uses function alloc_range(sval_t,sval_t) defined in smatch_ranges.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function divide_rl_helper(struct range_list *,struct range_list *) in line 1311
      protection public
      23 lines of code
      2 parameters
      5 conditional paths
      uses macro definition min defined in sm_select_assign.c
      uses macro definition NULL defined in sm_implied3.c
      uses function rl_min(struct range_list *) defined in smatch_ranges.c
      uses function rl_max(struct range_list *) defined in smatch_ranges.c
      uses variable sval_t::value defined in smatch.h
      uses function sval_binop(sval_t,int,sval_t) defined in smatch.h
      uses function alloc_rl(sval_t,sval_t) defined in smatch_ranges.c
   function handle_divide_rl(struct range_list *,struct range_list *) in line 1335
      protection public
      23 lines of code
      2 parameters
      2 conditional paths
      uses function is_whole_rl(struct range_list *) defined in smatch_ranges.c
      uses macro definition NULL defined in sm_implied3.c
      uses function get_neg_rl(struct range_list *) defined in smatch_ranges.c
      uses function get_pos_rl(struct range_list *) defined in smatch_ranges.c
      uses function divide_rl_helper(struct range_list *,struct range_list *) defined in smatch_ranges.c
      uses function rl_union(struct range_list *,struct range_list *) defined in smatch_ranges.c
   function handle_add_mult_rl(struct range_list *,int,struct range_list *) in line 1359
      protection public
      14 lines of code
      3 parameters
      3 conditional paths
      uses macro definition min defined in sm_select_assign.c
      uses function sval_binop_overflows(sval_t,int,sval_t) defined in smatch.h
      uses function rl_min(struct range_list *) defined in smatch_ranges.c
      uses function op(void) defined in loop2.c
      uses macro definition NULL defined in sm_implied3.c
      uses function sval_binop(sval_t,int,sval_t) defined in smatch.h
      uses function rl_max(struct range_list *) defined in smatch_ranges.c
      uses function alloc_rl(sval_t,sval_t) defined in smatch_ranges.c
   function rl_bits_always_set(struct range_list *) in line 1374
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function sval_fls_mask(sval_t) defined in smatch.h
      uses function rl_min(struct range_list *) defined in smatch_ranges.c
   function rl_bits_maybe_set(struct range_list *) in line 1379
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function sval_fls_mask(sval_t) defined in smatch.h
      uses function rl_max(struct range_list *) defined in smatch_ranges.c
   function handle_OR_rl(struct range_list *,struct range_list *) in line 1384
      protection public
      21 lines of code
      2 parameters
      2 conditional paths
      uses macro definition min defined in sm_select_assign.c
      uses function rl_to_sval(struct range_list *,sval_t *) defined in smatch_ranges.c
      uses function sval_binop_overflows(sval_t,int,sval_t) defined in smatch.h
      uses function rl_max(struct range_list *) defined in smatch_ranges.c
      uses function rl_binop(struct range_list *,int,struct range_list *) defined in smatch_ranges.c
      uses function rl_bits_always_set(struct range_list *) defined in smatch_ranges.c
      uses function rl_bits_maybe_set(struct range_list *) defined in smatch_ranges.c
      uses variable sval_t::type defined in smatch.h
      uses variable sval_t::uvalue defined in smatch.h
      uses function cast_rl(struct symbol *,struct range_list *) defined in smatch_ranges.c
      uses function rl_type(struct range_list *) defined in smatch_ranges.c
      uses function alloc_rl(sval_t,sval_t) defined in smatch_ranges.c
   function handle_XOR_rl(struct range_list *,struct range_list *) in line 1406
      protection public
      18 lines of code
      2 parameters
      1 conditional paths
      uses function zero(void) defined in sm_impossible1.c
      uses function rl_bits_always_set(struct range_list *) defined in smatch_ranges.c
      uses function rl_bits_maybe_set(struct range_list *) defined in smatch_ranges.c
      uses function rl_min(struct range_list *) defined in smatch_ranges.c
      uses variable sval_t::uvalue defined in smatch.h
      uses function fls_mask(unsigned long long) defined in smatch.h
      uses function cast_rl(struct symbol *,struct range_list *) defined in smatch_ranges.c
      uses function rl_type(struct range_list *) defined in smatch_ranges.c
      uses function alloc_rl(sval_t,sval_t) defined in smatch_ranges.c
   function rl_binop(struct range_list *,int,struct range_list *) in line 1425
      protection public
      53 lines of code
      3 parameters
      16 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses function rl_type(struct range_list *) defined in smatch_ranges.c
      uses function sval_type_max(struct symbol *) defined in smatch.h
      uses function cast_rl(struct symbol *,struct range_list *) defined in smatch_ranges.c
      uses function alloc_whole_rl(struct symbol *) defined in smatch_ranges.c
      uses function rl_to_sval(struct range_list *,sval_t *) defined in smatch_ranges.c
      uses function sval_binop(sval_t,int,sval_t) defined in smatch.h
      uses function op(void) defined in loop2.c
      uses function alloc_rl(sval_t,sval_t) defined in smatch_ranges.c
      uses function handle_mod_rl(struct range_list *,struct range_list *) defined in smatch_ranges.c
      uses function handle_divide_rl(struct range_list *,struct range_list *) defined in smatch_ranges.c
      uses function handle_add_mult_rl(struct range_list *,int,struct range_list *) defined in smatch_ranges.c
      uses function handle_OR_rl(struct range_list *,struct range_list *) defined in smatch_ranges.c
      uses function handle_XOR_rl(struct range_list *,struct range_list *) defined in smatch_ranges.c
      uses enumvalue SPECIAL_RIGHTSHIFT defined in token.h
      uses enumvalue SPECIAL_LEFTSHIFT defined in token.h
   function free_rl(struct range_list **) in line 1479
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function __free_ptr_list(struct ptr_list **) defined in ptrlist.c
   function free_single_dinfo(struct data_info *) in line 1484
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function free_rl(struct range_list **) defined in smatch_ranges.c
      uses variable data_info::value_ranges defined in smatch_extra.h
   function free_dinfos(struct allocation_blob *) in line 1489
      protection public
      10 lines of code
      1 parameters
      2 conditional paths
      uses variable offset defined in sm_implied10.c
      uses function free_single_dinfo(struct data_info *) defined in smatch_ranges.c
      uses variable allocation_blob::data defined in allocate.h
   function free_data_info_allocs(void) in line 1500
      protection public
      18 lines of code
      1 parameters
      2 conditional paths
      uses variable allocator_struct::blobs defined in allocate.h
      uses macro definition NULL defined in sm_implied3.c
      uses variable allocator_struct::allocations defined in allocate.h
      uses variable allocator_struct::total_bytes defined in allocate.h
      uses variable allocator_struct::useful_bytes defined in allocate.h
      uses variable allocator_struct::freelist defined in allocate.h
      uses variable allocation_blob::next defined in allocate.h
      uses function free_dinfos(struct allocation_blob *) defined in smatch_ranges.c
      uses function blob_free(void *,unsigned long) defined in mmap-blob.c
      uses variable allocator_struct::chunking defined in allocate.h
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/smatch_real_absolute.c
module smatch_real_absolute.c
   variable my_id in line 37
      protection public
   function pre_merge_hook(struct sm_state *) in line 39
      protection public
      17 lines of code
      1 parameters
      3 conditional paths
      uses function get_state(int,const char *,struct symbol *) defined in smatch.h
      uses macro definition SMATCH_EXTRA defined in smatch.h
      uses variable sm_state::name defined in smatch.h
      uses variable sm_state::sym defined in smatch.h
      uses function estate_rl(struct smatch_state *) defined in smatch_estate.c
      uses variable my_id defined in smatch_real_absolute.c
      uses function set_state(int,const char *,struct symbol *,struct smatch_state *) defined in smatch.h
      uses function clone_estate(struct smatch_state *) defined in smatch_estate.c
      uses function rl_intersection(struct range_list *,struct range_list *) defined in smatch_extra.h
      uses function alloc_estate_rl(struct range_list *) defined in smatch_estate.c
      uses function clone_rl(struct range_list *) defined in smatch_extra.h
   function empty_state(struct sm_state *) in line 57
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function alloc_estate_empty(void) defined in smatch_estate.c
   function reset(struct sm_state *,struct expression *) in line 62
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function set_state(int,const char *,struct symbol *,struct smatch_state *) defined in smatch.h
      uses variable my_id defined in smatch_real_absolute.c
      uses variable sm_state::name defined in smatch.h
      uses variable sm_state::sym defined in smatch.h
      uses function alloc_estate_whole(struct symbol *) defined in smatch_estate.c
      uses function estate_type(struct smatch_state *) defined in smatch_estate.c
      uses variable sm_state::state defined in smatch.h
   function match_assign(struct expression *) in line 67
      protection public
      21 lines of code
      1 parameters
      4 conditional paths
      uses function is_fake_call(struct expression *) defined in smatch_extra.h
      uses variable expression::right defined in expression.h
      uses function get_real_absolute_rl(struct expression *,struct range_list **) defined in smatch_extra.h
      uses function get_type(struct expression *) defined in smatch.h
      uses variable expression::left defined in expression.h
      uses function cast_rl(struct symbol *,struct range_list *) defined in smatch_extra.h
      uses function sval_cmp(sval_t,sval_t) defined in smatch.h
      uses function rl_max(struct range_list *) defined in smatch_extra.h
      uses function sval_type_max(struct symbol *) defined in smatch.h
      uses function rl_min(struct range_list *) defined in smatch_extra.h
      uses function sval_type_min(struct symbol *) defined in smatch.h
      uses function set_state_expr(int,struct expression *,struct smatch_state *) defined in smatch.h
      uses variable my_id defined in smatch_real_absolute.c
      uses function alloc_estate_rl(struct range_list *) defined in smatch_estate.c
      uses function clone_rl(struct range_list *) defined in smatch_extra.h
   function get_real_absolute_state(struct expression *) in line 89
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function get_state_expr(int,struct expression *) defined in smatch.h
      uses variable my_id defined in smatch_real_absolute.c
   function register_real_absolute(int) in line 94
      protection public
      11 lines of code
      1 parameters
      1 conditional paths
      uses variable my_id defined in smatch_real_absolute.c
      uses function add_pre_merge_hook(int,void(*)(struct sm_state *sm)) defined in smatch.h
      uses function pre_merge_hook(struct sm_state *) defined in smatch_real_absolute.c
      uses function add_unmatched_state_hook(int,unmatched_func_t *) defined in smatch.h
      uses function empty_state(struct sm_state *) defined in smatch_real_absolute.c
      uses function add_merge_hook(int,merge_func_t *) defined in smatch.h
      uses function merge_estates(struct smatch_state *,struct smatch_state *) defined in smatch_estate.c
      uses function add_modification_hook(int,modification_hook *) defined in smatch.h
      uses function reset(struct sm_state *,struct expression *) defined in smatch_real_absolute.c
      uses function add_hook(void *,enum hook_type) defined in smatch.h
      uses function match_assign(struct expression *) defined in smatch_real_absolute.c
      uses enumvalue ASSIGNMENT_HOOK defined in smatch.h
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/smatch_recurse.c
module smatch_recurse.c
   macro definition RECURSE_LIMIT in line 20
      protection public
   function recurse(struct expression *,int(func)(struct expression *expr, void *p),void *,int) in line 22
      protection public
      91 lines of code
      4 parameters
      33 conditional paths
      uses macro definition func defined in preprocessor1.c
      uses variable param defined in smatch_parse_call_math.c
      uses macro definition RECURSE_LIMIT defined in smatch_recurse.c
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_PREOP defined in expression.h
      uses variable expression::unop defined in expression.h
      uses enumvalue EXPR_POSTOP defined in expression.h
      uses enumvalue EXPR_STATEMENT defined in expression.h
      uses enumvalue EXPR_LOGICAL defined in expression.h
      uses enumvalue EXPR_COMPARE defined in expression.h
      uses enumvalue EXPR_BINOP defined in expression.h
      uses enumvalue EXPR_COMMA defined in expression.h
      uses variable expression::left defined in expression.h
      uses variable expression::right defined in expression.h
      uses enumvalue EXPR_ASSIGNMENT defined in expression.h
      uses enumvalue EXPR_DEREF defined in expression.h
      uses variable expression::deref defined in expression.h
      uses enumvalue EXPR_SLICE defined in expression.h
      uses variable expression::base defined in expression.h
      uses enumvalue EXPR_CAST defined in expression.h
      uses enumvalue EXPR_FORCE_CAST defined in expression.h
      uses variable expression::cast_expression defined in expression.h
      uses enumvalue EXPR_SIZEOF defined in expression.h
      uses enumvalue EXPR_OFFSETOF defined in expression.h
      uses enumvalue EXPR_ALIGNOF defined in expression.h
      uses enumvalue EXPR_CONDITIONAL defined in expression.h
      uses enumvalue EXPR_SELECT defined in expression.h
      uses variable expression::conditional defined in expression.h
      uses variable expression::cond_true defined in expression.h
      uses variable expression::cond_false defined in expression.h
      uses enumvalue EXPR_CALL defined in expression.h
      uses enumvalue EXPR_INITIALIZER defined in expression.h
      uses enumvalue EXPR_IDENTIFIER defined in expression.h
      uses variable expression::ident_expression defined in expression.h
      uses enumvalue EXPR_INDEX defined in expression.h
      uses variable expression::idx_expression defined in expression.h
      uses enumvalue EXPR_POS defined in expression.h
      uses variable expression::init_expr defined in expression.h
      uses enumvalue EXPR_SYMBOL defined in expression.h
      uses enumvalue EXPR_STRING defined in expression.h
      uses enumvalue EXPR_VALUE defined in expression.h
   function has_symbol_helper(struct expression *,void *) in line 114
      protection public
      10 lines of code
      2 parameters
      3 conditional paths
      uses variable sym defined in smatch_type.c
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_SYMBOL defined in expression.h
      uses variable expression::symbol defined in expression.h
   function has_symbol(struct expression *,struct symbol *) in line 125
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function recurse(struct expression *,int(func)(struct expression *expr, void *p),void *,int) defined in smatch_recurse.c
      uses function has_symbol_helper(struct expression *,void *) defined in smatch_recurse.c
      uses variable sym defined in smatch_type.c
   function has_var_helper(struct expression *,void *) in line 136
      protection public
      24 lines of code
      2 parameters
      7 conditional paths
      uses variable expr_name_sym::name defined in smatch_recurse.c
      uses variable expr_name_sym::sym defined in smatch_recurse.c
      uses variable expr_name_sym::expr defined in smatch_recurse.c
      uses variable expression::type defined in expression.h
      uses variable expression::op defined in expression.h
      uses function expr_to_var_sym(struct expression *,struct symbol **) defined in smatch.h
      uses function free_string(char *) defined in smatch.h
   function has_variable(struct expression *,struct expression *) in line 161
      protection public
      14 lines of code
      2 parameters
      3 conditional paths
      uses variable expr_name_sym::expr defined in smatch_recurse.c
      uses variable expr_name_sym::name defined in smatch_recurse.c
      uses function expr_to_var_sym(struct expression *,struct symbol **) defined in smatch.h
      uses variable expr_name_sym::sym defined in smatch_recurse.c
      uses function recurse(struct expression *,int(func)(struct expression *expr, void *p),void *,int) defined in smatch_recurse.c
      uses function has_var_helper(struct expression *,void *) defined in smatch_recurse.c
      uses function free_string(char *) defined in smatch.h
   function has_inc_dec_helper(struct expression *,void *) in line 176
      protection public
      10 lines of code
      2 parameters
      4 conditional paths
      uses variable expr_name_sym::expr defined in smatch_recurse.c
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_PREOP defined in expression.h
      uses enumvalue EXPR_POSTOP defined in expression.h
      uses variable expression::op defined in expression.h
      uses enumvalue SPECIAL_INCREMENT defined in token.h
      uses enumvalue SPECIAL_DECREMENT defined in token.h
   function has_inc_dec(struct expression *) in line 187
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function recurse(struct expression *,int(func)(struct expression *expr, void *p),void *,int) defined in smatch_recurse.c
      uses variable expr_name_sym::expr defined in smatch_recurse.c
      uses function has_inc_dec_helper(struct expression *,void *) defined in smatch_recurse.c
      uses macro definition NULL defined in sm_implied3.c
   variable expr_name_sym::expr in line 131
      protection public
   variable expr_name_sym::name in line 132
      protection public
   variable expr_name_sym::sym in line 133
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/smatch_returns.c
module smatch_returns.c
   variable my_id in line 21
      protection public
   variable callback_list in line 28
      protection public
   variable all_return_states in line 30
      protection public
   variable saved_stack in line 31
      protection public
   function ALLOCATOR(return_states_callback,"return states callbacks") in line 26
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function DECLARE_PTR_LIST(callback_list,struct return_states_callback) in line 27
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function all_return_states_hook(void(*)(struct stree *stree)) in line 33
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses variable return_states_callback::callback defined in smatch_returns.c
      uses macro definition add_ptr_list defined in ptrlist.h
      uses variable callback_list defined in smatch_returns.c
   function call_hooks(void) in line 41
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable callback_list defined in smatch_returns.c
      uses variable return_states_callback::callback defined in smatch_returns.c
      uses variable all_return_states defined in smatch_returns.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function match_return(struct expression *) in line 50
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function merge_stree_no_pools(struct stree **,struct stree *) defined in smatch_slist.c
      uses variable all_return_states defined in smatch_returns.c
      uses function __get_cur_stree(void) defined in smatch.h
   function match_end_func(struct symbol *) in line 55
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses function merge_stree(struct stree **,struct stree *) defined in smatch_slist.c
      uses variable all_return_states defined in smatch_returns.c
      uses function __get_cur_stree(void) defined in smatch.h
      uses function call_hooks(void) defined in smatch_returns.c
      uses function free_stree(struct stree **) defined in avl.c
   function match_save_states(struct expression *) in line 62
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function push_stree(struct stree_stack **,struct stree *) defined in smatch_slist.c
      uses variable saved_stack defined in smatch_returns.c
      uses variable all_return_states defined in smatch_returns.c
      uses macro definition NULL defined in sm_implied3.c
   function match_restore_states(struct expression *) in line 68
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function free_stree(struct stree **) defined in avl.c
      uses variable all_return_states defined in smatch_returns.c
      uses function pop_stree(struct stree_stack **) defined in smatch_slist.c
      uses variable saved_stack defined in smatch_returns.c
   function register_returns(int) in line 74
      protection public
      9 lines of code
      1 parameters
      1 conditional paths
      uses variable my_id defined in smatch_returns.c
      uses function add_hook(void *,enum hook_type) defined in smatch.h
      uses function match_return(struct expression *) defined in smatch_returns.c
      uses enumvalue RETURN_HOOK defined in smatch.h
      uses function match_end_func(struct symbol *) defined in smatch_returns.c
      uses enumvalue END_FUNC_HOOK defined in smatch.h
      uses function match_save_states(struct expression *) defined in smatch_returns.c
      uses enumvalue INLINE_FN_START defined in smatch.h
      uses function match_restore_states(struct expression *) defined in smatch_returns.c
      uses enumvalue INLINE_FN_END defined in smatch.h
   variable return_states_callback::callback in line 24
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/smatch_slist.c
module smatch_slist.c
   variable sm_state_counter in line 30
      protection public
   variable all_pools in line 32
      protection public
   variable __stree_id in line 663
      protection public
   function ALLOCATOR(smatch_state,"smatch state") in line 25
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function ALLOCATOR(sm_state,"sm state") in line 26
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function ALLOCATOR(named_stree,"named slist") in line 27
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function __DO_ALLOCATOR(char,1,4,"state names",sname) in line 28
      protection public
      1 lines of code
      5 parameters
      1 conditional paths
   function show_sm(struct sm_state *) in line 34
      protection public
      38 lines of code
      1 parameters
      1 conditional paths
      uses variable buf defined in sm_fake_assignment.c
      uses function snprintf(char *,int,char *,char *) defined in sm_overflow6.c
      uses function check_name(unsigned short) defined in smatch.c
      uses variable sm_state::owner defined in smatch.h
      uses variable sm_state::name defined in smatch.h
      uses function show_state(struct smatch_state *) defined in smatch.h
      uses variable sm_state::state defined in smatch.h
      uses function ptr_list_size(struct ptr_list *) defined in ptrlist.c
      uses variable sm_state::possible defined in smatch.h
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function __print_stree(struct stree *) in line 73
      protection public
      10 lines of code
      1 parameters
      1 conditional paths
      uses function printf(char *,...) defined in test-be.c
      uses function get_lineno(void) defined in smatch.h
      uses macro definition FOR_EACH_SM defined in avl.h
      uses function show_sm(struct sm_state *) defined in smatch_slist.c
      uses macro definition END_FOR_EACH_SM defined in avl.h
   function cmp_tracker(const struct sm_state *,const struct sm_state *) in line 85
      protection public
      31 lines of code
      2 parameters
      1 conditional paths
   function cmp_sm_states(const struct sm_state *,const struct sm_state *,int) in line 117
      protection public
      33 lines of code
      3 parameters
      8 conditional paths
      uses function cmp_tracker(const struct sm_state *,const struct sm_state *) defined in smatch_slist.c
      uses macro definition SMATCH_EXTRA defined in smatch.h
   function alloc_sm_state(int,const char *,struct symbol *,struct smatch_state *) in line 151
      protection public
      22 lines of code
      4 parameters
      1 conditional paths
      uses variable sm_state_counter defined in smatch_slist.c
      uses variable sm_state::name defined in smatch.h
      uses function alloc_sname(const char *) defined in smatch_slist.c
      uses variable name defined in smatch_type.c
      uses variable sm_state::owner defined in smatch.h
      uses variable sm_state::sym defined in smatch.h
      uses variable sym defined in smatch_type.c
      uses variable sm_state::state defined in smatch.h
      uses variable sm_state::line defined in smatch.h
      uses function get_lineno(void) defined in smatch.h
      uses variable sm_state::merged defined in smatch.h
      uses variable sm_state::implied defined in smatch.h
      uses variable sm_state::pool defined in smatch.h
      uses macro definition NULL defined in sm_implied3.c
      uses variable sm_state::left defined in smatch.h
      uses variable sm_state::right defined in smatch.h
      uses variable sm_state::nr_children defined in smatch.h
      uses variable sm_state::possible defined in smatch.h
      uses macro definition add_ptr_list defined in ptrlist.h
   function alloc_state_no_name(int,const char *,struct symbol *,struct smatch_state *) in line 174
      protection public
      10 lines of code
      4 parameters
      1 conditional paths
      uses function alloc_sm_state(int,const char *,struct symbol *,struct smatch_state *) defined in smatch_slist.c
      uses variable sm_state::owner defined in smatch.h
      uses macro definition NULL defined in sm_implied3.c
      uses variable sym defined in smatch_type.c
      uses variable sm_state::state defined in smatch.h
      uses variable sm_state::name defined in smatch.h
      uses variable name defined in smatch_type.c
   function too_many_possible(struct sm_state *) in line 185
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses function ptr_list_size(struct ptr_list *) defined in ptrlist.c
      uses variable sm_state::possible defined in smatch.h
   function add_possible_sm(struct sm_state *,struct sm_state *) in line 192
      protection public
      20 lines of code
      2 parameters
      4 conditional paths
      uses function too_many_possible(struct sm_state *) defined in smatch_slist.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable sm_state::possible defined in smatch.h
      uses function cmp_sm_states(const struct sm_state *,const struct sm_state *,int) defined in smatch_slist.c
      uses macro definition INSERT_CURRENT defined in ptrlist.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses macro definition add_ptr_list defined in ptrlist.h
   function copy_possibles(struct sm_state *,struct sm_state *) in line 213
      protection public
      8 lines of code
      2 parameters
      1 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable sm_state::possible defined in smatch.h
      uses function add_possible_sm(struct sm_state *,struct sm_state *) defined in smatch_slist.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function alloc_sname(const char *) in line 222
      protection public
      10 lines of code
      1 parameters
      1 conditional paths
      uses variable str defined in sm_overflow6.c
      uses macro definition NULL defined in sm_implied3.c
      uses function strlen(char *) defined in sm_overflow6.c
      uses function strcpy(char *,char *,int) defined in sm_overflow3.c
   function out_of_memory(void) in line 233
      protection public
      11 lines of code
      1 parameters
      1 conditional paths
      uses variable sm_state_counter defined in smatch_slist.c
   function low_on_memory(void) in line 245
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses variable sm_state_counter defined in smatch_slist.c
   function free_sm_state(struct sm_state *) in line 252
      protection public
      10 lines of code
      1 parameters
      1 conditional paths
      uses function free_slist(struct state_list **) defined in smatch_slist.c
      uses variable sm_state::possible defined in smatch.h
   function free_all_sm_states(struct allocation_blob *) in line 263
      protection public
      10 lines of code
      1 parameters
      2 conditional paths
      uses variable offset defined in sm_implied10.c
      uses function free_sm_state(struct sm_state *) defined in smatch_slist.c
      uses variable allocation_blob::data defined in allocate.h
   function free_every_single_sm_state(void) in line 275
      protection public
      22 lines of code
      1 parameters
      1 conditional paths
      uses variable allocator_struct::blobs defined in allocate.h
      uses macro definition NULL defined in sm_implied3.c
      uses variable allocator_struct::allocations defined in allocate.h
      uses variable allocator_struct::total_bytes defined in allocate.h
      uses variable allocator_struct::useful_bytes defined in allocate.h
      uses variable allocator_struct::freelist defined in allocate.h
      uses variable allocation_blob::next defined in allocate.h
      uses function free_all_sm_states(struct allocation_blob *) defined in smatch_slist.c
      uses function blob_free(void *,unsigned long) defined in mmap-blob.c
      uses variable allocator_struct::chunking defined in allocate.h
      uses function free_stack_and_strees(struct stree_stack **) defined in smatch_slist.c
      uses variable all_pools defined in smatch_slist.c
      uses variable sm_state_counter defined in smatch_slist.c
   function clone_sm(struct sm_state *) in line 298
      protection public
      16 lines of code
      1 parameters
      1 conditional paths
      uses function alloc_state_no_name(int,const char *,struct symbol *,struct smatch_state *) defined in smatch_slist.c
      uses variable sm_state::merged defined in smatch.h
      uses variable sm_state::implied defined in smatch.h
      uses variable sm_state::line defined in smatch.h
      uses variable sm_state::possible defined in smatch.h
      uses function clone_slist(struct state_list *) defined in smatch_slist.c
      uses variable sm_state::left defined in smatch.h
      uses variable sm_state::right defined in smatch.h
      uses variable sm_state::nr_children defined in smatch.h
   function is_merged(struct sm_state *) in line 315
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable sm_state::merged defined in smatch.h
   function is_implied(struct sm_state *) in line 320
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable sm_state::implied defined in smatch.h
   function slist_has_state(struct state_list *,struct smatch_state *) in line 325
      protection public
      10 lines of code
      2 parameters
      1 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable sm_state::state defined in smatch.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function clone_slist(struct state_list *) in line 336
      protection public
      10 lines of code
      1 parameters
      1 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses macro definition add_ptr_list defined in ptrlist.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function merge_states(int,const char *,struct symbol *,struct smatch_state *,struct smatch_state *) in line 347
      protection public
      21 lines of code
      5 parameters
      1 conditional paths
      uses function __has_merge_function(int) defined in smatch.h
      uses function __client_merge_function(int,struct smatch_state *,struct smatch_state *) defined in smatch.h
      uses variable ghost defined in smatch.h
      uses variable undefined defined in smatch.h
      uses variable merged defined in smatch.h
   function merge_sm_states(struct sm_state *,struct sm_state *) in line 369
      protection public
      38 lines of code
      2 parameters
      1 conditional paths
      uses variable one defined in sm_equiv1.c
      uses variable two defined in sm_equiv1.c
      uses function merge_states(int,const char *,struct symbol *,struct smatch_state *,struct smatch_state *) defined in smatch_slist.c
      uses function alloc_state_no_name(int,const char *,struct symbol *,struct smatch_state *) defined in smatch_slist.c
      uses variable sm_state::merged defined in smatch.h
      uses variable sm_state::left defined in smatch.h
      uses variable sm_state::right defined in smatch.h
      uses variable sm_state::nr_children defined in smatch.h
      uses function copy_possibles(struct sm_state *,struct sm_state *) defined in smatch_slist.c
      uses variable option_debug defined in smatch.h
      uses function check_name(unsigned short) defined in smatch.c
      uses variable option_debug_check defined in smatch.c
      uses function printf(char *,...) defined in test-be.c
      uses function get_filename(void) defined in smatch.h
      uses function get_lineno(void) defined in smatch.h
      uses function get_function(void) defined in smatch.h
      uses function show_state(struct smatch_state *) defined in smatch.h
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable sm_state::possible defined in smatch.h
      uses variable sm_state::state defined in smatch.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function get_sm_state_stree(struct stree *,int,const char *,struct symbol *) in line 408
      protection public
      15 lines of code
      4 parameters
      1 conditional paths
      uses variable tracker::owner defined in smatch.h
      uses variable name defined in smatch_type.c
      uses variable sym defined in smatch_type.c
      uses macro definition NULL defined in sm_implied3.c
      uses function avl_lookup(const struct stree *,const struct sm_state *) defined in avl.c
   function get_state_stree(struct stree *,int,const char *,struct symbol *) in line 424
      protection public
      11 lines of code
      4 parameters
      1 conditional paths
      uses function get_sm_state_stree(struct stree *,int,const char *,struct symbol *) defined in smatch_slist.c
      uses variable sm_state::owner defined in smatch.h
      uses variable name defined in smatch_type.c
      uses variable sym defined in smatch_type.c
      uses variable sm_state::state defined in smatch.h
      uses macro definition NULL defined in sm_implied3.c
   function overwrite_sm_state_stree(struct stree **,struct sm_state *) in line 437
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function avl_insert(struct stree **,const struct sm_state *) defined in avl.c
   function overwrite_sm_state_stree_stack(struct stree_stack **,struct sm_state *) in line 442
      protection public
      9 lines of code
      2 parameters
      1 conditional paths
      uses function pop_stree(struct stree_stack **) defined in smatch_slist.c
      uses function overwrite_sm_state_stree(struct stree **,struct sm_state *) defined in smatch_slist.c
      uses function push_stree(struct stree_stack **,struct stree *) defined in smatch_slist.c
   function set_state_stree(struct stree **,int,const char *,struct symbol *,struct smatch_state *) in line 452
      protection public
      8 lines of code
      5 parameters
      1 conditional paths
      uses function alloc_sm_state(int,const char *,struct symbol *,struct smatch_state *) defined in smatch_slist.c
      uses variable sm_state::owner defined in smatch.h
      uses variable name defined in smatch_type.c
      uses variable sym defined in smatch_type.c
      uses variable sm_state::state defined in smatch.h
      uses function avl_insert(struct stree **,const struct sm_state *) defined in avl.c
   function set_state_stree_perm(struct stree **,int,const char *,struct symbol *,struct smatch_state *) in line 461
      protection public
      15 lines of code
      5 parameters
      1 conditional paths
      uses function malloc(int) defined in sm_buf_size2.c
      uses function strlen(char *) defined in sm_overflow6.c
      uses variable name defined in smatch_type.c
      uses function memset(void *,int,int) defined in check_byte_count-ice.c
      uses variable sm_state::owner defined in smatch.h
      uses variable sm_state::name defined in smatch.h
      uses function strcpy(char *,char *,int) defined in sm_overflow3.c
      uses variable sm_state::sym defined in smatch.h
      uses variable sym defined in smatch_type.c
      uses variable sm_state::state defined in smatch.h
      uses function overwrite_sm_state_stree(struct stree **,struct sm_state *) defined in smatch_slist.c
   function delete_state_stree(struct stree **,int,const char *,struct symbol *) in line 477
      protection public
      11 lines of code
      4 parameters
      1 conditional paths
      uses variable tracker::owner defined in smatch.h
      uses variable name defined in smatch_type.c
      uses variable sym defined in smatch_type.c
      uses function avl_remove(struct stree **,const struct sm_state *) defined in avl.c
   function delete_state_stree_stack(struct stree_stack **,int,const char *,struct symbol *) in line 489
      protection public
      9 lines of code
      4 parameters
      1 conditional paths
      uses function pop_stree(struct stree_stack **) defined in smatch_slist.c
      uses function delete_state_stree(struct stree **,int,const char *,struct symbol *) defined in smatch_slist.c
      uses variable name defined in smatch_type.c
      uses variable sym defined in smatch_type.c
      uses function push_stree(struct stree_stack **,struct stree *) defined in smatch_slist.c
   function push_stree(struct stree_stack **,struct stree *) in line 499
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses macro definition add_ptr_list defined in ptrlist.h
   function pop_stree(struct stree_stack **) in line 504
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses function delete_ptr_list_last(struct ptr_list **) defined in ptrlist.c
   function free_slist(struct state_list **) in line 513
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function __free_ptr_list(struct ptr_list **) defined in ptrlist.c
   function free_stree_stack(struct stree_stack **) in line 518
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function __free_ptr_list(struct ptr_list **) defined in ptrlist.c
   function free_stack_and_strees(struct stree_stack **) in line 523
      protection public
      9 lines of code
      1 parameters
      1 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses function free_stree(struct stree **) defined in avl.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses function free_stree_stack(struct stree_stack **) defined in smatch_slist.c
   function set_state_stree_stack(struct stree_stack **,int,const char *,struct symbol *,struct smatch_state *) in line 533
      protection public
      12 lines of code
      5 parameters
      1 conditional paths
      uses function pop_stree(struct stree_stack **) defined in smatch_slist.c
      uses function set_state_stree(struct stree **,int,const char *,struct symbol *,struct smatch_state *) defined in smatch_slist.c
      uses variable sm_state::owner defined in smatch.h
      uses variable name defined in smatch_type.c
      uses variable sym defined in smatch_type.c
      uses variable sm_state::state defined in smatch.h
      uses function push_stree(struct stree_stack **,struct stree *) defined in smatch_slist.c
   function get_sm_state_stree_stack(struct stree_stack *,int,const char *,struct symbol *) in line 549
      protection public
      12 lines of code
      4 parameters
      1 conditional paths
      uses function pop_stree(struct stree_stack **) defined in smatch_slist.c
      uses function get_sm_state_stree(struct stree *,int,const char *,struct symbol *) defined in smatch_slist.c
      uses variable sm_state::owner defined in smatch.h
      uses variable name defined in smatch_type.c
      uses variable sym defined in smatch_type.c
      uses function push_stree(struct stree_stack **,struct stree *) defined in smatch_slist.c
   function get_state_stree_stack(struct stree_stack *,int,const char *,struct symbol *) in line 562
      protection public
      11 lines of code
      4 parameters
      1 conditional paths
      uses function get_sm_state_stree_stack(struct stree_stack *,int,const char *,struct symbol *) defined in smatch_slist.c
      uses variable sm_state::owner defined in smatch.h
      uses variable name defined in smatch_type.c
      uses variable sym defined in smatch_type.c
      uses variable sm_state::state defined in smatch.h
      uses macro definition NULL defined in sm_implied3.c
   function match_states_stree(struct stree **,struct stree **) in line 574
      protection public
      48 lines of code
      2 parameters
      5 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses function avl_iter_begin(AvlIter *,struct stree *,AvlDirection) defined in avl.c
      uses variable one defined in sm_equiv1.c
      uses enumvalue FORWARD defined in avl.h
      uses variable two defined in sm_equiv1.c
      uses variable AvlIter::sm defined in avl.h
      uses function cmp_tracker(const struct sm_state *,const struct sm_state *) defined in smatch_slist.c
      uses function __set_fake_cur_stree_fast(struct stree *) defined in smatch.h
      uses function __client_unmatched_state_function(struct sm_state *) defined in smatch.h
      uses function __pop_fake_cur_stree_fast(void) defined in smatch.h
      uses function alloc_state_no_name(int,const char *,struct symbol *,struct smatch_state *) defined in smatch_slist.c
      uses variable sm_state::owner defined in smatch.h
      uses variable sm_state::name defined in smatch.h
      uses variable sm_state::sym defined in smatch.h
      uses macro definition add_ptr_list defined in ptrlist.h
      uses function avl_iter_next(AvlIter *) defined in avl.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses function avl_insert(struct stree **,const struct sm_state *) defined in avl.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses function free_slist(struct state_list **) defined in smatch_slist.c
   function call_pre_merge_hooks(struct stree **,struct stree **) in line 623
      protection public
      20 lines of code
      2 parameters
      1 conditional paths
      uses function save_all_states(void) defined in smatch.h
      uses function __swap_cur_stree(struct stree *) defined in smatch.h
      uses variable one defined in sm_equiv1.c
      uses macro definition FOR_EACH_SM defined in avl.h
      uses variable two defined in sm_equiv1.c
      uses function call_pre_merge_hook(struct sm_state *) defined in smatch.h
      uses macro definition END_FOR_EACH_SM defined in avl.h
      uses function clone_stree(struct stree *) defined in avl.c
      uses function __get_cur_stree(void) defined in smatch.h
      uses function restore_all_states(void) defined in smatch.h
   function clone_pool_havers_stree(struct stree **) in line 644
      protection public
      18 lines of code
      1 parameters
      2 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses macro definition FOR_EACH_SM defined in avl.h
      uses variable sm_state::pool defined in smatch.h
      uses function clone_sm(struct sm_state *) defined in smatch_slist.c
      uses macro definition add_ptr_list defined in ptrlist.h
      uses macro definition END_FOR_EACH_SM defined in avl.h
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses function avl_insert(struct stree **,const struct sm_state *) defined in avl.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses function free_slist(struct state_list **) defined in smatch_slist.c
   function __merge_stree(struct stree **,struct stree *,int) in line 669
      protection public
      67 lines of code
      3 parameters
      11 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses function out_of_memory(void) defined in smatch_slist.c
      uses function clone_stree(struct stree *) defined in avl.c
      uses function match_states_stree(struct stree **,struct stree **) defined in smatch_slist.c
      uses function call_pre_merge_hooks(struct stree **,struct stree **) defined in smatch_slist.c
      uses function add_pool(struct stree_stack **,struct stree *) defined in smatch.h
      uses function clone_pool_havers_stree(struct stree **) defined in smatch_slist.c
      uses function set_stree_id(struct stree **,int) defined in avl.c
      uses variable __stree_id defined in smatch_slist.c
      uses function push_stree(struct stree_stack **,struct stree *) defined in smatch_slist.c
      uses variable all_pools defined in smatch_slist.c
      uses function avl_iter_begin(AvlIter *,struct stree *,AvlDirection) defined in avl.c
      uses enumvalue FORWARD defined in avl.h
      uses variable AvlIter::sm defined in avl.h
      uses function cmp_tracker(const struct sm_state *,const struct sm_state *) defined in smatch_slist.c
      uses macro definition sm_msg defined in smatch.h
      uses function avl_iter_next(AvlIter *) defined in avl.c
      uses variable sm_state::pool defined in smatch.h
      uses function merge_sm_states(struct sm_state *,struct sm_state *) defined in smatch_slist.c
      uses function avl_insert(struct stree **,const struct sm_state *) defined in avl.c
      uses function free_stree(struct stree **) defined in avl.c
   function merge_stree(struct stree **,struct stree *) in line 737
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function __merge_stree(struct stree **,struct stree *,int) defined in smatch_slist.c
   function merge_stree_no_pools(struct stree **,struct stree *) in line 742
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function __merge_stree(struct stree **,struct stree *,int) defined in smatch_slist.c
   function merge_fake_stree(struct stree **,struct stree *) in line 754
      protection public
      58 lines of code
      2 parameters
      1 conditional paths
      uses variable one defined in sm_equiv1.c
      uses variable two defined in sm_equiv1.c
      uses macro definition NULL defined in sm_implied3.c
      uses function clone_stree(struct stree *) defined in avl.c
      uses function avl_iter_begin(AvlIter *,struct stree *,AvlDirection) defined in avl.c
      uses enumvalue FORWARD defined in avl.h
      uses variable AvlIter::sm defined in avl.h
      uses function cmp_tracker(const struct sm_state *,const struct sm_state *) defined in smatch_slist.c
      uses function get_sm_state(int,const char *,struct symbol *) defined in smatch.h
      uses variable sm_state::owner defined in smatch.h
      uses variable sm_state::name defined in smatch.h
      uses variable sm_state::sym defined in smatch.h
      uses macro definition add_ptr_list defined in ptrlist.h
      uses function avl_iter_next(AvlIter *) defined in avl.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses function avl_insert(struct stree **,const struct sm_state *) defined in avl.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses function free_slist(struct state_list **) defined in smatch_slist.c
      uses function __merge_stree(struct stree **,struct stree *,int) defined in smatch_slist.c
   function filter_stree(struct stree **,struct stree *) in line 816
      protection public
      30 lines of code
      2 parameters
      1 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses function avl_iter_begin(AvlIter *,struct stree *,AvlDirection) defined in avl.c
      uses enumvalue FORWARD defined in avl.h
      uses variable AvlIter::sm defined in avl.h
      uses function cmp_tracker(const struct sm_state *,const struct sm_state *) defined in smatch_slist.c
      uses function avl_insert(struct stree **,const struct sm_state *) defined in avl.c
      uses function avl_iter_next(AvlIter *) defined in avl.c
      uses function free_stree(struct stree **) defined in avl.c
   function and_stree_stack(struct stree_stack **) in line 852
      protection public
      10 lines of code
      1 parameters
      1 conditional paths
      uses function pop_stree(struct stree_stack **) defined in smatch_slist.c
      uses macro definition FOR_EACH_SM defined in avl.h
      uses function overwrite_sm_state_stree_stack(struct stree_stack **,struct sm_state *) defined in smatch_slist.c
      uses macro definition END_FOR_EACH_SM defined in avl.h
      uses function free_stree(struct stree **) defined in avl.c
   function or_stree_stack(struct stree_stack **,struct stree *,struct stree_stack **) in line 871
      protection public
      31 lines of code
      3 parameters
      1 conditional paths
      uses function pop_stree(struct stree_stack **) defined in smatch_slist.c
      uses function push_stree(struct stree_stack **,struct stree *) defined in smatch_slist.c
      uses function clone_stree(struct stree *) defined in avl.c
      uses function overwrite_stree(struct stree *,struct stree **) defined in smatch_slist.c
      uses function merge_stree(struct stree **,struct stree *) defined in smatch_slist.c
      uses function filter_stree(struct stree **,struct stree *) defined in smatch_slist.c
      uses function free_stree(struct stree **) defined in avl.c
   function get_named_stree(struct named_stree_stack *,const char *) in line 906
      protection public
      11 lines of code
      2 parameters
      1 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable named_stree::name defined in smatch_slist.h
      uses variable name defined in smatch_type.c
      uses variable named_stree::stree defined in smatch_slist.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses macro definition NULL defined in sm_implied3.c
   function overwrite_stree(struct stree *,struct stree **) in line 919
      protection public
      8 lines of code
      2 parameters
      1 conditional paths
      uses macro definition FOR_EACH_SM defined in avl.h
      uses function overwrite_sm_state_stree(struct stree **,struct sm_state *) defined in smatch_slist.c
      uses macro definition END_FOR_EACH_SM defined in avl.h
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/smatch_slist.h
module smatch_slist.h
   variable implied_pools in line 14
      protection public
   variable __stree_id in line 15
      protection public
   function DECLARE_PTR_LIST(state_list,struct sm_state) in line 3
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function DECLARE_PTR_LIST(state_list_stack,struct state_list) in line 4
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function DECLARE_ALLOCATOR(named_stree) in line 10
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function DECLARE_PTR_LIST(named_stree_stack,struct named_stree) in line 11
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function show_sm(struct sm_state *) in line 17
      protection public
      38 lines of code
      1 parameters
      12 conditional paths
      uses variable buf defined in sm_fake_assignment.c
      uses function snprintf(char *,int,char *,char *) defined in sm_overflow6.c
      uses function check_name(unsigned short) defined in smatch.c
      uses variable sm_state::owner defined in smatch.h
      uses variable sm_state::name defined in smatch.h
      uses function show_state(struct smatch_state *) defined in smatch.h
      uses variable sm_state::state defined in smatch.h
      uses function ptr_list_size(struct ptr_list *) defined in ptrlist.c
      uses variable sm_state::possible defined in smatch.h
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function __print_stree(struct stree *) in line 18
      protection public
      10 lines of code
      1 parameters
      1 conditional paths
      uses function printf(char *,...) defined in test-be.c
      uses function get_lineno(void) defined in smatch.h
      uses macro definition FOR_EACH_SM defined in avl.h
      uses function show_sm(struct sm_state *) defined in smatch_slist.c
      uses macro definition END_FOR_EACH_SM defined in avl.h
   function add_history(struct sm_state *) in line 19
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function cmp_tracker(const struct sm_state *,const struct sm_state *) in line 20
      protection public
      31 lines of code
      2 parameters
      11 conditional paths
   function alloc_sname(const char *) in line 21
      protection public
      10 lines of code
      1 parameters
      2 conditional paths
      uses variable str defined in sm_overflow6.c
      uses macro definition NULL defined in sm_implied3.c
      uses function strlen(char *) defined in sm_overflow6.c
      uses function strcpy(char *,char *,int) defined in sm_overflow3.c
   function alloc_sm_state(int,const char *,struct symbol *,struct smatch_state *) in line 22
      protection public
      22 lines of code
      4 parameters
      1 conditional paths
      uses variable sm_state::name defined in smatch.h
      uses function alloc_sname(const char *) defined in smatch_slist.c
      uses variable name defined in smatch_type.c
      uses variable sm_state::owner defined in smatch.h
      uses variable sm_state::sym defined in smatch.h
      uses variable sym defined in smatch_type.c
      uses variable sm_state::state defined in smatch.h
      uses variable sm_state::line defined in smatch.h
      uses function get_lineno(void) defined in smatch.h
      uses variable sm_state::merged defined in smatch.h
      uses variable sm_state::implied defined in smatch.h
      uses variable sm_state::pool defined in smatch.h
      uses macro definition NULL defined in sm_implied3.c
      uses variable sm_state::left defined in smatch.h
      uses variable sm_state::right defined in smatch.h
      uses variable sm_state::nr_children defined in smatch.h
      uses variable sm_state::possible defined in smatch.h
      uses macro definition add_ptr_list defined in ptrlist.h
   function free_every_single_sm_state(void) in line 25
      protection public
      22 lines of code
      1 parameters
      2 conditional paths
      uses variable allocator_struct::blobs defined in allocate.h
      uses macro definition NULL defined in sm_implied3.c
      uses variable allocator_struct::allocations defined in allocate.h
      uses variable allocator_struct::total_bytes defined in allocate.h
      uses variable allocator_struct::useful_bytes defined in allocate.h
      uses variable allocator_struct::freelist defined in allocate.h
      uses variable allocation_blob::next defined in allocate.h
      uses function blob_free(void *,unsigned long) defined in mmap-blob.c
      uses variable allocator_struct::chunking defined in allocate.h
      uses function free_stack_and_strees(struct stree_stack **) defined in smatch_slist.c
   function clone_sm(struct sm_state *) in line 26
      protection public
      16 lines of code
      1 parameters
      1 conditional paths
      uses variable sm_state::merged defined in smatch.h
      uses variable sm_state::implied defined in smatch.h
      uses variable sm_state::line defined in smatch.h
      uses variable sm_state::possible defined in smatch.h
      uses function clone_slist(struct state_list *) defined in smatch_slist.c
      uses variable sm_state::left defined in smatch.h
      uses variable sm_state::right defined in smatch.h
      uses variable sm_state::nr_children defined in smatch.h
   function is_merged(struct sm_state *) in line 27
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable sm_state::merged defined in smatch.h
   function is_implied(struct sm_state *) in line 28
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable sm_state::implied defined in smatch.h
   function clone_slist(struct state_list *) in line 29
      protection public
      10 lines of code
      1 parameters
      1 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses macro definition add_ptr_list defined in ptrlist.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function slist_has_state(struct state_list *,struct smatch_state *) in line 31
      protection public
      10 lines of code
      2 parameters
      2 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable sm_state::state defined in smatch.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function merge_states(int,const char *,struct symbol *,struct smatch_state *,struct smatch_state *) in line 32
      protection public
      21 lines of code
      5 parameters
      6 conditional paths
      uses function __has_merge_function(int) defined in smatch.h
      uses function __client_merge_function(int,struct smatch_state *,struct smatch_state *) defined in smatch.h
      uses variable ghost defined in smatch.h
      uses variable undefined defined in smatch.h
      uses variable merged defined in smatch.h
   function too_many_possible(struct sm_state *) in line 37
      protection public
      6 lines of code
      1 parameters
      2 conditional paths
      uses function ptr_list_size(struct ptr_list *) defined in ptrlist.c
      uses variable sm_state::possible defined in smatch.h
   function merge_sm_states(struct sm_state *,struct sm_state *) in line 38
      protection public
      38 lines of code
      2 parameters
      4 conditional paths
      uses variable one defined in sm_equiv1.c
      uses variable two defined in sm_equiv1.c
      uses function merge_states(int,const char *,struct symbol *,struct smatch_state *,struct smatch_state *) defined in smatch_slist.c
      uses variable sm_state::merged defined in smatch.h
      uses variable sm_state::left defined in smatch.h
      uses variable sm_state::right defined in smatch.h
      uses variable sm_state::nr_children defined in smatch.h
      uses variable option_debug defined in smatch.h
      uses function check_name(unsigned short) defined in smatch.c
      uses variable option_debug_check defined in smatch.c
      uses function printf(char *,...) defined in test-be.c
      uses function get_filename(void) defined in smatch.h
      uses function get_lineno(void) defined in smatch.h
      uses function get_function(void) defined in smatch.h
      uses function show_state(struct smatch_state *) defined in smatch.h
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable sm_state::possible defined in smatch.h
      uses variable sm_state::state defined in smatch.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function get_state_stree(struct stree *,int,const char *,struct symbol *) in line 39
      protection public
      11 lines of code
      4 parameters
      2 conditional paths
      uses function get_sm_state_stree(struct stree *,int,const char *,struct symbol *) defined in smatch_slist.c
      uses variable sm_state::owner defined in smatch.h
      uses variable name defined in smatch_type.c
      uses variable sym defined in smatch_type.c
      uses variable sm_state::state defined in smatch.h
      uses macro definition NULL defined in sm_implied3.c
   function get_sm_state_stree(struct stree *,int,const char *,struct symbol *) in line 42
      protection public
      15 lines of code
      4 parameters
      2 conditional paths
      uses variable tracker::owner defined in smatch.h
      uses variable name defined in smatch_type.c
      uses variable sym defined in smatch_type.c
      uses macro definition NULL defined in sm_implied3.c
      uses function avl_lookup(const struct stree *,const struct sm_state *) defined in avl.c
   function overwrite_sm_state_stree(struct stree **,struct sm_state *) in line 45
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function avl_insert(struct stree **,const struct sm_state *) defined in avl.c
   function overwrite_sm_state_stree_stack(struct stree_stack **,struct sm_state *) in line 46
      protection public
      9 lines of code
      2 parameters
      1 conditional paths
      uses function pop_stree(struct stree_stack **) defined in smatch_slist.c
      uses function overwrite_sm_state_stree(struct stree **,struct sm_state *) defined in smatch_slist.c
      uses function push_stree(struct stree_stack **,struct stree *) defined in smatch_slist.c
   function set_state_stree(struct stree **,int,const char *,struct symbol *,struct smatch_state *) in line 47
      protection public
      8 lines of code
      5 parameters
      1 conditional paths
      uses function alloc_sm_state(int,const char *,struct symbol *,struct smatch_state *) defined in smatch_slist.c
      uses variable sm_state::owner defined in smatch.h
      uses variable name defined in smatch_type.c
      uses variable sym defined in smatch_type.c
      uses variable sm_state::state defined in smatch.h
      uses function avl_insert(struct stree **,const struct sm_state *) defined in avl.c
   function set_state_stree_perm(struct stree **,int,const char *,struct symbol *,struct smatch_state *) in line 49
      protection public
      15 lines of code
      5 parameters
      1 conditional paths
      uses function malloc(int) defined in sm_buf_size2.c
      uses function strlen(char *) defined in sm_overflow6.c
      uses variable name defined in smatch_type.c
      uses function memset(void *,int,int) defined in check_byte_count-ice.c
      uses variable sm_state::owner defined in smatch.h
      uses variable sm_state::name defined in smatch.h
      uses function strcpy(char *,char *,int) defined in sm_overflow3.c
      uses variable sm_state::sym defined in smatch.h
      uses variable sym defined in smatch_type.c
      uses variable sm_state::state defined in smatch.h
      uses function overwrite_sm_state_stree(struct stree **,struct sm_state *) defined in smatch_slist.c
   function delete_state_stree(struct stree **,int,const char *,struct symbol *) in line 51
      protection public
      11 lines of code
      4 parameters
      1 conditional paths
      uses variable tracker::owner defined in smatch.h
      uses variable name defined in smatch_type.c
      uses variable sym defined in smatch_type.c
      uses function avl_remove(struct stree **,const struct sm_state *) defined in avl.c
   function delete_state_stree_stack(struct stree_stack **,int,const char *,struct symbol *) in line 54
      protection public
      9 lines of code
      4 parameters
      1 conditional paths
      uses function pop_stree(struct stree_stack **) defined in smatch_slist.c
      uses function delete_state_stree(struct stree **,int,const char *,struct symbol *) defined in smatch_slist.c
      uses variable name defined in smatch_type.c
      uses variable sym defined in smatch_type.c
      uses function push_stree(struct stree_stack **,struct stree *) defined in smatch_slist.c
   function push_stree(struct stree_stack **,struct stree *) in line 57
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses macro definition add_ptr_list defined in ptrlist.h
   function pop_stree(struct stree_stack **) in line 58
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses function delete_ptr_list_last(struct ptr_list **) defined in ptrlist.c
   function free_slist(struct state_list **) in line 60
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function __free_ptr_list(struct ptr_list **) defined in ptrlist.c
   function free_stree_stack(struct stree_stack **) in line 61
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function __free_ptr_list(struct ptr_list **) defined in ptrlist.c
   function free_stack_and_strees(struct stree_stack **) in line 62
      protection public
      9 lines of code
      1 parameters
      1 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses function free_stree(struct stree **) defined in avl.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses function free_stree_stack(struct stree_stack **) defined in smatch_slist.c
   function set_state_stree_stack(struct stree_stack **,int,const char *,struct symbol *,struct smatch_state *) in line 64
      protection public
      12 lines of code
      5 parameters
      1 conditional paths
      uses function pop_stree(struct stree_stack **) defined in smatch_slist.c
      uses function set_state_stree(struct stree **,int,const char *,struct symbol *,struct smatch_state *) defined in smatch_slist.c
      uses variable sm_state::owner defined in smatch.h
      uses variable name defined in smatch_type.c
      uses variable sym defined in smatch_type.c
      uses variable sm_state::state defined in smatch.h
      uses function push_stree(struct stree_stack **,struct stree *) defined in smatch_slist.c
   function get_sm_state_stree_stack(struct stree_stack *,int,const char *,struct symbol *) in line 67
      protection public
      12 lines of code
      4 parameters
      1 conditional paths
      uses function pop_stree(struct stree_stack **) defined in smatch_slist.c
      uses function get_sm_state_stree(struct stree *,int,const char *,struct symbol *) defined in smatch_slist.c
      uses variable sm_state::owner defined in smatch.h
      uses variable name defined in smatch_type.c
      uses variable sym defined in smatch_type.c
      uses function push_stree(struct stree_stack **,struct stree *) defined in smatch_slist.c
   function get_state_stree_stack(struct stree_stack *,int,const char *,struct symbol *) in line 70
      protection public
      11 lines of code
      4 parameters
      2 conditional paths
      uses function get_sm_state_stree_stack(struct stree_stack *,int,const char *,struct symbol *) defined in smatch_slist.c
      uses variable sm_state::owner defined in smatch.h
      uses variable name defined in smatch_type.c
      uses variable sym defined in smatch_type.c
      uses variable sm_state::state defined in smatch.h
      uses macro definition NULL defined in sm_implied3.c
   function out_of_memory(void) in line 73
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
   function low_on_memory(void) in line 74
      protection public
      6 lines of code
      1 parameters
      2 conditional paths
   function merge_stree(struct stree **,struct stree *) in line 75
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function merge_stree_no_pools(struct stree **,struct stree *) in line 76
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function merge_fake_stree(struct stree **,struct stree *) in line 77
      protection public
      58 lines of code
      2 parameters
      10 conditional paths
      uses variable one defined in sm_equiv1.c
      uses variable two defined in sm_equiv1.c
      uses macro definition NULL defined in sm_implied3.c
      uses function clone_stree(struct stree *) defined in avl.c
      uses function avl_iter_begin(AvlIter *,struct stree *,AvlDirection) defined in avl.c
      uses enumvalue FORWARD defined in avl.h
      uses variable AvlIter::sm defined in avl.h
      uses function cmp_tracker(const struct sm_state *,const struct sm_state *) defined in smatch_slist.c
      uses function get_sm_state(int,const char *,struct symbol *) defined in smatch.h
      uses variable sm_state::owner defined in smatch.h
      uses variable sm_state::name defined in smatch.h
      uses variable sm_state::sym defined in smatch.h
      uses macro definition add_ptr_list defined in ptrlist.h
      uses function avl_iter_next(AvlIter *) defined in avl.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses function avl_insert(struct stree **,const struct sm_state *) defined in avl.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses function free_slist(struct state_list **) defined in smatch_slist.c
   function filter_stree(struct stree **,struct stree *) in line 78
      protection public
      30 lines of code
      2 parameters
      6 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses function avl_iter_begin(AvlIter *,struct stree *,AvlDirection) defined in avl.c
      uses enumvalue FORWARD defined in avl.h
      uses variable AvlIter::sm defined in avl.h
      uses function cmp_tracker(const struct sm_state *,const struct sm_state *) defined in smatch_slist.c
      uses function avl_insert(struct stree **,const struct sm_state *) defined in avl.c
      uses function avl_iter_next(AvlIter *) defined in avl.c
      uses function free_stree(struct stree **) defined in avl.c
   function and_stree_stack(struct stree_stack **) in line 79
      protection public
      10 lines of code
      1 parameters
      1 conditional paths
      uses function pop_stree(struct stree_stack **) defined in smatch_slist.c
      uses macro definition FOR_EACH_SM defined in avl.h
      uses function overwrite_sm_state_stree_stack(struct stree_stack **,struct sm_state *) defined in smatch_slist.c
      uses macro definition END_FOR_EACH_SM defined in avl.h
      uses function free_stree(struct stree **) defined in avl.c
   function or_stree_stack(struct stree_stack **,struct stree *,struct stree_stack **) in line 81
      protection public
      31 lines of code
      3 parameters
      1 conditional paths
      uses function pop_stree(struct stree_stack **) defined in smatch_slist.c
      uses function push_stree(struct stree_stack **,struct stree *) defined in smatch_slist.c
      uses function clone_stree(struct stree *) defined in avl.c
      uses function overwrite_stree(struct stree *,struct stree **) defined in smatch_slist.c
      uses function merge_stree(struct stree **,struct stree *) defined in smatch_slist.c
      uses function filter_stree(struct stree **,struct stree *) defined in smatch_slist.c
      uses function free_stree(struct stree **) defined in avl.c
   function get_named_stree(struct named_stree_stack *,const char *) in line 85
      protection public
      11 lines of code
      2 parameters
      2 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable named_stree::name defined in smatch_slist.h
      uses variable name defined in smatch_type.c
      uses variable named_stree::stree defined in smatch_slist.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses macro definition NULL defined in sm_implied3.c
   function overwrite_stree(struct stree *,struct stree **) in line 88
      protection public
      8 lines of code
      2 parameters
      1 conditional paths
      uses macro definition FOR_EACH_SM defined in avl.h
      uses function overwrite_sm_state_stree(struct stree **,struct sm_state *) defined in smatch_slist.c
      uses macro definition END_FOR_EACH_SM defined in avl.h
   function all_return_states_hook(void(*)(struct stree *slist)) in line 92
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   variable named_stree::name in line 7
      protection public
   variable named_stree::stree in line 8
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/smatch_start_states.c
module smatch_start_states.c
   variable my_id in line 27
      protection public
   variable start_states in line 29
      protection public
   variable saved_stack in line 30
      protection public
   function save_start_states(struct statement *) in line 31
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable start_states defined in smatch_start_states.c
      uses function clone_stree(struct stree *) defined in avl.c
      uses function __get_cur_stree(void) defined in smatch.h
   function match_save_states(struct expression *) in line 36
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function push_stree(struct stree_stack **,struct stree *) defined in smatch_slist.c
      uses variable saved_stack defined in smatch_start_states.c
      uses variable start_states defined in smatch_start_states.c
      uses macro definition NULL defined in sm_implied3.c
   function match_restore_states(struct expression *) in line 42
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function free_stree(struct stree **) defined in avl.c
      uses variable start_states defined in smatch_start_states.c
      uses function pop_stree(struct stree_stack **) defined in smatch_slist.c
      uses variable saved_stack defined in smatch_start_states.c
   function match_end_func(void) in line 48
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function free_stree(struct stree **) defined in avl.c
      uses variable start_states defined in smatch_start_states.c
   function get_start_states(void) in line 53
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable start_states defined in smatch_start_states.c
   function register_start_states(int) in line 58
      protection public
      9 lines of code
      1 parameters
      1 conditional paths
      uses variable my_id defined in smatch_start_states.c
      uses function add_hook(void *,enum hook_type) defined in smatch.h
      uses function save_start_states(struct statement *) defined in smatch_start_states.c
      uses enumvalue AFTER_DEF_HOOK defined in smatch.h
      uses function match_save_states(struct expression *) defined in smatch_start_states.c
      uses enumvalue INLINE_FN_START defined in smatch.h
      uses function match_restore_states(struct expression *) defined in smatch_start_states.c
      uses enumvalue INLINE_FN_END defined in smatch.h
      uses function match_end_func(void) defined in smatch_start_states.c
      uses enumvalue END_FUNC_HOOK defined in smatch.h
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/smatch_states.c
module smatch_states.c
   variable undefined in line 58
      protection public
   variable ghost in line 58
      protection public
   variable merged in line 58
      protection public
   variable true_state in line 58
      protection public
   variable false_state in line 58
      protection public
   variable cur_stree in line 46
      protection public
   variable true_stack in line 48
      protection public
   variable false_stack in line 49
      protection public
   variable pre_cond_stack in line 50
      protection public
   variable cond_true_stack in line 52
      protection public
   variable cond_false_stack in line 53
      protection public
   variable fake_cur_stree_stack in line 55
      protection public
   variable read_only in line 56
      protection public
   variable break_stack in line 58
      protection public
   variable switch_stack in line 59
      protection public
   variable remaining_cases in line 60
      protection public
   variable default_stack in line 61
      protection public
   variable continue_stack in line 62
      protection public
   variable goto_stack in line 64
      protection public
   variable backup in line 66
      protection public
   variable option_debug in line 68
      protection public
   function __print_cur_stree(void) in line 70
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function __print_stree(struct stree *) defined in smatch_slist.c
      uses variable cur_stree defined in smatch_states.c
   function unreachable(void) in line 75
      protection public
      6 lines of code
      1 parameters
      2 conditional paths
      uses variable cur_stree defined in smatch_states.c
   function set_state(int,const char *,struct symbol *,struct smatch_state *) in line 82
      protection public
      37 lines of code
      4 parameters
      8 conditional paths
      uses variable name defined in smatch_type.c
      uses macro definition NULL defined in sm_implied3.c
      uses variable read_only defined in smatch_states.c
      uses macro definition sm_msg defined in smatch.h
      uses variable option_debug defined in smatch_states.c
      uses function check_name(unsigned short) defined in smatch.c
      uses variable sm_state::owner defined in smatch.h
      uses variable option_debug_check defined in smatch.c
      uses function get_state(int,const char *,struct symbol *) defined in smatch_states.c
      uses variable sym defined in smatch_type.c
      uses function show_state(struct smatch_state *) defined in smatch.h
      uses function unreachable(void) defined in smatch_states.c
      uses variable fake_cur_stree_stack defined in smatch_states.c
      uses function set_state_stree_stack(struct stree_stack **,int,const char *,struct symbol *,struct smatch_state *) defined in smatch_slist.c
      uses function set_state_stree(struct stree **,int,const char *,struct symbol *,struct smatch_state *) defined in smatch_slist.c
      uses variable cur_stree defined in smatch_states.c
      uses variable cond_true_stack defined in smatch_states.c
      uses variable cond_false_stack defined in smatch_states.c
   function set_state_expr(int,struct expression *,struct smatch_state *) in line 120
      protection public
      15 lines of code
      3 parameters
      3 conditional paths
      uses variable name defined in smatch_type.c
      uses variable sym defined in smatch_type.c
      uses macro definition NULL defined in sm_implied3.c
      uses function strip_expr(struct expression *) defined in smatch.h
      uses function expr_to_var_sym(struct expression *,struct symbol **) defined in smatch.h
      uses function set_state(int,const char *,struct symbol *,struct smatch_state *) defined in smatch_states.c
      uses variable sm_state::owner defined in smatch.h
      uses variable sm_state::state defined in smatch.h
      uses function free_string(char *) defined in smatch.h
   function __swap_cur_stree(struct stree *) in line 136
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function free_stree(struct stree **) defined in avl.c
      uses variable cur_stree defined in smatch_states.c
   function __push_fake_cur_stree(void) in line 142
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function push_stree(struct stree_stack **,struct stree *) defined in smatch_slist.c
      uses variable fake_cur_stree_stack defined in smatch_states.c
      uses macro definition NULL defined in sm_implied3.c
      uses function __save_pre_cond_states(void) defined in smatch_states.c
   function __pop_fake_cur_stree(void) in line 148
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses variable fake_cur_stree_stack defined in smatch_states.c
      uses macro definition sm_msg defined in smatch.h
      uses function __use_pre_cond_states(void) defined in smatch_states.c
      uses function pop_stree(struct stree_stack **) defined in smatch_slist.c
   function __free_fake_cur_stree(void) in line 156
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses function __pop_fake_cur_stree(void) defined in smatch_states.c
      uses function free_stree(struct stree **) defined in avl.c
   function __set_fake_cur_stree_fast(struct stree *) in line 164
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses function push_stree(struct stree_stack **,struct stree *) defined in smatch_slist.c
      uses variable pre_cond_stack defined in smatch_states.c
      uses variable cur_stree defined in smatch_states.c
      uses variable read_only defined in smatch_states.c
   function __pop_fake_cur_stree_fast(void) in line 171
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable cur_stree defined in smatch_states.c
      uses function pop_stree(struct stree_stack **) defined in smatch_slist.c
      uses variable pre_cond_stack defined in smatch_states.c
      uses variable read_only defined in smatch_states.c
   function __merge_stree_into_cur(struct stree *) in line 177
      protection public
      15 lines of code
      1 parameters
      2 conditional paths
      uses variable merged defined in smatch_states.c
      uses macro definition FOR_EACH_SM defined in avl.h
      uses function get_sm_state(int,const char *,struct symbol *) defined in smatch_states.c
      uses variable sm_state::owner defined in smatch.h
      uses variable sm_state::name defined in smatch.h
      uses variable sm_state::sym defined in smatch.h
      uses function merge_sm_states(struct sm_state *,struct sm_state *) defined in smatch_slist.c
      uses function __set_sm(struct sm_state *) defined in smatch_states.c
      uses macro definition END_FOR_EACH_SM defined in avl.h
   function __set_sm(struct sm_state *) in line 193
      protection public
      33 lines of code
      1 parameters
      7 conditional paths
      uses variable read_only defined in smatch_states.c
      uses macro definition sm_msg defined in smatch.h
      uses variable option_debug defined in smatch_states.c
      uses function check_name(unsigned short) defined in smatch.c
      uses variable sm_state::owner defined in smatch.h
      uses variable option_debug_check defined in smatch.c
      uses function get_state(int,const char *,struct symbol *) defined in smatch_states.c
      uses variable sm_state::name defined in smatch.h
      uses variable sm_state::sym defined in smatch.h
      uses function show_state(struct smatch_state *) defined in smatch.h
      uses variable sm_state::state defined in smatch.h
      uses function unreachable(void) defined in smatch_states.c
      uses variable fake_cur_stree_stack defined in smatch_states.c
      uses function overwrite_sm_state_stree_stack(struct stree_stack **,struct sm_state *) defined in smatch_slist.c
      uses function overwrite_sm_state_stree(struct stree **,struct sm_state *) defined in smatch_slist.c
      uses variable cur_stree defined in smatch_states.c
      uses variable cond_true_stack defined in smatch_states.c
      uses variable cond_false_stack defined in smatch_states.c
   function __use_orig_if_not_set(struct sm_state *) in line 227
      protection public
      42 lines of code
      1 parameters
      9 conditional paths
      uses variable read_only defined in smatch_states.c
      uses macro definition sm_msg defined in smatch.h
      uses variable option_debug defined in smatch_states.c
      uses function check_name(unsigned short) defined in smatch.c
      uses variable sm_state::owner defined in smatch.h
      uses variable option_debug_check defined in smatch.c
      uses function get_state(int,const char *,struct symbol *) defined in smatch_states.c
      uses variable sm_state::name defined in smatch.h
      uses variable sm_state::sym defined in smatch.h
      uses function show_state(struct smatch_state *) defined in smatch.h
      uses variable sm_state::state defined in smatch.h
      uses function unreachable(void) defined in smatch_states.c
      uses variable fake_cur_stree_stack defined in smatch_states.c
      uses function overwrite_sm_state_stree_stack(struct stree_stack **,struct sm_state *) defined in smatch_slist.c
      uses function overwrite_sm_state_stree(struct stree **,struct sm_state *) defined in smatch_slist.c
      uses variable cur_stree defined in smatch_states.c
      uses variable cond_true_stack defined in smatch_states.c
      uses function pop_stree(struct stree_stack **) defined in smatch_slist.c
      uses function get_sm_state_stree(struct stree *,int,const char *,struct symbol *) defined in smatch_slist.c
      uses function push_stree(struct stree_stack **,struct stree *) defined in smatch_slist.c
      uses variable cond_false_stack defined in smatch_states.c
   function get_state(int,const char *,struct symbol *) in line 270
      protection public
      6 lines of code
      3 parameters
      1 conditional paths
      uses function __get_state_hook(int,const char *,struct symbol *) defined in smatch.h
      uses variable name defined in smatch_type.c
      uses variable sym defined in smatch_type.c
      uses function get_state_stree(struct stree *,int,const char *,struct symbol *) defined in smatch_slist.c
      uses variable cur_stree defined in smatch_states.c
   function get_state_expr(int,struct expression *) in line 277
      protection public
      15 lines of code
      2 parameters
      3 conditional paths
      uses variable name defined in smatch_type.c
      uses variable sym defined in smatch_type.c
      uses macro definition NULL defined in sm_implied3.c
      uses function strip_expr(struct expression *) defined in smatch.h
      uses function expr_to_var_sym(struct expression *,struct symbol **) defined in smatch.h
      uses function get_state(int,const char *,struct symbol *) defined in smatch_states.c
      uses function free_string(char *) defined in smatch.h
   function get_possible_states(int,const char *,struct symbol *) in line 293
      protection public
      9 lines of code
      3 parameters
      2 conditional paths
      uses function get_sm_state_stree(struct stree *,int,const char *,struct symbol *) defined in smatch_slist.c
      uses variable cur_stree defined in smatch_states.c
      uses variable sm_state::owner defined in smatch.h
      uses variable name defined in smatch_type.c
      uses variable sym defined in smatch_type.c
      uses variable sm_state::possible defined in smatch.h
      uses macro definition NULL defined in sm_implied3.c
   function get_possible_states_expr(int,struct expression *) in line 303
      protection public
      15 lines of code
      2 parameters
      3 conditional paths
      uses variable name defined in smatch_type.c
      uses variable sym defined in smatch_type.c
      uses macro definition NULL defined in sm_implied3.c
      uses function strip_expr(struct expression *) defined in smatch.h
      uses function expr_to_var_sym(struct expression *,struct symbol **) defined in smatch.h
      uses function get_possible_states(int,const char *,struct symbol *) defined in smatch_states.c
      uses function free_string(char *) defined in smatch.h
   function get_sm_state(int,const char *,struct symbol *) in line 319
      protection public
      4 lines of code
      3 parameters
      1 conditional paths
      uses function get_sm_state_stree(struct stree *,int,const char *,struct symbol *) defined in smatch_slist.c
      uses variable cur_stree defined in smatch_states.c
      uses variable sm_state::owner defined in smatch.h
      uses variable name defined in smatch_type.c
      uses variable sym defined in smatch_type.c
   function get_sm_state_expr(int,struct expression *) in line 324
      protection public
      15 lines of code
      2 parameters
      3 conditional paths
      uses variable name defined in smatch_type.c
      uses variable sym defined in smatch_type.c
      uses macro definition NULL defined in sm_implied3.c
      uses function strip_expr(struct expression *) defined in smatch.h
      uses function expr_to_var_sym(struct expression *,struct symbol **) defined in smatch.h
      uses function get_sm_state(int,const char *,struct symbol *) defined in smatch_states.c
      uses variable sm_state::owner defined in smatch.h
      uses function free_string(char *) defined in smatch.h
   function delete_state(int,const char *,struct symbol *) in line 340
      protection public
      9 lines of code
      3 parameters
      2 conditional paths
      uses function delete_state_stree(struct stree **,int,const char *,struct symbol *) defined in smatch_slist.c
      uses variable cur_stree defined in smatch_states.c
      uses variable sm_state::owner defined in smatch.h
      uses variable name defined in smatch_type.c
      uses variable sym defined in smatch_type.c
      uses variable cond_true_stack defined in smatch_states.c
      uses function delete_state_stree_stack(struct stree_stack **,int,const char *,struct symbol *) defined in smatch_slist.c
      uses variable pre_cond_stack defined in smatch_states.c
      uses variable cond_false_stack defined in smatch_states.c
   function delete_state_expr(int,struct expression *) in line 350
      protection public
      13 lines of code
      2 parameters
      3 conditional paths
      uses variable name defined in smatch_type.c
      uses variable sym defined in smatch_type.c
      uses function strip_expr(struct expression *) defined in smatch.h
      uses function expr_to_var_sym(struct expression *,struct symbol **) defined in smatch.h
      uses function delete_state(int,const char *,struct symbol *) defined in smatch_states.c
      uses function free_string(char *) defined in smatch.h
   function get_all_states_from_stree(int,struct stree *) in line 364
      protection public
      12 lines of code
      2 parameters
      2 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses macro definition FOR_EACH_SM defined in avl.h
      uses variable sm_state::owner defined in smatch.h
      uses function avl_insert(struct stree **,const struct sm_state *) defined in avl.c
      uses macro definition END_FOR_EACH_SM defined in avl.h
   function get_all_states_stree(int) in line 377
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function get_all_states_from_stree(int,struct stree *) defined in smatch_states.c
      uses variable cur_stree defined in smatch_states.c
   function __get_cur_stree(void) in line 382
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable cur_stree defined in smatch_states.c
   function is_reachable(void) in line 387
      protection public
      6 lines of code
      1 parameters
      2 conditional paths
      uses variable cur_stree defined in smatch_states.c
   function set_true_false_states(int,const char *,struct symbol *,struct smatch_state *,struct smatch_state *) in line 394
      protection public
      31 lines of code
      5 parameters
      7 conditional paths
      uses variable read_only defined in smatch_states.c
      uses macro definition sm_msg defined in smatch.h
      uses variable option_debug defined in smatch_states.c
      uses function check_name(unsigned short) defined in smatch.c
      uses variable option_debug_check defined in smatch.c
      uses function get_state(int,const char *,struct symbol *) defined in smatch_states.c
      uses variable name defined in smatch_type.c
      uses variable sym defined in smatch_type.c
      uses function show_state(struct smatch_state *) defined in smatch.h
      uses variable true_state defined in smatch_states.c
      uses variable false_state defined in smatch_states.c
      uses function unreachable(void) defined in smatch_states.c
      uses variable cond_false_stack defined in smatch_states.c
      uses variable cond_true_stack defined in smatch_states.c
      uses function printf(char *,...) defined in test-be.c
      uses function set_state_stree(struct stree **,int,const char *,struct symbol *,struct smatch_state *) defined in smatch_slist.c
      uses variable cur_stree defined in smatch_states.c
      uses function set_state_stree_stack(struct stree_stack **,int,const char *,struct symbol *,struct smatch_state *) defined in smatch_slist.c
   function set_true_false_states_expr(int,struct expression *,struct smatch_state *,struct smatch_state *) in line 426
      protection public
      15 lines of code
      4 parameters
      3 conditional paths
      uses variable name defined in smatch_type.c
      uses variable sym defined in smatch_type.c
      uses function strip_expr(struct expression *) defined in smatch.h
      uses function expr_to_var_sym(struct expression *,struct symbol **) defined in smatch.h
      uses function set_true_false_states(int,const char *,struct symbol *,struct smatch_state *,struct smatch_state *) defined in smatch_states.c
      uses variable true_state defined in smatch_states.c
      uses variable false_state defined in smatch_states.c
      uses function free_string(char *) defined in smatch.h
   function __set_true_false_sm(struct sm_state *,struct sm_state *) in line 442
      protection public
      17 lines of code
      2 parameters
      5 conditional paths
      uses function unreachable(void) defined in smatch_states.c
      uses variable cond_false_stack defined in smatch_states.c
      uses variable cond_true_stack defined in smatch_states.c
      uses function printf(char *,...) defined in test-be.c
      uses function overwrite_sm_state_stree(struct stree **,struct sm_state *) defined in smatch_slist.c
      uses variable cur_stree defined in smatch_states.c
      uses function overwrite_sm_state_stree_stack(struct stree_stack **,struct sm_state *) defined in smatch_slist.c
   function nullify_path(void) in line 460
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function free_stree(struct stree **) defined in avl.c
      uses variable cur_stree defined in smatch_states.c
   function __match_nullify_path_hook(const char *,struct expression *,void *) in line 465
      protection public
      5 lines of code
      3 parameters
      1 conditional paths
      uses function nullify_path(void) defined in smatch_states.c
   function __unnullify_path(void) in line 477
      protection public
      5 lines of code
      1 parameters
      2 conditional paths
      uses variable cur_stree defined in smatch_states.c
      uses function set_state(int,const char *,struct symbol *,struct smatch_state *) defined in smatch_states.c
      uses macro definition NULL defined in sm_implied3.c
      uses variable true_state defined in smatch_states.c
   function __path_is_null(void) in line 483
      protection public
      6 lines of code
      1 parameters
      2 conditional paths
      uses variable cur_stree defined in smatch_states.c
   function check_stree_stack_free(struct stree_stack **) in line 490
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses macro definition sm_msg defined in smatch.h
      uses function free_stack_and_strees(struct stree_stack **) defined in smatch_slist.c
   function save_all_states(void) in line 498
      protection public
      34 lines of code
      1 parameters
      1 conditional paths
      uses function __add_ptr_list(struct ptr_list **,void *,unsigned long) defined in ptrlist.c
      uses variable backup defined in smatch_states.c
      uses variable cur_stree defined in smatch_states.c
      uses macro definition NULL defined in sm_implied3.c
      uses variable true_stack defined in smatch_states.c
      uses variable false_stack defined in smatch_states.c
      uses variable pre_cond_stack defined in smatch_states.c
      uses variable cond_true_stack defined in smatch_states.c
      uses variable cond_false_stack defined in smatch_states.c
      uses variable fake_cur_stree_stack defined in smatch_states.c
      uses variable break_stack defined in smatch_states.c
      uses variable switch_stack defined in smatch_states.c
      uses variable remaining_cases defined in smatch_states.c
      uses variable default_stack defined in smatch_states.c
      uses variable continue_stack defined in smatch_states.c
      uses variable goto_stack defined in smatch_states.c
   function pop_backup(void) in line 533
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses variable backup defined in smatch_states.c
      uses function delete_ptr_list_last(struct ptr_list **) defined in ptrlist.c
   function restore_all_states(void) in line 542
      protection public
      21 lines of code
      1 parameters
      1 conditional paths
      uses variable goto_stack defined in smatch_states.c
      uses function pop_backup(void) defined in smatch_states.c
      uses variable continue_stack defined in smatch_states.c
      uses variable default_stack defined in smatch_states.c
      uses variable remaining_cases defined in smatch_states.c
      uses variable switch_stack defined in smatch_states.c
      uses variable break_stack defined in smatch_states.c
      uses variable fake_cur_stree_stack defined in smatch_states.c
      uses variable cond_false_stack defined in smatch_states.c
      uses variable cond_true_stack defined in smatch_states.c
      uses variable pre_cond_stack defined in smatch_states.c
      uses variable false_stack defined in smatch_states.c
      uses variable true_stack defined in smatch_states.c
      uses variable cur_stree defined in smatch_states.c
   function free_goto_stack(void) in line 564
      protection public
      9 lines of code
      1 parameters
      1 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable goto_stack defined in smatch_states.c
      uses function free_stree(struct stree **) defined in avl.c
      uses variable named_stree::stree defined in smatch_slist.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses function __free_ptr_list(struct ptr_list **) defined in ptrlist.c
   function clear_all_states(void) in line 574
      protection public
      16 lines of code
      1 parameters
      1 conditional paths
      uses function nullify_path(void) defined in smatch_states.c
      uses function check_stree_stack_free(struct stree_stack **) defined in smatch_states.c
      uses variable true_stack defined in smatch_states.c
      uses variable false_stack defined in smatch_states.c
      uses variable pre_cond_stack defined in smatch_states.c
      uses variable cond_true_stack defined in smatch_states.c
      uses variable cond_false_stack defined in smatch_states.c
      uses variable break_stack defined in smatch_states.c
      uses variable switch_stack defined in smatch_states.c
      uses variable continue_stack defined in smatch_states.c
      uses function free_goto_stack(void) defined in smatch_states.c
      uses function free_every_single_sm_state(void) defined in smatch_slist.c
   function __push_cond_stacks(void) in line 591
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function push_stree(struct stree_stack **,struct stree *) defined in smatch_slist.c
      uses variable cond_true_stack defined in smatch_states.c
      uses macro definition NULL defined in sm_implied3.c
      uses variable cond_false_stack defined in smatch_states.c
   function __copy_cond_true_states(void) in line 597
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses function pop_stree(struct stree_stack **) defined in smatch_slist.c
      uses variable cond_true_stack defined in smatch_states.c
      uses function push_stree(struct stree_stack **,struct stree *) defined in smatch_slist.c
      uses function clone_stree(struct stree *) defined in avl.c
   function __copy_cond_false_states(void) in line 606
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses function pop_stree(struct stree_stack **) defined in smatch_slist.c
      uses variable cond_false_stack defined in smatch_states.c
      uses function push_stree(struct stree_stack **,struct stree *) defined in smatch_slist.c
      uses function clone_stree(struct stree *) defined in avl.c
   function __pop_cond_true_stack(void) in line 615
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function pop_stree(struct stree_stack **) defined in smatch_slist.c
      uses variable cond_true_stack defined in smatch_states.c
   function __pop_cond_false_stack(void) in line 620
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function pop_stree(struct stree_stack **) defined in smatch_slist.c
      uses variable cond_false_stack defined in smatch_states.c
   function __use_cond_stack(struct stree_stack **) in line 633
      protection public
      13 lines of code
      1 parameters
      1 conditional paths
      uses function free_stree(struct stree **) defined in avl.c
      uses variable cur_stree defined in smatch_states.c
      uses function pop_stree(struct stree_stack **) defined in smatch_slist.c
      uses variable pre_cond_stack defined in smatch_states.c
      uses function push_stree(struct stree_stack **,struct stree *) defined in smatch_slist.c
      uses function clone_stree(struct stree *) defined in avl.c
      uses function overwrite_stree(struct stree *,struct stree **) defined in smatch_slist.c
   function __use_pre_cond_states(void) in line 647
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function free_stree(struct stree **) defined in avl.c
      uses variable cur_stree defined in smatch_states.c
      uses function pop_stree(struct stree_stack **) defined in smatch_slist.c
      uses variable pre_cond_stack defined in smatch_states.c
   function __use_cond_true_states(void) in line 653
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function __use_cond_stack(struct stree_stack **) defined in smatch_states.c
      uses variable cond_true_stack defined in smatch_states.c
   function __use_cond_false_states(void) in line 658
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function __use_cond_stack(struct stree_stack **) defined in smatch_states.c
      uses variable cond_false_stack defined in smatch_states.c
   function __negate_cond_stacks(void) in line 663
      protection public
      10 lines of code
      1 parameters
      1 conditional paths
      uses function __use_cond_stack(struct stree_stack **) defined in smatch_states.c
      uses variable cond_false_stack defined in smatch_states.c
      uses function pop_stree(struct stree_stack **) defined in smatch_slist.c
      uses variable cond_true_stack defined in smatch_states.c
      uses function push_stree(struct stree_stack **,struct stree *) defined in smatch_slist.c
   function __and_cond_states(void) in line 674
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function and_stree_stack(struct stree_stack **) defined in smatch_slist.c
      uses variable cond_true_stack defined in smatch_states.c
      uses function or_stree_stack(struct stree_stack **,struct stree *,struct stree_stack **) defined in smatch_slist.c
      uses variable pre_cond_stack defined in smatch_states.c
      uses variable cur_stree defined in smatch_states.c
      uses variable cond_false_stack defined in smatch_states.c
   function __or_cond_states(void) in line 680
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function or_stree_stack(struct stree_stack **,struct stree *,struct stree_stack **) defined in smatch_slist.c
      uses variable pre_cond_stack defined in smatch_states.c
      uses variable cur_stree defined in smatch_states.c
      uses variable cond_true_stack defined in smatch_states.c
      uses function and_stree_stack(struct stree_stack **) defined in smatch_slist.c
      uses variable cond_false_stack defined in smatch_states.c
   function __save_pre_cond_states(void) in line 686
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function push_stree(struct stree_stack **,struct stree *) defined in smatch_slist.c
      uses variable pre_cond_stack defined in smatch_states.c
      uses function clone_stree(struct stree *) defined in avl.c
      uses variable cur_stree defined in smatch_states.c
   function __discard_pre_cond_states(void) in line 691
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses function pop_stree(struct stree_stack **) defined in smatch_slist.c
      uses variable pre_cond_stack defined in smatch_states.c
      uses function free_stree(struct stree **) defined in avl.c
   function __use_cond_states(void) in line 699
      protection public
      19 lines of code
      1 parameters
      1 conditional paths
      uses function pop_stree(struct stree_stack **) defined in smatch_slist.c
      uses variable pre_cond_stack defined in smatch_states.c
      uses function clone_stree(struct stree *) defined in avl.c
      uses variable cond_true_stack defined in smatch_states.c
      uses function overwrite_stree(struct stree *,struct stree **) defined in smatch_slist.c
      uses function free_stree(struct stree **) defined in avl.c
      uses variable cur_stree defined in smatch_states.c
      uses variable cond_false_stack defined in smatch_states.c
      uses function push_stree(struct stree_stack **,struct stree *) defined in smatch_slist.c
      uses variable false_stack defined in smatch_states.c
   function __push_true_states(void) in line 719
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function push_stree(struct stree_stack **,struct stree *) defined in smatch_slist.c
      uses variable true_stack defined in smatch_states.c
      uses function clone_stree(struct stree *) defined in avl.c
      uses variable cur_stree defined in smatch_states.c
   function __use_false_states(void) in line 724
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function free_stree(struct stree **) defined in avl.c
      uses variable cur_stree defined in smatch_states.c
      uses function pop_stree(struct stree_stack **) defined in smatch_slist.c
      uses variable false_stack defined in smatch_states.c
   function __discard_false_states(void) in line 730
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses function pop_stree(struct stree_stack **) defined in smatch_slist.c
      uses variable false_stack defined in smatch_states.c
      uses function free_stree(struct stree **) defined in avl.c
   function __merge_false_states(void) in line 738
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses function pop_stree(struct stree_stack **) defined in smatch_slist.c
      uses variable false_stack defined in smatch_states.c
      uses function merge_stree(struct stree **,struct stree *) defined in smatch_slist.c
      uses variable cur_stree defined in smatch_states.c
      uses function free_stree(struct stree **) defined in avl.c
   function __merge_true_states(void) in line 747
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses function pop_stree(struct stree_stack **) defined in smatch_slist.c
      uses variable true_stack defined in smatch_states.c
      uses function merge_stree(struct stree **,struct stree *) defined in smatch_slist.c
      uses variable cur_stree defined in smatch_states.c
      uses function free_stree(struct stree **) defined in avl.c
   function __push_continues(void) in line 756
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function push_stree(struct stree_stack **,struct stree *) defined in smatch_slist.c
      uses variable continue_stack defined in smatch_states.c
      uses macro definition NULL defined in sm_implied3.c
   function __discard_continues(void) in line 761
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses function pop_stree(struct stree_stack **) defined in smatch_slist.c
      uses variable continue_stack defined in smatch_states.c
      uses function free_stree(struct stree **) defined in avl.c
   function __process_continues(void) in line 769
      protection public
      12 lines of code
      1 parameters
      2 conditional paths
      uses function pop_stree(struct stree_stack **) defined in smatch_slist.c
      uses variable continue_stack defined in smatch_states.c
      uses function clone_stree(struct stree *) defined in avl.c
      uses variable cur_stree defined in smatch_states.c
      uses function merge_stree(struct stree **,struct stree *) defined in smatch_slist.c
      uses function push_stree(struct stree_stack **,struct stree *) defined in smatch_slist.c
   function __merge_continues(void) in line 782
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses function pop_stree(struct stree_stack **) defined in smatch_slist.c
      uses variable continue_stack defined in smatch_states.c
      uses function merge_stree(struct stree **,struct stree *) defined in smatch_slist.c
      uses variable cur_stree defined in smatch_states.c
      uses function free_stree(struct stree **) defined in avl.c
   function __push_breaks(void) in line 791
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function push_stree(struct stree_stack **,struct stree *) defined in smatch_slist.c
      uses variable break_stack defined in smatch_states.c
      uses macro definition NULL defined in sm_implied3.c
   function __process_breaks(void) in line 796
      protection public
      12 lines of code
      1 parameters
      2 conditional paths
      uses function pop_stree(struct stree_stack **) defined in smatch_slist.c
      uses variable break_stack defined in smatch_states.c
      uses function clone_stree(struct stree *) defined in avl.c
      uses variable cur_stree defined in smatch_states.c
      uses function merge_stree(struct stree **,struct stree *) defined in smatch_slist.c
      uses function push_stree(struct stree_stack **,struct stree *) defined in smatch_slist.c
   function __has_breaks(void) in line 809
      protection public
      10 lines of code
      1 parameters
      1 conditional paths
      uses function pop_stree(struct stree_stack **) defined in smatch_slist.c
      uses variable break_stack defined in smatch_states.c
      uses function push_stree(struct stree_stack **,struct stree *) defined in smatch_slist.c
   function __merge_breaks(void) in line 820
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses function pop_stree(struct stree_stack **) defined in smatch_slist.c
      uses variable break_stack defined in smatch_states.c
      uses function merge_stree(struct stree **,struct stree *) defined in smatch_slist.c
      uses variable cur_stree defined in smatch_states.c
      uses function free_stree(struct stree **) defined in avl.c
   function __use_breaks(void) in line 829
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function free_stree(struct stree **) defined in avl.c
      uses variable cur_stree defined in smatch_states.c
      uses function pop_stree(struct stree_stack **) defined in smatch_slist.c
      uses variable break_stack defined in smatch_states.c
   function __save_switch_states(struct expression *) in line 835
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function push_rl(struct range_list_stack **,struct range_list *) defined in smatch_extra.h
      uses variable remaining_cases defined in smatch_states.c
      uses function __get_implied_values(struct expression *) defined in smatch.h
      uses function push_stree(struct stree_stack **,struct stree *) defined in smatch_slist.c
      uses variable switch_stack defined in smatch_states.c
      uses function clone_stree(struct stree *) defined in avl.c
      uses variable cur_stree defined in smatch_states.c
   function __merge_switches(struct expression *,struct expression *,struct expression *) in line 841
      protection public
      11 lines of code
      3 parameters
      1 conditional paths
      uses function pop_stree(struct stree_stack **) defined in smatch_slist.c
      uses variable switch_stack defined in smatch_states.c
      uses function __implied_case_stree(struct expression *,struct expression *,struct expression *,struct range_list_stack **,struct stree **) defined in smatch.h
      uses variable remaining_cases defined in smatch_states.c
      uses function merge_stree(struct stree **,struct stree *) defined in smatch_slist.c
      uses variable cur_stree defined in smatch_states.c
      uses function free_stree(struct stree **) defined in avl.c
      uses function push_stree(struct stree_stack **,struct stree *) defined in smatch_slist.c
   function __discard_switches(void) in line 853
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses function pop_rl(struct range_list_stack **) defined in smatch_extra.h
      uses variable remaining_cases defined in smatch_states.c
      uses function pop_stree(struct stree_stack **) defined in smatch_slist.c
      uses variable switch_stack defined in smatch_states.c
      uses function free_stree(struct stree **) defined in avl.c
   function __push_default(void) in line 862
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function push_stree(struct stree_stack **,struct stree *) defined in smatch_slist.c
      uses variable default_stack defined in smatch_states.c
      uses macro definition NULL defined in sm_implied3.c
   function __set_default(void) in line 867
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function set_state_stree_stack(struct stree_stack **,int,const char *,struct symbol *,struct smatch_state *) defined in smatch_slist.c
      uses variable default_stack defined in smatch_states.c
      uses macro definition NULL defined in sm_implied3.c
      uses variable true_state defined in smatch_states.c
   function __pop_default(void) in line 872
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses function pop_stree(struct stree_stack **) defined in smatch_slist.c
      uses variable default_stack defined in smatch_states.c
      uses function free_stree(struct stree **) defined in avl.c
   function alloc_named_stree(const char *,struct stree *) in line 884
      protection public
      8 lines of code
      2 parameters
      1 conditional paths
      uses variable named_stree::name defined in smatch_slist.h
      uses variable name defined in smatch_type.c
      uses variable named_stree::stree defined in smatch_slist.h
   function __save_gotos(const char *) in line 893
      protection public
      17 lines of code
      1 parameters
      2 conditional paths
      uses function get_named_stree(struct named_stree_stack *,const char *) defined in smatch_slist.c
      uses variable goto_stack defined in smatch_states.c
      uses variable name defined in smatch_type.c
      uses function merge_stree(struct stree **,struct stree *) defined in smatch_slist.c
      uses variable cur_stree defined in smatch_states.c
      uses function clone_stree(struct stree *) defined in avl.c
      uses function alloc_named_stree(const char *,struct stree *) defined in smatch_states.c
      uses macro definition add_ptr_list defined in ptrlist.h
   function __merge_gotos(const char *) in line 911
      protection public
      8 lines of code
      1 parameters
      2 conditional paths
      uses function get_named_stree(struct named_stree_stack *,const char *) defined in smatch_slist.c
      uses variable goto_stack defined in smatch_states.c
      uses variable name defined in smatch_type.c
      uses function merge_stree(struct stree **,struct stree *) defined in smatch_slist.c
      uses variable cur_stree defined in smatch_states.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/smatch_stored_conditions.c
module smatch_stored_conditions.c
   macro definition RECURSE_LIMIT in line 211
      protection public
   variable my_id in line 42
      protection public
   variable link_id in line 43
      protection public
   function alloc_link_state(struct string_list *) in line 45
      protection public
      23 lines of code
      1 parameters
      2 conditional paths
      uses variable buf defined in sm_fake_assignment.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses function snprintf(char *,int,char *,char *) defined in sm_overflow6.c
      uses function append(char *,const char *,int) defined in smatch.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses variable smatch_state::name defined in smatch.h
      uses function alloc_sname(const char *) defined in smatch_slist.c
      uses variable smatch_state::data defined in smatch.h
   function merge_links(struct smatch_state *,struct smatch_state *) in line 69
      protection public
      9 lines of code
      2 parameters
      1 conditional paths
      uses function combine_string_lists(struct string_list *,struct string_list *) defined in smatch.h
      uses function alloc_link_state(struct string_list *) defined in smatch_stored_conditions.c
   function save_link_var_sym(const char *,struct symbol *,const char *) in line 79
      protection public
      18 lines of code
      3 parameters
      2 conditional paths
      uses function get_state(int,const char *,struct symbol *) defined in smatch.h
      uses variable link_id defined in smatch_stored_conditions.c
      uses variable sym defined in smatch_type.c
      uses function clone_str_list(struct string_list *) defined in smatch.h
      uses variable smatch_state::data defined in smatch.h
      uses macro definition NULL defined in sm_implied3.c
      uses function alloc_sname(const char *) defined in smatch_slist.c
      uses function insert_string(struct string_list **,const char *) defined in smatch.h
      uses function alloc_link_state(struct string_list *) defined in smatch_stored_conditions.c
      uses function set_state(int,const char *,struct symbol *,struct smatch_state *) defined in smatch.h
   function match_link_modify(struct sm_state *,struct expression *) in line 98
      protection public
      12 lines of code
      2 parameters
      1 conditional paths
      uses variable sm_state::state defined in smatch.h
      uses variable smatch_state::data defined in smatch.h
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses function set_state(int,const char *,struct symbol *,struct smatch_state *) defined in smatch.h
      uses variable my_id defined in smatch_stored_conditions.c
      uses macro definition NULL defined in sm_implied3.c
      uses variable undefined defined in smatch.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses variable link_id defined in smatch_stored_conditions.c
      uses variable sm_state::name defined in smatch.h
      uses variable sm_state::sym defined in smatch.h
   function alloc_state(struct expression *,int) in line 111
      protection public
      12 lines of code
      2 parameters
      2 conditional paths
      uses variable smatch_state::name defined in smatch.h
      uses function alloc_sname(const char *) defined in smatch_slist.c
      uses variable smatch_state::data defined in smatch.h
   function store_all_links(struct expression *,const char *) in line 124
      protection public
      30 lines of code
      2 parameters
      8 conditional paths
      uses variable sym defined in smatch_type.c
      uses function strip_expr(struct expression *) defined in smatch.h
      uses function is_array(struct expression *) defined in smatch.h
      uses function expr_to_known_chunk_sym(struct expression *,struct symbol **) defined in smatch.h
      uses function save_link_var_sym(const char *,struct symbol *,const char *) defined in smatch_stored_conditions.c
      uses variable condition defined in context.c
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_COMPARE defined in expression.h
      uses enumvalue EXPR_BINOP defined in expression.h
      uses variable expression::left defined in expression.h
      uses variable expression::right defined in expression.h
      uses enumvalue EXPR_VALUE defined in expression.h
      uses function expr_to_var_sym(struct expression *,struct symbol **) defined in smatch.h
      uses function free_string(char *) defined in smatch.h
   function condition_too_complicated(struct expression *) in line 155
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses function get_complication_score(struct expression *) defined in smatch.h
   function __stored_condition(struct expression *) in line 163
      protection public
      21 lines of code
      1 parameters
      4 conditional paths
      uses variable true_state defined in smatch.h
      uses variable false_state defined in smatch.h
      uses variable name defined in smatch_type.c
      uses function get_implied_value(struct expression *,sval_t *) defined in smatch.h
      uses function condition_too_complicated(struct expression *) defined in smatch_stored_conditions.c
      uses function expr_to_str(struct expression *) defined in smatch.h
      uses function alloc_state(struct expression *,int) defined in smatch_stored_conditions.c
      uses macro definition TRUE defined in smatch.h
      uses macro definition FALSE defined in smatch.h
      uses function set_true_false_states(int,const char *,struct symbol *,struct smatch_state *,struct smatch_state *) defined in smatch.h
      uses variable my_id defined in smatch_stored_conditions.c
      uses macro definition NULL defined in sm_implied3.c
      uses function store_all_links(struct expression *,const char *) defined in smatch_stored_conditions.c
      uses function alloc_sname(const char *) defined in smatch_slist.c
      uses function free_string(char *) defined in smatch.h
   function get_stored_condition(struct expression *) in line 185
      protection public
      13 lines of code
      1 parameters
      2 conditional paths
      uses variable name defined in smatch_type.c
      uses function expr_to_str(struct expression *) defined in smatch.h
      uses macro definition NULL defined in sm_implied3.c
      uses function get_state(int,const char *,struct symbol *) defined in smatch.h
      uses variable my_id defined in smatch_stored_conditions.c
      uses function free_string(char *) defined in smatch.h
   function register_stored_conditions(int) in line 199
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable my_id defined in smatch_stored_conditions.c
   function register_stored_conditions_links(int) in line 204
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses variable link_id defined in smatch_stored_conditions.c
      uses function add_merge_hook(int,merge_func_t *) defined in smatch.h
      uses function merge_links(struct smatch_state *,struct smatch_state *) defined in smatch_stored_conditions.c
      uses function add_modification_hook(int,modification_hook *) defined in smatch.h
      uses function match_link_modify(struct sm_state *,struct expression *) defined in smatch_stored_conditions.c
   function filter_by_sm(struct sm_state *,struct stree_stack **,struct stree_stack **,int *) in line 213
      protection public
      22 lines of code
      4 parameters
      6 conditional paths
      uses macro definition RECURSE_LIMIT defined in smatch_stored_conditions.c
      uses variable sm_state::state defined in smatch.h
      uses variable smatch_state::name defined in smatch.h
      uses function add_pool(struct stree_stack **,struct stree *) defined in smatch.h
      uses variable sm_state::pool defined in smatch.h
      uses variable sm_state::merged defined in smatch.h
      uses variable sm_state::left defined in smatch.h
      uses variable sm_state::right defined in smatch.h
   function stored_condition_implication_hook(struct expression *,struct stree_stack **,struct stree_stack **) in line 236
      protection public
      52 lines of code
      3 parameters
      8 conditional paths
      uses variable name defined in smatch_type.c
      uses macro definition NULL defined in sm_implied3.c
      uses function strip_expr(struct expression *) defined in smatch.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_BINOP defined in expression.h
      uses function expr_to_str(struct expression *) defined in smatch.h
      uses function get_sm_state(int,const char *,struct symbol *) defined in smatch.h
      uses variable my_id defined in smatch_stored_conditions.c
      uses function free_string(char *) defined in smatch.h
      uses variable sm_state::merged defined in smatch.h
      uses function filter_by_sm(struct sm_state *,struct stree_stack **,struct stree_stack **,int *) defined in smatch_stored_conditions.c
      uses macro definition RECURSE_LIMIT defined in smatch_stored_conditions.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses function add_pool(struct stree_stack **,struct stree *) defined in smatch.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses function free_stree_stack(struct stree_stack **) defined in smatch_slist.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/smatch_string_list.c
module smatch_string_list.c
   function list_has_string(struct string_list *,const char *) in line 20
      protection public
      16 lines of code
      2 parameters
      4 conditional paths
      uses variable str defined in sm_overflow6.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function insert_string(struct string_list **,const char *) in line 37
      protection public
      17 lines of code
      2 parameters
      3 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses macro definition INSERT_CURRENT defined in ptrlist.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses macro definition add_ptr_list defined in ptrlist.h
   function clone_str_list(struct string_list *) in line 55
      protection public
      10 lines of code
      1 parameters
      1 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses macro definition add_ptr_list defined in ptrlist.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function combine_string_lists(struct string_list *,struct string_list *) in line 66
      protection public
      11 lines of code
      2 parameters
      1 conditional paths
      uses function clone_str_list(struct string_list *) defined in smatch_string_list.c
      uses variable one defined in sm_equiv1.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable two defined in sm_equiv1.c
      uses function insert_string(struct string_list **,const char *) defined in smatch_string_list.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/smatch_strings.c
module smatch_strings.c
   variable my_id in line 21
      protection public
   function match_strcpy(const char *,struct expression *,void *) in line 23
      protection public
      10 lines of code
      3 parameters
      2 conditional paths
      uses variable dest defined in sm_user_data2.c
      uses variable src defined in sm_user_data3.c
      uses function get_argument_from_call_expr(struct expression_list *,int) defined in smatch.h
      uses variable expression::args defined in expression.h
      uses function strip_expr(struct expression *) defined in smatch.h
      uses enumvalue EXPR_STRING defined in expression.h
      uses function set_state_expr(int,struct expression *,struct smatch_state *) defined in smatch.h
      uses variable my_id defined in smatch_strings.c
      uses function alloc_state_str(const char *) defined in smatch.h
   function get_strings(struct expression *) in line 34
      protection public
      37 lines of code
      1 parameters
      6 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses function strip_expr(struct expression *) defined in smatch.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_STRING defined in expression.h
      uses variable sm_state::state defined in smatch.h
      uses function alloc_state_str(const char *) defined in smatch.h
      uses variable expression::string defined in expression.h
      uses variable string::data defined in token.h
      uses function alloc_sm_state(int,const char *,struct symbol *,struct smatch_state *) defined in smatch_slist.c
      uses variable my_id defined in smatch_strings.c
      uses macro definition add_ptr_list defined in ptrlist.h
      uses enumvalue EXPR_CONDITIONAL defined in expression.h
      uses enumvalue EXPR_SELECT defined in expression.h
      uses function known_condition_true(struct expression *) defined in smatch.h
      uses variable expression::conditional defined in expression.h
      uses variable expression::cond_true defined in expression.h
      uses function known_condition_false(struct expression *) defined in smatch.h
      uses variable expression::cond_false defined in expression.h
      uses function concat_ptr_list(struct ptr_list *,struct ptr_list **) defined in ptrlist.c
      uses function free_slist(struct state_list **) defined in smatch_slist.c
      uses function get_sm_state_expr(int,struct expression *) defined in smatch.h
      uses function clone_slist(struct state_list *) defined in smatch_slist.c
      uses variable sm_state::possible defined in smatch.h
   function match_assignment(struct expression *) in line 72
      protection public
      18 lines of code
      1 parameters
      4 conditional paths
      uses variable expression::op defined in expression.h
      uses function get_strings(struct expression *) defined in smatch_strings.c
      uses function strip_expr(struct expression *) defined in smatch.h
      uses variable expression::right defined in expression.h
      uses function ptr_list_size(struct ptr_list *) defined in ptrlist.c
      uses function set_state_expr(int,struct expression *,struct smatch_state *) defined in smatch.h
      uses variable my_id defined in smatch_strings.c
      uses variable expression::left defined in expression.h
      uses variable sm_state::state defined in smatch.h
   function register_strings(int) in line 91
      protection public
      11 lines of code
      1 parameters
      1 conditional paths
      uses variable my_id defined in smatch_strings.c
      uses function add_function_hook(const char *,func_hook *,void *) defined in smatch.h
      uses function match_strcpy(const char *,struct expression *,void *) defined in smatch_strings.c
      uses macro definition NULL defined in sm_implied3.c
      uses function add_hook(void *,enum hook_type) defined in smatch.h
      uses function match_assignment(struct expression *) defined in smatch_strings.c
      uses enumvalue ASSIGNMENT_HOOK defined in smatch.h
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/smatch_strlen.c
module smatch_strlen.c
   macro definition UNKNOWN_SIZE in line 25
      protection public
   variable my_strlen_id in line 27
      protection public
   variable my_equiv_id in line 34
      protection public
   function size_to_estate(int) in line 36
      protection public
      9 lines of code
      1 parameters
      1 conditional paths
      uses variable sval_t::type defined in smatch.h
      uses variable sval_t::value defined in smatch.h
      uses function alloc_estate_sval(sval_t) defined in smatch_estate.c
   function unmatched_strlen_state(struct sm_state *) in line 46
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function size_to_estate(int) defined in smatch_strlen.c
      uses macro definition UNKNOWN_SIZE defined in smatch_strlen.c
   function set_strlen_undefined(struct sm_state *,struct expression *) in line 51
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function set_state(int,const char *,struct symbol *,struct smatch_state *) defined in smatch.h
      uses variable sm_state::owner defined in smatch.h
      uses variable sm_state::name defined in smatch.h
      uses variable sm_state::sym defined in smatch.h
      uses function size_to_estate(int) defined in smatch_strlen.c
      uses macro definition UNKNOWN_SIZE defined in smatch_strlen.c
   function set_strlen_equiv_undefined(struct sm_state *,struct expression *) in line 56
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function set_state(int,const char *,struct symbol *,struct smatch_state *) defined in smatch.h
      uses variable sm_state::owner defined in smatch.h
      uses variable sm_state::name defined in smatch.h
      uses variable sm_state::sym defined in smatch.h
      uses variable undefined defined in smatch.h
   function match_string_assignment(struct expression *) in line 61
      protection public
      10 lines of code
      1 parameters
      3 conditional paths
      uses variable expression::op defined in expression.h
      uses function get_implied_strlen(struct expression *,struct range_list **) defined in smatch_strlen.c
      uses variable expression::right defined in expression.h
      uses function set_state_expr(int,struct expression *,struct smatch_state *) defined in smatch.h
      uses variable my_strlen_id defined in smatch_strlen.c
      uses variable expression::left defined in expression.h
      uses function alloc_estate_rl(struct range_list *) defined in smatch_estate.c
      uses function clone_rl(struct range_list *) defined in smatch_extra.h
   function match_strlen(const char *,struct expression *,void *) in line 72
      protection public
      22 lines of code
      3 parameters
      2 conditional paths
      uses variable expression::right defined in expression.h
      uses variable str defined in sm_overflow6.c
      uses function strip_expr(struct expression *) defined in smatch.h
      uses function get_argument_from_call_expr(struct expression_list *,int) defined in smatch.h
      uses variable expression::args defined in expression.h
      uses variable expression::left defined in expression.h
      uses function expr_to_var(struct expression *) defined in smatch.h
      uses variable smatch_state::name defined in smatch.h
      uses variable smatch_state::data defined in smatch.h
      uses function set_state_expr(int,struct expression *,struct smatch_state *) defined in smatch.h
      uses variable my_equiv_id defined in smatch_strlen.c
   function match_strlen_condition(struct expression *) in line 95
      protection public
      69 lines of code
      1 parameters
      19 conditional paths
      uses variable expression::left defined in expression.h
      uses variable expression::right defined in expression.h
      uses variable str defined in sm_overflow6.c
      uses macro definition NULL defined in sm_implied3.c
      uses variable true_state defined in smatch.h
      uses variable false_state defined in smatch.h
      uses function op(void) defined in loop2.c
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_COMPARE defined in expression.h
      uses function strip_expr(struct expression *) defined in smatch.h
      uses enumvalue EXPR_CALL defined in expression.h
      uses function sym_name_is(const char *,struct expression *) defined in smatch.h
      uses variable expression::fn defined in expression.h
      uses function get_argument_from_call_expr(struct expression_list *,int) defined in smatch.h
      uses variable expression::args defined in expression.h
      uses variable expression::op defined in expression.h
      uses function get_value(struct expression *,sval_t *) defined in smatch.h
      uses function flip_comparison(int) defined in smatch.h
      uses enumvalue SPECIAL_UNSIGNED_LT defined in token.h
      uses function size_to_estate(int) defined in smatch_strlen.c
      uses variable sval_t::value defined in smatch.h
      uses enumvalue SPECIAL_LTE defined in token.h
      uses enumvalue SPECIAL_UNSIGNED_LTE defined in token.h
      uses enumvalue SPECIAL_EQUAL defined in token.h
      uses enumvalue SPECIAL_NOTEQUAL defined in token.h
      uses enumvalue SPECIAL_GTE defined in token.h
      uses enumvalue SPECIAL_UNSIGNED_GTE defined in token.h
      uses enumvalue SPECIAL_UNSIGNED_GT defined in token.h
      uses function set_true_false_states_expr(int,struct expression *,struct smatch_state *,struct smatch_state *) defined in smatch.h
      uses variable my_strlen_id defined in smatch_strlen.c
   function match_snprintf(const char *,struct expression *,void *) in line 165
      protection public
      17 lines of code
      3 parameters
      3 conditional paths
      uses variable dest defined in sm_user_data2.c
      uses function get_argument_from_call_expr(struct expression_list *,int) defined in smatch.h
      uses variable expression::args defined in expression.h
      uses function get_implied_value(struct expression *,sval_t *) defined in smatch.h
      uses variable sval_t::value defined in smatch.h
      uses function set_state_expr(int,struct expression *,struct smatch_state *) defined in smatch.h
      uses variable my_strlen_id defined in smatch_strlen.c
      uses function size_to_estate(int) defined in smatch_strlen.c
   function match_strlcpycat(const char *,struct expression *,void *) in line 183
      protection public
      23 lines of code
      3 parameters
      4 conditional paths
      uses variable dest defined in sm_user_data2.c
      uses variable src defined in sm_user_data3.c
      uses function get_argument_from_call_expr(struct expression_list *,int) defined in smatch.h
      uses variable expression::args defined in expression.h
      uses function get_size_from_strlen(struct expression *) defined in smatch_strlen.c
      uses function get_implied_max(struct expression *,sval_t *) defined in smatch.h
      uses variable sval_t::value defined in smatch.h
      uses function set_state_expr(int,struct expression *,struct smatch_state *) defined in smatch.h
      uses variable my_strlen_id defined in smatch_strlen.c
      uses function size_to_estate(int) defined in smatch_strlen.c
   function match_strcpy(const char *,struct expression *,void *) in line 207
      protection public
      15 lines of code
      3 parameters
      2 conditional paths
      uses variable dest defined in sm_user_data2.c
      uses variable src defined in sm_user_data3.c
      uses function get_argument_from_call_expr(struct expression_list *,int) defined in smatch.h
      uses variable expression::args defined in expression.h
      uses function get_size_from_strlen(struct expression *) defined in smatch_strlen.c
      uses function set_state_expr(int,struct expression *,struct smatch_state *) defined in smatch.h
      uses variable my_strlen_id defined in smatch_strlen.c
      uses function size_to_estate(int) defined in smatch_strlen.c
   function get_strlen_from_string(struct expression *,struct range_list **) in line 223
      protection public
      10 lines of code
      2 parameters
      1 conditional paths
      uses variable expression::string defined in expression.h
      uses variable string::length defined in token.h
      uses function sval_type_val(struct symbol *,long long) defined in smatch.h
      uses function alloc_rl(sval_t,sval_t) defined in smatch_extra.h
   function get_strlen_from_state(struct expression *,struct range_list **) in line 235
      protection public
      10 lines of code
      2 parameters
      2 conditional paths
      uses function get_state_expr(int,struct expression *) defined in smatch.h
      uses variable my_strlen_id defined in smatch_strlen.c
      uses function estate_rl(struct smatch_state *) defined in smatch_estate.c
   function get_strlen_from_equiv(struct expression *,struct range_list **) in line 246
      protection public
      11 lines of code
      2 parameters
      3 conditional paths
      uses function get_state_expr(int,struct expression *) defined in smatch.h
      uses variable my_equiv_id defined in smatch_strlen.c
      uses variable smatch_state::data defined in smatch.h
      uses function get_implied_rl(struct expression *,struct range_list **) defined in smatch_extra.h
   function get_implied_strlen(struct expression *,struct range_list **) in line 261
      protection public
      15 lines of code
      2 parameters
      4 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses function strip_expr(struct expression *) defined in smatch.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_STRING defined in expression.h
      uses function get_strlen_from_string(struct expression *,struct range_list **) defined in smatch_strlen.c
      uses function get_strlen_from_state(struct expression *,struct range_list **) defined in smatch_strlen.c
      uses function get_strlen_from_equiv(struct expression *,struct range_list **) defined in smatch_strlen.c
   function get_size_from_strlen(struct expression *) in line 277
      protection public
      13 lines of code
      1 parameters
      3 conditional paths
      uses function get_implied_strlen(struct expression *,struct range_list **) defined in smatch_strlen.c
      uses function rl_max(struct range_list *) defined in smatch_extra.h
      uses function sval_is_negative(sval_t) defined in smatch.h
      uses function sval_is_max(sval_t) defined in smatch.h
      uses variable sval_t::value defined in smatch.h
   function set_param_strlen(const char *,struct symbol *,char *,char *) in line 291
      protection public
      17 lines of code
      4 parameters
      3 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses function snprintf(char *,int,char *,char *) defined in sm_overflow6.c
      uses variable name defined in smatch_type.c
      uses function str_to_rl(struct symbol *,char *,struct range_list **) defined in smatch_extra.h
      uses function is_whole_rl(struct range_list *) defined in smatch_extra.h
      uses function alloc_estate_rl(struct range_list *) defined in smatch_estate.c
      uses function set_state(int,const char *,struct symbol *,struct smatch_state *) defined in smatch.h
      uses variable my_strlen_id defined in smatch_strlen.c
      uses variable sym defined in smatch_type.c
   function match_call(struct expression *) in line 309
      protection public
      15 lines of code
      1 parameters
      3 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable expression::args defined in expression.h
      uses function get_implied_strlen(struct expression *,struct range_list **) defined in smatch_strlen.c
      uses function is_whole_rl(struct range_list *) defined in smatch_extra.h
      uses function sql_insert_caller_info(struct expression *,int,int,const char *,const char *) defined in smatch.h
      uses enumvalue STR_LEN defined in smatch.h
      uses function show_rl(struct range_list *) defined in smatch_extra.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function struct_member_callback(struct expression *,int,char *,struct sm_state *) in line 325
      protection public
      6 lines of code
      4 parameters
      2 conditional paths
      uses variable sm_state::state defined in smatch.h
      uses variable merged defined in smatch.h
      uses function sql_insert_caller_info(struct expression *,int,int,const char *,const char *) defined in smatch.h
      uses enumvalue STR_LEN defined in smatch.h
      uses variable param defined in smatch_parse_call_math.c
      uses variable smatch_state::name defined in smatch.h
   function register_strlen(int) in line 332
      protection public
      21 lines of code
      1 parameters
      1 conditional paths
      uses variable my_strlen_id defined in smatch_strlen.c
      uses function add_unmatched_state_hook(int,unmatched_func_t *) defined in smatch.h
      uses function unmatched_strlen_state(struct sm_state *) defined in smatch_strlen.c
      uses function select_caller_info_hook(void(*)(const char *name, struct symbol *sym, char *key, char *value),int) defined in smatch.h
      uses function set_param_strlen(const char *,struct symbol *,char *,char *) defined in smatch_strlen.c
      uses enumvalue STR_LEN defined in smatch.h
      uses function add_hook(void *,enum hook_type) defined in smatch.h
      uses function match_string_assignment(struct expression *) defined in smatch_strlen.c
      uses enumvalue ASSIGNMENT_HOOK defined in smatch.h
      uses function add_modification_hook(int,modification_hook *) defined in smatch.h
      uses function set_strlen_undefined(struct sm_state *,struct expression *) defined in smatch_strlen.c
      uses function add_merge_hook(int,merge_func_t *) defined in smatch.h
      uses function merge_estates(struct smatch_state *,struct smatch_state *) defined in smatch_estate.c
      uses function match_call(struct expression *) defined in smatch_strlen.c
      uses enumvalue FUNCTION_CALL_HOOK defined in smatch.h
      uses function add_member_info_callback(int,void(*)(struct expression *call, int param, char *printed_name, struct sm_state *sm)) defined in smatch.h
      uses function struct_member_callback(struct expression *,int,char *,struct sm_state *) defined in smatch_strlen.c
      uses function match_strlen_condition(struct expression *) defined in smatch_strlen.c
      uses enumvalue CONDITION_HOOK defined in smatch.h
      uses function add_function_hook(const char *,func_hook *,void *) defined in smatch.h
      uses function match_snprintf(const char *,struct expression *,void *) defined in smatch_strlen.c
      uses macro definition NULL defined in sm_implied3.c
      uses function match_strlcpycat(const char *,struct expression *,void *) defined in smatch_strlen.c
      uses function match_strcpy(const char *,struct expression *,void *) defined in smatch_strlen.c
   function register_strlen_equiv(int) in line 354
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses variable my_equiv_id defined in smatch_strlen.c
      uses function add_function_assign_hook(const char *,func_hook *,void *) defined in smatch.h
      uses function match_strlen(const char *,struct expression *,void *) defined in smatch_strlen.c
      uses macro definition NULL defined in sm_implied3.c
      uses function add_modification_hook(int,modification_hook *) defined in smatch.h
      uses function set_strlen_equiv_undefined(struct sm_state *,struct expression *) defined in smatch_strlen.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/smatch_struct_assignment.c
module smatch_struct_assignment.c
   enumeration @141 in line 63
      protection public
   variable faked_expression in line 117
      protection public
   enumvalue COPY_NORMAL in line 64
      protection public
   enumvalue COPY_MEMCPY in line 65
      protection public
   enumvalue COPY_MEMSET in line 66
      protection public
   function get_struct_type(struct expression *) in line 69
      protection public
      13 lines of code
      1 parameters
      4 conditional paths
      uses function get_type(struct expression *) defined in smatch.h
      uses macro definition NULL defined in sm_implied3.c
      uses enumvalue SYM_PTR defined in symbol.h
      uses function get_real_base_type(struct symbol *) defined in smatch.h
      uses enumvalue SYM_STRUCT defined in symbol.h
   function get_right_base_expr(struct symbol *,struct expression *) in line 83
      protection public
      24 lines of code
      2 parameters
      7 conditional paths
      uses variable struct_type defined in smdb.py
      uses macro definition NULL defined in sm_implied3.c
      uses function get_struct_type(struct expression *) defined in smatch_struct_assignment.c
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_PREOP defined in expression.h
      uses variable expression::op defined in expression.h
      uses function strip_expr(struct expression *) defined in smatch.h
      uses variable expression::unop defined in expression.h
      uses enumvalue EXPR_CALL defined in expression.h
      uses function is_pointer(struct expression *) defined in smatch.h
      uses function deref_expression(struct expression *) defined in smatch_expressions.c
   function remove_addr(struct expression *) in line 108
      protection public
      8 lines of code
      1 parameters
      2 conditional paths
      uses function strip_expr(struct expression *) defined in smatch.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_PREOP defined in expression.h
      uses variable expression::op defined in expression.h
      uses variable expression::unop defined in expression.h
   function get_faked_expression(void) in line 118
      protection public
      6 lines of code
      1 parameters
      2 conditional paths
      uses variable __in_fake_assign defined in smatch.h
      uses macro definition NULL defined in sm_implied3.c
      uses variable faked_expression defined in smatch_struct_assignment.c
   function set_inner_struct_members(int,struct expression *,struct expression *,struct expression *,struct symbol *) in line 125
      protection public
      51 lines of code
      5 parameters
      11 conditional paths
      uses function get_real_base_type(struct symbol *) defined in smatch.h
      uses variable member defined in smdb.py
      uses function member_expression(struct expression *,int,struct ident *) defined in smatch_expressions.c
      uses enumvalue COPY_MEMSET defined in smatch_struct_assignment.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable symbol::symbol_list defined in struct.c
      uses enumvalue SYM_ARRAY defined in symbol.h
      uses enumvalue SYM_UNION defined in symbol.h
      uses enumvalue SYM_STRUCT defined in symbol.h
      uses variable symbol::ident defined in struct.c
      uses enumvalue COPY_NORMAL defined in smatch_struct_assignment.c
      uses enumvalue COPY_MEMCPY defined in smatch_struct_assignment.c
      uses function unknown_value_expression(struct expression *) defined in smatch_extra.h
      uses function assign_expression(struct expression *,struct expression *) defined in smatch_expressions.c
      uses variable __in_fake_assign defined in smatch.h
      uses function __split_expr(struct expression *) defined in smatch.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function __struct_members_copy(int,struct expression *,struct expression *,struct expression *) in line 177
      protection public
      92 lines of code
      4 parameters
      18 conditional paths
      uses variable struct_type defined in smdb.py
      uses function op(void) defined in loop2.c
      uses variable __in_fake_assign defined in smatch.h
      uses variable faked_expression defined in smatch_struct_assignment.c
      uses variable expression::left defined in expression.h
      uses function strip_expr(struct expression *) defined in smatch.h
      uses variable expression::right defined in expression.h
      uses function get_struct_type(struct expression *) defined in smatch_struct_assignment.c
      uses function get_type(struct expression *) defined in smatch.h
      uses enumvalue SYM_BASETYPE defined in symbol.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_PREOP defined in expression.h
      uses variable expression::op defined in expression.h
      uses function remove_addr(struct expression *) defined in smatch_struct_assignment.c
      uses function unknown_value_expression(struct expression *) defined in smatch_extra.h
      uses function assign_expression(struct expression *,struct expression *) defined in smatch_expressions.c
      uses function __split_expr(struct expression *) defined in smatch.h
      uses function is_pointer(struct expression *) defined in smatch.h
      uses function deref_expression(struct expression *) defined in smatch_expressions.c
      uses enumvalue COPY_MEMSET defined in smatch_struct_assignment.c
      uses function get_right_base_expr(struct symbol *,struct expression *) defined in smatch_struct_assignment.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses function get_real_base_type(struct symbol *) defined in smatch.h
      uses enumvalue SYM_ARRAY defined in symbol.h
      uses enumvalue SYM_UNION defined in symbol.h
      uses enumvalue SYM_STRUCT defined in symbol.h
      uses function set_inner_struct_members(int,struct expression *,struct expression *,struct expression *,struct symbol *) defined in smatch_struct_assignment.c
      uses variable symbol::ident defined in struct.c
      uses function member_expression(struct expression *,int,struct ident *) defined in smatch_expressions.c
      uses macro definition NULL defined in sm_implied3.c
      uses enumvalue COPY_NORMAL defined in smatch_struct_assignment.c
      uses enumvalue COPY_MEMCPY defined in smatch_struct_assignment.c
      uses macro definition sm_msg defined in smatch.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function returns_zeroed_mem(struct expression *) in line 270
      protection public
      15 lines of code
      1 parameters
      5 conditional paths
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_CALL defined in expression.h
      uses variable expression::fn defined in expression.h
      uses enumvalue EXPR_SYMBOL defined in expression.h
      uses function expr_to_var(struct expression *) defined in smatch.h
      uses variable option_project defined in smatch.c
      uses enumvalue PROJ_KERNEL defined in smatch.h
   function __fake_struct_member_assignments(struct expression *) in line 286
      protection public
      16 lines of code
      1 parameters
      4 conditional paths
      uses variable struct_type defined in smdb.py
      uses function is_zero(struct expression *) defined in smatch.h
      uses variable expression::right defined in expression.h
      uses function get_struct_type(struct expression *) defined in smatch_struct_assignment.c
      uses variable expression::left defined in expression.h
      uses function returns_zeroed_mem(struct expression *) defined in smatch_struct_assignment.c
      uses function __struct_members_copy(int,struct expression *,struct expression *,struct expression *) defined in smatch_struct_assignment.c
      uses enumvalue COPY_MEMSET defined in smatch_struct_assignment.c
      uses function zero_expr(void) defined in smatch_expressions.c
      uses enumvalue COPY_NORMAL defined in smatch_struct_assignment.c
   function match_memset(const char *,struct expression *,void *) in line 303
      protection public
      11 lines of code
      3 parameters
      1 conditional paths
      uses variable buf defined in sm_fake_assignment.c
      uses function get_argument_from_call_expr(struct expression_list *,int) defined in smatch.h
      uses variable expression::args defined in expression.h
      uses function strip_expr(struct expression *) defined in smatch.h
      uses function __struct_members_copy(int,struct expression *,struct expression *,struct expression *) defined in smatch_struct_assignment.c
      uses enumvalue COPY_MEMSET defined in smatch_struct_assignment.c
      uses function remove_addr(struct expression *) defined in smatch_struct_assignment.c
   function match_memcpy(const char *,struct expression *,void *) in line 315
      protection public
      10 lines of code
      3 parameters
      1 conditional paths
      uses variable dest defined in sm_user_data2.c
      uses variable src defined in sm_user_data3.c
      uses function get_argument_from_call_expr(struct expression_list *,int) defined in smatch.h
      uses variable expression::args defined in expression.h
      uses function __struct_members_copy(int,struct expression *,struct expression *,struct expression *) defined in smatch_struct_assignment.c
      uses enumvalue COPY_MEMCPY defined in smatch_struct_assignment.c
      uses function remove_addr(struct expression *) defined in smatch_struct_assignment.c
   function match_memcpy_unknown(const char *,struct expression *,void *) in line 326
      protection public
      7 lines of code
      3 parameters
      1 conditional paths
      uses variable dest defined in sm_user_data2.c
      uses function get_argument_from_call_expr(struct expression_list *,int) defined in smatch.h
      uses variable expression::args defined in expression.h
      uses function __struct_members_copy(int,struct expression *,struct expression *,struct expression *) defined in smatch_struct_assignment.c
      uses enumvalue COPY_MEMCPY defined in smatch_struct_assignment.c
      uses function remove_addr(struct expression *) defined in smatch_struct_assignment.c
      uses macro definition NULL defined in sm_implied3.c
   function match_sscanf(const char *,struct expression *,void *) in line 334
      protection public
      12 lines of code
      3 parameters
      2 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable expression::args defined in expression.h
      uses function __struct_members_copy(int,struct expression *,struct expression *,struct expression *) defined in smatch_struct_assignment.c
      uses enumvalue COPY_MEMCPY defined in smatch_struct_assignment.c
      uses function remove_addr(struct expression *) defined in smatch_struct_assignment.c
      uses macro definition NULL defined in sm_implied3.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function register_clears_param(void) in line 347
      protection public
      31 lines of code
      1 parameters
      7 conditional paths
      uses variable name defined in smatch_type.c
      uses variable param defined in smatch_parse_call_math.c
      uses variable option_project defined in smatch.c
      uses enumvalue PROJ_NONE defined in smatch.h
      uses function snprintf(char *,int,char *,char *) defined in sm_overflow6.c
      uses variable option_project_str defined in smatch.c
      uses function get_tokens_file(const char *) defined in smatch.h
      uses enumvalue TOKEN_STREAMBEGIN defined in token.h
      uses variable token::next defined in token.h
      uses enumvalue TOKEN_STREAMEND defined in token.h
      uses enumvalue TOKEN_IDENT defined in token.h
      uses function show_ident(const struct ident *) defined in token.h
      uses variable token::ident defined in token.h
      uses enumvalue TOKEN_NUMBER defined in token.h
      uses variable token::number defined in token.h
      uses function add_function_hook(const char *,func_hook *,void *) defined in smatch.h
      uses function match_memcpy_unknown(const char *,struct expression *,void *) defined in smatch_struct_assignment.c
   function db_param_cleared(struct expression *,int,char *,char *) in line 379
      protection public
      26 lines of code
      4 parameters
      6 conditional paths
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_ASSIGNMENT defined in expression.h
      uses function strip_expr(struct expression *) defined in smatch.h
      uses variable expression::right defined in expression.h
      uses enumvalue EXPR_CALL defined in expression.h
      uses function get_argument_from_call_expr(struct expression_list *,int) defined in smatch.h
      uses variable expression::args defined in expression.h
      uses variable param defined in smatch_parse_call_math.c
      uses function __struct_members_copy(int,struct expression *,struct expression *,struct expression *) defined in smatch_struct_assignment.c
      uses enumvalue COPY_MEMSET defined in smatch_struct_assignment.c
      uses function remove_addr(struct expression *) defined in smatch_struct_assignment.c
      uses function zero_expr(void) defined in smatch_expressions.c
      uses enumvalue COPY_MEMCPY defined in smatch_struct_assignment.c
      uses macro definition NULL defined in sm_implied3.c
   function register_struct_assignment(int) in line 406
      protection public
      15 lines of code
      1 parameters
      1 conditional paths
      uses function add_function_hook(const char *,func_hook *,void *) defined in smatch.h
      uses function match_memset(const char *,struct expression *,void *) defined in smatch_struct_assignment.c
      uses macro definition NULL defined in sm_implied3.c
      uses function match_memcpy(const char *,struct expression *,void *) defined in smatch_struct_assignment.c
      uses function match_sscanf(const char *,struct expression *,void *) defined in smatch_struct_assignment.c
      uses function register_clears_param(void) defined in smatch_struct_assignment.c
      uses function select_return_states_hook(int,return_implies_hook *) defined in smatch.h
      uses enumvalue PARAM_CLEARED defined in smatch.h
      uses function db_param_cleared(struct expression *,int,char *,char *) defined in smatch_struct_assignment.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/smatch_sval.c
module smatch_sval.c
   function __ALLOCATOR(sval_t,"svals",sval) in line 33
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function sval_alloc(sval_t) in line 35
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
   function sval_alloc_permanent(sval_t) in line 44
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses function malloc(int) defined in sm_buf_size2.c
   function sval_blank(struct expression *) in line 53
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses variable sval_t::type defined in smatch.h
      uses function get_type(struct expression *) defined in smatch.h
      uses variable sval_t::value defined in smatch.h
   function sval_type_val(struct symbol *,long long) in line 65
      protection public
      11 lines of code
      2 parameters
      2 conditional paths
      uses variable sval_t::type defined in smatch.h
      uses variable sval_t::value defined in smatch.h
   function sval_from_val(struct expression *,long long) in line 77
      protection public
      10 lines of code
      2 parameters
      1 conditional paths
      uses function sval_blank(struct expression *) defined in smatch_sval.c
      uses variable sval_t::value defined in smatch.h
      uses function sval_cast(struct symbol *,sval_t) defined in smatch_sval.c
      uses function get_type(struct expression *) defined in smatch.h
   function sval_unsigned(sval_t) in line 88
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function type_unsigned(struct symbol *) defined in smatch.h
      uses variable sval_t::type defined in smatch.h
   function sval_signed(sval_t) in line 93
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function type_unsigned(struct symbol *) defined in smatch.h
      uses variable sval_t::type defined in smatch.h
   function sval_bits(sval_t) in line 98
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function type_bits(struct symbol *) defined in smatch.h
      uses variable sval_t::type defined in smatch.h
   function sval_positive_bits(sval_t) in line 103
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function type_positive_bits(struct symbol *) defined in smatch.h
      uses variable sval_t::type defined in smatch.h
   function sval_bits_used(sval_t) in line 108
      protection public
      10 lines of code
      1 parameters
      3 conditional paths
      uses variable sval_t::uvalue defined in smatch.h
   function sval_is_negative(sval_t) in line 119
      protection public
      8 lines of code
      1 parameters
      3 conditional paths
      uses function type_unsigned(struct symbol *) defined in smatch.h
      uses variable sval_t::type defined in smatch.h
      uses variable sval_t::value defined in smatch.h
   function sval_is_positive(sval_t) in line 128
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function sval_is_negative(sval_t) defined in smatch_sval.c
   function sval_is_min(sval_t) in line 133
      protection public
      12 lines of code
      1 parameters
      3 conditional paths
      uses macro definition min defined in sm_select_assign.c
      uses function sval_type_min(struct symbol *) defined in smatch.h
      uses variable sval_t::type defined in smatch.h
      uses function sval_unsigned(sval_t) defined in smatch_sval.c
      uses variable sval_t::uvalue defined in smatch.h
      uses variable sval_t::value defined in smatch.h
   function sval_is_max(sval_t) in line 146
      protection public
      8 lines of code
      1 parameters
      2 conditional paths
      uses function sval_type_max(struct symbol *) defined in smatch.h
      uses variable sval_t::type defined in smatch.h
      uses function sval_unsigned(sval_t) defined in smatch_sval.c
      uses variable sval_t::uvalue defined in smatch.h
      uses variable sval_t::value defined in smatch.h
   function sval_is_a_min(sval_t) in line 155
      protection public
      10 lines of code
      1 parameters
      4 conditional paths
      uses function sval_signed(sval_t) defined in smatch_sval.c
      uses variable sval_t::value defined in smatch.h
   function sval_is_a_max(sval_t) in line 166
      protection public
      19 lines of code
      1 parameters
      8 conditional paths
      uses variable sval_t::uvalue defined in smatch.h
      uses function sval_unsigned(sval_t) defined in smatch_sval.c
      uses macro definition ULLONG_MAX defined in expression.c
      uses variable sval_t::value defined in smatch.h
      uses variable valid_ptr_max defined in smatch.h
   function sval_is_negative_min(sval_t) in line 186
      protection public
      6 lines of code
      1 parameters
      2 conditional paths
      uses function sval_is_negative(sval_t) defined in smatch_sval.c
      uses function sval_is_min(sval_t) defined in smatch_sval.c
   function sval_cmp(sval_t,sval_t) in line 196
      protection public
      27 lines of code
      2 parameters
      8 conditional paths
      uses variable one defined in sm_equiv1.c
      uses function sval_positive_bits(sval_t) defined in smatch_sval.c
      uses variable two defined in sm_equiv1.c
      uses function type_bits(struct symbol *) defined in smatch.h
      uses function sval_cast(struct symbol *,sval_t) defined in smatch_sval.c
      uses function type_unsigned(struct symbol *) defined in smatch.h
   function sval_cmp_t(struct symbol *,sval_t,sval_t) in line 224
      protection public
      8 lines of code
      3 parameters
      1 conditional paths
      uses function sval_cast(struct symbol *,sval_t) defined in smatch_sval.c
      uses variable one defined in sm_equiv1.c
      uses variable two defined in sm_equiv1.c
      uses function sval_cmp(sval_t,sval_t) defined in smatch_sval.c
   function sval_cmp_val(sval_t,long long) in line 233
      protection public
      7 lines of code
      2 parameters
      1 conditional paths
      uses function sval_type_val(struct symbol *,long long) defined in smatch_sval.c
      uses function sval_cmp(sval_t,sval_t) defined in smatch_sval.c
      uses variable one defined in sm_equiv1.c
   function sval_min(sval_t,sval_t) in line 241
      protection public
      6 lines of code
      2 parameters
      2 conditional paths
      uses function sval_cmp(sval_t,sval_t) defined in smatch_sval.c
      uses variable one defined in sm_equiv1.c
      uses variable two defined in sm_equiv1.c
   function sval_max(sval_t,sval_t) in line 248
      protection public
      6 lines of code
      2 parameters
      2 conditional paths
      uses function sval_cmp(sval_t,sval_t) defined in smatch_sval.c
      uses variable one defined in sm_equiv1.c
      uses variable two defined in sm_equiv1.c
   function sval_too_low(struct symbol *,sval_t) in line 255
      protection public
      10 lines of code
      2 parameters
      4 conditional paths
      uses function sval_is_negative(sval_t) defined in smatch_sval.c
      uses function type_unsigned(struct symbol *) defined in smatch.h
      uses function type_signed(struct symbol *) defined in smatch.h
      uses function sval_unsigned(sval_t) defined in smatch_sval.c
      uses function sval_cmp(sval_t,sval_t) defined in smatch_sval.c
      uses function sval_type_min(struct symbol *) defined in smatch.h
   function sval_too_high(struct symbol *,sval_t) in line 266
      protection public
      8 lines of code
      2 parameters
      3 conditional paths
      uses function sval_is_negative(sval_t) defined in smatch_sval.c
      uses variable sval_t::uvalue defined in smatch.h
      uses function sval_type_max(struct symbol *) defined in smatch.h
   function sval_fits(struct symbol *,sval_t) in line 275
      protection public
      8 lines of code
      2 parameters
      3 conditional paths
      uses function sval_too_low(struct symbol *,sval_t) defined in smatch_sval.c
      uses function sval_too_high(struct symbol *,sval_t) defined in smatch_sval.c
   function sval_cast(struct symbol *,sval_t) in line 284
      protection public
      33 lines of code
      2 parameters
      7 conditional paths
      uses variable sval_t::type defined in smatch.h
      uses function sval_bits(sval_t) defined in smatch_sval.c
      uses function sval_unsigned(sval_t) defined in smatch_sval.c
      uses variable sval_t::value defined in smatch.h
      uses variable int defined in missing-ident.c
   function sval_preop(sval_t,int) in line 318
      protection public
      17 lines of code
      2 parameters
      4 conditional paths
      uses function op(void) defined in loop2.c
      uses variable sval_t::value defined in smatch.h
      uses function sval_cast(struct symbol *,sval_t) defined in smatch_sval.c
      uses variable sval_t::type defined in smatch.h
   function sval_binop_unsigned(struct symbol *,sval_t,int,sval_t) in line 336
      protection public
      53 lines of code
      4 parameters
      13 conditional paths
      uses variable sval_t::type defined in smatch.h
      uses function op(void) defined in loop2.c
      uses variable sval_t::uvalue defined in smatch.h
      uses macro definition sm_msg defined in smatch.h
      uses enumvalue SPECIAL_RIGHTSHIFT defined in token.h
      uses enumvalue SPECIAL_LEFTSHIFT defined in token.h
      uses function show_special(int) defined in token.h
   function sval_binop_signed(struct symbol *,sval_t,int,sval_t) in line 391
      protection public
      56 lines of code
      4 parameters
      14 conditional paths
      uses variable sval_t::type defined in smatch.h
      uses function op(void) defined in loop2.c
      uses variable sval_t::value defined in smatch.h
      uses macro definition sm_msg defined in smatch.h
      uses enumvalue SPECIAL_RIGHTSHIFT defined in token.h
      uses enumvalue SPECIAL_LEFTSHIFT defined in token.h
      uses function show_special(int) defined in token.h
   function sval_binop(sval_t,int,sval_t) in line 448
      protection public
      17 lines of code
      3 parameters
      4 conditional paths
      uses variable sval_t::type defined in smatch.h
      uses function sval_positive_bits(sval_t) defined in smatch_sval.c
      uses function type_positive_bits(struct symbol *) defined in smatch.h
      uses function type_unsigned(struct symbol *) defined in smatch.h
      uses function sval_binop_unsigned(struct symbol *,sval_t,int,sval_t) defined in smatch_sval.c
      uses function op(void) defined in loop2.c
      uses function sval_binop_signed(struct symbol *,sval_t,int,sval_t) defined in smatch_sval.c
      uses function sval_cast(struct symbol *,sval_t) defined in smatch_sval.c
   function sval_unop_overflows(sval_t,int) in line 466
      protection public
      18 lines of code
      2 parameters
      8 conditional paths
      uses function op(void) defined in loop2.c
      uses function sval_positive_bits(sval_t) defined in smatch_sval.c
      uses variable sval_t::value defined in smatch.h
      uses function sval_is_negative(sval_t) defined in smatch_sval.c
      uses function sval_signed(sval_t) defined in smatch_sval.c
      uses function sval_bits(sval_t) defined in smatch_sval.c
      uses variable sval_t::uvalue defined in smatch.h
   function sval_binop_overflows(sval_t,int,sval_t) in line 485
      protection public
      58 lines of code
      3 parameters
      20 conditional paths
      uses macro definition min defined in sm_select_assign.c
      uses variable sval_t::type defined in smatch.h
      uses function type_positive_bits(struct symbol *) defined in smatch.h
      uses function sval_type_max(struct symbol *) defined in smatch.h
      uses function sval_type_min(struct symbol *) defined in smatch.h
      uses function op(void) defined in loop2.c
      uses function sval_is_negative(sval_t) defined in smatch_sval.c
      uses variable sval_t::value defined in smatch.h
      uses variable sval_t::uvalue defined in smatch.h
      uses function type_unsigned(struct symbol *) defined in smatch.h
      uses function sval_cmp(sval_t,sval_t) defined in smatch_sval.c
      uses function sval_preop(sval_t,int) defined in smatch_sval.c
      uses enumvalue SPECIAL_LEFTSHIFT defined in token.h
      uses function sval_binop(sval_t,int,sval_t) defined in smatch_sval.c
      uses function invert_op(int) defined in smatch.h
   function fls_mask(unsigned long long) in line 544
      protection public
      14 lines of code
      1 parameters
      3 conditional paths
   function sval_fls_mask(sval_t) in line 559
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function fls_mask(unsigned long long) defined in smatch_sval.c
      uses variable sval_t::uvalue defined in smatch.h
   function sval_to_str(sval_t) in line 564
      protection public
      34 lines of code
      1 parameters
      12 conditional paths
      uses variable buf defined in sm_fake_assignment.c
      uses function sval_unsigned(sval_t) defined in smatch_sval.c
      uses variable sval_t::value defined in smatch.h
      uses macro definition ULLONG_MAX defined in expression.c
      uses function sval_signed(sval_t) defined in smatch_sval.c
      uses function snprintf(char *,int,char *,char *) defined in sm_overflow6.c
      uses function alloc_sname(const char *) defined in smatch_slist.c
   function sval_to_numstr(sval_t) in line 599
      protection public
      13 lines of code
      1 parameters
      3 conditional paths
      uses variable buf defined in sm_fake_assignment.c
      uses function sval_unsigned(sval_t) defined in smatch_sval.c
      uses function snprintf(char *,int,char *,char *) defined in sm_overflow6.c
      uses variable sval_t::value defined in smatch.h
      uses function alloc_sname(const char *) defined in smatch_slist.c
   function ll_to_sval(long long) in line 613
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses variable sval_t::type defined in smatch.h
      uses variable sval_t::value defined in smatch.h
   function free_svals(struct symbol *) in line 622
      protection public
      6 lines of code
      1 parameters
      2 conditional paths
      uses variable __inline_fn defined in smatch.h
   function register_sval(int) in line 629
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function add_hook(void *,enum hook_type) defined in smatch.h
      uses function free_svals(struct symbol *) defined in smatch_sval.c
      uses enumvalue END_FUNC_HOOK defined in smatch.h
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/smatch_tracker.c
module smatch_tracker.c
   function ALLOCATOR(tracker,"trackers") in line 20
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function alloc_tracker(int,const char *,struct symbol *) in line 22
      protection public
      10 lines of code
      3 parameters
      1 conditional paths
      uses variable tracker::name defined in smatch.h
      uses function alloc_string(const char *) defined in smatch.h
      uses variable name defined in smatch_type.c
      uses variable tracker::owner defined in smatch.h
      uses variable tracker::sym defined in smatch.h
      uses variable sym defined in smatch_type.c
   function add_tracker(struct tracker_list **,int,const char *,struct symbol *) in line 33
      protection public
      10 lines of code
      4 parameters
      2 conditional paths
      uses function in_tracker_list(struct tracker_list *,int,const char *,struct symbol *) defined in smatch_tracker.c
      uses variable tracker::owner defined in smatch.h
      uses variable name defined in smatch_type.c
      uses variable sym defined in smatch_type.c
      uses function alloc_tracker(int,const char *,struct symbol *) defined in smatch_tracker.c
      uses macro definition add_ptr_list defined in ptrlist.h
   function add_tracker_expr(struct tracker_list **,int,struct expression *) in line 44
      protection public
      12 lines of code
      3 parameters
      3 conditional paths
      uses variable name defined in smatch_type.c
      uses variable sym defined in smatch_type.c
      uses function expr_to_var_sym(struct expression *,struct symbol **) defined in smatch.h
      uses function add_tracker(struct tracker_list **,int,const char *,struct symbol *) defined in smatch_tracker.c
      uses function free_string(char *) defined in smatch.h
   function free_tracker(struct tracker *) in line 57
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function free_string(char *) defined in smatch.h
   function del_tracker(struct tracker_list **,int,const char *,struct symbol *) in line 63
      protection public
      14 lines of code
      4 parameters
      2 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable tracker::owner defined in smatch.h
      uses variable tracker::sym defined in smatch.h
      uses variable sym defined in smatch_type.c
      uses variable tracker::name defined in smatch.h
      uses variable name defined in smatch_type.c
      uses macro definition DELETE_CURRENT_PTR defined in ptrlist.h
      uses function free_tracker(struct tracker *) defined in smatch_tracker.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function in_tracker_list(struct tracker_list *,int,const char *,struct symbol *) in line 78
      protection public
      12 lines of code
      4 parameters
      2 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable tracker::owner defined in smatch.h
      uses variable tracker::sym defined in smatch.h
      uses variable sym defined in smatch_type.c
      uses variable tracker::name defined in smatch.h
      uses variable name defined in smatch_type.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function free_tracker_list(struct tracker_list **) in line 91
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function __free_ptr_list(struct ptr_list **) defined in ptrlist.c
   function free_trackers_and_list(struct tracker_list **) in line 96
      protection public
      9 lines of code
      1 parameters
      1 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses function free_tracker(struct tracker *) defined in smatch_tracker.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses function free_tracker_list(struct tracker_list **) defined in smatch_tracker.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/smatch_type.c
module smatch_type.c
   variable sym in line 615
      protection public
   variable name in line 616
      protection public
   variable base_types in line 649
      protection public
   function get_real_base_type(struct symbol *) in line 26
      protection public
      13 lines of code
      1 parameters
      4 conditional paths
      uses variable sym defined in smatch_type.c
      uses macro definition NULL defined in sm_implied3.c
      uses variable symbol::type defined in struct.c
      uses enumvalue SYM_RESTRICT defined in symbol.h
      uses enumvalue SYM_NODE defined in symbol.h
   function type_bits(struct symbol *) in line 40
      protection public
      10 lines of code
      1 parameters
      4 conditional paths
      uses enumvalue SYM_PTR defined in symbol.h
      uses variable bits_in_pointer defined in target.c
      uses function examine_symbol_type(struct symbol *) defined in symbol.c
   function type_bytes(struct symbol *) in line 51
      protection public
      8 lines of code
      1 parameters
      2 conditional paths
      uses function type_bits(struct symbol *) defined in smatch_type.c
   function type_positive_bits(struct symbol *) in line 60
      protection public
      8 lines of code
      1 parameters
      3 conditional paths
      uses function type_unsigned(struct symbol *) defined in smatch_type.c
      uses function type_bits(struct symbol *) defined in smatch_type.c
   function get_binop_type(struct expression *) in line 69
      protection public
      31 lines of code
      1 parameters
      9 conditional paths
      uses function get_type(struct expression *) defined in smatch_type.c
      uses variable expression::left defined in expression.h
      uses macro definition NULL defined in sm_implied3.c
      uses variable expression::op defined in expression.h
      uses enumvalue SPECIAL_LEFTSHIFT defined in token.h
      uses enumvalue SPECIAL_RIGHTSHIFT defined in token.h
      uses function type_positive_bits(struct symbol *) defined in smatch_type.c
      uses variable symbol::type defined in struct.c
      uses enumvalue SYM_PTR defined in symbol.h
      uses enumvalue SYM_ARRAY defined in symbol.h
      uses variable expression::right defined in expression.h
   function get_type_symbol(struct expression *) in line 101
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_SYMBOL defined in expression.h
      uses variable expression::symbol defined in expression.h
      uses macro definition NULL defined in sm_implied3.c
      uses function get_real_base_type(struct symbol *) defined in smatch_type.c
   function get_member_symbol(struct symbol_list *,struct ident *) in line 109
      protection public
      18 lines of code
      2 parameters
      4 conditional paths
      uses macro definition sub defined in sm_macros.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable symbol::symbol_list defined in struct.c
      uses variable symbol::ident defined in struct.c
      uses function get_real_base_type(struct symbol *) defined in smatch_type.c
      uses variable member defined in smdb.py
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses macro definition NULL defined in sm_implied3.c
   function get_symbol_from_deref(struct expression *) in line 128
      protection public
      21 lines of code
      1 parameters
      5 conditional paths
      uses variable member defined in smdb.py
      uses variable sym defined in smatch_type.c
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_DEREF defined in expression.h
      uses macro definition NULL defined in sm_implied3.c
      uses variable expression::member defined in expression.h
      uses function get_type(struct expression *) defined in smatch_type.c
      uses variable expression::deref defined in expression.h
      uses variable symbol::type defined in struct.c
      uses enumvalue SYM_PTR defined in symbol.h
      uses function get_real_base_type(struct symbol *) defined in smatch_type.c
      uses function get_member_symbol(struct symbol_list *,struct ident *) defined in smatch_type.c
      uses variable symbol::symbol_list defined in struct.c
   function get_return_type(struct expression *) in line 150
      protection public
      9 lines of code
      1 parameters
      2 conditional paths
      uses function get_type(struct expression *) defined in smatch_type.c
      uses variable expression::fn defined in expression.h
      uses macro definition NULL defined in sm_implied3.c
      uses function get_real_base_type(struct symbol *) defined in smatch_type.c
   function get_expr_stmt_type(struct statement *) in line 160
      protection public
      9 lines of code
      1 parameters
      3 conditional paths
      uses variable symbol::stmt defined in struct.c
      uses variable statement::type defined in parse.h
      uses enumvalue STMT_COMPOUND defined in parse.h
      uses macro definition NULL defined in sm_implied3.c
      uses variable statement::stmts defined in parse.h
      uses enumvalue STMT_EXPRESSION defined in parse.h
      uses function get_type(struct expression *) defined in smatch_type.c
      uses variable statement::expression defined in parse.h
   function get_select_type(struct expression *) in line 170
      protection public
      17 lines of code
      1 parameters
      3 conditional paths
      uses variable one defined in sm_equiv1.c
      uses variable two defined in sm_equiv1.c
      uses function get_type(struct expression *) defined in smatch_type.c
      uses variable expression::cond_true defined in expression.h
      uses variable expression::cond_false defined in expression.h
      uses macro definition NULL defined in sm_implied3.c
      uses function type_positive_bits(struct symbol *) defined in smatch_type.c
   function get_pointer_type(struct expression *) in line 188
      protection public
      16 lines of code
      1 parameters
      5 conditional paths
      uses variable sym defined in smatch_type.c
      uses function get_type(struct expression *) defined in smatch_type.c
      uses macro definition NULL defined in sm_implied3.c
      uses variable symbol::type defined in struct.c
      uses enumvalue SYM_NODE defined in symbol.h
      uses function get_real_base_type(struct symbol *) defined in smatch_type.c
      uses enumvalue SYM_PTR defined in symbol.h
      uses enumvalue SYM_ARRAY defined in symbol.h
   function fake_pointer_sym(struct expression *) in line 205
      protection public
      13 lines of code
      1 parameters
      2 conditional paths
      uses variable sym defined in smatch_type.c
      uses function alloc_symbol(struct position,int) defined in symbol.c
      uses variable expression::pos defined in expression.h
      uses enumvalue SYM_PTR defined in symbol.h
      uses variable expression::unop defined in expression.h
      uses function get_type(struct expression *) defined in smatch_type.c
      uses macro definition NULL defined in sm_implied3.c
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::base_type defined in struct.c
   function get_type(struct expression *) in line 219
      protection public
      68 lines of code
      1 parameters
      23 conditional paths
      uses function strip_parens(struct expression *) defined in smatch.h
      uses macro definition NULL defined in sm_implied3.c
      uses variable expression::ctype defined in expression.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_STRING defined in expression.h
      uses enumvalue EXPR_SYMBOL defined in expression.h
      uses function get_type_symbol(struct expression *) defined in smatch_type.c
      uses enumvalue EXPR_DEREF defined in expression.h
      uses function get_symbol_from_deref(struct expression *) defined in smatch_type.c
      uses enumvalue EXPR_PREOP defined in expression.h
      uses enumvalue EXPR_POSTOP defined in expression.h
      uses variable expression::op defined in expression.h
      uses function fake_pointer_sym(struct expression *) defined in smatch_type.c
      uses function get_pointer_type(struct expression *) defined in smatch_type.c
      uses variable expression::unop defined in expression.h
      uses enumvalue EXPR_ASSIGNMENT defined in expression.h
      uses variable expression::left defined in expression.h
      uses enumvalue EXPR_CAST defined in expression.h
      uses enumvalue EXPR_FORCE_CAST defined in expression.h
      uses enumvalue EXPR_IMPLIED_CAST defined in expression.h
      uses function get_real_base_type(struct symbol *) defined in smatch_type.c
      uses variable expression::cast_type defined in expression.h
      uses enumvalue EXPR_COMPARE defined in expression.h
      uses enumvalue EXPR_BINOP defined in expression.h
      uses function get_binop_type(struct expression *) defined in smatch_type.c
      uses enumvalue EXPR_CALL defined in expression.h
      uses function get_return_type(struct expression *) defined in smatch_type.c
      uses enumvalue EXPR_STATEMENT defined in expression.h
      uses function get_expr_stmt_type(struct statement *) defined in smatch_type.c
      uses variable expression::statement defined in expression.h
      uses enumvalue EXPR_CONDITIONAL defined in expression.h
      uses enumvalue EXPR_SELECT defined in expression.h
      uses function get_select_type(struct expression *) defined in smatch_type.c
      uses enumvalue EXPR_SIZEOF defined in expression.h
      uses enumvalue EXPR_LOGICAL defined in expression.h
      uses variable symbol::type defined in struct.c
      uses enumvalue SYM_TYPEOF defined in symbol.h
      uses variable symbol::initializer defined in struct.c
   function type_unsigned(struct symbol *) in line 288
      protection public
      8 lines of code
      1 parameters
      3 conditional paths
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::modifiers defined in struct.c
      uses macro definition MOD_UNSIGNED defined in symbol.h
   function type_signed(struct symbol *) in line 297
      protection public
      8 lines of code
      1 parameters
      3 conditional paths
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::modifiers defined in struct.c
      uses macro definition MOD_SIGNED defined in symbol.h
   function expr_unsigned(struct expression *) in line 306
      protection public
      11 lines of code
      1 parameters
      3 conditional paths
      uses variable sym defined in smatch_type.c
      uses function get_type(struct expression *) defined in smatch_type.c
      uses function type_unsigned(struct symbol *) defined in smatch_type.c
   function expr_signed(struct expression *) in line 318
      protection public
      11 lines of code
      1 parameters
      3 conditional paths
      uses variable sym defined in smatch_type.c
      uses function get_type(struct expression *) defined in smatch_type.c
      uses function type_signed(struct symbol *) defined in smatch_type.c
   function returns_unsigned(struct symbol *) in line 330
      protection public
      10 lines of code
      1 parameters
      3 conditional paths
      uses variable sym defined in smatch_type.c
      uses variable symbol::type defined in struct.c
      uses enumvalue SYM_FN defined in symbol.h
      uses function type_unsigned(struct symbol *) defined in smatch_type.c
   function is_pointer(struct expression *) in line 341
      protection public
      13 lines of code
      1 parameters
      4 conditional paths
      uses variable sym defined in smatch_type.c
      uses function get_type(struct expression *) defined in smatch_type.c
      uses variable symbol::type defined in struct.c
      uses enumvalue SYM_PTR defined in symbol.h
   function returns_pointer(struct symbol *) in line 355
      protection public
      12 lines of code
      1 parameters
      4 conditional paths
      uses variable sym defined in smatch_type.c
      uses variable symbol::type defined in struct.c
      uses enumvalue SYM_FN defined in symbol.h
      uses enumvalue SYM_PTR defined in symbol.h
   function sval_type_max(struct symbol *) in line 368
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses function type_bits(struct symbol *) defined in smatch_type.c
      uses variable sval_t::type defined in smatch.h
      uses variable sval_t::value defined in smatch.h
      uses function type_positive_bits(struct symbol *) defined in smatch_type.c
   function sval_type_min(struct symbol *) in line 380
      protection public
      17 lines of code
      1 parameters
      3 conditional paths
      uses function type_bits(struct symbol *) defined in smatch_type.c
      uses variable sval_t::type defined in smatch.h
      uses function type_unsigned(struct symbol *) defined in smatch_type.c
      uses variable sval_t::value defined in smatch.h
      uses function type_positive_bits(struct symbol *) defined in smatch_type.c
   function nr_bits(struct expression *) in line 398
      protection public
      9 lines of code
      1 parameters
      2 conditional paths
      uses function get_type(struct expression *) defined in smatch_type.c
      uses function type_bits(struct symbol *) defined in smatch_type.c
   function is_void_pointer(struct expression *) in line 408
      protection public
      12 lines of code
      1 parameters
      3 conditional paths
      uses function get_type(struct expression *) defined in smatch_type.c
      uses enumvalue SYM_PTR defined in symbol.h
      uses function get_real_base_type(struct symbol *) defined in smatch_type.c
   function is_char_pointer(struct expression *) in line 421
      protection public
      12 lines of code
      1 parameters
      3 conditional paths
      uses function get_type(struct expression *) defined in smatch_type.c
      uses enumvalue SYM_PTR defined in symbol.h
      uses function get_real_base_type(struct symbol *) defined in smatch_type.c
   function is_string(struct expression *) in line 434
      protection public
      9 lines of code
      1 parameters
      3 conditional paths
      uses function strip_expr(struct expression *) defined in smatch.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_STRING defined in expression.h
      uses variable expression::string defined in expression.h
   function is_static(struct expression *) in line 444
      protection public
      16 lines of code
      1 parameters
      4 conditional paths
      uses variable name defined in smatch_type.c
      uses variable sym defined in smatch_type.c
      uses function expr_to_str_sym(struct expression *,struct symbol **) defined in smatch.h
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::modifiers defined in struct.c
      uses macro definition MOD_STATIC defined in symbol.h
      uses function free_string(char *) defined in smatch.h
   function is_local_variable(struct expression *) in line 461
      protection public
      15 lines of code
      1 parameters
      4 conditional paths
      uses variable sym defined in smatch_type.c
      uses variable name defined in smatch_type.c
      uses function expr_to_var_sym(struct expression *,struct symbol **) defined in smatch.h
      uses function free_string(char *) defined in smatch.h
      uses variable symbol::scope defined in struct.c
      uses variable scope::token defined in scope.h
      uses function cmp_pos(struct position,struct position) defined in smatch.h
      uses variable token::pos defined in token.h
      uses variable cur_func_sym defined in smatch.h
      uses variable symbol::pos defined in struct.c
      uses function is_static(struct expression *) defined in smatch_type.c
   function types_equiv(struct symbol *,struct symbol *) in line 477
      protection public
      14 lines of code
      2 parameters
      6 conditional paths
      uses variable one defined in sm_equiv1.c
      uses variable two defined in sm_equiv1.c
      uses enumvalue SYM_PTR defined in symbol.h
      uses function get_real_base_type(struct symbol *) defined in smatch_type.c
      uses function type_positive_bits(struct symbol *) defined in smatch_type.c
   function fn_static(void) in line 492
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable cur_func_sym defined in smatch.h
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::modifiers defined in struct.c
      uses macro definition MOD_STATIC defined in symbol.h
   function global_static(void) in line 497
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses variable cur_func_sym defined in smatch.h
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::modifiers defined in struct.c
      uses macro definition MOD_STATIC defined in symbol.h
   function cur_func_return_type(void) in line 505
      protection public
      10 lines of code
      1 parameters
      2 conditional paths
      uses variable sym defined in smatch_type.c
      uses function get_real_base_type(struct symbol *) defined in smatch_type.c
      uses variable cur_func_sym defined in smatch.h
      uses variable symbol::type defined in struct.c
      uses enumvalue SYM_FN defined in symbol.h
      uses macro definition NULL defined in sm_implied3.c
   function get_arg_type(struct expression *,int) in line 516
      protection public
      26 lines of code
      2 parameters
      5 conditional paths
      uses function get_type(struct expression *) defined in smatch_type.c
      uses macro definition NULL defined in sm_implied3.c
      uses variable symbol::type defined in struct.c
      uses enumvalue SYM_PTR defined in symbol.h
      uses function get_real_base_type(struct symbol *) defined in smatch_type.c
      uses enumvalue SYM_FN defined in symbol.h
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable symbol::arguments defined in struct.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function get_member_from_string(struct symbol_list *,char *) in line 543
      protection public
      33 lines of code
      2 parameters
      7 conditional paths
      uses macro definition sub defined in sm_macros.c
      uses variable name defined in smatch_type.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable symbol::symbol_list defined in struct.c
      uses variable symbol::ident defined in struct.c
      uses function get_real_base_type(struct symbol *) defined in smatch_type.c
      uses variable ident::name defined in token.h
      uses function strlen(char *) defined in sm_overflow6.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses macro definition NULL defined in sm_implied3.c
   function get_member_type_from_key(struct expression *,char *) in line 577
      protection public
      26 lines of code
      2 parameters
      7 conditional paths
      uses variable sym defined in smatch_type.c
      uses function get_type(struct expression *) defined in smatch_type.c
      uses variable symbol::type defined in struct.c
      uses enumvalue SYM_PTR defined in symbol.h
      uses macro definition NULL defined in sm_implied3.c
      uses function get_real_base_type(struct symbol *) defined in smatch_type.c
      uses function get_member_from_string(struct symbol_list *,char *) defined in smatch_type.c
      uses variable symbol::symbol_list defined in struct.c
   function is_struct(struct expression *) in line 604
      protection public
      9 lines of code
      1 parameters
      2 conditional paths
      uses function get_type(struct expression *) defined in smatch_type.c
      uses enumvalue SYM_STRUCT defined in symbol.h
   function base_type_str(struct symbol *) in line 651
      protection public
      10 lines of code
      1 parameters
      3 conditional paths
      uses macro definition ARRAY_SIZE defined in lib.h
      uses variable base_types defined in smatch_type.c
      uses variable sym defined in smatch_type.c
   function type_str_helper(char *,int,struct symbol *) in line 662
      protection public
      66 lines of code
      3 parameters
      19 conditional paths
      uses function snprintf(char *,int,char *,char *) defined in sm_overflow6.c
      uses variable buf defined in sm_fake_assignment.c
      uses enumvalue SYM_BASETYPE defined in symbol.h
      uses function base_type_str(struct symbol *) defined in smatch_type.c
      uses enumvalue SYM_PTR defined in symbol.h
      uses function get_real_base_type(struct symbol *) defined in smatch_type.c
      uses enumvalue SYM_ARRAY defined in symbol.h
      uses enumvalue SYM_STRUCT defined in symbol.h
      uses enumvalue SYM_UNION defined in symbol.h
      uses enumvalue SYM_FN defined in symbol.h
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses enumvalue SYM_NODE defined in symbol.h
   function type_to_str(struct symbol *) in line 729
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses variable buf defined in sm_fake_assignment.c
      uses function type_str_helper(char *,int,struct symbol *) defined in smatch_type.c
   variable @142::name in line 616
      protection public
   variable @142::sym in line 615
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/smatch_type_links.c
module smatch_type_links.c
   variable my_id in line 48
      protection public
   function match_assign(struct expression *) in line 50
      protection public
      16 lines of code
      1 parameters
      4 conditional paths
      uses function is_void_pointer(struct expression *) defined in smatch.h
      uses variable expression::left defined in expression.h
      uses function get_type(struct expression *) defined in smatch.h
      uses variable expression::right defined in expression.h
      uses enumvalue SYM_PTR defined in symbol.h
      uses function get_real_base_type(struct symbol *) defined in smatch.h
      uses enumvalue SYM_STRUCT defined in symbol.h
      uses function sql_insert_data_info(struct expression *,int,const char *) defined in smatch.h
      uses enumvalue TYPE_LINK defined in smatch.h
      uses function type_to_str(struct symbol *) defined in smatch.h
   function register_type_links(int) in line 67
      protection public
      8 lines of code
      1 parameters
      2 conditional paths
      uses variable option_info defined in smatch.c
      uses variable my_id defined in smatch_type_links.c
      uses function add_hook(void *,enum hook_type) defined in smatch.h
      uses function match_assign(struct expression *) defined in smatch_type_links.c
      uses enumvalue ASSIGNMENT_HOOK defined in smatch.h
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/smatch_type_val.c
module smatch_type_val.c
   variable my_id in line 39
      protection public
   variable fn_type_val_stack in line 41
      protection public
   variable fn_type_val in line 42
      protection public
   variable global_type_val in line 43
      protection public
   variable db_vals in line 45
      protection public
   function get_vals(void *,int,char **,char **) in line 46
      protection public
      5 lines of code
      4 parameters
      1 conditional paths
      uses variable db_vals defined in smatch_type_val.c
      uses function alloc_string(const char *) defined in smatch.h
   function match_inline_start(struct expression *) in line 52
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function push_stree(struct stree_stack **,struct stree *) defined in smatch_slist.c
      uses variable fn_type_val_stack defined in smatch_type_val.c
      uses variable fn_type_val defined in smatch_type_val.c
      uses macro definition NULL defined in sm_implied3.c
   function match_inline_end(struct expression *) in line 58
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function free_stree(struct stree **) defined in avl.c
      uses variable fn_type_val defined in smatch_type_val.c
      uses function pop_stree(struct stree_stack **) defined in smatch_slist.c
      uses variable fn_type_val_stack defined in smatch_type_val.c
   function get_db_type_rl(struct expression *,struct range_list **) in line 64
      protection public
      24 lines of code
      2 parameters
      4 conditional paths
      uses variable member defined in smdb.py
      uses function get_member_name(struct expression *) defined in smatch.h
      uses variable db_vals defined in smatch_type_val.c
      uses macro definition NULL defined in sm_implied3.c
      uses macro definition run_sql defined in smatch.h
      uses function get_vals(void *,int,char **,char **) defined in smatch_type_val.c
      uses function free_string(char *) defined in smatch.h
      uses function str_to_rl(struct symbol *,char *,struct range_list **) defined in smatch_extra.h
      uses function cast_rl(struct symbol *,struct range_list *) defined in smatch_extra.h
      uses function get_type(struct expression *) defined in smatch.h
      uses function is_whole_rl(struct range_list *) defined in smatch_extra.h
   function add_type_val(char *,struct range_list *) in line 89
      protection public
      13 lines of code
      2 parameters
      2 conditional paths
      uses macro definition add defined in sm_macros.c
      uses variable member defined in smdb.py
      uses function alloc_string(const char *) defined in smatch.h
      uses function get_state_stree(struct stree *,int,const char *,struct symbol *) defined in smatch_slist.c
      uses variable fn_type_val defined in smatch_type_val.c
      uses variable my_id defined in smatch_type_val.c
      uses macro definition NULL defined in sm_implied3.c
      uses function alloc_estate_rl(struct range_list *) defined in smatch_estate.c
      uses function merge_estates(struct smatch_state *,struct smatch_state *) defined in smatch_estate.c
      uses function set_state_stree(struct stree **,int,const char *,struct symbol *,struct smatch_state *) defined in smatch_slist.c
   function add_fake_type_val(char *,struct range_list *,int) in line 103
      protection public
      22 lines of code
      3 parameters
      5 conditional paths
      uses macro definition add defined in sm_macros.c
      uses variable member defined in smdb.py
      uses function alloc_string(const char *) defined in smatch.h
      uses function get_state_stree(struct stree *,int,const char *,struct symbol *) defined in smatch_slist.c
      uses variable fn_type_val defined in smatch_type_val.c
      uses variable my_id defined in smatch_type_val.c
      uses macro definition NULL defined in sm_implied3.c
      uses variable smatch_state::name defined in smatch.h
      uses function alloc_estate_rl(struct range_list *) defined in smatch_estate.c
      uses function merge_estates(struct smatch_state *,struct smatch_state *) defined in smatch_estate.c
      uses function set_state_stree(struct stree **,int,const char *,struct symbol *,struct smatch_state *) defined in smatch_slist.c
   function add_global_type_val(char *,struct range_list *) in line 126
      protection public
      14 lines of code
      2 parameters
      2 conditional paths
      uses macro definition add defined in sm_macros.c
      uses variable member defined in smdb.py
      uses function alloc_string(const char *) defined in smatch.h
      uses function get_state_stree(struct stree *,int,const char *,struct symbol *) defined in smatch_slist.c
      uses variable global_type_val defined in smatch_type_val.c
      uses variable my_id defined in smatch_type_val.c
      uses macro definition NULL defined in sm_implied3.c
      uses function alloc_estate_rl(struct range_list *) defined in smatch_estate.c
      uses function merge_estates(struct smatch_state *,struct smatch_state *) defined in smatch_estate.c
      uses function clone_estate_perm(struct smatch_state *) defined in smatch_estate.c
      uses function set_state_stree_perm(struct stree **,int,const char *,struct symbol *,struct smatch_state *) defined in smatch_slist.c
   function has_link_cb(void *,int,char **,char **) in line 141
      protection public
      5 lines of code
      4 parameters
      1 conditional paths
   function is_ignored_fake_assignment(void) in line 147
      protection public
      28 lines of code
      1 parameters
      6 conditional paths
      uses function get_faked_expression(void) defined in smatch.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_ASSIGNMENT defined in expression.h
      uses function is_void_pointer(struct expression *) defined in smatch.h
      uses variable expression::right defined in expression.h
      uses function get_member_name(struct expression *) defined in smatch.h
      uses function get_type(struct expression *) defined in smatch.h
      uses variable expression::left defined in expression.h
      uses enumvalue SYM_PTR defined in symbol.h
      uses function get_real_base_type(struct symbol *) defined in smatch.h
      uses enumvalue SYM_STRUCT defined in symbol.h
      uses macro definition run_sql defined in smatch.h
      uses function has_link_cb(void *,int,char **,char **) defined in smatch_type_val.c
      uses enumvalue TYPE_LINK defined in smatch.h
      uses function type_to_str(struct symbol *) defined in smatch.h
   function is_ignored_macro(void) in line 176
      protection public
      25 lines of code
      1 parameters
      9 conditional paths
      uses variable name defined in smatch_type.c
      uses function get_faked_expression(void) defined in smatch.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_ASSIGNMENT defined in expression.h
      uses function get_macro_name(struct position) defined in macro_table.c
      uses variable expression::right defined in expression.h
      uses variable expression::pos defined in expression.h
   function is_ignored_function(void) in line 202
      protection public
      18 lines of code
      1 parameters
      5 conditional paths
      uses function get_faked_expression(void) defined in smatch.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_ASSIGNMENT defined in expression.h
      uses function strip_expr(struct expression *) defined in smatch.h
      uses variable expression::right defined in expression.h
      uses enumvalue EXPR_CALL defined in expression.h
      uses variable expression::fn defined in expression.h
      uses enumvalue EXPR_SYMBOL defined in expression.h
      uses function sym_name_is(const char *,struct expression *) defined in smatch.h
   function is_uncasted_function(void) in line 221
      protection public
      11 lines of code
      1 parameters
      3 conditional paths
      uses function get_faked_expression(void) defined in smatch.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_ASSIGNMENT defined in expression.h
      uses variable expression::right defined in expression.h
      uses enumvalue EXPR_CALL defined in expression.h
   function match_assign_value(struct expression *) in line 233
      protection public
      41 lines of code
      1 parameters
      15 conditional paths
      uses variable member defined in smdb.py
      uses function get_type(struct expression *) defined in smatch.h
      uses variable expression::left defined in expression.h
      uses enumvalue SYM_STRUCT defined in symbol.h
      uses function get_member_name(struct expression *) defined in smatch.h
      uses variable expression::right defined in expression.h
      uses function is_fake_call(struct expression *) defined in smatch_extra.h
      uses function is_ignored_macro(void) defined in smatch_type_val.c
      uses function is_ignored_function(void) defined in smatch_type_val.c
      uses function is_uncasted_function(void) defined in smatch_type_val.c
      uses function add_fake_type_val(char *,struct range_list *,int) defined in smatch_type_val.c
      uses function alloc_whole_rl(struct symbol *) defined in smatch_extra.h
      uses function is_ignored_fake_assignment(void) defined in smatch_type_val.c
      uses variable expression::op defined in expression.h
      uses function add_type_val(char *,struct range_list *) defined in smatch_type_val.c
      uses function get_absolute_rl(struct expression *,struct range_list **) defined in smatch_extra.h
      uses function cast_rl(struct symbol *,struct range_list *) defined in smatch_extra.h
      uses function free_string(char *) defined in smatch.h
   function match_assign_pointer(struct expression *) in line 279
      protection public
      20 lines of code
      1 parameters
      3 conditional paths
      uses variable expression::right defined in expression.h
      uses variable member defined in smdb.py
      uses function strip_expr(struct expression *) defined in smatch.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_PREOP defined in expression.h
      uses variable expression::op defined in expression.h
      uses variable expression::unop defined in expression.h
      uses function get_member_name(struct expression *) defined in smatch.h
      uses function get_type(struct expression *) defined in smatch.h
      uses function alloc_whole_rl(struct symbol *) defined in smatch_extra.h
      uses function add_type_val(char *,struct range_list *) defined in smatch_type_val.c
      uses function free_string(char *) defined in smatch.h
   function match_global_assign(struct expression *) in line 300
      protection public
      12 lines of code
      1 parameters
      2 conditional paths
      uses variable member defined in smdb.py
      uses function get_member_name(struct expression *) defined in smatch.h
      uses variable expression::left defined in expression.h
      uses function get_absolute_rl(struct expression *,struct range_list **) defined in smatch_extra.h
      uses variable expression::right defined in expression.h
      uses function add_global_type_val(char *,struct range_list *) defined in smatch_type_val.c
      uses function free_string(char *) defined in smatch.h
   function unop_expr(struct expression *) in line 313
      protection public
      16 lines of code
      1 parameters
      3 conditional paths
      uses variable member defined in smdb.py
      uses variable expression::op defined in expression.h
      uses enumvalue SPECIAL_DECREMENT defined in token.h
      uses enumvalue SPECIAL_INCREMENT defined in token.h
      uses function strip_expr(struct expression *) defined in smatch.h
      uses variable expression::unop defined in expression.h
      uses function get_member_name(struct expression *) defined in smatch.h
      uses function alloc_whole_rl(struct symbol *) defined in smatch_extra.h
      uses function get_type(struct expression *) defined in smatch.h
      uses function add_type_val(char *,struct range_list *) defined in smatch_type_val.c
      uses function free_string(char *) defined in smatch.h
   function asm_expr(struct statement *) in line 330
      protection public
      25 lines of code
      1 parameters
      5 conditional paths
      uses variable member defined in smdb.py
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable statement::asm_outputs defined in parse.h
      uses function get_member_name(struct expression *) defined in smatch.h
      uses function alloc_whole_rl(struct symbol *) defined in smatch_extra.h
      uses function get_type(struct expression *) defined in smatch.h
      uses function add_type_val(char *,struct range_list *) defined in smatch_type_val.c
      uses function free_string(char *) defined in smatch.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function db_param_add(struct expression *,int,char *,char *) in line 356
      protection public
      31 lines of code
      4 parameters
      7 conditional paths
      uses variable member defined in smdb.py
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_ASSIGNMENT defined in expression.h
      uses function strip_expr(struct expression *) defined in smatch.h
      uses variable expression::right defined in expression.h
      uses enumvalue EXPR_CALL defined in expression.h
      uses function get_argument_from_call_expr(struct expression_list *,int) defined in smatch.h
      uses variable expression::args defined in expression.h
      uses variable param defined in smatch_parse_call_math.c
      uses function get_member_type_from_key(struct expression *,char *) defined in smatch.h
      uses enumvalue EXPR_PREOP defined in expression.h
      uses function get_member_name(struct expression *) defined in smatch.h
      uses function call_results_to_rl(struct expression *,struct symbol *,char *,struct range_list **) defined in smatch_extra.h
      uses function add_type_val(char *,struct range_list *) defined in smatch_type_val.c
      uses function free_string(char *) defined in smatch.h
   function match_end_func_info(struct symbol *) in line 388
      protection public
      10 lines of code
      1 parameters
      1 conditional paths
      uses macro definition FOR_EACH_SM defined in avl.h
      uses variable fn_type_val defined in smatch_type_val.c
      uses function sql_insert_function_type_value(const char *,const char *) defined in smatch.h
      uses variable sm_state::name defined in smatch.h
      uses variable sm_state::state defined in smatch.h
      uses variable smatch_state::name defined in smatch.h
      uses macro definition END_FOR_EACH_SM defined in avl.h
      uses function free_stree(struct stree **) defined in avl.c
   function match_end_file(struct symbol_list *) in line 399
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses macro definition FOR_EACH_SM defined in avl.h
      uses variable global_type_val defined in smatch_type_val.c
      uses function sql_insert_function_type_value(const char *,const char *) defined in smatch.h
      uses variable sm_state::name defined in smatch.h
      uses variable sm_state::state defined in smatch.h
      uses variable smatch_state::name defined in smatch.h
      uses macro definition END_FOR_EACH_SM defined in avl.h
   function register_type_val(int) in line 408
      protection public
      24 lines of code
      1 parameters
      2 conditional paths
      uses variable option_info defined in smatch.c
      uses variable my_id defined in smatch_type_val.c
      uses function add_hook(void *,enum hook_type) defined in smatch.h
      uses function match_assign_value(struct expression *) defined in smatch_type_val.c
      uses enumvalue ASSIGNMENT_HOOK defined in smatch.h
      uses function match_assign_pointer(struct expression *) defined in smatch_type_val.c
      uses function unop_expr(struct expression *) defined in smatch_type_val.c
      uses enumvalue OP_HOOK defined in smatch.h
      uses function asm_expr(struct statement *) defined in smatch_type_val.c
      uses enumvalue ASM_HOOK defined in smatch.h
      uses function select_return_states_hook(int,return_implies_hook *) defined in smatch.h
      uses enumvalue PARAM_ADD defined in smatch.h
      uses function db_param_add(struct expression *,int,char *,char *) defined in smatch_type_val.c
      uses enumvalue PARAM_SET defined in smatch.h
      uses function match_inline_start(struct expression *) defined in smatch_type_val.c
      uses enumvalue INLINE_FN_START defined in smatch.h
      uses function match_inline_end(struct expression *) defined in smatch_type_val.c
      uses enumvalue INLINE_FN_END defined in smatch.h
      uses function match_end_func_info(struct symbol *) defined in smatch_type_val.c
      uses enumvalue END_FUNC_HOOK defined in smatch.h
      uses function match_global_assign(struct expression *) defined in smatch_type_val.c
      uses enumvalue GLOBAL_ASSIGNMENT_HOOK defined in smatch.h
      uses function match_end_file(struct symbol_list *) defined in smatch_type_val.c
      uses enumvalue END_FILE_HOOK defined in smatch.h
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/smatch_unknown_value.c
module smatch_unknown_value.c
   variable fake_assign in line 408
      protection public
   variable fake_fn_symbol in line 408
      protection public
   variable fake_node_symbol in line 408
      protection public
   variable fake_fn_expr in line 408
      protection public
   variable fake_call in line 408
      protection public
   function __attribute__((constructor)) in line 53
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses variable fake_fn_symbol defined in smatch_unknown_value.c
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::base_type defined in struct.c
      uses variable fake_node_symbol defined in smatch_unknown_value.c
      uses variable fake_fn_expr defined in smatch_unknown_value.c
      uses variable expression::symbol defined in expression.h
      uses variable expression::symbol_name defined in expression.h
      uses variable fake_assign defined in smatch_unknown_value.c
      uses variable fake_call defined in smatch_unknown_value.c
      uses variable expression::fn defined in expression.h
   function unknown_value_expression(struct expression *) in line 62
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable fake_call defined in smatch_unknown_value.c
   function is_fake_call(struct expression *) in line 67
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable fake_call defined in smatch_unknown_value.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/smatch_untracked_param.c
module smatch_untracked_param.c
   typedef untracked_hook in line 43
      protection public
   variable my_id in line 38
      protection public
   variable tracked in line 39
      protection public
   variable untracked_hooks in line 45
      protection public
   function STATE(untracked) in line 41
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function DECLARE_PTR_LIST(untracked_hook_list,untracked_hook *) in line 44
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function add_untracked_param_hook(void(func)(struct expression *call, int param)) in line 47
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses variable p defined in cond_expr2.c
      uses function malloc(int) defined in sm_buf_size2.c
      uses macro definition func defined in preprocessor1.c
      uses macro definition add_ptr_list defined in ptrlist.h
      uses variable untracked_hooks defined in smatch_untracked_param.c
   function call_untracked_callbacks(struct expression *,int) in line 54
      protection public
      8 lines of code
      2 parameters
      1 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable untracked_hooks defined in smatch_untracked_param.c
      uses variable param defined in smatch_parse_call_math.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function assume_tracked(struct expression *,int,char *,char *) in line 63
      protection public
      4 lines of code
      4 parameters
      1 conditional paths
      uses variable tracked defined in smatch_untracked_param.c
   function mark_untracked(struct expression *,int,char *,char *) in line 68
      protection public
      19 lines of code
      4 parameters
      5 conditional paths
      uses variable name defined in smatch_type.c
      uses variable sym defined in smatch_type.c
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_ASSIGNMENT defined in expression.h
      uses function strip_expr(struct expression *) defined in smatch.h
      uses variable expression::right defined in expression.h
      uses enumvalue EXPR_CALL defined in expression.h
      uses function return_state_to_var_sym(struct expression *,int,char *,struct symbol **) defined in smatch.h
      uses variable param defined in smatch_parse_call_math.c
      uses function call_untracked_callbacks(struct expression *,int) defined in smatch_untracked_param.c
      uses function set_state(int,const char *,struct symbol *,struct smatch_state *) defined in smatch.h
      uses variable my_id defined in smatch_untracked_param.c
      uses function free_string(char *) defined in smatch.h
   function lost_in_va_args(struct expression *) in line 88
      protection public
      18 lines of code
      1 parameters
      3 conditional paths
      uses variable name defined in smatch_type.c
      uses function get_type(struct expression *) defined in smatch.h
      uses variable expression::fn defined in expression.h
      uses function expr_to_var(struct expression *) defined in smatch.h
      uses function free_string(char *) defined in smatch.h
   function match_after_call(struct expression *) in line 107
      protection public
      27 lines of code
      1 parameters
      4 conditional paths
      uses function lost_in_va_args(struct expression *) defined in smatch_untracked_param.c
      uses variable tracked defined in smatch_untracked_param.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable expression::args defined in expression.h
      uses function get_type(struct expression *) defined in smatch.h
      uses enumvalue SYM_PTR defined in symbol.h
      uses function call_untracked_callbacks(struct expression *,int) defined in smatch_untracked_param.c
      uses function set_state_expr(int,struct expression *,struct smatch_state *) defined in smatch.h
      uses variable my_id defined in smatch_untracked_param.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function print_untracked_params(int,char *,struct expression *) in line 135
      protection public
      18 lines of code
      3 parameters
      3 conditional paths
      uses variable param defined in smatch_parse_call_math.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable cur_func_sym defined in smatch.h
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::base_type defined in struct.c
      uses variable symbol::arguments defined in struct.c
      uses function get_state(int,const char *,struct symbol *) defined in smatch.h
      uses variable my_id defined in smatch_untracked_param.c
      uses function sql_insert_return_states(int,const char *,int,int,const char *,const char *) defined in smatch.h
      uses enumvalue UNTRACKED_PARAM defined in smatch.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function match_param_assign(struct expression *) in line 154
      protection public
      20 lines of code
      1 parameters
      4 conditional paths
      uses variable expression::right defined in expression.h
      uses variable param defined in smatch_parse_call_math.c
      uses variable __in_fake_assign defined in smatch.h
      uses function strip_expr(struct expression *) defined in smatch.h
      uses function get_type(struct expression *) defined in smatch.h
      uses enumvalue SYM_PTR defined in symbol.h
      uses function get_param_num(struct expression *) defined in smatch.h
      uses function set_state_expr(int,struct expression *,struct smatch_state *) defined in smatch.h
      uses variable my_id defined in smatch_untracked_param.c
   function match_param_assign_in_asm(struct statement *) in line 176
      protection public
      29 lines of code
      1 parameters
      6 conditional paths
      uses variable param defined in smatch_parse_call_math.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable symbol::stmt defined in struct.c
      uses variable statement::asm_inputs defined in parse.h
      uses function strip_expr(struct expression *) defined in smatch.h
      uses function get_type(struct expression *) defined in smatch.h
      uses enumvalue SYM_PTR defined in symbol.h
      uses function get_param_num(struct expression *) defined in smatch.h
      uses function set_state_expr(int,struct expression *,struct smatch_state *) defined in smatch.h
      uses variable my_id defined in smatch_untracked_param.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function register_untracked_param(int) in line 206
      protection public
      13 lines of code
      1 parameters
      1 conditional paths
      uses variable my_id defined in smatch_untracked_param.c
      uses function select_return_states_hook(int,return_implies_hook *) defined in smatch.h
      uses enumvalue INTERNAL defined in smatch.h
      uses function assume_tracked(struct expression *,int,char *,char *) defined in smatch_untracked_param.c
      uses enumvalue UNTRACKED_PARAM defined in smatch.h
      uses function mark_untracked(struct expression *,int,char *,char *) defined in smatch_untracked_param.c
      uses function add_hook(void *,enum hook_type) defined in smatch.h
      uses function match_after_call(struct expression *) defined in smatch_untracked_param.c
      uses enumvalue FUNCTION_CALL_HOOK_AFTER defined in smatch.h
      uses function add_split_return_callback(void(*)(int return_id, char *return_ranges, struct expression *returned_expr)) defined in smatch.h
      uses function print_untracked_params(int,char *,struct expression *) defined in smatch_untracked_param.c
      uses function match_param_assign(struct expression *) defined in smatch_untracked_param.c
      uses enumvalue ASSIGNMENT_HOOK defined in smatch.h
      uses function match_param_assign_in_asm(struct statement *) defined in smatch_untracked_param.c
      uses enumvalue ASM_HOOK defined in smatch.h
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/smatch_var_sym.c
module smatch_var_sym.c
   function ALLOCATOR(var_sym,"var_sym structs") in line 20
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function alloc_var_sym(const char *,struct symbol *) in line 22
      protection public
      9 lines of code
      2 parameters
      1 conditional paths
      uses variable var_sym::var defined in smatch.h
      uses function alloc_string(const char *) defined in smatch.h
      uses variable var_sym::sym defined in smatch.h
      uses variable sym defined in smatch_type.c
   function expr_to_vsl(struct expression *) in line 32
      protection public
      33 lines of code
      1 parameters
      5 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses variable sym defined in smatch_type.c
      uses function strip_expr(struct expression *) defined in smatch.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_PREOP defined in expression.h
      uses variable expression::op defined in expression.h
      uses variable expression::unop defined in expression.h
      uses enumvalue EXPR_BINOP defined in expression.h
      uses enumvalue EXPR_LOGICAL defined in expression.h
      uses enumvalue EXPR_COMPARE defined in expression.h
      uses variable expression::left defined in expression.h
      uses variable expression::right defined in expression.h
      uses function combine_var_sym_lists(struct var_sym_list *,struct var_sym_list *) defined in smatch_var_sym.c
      uses function free_var_syms_and_list(struct var_sym_list **) defined in smatch_var_sym.c
      uses function expr_to_var_sym(struct expression *,struct symbol **) defined in smatch.h
      uses function free_string(char *) defined in smatch.h
      uses function add_var_sym(struct var_sym_list **,const char *,struct symbol *) defined in smatch_var_sym.c
   function add_var_sym(struct var_sym_list **,const char *,struct symbol *) in line 66
      protection public
      9 lines of code
      3 parameters
      2 conditional paths
      uses function in_var_sym_list(struct var_sym_list *,const char *,struct symbol *) defined in smatch_var_sym.c
      uses variable sym defined in smatch_type.c
      uses function alloc_var_sym(const char *,struct symbol *) defined in smatch_var_sym.c
      uses macro definition add_ptr_list defined in ptrlist.h
   function add_var_sym_expr(struct var_sym_list **,struct expression *) in line 76
      protection public
      12 lines of code
      2 parameters
      3 conditional paths
      uses variable sym defined in smatch_type.c
      uses function expr_to_var_sym(struct expression *,struct symbol **) defined in smatch.h
      uses function add_var_sym(struct var_sym_list **,const char *,struct symbol *) defined in smatch_var_sym.c
      uses function free_string(char *) defined in smatch.h
   function free_var_sym(struct var_sym *) in line 89
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function free_string(char *) defined in smatch.h
      uses variable var_sym::var defined in smatch.h
   function del_var_sym(struct var_sym_list **,const char *,struct symbol *) in line 95
      protection public
      12 lines of code
      3 parameters
      2 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable var_sym::sym defined in smatch.h
      uses variable sym defined in smatch_type.c
      uses variable var_sym::var defined in smatch.h
      uses macro definition DELETE_CURRENT_PTR defined in ptrlist.h
      uses function free_var_sym(struct var_sym *) defined in smatch_var_sym.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function in_var_sym_list(struct var_sym_list *,const char *,struct symbol *) in line 108
      protection public
      10 lines of code
      3 parameters
      2 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable var_sym::sym defined in smatch.h
      uses variable sym defined in smatch_type.c
      uses variable var_sym::var defined in smatch.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function clone_var_sym_list(struct var_sym_list *) in line 119
      protection public
      11 lines of code
      1 parameters
      1 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses function alloc_var_sym(const char *,struct symbol *) defined in smatch_var_sym.c
      uses variable var_sym::var defined in smatch.h
      uses variable var_sym::sym defined in smatch.h
      uses macro definition add_ptr_list defined in ptrlist.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function merge_var_sym_list(struct var_sym_list **,struct var_sym_list *) in line 131
      protection public
      8 lines of code
      2 parameters
      1 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable src defined in sm_user_data3.c
      uses function add_var_sym(struct var_sym_list **,const char *,struct symbol *) defined in smatch_var_sym.c
      uses variable dest defined in sm_user_data2.c
      uses variable var_sym::var defined in smatch.h
      uses variable var_sym::sym defined in smatch.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function combine_var_sym_lists(struct var_sym_list *,struct var_sym_list *) in line 140
      protection public
      8 lines of code
      2 parameters
      1 conditional paths
      uses function clone_var_sym_list(struct var_sym_list *) defined in smatch_var_sym.c
      uses variable one defined in sm_equiv1.c
      uses function merge_var_sym_list(struct var_sym_list **,struct var_sym_list *) defined in smatch_var_sym.c
      uses variable two defined in sm_equiv1.c
   function free_var_sym_list(struct var_sym_list **) in line 149
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function __free_ptr_list(struct ptr_list **) defined in ptrlist.c
   function free_var_syms_and_list(struct var_sym_list **) in line 154
      protection public
      9 lines of code
      1 parameters
      1 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses function free_var_sym(struct var_sym *) defined in smatch_var_sym.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses function free_var_sym_list(struct var_sym_list **) defined in smatch_var_sym.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/sort.c
module sort.c
   macro definition assert in line 25
      protection public
   macro definition BEEN_THERE in line 38
      protection public
   macro definition FLUSH_TO in line 96
      protection public
   macro definition DUMP_TO in line 105
      protection public
   function array_sort(void **,int,int(*)(const void *, const void *)) in line 46
      protection public
      16 lines of code
      3 parameters
      9 conditional paths
      uses variable p defined in cond_expr2.c
      uses variable ptr defined in sm_null_deref2.c
      uses function j(x,T) defined in identifier_list.c
      uses variable l defined in sm_casts4.c
      uses macro definition a defined in preprocessor5.c
      uses macro definition assert defined in sort.c
      uses macro definition b defined in preprocessor5.c
   function merge_block_seqs(struct ptr_list *,int,struct ptr_list *,int,int(*)(const void *, const void *)) in line 117
      protection public
      106 lines of code
      5 parameters
      15 conditional paths
      uses macro definition LIST_NODE_NR defined in ptrlist.h
      uses variable ptr_list::nr defined in ptrlist.h
      uses macro definition BEEN_THERE defined in sort.c
      uses variable ptr_list::next defined in ptrlist.h
      uses macro definition PTR_ENTRY defined in ptrlist.h
      uses macro definition assert defined in sort.c
      uses macro definition FLUSH_TO defined in sort.c
      uses macro definition DUMP_TO defined in sort.c
      uses variable l defined in sm_casts4.c
      uses variable ptr_list::prev defined in ptrlist.h
   function sort_list(struct ptr_list **,int(*)(const void *, const void *)) in line 225
      protection public
      66 lines of code
      2 parameters
      12 conditional paths
      uses variable ptr_list::list defined in ptrlist.h
      uses function array_sort(void **,int,int(*)(const void *, const void *)) defined in sort.c
      uses variable ptr_list::next defined in ptrlist.h
      uses macro definition BEEN_THERE defined in sort.c
      uses function merge_block_seqs(struct ptr_list *,int,struct ptr_list *,int,int(*)(const void *, const void *)) defined in sort.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/sparse-llvm.c
module sparse-llvm.c
   macro definition MAX_STRUCT_MEMBERS in line 95
      protection public
   macro definition MAX_PSEUDO_NAME in line 280
      protection public
   macro definition MAX_ARGS in line 939
      protection public
   macro definition LLVM_DEFAULT_TARGET_TRIPLE in line 1092
      protection public
   macro definition X86_LINUX_LAYOUT in line 1095
      protection public
   macro definition X86_64_LINUX_LAYOUT in line 1100
      protection public
   function symbol_is_fp_type(struct symbol *) in line 29
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses variable sym defined in smatch_type.c
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::base_type defined in struct.c
      uses variable fp_type defined in symbol.c
      uses function symbol_type(LLVMModuleRef,struct symbol *) defined in sparse-llvm.c
      uses variable function::module defined in sparse-llvm.c
   function symbol_type(LLVMModuleRef,struct symbol *) in line 37
      protection public
      42 lines of code
      2 parameters
      11 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses variable sym defined in smatch_type.c
      uses variable symbol::type defined in struct.c
      uses enumvalue SYM_NODE defined in symbol.h
      uses variable function::module defined in sparse-llvm.c
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::base_type defined in struct.c
      uses variable symbol::aux defined in struct.c
      uses enumvalue SYM_BITFIELD defined in symbol.h
      uses enumvalue SYM_ENUM defined in symbol.h
      uses enumvalue SYM_BASETYPE defined in symbol.h
      uses function sym_basetype_type(struct symbol *) defined in sparse-llvm.c
      uses enumvalue SYM_PTR defined in symbol.h
      uses function sym_ptr_type(LLVMModuleRef,struct symbol *) defined in sparse-llvm.c
      uses enumvalue SYM_UNION defined in symbol.h
      uses function sym_union_type(LLVMModuleRef,struct symbol *) defined in sparse-llvm.c
      uses enumvalue SYM_STRUCT defined in symbol.h
      uses function sym_struct_type(LLVMModuleRef,struct symbol *) defined in sparse-llvm.c
      uses enumvalue SYM_ARRAY defined in symbol.h
      uses function sym_array_type(LLVMModuleRef,struct symbol *) defined in sparse-llvm.c
      uses enumvalue SYM_FN defined in symbol.h
      uses function sym_func_type(LLVMModuleRef,struct symbol *) defined in sparse-llvm.c
      uses macro definition assert defined in sort.c
   function func_return_type(LLVMModuleRef,struct symbol *) in line 39
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function symbol_type(LLVMModuleRef,struct symbol *) defined in sparse-llvm.c
      uses variable function::module defined in sparse-llvm.c
      uses variable sym defined in smatch_type.c
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::base_type defined in struct.c
   function sym_func_type(LLVMModuleRef,struct symbol *) in line 44
      protection public
      34 lines of code
      2 parameters
      1 conditional paths
      uses function func_return_type(LLVMModuleRef,struct symbol *) defined in sparse-llvm.c
      uses variable function::module defined in sparse-llvm.c
      uses variable sym defined in smatch_type.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable symbol::arguments defined in struct.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses function symbol_type(LLVMModuleRef,struct symbol *) defined in sparse-llvm.c
      uses variable symbol::variadic defined in struct.c
   function sym_array_type(LLVMModuleRef,struct symbol *) in line 79
      protection public
      15 lines of code
      2 parameters
      2 conditional paths
      uses variable sym defined in smatch_type.c
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::base_type defined in struct.c
      uses macro definition assert defined in sort.c
      uses variable symbol::bit_size defined in struct.c
      uses function symbol_type(LLVMModuleRef,struct symbol *) defined in sparse-llvm.c
      uses variable function::module defined in sparse-llvm.c
      uses macro definition NULL defined in sm_implied3.c
   function sym_struct_type(LLVMModuleRef,struct symbol *) in line 97
      protection public
      26 lines of code
      2 parameters
      1 conditional paths
      uses macro definition MAX_STRUCT_MEMBERS defined in sparse-llvm.c
      uses variable member defined in smdb.py
      uses function snprintf(char *,int,char *,char *) defined in sm_overflow6.c
      uses variable sym defined in smatch_type.c
      uses variable symbol::ident defined in struct.c
      uses variable ident::name defined in token.h
      uses variable symbol::aux defined in struct.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable symbol::symbol_list defined in struct.c
      uses macro definition assert defined in sort.c
      uses function symbol_type(LLVMModuleRef,struct symbol *) defined in sparse-llvm.c
      uses variable function::module defined in sparse-llvm.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function sym_union_type(LLVMModuleRef,struct symbol *) in line 124
      protection public
      16 lines of code
      2 parameters
      1 conditional paths
      uses variable sym defined in smatch_type.c
      uses variable symbol::bit_size defined in struct.c
   function sym_ptr_type(LLVMModuleRef,struct symbol *) in line 141
      protection public
      12 lines of code
      2 parameters
      2 conditional paths
      uses variable function::type defined in sparse-llvm.c
      uses variable sym defined in smatch_type.c
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::base_type defined in struct.c
      uses function symbol_type(LLVMModuleRef,struct symbol *) defined in sparse-llvm.c
      uses variable function::module defined in sparse-llvm.c
   function sym_basetype_type(struct symbol *) in line 154
      protection public
      47 lines of code
      1 parameters
      11 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses function symbol_is_fp_type(struct symbol *) defined in sparse-llvm.c
      uses variable sym defined in smatch_type.c
      uses variable symbol::bit_size defined in struct.c
      uses function die(const char *,...) defined in lib.c
      uses variable symbol::type defined in struct.c
   function insn_symbol_type(LLVMModuleRef,struct instruction *) in line 245
      protection public
      18 lines of code
      2 parameters
      6 conditional paths
      uses function symbol_type(LLVMModuleRef,struct symbol *) defined in sparse-llvm.c
      uses variable function::module defined in sparse-llvm.c
      uses function die(const char *,...) defined in lib.c
      uses macro definition NULL defined in sm_implied3.c
   function data_linkage(struct symbol *) in line 264
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses variable sym defined in smatch_type.c
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::modifiers defined in struct.c
      uses macro definition MOD_STATIC defined in symbol.h
   function function_linkage(struct symbol *) in line 272
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses variable sym defined in smatch_type.c
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::modifiers defined in struct.c
      uses macro definition MOD_STATIC defined in symbol.h
   function pseudo_name(pseudo_t,char *) in line 282
      protection public
      23 lines of code
      2 parameters
      6 conditional paths
      uses variable pseudo::type defined in linearize.h
      uses enumvalue PSEUDO_REG defined in linearize.h
      uses function snprintf(char *,int,char *,char *) defined in sm_overflow6.c
      uses variable buf defined in sm_fake_assignment.c
      uses macro definition MAX_PSEUDO_NAME defined in sparse-llvm.c
      uses variable pseudo::nr defined in linearize.h
      uses enumvalue PSEUDO_SYM defined in linearize.h
      uses macro definition assert defined in sort.c
      uses enumvalue PSEUDO_VAL defined in linearize.h
      uses enumvalue PSEUDO_ARG defined in linearize.h
      uses enumvalue PSEUDO_PHI defined in linearize.h
   function pseudo_to_value(struct function *,struct instruction *,pseudo_t) in line 306
      protection public
      75 lines of code
      3 parameters
      13 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses variable pseudo::type defined in linearize.h
      uses enumvalue PSEUDO_REG defined in linearize.h
      uses variable pseudo::priv defined in linearize.h
      uses enumvalue PSEUDO_SYM defined in linearize.h
      uses variable sym defined in smatch_type.c
      uses variable pseudo::sym defined in linearize.h
      uses macro definition assert defined in sort.c
      uses variable symbol::bb_target defined in struct.c
      uses variable symbol::initializer defined in struct.c
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_STRING defined in expression.h
      uses variable expression::string defined in expression.h
      uses variable string::data defined in token.h
      uses variable function::fn defined in sparse-llvm.c
      uses function strlen(char *) defined in sm_overflow6.c
      uses macro definition ARRAY_SIZE defined in lib.h
      uses enumvalue EXPR_SYMBOL defined in expression.h
      uses variable expression::symbol defined in expression.h
      uses function show_ident(const struct ident *) defined in token.h
      uses variable symbol::ident defined in struct.c
      uses variable name defined in smatch_type.c
      uses function symbol_type(LLVMModuleRef,struct symbol *) defined in sparse-llvm.c
      uses enumvalue PSEUDO_VAL defined in linearize.h
      uses function insn_symbol_type(LLVMModuleRef,struct instruction *) defined in sparse-llvm.c
      uses variable pseudo::value defined in linearize.h
      uses enumvalue PSEUDO_ARG defined in linearize.h
      uses variable pseudo::nr defined in linearize.h
      uses enumvalue PSEUDO_PHI defined in linearize.h
      uses enumvalue PSEUDO_VOID defined in linearize.h
   function calc_gep(LLVMBuilderRef,LLVMValueRef,LLVMValueRef) in line 382
      protection public
      15 lines of code
      3 parameters
      1 conditional paths
      uses variable function::builder defined in sparse-llvm.c
   function translate_fop(int) in line 398
      protection public
      18 lines of code
      1 parameters
      1 conditional paths
      uses enumvalue OP_SET_EQ defined in linearize.h
      uses enumvalue OP_SET_NE defined in linearize.h
      uses enumvalue OP_SET_LE defined in linearize.h
      uses enumvalue OP_SET_GE defined in linearize.h
      uses enumvalue OP_SET_LT defined in linearize.h
      uses enumvalue OP_SET_GT defined in linearize.h
      uses enumvalue OP_SET_B defined in linearize.h
      uses enumvalue OP_SET_A defined in linearize.h
      uses enumvalue OP_SET_BE defined in linearize.h
      uses enumvalue OP_SET_AE defined in linearize.h
   function translate_op(int) in line 417
      protection public
      17 lines of code
      1 parameters
      1 conditional paths
      uses enumvalue OP_SET_EQ defined in linearize.h
      uses enumvalue OP_SET_NE defined in linearize.h
      uses enumvalue OP_SET_LE defined in linearize.h
      uses enumvalue OP_SET_GE defined in linearize.h
      uses enumvalue OP_SET_LT defined in linearize.h
      uses enumvalue OP_SET_GT defined in linearize.h
      uses enumvalue OP_SET_B defined in linearize.h
      uses enumvalue OP_SET_A defined in linearize.h
      uses enumvalue OP_SET_BE defined in linearize.h
      uses enumvalue OP_SET_AE defined in linearize.h
   function output_op_binary(struct function *,struct instruction *) in line 435
      protection public
      128 lines of code
      2 parameters
      23 conditional paths
      uses function pseudo_to_value(struct function *,struct instruction *,pseudo_t) defined in sparse-llvm.c
      uses variable function::fn defined in sparse-llvm.c
      uses function pseudo_name(pseudo_t,char *) defined in sparse-llvm.c
      uses enumvalue OP_ADD defined in linearize.h
      uses function symbol_is_fp_type(struct symbol *) defined in sparse-llvm.c
      uses enumvalue OP_SUB defined in linearize.h
      uses enumvalue OP_MULU defined in linearize.h
      uses enumvalue OP_MULS defined in linearize.h
      uses macro definition assert defined in sort.c
      uses enumvalue OP_DIVU defined in linearize.h
      uses enumvalue OP_DIVS defined in linearize.h
      uses enumvalue OP_MODU defined in linearize.h
      uses enumvalue OP_MODS defined in linearize.h
      uses enumvalue OP_SHL defined in linearize.h
      uses enumvalue OP_LSR defined in linearize.h
      uses enumvalue OP_ASR defined in linearize.h
      uses enumvalue OP_AND defined in linearize.h
      uses enumvalue OP_OR defined in linearize.h
      uses enumvalue OP_XOR defined in linearize.h
      uses enumvalue OP_AND_BOOL defined in linearize.h
      uses function insn_symbol_type(LLVMModuleRef,struct instruction *) defined in sparse-llvm.c
      uses enumvalue OP_OR_BOOL defined in linearize.h
      uses enumvalue OP_BINCMP defined in linearize.h
      uses enumvalue OP_BINCMP_END defined in linearize.h
      uses function op(void) defined in loop2.c
      uses function translate_op(int) defined in sparse-llvm.c
      uses function translate_fop(int) defined in sparse-llvm.c
   function output_op_ret(struct function *,struct instruction *) in line 564
      protection public
      11 lines of code
      2 parameters
      2 conditional paths
      uses macro definition VOID defined in linearize.h
      uses function pseudo_to_value(struct function *,struct instruction *,pseudo_t) defined in sparse-llvm.c
      uses variable function::fn defined in sparse-llvm.c
   function calc_memop_addr(struct function *,struct instruction *) in line 576
      protection public
      20 lines of code
      2 parameters
      1 conditional paths
      uses variable src defined in sm_user_data3.c
      uses variable bits_in_pointer defined in target.c
      uses function pseudo_to_value(struct function *,struct instruction *,pseudo_t) defined in sparse-llvm.c
      uses variable function::fn defined in sparse-llvm.c
      uses function insn_symbol_type(LLVMModuleRef,struct instruction *) defined in sparse-llvm.c
      uses function calc_gep(LLVMBuilderRef,LLVMValueRef,LLVMValueRef) defined in sparse-llvm.c
   function output_op_load(struct function *,struct instruction *) in line 598
      protection public
      11 lines of code
      2 parameters
      1 conditional paths
      uses function calc_memop_addr(struct function *,struct instruction *) defined in sparse-llvm.c
      uses variable function::fn defined in sparse-llvm.c
   function output_op_store(struct function *,struct instruction *) in line 610
      protection public
      13 lines of code
      2 parameters
      1 conditional paths
      uses function calc_memop_addr(struct function *,struct instruction *) defined in sparse-llvm.c
      uses variable function::fn defined in sparse-llvm.c
      uses function pseudo_to_value(struct function *,struct instruction *,pseudo_t) defined in sparse-llvm.c
   function bool_value(struct function *,LLVMValueRef) in line 624
      protection public
      7 lines of code
      2 parameters
      2 conditional paths
      uses variable function::fn defined in sparse-llvm.c
      uses variable symbol::value defined in struct.c
   function output_op_br(struct function *,struct instruction *) in line 632
      protection public
      14 lines of code
      2 parameters
      2 conditional paths
      uses variable instruction::cond defined in linearize.h
      uses function bool_value(struct function *,LLVMValueRef) defined in sparse-llvm.c
      uses variable function::fn defined in sparse-llvm.c
      uses function pseudo_to_value(struct function *,struct instruction *,pseudo_t) defined in sparse-llvm.c
      uses variable instruction::bb_true defined in linearize.h
      uses variable basic_block::priv defined in linearize.h
      uses variable instruction::bb_false defined in linearize.h
   function output_op_sel(struct function *,struct instruction *) in line 647
      protection public
      12 lines of code
      2 parameters
      1 conditional paths
      uses function bool_value(struct function *,LLVMValueRef) defined in sparse-llvm.c
      uses variable function::fn defined in sparse-llvm.c
      uses function pseudo_to_value(struct function *,struct instruction *,pseudo_t) defined in sparse-llvm.c
   function output_op_switch(struct function *,struct instruction *) in line 660
      protection public
      32 lines of code
      2 parameters
      5 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable multijmp::begin defined in linearize.h
      uses variable multijmp::end defined in linearize.h
      uses macro definition assert defined in sort.c
      uses variable multijmp::target defined in linearize.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses function pseudo_to_value(struct function *,struct instruction *,pseudo_t) defined in sparse-llvm.c
      uses variable function::fn defined in sparse-llvm.c
      uses variable basic_block::priv defined in linearize.h
   function output_op_call(struct function *,struct instruction *) in line 693
      protection public
      23 lines of code
      2 parameters
      1 conditional paths
      uses variable multijmp::target defined in linearize.h
      uses macro definition func defined in preprocessor1.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses function pseudo_to_value(struct function *,struct instruction *,pseudo_t) defined in sparse-llvm.c
      uses variable function::fn defined in sparse-llvm.c
   function output_op_phisrc(struct function *,struct instruction *) in line 717
      protection public
      22 lines of code
      2 parameters
      1 conditional paths
      uses function v(int,...) defined in builtin_va_arg_pack.c
      uses macro definition assert defined in sort.c
      uses macro definition NULL defined in sm_implied3.c
      uses function pseudo_to_value(struct function *,struct instruction *,pseudo_t) defined in sparse-llvm.c
      uses variable function::fn defined in sparse-llvm.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable ptr defined in sm_null_deref2.c
      uses variable instruction::opcode defined in linearize.h
      uses enumvalue OP_PHI defined in linearize.h
      uses variable instruction::target defined in linearize.h
      uses variable pseudo::priv defined in linearize.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function output_op_phi(struct function *,struct instruction *) in line 740
      protection public
      11 lines of code
      2 parameters
      1 conditional paths
      uses macro definition assert defined in sort.c
      uses variable function::fn defined in sparse-llvm.c
   function output_op_ptrcast(struct function *,struct instruction *) in line 752
      protection public
      17 lines of code
      2 parameters
      2 conditional paths
      uses variable src defined in sm_user_data3.c
      uses variable instruction::target defined in linearize.h
      uses function pseudo_to_value(struct function *,struct instruction *,pseudo_t) defined in sparse-llvm.c
      uses variable function::fn defined in sparse-llvm.c
      uses function pseudo_name(pseudo_t,char *) defined in sparse-llvm.c
      uses macro definition assert defined in sort.c
      uses function symbol_is_fp_type(struct symbol *) defined in sparse-llvm.c
      uses function insn_symbol_type(LLVMModuleRef,struct instruction *) defined in sparse-llvm.c
   function output_op_cast(struct function *,struct instruction *,LLVMOpcode) in line 770
      protection public
      20 lines of code
      3 parameters
      3 conditional paths
      uses variable src defined in sm_user_data3.c
      uses variable instruction::target defined in linearize.h
      uses function pseudo_to_value(struct function *,struct instruction *,pseudo_t) defined in sparse-llvm.c
      uses variable function::fn defined in sparse-llvm.c
      uses function pseudo_name(pseudo_t,char *) defined in sparse-llvm.c
      uses macro definition assert defined in sort.c
      uses function symbol_is_fp_type(struct symbol *) defined in sparse-llvm.c
      uses function insn_symbol_type(LLVMModuleRef,struct instruction *) defined in sparse-llvm.c
      uses function op(void) defined in loop2.c
   function output_op_copy(struct function *,struct instruction *,pseudo_t) in line 791
      protection public
      27 lines of code
      3 parameters
      2 conditional paths
      uses variable src defined in sm_user_data3.c
      uses variable instruction::target defined in linearize.h
      uses function pseudo_name(pseudo_t,char *) defined in sparse-llvm.c
      uses function pseudo_to_value(struct function *,struct instruction *,pseudo_t) defined in sparse-llvm.c
      uses variable function::fn defined in sparse-llvm.c
      uses function insn_symbol_type(LLVMModuleRef,struct instruction *) defined in sparse-llvm.c
      uses function symbol_is_fp_type(struct symbol *) defined in sparse-llvm.c
   function output_insn(struct function *,struct instruction *) in line 819
      protection public
      104 lines of code
      2 parameters
      31 conditional paths
      uses enumvalue OP_RET defined in linearize.h
      uses function output_op_ret(struct function *,struct instruction *) defined in sparse-llvm.c
      uses variable function::fn defined in sparse-llvm.c
      uses enumvalue OP_BR defined in linearize.h
      uses function output_op_br(struct function *,struct instruction *) defined in sparse-llvm.c
      uses enumvalue OP_SYMADDR defined in linearize.h
      uses macro definition assert defined in sort.c
      uses enumvalue OP_SETVAL defined in linearize.h
      uses enumvalue OP_SWITCH defined in linearize.h
      uses function output_op_switch(struct function *,struct instruction *) defined in sparse-llvm.c
      uses enumvalue OP_COMPUTEDGOTO defined in linearize.h
      uses enumvalue OP_PHISOURCE defined in linearize.h
      uses function output_op_phisrc(struct function *,struct instruction *) defined in sparse-llvm.c
      uses enumvalue OP_PHI defined in linearize.h
      uses function output_op_phi(struct function *,struct instruction *) defined in sparse-llvm.c
      uses enumvalue OP_LOAD defined in linearize.h
      uses function output_op_load(struct function *,struct instruction *) defined in sparse-llvm.c
      uses enumvalue OP_LNOP defined in linearize.h
      uses enumvalue OP_STORE defined in linearize.h
      uses function output_op_store(struct function *,struct instruction *) defined in sparse-llvm.c
      uses enumvalue OP_SNOP defined in linearize.h
      uses enumvalue OP_INLINED_CALL defined in linearize.h
      uses enumvalue OP_CALL defined in linearize.h
      uses function output_op_call(struct function *,struct instruction *) defined in sparse-llvm.c
      uses enumvalue OP_CAST defined in linearize.h
      uses function output_op_cast(struct function *,struct instruction *,LLVMOpcode) defined in sparse-llvm.c
      uses enumvalue OP_SCAST defined in linearize.h
      uses enumvalue OP_FPCAST defined in linearize.h
      uses enumvalue OP_PTRCAST defined in linearize.h
      uses function output_op_ptrcast(struct function *,struct instruction *) defined in sparse-llvm.c
      uses enumvalue OP_BINARY defined in linearize.h
      uses enumvalue OP_BINARY_END defined in linearize.h
      uses enumvalue OP_BINCMP defined in linearize.h
      uses enumvalue OP_BINCMP_END defined in linearize.h
      uses function output_op_binary(struct function *,struct instruction *) defined in sparse-llvm.c
      uses enumvalue OP_SEL defined in linearize.h
      uses function output_op_sel(struct function *,struct instruction *) defined in sparse-llvm.c
      uses enumvalue OP_SLICE defined in linearize.h
      uses enumvalue OP_NOT defined in linearize.h
      uses variable src defined in sm_user_data3.c
      uses variable instruction::target defined in linearize.h
      uses function pseudo_to_value(struct function *,struct instruction *,pseudo_t) defined in sparse-llvm.c
      uses function pseudo_name(pseudo_t,char *) defined in sparse-llvm.c
      uses enumvalue OP_NEG defined in linearize.h
      uses enumvalue OP_CONTEXT defined in linearize.h
      uses enumvalue OP_RANGE defined in linearize.h
      uses enumvalue OP_NOP defined in linearize.h
      uses enumvalue OP_DEATHNOTE defined in linearize.h
      uses enumvalue OP_ASM defined in linearize.h
      uses enumvalue OP_COPY defined in linearize.h
      uses function output_op_copy(struct function *,struct instruction *,pseudo_t) defined in sparse-llvm.c
   function output_bb(struct function *,struct basic_block *,unsigned long) in line 924
      protection public
      14 lines of code
      3 parameters
      2 conditional paths
      uses variable instruction::bb defined in linearize.h
      uses variable basic_block::generation defined in linearize.h
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable basic_block::insns defined in linearize.h
      uses function output_insn(struct function *,struct instruction *) defined in sparse-llvm.c
      uses variable function::fn defined in sparse-llvm.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function output_fn(LLVMModuleRef,struct entrypoint *) in line 941
      protection public
      78 lines of code
      2 parameters
      4 conditional paths
      uses variable bb_generation defined in flow.c
      uses variable sym defined in smatch_type.c
      uses variable symbol::ep defined in struct.c
      uses variable entrypoint::name defined in linearize.h
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::base_type defined in struct.c
      uses macro definition MAX_ARGS defined in sparse-llvm.c
      uses variable function::module defined in sparse-llvm.c
      uses variable name defined in smatch_type.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable symbol::arguments defined in struct.c
      uses function symbol_type(LLVMModuleRef,struct symbol *) defined in sparse-llvm.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses function show_ident(const struct ident *) defined in token.h
      uses variable symbol::ident defined in struct.c
      uses variable function::fn defined in sparse-llvm.c
      uses function function_linkage(struct symbol *) defined in sparse-llvm.c
      uses variable entrypoint::bbs defined in linearize.h
      uses variable basic_block::generation defined in linearize.h
      uses function sprintf(char *,char *,char *) defined in sm_overflow6.c
      uses variable instruction::bb defined in linearize.h
      uses variable basic_block::priv defined in linearize.h
      uses variable basic_block::insns defined in linearize.h
      uses variable ptr defined in sm_null_deref2.c
      uses enumvalue OP_PHI defined in linearize.h
      uses variable function::builder defined in sparse-llvm.c
      uses function insn_symbol_type(LLVMModuleRef,struct instruction *) defined in sparse-llvm.c
      uses function output_bb(struct function *,struct basic_block *,unsigned long) defined in sparse-llvm.c
   function output_data(LLVMModuleRef,struct symbol *) in line 1020
      protection public
      52 lines of code
      2 parameters
      10 conditional paths
      uses function initializer(struct expression **,struct token *) defined in expression.h
      uses variable sym defined in smatch_type.c
      uses variable symbol::initializer defined in struct.c
      uses variable name defined in smatch_type.c
      uses enumvalue EXPR_VALUE defined in expression.h
      uses function symbol_type(LLVMModuleRef,struct symbol *) defined in sparse-llvm.c
      uses variable function::module defined in sparse-llvm.c
      uses enumvalue EXPR_SYMBOL defined in expression.h
      uses function show_ident(const struct ident *) defined in token.h
      uses variable symbol::ident defined in struct.c
      uses enumvalue EXPR_STRING defined in expression.h
      uses variable token::string defined in token.h
      uses variable string::data defined in token.h
      uses function strlen(char *) defined in sm_overflow6.c
      uses macro definition assert defined in sort.c
      uses function data_linkage(struct symbol *) defined in sparse-llvm.c
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::modifiers defined in struct.c
      uses macro definition MOD_CONST defined in symbol.h
      uses macro definition MOD_TLS defined in symbol.h
      uses variable ctype::alignment defined in struct.c
      uses macro definition MOD_EXTERN defined in symbol.h
   function compile(LLVMModuleRef,struct symbol_list *) in line 1073
      protection public
      17 lines of code
      2 parameters
      2 conditional paths
      uses variable sym defined in smatch_type.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses function expand_symbol(struct symbol *) defined in expand.c
      uses function linearize_symbol(struct symbol *) defined in linearize.c
      uses function output_fn(LLVMModuleRef,struct entrypoint *) defined in sparse-llvm.c
      uses variable function::module defined in sparse-llvm.c
      uses function output_data(LLVMModuleRef,struct symbol *) defined in sparse-llvm.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function set_target(LLVMModuleRef) in line 1105
      protection public
      33 lines of code
      1 parameters
      6 conditional paths
      uses macro definition LLVM_DEFAULT_TARGET_TRIPLE defined in sparse-llvm.c
      uses macro definition NULL defined in sm_implied3.c
      uses variable arch_m64 defined in lib.c
      uses macro definition X86_64_LINUX_LAYOUT defined in sparse-llvm.c
      uses macro definition X86_LINUX_LAYOUT defined in sparse-llvm.c
      uses function snprintf(char *,int,char *,char *) defined in sm_overflow6.c
      uses variable function::module defined in sparse-llvm.c
   function main(int,char **) in line 1139
      protection public
      31 lines of code
      2 parameters
      2 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses variable function::module defined in sparse-llvm.c
      uses function sparse_initialize(int,char **,struct string_list **) defined in lib.c
      uses variable function::argc defined in sparse-llvm.c
      uses variable function::argv defined in sparse-llvm.c
      uses function set_target(LLVMModuleRef) defined in sparse-llvm.c
      uses function compile(LLVMModuleRef,struct symbol_list *) defined in sparse-llvm.c
      uses variable dbg_dead defined in lib.c
      uses macro definition FOR_EACH_PTR_NOTAG defined in ptrlist.h
      uses function sparse(char *) defined in lib.c
      uses variable die_if_error defined in lib.c
      uses macro definition END_FOR_EACH_PTR_NOTAG defined in ptrlist.h
   variable function::argc in line 88
      protection public
   variable function::argv in line 87
      protection public
   variable function::atom_list in line 84
      protection public
   variable function::builder in line 23
      protection public
   variable function::fn in line 25
      protection public
   variable function::loop_stack in line 86
      protection public
   variable function::module in line 26
      protection public
   variable function::pseudo_list in line 83
      protection public
   variable function::pseudo_nr in line 82
      protection public
   variable function::ret_target in line 89
      protection public
   variable function::stack_size in line 81
      protection public
   variable function::str_list in line 85
      protection public
   variable function::type in line 24
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/sparse.c
module sparse.c
   macro definition check_memcpy in line 180
      protection public
   macro definition check_ctu in line 181
      protection public
   macro definition check_cfu in line 182
      protection public
   function context_increase(struct basic_block *,int) in line 43
      protection public
      24 lines of code
      2 parameters
      6 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable instruction::bb defined in linearize.h
      uses variable basic_block::insns defined in linearize.h
      uses variable instruction::val defined in linearize.h
      uses enumvalue OP_CONTEXT defined in linearize.h
      uses function warning(struct position,const char *,...) defined in lib.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function imbalance(struct entrypoint *,struct basic_block *,int,int,const char *) in line 68
      protection public
      8 lines of code
      5 parameters
      2 conditional paths
      uses variable Wcontext defined in lib.c
      uses variable sym defined in smatch_type.c
      uses variable symbol::ep defined in struct.c
      uses variable entrypoint::name defined in linearize.h
      uses function warning(struct position,const char *,...) defined in lib.c
      uses variable basic_block::pos defined in linearize.h
      uses function show_ident(const struct ident *) defined in token.h
      uses variable symbol::ident defined in struct.c
      uses function check_bb_context(struct entrypoint *,struct basic_block *,int,int) defined in sparse.c
      uses function exit(int) defined in test-be.c
   function check_bb_context(struct entrypoint *,struct basic_block *,int,int) in line 77
      protection public
      18 lines of code
      4 parameters
      5 conditional paths
      uses variable basic_block::context defined in linearize.h
      uses function imbalance(struct entrypoint *,struct basic_block *,int,int,const char *) defined in sparse.c
      uses variable basic_block::ep defined in linearize.h
      uses function context_increase(struct basic_block *,int) defined in sparse.c
      uses function exit(int) defined in test-be.c
      uses function check_children(struct entrypoint *,struct basic_block *,int,int) defined in sparse.c
   function check_children(struct entrypoint *,struct basic_block *,int,int) in line 79
      protection public
      17 lines of code
      4 parameters
      4 conditional paths
      uses variable basic_block::insns defined in linearize.h
      uses enumvalue OP_RET defined in linearize.h
      uses function exit(int) defined in test-be.c
      uses function imbalance(struct entrypoint *,struct basic_block *,int,int,const char *) defined in sparse.c
      uses variable basic_block::ep defined in linearize.h
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable basic_block::children defined in linearize.h
      uses function check_bb_context(struct entrypoint *,struct basic_block *,int,int) defined in sparse.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function check_cast_instruction(struct instruction *) in line 116
      protection public
      28 lines of code
      1 parameters
      7 conditional paths
      uses variable symbol::bit_size defined in struct.c
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::modifiers defined in struct.c
      uses macro definition MOD_SIGNED defined in symbol.h
      uses enumvalue OP_SCAST defined in linearize.h
      uses function warning(struct position,const char *,...) defined in lib.c
   function check_range_instruction(struct instruction *) in line 145
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function warning(struct position,const char *,...) defined in lib.c
   function check_byte_count(struct instruction *,pseudo_t) in line 150
      protection public
      13 lines of code
      2 parameters
      4 conditional paths
      uses variable pseudo::type defined in linearize.h
      uses enumvalue PSEUDO_VAL defined in linearize.h
      uses variable pseudo::value defined in linearize.h
      uses function warning(struct position,const char *,...) defined in lib.c
      uses function show_ident(const struct ident *) defined in token.h
   function argument(struct instruction *,unsigned int) in line 164
      protection public
      10 lines of code
      2 parameters
      1 conditional paths
      uses variable instruction::arguments defined in linearize.h
      uses function linearize_ptr_list(struct ptr_list *,void **,int) defined in ptrlist.c
      uses macro definition NULL defined in sm_implied3.c
   function check_memset(struct instruction *) in line 175
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function check_byte_count(struct instruction *,pseudo_t) defined in sparse.c
      uses function argument(struct instruction *,unsigned int) defined in sparse.c
   function check_call_instruction(struct instruction *) in line 189
      protection public
      24 lines of code
      1 parameters
      5 conditional paths
      uses function check_memset(struct instruction *) defined in sparse.c
      uses macro definition check_memcpy defined in sparse.c
      uses macro definition check_ctu defined in sparse.c
      uses macro definition check_cfu defined in sparse.c
      uses enumvalue PSEUDO_SYM defined in linearize.h
      uses macro definition ARRAY_SIZE defined in lib.h
      uses variable checkfn::check defined in sparse.c
   function check_one_instruction(struct instruction *) in line 214
      protection public
      17 lines of code
      1 parameters
      6 conditional paths
      uses enumvalue OP_CAST defined in linearize.h
      uses enumvalue OP_SCAST defined in linearize.h
      uses variable verbose defined in lib.c
      uses function check_cast_instruction(struct instruction *) defined in sparse.c
      uses enumvalue OP_RANGE defined in linearize.h
      uses function check_range_instruction(struct instruction *) defined in sparse.c
      uses enumvalue OP_CALL defined in linearize.h
      uses function check_call_instruction(struct instruction *) defined in sparse.c
   function check_bb_instructions(struct basic_block *) in line 232
      protection public
      9 lines of code
      1 parameters
      2 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable instruction::bb defined in linearize.h
      uses variable basic_block::insns defined in linearize.h
      uses function check_one_instruction(struct instruction *) defined in sparse.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function check_instructions(struct entrypoint *) in line 242
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable basic_block::ep defined in linearize.h
      uses variable entrypoint::bbs defined in linearize.h
      uses function check_bb_instructions(struct basic_block *) defined in sparse.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function check_context(struct entrypoint *) in line 250
      protection public
      23 lines of code
      1 parameters
      3 conditional paths
      uses variable sym defined in smatch_type.c
      uses variable symbol::ep defined in struct.c
      uses variable entrypoint::name defined in linearize.h
      uses variable context::context defined in symbol.h
      uses variable Wuninitialized defined in lib.c
      uses variable verbose defined in lib.c
      uses variable entrypoint::entry defined in linearize.h
      uses variable instruction::bb defined in linearize.h
      uses variable basic_block::needs defined in linearize.h
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable pseudo::type defined in linearize.h
      uses enumvalue PSEUDO_ARG defined in linearize.h
      uses function warning(struct position,const char *,...) defined in lib.c
      uses variable symbol::pos defined in struct.c
      uses function show_ident(const struct ident *) defined in token.h
      uses variable symbol::ident defined in struct.c
      uses function show_pseudo(pseudo_t) defined in linearize.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses function check_instructions(struct entrypoint *) defined in sparse.c
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::attribute defined in struct.c
      uses variable attribute::contexts defined in symbol.h
      uses variable context::in defined in symbol.h
      uses variable context::out defined in symbol.h
      uses function check_bb_context(struct entrypoint *,struct basic_block *,int,int) defined in sparse.c
   function check_symbols(struct symbol_list *) in line 274
      protection public
      20 lines of code
      1 parameters
      4 conditional paths
      uses variable sym defined in smatch_type.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses function expand_symbol(struct symbol *) defined in expand.c
      uses function linearize_symbol(struct symbol *) defined in linearize.c
      uses variable dbg_entry defined in lib.c
      uses function show_entry(struct entrypoint *) defined in linearize.c
      uses function check_context(struct entrypoint *) defined in sparse.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses variable die_if_error defined in lib.c
      uses function exit(int) defined in test-be.c
   function main(int,char **) in line 295
      protection public
      12 lines of code
      2 parameters
      1 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses function check_symbols(struct symbol_list *) defined in sparse.c
      uses function sparse_initialize(int,char **,struct string_list **) defined in lib.c
      uses macro definition FOR_EACH_PTR_NOTAG defined in ptrlist.h
      uses function sparse(char *) defined in lib.c
      uses macro definition END_FOR_EACH_PTR_NOTAG defined in ptrlist.h
   variable checkfn::check in line 186
      protection public
   variable checkfn::id in line 185
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/storage.c
module storage.c
   macro definition MAX_STORAGE_HASH in line 21
      protection public
   variable storage_hash_table in line 22
      protection public
   function ALLOCATOR(storage,"storages") in line 18
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function ALLOCATOR(storage_hash,"storage hash") in line 19
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function storage_hash(struct basic_block *,pseudo_t,enum inout_enum) in line 24
      protection public
      6 lines of code
      3 parameters
      1 conditional paths
      uses function hash(struct hashtable *,void *) defined in hashtable.c
      uses macro definition hashval defined in lib.h
      uses macro definition MAX_STORAGE_HASH defined in storage.c
   function hash_list_cmp(const void *,const void *) in line 31
      protection public
      8 lines of code
      2 parameters
      2 conditional paths
   function sort_hash_list(struct storage_hash_list **) in line 40
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function sort_list(struct ptr_list **,int(*)(const void *, const void *)) defined in ptrlist.h
      uses function hash_list_cmp(const void *,const void *) defined in storage.c
   function gather_storage(struct basic_block *,enum inout_enum) in line 45
      protection public
      26 lines of code
      2 parameters
      1 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses macro definition MAX_STORAGE_HASH defined in storage.c
      uses function hash(struct hashtable *,void *) defined in hashtable.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable storage_hash_table defined in storage.c
      uses variable storage_hash::bb defined in storage.h
      uses variable storage_hash::inout defined in storage.h
      uses macro definition add_ptr_list defined in ptrlist.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses function sort_hash_list(struct storage_hash_list **) defined in storage.c
      uses variable storage_hash::pseudo defined in storage.h
      uses macro definition assert defined in sort.c
      uses macro definition DELETE_CURRENT_PTR defined in ptrlist.h
      uses macro definition PACK_PTR_LIST defined in ptrlist.h
   function name_storage(void) in line 72
      protection public
      15 lines of code
      1 parameters
      3 conditional paths
      uses variable name defined in smatch_type.c
      uses macro definition MAX_STORAGE_HASH defined in storage.c
      uses function hash(struct hashtable *,void *) defined in hashtable.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable storage_hash_table defined in storage.c
      uses variable storage::name defined in storage.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function lookup_storage(struct basic_block *,pseudo_t,enum inout_enum) in line 88
      protection public
      11 lines of code
      3 parameters
      1 conditional paths
      uses variable storage_hash_table defined in storage.c
      uses function storage_hash(struct basic_block *,pseudo_t,enum inout_enum) defined in storage.c
      uses function hash(struct hashtable *,void *) defined in hashtable.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable storage_hash::bb defined in storage.h
      uses variable storage_hash::inout defined in storage.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses macro definition NULL defined in sm_implied3.c
   function add_storage(struct storage *,struct basic_block *,pseudo_t,enum inout_enum) in line 100
      protection public
      11 lines of code
      4 parameters
      1 conditional paths
      uses variable storage_hash_table defined in storage.c
      uses function storage_hash(struct basic_block *,pseudo_t,enum inout_enum) defined in storage.c
      uses function hash(struct hashtable *,void *) defined in hashtable.c
      uses variable storage_hash::bb defined in storage.h
      uses variable storage_hash::pseudo defined in storage.h
      uses variable storage_hash::inout defined in storage.h
      uses macro definition add_ptr_list defined in ptrlist.h
   function storage_hash_cmp(const void *,const void *) in line 113
      protection public
      17 lines of code
      2 parameters
      5 conditional paths
      uses variable storage::type defined in storage.h
      uses variable storage::regno defined in storage.h
   function vrfy_storage(struct storage_hash_list **) in line 131
      protection public
      28 lines of code
      1 parameters
      4 conditional paths
      uses function sort_list(struct ptr_list **,int(*)(const void *, const void *)) defined in ptrlist.h
      uses function storage_hash_cmp(const void *,const void *) defined in storage.c
      uses macro definition NULL defined in sm_implied3.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable storage_hash::storage defined in storage.h
      uses variable storage_hash::bb defined in storage.h
      uses variable storage_hash::inout defined in storage.h
      uses enumvalue REG_UDEF defined in storage.h
      uses function printf(char *,...) defined in test-be.c
      uses enumvalue STOR_IN defined in storage.h
      uses function show_storage(struct storage *) defined in storage.c
      uses function show_pseudo(pseudo_t) defined in linearize.c
      uses variable storage_hash::pseudo defined in storage.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function free_storage(void) in line 160
      protection public
      9 lines of code
      1 parameters
      1 conditional paths
      uses macro definition MAX_STORAGE_HASH defined in storage.c
      uses function vrfy_storage(struct storage_hash_list **) defined in storage.c
      uses variable storage_hash_table defined in storage.c
      uses macro definition free_ptr_list defined in ptrlist.h
   function show_storage(struct storage *) in line 170
      protection public
      21 lines of code
      1 parameters
      1 conditional paths
      uses enumvalue REG_REG defined in storage.h
      uses function sprintf(char *,char *,char *) defined in sm_overflow6.c
      uses enumvalue REG_STACK defined in storage.h
      uses enumvalue REG_ARG defined in storage.h
   function combine_storage(struct storage *,struct storage *) in line 198
      protection public
      16 lines of code
      2 parameters
      1 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable src defined in sm_user_data3.c
      uses macro definition assert defined in sort.c
      uses macro definition add_ptr_list defined in ptrlist.h
      uses variable storage::users defined in storage.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses enumvalue REG_BAD defined in storage.h
      uses macro definition NULL defined in sm_implied3.c
   function set_up_bb_storage(struct basic_block *) in line 215
      protection public
      32 lines of code
      1 parameters
      5 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable basic_block::children defined in linearize.h
      uses variable basic_block::needs defined in linearize.h
      uses function lookup_storage(struct basic_block *,pseudo_t,enum inout_enum) defined in storage.c
      uses enumvalue STOR_OUT defined in storage.h
      uses enumvalue STOR_IN defined in storage.h
      uses function add_storage(struct storage *,struct basic_block *,pseudo_t,enum inout_enum) defined in storage.c
      uses function combine_storage(struct storage *,struct storage *) defined in storage.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function set_up_argument_storage(struct entrypoint *,struct basic_block *) in line 248
      protection public
      15 lines of code
      2 parameters
      2 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable basic_block::needs defined in linearize.h
      uses enumvalue PSEUDO_ARG defined in linearize.h
      uses variable storage::type defined in storage.h
      uses enumvalue REG_ARG defined in storage.h
      uses variable storage::regno defined in storage.h
      uses function add_storage(struct storage *,struct basic_block *,pseudo_t,enum inout_enum) defined in storage.c
      uses enumvalue STOR_IN defined in storage.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function combine_phi_storage(struct basic_block *) in line 269
      protection public
      23 lines of code
      1 parameters
      4 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable instruction::bb defined in linearize.h
      uses variable basic_block::insns defined in linearize.h
      uses enumvalue OP_PHISOURCE defined in linearize.h
      uses macro definition NULL defined in sm_implied3.c
      uses function lookup_storage(struct basic_block *,pseudo_t,enum inout_enum) defined in storage.c
      uses variable instruction::target defined in linearize.h
      uses enumvalue STOR_OUT defined in storage.h
      uses macro definition DELETE_CURRENT_PTR defined in ptrlist.h
      uses function combine_storage(struct storage *,struct storage *) defined in storage.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses macro definition PACK_PTR_LIST defined in ptrlist.h
   function set_up_storage(struct entrypoint *) in line 293
      protection public
      15 lines of code
      1 parameters
      1 conditional paths
      uses function set_up_argument_storage(struct entrypoint *,struct basic_block *) defined in storage.c
      uses variable basic_block::ep defined in linearize.h
      uses variable entrypoint::entry defined in linearize.h
      uses variable instruction::bb defined in linearize.h
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable entrypoint::bbs defined in linearize.h
      uses function set_up_bb_storage(struct basic_block *) defined in storage.c
      uses function combine_phi_storage(struct basic_block *) defined in storage.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses function name_storage(void) defined in storage.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/storage.h
module storage.h
   enumeration storage_type in line 13
      protection public
   enumeration inout_enum in line 23
      protection public
   enumvalue REG_UDEF in line 14
      protection public
   enumvalue REG_REG in line 15
      protection public
   enumvalue REG_STACK in line 16
      protection public
   enumvalue REG_FRAME in line 17
      protection public
   enumvalue REG_SYM in line 18
      protection public
   enumvalue REG_ARG in line 19
      protection public
   enumvalue REG_BAD in line 20
      protection public
   enumvalue STOR_IN in line 24
      protection public
   enumvalue STOR_OUT in line 26
      protection public
   function DECLARE_PTR_LIST(storage_ptr_list,struct storage *) in line 29
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function DECLARE_PTR_LIST(storage_list,struct storage) in line 42
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function DECLARE_PTR_LIST(storage_hash_list,struct storage_hash) in line 52
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function gather_storage(struct basic_block *,enum inout_enum) in line 54
      protection public
      26 lines of code
      2 parameters
      4 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses macro definition MAX_STORAGE_HASH defined in storage.c
      uses function hash(struct hashtable *,void *) defined in hashtable.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable storage_hash::bb defined in storage.h
      uses variable storage_hash::inout defined in storage.h
      uses macro definition add_ptr_list defined in ptrlist.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses variable storage_hash::pseudo defined in storage.h
      uses macro definition assert defined in sort.c
      uses macro definition DELETE_CURRENT_PTR defined in ptrlist.h
      uses macro definition PACK_PTR_LIST defined in ptrlist.h
   function free_storage(void) in line 55
      protection public
      9 lines of code
      1 parameters
      2 conditional paths
      uses macro definition MAX_STORAGE_HASH defined in storage.c
      uses macro definition free_ptr_list defined in ptrlist.h
   function show_storage(struct storage *) in line 56
      protection public
      21 lines of code
      1 parameters
      5 conditional paths
      uses enumvalue REG_REG defined in storage.h
      uses function sprintf(char *,char *,char *) defined in sm_overflow6.c
      uses enumvalue REG_STACK defined in storage.h
      uses enumvalue REG_ARG defined in storage.h
   function set_up_storage(struct entrypoint *) in line 57
      protection public
      15 lines of code
      1 parameters
      1 conditional paths
      uses variable basic_block::ep defined in linearize.h
      uses variable entrypoint::entry defined in linearize.h
      uses variable instruction::bb defined in linearize.h
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable entrypoint::bbs defined in linearize.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function lookup_storage(struct basic_block *,pseudo_t,enum inout_enum) in line 58
      protection public
      11 lines of code
      3 parameters
      2 conditional paths
      uses function hash(struct hashtable *,void *) defined in hashtable.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable storage_hash::bb defined in storage.h
      uses variable storage_hash::inout defined in storage.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses macro definition NULL defined in sm_implied3.c
   function add_storage(struct storage *,struct basic_block *,pseudo_t,enum inout_enum) in line 59
      protection public
      11 lines of code
      4 parameters
      1 conditional paths
      uses function hash(struct hashtable *,void *) defined in hashtable.c
      uses function alloc_storage_hash(struct storage *) defined in storage.h
      uses variable storage_hash::bb defined in storage.h
      uses variable storage_hash::pseudo defined in storage.h
      uses variable storage_hash::inout defined in storage.h
      uses macro definition add_ptr_list defined in ptrlist.h
   function DECLARE_ALLOCATOR(storage) in line 61
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function DECLARE_ALLOCATOR(storage_hash) in line 62
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function alloc_storage(void) in line 64
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function alloc_storage_hash(struct storage *) in line 69
      protection public
      9 lines of code
      1 parameters
      1 conditional paths
      uses macro definition add_ptr_list defined in ptrlist.h
   variable storage::@144 in line 39
      protection public
   variable storage::@5 in line 144
      protection public
   variable storage::ctype in line 115
      protection public
   variable storage::flags in line 111
      protection public
   variable storage::idx in line 126
      protection public
   variable storage::label in line 138
      protection public
   variable storage::labelsym in line 142
      protection public
   variable storage::name in line 33
      protection public
   variable storage::offset in line 121
      protection public
   variable storage::pseudo in line 120
      protection public
   variable storage::reg in line 114
      protection public
   variable storage::regno in line 36
      protection public
   variable storage::size in line 122
      protection public
   variable storage::sym in line 130
      protection public
   variable storage::type in line 105
      protection public
   variable storage::users in line 34
      protection public
   variable storage::value in line 134
      protection public
   variable storage::@143::offset in line 37
      protection public
   variable storage::@143::regno in line 36
      protection public
   variable storage::@143::sym in line 38
      protection public
   variable storage_hash::bb in line 45
      protection public
   variable storage_hash::flags in line 49
      protection public
   variable storage_hash::inout in line 46
      protection public
   variable storage_hash::pseudo in line 46
      protection public
   variable storage_hash::storage in line 48
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/symbol.c
module symbol.c
   macro definition __INIT_IDENT in line 822
      protection public
   macro definition __IDENT in line 823
      protection public
   macro definition __IDENT in line 833
      protection public
   macro definition CHAR_SIGNEDNESS in line 854
      protection public
   macro definition MOD_ESIGNED in line 857
      protection public
   macro definition MOD_LL in line 858
      protection public
   macro definition MOD_LLL in line 859
      protection public
   variable translation_unit_used_list in line 43
      protection public
   variable restr in line 532
      protection public
   variable fouled in line 532
      protection public
   variable constant_p_op in line 709
      protection public
   variable safe_p_op in line 709
      protection public
   variable warning_op in line 709
      protection public
   variable expect_op in line 709
      protection public
   variable choose_op in line 709
      protection public
   variable builtin_fn_type in line 709
      protection public
   variable eval_init_table in line 791
      protection public
   variable null_attr in line 709
      protection public
   variable fp_type in line 709
      protection public
   variable null_ctype in line 709
      protection public
   variable zero_int in line 709
      protection public
   variable ctype_declaration in line 903
      protection public
   function access_symbol(struct symbol *) in line 48
      protection public
      9 lines of code
      1 parameters
      1 conditional paths
      uses variable sym defined in smatch_type.c
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::modifiers defined in struct.c
      uses macro definition MOD_INLINE defined in symbol.h
      uses macro definition MOD_ACCESSED defined in symbol.h
      uses function add_symbol(struct symbol_list **,struct symbol *) defined in symbol.h
      uses variable translation_unit_used_list defined in symbol.c
   function lookup_symbol(struct ident *,enum namespace) in line 58
      protection public
      12 lines of code
      2 parameters
      1 conditional paths
      uses variable sym defined in smatch_type.c
      uses variable ident::symbols defined in token.h
      uses variable symbol::next_id defined in struct.c
      uses variable symbol::namespace defined in struct.c
      uses variable symbol::used defined in struct.c
      uses macro definition NULL defined in sm_implied3.c
   function alloc_context(void) in line 71
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function alloc_symbol(struct position,int) in line 76
      protection public
      9 lines of code
      2 parameters
      1 conditional paths
      uses variable sym defined in smatch_type.c
      uses variable symbol::type defined in struct.c
      uses variable symbol::pos defined in struct.c
      uses variable symbol::endpos defined in struct.c
      uses variable position::type defined in lib.h
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::attribute defined in struct.c
      uses variable null_attr defined in symbol.c
   function lay_out_union(struct symbol *,struct struct_union_info *) in line 95
      protection public
      15 lines of code
      2 parameters
      4 conditional paths
      uses function examine_symbol_type(struct symbol *) defined in symbol.c
      uses variable sym defined in smatch_type.c
      uses variable symbol::ident defined in struct.c
      uses macro definition is_bitfield_type defined in symbol.h
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::alignment defined in struct.c
      uses function info(struct position,const char *,...) defined in lib.c
      uses variable symbol::bit_size defined in struct.c
      uses variable symbol::offset defined in struct.c
   function bitfield_base_size(struct symbol *) in line 111
      protection public
      8 lines of code
      1 parameters
      3 conditional paths
      uses variable sym defined in smatch_type.c
      uses variable symbol::type defined in struct.c
      uses enumvalue SYM_NODE defined in symbol.h
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::base_type defined in struct.c
      uses enumvalue SYM_BITFIELD defined in symbol.h
      uses variable symbol::bit_size defined in struct.c
   function lay_out_struct(struct symbol *,struct struct_union_info *) in line 123
      protection public
      58 lines of code
      2 parameters
      6 conditional paths
      uses variable struct_union_info::bit_size defined in symbol.c
      uses function examine_symbol_type(struct symbol *) defined in symbol.c
      uses variable sym defined in smatch_type.c
      uses variable symbol::ident defined in struct.c
      uses macro definition is_bitfield_type defined in symbol.h
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::alignment defined in struct.c
      uses function info(struct position,const char *,...) defined in lib.c
      uses variable symbol::bit_size defined in struct.c
      uses function bitfield_base_size(struct symbol *) defined in symbol.c
      uses variable symbol::offset defined in struct.c
      uses variable symbol::bit_offset defined in struct.c
      uses variable ctype::base_type defined in struct.c
   function examine_struct_union_type(struct symbol *,int) in line 182
      protection public
      26 lines of code
      2 parameters
      3 conditional paths
      uses function info(struct position,const char *,...) defined in lib.c
      uses variable struct_union_info::bit_size defined in symbol.c
      uses function void(x,int) defined in identifier_list.c
      uses variable member defined in smdb.py
      uses function lay_out_struct(struct symbol *,struct struct_union_info *) defined in symbol.c
      uses function lay_out_union(struct symbol *,struct struct_union_info *) defined in symbol.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable sym defined in smatch_type.c
      uses variable symbol::symbol_list defined in struct.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::alignment defined in struct.c
      uses variable symbol::bit_size defined in struct.c
   function examine_base_type(struct symbol *) in line 209
      protection public
      18 lines of code
      1 parameters
      3 conditional paths
      uses function examine_symbol_type(struct symbol *) defined in symbol.c
      uses variable sym defined in smatch_type.c
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::base_type defined in struct.c
      uses variable symbol::type defined in struct.c
      uses enumvalue SYM_PTR defined in symbol.h
      uses variable ctype::modifiers defined in struct.c
      uses macro definition MOD_PTRINHERIT defined in symbol.h
      uses enumvalue SYM_NODE defined in symbol.h
   function examine_array_type(struct symbol *) in line 228
      protection public
      24 lines of code
      1 parameters
      6 conditional paths
      uses function examine_base_type(struct symbol *) defined in symbol.c
      uses variable sym defined in smatch_type.c
      uses variable struct_union_info::bit_size defined in symbol.c
      uses variable symbol::array_size defined in struct.c
      uses variable symbol::bit_size defined in struct.c
      uses function get_expression_value_silent(struct expression *) defined in expand.c
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_VALUE defined in expression.h
      uses variable Wvla defined in lib.c
      uses function warning(struct position,const char *,...) defined in lib.c
      uses variable expression::pos defined in expression.h
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::alignment defined in struct.c
   function examine_bitfield_type(struct symbol *) in line 253
      protection public
      22 lines of code
      1 parameters
      5 conditional paths
      uses function examine_base_type(struct symbol *) defined in symbol.c
      uses variable sym defined in smatch_type.c
      uses variable struct_union_info::bit_size defined in symbol.c
      uses variable symbol::bit_size defined in struct.c
      uses function warning(struct position,const char *,...) defined in lib.c
      uses variable symbol::pos defined in struct.c
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::alignment defined in struct.c
      uses variable ctype::modifiers defined in struct.c
      uses macro definition MOD_EXPLICITLY_SIGNED defined in symbol.h
      uses macro definition MOD_SIGNED defined in symbol.h
      uses macro definition MOD_UNSIGNED defined in symbol.h
      uses macro definition MOD_SIGNEDNESS defined in symbol.h
   function merge_type(struct symbol *,struct symbol *) in line 279
      protection public
      8 lines of code
      2 parameters
      1 conditional paths
      uses variable sym defined in smatch_type.c
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::modifiers defined in struct.c
      uses macro definition MOD_STORAGE defined in symbol.h
      uses variable ctype::base_type defined in struct.c
      uses variable symbol::type defined in struct.c
      uses enumvalue SYM_NODE defined in symbol.h
      uses function merge_type(struct symbol *,struct symbol *) defined in symbol.c
   function count_array_initializer(struct symbol *,struct expression *) in line 288
      protection public
      68 lines of code
      2 parameters
      18 conditional paths
      uses macro definition MOD_CHAR defined in symbol.h
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_INITIALIZER defined in expression.h
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable expression::expr_list defined in expression.h
      uses enumvalue EXPR_INDEX defined in expression.h
      uses enumvalue EXPR_PREOP defined in expression.h
      uses enumvalue EXPR_STRING defined in expression.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses variable expression::string defined in expression.h
      uses variable string::length defined in token.h
   function get_symbol_initializer(struct symbol *) in line 357
      protection public
      8 lines of code
      1 parameters
      3 conditional paths
      uses variable sym defined in smatch_type.c
      uses variable symbol::initializer defined in struct.c
      uses variable symbol::same_symbol defined in struct.c
      uses macro definition NULL defined in sm_implied3.c
   function examine_node_type(struct symbol *) in line 366
      protection public
      36 lines of code
      1 parameters
      6 conditional paths
      uses function examine_base_type(struct symbol *) defined in symbol.c
      uses variable sym defined in smatch_type.c
      uses variable struct_union_info::bit_size defined in symbol.c
      uses variable symbol::bit_size defined in struct.c
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::alignment defined in struct.c
      uses variable ctype::modifiers defined in struct.c
      uses macro definition MOD_SIGNEDNESS defined in symbol.h
      uses enumvalue SYM_ARRAY defined in symbol.h
      uses function initializer(struct expression **,struct token *) defined in expression.h
      uses function get_symbol_initializer(struct symbol *) defined in symbol.c
      uses variable ctype::base_type defined in struct.c
      uses function count_array_initializer(struct symbol *,struct expression *) defined in symbol.c
   function examine_enum_type(struct symbol *) in line 403
      protection public
      13 lines of code
      1 parameters
      3 conditional paths
      uses function examine_base_type(struct symbol *) defined in symbol.c
      uses variable sym defined in smatch_type.c
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::modifiers defined in struct.c
      uses macro definition MOD_SIGNEDNESS defined in symbol.h
      uses variable symbol::bit_size defined in struct.c
      uses variable bits_in_enum defined in target.c
      uses variable ctype::alignment defined in struct.c
      uses variable enum_alignment defined in target.c
   function examine_pointer_type(struct symbol *) in line 417
      protection public
      14 lines of code
      1 parameters
      3 conditional paths
      uses variable sym defined in smatch_type.c
      uses variable symbol::bit_size defined in struct.c
      uses variable bits_in_pointer defined in target.c
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::alignment defined in struct.c
      uses variable pointer_alignment defined in target.c
   function examine_symbol_type(struct symbol *) in line 436
      protection public
      61 lines of code
      1 parameters
      1 conditional paths
      uses variable sym defined in smatch_type.c
      uses variable symbol::examined defined in struct.c
      uses variable symbol::type defined in struct.c
      uses enumvalue SYM_FN defined in symbol.h
      uses enumvalue SYM_NODE defined in symbol.h
      uses function examine_node_type(struct symbol *) defined in symbol.c
      uses enumvalue SYM_ARRAY defined in symbol.h
      uses function examine_array_type(struct symbol *) defined in symbol.c
      uses enumvalue SYM_STRUCT defined in symbol.h
      uses function examine_struct_union_type(struct symbol *,int) defined in symbol.c
      uses enumvalue SYM_UNION defined in symbol.h
      uses enumvalue SYM_PTR defined in symbol.h
      uses function examine_pointer_type(struct symbol *) defined in symbol.c
      uses enumvalue SYM_ENUM defined in symbol.h
      uses function examine_enum_type(struct symbol *) defined in symbol.c
      uses enumvalue SYM_BITFIELD defined in symbol.h
      uses function examine_bitfield_type(struct symbol *) defined in symbol.c
      uses enumvalue SYM_BASETYPE defined in symbol.h
      uses enumvalue SYM_TYPEOF defined in symbol.h
      uses function evaluate_expression(struct expression *) defined in evaluate.c
      uses variable symbol::initializer defined in struct.c
      uses macro definition is_bitfield_type defined in symbol.h
      uses function warning(struct position,const char *,...) defined in lib.c
      uses variable symbol::pos defined in struct.c
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::base_type defined in struct.c
      uses variable ctype::modifiers defined in struct.c
      uses enumvalue SYM_PREPROCESSOR defined in symbol.h
      uses function sparse_error(struct position,const char *,...) defined in lib.c
      uses function show_ident(const struct ident *) defined in token.h
      uses variable symbol::ident defined in struct.c
      uses macro definition NULL defined in sm_implied3.c
      uses enumvalue SYM_UNINITIALIZED defined in symbol.h
      uses enumvalue SYM_RESTRICT defined in symbol.h
      uses function examine_base_type(struct symbol *) defined in symbol.c
      uses enumvalue SYM_FOULED defined in symbol.h
   function get_type_name(enum type type) in line 498
      protection public
      28 lines of code
      1 parameters
      1 conditional paths
      uses enumvalue SYM_UNINITIALIZED defined in symbol.h
      uses enumvalue SYM_PREPROCESSOR defined in symbol.h
      uses enumvalue SYM_BASETYPE defined in symbol.h
      uses enumvalue SYM_NODE defined in symbol.h
      uses enumvalue SYM_PTR defined in symbol.h
      uses enumvalue SYM_FN defined in symbol.h
      uses enumvalue SYM_ARRAY defined in symbol.h
      uses enumvalue SYM_STRUCT defined in symbol.h
      uses enumvalue SYM_UNION defined in symbol.h
      uses enumvalue SYM_ENUM defined in symbol.h
      uses enumvalue SYM_TYPEDEF defined in symbol.h
      uses enumvalue SYM_TYPEOF defined in symbol.h
      uses enumvalue SYM_MEMBER defined in symbol.h
      uses enumvalue SYM_BITFIELD defined in symbol.h
      uses enumvalue SYM_LABEL defined in symbol.h
      uses enumvalue SYM_RESTRICT defined in symbol.h
      uses enumvalue SYM_FOULED defined in symbol.h
      uses enumvalue SYM_KEYWORD defined in symbol.h
      uses enumvalue SYM_BAD defined in symbol.h
      uses macro definition NULL defined in sm_implied3.c
   function examine_pointer_target(struct symbol *) in line 527
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function examine_base_type(struct symbol *) defined in symbol.c
      uses variable sym defined in smatch_type.c
   function create_fouled(struct symbol *) in line 534
      protection public
      12 lines of code
      1 parameters
      1 conditional paths
      uses variable bits_in_int defined in target.c
      uses function alloc_symbol(struct position,int) defined in symbol.c
      uses enumvalue SYM_FOULED defined in symbol.h
      uses function add_symbol(struct symbol_list **,struct symbol *) defined in symbol.h
      uses variable restr defined in symbol.c
      uses variable fouled defined in symbol.c
   function befoul(struct symbol *) in line 547
      protection public
      19 lines of code
      1 parameters
      1 conditional paths
      uses enumvalue SYM_NODE defined in symbol.h
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::base_type defined in struct.c
      uses macro definition PREPARE_PTR_LIST defined in ptrlist.h
      uses variable restr defined in symbol.c
      uses variable fouled defined in symbol.c
      uses macro definition NEXT_PTR_LIST defined in ptrlist.h
      uses macro definition FINISH_PTR_LIST defined in ptrlist.h
      uses macro definition NULL defined in sm_implied3.c
   function check_declaration(struct symbol *) in line 567
      protection public
      29 lines of code
      1 parameters
      1 conditional paths
      uses variable sym defined in smatch_type.c
      uses variable symbol::next_id defined in struct.c
      uses macro definition NULL defined in sm_implied3.c
      uses variable symbol::namespace defined in struct.c
      uses variable symbol::scope defined in struct.c
      uses variable symbol::same_symbol defined in struct.c
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::modifiers defined in struct.c
      uses macro definition MOD_EXTERN defined in symbol.h
      uses macro definition MOD_TOPLEVEL defined in symbol.h
      uses macro definition MOD_STATIC defined in symbol.h
      uses variable Wshadow defined in lib.c
      uses enumvalue SYM_FN defined in symbol.h
      uses function warning(struct position,const char *,...) defined in lib.c
      uses variable symbol::pos defined in struct.c
      uses function show_ident(const struct ident *) defined in token.h
      uses variable symbol::ident defined in struct.c
      uses function info(struct position,const char *,...) defined in lib.c
   function bind_symbol(struct symbol *,struct ident *,enum namespace) in line 597
      protection public
      37 lines of code
      3 parameters
      1 conditional paths
      uses variable sym defined in smatch_type.c
      uses variable symbol::bound defined in struct.c
      uses function sparse_error(struct position,const char *,...) defined in lib.c
      uses variable symbol::pos defined in struct.c
      uses variable ident::reserved defined in token.h
      uses enumvalue NS_TYPEDEF defined in symbol.h
      uses enumvalue NS_STRUCT defined in symbol.h
      uses enumvalue NS_LABEL defined in symbol.h
      uses enumvalue NS_SYMBOL defined in symbol.h
      uses function show_ident(const struct ident *) defined in token.h
      uses variable symbol::namespace defined in struct.c
      uses variable symbol::next_id defined in struct.c
      uses variable ident::symbols defined in token.h
      uses variable symbol::ident defined in struct.c
      uses function warning(struct position,const char *,...) defined in lib.c
      uses variable block_scope defined in scope.c
      uses macro definition MOD_ADDRESSABLE defined in symbol.h
      uses macro definition MOD_TOPLEVEL defined in symbol.h
      uses variable global_scope defined in scope.c
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::modifiers defined in struct.c
      uses macro definition MOD_STATIC defined in symbol.h
      uses variable file_scope defined in scope.c
      uses enumvalue NS_MACRO defined in symbol.h
      uses variable function_scope defined in scope.c
      uses function bind_scope(struct symbol *,struct scope *) defined in scope.c
   function create_symbol(int,const char *,int,int) in line 635
      protection public
      8 lines of code
      4 parameters
      1 conditional paths
      uses function built_in_token(int,const char *) defined in token.h
      uses variable name defined in smatch_type.c
      uses variable sym defined in smatch_type.c
      uses function alloc_symbol(struct position,int) defined in symbol.c
      uses variable token::pos defined in token.h
      uses function bind_symbol(struct symbol *,struct ident *,enum namespace) defined in symbol.c
      uses variable token::ident defined in token.h
   function evaluate_to_integer(struct expression *) in line 644
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable expression::ctype defined in expression.h
   function evaluate_expect(struct expression *) in line 650
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses variable expression::ctype defined in expression.h
   function arguments_choose(struct expression *) in line 657
      protection public
      22 lines of code
      1 parameters
      4 conditional paths
      uses variable expression::args defined in expression.h
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses function evaluate_expression(struct expression *) defined in evaluate.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses function sparse_error(struct position,const char *,...) defined in lib.c
      uses variable expression::pos defined in expression.h
   function evaluate_choose(struct expression *) in line 680
      protection public
      15 lines of code
      1 parameters
      1 conditional paths
      uses variable expression::args defined in expression.h
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses function get_expression_value(struct expression *) defined in expand.c
   function expand_expect(struct expression *,int) in line 696
      protection public
      8 lines of code
      2 parameters
      2 conditional paths
      uses variable expression::args defined in expression.h
   function expand_warning(struct expression *,int) in line 709
      protection public
      40 lines of code
      2 parameters
      7 conditional paths
      uses variable expression::args defined in expression.h
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses enumvalue EXPR_SYMBOL defined in expression.h
      uses variable sym defined in smatch_type.c
      uses variable symbol::initializer defined in struct.c
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_STRING defined in expression.h
      uses variable expression::string defined in expression.h
      uses function warning(struct position,const char *,...) defined in lib.c
      uses variable expression::pos defined in expression.h
      uses variable string::length defined in token.h
      uses variable string::data defined in token.h
      uses enumvalue EXPR_VALUE defined in expression.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses variable expression::value defined in expression.h
      uses variable expression::taint defined in expression.h
   function init_symbols(void) in line 828
      protection public
      22 lines of code
      1 parameters
      1 conditional paths
      uses function init_stream(const char *,int,const char **) defined in token.h
      uses variable includepath defined in pre-process.c
      uses variable ptr defined in sm_null_deref2.c
      uses function init_parser(int) defined in parse.c
      uses variable builtin_fn_type defined in symbol.c
      uses variable symbol::variadic defined in struct.c
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::attribute defined in struct.c
      uses variable null_attr defined in symbol.c
      uses variable eval_init_table defined in symbol.c
      uses variable sym defined in smatch_type.c
      uses function create_symbol(int,const char *,int,int) defined in symbol.c
      uses enumvalue SYM_NODE defined in symbol.h
      uses enumvalue NS_SYMBOL defined in symbol.h
      uses variable ctype::base_type defined in struct.c
      uses variable ctype::modifiers defined in struct.c
      uses variable symbol::op defined in struct.c
   function init_ctype(void) in line 908
      protection public
      20 lines of code
      1 parameters
      1 conditional paths
      uses variable ctype_declaration defined in symbol.c
      uses variable sym defined in smatch_type.c
      uses variable struct_union_info::bit_size defined in symbol.c
      uses variable symbol::type defined in struct.c
      uses variable ctype::type defined in struct.c
      uses variable symbol::bit_size defined in struct.c
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::alignment defined in struct.c
      uses variable ctype::base_type defined in struct.c
      uses variable ctype::modifiers defined in struct.c
      uses variable ctype::attribute defined in struct.c
      uses variable null_attr defined in symbol.c
   variable struct_union_info::align_size in line 89
      protection public
   variable struct_union_info::bit_size in line 88
      protection public
   variable struct_union_info::max_align in line 87
      protection public
   variable sym_init::base_type in line 781
      protection public
   variable sym_init::modifiers in line 782
      protection public
   variable sym_init::name in line 780
      protection public
   variable sym_init::op in line 783
      protection public
   variable ctype_declare::base_type in line 866
      protection public
   variable ctype_declare::bit_size in line 864
      protection public
   variable ctype_declare::maxalign in line 865
      protection public
   variable ctype_declare::modifiers in line 863
      protection public
   variable ctype_declare::ptr in line 861
      protection public
   variable ctype_declare::type in line 861
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/symbol.h
module symbol.h
   macro definition SYM_ATTR_WEAK in line 139
      protection public
   macro definition SYM_ATTR_NORMAL in line 140
      protection public
   macro definition SYM_ATTR_STRONG in line 141
      protection public
   macro definition MOD_AUTO in line 209
      protection public
   macro definition MOD_REGISTER in line 210
      protection public
   macro definition MOD_STATIC in line 211
      protection public
   macro definition MOD_EXTERN in line 212
      protection public
   macro definition MOD_CONST in line 214
      protection public
   macro definition MOD_VOLATILE in line 215
      protection public
   macro definition MOD_SIGNED in line 216
      protection public
   macro definition MOD_UNSIGNED in line 217
      protection public
   macro definition MOD_CHAR in line 219
      protection public
   macro definition MOD_SHORT in line 220
      protection public
   macro definition MOD_LONG in line 221
      protection public
   macro definition MOD_LONGLONG in line 222
      protection public
   macro definition MOD_LONGLONGLONG in line 223
      protection public
   macro definition MOD_PURE in line 224
      protection public
   macro definition MOD_TYPEDEF in line 226
      protection public
   macro definition MOD_TLS in line 228
      protection public
   macro definition MOD_INLINE in line 229
      protection public
   macro definition MOD_ADDRESSABLE in line 230
      protection public
   macro definition MOD_NOCAST in line 232
      protection public
   macro definition MOD_NODEREF in line 233
      protection public
   macro definition MOD_ACCESSED in line 234
      protection public
   macro definition MOD_TOPLEVEL in line 235
      protection public
   macro definition MOD_ASSIGNED in line 237
      protection public
   macro definition MOD_TYPE in line 238
      protection public
   macro definition MOD_SAFE in line 239
      protection public
   macro definition MOD_USERTYPE in line 241
      protection public
   macro definition MOD_NORETURN in line 242
      protection public
   macro definition MOD_EXPLICITLY_SIGNED in line 243
      protection public
   macro definition MOD_BITWISE in line 244
      protection public
   macro definition MOD_NONLOCAL in line 247
      protection public
   macro definition MOD_STORAGE in line 248
      protection public
   macro definition MOD_SIGNEDNESS in line 249
      protection public
   macro definition MOD_LONG_ALL in line 250
      protection public
   macro definition MOD_SPECIFIER in line 251
      protection public
   macro definition MOD_SIZE in line 252
      protection public
   macro definition MOD_IGNORE in line 253
      protection public
   macro definition MOD_PTRINHERIT in line 255
      protection public
   macro definition __IDENT in line 283
      protection public
   macro definition symbol_is_typename in line 287
      protection public
   macro definition is_restricted_type in line 455
      protection public
   macro definition is_fouled_type in line 456
      protection public
   macro definition is_bitfield_type in line 457
      protection public
   enumeration namespace in line 44
      protection public
   enumeration type in line 57
      protection public
   enumeration keyword in line 79
      protection public
   variable null_attr in line 137
      protection public
   variable current_fn in line 261
      protection public
   variable fp_type in line 261
      protection public
   variable null_ctype in line 261
      protection public
   variable zero_int in line 261
      protection public
   variable translation_unit_used_list in line 289
      protection public
   enumvalue NS_NONE in line 45
      protection public
   enumvalue NS_MACRO in line 46
      protection public
   enumvalue NS_TYPEDEF in line 47
      protection public
   enumvalue NS_STRUCT in line 48
      protection public
   enumvalue NS_LABEL in line 49
      protection public
   enumvalue NS_SYMBOL in line 50
      protection public
   enumvalue NS_ITERATOR in line 51
      protection public
   enumvalue NS_PREPROCESSOR in line 52
      protection public
   enumvalue NS_UNDEF in line 53
      protection public
   enumvalue NS_KEYWORD in line 54
      protection public
   enumvalue SYM_UNINITIALIZED in line 58
      protection public
   enumvalue SYM_PREPROCESSOR in line 59
      protection public
   enumvalue SYM_BASETYPE in line 60
      protection public
   enumvalue SYM_NODE in line 61
      protection public
   enumvalue SYM_PTR in line 62
      protection public
   enumvalue SYM_FN in line 63
      protection public
   enumvalue SYM_ARRAY in line 64
      protection public
   enumvalue SYM_STRUCT in line 65
      protection public
   enumvalue SYM_UNION in line 66
      protection public
   enumvalue SYM_ENUM in line 67
      protection public
   enumvalue SYM_TYPEDEF in line 68
      protection public
   enumvalue SYM_TYPEOF in line 69
      protection public
   enumvalue SYM_MEMBER in line 70
      protection public
   enumvalue SYM_BITFIELD in line 71
      protection public
   enumvalue SYM_LABEL in line 72
      protection public
   enumvalue SYM_RESTRICT in line 73
      protection public
   enumvalue SYM_FOULED in line 74
      protection public
   enumvalue SYM_KEYWORD in line 75
      protection public
   enumvalue SYM_BAD in line 76
      protection public
   enumvalue KW_SPECIFIER in line 80
      protection public
   enumvalue KW_MODIFIER in line 81
      protection public
   enumvalue KW_QUALIFIER in line 82
      protection public
   enumvalue KW_ATTRIBUTE in line 83
      protection public
   enumvalue KW_STATEMENT in line 84
      protection public
   enumvalue KW_ASM in line 85
      protection public
   enumvalue KW_MODE in line 86
      protection public
   enumvalue KW_SHORT in line 87
      protection public
   enumvalue KW_LONG in line 88
      protection public
   enumvalue KW_EXACT in line 89
      protection public
   function alloc_context(void) in line 97
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function expand_safe_p(struct expression *,int) in line 136
      protection public
      7 lines of code
      2 parameters
      1 conditional paths
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_VALUE defined in expression.h
      uses variable expression::value defined in expression.h
      uses macro definition SIDE_EFFECTS defined in expand.c
      uses variable expression::taint defined in expression.h
   function expand_constant_p(struct expression *,int) in line 137
      protection public
      7 lines of code
      2 parameters
      1 conditional paths
      uses variable expression::type defined in expression.h
      uses enumvalue EXPR_VALUE defined in expression.h
      uses variable expression::value defined in expression.h
      uses variable expression::taint defined in expression.h
   function access_symbol(struct symbol *) in line 291
      protection public
      9 lines of code
      1 parameters
      3 conditional paths
      uses variable sym defined in smatch_type.c
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::modifiers defined in struct.c
      uses macro definition MOD_INLINE defined in symbol.h
      uses macro definition MOD_ACCESSED defined in symbol.h
      uses function add_symbol(struct symbol_list **,struct symbol *) defined in symbol.h
      uses variable translation_unit_used_list defined in symbol.c
   function type_difference(struct ctype *,struct ctype *,unsigned long,unsigned long) in line 293
      protection public
      158 lines of code
      4 parameters
      37 conditional paths
      uses variable ctype::attribute defined in struct.c
      uses variable attribute::as defined in symbol.h
      uses variable ctype::base_type defined in struct.c
      uses variable ctype::modifiers defined in struct.c
      uses variable symbol::ctype defined in struct.c
      uses variable symbol::type defined in struct.c
      uses enumvalue SYM_PTR defined in symbol.h
      uses enumvalue SYM_NODE defined in symbol.h
      uses enumvalue SYM_ENUM defined in symbol.h
      uses function sparse_error(struct position,const char *,...) defined in lib.c
      uses variable symbol::pos defined in struct.c
      uses enumvalue SYM_RESTRICT defined in symbol.h
      uses enumvalue SYM_UNION defined in symbol.h
      uses enumvalue SYM_STRUCT defined in symbol.h
      uses variable symbol::ident defined in struct.c
      uses macro definition NULL defined in sm_implied3.c
      uses enumvalue SYM_ARRAY defined in symbol.h
      uses macro definition MOD_IGNORE defined in symbol.h
      uses macro definition MOD_SPECIFIER defined in symbol.h
      uses function examine_pointer_target(struct symbol *) defined in symbol.c
      uses enumvalue SYM_FN defined in symbol.h
      uses macro definition MOD_SIGNEDNESS defined in symbol.h
      uses variable symbol::variadic defined in struct.c
      uses macro definition PREPARE_PTR_LIST defined in ptrlist.h
      uses variable symbol::arguments defined in struct.c
      uses function type_difference(struct ctype *,struct ctype *,unsigned long,unsigned long) defined in evaluate.c
      uses macro definition MOD_IGN defined in evaluate.c
      uses function sprintf(char *,char *,char *) defined in sm_overflow6.c
      uses macro definition NEXT_PTR_LIST defined in ptrlist.h
      uses macro definition FINISH_PTR_LIST defined in ptrlist.h
      uses enumvalue SYM_BASETYPE defined in symbol.h
      uses macro definition MOD_SIZE defined in symbol.h
   function lookup_symbol(struct ident *,enum namespace) in line 296
      protection public
      12 lines of code
      2 parameters
      3 conditional paths
      uses variable sym defined in smatch_type.c
      uses variable ident::symbols defined in token.h
      uses variable symbol::next_id defined in struct.c
      uses variable symbol::namespace defined in struct.c
      uses variable symbol::used defined in struct.c
      uses macro definition NULL defined in sm_implied3.c
   function create_symbol(int,const char *,int,int) in line 297
      protection public
      8 lines of code
      4 parameters
      1 conditional paths
      uses function built_in_token(int,const char *) defined in token.h
      uses variable name defined in smatch_type.c
      uses variable sym defined in smatch_type.c
      uses function alloc_symbol(struct position,int) defined in symbol.c
      uses variable token::pos defined in token.h
      uses function bind_symbol(struct symbol *,struct ident *,enum namespace) defined in symbol.c
      uses variable token::ident defined in token.h
   function init_symbols(void) in line 298
      protection public
      22 lines of code
      1 parameters
      2 conditional paths
      uses function init_stream(const char *,int,const char **) defined in token.h
      uses variable includepath defined in pre-process.c
      uses variable ptr defined in sm_null_deref2.c
      uses function init_parser(int) defined in parse.c
      uses variable symbol::variadic defined in struct.c
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::attribute defined in struct.c
      uses variable null_attr defined in symbol.c
      uses variable sym defined in smatch_type.c
      uses function create_symbol(int,const char *,int,int) defined in symbol.c
      uses enumvalue SYM_NODE defined in symbol.h
      uses enumvalue NS_SYMBOL defined in symbol.h
      uses variable ctype::base_type defined in struct.c
      uses variable ctype::modifiers defined in struct.c
      uses variable symbol::op defined in struct.c
   function init_ctype(void) in line 299
      protection public
      20 lines of code
      1 parameters
      3 conditional paths
      uses variable sym defined in smatch_type.c
      uses variable struct_union_info::bit_size defined in symbol.c
      uses variable symbol::type defined in struct.c
      uses variable ctype::type defined in struct.c
      uses variable symbol::bit_size defined in struct.c
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::alignment defined in struct.c
      uses variable ctype::base_type defined in struct.c
      uses variable ctype::modifiers defined in struct.c
      uses variable ctype::attribute defined in struct.c
      uses variable null_attr defined in symbol.c
   function alloc_symbol(struct position,int) in line 300
      protection public
      9 lines of code
      2 parameters
      1 conditional paths
      uses variable sym defined in smatch_type.c
      uses variable symbol::type defined in struct.c
      uses variable symbol::pos defined in struct.c
      uses variable symbol::endpos defined in struct.c
      uses variable position::type defined in lib.h
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::attribute defined in struct.c
      uses variable null_attr defined in symbol.c
   function show_type(struct symbol *) in line 301
      protection public
      10 lines of code
      1 parameters
      1 conditional paths
      uses variable name defined in smatch_type.c
      uses variable sym defined in smatch_type.c
      uses function printf(char *,...) defined in test-be.c
   function modifier_string(unsigned long) in line 302
      protection public
      55 lines of code
      1 parameters
      4 conditional paths
      uses variable name defined in smatch_type.c
      uses macro definition MOD_AUTO defined in symbol.h
      uses macro definition MOD_REGISTER defined in symbol.h
      uses macro definition MOD_STATIC defined in symbol.h
      uses macro definition MOD_EXTERN defined in symbol.h
      uses macro definition MOD_CONST defined in symbol.h
      uses macro definition MOD_VOLATILE defined in symbol.h
      uses macro definition MOD_SIGNED defined in symbol.h
      uses macro definition MOD_UNSIGNED defined in symbol.h
      uses macro definition MOD_CHAR defined in symbol.h
      uses macro definition MOD_SHORT defined in symbol.h
      uses macro definition MOD_LONG defined in symbol.h
      uses macro definition MOD_LONGLONG defined in symbol.h
      uses macro definition MOD_LONGLONGLONG defined in symbol.h
      uses macro definition MOD_TYPEDEF defined in symbol.h
      uses macro definition MOD_TLS defined in symbol.h
      uses macro definition MOD_INLINE defined in symbol.h
      uses macro definition MOD_ADDRESSABLE defined in symbol.h
      uses macro definition MOD_NOCAST defined in symbol.h
      uses macro definition MOD_NODEREF defined in symbol.h
      uses macro definition MOD_ACCESSED defined in symbol.h
      uses macro definition MOD_TOPLEVEL defined in symbol.h
      uses macro definition MOD_ASSIGNED defined in symbol.h
      uses macro definition MOD_TYPE defined in symbol.h
      uses macro definition MOD_SAFE defined in symbol.h
      uses macro definition MOD_USERTYPE defined in symbol.h
      uses macro definition MOD_NORETURN defined in symbol.h
      uses macro definition MOD_EXPLICITLY_SIGNED defined in symbol.h
      uses macro definition MOD_BITWISE defined in symbol.h
      uses macro definition MOD_PURE defined in symbol.h
      uses macro definition ARRAY_SIZE defined in lib.h
      uses variable c defined in sm_array_overflow.c
   function show_symbol(struct symbol *) in line 303
      protection public
      55 lines of code
      1 parameters
      10 conditional paths
      uses variable sym defined in smatch_type.c
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::alignment defined in struct.c
      uses function printf(char *,...) defined in test-be.c
      uses function show_type(struct symbol *) defined in show-parse.c
      uses variable ctype::base_type defined in struct.c
      uses variable member defined in smdb.py
      uses enumvalue SYM_STRUCT defined in symbol.h
      uses enumvalue SYM_UNION defined in symbol.h
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses enumvalue SYM_FN defined in symbol.h
      uses function show_statement(struct statement *) defined in show-parse.c
      uses variable statement::ret defined in parse.h
      uses variable symbol::bit_size defined in struct.c
      uses variable symbol::initializer defined in struct.c
      uses function show_expression(struct expression *) defined in show-parse.c
   function show_symbol_expr_init(struct symbol *) in line 304
      protection public
      8 lines of code
      1 parameters
      2 conditional paths
      uses variable sym defined in smatch_type.c
      uses variable symbol::initializer defined in struct.c
      uses function show_expression(struct expression *) defined in show-parse.c
   function show_type_list(struct symbol *) in line 305
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function show_symbol_list(struct symbol_list *,const char *) in line 306
      protection public
      11 lines of code
      2 parameters
      1 conditional paths
      uses variable sym defined in smatch_type.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses function show_symbol(struct symbol *) defined in show-parse.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function add_symbol(struct symbol_list **,struct symbol *) in line 307
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function bind_symbol(struct symbol *,struct ident *,enum namespace) in line 308
      protection public
      37 lines of code
      3 parameters
      8 conditional paths
      uses variable sym defined in smatch_type.c
      uses variable symbol::bound defined in struct.c
      uses function sparse_error(struct position,const char *,...) defined in lib.c
      uses variable symbol::pos defined in struct.c
      uses variable ident::reserved defined in token.h
      uses enumvalue NS_TYPEDEF defined in symbol.h
      uses enumvalue NS_STRUCT defined in symbol.h
      uses enumvalue NS_LABEL defined in symbol.h
      uses enumvalue NS_SYMBOL defined in symbol.h
      uses function show_ident(const struct ident *) defined in token.h
      uses variable symbol::namespace defined in struct.c
      uses variable symbol::next_id defined in struct.c
      uses variable ident::symbols defined in token.h
      uses variable symbol::ident defined in struct.c
      uses function warning(struct position,const char *,...) defined in lib.c
      uses variable block_scope defined in scope.c
      uses macro definition MOD_ADDRESSABLE defined in symbol.h
      uses macro definition MOD_TOPLEVEL defined in symbol.h
      uses variable global_scope defined in scope.c
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::modifiers defined in struct.c
      uses macro definition MOD_STATIC defined in symbol.h
      uses function is_extern_inline(struct symbol *) defined in symbol.h
      uses variable file_scope defined in scope.c
      uses enumvalue NS_MACRO defined in symbol.h
      uses variable function_scope defined in scope.c
      uses function bind_scope(struct symbol *,struct scope *) defined in scope.c
   function examine_symbol_type(struct symbol *) in line 310
      protection public
      61 lines of code
      1 parameters
      20 conditional paths
      uses variable sym defined in smatch_type.c
      uses variable symbol::examined defined in struct.c
      uses variable symbol::type defined in struct.c
      uses enumvalue SYM_FN defined in symbol.h
      uses enumvalue SYM_NODE defined in symbol.h
      uses enumvalue SYM_ARRAY defined in symbol.h
      uses enumvalue SYM_STRUCT defined in symbol.h
      uses enumvalue SYM_UNION defined in symbol.h
      uses enumvalue SYM_PTR defined in symbol.h
      uses enumvalue SYM_ENUM defined in symbol.h
      uses enumvalue SYM_BITFIELD defined in symbol.h
      uses enumvalue SYM_BASETYPE defined in symbol.h
      uses enumvalue SYM_TYPEOF defined in symbol.h
      uses function evaluate_expression(struct expression *) defined in evaluate.c
      uses variable symbol::initializer defined in struct.c
      uses macro definition is_bitfield_type defined in symbol.h
      uses function warning(struct position,const char *,...) defined in lib.c
      uses variable symbol::pos defined in struct.c
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::base_type defined in struct.c
      uses variable ctype::modifiers defined in struct.c
      uses enumvalue SYM_PREPROCESSOR defined in symbol.h
      uses function sparse_error(struct position,const char *,...) defined in lib.c
      uses function show_ident(const struct ident *) defined in token.h
      uses variable symbol::ident defined in struct.c
      uses macro definition NULL defined in sm_implied3.c
      uses enumvalue SYM_UNINITIALIZED defined in symbol.h
      uses enumvalue SYM_RESTRICT defined in symbol.h
      uses enumvalue SYM_FOULED defined in symbol.h
   function examine_pointer_target(struct symbol *) in line 311
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable sym defined in smatch_type.c
   function examine_simple_symbol_type(struct symbol *) in line 312
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function show_typename(struct symbol *) in line 313
      protection public
      10 lines of code
      1 parameters
      1 conditional paths
      uses variable name defined in smatch_type.c
      uses variable sym defined in smatch_type.c
   function builtin_typename(struct symbol *) in line 314
      protection public
      9 lines of code
      1 parameters
      3 conditional paths
      uses macro definition ARRAY_SIZE defined in lib.h
      uses variable sym defined in smatch_type.c
      uses variable ctype_name::name defined in show-parse.c
      uses macro definition NULL defined in sm_implied3.c
   function builtin_ctypename(struct ctype *) in line 315
      protection public
      9 lines of code
      1 parameters
      3 conditional paths
      uses macro definition ARRAY_SIZE defined in lib.h
      uses variable sym defined in smatch_type.c
      uses variable symbol::ctype defined in struct.c
      uses variable ctype_name::name defined in show-parse.c
      uses macro definition NULL defined in sm_implied3.c
   function get_type_name(enum type type) in line 316
      protection public
      28 lines of code
      1 parameters
      2 conditional paths
      uses enumvalue SYM_UNINITIALIZED defined in symbol.h
      uses enumvalue SYM_PREPROCESSOR defined in symbol.h
      uses enumvalue SYM_BASETYPE defined in symbol.h
      uses enumvalue SYM_NODE defined in symbol.h
      uses enumvalue SYM_PTR defined in symbol.h
      uses enumvalue SYM_FN defined in symbol.h
      uses enumvalue SYM_ARRAY defined in symbol.h
      uses enumvalue SYM_STRUCT defined in symbol.h
      uses enumvalue SYM_UNION defined in symbol.h
      uses enumvalue SYM_ENUM defined in symbol.h
      uses enumvalue SYM_TYPEDEF defined in symbol.h
      uses enumvalue SYM_TYPEOF defined in symbol.h
      uses enumvalue SYM_MEMBER defined in symbol.h
      uses enumvalue SYM_BITFIELD defined in symbol.h
      uses enumvalue SYM_LABEL defined in symbol.h
      uses enumvalue SYM_RESTRICT defined in symbol.h
      uses enumvalue SYM_FOULED defined in symbol.h
      uses enumvalue SYM_KEYWORD defined in symbol.h
      uses enumvalue SYM_BAD defined in symbol.h
      uses macro definition NULL defined in sm_implied3.c
   function debug_symbol(struct symbol *) in line 318
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable sym defined in smatch_type.c
   function merge_type(struct symbol *,struct symbol *) in line 319
      protection public
      8 lines of code
      2 parameters
      2 conditional paths
      uses variable sym defined in smatch_type.c
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::modifiers defined in struct.c
      uses macro definition MOD_STORAGE defined in symbol.h
      uses function merge_attr(struct ctype *,struct ctype *) defined in symbol.h
      uses variable ctype::base_type defined in struct.c
      uses variable symbol::type defined in struct.c
      uses enumvalue SYM_NODE defined in symbol.h
      uses function merge_type(struct symbol *,struct symbol *) defined in symbol.c
   function check_declaration(struct symbol *) in line 320
      protection public
      29 lines of code
      1 parameters
      8 conditional paths
      uses variable sym defined in smatch_type.c
      uses variable symbol::next_id defined in struct.c
      uses macro definition NULL defined in sm_implied3.c
      uses variable symbol::namespace defined in struct.c
      uses variable symbol::scope defined in struct.c
      uses variable symbol::same_symbol defined in struct.c
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::modifiers defined in struct.c
      uses macro definition MOD_EXTERN defined in symbol.h
      uses macro definition MOD_TOPLEVEL defined in symbol.h
      uses macro definition MOD_STATIC defined in symbol.h
      uses variable Wshadow defined in lib.c
      uses function get_sym_type(struct symbol *) defined in symbol.h
      uses enumvalue SYM_FN defined in symbol.h
      uses function warning(struct position,const char *,...) defined in lib.c
      uses variable symbol::pos defined in struct.c
      uses function show_ident(const struct ident *) defined in token.h
      uses variable symbol::ident defined in struct.c
      uses function info(struct position,const char *,...) defined in lib.c
   function get_base_type(const struct symbol *) in line 322
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function examine_symbol_type(struct symbol *) defined in symbol.h
      uses variable sym defined in smatch_type.c
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::base_type defined in struct.c
   function is_int_type(const struct symbol *) in line 327
      protection public
      9 lines of code
      1 parameters
      3 conditional paths
      uses enumvalue SYM_NODE defined in symbol.h
      uses enumvalue SYM_ENUM defined in symbol.h
      uses enumvalue SYM_BITFIELD defined in symbol.h
   function is_enum_type(const struct symbol *) in line 337
      protection public
      6 lines of code
      1 parameters
      2 conditional paths
      uses enumvalue SYM_NODE defined in symbol.h
      uses enumvalue SYM_ENUM defined in symbol.h
   function is_type_type(struct symbol *) in line 344
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses macro definition MOD_TYPE defined in symbol.h
   function is_ptr_type(struct symbol *) in line 349
      protection public
      6 lines of code
      1 parameters
      2 conditional paths
      uses enumvalue SYM_NODE defined in symbol.h
      uses enumvalue SYM_PTR defined in symbol.h
      uses enumvalue SYM_ARRAY defined in symbol.h
      uses enumvalue SYM_FN defined in symbol.h
   function is_float_type(struct symbol *) in line 356
      protection public
      6 lines of code
      1 parameters
      2 conditional paths
      uses enumvalue SYM_NODE defined in symbol.h
      uses variable fp_type defined in symbol.h
   function is_byte_type(struct symbol *) in line 363
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable bits_in_char defined in target.c
      uses enumvalue SYM_BITFIELD defined in symbol.h
   function is_void_type(struct symbol *) in line 368
      protection public
      6 lines of code
      1 parameters
      2 conditional paths
      uses enumvalue SYM_NODE defined in symbol.h
   function is_bool_type(struct symbol *) in line 375
      protection public
      6 lines of code
      1 parameters
      2 conditional paths
      uses enumvalue SYM_NODE defined in symbol.h
   function is_function(struct symbol *) in line 382
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses enumvalue SYM_FN defined in symbol.h
   function is_extern_inline(struct symbol *) in line 387
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses variable sym defined in smatch_type.c
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::modifiers defined in struct.c
      uses macro definition MOD_EXTERN defined in symbol.h
      uses macro definition MOD_INLINE defined in symbol.h
      uses function is_function(struct symbol *) defined in symbol.h
      uses variable ctype::base_type defined in struct.c
   function get_sym_type(struct symbol *) in line 394
      protection public
      8 lines of code
      1 parameters
      3 conditional paths
      uses enumvalue SYM_NODE defined in symbol.h
      uses enumvalue SYM_ENUM defined in symbol.h
   function lookup_keyword(struct ident *,enum namespace) in line 403
      protection public
      6 lines of code
      2 parameters
      2 conditional paths
      uses variable ident::keyword defined in token.h
      uses macro definition NULL defined in sm_implied3.c
      uses function lookup_symbol(struct ident *,enum namespace) defined in symbol.h
   function duplicate_attribute(struct attribute *) in line 410
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses variable symbol::attr defined in struct.c
   function attr_set_as(struct ctype *,unsigned int) in line 417
      protection public
      7 lines of code
      2 parameters
      2 conditional paths
      uses variable ctype::attribute defined in struct.c
      uses variable attribute::as defined in symbol.h
      uses function duplicate_attribute(struct attribute *) defined in symbol.h
   function attr_add_context(struct ctype *,struct context *) in line 425
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses variable ctype::attribute defined in struct.c
      uses function duplicate_attribute(struct attribute *) defined in symbol.h
      uses macro definition add_ptr_list defined in ptrlist.h
      uses variable attribute::contexts defined in symbol.h
   function merge_attr(struct ctype *,struct ctype *) in line 431
      protection public
      16 lines of code
      2 parameters
      3 conditional paths
      uses variable symbol::attr defined in struct.c
      uses variable src defined in sm_user_data3.c
      uses variable null_attr defined in symbol.h
      uses variable ctype::attribute defined in struct.c
      uses function duplicate_attribute(struct attribute *) defined in symbol.h
      uses function concat_ptr_list(struct ptr_list *,struct ptr_list **) defined in ptrlist.c
   function set_attr_is_packed(struct ctype *) in line 448
      protection public
      6 lines of code
      1 parameters
      2 conditional paths
      uses variable ctype::attribute defined in struct.c
      uses variable null_attr defined in symbol.h
      uses variable attribute::is_packed defined in symbol.h
   function create_fouled(struct symbol *) in line 460
      protection public
      12 lines of code
      1 parameters
      2 conditional paths
      uses variable bits_in_int defined in target.c
      uses function alloc_symbol(struct position,int) defined in symbol.c
      uses enumvalue SYM_FOULED defined in symbol.h
      uses function add_symbol(struct symbol_list **,struct symbol *) defined in symbol.h
   function befoul(struct symbol *) in line 461
      protection public
      19 lines of code
      1 parameters
      5 conditional paths
      uses enumvalue SYM_NODE defined in symbol.h
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::base_type defined in struct.c
      uses macro definition PREPARE_PTR_LIST defined in ptrlist.h
      uses macro definition NEXT_PTR_LIST defined in ptrlist.h
      uses macro definition FINISH_PTR_LIST defined in ptrlist.h
      uses macro definition NULL defined in sm_implied3.c
   variable context::context in line 93
      protection public
   variable context::in in line 94
      protection public
   variable context::out in line 94
      protection public
   variable attribute::as in line 101
      protection public
   variable attribute::contexts in line 100
      protection public
   variable attribute::is_packed in line 102
      protection public
   variable ctype::alignment in line 108
      protection public
   variable ctype::attribute in line 109
      protection public
   variable ctype::base_type in line 110
      protection public
   variable ctype::modifiers in line 107
      protection public
   variable ctype::type in line 2
      protection public
   variable decl_state::ctype in line 110
      protection public
   variable decl_state::ident in line 115
      protection public
   variable decl_state::is_inline in line 117
      protection public
   variable decl_state::is_tls in line 117
      protection public
   variable decl_state::mode in line 116
      protection public
   variable decl_state::prefer_abstract in line 117
      protection public
   variable decl_state::storage_class in line 117
      protection public
   variable symbol_op::args in line 124
      protection public
   variable symbol_op::attribute in line 124
      protection public
   variable symbol_op::class in line 133
      protection public
   variable symbol_op::declarator in line 124
      protection public
   variable symbol_op::evaluate in line 122
      protection public
   variable symbol_op::expand in line 123
      protection public
   variable symbol_op::set in line 133
      protection public
   variable symbol_op::statement in line 124
      protection public
   variable symbol_op::test in line 133
      protection public
   variable symbol_op::to_mode in line 124
      protection public
   variable symbol_op::toplevel in line 124
      protection public
   variable symbol_op::type in line 117
      protection public
   variable symbol::@146 in line 156
      protection public
   variable symbol::@148 in line 196
      protection public
   variable symbol::@150 in line 204
      protection public
   variable symbol::arg_count in line 174
      protection public
   variable symbol::arglist in line 163
      protection public
   variable symbol::arguments in line 186
      protection public
   variable symbol::array_size in line 184
      protection public
   variable symbol::attr in line 146
      protection public
   variable symbol::aux in line 199
      protection public
   variable symbol::bb_target in line 198
      protection public
   variable symbol::bit_offset in line 173
      protection public
   variable symbol::bit_size in line 172
      protection public
   variable symbol::bound in line 146
      protection public
   variable symbol::ctype in line 184
      protection public
   variable symbol::definition in line 194
      protection public
   variable symbol::designated_init in line 181
      protection public
   variable symbol::endpos in line 146
      protection public
   variable symbol::enum_member in line 146
      protection public
   variable symbol::ep in line 192
      protection public
   variable symbol::evaluated in line 179
      protection public
   variable symbol::examined in line 177
      protection public
   variable symbol::expanding in line 178
      protection public
   variable symbol::expansion in line 162
      protection public
   variable symbol::forced_arg in line 182
      protection public
   variable symbol::handler in line 167
      protection public
   variable symbol::ident in line 149
      protection public
   variable symbol::initialized in line 176
      protection public
   variable symbol::initializer in line 191
      protection public
   variable symbol::inline_stmt in line 189
      protection public
   variable symbol::inline_symbol_list in line 190
      protection public
   variable symbol::kind in line 201
      protection public
   variable symbol::name in line 7
      protection public
   variable symbol::namespace in line 133
      protection public
   variable symbol::next_id in line 150
      protection public
   variable symbol::next_subobject in line 155
      protection public
   variable symbol::normal in line 168
      protection public
   variable symbol::offset in line 171
      protection public
   variable symbol::op in line 158
      protection public
   variable symbol::p in line 6
      protection public
   variable symbol::pos in line 146
      protection public
   variable symbol::pseudo in line 205
      protection public
   variable symbol::replace in line 151
      protection public
   variable symbol::same_symbol in line 154
      protection public
   variable symbol::scope in line 152
      protection public
   variable symbol::stmt in line 187
      protection public
   variable symbol::string in line 180
      protection public
   variable symbol::symbol_list in line 188
      protection public
   variable symbol::transparent_union in line 183
      protection public
   variable symbol::type in line 133
      protection public
   variable symbol::used in line 146
      protection public
   variable symbol::used_in in line 164
      protection public
   variable symbol::value in line 193
      protection public
   variable symbol::variadic in line 175
      protection public
   variable symbol::visited in line 202
      protection public
   variable symbol::@145::next_subobject in line 155
      protection public
   variable symbol::@145::same_symbol in line 154
      protection public
   variable symbol::@147::@152 in line 165
      protection public
   variable symbol::@147::@154 in line 169
      protection public
   variable symbol::@147::@156 in line 195
      protection public
   variable symbol::@147::@151::arglist in line 163
      protection public
   variable symbol::@147::@151::expansion in line 162
      protection public
   variable symbol::@147::@151::used_in in line 164
      protection public
   variable symbol::@147::@153::handler in line 167
      protection public
   variable symbol::@147::@153::normal in line 168
      protection public
   variable symbol::@147::@155::arg_count in line 174
      protection public
   variable symbol::@147::@155::arguments in line 186
      protection public
   variable symbol::@147::@155::array_size in line 184
      protection public
   variable symbol::@147::@155::bit_offset in line 173
      protection public
   variable symbol::@147::@155::bit_size in line 172
      protection public
   variable symbol::@147::@155::ctype in line 184
      protection public
   variable symbol::@147::@155::definition in line 194
      protection public
   variable symbol::@147::@155::designated_init in line 181
      protection public
   variable symbol::@147::@155::ep in line 192
      protection public
   variable symbol::@147::@155::evaluated in line 179
      protection public
   variable symbol::@147::@155::examined in line 177
      protection public
   variable symbol::@147::@155::expanding in line 178
      protection public
   variable symbol::@147::@155::forced_arg in line 182
      protection public
   variable symbol::@147::@155::initialized in line 176
      protection public
   variable symbol::@147::@155::initializer in line 191
      protection public
   variable symbol::@147::@155::inline_stmt in line 189
      protection public
   variable symbol::@147::@155::inline_symbol_list in line 190
      protection public
   variable symbol::@147::@155::offset in line 171
      protection public
   variable symbol::@147::@155::stmt in line 187
      protection public
   variable symbol::@147::@155::string in line 180
      protection public
   variable symbol::@147::@155::symbol_list in line 188
      protection public
   variable symbol::@147::@155::transparent_union in line 183
      protection public
   variable symbol::@147::@155::value in line 193
      protection public
   variable symbol::@147::@155::variadic in line 175
      protection public
   variable symbol::@149::@158 in line 203
      protection public
   variable symbol::@149::aux in line 199
      protection public
   variable symbol::@149::bb_target in line 198
      protection public
   variable symbol::@149::@157::kind in line 201
      protection public
   variable symbol::@149::@157::visited in line 202
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/target.c
module target.c
   variable size_t_ctype in line 6
      protection public
   variable ssize_t_ctype in line 7
      protection public
   variable max_alignment in line 12
      protection public
   variable bits_in_bool in line 17
      protection public
   variable bits_in_char in line 18
      protection public
   variable bits_in_short in line 19
      protection public
   variable bits_in_int in line 20
      protection public
   variable bits_in_long in line 21
      protection public
   variable bits_in_longlong in line 22
      protection public
   variable bits_in_longlonglong in line 23
      protection public
   variable max_int_alignment in line 25
      protection public
   variable bits_in_float in line 30
      protection public
   variable bits_in_double in line 31
      protection public
   variable bits_in_longdouble in line 32
      protection public
   variable max_fp_alignment in line 34
      protection public
   variable bits_in_pointer in line 39
      protection public
   variable pointer_alignment in line 40
      protection public
   variable bits_in_enum in line 45
      protection public
   variable enum_alignment in line 46
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/target.h
module target.h
   variable size_t_ctype in line 4
      protection public
   variable ssize_t_ctype in line 5
      protection public
   variable max_alignment in line 10
      protection public
   variable bits_in_bool in line 15
      protection public
   variable bits_in_char in line 16
      protection public
   variable bits_in_short in line 17
      protection public
   variable bits_in_int in line 18
      protection public
   variable bits_in_long in line 19
      protection public
   variable bits_in_longlong in line 20
      protection public
   variable bits_in_longlonglong in line 21
      protection public
   variable max_int_alignment in line 23
      protection public
   variable bits_in_float in line 28
      protection public
   variable bits_in_double in line 29
      protection public
   variable bits_in_longdouble in line 30
      protection public
   variable max_fp_alignment in line 32
      protection public
   variable bits_in_pointer in line 37
      protection public
   variable pointer_alignment in line 38
      protection public
   variable bits_in_enum in line 43
      protection public
   variable enum_alignment in line 44
      protection public
   function bits_to_bytes(int) in line 50
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable bits_in_char defined in target.h
   function bytes_to_bits(int) in line 55
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable bits_in_char defined in target.h
   function array_element_offset(unsigned long,int) in line 60
      protection public
      7 lines of code
      2 parameters
      2 conditional paths
      uses variable bits_in_char defined in target.h
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/test-dissect.c
module test-dissect.c
   macro definition U in line 23
      protection public
   variable dotc_stream in line 3
      protection public
   function storage(struct symbol *) in line 5
      protection public
      10 lines of code
      1 parameters
      2 conditional paths
      uses variable sym defined in smatch_type.c
      uses variable symbol::type defined in struct.c
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::modifiers defined in struct.c
      uses macro definition MOD_INLINE defined in symbol.h
      uses enumvalue SYM_STRUCT defined in symbol.h
      uses enumvalue SYM_UNION defined in symbol.h
      uses variable symbol::pos defined in struct.c
      uses variable position::stream defined in lib.h
      uses variable dotc_stream defined in test-dissect.c
      uses macro definition MOD_STATIC defined in symbol.h
      uses macro definition MOD_NONLOCAL defined in symbol.h
   function show_mode(unsigned) in line 16
      protection public
      15 lines of code
      1 parameters
      2 conditional paths
      uses variable str defined in sm_overflow6.c
      uses macro definition U defined in test-dissect.c
      uses macro definition U_R_AOF defined in dissect.h
      uses macro definition U_R_VAL defined in dissect.h
      uses macro definition U_R_PTR defined in dissect.h
   function print_usage(struct position *,struct symbol *,unsigned) in line 32
      protection public
      12 lines of code
      3 parameters
      2 conditional paths
      uses variable symbol::pos defined in struct.c
      uses variable position::stream defined in lib.h
      uses function printf(char *,...) defined in test-be.c
      uses function stream_name(int) defined in token.h
      uses variable position::line defined in lib.h
      uses variable position::pos defined in lib.h
      uses variable sym defined in smatch_type.c
      uses function show_mode(unsigned) defined in test-dissect.c
   function r_symbol(unsigned,struct position *,struct symbol *) in line 45
      protection public
      11 lines of code
      3 parameters
      2 conditional paths
      uses function print_usage(struct position *,struct symbol *,unsigned) defined in test-dissect.c
      uses variable symbol::pos defined in struct.c
      uses variable sym defined in smatch_type.c
      uses variable symbol::ident defined in struct.c
      uses macro definition MK_IDENT defined in dissect.h
      uses function printf(char *,...) defined in test-be.c
      uses variable ident::len defined in token.h
      uses variable ident::name defined in token.h
      uses function show_typename(struct symbol *) defined in show-parse.c
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::base_type defined in struct.c
   function r_member(unsigned,struct position *,struct symbol *,struct symbol *) in line 57
      protection public
      16 lines of code
      4 parameters
      1 conditional paths
      uses function print_usage(struct position *,struct symbol *,unsigned) defined in test-dissect.c
      uses variable sym defined in smatch_type.c
      uses macro definition MK_IDENT defined in dissect.h
      uses variable symbol::ident defined in struct.c
      uses function printf(char *,...) defined in test-be.c
      uses variable ident::len defined in token.h
      uses variable ident::name defined in token.h
      uses function show_typename(struct symbol *) defined in show-parse.c
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::base_type defined in struct.c
   function r_symdef(struct symbol *) in line 74
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function r_symbol(unsigned,struct position *,struct symbol *) defined in test-dissect.c
      uses variable sym defined in smatch_type.c
      uses variable symbol::pos defined in struct.c
   function main(int,char **) in line 79
      protection public
      19 lines of code
      2 parameters
      1 conditional paths
      uses variable reporter::r_symdef defined in dissect.h
      uses function r_symdef(struct symbol *) defined in test-dissect.c
      uses function r_symbol(unsigned,struct position *,struct symbol *) defined in test-dissect.c
      uses function r_member(unsigned,struct position *,struct symbol *,struct symbol *) defined in test-dissect.c
      uses macro definition NULL defined in sm_implied3.c
      uses function sparse_initialize(int,char **,struct string_list **) defined in lib.c
      uses macro definition FOR_EACH_PTR_NOTAG defined in ptrlist.h
      uses variable dotc_stream defined in test-dissect.c
      uses variable input_stream_nr defined in token.h
      uses function dissect(struct symbol_list *,struct reporter *) defined in dissect.c
      uses function __sparse(char *) defined in lib.c
      uses macro definition END_FOR_EACH_PTR_NOTAG defined in ptrlist.h
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/test-inspect.c
module test-inspect.c
   function expand_symbols(struct symbol_list *) in line 19
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses variable sym defined in smatch_type.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses function expand_symbol(struct symbol *) defined in expand.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function main(int,char **) in line 27
      protection public
      16 lines of code
      2 parameters
      1 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses function expand_symbols(struct symbol_list *) defined in test-inspect.c
      uses function sparse_initialize(int,char **,struct string_list **) defined in lib.c
      uses macro definition FOR_EACH_PTR_NOTAG defined in ptrlist.h
      uses function sparse(char *) defined in lib.c
      uses macro definition END_FOR_EACH_PTR_NOTAG defined in ptrlist.h
      uses function treeview_main(struct symbol_list *) defined in ast-view.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/test-lexing.c
module test-lexing.c
   function main(int,char **) in line 37
      protection public
      13 lines of code
      2 parameters
      1 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses variable preprocess_only defined in lib.c
      uses function sparse_initialize(int,char **,struct string_list **) defined in lib.c
      uses macro definition FOR_EACH_PTR_NOTAG defined in ptrlist.h
      uses function sparse(char *) defined in lib.c
      uses macro definition END_FOR_EACH_PTR_NOTAG defined in ptrlist.h
      uses function show_identifier_stats(void) defined in token.h
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/test-linearize.c
module test-linearize.c
   function clean_up_symbols(struct symbol_list *) in line 41
      protection public
      13 lines of code
      1 parameters
      2 conditional paths
      uses variable sym defined in smatch_type.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses function expand_symbol(struct symbol *) defined in expand.c
      uses function linearize_symbol(struct symbol *) defined in linearize.c
      uses function show_entry(struct entrypoint *) defined in linearize.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function main(int,char **) in line 55
      protection public
      11 lines of code
      2 parameters
      1 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses function clean_up_symbols(struct symbol_list *) defined in test-linearize.c
      uses function sparse_initialize(int,char **,struct string_list **) defined in lib.c
      uses macro definition FOR_EACH_PTR_NOTAG defined in ptrlist.h
      uses function sparse(char *) defined in lib.c
      uses macro definition END_FOR_EACH_PTR_NOTAG defined in ptrlist.h
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/test-parsing.c
module test-parsing.c
   function clean_up_symbols(struct symbol_list *) in line 42
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses variable sym defined in smatch_type.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses function expand_symbol(struct symbol *) defined in expand.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function main(int,char **) in line 51
      protection public
      41 lines of code
      2 parameters
      1 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses function sparse_initialize(int,char **,struct string_list **) defined in lib.c
      uses function clean_up_symbols(struct symbol_list *) defined in test-parsing.c
      uses function show_symbol_list(struct symbol_list *,const char *) defined in show-parse.c
      uses function printf(char *,...) defined in test-be.c
      uses macro definition FOR_EACH_PTR_NOTAG defined in ptrlist.h
      uses function sparse(char *) defined in lib.c
      uses macro definition END_FOR_EACH_PTR_NOTAG defined in ptrlist.h
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/test-sort.c
module test-sort.c
   macro definition MIN in line 14
      protection public
   function int_cmp(const void *,const void *) in line 7
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
      uses macro definition b defined in preprocessor5.c
   function main(int,char **) in line 17
      protection public
      30 lines of code
      2 parameters
      5 conditional paths
      uses variable l defined in sm_casts4.c
      uses macro definition NULL defined in sm_implied3.c
      uses function malloc(int) defined in sm_buf_size2.c
      uses macro definition add_ptr_list defined in ptrlist.h
      uses function sort_list(struct ptr_list **,int(*)(const void *, const void *)) defined in ptrlist.h
      uses function int_cmp(const void *,const void *) defined in test-sort.c
      uses macro definition MIN defined in test-sort.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/test-unssa.c
module test-unssa.c
   function output_bb(struct basic_block *,unsigned long) in line 10
      protection public
      16 lines of code
      2 parameters
      2 conditional paths
      uses variable instruction::bb defined in linearize.h
      uses variable basic_block::generation defined in linearize.h
      uses function printf(char *,...) defined in test-be.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable basic_block::insns defined in linearize.h
      uses function show_instruction(struct instruction *) defined in linearize.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function output_fn(struct entrypoint *) in line 27
      protection public
      21 lines of code
      1 parameters
      3 conditional paths
      uses variable basic_block::generation defined in linearize.h
      uses variable bb_generation defined in flow.c
      uses variable sym defined in smatch_type.c
      uses variable symbol::ep defined in struct.c
      uses variable entrypoint::name defined in linearize.h
      uses variable name defined in smatch_type.c
      uses function show_ident(const struct ident *) defined in token.h
      uses variable symbol::ident defined in struct.c
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::modifiers defined in struct.c
      uses macro definition MOD_STATIC defined in symbol.h
      uses function printf(char *,...) defined in test-be.c
      uses function unssa(struct entrypoint *) defined in linearize.h
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable entrypoint::bbs defined in linearize.h
      uses function output_bb(struct basic_block *,unsigned long) defined in test-unssa.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function output_data(struct symbol *) in line 49
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses function printf(char *,...) defined in test-be.c
      uses function show_ident(const struct ident *) defined in token.h
      uses variable sym defined in smatch_type.c
      uses variable symbol::ident defined in struct.c
      uses variable symbol::ctype defined in struct.c
      uses variable ctype::base_type defined in struct.c
      uses variable symbol::type defined in struct.c
      uses variable ctype::modifiers defined in struct.c
   function compile(struct symbol_list *) in line 58
      protection public
      16 lines of code
      1 parameters
      2 conditional paths
      uses variable sym defined in smatch_type.c
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses function expand_symbol(struct symbol *) defined in expand.c
      uses function linearize_symbol(struct symbol *) defined in linearize.c
      uses function output_fn(struct entrypoint *) defined in test-unssa.c
      uses function output_data(struct symbol *) defined in test-unssa.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function main(int,char **) in line 75
      protection public
      12 lines of code
      2 parameters
      1 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses function compile(struct symbol_list *) defined in test-unssa.c
      uses function sparse_initialize(int,char **,struct string_list **) defined in lib.c
      uses macro definition FOR_EACH_PTR_NOTAG defined in ptrlist.h
      uses function sparse(char *) defined in lib.c
      uses macro definition END_FOR_EACH_PTR_NOTAG defined in ptrlist.h
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/token.h
module token.h
   macro definition COMBINATION_STRINGS in line 115
      protection public
   macro definition MAX_STRING in line 199
      protection public
   macro definition token_type in line 207
      protection public
   macro definition eof_token in line 215
      protection public
   enumeration constantfile in line 42
      protection public
   enumeration token_type in line 81
      protection public
   enumeration special_token in line 134
      protection public
   variable includepath in line 49
      protection public
   variable input_stream_nr in line 65
      protection public
   variable input_streams in line 66
      protection public
   variable tabstop in line 67
      protection public
   variable no_lineno in line 68
      protection public
   variable combinations in line 132
      protection public
   variable eof_token_entry in line 201
      protection public
   enumvalue CONSTANT_FILE_MAYBE in line 43
      protection public
   enumvalue CONSTANT_FILE_IFNDEF in line 44
      protection public
   enumvalue CONSTANT_FILE_NOPE in line 45
      protection public
   enumvalue CONSTANT_FILE_YES in line 47
      protection public
   enumvalue TOKEN_EOF in line 82
      protection public
   enumvalue TOKEN_ERROR in line 83
      protection public
   enumvalue TOKEN_IDENT in line 84
      protection public
   enumvalue TOKEN_ZERO_IDENT in line 85
      protection public
   enumvalue TOKEN_NUMBER in line 86
      protection public
   enumvalue TOKEN_CHAR in line 87
      protection public
   enumvalue TOKEN_CHAR_EMBEDDED_0 in line 88
      protection public
   enumvalue TOKEN_CHAR_EMBEDDED_1 in line 89
      protection public
   enumvalue TOKEN_CHAR_EMBEDDED_2 in line 90
      protection public
   enumvalue TOKEN_CHAR_EMBEDDED_3 in line 91
      protection public
   enumvalue TOKEN_WIDE_CHAR in line 92
      protection public
   enumvalue TOKEN_WIDE_CHAR_EMBEDDED_0 in line 93
      protection public
   enumvalue TOKEN_WIDE_CHAR_EMBEDDED_1 in line 94
      protection public
   enumvalue TOKEN_WIDE_CHAR_EMBEDDED_2 in line 95
      protection public
   enumvalue TOKEN_WIDE_CHAR_EMBEDDED_3 in line 96
      protection public
   enumvalue TOKEN_STRING in line 97
      protection public
   enumvalue TOKEN_WIDE_STRING in line 98
      protection public
   enumvalue TOKEN_SPECIAL in line 99
      protection public
   enumvalue TOKEN_STREAMBEGIN in line 100
      protection public
   enumvalue TOKEN_STREAMEND in line 101
      protection public
   enumvalue TOKEN_MACRO_ARGUMENT in line 102
      protection public
   enumvalue TOKEN_STR_ARGUMENT in line 103
      protection public
   enumvalue TOKEN_QUOTED_ARGUMENT in line 104
      protection public
   enumvalue TOKEN_CONCAT in line 105
      protection public
   enumvalue TOKEN_GNU_KLUDGE in line 106
      protection public
   enumvalue TOKEN_UNTAINT in line 107
      protection public
   enumvalue TOKEN_ARG_COUNT in line 108
      protection public
   enumvalue TOKEN_IF in line 109
      protection public
   enumvalue TOKEN_SKIP_GROUPS in line 110
      protection public
   enumvalue TOKEN_ELSE in line 111
      protection public
   enumvalue SPECIAL_BASE in line 135
      protection public
   enumvalue SPECIAL_ADD_ASSIGN in line 136
      protection public
   enumvalue SPECIAL_INCREMENT in line 137
      protection public
   enumvalue SPECIAL_SUB_ASSIGN in line 138
      protection public
   enumvalue SPECIAL_DECREMENT in line 139
      protection public
   enumvalue SPECIAL_DEREFERENCE in line 140
      protection public
   enumvalue SPECIAL_MUL_ASSIGN in line 141
      protection public
   enumvalue SPECIAL_DIV_ASSIGN in line 142
      protection public
   enumvalue SPECIAL_MOD_ASSIGN in line 143
      protection public
   enumvalue SPECIAL_LTE in line 144
      protection public
   enumvalue SPECIAL_GTE in line 145
      protection public
   enumvalue SPECIAL_EQUAL in line 146
      protection public
   enumvalue SPECIAL_NOTEQUAL in line 147
      protection public
   enumvalue SPECIAL_LOGICAL_AND in line 148
      protection public
   enumvalue SPECIAL_AND_ASSIGN in line 149
      protection public
   enumvalue SPECIAL_LOGICAL_OR in line 150
      protection public
   enumvalue SPECIAL_OR_ASSIGN in line 151
      protection public
   enumvalue SPECIAL_XOR_ASSIGN in line 152
      protection public
   enumvalue SPECIAL_HASHHASH in line 153
      protection public
   enumvalue SPECIAL_LEFTSHIFT in line 154
      protection public
   enumvalue SPECIAL_RIGHTSHIFT in line 155
      protection public
   enumvalue SPECIAL_DOTDOT in line 156
      protection public
   enumvalue SPECIAL_SHL_ASSIGN in line 157
      protection public
   enumvalue SPECIAL_SHR_ASSIGN in line 158
      protection public
   enumvalue SPECIAL_ELLIPSIS in line 159
      protection public
   enumvalue SPECIAL_ARG_SEPARATOR in line 160
      protection public
   enumvalue SPECIAL_UNSIGNED_LT in line 161
      protection public
   enumvalue SPECIAL_UNSIGNED_GT in line 162
      protection public
   enumvalue SPECIAL_UNSIGNED_LTE in line 163
      protection public
   enumvalue SPECIAL_UNSIGNED_GTE in line 164
      protection public
   function hash_stream(const char *) in line 69
      protection public
      12 lines of code
      1 parameters
      1 conditional paths
      uses function hash(struct hashtable *,void *) defined in hashtable.c
      uses variable c defined in sm_array_overflow.c
      uses variable stream::name defined in token.h
      uses macro definition HASH_PRIME defined in tokenize.c
      uses macro definition HASHED_INPUT_BITS defined in tokenize.c
   function containing_token(struct token **) in line 201
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable p defined in cond_expr2.c
   function init_stream(const char *,int,const char **) in line 217
      protection public
      25 lines of code
      3 parameters
      1 conditional paths
      uses variable input_stream_nr defined in tokenize.c
      uses function hash(struct hashtable *,void *) defined in hashtable.c
      uses variable input_streams defined in tokenize.c
      uses function die(const char *,...) defined in lib.c
      uses function memset(void *,int,int) defined in check_byte_count-ice.c
      uses variable stream::name defined in token.h
      uses variable stream::fd defined in token.h
      uses variable stream::next_path defined in token.h
      uses variable stream::path defined in token.h
      uses macro definition NULL defined in sm_implied3.c
      uses variable stream::constant defined in token.h
      uses enumvalue CONSTANT_FILE_MAYBE defined in token.h
      uses function hash_stream(const char *) defined in tokenize.c
      uses variable stream::next_stream defined in token.h
   function stream_name(int) in line 218
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses variable input_stream_nr defined in tokenize.c
      uses variable input_streams defined in tokenize.c
      uses variable stream::name defined in token.h
   function hash_ident(struct ident *) in line 219
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable ident::name defined in token.h
      uses variable ident::len defined in token.h
   function built_in_ident(const char *) in line 220
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable ident::len defined in token.h
      uses function strlen(char *) defined in sm_overflow6.c
      uses variable stream::name defined in token.h
   function built_in_token(int,const char *) in line 221
      protection public
      10 lines of code
      2 parameters
      1 conditional paths
      uses variable token::pos defined in token.h
      uses variable position::stream defined in lib.h
      uses enumvalue TOKEN_IDENT defined in token.h
      uses variable token::ident defined in token.h
      uses function built_in_ident(const char *) defined in tokenize.c
      uses variable stream::name defined in token.h
   function show_special(int) in line 222
      protection public
      10 lines of code
      1 parameters
      1 conditional paths
      uses enumvalue SPECIAL_BASE defined in token.h
      uses function strcpy(char *,char *,int) defined in sm_overflow3.c
      uses variable combinations defined in tokenize.c
   function show_ident(const struct ident *) in line 223
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses function sprintf(char *,char *,char *) defined in sm_overflow6.c
      uses variable ident::len defined in token.h
      uses variable ident::name defined in token.h
   function show_string(const struct string *) in line 224
      protection public
      18 lines of code
      1 parameters
      1 conditional paths
      uses macro definition MAX_STRING defined in token.h
      uses variable ptr defined in sm_null_deref2.c
      uses variable string::length defined in token.h
      uses variable p defined in cond_expr2.c
   function show_token(const struct token *) in line 225
      protection public
      62 lines of code
      1 parameters
      1 conditional paths
      uses enumvalue TOKEN_ERROR defined in token.h
      uses enumvalue TOKEN_EOF defined in token.h
      uses enumvalue TOKEN_IDENT defined in token.h
      uses function show_ident(const struct ident *) defined in tokenize.c
      uses variable token::ident defined in token.h
      uses enumvalue TOKEN_NUMBER defined in token.h
      uses variable token::number defined in token.h
      uses enumvalue TOKEN_SPECIAL defined in token.h
      uses function show_special(int) defined in tokenize.c
      uses variable token::special defined in token.h
      uses enumvalue TOKEN_CHAR defined in token.h
      uses variable token::string defined in token.h
      uses variable string::data defined in token.h
      uses variable string::length defined in token.h
      uses enumvalue TOKEN_CHAR_EMBEDDED_0 defined in token.h
      uses enumvalue TOKEN_CHAR_EMBEDDED_3 defined in token.h
      uses variable token::embedded defined in token.h
      uses enumvalue TOKEN_WIDE_CHAR defined in token.h
      uses enumvalue TOKEN_WIDE_CHAR_EMBEDDED_0 defined in token.h
      uses enumvalue TOKEN_WIDE_CHAR_EMBEDDED_3 defined in token.h
      uses enumvalue TOKEN_STRING defined in token.h
      uses enumvalue TOKEN_WIDE_STRING defined in token.h
      uses enumvalue TOKEN_STREAMBEGIN defined in token.h
      uses function sprintf(char *,char *,char *) defined in sm_overflow6.c
      uses function stream_name(int) defined in tokenize.c
      uses variable token::pos defined in token.h
      uses variable position::stream defined in lib.h
      uses enumvalue TOKEN_STREAMEND defined in token.h
      uses enumvalue TOKEN_UNTAINT defined in token.h
      uses enumvalue TOKEN_ARG_COUNT defined in token.h
   function quote_token(const struct token *) in line 226
      protection public
      40 lines of code
      1 parameters
      1 conditional paths
      uses enumvalue TOKEN_ERROR defined in token.h
      uses enumvalue TOKEN_IDENT defined in token.h
      uses function show_ident(const struct ident *) defined in tokenize.c
      uses variable token::ident defined in token.h
      uses enumvalue TOKEN_NUMBER defined in token.h
      uses variable token::number defined in token.h
      uses enumvalue TOKEN_SPECIAL defined in token.h
      uses function show_special(int) defined in tokenize.c
      uses variable token::special defined in token.h
      uses enumvalue TOKEN_CHAR defined in token.h
      uses variable token::string defined in token.h
      uses variable string::data defined in token.h
      uses variable string::length defined in token.h
      uses enumvalue TOKEN_CHAR_EMBEDDED_0 defined in token.h
      uses enumvalue TOKEN_CHAR_EMBEDDED_3 defined in token.h
      uses variable token::embedded defined in token.h
      uses enumvalue TOKEN_WIDE_CHAR defined in token.h
      uses enumvalue TOKEN_WIDE_CHAR_EMBEDDED_0 defined in token.h
      uses enumvalue TOKEN_WIDE_CHAR_EMBEDDED_3 defined in token.h
      uses enumvalue TOKEN_STRING defined in token.h
      uses enumvalue TOKEN_WIDE_STRING defined in token.h
      uses function sprintf(char *,char *,char *) defined in sm_overflow6.c
   function tokenize(const char *,int,struct token *,const char **) in line 227
      protection public
      19 lines of code
      4 parameters
      1 conditional paths
      uses macro definition BUFSIZE defined in tokenize.c
      uses function init_stream(const char *,int,const char **) defined in tokenize.c
      uses variable stream::name defined in token.h
      uses variable stream::fd defined in token.h
      uses variable stream::next_path defined in token.h
      uses variable token::next defined in token.h
   function tokenize_buffer(void *,unsigned long,struct token **) in line 228
      protection public
      9 lines of code
      3 parameters
      1 conditional paths
   function show_identifier_stats(void) in line 230
      protection public
      29 lines of code
      1 parameters
      1 conditional paths
      uses macro definition IDENT_HASH_SIZE defined in tokenize.c
      uses variable ident::next defined in token.h
   function preprocess(struct token *) in line 231
      protection public
      13 lines of code
      1 parameters
      1 conditional paths
      uses variable preprocessing defined in lib.c
   function store_all_tokens(struct token *) in line 233
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses enumvalue TOKEN_STREAMEND defined in token.h
      uses variable token::next defined in token.h
   function pos_get_token(struct position) in line 234
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
      uses variable line::token defined in token_store.c
      uses function first_token_from_line(struct position) defined in token_store.c
      uses variable line::pos defined in token_store.c
      uses variable position::pos defined in lib.h
      uses variable token::pos defined in token.h
      uses macro definition NULL defined in sm_implied3.c
      uses variable token::next defined in token.h
   function pos_ident(struct position) in line 235
      protection public
      11 lines of code
      1 parameters
      1 conditional paths
      uses variable line::token defined in token_store.c
      uses function pos_get_token(struct position) defined in token_store.c
      uses variable line::pos defined in token_store.c
      uses macro definition NULL defined in sm_implied3.c
      uses enumvalue TOKEN_IDENT defined in token.h
      uses variable token::ident defined in token.h
      uses variable ident::name defined in token.h
   function store_macro_pos(struct token *) in line 237
      protection public
      10 lines of code
      1 parameters
      3 conditional paths
      uses function create_hashtable(unsigned int,unsigned int(*)(void *),int(*)(void *, void *)) defined in hashtable.c
      uses function get_macro_name(struct position) defined in macro_table.c
      uses variable token::pos defined in token.h
      uses variable token::ident defined in token.h
      uses variable ident::name defined in token.h
   function get_macro_name(struct position) in line 238
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable position::pos defined in lib.h
   function match_op(struct token *,int) in line 240
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses variable token::pos defined in token.h
      uses variable position::type defined in lib.h
      uses enumvalue TOKEN_SPECIAL defined in token.h
      uses variable token::special defined in token.h
      uses function op(void) defined in loop2.c
   function match_ident(struct token *,struct ident *) in line 245
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses variable token::pos defined in token.h
      uses variable position::type defined in lib.h
      uses enumvalue TOKEN_IDENT defined in token.h
      uses variable token::ident defined in token.h
   variable stream::constant in line 55
      protection public
   variable stream::dirty in line 59
      protection public
   variable stream::fd in line 52
      protection public
   variable stream::ifndef in line 61
      protection public
   variable stream::name in line 53
      protection public
   variable stream::next_path in line 55
      protection public
   variable stream::next_stream in line 59
      protection public
   variable stream::once in line 59
      protection public
   variable stream::path in line 54
      protection public
   variable stream::protect in line 60
      protection public
   variable stream::top_if in line 62
      protection public
   variable ident::keyword in line 77
      protection public
   variable ident::len in line 74
      protection public
   variable ident::name in line 78
      protection public
   variable ident::next in line 72
      protection public
   variable ident::reserved in line 76
      protection public
   variable ident::symbols in line 73
      protection public
   variable ident::tainted in line 75
      protection public
   variable string::data in line 169
      protection public
   variable string::length in line 168
      protection public
   variable argcount::normal in line 174
      protection public
   variable argcount::quoted in line 175
      protection public
   variable argcount::str in line 176
      protection public
   variable argcount::vararg in line 177
      protection public
   variable token::@160 in line 196
      protection public
   variable token::argnum in line 193
      protection public
   variable token::count in line 193
      protection public
   variable token::embedded in line 195
      protection public
   variable token::ident in line 190
      protection public
   variable token::next in line 187
      protection public
   variable token::number in line 189
      protection public
   variable token::pos in line 177
      protection public
   variable token::special in line 191
      protection public
   variable token::string in line 192
      protection public
   variable token::@159::argnum in line 193
      protection public
   variable token::@159::count in line 193
      protection public
   variable token::@159::embedded in line 195
      protection public
   variable token::@159::ident in line 190
      protection public
   variable token::@159::number in line 189
      protection public
   variable token::@159::special in line 191
      protection public
   variable token::@159::string in line 192
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/token_store.c
module token_store.c
   variable cursor in line 52
      protection public
   function __ALLOCATOR(struct token,"token store",perm_token) in line 39
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function ALLOCATOR(line,"line of tokens") in line 40
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function copy_token(struct token *) in line 42
      protection public
      9 lines of code
      1 parameters
      1 conditional paths
      uses function memcpy(void *,void *,int) defined in sm_struct_assign1.c
      uses macro definition NULL defined in sm_implied3.c
   function find_line(struct position) in line 54
      protection public
      20 lines of code
      1 parameters
      7 conditional paths
      uses variable cursor defined in token_store.c
      uses variable line::pos defined in token_store.c
      uses variable position::line defined in lib.h
      uses variable line::prev defined in token_store.c
      uses variable line::next defined in token_store.c
   function insert_into_line(struct token **,struct token *) in line 75
      protection public
      18 lines of code
      2 parameters
      4 conditional paths
      uses variable token::next defined in token.h
   function store_token(struct token *) in line 94
      protection public
      33 lines of code
      1 parameters
      4 conditional paths
      uses function copy_token(struct token *) defined in token_store.c
      uses function find_line(struct position) defined in token_store.c
      uses variable token::pos defined in token.h
      uses variable cursor defined in token_store.c
      uses variable line::pos defined in token_store.c
      uses variable line::token defined in token_store.c
      uses variable position::line defined in lib.h
      uses variable line::prev defined in token_store.c
      uses variable line::next defined in token_store.c
      uses function insert_into_line(struct token **,struct token *) defined in token_store.c
   function store_all_tokens(struct token *) in line 128
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses enumvalue TOKEN_STREAMEND defined in token.h
      uses function store_token(struct token *) defined in token_store.c
      uses variable token::next defined in token.h
   function first_token_from_line(struct position) in line 136
      protection public
      14 lines of code
      1 parameters
      4 conditional paths
      uses function find_line(struct position) defined in token_store.c
      uses variable line::pos defined in token_store.c
      uses variable cursor defined in token_store.c
      uses macro definition NULL defined in sm_implied3.c
      uses variable position::stream defined in lib.h
      uses variable position::line defined in lib.h
      uses variable line::token defined in token_store.c
   function pos_get_token(struct position) in line 151
      protection public
      14 lines of code
      1 parameters
      4 conditional paths
      uses variable line::token defined in token_store.c
      uses function first_token_from_line(struct position) defined in token_store.c
      uses variable line::pos defined in token_store.c
      uses variable position::pos defined in lib.h
      uses variable token::pos defined in token.h
      uses macro definition NULL defined in sm_implied3.c
      uses variable token::next defined in token.h
   function pos_ident(struct position) in line 166
      protection public
      11 lines of code
      1 parameters
      3 conditional paths
      uses variable line::token defined in token_store.c
      uses function pos_get_token(struct position) defined in token_store.c
      uses variable line::pos defined in token_store.c
      uses macro definition NULL defined in sm_implied3.c
      uses enumvalue TOKEN_IDENT defined in token.h
      uses variable token::ident defined in token.h
      uses variable ident::name defined in token.h
   variable line::next in line 36
      protection public
   variable line::pos in line 166
      protection public
   variable line::prev in line 34
      protection public
   variable line::token in line 35
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/tokenize.c
module tokenize.c
   macro definition EOF in line 40
      protection public
   macro definition BUFSIZE in line 48
      protection public
   macro definition HASHED_INPUT_BITS in line 285
      protection public
   macro definition HASHED_INPUT in line 286
      protection public
   macro definition HASH_PRIME in line 287
      protection public
   macro definition NR_COMBINATIONS in line 698
      protection public
   macro definition special_hash in line 701
      protection public
   macro definition RES in line 708
      protection public
   macro definition CODE in line 733
      protection public
   macro definition IDENT_HASH_BITS in line 809
      protection public
   macro definition IDENT_HASH_SIZE in line 810
      protection public
   macro definition IDENT_HASH_MASK in line 811
      protection public
   macro definition ident_hash_init in line 813
      protection public
   macro definition ident_hash_add in line 814
      protection public
   macro definition ident_hash_end in line 815
      protection public
   enumeration @161 in line 481
      protection public
   variable input_stream_nr in line 42
      protection public
   variable input_streams in line 43
      protection public
   variable input_streams_allocated in line 44
      protection public
   variable tabstop in line 45
      protection public
   variable no_lineno in line 46
      protection public
   variable input_stream_hashes in line 289
      protection public
   variable eof_token_entry in line 427
      protection public
   variable cclass in line 492
      protection public
   variable combinations in line 696
      protection public
   variable hash_results in line 707
      protection public
   variable code in line 732
      protection public
   variable hash_table in line 817
      protection public
   variable ident_hit in line 818
      protection public
   variable ident_miss in line 818
      protection public
   variable idents in line 818
      protection public
   enumvalue Letter in line 482
      protection public
   enumvalue Digit in line 483
      protection public
   enumvalue Hex in line 484
      protection public
   enumvalue Exp in line 485
      protection public
   enumvalue Dot in line 486
      protection public
   enumvalue ValidSecond in line 487
      protection public
   enumvalue Quote in line 488
      protection public
   enumvalue Escape in line 489
      protection public
   function stream_name(int) in line 59
      protection public
      6 lines of code
      1 parameters
      2 conditional paths
      uses variable input_stream_nr defined in tokenize.c
      uses variable input_streams defined in tokenize.c
      uses variable stream::name defined in token.h
   function stream_pos(stream_t *) in line 59
      protection public
      16 lines of code
      1 parameters
      2 conditional paths
      uses variable position::pos defined in lib.h
      uses variable no_lineno defined in tokenize.c
   function show_special(int) in line 83
      protection public
      10 lines of code
      1 parameters
      2 conditional paths
      uses enumvalue SPECIAL_BASE defined in token.h
      uses function strcpy(char *,char *,int) defined in sm_overflow3.c
      uses variable combinations defined in tokenize.c
   function show_ident(const struct ident *) in line 94
      protection public
      8 lines of code
      1 parameters
      2 conditional paths
      uses function sprintf(char *,char *,char *) defined in sm_overflow6.c
      uses variable ident::len defined in token.h
      uses variable ident::name defined in token.h
   function charstr(char *,unsigned char,unsigned char,unsigned char) in line 103
      protection public
      22 lines of code
      4 parameters
      6 conditional paths
      uses variable c defined in sm_array_overflow.c
      uses variable ptr defined in sm_null_deref2.c
      uses function sprintf(char *,char *,char *) defined in sm_overflow6.c
   function show_string(const struct string *) in line 126
      protection public
      18 lines of code
      1 parameters
      3 conditional paths
      uses macro definition MAX_STRING defined in token.h
      uses variable ptr defined in sm_null_deref2.c
      uses variable string::length defined in token.h
      uses variable p defined in cond_expr2.c
      uses function charstr(char *,unsigned char,unsigned char,unsigned char) defined in tokenize.c
   function show_char(const char *,size_t,char,char) in line 145
      protection public
      13 lines of code
      4 parameters
      2 conditional paths
      uses macro definition MAX_STRING defined in token.h
      uses variable p defined in cond_expr2.c
      uses function memcpy(void *,void *,int) defined in sm_struct_assign1.c
   function quote_char(const char *,size_t,char,char) in line 159
      protection public
      21 lines of code
      4 parameters
      6 conditional paths
      uses macro definition MAX_STRING defined in token.h
      uses variable p defined in cond_expr2.c
   function show_token(const struct token *) in line 181
      protection public
      62 lines of code
      1 parameters
      17 conditional paths
      uses enumvalue TOKEN_ERROR defined in token.h
      uses enumvalue TOKEN_EOF defined in token.h
      uses enumvalue TOKEN_IDENT defined in token.h
      uses function show_ident(const struct ident *) defined in tokenize.c
      uses variable token::ident defined in token.h
      uses enumvalue TOKEN_NUMBER defined in token.h
      uses variable token::number defined in token.h
      uses enumvalue TOKEN_SPECIAL defined in token.h
      uses function show_special(int) defined in tokenize.c
      uses variable token::special defined in token.h
      uses enumvalue TOKEN_CHAR defined in token.h
      uses function show_char(const char *,size_t,char,char) defined in tokenize.c
      uses variable token::string defined in token.h
      uses variable string::data defined in token.h
      uses variable string::length defined in token.h
      uses enumvalue TOKEN_CHAR_EMBEDDED_0 defined in token.h
      uses enumvalue TOKEN_CHAR_EMBEDDED_3 defined in token.h
      uses variable token::embedded defined in token.h
      uses enumvalue TOKEN_WIDE_CHAR defined in token.h
      uses enumvalue TOKEN_WIDE_CHAR_EMBEDDED_0 defined in token.h
      uses enumvalue TOKEN_WIDE_CHAR_EMBEDDED_3 defined in token.h
      uses enumvalue TOKEN_STRING defined in token.h
      uses enumvalue TOKEN_WIDE_STRING defined in token.h
      uses enumvalue TOKEN_STREAMBEGIN defined in token.h
      uses function sprintf(char *,char *,char *) defined in sm_overflow6.c
      uses function stream_name(int) defined in tokenize.c
      uses variable token::pos defined in token.h
      uses variable position::stream defined in lib.h
      uses enumvalue TOKEN_STREAMEND defined in token.h
      uses enumvalue TOKEN_UNTAINT defined in token.h
      uses enumvalue TOKEN_ARG_COUNT defined in token.h
   function quote_token(const struct token *) in line 244
      protection public
      40 lines of code
      1 parameters
      11 conditional paths
      uses enumvalue TOKEN_ERROR defined in token.h
      uses enumvalue TOKEN_IDENT defined in token.h
      uses function show_ident(const struct ident *) defined in tokenize.c
      uses variable token::ident defined in token.h
      uses enumvalue TOKEN_NUMBER defined in token.h
      uses variable token::number defined in token.h
      uses enumvalue TOKEN_SPECIAL defined in token.h
      uses function show_special(int) defined in tokenize.c
      uses variable token::special defined in token.h
      uses enumvalue TOKEN_CHAR defined in token.h
      uses function quote_char(const char *,size_t,char,char) defined in tokenize.c
      uses variable token::string defined in token.h
      uses variable string::data defined in token.h
      uses variable string::length defined in token.h
      uses enumvalue TOKEN_CHAR_EMBEDDED_0 defined in token.h
      uses enumvalue TOKEN_CHAR_EMBEDDED_3 defined in token.h
      uses variable token::embedded defined in token.h
      uses enumvalue TOKEN_WIDE_CHAR defined in token.h
      uses enumvalue TOKEN_WIDE_CHAR_EMBEDDED_0 defined in token.h
      uses enumvalue TOKEN_WIDE_CHAR_EMBEDDED_3 defined in token.h
      uses enumvalue TOKEN_STRING defined in token.h
      uses enumvalue TOKEN_WIDE_STRING defined in token.h
      uses function sprintf(char *,char *,char *) defined in sm_overflow6.c
   function hash_stream(const char *) in line 291
      protection public
      12 lines of code
      1 parameters
      2 conditional paths
      uses function hash(struct hashtable *,void *) defined in hashtable.c
      uses variable c defined in sm_array_overflow.c
      uses variable stream::name defined in token.h
      uses macro definition HASH_PRIME defined in tokenize.c
      uses macro definition HASHED_INPUT_BITS defined in tokenize.c
      uses variable input_stream_hashes defined in tokenize.c
   function init_stream(const char *,int,const char **) in line 304
      protection public
      25 lines of code
      3 parameters
      3 conditional paths
      uses variable input_stream_nr defined in tokenize.c
      uses function hash(struct hashtable *,void *) defined in hashtable.c
      uses variable input_streams_allocated defined in tokenize.c
      uses variable input_streams defined in tokenize.c
      uses function die(const char *,...) defined in lib.c
      uses function memset(void *,int,int) defined in check_byte_count-ice.c
      uses variable stream::name defined in token.h
      uses variable stream::fd defined in token.h
      uses variable stream::next_path defined in token.h
      uses variable stream::path defined in token.h
      uses macro definition NULL defined in sm_implied3.c
      uses variable stream::constant defined in token.h
      uses enumvalue CONSTANT_FILE_MAYBE defined in token.h
      uses function hash_stream(const char *) defined in tokenize.c
      uses variable stream::next_stream defined in token.h
   function alloc_token(stream_t *) in line 330
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses variable token::pos defined in token.h
      uses function stream_pos(stream_t *) defined in tokenize.c
   function nextchar_slow(stream_t *) in line 341
      protection public
      80 lines of code
      1 parameters
      23 conditional paths
      uses variable offset defined in sm_implied10.c
      uses variable c defined in sm_array_overflow.c
      uses variable stream::fd defined in token.h
      uses macro definition BUFSIZE defined in tokenize.c
      uses variable tabstop defined in tokenize.c
      uses function warning(struct position,const char *,...) defined in lib.c
      uses function stream_pos(stream_t *) defined in tokenize.c
      uses macro definition EOF defined in tokenize.c
   function nextchar(stream_t *) in line 427
      protection public
      17 lines of code
      1 parameters
      3 conditional paths
      uses variable offset defined in sm_implied10.c
      uses variable c defined in sm_array_overflow.c
      uses variable token::special defined in token.h
      uses function nextchar_slow(stream_t *) defined in tokenize.c
   function mark_eof(stream_t *) in line 447
      protection public
      16 lines of code
      1 parameters
      1 conditional paths
      uses function alloc_token(stream_t *) defined in tokenize.c
      uses enumvalue TOKEN_STREAMEND defined in token.h
      uses variable token::pos defined in token.h
      uses variable position::newline defined in lib.h
      uses variable eof_token_entry defined in tokenize.c
      uses variable token::next defined in token.h
      uses macro definition NULL defined in sm_implied3.c
   function add_token(stream_t *) in line 464
      protection public
      9 lines of code
      1 parameters
      1 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses variable token::next defined in token.h
   function drop_token(stream_t *) in line 474
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses macro definition NULL defined in sm_implied3.c
   function get_one_number(int,int,stream_t *) in line 546
      protection public
      44 lines of code
      3 parameters
      8 conditional paths
      uses variable p defined in cond_expr2.c
      uses variable buf defined in sm_fake_assignment.c
      uses variable c defined in sm_array_overflow.c
      uses variable cclass defined in tokenize.c
      uses enumvalue Dot defined in tokenize.c
      uses enumvalue Digit defined in tokenize.c
      uses enumvalue Letter defined in tokenize.c
      uses function nextchar(stream_t *) defined in tokenize.c
      uses enumvalue Exp defined in tokenize.c
      uses function sparse_error(struct position,const char *,...) defined in lib.c
      uses function stream_pos(stream_t *) defined in tokenize.c
      uses function memcpy(void *,void *,int) defined in sm_struct_assign1.c
      uses enumvalue TOKEN_NUMBER defined in token.h
      uses variable token::number defined in token.h
      uses function add_token(stream_t *) defined in tokenize.c
   function eat_string(int,stream_t *,enum token_type) in line 591
      protection public
      69 lines of code
      3 parameters
      13 conditional paths
      uses macro definition MAX_STRING defined in token.h
      uses enumvalue TOKEN_STRING defined in token.h
      uses variable token::next defined in token.h
      uses function nextchar(stream_t *) defined in tokenize.c
      uses function warning(struct position,const char *,...) defined in lib.c
      uses function stream_pos(stream_t *) defined in tokenize.c
      uses macro definition EOF defined in tokenize.c
      uses variable cclass defined in tokenize.c
      uses enumvalue Hex defined in tokenize.c
      uses enumvalue Escape defined in tokenize.c
      uses function sparse_error(struct position,const char *,...) defined in lib.c
      uses function memset(void *,int,int) defined in check_byte_count-ice.c
      uses function memcpy(void *,void *,int) defined in sm_struct_assign1.c
      uses variable token::embedded defined in token.h
      uses variable string::data defined in token.h
      uses variable token::string defined in token.h
      uses function add_token(stream_t *) defined in tokenize.c
   function drop_stream_eoln(stream_t *) in line 661
      protection public
      12 lines of code
      1 parameters
      4 conditional paths
      uses function drop_token(stream_t *) defined in tokenize.c
      uses function nextchar(stream_t *) defined in tokenize.c
      uses macro definition EOF defined in tokenize.c
   function drop_stream_comment(stream_t *) in line 674
      protection public
      21 lines of code
      1 parameters
      4 conditional paths
      uses variable token::next defined in token.h
      uses function drop_token(stream_t *) defined in tokenize.c
      uses function nextchar(stream_t *) defined in tokenize.c
      uses macro definition EOF defined in tokenize.c
      uses function warning(struct position,const char *,...) defined in lib.c
      uses function stream_pos(stream_t *) defined in tokenize.c
   function get_one_special(int,stream_t *) in line 758
      protection public
      50 lines of code
      2 parameters
      11 conditional paths
      uses variable token::next defined in token.h
      uses function nextchar(stream_t *) defined in tokenize.c
      uses variable c defined in sm_array_overflow.c
      uses function get_one_number(int,int,stream_t *) defined in tokenize.c
      uses function eat_string(int,stream_t *,enum token_type) defined in tokenize.c
      uses enumvalue TOKEN_STRING defined in token.h
      uses enumvalue TOKEN_CHAR defined in token.h
      uses function drop_stream_eoln(stream_t *) defined in tokenize.c
      uses function drop_stream_comment(stream_t *) defined in tokenize.c
      uses variable cclass defined in tokenize.c
      uses enumvalue ValidSecond defined in tokenize.c
      uses macro definition special_hash defined in tokenize.c
      uses variable hash_results defined in tokenize.c
      uses variable code defined in tokenize.c
      uses enumvalue SPECIAL_LEFTSHIFT defined in token.h
      uses enumvalue TOKEN_SPECIAL defined in token.h
      uses variable token::special defined in token.h
      uses function add_token(stream_t *) defined in tokenize.c
   function show_identifier_stats(void) in line 820
      protection public
      29 lines of code
      1 parameters
      7 conditional paths
      uses variable ident_hit defined in tokenize.c
      uses variable ident_miss defined in tokenize.c
      uses macro definition IDENT_HASH_SIZE defined in tokenize.c
      uses variable hash_table defined in tokenize.c
      uses variable ident::next defined in token.h
   function alloc_ident(const char *,int) in line 850
      protection public
      9 lines of code
      2 parameters
      1 conditional paths
      uses variable ident::len defined in token.h
      uses variable ident::symbols defined in token.h
      uses macro definition NULL defined in sm_implied3.c
      uses variable ident::tainted defined in token.h
      uses function memcpy(void *,void *,int) defined in sm_struct_assign1.c
      uses variable ident::name defined in token.h
      uses variable stream::name defined in token.h
   function insert_hash(struct ident *,unsigned long) in line 860
      protection public
      7 lines of code
      2 parameters
      1 conditional paths
      uses variable ident::next defined in token.h
      uses variable hash_table defined in tokenize.c
      uses function hash(struct hashtable *,void *) defined in hashtable.c
      uses variable ident_miss defined in tokenize.c
   function create_hashed_ident(const char *,int,unsigned long) in line 868
      protection public
      25 lines of code
      3 parameters
      5 conditional paths
      uses variable p defined in cond_expr2.c
      uses variable hash_table defined in tokenize.c
      uses function hash(struct hashtable *,void *) defined in hashtable.c
      uses macro definition NULL defined in sm_implied3.c
      uses variable ident::len defined in token.h
      uses variable stream::name defined in token.h
      uses variable ident::name defined in token.h
      uses variable ident::next defined in token.h
      uses variable ident_hit defined in tokenize.c
      uses function alloc_ident(const char *,int) defined in tokenize.c
      uses variable ident_miss defined in tokenize.c
      uses variable idents defined in tokenize.c
   function hash_name(const char *,int) in line 894
      protection public
      12 lines of code
      2 parameters
      2 conditional paths
      uses function hash(struct hashtable *,void *) defined in hashtable.c
      uses variable p defined in cond_expr2.c
      uses variable stream::name defined in token.h
      uses macro definition ident_hash_init defined in tokenize.c
      uses variable ident::len defined in token.h
      uses macro definition ident_hash_add defined in tokenize.c
      uses macro definition ident_hash_end defined in tokenize.c
   function hash_ident(struct ident *) in line 907
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function insert_hash(struct ident *,unsigned long) defined in tokenize.c
      uses function hash_name(const char *,int) defined in tokenize.c
      uses variable ident::name defined in token.h
      uses variable ident::len defined in token.h
   function built_in_ident(const char *) in line 912
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable ident::len defined in token.h
      uses function strlen(char *) defined in sm_overflow6.c
      uses variable stream::name defined in token.h
      uses function create_hashed_ident(const char *,int,unsigned long) defined in tokenize.c
      uses function hash_name(const char *,int) defined in tokenize.c
   function built_in_token(int,const char *) in line 918
      protection public
      10 lines of code
      2 parameters
      1 conditional paths
      uses variable token::pos defined in token.h
      uses variable position::stream defined in lib.h
      uses enumvalue TOKEN_IDENT defined in token.h
      uses variable token::ident defined in token.h
      uses function built_in_ident(const char *) defined in tokenize.c
      uses variable stream::name defined in token.h
   function get_one_identifier(int,stream_t *) in line 929
      protection public
      41 lines of code
      2 parameters
      7 conditional paths
      uses function hash(struct hashtable *,void *) defined in hashtable.c
      uses variable buf defined in sm_fake_assignment.c
      uses variable ident::len defined in token.h
      uses variable ident::next defined in token.h
      uses macro definition ident_hash_init defined in tokenize.c
      uses variable c defined in sm_array_overflow.c
      uses function nextchar(stream_t *) defined in tokenize.c
      uses variable cclass defined in tokenize.c
      uses enumvalue Letter defined in tokenize.c
      uses enumvalue Digit defined in tokenize.c
      uses macro definition ident_hash_add defined in tokenize.c
      uses enumvalue Quote defined in tokenize.c
      uses function eat_string(int,stream_t *,enum token_type) defined in tokenize.c
      uses enumvalue TOKEN_WIDE_CHAR defined in token.h
      uses enumvalue TOKEN_WIDE_STRING defined in token.h
      uses macro definition ident_hash_end defined in tokenize.c
      uses function create_hashed_ident(const char *,int,unsigned long) defined in tokenize.c
      uses enumvalue TOKEN_IDENT defined in token.h
      uses variable token::ident defined in token.h
      uses function add_token(stream_t *) defined in tokenize.c
   function get_one_token(int,stream_t *) in line 971
      protection public
      9 lines of code
      2 parameters
      3 conditional paths
      uses variable cclass defined in tokenize.c
      uses variable c defined in sm_array_overflow.c
      uses enumvalue Digit defined in tokenize.c
      uses function get_one_number(int,int,stream_t *) defined in tokenize.c
      uses function nextchar(stream_t *) defined in tokenize.c
      uses enumvalue Letter defined in tokenize.c
      uses function get_one_identifier(int,stream_t *) defined in tokenize.c
      uses function get_one_special(int,stream_t *) defined in tokenize.c
   function setup_stream(stream_t *,int,int,unsigned char *,unsigned int) in line 981
      protection public
      22 lines of code
      5 parameters
      1 conditional paths
      uses macro definition NULL defined in sm_implied3.c
      uses variable stream::fd defined in token.h
      uses variable buf defined in sm_fake_assignment.c
      uses function alloc_token(stream_t *) defined in tokenize.c
      uses enumvalue TOKEN_STREAMBEGIN defined in token.h
      uses variable token::next defined in token.h
   function tokenize_stream(stream_t *) in line 1004
      protection public
      17 lines of code
      1 parameters
      3 conditional paths
      uses variable c defined in sm_array_overflow.c
      uses function nextchar(stream_t *) defined in tokenize.c
      uses macro definition EOF defined in tokenize.c
      uses function alloc_token(stream_t *) defined in tokenize.c
      uses function get_one_token(int,stream_t *) defined in tokenize.c
      uses function mark_eof(stream_t *) defined in tokenize.c
   function tokenize_buffer(void *,unsigned long,struct token **) in line 1022
      protection public
      9 lines of code
      3 parameters
      1 conditional paths
      uses function setup_stream(stream_t *,int,int,unsigned char *,unsigned int) defined in tokenize.c
      uses function tokenize_stream(stream_t *) defined in tokenize.c
   function tokenize(const char *,int,struct token *,const char **) in line 1032
      protection public
      19 lines of code
      4 parameters
      3 conditional paths
      uses macro definition BUFSIZE defined in tokenize.c
      uses function init_stream(const char *,int,const char **) defined in tokenize.c
      uses variable stream::name defined in token.h
      uses variable stream::fd defined in token.h
      uses variable stream::next_path defined in token.h
      uses function setup_stream(stream_t *,int,int,unsigned char *,unsigned int) defined in tokenize.c
      uses function tokenize_stream(stream_t *) defined in tokenize.c
      uses variable token::next defined in token.h
   variable stream_t::buffer in line 56
      protection public
   variable stream_t::fd in line 51
      protection public
   variable stream_t::line in line 52
      protection public
   variable stream_t::newline in line 53
      protection public
   variable stream_t::nr in line 52
      protection public
   variable stream_t::offset in line 51
      protection public
   variable stream_t::pos in line 52
      protection public
   variable stream_t::size in line 51
      protection public
   variable stream_t::token in line 55
      protection public
   variable stream_t::tokenlist in line 54
      protection public
   variable stream_t::whitespace in line 53
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/unssa.c
module unssa.c
   function remove_phisrc_defines(struct instruction *) in line 33
      protection public
      9 lines of code
      1 parameters
      1 conditional paths
      uses variable instruction::bb defined in linearize.h
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable instruction::phi_users defined in linearize.h
      uses variable basic_block::defines defined in linearize.h
      uses variable instruction::target defined in linearize.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function replace_phi_node(struct instruction *) in line 43
      protection public
      19 lines of code
      1 parameters
      1 conditional paths
      uses function alloc_pseudo(struct instruction *) defined in linearize.c
      uses macro definition NULL defined in sm_implied3.c
      uses variable pseudo::type defined in linearize.h
      uses variable instruction::target defined in linearize.h
      uses variable pseudo::ident defined in linearize.h
      uses variable pseudo::def defined in linearize.h
      uses variable instruction::bb defined in linearize.h
      uses variable basic_block::needs defined in linearize.h
      uses function track_phi_uses(struct instruction *) defined in flow.h
      uses variable instruction::opcode defined in linearize.h
      uses enumvalue OP_COPY defined in linearize.h
      uses variable instruction::src defined in linearize.h
   function rewrite_phi_bb(struct basic_block *) in line 63
      protection public
      15 lines of code
      1 parameters
      3 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable instruction::bb defined in linearize.h
      uses variable basic_block::insns defined in linearize.h
      uses enumvalue OP_PHI defined in linearize.h
      uses function replace_phi_node(struct instruction *) defined in unssa.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
   function rewrite_phisrc_bb(struct basic_block *) in line 79
      protection public
      46 lines of code
      1 parameters
      4 conditional paths
      uses macro definition FOR_EACH_PTR_REVERSE defined in ptrlist.h
      uses variable instruction::bb defined in linearize.h
      uses variable basic_block::insns defined in linearize.h
      uses enumvalue OP_PHISOURCE defined in linearize.h
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable instruction::src defined in linearize.h
      uses variable src defined in sm_user_data3.c
      uses enumvalue OP_COPY defined in linearize.h
      uses variable token::pos defined in token.h
      uses macro definition INSERT_CURRENT defined in ptrlist.h
      uses function remove_phisrc_defines(struct instruction *) defined in unssa.c
      uses variable basic_block::defines defined in linearize.h
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses macro definition END_FOR_EACH_PTR_REVERSE defined in ptrlist.h
   function unssa(struct entrypoint *) in line 126
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
      uses macro definition FOR_EACH_PTR defined in ptrlist.h
      uses variable basic_block::ep defined in linearize.h
      uses variable entrypoint::bbs defined in linearize.h
      uses function rewrite_phi_bb(struct basic_block *) defined in unssa.c
      uses macro definition END_FOR_EACH_PTR defined in ptrlist.h
      uses function rewrite_phisrc_bb(struct basic_block *) defined in unssa.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/__func__.c
module __func__.c
   function f(void) in line 1
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/abstract-array-declarator-static.c
module abstract-array-declarator-static.c
   function f1(int) in line 2
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function f2(int) in line 3
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function f3(int) in line 4
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function f4(int) in line 5
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function f5(int) in line 6
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/address_space.c
module address_space.c
   macro definition __user in line 1
      protection public
   function poke_memory(void *) in line 3
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function sys_do_stuff(void __user *) in line 5
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function poke_memory(void *) defined in address_space.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/anon-union.c
module anon-union.c
   variable foo in line 5
      protection public
   variable s::@163 in line 4
      protection public
   variable s::i in line 2
      protection public
   variable s::val in line 3
      protection public
   variable s::@162::val in line 3
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/asm-empty-clobber.c
module asm-empty-clobber.c
   macro definition __ASM_FORM in line 2
      protection public
   macro definition JUMP_LABEL_INITIAL_NOP in line 3
      protection public
   macro definition __ASM_SEL in line 4
      protection public
   macro definition _ASM_PTR in line 5
      protection public
   macro definition JUMP_LABEL in line 7
      protection public
   function main(int,char *) in line 17
      protection public
      7 lines of code
      2 parameters
      1 conditional paths
      uses macro definition JUMP_LABEL defined in asm-empty-clobber.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/asm-goto-lables.c
module asm-goto-lables.c
   function __static_cpu_has(unsigned char) in line 1
      protection public
      18 lines of code
      1 parameters
      2 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/attr-noclone.c
module attr-noclone.c
   macro definition noclone in line 1
      protection public
   function bar(void) in line 3
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/attr-warning.c
module attr-warning.c
   macro definition __warndecl in line 1
      protection public
   function __warndecl(__warn_func,"warn message") in line 4
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/attr_in_parameter.c
module attr_in_parameter.c
   macro definition A in line 1
      protection public
   variable q in line 3
      protection public
   variable f in line 4
      protection public
   function int(A *) in line 2
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function g(int A *) in line 5
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable f defined in attr_in_parameter.c
      uses variable p defined in cond_expr2.c
      uses variable q defined in attr_in_parameter.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/attr_vector_size.c
module attr_vector_size.c
   typedef u32 in line 1
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/backend/arithmetic-ops.c
module arithmetic-ops.c
   function add(int,int) in line 1
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function uadd(unsigned int,unsigned int) in line 6
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function fadd(float,float) in line 11
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function dadd(double,double) in line 16
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function sub(int,int) in line 21
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function usub(unsigned int,unsigned int) in line 26
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function fsub(float,float) in line 31
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function dsub(double,double) in line 36
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function mul(int,int) in line 41
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function umul(unsigned int,unsigned int) in line 46
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function fmul(float,float) in line 51
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function dmul(double,double) in line 56
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function div(int,int) in line 61
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function udiv(unsigned int,unsigned int) in line 66
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function fdiv(float,float) in line 71
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function ddiv(double,double) in line 76
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function mod(int,int) in line 81
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function umod(unsigned int,unsigned int) in line 86
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/backend/array.c
module array.c
   variable array in line 1
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/backend/bitwise-ops.c
module bitwise-ops.c
   function shl(int,int) in line 1
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function ushl(unsigned int,unsigned int) in line 6
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function shr(int,int) in line 11
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function ushr(unsigned int,unsigned int) in line 16
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function and(int,int) in line 21
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function uand(unsigned int,unsigned int) in line 26
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function or(int,int) in line 31
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function uor(unsigned int,unsigned int) in line 36
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function xor(int,int) in line 41
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function uxor(unsigned int,unsigned int) in line 46
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function not(int) in line 51
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function unot(unsigned int) in line 56
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/backend/bool-test.c
module bool-test.c
   function return_false(void) in line 1
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/backend/cast.c
module cast.c
   macro definition DEFINE_CAST in line 9
      protection public
   macro definition DEFINE_CASTS in line 17
      protection public
   typedef bool in line 1
      protection public
   typedef uchar in line 2
      protection public
   typedef ushort in line 3
      protection public
   typedef uint in line 4
      protection public
   typedef ulong in line 5
      protection public
   typedef longlong in line 6
      protection public
   typedef ulonglong in line 7
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/backend/cmp-ops.c
module cmp-ops.c
   function sete(int,int) in line 1
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function setne(int,int) in line 6
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function setl(int,int) in line 11
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function setg(int,int) in line 16
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function setle(int,int) in line 21
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function setge(int,int) in line 26
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function setb(unsigned int,unsigned int) in line 31
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function seta(unsigned int,unsigned int) in line 36
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function setbe(unsigned int,unsigned int) in line 41
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function setae(unsigned int,unsigned int) in line 46
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function setfe(float,float) in line 51
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function setfne(float,float) in line 56
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function setfl(float,float) in line 61
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function setfg(float,float) in line 66
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function setfle(float,float) in line 71
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function setfge(float,float) in line 76
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/backend/extern.c
module extern.c
   variable foo in line 1
      protection public
   function bar(void) in line 3
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable foo defined in extern.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/backend/function-ptr.c
module function-ptr.c
   typedef fn_t in line 1
      protection public
   function run(fn_t,int,int) in line 3
      protection public
      4 lines of code
      3 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/backend/hello.c
module hello.c
   function main(int,char *) in line 3
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/backend/int-cond.c
module int-cond.c
   function foo(long,long,long) in line 1
      protection public
      4 lines of code
      3 parameters
      1 conditional paths
      uses variable c defined in sm_array_overflow.c
   function foo_bool(_Bool,long,long) in line 6
      protection public
      4 lines of code
      3 parameters
      1 conditional paths
      uses variable c defined in sm_array_overflow.c
   function bar(long,long,long) in line 11
      protection public
      7 lines of code
      3 parameters
      2 conditional paths
      uses macro definition b defined in preprocessor5.c
      uses variable c defined in sm_array_overflow.c
   function bar_bool(_Bool,long,long) in line 19
      protection public
      7 lines of code
      3 parameters
      2 conditional paths
      uses macro definition b defined in preprocessor5.c
      uses variable c defined in sm_array_overflow.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/backend/load-type.c
module load-type.c
   variable stdin in line 1
      protection public
   function sub(struct _IO_FILE *) in line 3
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function test(void) in line 5
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
      uses function sub(struct _IO_FILE *) defined in load-type.c
      uses variable stdin defined in load-type.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/backend/logical-ops.c
module logical-ops.c
   function and_bool(int,int) in line 1
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function uand_bool(unsigned int,unsigned int) in line 6
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function or_bool(int,int) in line 11
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function uor_bool(unsigned int,unsigned int) in line 16
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/backend/loop.c
module loop.c
   function bar(int) in line 2
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function foo(int) in line 4
      protection public
      10 lines of code
      1 parameters
      2 conditional paths
      uses function bar(int) defined in loop.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/backend/loop2.c
module loop2.c
   function op(void) in line 1
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function test(void) in line 3
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses function op(void) defined in loop2.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/backend/ptrcast.c
module ptrcast.c
   function ptrcast(unsigned long *) in line 1
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable x defined in binary-constant.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/backend/store-type.c
module store-type.c
   variable var in line 2
      protection public
   function set(struct foo *) in line 4
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable var defined in store-type.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/backend/struct-access.c
module struct-access.c
   function load_i(struct st *) in line 5
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable st::i defined in outer-scope.c
   function store_i(struct st *,int) in line 10
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses variable st::i defined in outer-scope.c
   function load_d(struct st *) in line 15
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable st::d defined in outer-scope.c
   function store_d(struct st *,int *) in line 20
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses variable st::d defined in outer-scope.c
   variable st::d in line 2
      protection public
   variable st::i in line 2
      protection public
   variable st::len in line 2
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/backend/struct.c
module struct.c
   variable sym in line 2
      protection public
   variable sym_p in line 17
      protection public
   variable sym_q in line 18
      protection public
   variable un in line 18
      protection public
   variable ctype::alignment in line 108
      protection public
   variable ctype::attribute in line 109
      protection public
   variable ctype::base_type in line 110
      protection public
   variable ctype::modifiers in line 107
      protection public
   variable ctype::type in line 2
      protection public
   variable symbol::@146 in line 156
      protection public
   variable symbol::@148 in line 196
      protection public
   variable symbol::@150 in line 204
      protection public
   variable symbol::arg_count in line 174
      protection public
   variable symbol::arglist in line 163
      protection public
   variable symbol::arguments in line 186
      protection public
   variable symbol::array_size in line 184
      protection public
   variable symbol::attr in line 146
      protection public
   variable symbol::aux in line 199
      protection public
   variable symbol::bb_target in line 198
      protection public
   variable symbol::bit_offset in line 173
      protection public
   variable symbol::bit_size in line 172
      protection public
   variable symbol::bound in line 146
      protection public
   variable symbol::ctype in line 184
      protection public
   variable symbol::definition in line 194
      protection public
   variable symbol::designated_init in line 181
      protection public
   variable symbol::endpos in line 146
      protection public
   variable symbol::enum_member in line 146
      protection public
   variable symbol::ep in line 192
      protection public
   variable symbol::evaluated in line 179
      protection public
   variable symbol::examined in line 177
      protection public
   variable symbol::expanding in line 178
      protection public
   variable symbol::expansion in line 162
      protection public
   variable symbol::forced_arg in line 182
      protection public
   variable symbol::handler in line 167
      protection public
   variable symbol::ident in line 149
      protection public
   variable symbol::initialized in line 176
      protection public
   variable symbol::initializer in line 191
      protection public
   variable symbol::inline_stmt in line 189
      protection public
   variable symbol::inline_symbol_list in line 190
      protection public
   variable symbol::kind in line 201
      protection public
   variable symbol::name in line 7
      protection public
   variable symbol::namespace in line 133
      protection public
   variable symbol::next_id in line 150
      protection public
   variable symbol::next_subobject in line 155
      protection public
   variable symbol::normal in line 168
      protection public
   variable symbol::offset in line 171
      protection public
   variable symbol::op in line 158
      protection public
   variable symbol::p in line 6
      protection public
   variable symbol::pos in line 146
      protection public
   variable symbol::pseudo in line 205
      protection public
   variable symbol::replace in line 151
      protection public
   variable symbol::same_symbol in line 154
      protection public
   variable symbol::scope in line 152
      protection public
   variable symbol::stmt in line 187
      protection public
   variable symbol::string in line 180
      protection public
   variable symbol::symbol_list in line 188
      protection public
   variable symbol::transparent_union in line 183
      protection public
   variable symbol::type in line 133
      protection public
   variable symbol::used in line 146
      protection public
   variable symbol::used_in in line 164
      protection public
   variable symbol::value in line 193
      protection public
   variable symbol::variadic in line 175
      protection public
   variable symbol::visited in line 202
      protection public
   variable unnamed::@165 in line 13
      protection public
   variable unnamed::x in line 13
      protection public
   variable unnamed::y in line 13
      protection public
   variable unnamed::@164::x in line 13
      protection public
   variable unnamed::@164::y in line 13
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/backend/sum.c
module sum.c
   function sum(int) in line 4
      protection public
      8 lines of code
      1 parameters
      2 conditional paths
   function main(int,char **) in line 13
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
      uses function printf(char *,...) defined in test-be.c
      uses function sum(int) defined in sum.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/backend/union.c
module union.c
   variable foo in line 13
      protection public
   variable foo::a in line 2
      protection public
   variable foo::a in line 14
      protection public
   variable foo::b in line 7
      protection public
   variable foo::buf in line 4
      protection public
   variable foo::buf in line 9
      protection public
   variable foo::count in line 6
      protection public
   variable foo::msg in line 7
      protection public
   variable foo::x in line 2
      protection public
   variable foo::x in line 2
      protection public
   variable foo::x in line 2
      protection public
   variable foo::y in line 1
      protection public
   variable foo::y in line 3
      protection public
   variable foo::z in line 8
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/backend/void-return-type.c
module void-return-type.c
   function foo(void) in line 1
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function bar(void *) in line 5
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable p defined in cond_expr2.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/bad-array-designated-initializer.c
module bad-array-designated-initializer.c
   variable a in line 1
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/bad-assignment.c
module bad-assignment.c
   function foo(int) in line 1
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses macro definition a defined in preprocessor5.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/bad-cast.c
module bad-cast.c
   function foo(int) in line 3
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses macro definition a defined in preprocessor5.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/bad-ternary-cond.c
module bad-ternary-cond.c
   function foo(int) in line 1
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/bad-typeof.c
module bad-typeof.c
   function fun(void) in line 1
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses macro definition a defined in preprocessor5.c
      uses macro definition b defined in preprocessor5.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/badtype1.c
module badtype1.c
   function foo(enum bar) in line 1
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/badtype2.c
module badtype2.c
   function bar(void) in line 2
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function foo(char *) in line 3
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses variable p defined in cond_expr2.c
      uses variable c defined in sm_array_overflow.c
      uses function bar(void) defined in badtype2.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/badtype3.c
module badtype3.c
   function foo(int(*)(undef, void *),void *) in line 2
      protection public
      9 lines of code
      2 parameters
      3 conditional paths
      uses macro definition func defined in preprocessor1.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/badtype4.c
module badtype4.c
   function a(void) in line 1
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/binary-constant.c
module binary-constant.c
   variable x in line 1
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/bitfields.c
module bitfields.c
   variable x in line 9
      protection public
   variable y in line 10
      protection public
   variable a in line 12
      protection public
   function b(void) in line 14
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   variable @166::x in line 9
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/bug_inline_switch.c
module bug_inline_switch.c
   macro definition __u16 in line 2
      protection public
   function foo(__u16) in line 3
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses function bar(__u16) defined in bug_inline_switch.c
   function f(__u16) in line 4
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function bar(__u16) in line 9
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses function f(__u16) defined in bug_inline_switch.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/builtin_atomic.c
module builtin_atomic.c
   function fn(void) in line 1
      protection public
      22 lines of code
      1 parameters
      1 conditional paths
      uses variable ptr defined in sm_null_deref2.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/builtin_bswap.c
module builtin_bswap.c
   variable x in line 1
      protection public
   variable y in line 2
      protection public
   variable z in line 3
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/builtin_char_bit.c
module builtin_char_bit.c
   variable word_bits in line 3
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/builtin_safe1.c
module builtin_safe1.c
   macro definition MY_MACRO in line 1
      protection public
   function g(int) in line 6
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable x defined in binary-constant.c
   function h(int) in line 7
      protection public
      19 lines of code
      1 parameters
      1 conditional paths
      uses macro definition MY_MACRO defined in builtin_safe1.c
      uses function g(int) defined in builtin_safe1.c
      uses variable x defined in binary-constant.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/builtin_unreachable.c
module builtin_unreachable.c
   function function_that_never_returns(void) in line 3
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function g(int) in line 5
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses variable c defined in sm_array_overflow.c
      uses function function_that_never_returns(void) defined in builtin_unreachable.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/builtin_va_arg_pack.c
module builtin_va_arg_pack.c
   function v(int,...) in line 1
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function __attribute__((__always_inline__)) in line 3
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable g defined in sm_compare3.c
      uses function v(int,...) defined in builtin_va_arg_pack.c
   function h(void) in line 13
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable g defined in sm_compare3.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/calling-convention-attributes.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/check_byte_count-ice.c
module check_byte_count-ice.c
   function memset(void *,int,int) in line 1
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function foo(void *) in line 3
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function memset(void *,int,int) defined in check_byte_count-ice.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/choose_expr.c
module choose_expr.c
   variable x in line 1
      protection public
   variable y in line 2
      protection public
   variable s in line 3
      protection public
   variable z in line 4
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/comma.c
module comma.c
   variable a in line 1
      protection public
   variable b in line 2
      protection public
   function f(void) in line 3
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses variable c defined in sm_array_overflow.c
      uses variable d defined in sm_array_overflow.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/compare-null-to-int.c
module compare-null-to-int.c
   variable comparison in line 1
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/cond_expr.c
module cond_expr.c
   variable x in line 6
      protection public
   variable y in line 7
      protection public
   function a(void) in line 8
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable x defined in cond_expr.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/cond_expr2.c
module cond_expr2.c
   variable p in line 1
      protection public
   variable q in line 2
      protection public
   variable r in line 3
      protection public
   function f(void) in line 4
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses variable q defined in cond_expr2.c
      uses variable p defined in cond_expr2.c
      uses variable r defined in cond_expr2.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/cond_expr3.c
module cond_expr3.c
   variable icmp in line 1
      protection public
   variable fcmp in line 2
      protection public
   variable lnot in line 3
      protection public
   variable land in line 4
      protection public
   variable lor in line 5
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/context.c
module context.c
   macro definition __cond_lock in line 1
      protection public
   macro definition ca in line 14
      protection public
   variable condition in line 100
      protection public
   variable condition2 in line 100
      protection public
   function a(void) in line 3
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function r(void) in line 8
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function _ca(int) defined in context.c
   function _ca(int) in line 13
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function good_paired1(void) in line 16
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function a(void) defined in context.c
      uses function r(void) defined in context.c
   function good_paired2(void) in line 22
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses function a(void) defined in context.c
      uses function r(void) defined in context.c
   function good_paired3(void) in line 30
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses function a(void) defined in context.c
      uses function r(void) defined in context.c
   function good_lock1(void) in line 38
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function a(void) defined in context.c
   function good_lock2(void) in line 43
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses function a(void) defined in context.c
      uses function r(void) defined in context.c
   function good_lock3(void) in line 50
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses function a(void) defined in context.c
      uses function r(void) defined in context.c
   function good_unlock1(void) in line 57
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function r(void) defined in context.c
   function good_unlock2(void) in line 62
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses function a(void) defined in context.c
      uses function r(void) defined in context.c
   function warn_lock1(void) in line 69
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function a(void) defined in context.c
   function warn_lock2(void) in line 74
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses function a(void) defined in context.c
      uses function r(void) defined in context.c
   function warn_lock3(void) in line 81
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses function a(void) defined in context.c
      uses function r(void) defined in context.c
   function warn_unlock1(void) in line 88
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function r(void) defined in context.c
   function warn_unlock2(void) in line 93
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses function a(void) defined in context.c
      uses function r(void) defined in context.c
      uses variable condition defined in context.c
      uses variable condition2 defined in context.c
   function good_if1(void) in line 102
      protection public
      10 lines of code
      1 parameters
      2 conditional paths
      uses function a(void) defined in context.c
      uses variable condition defined in context.c
      uses function r(void) defined in context.c
   function good_if2(void) in line 113
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses variable condition defined in context.c
      uses function a(void) defined in context.c
      uses function r(void) defined in context.c
   function good_if3(void) in line 121
      protection public
      9 lines of code
      1 parameters
      2 conditional paths
      uses function a(void) defined in context.c
      uses variable condition defined in context.c
      uses function r(void) defined in context.c
   function warn_if1(void) in line 131
      protection public
      8 lines of code
      1 parameters
      2 conditional paths
      uses function a(void) defined in context.c
      uses variable condition defined in context.c
      uses function r(void) defined in context.c
   function warn_if2(void) in line 140
      protection public
      9 lines of code
      1 parameters
      2 conditional paths
      uses function a(void) defined in context.c
      uses variable condition defined in context.c
      uses function r(void) defined in context.c
   function good_while1(void) in line 150
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses function a(void) defined in context.c
      uses variable condition defined in context.c
      uses function r(void) defined in context.c
   function good_while2(void) in line 158
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses variable condition defined in context.c
      uses function a(void) defined in context.c
      uses function r(void) defined in context.c
   function good_while3(void) in line 166
      protection public
      11 lines of code
      1 parameters
      3 conditional paths
      uses variable condition defined in context.c
      uses function a(void) defined in context.c
      uses function r(void) defined in context.c
      uses variable condition2 defined in context.c
   function good_while4(void) in line 178
      protection public
      10 lines of code
      1 parameters
      3 conditional paths
      uses function a(void) defined in context.c
      uses variable condition2 defined in context.c
      uses function r(void) defined in context.c
   function good_while5(void) in line 189
      protection public
      10 lines of code
      1 parameters
      3 conditional paths
      uses function a(void) defined in context.c
      uses function r(void) defined in context.c
      uses variable condition2 defined in context.c
   function warn_while1(void) in line 200
      protection public
      6 lines of code
      1 parameters
      2 conditional paths
      uses variable condition defined in context.c
      uses function a(void) defined in context.c
   function warn_while2(void) in line 207
      protection public
      6 lines of code
      1 parameters
      2 conditional paths
      uses variable condition defined in context.c
      uses function r(void) defined in context.c
   function warn_while3(void) in line 214
      protection public
      9 lines of code
      1 parameters
      3 conditional paths
      uses variable condition defined in context.c
      uses function a(void) defined in context.c
      uses variable condition2 defined in context.c
      uses function r(void) defined in context.c
   function good_goto1(void) in line 224
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses function a(void) defined in context.c
      uses function r(void) defined in context.c
   function good_goto2(void) in line 232
      protection public
      9 lines of code
      1 parameters
      2 conditional paths
      uses function a(void) defined in context.c
      uses function r(void) defined in context.c
   function good_goto3(void) in line 242
      protection public
      10 lines of code
      1 parameters
      3 conditional paths
      uses function a(void) defined in context.c
      uses variable condition defined in context.c
      uses function r(void) defined in context.c
   function good_goto4(void) in line 253
      protection public
      9 lines of code
      1 parameters
      3 conditional paths
      uses variable condition defined in context.c
      uses function a(void) defined in context.c
      uses function r(void) defined in context.c
   function good_goto5(void) in line 263
      protection public
      10 lines of code
      1 parameters
      3 conditional paths
      uses function a(void) defined in context.c
      uses variable condition defined in context.c
      uses function r(void) defined in context.c
   function warn_goto1(void) in line 274
      protection public
      8 lines of code
      1 parameters
      2 conditional paths
      uses function a(void) defined in context.c
      uses function r(void) defined in context.c
   function warn_goto2(void) in line 283
      protection public
      9 lines of code
      1 parameters
      2 conditional paths
      uses function a(void) defined in context.c
      uses function r(void) defined in context.c
   function warn_goto3(void) in line 293
      protection public
      9 lines of code
      1 parameters
      3 conditional paths
      uses function a(void) defined in context.c
      uses variable condition defined in context.c
      uses function r(void) defined in context.c
   function good_cond_lock1(void) in line 303
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses macro definition ca defined in context.c
      uses variable condition defined in context.c
      uses variable condition2 defined in context.c
      uses function r(void) defined in context.c
   function warn_cond_lock1(void) in line 311
      protection public
      6 lines of code
      1 parameters
      2 conditional paths
      uses macro definition ca defined in context.c
      uses variable condition defined in context.c
      uses variable condition2 defined in context.c
      uses function r(void) defined in context.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/declaration-after-statement-ansi.c
module declaration-after-statement-ansi.c
   function func(int) in line 1
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function j(x,T) defined in identifier_list.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/declaration-after-statement-c89.c
module declaration-after-statement-c89.c
   function func(int) in line 1
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function j(x,T) defined in identifier_list.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/declaration-after-statement-c99.c
module declaration-after-statement-c99.c
   function func(int) in line 1
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function j(x,T) defined in identifier_list.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/declaration-after-statement-default.c
module declaration-after-statement-default.c
   function func(int) in line 1
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function j(x,T) defined in identifier_list.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/definitions.c
module definitions.c
   function f(void) in line 1
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function g(void) in line 2
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function f(void) defined in definitions.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/designated-init.c
module designated-init.c
   variable x in line 7
      protection public
   variable y in line 8
      protection public
   variable __attribute__ in line 14
      protection public
   variable s1 in line 8
      protection public
   variable s2 in line 8
      protection public
   variable s1_positional in line 6
      protection public
   variable s1_designated in line 6
      protection public
   variable s2_positional in line 6
      protection public
   variable s2_designated in line 6
      protection public
   variable nest1_positional in line 6
      protection public
   variable nest1_designated_outer in line 6
      protection public
   variable nest1_designated_inner in line 6
      protection public
   variable nest1_designated_both in line 6
      protection public
   variable nest2_positional in line 6
      protection public
   variable nest2_designated_outer in line 6
      protection public
   variable nest2_designated_inner in line 6
      protection public
   variable nest2_designated_both in line 6
      protection public
   variable anon_designated in line 63
      protection public
   variable s1_array in line 63
      protection public
   variable s2_array in line 63
      protection public
   function __attribute__((designated_init)) in line 6
      protection public
      2 lines of code
      1 parameters
      1 conditional paths
   function ret_s1_positional(void) in line 63
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function ret_s1_designated(void) in line 63
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function ret_s2_positional(void) in line 63
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function ret_s2_designated(void) in line 63
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function ret_nest1_positional(void) in line 63
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
   function ret_nest1_designated_outer(void) in line 63
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
   function ret_nest1_designated_inner(void) in line 63
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
   function ret_nest1_designated_both(void) in line 63
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
   function ret_nest2_positional(void) in line 63
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
   function ret_nest2_designated_outer(void) in line 63
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
   function ret_nest2_designated_inner(void) in line 63
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
   function ret_nest2_designated_both(void) in line 63
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
   variable s1::x in line 2
      protection public
   variable s1::y in line 3
      protection public
   variable s2::x in line 7
      protection public
   variable s2::y in line 8
      protection public
   variable nest1::s1 in line 8
      protection public
   variable nest1::s2 in line 8
      protection public
   variable nest2::s1 in line 8
      protection public
   variable nest2::s2 in line 8
      protection public
   variable @167::x in line 59
      protection public
   variable @167::y in line 60
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/div.c
module div.c
   variable xd in line 3
      protection public
   variable xl in line 4
      protection public
   variable xll in line 5
      protection public
   variable yd in line 7
      protection public
   variable yl in line 8
      protection public
   variable yll in line 9
      protection public
   variable zd in line 11
      protection public
   variable zl in line 12
      protection public
   variable zll in line 13
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/double-semicolon.c
module double-semicolon.c
   function memset(void *,int,int) in line 1
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function test(void) in line 2
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses macro definition foo defined in preprocessor1.c
      uses function memset(void *,int,int) defined in double-semicolon.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/dubious-bitwise-with-not.c
module dubious-bitwise-with-not.c
   variable ok1 in line 1
      protection public
   variable bad1 in line 2
      protection public
   variable ok2 in line 3
      protection public
   variable bad2 in line 4
      protection public
   variable ok3 in line 5
      protection public
   variable bad3 in line 6
      protection public
   variable ok4 in line 7
      protection public
   variable bad4 in line 8
      protection public
   variable ok5 in line 9
      protection public
   variable bad5 in line 10
      protection public
   variable ok6 in line 11
      protection public
   variable bad6 in line 12
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/enum-common.c
module enum-common.c
   enumeration ENUM_TYPE_A in line 1
      protection public
   enumeration ENUM_TYPE_B in line 2
      protection public
   enumeration @168 in line 3
      protection public
   variable var_a in line 1
      protection public
   variable var_b in line 2
      protection public
   variable anon_enum_var in line 3
      protection public
   variable i in line 4
      protection public
   enumvalue VALUE_A in line 1
      protection public
   enumvalue VALUE_B in line 2
      protection public
   enumvalue VALUE_C in line 3
      protection public
   function take_enum_of_type_a(enum ENUM_TYPE_A) in line 6
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function void(x,int) defined in identifier_list.c
   function take_int(int) in line 11
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function void(x,int) defined in identifier_list.c
   function always_ok(void) in line 16
      protection public
      34 lines of code
      1 parameters
      4 conditional paths
      uses variable var_a defined in enum-common.c
      uses enumvalue VALUE_A defined in enum-common.c
      uses enumvalue VALUE_B defined in enum-common.c
      uses variable var_b defined in enum-common.c
      uses variable i defined in enum-common.c
      uses variable int defined in missing-ident.c
      uses variable anon_enum_var defined in enum-common.c
      uses enumvalue VALUE_C defined in enum-common.c
      uses function take_enum_of_type_a(enum ENUM_TYPE_A) defined in enum-common.c
      uses function take_int(int) defined in enum-common.c
   function trigger_enum_mismatch(void) in line 51
      protection public
      27 lines of code
      1 parameters
      4 conditional paths
      uses variable var_a defined in enum-common.c
      uses enumvalue VALUE_B defined in enum-common.c
      uses enumvalue VALUE_C defined in enum-common.c
      uses function take_enum_of_type_a(enum ENUM_TYPE_A) defined in enum-common.c
      uses variable var_b defined in enum-common.c
      uses variable anon_enum_var defined in enum-common.c
      uses enumvalue VALUE_A defined in enum-common.c
   function trigger_int_to_enum_conversion(void) in line 79
      protection public
      15 lines of code
      1 parameters
      2 conditional paths
      uses variable var_a defined in enum-common.c
      uses function take_enum_of_type_a(enum ENUM_TYPE_A) defined in enum-common.c
      uses variable i defined in enum-common.c
      uses variable var_b defined in enum-common.c
      uses variable anon_enum_var defined in enum-common.c
      uses variable int defined in missing-ident.c
      uses enumvalue VALUE_A defined in enum-common.c
      uses enumvalue VALUE_B defined in enum-common.c
   function trigger_enum_to_int_conversion(void) in line 95
      protection public
      12 lines of code
      1 parameters
      3 conditional paths
      uses variable i defined in enum-common.c
      uses variable var_a defined in enum-common.c
      uses enumvalue VALUE_B defined in enum-common.c
      uses enumvalue VALUE_A defined in enum-common.c
      uses function take_int(int) defined in enum-common.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/enum-from-int.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/enum-mismatch.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/enum-to-int.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/enum_scope.c
module enum_scope.c
   enumeration @169 in line 1
      protection public
   enumvalue A in line 1
      protection public
   function f(void) in line 3
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses enumvalue A defined in enum_scope.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/escapes.c
module escapes.c
   variable e in line 1
      protection public
   variable s in line 4
      protection public
   variable bad_e in line 6
      protection public
   variable a_hex in line 8
      protection public
   variable b_hex in line 9
      protection public
   variable c_hex in line 10
      protection public
   variable d_hex in line 11
      protection public
   variable a_oct in line 13
      protection public
   variable b_oct in line 14
      protection public
   variable c_oct in line 15
      protection public
   variable d_oct in line 16
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/extern-array.c
module extern-array.c
   variable v4l2_type_names in line 1
      protection public
   function test(void) in line 7
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable v4l2_type_names defined in extern-array.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/extern-inline.c
module extern-inline.c
   function f(int) in line 1
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable x defined in binary-constant.c
      uses function g(int) defined in extern-inline.c
   function g(int) in line 9
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable x defined in binary-constant.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/field-overlap.c
module field-overlap.c
   variable x in line 2
      protection public
   variable z in line 4
      protection public
   variable w in line 5
      protection public
   variable y in line 6
      protection public
   variable a in line 7
      protection public
   variable @170::x in line 2
      protection public
   variable @170::y in line 6
      protection public
   variable @170::@172::w in line 5
      protection public
   variable @170::@172::z in line 4
      protection public
   variable @171::x in line 9
      protection public
   variable @171::y in line 9
      protection public
   variable @171::z in line 9
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/fored_arg.c
module fored_arg.c
   macro definition __iomem in line 5
      protection public
   macro definition __force in line 6
      protection public
   function foo(__force void *) in line 8
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function bar(void) in line 13
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses macro definition __iomem defined in fored_arg.c
      uses macro definition a defined in preprocessor5.c
      uses function foo(__force void *) defined in fored_arg.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/foul-bitwise.c
module foul-bitwise.c
   typedef __attribute__ in line 1
      protection public
   function baz(__le16) in line 7
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function barf(__le16) in line 12
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function bar(__le16) in line 17
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses macro definition a defined in preprocessor5.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/function-pointer-modifier-inheritance.c
module function-pointer-modifier-inheritance.c
   function skb_append_datato_frags(struct sock *,struct sk_buff *,int ,void *,int) in line 4
      protection public
      1 lines of code
      5 parameters
      1 conditional paths
   function skb_append_datato_frags(struct sock *,struct sk_buff *,int(*)(void *from, char *to, int offset,                                                                       int len, int odd, struct sk_buff *skb),void *,int) in line 9
      protection public
      7 lines of code
      5 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/goto-label.c
module goto-label.c
   function foo(void) in line 1
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses macro definition a defined in preprocessor5.c
   function g(void) in line 9
      protection public
      6 lines of code
      1 parameters
      2 conditional paths
      uses macro definition a defined in preprocessor5.c
   function bar(void) in line 16
      protection public
      4 lines of code
      1 parameters
      2 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/identifier_list.c
module identifier_list.c
   typedef T in line 1
      protection public
   function f(...) in line 2
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function void(x,int) in line 3
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function j(x,T) in line 6
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/init-char-array.c
module init-char-array.c
   variable s in line 4
      protection public
   variable t in line 5
      protection public
   variable u in line 6
      protection public
   variable v in line 7
      protection public
   function f(void) in line 8
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses variable s defined in init-char-array.c
      uses variable u defined in init-char-array.c
      uses variable v defined in init-char-array.c
      uses variable w defined in field-overlap.c
      uses variable t defined in init-char-array.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/init-char-array1.c
module init-char-array1.c
   variable u in line 6
      protection public
   variable v in line 7
      protection public
   variable v1 in line 8
      protection public
   variable w in line 9
      protection public
   variable x in line 10
      protection public
   function f(void) in line 12
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses variable u defined in init-char-array1.c
      uses variable v defined in init-char-array1.c
      uses variable c defined in sm_array_overflow.c
      uses variable w defined in init-char-array1.c
      uses variable d defined in sm_array_overflow.c
      uses variable x defined in init-char-array1.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/init_cstring.c
module init_cstring.c
   variable x in line 3
      protection public
   variable alpha::a in line 2
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/initializer-entry-defined-twice.c
module initializer-entry-defined-twice.c
   variable struct_error in line 2
      protection public
   variable union_error in line 2
      protection public
   variable not_an_error in line 2
      protection public
   variable boolarray in line 49
      protection public
   variable normal::field1 in line 5
      protection public
   variable normal::field2 in line 6
      protection public
   variable has_union::a in line 18
      protection public
   variable has_union::b in line 19
      protection public
   variable has_union::x in line 16
      protection public
   variable has_union::y in line 20
      protection public
   variable has_union::z in line 21
      protection public
   variable has_union::@173::a in line 18
      protection public
   variable has_union::@173::b in line 19
      protection public
   variable same_offset::field1 in line 19
      protection public
   variable same_offset::field2 in line 37
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/inline_compound_literals.c
module inline_compound_literals.c
   function baz(void) in line 5
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function barf(void) in line 10
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function baz(void) defined in inline_compound_literals.c
   function foo(void) in line 15
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function baz(void) defined in inline_compound_literals.c
   variable foo::a in line 2
      protection public
   variable foo::a in line 14
      protection public
   variable foo::b in line 7
      protection public
   variable foo::buf in line 4
      protection public
   variable foo::buf in line 9
      protection public
   variable foo::count in line 6
      protection public
   variable foo::msg in line 7
      protection public
   variable foo::x in line 2
      protection public
   variable foo::x in line 2
      protection public
   variable foo::x in line 2
      protection public
   variable foo::y in line 1
      protection public
   variable foo::y in line 3
      protection public
   variable foo::z in line 8
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/integer-promotions.c
module integer-promotions.c
   function add_char(void) in line 1
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/ioc-typecheck.c
module ioc-typecheck.c
   macro definition _IOC_TYPECHECK in line 2
      protection public
   macro definition TEST_IOCTL in line 7
      protection public
   variable __invalid_size_argument_for_IOC in line 1
      protection public
   variable iocnrs in line 9
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/label-asm.c
module label-asm.c
   macro definition barrier in line 1
      protection public
   function f(void) in line 3
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses macro definition barrier defined in label-asm.c
      uses variable l defined in sm_casts4.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/label-attr.c
module label-attr.c
   function foo(void) in line 1
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/label-scope.c
module label-scope.c
   function f(int) in line 1
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
   function g(int) in line 6
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/local-label.c
module local-label.c
   function f(unsigned long) in line 1
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function g(void) in line 2
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses function f(unsigned long) defined in local-label.c
      uses variable x defined in binary-constant.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/logical.c
module logical.c
   function a(void) in line 1
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
   function b(void) in line 2
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function c(void) in line 3
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function or(void) in line 5
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function a(void) defined in logical.c
      uses function b(void) defined in logical.c
      uses function c(void) defined in logical.c
   function and(void) in line 10
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function a(void) defined in logical.c
      uses function b(void) defined in logical.c
      uses function c(void) defined in logical.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/member_of_typeof.c
module member_of_typeof.c
   variable v in line 1
      protection public
   function typeof(v) in line 2
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable p defined in cond_expr2.c
   variable foo::a in line 2
      protection public
   variable foo::a in line 14
      protection public
   variable foo::b in line 7
      protection public
   variable foo::buf in line 4
      protection public
   variable foo::buf in line 9
      protection public
   variable foo::count in line 6
      protection public
   variable foo::msg in line 7
      protection public
   variable foo::x in line 2
      protection public
   variable foo::x in line 2
      protection public
   variable foo::x in line 2
      protection public
   variable foo::y in line 1
      protection public
   variable foo::y in line 3
      protection public
   variable foo::z in line 8
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/missing-ident.c
module missing-ident.c
   variable int in line 1
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/multi_typedef.c
module multi_typedef.c
   typedef T in line 1
      protection public
   typedef P in line 1
      protection public
   function f(void) in line 2
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
   function g(void) in line 7
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/nested-declarator.c
module nested-declarator.c
   typedef T in line 1
      protection public
   variable p in line 13
      protection public
   function f(int) in line 2
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable x defined in binary-constant.c
      uses function g(int) defined in extern-inline.c
   function g(int) in line 3
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses variable int defined in missing-ident.c
      uses variable x defined in binary-constant.c
      uses function f(int) defined in nested-declarator.c
   function h(void) in line 9
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function i(void(void)*) in line 14
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function j(int(*)) in line 15
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/nested-declarator2.c
module nested-declarator2.c
   typedef T in line 1
      protection public
   variable f3 in line 4
      protection public
   variable f4 in line 5
      protection public
   variable bad3 in line 27
      protection public
   function f1(int) in line 2
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function f2(T) in line 3
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function f5(void(int)) in line 6
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function f6(void(T)) in line 7
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function z(int) in line 8
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses function int(x) defined in nested-declarator2.c
      uses variable x defined in binary-constant.c
      uses function f5(void(int)) defined in nested-declarator2.c
      uses function f2(T) defined in nested-declarator2.c
      uses function f6(void(T)) defined in nested-declarator2.c
      uses variable f3 defined in nested-declarator2.c
      uses function f8() defined in nested-declarator2.c
   function f8() in line 14
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function int(x) in line 15
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function w1(int) in line 16
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function w2(int()) defined in nested-declarator2.c
      uses function w3(...) defined in nested-declarator2.c
      uses function f9(__attribute__((mode(DI)))) defined in nested-declarator2.c
      uses enumvalue DI defined in compile-i386.c
      uses function w4(int ) defined in nested-declarator2.c
      uses function bad1(__attribute__((mode(DI)))) defined in nested-declarator2.c
      uses function int(x) defined in nested-declarator2.c
   function w2(int()) in line 21
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function w3(...) in line 22
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function f9(__attribute__((mode(DI)))) in line 23
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function w4(int ) in line 24
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function bad1(__attribute__((mode(DI)))) in line 25
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function int(-) in line 26
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/noderef.c
module noderef.c
   macro definition __A in line 1
      protection public
   function h(void) in line 12
      protection public
      31 lines of code
      1 parameters
      1 conditional paths
      uses macro definition __A defined in noderef.c
      uses variable p defined in cond_expr2.c
      uses variable r defined in cond_expr2.c
      uses variable x::a defined in noderef.c
      uses variable x::b defined in noderef.c
      uses variable y::a defined in noderef.c
   variable x::a in line 4
      protection public
   variable x::b in line 5
      protection public
   variable y::a in line 9
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/non-pointer-null.c
module non-pointer-null.c
   variable p in line 1
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/old-initializer-nowarn.c
module old-initializer-nowarn.c
   variable the_s in line 1
      protection public
   variable s::@163 in line 4
      protection public
   variable s::i in line 2
      protection public
   variable s::val in line 3
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/old-initializer.c
module old-initializer.c
   variable the_s in line 2
      protection public
   variable s::@163 in line 4
      protection public
   variable s::i in line 2
      protection public
   variable s::val in line 3
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/outer-scope.c
module outer-scope.c
   macro definition FOO in line 3
      protection public
   variable st::d in line 2
      protection public
   variable st::i in line 2
      protection public
   variable st::len in line 2
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/pragma-once.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/preprocessor/preprocessor1.c
module preprocessor1.c
   macro definition func in line 1
      protection public
   macro definition bar in line 2
      protection public
   macro definition foo in line 3
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/preprocessor/preprocessor10.c
module preprocessor10.c
   macro definition A in line 4
      protection public
   macro definition B in line 5
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/preprocessor/preprocessor11.c
module preprocessor11.c
   macro definition A in line 1
      protection public
   macro definition B in line 4
      protection public
   macro definition E in line 5
      protection public
   macro definition F in line 8
      protection public
   macro definition I in line 10
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/preprocessor/preprocessor12.c
module preprocessor12.c
   macro definition A in line 4
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/preprocessor/preprocessor13.c
module preprocessor13.c
   macro definition A in line 4
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/preprocessor/preprocessor14.c
module preprocessor14.c
   macro definition A in line 4
      protection public
   macro definition B in line 6
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/preprocessor/preprocessor15.c
module preprocessor15.c
   macro definition A in line 1
      protection public
   macro definition B in line 2
      protection public
   macro definition C in line 3
      protection public
   macro definition D in line 4
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/preprocessor/preprocessor16.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/preprocessor/preprocessor17.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/preprocessor/preprocessor18.c
module preprocessor18.c
   macro definition undef in line 3
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/preprocessor/preprocessor19.c
module preprocessor19.c
   macro definition A in line 3
      protection public
   macro definition A in line 4
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/preprocessor/preprocessor2.c
module preprocessor2.c
   macro definition TWO in line 1
      protection public
   macro definition UNARY in line 3
      protection public
   macro definition BINARY in line 4
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/preprocessor/preprocessor20.c
module preprocessor20.c
   macro definition X in line 2
      protection public
   macro definition Y in line 3
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/preprocessor/preprocessor20.h
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/preprocessor/preprocessor21.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/preprocessor/preprocessor22.c
module preprocessor22.c
   macro definition CONFIG_FOO in line 1
      protection public
   macro definition define_struct in line 3
      protection public
   function define_struct(a,{int b;}) in line 5
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/preprocessor/preprocessor23.c
module preprocessor23.c
   macro definition H in line 1
      protection public
   macro definition I in line 8
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/preprocessor/preprocessor3.c
module preprocessor3.c
   macro definition LP in line 9
      protection public
   macro definition A in line 11
      protection public
   macro definition B in line 12
      protection public
   macro definition SCAN in line 14
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/preprocessor/preprocessor4.c
module preprocessor4.c
   macro definition foo in line 1
      protection public
   macro definition mac in line 2
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/preprocessor/preprocessor5.c
module preprocessor5.c
   macro definition a in line 1
      protection public
   macro definition b in line 2
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/preprocessor/preprocessor6.c
module preprocessor6.c
   macro definition __devinitdata in line 15
      protection public
   macro definition VENDOR in line 17
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/preprocessor/preprocessor7.c
module preprocessor7.c
   macro definition A in line 1
      protection public
   macro definition D in line 2
      protection public
   macro definition C in line 3
      protection public
   macro definition E in line 4
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/preprocessor/preprocessor8.c
module preprocessor8.c
   macro definition A in line 1
      protection public
   macro definition B in line 2
      protection public
   macro definition C in line 3
      protection public
   macro definition D in line 4
      protection public
   macro definition E in line 5
      protection public
   macro definition F in line 6
      protection public
   macro definition G in line 7
      protection public
   macro definition H in line 8
      protection public
   macro definition I in line 9
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/preprocessor/preprocessor9.c
module preprocessor9.c
   macro definition A in line 4
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/preprocessor/stringify.c
module stringify.c
   macro definition A in line 1
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/preprocessor/wide.c
module preprocessor/wide.c
   macro definition A in line 1
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/wide.c
module wide.c
   variable c in line 1
      protection public
   variable n in line 2
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/reserved.c
module reserved.c
   function int(struct) in line 1
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function int(union) in line 2
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function int(enum) in line 3
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function int(volatile) in line 4
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function int(__volatile) in line 5
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function int(__volatile__) in line 6
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function int(__const) in line 8
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function int(__const__) in line 9
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function int(restrict) in line 10
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function int(__restrict) in line 11
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function int(__restrict__) in line 12
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function int(typedef) in line 13
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function int(__typeof) in line 14
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function int(__typeof__) in line 15
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function int(inline) in line 16
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function int(__inline) in line 17
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function int(__inline__) in line 18
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/restrict-array.c
module restrict-array.c
   macro definition __restrict_arr in line 1
      protection public
   function lio_listio64(int,struct aiocb64 *__const,int,struct sigevent *__restrict) in line 6
      protection public
      1 lines of code
      4 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/restricted-typeof.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/sizeof-bool.c
module sizeof-bool.c
   function a(void) in line 1
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/sizeof-compound-postfix.c
module sizeof-compound-postfix.c
   function a(void) in line 2
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   variable foo::a in line 2
      protection public
   variable foo::a in line 14
      protection public
   variable foo::b in line 7
      protection public
   variable foo::buf in line 4
      protection public
   variable foo::buf in line 9
      protection public
   variable foo::count in line 6
      protection public
   variable foo::msg in line 7
      protection public
   variable foo::x in line 2
      protection public
   variable foo::x in line 2
      protection public
   variable foo::x in line 2
      protection public
   variable foo::y in line 1
      protection public
   variable foo::y in line 3
      protection public
   variable foo::z in line 8
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/sm_absolute1.c
module sm_absolute1.c
   variable x in line 3
      protection public
   variable y in line 4
      protection public
   function func(void) in line 5
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses variable x defined in sm_absolute1.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/sm_absolute2.c
module sm_absolute2.c
   variable my_var in line 3
      protection public
   variable x in line 5
      protection public
   function func(int *) in line 6
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
      uses macro definition a defined in preprocessor5.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/sm_array_overflow.c
module sm_array_overflow.c
   variable a in line 1
      protection public
   variable b in line 2
      protection public
   variable c in line 3
      protection public
   variable d in line 4
      protection public
   variable x in line 6
      protection public
   function options_write(void) in line 7
      protection public
      28 lines of code
      1 parameters
      3 conditional paths
      uses variable str defined in sm_overflow6.c
      uses variable b defined in sm_array_overflow.c
      uses function frob(void) defined in sm_casts.c
      uses variable c defined in sm_array_overflow.c
      uses variable d defined in sm_array_overflow.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/sm_array_overflow2.c
module sm_array_overflow2.c
   macro definition ARRAY_SIZE in line 3
      protection public
   variable a in line 5
      protection public
   variable b in line 6
      protection public
   variable x in line 10
      protection public
   function main(void) in line 11
      protection public
      10 lines of code
      1 parameters
      4 conditional paths
      uses macro definition ARRAY_SIZE defined in sm_array_overflow2.c
      uses variable x defined in sm_array_overflow2.c
      uses function printf(char *,...) defined in test-be.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/sm_array_overflow3.c
module sm_array_overflow3.c
   macro definition ARRAY_SIZE in line 3
      protection public
   variable a in line 5
      protection public
   function main(void) in line 7
      protection public
      9 lines of code
      1 parameters
      2 conditional paths
      uses variable p defined in cond_expr2.c
      uses macro definition ARRAY_SIZE defined in sm_array_overflow3.c
      uses function printf(char *,...) defined in test-be.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/sm_array_overflow4.c
module sm_array_overflow4.c
   macro definition ARRAY_SIZE in line 4
      protection public
   variable a in line 6
      protection public
   function main(char *) in line 8
      protection public
      23 lines of code
      1 parameters
      1 conditional paths
      uses variable a defined in sm_array_overflow4.c
      uses variable buf defined in sm_fake_assignment.c
      uses function printf(char *,...) defined in test-be.c
      uses function strcpy(char *,char *,int) defined in sm_overflow3.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/sm_array_overflow5.c
module sm_array_overflow5.c
   function kmalloc(int,int) in line 5
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function main(void) in line 12
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses variable p defined in cond_expr2.c
      uses function kmalloc(int,int) defined in sm_array_overflow5.c
   variable foo::a in line 2
      protection public
   variable foo::a in line 14
      protection public
   variable foo::b in line 7
      protection public
   variable foo::buf in line 4
      protection public
   variable foo::buf in line 9
      protection public
   variable foo::count in line 6
      protection public
   variable foo::msg in line 7
      protection public
   variable foo::x in line 2
      protection public
   variable foo::x in line 2
      protection public
   variable foo::x in line 2
      protection public
   variable foo::y in line 1
      protection public
   variable foo::y in line 3
      protection public
   variable foo::z in line 8
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/sm_bitwise1.c
module sm_bitwise1.c
   variable x in line 3
      protection public
   function test(void) in line 4
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/sm_bitwise2.c
module sm_bitwise2.c
   variable x in line 3
      protection public
   variable y in line 4
      protection public
   function test(void) in line 5
      protection public
      8 lines of code
      1 parameters
      3 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/sm_buf_size1.c
module sm_buf_size1.c
   function func(void) in line 3
      protection public
      12 lines of code
      1 parameters
      1 conditional paths
      uses variable c defined in sm_array_overflow.c
      uses variable d defined in sm_array_overflow.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/sm_buf_size2.c
module sm_buf_size2.c
   function malloc(int) in line 3
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function func(void) in line 5
      protection public
      13 lines of code
      1 parameters
      1 conditional paths
      uses macro definition a defined in preprocessor5.c
      uses macro definition b defined in preprocessor5.c
      uses variable c defined in sm_array_overflow.c
      uses function malloc(int) defined in sm_buf_size2.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/sm_buf_size3.c
module sm_buf_size3.c
   function malloc(int) in line 3
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function func(void) in line 5
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses macro definition a defined in preprocessor5.c
      uses function malloc(int) defined in sm_buf_size3.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/sm_buf_size4.c
module sm_buf_size4.c
   variable a in line 3
      protection public
   variable b in line 4
      protection public
   function main(char *) in line 6
      protection public
      9 lines of code
      1 parameters
      1 conditional paths
      uses variable a defined in sm_buf_size4.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/sm_buf_size5.c
module sm_buf_size5.c
   function function(void) in line 8
      protection public
      11 lines of code
      1 parameters
      1 conditional paths
      uses variable foo::buf defined in sm_switch2.c
      uses variable foo::x defined in sm_switch2.c
   variable foo::a in line 2
      protection public
   variable foo::a in line 14
      protection public
   variable foo::b in line 7
      protection public
   variable foo::buf in line 4
      protection public
   variable foo::buf in line 9
      protection public
   variable foo::count in line 6
      protection public
   variable foo::msg in line 7
      protection public
   variable foo::x in line 2
      protection public
   variable foo::x in line 2
      protection public
   variable foo::x in line 2
      protection public
   variable foo::y in line 1
      protection public
   variable foo::y in line 3
      protection public
   variable foo::z in line 8
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/sm_buf_size6.c
module sm_buf_size6.c
   function malloc(int) in line 3
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function function(void) in line 5
      protection public
      15 lines of code
      1 parameters
      1 conditional paths
      uses variable p defined in cond_expr2.c
      uses function malloc(int) defined in sm_buf_size6.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/sm_buf_size7.c
module sm_buf_size7.c
   function test(void) in line 3
      protection public
      12 lines of code
      1 parameters
      1 conditional paths
      uses variable c defined in sm_array_overflow.c
      uses variable d defined in sm_array_overflow.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/sm_buf_size8.c
module sm_buf_size8.c
   function test(void) in line 26
      protection public
      19 lines of code
      1 parameters
      1 conditional paths
      uses variable p defined in cond_expr2.c
      uses variable foo::a defined in sm_switch2.c
      uses variable foo::b defined in sm_switch2.c
      uses function malloc(int) defined in sm_buf_size2.c
   variable foo::a in line 2
      protection public
   variable foo::a in line 14
      protection public
   variable foo::b in line 7
      protection public
   variable foo::buf in line 4
      protection public
   variable foo::buf in line 9
      protection public
   variable foo::count in line 6
      protection public
   variable foo::msg in line 7
      protection public
   variable foo::x in line 2
      protection public
   variable foo::x in line 2
      protection public
   variable foo::x in line 2
      protection public
   variable foo::y in line 1
      protection public
   variable foo::y in line 3
      protection public
   variable foo::z in line 8
      protection public
   variable bar::count in line 12
      protection public
   variable bar::msg in line 13
      protection public
   variable bar::x in line 11
      protection public
   variable bar::y in line 11
      protection public
   variable bar::z in line 11
      protection public
   variable outer1::foo in line 17
      protection public
   variable outer1::x in line 17
      protection public
   variable outer1::y in line 17
      protection public
   variable outer1::z in line 17
      protection public
   variable outer2::bar in line 22
      protection public
   variable outer2::x in line 22
      protection public
   variable outer2::y in line 22
      protection public
   variable outer2::z in line 22
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/sm_casts.c
module sm_casts.c
   function frob(void) in line 1
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function options_write(void) in line 3
      protection public
      21 lines of code
      1 parameters
      5 conditional paths
      uses macro definition a defined in preprocessor5.c
      uses macro definition b defined in preprocessor5.c
      uses variable c defined in sm_array_overflow.c
      uses function frob(void) defined in sm_casts.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/sm_casts2.c
module sm_casts2.c
   variable a in line 5
      protection public
   variable b in line 6
      protection public
   variable c in line 7
      protection public
   variable d in line 8
      protection public
   function frob(void) in line 3
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function main(void) in line 9
      protection public
      17 lines of code
      1 parameters
      7 conditional paths
      uses function frob(void) defined in sm_casts2.c
      uses variable c defined in sm_casts2.c
      uses variable d defined in sm_casts2.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/sm_casts3.c
module sm_casts3.c
   variable a in line 3
      protection public
   variable b in line 4
      protection public
   function func(void) in line 5
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses variable a defined in sm_casts3.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/sm_casts4.c
module sm_casts4.c
   variable l in line 5
      protection public
   variable ul in line 6
      protection public
   variable i in line 7
      protection public
   variable ui in line 8
      protection public
   variable c in line 9
      protection public
   variable uc in line 10
      protection public
   function main(void) in line 12
      protection public
      26 lines of code
      1 parameters
      7 conditional paths
      uses variable c defined in sm_casts4.c
      uses variable uc defined in sm_casts4.c
      uses variable i defined in sm_casts4.c
      uses variable ui defined in sm_casts4.c
      uses variable l defined in sm_casts4.c
      uses variable ul defined in sm_casts4.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/sm_casts5.c
module sm_casts5.c
   variable l in line 5
      protection public
   variable ul in line 6
      protection public
   variable i in line 7
      protection public
   variable ui in line 8
      protection public
   variable c in line 9
      protection public
   variable uc in line 10
      protection public
   function main(void) in line 12
      protection public
      26 lines of code
      1 parameters
      7 conditional paths
      uses variable c defined in sm_casts5.c
      uses variable uc defined in sm_casts5.c
      uses variable i defined in sm_casts5.c
      uses variable ui defined in sm_casts5.c
      uses variable l defined in sm_casts5.c
      uses variable ul defined in sm_casts5.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/sm_casts6.c
module sm_casts6.c
   variable l in line 5
      protection public
   variable ul in line 6
      protection public
   variable i in line 7
      protection public
   variable ui in line 8
      protection public
   variable c in line 9
      protection public
   variable uc in line 10
      protection public
   function main(void) in line 12
      protection public
      26 lines of code
      1 parameters
      7 conditional paths
      uses variable c defined in sm_casts6.c
      uses variable uc defined in sm_casts6.c
      uses variable i defined in sm_casts6.c
      uses variable ui defined in sm_casts6.c
      uses variable l defined in sm_casts6.c
      uses variable ul defined in sm_casts6.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/sm_casts7.c
module sm_casts7.c
   variable a in line 5
      protection public
   variable x in line 6
      protection public
   function main(void) in line 8
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/sm_check_kunmap.c
module sm_check_kunmap.c
   variable page in line 8
      protection public
   variable x in line 9
      protection public
   variable y in line 10
      protection public
   variable z in line 11
      protection public
   function something() in line 1
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function kmap(int) in line 3
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function kunmap(int) in line 4
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function kmap_atomic(int) in line 5
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function kunmap_atomic(int) in line 6
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function func(void) in line 13
      protection public
      9 lines of code
      1 parameters
      1 conditional paths
      uses function kmap(int) defined in sm_check_kunmap.c
      uses variable page defined in sm_check_kunmap.c
      uses function kunmap(int) defined in sm_check_kunmap.c
      uses function kmap_atomic(int) defined in sm_check_kunmap.c
      uses variable z defined in sm_check_kunmap.c
      uses function kunmap_atomic(int) defined in sm_check_kunmap.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/sm_chunk1.c
module sm_chunk1.c
   function perf_calculate_period(unsigned long,unsigned long) in line 3
      protection public
      9 lines of code
      2 parameters
      2 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/sm_chunk2.c
module sm_chunk2.c
   function initialize(void *) in line 3
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function main(int) in line 5
      protection public
      23 lines of code
      1 parameters
      3 conditional paths
      uses variable aaa defined in sm_compound_conditions2.c
      uses function initialize(void *) defined in sm_chunk2.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/sm_compare.c
module sm_compare.c
   variable a in line 3
      protection public
   variable b in line 3
      protection public
   variable c in line 3
      protection public
   function frob(void) in line 5
      protection public
      22 lines of code
      1 parameters
      8 conditional paths
      uses variable c defined in sm_compare.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/sm_compare10.c
module sm_compare10.c
   variable a in line 3
      protection public
   variable b in line 3
      protection public
   variable c in line 3
      protection public
   function options_write(void) in line 4
      protection public
      8 lines of code
      1 parameters
      3 conditional paths
      uses variable c defined in sm_compare10.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/sm_compare11.c
module sm_compare11.c
   variable a in line 3
      protection public
   variable b in line 3
      protection public
   variable c in line 3
      protection public
   variable d in line 3
      protection public
   function options_write(void) in line 4
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses variable d defined in sm_compare11.c
      uses variable c defined in sm_compare11.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/sm_compare12.c
module sm_compare12.c
   macro definition min_t in line 3
      protection public
   variable a in line 8
      protection public
   variable b in line 8
      protection public
   variable c in line 8
      protection public
   variable d in line 8
      protection public
   function options_write(void) in line 9
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses macro definition min_t defined in sm_compare12.c
      uses variable c defined in sm_compare12.c
      uses variable d defined in sm_compare12.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/sm_compare13.c
module sm_compare13.c
   function cmp_x(int,int) in line 5
      protection public
      13 lines of code
      2 parameters
      3 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/sm_compare14.c
module sm_compare14.c
   variable x in line 14
      protection public
   variable y in line 14
      protection public
   function cmp_x(int,int) in line 5
      protection public
      8 lines of code
      2 parameters
      3 conditional paths
   function test(void) in line 15
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses function cmp_x(int,int) defined in sm_compare14.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/sm_compare15.c
module sm_compare15.c
   variable a in line 10
      protection public
   function __fswab(int) in line 5
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable x defined in binary-constant.c
   function cmp_x(int,int) in line 11
      protection public
      6 lines of code
      2 parameters
      2 conditional paths
      uses function __fswab(int) defined in sm_compare15.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/sm_compare16.c
module sm_compare16.c
   variable a in line 10
      protection public
   function return_x(int) in line 5
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable x defined in binary-constant.c
   function cmp_x(int,int) in line 11
      protection public
      6 lines of code
      2 parameters
      2 conditional paths
      uses function return_x(int) defined in sm_compare16.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/sm_compare2.c
module sm_compare2.c
   variable a in line 3
      protection public
   variable b in line 3
      protection public
   variable c in line 3
      protection public
   function main(void) in line 5
      protection public
      23 lines of code
      1 parameters
      6 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/sm_compare3.c
module sm_compare3.c
   variable a in line 5
      protection public
   variable b in line 5
      protection public
   variable c in line 5
      protection public
   variable d in line 5
      protection public
   variable e in line 6
      protection public
   variable f in line 6
      protection public
   variable g in line 6
      protection public
   function main(void) in line 7
      protection public
      25 lines of code
      1 parameters
      5 conditional paths
      uses variable c defined in sm_compare3.c
      uses variable a defined in sm_compare3.c
      uses variable g defined in sm_compare3.c
      uses variable e defined in sm_compare3.c
      uses variable f defined in sm_compare3.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/sm_compare4.c
module sm_compare4.c
   variable a in line 5
      protection public
   variable b in line 5
      protection public
   variable c in line 5
      protection public
   variable d in line 5
      protection public
   function some_func(void) in line 3
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function func(void) in line 7
      protection public
      17 lines of code
      1 parameters
      5 conditional paths
      uses variable d defined in sm_compare4.c
      uses function some_func(void) defined in sm_compare4.c
      uses variable c defined in sm_compare4.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/sm_compare5.c
module sm_compare5.c
   variable a in line 3
      protection public
   variable b in line 3
      protection public
   variable c in line 3
      protection public
   variable d in line 3
      protection public
   function func(void) in line 4
      protection public
      14 lines of code
      1 parameters
      3 conditional paths
      uses variable c defined in sm_compare5.c
      uses variable d defined in sm_compare5.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/sm_compare6.c
module sm_compare6.c
   function returns_less(int) in line 3
      protection public
      12 lines of code
      1 parameters
      2 conditional paths
      uses variable x defined in binary-constant.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/sm_compare7.c
module sm_compare7.c
   variable a in line 3
      protection public
   variable b in line 3
      protection public
   variable c in line 3
      protection public
   variable e in line 3
      protection public
   variable f in line 3
      protection public
   variable g in line 3
      protection public
   function options_write(void) in line 4
      protection public
      11 lines of code
      1 parameters
      3 conditional paths
      uses variable c defined in sm_compare7.c
      uses variable f defined in sm_compare7.c
      uses variable e defined in sm_compare7.c
      uses variable g defined in sm_compare7.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/sm_compare8.c
module sm_compare8.c
   variable a in line 3
      protection public
   variable b in line 3
      protection public
   function options_write(void) in line 4
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/sm_compare9.c
module sm_compare9.c
   variable a in line 3
      protection public
   variable b in line 3
      protection public
   function options_write(void) in line 4
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/sm_compound_condition.c
module sm_compound_condition.c
   variable a in line 5
      protection public
   variable b in line 6
      protection public
   function func(void) in line 8
      protection public
      12 lines of code
      1 parameters
      3 conditional paths
   variable ture::a in line 2
      protection public
   variable ture::a in line 4
      protection public
   variable ture::skb in line 8
      protection public
   variable ture::x in line 4
      protection public
   variable ture::y in line 4
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/sm_compound_conditions2.c
module sm_compound_conditions2.c
   variable aaa in line 3
      protection public
   variable x in line 4
      protection public
   variable y in line 4
      protection public
   variable z in line 4
      protection public
   function func(void) in line 6
      protection public
      45 lines of code
      1 parameters
      14 conditional paths
      uses variable aaa defined in sm_compound_conditions2.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/sm_compound_conditions3.c
module sm_compound_conditions3.c
   variable aaa in line 3
      protection public
   function func(void) in line 5
      protection public
      14 lines of code
      1 parameters
      4 conditional paths
      uses variable aaa defined in sm_compound_conditions3.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/sm_deref_check_deref.c
module sm_deref_check_deref.c
   variable x in line 8
      protection public
   variable px in line 9
      protection public
   variable y in line 10
      protection public
   function func(void) in line 11
      protection public
      18 lines of code
      1 parameters
      5 conditional paths
      uses variable x::a defined in noderef.c
      uses variable c defined in sm_array_overflow.c
      uses variable y::a defined in noderef.c
      uses variable d defined in sm_array_overflow.c
      uses function frob(void) defined in sm_casts.c
      uses variable px defined in sm_deref_check_deref.c
   variable ture::a in line 2
      protection public
   variable ture::a in line 4
      protection public
   variable ture::skb in line 8
      protection public
   variable ture::x in line 4
      protection public
   variable ture::y in line 4
      protection public
   variable cont::x in line 5
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/sm_dev_hold.c
module sm_dev_hold.c
   variable y in line 5
      protection public
   variable z in line 5
      protection public
   variable x in line 6
      protection public
   function dev_hold(int *) in line 1
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function dev_put(int *) in line 3
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses variable y defined in sm_dev_hold.c
      uses variable z defined in sm_dev_hold.c
   function func(void) in line 8
      protection public
      12 lines of code
      1 parameters
      3 conditional paths
      uses function dev_hold(int *) defined in sm_dev_hold.c
      uses function dev_put(int *) defined in sm_dev_hold.c
      uses variable z defined in sm_dev_hold.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/sm_double_free1.c
module sm_double_free1.c
   function func(void) in line 3
      protection public
      11 lines of code
      1 parameters
      1 conditional paths
      uses variable x defined in binary-constant.c
      uses function malloc(int) defined in sm_buf_size2.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/sm_double_free2.c
module sm_double_free2.c
   function func(void) in line 7
      protection public
      14 lines of code
      1 parameters
      2 conditional paths
      uses variable ture::x defined in sm_skb.c
      uses function malloc(int) defined in sm_buf_size2.c
      uses variable x::a defined in noderef.c
   variable ture::a in line 2
      protection public
   variable ture::a in line 4
      protection public
   variable ture::skb in line 8
      protection public
   variable ture::x in line 4
      protection public
   variable ture::y in line 4
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/sm_efault.c
module sm_efault.c
   function clear_user() in line 3
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function func(int *) in line 5
      protection public
      9 lines of code
      1 parameters
      2 conditional paths
      uses function clear_user() defined in sm_efault.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/sm_equiv1.c
module sm_equiv1.c
   variable one in line 5
      protection public
   variable two in line 6
      protection public
   function something() in line 3
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function func(void) in line 7
      protection public
      19 lines of code
      1 parameters
      3 conditional paths
      uses variable one defined in sm_equiv1.c
      uses function something() defined in sm_equiv1.c
      uses variable two defined in sm_equiv1.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/sm_equiv2.c
module sm_equiv2.c
   variable red in line 5
      protection public
   variable blue in line 6
      protection public
   variable x in line 7
      protection public
   function something() in line 3
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function func(void) in line 8
      protection public
      17 lines of code
      1 parameters
      3 conditional paths
      uses variable red defined in sm_equiv2.c
      uses variable blue defined in sm_equiv2.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/sm_equiv3.c
module sm_equiv3.c
   variable red in line 6
      protection public
   variable blue in line 7
      protection public
   variable x in line 8
      protection public
   function something() in line 3
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function frob(void) in line 4
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function func(void) in line 9
      protection public
      17 lines of code
      1 parameters
      4 conditional paths
      uses variable red defined in sm_equiv3.c
      uses function something() defined in sm_equiv3.c
      uses variable blue defined in sm_equiv3.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/sm_equiv4.c
module sm_equiv4.c
   variable a in line 6
      protection public
   variable b in line 6
      protection public
   variable c in line 6
      protection public
   function ioremap() in line 3
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function iounmap(void *) in line 4
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function func(void) in line 7
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses function ioremap() defined in sm_equiv4.c
      uses variable c defined in sm_equiv4.c
      uses variable a defined in sm_equiv4.c
      uses function iounmap(void *) defined in sm_equiv4.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/sm_err_ptr.c
module sm_err_ptr.c
   function add_inode() in line 3
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function IS_ERR(void *) in line 4
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function main(void) in line 6
      protection public
      12 lines of code
      1 parameters
      2 conditional paths
      uses variable p defined in cond_expr2.c
      uses function add_inode() defined in sm_err_ptr.c
      uses function IS_ERR(void *) defined in sm_err_ptr.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/sm_fake_assignment.c
module sm_fake_assignment.c
   variable outside in line 6
      protection public
   variable buf in line 6
      protection public
   function test(void) in line 13
      protection public
      11 lines of code
      1 parameters
      1 conditional paths
      uses variable ture::a defined in sm_skb.c
      uses macro definition b defined in preprocessor5.c
      uses variable buf defined in sm_fake_assignment.c
      uses variable outside defined in sm_fake_assignment.c
   variable ture::a in line 2
      protection public
   variable ture::a in line 4
      protection public
   variable ture::skb in line 8
      protection public
   variable ture::x in line 4
      protection public
   variable ture::y in line 4
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/sm_get_user1.c
module sm_get_user1.c
   macro definition get_user in line 4
      protection public
   function frob(void) in line 3
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function func(void) in line 6
      protection public
      22 lines of code
      1 parameters
      3 conditional paths
      uses macro definition foo defined in preprocessor1.c
      uses macro definition bar defined in preprocessor1.c
      uses variable x defined in binary-constant.c
      uses macro definition get_user defined in sm_get_user1.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/sm_implied.c
module sm_implied.c
   variable a in line 5
      protection public
   variable b in line 6
      protection public
   function func(void) in line 8
      protection public
      15 lines of code
      1 parameters
      4 conditional paths
      uses variable ture::x defined in sm_skb.c
      uses variable ture::a defined in sm_skb.c
   variable ture::a in line 2
      protection public
   variable ture::a in line 4
      protection public
   variable ture::skb in line 8
      protection public
   variable ture::x in line 4
      protection public
   variable ture::y in line 4
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/sm_implied10.c
module sm_implied10.c
   variable x in line 5
      protection public
   variable offset in line 6
      protection public
   function frob(void) in line 3
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function func(int *) in line 7
      protection public
      13 lines of code
      1 parameters
      3 conditional paths
      uses variable test2 defined in sm_implied8.c
      uses function frob(void) defined in sm_implied10.c
      uses variable offset defined in sm_implied10.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/sm_implied11.c
module sm_implied11.c
   variable foo in line 9
      protection public
   function frob(void) in line 7
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ad_agg_selection_logic(void) in line 11
      protection public
      16 lines of code
      1 parameters
      4 conditional paths
      uses variable foo::a defined in sm_switch2.c
      uses variable foo::x defined in sm_switch2.c
      uses function frob(void) defined in sm_implied11.c
   variable foo::a in line 2
      protection public
   variable foo::a in line 14
      protection public
   variable foo::b in line 7
      protection public
   variable foo::buf in line 4
      protection public
   variable foo::buf in line 9
      protection public
   variable foo::count in line 6
      protection public
   variable foo::msg in line 7
      protection public
   variable foo::x in line 2
      protection public
   variable foo::x in line 2
      protection public
   variable foo::x in line 2
      protection public
   variable foo::y in line 1
      protection public
   variable foo::y in line 3
      protection public
   variable foo::z in line 8
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/sm_implied12.c
module sm_implied12.c
   variable foo in line 9
      protection public
   variable x in line 11
      protection public
   function frob(void) in line 7
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ad_agg_selection_logic(void) in line 13
      protection public
      18 lines of code
      1 parameters
      5 conditional paths
      uses variable foo::a defined in sm_switch2.c
      uses variable foo::x defined in sm_switch2.c
      uses function frob(void) defined in sm_implied12.c
   variable foo::a in line 2
      protection public
   variable foo::a in line 14
      protection public
   variable foo::b in line 7
      protection public
   variable foo::buf in line 4
      protection public
   variable foo::buf in line 9
      protection public
   variable foo::count in line 6
      protection public
   variable foo::msg in line 7
      protection public
   variable foo::x in line 2
      protection public
   variable foo::x in line 2
      protection public
   variable foo::x in line 2
      protection public
   variable foo::y in line 1
      protection public
   variable foo::y in line 3
      protection public
   variable foo::z in line 8
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/sm_implied13.c
module sm_implied13.c
   function main(int) in line 3
      protection public
      12 lines of code
      1 parameters
      3 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/sm_implied2.c
module sm_implied2.c
   variable a in line 5
      protection public
   variable b in line 6
      protection public
   variable c in line 7
      protection public
   function func(void) in line 9
      protection public
      25 lines of code
      1 parameters
      6 conditional paths
      uses variable c defined in sm_implied2.c
      uses variable ture::a defined in sm_skb.c
   variable ture::a in line 2
      protection public
   variable ture::a in line 4
      protection public
   variable ture::skb in line 8
      protection public
   variable ture::x in line 4
      protection public
   variable ture::y in line 4
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/sm_implied3.c
module sm_implied3.c
   macro definition NULL in line 1
      protection public
   variable b in line 7
      protection public
   variable c in line 8
      protection public
   function func(void) in line 10
      protection public
      23 lines of code
      1 parameters
      7 conditional paths
      uses macro definition foo defined in preprocessor1.c
      uses variable c defined in sm_implied3.c
      uses function some_func(void) defined in sm_compare4.c
      uses macro definition NULL defined in sm_implied3.c
      uses variable ture::a defined in sm_skb.c
   variable ture::a in line 2
      protection public
   variable ture::a in line 4
      protection public
   variable ture::skb in line 8
      protection public
   variable ture::x in line 4
      protection public
   variable ture::y in line 4
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/sm_implied4.c
module sm_implied4.c
   variable a in line 5
      protection public
   variable b in line 6
      protection public
   variable c in line 7
      protection public
   function _spin_lock(int) in line 1
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function _spin_unlock(int) in line 2
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function frob(void) in line 4
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function func(void) in line 8
      protection public
      19 lines of code
      1 parameters
      7 conditional paths
      uses function _spin_lock(int) defined in sm_implied4.c
      uses function frob(void) defined in sm_implied4.c
      uses function _spin_unlock(int) defined in sm_implied4.c
      uses variable c defined in sm_implied4.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/sm_implied5.c
module sm_implied5.c
   variable out_a in line 5
      protection public
   function func(void) in line 7
      protection public
      13 lines of code
      1 parameters
      3 conditional paths
      uses variable out_a defined in sm_implied5.c
      uses function something() defined in sm_check_kunmap.c
      uses variable ture::a defined in sm_skb.c
   variable ture::a in line 2
      protection public
   variable ture::a in line 4
      protection public
   variable ture::skb in line 8
      protection public
   variable ture::x in line 4
      protection public
   variable ture::y in line 4
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/sm_implied6.c
module sm_implied6.c
   variable a in line 5
      protection public
   variable b in line 6
      protection public
   variable c in line 7
      protection public
   variable d in line 8
      protection public
   variable x in line 9
      protection public
   variable y in line 9
      protection public
   variable z in line 9
      protection public
   function func(void) in line 11
      protection public
      23 lines of code
      1 parameters
      4 conditional paths
      uses variable c defined in sm_implied6.c
      uses variable d defined in sm_implied6.c
      uses variable foo::a defined in sm_switch2.c
   variable foo::a in line 2
      protection public
   variable foo::a in line 14
      protection public
   variable foo::b in line 7
      protection public
   variable foo::buf in line 4
      protection public
   variable foo::buf in line 9
      protection public
   variable foo::count in line 6
      protection public
   variable foo::msg in line 7
      protection public
   variable foo::x in line 2
      protection public
   variable foo::x in line 2
      protection public
   variable foo::x in line 2
      protection public
   variable foo::y in line 1
      protection public
   variable foo::y in line 3
      protection public
   variable foo::z in line 8
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/sm_implied7.c
module sm_implied7.c
   variable a in line 2
      protection public
   variable b in line 2
      protection public
   variable c in line 2
      protection public
   function frob(void) in line 3
      protection public
      10 lines of code
      1 parameters
      3 conditional paths
      uses variable c defined in sm_implied7.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/sm_implied8.c
module sm_implied8.c
   variable test in line 5
      protection public
   variable test2 in line 5
      protection public
   variable x in line 7
      protection public
   function frob(void) in line 3
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function func(void) in line 8
      protection public
      17 lines of code
      1 parameters
      5 conditional paths
      uses variable test defined in sm_implied8.c
      uses variable x defined in sm_implied8.c
      uses function frob(void) defined in sm_implied8.c
      uses variable test2 defined in sm_implied8.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/sm_implied9.c
module sm_implied9.c
   function frob(void) in line 3
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function func(int) in line 5
      protection public
      18 lines of code
      1 parameters
      4 conditional paths
      uses variable test2 defined in sm_implied8.c
      uses function frob(void) defined in sm_implied9.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/sm_impossible1.c
module sm_impossible1.c
   function zero(void) in line 3
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function main(unsigned int,unsigned int) in line 9
      protection public
      7 lines of code
      2 parameters
      2 conditional paths
      uses function zero(void) defined in sm_impossible1.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/sm_inline1.c
module sm_inline1.c
   variable x in line 11
      protection public
   variable y in line 12
      protection public
   function frob(int *) in line 5
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
   function main(void) in line 13
      protection public
      16 lines of code
      1 parameters
      1 conditional paths
      uses function frob(int *) defined in sm_inline1.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/sm_inline2.c
module sm_inline2.c
   variable x in line 11
      protection public
   function frob(int *) in line 5
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
   function main(void) in line 12
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses function frob(int *) defined in sm_inline2.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/sm_inline3.c
module sm_inline3.c
   variable my_pointer in line 16
      protection public
   function memset(void *,char,int) in line 4
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function my_func(struct foo *) in line 10
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function memset(void *,char,int) defined in sm_inline3.c
      uses variable p defined in cond_expr2.c
   function test(void) in line 18
      protection public
      11 lines of code
      1 parameters
      1 conditional paths
      uses function my_func(struct foo *) defined in sm_inline3.c
      uses variable my_pointer defined in sm_inline3.c
      uses variable foo::a defined in sm_switch2.c
      uses variable foo::b defined in sm_switch2.c
   variable foo::a in line 2
      protection public
   variable foo::a in line 14
      protection public
   variable foo::b in line 7
      protection public
   variable foo::buf in line 4
      protection public
   variable foo::buf in line 9
      protection public
   variable foo::count in line 6
      protection public
   variable foo::msg in line 7
      protection public
   variable foo::x in line 2
      protection public
   variable foo::x in line 2
      protection public
   variable foo::x in line 2
      protection public
   variable foo::y in line 1
      protection public
   variable foo::y in line 3
      protection public
   variable foo::z in line 8
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/sm_locking.c
module sm_locking.c
   variable a in line 4
      protection public
   variable b in line 5
      protection public
   function _spin_lock(int) in line 1
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function _spin_unlock(int) in line 2
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function func(void) in line 6
      protection public
      22 lines of code
      1 parameters
      4 conditional paths
      uses function _spin_lock(int) defined in sm_locking.c
      uses function _spin_unlock(int) defined in sm_locking.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/sm_locking2.c
module sm_locking2.c
   variable a in line 5
      protection public
   variable b in line 6
      protection public
   function _spin_lock(int) in line 1
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function _spin_unlock(int) in line 2
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function _spin_trylock(int) in line 3
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function func(void) in line 7
      protection public
      21 lines of code
      1 parameters
      4 conditional paths
      uses function _spin_trylock(int) defined in sm_locking2.c
      uses function _spin_unlock(int) defined in sm_locking2.c
      uses function _spin_lock(int) defined in sm_locking2.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/sm_locking3.c
module sm_locking3.c
   function _spin_trylock(int) in line 1
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function _spin_lock(int) in line 2
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function _spin_unlock(int) in line 3
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function func(void) in line 5
      protection public
      17 lines of code
      1 parameters
      3 conditional paths
      uses function frob(void) defined in sm_casts.c
      uses function _spin_trylock(int) defined in sm_locking3.c
      uses function _spin_unlock(int) defined in sm_locking3.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/sm_locking4.c
module sm_locking4.c
   variable a in line 5
      protection public
   variable b in line 6
      protection public
   function _spin_lock(int) in line 1
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function _spin_unlock(int) in line 2
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function frob(void) in line 4
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function func(void) in line 7
      protection public
      19 lines of code
      1 parameters
      7 conditional paths
      uses function _spin_unlock(int) defined in sm_locking4.c
      uses function frob(void) defined in sm_locking4.c
      uses function _spin_lock(int) defined in sm_locking4.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/sm_locking6.c
module sm_locking6.c
   macro definition spin_trylock_irqsave in line 5
      protection public
   variable zzz in line 13
      protection public
   function __raw_local_irq_save() in line 1
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function _spin_trylock(int) in line 2
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function raw_local_irq_restore(flags) in line 3
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function _spin_unlock_irqrestore(int,int) in line 11
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function func(void) in line 15
      protection public
      14 lines of code
      1 parameters
      4 conditional paths
      uses macro definition spin_trylock_irqsave defined in sm_locking6.c
      uses function _spin_unlock_irqrestore(int,int) defined in sm_locking6.c
      uses variable zzz defined in sm_locking6.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/sm_loops1.c
module sm_loops1.c
   function frob(void) in line 3
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function func(int *) in line 5
      protection public
      18 lines of code
      1 parameters
      5 conditional paths
      uses macro definition a defined in preprocessor5.c
      uses macro definition b defined in preprocessor5.c
      uses variable c defined in sm_array_overflow.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/sm_loops2.c
module sm_loops2.c
   variable x in line 5
      protection public
   variable y in line 6
      protection public
   function checker(void) in line 3
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function func(void) in line 7
      protection public
      22 lines of code
      1 parameters
      7 conditional paths
      uses variable y defined in sm_loops2.c
      uses function checker(void) defined in sm_loops2.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/sm_loops3.c
module sm_loops3.c
   variable x in line 5
      protection public
   variable i in line 6
      protection public
   function checker(void) in line 3
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function func(void) in line 7
      protection public
      16 lines of code
      1 parameters
      4 conditional paths
      uses variable i defined in sm_loops3.c
      uses variable x defined in sm_loops3.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/sm_loops4.c
module sm_loops4.c
   variable x in line 5
      protection public
   variable y in line 5
      protection public
   variable i in line 6
      protection public
   function some_func(void) in line 3
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function func(void) in line 7
      protection public
      16 lines of code
      1 parameters
      5 conditional paths
      uses variable p defined in cond_expr2.c
      uses function some_func(void) defined in sm_loops4.c
      uses variable i defined in sm_loops4.c
      uses variable x defined in sm_loops4.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/sm_macros.c
module sm_macros.c
   macro definition add in line 3
      protection public
   macro definition sub in line 4
      protection public
   variable x in line 6
      protection public
   function func(int *) in line 7
      protection public
      13 lines of code
      1 parameters
      1 conditional paths
      uses macro definition add defined in sm_macros.c
      uses macro definition sub defined in sm_macros.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/sm_math1.c
module sm_math1.c
   function something() in line 3
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function func(void) in line 5
      protection public
      21 lines of code
      1 parameters
      3 conditional paths
      uses function something() defined in sm_math1.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/sm_math2.c
module sm_math2.c
   variable buf in line 3
      protection public
   function test(void) in line 5
      protection public
      10 lines of code
      1 parameters
      1 conditional paths
      uses variable buf defined in sm_math2.c
      uses variable c defined in sm_array_overflow.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/sm_memleak2.c
module sm_memleak2.c
   function func(void) in line 3
      protection public
      9 lines of code
      1 parameters
      1 conditional paths
      uses variable ptr defined in sm_null_deref2.c
      uses function malloc(int) defined in sm_buf_size2.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/sm_memory.c
module sm_memory.c
   variable a in line 7
      protection public
   variable b in line 8
      protection public
   function kmalloc(void) in line 1
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function func(void) in line 9
      protection public
      17 lines of code
      1 parameters
      2 conditional paths
      uses function kmalloc(void) defined in sm_memory.c
   variable ture::a in line 2
      protection public
   variable ture::a in line 4
      protection public
   variable ture::skb in line 8
      protection public
   variable ture::x in line 4
      protection public
   variable ture::y in line 4
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/sm_netdevice.c
module sm_netdevice.c
   function kfree(void *) in line 2
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function func(void) in line 8
      protection public
      15 lines of code
      1 parameters
      1 conditional paths
      uses function kfree(void *) defined in sm_netdevice.c
   variable net_device::name in line 5
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/sm_null_deref.c
module sm_null_deref.c
   variable a in line 7
      protection public
   variable b in line 8
      protection public
   variable c in line 9
      protection public
   variable d in line 10
      protection public
   function func(void) in line 12
      protection public
      39 lines of code
      1 parameters
      8 conditional paths
      uses variable foo::a defined in sm_switch2.c
      uses variable c defined in sm_null_deref.c
      uses variable d defined in sm_null_deref.c
      uses function malloc(int) defined in sm_buf_size2.c
   variable foo::a in line 2
      protection public
   variable foo::a in line 14
      protection public
   variable foo::b in line 7
      protection public
   variable foo::buf in line 4
      protection public
   variable foo::buf in line 9
      protection public
   variable foo::count in line 6
      protection public
   variable foo::msg in line 7
      protection public
   variable foo::x in line 2
      protection public
   variable foo::x in line 2
      protection public
   variable foo::x in line 2
      protection public
   variable foo::y in line 1
      protection public
   variable foo::y in line 3
      protection public
   variable foo::z in line 8
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/sm_null_deref2.c
module sm_null_deref2.c
   variable ptr in line 1
      protection public
   variable x in line 2
      protection public
   variable y in line 2
      protection public
   variable z in line 2
      protection public
   function frob(void) in line 3
      protection public
      14 lines of code
      1 parameters
      5 conditional paths
      uses variable ptr defined in sm_null_deref2.c
      uses variable z defined in sm_null_deref2.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/sm_overflow.c
module sm_overflow.c
   function main(int,char *) in line 10
      protection public
      9 lines of code
      2 parameters
      1 conditional paths
      uses variable buffer::a defined in sm_overflow.c
      uses variable field::b defined in sm_overflow.c
   variable field::b in line 2
      protection public
   variable buffer::a in line 2
      protection public
   variable buffer::x in line 7
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/sm_overflow3.c
module sm_overflow3.c
   function strcpy(char *,char *,int) in line 3
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function func(char *,char *) in line 5
      protection public
      16 lines of code
      2 parameters
      1 conditional paths
      uses variable c defined in sm_array_overflow.c
      uses variable d defined in sm_array_overflow.c
      uses function strcpy(char *,char *,int) defined in sm_overflow3.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/sm_overflow4.c
module sm_overflow4.c
   function strndup(char *,int) in line 3
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function strcpy(char *,char *) in line 4
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function func(char *,char *) in line 6
      protection public
      7 lines of code
      2 parameters
      1 conditional paths
      uses variable c defined in sm_array_overflow.c
      uses function strndup(char *,int) defined in sm_overflow4.c
      uses function strcpy(char *,char *) defined in sm_overflow4.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/sm_overflow5.c
module sm_overflow5.c
   function memdup(char *,int) in line 3
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function strcpy(char *,char *) in line 4
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function func(char *,char *) in line 6
      protection public
      8 lines of code
      2 parameters
      1 conditional paths
      uses variable c defined in sm_array_overflow.c
      uses function memdup(char *,int) defined in sm_overflow5.c
      uses function strcpy(char *,char *) defined in sm_overflow5.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/sm_overflow6.c
module sm_overflow6.c
   variable str in line 8
      protection public
   function strlen(char *) in line 3
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function strcpy(char *,char *) in line 4
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function snprintf(char *,int,char *,char *) in line 5
      protection public
      1 lines of code
      4 parameters
      1 conditional paths
   function sprintf(char *,char *,char *) in line 6
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function main(void) in line 10
      protection public
      10 lines of code
      1 parameters
      2 conditional paths
      uses variable buf defined in sm_fake_assignment.c
      uses function strlen(char *) defined in sm_overflow6.c
      uses variable str defined in sm_overflow6.c
      uses function snprintf(char *,int,char *,char *) defined in sm_overflow6.c
      uses function sprintf(char *,char *,char *) defined in sm_overflow6.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/sm_precedence.c
module sm_precedence.c
   variable a in line 6
      protection public
   variable b in line 6
      protection public
   variable c in line 6
      protection public
   variable d in line 6
      protection public
   variable x in line 6
      protection public
   variable y in line 6
      protection public
   variable z in line 7
      protection public
   function frob(void) in line 5
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function options_write(void) in line 8
      protection public
      23 lines of code
      1 parameters
      10 conditional paths
      uses function frob(void) defined in sm_precedence.c
      uses variable c defined in sm_precedence.c
      uses variable d defined in sm_precedence.c
      uses variable foo::b defined in sm_switch2.c
      uses variable foo::z defined in sm_switch2.c
   variable foo::a in line 2
      protection public
   variable foo::a in line 14
      protection public
   variable foo::b in line 7
      protection public
   variable foo::buf in line 4
      protection public
   variable foo::buf in line 9
      protection public
   variable foo::count in line 6
      protection public
   variable foo::msg in line 7
      protection public
   variable foo::x in line 2
      protection public
   variable foo::x in line 2
      protection public
   variable foo::x in line 2
      protection public
   variable foo::y in line 1
      protection public
   variable foo::y in line 3
      protection public
   variable foo::z in line 8
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/sm_range1.c
module sm_range1.c
   variable p in line 5
      protection public
   variable q in line 6
      protection public
   variable xxx in line 7
      protection public
   function func(void) in line 9
      protection public
      16 lines of code
      1 parameters
      4 conditional paths
      uses variable xxx defined in sm_range1.c
      uses variable p defined in sm_range1.c
      uses variable q defined in sm_range1.c
      uses variable ture::x defined in sm_skb.c
   variable ture::a in line 2
      protection public
   variable ture::a in line 4
      protection public
   variable ture::skb in line 8
      protection public
   variable ture::x in line 4
      protection public
   variable ture::y in line 4
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/sm_range2.c
module sm_range2.c
   variable a in line 3
      protection public
   variable b in line 3
      protection public
   variable c in line 3
      protection public
   variable d in line 3
      protection public
   variable e in line 3
      protection public
   function some_func(void) in line 2
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function frob(void) in line 4
      protection public
      24 lines of code
      1 parameters
      6 conditional paths
      uses variable c defined in sm_range2.c
      uses function some_func(void) defined in sm_range2.c
      uses variable d defined in sm_range2.c
      uses variable e defined in sm_range2.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/sm_range3.c
module sm_range3.c
   variable x in line 3
      protection public
   function func(void) in line 4
      protection public
      55 lines of code
      1 parameters
      11 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/sm_range4.c
module sm_range4.c
   variable a in line 3
      protection public
   variable b in line 3
      protection public
   variable c in line 3
      protection public
   function frob(void) in line 5
      protection public
      18 lines of code
      1 parameters
      4 conditional paths
      uses variable c defined in sm_range4.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/sm_rosenberg.c
module sm_rosenberg.c
   typedef aa_policy_t in line 11
      protection public
   variable p in line 23
      protection public
   variable global_dec in line 23
      protection public
   variable ptr in line 25
      protection public
   function memset(void *,char,int) in line 3
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function copy_to_user(void *,void *,int) in line 5
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function some_func(struct foo *) in line 6
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function main(void) in line 27
      protection public
      38 lines of code
      1 parameters
      2 conditional paths
      uses variable one defined in sm_equiv1.c
      uses variable two defined in sm_equiv1.c
      uses variable p defined in sm_rosenberg.c
      uses variable foo::a defined in sm_switch2.c
      uses variable global_dec defined in sm_rosenberg.c
      uses variable foo::x defined in sm_switch2.c
      uses function memset(void *,char,int) defined in sm_rosenberg.c
      uses function some_func(struct foo *) defined in sm_rosenberg.c
      uses variable foo::y defined in sm_switch2.c
      uses function copy_to_user(void *,void *,int) defined in sm_rosenberg.c
      uses variable ptr defined in sm_rosenberg.c
   variable zr364xx_pipeinfo::x in line 9
      protection public
   variable zr364xx_pipeinfo::y in line 10
      protection public
   variable aa_policy::x in line 14
      protection public
   variable foo::a in line 2
      protection public
   variable foo::a in line 14
      protection public
   variable foo::b in line 7
      protection public
   variable foo::buf in line 4
      protection public
   variable foo::buf in line 9
      protection public
   variable foo::count in line 6
      protection public
   variable foo::msg in line 7
      protection public
   variable foo::x in line 2
      protection public
   variable foo::x in line 2
      protection public
   variable foo::x in line 2
      protection public
   variable foo::y in line 1
      protection public
   variable foo::y in line 3
      protection public
   variable foo::z in line 8
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/sm_select.c
module sm_select.c
   variable a in line 5
      protection public
   variable b in line 6
      protection public
   variable c in line 8
      protection public
   variable d in line 9
      protection public
   variable e in line 10
      protection public
   function func(void) in line 11
      protection public
      17 lines of code
      1 parameters
      3 conditional paths
      uses variable e defined in sm_select.c
      uses variable foo::a defined in sm_switch2.c
      uses variable d defined in sm_select.c
      uses variable c defined in sm_select.c
   variable foo::a in line 2
      protection public
   variable foo::a in line 14
      protection public
   variable foo::b in line 7
      protection public
   variable foo::buf in line 4
      protection public
   variable foo::buf in line 9
      protection public
   variable foo::count in line 6
      protection public
   variable foo::msg in line 7
      protection public
   variable foo::x in line 2
      protection public
   variable foo::x in line 2
      protection public
   variable foo::x in line 2
      protection public
   variable foo::y in line 1
      protection public
   variable foo::y in line 3
      protection public
   variable foo::z in line 8
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/sm_select3.c
module sm_select3.c
   variable a in line 3
      protection public
   variable b in line 3
      protection public
   variable c in line 3
      protection public
   function func(void) in line 4
      protection public
      61 lines of code
      1 parameters
      16 conditional paths
      uses variable c defined in sm_select3.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/sm_select4.c
module sm_select4.c
   variable a in line 5
      protection public
   variable b in line 5
      protection public
   variable c in line 5
      protection public
   function frob(void) in line 3
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function func(unsigned long) in line 6
      protection public
      10 lines of code
      1 parameters
      3 conditional paths
      uses variable c defined in sm_select4.c
      uses function frob(void) defined in sm_select4.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/sm_select5.c
module sm_select5.c
   variable a in line 8
      protection public
   function load_sig(unsigned long) in line 3
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function test(void) in line 9
      protection public
      12 lines of code
      1 parameters
      2 conditional paths
      uses function load_sig(unsigned long) defined in sm_select5.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/sm_select_assign.c
module sm_select_assign.c
   macro definition min in line 5
      protection public
   function frob(void) in line 3
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses variable c defined in sm_implied7.c
      uses variable ptr defined in sm_null_deref2.c
      uses variable z defined in sm_null_deref2.c
      uses function some_func(void) defined in sm_range2.c
      uses variable d defined in sm_range2.c
      uses variable e defined in sm_range2.c
   function func(void) in line 7
      protection public
      21 lines of code
      1 parameters
      3 conditional paths
      uses macro definition min defined in sm_select_assign.c
      uses function frob(void) defined in sm_select_assign.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/sm_skb.c
module sm_skb.c
   variable skb in line 22
      protection public
   variable ptr in line 23
      protection public
   variable x in line 24
      protection public
   variable xx in line 24
      protection public
   variable u in line 26
      protection public
   variable y in line 27
      protection public
   variable z in line 28
      protection public
   function kfree(void *) in line 30
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function func(void) in line 32
      protection public
      12 lines of code
      1 parameters
      1 conditional paths
      uses function kfree(void *) defined in sm_skb.c
      uses variable skb defined in sm_skb.c
      uses variable xx defined in sm_skb.c
      uses variable ture::skb defined in sm_skb.c
      uses variable u defined in sm_skb.c
      uses variable wrap1::a defined in sm_skb.c
      uses variable y::a defined in noderef.c
      uses variable z defined in sm_skb.c
      uses variable wrap3::c defined in sm_skb.c
      uses variable ptr defined in sm_skb.c
   variable sk_buff::valuable_information in line 2
      protection public
   variable foo::a in line 2
      protection public
   variable foo::a in line 14
      protection public
   variable foo::b in line 7
      protection public
   variable foo::buf in line 4
      protection public
   variable foo::buf in line 9
      protection public
   variable foo::count in line 6
      protection public
   variable foo::msg in line 7
      protection public
   variable foo::x in line 2
      protection public
   variable foo::x in line 2
      protection public
   variable foo::x in line 2
      protection public
   variable foo::y in line 1
      protection public
   variable foo::y in line 3
      protection public
   variable foo::z in line 8
      protection public
   variable ture::a in line 2
      protection public
   variable ture::a in line 4
      protection public
   variable ture::skb in line 8
      protection public
   variable ture::x in line 4
      protection public
   variable ture::y in line 4
      protection public
   variable wrap1::a in line 12
      protection public
   variable wrap2::b in line 16
      protection public
   variable wrap2::c in line 15
      protection public
   variable wrap3::c in line 19
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/sm_strlen.c
module sm_strlen.c
   function strlen(char *) in line 1
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function strcpy(char *) in line 2
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function func(char *) in line 4
      protection public
      13 lines of code
      1 parameters
      3 conditional paths
      uses variable buf defined in sm_fake_assignment.c
      uses function strlen(char *) defined in sm_strlen.c
      uses function strcpy(char *) defined in sm_strlen.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/sm_strlen2.c
module sm_strlen2.c
   function strlen(char *) in line 1
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function strcpy(char *) in line 2
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function func(char *,char *,char *) in line 4
      protection public
      16 lines of code
      3 parameters
      4 conditional paths
      uses function strlen(char *) defined in sm_strlen2.c
      uses function strcpy(char *) defined in sm_strlen2.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/sm_strlen3.c
module sm_strlen3.c
   function strlen(const char *) in line 3
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function strnlen(const char *,int) in line 4
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function func(void) in line 6
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function strlen(const char *) defined in sm_strlen3.c
      uses function strnlen(const char *,int) defined in sm_strlen3.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/sm_struct_assign1.c
module sm_struct_assign1.c
   function memcpy(void *,void *,int) in line 3
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function memset(void *,char,int) in line 4
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function test(void) in line 11
      protection public
      11 lines of code
      1 parameters
      1 conditional paths
      uses variable src defined in sm_user_data3.c
      uses variable dest defined in sm_user_data2.c
      uses function memcpy(void *,void *,int) defined in sm_struct_assign1.c
      uses variable my_struct::x defined in sm_user_data3.c
      uses variable my_struct::y defined in sm_user_data3.c
      uses function memset(void *,char,int) defined in sm_struct_assign1.c
   variable foo::a in line 2
      protection public
   variable foo::a in line 14
      protection public
   variable foo::b in line 7
      protection public
   variable foo::buf in line 4
      protection public
   variable foo::buf in line 9
      protection public
   variable foo::count in line 6
      protection public
   variable foo::msg in line 7
      protection public
   variable foo::x in line 2
      protection public
   variable foo::x in line 2
      protection public
   variable foo::x in line 2
      protection public
   variable foo::y in line 1
      protection public
   variable foo::y in line 3
      protection public
   variable foo::z in line 8
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/sm_switch.c
module sm_switch.c
   variable a in line 7
      protection public
   variable b in line 8
      protection public
   variable c in line 9
      protection public
   variable d in line 10
      protection public
   variable x in line 11
      protection public
   function func(void) in line 13
      protection public
      36 lines of code
      1 parameters
      8 conditional paths
      uses variable c defined in sm_switch.c
      uses variable d defined in sm_switch.c
      uses variable foo::a defined in sm_switch2.c
   variable foo::a in line 2
      protection public
   variable foo::a in line 14
      protection public
   variable foo::b in line 7
      protection public
   variable foo::buf in line 4
      protection public
   variable foo::buf in line 9
      protection public
   variable foo::count in line 6
      protection public
   variable foo::msg in line 7
      protection public
   variable foo::x in line 2
      protection public
   variable foo::x in line 2
      protection public
   variable foo::x in line 2
      protection public
   variable foo::y in line 1
      protection public
   variable foo::y in line 3
      protection public
   variable foo::z in line 8
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/sm_switch2.c
module sm_switch2.c
   variable a in line 5
      protection public
   variable b in line 6
      protection public
   variable c in line 7
      protection public
   variable d in line 8
      protection public
   variable x in line 9
      protection public
   function func(void) in line 11
      protection public
      31 lines of code
      1 parameters
      8 conditional paths
      uses variable c defined in sm_switch2.c
      uses variable d defined in sm_switch2.c
      uses function some_func(void) defined in sm_compare4.c
      uses variable foo::a defined in sm_switch2.c
   variable foo::a in line 2
      protection public
   variable foo::a in line 14
      protection public
   variable foo::b in line 7
      protection public
   variable foo::buf in line 4
      protection public
   variable foo::buf in line 9
      protection public
   variable foo::count in line 6
      protection public
   variable foo::msg in line 7
      protection public
   variable foo::x in line 2
      protection public
   variable foo::x in line 2
      protection public
   variable foo::x in line 2
      protection public
   variable foo::y in line 1
      protection public
   variable foo::y in line 3
      protection public
   variable foo::z in line 8
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/sm_user_data1.c
module sm_user_data1.c
   variable pointer in line 9
      protection public
   function copy_from_user(void *,void *,int) in line 3
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function copy_stuff(struct my_struct *) in line 11
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function copy_from_user(void *,void *,int) defined in sm_user_data1.c
      uses variable pointer defined in sm_user_data1.c
   function test(void) in line 16
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses function copy_stuff(struct my_struct *) defined in sm_user_data1.c
   variable my_struct::x in line 6
      protection public
   variable my_struct::y in line 6
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/sm_user_data2.c
module sm_user_data2.c
   variable pointer in line 9
      protection public
   variable dest in line 10
      protection public
   variable a in line 18
      protection public
   function copy_from_user(void *,void *,int) in line 3
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function returns_copy(void) in line 12
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function copy_from_user(void *,void *,int) defined in sm_user_data2.c
      uses variable dest defined in sm_user_data2.c
      uses variable pointer defined in sm_user_data2.c
   function test(void) in line 19
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function returns_copy(void) defined in sm_user_data2.c
   variable my_struct::x in line 6
      protection public
   variable my_struct::y in line 6
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/sm_user_data3.c
module sm_user_data3.c
   variable src in line 14
      protection public
   variable a in line 14
      protection public
   variable b in line 14
      protection public
   function copy_from_user(void *,void *,int) in line 3
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
      uses variable my_struct::x defined in sm_user_data3.c
      uses variable my_struct::y defined in sm_user_data3.c
   function returns_filter(struct my_struct *) in line 9
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable p defined in cond_expr2.c
   function test(void) in line 15
      protection public
      10 lines of code
      1 parameters
      1 conditional paths
      uses function copy_from_user(void *,void *,int) defined in sm_user_data3.c
      uses variable src defined in sm_user_data3.c
      uses function returns_filter(struct my_struct *) defined in sm_user_data3.c
   variable my_struct::x in line 6
      protection public
   variable my_struct::y in line 6
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/sm_user_data4.c
module sm_user_data4.c
   variable src in line 9
      protection public
   variable dest in line 18
      protection public
   function copy_from_user(void *,void *,int) in line 3
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
      uses variable my_struct::x defined in sm_user_data3.c
      uses variable my_struct::y defined in sm_user_data3.c
   function returns_user_data(void) in line 10
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses variable ear::x defined in sm_user_data4.c
      uses function copy_from_user(void *,void *,int) defined in sm_user_data4.c
      uses variable src defined in sm_user_data4.c
   function returns_user_member(void) in line 19
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function copy_from_user(void *,void *,int) defined in sm_user_data4.c
      uses variable dest defined in sm_user_data4.c
      uses variable ear::x defined in sm_user_data4.c
      uses variable src defined in sm_user_data4.c
   function test(void) in line 24
      protection public
      11 lines of code
      1 parameters
      1 conditional paths
      uses variable p defined in cond_expr2.c
      uses variable ear::x defined in sm_user_data4.c
      uses function returns_user_data(void) defined in sm_user_data4.c
      uses function returns_user_member(void) defined in sm_user_data4.c
   variable ear::x in line 6
      protection public
   variable ear::y in line 6
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/sm_val_parse1.c
module sm_val_parse1.c
   function main(int) in line 3
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses macro definition __smatch_type_rl defined in check_debug.h
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/sm_wine_filehandles.c
module sm_wine_filehandles.c
   function CreateFile() in line 1
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function socket() in line 2
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function func(void) in line 4
      protection public
      14 lines of code
      1 parameters
      3 conditional paths
      uses variable x defined in binary-constant.c
      uses function CreateFile() defined in sm_wine_filehandles.c
      uses function socket() defined in sm_wine_filehandles.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/sm_wine_locking.c
module sm_wine_locking.c
   variable a in line 10
      protection public
   variable b in line 10
      protection public
   variable c in line 10
      protection public
   variable d in line 10
      protection public
   variable e in line 10
      protection public
   variable z in line 10
      protection public
   function create_window_handle(int) in line 1
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function WIN_ReleasePtr(int) in line 2
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function EnterCriticalSection(int) in line 3
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function LeaveCriticalSection(int) in line 4
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function USER_Lock(void) in line 5
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function USER_Unlock(void) in line 6
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function GDI_GetObjPtr(int) in line 7
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function GDI_ReleaseObj(int) in line 8
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function test1(void) in line 12
      protection public
      22 lines of code
      1 parameters
      6 conditional paths
      uses function create_window_handle(int) defined in sm_wine_locking.c
      uses variable z defined in sm_wine_locking.c
      uses function frob(void) defined in sm_casts.c
      uses variable d defined in sm_wine_locking.c
      uses function GDI_GetObjPtr(int) defined in sm_wine_locking.c
      uses variable e defined in sm_wine_locking.c
      uses function GDI_ReleaseObj(int) defined in sm_wine_locking.c
      uses function EnterCriticalSection(int) defined in sm_wine_locking.c
      uses variable c defined in sm_wine_locking.c
      uses function USER_Lock(void) defined in sm_wine_locking.c
      uses function LeaveCriticalSection(int) defined in sm_wine_locking.c
      uses function WIN_ReleasePtr(int) defined in sm_wine_locking.c
      uses function USER_Unlock(void) defined in sm_wine_locking.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/sm_WtoA.c
module sm_WtoA.c
   function wwww() in line 1
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function wwwA() in line 2
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function xxxW(void) in line 4
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function wwwA() defined in sm_WtoA.c
   function DRAW(void) in line 10
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function wwwA() defined in sm_WtoA.c
   function xxxA(void) in line 15
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function wwwA() defined in sm_WtoA.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/specifiers1.c
module specifiers1.c
   macro definition TEST in line 3
      protection public
   macro definition TEST2 in line 4
      protection public
   macro definition TEST3 in line 5
      protection public
   macro definition TEST4 in line 7
      protection public
   macro definition T in line 15
      protection public
   macro definition T in line 19
      protection public
   macro definition T in line 23
      protection public
   macro definition T in line 27
      protection public
   macro definition T in line 32
      protection public
   macro definition T in line 36
      protection public
   macro definition T in line 41
      protection public
   macro definition T in line 46
      protection public
   macro definition T in line 51
      protection public
   macro definition T in line 56
      protection public
   macro definition T in line 61
      protection public
   macro definition T in line 66
      protection public
   macro definition T in line 71
      protection public
   macro definition T in line 76
      protection public
   macro definition T in line 81
      protection public
   macro definition T in line 86
      protection public
   macro definition T in line 90
      protection public
   macro definition T in line 94
      protection public
   function OK(void) in line 1
      protection public
      97 lines of code
      1 parameters
      1 conditional paths
      uses macro definition TEST defined in specifiers1.c
      uses macro definition TEST2 defined in specifiers1.c
      uses macro definition TEST3 defined in specifiers1.c
      uses macro definition TEST4 defined in specifiers1.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/specifiers2.c
module specifiers2.c
   typedef T in line 1
      protection public
   function BAD(char,char,char,char,char,char,int,int,int,int,double,double,double,double,double,double,double,float,float,float,float,float,float,float,float,short,short,short,short,short,long,long,long,signed,signed,signed,signed,unsigned,unsigned,unsigned,unsigned,unsigned,long long,long double,long long,double long,T,T,T,T,T,T,T,T,T,void,void,void,void,void,void,void,void,char,int,double,float,short,long,signed,unsigned,void) in line 2
      protection public
      1 lines of code
      72 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/static-forward-decl.c
module static-forward-decl.c
   function f(void) in line 1
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/struct-as.c
module struct-as.c
   macro definition __user in line 5
      protection public
   function test(int __user *) in line 11
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function broken(struct hello __user *) in line 13
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function test(int __user *) defined in struct-as.c
   variable hello::a in line 8
      protection public
   variable hello::array in line 17
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/struct-attribute-placement.c
module struct-attribute-placement.c
   function __attribute__((__aligned__(16))) in line 8
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
      uses macro definition a defined in preprocessor5.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/struct-ns1.c
module struct-ns1.c
   enumeration Foo in line 17
      protection public
   enumvalue FOO in line 17
      protection public
   function f(void) in line 5
      protection public
      11 lines of code
      1 parameters
      1 conditional paths
      uses macro definition foo defined in preprocessor1.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/struct-ns2.c
module struct-ns2.c
   function g(struct Bar{int i;}*) in line 2
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable x defined in binary-constant.c
   function h(void) in line 9
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/struct-size1.c
module struct-size1.c
   variable x in line 14
      protection public
   variable foo in line 14
      protection public
   function f(struct E *,struct B *) in line 10
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses variable B::pA defined in struct-size1.c
      uses variable E::pA defined in struct-size1.c
   variable B::pA in line 3
      protection public
   variable E::pA in line 7
      protection public
   variable E::pC in line 8
      protection public
   variable @174::x in line 14
      protection public
   variable C::bar in line 16
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/test-be.c
module test-be.c
   function printf(char *,...) in line 1
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function exit(int) in line 2
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function test_func_args(int,int) in line 6
      protection public
      5 lines of code
      2 parameters
      2 conditional paths
      uses function exit(int) defined in test-be.c
   function binop_s32(int,int) in line 12
      protection public
      11 lines of code
      2 parameters
      1 conditional paths
      uses macro definition a defined in preprocessor5.c
      uses variable x defined in binary-constant.c
   function test_binops(void) in line 24
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses function binop_s32(int,int) defined in test-be.c
      uses function printf(char *,...) defined in test-be.c
      uses function exit(int) defined in test-be.c
   function main(int,char *) in line 36
      protection public
      7 lines of code
      2 parameters
      1 conditional paths
      uses function test_func_args(int,int) defined in test-be.c
      uses function test_binops(void) defined in test-be.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/transparent-union.c
module transparent-union.c
   function foo(transparent_arg) in line 13
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function bar(void) in line 17
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function foo(transparent_arg) defined in transparent-union.c
   variable a::field in line 2
      protection public
   variable b::field in line 5
      protection public
   variable transparent_arg::a in line 9
      protection public
   variable transparent_arg::b in line 10
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/type1.c
module type1.c
   function deref(const char *) in line 11
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function test(struct hello *) in line 20
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function deref(const char *) defined in type1.c
   variable hello::a in line 8
      protection public
   variable hello::array in line 17
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/typedef_shadow.c
module typedef_shadow.c
   typedef T in line 1
      protection public
   function f(int) in line 2
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses macro definition a defined in preprocessor5.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/typeof-attribute.c
module typeof-attribute.c
   macro definition __percpu in line 1
      protection public
   macro definition convert in line 4
      protection public
   function main(int,char *) in line 7
      protection public
      7 lines of code
      2 parameters
      1 conditional paths
      uses macro definition __percpu defined in typeof-attribute.c
      uses variable x defined in binary-constant.c
      uses macro definition convert defined in typeof-attribute.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/typesign.c
module typesign.c
   function s_to_u_return(signed int *) in line 1
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function u_to_s_return(unsigned int *) in line 6
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function s_to_u_init(signed int *) in line 11
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
   function u_to_s_init(unsigned int *) in line 17
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
   function s_to_u_assign(signed int *) in line 23
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function u_to_s_assign(unsigned int *) in line 30
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/smatch/smatch.git/validation/varargs1.c
module varargs1.c
   function foo(const char *,...) in line 1
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function sparse_error(const char) in line 2
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function foo(const char *,...) defined in varargs1.c
