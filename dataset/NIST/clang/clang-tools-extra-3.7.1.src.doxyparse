file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-apply-replacements/include/clang-apply-replacements/Tooling/ApplyReplacements.h
module ApplyReplacements.h
   typedef RangeVector in line 38
      protection public
   typedef TUReplacements in line 42
      protection public
   typedef TUReplacementFiles in line 45
      protection public
   typedef FileToReplacementsMap in line 50
      protection public
   function collectReplacementsFromDirectory(const llvm::StringRef,TUReplacements &,TUReplacementFiles &,clang::DiagnosticsEngine &) in line 70
      protection public
      44 lines of code
      4 parameters
      6 conditional paths
   function mergeAndDeduplicate(const TUReplacements &,FileToReplacementsMap &,clang::SourceManager &) in line 89
      protection public
      26 lines of code
      3 parameters
      5 conditional paths
      uses variable SM defined in IncludeOrderCheck.cpp
   function applyReplacements(const FileToReplacementsMap &,clang::Rewriter &) in line 102
      protection public
      16 lines of code
      2 parameters
      3 conditional paths
   function calculateChangedRanges(const std::vector< clang::tooling::Replacement > &) in line 114
      protection public
      18 lines of code
      1 parameters
      2 conditional paths
      uses variable Range defined in IncludeOrderCheck.cpp
   function writeFiles(const clang::Rewriter &) in line 121
      protection public
      19 lines of code
      1 parameters
      3 conditional paths
   function deleteReplacementFiles(const TUReplacementFiles &,clang::DiagnosticsEngine &) in line 131
      protection public
      15 lines of code
      2 parameters
      3 conditional paths
      uses variable Filename defined in IncludeOrderCheck.cpp
      uses variable Files defined in ClangTidy.cpp
      uses function remove(FwIt,FwIt,const T &) defined in misc-inaccurate-erase.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-apply-replacements/lib/Tooling/ApplyReplacements.cpp
module ApplyReplacements.cpp
   function eatDiagnostics(const SMDiagnostic &,void *) in line 34
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function collectReplacementsFromDirectory(const llvm::StringRef,TUReplacements &,TUReplacementFiles &,clang::DiagnosticsEngine &) in line 70
      protection public
      44 lines of code
      4 parameters
      6 conditional paths
   function reportConflict(const FileEntry *,const llvm::ArrayRef< clang::tooling::Replacement >,SourceManager &) in line 91
      protection public
      33 lines of code
      3 parameters
      6 conditional paths
      uses variable SM defined in IncludeOrderCheck.cpp
      uses variable File defined in PreprocessorTracker.cpp
   function deduplicateAndDetectConflicts(FileToReplacementsMap &,SourceManager &) in line 136
      protection public
      28 lines of code
      2 parameters
      4 conditional paths
      uses macro definition assert defined in misc-assert-side-effect.cpp
      uses function empty() defined in std::vector
      uses variable Range defined in IncludeOrderCheck.cpp
      uses function reportConflict(const FileEntry *,const llvm::ArrayRef< clang::tooling::Replacement >,SourceManager &) defined in ApplyReplacements.cpp
      uses variable SM defined in IncludeOrderCheck.cpp
   function mergeAndDeduplicate(const TUReplacements &,FileToReplacementsMap &,clang::SourceManager &) in line 89
      protection public
      26 lines of code
      3 parameters
      5 conditional paths
      uses variable SM defined in IncludeOrderCheck.cpp
   function applyReplacements(const FileToReplacementsMap &,clang::Rewriter &) in line 102
      protection public
      16 lines of code
      2 parameters
      3 conditional paths
   function calculateChangedRanges(const std::vector< clang::tooling::Replacement > &) in line 114
      protection public
      18 lines of code
      1 parameters
      2 conditional paths
      uses variable Range defined in IncludeOrderCheck.cpp
   function writeFiles(const clang::Rewriter &) in line 121
      protection public
      19 lines of code
      1 parameters
      3 conditional paths
   function deleteReplacementFiles(const TUReplacementFiles &,clang::DiagnosticsEngine &) in line 131
      protection public
      15 lines of code
      2 parameters
      3 conditional paths
      uses variable Filename defined in IncludeOrderCheck.cpp
      uses variable Files defined in ClangTidy.cpp
      uses function remove(FwIt,FwIt,const T &) defined in misc-inaccurate-erase.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-apply-replacements/tool/ClangApplyReplacementsMain.cpp
module ClangApplyReplacementsMain.cpp
   variable VisibleCategories in line 37
      protection public
   function Directory(cl::Positional,cl::Required,cl::desc("<Search Root Directory>")) in line 31
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function ReplacementCategory("Replacement Options") in line 34
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function FormattingCategory("Formatting Options") in line 35
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function RemoveTUReplacementFiles("remove-change-desc-files",cl::desc("Remove the change description files regardless of successful\n"                      "merging/replacing."),cl::init(false),cl::cat(ReplacementCategory)) in line 40
      protection public
      1 lines of code
      4 parameters
      1 conditional paths
   function DoFormat("format",cl::desc("Enable formatting of code changed by applying replacements.\n"                      "Use -style to choose formatting style.\n"),cl::cat(FormattingCategory)) in line 47
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function FormatStyleConfig("style-config",cl::desc("Path to a directory containing a .clang-format file\n"                      "describing a formatting style to use for formatting\n"                      "code when -style=file.\n"),cl::init(""),cl::cat(FormattingCategory)) in line 58
      protection public
      1 lines of code
      4 parameters
      1 conditional paths
   function FormatStyleOpt("style",cl::desc(format::StyleOptionHelpDescription),cl::init("LLVM"),cl::cat(FormattingCategory)) in line 66
      protection public
      1 lines of code
      4 parameters
      1 conditional paths
   function printVersion() in line 88
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function getRewrittenData(const std::vector< tooling::Replacement > &,Rewriter &,std::string &) in line 106
      protection public
      20 lines of code
      3 parameters
      3 conditional paths
      uses function empty() defined in std::vector
      uses variable SM defined in IncludeOrderCheck.cpp
      uses variable Files defined in ClangTidy.cpp
      uses function begin() defined in std::vector
      uses macro definition assert defined in misc-assert-side-effect.cpp
      uses variable Result defined in USRFinder.cpp
   function applyReplacements(const std::vector< tooling::Replacement > &,std::string &,DiagnosticsEngine &) in line 140
      protection public
      8 lines of code
      3 parameters
      1 conditional paths
      uses variable Files defined in ClangTidy.cpp
      uses variable SM defined in IncludeOrderCheck.cpp
      uses function getRewrittenData(const std::vector< tooling::Replacement > &,Rewriter &,std::string &) defined in ClangApplyReplacementsMain.cpp
      uses variable Result defined in USRFinder.cpp
   function applyFormatting(const std::vector< tooling::Replacement > &,const StringRef,std::string &,const format::FormatStyle &,DiagnosticsEngine &) in line 167
      protection public
      30 lines of code
      5 parameters
      2 conditional paths
      uses macro definition assert defined in misc-assert-side-effect.cpp
      uses function empty() defined in std::vector
      uses function calculateChangedRanges(const std::vector< clang::tooling::Replacement > &) defined in ApplyReplacements.h
      uses function begin() defined in std::vector
      uses variable Files defined in ClangTidy.cpp
      uses variable SM defined in IncludeOrderCheck.cpp
      uses function getRewrittenData(const std::vector< tooling::Replacement > &,Rewriter &,std::string &) defined in ClangApplyReplacementsMain.cpp
   function main(int,char **) in line 198
      protection public
      79 lines of code
      2 parameters
      10 conditional paths
      uses variable VisibleCategories defined in ClangApplyReplacementsMain.cpp
      uses function printVersion() defined in ClangApplyReplacementsMain.cpp
      uses variable DiagOpts defined in ClangTidy.cpp
      uses function DoFormat("format",cl::desc("Enable formatting of code changed by applying replacements.\n"                      "Use -style to choose formatting style.\n"),cl::cat(FormattingCategory)) defined in ClangApplyReplacementsMain.cpp
      uses function FormatStyleOpt("style",cl::desc(format::StyleOptionHelpDescription),cl::init("LLVM"),cl::cat(FormattingCategory)) defined in ClangApplyReplacementsMain.cpp
      uses function FormatStyleConfig("style-config",cl::desc("Path to a directory containing a .clang-format file\n"                      "describing a formatting style to use for formatting\n"                      "code when -style=file.\n"),cl::init(""),cl::cat(FormattingCategory)) defined in ClangApplyReplacementsMain.cpp
      uses function collectReplacementsFromDirectory(const llvm::StringRef,TUReplacements &,TUReplacementFiles &,clang::DiagnosticsEngine &) defined in ApplyReplacements.h
      uses function Directory(cl::Positional,cl::Required,cl::desc("<Search Root Directory>")) defined in ClangApplyReplacementsMain.cpp
      uses function RemoveTUReplacementFiles("remove-change-desc-files",cl::desc("Remove the change description files regardless of successful\n"                      "merging/replacing."),cl::init(false),cl::cat(ReplacementCategory)) defined in ClangApplyReplacementsMain.cpp
      uses function reset(T *) defined in std::unique_ptr
      uses variable Files defined in ClangTidy.cpp
      uses variable SM defined in IncludeOrderCheck.cpp
      uses function mergeAndDeduplicate(const TUReplacements &,FileToReplacementsMap &,clang::SourceManager &) defined in ApplyReplacements.h
      uses function applyReplacements(const std::vector< tooling::Replacement > &,std::string &,DiagnosticsEngine &) defined in ClangApplyReplacementsMain.cpp
      uses function applyFormatting(const std::vector< tooling::Replacement > &,const StringRef,std::string &,const format::FormatStyle &,DiagnosticsEngine &) defined in ClangApplyReplacementsMain.cpp
module @2::ScopedFileRemover
   variable Diag in line 84
   variable TURFiles in line 83
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-modernize/AddOverride/AddOverride.cpp
module AddOverride.cpp
   variable AddOverrideTransformAnchorSource in line 85
      protection public
   function DetectMacros("override-macros",cl::desc("Detect and use macros that expand to the 'override' keyword."),cl::cat(TransformsOptionsCategory)) in line 26
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function X("add-override","Make use of override specifier where possible") in line 81
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
module @3::AddOverrideFactory
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-modernize/AddOverride/AddOverride.h
module AddOverrideTransform
   inherits from Transform
   function apply(const clang::tooling::CompilationDatabase &,const std::vector< std::string > &) in line 34
      protection public
      20 lines of code
      2 parameters
      2 conditional paths
      uses variable Finder defined in ClangTidy.cpp
      uses function makeCandidateForOverrideAttrMatcher() defined in AddOverrideMatchers.cpp
   function handleBeginSource(clang::CompilerInstance &,llvm::StringRef) in line 37
      protection public
      6 lines of code
      2 parameters
      2 conditional paths
      uses macro definition assert defined in misc-assert-side-effect.cpp
      uses function handleBeginSource(clang::CompilerInstance &,llvm::StringRef) defined in Transform
      uses variable Filename defined in IncludeOrderCheck.cpp
   function AddOverrideTransform(const TransformOptions &) in line 30
      protection public
      2 lines of code
      1 parameters
      1 conditional paths
      uses function apply(const clang::tooling::CompilationDatabase &,const std::vector< std::string > &) defined in AddOverrideTransform
      uses function handleBeginSource(clang::CompilerInstance &,llvm::StringRef) defined in AddOverrideTransform
      uses variable Filename defined in IncludeOrderCheck.cpp
   variable Fixer in line 41
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-modernize/AddOverride/AddOverrideActions.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-modernize/AddOverride/AddOverrideActions.h
module AddOverrideFixer
   inherits from clang::ast_matchers::MatchFinder::MatchCallback
   function run(const clang::ast_matchers::MatchFinder::MatchResult &) in line 35
      protection public
      46 lines of code
      1 parameters
      9 conditional paths
      uses variable SM defined in IncludeOrderCheck.cpp
      uses variable Result defined in USRFinder.cpp
      uses variable MethodId defined in AddOverrideMatchers.cpp
      uses macro definition assert defined in misc-assert-side-effect.cpp
      uses variable PP defined in MacroParenthesesCheck.cpp
   function setPreprocessor(clang::Preprocessor &) in line 37
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses variable PP defined in AddOverrideFixer
   function AddOverrideFixer(unsigned &,bool,Transform &) in line 28
      protection public
      4 lines of code
      3 parameters
      1 conditional paths
      uses function run(const clang::ast_matchers::MatchFinder::MatchResult &) defined in AddOverrideFixer
      uses variable Result defined in USRFinder.cpp
   variable AcceptedChanges in line 41
   variable DetectMacros in line 42
   variable Owner in line 43
   variable PP in line 40
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-modernize/AddOverride/AddOverrideMatchers.cpp
module AddOverrideMatchers.cpp
   variable MethodId in line 22
      protection public
   function makeCandidateForOverrideAttrMatcher() in line 24
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
      uses variable MethodId defined in AddOverrideMatchers.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-modernize/AddOverride/AddOverrideMatchers.h
module AddOverrideMatchers.h
   variable MethodId in line 22
      protection public
   function makeCandidateForOverrideAttrMatcher() in line 26
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
      uses variable MethodId defined in AddOverrideMatchers.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-modernize/Core/CustomMatchers.h
module CustomMatchers.h
   function AST_MATCHER(Decl,isFromStdNamespace) in line 43
      protection public
      13 lines of code
      2 parameters
      3 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-modernize/Core/IncludeDirectives.cpp
module IncludeDirectives.cpp
   enumeration NewLineFlags in line 229
      protection public
   enumvalue NL_Prepend in line 231
      protection public
   enumvalue NL_PrependAnother in line 234
      protection public
   enumvalue NL_AppendTwice in line 237
      protection public
   enumvalue NL_PrependTwice in line 241
      protection public
   function guessEOL(SourceManager &,FileID) in line 245
      protection public
      10 lines of code
      2 parameters
      1 conditional paths
      uses variable SM defined in IncludeOrderCheck.cpp
   function findDirectiveEnd(SourceLocation,SourceManager &,const LangOptions &) in line 262
      protection public
      42 lines of code
      3 parameters
      6 conditional paths
      uses variable SM defined in IncludeOrderCheck.cpp
      uses variable LangOpts defined in ClangTidy.cpp
      uses function make_pair(T1,T2) defined in google-explicit-make-pair.cpp
module IncludeDirectivesPPCallback
   inherits from clang::PPCallbacks
   function Defined(const Token &,const MacroDefinition &,SourceRange) in line 204
      3 lines of code
      3 parameters
      1 conditional paths
   function Elif(SourceLocation,SourceRange,ConditionValueKind,SourceLocation) in line 210
      4 lines of code
      4 parameters
      1 conditional paths
   function Else(SourceLocation,SourceLocation) in line 217
      3 lines of code
      2 parameters
      1 conditional paths
   function Endif(SourceLocation,SourceLocation) in line 179
      17 lines of code
      2 parameters
      3 conditional paths
      uses variable Loc defined in IncludeOrderCheck.cpp
   function FileChanged(SourceLocation,FileChangeReason,SrcMgr::CharacteristicKind,FileID) in line 81
      21 lines of code
      4 parameters
      4 conditional paths
      uses variable SM defined in IncludeOrderCheck.cpp
      uses variable Files defined in ClangTidy.cpp
      uses variable Loc defined in IncludeOrderCheck.cpp
   function handlePotentialHeaderGuard(const GuardDetection &) in line 105
      40 lines of code
      1 parameters
      4 conditional paths
      uses variable SM defined in IncludeOrderCheck.cpp
      uses variable File defined in PreprocessorTracker.cpp
      uses variable FID defined in IncludeDirectivesPPCallback::GuardDetection
      uses variable LangOpts defined in ClangTidy.cpp
      uses variable IfndefLoc defined in IncludeDirectivesPPCallback::GuardDetection
      uses variable EndifLoc defined in IncludeDirectivesPPCallback::GuardDetection
      uses variable DefineLoc defined in IncludeDirectivesPPCallback::GuardDetection
   function If(SourceLocation,SourceRange,ConditionValueKind) in line 207
      3 lines of code
      3 parameters
      1 conditional paths
   function Ifdef(SourceLocation,const Token &,const MacroDefinition &) in line 214
      3 lines of code
      3 parameters
      1 conditional paths
   function Ifndef(SourceLocation,const Token &,const MacroDefinition &) in line 146
      14 lines of code
      3 parameters
      2 conditional paths
      uses variable Loc defined in IncludeOrderCheck.cpp
   function InclusionDirective(SourceLocation,const Token &,StringRef,bool,CharSourceRange,const FileEntry *,StringRef,StringRef,const Module *) in line 66
      13 lines of code
      9 parameters
      1 conditional paths
      uses variable SM defined in IncludeOrderCheck.cpp
      uses macro definition assert defined in misc-assert-side-effect.cpp
      uses variable File defined in PreprocessorTracker.cpp
      uses variable IsAngled defined in IncludeOrderCheck.cpp
   function MacroDefined(const Token &,const MacroDirective *) in line 161
      17 lines of code
      2 parameters
      3 conditional paths
   function MacroExpands(const Token &,const MacroDefinition &,SourceRange,const MacroArgs *) in line 197
      4 lines of code
      4 parameters
      1 conditional paths
   function MacroUndefined(const Token &,const MacroDefinition &) in line 201
      3 lines of code
      2 parameters
      1 conditional paths
   function IncludeDirectivesPPCallback(IncludeDirectives *) in line 61
      protection public
      2 lines of code
      1 parameters
      1 conditional paths
   function ~IncludeDirectivesPPCallback() in line 63
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   variable Files in line 223
   variable Guard in line 225
   variable Self in line 221
module IncludeDirectivesPPCallback::GuardDetection
   function isPotentialHeaderGuard() in line 55
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function GuardDetection(FileID) in line 34
      protection public
      2 lines of code
      1 parameters
      1 conditional paths
   variable Count in line 39
      protection public
   variable CountAtEndif in line 46
      protection public
   variable DefineLoc in line 44
      protection public
   variable EndifLoc in line 44
      protection public
   variable FID in line 37
      protection public
   variable IfndefLoc in line 44
      protection public
   variable TheMacro in line 42
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-modernize/Core/IncludeDirectives.h
module IncludeDirectives
   function addAngledInclude(llvm::StringRef,llvm::StringRef) in line 49
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
      uses variable Sources defined in IncludeDirectives
      uses variable File defined in PreprocessorTracker.cpp
      uses macro definition assert defined in misc-assert-side-effect.cpp
   function addAngledInclude(const clang::FileEntry *,llvm::StringRef) in line 51
      protection public
      26 lines of code
      2 parameters
      5 conditional paths
      uses variable Sources defined in IncludeDirectives
      uses variable File defined in PreprocessorTracker.cpp
      uses macro definition assert defined in misc-assert-side-effect.cpp
      uses function hasInclude(const clang::FileEntry *,llvm::StringRef) defined in IncludeDirectives
      uses function angledIncludeInsertionOffset(clang::FileID) defined in IncludeDirectives
      uses enumvalue NL_Prepend defined in IncludeDirectives.cpp
      uses enumvalue NL_PrependAnother defined in IncludeDirectives.cpp
      uses enumvalue NL_AppendTwice defined in IncludeDirectives.cpp
   function angledIncludeHintLoc(clang::FileID) in line 130
      33 lines of code
      1 parameters
      7 conditional paths
      uses variable FileToEntries defined in IncludeDirectives
      uses variable Sources defined in IncludeDirectives
      uses variable CI defined in IncludeDirectives
   function angledIncludeInsertionOffset(clang::FileID) in line 124
      25 lines of code
      1 parameters
      4 conditional paths
      uses function angledIncludeHintLoc(clang::FileID) defined in IncludeDirectives
      uses enumvalue NL_Prepend defined in IncludeDirectives.cpp
      uses variable File defined in PreprocessorTracker.cpp
      uses variable Sources defined in IncludeDirectives
      uses variable HeaderToGuard defined in IncludeDirectives
      uses enumvalue NL_PrependTwice defined in IncludeDirectives.cpp
      uses function findFileHeaderEndOffset(clang::FileID) defined in IncludeDirectives
      uses variable CI defined in IncludeDirectives
      uses function make_pair(T1,T2) defined in google-explicit-make-pair.cpp
   function findFileHeaderEndOffset(clang::FileID) in line 119
      30 lines of code
      1 parameters
      5 conditional paths
      uses enumvalue NL_Prepend defined in IncludeDirectives.cpp
      uses variable Sources defined in IncludeDirectives
      uses variable CI defined in IncludeDirectives
      uses enumvalue NL_PrependTwice defined in IncludeDirectives.cpp
      uses function make_pair(T1,T2) defined in google-explicit-make-pair.cpp
      uses enumvalue NL_AppendTwice defined in IncludeDirectives.cpp
   function hasInclude(const clang::FileEntry *,llvm::StringRef) in line 56
      protection public
      12 lines of code
      2 parameters
      2 conditional paths
      uses variable IncludeAsWrittenToLocationsMap defined in IncludeDirectives
      uses function lookForInclude(const clang::FileEntry *,const LocationVec &,SeenFilesSet &) defined in IncludeDirectives
      uses variable File defined in PreprocessorTracker.cpp
   function lookForInclude(const clang::FileEntry *,const LocationVec &,SeenFilesSet &) in line 110
      28 lines of code
      3 parameters
      7 conditional paths
      uses variable File defined in PreprocessorTracker.cpp
      uses function begin() defined in std::vector
      uses function end() defined in std::vector
      uses variable Sources defined in IncludeDirectives
      uses variable FileToEntries defined in IncludeDirectives
   function IncludeDirectives(clang::CompilerInstance &) in line 37
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses variable CI defined in IncludeDirectives
   variable CI in line 132
   variable FileToEntries in line 134
   variable HeaderToGuard in line 138
   variable IncludeAsWrittenToLocationsMap in line 137
   variable Sources in line 133
module IncludeDirectives::Entry
   function getHashLocation() in line 69
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function getIncludedFile() in line 72
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function isAngled() in line 76
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function Entry(clang::SourceLocation,const clang::FileEntry *,bool) in line 64
      protection public
      3 lines of code
      3 parameters
      1 conditional paths
   variable Angled in line 81
   variable HashLoc in line 79
   variable IncludedFile in line 80
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-modernize/Core/IncludeExcludeInfo.cpp
module IncludeExcludeInfo.cpp
   typedef PathString in line 26
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-modernize/Core/IncludeExcludeInfo.h
module IncludeExcludeInfo
   function isFileExplicitlyExcluded(llvm::StringRef) in line 52
      protection public
      9 lines of code
      1 parameters
      3 conditional paths
   function isFileIncluded(llvm::StringRef) in line 49
      protection public
      18 lines of code
      1 parameters
      4 conditional paths
   function isIncludeListEmpty() in line 55
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
      uses variable IncludeList defined in IncludeExcludeInfo
      uses function empty() defined in std::vector
   function readListFromFile(llvm::StringRef,llvm::StringRef) in line 40
      protection public
      28 lines of code
      2 parameters
      7 conditional paths
   function readListFromString(llvm::StringRef,llvm::StringRef) in line 32
      protection public
      10 lines of code
      2 parameters
      3 conditional paths
   variable ExcludeList in line 59
   variable IncludeList in line 58
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-modernize/Core/PerfSupport.cpp
module PerfSupport.cpp
   function collectSourcePerfData(const Transform &,SourcePerfData &) in line 22
      protection public
      10 lines of code
      2 parameters
      1 conditional paths
   function writePerfDataJSON(const llvm::StringRef,const SourcePerfData &) in line 33
      protection public
      56 lines of code
      2 parameters
      1 conditional paths
      uses function begin() defined in std::map
      uses function end() defined in std::map
   function dumpPerfData(const SourcePerfData &) in line 90
      protection public
      12 lines of code
      1 parameters
      1 conditional paths
      uses function begin() defined in std::map
      uses function end() defined in std::map
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-modernize/Core/PerfSupport.h
module PerfSupport.h
   typedef SourcePerfData in line 38
      protection public
   function collectSourcePerfData(const Transform &,SourcePerfData &) in line 42
      protection public
      10 lines of code
      2 parameters
      2 conditional paths
   function writePerfDataJSON(const llvm::StringRef,const SourcePerfData &) in line 49
      protection public
      56 lines of code
      2 parameters
      5 conditional paths
      uses function begin() defined in std::map
      uses function end() defined in std::map
   function dumpPerfData(const SourcePerfData &) in line 54
      protection public
      12 lines of code
      1 parameters
      3 conditional paths
      uses function begin() defined in std::map
      uses function end() defined in std::map
module PerfItem
   function PerfItem(const llvm::StringRef,float) in line 27
      protection public
      2 lines of code
      2 parameters
      1 conditional paths
   variable Duration in line 34
      protection public
   variable Label in line 31
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-modernize/Core/Refactoring.h
module Refactoring.h
   typedef ReplacementsVec in line 27
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-modernize/Core/ReplacementHandling.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-modernize/Core/ReplacementHandling.h
module ReplacementHandling
   function applyReplacements() in line 82
      protection public
      41 lines of code
      0 parameters
      7 conditional paths
      uses function c_str() defined in std::basic_string
   function enableFormatting(llvm::StringRef,llvm::StringRef) in line 56
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
   function findClangApplyReplacements(const char *) in line 36
      protection public
      16 lines of code
      1 parameters
      3 conditional paths
      uses variable Argv0 defined in Modularize.cpp
   function generateReplacementsFileName(llvm::StringRef,llvm::StringRef,llvm::SmallVectorImpl< char > &,llvm::SmallVectorImpl< char > &) in line 102
      protection public
      16 lines of code
      4 parameters
      2 conditional paths
      uses variable Result defined in USRFinder.cpp
   function generateTempDir() in line 112
      protection public
      8 lines of code
      0 parameters
      1 conditional paths
      uses variable Result defined in USRFinder.cpp
   function serializeReplacements(const TUReplacementsMap &) in line 71
      protection public
      32 lines of code
      1 parameters
      4 conditional paths
      uses macro definition assert defined in misc-assert-side-effect.cpp
      uses variable Result defined in USRFinder.cpp
   function setDestinationDir(llvm::StringRef) in line 42
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses variable DestinationDir defined in ReplacementHandling
      uses function useTempDestinationDir() defined in ReplacementHandling
      uses function enableFormatting(llvm::StringRef,llvm::StringRef) defined in ReplacementHandling
      uses variable StyleConfigDir defined in ReplacementHandling
      uses function serializeReplacements(const TUReplacementsMap &) defined in ReplacementHandling
      uses function applyReplacements() defined in ReplacementHandling
      uses function generateReplacementsFileName(llvm::StringRef,llvm::StringRef,llvm::SmallVectorImpl< char > &,llvm::SmallVectorImpl< char > &) defined in ReplacementHandling
      uses variable Result defined in USRFinder.cpp
      uses function generateTempDir() defined in ReplacementHandling
   function useTempDestinationDir() in line 47
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function ReplacementHandling() in line 25
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
      uses function findClangApplyReplacements(const char *) defined in ReplacementHandling
      uses variable Argv0 defined in Modularize.cpp
   variable CARPath in line 116
   variable DestinationDir in line 117
   variable DoFormat in line 118
   variable FormatStyle in line 119
   variable StyleConfigDir in line 120
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-modernize/Core/Transform.cpp
module Transform.cpp
   function TransformsOptionsCategory("Transforms' options") in line 28
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
module @19::ActionFactory
   variable Finder in line 75
   variable Owner in line 76
module @19::ActionFactory::FactoryAdaptor
   variable Finder in line 71
   variable Owner in line 72
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-modernize/Core/Transform.h
module Transform.h
   enumeration RiskLevel in line 29
      protection public
   typedef TUReplacementsMap in line 55
      protection public
   typedef TransformFactoryRegistry in line 323
      protection public
   variable TransformsOptionsCategory in line 58
      protection public
   enumvalue RL_Safe in line 31
      protection public
   enumvalue RL_Reasonable in line 34
      protection public
   enumvalue RL_Risky in line 38
      protection public
module TransformOptions
   variable EnableTiming in line 63
      protection public
   variable MaxRiskLevel in line 70
      protection public
   variable ModifiableFiles in line 67
      protection public
module Transform
   abstract class
   function addReplacementForCurrentTU(const clang::tooling::Replacement &) in line 176
      protection public
      11 lines of code
      1 parameters
      3 conditional paths
      uses variable CurrentSource defined in Transform
      uses variable Replacements defined in Transform
   function addTiming(llvm::StringRef,llvm::TimeRecord) in line 200
      3 lines of code
      2 parameters
      1 conditional paths
      uses variable Timings defined in Transform
      uses function make_pair(T1,T2) defined in google-explicit-make-pair.cpp
   function apply(const clang::tooling::CompilationDatabase &,const std::vector< std::string > &) in line 100
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function createActionFactory(clang::ast_matchers::MatchFinder &) in line 212
      3 lines of code
      1 parameters
      1 conditional paths
      uses variable Finder defined in ClangTidy.cpp
   function getAcceptedChanges() in line 114
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function getAllReplacements() in line 179
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function getChangesMade() in line 104
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function getChangesNotMade() in line 109
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function getDeferredChanges() in line 119
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function getName() in line 122
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
      uses variable Name defined in PreprocessorTracker.cpp
   function getRejectedChanges() in line 116
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function handleBeginSource(clang::CompilerInstance &,llvm::StringRef) in line 150
      protection public
      9 lines of code
      2 parameters
      2 conditional paths
      uses variable CurrentSource defined in Transform
      uses variable Filename defined in IncludeOrderCheck.cpp
      uses function Options() defined in Transform
      uses variable Timings defined in Transform
      uses function make_pair(T1,T2) defined in google-explicit-make-pair.cpp
   function handleEndSource() in line 159
      protection public
      5 lines of code
      0 parameters
      2 conditional paths
      uses variable CurrentSource defined in Transform
      uses function Options() defined in Transform
      uses variable Timings defined in Transform
   function isAcceptableRiskLevel(RiskLevel) in line 141
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
      uses variable MaxRiskLevel defined in TransformOptions
      uses variable Filename defined in IncludeOrderCheck.cpp
   function isFileModifiable(const clang::SourceManager &,const clang::SourceLocation &) in line 136
      protection public
      11 lines of code
      2 parameters
      3 conditional paths
      uses variable SM defined in IncludeOrderCheck.cpp
      uses variable Loc defined in IncludeOrderCheck.cpp
      uses variable GlobalOptions defined in Transform
      uses variable ModifiableFiles defined in TransformOptions
      uses function isFileIncluded(llvm::StringRef) defined in IncludeExcludeInfo
   function Options() in line 204
      1 lines of code
      0 parameters
      1 conditional paths
      uses variable Finder defined in ClangTidy.cpp
   function Reset() in line 128
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
      uses variable SM defined in IncludeOrderCheck.cpp
      uses variable Loc defined in IncludeOrderCheck.cpp
   function setAcceptedChanges(unsigned) in line 185
      3 lines of code
      1 parameters
      1 conditional paths
   function setDeferredChanges(unsigned) in line 191
      3 lines of code
      1 parameters
      1 conditional paths
   function setRejectedChanges(unsigned) in line 188
      3 lines of code
      1 parameters
      1 conditional paths
   function timing_begin() in line 168
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function timing_end() in line 170
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function Transform(llvm::StringRef,const TransformOptions &) in line 88
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function Reset() defined in Transform
   function ~Transform() in line 90
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   variable AcceptedChanges in line 220
   variable CurrentSource in line 218
   variable DeferredChanges in line 222
   variable GlobalOptions in line 216
   variable Name in line 215
   variable RejectedChanges in line 221
   variable Replacements in line 217
   variable Timings in line 219
module Version
   function getFromString(llvm::StringRef) in line 257
      protection public
      15 lines of code
      1 parameters
      4 conditional paths
      uses variable Minor defined in Version
      uses variable Major defined in Version
   function getMajor() in line 249
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function getMinor() in line 250
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function isNull() in line 248
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function operator!=(Version) in line 243
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function operator<(Version) in line 231
      protection public
      7 lines of code
      1 parameters
      3 conditional paths
      uses variable Major defined in Version
      uses variable Minor defined in Version
   function operator<=(Version) in line 245
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function operator==(Version) in line 239
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
      uses variable Major defined in Version
      uses variable Minor defined in Version
   function operator>(Version) in line 244
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function operator>=(Version) in line 246
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function Version(unsigned,unsigned) in line 228
      protection public
      2 lines of code
      2 parameters
      1 conditional paths
   variable Major in line 260
   variable Minor in line 261
module CompilerVersions
   variable Clang in line 266
      protection public
   variable Gcc in line 266
      protection public
   variable Icc in line 266
      protection public
   variable Msvc in line 266
      protection public
module TransformFactory
   abstract class
   function createTransform(const TransformOptions &) in line 309
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function supportsCompilers(CompilerVersions) in line 313
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses variable Clang defined in CompilerVersions
      uses variable Gcc defined in CompilerVersions
      uses variable Icc defined in CompilerVersions
      uses variable Msvc defined in CompilerVersions
   function ~TransformFactory() in line 308
      protection public
      1 lines of code
      0 parameters
      2 conditional paths
      uses function isNull() defined in Version
   variable Since in line 320
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-modernize/Core/Transforms.cpp
module Transforms.cpp
   function TransformCategory("Transforms") in line 20
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-modernize/Core/Transforms.h
module Transforms.h
   typedef TransformCreator in line 34
      protection public
   variable TransformCategory in line 41
      protection public
   function ConstructTransform(const TransformOptions &) in line 36
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
      uses variable TransformCategory defined in Transforms.h
module Transforms
   function begin() in line 68
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function createSelectedTransforms(const TransformOptions &,const CompilerVersions &) in line 63
      protection public
      23 lines of code
      2 parameters
      5 conditional paths
      uses function hasAnyExplicitOption() defined in Transforms
      uses function begin(const MyArray &) defined in free_begin_end_fail.cpp
      uses function end(const MyArray &) defined in free_begin_end_fail.cpp
      uses variable Options defined in Transforms
      uses variable ChosenTransforms defined in Transforms
   function end() in line 72
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function hasAnyExplicitOption() in line 75
      7 lines of code
      0 parameters
      3 conditional paths
      uses variable Options defined in Transforms
   function registerTransforms() in line 58
      protection public
      7 lines of code
      0 parameters
      2 conditional paths
      uses function begin(const MyArray &) defined in free_begin_end_fail.cpp
      uses function end(const MyArray &) defined in free_begin_end_fail.cpp
      uses variable Options defined in Transforms
      uses function TransformCategory("Transforms") defined in Transforms.cpp
   function ~Transforms() in line 52
      protection public
      9 lines of code
      0 parameters
      3 conditional paths
      uses variable ChosenTransforms defined in Transforms
      uses function begin() defined in std::vector
      uses function end() defined in std::vector
      uses variable Options defined in Transforms
   variable ChosenTransforms in line 80
   variable Options in line 81
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-modernize/LoopConvert/LoopActions.cpp
module LoopActions.cpp
   function getStringFromRange(SourceManager &,const LangOptions &,SourceRange) in line 206
      protection public
      10 lines of code
      3 parameters
      2 conditional paths
      uses variable SourceMgr defined in USRFinder.cpp
      uses variable Range defined in IncludeOrderCheck.cpp
      uses variable LangOpts defined in ClangTidy.cpp
   function getDeclRef(const Expr *) in line 218
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function getReferencedVariable(const Expr *) in line 224
      protection public
      5 lines of code
      1 parameters
      2 conditional paths
      uses function getDeclRef(const Expr *) defined in LoopActions.cpp
   function isDirectMemberExpr(const Expr *) in line 232
      protection public
      5 lines of code
      1 parameters
      2 conditional paths
   function areSameVariable(const ValueDecl *,const ValueDecl *) in line 239
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function exprReferencesVariable(const ValueDecl *,const Expr *) in line 246
      protection public
      6 lines of code
      2 parameters
      2 conditional paths
      uses function getDeclRef(const Expr *) defined in LoopActions.cpp
      uses function areSameVariable(const ValueDecl *,const ValueDecl *) defined in LoopActions.cpp
   function areSameExpr(ASTContext *,const Expr *,const Expr *) in line 254
      protection public
      10 lines of code
      3 parameters
      2 conditional paths
      uses variable Context defined in ClangTidy.cpp
   function digThroughConstructors(const Expr *) in line 278
      protection public
      18 lines of code
      1 parameters
      5 conditional paths
   function getDereferenceOperand(const Expr *) in line 299
      protection public
      10 lines of code
      1 parameters
      3 conditional paths
   function containsExpr(ASTContext *,const ContainerT *,const Expr *) in line 312
      protection public
      10 lines of code
      3 parameters
      3 conditional paths
      uses variable Context defined in ClangTidy.cpp
   function isIndexInSubscriptExpr(const Expr *,const VarDecl *) in line 331
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
      uses function getDeclRef(const Expr *) defined in LoopActions.cpp
      uses function areSameVariable(const ValueDecl *,const ValueDecl *) defined in LoopActions.cpp
   function isIndexInSubscriptExpr(ASTContext *,const Expr *,const VarDecl *,const Expr *,const Expr *,bool) in line 365
      protection public
      17 lines of code
      6 parameters
      5 conditional paths
      uses function isIndexInSubscriptExpr(const Expr *,const VarDecl *) defined in LoopActions.cpp
      uses function areSameExpr(ASTContext *,const Expr *,const Expr *) defined in LoopActions.cpp
      uses variable Context defined in ClangTidy.cpp
      uses function getDereferenceOperand(const Expr *) defined in LoopActions.cpp
   function isDereferenceOfOpCall(const CXXOperatorCallExpr *,const VarDecl *) in line 391
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses function exprReferencesVariable(const ValueDecl *,const Expr *) defined in LoopActions.cpp
   function isDereferenceOfUop(const UnaryOperator *,const VarDecl *) in line 404
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses function exprReferencesVariable(const ValueDecl *,const Expr *) defined in LoopActions.cpp
   function isAliasDecl(const Decl *,const VarDecl *) in line 427
      protection public
      41 lines of code
      2 parameters
      10 conditional paths
      uses function digThroughConstructors(const Expr *) defined in LoopActions.cpp
      uses function isIndexInSubscriptExpr(const Expr *,const VarDecl *) defined in LoopActions.cpp
      uses function isDereferenceOfUop(const UnaryOperator *,const VarDecl *) defined in LoopActions.cpp
      uses function isDereferenceOfOpCall(const CXXOperatorCallExpr *,const VarDecl *) defined in LoopActions.cpp
      uses macro definition assert defined in misc-assert-side-effect.cpp
   function arrayMatchesBoundExpr(ASTContext *,const QualType &,const Expr *) in line 482
      protection public
      15 lines of code
      3 parameters
      4 conditional paths
      uses variable Context defined in ClangTidy.cpp
   function getContainerFromBeginEndCall(const Expr *,bool,bool *) in line 883
      protection public
      23 lines of code
      3 parameters
      5 conditional paths
      uses function digThroughConstructors(const Expr *) defined in LoopActions.cpp
      uses variable Name defined in PreprocessorTracker.cpp
   function findContainer(ASTContext *,const Expr *,const Expr *,bool *) in line 912
      protection public
      23 lines of code
      4 parameters
      3 conditional paths
      uses function getContainerFromBeginEndCall(const Expr *,bool,bool *) defined in LoopActions.cpp
      uses function areSameExpr(ASTContext *,const Expr *,const Expr *) defined in LoopActions.cpp
      uses variable Context defined in ClangTidy.cpp
module Usage
   function Usage(const Expr *) in line 32
      protection public
      2 lines of code
      1 parameters
      1 conditional paths
   function Usage(const Expr *,bool,SourceRange) in line 34
      protection public
      2 lines of code
      3 parameters
      1 conditional paths
   variable E in line 28
      protection public
   variable IsArrow in line 29
      protection public
   variable Range in line 30
      protection public
module Confidence
   function getRiskLevel() in line 55
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function lowerTo(RiskLevel) in line 50
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function Confidence(RiskLevel) in line 46
      protection public
      2 lines of code
      1 parameters
      1 conditional paths
   variable CurrentLevel in line 58
module ForLoopIndexUseVisitor
   inherits from clang::RecursiveASTVisitor
   function addComponent(const Expr *) in line 157
      6 lines of code
      1 parameters
      1 conditional paths
      uses variable Context defined in ClangTidy.cpp
      uses function make_pair(T1,T2) defined in google-explicit-make-pair.cpp
   function addComponents(const ComponentVector &) in line 105
      protection public
      6 lines of code
      1 parameters
      2 conditional paths
   function aliasFromForInit() in line 138
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function aliasUseRequired() in line 133
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function findAndVerifyUsages(const Stmt *) in line 98
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function getAliasDecl() in line 122
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function getContainerIndexed() in line 116
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function getRiskLevel() in line 125
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function getUsages() in line 113
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function TraverseArraySubscriptExpr(ArraySubscriptExpr *) in line 146
      22 lines of code
      1 parameters
      4 conditional paths
      uses variable Arr defined in naming-alias.cpp
      uses function isIndexInSubscriptExpr(const Expr *,const VarDecl *) defined in LoopActions.cpp
      uses function areSameExpr(ASTContext *,const Expr *,const Expr *) defined in LoopActions.cpp
      uses variable Context defined in ClangTidy.cpp
      uses function arrayMatchesBoundExpr(ASTContext *,const QualType &,const Expr *) defined in LoopActions.cpp
   function TraverseCXXMemberCallExpr(CXXMemberCallExpr *) in line 147
      24 lines of code
      1 parameters
      5 conditional paths
      uses function isIndexInSubscriptExpr(const Expr *,const VarDecl *) defined in LoopActions.cpp
      uses variable Context defined in ClangTidy.cpp
      uses function containsExpr(ASTContext *,const ContainerT *,const Expr *) defined in LoopActions.cpp
      uses enumvalue RL_Risky defined in Transform.h
   function TraverseCXXOperatorCallExpr(CXXOperatorCallExpr *) in line 148
      26 lines of code
      1 parameters
      6 conditional paths
      uses function isDereferenceOfOpCall(const CXXOperatorCallExpr *,const VarDecl *) defined in LoopActions.cpp
      uses function isIndexInSubscriptExpr(const Expr *,const VarDecl *) defined in LoopActions.cpp
      uses variable Context defined in ClangTidy.cpp
   function TraverseMemberExpr(MemberExpr *) in line 149
      44 lines of code
      1 parameters
      6 conditional paths
      uses function getDeclRef(const Expr *) defined in LoopActions.cpp
      uses macro definition assert defined in misc-assert-side-effect.cpp
      uses variable Context defined in ClangTidy.cpp
      uses function exprReferencesVariable(const ValueDecl *,const Expr *) defined in LoopActions.cpp
   function TraverseStmt(Stmt *) in line 153
      10 lines of code
      1 parameters
      1 conditional paths
      uses variable Result defined in USRFinder.cpp
   function TraverseUnaryDeref(UnaryOperator *) in line 150
      10 lines of code
      1 parameters
      2 conditional paths
      uses function isDereferenceOfUop(const UnaryOperator *,const VarDecl *) defined in LoopActions.cpp
   function VisitDeclRefExpr(DeclRefExpr *) in line 151
      8 lines of code
      1 parameters
      3 conditional paths
      uses function areSameVariable(const ValueDecl *,const ValueDecl *) defined in LoopActions.cpp
      uses function containsExpr(ASTContext *,const ContainerT *,const Expr *) defined in LoopActions.cpp
      uses variable Context defined in ClangTidy.cpp
      uses enumvalue RL_Risky defined in Transform.h
   function VisitDeclStmt(DeclStmt *) in line 152
      21 lines of code
      1 parameters
      6 conditional paths
      uses function isAliasDecl(const Decl *,const VarDecl *) defined in LoopActions.cpp
   function ForLoopIndexUseVisitor(ASTContext *,const VarDecl *,const VarDecl *,const Expr *,const Expr *,bool) in line 69
      protection public
      17 lines of code
      6 parameters
      2 conditional paths
      uses variable Context defined in ClangTidy.cpp
   variable AliasDecl in line 182
   variable AliasFromForInit in line 202
   variable ArrayBoundExpr in line 173
   variable ConfidenceLevel in line 183
   variable ContainerExpr in line 171
   variable ContainerNeedsDereference in line 174
   variable Context in line 165
   variable CurrStmtParent in line 197
   variable DependentExprs in line 189
   variable EndVar in line 169
   variable IndexVar in line 167
   variable NextStmtParent in line 193
   variable OnlyUsedAsIndex in line 180
   variable ReplaceWithAliasUse in line 200
   variable Usages in line 179
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-modernize/LoopConvert/LoopActions.h
module LoopActions.h
   enumeration LoopFixerKind in line 31
      protection public
   typedef UsageResult in line 29
      protection public
   enumvalue LFK_Array in line 32
      protection public
   enumvalue LFK_Iterator in line 33
      protection public
   enumvalue LFK_PseudoArray in line 35
      protection public
module TUTrackingInfo
   function getGeneratedDecls() in line 51
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
      uses variable GeneratedDecls defined in TUTrackingInfo
   function getParentFinder() in line 50
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
      uses variable ParentFinder defined in TUTrackingInfo
   function getReplacedVars() in line 52
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
      uses variable ReplacedVars defined in TUTrackingInfo
   function reset() in line 42
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
      uses variable ParentFinder defined in TUTrackingInfo
      uses function reset(T *) defined in std::unique_ptr
      uses variable GeneratedDecls defined in TUTrackingInfo
      uses variable ReplacedVars defined in TUTrackingInfo
   variable GeneratedDecls in line 57
   variable ParentFinder in line 56
   variable ReplacedVars in line 58
module LoopFixer
   inherits from clang::ast_matchers::MatchFinder::MatchCallback
   function checkDeferralsAndRejections(clang::ASTContext *,const clang::Expr *,Confidence,const clang::ForStmt *) in line 110
      47 lines of code
      4 parameters
      6 conditional paths
      uses variable Context defined in ClangTidy.cpp
      uses function getRiskLevel() defined in Confidence
   function doConversion(clang::ASTContext *,const clang::VarDecl *,const clang::VarDecl *,llvm::StringRef,const UsageResult &,const clang::DeclStmt *,bool,bool,const clang::ForStmt *,bool,bool,bool) in line 88
      85 lines of code
      12 parameters
      8 conditional paths
      uses variable Context defined in ClangTidy.cpp
      uses function make_pair(T1,T2) defined in google-explicit-make-pair.cpp
      uses variable Range defined in IncludeOrderCheck.cpp
   function findAndVerifyUsages(clang::ASTContext *,const clang::VarDecl *,const clang::VarDecl *,const clang::Expr *,const clang::Expr *,bool,bool,bool,const clang::ForStmt *,Confidence) in line 98
      45 lines of code
      10 parameters
      6 conditional paths
      uses variable Finder defined in ClangTidy.cpp
      uses variable Context defined in ClangTidy.cpp
      uses function findExprComponents(const clang::Expr *) defined in ComponentFinderASTVisitor
      uses function getComponents() defined in ComponentFinderASTVisitor
      uses function lowerTo(RiskLevel) defined in Confidence
      uses enumvalue LFK_Array defined in LoopActions.h
      uses enumvalue RL_Risky defined in Transform.h
   function run(const clang::ast_matchers::MatchFinder::MatchResult &) in line 75
      protection public
      109 lines of code
      1 parameters
      16 conditional paths
      uses variable Result defined in USRFinder.cpp
      uses enumvalue RL_Safe defined in Transform.h
      uses variable Context defined in ClangTidy.cpp
      uses variable LoopName defined in LoopMatchers.cpp
      uses variable IncrementVarName defined in LoopMatchers.cpp
      uses variable ConditionVarName defined in LoopMatchers.cpp
      uses variable InitVarName defined in LoopMatchers.cpp
      uses variable EndVarName defined in LoopMatchers.cpp
      uses variable ConditionEndVarName defined in LoopMatchers.cpp
      uses variable EndCallName defined in LoopMatchers.cpp
      uses variable ConditionBoundName defined in LoopMatchers.cpp
      uses enumvalue LFK_Array defined in LoopActions.h
      uses function lowerTo(RiskLevel) defined in Confidence
      uses enumvalue RL_Reasonable defined in Transform.h
      uses enumvalue LFK_Iterator defined in LoopActions.h
      uses variable BeginCallName defined in LoopMatchers.cpp
      uses macro definition assert defined in misc-assert-side-effect.cpp
      uses variable DerefByValueResultName defined in LoopMatchers.cpp
      uses variable DerefByRefResultName defined in LoopMatchers.cpp
      uses enumvalue LFK_PseudoArray defined in LoopActions.h
   function LoopFixer(TUTrackingInfo &,unsigned *,unsigned *,unsigned *,RiskLevel,LoopFixerKind,Transform &) in line 67
      protection public
      6 lines of code
      7 parameters
      1 conditional paths
      uses variable Result defined in USRFinder.cpp
   variable AcceptedChanges in line 79
   variable DeferredChanges in line 80
   variable FixerKind in line 83
   variable MaxRisk in line 82
   variable Owner in line 84
   variable RejectedChanges in line 81
   variable TUInfo in line 78
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-modernize/LoopConvert/LoopConvert.cpp
module LoopConvert.cpp
   variable LoopConvertTransformAnchorSource in line 93
      protection public
   function X("loop-convert","Make use of range-based for loops where possible") in line 89
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
module @25::LoopConvertFactory
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-modernize/LoopConvert/LoopConvert.h
module LoopConvertTransform
   inherits from Transform
   function apply(const clang::tooling::CompilationDatabase &,const std::vector< std::string > &) in line 34
      protection public
      35 lines of code
      2 parameters
      2 conditional paths
      uses variable Finder defined in ClangTidy.cpp
      uses enumvalue LFK_Array defined in LoopActions.h
      uses function makeArrayLoopMatcher() defined in LoopMatchers.cpp
      uses enumvalue LFK_Iterator defined in LoopActions.h
      uses function makeIteratorLoopMatcher() defined in LoopMatchers.cpp
      uses enumvalue LFK_PseudoArray defined in LoopActions.h
      uses function makePseudoArrayLoopMatcher() defined in LoopMatchers.cpp
   function handleBeginSource(clang::CompilerInstance &,llvm::StringRef) in line 37
      protection public
      7 lines of code
      2 parameters
      1 conditional paths
      uses function handleBeginSource(clang::CompilerInstance &,llvm::StringRef) defined in Transform
      uses variable Filename defined in IncludeOrderCheck.cpp
   function LoopConvertTransform(const TransformOptions &) in line 30
      protection public
      2 lines of code
      1 parameters
      1 conditional paths
      uses function apply(const clang::tooling::CompilationDatabase &,const std::vector< std::string > &) defined in LoopConvertTransform
      uses function handleBeginSource(clang::CompilerInstance &,llvm::StringRef) defined in LoopConvertTransform
      uses variable Filename defined in IncludeOrderCheck.cpp
   variable TUInfo in line 41
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-modernize/LoopConvert/LoopMatchers.cpp
module LoopMatchers.cpp
   variable LoopName in line 21
      protection public
   variable ConditionBoundName in line 22
      protection public
   variable ConditionVarName in line 23
      protection public
   variable IncrementVarName in line 24
      protection public
   variable InitVarName in line 25
      protection public
   variable BeginCallName in line 26
      protection public
   variable EndCallName in line 27
      protection public
   variable ConditionEndVarName in line 28
      protection public
   variable EndVarName in line 29
      protection public
   variable DerefByValueResultName in line 30
      protection public
   variable DerefByRefResultName in line 31
      protection public
   variable AnyType in line 34
      protection public
   variable IntegerComparisonMatcher in line 36
      protection public
   variable InitToZeroMatcher in line 40
      protection public
   variable IncrementVarMatcher in line 44
      protection public
   function makeArrayLoopMatcher() in line 69
      protection public
      16 lines of code
      0 parameters
      1 conditional paths
      uses variable ConditionBoundName defined in LoopMatchers.cpp
      uses variable InitToZeroMatcher defined in LoopMatchers.cpp
      uses variable IntegerComparisonMatcher defined in LoopMatchers.cpp
      uses variable IncrementVarMatcher defined in LoopMatchers.cpp
      uses variable LoopName defined in LoopMatchers.cpp
   function makeIteratorLoopMatcher() in line 113
      protection public
      119 lines of code
      0 parameters
      1 conditional paths
      uses variable BeginCallName defined in LoopMatchers.cpp
      uses variable InitVarName defined in LoopMatchers.cpp
      uses variable EndVarName defined in LoopMatchers.cpp
      uses variable ConditionEndVarName defined in LoopMatchers.cpp
      uses variable EndCallName defined in LoopMatchers.cpp
      uses variable ConditionVarName defined in LoopMatchers.cpp
      uses variable DerefByValueResultName defined in LoopMatchers.cpp
      uses variable DerefByRefResultName defined in LoopMatchers.cpp
      uses variable AnyType defined in LoopMatchers.cpp
      uses variable IncrementVarName defined in LoopMatchers.cpp
      uses variable LoopName defined in LoopMatchers.cpp
   function makePseudoArrayLoopMatcher() in line 261
      protection public
      86 lines of code
      0 parameters
      1 conditional paths
      uses variable EndCallName defined in LoopMatchers.cpp
      uses variable EndVarName defined in LoopMatchers.cpp
      uses variable ConditionEndVarName defined in LoopMatchers.cpp
      uses variable InitToZeroMatcher defined in LoopMatchers.cpp
      uses variable IntegerComparisonMatcher defined in LoopMatchers.cpp
      uses variable IncrementVarMatcher defined in LoopMatchers.cpp
      uses variable LoopName defined in LoopMatchers.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-modernize/LoopConvert/LoopMatchers.h
module LoopMatchers.h
   variable LoopName in line 25
      protection public
   variable ConditionBoundName in line 26
      protection public
   variable ConditionVarName in line 27
      protection public
   variable ConditionEndVarName in line 28
      protection public
   variable IncrementVarName in line 29
      protection public
   variable InitVarName in line 30
      protection public
   variable BeginCallName in line 31
      protection public
   variable EndExprName in line 32
      protection public
   variable EndCallName in line 33
      protection public
   variable EndVarName in line 34
      protection public
   variable DerefByValueResultName in line 35
      protection public
   variable DerefByRefResultName in line 36
      protection public
   function makeArrayLoopMatcher() in line 38
      protection public
      16 lines of code
      0 parameters
      1 conditional paths
      uses variable ConditionBoundName defined in LoopMatchers.cpp
      uses variable LoopName defined in LoopMatchers.cpp
   function makeIteratorLoopMatcher() in line 39
      protection public
      119 lines of code
      0 parameters
      1 conditional paths
      uses variable BeginCallName defined in LoopMatchers.cpp
      uses variable InitVarName defined in LoopMatchers.cpp
      uses variable EndVarName defined in LoopMatchers.cpp
      uses variable ConditionEndVarName defined in LoopMatchers.cpp
      uses variable EndCallName defined in LoopMatchers.cpp
      uses variable ConditionVarName defined in LoopMatchers.cpp
      uses variable DerefByValueResultName defined in LoopMatchers.cpp
      uses variable DerefByRefResultName defined in LoopMatchers.cpp
      uses variable IncrementVarName defined in LoopMatchers.cpp
      uses variable LoopName defined in LoopMatchers.cpp
   function makePseudoArrayLoopMatcher() in line 40
      protection public
      86 lines of code
      0 parameters
      1 conditional paths
      uses variable EndCallName defined in LoopMatchers.cpp
      uses variable EndVarName defined in LoopMatchers.cpp
      uses variable ConditionEndVarName defined in LoopMatchers.cpp
      uses variable LoopName defined in LoopMatchers.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-modernize/LoopConvert/StmtAncestor.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-modernize/LoopConvert/StmtAncestor.h
module StmtAncestor.h
   typedef StmtParentMap in line 22
      protection public
   typedef DeclParentMap in line 27
      protection public
   typedef ReplacedVarsMap in line 32
      protection public
   typedef StmtGeneratedVarNameMap in line 35
      protection public
   typedef ComponentVector in line 38
      protection public
module StmtAncestorASTVisitor
   inherits from clang::RecursiveASTVisitor
   function gatherAncestors(const clang::TranslationUnitDecl *) in line 52
      protection public
      4 lines of code
      1 parameters
      2 conditional paths
      uses variable StmtAncestors defined in StmtAncestorASTVisitor
   function getDeclToParentStmtMap() in line 63
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses variable DeclParents defined in StmtAncestorASTVisitor
   function getStmtToParentStmtMap() in line 58
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses variable StmtAncestors defined in StmtAncestorASTVisitor
   function TraverseStmt(clang::Stmt *) in line 74
      7 lines of code
      1 parameters
      1 conditional paths
      uses function make_pair(T1,T2) defined in google-explicit-make-pair.cpp
   function VisitDeclStmt(clang::DeclStmt *) in line 75
      7 lines of code
      1 parameters
      3 conditional paths
      uses function make_pair(T1,T2) defined in google-explicit-make-pair.cpp
   function StmtAncestorASTVisitor() in line 45
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses variable StmtStack defined in StmtAncestorASTVisitor
   variable DeclParents in line 71
   variable StmtAncestors in line 70
   variable StmtStack in line 72
module ComponentFinderASTVisitor
   inherits from clang::RecursiveASTVisitor
   function findExprComponents(const clang::Expr *) in line 86
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function TraverseStmt(clang::Stmt *) defined in StmtAncestorASTVisitor
   function getComponents() in line 92
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function VisitDeclRefExpr(clang::DeclRefExpr *) in line 101
      4 lines of code
      1 parameters
      1 conditional paths
   function VisitMemberExpr(clang::MemberExpr *) in line 102
      4 lines of code
      1 parameters
      1 conditional paths
   function ComponentFinderASTVisitor() in line 83
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   variable Components in line 99
module DependencyFinderASTVisitor
   inherits from clang::RecursiveASTVisitor
   function dependsOnInsideVariable(const clang::Stmt *) in line 147
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function TraverseStmt(clang::Stmt *) defined in StmtAncestorASTVisitor
   function VisitDeclRefExpr(clang::DeclRefExpr *) in line 163
      5 lines of code
      1 parameters
      2 conditional paths
   function VisitVarDecl(clang::VarDecl *) in line 162
      21 lines of code
      1 parameters
      5 conditional paths
   function DependencyFinderASTVisitor(const StmtParentMap *,const DeclParentMap *,const ReplacedVarsMap *,const clang::Stmt *) in line 110
      protection public
      6 lines of code
      4 parameters
      1 conditional paths
   variable ContainingStmt in line 158
   variable DeclParents in line 157
   variable DependsOnInsideVariable in line 160
   variable ReplacedVars in line 159
   variable StmtParents in line 156
module DeclFinderASTVisitor
   inherits from clang::RecursiveASTVisitor
   function findUsages(const clang::Stmt *) in line 180
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function TraverseStmt(clang::Stmt *) defined in StmtAncestorASTVisitor
   function VisitDeclRefExpr(clang::DeclRefExpr *) in line 197
      5 lines of code
      1 parameters
      2 conditional paths
   function VisitForStmt(clang::ForStmt *) in line 195
      8 lines of code
      1 parameters
      2 conditional paths
      uses variable Name defined in PreprocessorTracker.cpp
   function VisitNamedDecl(clang::NamedDecl *) in line 196
      8 lines of code
      1 parameters
      2 conditional paths
      uses variable Name defined in PreprocessorTracker.cpp
   function VisitTypeLoc(clang::TypeLoc) in line 198
      19 lines of code
      1 parameters
      4 conditional paths
      uses variable Name defined in PreprocessorTracker.cpp
   function DeclFinderASTVisitor(const std::string &,const StmtGeneratedVarNameMap *) in line 173
      protection public
      3 lines of code
      2 parameters
      1 conditional paths
   variable Found in line 193
   variable GeneratedDecls in line 192
   variable Name in line 189
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-modernize/LoopConvert/VariableNaming.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-modernize/LoopConvert/VariableNaming.h
module VariableNamer
   function createIndexName() in line 44
      protection public
      38 lines of code
      0 parameters
      8 conditional paths
   function declarationExists(llvm::StringRef) in line 56
      29 lines of code
      1 parameters
      5 conditional paths
      uses macro definition assert defined in misc-assert-side-effect.cpp
      uses variable Context defined in ClangTidy.cpp
      uses function findUsages(const clang::Stmt *) defined in DeclFinderASTVisitor
   function VariableNamer(StmtGeneratedVarNameMap *,const StmtParentMap *,const clang::Stmt *,const clang::VarDecl *,const clang::VarDecl *,const clang::ASTContext *) in line 31
      protection public
      7 lines of code
      6 parameters
      1 conditional paths
      uses function createIndexName() defined in VariableNamer
   variable Context in line 52
   variable GeneratedDecls in line 47
   variable OldIndex in line 50
   variable ReverseAST in line 48
   variable SourceStmt in line 49
   variable TheContainer in line 51
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-modernize/PassByValue/PassByValue.cpp
module PassByValue.cpp
   variable PassByValueTransformAnchorSource in line 78
      protection public
   function X("pass-by-value","Pass parameters by value where possible") in line 74
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
module @33::PassByValueFactory
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-modernize/PassByValue/PassByValue.h
module PassByValueTransform
   inherits from Transform
   function apply(const clang::tooling::CompilationDatabase &,const std::vector< std::string > &) in line 61
      protection public
      23 lines of code
      2 parameters
      2 conditional paths
      uses variable Finder defined in ClangTidy.cpp
      uses function makePassByValueCtorParamMatcher() defined in PassByValueMatchers.cpp
   function handleBeginSource(clang::CompilerInstance &,llvm::StringRef) in line 66
      7 lines of code
      2 parameters
      1 conditional paths
      uses macro definition assert defined in misc-assert-side-effect.cpp
      uses variable IncludeDirectives defined in IncludeOrderCheck.cpp
      uses function handleBeginSource(clang::CompilerInstance &,llvm::StringRef) defined in Transform
      uses variable Filename defined in IncludeOrderCheck.cpp
   function PassByValueTransform(const TransformOptions &) in line 57
      protection public
      2 lines of code
      1 parameters
      1 conditional paths
      uses function apply(const clang::tooling::CompilationDatabase &,const std::vector< std::string > &) defined in PassByValueTransform
      uses function handleBeginSource(clang::CompilerInstance &,llvm::StringRef) defined in PassByValueTransform
      uses variable Filename defined in IncludeOrderCheck.cpp
   variable IncludeManager in line 69
   variable Replacer in line 70
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-modernize/PassByValue/PassByValueActions.cpp
module PassByValueActions.cpp
   function paramReferredExactlyOnce(const CXXConstructorDecl *,const ParmVarDecl *) in line 71
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
   function collectParamDecls(const CXXConstructorDecl *,const ParmVarDecl *,llvm::SmallVectorImpl< const ParmVarDecl * > &) in line 80
      protection public
      9 lines of code
      3 parameters
      2 conditional paths
module @35::ExactlyOneUsageVisitor
   variable Count in line 64
   variable ParamDecl in line 63
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-modernize/PassByValue/PassByValueActions.h
module ConstructorParamReplacer
   inherits from clang::ast_matchers::MatchFinder::MatchCallback
   function run(const clang::ast_matchers::MatchFinder::MatchResult &) in line 66
      86 lines of code
      1 parameters
      9 conditional paths
      uses macro definition assert defined in misc-assert-side-effect.cpp
      uses variable SM defined in IncludeOrderCheck.cpp
      uses variable Result defined in USRFinder.cpp
      uses variable PassByValueCtorId defined in PassByValueMatchers.cpp
      uses variable PassByValueParamId defined in PassByValueMatchers.cpp
      uses variable PassByValueInitializerId defined in PassByValueMatchers.cpp
      uses variable Range defined in IncludeOrderCheck.cpp
      uses enumvalue RL_Reasonable defined in Transform.h
   function setIncludeDirectives(IncludeDirectives *) in line 59
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
      uses variable IncludeManager defined in ConstructorParamReplacer
      uses function run(const clang::ast_matchers::MatchFinder::MatchResult &) defined in ConstructorParamReplacer
      uses variable Result defined in USRFinder.cpp
   function ConstructorParamReplacer(unsigned &,unsigned &,Transform &) in line 54
      protection public
      4 lines of code
      3 parameters
      1 conditional paths
   variable AcceptedChanges in line 68
   variable IncludeManager in line 71
   variable Owner in line 70
   variable RejectedChanges in line 69
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-modernize/PassByValue/PassByValueMatchers.cpp
module PassByValueMatchers.cpp
   variable PassByValueCtorId in line 18
      protection public
   variable PassByValueParamId in line 19
      protection public
   variable PassByValueInitializerId in line 20
      protection public
   function AST_MATCHER(CXXRecordDecl,isMoveConstructible) in line 39
      protection public
      8 lines of code
      2 parameters
      3 conditional paths
   function AST_MATCHER(CXXConstructorDecl,isNonDeletedCopyConstructor) in line 57
      protection public
      3 lines of code
      2 parameters
      1 conditional paths
   function constRefType() in line 66
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function nonConstValueType() in line 70
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function makePassByValueCtorParamMatcher() in line 74
      protection public
      21 lines of code
      0 parameters
      1 conditional paths
      uses function constRefType() defined in PassByValueMatchers.cpp
      uses function nonConstValueType() defined in PassByValueMatchers.cpp
      uses variable PassByValueParamId defined in PassByValueMatchers.cpp
      uses variable PassByValueInitializerId defined in PassByValueMatchers.cpp
      uses variable PassByValueCtorId defined in PassByValueMatchers.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-modernize/PassByValue/PassByValueMatchers.h
module PassByValueMatchers.h
   variable PassByValueCtorId in line 23
      protection public
   variable PassByValueParamId in line 24
      protection public
   variable PassByValueInitializerId in line 25
      protection public
   function makePassByValueCtorParamMatcher() in line 42
      protection public
      21 lines of code
      0 parameters
      1 conditional paths
      uses variable PassByValueParamId defined in PassByValueMatchers.cpp
      uses variable PassByValueInitializerId defined in PassByValueMatchers.cpp
      uses variable PassByValueCtorId defined in PassByValueMatchers.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-modernize/ReplaceAutoPtr/ReplaceAutoPtr.cpp
module ReplaceAutoPtr.cpp
   variable ReplaceAutoPtrTransformAnchorSource in line 67
      protection public
   function X("replace-auto_ptr","Replace std::auto_ptr (deprecated) by std::unique_ptr"" (EXPERIMENTAL)") in line 62
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
module ReplaceAutoPtrFactory
   inherits from TransformFactory
   function createTransform(const TransformOptions &) in line 55
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
      uses function X("replace-auto_ptr","Replace std::auto_ptr (deprecated) by std::unique_ptr"" (EXPERIMENTAL)") defined in ReplaceAutoPtr.cpp
   function ReplaceAutoPtrFactory() in line 48
      protection public
      6 lines of code
      0 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-modernize/ReplaceAutoPtr/ReplaceAutoPtr.h
module ReplaceAutoPtrTransform
   inherits from Transform
   function apply(const clang::tooling::CompilationDatabase &,const std::vector< std::string > &) in line 50
      protection public
      21 lines of code
      2 parameters
      2 conditional paths
      uses variable Finder defined in ClangTidy.cpp
      uses function makeAutoPtrTypeLocMatcher() defined in ReplaceAutoPtrMatchers.cpp
      uses function makeAutoPtrUsingDeclMatcher() defined in ReplaceAutoPtrMatchers.cpp
      uses function makeTransferOwnershipExprMatcher() defined in ReplaceAutoPtrMatchers.cpp
   function ReplaceAutoPtrTransform(const TransformOptions &) in line 46
      protection public
      2 lines of code
      1 parameters
      1 conditional paths
      uses function apply(const clang::tooling::CompilationDatabase &,const std::vector< std::string > &) defined in ReplaceAutoPtrTransform
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-modernize/ReplaceAutoPtr/ReplaceAutoPtrActions.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-modernize/ReplaceAutoPtr/ReplaceAutoPtrActions.h
module AutoPtrReplacer
   inherits from clang::ast_matchers::MatchFinder::MatchCallback
   function locateFromTypeLoc(clang::TypeLoc,const clang::SourceManager &) in line 47
      9 lines of code
      2 parameters
      2 conditional paths
   function locateFromUsingDecl(const clang::UsingDecl *,const clang::SourceManager &) in line 61
      4 lines of code
      2 parameters
      1 conditional paths
   function run(const clang::ast_matchers::MatchFinder::MatchResult &) in line 33
      protection public
      27 lines of code
      1 parameters
      5 conditional paths
      uses variable SM defined in IncludeOrderCheck.cpp
      uses variable Result defined in USRFinder.cpp
      uses variable AutoPtrTokenId defined in ReplaceAutoPtrMatchers.cpp
      uses macro definition assert defined in misc-assert-side-effect.cpp
      uses function strlen(const char *) defined in misc-static-assert.cpp
   function AutoPtrReplacer(unsigned &,Transform &) in line 28
      protection public
      2 lines of code
      2 parameters
      1 conditional paths
      uses function run(const clang::ast_matchers::MatchFinder::MatchResult &) defined in AutoPtrReplacer
      uses variable Result defined in USRFinder.cpp
      uses function locateFromTypeLoc(clang::TypeLoc,const clang::SourceManager &) defined in AutoPtrReplacer
      uses variable SM defined in IncludeOrderCheck.cpp
      uses function locateFromUsingDecl(const clang::UsingDecl *,const clang::SourceManager &) defined in AutoPtrReplacer
   variable AcceptedChanges in line 65
   variable Owner in line 66
module OwnershipTransferFixer
   inherits from clang::ast_matchers::MatchFinder::MatchCallback
   function run(const clang::ast_matchers::MatchFinder::MatchResult &) in line 92
      protection public
      19 lines of code
      1 parameters
      3 conditional paths
      uses variable SM defined in IncludeOrderCheck.cpp
      uses variable Result defined in USRFinder.cpp
      uses variable AutoPtrOwnershipTransferId defined in ReplaceAutoPtrMatchers.cpp
      uses macro definition assert defined in misc-assert-side-effect.cpp
      uses variable Range defined in IncludeOrderCheck.cpp
   function OwnershipTransferFixer(unsigned &,Transform &) in line 87
      protection public
      2 lines of code
      2 parameters
      1 conditional paths
      uses function run(const clang::ast_matchers::MatchFinder::MatchResult &) defined in AutoPtrReplacer
      uses variable Result defined in USRFinder.cpp
   variable AcceptedChanges in line 95
   variable Owner in line 96
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-modernize/ReplaceAutoPtr/ReplaceAutoPtrMatchers.cpp
module ReplaceAutoPtrMatchers.cpp
   variable AutoPtrTokenId in line 19
      protection public
   variable AutoPtrOwnershipTransferId in line 20
      protection public
   variable AutoPtrDecl in line 45
      protection public
   variable AutoPtrType in line 48
      protection public
   variable MovableArgumentMatcher in line 54
      protection public
   function AST_MATCHER(Expr,isLValue) in line 34
      protection public
      3 lines of code
      2 parameters
      1 conditional paths
   function makeAutoPtrTypeLocMatcher() in line 57
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
      uses variable AutoPtrType defined in ReplaceAutoPtrMatchers.cpp
      uses variable AutoPtrTokenId defined in ReplaceAutoPtrMatchers.cpp
   function makeAutoPtrUsingDeclMatcher() in line 63
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable AutoPtrTokenId defined in ReplaceAutoPtrMatchers.cpp
   function makeTransferOwnershipExprMatcher() in line 68
      protection public
      14 lines of code
      0 parameters
      1 conditional paths
      uses variable AutoPtrDecl defined in ReplaceAutoPtrMatchers.cpp
      uses variable MovableArgumentMatcher defined in ReplaceAutoPtrMatchers.cpp
      uses variable AutoPtrType defined in ReplaceAutoPtrMatchers.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-modernize/ReplaceAutoPtr/ReplaceAutoPtrMatchers.h
module ReplaceAutoPtrMatchers.h
   variable AutoPtrTokenId in line 22
      protection public
   variable AutoPtrOwnershipTransferId in line 23
      protection public
   function makeAutoPtrTypeLocMatcher() in line 40
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
      uses variable AutoPtrTokenId defined in ReplaceAutoPtrMatchers.cpp
   function makeAutoPtrUsingDeclMatcher() in line 49
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable AutoPtrTokenId defined in ReplaceAutoPtrMatchers.cpp
   function makeTransferOwnershipExprMatcher() in line 62
      protection public
      14 lines of code
      0 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-modernize/tool/ClangModernize.cpp
module ClangModernize.cpp
   variable GlobalOptions in line 39
      protection public
   variable VisibleCategories in line 48
      protection public
   variable AddOverrideTransformAnchorSource in line 475
      protection public
   variable LoopConvertTransformAnchorSource in line 476
      protection public
   variable PassByValueTransformAnchorSource in line 477
      protection public
   variable ReplaceAutoPtrTransformAnchorSource in line 478
      protection public
   variable UseAutoTransformAnchorSource in line 479
      protection public
   variable UseNullptrTransformAnchorSource in line 480
      protection public
   variable TransformsAnchorsDestination in line 482
      protection public
   function GeneralCategory("Modernizer Options") in line 43
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function FormattingCategory("Formatting Options") in line 44
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function IncludeExcludeCategory("Inclusion/Exclusion Options") in line 45
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function SerializeCategory("Serialization Options") in line 46
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function CommonHelp(CommonOptionsParser::HelpMessage) in line 53
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function MoreHelp("EXAMPLES:\n\n""Apply all transforms on a file that doesn't require compilation arguments:\n\n"" clang-modernize file.cpp\n""\n""Convert for loops to ranged-based for loops for all files in the compilation\n""database that belong in a project subtree and then reformat the code\n""automatically using the LLVM style:\n\n"" clang-modernize -p build/path -include project/path -format -loop-convert\n""\n""Make use of both nullptr and the override,using git ls-files:\n" "\n" "git ls-files '*.cpp'|xargs-I{}clang-modernize-p build/path\\\n" "-use-nullptr-add-override-override-macros{}\n" "\n" "Apply all transforms supported by both clang >=3.0 and gcc >=4.7 to\n" "foo.cpp and any included headers in bar:\n\n" "clang-modernize-for-) in line 54
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function BuildPath("p",cl::desc("Build Path"),cl::Optional,cl::Hidden,cl::cat(GeneralCategory)) in line 79
      protection public
      1 lines of code
      5 parameters
      1 conditional paths
   function SourcePaths(cl::Positional,cl::desc("[<sources>...]"),cl::ZeroOrMore,cl::cat(GeneralCategory)) in line 82
      protection public
      1 lines of code
      4 parameters
      1 conditional paths
   function MaxRiskLevel("risk",cl::desc("Select a maximum risk level:"),cl::values(clEnumValN(RL_Safe,"safe","Only safe transformations"),                           clEnumValN(RL_Reasonable,"reasonable",                                                "Enable transformations that might change "                                                "semantics (default)"),                           clEnumValN(RL_Risky,"risky",                                                "Enable transformations that are likely to "                                                "change semantics"),                           clEnumValEnd),cl::location(GlobalOptions.MaxRiskLevel),cl::init(RL_Reasonable),cl::cat(GeneralCategory)) in line 87
      protection public
      1 lines of code
      6 parameters
      1 conditional paths
   function FinalSyntaxCheck("final-syntax-check",cl::desc("Check for correct syntax after applying transformations"),cl::init(false),cl::cat(GeneralCategory)) in line 100
      protection public
      1 lines of code
      4 parameters
      1 conditional paths
   function SummaryMode("summary",cl::desc("Print transform summary"),cl::init(false),cl::cat(GeneralCategory)) in line 105
      protection public
      1 lines of code
      4 parameters
      1 conditional paths
   function TimingDirectoryName("perf",cl::desc("Capture performance data and output to specified "                                                      "directory. Default: ./migrate_perf"),cl::ValueOptional,cl::value_desc("directory name"),cl::cat(GeneralCategory)) in line 109
      protection public
      1 lines of code
      5 parameters
      1 conditional paths
   function SupportedCompilers("for-compilers",cl::value_desc("string"),cl::desc("Select transforms targeting the intersection of\n"                      "language features supported by the given compilers.\n"                      "Takes a comma-separated list of <compiler>-<version>.\n"                      "\t<compiler> can be any of: clang, gcc, icc, msvc\n"                      "\t<version> is <major>[.<minor>]\n"),cl::cat(GeneralCategory)) in line 115
      protection public
      1 lines of code
      4 parameters
      1 conditional paths
   function DoFormat("format",cl::desc("Enable formatting of code changed by applying replacements.\n"                      "Use -style to choose formatting style.\n"),cl::cat(FormattingCategory)) in line 126
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function FormatStyleOpt("style",cl::desc(format::StyleOptionHelpDescription),cl::init("LLVM"),cl::cat(FormattingCategory)) in line 133
      protection public
      1 lines of code
      4 parameters
      1 conditional paths
   function FormatStyleConfig("style-config",cl::desc("Path to a directory containing a .clang-format file\n"                      "describing a formatting style to use for formatting\n"                      "code when -style=file.\n"),cl::init(""),cl::cat(FormattingCategory)) in line 141
      protection public
      1 lines of code
      4 parameters
      1 conditional paths
   function IncludePaths("include",cl::desc("Comma-separated list of paths to consider to be "                                        "transformed"),cl::cat(IncludeExcludeCategory)) in line 151
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function ExcludePaths("exclude",cl::desc("Comma-separated list of paths that can not "                                                              "be transformed"),cl::cat(IncludeExcludeCategory)) in line 157
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function IncludeFromFile("include-from",cl::value_desc("filename"),cl::desc("File containing a list of paths to consider to "                                              "be transformed"),cl::cat(IncludeExcludeCategory)) in line 162
      protection public
      1 lines of code
      4 parameters
      1 conditional paths
   function ExcludeFromFile("exclude-from",cl::value_desc("filename"),cl::desc("File containing a list of paths that can not be "                                              "transformed"),cl::cat(IncludeExcludeCategory)) in line 168
      protection public
      1 lines of code
      4 parameters
      1 conditional paths
   function SerializeOnly("serialize-replacements",cl::desc("Serialize translation unit replacements to "                                          "disk instead of changing files."),cl::init(false),cl::cat(SerializeCategory)) in line 177
      protection public
      1 lines of code
      4 parameters
      1 conditional paths
   function SerializeLocation("serialize-dir",cl::desc("Path to an existing directory in which to write\n"                                                  "serialized replacements. Default behaviour is to\n"                                                  "write to a temporary directory.\n"),cl::cat(SerializeCategory)) in line 184
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function printVersion() in line 192
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function handleSupportedCompilers(const char *,bool &) in line 203
      protection public
      47 lines of code
      2 parameters
      7 conditional paths
      uses function SupportedCompilers("for-compilers",cl::value_desc("string"),cl::desc("Select transforms targeting the intersection of\n"                      "language features supported by the given compilers.\n"                      "Takes a comma-separated list of <compiler>-<version>.\n"                      "\t<compiler> can be any of: clang, gcc, icc, msvc\n"                      "\t<version> is <major>[.<minor>]\n"),cl::cat(GeneralCategory)) defined in ClangModernize.cpp
      uses variable Clang defined in CompilerVersions
      uses variable Gcc defined in CompilerVersions
      uses variable Icc defined in CompilerVersions
      uses variable Msvc defined in CompilerVersions
      uses function isNull() defined in Version
   function autoDetectCompilations(std::string &) in line 252
      protection public
      33 lines of code
      1 parameters
      5 conditional paths
      uses function BuildPath("p",cl::desc("Build Path"),cl::Optional,cl::Hidden,cl::cat(GeneralCategory)) defined in ClangModernize.cpp
      uses function SourcePaths(cl::Positional,cl::desc("[<sources>...]"),cl::ZeroOrMore,cl::cat(GeneralCategory)) defined in ClangModernize.cpp
      uses variable Path defined in PreprocessorTracker.cpp
      uses variable CommandLine defined in Modularize.cpp
   function isFileNotIncludedPredicate(llvm::StringRef) in line 287
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
      uses variable GlobalOptions defined in ClangModernize.cpp
      uses variable ModifiableFiles defined in TransformOptions
      uses function isFileIncluded(llvm::StringRef) defined in IncludeExcludeInfo
   function isFileExplicitlyExcludedPredicate(llvm::StringRef) in line 292
      protection public
      8 lines of code
      1 parameters
      2 conditional paths
      uses variable GlobalOptions defined in ClangModernize.cpp
      uses variable ModifiableFiles defined in TransformOptions
      uses function isFileExplicitlyExcluded(llvm::StringRef) defined in IncludeExcludeInfo
   function main(int,const char **) in line 301
      protection public
      172 lines of code
      2 parameters
      27 conditional paths
      uses function registerTransforms() defined in Transforms
      uses variable VisibleCategories defined in ClangModernize.cpp
      uses function printVersion() defined in ClangModernize.cpp
      uses variable GlobalOptions defined in ClangModernize.cpp
      uses variable ModifiableFiles defined in TransformOptions
      uses function readListFromString(llvm::StringRef,llvm::StringRef) defined in IncludeExcludeInfo
      uses function IncludePaths("include",cl::desc("Comma-separated list of paths to consider to be "                                        "transformed"),cl::cat(IncludeExcludeCategory)) defined in ClangModernize.cpp
      uses function ExcludePaths("exclude",cl::desc("Comma-separated list of paths that can not "                                                              "be transformed"),cl::cat(IncludeExcludeCategory)) defined in ClangModernize.cpp
      uses function readListFromFile(llvm::StringRef,llvm::StringRef) defined in IncludeExcludeInfo
      uses function IncludeFromFile("include-from",cl::value_desc("filename"),cl::desc("File containing a list of paths to consider to "                                              "be transformed"),cl::cat(IncludeExcludeCategory)) defined in ClangModernize.cpp
      uses function ExcludeFromFile("exclude-from",cl::value_desc("filename"),cl::desc("File containing a list of paths that can not be "                                              "transformed"),cl::cat(IncludeExcludeCategory)) defined in ClangModernize.cpp
      uses function autoDetectCompilations(std::string &) defined in ClangModernize.cpp
      uses function SourcePaths(cl::Positional,cl::desc("[<sources>...]"),cl::ZeroOrMore,cl::cat(GeneralCategory)) defined in ClangModernize.cpp
      uses function isFileExplicitlyExcludedPredicate(llvm::StringRef) defined in ClangModernize.cpp
      uses function isIncludeListEmpty() defined in IncludeExcludeInfo
      uses function remove_if(FwIt,FwIt,Func) defined in misc-inaccurate-erase.cpp
      uses function begin() defined in std::vector
      uses function end() defined in std::vector
      uses function isFileNotIncludedPredicate(llvm::StringRef) defined in ClangModernize.cpp
      uses function erase(iterator) defined in std::vector
      uses function empty() defined in std::vector
      uses variable EnableTiming defined in TransformOptions
      uses function TimingDirectoryName("perf",cl::desc("Capture performance data and output to specified "                                                      "directory. Default: ./migrate_perf"),cl::ValueOptional,cl::value_desc("directory name"),cl::cat(GeneralCategory)) defined in ClangModernize.cpp
      uses function handleSupportedCompilers(const char *,bool &) defined in ClangModernize.cpp
      uses function createSelectedTransforms(const TransformOptions &,const CompilerVersions &) defined in Transforms
      uses function begin() defined in Transforms
      uses function end() defined in Transforms
      uses function SupportedCompilers("for-compilers",cl::value_desc("string"),cl::desc("Select transforms targeting the intersection of\n"                      "language features supported by the given compilers.\n"                      "Takes a comma-separated list of <compiler>-<version>.\n"                      "\t<compiler> can be any of: clang, gcc, icc, msvc\n"                      "\t<version> is <major>[.<minor>]\n"),cl::cat(GeneralCategory)) defined in ClangModernize.cpp
      uses variable DiagOpts defined in ClangTidy.cpp
      uses function SerializeOnly("serialize-replacements",cl::desc("Serialize translation unit replacements to "                                          "disk instead of changing files."),cl::init(false),cl::cat(SerializeCategory)) defined in ClangModernize.cpp
      uses function DoFormat("format",cl::desc("Enable formatting of code changed by applying replacements.\n"                      "Use -style to choose formatting style.\n"),cl::cat(FormattingCategory)) defined in ClangModernize.cpp
      uses function findClangApplyReplacements(const char *) defined in ReplacementHandling
      uses function enableFormatting(llvm::StringRef,llvm::StringRef) defined in ReplacementHandling
      uses function FormatStyleOpt("style",cl::desc(format::StyleOptionHelpDescription),cl::init("LLVM"),cl::cat(FormattingCategory)) defined in ClangModernize.cpp
      uses function FormatStyleConfig("style-config",cl::desc("Path to a directory containing a .clang-format file\n"                      "describing a formatting style to use for formatting\n"                      "code when -style=file.\n"),cl::init(""),cl::cat(FormattingCategory)) defined in ClangModernize.cpp
      uses function SerializeLocation("serialize-dir",cl::desc("Path to an existing directory in which to write\n"                                                  "serialized replacements. Default behaviour is to\n"                                                  "write to a temporary directory.\n"),cl::cat(SerializeCategory)) defined in ClangModernize.cpp
      uses function setDestinationDir(llvm::StringRef) defined in ReplacementHandling
      uses function useTempDestinationDir() defined in ReplacementHandling
      uses function collectSourcePerfData(const Transform &,SourcePerfData &) defined in PerfSupport.cpp
      uses function SummaryMode("summary",cl::desc("Print transform summary"),cl::init(false),cl::cat(GeneralCategory)) defined in ClangModernize.cpp
      uses function serializeReplacements(const TUReplacementsMap &) defined in ReplacementHandling
      uses function applyReplacements() defined in ReplacementHandling
      uses function FinalSyntaxCheck("final-syntax-check",cl::desc("Check for correct syntax after applying transformations"),cl::init(false),cl::cat(GeneralCategory)) defined in ClangModernize.cpp
      uses function writePerfDataJSON(const llvm::StringRef,const SourcePerfData &) defined in PerfSupport.cpp
      uses variable AddOverrideTransformAnchorSource defined in ClangModernize.cpp
      uses variable LoopConvertTransformAnchorSource defined in ClangModernize.cpp
      uses variable PassByValueTransformAnchorSource defined in ClangModernize.cpp
      uses variable ReplaceAutoPtrTransformAnchorSource defined in ClangModernize.cpp
      uses variable UseAutoTransformAnchorSource defined in ClangModernize.cpp
      uses variable UseNullptrTransformAnchorSource defined in ClangModernize.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-modernize/UseAuto/UseAuto.cpp
module UseAuto.cpp
   variable UseAutoTransformAnchorSource in line 70
      protection public
   function X("use-auto","Use of 'auto' type specifier") in line 66
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
module @46::UseAutoFactory
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-modernize/UseAuto/UseAuto.h
module UseAutoTransform
   inherits from Transform
   function apply(const clang::tooling::CompilationDatabase &,const std::vector< std::string > &) in line 37
      protection public
      25 lines of code
      2 parameters
      2 conditional paths
      uses variable Finder defined in ClangTidy.cpp
      uses function makeIteratorDeclMatcher() defined in UseAutoMatchers.cpp
      uses function makeDeclWithNewMatcher() defined in UseAutoMatchers.cpp
      uses variable Result defined in USRFinder.cpp
   function UseAutoTransform(const TransformOptions &) in line 33
      protection public
      2 lines of code
      1 parameters
      1 conditional paths
      uses function apply(const clang::tooling::CompilationDatabase &,const std::vector< std::string > &) defined in UseAutoTransform
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-modernize/UseAuto/UseAutoActions.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-modernize/UseAuto/UseAutoActions.h
module IteratorReplacer
   inherits from clang::ast_matchers::MatchFinder::MatchCallback
   function run(const clang::ast_matchers::MatchFinder::MatchResult &) in line 33
      protection public
      55 lines of code
      1 parameters
      8 conditional paths
      uses variable Result defined in USRFinder.cpp
      uses variable IteratorDeclStmtId defined in UseAutoMatchers.cpp
      uses macro definition assert defined in misc-assert-side-effect.cpp
      uses variable SM defined in IncludeOrderCheck.cpp
      uses variable u defined in negative-iterator.cpp
      uses variable Range defined in IncludeOrderCheck.cpp
   function IteratorReplacer(unsigned &,RiskLevel,Transform &) in line 28
      protection public
      2 lines of code
      3 parameters
      1 conditional paths
      uses function run(const clang::ast_matchers::MatchFinder::MatchResult &) defined in IteratorReplacer
      uses variable Result defined in USRFinder.cpp
   variable AcceptedChanges in line 36
   variable Owner in line 37
module NewReplacer
   inherits from clang::ast_matchers::MatchFinder::MatchCallback
   function run(const clang::ast_matchers::MatchFinder::MatchResult &) in line 49
      protection public
      68 lines of code
      1 parameters
      8 conditional paths
      uses variable Result defined in USRFinder.cpp
      uses variable DeclWithNewId defined in UseAutoMatchers.cpp
      uses macro definition assert defined in misc-assert-side-effect.cpp
      uses variable SM defined in IncludeOrderCheck.cpp
      uses function begin() defined in std::vector
      uses function end() defined in std::vector
      uses variable Range defined in IncludeOrderCheck.cpp
   function NewReplacer(unsigned &,RiskLevel,Transform &) in line 44
      protection public
      2 lines of code
      3 parameters
      1 conditional paths
      uses function run(const clang::ast_matchers::MatchFinder::MatchResult &) defined in IteratorReplacer
      uses variable Result defined in USRFinder.cpp
   variable AcceptedChanges in line 52
   variable Owner in line 53
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-modernize/UseAuto/UseAutoMatchers.cpp
module UseAutoMatchers.cpp
   variable IteratorDeclStmtId in line 23
      protection public
   variable DeclWithNewId in line 24
      protection public
   variable NewExprId in line 25
      protection public
   function AST_MATCHER(VarDecl,hasWrittenNonListInitializer) in line 42
      protection public
      19 lines of code
      2 parameters
      5 conditional paths
   function AST_MATCHER_P(QualType,isSugarFor,internal::Matcher< QualType >,SugarMatcher) in line 74
      protection public
      13 lines of code
      4 parameters
      4 conditional paths
      uses variable Finder defined in ClangTidy.cpp
   function AST_MATCHER(NamedDecl,hasStdIteratorName) in line 98
      protection public
      16 lines of code
      2 parameters
      3 conditional paths
      uses variable i defined in pp-trace-macro.cpp
      uses variable Finder defined in ClangTidy.cpp
   function AST_MATCHER(NamedDecl,hasStdContainerName) in line 127
      protection public
      29 lines of code
      2 parameters
      3 conditional paths
      uses variable i defined in pp-trace-macro.cpp
      uses variable Finder defined in ClangTidy.cpp
   function makeIteratorDeclMatcher() in line 231
      protection public
      23 lines of code
      0 parameters
      1 conditional paths
      uses variable IteratorDeclStmtId defined in UseAutoMatchers.cpp
   function makeDeclWithNewMatcher() in line 255
      protection public
      26 lines of code
      0 parameters
      1 conditional paths
      uses variable DeclWithNewId defined in UseAutoMatchers.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-modernize/UseAuto/UseAutoMatchers.h
module UseAutoMatchers.h
   variable IteratorDeclStmtId in line 21
      protection public
   variable DeclWithNewId in line 22
      protection public
   variable NewExprId in line 23
      protection public
   function makeIteratorDeclMatcher() in line 28
      protection public
      23 lines of code
      0 parameters
      1 conditional paths
      uses variable IteratorDeclStmtId defined in UseAutoMatchers.cpp
   function makeDeclWithNewMatcher() in line 32
      protection public
      26 lines of code
      0 parameters
      1 conditional paths
      uses variable DeclWithNewId defined in UseAutoMatchers.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-modernize/UseNullptr/NullptrActions.cpp
module @52::MacroArgUsageVisitor
   variable CastFound in line 133
   variable CastLoc in line 129
   variable InvalidFound in line 134
   variable SM in line 130
   variable Visited in line 132
module @52::CastSequenceVisitor
   variable AcceptedChanges in line 416
   variable Context in line 414
   variable FirstSubExpr in line 418
   variable Owner in line 417
   variable PruneSubtree in line 419
   variable SM in line 413
   variable UserNullMacros in line 415
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-modernize/UseNullptr/NullptrActions.h
module NullptrActions.h
   typedef UserMacroNames in line 24
      protection public
module NullptrFixer
   inherits from clang::ast_matchers::MatchFinder::MatchCallback
   function run(const clang::ast_matchers::MatchFinder::MatchResult &) in line 35
      protection public
      10 lines of code
      1 parameters
      1 conditional paths
      uses variable Result defined in USRFinder.cpp
      uses variable CastSequence defined in NullptrMatchers.cpp
      uses macro definition assert defined in misc-assert-side-effect.cpp
      uses variable UserNullMacros defined in NullptrFixer
      uses variable AcceptedChanges defined in NullptrFixer
      uses variable Owner defined in NullptrFixer
   function NullptrFixer(unsigned &,llvm::ArrayRef< llvm::StringRef >,Transform &) in line 30
      protection public
      8 lines of code
      3 parameters
      1 conditional paths
      uses variable UserNullMacros defined in NullptrFixer
   variable AcceptedChanges in line 38
   variable Owner in line 40
   variable UserNullMacros in line 39
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-modernize/UseNullptr/NullptrMatchers.cpp
module NullptrMatchers.cpp
   variable CastSequence in line 22
      protection public
   function AST_MATCHER(CastExpr,isNullToPointer) in line 35
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function AST_MATCHER(Type,sugaredNullptrType) in line 40
      protection public
      6 lines of code
      2 parameters
      2 conditional paths
   function makeCastSequenceMatcher() in line 50
      protection public
      21 lines of code
      0 parameters
      1 conditional paths
      uses variable CastSequence defined in NullptrMatchers.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-modernize/UseNullptr/NullptrMatchers.h
module NullptrMatchers.h
   variable CastSequence in line 22
      protection public
   function makeCastSequenceMatcher() in line 29
      protection public
      21 lines of code
      0 parameters
      1 conditional paths
      uses variable CastSequence defined in NullptrMatchers.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-modernize/UseNullptr/UseNullptr.cpp
module UseNullptr.cpp
   variable UseNullptrTransformAnchorSource in line 80
      protection public
   function UserNullMacroNames("user-null-macros",cl::desc("Comma-separated list of user-defined "                                                    "macro names that behave like NULL"),cl::cat(TransformsOptionsCategory),cl::init("")) in line 29
      protection public
      1 lines of code
      4 parameters
      1 conditional paths
   function X("use-nullptr","Make use of nullptr keyword where possible") in line 76
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
module @56::UseNullptrFactory
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-modernize/UseNullptr/UseNullptr.h
module UseNullptrTransform
   inherits from Transform
   function apply(const clang::tooling::CompilationDatabase &,const std::vector< std::string > &) in line 31
      protection public
      24 lines of code
      2 parameters
      3 conditional paths
      uses variable Finder defined in ClangTidy.cpp
      uses function makeCastSequenceMatcher() defined in NullptrMatchers.cpp
   function UseNullptrTransform(const TransformOptions &) in line 27
      protection public
      2 lines of code
      1 parameters
      1 conditional paths
      uses function apply(const clang::tooling::CompilationDatabase &,const std::vector< std::string > &) defined in UseNullptrTransform
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-query/Query.cpp
module Query.cpp
   variable Bindings in line 54
      protection public
module clang::query::@58::CollectBoundNodes
   variable Bindings in line 54
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-query/Query.h
module Query.h
   enumeration OutputKind in line 21
      protection public
   enumeration QueryKind in line 27
      protection public
   typedef QueryRef in line 51
      protection public
   enumvalue OK_Diag in line 22
      protection public
   enumvalue OK_Print in line 23
      protection public
   enumvalue OK_Dump in line 25
      protection public
   enumvalue QK_Invalid in line 28
      protection public
   enumvalue QK_NoOp in line 29
      protection public
   enumvalue QK_Help in line 30
      protection public
   enumvalue QK_Let in line 31
      protection public
   enumvalue QK_Match in line 32
      protection public
   enumvalue QK_SetBool in line 33
      protection public
   enumvalue QK_SetOutputKind in line 34
      protection public
module clang::query::Query
   inherits from llvm::RefCountedBase
   abstract class
   function run(llvm::raw_ostream &,QuerySession &) in line 46
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function Query(QueryKind) in line 40
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses function ~Query() defined in clang::query::Query
      uses function run(llvm::raw_ostream &,QuerySession &) defined in clang::query::Query
   function ~Query() in line 41
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   variable Kind in line 48
      protection public
module clang::query::InvalidQuery
   inherits from clang::query::Query
   function classof(const Query *) in line 60
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses enumvalue QK_Invalid defined in Query.h
   function run(llvm::raw_ostream &,QuerySession &) in line 56
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function InvalidQuery(const Twine &) in line 55
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses function run(llvm::raw_ostream &,QuerySession &) defined in clang::query::Query
   variable ErrStr in line 58
      protection public
module clang::query::NoOpQuery
   inherits from clang::query::Query
   function classof(const Query *) in line 68
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses enumvalue QK_NoOp defined in Query.h
   function run(llvm::raw_ostream &,QuerySession &) in line 66
      protection public
      3 lines of code
      2 parameters
      1 conditional paths
   function NoOpQuery() in line 65
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
      uses function run(llvm::raw_ostream &,QuerySession &) defined in clang::query::Query
module clang::query::HelpQuery
   inherits from clang::query::Query
   function classof(const Query *) in line 76
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses enumvalue QK_Help defined in Query.h
   function run(llvm::raw_ostream &,QuerySession &) in line 74
      protection public
      16 lines of code
      2 parameters
      1 conditional paths
   function HelpQuery() in line 73
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
      uses function run(llvm::raw_ostream &,QuerySession &) defined in clang::query::Query
module clang::query::MatchQuery
   inherits from clang::query::Query
   function classof(const Query *) in line 87
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses enumvalue QK_Match defined in Query.h
   function run(llvm::raw_ostream &,QuerySession &) in line 83
      protection public
      64 lines of code
      2 parameters
      12 conditional paths
      uses variable ASTs defined in clang::query::QuerySession
      uses variable Finder defined in ClangTidy.cpp
      uses variable BindRoot defined in clang::query::QuerySession
      uses macro definition M defined in google-explicit-make-pair.cpp
      uses function begin() defined in std::vector
      uses function end() defined in std::vector
      uses variable OutKind defined in clang::query::QuerySession
      uses enumvalue OK_Diag defined in Query.h
      uses enumvalue OK_Print defined in Query.h
      uses enumvalue OK_Dump defined in Query.h
   function MatchQuery(const ast_matchers::dynamic::DynTypedMatcher &) in line 81
      protection public
      2 lines of code
      1 parameters
      1 conditional paths
      uses function run(llvm::raw_ostream &,QuerySession &) defined in clang::query::Query
   variable Matcher in line 85
      protection public
module clang::query::LetQuery
   inherits from clang::query::Query
   function classof(const Query *) in line 98
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses enumvalue QK_Let defined in Query.h
   function run(llvm::raw_ostream &,QuerySession &) in line 93
      protection public
      8 lines of code
      2 parameters
      2 conditional paths
      uses variable NamedValues defined in clang::query::QuerySession
      uses variable Name defined in PreprocessorTracker.cpp
   function LetQuery(StringRef,const ast_matchers::dynamic::VariantValue &) in line 91
      protection public
      2 lines of code
      2 parameters
      1 conditional paths
      uses function run(llvm::raw_ostream &,QuerySession &) defined in clang::query::Query
   variable Name in line 95
      protection public
   variable Value in line 96
      protection public
module clang::query::SetQueryKind
module clang::query::SetQueryKind< bool >
   variable value in line 104
      protection public
module clang::query::SetQueryKind< OutputKind >
   variable value in line 108
      protection public
module clang::query::SetQuery
   inherits from clang::query::Query
   function classof(const Query *) in line 120
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function run(llvm::raw_ostream &,QuerySession &) in line 115
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function SetQuery(T QuerySession::*,T) in line 113
      protection public
      2 lines of code
      2 parameters
      1 conditional paths
   variable Value in line 125
      protection public
   variable Var in line 124
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-query/QueryParser.cpp
module QueryParser.cpp
   enumeration ParsedQueryKind in line 137
      protection public
   enumeration ParsedQueryVariable in line 147
      protection public
module clang::query::QueryParser::LexOrCompleteWord
   function Case(const char(&),const T &,bool) in line 65
      protection public
      13 lines of code
      3 parameters
      3 conditional paths
   function Default(const T &) in line 79
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function LexOrCompleteWord(QueryParser *,StringRef,size_t) in line 61
      protection public
      2 lines of code
      3 parameters
      1 conditional paths
   variable P in line 55
      protection public
   variable Switch in line 53
      protection public
   variable Word in line 56
      protection public
   variable WordCompletionPos in line 59
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-query/QueryParser.h
module clang::query::QueryParser
   function complete(StringRef,size_t,const QuerySession &) in line 36
      protection public
      7 lines of code
      3 parameters
      1 conditional paths
      uses variable Line defined in PreprocessorTracker.cpp
   function completeMatcherExpression() in line 50
      11 lines of code
      0 parameters
      2 conditional paths
      uses function begin() defined in std::vector
      uses function end() defined in std::vector
   function doParse() in line 58
      92 lines of code
      0 parameters
      19 conditional paths
      uses variable Name defined in PreprocessorTracker.cpp
      uses function Q(A) defined in clang-tidy/macros.cpp
   function endQuery(QueryRef) in line 52
      7 lines of code
      1 parameters
      2 conditional paths
      uses function Q(A) defined in clang-tidy/macros.cpp
   function lexOrCompleteWord(StringRef &) in line 46
      1 lines of code
      1 parameters
      1 conditional paths
   function lexOrCompleteWord(StringRef &) in line 89
      protection public
      11 lines of code
      1 parameters
      3 conditional paths
   function lexWord() in line 43
      20 lines of code
      0 parameters
      6 conditional paths
   function parse(StringRef,const QuerySession &) in line 28
      protection public
      3 lines of code
      2 parameters
      1 conditional paths
      uses variable Line defined in PreprocessorTracker.cpp
      uses function doParse() defined in clang::query::QueryParser
   function parseSetBool(bool QuerySession::*) in line 48
      11 lines of code
      1 parameters
      2 conditional paths
      uses variable u defined in negative-iterator.cpp
   function parseSetOutputKind() in line 49
      13 lines of code
      0 parameters
      2 conditional paths
      uses enumvalue OK_Diag defined in Query.h
      uses enumvalue OK_Print defined in Query.h
      uses enumvalue OK_Dump defined in Query.h
      uses variable u defined in negative-iterator.cpp
   function QueryParser(StringRef,const QuerySession &) in line 39
      3 lines of code
      2 parameters
      1 conditional paths
      uses function lexWord() defined in clang::query::QueryParser
      uses function lexOrCompleteWord(StringRef &) defined in clang::query::QueryParser
      uses function parseSetBool(bool QuerySession::*) defined in clang::query::QueryParser
      uses function parseSetOutputKind() defined in clang::query::QueryParser
      uses function completeMatcherExpression() defined in clang::query::QueryParser
      uses function endQuery(QueryRef) defined in clang::query::QueryParser
      uses function doParse() defined in clang::query::QueryParser
   variable Begin in line 60
   variable CompletionPos in line 63
   variable Completions in line 64
   variable End in line 61
   variable QS in line 66
module clang::query::QueryParser::LexOrCompleteWord
   function Case(const char(&),const T &,bool) in line 65
      protection public
      13 lines of code
      3 parameters
      3 conditional paths
   function Default(const T &) in line 79
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function LexOrCompleteWord(QueryParser *,StringRef,size_t) in line 61
      protection public
      2 lines of code
      3 parameters
      1 conditional paths
   variable P in line 55
      protection public
   variable Switch in line 53
      protection public
   variable Word in line 56
      protection public
   variable WordCompletionPos in line 59
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-query/QuerySession.h
module clang::query::QuerySession
   function QuerySession(llvm::ArrayRef< std::unique_ptr< ASTUnit >>) in line 27
      protection public
      2 lines of code
      1 parameters
      1 conditional paths
   variable ASTs in line 30
      protection public
   variable BindRoot in line 32
      protection public
   variable NamedValues in line 33
      protection public
   variable OutKind in line 31
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-query/tool/ClangQuery.cpp
module ClangQuery.cpp
   function CommonHelp(CommonOptionsParser::HelpMessage) in line 49
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ClangQueryCategory("clang-query options") in line 50
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function Commands("c",cl::desc("Specify command to run"),cl::value_desc("command"),cl::cat(ClangQueryCategory)) in line 52
      protection public
      1 lines of code
      4 parameters
      1 conditional paths
   function CommandFiles("f",cl::desc("Read commands from file"),cl::value_desc("file"),cl::cat(ClangQueryCategory)) in line 56
      protection public
      1 lines of code
      4 parameters
      1 conditional paths
   function main(int,const char **) in line 61
      protection public
      58 lines of code
      2 parameters
      12 conditional paths
      uses function ClangQueryCategory("clang-query options") defined in ClangQuery.cpp
      uses function Commands("c",cl::desc("Specify command to run"),cl::value_desc("command"),cl::cat(ClangQueryCategory)) defined in ClangQuery.cpp
      uses function CommandFiles("f",cl::desc("Read commands from file"),cl::value_desc("file"),cl::cat(ClangQueryCategory)) defined in ClangQuery.cpp
      uses variable Line defined in PreprocessorTracker.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-rename/RenamingAction.cpp
module clang::rename::RenamingASTConsumer
   inherits from ASTConsumer
   function HandleTranslationUnit(ASTContext &) in line 49
      protection public
      27 lines of code
      1 parameters
      5 conditional paths
      uses variable SourceMgr defined in USRFinder.cpp
      uses variable Context defined in ClangTidy.cpp
      uses variable USR defined in USRLocFinder.cpp
      uses function getLocationsOfUSR(const std::string,Decl *) defined in USRLocFinder.cpp
      uses function end() defined in std::vector
      uses function begin() defined in std::vector
      uses variable Loc defined in IncludeOrderCheck.cpp
   function RenamingASTConsumer(const std::string &,const std::string &,const std::vector< std::string > &,tooling::Replacements &,bool) in line 40
      protection public
      8 lines of code
      5 parameters
      1 conditional paths
   variable NewName in line 78
   variable PrevName in line 78
   variable PrintLocations in line 81
   variable Replaces in line 80
   variable USRs in line 79
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-rename/RenamingAction.h
module clang::rename::RenamingAction
   function newASTConsumer() in line 35
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function RenamingAction(const std::string &,const std::string &,const std::vector< std::string > &,tooling::Replacements &,bool) in line 28
      protection public
      6 lines of code
      5 parameters
      1 conditional paths
      uses function newASTConsumer() defined in clang::rename::RenamingAction
   variable NewName in line 38
   variable PrevName in line 38
   variable PrintLocations in line 41
   variable Replaces in line 40
   variable USRs in line 39
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-rename/tool/ClangRename.cpp
module ClangRename.cpp
   macro definition CLANG_RENAME_VERSION in line 75
      protection public
   variable RenameUsage in line 83
      protection public
   function ClangRenameCategory("Clang-rename options") in line 47
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function NewName("new-name",cl::desc("The new name to change the symbol to."),cl::cat(ClangRenameCategory)) in line 50
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function SymbolOffset("offset",cl::desc("Locates the symbol by offset as opposed to <line>:<column>."),cl::cat(ClangRenameCategory)) in line 55
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function Inplace("i",cl::desc("Overwrite edited <file>s."),cl::cat(ClangRenameCategory)) in line 60
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function PrintName("pn",cl::desc("Print the found symbol's name prior to renaming to stderr."),cl::cat(ClangRenameCategory)) in line 65
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function PrintLocations("pl",cl::desc("Print the locations affected by renaming to stderr."),cl::cat(ClangRenameCategory)) in line 70
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function PrintVersion() in line 77
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses macro definition CLANG_RENAME_VERSION defined in ClangRename.cpp
   function main(int,const char **) in line 88
      protection public
      64 lines of code
      2 parameters
      6 conditional paths
      uses function PrintVersion() defined in ClangRename.cpp
      uses function ClangRenameCategory("Clang-rename options") defined in ClangRename.cpp
      uses variable RenameUsage defined in ClangRename.cpp
      uses function NewName("new-name",cl::desc("The new name to change the symbol to."),cl::cat(ClangRenameCategory)) defined in ClangRename.cpp
      uses variable Files defined in ClangTidy.cpp
      uses function SymbolOffset("offset",cl::desc("Locates the symbol by offset as opposed to <line>:<column>."),cl::cat(ClangRenameCategory)) defined in ClangRename.cpp
      uses function PrintName("pn",cl::desc("Print the found symbol's name prior to renaming to stderr."),cl::cat(ClangRenameCategory)) defined in ClangRename.cpp
      uses function PrintLocations("pl",cl::desc("Print the locations affected by renaming to stderr."),cl::cat(ClangRenameCategory)) defined in ClangRename.cpp
      uses function Inplace("i",cl::desc("Overwrite edited <file>s."),cl::cat(ClangRenameCategory)) defined in ClangRename.cpp
      uses variable DiagOpts defined in ClangTidy.cpp
      uses variable Rewrite defined in ClangTidy.cpp
      uses variable File defined in PreprocessorTracker.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-rename/USRFinder.cpp
module USRFinder.cpp
   variable Result in line 121
   variable SourceMgr in line 122
   variable Point in line 123
   function getNamedDeclAt(const ASTContext &,const SourceLocation) in line 127
      protection public
      23 lines of code
      2 parameters
      4 conditional paths
      uses variable SourceMgr defined in USRFinder.cpp
      uses variable Context defined in ClangTidy.cpp
      uses variable Point defined in USRFinder.cpp
      uses variable Result defined in USRFinder.cpp
   function getUSRForDecl(const Decl *) in line 151
      protection public
      9 lines of code
      1 parameters
      2 conditional paths
module clang::rename::@67::NamedDeclFindingASTVisitor
   variable Point in line 123
   variable Result in line 121
   variable SourceMgr in line 122
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-rename/USRFinder.h
module USRFinder.h
   function getNamedDeclAt(const ASTContext &,const SourceLocation) in line 127
      protection public
      23 lines of code
      2 parameters
      4 conditional paths
      uses variable SourceMgr defined in USRFinder.cpp
      uses variable Context defined in ClangTidy.cpp
      uses variable Point defined in USRFinder.cpp
      uses variable Result defined in USRFinder.cpp
   function getUSRForDecl(const Decl *) in line 151
      protection public
      9 lines of code
      1 parameters
      2 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-rename/USRFindingAction.cpp
module USRFindingAction.cpp
   function getAllConstructorUSRs(const CXXRecordDecl *) in line 40
      protection public
      25 lines of code
      1 parameters
      2 conditional paths
      uses function getUSRForDecl(const Decl *) defined in USRFinder.cpp
module clang::rename::NamedDeclFindingConsumer
   inherits from ASTConsumer
   function HandleTranslationUnit(ASTContext &) in line 67
      protection public
      33 lines of code
      1 parameters
      6 conditional paths
      uses variable SourceMgr defined in USRFinder.cpp
      uses variable Context defined in ClangTidy.cpp
      uses variable Point defined in USRFinder.cpp
      uses function getNamedDeclAt(const ASTContext &,const SourceLocation) defined in USRFinder.cpp
      uses function getAllConstructorUSRs(const CXXRecordDecl *) defined in USRFindingAction.cpp
      uses function getUSRForDecl(const Decl *) defined in USRFinder.cpp
   variable SpellingName in line 102
      protection public
   variable SymbolOffset in line 101
      protection public
   variable USRs in line 103
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-rename/USRFindingAction.h
module clang::rename::USRFindingAction
   function getUSRs() in line 37
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses variable USRs defined in clang::rename::USRFindingAction
   function getUSRSpelling() in line 33
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses variable SpellingName defined in clang::rename::USRFindingAction
   function newASTConsumer() in line 30
      protection public
      9 lines of code
      0 parameters
      1 conditional paths
   function USRFindingAction(unsigned) in line 28
      protection public
      2 lines of code
      1 parameters
      1 conditional paths
      uses function newASTConsumer() defined in clang::rename::USRFindingAction
   variable SpellingName in line 43
   variable SymbolOffset in line 42
   variable USRs in line 44
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-rename/USRLocFinder.cpp
module USRLocFinder.cpp
   variable USR in line 89
   variable LocationsFound in line 90
   function getLocationsOfUSR(const std::string,Decl *) in line 94
      protection public
      7 lines of code
      2 parameters
      1 conditional paths
      uses variable USR defined in USRLocFinder.cpp
module clang::rename::@71::USRLocFindingASTVisitor
   variable LocationsFound in line 90
   variable USR in line 89
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-rename/USRLocFinder.h
module USRLocFinder.h
   function getLocationsOfUSR(const std::string,Decl *) in line 94
      protection public
      7 lines of code
      2 parameters
      1 conditional paths
      uses variable USR defined in USRLocFinder.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-tidy/add_new_check.py
module add_new_check.py
   function adapt_cmake((null),(null)) in line 19
      protection public
      29 lines of code
      2 parameters
      1 conditional paths
   function write_header((null),(null),(null),(null)) in line 48
      protection public
      45 lines of code
      4 parameters
      1 conditional paths
   function write_implementation((null),(null)) in line 93
      protection public
      48 lines of code
      2 parameters
      1 conditional paths
   function adapt_module((null),(null),(null),(null)) in line 141
      protection public
      39 lines of code
      4 parameters
      1 conditional paths
   function write_test((null),(null),(null)) in line 180
      protection public
      23 lines of code
      3 parameters
      1 conditional paths
   function main() in line 203
      protection public
      21 lines of code
      0 parameters
      1 conditional paths
      uses function adapt_cmake((null),(null)) defined in add_new_check.py
      uses function write_header((null),(null),(null),(null)) defined in add_new_check.py
      uses function write_implementation((null),(null)) defined in add_new_check.py
      uses function adapt_module((null),(null),(null),(null)) defined in add_new_check.py
      uses function write_test((null),(null),(null)) defined in add_new_check.py
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-tidy/ClangTidy.cpp
module ClangTidy.cpp
   macro definition GET_CHECKERS in line 59
      protection public
   macro definition CHECKER in line 60
      protection public
   variable Context in line 94
   variable Files in line 169
   variable LangOpts in line 170
   variable DiagOpts in line 171
   variable DiagPrinter in line 172
   variable Diags in line 173
   variable SourceMgr in line 174
   variable Rewrite in line 175
   variable ApplyFixes in line 176
   variable TotalFixes in line 177
   variable AppliedFixes in line 178
   variable Finder in line 190
   variable Checks in line 191
   function setStaticAnalyzerCheckerOpts(const ClangTidyOptions &,AnalyzerOptionsRef) in line 207
      protection public
      10 lines of code
      2 parameters
      3 conditional paths
      uses variable CheckOptions defined in clang::tidy::ClangTidyOptions
   function getCheckNames(const ClangTidyOptions &) in line 356
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses variable Context defined in ClangTidy.cpp
      uses function getCheckNames() defined in clang::tidy::ClangTidyASTConsumerFactory
   function getCheckOptions(const ClangTidyOptions &) in line 364
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses variable Context defined in ClangTidy.cpp
      uses function getCheckOptions() defined in clang::tidy::ClangTidyASTConsumerFactory
   function runClangTidy(std::unique_ptr< ClangTidyOptionsProvider >,const tooling::CompilationDatabase &,ArrayRef< std::string >,std::vector< ClangTidyError > *,ProfileData *) in line 373
      protection public
      39 lines of code
      5 parameters
      2 conditional paths
      uses variable Context defined in ClangTidy.cpp
      uses variable File defined in PreprocessorTracker.cpp
      uses function CreateASTConsumer(clang::CompilerInstance &,StringRef) defined in clang::tidy::ClangTidyASTConsumerFactory
   function handleErrors(const std::vector< ClangTidyError > &,bool) in line 413
      protection public
      6 lines of code
      2 parameters
      2 conditional paths
   function exportReplacements(const std::vector< ClangTidyError > &,raw_ostream &) in line 420
      protection public
      10 lines of code
      2 parameters
      2 conditional paths
module clang::tidy::@73::AnalyzerDiagnosticConsumer
   variable Context in line 94
module clang::tidy::@73::ErrorReporter
   variable AppliedFixes in line 178
   variable ApplyFixes in line 176
   variable DiagOpts in line 171
   variable DiagPrinter in line 172
   variable Diags in line 173
   variable Files in line 169
   variable LangOpts in line 170
   variable Rewrite in line 175
   variable SourceMgr in line 174
   variable TotalFixes in line 177
module clang::tidy::@73::ClangTidyASTConsumer
   variable Checks in line 191
   variable Finder in line 190
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-tidy/ClangTidy.h
module ClangTidy.h
   function getCheckNames(const ClangTidyOptions &) in line 356
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses variable Context defined in ClangTidy.cpp
      uses function getCheckNames() defined in clang::tidy::ClangTidyASTConsumerFactory
   function getCheckOptions(const ClangTidyOptions &) in line 364
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses variable Context defined in ClangTidy.cpp
      uses function getCheckOptions() defined in clang::tidy::ClangTidyASTConsumerFactory
   function runClangTidy(std::unique_ptr< ClangTidyOptionsProvider >,const tooling::CompilationDatabase &,ArrayRef< std::string >,std::vector< ClangTidyError > *,ProfileData *) in line 373
      protection public
      39 lines of code
      5 parameters
      2 conditional paths
      uses variable Context defined in ClangTidy.cpp
      uses variable File defined in PreprocessorTracker.cpp
      uses function CreateASTConsumer(clang::CompilerInstance &,StringRef) defined in clang::tidy::ClangTidyASTConsumerFactory
   function handleErrors(const std::vector< ClangTidyError > &,bool) in line 413
      protection public
      6 lines of code
      2 parameters
      2 conditional paths
   function exportReplacements(const std::vector< ClangTidyError > &,raw_ostream &) in line 420
      protection public
      10 lines of code
      2 parameters
      2 conditional paths
module clang::tidy::OptionsView
   function get(StringRef,std::string) in line 50
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function get(StringRef,T) in line 60
      protection public
      7 lines of code
      2 parameters
      2 conditional paths
      uses variable Result defined in USRFinder.cpp
   function store(ClangTidyOptions::OptionMap &,StringRef,StringRef) in line 70
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function store(ClangTidyOptions::OptionMap &,StringRef,int64_t) in line 75
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function OptionsView(StringRef,const ClangTidyOptions::OptionMap &) in line 42
      protection public
      3 lines of code
      2 parameters
      2 conditional paths
      uses function get(StringRef,std::string) defined in clang::tidy::OptionsView
      uses variable CheckOptions defined in clang::tidy::OptionsView
      uses function find(const K &) defined in std::map
      uses variable NamePrefix defined in clang::tidy::OptionsView
      uses function end() defined in std::map
      uses function store(ClangTidyOptions::OptionMap &,StringRef,StringRef) defined in clang::tidy::OptionsView
   variable CheckOptions in line 80
   variable NamePrefix in line 79
module clang::tidy::ClangTidyCheck
   inherits from clang::ast_matchers::MatchFinder::MatchCallback
   function check(const ast_matchers::MatchFinder::MatchResult &) in line 138
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses variable Loc defined in IncludeOrderCheck.cpp
   function diag(SourceLocation,StringRef,DiagnosticIDs::Level) in line 141
      protection public
      4 lines of code
      3 parameters
      1 conditional paths
      uses variable Context defined in clang::tidy::ClangTidyASTConsumerFactory
      uses function diag(StringRef,SourceLocation,StringRef,DiagnosticIDs::Level) defined in clang::tidy::ClangTidyContext
      uses variable Loc defined in IncludeOrderCheck.cpp
   function getCurrentMainFile() in line 160
      1 lines of code
      0 parameters
      1 conditional paths
      uses variable Context defined in ClangTidy.cpp
   function getID() in line 153
      1 lines of code
      0 parameters
      1 conditional paths
   function registerMatchers(ast_matchers::MatchFinder *) in line 134
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function registerPPCallbacks(CompilerInstance &) in line 120
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function run(const ast_matchers::MatchFinder::MatchResult &) in line 152
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable Context defined in clang::tidy::ClangTidyASTConsumerFactory
      uses function setSourceManager(SourceManager *) defined in clang::tidy::ClangTidyContext
      uses variable Result defined in USRFinder.cpp
      uses function check(const NoReturnDtor &) defined in temporaries.cpp
   function storeOptions(ClangTidyOptions::OptionMap &) in line 149
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses variable Result defined in USRFinder.cpp
   function ClangTidyCheck(StringRef,ClangTidyContext *) in line 109
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
      uses macro definition assert defined in misc-assert-side-effect.cpp
      uses variable Context defined in ClangTidy.cpp
   variable CheckName in line 154
   variable Context in line 155
   variable Options in line 158
module clang::tidy::ClangTidyASTConsumerFactory
   function CreateASTConsumer(clang::CompilerInstance &,StringRef) in line 171
      protection public
      50 lines of code
      2 parameters
      5 conditional paths
      uses variable Context defined in clang::tidy::ClangTidyASTConsumerFactory
      uses function setSourceManager(SourceManager *) defined in clang::tidy::ClangTidyContext
      uses function setCurrentFile(StringRef) defined in clang::tidy::ClangTidyContext
      uses variable File defined in PreprocessorTracker.cpp
      uses function setASTContext(ASTContext *) defined in clang::tidy::ClangTidyContext
      uses variable Checks defined in ClangTidy.cpp
      uses variable CheckFactories defined in clang::tidy::ClangTidyASTConsumerFactory
      uses function getCheckProfileData() defined in clang::tidy::ClangTidyContext
      uses variable Finder defined in ClangTidy.cpp
      uses variable Check defined in IncludeOrderCheck.cpp
      uses function getOptions() defined in clang::tidy::ClangTidyContext
      uses variable AnalyzeTemporaryDtors defined in clang::tidy::ClangTidyOptions
      uses function getChecksFilter() defined in clang::tidy::ClangTidyContext
      uses function getCheckersControlList(GlobList &) defined in clang::tidy::ClangTidyASTConsumerFactory
   function getCheckersControlList(GlobList &) in line 181
      29 lines of code
      1 parameters
      5 conditional paths
      uses function contains(StringRef) defined in clang::tidy::GlobList
      uses function make_pair(T1,T2) defined in google-explicit-make-pair.cpp
   function getCheckNames() in line 174
      protection public
      14 lines of code
      0 parameters
      4 conditional paths
      uses variable Context defined in clang::tidy::ClangTidyASTConsumerFactory
      uses function getChecksFilter() defined in clang::tidy::ClangTidyContext
      uses variable CheckFactories defined in clang::tidy::ClangTidyASTConsumerFactory
      uses function contains(StringRef) defined in clang::tidy::GlobList
      uses function getCheckersControlList(GlobList &) defined in clang::tidy::ClangTidyASTConsumerFactory
      uses function begin() defined in std::vector
      uses function end() defined in std::vector
   function getCheckOptions() in line 177
      protection public
      8 lines of code
      0 parameters
      2 conditional paths
      uses variable Checks defined in ClangTidy.cpp
      uses variable CheckFactories defined in clang::tidy::ClangTidyASTConsumerFactory
      uses variable Context defined in clang::tidy::ClangTidyASTConsumerFactory
      uses variable Check defined in IncludeOrderCheck.cpp
   function ClangTidyASTConsumerFactory(ClangTidyContext &) in line 167
      protection public
      10 lines of code
      1 parameters
      2 conditional paths
      uses function begin(const MyArray &) defined in free_begin_end_fail.cpp
      uses function end(const MyArray &) defined in free_begin_end_fail.cpp
      uses variable CheckFactories defined in clang::tidy::ClangTidyASTConsumerFactory
   variable CheckFactories in line 184
   variable Context in line 183
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-tidy/ClangTidyDiagnosticConsumer.cpp
module ClangTidyDiagnosticConsumer.cpp
   function ConsumeNegativeIndicator(StringRef &) in line 124
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
   function ConsumeGlob(StringRef &) in line 133
      protection public
      15 lines of code
      1 parameters
      4 conditional paths
module @75::ClangTidyDiagnosticRenderer
   variable Error in line 102
module @75::LessClangTidyError
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-tidy/ClangTidyDiagnosticConsumer.h
module clang::tidy::ClangTidyMessage
   function ClangTidyMessage(StringRef) in line 39
      protection public
      2 lines of code
      1 parameters
      1 conditional paths
   function ClangTidyMessage(StringRef,const SourceManager &,SourceLocation) in line 40
      protection public
      8 lines of code
      3 parameters
      1 conditional paths
      uses macro definition assert defined in misc-assert-side-effect.cpp
      uses variable Loc defined in IncludeOrderCheck.cpp
      uses variable FilePath defined in clang::tidy::ClangTidyMessage
      uses variable FileOffset defined in clang::tidy::ClangTidyMessage
   variable FileOffset in line 44
      protection public
   variable FilePath in line 43
      protection public
   variable Message in line 42
      protection public
module clang::tidy::ClangTidyError
   function ClangTidyError(StringRef,ClangTidyError::Level) in line 60
      protection public
      3 lines of code
      2 parameters
      1 conditional paths
   variable CheckName in line 62
      protection public
   variable DiagLevel in line 67
      protection public
   variable Fix in line 64
      protection public
   variable Message in line 63
      protection public
   variable Notes in line 65
      protection public
module clang::tidy::GlobList
   function contains(StringRef) in line 81
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses function contains(StringRef) defined in clang::tidy::GlobList
   function contains(StringRef,bool) in line 84
      8 lines of code
      2 parameters
      3 conditional paths
      uses variable Regex defined in clang::tidy::GlobList
      uses variable Positive defined in clang::tidy::GlobList
      uses variable NextGlob defined in clang::tidy::GlobList
   function GlobList(StringRef) in line 77
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   variable NextGlob in line 88
   variable Positive in line 86
   variable Regex in line 87
module clang::tidy::ClangTidyStats
   function errorsIgnored() in line 104
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function ClangTidyStats() in line 94
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   variable ErrorsDisplayed in line 98
      protection public
   variable ErrorsIgnoredCheckFilter in line 99
      protection public
   variable ErrorsIgnoredLineFilter in line 102
      protection public
   variable ErrorsIgnoredNOLINT in line 100
      protection public
   variable ErrorsIgnoredNonUserCode in line 101
      protection public
module clang::tidy::ProfileData
   variable Records in line 112
      protection public
module clang::tidy::ClangTidyContext
   function clearErrors() in line 173
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function diag(StringRef,SourceLocation,StringRef,DiagnosticIDs::Level) in line 134
      protection public
      24 lines of code
      4 parameters
      5 conditional paths
      uses macro definition assert defined in misc-assert-side-effect.cpp
      uses variable Loc defined in IncludeOrderCheck.cpp
      uses variable DiagEngine defined in clang::tidy::ClangTidyContext
      uses variable Stats defined in clang::tidy::ClangTidyContext
      uses variable ErrorsIgnoredNOLINT defined in clang::tidy::ClangTidyStats
      uses variable CheckNamesByDiagnosticID defined in clang::tidy::ClangTidyContext
      uses function make_pair(T1,T2) defined in google-explicit-make-pair.cpp
   function getCheckName(unsigned) in line 154
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses variable CheckNamesByDiagnosticID defined in clang::tidy::ClangTidyContext
   function getCheckProfileData() in line 180
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function getChecksFilter() in line 157
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses macro definition assert defined in misc-assert-side-effect.cpp
      uses variable CheckFilter defined in clang::tidy::ClangTidyContext
   function getCurrentFile() in line 147
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
      uses variable Context defined in ClangTidy.cpp
   function getErrors() in line 170
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function getGlobalOptions() in line 160
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses variable OptionsProvider defined in clang::tidy::ClangTidyContext
   function getOptions() in line 163
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses variable CurrentOptions defined in clang::tidy::ClangTidyContext
   function getStats() in line 167
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function setASTContext(ASTContext *) in line 150
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
      uses variable DiagEngine defined in clang::tidy::ClangTidyContext
      uses variable Context defined in ClangTidy.cpp
   function setCheckProfileData(ProfileData *) in line 179
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
      uses variable Profile defined in clang::tidy::ClangTidyContext
   function setCurrentFile(StringRef) in line 144
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses variable CurrentFile defined in clang::tidy::ClangTidyContext
      uses variable File defined in PreprocessorTracker.cpp
      uses variable CurrentOptions defined in clang::tidy::ClangTidyContext
      uses function mergeWith(const ClangTidyOptions &) defined in clang::tidy::ClangTidyOptions
      uses variable OptionsProvider defined in clang::tidy::ClangTidyContext
      uses variable CheckFilter defined in clang::tidy::ClangTidyContext
      uses function getOptions() defined in clang::tidy::ClangTidyContext
      uses variable Checks defined in ClangTidy.cpp
   function setDiagnosticsEngine(DiagnosticsEngine *) in line 188
      3 lines of code
      1 parameters
      1 conditional paths
      uses variable DiagEngine defined in clang::tidy::ClangTidyContext
   function setSourceManager(SourceManager *) in line 141
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
      uses variable DiagEngine defined in clang::tidy::ClangTidyContext
      uses variable SourceMgr defined in USRFinder.cpp
   function storeError(const ClangTidyError &) in line 191
      3 lines of code
      1 parameters
      1 conditional paths
      uses variable Errors defined in clang::tidy::ClangTidyContext
   function ClangTidyContext(std::unique_ptr< ClangTidyOptionsProvider >) in line 127
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses function setCurrentFile(StringRef) defined in clang::tidy::ClangTidyContext
   variable CheckFilter in line 199
   variable CheckNamesByDiagnosticID in line 203
   variable CurrentFile in line 197
   variable CurrentOptions in line 198
   variable DiagEngine in line 194
   variable Errors in line 193
   variable OptionsProvider in line 195
   variable Profile in line 205
   variable Stats in line 201
module clang::tidy::ClangTidyDiagnosticConsumer
   inherits from DiagnosticConsumer
   function BeginSourceFile(const LangOptions &,const Preprocessor *) in line 224
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
      uses variable HeaderFilter defined in clang::tidy::ClangTidyDiagnosticConsumer
      uses function reset(T *) defined in std::unique_ptr
      uses variable Context defined in clang::tidy::ClangTidyDiagnosticConsumer
      uses function getOptions() defined in clang::tidy::ClangTidyContext
      uses variable HeaderFilterRegex defined in clang::tidy::ClangTidyOptions
   function checkFilters(SourceLocation) in line 235
      38 lines of code
      1 parameters
      4 conditional paths
      uses variable LastErrorRelatesToUserCode defined in clang::tidy::ClangTidyDiagnosticConsumer
      uses variable LastErrorPassesLineFilter defined in clang::tidy::ClangTidyDiagnosticConsumer
      uses variable Diags defined in clang::tidy::ClangTidyDiagnosticConsumer
      uses variable Context defined in clang::tidy::ClangTidyDiagnosticConsumer
      uses function getOptions() defined in clang::tidy::ClangTidyContext
      uses variable SystemHeaders defined in clang::tidy::ClangTidyOptions
      uses variable File defined in PreprocessorTracker.cpp
      uses macro definition assert defined in misc-assert-side-effect.cpp
      uses variable HeaderFilter defined in clang::tidy::ClangTidyDiagnosticConsumer
      uses function passesLineFilter(StringRef,unsigned) defined in clang::tidy::ClangTidyDiagnosticConsumer
      uses variable Message defined in clang::tidy::ClangTidyError
      uses variable FilePath defined in clang::tidy::ClangTidyMessage
      uses variable FileOffset defined in clang::tidy::ClangTidyMessage
      uses variable Message defined in clang::tidy::ClangTidyMessage
   function finalizeLastError() in line 231
      20 lines of code
      0 parameters
      5 conditional paths
      uses variable Errors defined in clang::tidy::ClangTidyDiagnosticConsumer
      uses variable Context defined in clang::tidy::ClangTidyDiagnosticConsumer
      uses function getChecksFilter() defined in clang::tidy::ClangTidyContext
      uses function contains(StringRef) defined in clang::tidy::GlobList
      uses variable CheckName defined in clang::tidy::ClangTidyError
      uses variable DiagLevel defined in clang::tidy::ClangTidyError
      uses enumvalue Error defined in clang::tidy::ClangTidyError
      uses variable Stats defined in clang::tidy::ClangTidyContext
      uses variable ErrorsIgnoredCheckFilter defined in clang::tidy::ClangTidyStats
      uses variable LastErrorRelatesToUserCode defined in clang::tidy::ClangTidyDiagnosticConsumer
      uses variable ErrorsIgnoredNonUserCode defined in clang::tidy::ClangTidyStats
      uses variable LastErrorPassesLineFilter defined in clang::tidy::ClangTidyDiagnosticConsumer
      uses variable ErrorsIgnoredLineFilter defined in clang::tidy::ClangTidyStats
      uses variable ErrorsDisplayed defined in clang::tidy::ClangTidyStats
   function finish() in line 228
      protection public
      10 lines of code
      0 parameters
      3 conditional paths
      uses function finalizeLastError() defined in clang::tidy::ClangTidyDiagnosticConsumer
      uses variable Errors defined in clang::tidy::ClangTidyDiagnosticConsumer
      uses variable Context defined in clang::tidy::ClangTidyDiagnosticConsumer
      uses function storeError(const ClangTidyError &) defined in clang::tidy::ClangTidyContext
   function HandleDiagnostic(DiagnosticsEngine::Level,const Diagnostic &) in line 220
      protection public
      60 lines of code
      2 parameters
      8 conditional paths
      uses macro definition assert defined in misc-assert-side-effect.cpp
      uses variable Errors defined in clang::tidy::ClangTidyDiagnosticConsumer
      uses function finalizeLastError() defined in clang::tidy::ClangTidyDiagnosticConsumer
      uses variable Context defined in clang::tidy::ClangTidyDiagnosticConsumer
      uses variable DiagEngine defined in clang::tidy::ClangTidyContext
      uses function getCheckName(unsigned) defined in clang::tidy::ClangTidyContext
      uses enumvalue Warning defined in clang::tidy::ClangTidyError
      uses enumvalue Error defined in clang::tidy::ClangTidyError
      uses variable LastErrorRelatesToUserCode defined in clang::tidy::ClangTidyDiagnosticConsumer
      uses variable LastErrorPassesLineFilter defined in clang::tidy::ClangTidyDiagnosticConsumer
      uses variable LangOpts defined in ClangTidy.cpp
      uses function checkFilters(SourceLocation) defined in clang::tidy::ClangTidyDiagnosticConsumer
   function passesLineFilter(StringRef,unsigned) in line 236
      17 lines of code
      2 parameters
      7 conditional paths
      uses variable Context defined in clang::tidy::ClangTidyDiagnosticConsumer
      uses function getGlobalOptions() defined in clang::tidy::ClangTidyContext
      uses variable LineFilter defined in clang::tidy::ClangTidyGlobalOptions
      uses variable Range defined in IncludeOrderCheck.cpp
   function ClangTidyDiagnosticConsumer(ClangTidyContext &) in line 215
      protection public
      9 lines of code
      1 parameters
      1 conditional paths
      uses variable DiagOpts defined in ClangTidy.cpp
      uses variable Diags defined in clang::tidy::ClangTidyDiagnosticConsumer
      uses function reset(T *) defined in std::unique_ptr
      uses variable Context defined in clang::tidy::ClangTidyDiagnosticConsumer
      uses function setDiagnosticsEngine(DiagnosticsEngine *) defined in clang::tidy::ClangTidyContext
      uses function get() defined in std::unique_ptr
   variable Context in line 238
   variable Diags in line 239
   variable Errors in line 240
   variable HeaderFilter in line 241
   variable LastErrorPassesLineFilter in line 243
   variable LastErrorRelatesToUserCode in line 242
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-tidy/ClangTidyModule.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-tidy/ClangTidyModule.h
module clang::tidy::ClangTidyCheckFactories
   function begin() in line 73
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
      uses variable Factories defined in clang::tidy::ClangTidyCheckFactories
      uses function begin() defined in std::map
   function createChecks(ClangTidyContext *,std::vector< std::unique_ptr< ClangTidyCheck >> &) in line 69
      protection public
      9 lines of code
      2 parameters
      3 conditional paths
      uses variable Context defined in ClangTidy.cpp
      uses variable Factories defined in clang::tidy::ClangTidyCheckFactories
      uses function contains(StringRef) defined in clang::tidy::GlobList
      uses variable Checks defined in ClangTidy.cpp
   function empty() in line 75
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
      uses variable Factories defined in clang::tidy::ClangTidyCheckFactories
   function end() in line 74
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
      uses variable Factories defined in clang::tidy::ClangTidyCheckFactories
      uses function end() defined in std::map
   function registerCheck(StringRef) in line 58
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses function registerCheckFactory(StringRef,CheckFactory) defined in clang::tidy::ClangTidyCheckFactories
      uses variable Name defined in PreprocessorTracker.cpp
      uses variable Context defined in ClangTidy.cpp
      uses function createChecks(ClangTidyContext *,std::vector< std::unique_ptr< ClangTidyCheck >> &) defined in clang::tidy::ClangTidyCheckFactories
      uses variable Checks defined in ClangTidy.cpp
   function registerCheckFactory(StringRef,CheckFactory) in line 35
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses variable Factories defined in clang::tidy::ClangTidyCheckFactories
      uses variable Name defined in PreprocessorTracker.cpp
   variable Factories in line 78
module clang::tidy::ClangTidyModule
   abstract class
   function addCheckFactories(ClangTidyCheckFactories &) in line 89
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function getModuleOptions() in line 92
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function ~ClangTidyModule() in line 85
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-tidy/ClangTidyModuleRegistry.h
module ClangTidyModuleRegistry.h
   typedef ClangTidyModuleRegistry in line 21
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-tidy/ClangTidyOptions.cpp
module ClangTidyOptions.cpp
   macro definition DEBUG_TYPE in line 22
      protection public
   function parseLineFilter(StringRef,clang::tidy::ClangTidyGlobalOptions &) in line 252
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
      uses variable LineFilter defined in clang::tidy::ClangTidyGlobalOptions
   function parseConfiguration(StringRef) in line 259
      protection public
      8 lines of code
      1 parameters
      2 conditional paths
   function configurationAsText(const ClangTidyOptions &) in line 268
      protection public
      10 lines of code
      1 parameters
      1 conditional paths
module llvm::yaml::SequenceTraits< FileFilter::LineRange >
   function element(IO &,FileFilter::LineRange &,size_t) in line 39
      protection public
      5 lines of code
      3 parameters
      2 conditional paths
      uses variable Range defined in IncludeOrderCheck.cpp
   function size(IO &,FileFilter::LineRange &) in line 36
      protection public
      3 lines of code
      2 parameters
      1 conditional paths
      uses variable Range defined in IncludeOrderCheck.cpp
module llvm::yaml::MappingTraits< FileFilter >
   function mapping(IO &,FileFilter &) in line 47
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses variable File defined in PreprocessorTracker.cpp
   function validate(IO &,FileFilter &) in line 51
      protection public
      9 lines of code
      2 parameters
      4 conditional paths
      uses variable File defined in PreprocessorTracker.cpp
      uses variable Range defined in IncludeOrderCheck.cpp
module llvm::yaml::MappingTraits< ClangTidyOptions::StringPair >
   function mapping(IO &,ClangTidyOptions::StringPair &) in line 63
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
module llvm::yaml::NOptionMap
   function denormalize(IO &) in line 73
      protection public
      6 lines of code
      1 parameters
      2 conditional paths
   function NOptionMap(IO &) in line 70
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function NOptionMap(IO &,const ClangTidyOptions::OptionMap &) in line 71
      protection public
      2 lines of code
      2 parameters
      1 conditional paths
   variable Options in line 79
      protection public
module llvm::yaml::MappingTraits< ClangTidyOptions >
   function mapping(IO &,ClangTidyOptions &) in line 83
      protection public
      9 lines of code
      2 parameters
      1 conditional paths
      uses variable CheckOptions defined in clang::tidy::ClangTidyOptions
      uses variable Checks defined in clang::tidy::ClangTidyOptions
      uses variable HeaderFilterRegex defined in clang::tidy::ClangTidyOptions
      uses variable AnalyzeTemporaryDtors defined in clang::tidy::ClangTidyOptions
      uses variable User defined in clang::tidy::ClangTidyOptions
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-tidy/ClangTidyOptions.h
module ClangTidyOptions.h
   function parseLineFilter(llvm::StringRef,ClangTidyGlobalOptions &) in line 203
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function parseConfiguration(llvm::StringRef) in line 208
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function configurationAsText(const ClangTidyOptions &) in line 268
      protection public
      10 lines of code
      1 parameters
      1 conditional paths
module clang::tidy::FileFilter
   variable LineRanges in line 36
      protection public
   variable Name in line 30
      protection public
module clang::tidy::ClangTidyGlobalOptions
   variable LineFilter in line 44
      protection public
module clang::tidy::ClangTidyOptions
   function getDefaults() in line 56
      protection public
      13 lines of code
      0 parameters
      2 conditional paths
      uses variable Checks defined in clang::tidy::ClangTidyOptions
      uses variable HeaderFilterRegex defined in clang::tidy::ClangTidyOptions
      uses variable SystemHeaders defined in clang::tidy::ClangTidyOptions
      uses variable AnalyzeTemporaryDtors defined in clang::tidy::ClangTidyOptions
      uses variable User defined in clang::tidy::ClangTidyOptions
      uses function begin(const MyArray &) defined in free_begin_end_fail.cpp
      uses function end(const MyArray &) defined in free_begin_end_fail.cpp
      uses function mergeWith(const ClangTidyOptions &) defined in clang::tidy::ClangTidyOptions
   function mergeWith(const ClangTidyOptions &) in line 60
      protection public
      23 lines of code
      1 parameters
      6 conditional paths
      uses variable Result defined in USRFinder.cpp
      uses variable Checks defined in clang::tidy::ClangTidyOptions
      uses variable HeaderFilterRegex defined in clang::tidy::ClangTidyOptions
      uses variable SystemHeaders defined in clang::tidy::ClangTidyOptions
      uses variable AnalyzeTemporaryDtors defined in clang::tidy::ClangTidyOptions
      uses variable User defined in clang::tidy::ClangTidyOptions
      uses variable CheckOptions defined in clang::tidy::ClangTidyOptions
   variable AnalyzeTemporaryDtors in line 73
      protection public
   variable CheckOptions in line 85
      protection public
   variable Checks in line 63
      protection public
   variable HeaderFilterRegex in line 67
      protection public
   variable SystemHeaders in line 70
      protection public
   variable User in line 79
      protection public
module clang::tidy::ClangTidyOptionsProvider
   abstract class
   function getGlobalOptions() in line 94
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function getOptions(llvm::StringRef) in line 98
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ~ClangTidyOptionsProvider() in line 91
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
module clang::tidy::DefaultOptionsProvider
   inherits from clang::tidy::ClangTidyOptionsProvider
   function getGlobalOptions() in line 108
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function getOptions(llvm::StringRef) in line 111
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function DefaultOptionsProvider(const ClangTidyGlobalOptions &,const ClangTidyOptions &) in line 105
      protection public
      3 lines of code
      2 parameters
      1 conditional paths
   variable DefaultOptions in line 117
   variable GlobalOptions in line 116
module clang::tidy::FileOptionsProvider
   inherits from clang::tidy::DefaultOptionsProvider
   function getOptions(llvm::StringRef) in line 190
      protection public
      38 lines of code
      1 parameters
      6 conditional paths
      uses variable Path defined in PreprocessorTracker.cpp
      uses variable Result defined in USRFinder.cpp
      uses variable CachedOptions defined in clang::tidy::FileOptionsProvider
      uses function TryReadConfigFile(llvm::StringRef) defined in clang::tidy::FileOptionsProvider
   function TryReadConfigFile(llvm::StringRef) in line 195
      48 lines of code
      1 parameters
      8 conditional paths
      uses macro definition assert defined in misc-assert-side-effect.cpp
      uses variable ConfigHandlers defined in clang::tidy::FileOptionsProvider
      uses function getOptions(llvm::StringRef) defined in clang::tidy::DefaultOptionsProvider
      uses function mergeWith(const ClangTidyOptions &) defined in clang::tidy::ClangTidyOptions
      uses variable OverrideOptions defined in clang::tidy::FileOptionsProvider
   function FileOptionsProvider(const ClangTidyGlobalOptions &,const ClangTidyOptions &,const ClangTidyOptions &) in line 164
      protection public
      9 lines of code
      3 parameters
      1 conditional paths
      uses variable ConfigHandlers defined in clang::tidy::FileOptionsProvider
      uses function parseConfiguration(StringRef) defined in ClangTidyOptions.cpp
      uses variable CachedOptions defined in clang::tidy::FileOptionsProvider
      uses variable DefaultOptions defined in clang::tidy::DefaultOptionsProvider
      uses function mergeWith(const ClangTidyOptions &) defined in clang::tidy::ClangTidyOptions
      uses variable OverrideOptions defined in clang::tidy::FileOptionsProvider
   function FileOptionsProvider(const ClangTidyGlobalOptions &,const ClangTidyOptions &,const ClangTidyOptions &,const ConfigFileHandlers &) in line 185
      protection public
      9 lines of code
      4 parameters
      1 conditional paths
      uses variable CachedOptions defined in clang::tidy::FileOptionsProvider
      uses variable DefaultOptions defined in clang::tidy::DefaultOptionsProvider
      uses function mergeWith(const ClangTidyOptions &) defined in clang::tidy::ClangTidyOptions
      uses variable OverrideOptions defined in clang::tidy::FileOptionsProvider
   variable CachedOptions in line 197
   variable ConfigHandlers in line 199
   variable OverrideOptions in line 198
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-tidy/google/AvoidCStyleCastsCheck.cpp
module AvoidCStyleCastsCheck.cpp
   function needsConstCast(QualType,QualType) in line 36
      protection public
      11 lines of code
      2 parameters
      3 conditional paths
   function pointedTypesAreEqual(QualType,QualType) in line 48
      protection public
      9 lines of code
      2 parameters
      2 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-tidy/google/AvoidCStyleCastsCheck.h
module clang::tidy::google::readability::AvoidCStyleCastsCheck
   inherits from clang::tidy::ClangTidyCheck
   function check(const ast_matchers::MatchFinder::MatchResult &) in line 33
      protection public
      113 lines of code
      1 parameters
      17 conditional paths
      uses variable Result defined in USRFinder.cpp
      uses variable SM defined in IncludeOrderCheck.cpp
   function registerMatchers(ast_matchers::MatchFinder *) in line 32
      protection public
      11 lines of code
      1 parameters
      1 conditional paths
      uses variable Finder defined in ClangTidy.cpp
   function AvoidCStyleCastsCheck(StringRef,ClangTidyContext *) in line 30
      protection public
      2 lines of code
      2 parameters
      1 conditional paths
      uses function registerMatchers(ast_matchers::MatchFinder *) defined in clang::tidy::google::readability::AvoidCStyleCastsCheck
      uses variable Finder defined in ClangTidy.cpp
      uses function check(const ast_matchers::MatchFinder::MatchResult &) defined in clang::tidy::google::readability::AvoidCStyleCastsCheck
      uses variable Result defined in USRFinder.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-tidy/google/ExplicitConstructorCheck.cpp
module ExplicitConstructorCheck.cpp
   function FindToken(const SourceManager &,LangOptions,SourceLocation,SourceLocation,bool(*)(const Token &)) in line 29
      protection public
      22 lines of code
      5 parameters
      4 conditional paths
      uses variable File defined in PreprocessorTracker.cpp
      uses variable LangOpts defined in ClangTidy.cpp
   function declIsStdInitializerList(const NamedDecl *) in line 52
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function isStdInitializerList(QualType) in line 59
      protection public
      13 lines of code
      1 parameters
      5 conditional paths
      uses function declIsStdInitializerList(const NamedDecl *) defined in ExplicitConstructorCheck.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-tidy/google/ExplicitConstructorCheck.h
module clang::tidy::google::ExplicitConstructorCheck
   inherits from clang::tidy::ClangTidyCheck
   function check(const ast_matchers::MatchFinder::MatchResult &) in line 28
      protection public
      51 lines of code
      1 parameters
      7 conditional paths
      uses variable Result defined in USRFinder.cpp
      uses variable Loc defined in IncludeOrderCheck.cpp
   function registerMatchers(ast_matchers::MatchFinder *) in line 27
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable Finder defined in ClangTidy.cpp
   function ExplicitConstructorCheck(StringRef,ClangTidyContext *) in line 25
      protection public
      2 lines of code
      2 parameters
      1 conditional paths
      uses function registerMatchers(ast_matchers::MatchFinder *) defined in clang::tidy::google::ExplicitConstructorCheck
      uses variable Finder defined in ClangTidy.cpp
      uses function check(const ast_matchers::MatchFinder::MatchResult &) defined in clang::tidy::google::ExplicitConstructorCheck
      uses variable Result defined in USRFinder.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-tidy/google/ExplicitMakePairCheck.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-tidy/google/ExplicitMakePairCheck.h
module clang::tidy::google::build::ExplicitMakePairCheck
   inherits from clang::tidy::ClangTidyCheck
   function check(const ast_matchers::MatchFinder::MatchResult &) in line 31
      protection public
      27 lines of code
      1 parameters
      3 conditional paths
      uses variable Result defined in USRFinder.cpp
   function registerMatchers(ast_matchers::MatchFinder *) in line 30
      protection public
      11 lines of code
      1 parameters
      1 conditional paths
      uses variable Finder defined in ClangTidy.cpp
   function ExplicitMakePairCheck(StringRef,ClangTidyContext *) in line 28
      protection public
      2 lines of code
      2 parameters
      1 conditional paths
      uses function registerMatchers(ast_matchers::MatchFinder *) defined in clang::tidy::google::build::ExplicitMakePairCheck
      uses variable Finder defined in ClangTidy.cpp
      uses function check(const ast_matchers::MatchFinder::MatchResult &) defined in clang::tidy::google::build::ExplicitMakePairCheck
      uses variable Result defined in USRFinder.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-tidy/google/GlobalNamesInHeadersCheck.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-tidy/google/GlobalNamesInHeadersCheck.h
module clang::tidy::google::readability::GlobalNamesInHeadersCheck
   inherits from clang::tidy::ClangTidyCheck
   function check(const ast_matchers::MatchFinder::MatchResult &) in line 27
      protection public
      30 lines of code
      1 parameters
      6 conditional paths
      uses variable Result defined in USRFinder.cpp
      uses variable Filename defined in IncludeOrderCheck.cpp
   function registerMatchers(ast_matchers::MatchFinder *) in line 26
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses variable Finder defined in ClangTidy.cpp
   function GlobalNamesInHeadersCheck(StringRef,ClangTidyContext *) in line 24
      protection public
      2 lines of code
      2 parameters
      1 conditional paths
      uses function registerMatchers(ast_matchers::MatchFinder *) defined in clang::tidy::google::readability::GlobalNamesInHeadersCheck
      uses variable Finder defined in ClangTidy.cpp
      uses function check(const ast_matchers::MatchFinder::MatchResult &) defined in clang::tidy::google::readability::GlobalNamesInHeadersCheck
      uses variable Result defined in USRFinder.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-tidy/google/GoogleTidyModule.cpp
module GoogleTidyModule.cpp
   variable GoogleModuleAnchorSource in line 93
      protection public
   function X("google-module","Adds Google lint checks.") in line 86
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
module clang::tidy::google::GoogleModule
   inherits from clang::tidy::ClangTidyModule
   function addCheckFactories(ClangTidyCheckFactories &) in line 37
      protection public
      35 lines of code
      1 parameters
      1 conditional paths
      uses function registerCheck(StringRef) defined in clang::tidy::ClangTidyCheckFactories
   function getModuleOptions() in line 73
      protection public
      10 lines of code
      0 parameters
      1 conditional paths
      uses variable CheckOptions defined in clang::tidy::ClangTidyOptions
      uses function X("google-module","Adds Google lint checks.") defined in GoogleTidyModule.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-tidy/google/IntegerTypesCheck.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-tidy/google/IntegerTypesCheck.h
module clang::tidy::google::runtime::IntegerTypesCheck
   inherits from clang::tidy::ClangTidyCheck
   function check(const ast_matchers::MatchFinder::MatchResult &) in line 29
      protection public
      71 lines of code
      1 parameters
      12 conditional paths
      uses variable Result defined in USRFinder.cpp
      uses variable Loc defined in IncludeOrderCheck.cpp
   function registerMatchers(ast_matchers::MatchFinder *) in line 28
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable Finder defined in ClangTidy.cpp
   function IntegerTypesCheck(StringRef,ClangTidyContext *) in line 25
      protection public
      3 lines of code
      2 parameters
      1 conditional paths
      uses function registerMatchers(ast_matchers::MatchFinder *) defined in clang::tidy::google::runtime::IntegerTypesCheck
      uses variable Finder defined in ClangTidy.cpp
      uses function check(const ast_matchers::MatchFinder::MatchResult &) defined in clang::tidy::google::runtime::IntegerTypesCheck
      uses variable Result defined in USRFinder.cpp
   variable AddUnderscoreT in line 34
   variable SignedTypePrefix in line 33
   variable UnsignedTypePrefix in line 32
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-tidy/google/MemsetZeroLengthCheck.cpp
module MemsetZeroLengthCheck.cpp
   function getAsString(const MatchFinder::MatchResult &,SourceRange) in line 35
      protection public
      15 lines of code
      2 parameters
      2 conditional paths
      uses variable SM defined in IncludeOrderCheck.cpp
      uses variable Result defined in USRFinder.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-tidy/google/MemsetZeroLengthCheck.h
module clang::tidy::google::runtime::MemsetZeroLengthCheck
   inherits from clang::tidy::ClangTidyCheck
   function check(const ast_matchers::MatchFinder::MatchResult &) in line 31
      protection public
      36 lines of code
      1 parameters
      4 conditional paths
      uses variable Result defined in USRFinder.cpp
   function registerMatchers(ast_matchers::MatchFinder *) in line 30
      protection public
      9 lines of code
      1 parameters
      1 conditional paths
      uses variable Finder defined in ClangTidy.cpp
   function MemsetZeroLengthCheck(StringRef,ClangTidyContext *) in line 28
      protection public
      2 lines of code
      2 parameters
      1 conditional paths
      uses function registerMatchers(ast_matchers::MatchFinder *) defined in clang::tidy::google::runtime::MemsetZeroLengthCheck
      uses variable Finder defined in ClangTidy.cpp
      uses function check(const ast_matchers::MatchFinder::MatchResult &) defined in clang::tidy::google::runtime::MemsetZeroLengthCheck
      uses variable Result defined in USRFinder.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-tidy/google/OverloadedUnaryAndCheck.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-tidy/google/OverloadedUnaryAndCheck.h
module clang::tidy::google::runtime::OverloadedUnaryAndCheck
   inherits from clang::tidy::ClangTidyCheck
   function check(const ast_matchers::MatchFinder::MatchResult &) in line 29
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable Result defined in USRFinder.cpp
   function registerMatchers(ast_matchers::MatchFinder *) in line 28
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
      uses variable Finder defined in ClangTidy.cpp
   function OverloadedUnaryAndCheck(StringRef,ClangTidyContext *) in line 26
      protection public
      2 lines of code
      2 parameters
      1 conditional paths
      uses function registerMatchers(ast_matchers::MatchFinder *) defined in clang::tidy::google::runtime::OverloadedUnaryAndCheck
      uses variable Finder defined in ClangTidy.cpp
      uses function check(const ast_matchers::MatchFinder::MatchResult &) defined in clang::tidy::google::runtime::OverloadedUnaryAndCheck
      uses variable Result defined in USRFinder.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-tidy/google/StringReferenceMemberCheck.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-tidy/google/StringReferenceMemberCheck.h
module clang::tidy::google::runtime::StringReferenceMemberCheck
   inherits from clang::tidy::ClangTidyCheck
   function check(const ast_matchers::MatchFinder::MatchResult &) in line 46
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses variable Result defined in USRFinder.cpp
   function registerMatchers(ast_matchers::MatchFinder *) in line 45
      protection public
      12 lines of code
      1 parameters
      1 conditional paths
      uses variable Finder defined in ClangTidy.cpp
   function StringReferenceMemberCheck(StringRef,ClangTidyContext *) in line 43
      protection public
      2 lines of code
      2 parameters
      1 conditional paths
      uses function registerMatchers(ast_matchers::MatchFinder *) defined in clang::tidy::google::runtime::StringReferenceMemberCheck
      uses variable Finder defined in ClangTidy.cpp
      uses function check(const ast_matchers::MatchFinder::MatchResult &) defined in clang::tidy::google::runtime::StringReferenceMemberCheck
      uses variable Result defined in USRFinder.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-tidy/google/TodoCommentCheck.cpp
module clang::tidy::google::readability::TodoCommentCheck::TodoCommentHandler
   inherits from CommentHandler
   function HandleComment(Preprocessor &,SourceRange) in line 25
      protection public
      22 lines of code
      2 parameters
      3 conditional paths
      uses variable Range defined in IncludeOrderCheck.cpp
      uses variable PP defined in MacroParenthesesCheck.cpp
      uses variable TodoMatch defined in clang::tidy::google::readability::TodoCommentCheck::TodoCommentHandler
      uses variable User defined in clang::tidy::google::readability::TodoCommentCheck::TodoCommentHandler
      uses variable Check defined in clang::tidy::google::readability::TodoCommentCheck::TodoCommentHandler
      uses function diag(SourceLocation,StringRef,DiagnosticIDs::Level) defined in clang::tidy::ClangTidyCheck
   function TodoCommentHandler(TodoCommentCheck &,llvm::Optional< std::string >) in line 21
      protection public
      3 lines of code
      2 parameters
      1 conditional paths
   variable Check in line 49
   variable TodoMatch in line 51
   variable User in line 50
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-tidy/google/TodoCommentCheck.h
module clang::tidy::google::readability::TodoCommentCheck
   inherits from clang::tidy::ClangTidyCheck
   function registerPPCallbacks(CompilerInstance &) in line 26
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
      uses variable Handler defined in clang::tidy::google::readability::TodoCommentCheck
   function TodoCommentCheck(StringRef,ClangTidyContext *) in line 25
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   variable Handler in line 30
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-tidy/google/UnnamedNamespaceInHeaderCheck.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-tidy/google/UnnamedNamespaceInHeaderCheck.h
module clang::tidy::google::build::UnnamedNamespaceInHeaderCheck
   inherits from clang::tidy::ClangTidyCheck
   function check(const ast_matchers::MatchFinder::MatchResult &) in line 29
      protection public
      14 lines of code
      1 parameters
      3 conditional paths
      uses variable SM defined in IncludeOrderCheck.cpp
      uses variable Result defined in USRFinder.cpp
      uses variable Loc defined in IncludeOrderCheck.cpp
   function registerMatchers(ast_matchers::MatchFinder *) in line 28
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable Finder defined in ClangTidy.cpp
   function UnnamedNamespaceInHeaderCheck(StringRef,ClangTidyContext *) in line 26
      protection public
      2 lines of code
      2 parameters
      1 conditional paths
      uses function registerMatchers(ast_matchers::MatchFinder *) defined in clang::tidy::google::build::UnnamedNamespaceInHeaderCheck
      uses variable Finder defined in ClangTidy.cpp
      uses function check(const ast_matchers::MatchFinder::MatchResult &) defined in clang::tidy::google::build::UnnamedNamespaceInHeaderCheck
      uses variable Result defined in USRFinder.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-tidy/google/UsingNamespaceDirectiveCheck.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-tidy/google/UsingNamespaceDirectiveCheck.h
module clang::tidy::google::build::UsingNamespaceDirectiveCheck
   inherits from clang::tidy::ClangTidyCheck
   function check(const ast_matchers::MatchFinder::MatchResult &) in line 29
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses variable Result defined in USRFinder.cpp
      uses variable Loc defined in IncludeOrderCheck.cpp
   function registerMatchers(ast_matchers::MatchFinder *) in line 28
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable Finder defined in ClangTidy.cpp
   function UsingNamespaceDirectiveCheck(StringRef,ClangTidyContext *) in line 26
      protection public
      2 lines of code
      2 parameters
      1 conditional paths
      uses function registerMatchers(ast_matchers::MatchFinder *) defined in clang::tidy::google::build::UsingNamespaceDirectiveCheck
      uses variable Finder defined in ClangTidy.cpp
      uses function check(const ast_matchers::MatchFinder::MatchResult &) defined in clang::tidy::google::build::UsingNamespaceDirectiveCheck
      uses variable Result defined in USRFinder.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-tidy/llvm/HeaderGuardCheck.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-tidy/llvm/HeaderGuardCheck.h
module clang::tidy::llvm::LLVMHeaderGuardCheck
   inherits from clang::tidy::HeaderGuardCheck
   function getHeaderGuard(StringRef,StringRef) in line 26
      protection public
      32 lines of code
      2 parameters
      5 conditional paths
      uses variable Filename defined in IncludeOrderCheck.cpp
      uses function strlen(const char *) defined in misc-static-assert.cpp
   function shouldFixHeaderGuard(StringRef) in line 25
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
      uses variable Filename defined in IncludeOrderCheck.cpp
   function shouldSuggestEndifComment(StringRef) in line 24
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses function shouldFixHeaderGuard(StringRef) defined in clang::tidy::llvm::LLVMHeaderGuardCheck
      uses variable Filename defined in IncludeOrderCheck.cpp
      uses function getHeaderGuard(StringRef,StringRef) defined in clang::tidy::llvm::LLVMHeaderGuardCheck
   function LLVMHeaderGuardCheck(StringRef,ClangTidyContext *) in line 22
      protection public
      2 lines of code
      2 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-tidy/llvm/IncludeOrderCheck.cpp
module IncludeOrderCheck.cpp
   variable Loc in line 34
      protection public
   variable Range in line 35
      protection public
   variable Filename in line 36
      protection public
   variable IsAngled in line 37
      protection public
   variable IsMainModule in line 38
      protection public
   variable IncludeDirectives in line 40
   variable LookForMainModule in line 41
   variable Check in line 43
   variable SM in line 44
   function getPriority(StringRef,bool,bool) in line 54
      protection public
      17 lines of code
      3 parameters
      16 conditional paths
      uses variable IsMainModule defined in IncludeOrderCheck.cpp
      uses variable Filename defined in IncludeOrderCheck.cpp
      uses variable IsAngled defined in IncludeOrderCheck.cpp
      uses variable File defined in PreprocessorTracker.cpp
      uses variable LookForMainModule defined in IncludeOrderCheck.cpp
      uses variable SM defined in IncludeOrderCheck.cpp
      uses variable Loc defined in IncludeOrderCheck.cpp
      uses function size() defined in std::vector
      uses function begin() defined in std::vector
      uses variable Check defined in IncludeOrderCheck.cpp
module clang::tidy::llvm::@107::IncludeOrderPPCallbacks
   variable Check in line 43
   variable IncludeDirectives in line 40
   variable LookForMainModule in line 41
   variable SM in line 44
module clang::tidy::llvm::@107::IncludeOrderPPCallbacks::IncludeDirective
   variable Filename in line 36
      protection public
   variable IsAngled in line 37
      protection public
   variable IsMainModule in line 38
      protection public
   variable Loc in line 34
      protection public
   variable Range in line 35
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-tidy/llvm/IncludeOrderCheck.h
module clang::tidy::llvm::IncludeOrderCheck
   inherits from clang::tidy::ClangTidyCheck
   function registerPPCallbacks(CompilerInstance &) in line 26
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
   function IncludeOrderCheck(StringRef,ClangTidyContext *) in line 24
      protection public
      2 lines of code
      2 parameters
      1 conditional paths
      uses function registerPPCallbacks(CompilerInstance &) defined in clang::tidy::llvm::IncludeOrderCheck
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-tidy/llvm/LLVMTidyModule.cpp
module LLVMTidyModule.cpp
   variable LLVMModuleAnchorSource in line 41
      protection public
   function X("llvm-module","Adds LLVM lint checks.") in line 34
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
module clang::tidy::llvm::LLVMModule
   inherits from clang::tidy::ClangTidyModule
   function addCheckFactories(ClangTidyCheckFactories &) in line 24
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses function registerCheck(StringRef) defined in clang::tidy::ClangTidyCheckFactories
      uses function X("llvm-module","Adds LLVM lint checks.") defined in LLVMTidyModule.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-tidy/llvm/TwineLocalCheck.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-tidy/llvm/TwineLocalCheck.h
module clang::tidy::llvm::TwineLocalCheck
   inherits from clang::tidy::ClangTidyCheck
   function check(const ast_matchers::MatchFinder::MatchResult &) in line 26
      protection public
      33 lines of code
      1 parameters
      4 conditional paths
      uses variable Result defined in USRFinder.cpp
   function registerMatchers(ast_matchers::MatchFinder *) in line 25
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable Finder defined in ClangTidy.cpp
   function TwineLocalCheck(StringRef,ClangTidyContext *) in line 23
      protection public
      2 lines of code
      2 parameters
      1 conditional paths
      uses function registerMatchers(ast_matchers::MatchFinder *) defined in clang::tidy::llvm::TwineLocalCheck
      uses variable Finder defined in ClangTidy.cpp
      uses function check(const ast_matchers::MatchFinder::MatchResult &) defined in clang::tidy::llvm::TwineLocalCheck
      uses variable Result defined in USRFinder.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-tidy/misc/ArgumentCommentCheck.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-tidy/misc/ArgumentCommentCheck.h
module clang::tidy::misc::ArgumentCommentCheck
   inherits from clang::tidy::ClangTidyCheck
   function check(const ast_matchers::MatchFinder::MatchResult &) in line 26
      protection public
      17 lines of code
      1 parameters
      3 conditional paths
      uses variable Result defined in USRFinder.cpp
      uses function checkCallArgs(ASTContext *,const FunctionDecl *,SourceLocation,llvm::ArrayRef< const Expr * >) defined in clang::tidy::misc::ArgumentCommentCheck
   function checkCallArgs(ASTContext *,const FunctionDecl *,SourceLocation,llvm::ArrayRef< const Expr * >) in line 35
      53 lines of code
      4 parameters
      11 conditional paths
      uses variable i defined in pp-trace-macro.cpp
      uses function getCommentsInRange(ASTContext *,SourceRange) defined in clang::tidy::misc::ArgumentCommentCheck
      uses variable IdentRE defined in clang::tidy::misc::ArgumentCommentCheck
      uses function diag(SourceLocation,StringRef,DiagnosticIDs::Level) defined in clang::tidy::ClangTidyCheck
      uses function isLikelyTypo(llvm::ArrayRef< ParmVarDecl * >,StringRef,unsigned) defined in clang::tidy::misc::ArgumentCommentCheck
   function getCommentsInRange(ASTContext *,SourceRange) in line 34
      39 lines of code
      2 parameters
      7 conditional paths
      uses variable SM defined in IncludeOrderCheck.cpp
      uses variable Range defined in IncludeOrderCheck.cpp
      uses macro definition assert defined in misc-assert-side-effect.cpp
   function isLikelyTypo(llvm::ArrayRef< ParmVarDecl * >,StringRef,unsigned) in line 31
      30 lines of code
      3 parameters
      6 conditional paths
   function registerMatchers(ast_matchers::MatchFinder *) in line 25
      protection public
      12 lines of code
      1 parameters
      1 conditional paths
      uses variable Finder defined in ClangTidy.cpp
   function ArgumentCommentCheck(StringRef,ClangTidyContext *) in line 23
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   variable IdentRE in line 29
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-tidy/misc/AssertSideEffectCheck.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-tidy/misc/AssertSideEffectCheck.h
module clang::tidy::AssertSideEffectCheck
   inherits from clang::tidy::ClangTidyCheck
   function check(const ast_matchers::MatchFinder::MatchResult &) in line 39
      protection public
      18 lines of code
      1 parameters
      3 conditional paths
      uses variable Result defined in USRFinder.cpp
      uses variable Loc defined in IncludeOrderCheck.cpp
      uses function find(FwIt,FwIt,const K &) defined in misc-inefficient-algorithm.cpp
      uses variable AssertMacros defined in clang::tidy::AssertSideEffectCheck
      uses function diag(SourceLocation,StringRef,DiagnosticIDs::Level) defined in clang::tidy::ClangTidyCheck
   function registerMatchers(ast_matchers::MatchFinder *) in line 38
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses variable CheckFunctionCalls defined in clang::tidy::AssertSideEffectCheck
      uses variable Finder defined in ClangTidy.cpp
   function storeOptions(ClangTidyOptions::OptionMap &) in line 37
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable Options defined in clang::tidy::ClangTidyCheck
      uses function store(ClangTidyOptions::OptionMap &,StringRef,StringRef) defined in clang::tidy::OptionsView
      uses variable CheckFunctionCalls defined in clang::tidy::AssertSideEffectCheck
      uses variable RawAssertList defined in clang::tidy::AssertSideEffectCheck
   function AssertSideEffectCheck(StringRef,ClangTidyContext *) in line 36
      protection public
      7 lines of code
      2 parameters
      1 conditional paths
      uses variable RawAssertList defined in clang::tidy::AssertSideEffectCheck
      uses variable AssertMacros defined in clang::tidy::AssertSideEffectCheck
   variable AssertMacros in line 44
   variable CheckFunctionCalls in line 42
   variable RawAssertList in line 43
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-tidy/misc/AssignOperatorSignatureCheck.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-tidy/misc/AssignOperatorSignatureCheck.h
module clang::tidy::misc::AssignOperatorSignatureCheck
   inherits from clang::tidy::ClangTidyCheck
   function check(const ast_matchers::MatchFinder::MatchResult &) in line 30
      protection public
      16 lines of code
      1 parameters
      3 conditional paths
      uses function Method(char *) defined in readability-named-parameter.cpp
      uses variable Result defined in USRFinder.cpp
      uses variable Name defined in PreprocessorTracker.cpp
   function registerMatchers(ast_matchers::MatchFinder *) in line 29
      protection public
      28 lines of code
      1 parameters
      1 conditional paths
      uses variable Finder defined in ClangTidy.cpp
   function AssignOperatorSignatureCheck(StringRef,ClangTidyContext *) in line 27
      protection public
      2 lines of code
      2 parameters
      1 conditional paths
      uses function registerMatchers(ast_matchers::MatchFinder *) defined in clang::tidy::misc::AssignOperatorSignatureCheck
      uses variable Finder defined in ClangTidy.cpp
      uses function check(const ast_matchers::MatchFinder::MatchResult &) defined in clang::tidy::misc::AssignOperatorSignatureCheck
      uses variable Result defined in USRFinder.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-tidy/misc/BoolPointerImplicitConversionCheck.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-tidy/misc/BoolPointerImplicitConversionCheck.h
module clang::tidy::misc::BoolPointerImplicitConversionCheck
   inherits from clang::tidy::ClangTidyCheck
   function check(const ast_matchers::MatchFinder::MatchResult &) in line 30
      protection public
      33 lines of code
      1 parameters
      3 conditional paths
      uses variable Result defined in USRFinder.cpp
   function registerMatchers(ast_matchers::MatchFinder *) in line 29
      protection public
      13 lines of code
      1 parameters
      1 conditional paths
      uses variable Finder defined in ClangTidy.cpp
   function BoolPointerImplicitConversionCheck(StringRef,ClangTidyContext *) in line 27
      protection public
      2 lines of code
      2 parameters
      1 conditional paths
      uses function registerMatchers(ast_matchers::MatchFinder *) defined in clang::tidy::misc::BoolPointerImplicitConversionCheck
      uses variable Finder defined in ClangTidy.cpp
      uses function check(const ast_matchers::MatchFinder::MatchResult &) defined in clang::tidy::misc::BoolPointerImplicitConversionCheck
      uses variable Result defined in USRFinder.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-tidy/misc/InaccurateEraseCheck.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-tidy/misc/InaccurateEraseCheck.h
module clang::tidy::misc::InaccurateEraseCheck
   inherits from clang::tidy::ClangTidyCheck
   function check(const ast_matchers::MatchFinder::MatchResult &) in line 31
      protection public
      24 lines of code
      1 parameters
      2 conditional paths
      uses variable Result defined in USRFinder.cpp
      uses variable Loc defined in IncludeOrderCheck.cpp
   function registerMatchers(ast_matchers::MatchFinder *) in line 30
      protection public
      17 lines of code
      1 parameters
      1 conditional paths
      uses variable Finder defined in ClangTidy.cpp
   function InaccurateEraseCheck(StringRef,ClangTidyContext *) in line 28
      protection public
      2 lines of code
      2 parameters
      1 conditional paths
      uses function registerMatchers(ast_matchers::MatchFinder *) defined in clang::tidy::misc::InaccurateEraseCheck
      uses variable Finder defined in ClangTidy.cpp
      uses function check(const ast_matchers::MatchFinder::MatchResult &) defined in clang::tidy::misc::InaccurateEraseCheck
      uses variable Result defined in USRFinder.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-tidy/misc/InefficientAlgorithmCheck.cpp
module InefficientAlgorithmCheck.cpp
   function areTypesCompatible(QualType,QualType) in line 21
      protection public
      8 lines of code
      2 parameters
      3 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-tidy/misc/InefficientAlgorithmCheck.h
module clang::tidy::misc::InefficientAlgorithmCheck
   inherits from clang::tidy::ClangTidyCheck
   function check(const ast_matchers::MatchFinder::MatchResult &) in line 29
      protection public
      69 lines of code
      1 parameters
      7 conditional paths
      uses variable Result defined in USRFinder.cpp
   function registerMatchers(ast_matchers::MatchFinder *) in line 28
      protection public
      26 lines of code
      1 parameters
      1 conditional paths
      uses variable Finder defined in ClangTidy.cpp
   function InefficientAlgorithmCheck(StringRef,ClangTidyContext *) in line 26
      protection public
      2 lines of code
      2 parameters
      1 conditional paths
      uses function registerMatchers(ast_matchers::MatchFinder *) defined in clang::tidy::misc::InefficientAlgorithmCheck
      uses variable Finder defined in ClangTidy.cpp
      uses function check(const ast_matchers::MatchFinder::MatchResult &) defined in clang::tidy::misc::InefficientAlgorithmCheck
      uses variable Result defined in USRFinder.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-tidy/misc/MacroParenthesesCheck.cpp
module MacroParenthesesCheck.cpp
   variable PP in line 38
   variable Check in line 39
   function isSurroundedLeft(const Token &) in line 44
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function isSurroundedRight(const Token &) in line 50
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function isKeyword(const Token &) in line 56
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function isWarnOp(const Token &) in line 62
      protection public
      6 lines of code
      1 parameters
      26 conditional paths
      uses variable Loc defined in IncludeOrderCheck.cpp
      uses function isKeyword(const Token &) defined in MacroParenthesesCheck.cpp
      uses variable Check defined in MacroParenthesesCheck.cpp
      uses variable PP defined in MacroParenthesesCheck.cpp
      uses function isSurroundedLeft(const Token &) defined in MacroParenthesesCheck.cpp
      uses function isSurroundedRight(const Token &) defined in MacroParenthesesCheck.cpp
module clang::tidy::@124::MacroParenthesesPPCallbacks
   variable Check in line 39
   variable PP in line 38
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-tidy/misc/MacroParenthesesCheck.h
module clang::tidy::MacroParenthesesCheck
   inherits from clang::tidy::ClangTidyCheck
   function registerPPCallbacks(CompilerInstance &) in line 36
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
   function MacroParenthesesCheck(StringRef,ClangTidyContext *) in line 34
      protection public
      2 lines of code
      2 parameters
      1 conditional paths
      uses function registerPPCallbacks(CompilerInstance &) defined in clang::tidy::MacroParenthesesCheck
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-tidy/misc/MacroRepeatedSideEffectsCheck.cpp
module MacroRepeatedSideEffectsCheck.cpp
   variable Check in line 30
   variable PP in line 31
module clang::tidy::misc::@126::MacroRepeatedPPCallbacks
   variable Check in line 30
   variable PP in line 31
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-tidy/misc/MacroRepeatedSideEffectsCheck.h
module clang::tidy::misc::MacroRepeatedSideEffectsCheck
   inherits from clang::tidy::ClangTidyCheck
   function registerPPCallbacks(CompilerInstance &) in line 25
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function MacroRepeatedSideEffectsCheck(StringRef,ClangTidyContext *) in line 23
      protection public
      2 lines of code
      2 parameters
      1 conditional paths
      uses function registerPPCallbacks(CompilerInstance &) defined in clang::tidy::misc::MacroRepeatedSideEffectsCheck
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-tidy/misc/MiscTidyModule.cpp
module MiscTidyModule.cpp
   variable MiscModuleAnchorSource in line 74
      protection public
   function X("misc-module","Adds miscellaneous lint checks.") in line 70
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
module clang::tidy::misc::MiscModule
   inherits from clang::tidy::ClangTidyModule
   function addCheckFactories(ClangTidyCheckFactories &) in line 35
      protection public
      29 lines of code
      1 parameters
      1 conditional paths
      uses function registerCheck(StringRef) defined in clang::tidy::ClangTidyCheckFactories
      uses function X("misc-module","Adds miscellaneous lint checks.") defined in MiscTidyModule.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-tidy/misc/NoexceptMoveConstructorCheck.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-tidy/misc/NoexceptMoveConstructorCheck.h
module clang::tidy::NoexceptMoveConstructorCheck
   inherits from clang::tidy::ClangTidyCheck
   function check(const ast_matchers::MatchFinder::MatchResult &) in line 30
      protection public
      37 lines of code
      1 parameters
      12 conditional paths
      uses variable Result defined in USRFinder.cpp
   function registerMatchers(ast_matchers::MatchFinder *) in line 29
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses variable Finder defined in ClangTidy.cpp
   function NoexceptMoveConstructorCheck(StringRef,ClangTidyContext *) in line 27
      protection public
      2 lines of code
      2 parameters
      1 conditional paths
      uses function registerMatchers(ast_matchers::MatchFinder *) defined in clang::tidy::NoexceptMoveConstructorCheck
      uses variable Finder defined in ClangTidy.cpp
      uses function check(const ast_matchers::MatchFinder::MatchResult &) defined in clang::tidy::NoexceptMoveConstructorCheck
      uses variable Result defined in USRFinder.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-tidy/misc/StaticAssertCheck.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-tidy/misc/StaticAssertCheck.h
module clang::tidy::StaticAssertCheck
   inherits from clang::tidy::ClangTidyCheck
   function check(const ast_matchers::MatchFinder::MatchResult &) in line 29
      protection public
      64 lines of code
      1 parameters
      8 conditional paths
      uses variable Result defined in USRFinder.cpp
      uses variable SM defined in IncludeOrderCheck.cpp
      uses function getLastParenLoc(const ASTContext *,SourceLocation) defined in clang::tidy::StaticAssertCheck
      uses function diag(SourceLocation,StringRef,DiagnosticIDs::Level) defined in clang::tidy::ClangTidyCheck
   function getLastParenLoc(const ASTContext *,SourceLocation) in line 32
      30 lines of code
      2 parameters
      6 conditional paths
      uses variable SM defined in IncludeOrderCheck.cpp
   function registerMatchers(ast_matchers::MatchFinder *) in line 28
      protection public
      30 lines of code
      1 parameters
      1 conditional paths
      uses variable Finder defined in ClangTidy.cpp
   function StaticAssertCheck(StringRef,ClangTidyContext *) in line 27
      protection public
      2 lines of code
      2 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-tidy/misc/SwappedArgumentsCheck.cpp
module SwappedArgumentsCheck.cpp
   function ignoreNoOpCasts(const Expr *) in line 28
      protection public
      7 lines of code
      1 parameters
      3 conditional paths
   function isImplicitCastCandidate(const CastExpr *) in line 39
      protection public
      9 lines of code
      1 parameters
      1 conditional paths
   function getAsString(const MatchFinder::MatchResult &,SourceRange) in line 50
      protection public
      15 lines of code
      2 parameters
      2 conditional paths
      uses variable SM defined in IncludeOrderCheck.cpp
      uses variable Result defined in USRFinder.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-tidy/misc/SwappedArgumentsCheck.h
module clang::tidy::misc::SwappedArgumentsCheck
   inherits from clang::tidy::ClangTidyCheck
   function check(const ast_matchers::MatchFinder::MatchResult &) in line 26
      protection public
      58 lines of code
      1 parameters
      6 conditional paths
      uses variable Result defined in USRFinder.cpp
   function registerMatchers(ast_matchers::MatchFinder *) in line 25
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
      uses variable Finder defined in ClangTidy.cpp
   function SwappedArgumentsCheck(StringRef,ClangTidyContext *) in line 23
      protection public
      2 lines of code
      2 parameters
      1 conditional paths
      uses function registerMatchers(ast_matchers::MatchFinder *) defined in clang::tidy::misc::SwappedArgumentsCheck
      uses variable Finder defined in ClangTidy.cpp
      uses function check(const ast_matchers::MatchFinder::MatchResult &) defined in clang::tidy::misc::SwappedArgumentsCheck
      uses variable Result defined in USRFinder.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-tidy/misc/UndelegatedConstructor.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-tidy/misc/UndelegatedConstructor.h
module clang::tidy::misc::UndelegatedConstructorCheck
   inherits from clang::tidy::ClangTidyCheck
   function check(const ast_matchers::MatchFinder::MatchResult &) in line 27
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable Result defined in USRFinder.cpp
   function registerMatchers(ast_matchers::MatchFinder *) in line 26
      protection public
      16 lines of code
      1 parameters
      1 conditional paths
      uses variable Finder defined in ClangTidy.cpp
   function UndelegatedConstructorCheck(StringRef,ClangTidyContext *) in line 24
      protection public
      2 lines of code
      2 parameters
      1 conditional paths
      uses function registerMatchers(ast_matchers::MatchFinder *) defined in clang::tidy::misc::UndelegatedConstructorCheck
      uses variable Finder defined in ClangTidy.cpp
      uses function check(const ast_matchers::MatchFinder::MatchResult &) defined in clang::tidy::misc::UndelegatedConstructorCheck
      uses variable Result defined in USRFinder.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-tidy/misc/UniqueptrResetReleaseCheck.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-tidy/misc/UniqueptrResetReleaseCheck.h
module clang::tidy::misc::UniqueptrResetReleaseCheck
   inherits from clang::tidy::ClangTidyCheck
   function check(const ast_matchers::MatchFinder::MatchResult &) in line 33
      protection public
      38 lines of code
      1 parameters
      5 conditional paths
      uses variable Result defined in USRFinder.cpp
   function registerMatchers(ast_matchers::MatchFinder *) in line 32
      protection public
      17 lines of code
      1 parameters
      7 conditional paths
      uses variable Finder defined in ClangTidy.cpp
      uses variable Result defined in USRFinder.cpp
   function UniqueptrResetReleaseCheck(StringRef,ClangTidyContext *) in line 29
      protection public
      2 lines of code
      2 parameters
      1 conditional paths
      uses function registerMatchers(ast_matchers::MatchFinder *) defined in clang::tidy::misc::UniqueptrResetReleaseCheck
      uses variable Finder defined in ClangTidy.cpp
      uses function check(const ast_matchers::MatchFinder::MatchResult &) defined in clang::tidy::misc::UniqueptrResetReleaseCheck
      uses variable Result defined in USRFinder.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-tidy/misc/UnusedRAIICheck.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-tidy/misc/UnusedRAIICheck.h
module clang::tidy::misc::UnusedRAIICheck
   inherits from clang::tidy::ClangTidyCheck
   function check(const ast_matchers::MatchFinder::MatchResult &) in line 44
      protection public
      41 lines of code
      1 parameters
      5 conditional paths
      uses variable Result defined in USRFinder.cpp
   function registerMatchers(ast_matchers::MatchFinder *) in line 43
      protection public
      13 lines of code
      1 parameters
      1 conditional paths
      uses variable Finder defined in ClangTidy.cpp
   function UnusedRAIICheck(StringRef,ClangTidyContext *) in line 41
      protection public
      2 lines of code
      2 parameters
      1 conditional paths
      uses function registerMatchers(ast_matchers::MatchFinder *) defined in clang::tidy::misc::UnusedRAIICheck
      uses variable Finder defined in ClangTidy.cpp
      uses function check(const ast_matchers::MatchFinder::MatchResult &) defined in clang::tidy::misc::UnusedRAIICheck
      uses variable Result defined in USRFinder.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-tidy/misc/UseOverrideCheck.cpp
module UseOverrideCheck.cpp
   function ParseTokens(CharSourceRange,const MatchFinder::MatchResult &) in line 28
      protection public
      26 lines of code
      2 parameters
      5 conditional paths
      uses variable Result defined in USRFinder.cpp
      uses variable Range defined in IncludeOrderCheck.cpp
      uses variable File defined in PreprocessorTracker.cpp
   function GetText(const Token &,const SourceManager &) in line 55
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-tidy/misc/UseOverrideCheck.h
module clang::tidy::misc::UseOverrideCheck
   inherits from clang::tidy::ClangTidyCheck
   function check(const ast_matchers::MatchFinder::MatchResult &) in line 25
      protection public
      123 lines of code
      1 parameters
      24 conditional paths
      uses variable Result defined in USRFinder.cpp
      uses function Method(char *) defined in readability-named-parameter.cpp
      uses macro definition assert defined in misc-assert-side-effect.cpp
      uses variable Loc defined in IncludeOrderCheck.cpp
   function registerMatchers(ast_matchers::MatchFinder *) in line 24
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
      uses variable Finder defined in ClangTidy.cpp
   function UseOverrideCheck(StringRef,ClangTidyContext *) in line 22
      protection public
      2 lines of code
      2 parameters
      1 conditional paths
      uses function registerMatchers(ast_matchers::MatchFinder *) defined in clang::tidy::misc::UseOverrideCheck
      uses variable Finder defined in ClangTidy.cpp
      uses function check(const ast_matchers::MatchFinder::MatchResult &) defined in clang::tidy::misc::UseOverrideCheck
      uses variable Result defined in USRFinder.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-tidy/readability/BracesAroundStatementsCheck.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-tidy/readability/BracesAroundStatementsCheck.h
module clang::tidy::readability::BracesAroundStatementsCheck
   inherits from clang::tidy::ClangTidyCheck
   function check(const ast_matchers::MatchFinder::MatchResult &) in line 43
      protection public
      34 lines of code
      1 parameters
      11 conditional paths
      uses variable SM defined in IncludeOrderCheck.cpp
      uses variable Result defined in USRFinder.cpp
      uses variable Context defined in clang::tidy::ClangTidyCheck
      uses function checkStmt(const ast_matchers::MatchFinder::MatchResult &,const Stmt *,SourceLocation,SourceLocation) defined in clang::tidy::readability::BracesAroundStatementsCheck
      uses function findRParenLoc(const IfOrWhileStmt *,const SourceManager &,const ASTContext *) defined in clang::tidy::readability::BracesAroundStatementsCheck
      uses variable ForceBracesStmts defined in clang::tidy::readability::BracesAroundStatementsCheck
   function checkStmt(const ast_matchers::MatchFinder::MatchResult &,const Stmt *,SourceLocation,SourceLocation) in line 47
      52 lines of code
      4 parameters
      6 conditional paths
      uses variable SM defined in IncludeOrderCheck.cpp
      uses variable Result defined in USRFinder.cpp
      uses variable Context defined in clang::tidy::ClangTidyCheck
      uses macro definition assert defined in misc-assert-side-effect.cpp
      uses variable ShortStatementLines defined in clang::tidy::readability::BracesAroundStatementsCheck
      uses variable ForceBracesStmts defined in clang::tidy::readability::BracesAroundStatementsCheck
      uses function diag(SourceLocation,StringRef,DiagnosticIDs::Level) defined in clang::tidy::ClangTidyCheck
   function findRParenLoc(const IfOrWhileStmt *,const SourceManager &,const ASTContext *) in line 51
      33 lines of code
      3 parameters
      6 conditional paths
      uses macro definition assert defined in misc-assert-side-effect.cpp
      uses variable SM defined in IncludeOrderCheck.cpp
      uses variable Context defined in clang::tidy::ClangTidyCheck
      uses function diag(SourceLocation,StringRef,DiagnosticIDs::Level) defined in clang::tidy::ClangTidyCheck
   function onEndOfTranslationUnit() in line 44
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses variable ForceBracesStmts defined in clang::tidy::readability::BracesAroundStatementsCheck
   function registerMatchers(ast_matchers::MatchFinder *) in line 42
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses variable Finder defined in ClangTidy.cpp
   function storeOptions(ClangTidyOptions::OptionMap &) in line 41
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
      uses variable Options defined in clang::tidy::ClangTidyCheck
      uses function store(ClangTidyOptions::OptionMap &,StringRef,StringRef) defined in clang::tidy::OptionsView
      uses variable ShortStatementLines defined in clang::tidy::readability::BracesAroundStatementsCheck
   function BracesAroundStatementsCheck(StringRef,ClangTidyContext *) in line 40
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
   variable ForceBracesStmts in line 55
   variable ShortStatementLines in line 56
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-tidy/readability/ContainerSizeEmptyCheck.cpp
module ContainerSizeEmptyCheck.cpp
   function isContainer(llvm::StringRef) in line 17
      protection public
      22 lines of code
      1 parameters
      1 conditional paths
      uses function begin(const MyArray &) defined in free_begin_end_fail.cpp
      uses function end(const MyArray &) defined in free_begin_end_fail.cpp
      uses function AST_MATCHER(Decl,isFromStdNamespace) defined in CustomMatchers.h
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-tidy/readability/ContainerSizeEmptyCheck.h
module clang::tidy::readability::ContainerSizeEmptyCheck
   inherits from clang::tidy::ClangTidyCheck
   function check(const ast_matchers::MatchFinder::MatchResult &) in line 33
      protection public
      72 lines of code
      1 parameters
      12 conditional paths
      uses variable Result defined in USRFinder.cpp
      uses function diag(SourceLocation,StringRef,DiagnosticIDs::Level) defined in clang::tidy::ClangTidyCheck
   function registerMatchers(ast_matchers::MatchFinder *) in line 32
      protection public
      25 lines of code
      1 parameters
      1 conditional paths
      uses variable Finder defined in ClangTidy.cpp
   function ContainerSizeEmptyCheck(StringRef,ClangTidyContext *) in line 31
      protection public
      3 lines of code
      2 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-tidy/readability/ElseAfterReturnCheck.cpp
module ElseAfterReturnCheck.cpp
   function removeToken(SourceLocation) in line 31
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
      uses variable Loc defined in IncludeOrderCheck.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-tidy/readability/ElseAfterReturnCheck.h
module clang::tidy::readability::ElseAfterReturnCheck
   inherits from clang::tidy::ClangTidyCheck
   function check(const ast_matchers::MatchFinder::MatchResult &) in line 24
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses variable Result defined in USRFinder.cpp
   function registerMatchers(ast_matchers::MatchFinder *) in line 23
      protection public
      10 lines of code
      1 parameters
      1 conditional paths
      uses variable Finder defined in ClangTidy.cpp
   function ElseAfterReturnCheck(StringRef,ClangTidyContext *) in line 21
      protection public
      2 lines of code
      2 parameters
      1 conditional paths
      uses function registerMatchers(ast_matchers::MatchFinder *) defined in clang::tidy::readability::ElseAfterReturnCheck
      uses variable Finder defined in ClangTidy.cpp
      uses function check(const ast_matchers::MatchFinder::MatchResult &) defined in clang::tidy::readability::ElseAfterReturnCheck
      uses variable Result defined in USRFinder.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-tidy/readability/FunctionSizeCheck.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-tidy/readability/FunctionSizeCheck.h
module clang::tidy::readability::FunctionSizeCheck
   inherits from clang::tidy::ClangTidyCheck
   function check(const ast_matchers::MatchFinder::MatchResult &) in line 26
      protection public
      25 lines of code
      1 parameters
      5 conditional paths
      uses variable Result defined in USRFinder.cpp
      uses variable FunctionInfos defined in clang::tidy::readability::FunctionSizeCheck
      uses variable SM defined in IncludeOrderCheck.cpp
   function onEndOfTranslationUnit() in line 27
      protection public
      33 lines of code
      0 parameters
      6 conditional paths
      uses variable FunctionInfos defined in clang::tidy::readability::FunctionSizeCheck
      uses variable Lines defined in clang::tidy::readability::FunctionSizeCheck::FunctionInfo
      uses variable LineThreshold defined in clang::tidy::readability::FunctionSizeCheck
      uses variable Statements defined in clang::tidy::readability::FunctionSizeCheck::FunctionInfo
      uses variable StatementThreshold defined in clang::tidy::readability::FunctionSizeCheck
      uses variable Branches defined in clang::tidy::readability::FunctionSizeCheck::FunctionInfo
      uses variable BranchThreshold defined in clang::tidy::readability::FunctionSizeCheck
      uses function diag(SourceLocation,StringRef,DiagnosticIDs::Level) defined in clang::tidy::ClangTidyCheck
   function registerMatchers(ast_matchers::MatchFinder *) in line 25
      protection public
      12 lines of code
      1 parameters
      1 conditional paths
      uses variable Finder defined in ClangTidy.cpp
   function storeOptions(ClangTidyOptions::OptionMap &) in line 24
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable Options defined in clang::tidy::ClangTidyCheck
      uses function store(ClangTidyOptions::OptionMap &,StringRef,StringRef) defined in clang::tidy::OptionsView
      uses variable LineThreshold defined in clang::tidy::readability::FunctionSizeCheck
      uses variable StatementThreshold defined in clang::tidy::readability::FunctionSizeCheck
      uses variable BranchThreshold defined in clang::tidy::readability::FunctionSizeCheck
   function FunctionSizeCheck(StringRef,ClangTidyContext *) in line 22
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
   variable BranchThreshold in line 39
   variable FunctionInfos in line 41
   variable LineThreshold in line 37
   variable StatementThreshold in line 38
module clang::tidy::readability::FunctionSizeCheck::FunctionInfo
   function FunctionInfo() in line 31
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   variable Branches in line 34
      protection public
   variable Lines in line 32
      protection public
   variable Statements in line 33
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-tidy/readability/NamedParameterCheck.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-tidy/readability/NamedParameterCheck.h
module clang::tidy::readability::NamedParameterCheck
   inherits from clang::tidy::ClangTidyCheck
   function check(const ast_matchers::MatchFinder::MatchResult &) in line 34
      protection public
      97 lines of code
      1 parameters
      17 conditional paths
      uses variable SM defined in IncludeOrderCheck.cpp
      uses variable Result defined in USRFinder.cpp
      uses function make_pair(T1,T2) defined in google-explicit-make-pair.cpp
      uses variable Name defined in PreprocessorTracker.cpp
   function registerMatchers(ast_matchers::MatchFinder *) in line 33
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
      uses variable Finder defined in ClangTidy.cpp
   function NamedParameterCheck(StringRef,ClangTidyContext *) in line 31
      protection public
      2 lines of code
      2 parameters
      1 conditional paths
      uses function registerMatchers(ast_matchers::MatchFinder *) defined in clang::tidy::readability::NamedParameterCheck
      uses variable Finder defined in ClangTidy.cpp
      uses function check(const ast_matchers::MatchFinder::MatchResult &) defined in clang::tidy::readability::NamedParameterCheck
      uses variable Result defined in USRFinder.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-tidy/readability/NamespaceCommentCheck.cpp
module NamespaceCommentCheck.cpp
   function locationsInSameFile(const SourceManager &,SourceLocation,SourceLocation) in line 40
      protection public
      5 lines of code
      3 parameters
      1 conditional paths
   function getNamespaceComment(const NamespaceDecl *,bool) in line 46
      protection public
      9 lines of code
      2 parameters
      3 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-tidy/readability/NamespaceCommentCheck.h
module clang::tidy::readability::NamespaceCommentCheck
   inherits from clang::tidy::ClangTidyCheck
   function check(const ast_matchers::MatchFinder::MatchResult &) in line 28
      protection public
      83 lines of code
      1 parameters
      9 conditional paths
      uses variable Result defined in USRFinder.cpp
      uses variable ShortNamespaceLines defined in clang::tidy::readability::NamespaceCommentCheck
      uses variable Loc defined in IncludeOrderCheck.cpp
      uses variable NamespaceCommentPattern defined in clang::tidy::readability::NamespaceCommentCheck
      uses function diag(SourceLocation,StringRef,DiagnosticIDs::Level) defined in clang::tidy::ClangTidyCheck
      uses variable SpacesBeforeComments defined in clang::tidy::readability::NamespaceCommentCheck
   function registerMatchers(ast_matchers::MatchFinder *) in line 27
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
      uses variable Finder defined in ClangTidy.cpp
   function storeOptions(ClangTidyOptions::OptionMap &) in line 31
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable Options defined in clang::tidy::ClangTidyCheck
      uses function store(ClangTidyOptions::OptionMap &,StringRef,StringRef) defined in clang::tidy::OptionsView
      uses variable ShortNamespaceLines defined in clang::tidy::readability::NamespaceCommentCheck
      uses variable SpacesBeforeComments defined in clang::tidy::readability::NamespaceCommentCheck
   function NamespaceCommentCheck(StringRef,ClangTidyContext *) in line 26
      protection public
      8 lines of code
      2 parameters
      1 conditional paths
   variable NamespaceCommentPattern in line 33
   variable ShortNamespaceLines in line 34
   variable SpacesBeforeComments in line 35
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-tidy/readability/ReadabilityTidyModule.cpp
module ReadabilityTidyModule.cpp
   variable ReadabilityModuleAnchorSource in line 59
      protection public
   function X("readability-module","Adds readability-related checks.") in line 53
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
module clang::tidy::readability::ReadabilityModule
   inherits from clang::tidy::ClangTidyModule
   function addCheckFactories(ClangTidyCheckFactories &) in line 29
      protection public
      20 lines of code
      1 parameters
      1 conditional paths
      uses function registerCheck(StringRef) defined in clang::tidy::ClangTidyCheckFactories
      uses function X("readability-module","Adds readability-related checks.") defined in ReadabilityTidyModule.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-tidy/readability/RedundantSmartptrGetCheck.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-tidy/readability/RedundantSmartptrGetCheck.h
module clang::tidy::readability::RedundantSmartptrGetCheck
   inherits from clang::tidy::ClangTidyCheck
   function check(const ast_matchers::MatchFinder::MatchResult &) in line 30
      protection public
      21 lines of code
      1 parameters
      3 conditional paths
      uses variable Result defined in USRFinder.cpp
   function registerMatchers(ast_matchers::MatchFinder *) in line 29
      protection public
      4 lines of code
      1 parameters
      2 conditional paths
      uses variable Finder defined in ClangTidy.cpp
      uses variable Result defined in USRFinder.cpp
   function RedundantSmartptrGetCheck(StringRef,ClangTidyContext *) in line 27
      protection public
      2 lines of code
      2 parameters
      1 conditional paths
      uses function registerMatchers(ast_matchers::MatchFinder *) defined in clang::tidy::readability::RedundantSmartptrGetCheck
      uses variable Finder defined in ClangTidy.cpp
      uses function check(const ast_matchers::MatchFinder::MatchResult &) defined in clang::tidy::readability::RedundantSmartptrGetCheck
      uses variable Result defined in USRFinder.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-tidy/readability/RedundantStringCStrCheck.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-tidy/readability/RedundantStringCStrCheck.h
module clang::tidy::readability::RedundantStringCStrCheck
   inherits from clang::tidy::ClangTidyCheck
   function check(const ast_matchers::MatchFinder::MatchResult &) in line 25
      protection public
      14 lines of code
      1 parameters
      2 conditional paths
      uses variable Result defined in USRFinder.cpp
   function registerMatchers(ast_matchers::MatchFinder *) in line 24
      protection public
      39 lines of code
      1 parameters
      1 conditional paths
      uses variable Finder defined in ClangTidy.cpp
   function RedundantStringCStrCheck(StringRef,ClangTidyContext *) in line 22
      protection public
      2 lines of code
      2 parameters
      1 conditional paths
      uses function registerMatchers(ast_matchers::MatchFinder *) defined in clang::tidy::readability::RedundantStringCStrCheck
      uses variable Finder defined in ClangTidy.cpp
      uses function check(const ast_matchers::MatchFinder::MatchResult &) defined in clang::tidy::readability::RedundantStringCStrCheck
      uses variable Result defined in USRFinder.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-tidy/readability/ShrinkToFitCheck.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-tidy/readability/ShrinkToFitCheck.h
module clang::tidy::readability::ShrinkToFitCheck
   inherits from clang::tidy::ClangTidyCheck
   function check(const ast_matchers::MatchFinder::MatchResult &) in line 30
      protection public
      35 lines of code
      1 parameters
      4 conditional paths
      uses variable Result defined in USRFinder.cpp
   function registerMatchers(ast_matchers::MatchFinder *) in line 29
      protection public
      27 lines of code
      1 parameters
      1 conditional paths
      uses variable Finder defined in ClangTidy.cpp
   function ShrinkToFitCheck(StringRef,ClangTidyContext *) in line 27
      protection public
      2 lines of code
      2 parameters
      1 conditional paths
      uses function registerMatchers(ast_matchers::MatchFinder *) defined in clang::tidy::readability::ShrinkToFitCheck
      uses variable Finder defined in ClangTidy.cpp
      uses function check(const ast_matchers::MatchFinder::MatchResult &) defined in clang::tidy::readability::ShrinkToFitCheck
      uses variable Result defined in USRFinder.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-tidy/readability/SimplifyBooleanExprCheck.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-tidy/readability/SimplifyBooleanExprCheck.h
module clang::tidy::readability::SimplifyBooleanExprCheck
   inherits from clang::tidy::ClangTidyCheck
   function check(const ast_matchers::MatchFinder::MatchResult &) in line 90
      protection public
      45 lines of code
      1 parameters
      15 conditional paths
      uses variable Result defined in USRFinder.cpp
      uses function replaceWithExpression(const ast_matchers::MatchFinder::MatchResult &,const CXXBoolLiteralExpr *,bool,bool) defined in clang::tidy::readability::SimplifyBooleanExprCheck
      uses function replaceWithThenStatement(const ast_matchers::MatchFinder::MatchResult &,const CXXBoolLiteralExpr *) defined in clang::tidy::readability::SimplifyBooleanExprCheck
      uses function replaceWithElseStatement(const ast_matchers::MatchFinder::MatchResult &,const CXXBoolLiteralExpr *) defined in clang::tidy::readability::SimplifyBooleanExprCheck
      uses function replaceWithCondition(const ast_matchers::MatchFinder::MatchResult &,const ConditionalOperator *,bool) defined in clang::tidy::readability::SimplifyBooleanExprCheck
      uses function replaceWithReturnCondition(const ast_matchers::MatchFinder::MatchResult &,const IfStmt *,bool) defined in clang::tidy::readability::SimplifyBooleanExprCheck
      uses function replaceWithAssignment(const ast_matchers::MatchFinder::MatchResult &,const IfStmt *,bool) defined in clang::tidy::readability::SimplifyBooleanExprCheck
      uses function replaceCompoundReturnWithCondition(const ast_matchers::MatchFinder::MatchResult &,const CompoundStmt *,bool) defined in clang::tidy::readability::SimplifyBooleanExprCheck
   function matchBoolBinOpExpr(ast_matchers::MatchFinder *,bool,StringRef,StringRef) in line 93
      12 lines of code
      4 parameters
      1 conditional paths
      uses variable Finder defined in ClangTidy.cpp
   function matchBoolCompOpExpr(ast_matchers::MatchFinder *,bool,StringRef,StringRef) in line 99
      13 lines of code
      4 parameters
      1 conditional paths
      uses variable Finder defined in ClangTidy.cpp
   function matchBoolCondition(ast_matchers::MatchFinder *,bool,StringRef) in line 105
      9 lines of code
      3 parameters
      1 conditional paths
      uses variable Finder defined in ClangTidy.cpp
   function matchCompoundIfReturnsBool(ast_matchers::MatchFinder *,bool,StringRef) in line 117
      12 lines of code
      3 parameters
      1 conditional paths
      uses variable Finder defined in ClangTidy.cpp
   function matchExprBinOpBool(ast_matchers::MatchFinder *,bool,StringRef,StringRef) in line 96
      13 lines of code
      4 parameters
      1 conditional paths
      uses variable Finder defined in ClangTidy.cpp
   function matchExprCompOpBool(ast_matchers::MatchFinder *,bool,StringRef,StringRef) in line 102
      13 lines of code
      4 parameters
      1 conditional paths
      uses variable Finder defined in ClangTidy.cpp
   function matchIfAssignsBool(ast_matchers::MatchFinder *,bool,StringRef) in line 114
      27 lines of code
      3 parameters
      2 conditional paths
      uses variable ChainedConditionalAssignment defined in clang::tidy::readability::SimplifyBooleanExprCheck
      uses variable Finder defined in ClangTidy.cpp
   function matchIfReturnsBool(ast_matchers::MatchFinder *,bool,StringRef) in line 111
      17 lines of code
      3 parameters
      2 conditional paths
      uses variable ChainedConditionalReturn defined in clang::tidy::readability::SimplifyBooleanExprCheck
      uses variable Finder defined in ClangTidy.cpp
   function matchTernaryResult(ast_matchers::MatchFinder *,bool,StringRef) in line 108
      10 lines of code
      3 parameters
      1 conditional paths
      uses variable Finder defined in ClangTidy.cpp
   function registerMatchers(ast_matchers::MatchFinder *) in line 89
      protection public
      36 lines of code
      1 parameters
      1 conditional paths
      uses function matchBoolBinOpExpr(ast_matchers::MatchFinder *,bool,StringRef,StringRef) defined in clang::tidy::readability::SimplifyBooleanExprCheck
      uses variable Finder defined in ClangTidy.cpp
      uses function matchExprBinOpBool(ast_matchers::MatchFinder *,bool,StringRef,StringRef) defined in clang::tidy::readability::SimplifyBooleanExprCheck
      uses function matchBoolCompOpExpr(ast_matchers::MatchFinder *,bool,StringRef,StringRef) defined in clang::tidy::readability::SimplifyBooleanExprCheck
      uses function matchExprCompOpBool(ast_matchers::MatchFinder *,bool,StringRef,StringRef) defined in clang::tidy::readability::SimplifyBooleanExprCheck
      uses function matchBoolCondition(ast_matchers::MatchFinder *,bool,StringRef) defined in clang::tidy::readability::SimplifyBooleanExprCheck
      uses function matchTernaryResult(ast_matchers::MatchFinder *,bool,StringRef) defined in clang::tidy::readability::SimplifyBooleanExprCheck
      uses function matchIfReturnsBool(ast_matchers::MatchFinder *,bool,StringRef) defined in clang::tidy::readability::SimplifyBooleanExprCheck
      uses function matchIfAssignsBool(ast_matchers::MatchFinder *,bool,StringRef) defined in clang::tidy::readability::SimplifyBooleanExprCheck
      uses function matchCompoundIfReturnsBool(ast_matchers::MatchFinder *,bool,StringRef) defined in clang::tidy::readability::SimplifyBooleanExprCheck
   function replaceCompoundReturnWithCondition(const ast_matchers::MatchFinder::MatchResult &,const CompoundStmt *,bool) in line 146
      40 lines of code
      3 parameters
      6 conditional paths
      uses variable Result defined in USRFinder.cpp
      uses macro definition assert defined in misc-assert-side-effect.cpp
      uses variable ChainedConditionalReturn defined in clang::tidy::readability::SimplifyBooleanExprCheck
      uses function diag(SourceLocation,StringRef,DiagnosticIDs::Level) defined in clang::tidy::ClangTidyCheck
   function replaceWithAssignment(const ast_matchers::MatchFinder::MatchResult &,const IfStmt *,bool) in line 143
      16 lines of code
      3 parameters
      1 conditional paths
      uses variable Range defined in IncludeOrderCheck.cpp
      uses variable Result defined in USRFinder.cpp
      uses function diag(SourceLocation,StringRef,DiagnosticIDs::Level) defined in clang::tidy::ClangTidyCheck
   function replaceWithCondition(const ast_matchers::MatchFinder::MatchResult &,const ConditionalOperator *,bool) in line 134
      9 lines of code
      3 parameters
      1 conditional paths
      uses variable Result defined in USRFinder.cpp
      uses function diag(SourceLocation,StringRef,DiagnosticIDs::Level) defined in clang::tidy::ClangTidyCheck
   function replaceWithElseStatement(const ast_matchers::MatchFinder::MatchResult &,const CXXBoolLiteralExpr *) in line 130
      10 lines of code
      2 parameters
      1 conditional paths
      uses variable Result defined in USRFinder.cpp
      uses function diag(SourceLocation,StringRef,DiagnosticIDs::Level) defined in clang::tidy::ClangTidyCheck
   function replaceWithExpression(const ast_matchers::MatchFinder::MatchResult &,const CXXBoolLiteralExpr *,bool,bool) in line 121
      12 lines of code
      4 parameters
      1 conditional paths
      uses variable Result defined in USRFinder.cpp
      uses function diag(SourceLocation,StringRef,DiagnosticIDs::Level) defined in clang::tidy::ClangTidyCheck
   function replaceWithReturnCondition(const ast_matchers::MatchFinder::MatchResult &,const IfStmt *,bool) in line 138
      10 lines of code
      3 parameters
      1 conditional paths
      uses variable Result defined in USRFinder.cpp
      uses function diag(SourceLocation,StringRef,DiagnosticIDs::Level) defined in clang::tidy::ClangTidyCheck
   function replaceWithThenStatement(const ast_matchers::MatchFinder::MatchResult &,const CXXBoolLiteralExpr *) in line 126
      8 lines of code
      2 parameters
      1 conditional paths
      uses variable Result defined in USRFinder.cpp
      uses function diag(SourceLocation,StringRef,DiagnosticIDs::Level) defined in clang::tidy::ClangTidyCheck
   function storeOptions(ClangTidyOptions::OptionMap &) in line 88
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable Options defined in clang::tidy::ClangTidyCheck
      uses function store(ClangTidyOptions::OptionMap &,StringRef,StringRef) defined in clang::tidy::OptionsView
      uses variable ChainedConditionalReturn defined in clang::tidy::readability::SimplifyBooleanExprCheck
      uses variable ChainedConditionalAssignment defined in clang::tidy::readability::SimplifyBooleanExprCheck
   function SimplifyBooleanExprCheck(StringRef,ClangTidyContext *) in line 86
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
   variable ChainedConditionalAssignment in line 151
   variable ChainedConditionalReturn in line 150
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-tidy/tool/clang-tidy-diff.py
module clang-tidy-diff.py
   function main() in line 34
      protection public
      80 lines of code
      0 parameters
      1 conditional paths
      uses function print(...) defined in misc-assert-side-effect.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-tidy/tool/ClangTidyMain.cpp
module ClangTidyMain.cpp
   variable DefaultChecks in line 50
      protection public
   variable LLVMModuleAnchorDestination in line 339
      protection public
   variable GoogleModuleAnchorDestination in line 343
      protection public
   variable MiscModuleAnchorDestination in line 347
      protection public
   variable ReadabilityModuleAnchorDestination in line 351
      protection public
   function ClangTidyCategory("clang-tidy options") in line 27
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function CommonHelp(CommonOptionsParser::HelpMessage) in line 29
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ClangTidyHelp("Configuration files:\n"" clang-tidy attempts to read configuration for each source file from a\n"" .clang-tidy file located in the closest parent directory of the source\n"" file. If any configuration options have a corresponding command-line\n"",command-line option takes precedence.The effective\n" "configuration can be inspected using-dump-config:\n" "\n" "$clang-tidy-dump-config---\n" "---\n" "Checks: '-*,some-check'\n" "HeaderFilterRegex: ''\n" "AnalyzeTemporaryDtors:false\n" "User:user\n" "CheckOptions:\n" "-key:some-check.SomeOption\n" "value: 'some value'\n" "...\n" "\n\n") in line 30
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function Checks("checks",cl::desc("Comma-separated list of globs with optional '-'\n"                                                "prefix. Globs are processed in order of appearance\n"                                                "in the list. Globs without '-' prefix add checks\n"                                                "with matching names to the set, globs with the '-'\n"                                                "prefix remove checks with matching names from the\n"                                                "set of enabled checks.\n"                                                "This option's value is appended to the value read\n"                                                "from a .clang-tidy file, if any."),cl::init(""),cl::cat(ClangTidyCategory)) in line 56
      protection public
      1 lines of code
      4 parameters
      1 conditional paths
   function HeaderFilter("header-filter",cl::desc("Regular expression matching the names of the\n"                                        "headers to output diagnostics from. Diagnostics\n"                                        "from the main file of each translation unit are\n"                                        "always displayed.\n"                                        "Can be used together with -line-filter.\n"                                        "This option overrides the value read from a\n"                                        ".clang-tidy file."),cl::init(""),cl::cat(ClangTidyCategory)) in line 67
      protection public
      1 lines of code
      4 parameters
      1 conditional paths
   function SystemHeaders("system-headers",cl::desc("Display the errors from system headers."),cl::init(false),cl::cat(ClangTidyCategory)) in line 78
      protection public
      1 lines of code
      4 parameters
      1 conditional paths
   function LineFilter("line-filter",cl::desc("List of files with line ranges to filter the\n"                                    "warnings. Can be used together with\n"                                    "-header-filter. The format of the list is a JSON\n"                                    "array of objects:\n"                                    "  [\n"                                    "    {\"name\":\"file1.cpp\",\"lines\":[[1,3],[5,7]]},\n"                                    "    {\"name\":\"file2.h\"}\n"                                    "  ]"),cl::init(""),cl::cat(ClangTidyCategory)) in line 82
      protection public
      1 lines of code
      4 parameters
      1 conditional paths
   function Fix("fix",cl::desc("Apply suggested fixes. Without -fix-errors\n"                                            "clang-tidy will bail out if any compilation\n"                                            "errors were found."),cl::init(false),cl::cat(ClangTidyCategory)) in line 94
      protection public
      1 lines of code
      4 parameters
      1 conditional paths
   function FixErrors("fix-errors",cl::desc("Apply suggested fixes even if compilation errors\n"                                          "were found. If compiler errors have attached\n"                                          "fix-its, clang-tidy will apply them as well."),cl::init(false),cl::cat(ClangTidyCategory)) in line 100
      protection public
      1 lines of code
      4 parameters
      1 conditional paths
   function ListChecks("list-checks",cl::desc("List all enabled checks and exit. Use with\n"                                    "-checks='*' to list all available checks."),cl::init(false),cl::cat(ClangTidyCategory)) in line 107
      protection public
      1 lines of code
      4 parameters
      1 conditional paths
   function Config("config",cl::desc("Specifies a configuration in YAML/JSON format:\n"                      "  -config=\"{Checks: '*', CheckOptions: [{key: x, value: y}]}\"\n"                      "When the value is empty, clang-tidy will attempt to find\n"                      "a file named .clang-tidy for each source file in its parent\n"                      "directories."),cl::init(""),cl::cat(ClangTidyCategory)) in line 112
      protection public
      1 lines of code
      4 parameters
      1 conditional paths
   function DumpConfig("dump-config",cl::desc("Dumps configuration in the YAML format to stdout. This option\n"                      "should be used along with a file name (and '--' if the file is\n"                      "outside of a project with configured compilation database). The\n"                      "configuration used for this file will be printed."),cl::init(false),cl::cat(ClangTidyCategory)) in line 121
      protection public
      1 lines of code
      4 parameters
      1 conditional paths
   function EnableCheckProfile("enable-check-profile",cl::desc("Enable per-check timing profiles, and print a report to stderr."),cl::init(false),cl::cat(ClangTidyCategory)) in line 129
      protection public
      1 lines of code
      4 parameters
      1 conditional paths
   function AnalyzeTemporaryDtors("analyze-temporary-dtors",cl::desc("Enable temporary destructor-aware analysis in\n"                      "clang-analyzer- checks.\n"                      "This option overrides the value read from a\n"                      ".clang-tidy file."),cl::init(false),cl::cat(ClangTidyCategory)) in line 134
      protection public
      1 lines of code
      4 parameters
      1 conditional paths
   function ExportFixes("export-fixes",cl::desc("YAML file to store suggested fixes in. The\n"                      "stored fixes can be applied to the input source\n"                      "code with clang-apply-replacements."),cl::value_desc("filename"),cl::cat(ClangTidyCategory)) in line 142
      protection public
      1 lines of code
      4 parameters
      1 conditional paths
   function printStats(const ClangTidyStats &) in line 152
      protection public
      26 lines of code
      1 parameters
      7 conditional paths
      uses function errorsIgnored() defined in clang::tidy::ClangTidyStats
      uses variable ErrorsIgnoredNonUserCode defined in clang::tidy::ClangTidyStats
      uses variable ErrorsIgnoredLineFilter defined in clang::tidy::ClangTidyStats
      uses variable ErrorsIgnoredNOLINT defined in clang::tidy::ClangTidyStats
      uses variable ErrorsIgnoredCheckFilter defined in clang::tidy::ClangTidyStats
   function printProfileData(const ProfileData &,llvm::raw_ostream &) in line 179
      protection public
      38 lines of code
      2 parameters
      7 conditional paths
      uses variable Records defined in clang::tidy::ProfileData
      uses function begin() defined in std::vector
      uses function end() defined in std::vector
      uses variable Line defined in PreprocessorTracker.cpp
   function createOptionsProvider() in line 218
      protection public
      45 lines of code
      0 parameters
      5 conditional paths
      uses function parseLineFilter(StringRef,clang::tidy::ClangTidyGlobalOptions &) defined in ClangTidyOptions.cpp
      uses function LineFilter("line-filter",cl::desc("List of files with line ranges to filter the\n"                                    "warnings. Can be used together with\n"                                    "-header-filter. The format of the list is a JSON\n"                                    "array of objects:\n"                                    "  [\n"                                    "    {\"name\":\"file1.cpp\",\"lines\":[[1,3],[5,7]]},\n"                                    "    {\"name\":\"file2.h\"}\n"                                    "  ]"),cl::init(""),cl::cat(ClangTidyCategory)) defined in ClangTidyMain.cpp
      uses variable Checks defined in clang::tidy::ClangTidyOptions
      uses variable DefaultChecks defined in ClangTidyMain.cpp
      uses variable HeaderFilterRegex defined in clang::tidy::ClangTidyOptions
      uses function HeaderFilter("header-filter",cl::desc("Regular expression matching the names of the\n"                                        "headers to output diagnostics from. Diagnostics\n"                                        "from the main file of each translation unit are\n"                                        "always displayed.\n"                                        "Can be used together with -line-filter.\n"                                        "This option overrides the value read from a\n"                                        ".clang-tidy file."),cl::init(""),cl::cat(ClangTidyCategory)) defined in ClangTidyMain.cpp
      uses variable SystemHeaders defined in clang::tidy::ClangTidyOptions
      uses function SystemHeaders("system-headers",cl::desc("Display the errors from system headers."),cl::init(false),cl::cat(ClangTidyCategory)) defined in ClangTidyMain.cpp
      uses variable AnalyzeTemporaryDtors defined in clang::tidy::ClangTidyOptions
      uses function AnalyzeTemporaryDtors("analyze-temporary-dtors",cl::desc("Enable temporary destructor-aware analysis in\n"                      "clang-analyzer- checks.\n"                      "This option overrides the value read from a\n"                      ".clang-tidy file."),cl::init(false),cl::cat(ClangTidyCategory)) defined in ClangTidyMain.cpp
      uses variable User defined in clang::tidy::ClangTidyOptions
      uses function Checks("checks",cl::desc("Comma-separated list of globs with optional '-'\n"                                                "prefix. Globs are processed in order of appearance\n"                                                "in the list. Globs without '-' prefix add checks\n"                                                "with matching names to the set, globs with the '-'\n"                                                "prefix remove checks with matching names from the\n"                                                "set of enabled checks.\n"                                                "This option's value is appended to the value read\n"                                                "from a .clang-tidy file, if any."),cl::init(""),cl::cat(ClangTidyCategory)) defined in ClangTidyMain.cpp
      uses function Config("config",cl::desc("Specifies a configuration in YAML/JSON format:\n"                      "  -config=\"{Checks: '*', CheckOptions: [{key: x, value: y}]}\"\n"                      "When the value is empty, clang-tidy will attempt to find\n"                      "a file named .clang-tidy for each source file in its parent\n"                      "directories."),cl::init(""),cl::cat(ClangTidyCategory)) defined in ClangTidyMain.cpp
      uses function parseConfiguration(StringRef) defined in ClangTidyOptions.cpp
   function clangTidyMain(int,const char **) in line 264
      protection public
      72 lines of code
      2 parameters
      10 conditional paths
      uses function ClangTidyCategory("clang-tidy options") defined in ClangTidyMain.cpp
      uses function createOptionsProvider() defined in ClangTidyMain.cpp
      uses function getCheckNames(const ClangTidyOptions &) defined in ClangTidy.cpp
      uses function ListChecks("list-checks",cl::desc("List all enabled checks and exit. Use with\n"                                    "-checks='*' to list all available checks."),cl::init(false),cl::cat(ClangTidyCategory)) defined in ClangTidyMain.cpp
      uses function DumpConfig("dump-config",cl::desc("Dumps configuration in the YAML format to stdout. This option\n"                      "should be used along with a file name (and '--' if the file is\n"                      "outside of a project with configured compilation database). The\n"                      "configuration used for this file will be printed."),cl::init(false),cl::cat(ClangTidyCategory)) defined in ClangTidyMain.cpp
      uses variable CheckOptions defined in clang::tidy::ClangTidyOptions
      uses function getCheckOptions(const ClangTidyOptions &) defined in ClangTidy.cpp
      uses function configurationAsText(const ClangTidyOptions &) defined in ClangTidyOptions.cpp
      uses function empty() defined in std::vector
      uses function runClangTidy(std::unique_ptr< ClangTidyOptionsProvider >,const tooling::CompilationDatabase &,ArrayRef< std::string >,std::vector< ClangTidyError > *,ProfileData *) defined in ClangTidy.cpp
      uses function EnableCheckProfile("enable-check-profile",cl::desc("Enable per-check timing profiles, and print a report to stderr."),cl::init(false),cl::cat(ClangTidyCategory)) defined in ClangTidyMain.cpp
      uses function find_if(FwIt,FwIt,Pred) defined in misc-inefficient-algorithm.cpp
      uses function begin() defined in std::vector
      uses function end() defined in std::vector
      uses function Fix("fix",cl::desc("Apply suggested fixes. Without -fix-errors\n"                                            "clang-tidy will bail out if any compilation\n"                                            "errors were found."),cl::init(false),cl::cat(ClangTidyCategory)) defined in ClangTidyMain.cpp
      uses function FixErrors("fix-errors",cl::desc("Apply suggested fixes even if compilation errors\n"                                          "were found. If compiler errors have attached\n"                                          "fix-its, clang-tidy will apply them as well."),cl::init(false),cl::cat(ClangTidyCategory)) defined in ClangTidyMain.cpp
      uses function handleErrors(const std::vector< ClangTidyError > &,bool) defined in ClangTidy.cpp
      uses function ExportFixes("export-fixes",cl::desc("YAML file to store suggested fixes in. The\n"                      "stored fixes can be applied to the input source\n"                      "code with clang-apply-replacements."),cl::value_desc("filename"),cl::cat(ClangTidyCategory)) defined in ClangTidyMain.cpp
      uses function exportReplacements(const std::vector< ClangTidyError > &,raw_ostream &) defined in ClangTidy.cpp
      uses function printStats(const ClangTidyStats &) defined in ClangTidyMain.cpp
      uses function printProfileData(const ProfileData &,llvm::raw_ostream &) defined in ClangTidyMain.cpp
      uses variable LLVMModuleAnchorSource defined in LLVMTidyModule.cpp
   function main(int,const char **) in line 356
      protection public
      3 lines of code
      2 parameters
      1 conditional paths
      uses function clangTidyMain(int,const char **) defined in ClangTidyMain.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-tidy/tool/run-clang-tidy.py
module run-clang-tidy.py
   function find_compilation_database((null)) in line 50
      protection public
      11 lines of code
      1 parameters
      1 conditional paths
      uses function get_tidy_invocation((null),(null),(null),(null),(null),(null)) defined in run-clang-tidy.py
   function get_tidy_invocation((null),(null),(null),(null),(null),(null)) in line 61
      protection public
      22 lines of code
      6 parameters
      1 conditional paths
   function apply_fixes((null),(null)) in line 84
      protection public
      10 lines of code
      2 parameters
      1 conditional paths
   function run_tidy((null),(null),(null),(null)) in line 94
      protection public
      11 lines of code
      4 parameters
      1 conditional paths
      uses function get_tidy_invocation((null),(null),(null),(null),(null),(null)) defined in run-clang-tidy.py
   function main() in line 105
      protection public
      86 lines of code
      0 parameters
      1 conditional paths
      uses function find_compilation_database((null)) defined in run-clang-tidy.py
      uses function apply_fixes((null),(null)) defined in run-clang-tidy.py
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-tidy/utils/HeaderGuard.cpp
module HeaderGuard.cpp
   variable Macros in line 271
   variable Files in line 272
   variable Ifndefs in line 274
   variable EndIfs in line 275
   variable PP in line 277
   variable Check in line 278
   function cleanPath(StringRef) in line 22
      protection public
      17 lines of code
      1 parameters
      25 conditional paths
      uses function begin(const MyArray &) defined in free_begin_end_fail.cpp
      uses variable Path defined in PreprocessorTracker.cpp
      uses function end(const MyArray &) defined in free_begin_end_fail.cpp
      uses variable PP defined in HeaderGuard.cpp
      uses variable Check defined in HeaderGuard.cpp
      uses variable Loc defined in IncludeOrderCheck.cpp
      uses variable SM defined in IncludeOrderCheck.cpp
      uses variable Files defined in HeaderGuard.cpp
      uses variable Ifndefs defined in HeaderGuard.cpp
      uses function make_pair(T1,T2) defined in google-explicit-make-pair.cpp
      uses variable EndIfs defined in HeaderGuard.cpp
      uses function empty() defined in std::vector
      uses variable Name defined in PreprocessorTracker.cpp
module clang::tidy::@165::HeaderGuardPPCallbacks
   variable Check in line 278
   variable EndIfs in line 275
   variable Files in line 272
   variable Ifndefs in line 274
   variable Macros in line 271
   variable PP in line 277
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/clang-tidy/utils/HeaderGuard.h
module clang::tidy::HeaderGuardCheck
   inherits from clang::tidy::ClangTidyCheck
   abstract class
   function formatEndIf(StringRef) in line 37
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function getHeaderGuard(StringRef,StringRef) in line 39
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function registerPPCallbacks(CompilerInstance &) in line 23
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
   function shouldFixHeaderGuard(StringRef) in line 31
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function shouldSuggestEndifComment(StringRef) in line 28
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function shouldSuggestToAddHeaderGuard(StringRef) in line 34
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function HeaderGuardCheck(StringRef,ClangTidyContext *) in line 21
      protection public
      2 lines of code
      2 parameters
      1 conditional paths
      uses function registerPPCallbacks(CompilerInstance &) defined in clang::tidy::HeaderGuardCheck
      uses function shouldSuggestEndifComment(StringRef) defined in clang::tidy::HeaderGuardCheck
      uses variable Filename defined in IncludeOrderCheck.cpp
      uses function shouldFixHeaderGuard(StringRef) defined in clang::tidy::HeaderGuardCheck
      uses function shouldSuggestToAddHeaderGuard(StringRef) defined in clang::tidy::HeaderGuardCheck
      uses function formatEndIf(StringRef) defined in clang::tidy::HeaderGuardCheck
      uses function getHeaderGuard(StringRef,StringRef) defined in clang::tidy::HeaderGuardCheck
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/modularize/Inputs/HeaderGuard.h
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/docs/conf.py
module conf.py
   variable extensions in line 28
      protection public
   variable templates_path in line 31
      protection public
   variable source_suffix in line 34
      protection public
   variable master_doc in line 40
      protection public
   variable project in line 43
      protection public
   variable copyright in line 44
      protection public
   variable version in line 51
      protection public
   variable release in line 53
      protection public
   variable exclude_patterns in line 67
      protection public
   variable pygments_style in line 84
      protection public
   variable html_theme in line 94
      protection public
   variable html_static_path in line 123
      protection public
   variable htmlhelp_basename in line 167
      protection public
   variable latex_elements in line 172
      protection public
   variable latex_documents in line 185
      protection public
   variable man_pages in line 215
      protection public
   variable texinfo_documents in line 229
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/modularize/CoverageChecker.cpp
module CoverageCheckerCallbacks
   inherits from PPCallbacks
   function InclusionDirective(SourceLocation,const Token &,StringRef,bool,CharSourceRange,const FileEntry *,StringRef,StringRef,const Module *) in line 89
      protection public
      7 lines of code
      9 parameters
      1 conditional paths
      uses variable File defined in PreprocessorTracker.cpp
   function CoverageCheckerCallbacks(CoverageChecker &) in line 85
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ~CoverageCheckerCallbacks() in line 86
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   variable Checker in line 98
module CoverageCheckerConsumer
   inherits from ASTConsumer
   function CoverageCheckerConsumer(CoverageChecker &,Preprocessor &) in line 106
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses variable PP defined in MacroParenthesesCheck.cpp
module CoverageCheckerAction
   inherits from SyntaxOnlyAction
   function CreateASTConsumer(CompilerInstance &,StringRef) in line 117
      5 lines of code
      2 parameters
      1 conditional paths
   function CoverageCheckerAction(CoverageChecker &) in line 114
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   variable Checker in line 124
module CoverageCheckerFrontendActionFactory
   inherits from FrontendActionFactory
   function create() in line 132
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function CoverageCheckerFrontendActionFactory(CoverageChecker &) in line 129
      protection public
      2 lines of code
      1 parameters
      1 conditional paths
   variable Checker in line 137
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/modularize/CoverageChecker.h
module Modularize::CoverageChecker
   function collectFileSystemHeaders() in line 145
      protection public
      28 lines of code
      0 parameters
      13 conditional paths
      uses variable ModuleMapDirectory defined in Modularize::CoverageChecker
      uses variable ModuleMapPath defined in Modularize::CoverageChecker
      uses variable IncludePaths defined in Modularize::CoverageChecker
      uses function size() defined in std::vector
      uses function begin() defined in std::vector
      uses function end() defined in std::vector
      uses variable FileSystemHeaders defined in Modularize::CoverageChecker
   function collectFileSystemHeaders(llvm::StringRef) in line 152
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function collectModuleHeaders() in line 115
      protection public
      7 lines of code
      0 parameters
      9 conditional paths
      uses variable ModMap defined in Modularize::CoverageChecker
      uses variable ModuleMapHeadersSet defined in Modularize::CoverageChecker
      uses function collectUmbrellaHeaderHeaders(llvm::StringRef) defined in Modularize::CoverageChecker
      uses function collectUmbrellaHeaders(llvm::StringRef) defined in Modularize::CoverageChecker
   function collectModuleHeaders(const clang::Module &) in line 122
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function collectUmbrellaHeaderHeader(llvm::StringRef) in line 137
      protection public
      13 lines of code
      1 parameters
      3 conditional paths
      uses variable ModuleMapDirectory defined in Modularize::CoverageChecker
      uses variable ModuleMapHeadersSet defined in Modularize::CoverageChecker
   function collectUmbrellaHeaderHeaders(llvm::StringRef) in line 132
      protection public
      22 lines of code
      1 parameters
      2 conditional paths
      uses variable ModuleMapDirectory defined in Modularize::CoverageChecker
      uses function reset(T *) defined in std::unique_ptr
      uses variable CommandLine defined in Modularize::CoverageChecker
   function collectUmbrellaHeaders(llvm::StringRef) in line 127
      protection public
      31 lines of code
      1 parameters
      8 conditional paths
      uses variable ModuleMapDirectory defined in Modularize::CoverageChecker
      uses variable File defined in PreprocessorTracker.cpp
      uses variable ModuleMapHeadersSet defined in Modularize::CoverageChecker
   function createCoverageChecker(llvm::StringRef,std::vector< std::string > &,llvm::ArrayRef< std::string >,clang::ModuleMap *) in line 94
      protection public
      7 lines of code
      4 parameters
      1 conditional paths
      uses function CoverageChecker(llvm::StringRef,std::vector< std::string > &,llvm::ArrayRef< std::string >,clang::ModuleMap *) defined in Modularize::CoverageChecker
      uses variable ModuleMapPath defined in Modularize::CoverageChecker
      uses variable IncludePaths defined in Modularize::CoverageChecker
      uses variable CommandLine defined in Modularize::CoverageChecker
   function doChecks() in line 108
      protection public
      19 lines of code
      0 parameters
      3 conditional paths
      uses function collectModuleHeaders() defined in Modularize::CoverageChecker
      uses function collectFileSystemHeaders() defined in Modularize::CoverageChecker
      uses function findUnaccountedForHeaders() defined in Modularize::CoverageChecker
      uses variable UnaccountedForHeaders defined in Modularize::CoverageChecker
      uses function empty() defined in std::vector
   function findUnaccountedForHeaders() in line 160
      protection public
      13 lines of code
      0 parameters
      3 conditional paths
      uses variable FileSystemHeaders defined in Modularize::CoverageChecker
      uses function begin() defined in std::vector
      uses function end() defined in std::vector
      uses variable ModuleMapHeadersSet defined in Modularize::CoverageChecker
      uses variable UnaccountedForHeaders defined in Modularize::CoverageChecker
      uses variable ModuleMapPath defined in Modularize::CoverageChecker
   function CoverageChecker(llvm::StringRef,std::vector< std::string > &,llvm::ArrayRef< std::string >,clang::ModuleMap *) in line 79
      protection public
      7 lines of code
      4 parameters
      1 conditional paths
   variable CommandLine in line 50
   variable FileSystemHeaders in line 63
   variable IncludePaths in line 48
   variable ModMap in line 52
   variable ModuleMapDirectory in line 58
   variable ModuleMapHeadersSet in line 60
   variable ModuleMapPath in line 43
   variable UnaccountedForHeaders in line 65
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/modularize/Modularize.cpp
module Modularize.cpp
   typedef HeaderContents in line 485
      protection public
   variable Argv0 in line 334
      protection public
   variable CommandLine in line 336
      protection public
   function ListFileNames(cl::Positional,cl::value_desc("list"),cl::desc("<list of one or more header list files>"),cl::CommaSeparated) in line 265
      protection public
      1 lines of code
      4 parameters
      1 conditional paths
   function CC1Arguments(cl::ConsumeAfter,cl::desc("<arguments to be passed to front end>...")) in line 271
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function HeaderPrefix("prefix",cl::init(""),cl::desc(            "Prepend header file paths with this prefix."            " If not specified,"            " the files are considered to be relative to the header list file.")) in line 275
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function ModuleMapPath("module-map-path",cl::init(""),cl::desc("Turn on module map output and specify output path or file name."                      " If no path is specified and if prefix option is specified,"                      " use prefix for file path.")) in line 284
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function ProblemFilesList("problem-files-list",cl::init(""),cl::desc("List of files with compilation or modularization problems for"    " assistant mode.  This will be excluded.")) in line 292
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function RootModule("root-module",cl::init(""),cl::desc("Specify the name of the root module.")) in line 300
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function BlockCheckHeaderListOnly("block-check-header-list-only",cl::init(false),cl::desc("Only warn if #include directives are inside extern or namespace"" blocks if the included header is in the header list.")) in line 308
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function IncludePaths("I",cl::desc("Include path for coverage check."),cl::ZeroOrMore,cl::value_desc("path")) in line 314
      protection public
      1 lines of code
      4 parameters
      1 conditional paths
   function NoCoverageCheck("no-coverage-check",cl::init(false),cl::desc("Don't do the coverage check.")) in line 319
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function CoverageCheckOnly("coverage-check-only",cl::init(false),cl::desc("Only do the coverage check.")) in line 324
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function DisplayFileLists("display-file-lists",cl::init(false),cl::desc("Display lists of good files (no compile errors), problem files,"" and a combined list with problem files preceded by a '#'.")) in line 329
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function findInputFile(const CommandLineArguments &) in line 339
      protection public
      14 lines of code
      1 parameters
      2 conditional paths
   function getModularizeArgumentsAdjuster(DependencyMap &) in line 358
      protection public
      23 lines of code
      1 parameters
      4 conditional paths
      uses function findInputFile(const CommandLineArguments &) defined in Modularize.cpp
      uses variable File defined in PreprocessorTracker.cpp
      uses function find(FwIt,FwIt,const K &) defined in misc-inefficient-algorithm.cpp
   function main(int,const char **) in line 805
      protection public
      189 lines of code
      2 parameters
      26 conditional paths
      uses variable Argv0 defined in Modularize.cpp
      uses variable CommandLine defined in Modularize.cpp
      uses function ListFileNames(cl::Positional,cl::value_desc("list"),cl::desc("<list of one or more header list files>"),cl::CommaSeparated) defined in Modularize.cpp
      uses function reset(T *) defined in std::unique_ptr
      uses function HeaderPrefix("prefix",cl::init(""),cl::desc(            "Prepend header file paths with this prefix."            " If not specified,"            " the files are considered to be relative to the header list file.")) defined in Modularize.cpp
      uses function ProblemFilesList("problem-files-list",cl::init(""),cl::desc("List of files with compilation or modularization problems for"    " assistant mode.  This will be excluded.")) defined in Modularize.cpp
      uses function loadAllHeaderListsAndDependencies() defined in Modularize::ModularizeUtilities
      uses function ModuleMapPath("module-map-path",cl::init(""),cl::desc("Turn on module map output and specify output path or file name."                      " If no path is specified and if prefix option is specified,"                      " use prefix for file path.")) defined in Modularize.cpp
      uses function createModuleMap(llvm::StringRef,llvm::ArrayRef< std::string >,llvm::ArrayRef< std::string >,DependencyMap &,llvm::StringRef,llvm::StringRef) defined in Modularize.h
      uses variable HeaderFileNames defined in Modularize::ModularizeUtilities
      uses variable ProblemFileNames defined in Modularize::ModularizeUtilities
      uses variable Dependencies defined in Modularize::ModularizeUtilities
      uses function RootModule("root-module",cl::init(""),cl::desc("Specify the name of the root module.")) defined in Modularize.cpp
      uses function NoCoverageCheck("no-coverage-check",cl::init(false),cl::desc("Don't do the coverage check.")) defined in Modularize.cpp
      uses variable HasModuleMap defined in Modularize::ModularizeUtilities
      uses function doCoverageCheck(std::vector< std::string > &,llvm::ArrayRef< std::string >) defined in Modularize::ModularizeUtilities
      uses function IncludePaths("I",cl::desc("Include path for coverage check."),cl::ZeroOrMore,cl::value_desc("path")) defined in Modularize.cpp
      uses function CoverageCheckOnly("coverage-check-only",cl::init(false),cl::desc("Only do the coverage check.")) defined in Modularize.cpp
      uses function CC1Arguments(cl::ConsumeAfter,cl::desc("<arguments to be passed to front end>...")) defined in Modularize.cpp
      uses variable PPTracker defined in PreprocessorTracker.cpp
      uses function BlockCheckHeaderListOnly("block-check-header-list-only",cl::init(false),cl::desc("Only warn if #include directives are inside extern or namespace"" blocks if the included header is in the header list.")) defined in Modularize.cpp
      uses function DisplayFileLists("display-file-lists",cl::init(false),cl::desc("Display lists of good files (no compile errors), problem files,"" and a combined list with problem files preceded by a '#'.")) defined in Modularize.cpp
      uses function getModularizeArgumentsAdjuster(DependencyMap &) defined in Modularize.cpp
      uses function addUniqueProblemFile(std::string) defined in Modularize::ModularizeUtilities
      uses function addNoCompileErrorsFile(std::string) defined in Modularize::ModularizeUtilities
      uses variable GoodFileNames defined in Modularize::ModularizeUtilities
      uses enumvalue EK_NumberOfKinds defined in Entry
      uses macro definition N defined in misc-swapped-arguments.cpp
      uses function getKindName() defined in Entry
      uses variable HeaderContentMismatches defined in EntityMap
      uses function displayProblemFiles() defined in Modularize::ModularizeUtilities
      uses function displayGoodFiles() defined in Modularize::ModularizeUtilities
      uses function displayCombinedFiles() defined in Modularize::ModularizeUtilities
module Location
   function operator bool() in line 405
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
      uses variable File defined in PreprocessorTracker.cpp
   function Location() in line 389
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function Location(SourceManager &,SourceLocation) in line 391
      protection public
      13 lines of code
      2 parameters
      3 conditional paths
      uses variable Loc defined in IncludeOrderCheck.cpp
      uses variable SM defined in IncludeOrderCheck.cpp
      uses variable File defined in PreprocessorTracker.cpp
      uses variable Line defined in PreprocessorTracker.cpp
      uses variable Column defined in PreprocessorTracker.cpp
   variable Column in line 387
      protection public
   variable File in line 386
      protection public
   variable Line in line 387
      protection public
module Entry
   function getKindName() in line 442
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
      uses function getKindName() defined in Entry
   function getKindName(Entry::EntryKind) in line 443
      protection public
      13 lines of code
      1 parameters
      5 conditional paths
   variable Kind in line 438
      protection public
   variable Loc in line 440
      protection public
module HeaderEntry
   variable Loc in line 463
      protection public
   variable Name in line 462
      protection public
module EntityMap
   inherits from StringMap
   function add(const std::string &,enum Entry::EntryKind,Location) in line 491
      protection public
      16 lines of code
      3 parameters
      3 conditional paths
      uses variable Name defined in PreprocessorTracker.cpp
      uses variable Loc defined in IncludeOrderCheck.cpp
      uses macro definition N defined in misc-swapped-arguments.cpp
   function mergeCurHeaderContents() in line 508
      protection public
      30 lines of code
      0 parameters
      4 conditional paths
   variable AllHeaderContents in line 541
   variable CurHeaderContents in line 540
   variable HeaderContentMismatches in line 489
      protection public
module CollectEntitiesVisitor
   inherits from clang::RecursiveASTVisitor
   function TraverseConstructorInitializer(CXXCtorInitializer *) in line 572
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function TraverseDeclarationNameInfo(DeclarationNameInfo) in line 560
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function TraverseLambdaCapture(LambdaCapture) in line 573
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function TraverseNestedNameSpecifier(NestedNameSpecifier *) in line 556
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function TraverseNestedNameSpecifierLoc(NestedNameSpecifierLoc) in line 557
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function TraverseStmt(Stmt *) in line 553
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function TraverseTemplateArgument(const TemplateArgument &) in line 564
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function TraverseTemplateArgumentLoc(const TemplateArgumentLoc &) in line 565
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function TraverseTemplateArguments(const TemplateArgument *,unsigned) in line 568
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function TraverseTemplateName(TemplateName) in line 563
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function TraverseType(QualType) in line 554
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function TraverseTypeLoc(TypeLoc) in line 555
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function VisitLinkageSpecDecl(LinkageSpecDecl *) in line 576
      protection public
      19 lines of code
      1 parameters
      5 conditional paths
      uses variable PPTracker defined in PreprocessorTracker.cpp
      uses variable PP defined in MacroParenthesesCheck.cpp
   function VisitNamedDecl(NamedDecl *) in line 609
      protection public
      35 lines of code
      1 parameters
      6 conditional paths
      uses variable Name defined in PreprocessorTracker.cpp
      uses variable Loc defined in IncludeOrderCheck.cpp
      uses variable SM defined in IncludeOrderCheck.cpp
      uses enumvalue EK_Tag defined in Entry
      uses enumvalue EK_Value defined in Entry
   function VisitNamespaceDecl(const NamespaceDecl *) in line 597
      protection public
      10 lines of code
      1 parameters
      2 conditional paths
      uses variable PPTracker defined in PreprocessorTracker.cpp
      uses variable PP defined in MacroParenthesesCheck.cpp
      uses function c_str() defined in std::basic_string
   function CollectEntitiesVisitor(SourceManager &,EntityMap &,Preprocessor &,PreprocessorTracker &,int &) in line 547
      protection public
      5 lines of code
      5 parameters
      1 conditional paths
   variable Entities in line 647
   variable HadErrors in line 650
   variable PP in line 648
   variable PPTracker in line 649
   variable SM in line 646
module CollectEntitiesConsumer
   inherits from ASTConsumer
   function HandleTranslationUnit(ASTContext &) in line 665
      protection public
      21 lines of code
      1 parameters
      3 conditional paths
      uses variable SM defined in IncludeOrderCheck.cpp
      uses variable PP defined in MacroParenthesesCheck.cpp
      uses variable PPTracker defined in PreprocessorTracker.cpp
      uses macro definition M defined in google-explicit-make-pair.cpp
      uses variable Loc defined in IncludeOrderCheck.cpp
      uses enumvalue EK_Macro defined in Entry
   function CollectEntitiesConsumer(EntityMap &,PreprocessorTracker &,Preprocessor &,StringRef,int &) in line 655
      protection public
      7 lines of code
      5 parameters
      1 conditional paths
      uses variable PPTracker defined in PreprocessorTracker.cpp
      uses variable PP defined in MacroParenthesesCheck.cpp
   function ~CollectEntitiesConsumer() in line 663
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
      uses variable PPTracker defined in PreprocessorTracker.cpp
   variable Entities in line 688
   variable HadErrors in line 691
   variable PP in line 690
   variable PPTracker in line 689
module CollectEntitiesAction
   inherits from SyntaxOnlyAction
   function CreateASTConsumer(CompilerInstance &,StringRef) in line 704
      4 lines of code
      2 parameters
      1 conditional paths
      uses variable PPTracker defined in PreprocessorTracker.cpp
   function CollectEntitiesAction(EntityMap &,PreprocessorTracker &,int &) in line 696
      protection public
      5 lines of code
      3 parameters
      1 conditional paths
   variable Entities in line 710
   variable HadErrors in line 712
   variable PPTracker in line 711
module ModularizeFrontendActionFactory
   inherits from FrontendActionFactory
   function create() in line 723
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses variable PPTracker defined in PreprocessorTracker.cpp
   function ModularizeFrontendActionFactory(EntityMap &,PreprocessorTracker &,int &) in line 717
      protection public
      5 lines of code
      3 parameters
      1 conditional paths
   variable Entities in line 728
   variable HadErrors in line 730
   variable PPTracker in line 729
module CompileCheckVisitor
   inherits from clang::RecursiveASTVisitor
   function TraverseConstructorInitializer(CXXCtorInitializer *) in line 757
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function TraverseDeclarationNameInfo(DeclarationNameInfo) in line 745
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function TraverseLambdaCapture(LambdaCapture) in line 758
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function TraverseNestedNameSpecifier(NestedNameSpecifier *) in line 741
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function TraverseNestedNameSpecifierLoc(NestedNameSpecifierLoc) in line 742
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function TraverseStmt(Stmt *) in line 738
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function TraverseTemplateArgument(const TemplateArgument &) in line 749
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function TraverseTemplateArgumentLoc(const TemplateArgumentLoc &) in line 750
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function TraverseTemplateArguments(const TemplateArgument *,unsigned) in line 753
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function TraverseTemplateName(TemplateName) in line 748
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function TraverseType(QualType) in line 739
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function TraverseTypeLoc(TypeLoc) in line 740
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function VisitLinkageSpecDecl(LinkageSpecDecl *) in line 761
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function VisitNamedDecl(NamedDecl *) in line 771
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function VisitNamespaceDecl(const NamespaceDecl *) in line 766
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function CompileCheckVisitor() in line 736
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
module CompileCheckConsumer
   inherits from ASTConsumer
   function HandleTranslationUnit(ASTContext &) in line 780
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function CompileCheckConsumer() in line 778
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
module CompileCheckAction
   inherits from SyntaxOnlyAction
   function CreateASTConsumer(CompilerInstance &,StringRef) in line 791
      3 lines of code
      2 parameters
      1 conditional paths
   function CompileCheckAction() in line 787
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
module CompileCheckFrontendActionFactory
   inherits from FrontendActionFactory
   function create() in line 800
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function CompileCheckFrontendActionFactory() in line 798
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/modularize/Modularize.h
module Modularize.h
   typedef DependentsVector in line 32
      protection public
   typedef DependencyMap in line 33
      protection public
   variable Argv0 in line 27
      protection public
   variable CommandLine in line 29
      protection public
   function createModuleMap(llvm::StringRef,llvm::ArrayRef< std::string >,llvm::ArrayRef< std::string >,DependencyMap &,llvm::StringRef,llvm::StringRef) in line 48
      protection public
      16 lines of code
      6 parameters
      1 conditional paths
      uses variable HeaderFileNames defined in Modularize::ModularizeUtilities
      uses variable ProblemFileNames defined in Modularize::ModularizeUtilities
      uses variable Dependencies defined in Modularize::ModularizeUtilities
      uses variable HeaderPrefix defined in Modularize::ModularizeUtilities
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/modularize/ModularizeUtilities.cpp
module ModularizeUtilities.cpp
   function replaceDotDot(StringRef) in line 432
      protection public
      17 lines of code
      1 parameters
      5 conditional paths
      uses function begin(const MyArray &) defined in free_begin_end_fail.cpp
      uses variable Path defined in PreprocessorTracker.cpp
      uses function end(const MyArray &) defined in free_begin_end_fail.cpp
module @171::ModuleMapTargetOptions
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/modularize/ModularizeUtilities.h
module Modularize::ModularizeUtilities
   function addNoCompileErrorsFile(std::string) in line 117
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function getCanonicalPath(llvm::StringRef) defined in Modularize::ModularizeUtilities
      uses variable GoodFileNames defined in Modularize::ModularizeUtilities
   function addUniqueProblemFile(std::string) in line 112
      protection public
      9 lines of code
      1 parameters
      3 conditional paths
      uses function getCanonicalPath(llvm::StringRef) defined in Modularize::ModularizeUtilities
      uses variable ProblemFileNames defined in Modularize::ModularizeUtilities
   function collectModuleHeaders(const clang::Module &) in line 162
      61 lines of code
      1 parameters
      9 conditional paths
      uses function getCanonicalPath(llvm::StringRef) defined in Modularize::ModularizeUtilities
      uses variable HeaderFileNames defined in Modularize::ModularizeUtilities
      uses function collectUmbrellaHeaders(llvm::StringRef,DependentsVector &) defined in Modularize::ModularizeUtilities
      uses variable Loc defined in IncludeOrderCheck.cpp
      uses variable SourceMgr defined in Modularize::ModularizeUtilities
      uses variable MissingHeaderCount defined in Modularize::ModularizeUtilities
   function collectModuleMapHeaders(clang::ModuleMap *) in line 155
      9 lines of code
      1 parameters
      3 conditional paths
      uses function collectModuleHeaders(const clang::Module &) defined in Modularize::ModularizeUtilities
   function collectUmbrellaHeaders(llvm::StringRef,DependentsVector &) in line 167
      29 lines of code
      2 parameters
      6 conditional paths
      uses variable File defined in PreprocessorTracker.cpp
      uses function isHeader(llvm::StringRef) defined in Modularize::ModularizeUtilities
      uses function getCanonicalPath(llvm::StringRef) defined in Modularize::ModularizeUtilities
   function createModularizeUtilities(std::vector< std::string > &,llvm::StringRef,llvm::StringRef) in line 82
      protection public
      6 lines of code
      3 parameters
      1 conditional paths
      uses function ModularizeUtilities(std::vector< std::string > &,llvm::StringRef,llvm::StringRef) defined in Modularize::ModularizeUtilities
   function displayCombinedFiles() in line 126
      protection public
      14 lines of code
      0 parameters
      4 conditional paths
      uses variable File defined in PreprocessorTracker.cpp
      uses variable HeaderFileNames defined in Modularize::ModularizeUtilities
      uses variable ProblemFileNames defined in Modularize::ModularizeUtilities
   function displayGoodFiles() in line 123
      protection public
      14 lines of code
      0 parameters
      5 conditional paths
      uses variable HeaderFileNames defined in Modularize::ModularizeUtilities
      uses variable ProblemFileNames defined in Modularize::ModularizeUtilities
   function displayProblemFiles() in line 120
      protection public
      6 lines of code
      0 parameters
      2 conditional paths
      uses variable ProblemFileNames defined in Modularize::ModularizeUtilities
   function doCoverageCheck(std::vector< std::string > &,llvm::ArrayRef< std::string >) in line 106
      protection public
      16 lines of code
      2 parameters
      3 conditional paths
      uses variable ModuleMaps defined in Modularize::ModularizeUtilities
      uses function size() defined in std::vector
      uses variable InputFilePaths defined in Modularize::ModularizeUtilities
      uses variable CommandLine defined in Modularize.cpp
      uses function get() defined in std::unique_ptr
      uses function doChecks() defined in Modularize::CoverageChecker
   function getCanonicalPath(llvm::StringRef) in line 179
      protection public
      8 lines of code
      1 parameters
      2 conditional paths
   function getDirectoryFromPath(llvm::StringRef) in line 193
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses variable Path defined in PreprocessorTracker.cpp
   function isHeader(llvm::StringRef) in line 186
      protection public
      10 lines of code
      1 parameters
      4 conditional paths
   function loadAllHeaderListsAndDependencies() in line 89
      protection public
      31 lines of code
      0 parameters
      7 conditional paths
      uses variable InputFilePaths defined in Modularize::ModularizeUtilities
      uses function begin() defined in std::vector
      uses function end() defined in std::vector
      uses function loadModuleMap(llvm::StringRef) defined in Modularize::ModularizeUtilities
      uses function loadSingleHeaderListsAndDependencies(llvm::StringRef) defined in Modularize::ModularizeUtilities
      uses variable ProblemFilesPath defined in Modularize::ModularizeUtilities
      uses function loadProblemHeaderList(llvm::StringRef) defined in Modularize::ModularizeUtilities
   function loadModuleMap(llvm::StringRef) in line 147
      58 lines of code
      1 parameters
      7 conditional paths
      uses variable SourceMgr defined in Modularize::ModularizeUtilities
      uses variable DC defined in Modularize::ModularizeUtilities
      uses variable LangOpts defined in Modularize::ModularizeUtilities
      uses variable FileMgr defined in Modularize::ModularizeUtilities
      uses macro definition assert defined in misc-assert-side-effect.cpp
      uses function reset(T *) defined in std::unique_ptr
      uses variable Diagnostics defined in Modularize::ModularizeUtilities
      uses variable Target defined in Modularize::ModularizeUtilities
      uses variable HeaderInfo defined in Modularize::ModularizeUtilities
      uses variable MissingHeaderCount defined in Modularize::ModularizeUtilities
      uses function collectModuleMapHeaders(clang::ModuleMap *) defined in Modularize::ModularizeUtilities
      uses function get() defined in std::unique_ptr
      uses variable ModuleMaps defined in Modularize::ModularizeUtilities
      uses variable HasModuleMap defined in Modularize::ModularizeUtilities
   function loadProblemHeaderList(llvm::StringRef) in line 141
      50 lines of code
      1 parameters
      7 conditional paths
      uses variable HeaderPrefix defined in Modularize::ModularizeUtilities
      uses variable Strings defined in PreprocessorTracker.cpp
      uses variable Line defined in PreprocessorTracker.cpp
      uses function getCanonicalPath(llvm::StringRef) defined in Modularize::ModularizeUtilities
      uses variable ProblemFileNames defined in Modularize::ModularizeUtilities
   function loadSingleHeaderListsAndDependencies(llvm::StringRef) in line 135
      71 lines of code
      1 parameters
      10 conditional paths
      uses variable HeaderPrefix defined in Modularize::ModularizeUtilities
      uses variable Strings defined in PreprocessorTracker.cpp
      uses variable Line defined in PreprocessorTracker.cpp
      uses function getCanonicalPath(llvm::StringRef) defined in Modularize::ModularizeUtilities
      uses variable HeaderFileNames defined in Modularize::ModularizeUtilities
      uses variable Dependencies defined in Modularize::ModularizeUtilities
   function ModularizeUtilities(std::vector< std::string > &,llvm::StringRef,llvm::StringRef) in line 73
      protection public
      22 lines of code
      3 parameters
      1 conditional paths
   variable DC in line 204
      protection public
   variable Dependencies in line 54
      protection public
   variable DiagIDs in line 200
      protection public
   variable DiagnosticOpts in line 202
      protection public
   variable Diagnostics in line 206
      protection public
   variable FileMgr in line 214
      protection public
   variable FileSystemOpts in line 212
      protection public
   variable GoodFileNames in line 61
      protection public
   variable HasModuleMap in line 56
      protection public
   variable HeaderFileNames in line 52
      protection public
   variable HeaderInfo in line 220
      protection public
   variable HeaderPrefix in line 45
      protection public
   variable HeaderSearchOpts in line 218
      protection public
   variable InputFilePaths in line 43
      protection public
   variable LangOpts in line 198
      protection public
   variable MissingHeaderCount in line 58
      protection public
   variable ModuleMaps in line 222
      protection public
   variable ProblemFileNames in line 63
      protection public
   variable ProblemFilesPath in line 47
      protection public
   variable SourceMgr in line 216
      protection public
   variable Target in line 210
      protection public
   variable TargetOpts in line 208
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/modularize/ModuleAssistant.cpp
module ModuleAssistant.cpp
   variable ReservedNames in line 140
      protection public
   function ensureNoCollisionWithReservedName(llvm::StringRef) in line 149
      protection public
      10 lines of code
      1 parameters
      3 conditional paths
      uses variable ReservedNames defined in ModuleAssistant.cpp
   function addModuleDescription(Module *,llvm::StringRef,llvm::StringRef,DependencyMap &,bool) in line 161
      protection public
      48 lines of code
      5 parameters
      6 conditional paths
      uses variable Dependencies defined in Modularize::ModularizeUtilities
      uses variable HeaderPrefix defined in Modularize::ModularizeUtilities
      uses function begin(const MyArray &) defined in free_begin_end_fail.cpp
      uses function end(const MyArray &) defined in free_begin_end_fail.cpp
      uses function ensureNoCollisionWithReservedName(llvm::StringRef) defined in ModuleAssistant.cpp
   function loadModuleDescriptions(llvm::StringRef,llvm::ArrayRef< std::string >,llvm::ArrayRef< std::string >,DependencyMap &,llvm::StringRef) in line 211
      protection public
      34 lines of code
      5 parameters
      6 conditional paths
      uses variable HeaderPrefix defined in Modularize::ModularizeUtilities
      uses variable HeaderFileNames defined in Modularize::ModularizeUtilities
      uses variable ProblemFileNames defined in Modularize::ModularizeUtilities
      uses function addModuleDescription(Module *,llvm::StringRef,llvm::StringRef,DependencyMap &,bool) defined in ModuleAssistant.cpp
      uses variable Dependencies defined in Modularize::ModularizeUtilities
   function writeModuleMap(llvm::StringRef,llvm::StringRef,Module *) in line 247
      protection public
      42 lines of code
      3 parameters
      4 conditional paths
      uses variable HeaderPrefix defined in Modularize::ModularizeUtilities
      uses variable Argv0 defined in Modularize.cpp
      uses variable CommandLine defined in Modularize.cpp
   function createModuleMap(llvm::StringRef,llvm::ArrayRef< std::string >,llvm::ArrayRef< std::string >,DependencyMap &,llvm::StringRef,llvm::StringRef) in line 293
      protection public
      16 lines of code
      6 parameters
      2 conditional paths
      uses function loadModuleDescriptions(llvm::StringRef,llvm::ArrayRef< std::string >,llvm::ArrayRef< std::string >,DependencyMap &,llvm::StringRef) defined in ModuleAssistant.cpp
      uses variable HeaderFileNames defined in Modularize::ModularizeUtilities
      uses variable ProblemFileNames defined in Modularize::ModularizeUtilities
      uses variable Dependencies defined in Modularize::ModularizeUtilities
      uses variable HeaderPrefix defined in Modularize::ModularizeUtilities
      uses function writeModuleMap(llvm::StringRef,llvm::StringRef,Module *) defined in ModuleAssistant.cpp
module @173::Module
   variable HeaderFileNames in line 56
      protection public
   variable IsProblem in line 58
      protection public
   variable Name in line 55
      protection public
   variable SubModules in line 57
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/modularize/PreprocessorTracker.cpp
module PreprocessorTracker.cpp
   typedef StringHandle in line 259
      protection public
   typedef HeaderHandle in line 261
      protection public
   typedef InclusionPathHandle in line 264
      protection public
   variable HeaderHandleInvalid in line 262
      protection public
   variable InclusionPathHandleInvalid in line 265
      protection public
   variable Name in line 525
      protection public
   variable File in line 526
      protection public
   variable Line in line 527
      protection public
   variable Column in line 528
      protection public
   variable Path in line 538
      protection public
   variable MacroExpanded in line 577
      protection public
   variable DefinitionLocation in line 579
      protection public
   variable DefinitionSourceLine in line 581
      protection public
   variable InclusionPathHandles in line 583
      protection public
   variable MacroUnexpanded in line 637
      protection public
   variable InstanceSourceLine in line 639
      protection public
   variable MacroExpansionInstances in line 643
      protection public
   variable ConditionValue in line 678
      protection public
   variable DirectiveKind in line 727
      protection public
   variable ConditionUnexpanded in line 729
      protection public
   variable ConditionalExpansionInstances in line 733
      protection public
   variable PPTracker in line 781
   variable PP in line 782
   variable RootHeaderFile in line 783
   variable HeaderList in line 1271
   variable BlockCheckHeaderListOnly in line 1273
   variable Strings in line 1274
   variable HeaderPaths in line 1275
   variable HeaderStack in line 1276
   variable InclusionPaths in line 1277
   variable CurrentInclusionPathHandle in line 1278
   variable HeadersInThisCompile in line 1279
   variable IncludeDirectives in line 1280
   variable MacroExpansions in line 1281
   variable ConditionalExpansions in line 1282
   variable InNestedHeader in line 1283
   function getSourceLocationString(clang::Preprocessor &,clang::SourceLocation) in line 270
      protection public
      7 lines of code
      2 parameters
      2 conditional paths
      uses variable Loc defined in IncludeOrderCheck.cpp
      uses variable PP defined in PreprocessorTracker.cpp
   function getSourceLocationFile(clang::Preprocessor &,clang::SourceLocation) in line 279
      protection public
      8 lines of code
      2 parameters
      2 conditional paths
      uses function getSourceLocationString(clang::Preprocessor &,clang::SourceLocation) defined in PreprocessorTracker.cpp
      uses variable PP defined in PreprocessorTracker.cpp
      uses variable Loc defined in IncludeOrderCheck.cpp
   function getSourceLocationLineAndColumn(clang::Preprocessor &,clang::SourceLocation,int &,int &) in line 289
      protection public
      12 lines of code
      4 parameters
      2 conditional paths
      uses variable PP defined in PreprocessorTracker.cpp
      uses variable Loc defined in IncludeOrderCheck.cpp
      uses variable Line defined in PreprocessorTracker.cpp
      uses variable Column defined in PreprocessorTracker.cpp
   function getSourceString(clang::Preprocessor &,clang::SourceRange) in line 303
      protection public
      9 lines of code
      2 parameters
      1 conditional paths
      uses variable Range defined in IncludeOrderCheck.cpp
      uses variable PP defined in PreprocessorTracker.cpp
   function getSourceLine(clang::Preprocessor &,clang::SourceLocation) in line 314
      protection public
      24 lines of code
      2 parameters
      5 conditional paths
      uses variable PP defined in PreprocessorTracker.cpp
      uses variable Loc defined in IncludeOrderCheck.cpp
   function getSourceLine(clang::Preprocessor &,clang::FileID,int) in line 340
      protection public
      31 lines of code
      3 parameters
      7 conditional paths
      uses variable PP defined in PreprocessorTracker.cpp
      uses variable Line defined in PreprocessorTracker.cpp
   function getMacroUnexpandedString(clang::SourceRange,clang::Preprocessor &,llvm::StringRef,const clang::MacroInfo *) in line 377
      protection public
      16 lines of code
      4 parameters
      2 conditional paths
      uses variable Range defined in IncludeOrderCheck.cpp
      uses variable PP defined in PreprocessorTracker.cpp
   function getMacroExpandedString(clang::Preprocessor &,llvm::StringRef,const clang::MacroInfo *,const clang::MacroArgs *) in line 402
      protection public
      56 lines of code
      4 parameters
      19 conditional paths
      uses variable PP defined in PreprocessorTracker.cpp
      uses variable Name defined in PreprocessorTracker.cpp
      uses variable File defined in PreprocessorTracker.cpp
      uses variable Loc defined in IncludeOrderCheck.cpp
      uses function getSourceLocationLineAndColumn(clang::Preprocessor &,clang::SourceLocation,int &,int &) defined in PreprocessorTracker.cpp
      uses variable Line defined in PreprocessorTracker.cpp
      uses variable Column defined in PreprocessorTracker.cpp
      uses variable HeaderHandleInvalid defined in PreprocessorTracker.cpp
      uses function operator==(const Range &,const Range &) defined in ReformattingTest.cpp
module Modularize::@174::PPItemKey
   variable Column in line 528
      protection public
   variable File in line 526
      protection public
   variable Line in line 527
      protection public
   variable Name in line 525
      protection public
module Modularize::@174::HeaderInclusionPath
   variable Path in line 538
      protection public
module Modularize::@174::MacroExpansionInstance
   variable DefinitionLocation in line 579
      protection public
   variable DefinitionSourceLine in line 581
      protection public
   variable InclusionPathHandles in line 583
      protection public
   variable MacroExpanded in line 577
      protection public
module Modularize::@174::MacroExpansionTracker
   variable InstanceSourceLine in line 639
      protection public
   variable MacroExpansionInstances in line 643
      protection public
   variable MacroUnexpanded in line 637
      protection public
module Modularize::@174::ConditionalExpansionInstance
   variable ConditionValue in line 678
      protection public
   variable InclusionPathHandles in line 680
      protection public
module Modularize::@174::ConditionalTracker
   variable ConditionalExpansionInstances in line 733
      protection public
   variable ConditionUnexpanded in line 729
      protection public
   variable DirectiveKind in line 727
      protection public
module Modularize::@174::PreprocessorCallbacks
   variable PP in line 782
   variable PPTracker in line 781
   variable RootHeaderFile in line 783
module Modularize::@174::PreprocessorTrackerImpl
   variable BlockCheckHeaderListOnly in line 1273
   variable ConditionalExpansions in line 1282
   variable CurrentInclusionPathHandle in line 1278
   variable HeaderList in line 1271
   variable HeaderPaths in line 1275
   variable HeadersInThisCompile in line 1279
   variable HeaderStack in line 1276
   variable IncludeDirectives in line 1280
   variable InclusionPaths in line 1277
   variable InNestedHeader in line 1283
   variable MacroExpansions in line 1281
   variable Strings in line 1274
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/modularize/PreprocessorTracker.h
module Modularize::PreprocessorTracker
   abstract class
   function checkForIncludesInBlock(clang::Preprocessor &,clang::SourceRange,const char *,llvm::raw_ostream &) in line 66
      protection public
      1 lines of code
      4 parameters
      1 conditional paths
   function create(llvm::SmallVector< std::string, 32 > &,bool) in line 80
      protection public
      5 lines of code
      2 parameters
      7 conditional paths
      uses variable IsAngled defined in IncludeOrderCheck.cpp
      uses variable File defined in PreprocessorTracker.cpp
      uses variable PP defined in PreprocessorTracker.cpp
      uses variable PPTracker defined in PreprocessorTracker.cpp
      uses variable Loc defined in IncludeOrderCheck.cpp
      uses variable Range defined in IncludeOrderCheck.cpp
   function handleIncludeDirective(llvm::StringRef,int,int,llvm::StringRef) in line 59
      protection public
      1 lines of code
      4 parameters
      1 conditional paths
   function handlePreprocessorEntry(clang::Preprocessor &,llvm::StringRef) in line 48
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function handlePreprocessorExit() in line 53
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function reportInconsistentConditionals(llvm::raw_ostream &) in line 77
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function reportInconsistentMacros(llvm::raw_ostream &) in line 73
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ~PreprocessorTracker() in line 44
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/pp-trace/PPCallbacksTracker.cpp
module PPCallbacksTracker.cpp
   variable FileChangeReasonStrings in line 59
      protection public
   variable CharacteristicKindStrings in line 64
      protection public
   variable MacroDirectiveKindStrings in line 68
      protection public
   variable PragmaIntroducerKindStrings in line 72
      protection public
   variable PragmaMessageKindStrings in line 77
      protection public
   variable ConditionValueKindStrings in line 81
      protection public
   variable MappingStrings in line 85
      protection public
   function getSourceLocationString(clang::Preprocessor &,clang::SourceLocation) in line 26
      protection public
      29 lines of code
      2 parameters
      4 conditional paths
      uses variable Loc defined in IncludeOrderCheck.cpp
      uses variable PP defined in MacroParenthesesCheck.cpp
      uses variable Result defined in USRFinder.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/pp-trace/PPCallbacksTracker.h
module Argument
   function Argument(llvm::StringRef,llvm::StringRef) in line 32
      protection public
      2 lines of code
      2 parameters
      1 conditional paths
   function Argument() in line 34
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   variable Name in line 36
      protection public
   variable Value in line 37
      protection public
module CallbackCall
   function CallbackCall(llvm::StringRef) in line 44
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function CallbackCall() in line 45
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   variable Arguments in line 48
      protection public
   variable Name in line 47
      protection public
module PPCallbacksTracker
   inherits from clang::PPCallbacks
   function append(const char *) in line 161
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function appendArgument(const char *,bool) in line 164
      protection public
      3 lines of code
      2 parameters
      1 conditional paths
      uses variable Name defined in PreprocessorTracker.cpp
   function appendArgument(const char *,int) in line 167
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
      uses function appendArgument(const char *,bool) defined in PPCallbacksTracker
      uses variable Name defined in PreprocessorTracker.cpp
   function appendArgument(const char *,const char *) in line 170
      protection public
      5 lines of code
      2 parameters
      2 conditional paths
      uses variable DisableTrace defined in PPCallbacksTracker
      uses variable CallbackCalls defined in PPCallbacksTracker
      uses variable Name defined in PreprocessorTracker.cpp
   function appendArgument(const char *,llvm::StringRef) in line 173
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function appendArgument(const char *,bool) defined in PPCallbacksTracker
      uses variable Name defined in PreprocessorTracker.cpp
   function appendArgument(const char *,const std::string &) in line 176
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function appendArgument(const char *,bool) defined in PPCallbacksTracker
      uses variable Name defined in PreprocessorTracker.cpp
   function appendArgument(const char *,const clang::Token &) in line 179
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function appendArgument(const char *,bool) defined in PPCallbacksTracker
      uses variable Name defined in PreprocessorTracker.cpp
      uses variable PP defined in PPCallbacksTracker
   function appendArgument(const char *,int,const char *) in line 182
      protection public
      4 lines of code
      3 parameters
      1 conditional paths
      uses function appendArgument(const char *,bool) defined in PPCallbacksTracker
      uses variable Name defined in PreprocessorTracker.cpp
      uses variable Strings defined in PreprocessorTracker.cpp
   function appendArgument(const char *,clang::FileID) in line 185
      protection public
      13 lines of code
      2 parameters
      3 conditional paths
      uses function appendArgument(const char *,bool) defined in PPCallbacksTracker
      uses variable Name defined in PreprocessorTracker.cpp
      uses variable PP defined in PPCallbacksTracker
      uses function appendFilePathArgument(const char *,llvm::StringRef) defined in PPCallbacksTracker
   function appendArgument(const char *,const clang::FileEntry *) in line 188
      protection public
      8 lines of code
      2 parameters
      2 conditional paths
      uses function appendArgument(const char *,bool) defined in PPCallbacksTracker
      uses variable Name defined in PreprocessorTracker.cpp
      uses function appendFilePathArgument(const char *,llvm::StringRef) defined in PPCallbacksTracker
   function appendArgument(const char *,clang::SourceLocation) in line 191
      protection public
      8 lines of code
      2 parameters
      2 conditional paths
      uses function appendArgument(const char *,bool) defined in PPCallbacksTracker
      uses variable Name defined in PreprocessorTracker.cpp
      uses variable PP defined in PPCallbacksTracker
   function appendArgument(const char *,clang::SourceRange) in line 194
      protection public
      14 lines of code
      2 parameters
      3 conditional paths
      uses variable DisableTrace defined in PPCallbacksTracker
      uses function appendArgument(const char *,bool) defined in PPCallbacksTracker
      uses variable Name defined in PreprocessorTracker.cpp
      uses variable PP defined in PPCallbacksTracker
   function appendArgument(const char *,clang::CharSourceRange) in line 197
      protection public
      8 lines of code
      2 parameters
      2 conditional paths
      uses function appendArgument(const char *,bool) defined in PPCallbacksTracker
      uses variable Name defined in PreprocessorTracker.cpp
      uses function getSourceString(clang::CharSourceRange) defined in PPCallbacksTracker
   function appendArgument(const char *,clang::ModuleIdPath) in line 200
      protection public
      17 lines of code
      2 parameters
      4 conditional paths
      uses variable DisableTrace defined in PPCallbacksTracker
      uses variable PP defined in PPCallbacksTracker
      uses function appendArgument(const char *,bool) defined in PPCallbacksTracker
      uses variable Name defined in PreprocessorTracker.cpp
   function appendArgument(const char *,const clang::IdentifierInfo *) in line 203
      protection public
      8 lines of code
      2 parameters
      2 conditional paths
      uses function appendArgument(const char *,bool) defined in PPCallbacksTracker
      uses variable Name defined in PreprocessorTracker.cpp
   function appendArgument(const char *,const clang::MacroDirective *) in line 206
      protection public
      8 lines of code
      2 parameters
      2 conditional paths
      uses function appendArgument(const char *,bool) defined in PPCallbacksTracker
      uses variable Name defined in PreprocessorTracker.cpp
   function appendArgument(const char *,const clang::MacroDefinition &) in line 209
      protection public
      17 lines of code
      2 parameters
      4 conditional paths
      uses function appendArgument(const char *,bool) defined in PPCallbacksTracker
      uses variable Name defined in PreprocessorTracker.cpp
   function appendArgument(const char *,const clang::MacroArgs *) in line 212
      protection public
      37 lines of code
      2 parameters
      7 conditional paths
      uses function appendArgument(const char *,bool) defined in PPCallbacksTracker
      uses variable Name defined in PreprocessorTracker.cpp
      uses variable PP defined in PPCallbacksTracker
   function appendArgument(const char *,const clang::Module *) in line 215
      protection public
      8 lines of code
      2 parameters
      2 conditional paths
      uses function appendArgument(const char *,bool) defined in PPCallbacksTracker
      uses variable Name defined in PreprocessorTracker.cpp
   function appendFilePathArgument(const char *,llvm::StringRef) in line 221
      protection public
      7 lines of code
      2 parameters
      1 conditional paths
      uses variable Path defined in PreprocessorTracker.cpp
      uses function appendQuotedArgument(const char *,const std::string &) defined in PPCallbacksTracker
      uses variable Name defined in PreprocessorTracker.cpp
   function appendQuotedArgument(const char *,const std::string &) in line 218
      protection public
      7 lines of code
      2 parameters
      1 conditional paths
      uses function appendArgument(const char *,bool) defined in PPCallbacksTracker
      uses variable Name defined in PreprocessorTracker.cpp
   function beginCallback(const char *) in line 158
      protection public
      6 lines of code
      1 parameters
      2 conditional paths
      uses variable DisableTrace defined in PPCallbacksTracker
      uses variable Ignore defined in PPCallbacksTracker
      uses variable Name defined in PreprocessorTracker.cpp
      uses variable CallbackCalls defined in PPCallbacksTracker
   function Defined(const clang::Token &,const clang::MacroDefinition &,clang::SourceRange) in line 138
      protection public
      8 lines of code
      3 parameters
      1 conditional paths
      uses function beginCallback(const char *) defined in PPCallbacksTracker
      uses function appendArgument(const char *,bool) defined in PPCallbacksTracker
      uses variable Range defined in IncludeOrderCheck.cpp
   function Elif(clang::SourceLocation,clang::SourceRange,ConditionValueKind,clang::SourceLocation) in line 144
      protection public
      10 lines of code
      4 parameters
      1 conditional paths
      uses function beginCallback(const char *) defined in PPCallbacksTracker
      uses function appendArgument(const char *,bool) defined in PPCallbacksTracker
      uses variable Loc defined in IncludeOrderCheck.cpp
      uses variable ConditionValue defined in PreprocessorTracker.cpp
   function Else(clang::SourceLocation,clang::SourceLocation) in line 150
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
      uses function beginCallback(const char *) defined in PPCallbacksTracker
      uses function appendArgument(const char *,bool) defined in PPCallbacksTracker
      uses variable Loc defined in IncludeOrderCheck.cpp
   function Endif(clang::SourceLocation,clang::SourceLocation) in line 152
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
      uses function beginCallback(const char *) defined in PPCallbacksTracker
      uses function appendArgument(const char *,bool) defined in PPCallbacksTracker
      uses variable Loc defined in IncludeOrderCheck.cpp
   function EndOfMainFile() in line 102
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
      uses function beginCallback(const char *) defined in PPCallbacksTracker
   function FileChanged(clang::SourceLocation,clang::PPCallbacks::FileChangeReason,clang::SrcMgr::CharacteristicKind,clang::FileID) in line 83
      protection public
      9 lines of code
      4 parameters
      1 conditional paths
      uses function beginCallback(const char *) defined in PPCallbacksTracker
      uses function appendArgument(const char *,bool) defined in PPCallbacksTracker
      uses variable Loc defined in IncludeOrderCheck.cpp
   function FileNotFound(llvm::StringRef,llvm::SmallVectorImpl< char > &) in line 90
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
      uses function beginCallback(const char *) defined in PPCallbacksTracker
      uses function appendFilePathArgument(const char *,llvm::StringRef) defined in PPCallbacksTracker
   function FileSkipped(const clang::FileEntry &,const clang::Token &,clang::SrcMgr::CharacteristicKind) in line 87
      protection public
      8 lines of code
      3 parameters
      1 conditional paths
      uses function beginCallback(const char *) defined in PPCallbacksTracker
      uses function appendArgument(const char *,bool) defined in PPCallbacksTracker
   function getSourceString(clang::CharSourceRange) in line 224
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable PP defined in PPCallbacksTracker
      uses variable Range defined in IncludeOrderCheck.cpp
   function Ident(clang::SourceLocation,llvm::StringRef) in line 103
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses function beginCallback(const char *) defined in PPCallbacksTracker
      uses function appendArgument(const char *,bool) defined in PPCallbacksTracker
      uses variable Loc defined in IncludeOrderCheck.cpp
   function If(clang::SourceLocation,clang::SourceRange,ConditionValueKind) in line 142
      protection public
      8 lines of code
      3 parameters
      1 conditional paths
      uses function beginCallback(const char *) defined in PPCallbacksTracker
      uses function appendArgument(const char *,bool) defined in PPCallbacksTracker
      uses variable Loc defined in IncludeOrderCheck.cpp
      uses variable ConditionValue defined in PreprocessorTracker.cpp
   function Ifdef(clang::SourceLocation,const clang::Token &,const clang::MacroDefinition &) in line 146
      protection public
      8 lines of code
      3 parameters
      1 conditional paths
      uses function beginCallback(const char *) defined in PPCallbacksTracker
      uses function appendArgument(const char *,bool) defined in PPCallbacksTracker
      uses variable Loc defined in IncludeOrderCheck.cpp
   function Ifndef(clang::SourceLocation,const clang::Token &,const clang::MacroDefinition &) in line 148
      protection public
      8 lines of code
      3 parameters
      1 conditional paths
      uses function beginCallback(const char *) defined in PPCallbacksTracker
      uses function appendArgument(const char *,bool) defined in PPCallbacksTracker
      uses variable Loc defined in IncludeOrderCheck.cpp
   function InclusionDirective(clang::SourceLocation,const clang::Token &,llvm::StringRef,bool,clang::CharSourceRange,const clang::FileEntry *,llvm::StringRef,llvm::StringRef,const clang::Module *) in line 92
      protection public
      16 lines of code
      9 parameters
      1 conditional paths
      uses function beginCallback(const char *) defined in PPCallbacksTracker
      uses function appendArgument(const char *,bool) defined in PPCallbacksTracker
      uses function appendFilePathArgument(const char *,llvm::StringRef) defined in PPCallbacksTracker
      uses variable IsAngled defined in IncludeOrderCheck.cpp
      uses variable File defined in PreprocessorTracker.cpp
   function MacroDefined(const clang::Token &,const clang::MacroDirective *) in line 134
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
      uses function beginCallback(const char *) defined in PPCallbacksTracker
      uses function appendArgument(const char *,bool) defined in PPCallbacksTracker
   function MacroExpands(const clang::Token &,const clang::MacroDefinition &,clang::SourceRange,const clang::MacroArgs *) in line 131
      protection public
      10 lines of code
      4 parameters
      1 conditional paths
      uses function beginCallback(const char *) defined in PPCallbacksTracker
      uses function appendArgument(const char *,bool) defined in PPCallbacksTracker
      uses variable Range defined in IncludeOrderCheck.cpp
   function MacroUndefined(const clang::Token &,const clang::MacroDefinition &) in line 136
      protection public
      7 lines of code
      2 parameters
      1 conditional paths
      uses function beginCallback(const char *) defined in PPCallbacksTracker
      uses function appendArgument(const char *,bool) defined in PPCallbacksTracker
   function moduleImport(clang::SourceLocation,clang::ModuleIdPath,const clang::Module *) in line 100
      protection public
      8 lines of code
      3 parameters
      1 conditional paths
      uses function beginCallback(const char *) defined in PPCallbacksTracker
      uses function appendArgument(const char *,bool) defined in PPCallbacksTracker
      uses variable Path defined in PreprocessorTracker.cpp
   function PragmaComment(clang::SourceLocation,const clang::IdentifierInfo *,llvm::StringRef) in line 106
      protection public
      8 lines of code
      3 parameters
      1 conditional paths
      uses function beginCallback(const char *) defined in PPCallbacksTracker
      uses function appendArgument(const char *,bool) defined in PPCallbacksTracker
      uses variable Loc defined in IncludeOrderCheck.cpp
   function PragmaDebug(clang::SourceLocation,llvm::StringRef) in line 111
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
      uses function beginCallback(const char *) defined in PPCallbacksTracker
      uses function appendArgument(const char *,bool) defined in PPCallbacksTracker
      uses variable Loc defined in IncludeOrderCheck.cpp
   function PragmaDetectMismatch(clang::SourceLocation,llvm::StringRef,llvm::StringRef) in line 109
      protection public
      8 lines of code
      3 parameters
      1 conditional paths
      uses function beginCallback(const char *) defined in PPCallbacksTracker
      uses function appendArgument(const char *,bool) defined in PPCallbacksTracker
      uses variable Loc defined in IncludeOrderCheck.cpp
      uses variable Name defined in PreprocessorTracker.cpp
   function PragmaDiagnostic(clang::SourceLocation,llvm::StringRef,clang::diag::Severity,llvm::StringRef) in line 120
      protection public
      10 lines of code
      4 parameters
      1 conditional paths
      uses function beginCallback(const char *) defined in PPCallbacksTracker
      uses function appendArgument(const char *,bool) defined in PPCallbacksTracker
      uses variable Loc defined in IncludeOrderCheck.cpp
   function PragmaDiagnosticPop(clang::SourceLocation,llvm::StringRef) in line 118
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
      uses function beginCallback(const char *) defined in PPCallbacksTracker
      uses function appendArgument(const char *,bool) defined in PPCallbacksTracker
      uses variable Loc defined in IncludeOrderCheck.cpp
   function PragmaDiagnosticPush(clang::SourceLocation,llvm::StringRef) in line 116
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
      uses function beginCallback(const char *) defined in PPCallbacksTracker
      uses function appendArgument(const char *,bool) defined in PPCallbacksTracker
      uses variable Loc defined in IncludeOrderCheck.cpp
   function PragmaDirective(clang::SourceLocation,clang::PragmaIntroducerKind) in line 104
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
      uses function beginCallback(const char *) defined in PPCallbacksTracker
      uses function appendArgument(const char *,bool) defined in PPCallbacksTracker
      uses variable Loc defined in IncludeOrderCheck.cpp
   function PragmaMessage(clang::SourceLocation,llvm::StringRef,clang::PPCallbacks::PragmaMessageKind,llvm::StringRef) in line 113
      protection public
      9 lines of code
      4 parameters
      1 conditional paths
      uses function beginCallback(const char *) defined in PPCallbacksTracker
      uses function appendArgument(const char *,bool) defined in PPCallbacksTracker
      uses variable Loc defined in IncludeOrderCheck.cpp
   function PragmaOpenCLExtension(clang::SourceLocation,const clang::IdentifierInfo *,clang::SourceLocation,unsigned) in line 123
      protection public
      9 lines of code
      4 parameters
      1 conditional paths
      uses function beginCallback(const char *) defined in PPCallbacksTracker
      uses function appendArgument(const char *,bool) defined in PPCallbacksTracker
      uses variable Name defined in PreprocessorTracker.cpp
   function PragmaWarning(clang::SourceLocation,llvm::StringRef,llvm::ArrayRef< int >) in line 127
      protection public
      18 lines of code
      3 parameters
      3 conditional paths
      uses function beginCallback(const char *) defined in PPCallbacksTracker
      uses function appendArgument(const char *,bool) defined in PPCallbacksTracker
      uses variable Loc defined in IncludeOrderCheck.cpp
      uses variable i defined in pp-trace-macro.cpp
   function PragmaWarningPop(clang::SourceLocation) in line 130
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function beginCallback(const char *) defined in PPCallbacksTracker
      uses function appendArgument(const char *,bool) defined in PPCallbacksTracker
      uses variable Loc defined in IncludeOrderCheck.cpp
   function PragmaWarningPush(clang::SourceLocation,int) in line 129
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
      uses function beginCallback(const char *) defined in PPCallbacksTracker
      uses function appendArgument(const char *,bool) defined in PPCallbacksTracker
      uses variable Loc defined in IncludeOrderCheck.cpp
   function SourceRangeSkipped(clang::SourceRange) in line 141
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function beginCallback(const char *) defined in PPCallbacksTracker
      uses function appendArgument(const char *,bool) defined in PPCallbacksTracker
      uses variable Range defined in IncludeOrderCheck.cpp
   function PPCallbacksTracker(llvm::SmallSet< std::string, 4 > &,std::vector< CallbackCall > &,clang::Preprocessor &) in line 75
      protection public
      4 lines of code
      3 parameters
      1 conditional paths
   function ~PPCallbacksTracker() in line 79
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   variable CallbackCalls in line 229
      protection public
   variable DisableTrace in line 235
      protection public
   variable Ignore in line 232
      protection public
   variable PP in line 237
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/pp-trace/PPTrace.cpp
module PPTrace.cpp
   function SourcePaths(cl::Positional,cl::desc("<source0> [... <sourceN>]"),cl::OneOrMore) in line 85
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function IgnoreCallbacks("ignore",cl::init(""),cl::desc("Ignore callbacks, i.e. \"Callback1, Callback2...\".")) in line 90
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function OutputFileName("output",cl::init(""),cl::desc("Output trace to the given file name or '-' for stdout.")) in line 95
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function CC1Arguments(cl::ConsumeAfter,cl::desc("<arguments to be passed to front end>...")) in line 101
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function outputPPTrace(std::vector< CallbackCall > &,llvm::raw_ostream &) in line 153
      protection public
      24 lines of code
      2 parameters
      3 conditional paths
      uses function begin() defined in std::vector
      uses function end() defined in std::vector
      uses variable Name defined in CallbackCall
      uses variable Arguments defined in CallbackCall
      uses variable Name defined in Argument
      uses variable Value defined in Argument
   function main(int,const char **) in line 179
      protection public
      56 lines of code
      2 parameters
      6 conditional paths
      uses function IgnoreCallbacks("ignore",cl::init(""),cl::desc("Ignore callbacks, i.e. \"Callback1, Callback2...\".")) defined in PPTrace.cpp
      uses function reset(T *) defined in std::unique_ptr
      uses function CC1Arguments(cl::ConsumeAfter,cl::desc("<arguments to be passed to front end>...")) defined in PPTrace.cpp
      uses function SourcePaths(cl::Positional,cl::desc("<source0> [... <sourceN>]"),cl::OneOrMore) defined in PPTrace.cpp
      uses function OutputFileName("output",cl::init(""),cl::desc("Output trace to the given file name or '-' for stdout.")) defined in PPTrace.cpp
      uses function outputPPTrace(std::vector< CallbackCall > &,llvm::raw_ostream &) defined in PPTrace.cpp
module @178::PPTraceConsumer
module @178::PPTraceAction
   variable CallbackCalls in line 133
   variable Ignore in line 132
module @178::PPTraceFrontendActionFactory
   variable CallbackCalls in line 148
   variable Ignore in line 147
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/clang-apply-replacements/basic.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/clang-modernize/AddOverride/basic.cpp
module clang-modernize/AddOverride/basic.cpp
   macro definition LLVM_OVERRIDE in line 102
      protection public
   variable b in line 121
      protection public
   variable d1 in line 150
      protection public
   variable d2 in line 151
      protection public
module A
   abstract class
   function clone() in line 8
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function clone() in line 47
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function f() in line 6
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function f() in line 11
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function f() in line 14
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function g() in line 7
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function h() in line 12
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function i() in line 14
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function method() in line 30
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function operator=(A &&) in line 7
      1 lines of code
      1 parameters
      1 conditional paths
   function ~A() in line 9
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function A(const Movable &) in line 22
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function A(T *) in line 11
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function A(T) in line 4
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 19
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 24
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 10
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 13
      1 lines of code
      1 parameters
      1 conditional paths
   function A() in line 37
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function A(int,int) in line 38
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function A(void *) in line 40
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function A(void *,void *) in line 41
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function A(const A &) in line 43
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 47
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function A(double,double) in line 51
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function A(T &&...) in line 56
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 18
      1 lines of code
      1 parameters
      1 conditional paths
   function A(A &&) in line 5
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 3
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 11
      1 lines of code
      1 parameters
      1 conditional paths
   variable ee in line 149
      protection public
   variable field in line 26
      protection public
   variable foo in line 6
      protection public
   variable M in line 25
      protection public
   variable Ptr in line 19
      protection public
   variable s in line 15
      protection public
module B
   inherits from A< E1 >
   inherits from A
   inherits from A
   inherits from A
   inherits from A
   function clone() in line 11
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
      uses function clone() defined in A
   function clone() in line 53
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function create() in line 38
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function f() in line 20
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function g() in line 14
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function method() in line 35
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function placeholder_for_f() in line 11
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function B(const Movable &) in line 31
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function B(std::initializer_list< int >) in line 62
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function B(const std::initializer_list< unsigned > &) in line 63
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function B(std::initializer_list< unsigned > &&) in line 64
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function B(::std::initializer_list< double >) in line 66
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function B(const ::std::initializer_list< char > &) in line 70
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function B(::std::initializer_list< char > &&) in line 74
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function B(int) in line 20
      1 lines of code
      1 parameters
      1 conditional paths
   function B(B &&) in line 13
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function B(int) in line 6
      1 lines of code
      1 parameters
      1 conditional paths
   variable kFalse in line 12
      protection public
   variable M in line 33
      protection public
   variable s in line 20
      protection public
module C
   inherits from B
   inherits from A
   abstract class
   function begin() in line 185
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function begin() in line 187
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function clone() in line 14
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function doLoop() in line 193
      protection public
      21 lines of code
      0 parameters
      6 conditional paths
      uses function begin() defined in C
      uses function end() defined in C
      uses function doSomething() defined in C
   function doLoop() in line 215
      protection public
      13 lines of code
      0 parameters
      4 conditional paths
      uses function begin() defined in C
      uses function end() defined in C
      uses function doSomething() defined in C
   function doSomething() in line 190
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function doSomething() in line 191
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function end() in line 186
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function end() in line 188
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function h() in line 27
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function C(const Movable &) in line 39
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses variable a defined in Movable
   function C(const Movable &,int) in line 43
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function C(initializer_list< int >) in line 82
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function C(const initializer_list< unsigned > &) in line 83
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function C(initializer_list< unsigned > &&) in line 84
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function C(int) in line 22
      1 lines of code
      1 parameters
      1 conditional paths
   function C(int) in line 9
      1 lines of code
      1 parameters
      1 conditional paths
   variable i in line 46
      protection public
   variable M in line 45
      protection public
   variable s in line 24
      protection public
module D
   inherits from C
   inherits from A
   function clone() in line 19
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function h() in line 36
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function D(const Movable &) in line 51
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function D(T) in line 110
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function D() in line 29
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   variable M in line 53
      protection public
   variable s in line 30
      protection public
   variable s2 in line 31
      protection public
module E
   inherits from A
   function h() in line 43
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function E(const Movable &) in line 60
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function E(T *) in line 115
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function E(U *) in line 119
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function E(T) in line 123
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function E(U) in line 125
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   variable M in line 62
      protection public
module F
   inherits from A
   function ~F() in line 52
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function F(const NotMovable &) in line 67
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   variable NM in line 69
      protection public
module G
   inherits from A
   function h() in line 59
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function i() in line 60
      protection public
      2 lines of code
      0 parameters
      1 conditional paths
   function G(const Movable &) in line 74
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   variable M in line 76
      protection public
module H
   inherits from A
   function h() in line 70
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function H(const ns_H::HMovable &) in line 86
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   variable M in line 88
      protection public
module I
   inherits from A
   function h() in line 77
      protection public
      2 lines of code
      0 parameters
      1 conditional paths
   function I(MOVABLE_PARAM(M)) in line 98
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   variable M in line 100
      protection public
module J
   inherits from A
   function h() in line 86
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function J(const T &) in line 106
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   variable M in line 108
      protection public
module K
   inherits from A
   function h() in line 97
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function K(const K_Movable &) in line 122
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   variable M in line 124
      protection public
module L
   inherits from A
   function h() in line 106
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function L(const Movable &) in line 128
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   variable M in line 130
      protection public
module M
   inherits from A
   function i() in line 115
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
module APure
   abstract class
   function clone() in line 125
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
module BPure
   inherits from APure
   function clone() in line 128
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
module CPure
   inherits from BPure
   abstract class
   function clone() in line 131
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
module DPure
   inherits from CPure
   function clone() in line 137
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
module Base1
   function f() in line 142
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
module Base2
   function a() in line 235
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function ~Base2() in line 234
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
      uses variable a defined in diagnostic.cpp
module Derived
   inherits from Base
   inherits from Base
   inherits from Base
   inherits from T
   inherits from Parent
   function f() in line 146
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function foo(int) in line 70
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function func() in line 12
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
      uses function ext(int(&),const Parent &) defined in clang-apply-replacements/Inputs/basic/basic.h
   function Derived() in line 46
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
module N
   inherits from A
   function h() in line 156
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function N(const Movable &) in line 136
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   variable A in line 140
      protection public
   variable M in line 139
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/clang-modernize/PassByValue/basic.cpp
module clang-modernize/PassByValue/basic.cpp
   macro definition MOVABLE_PARAM in line 95
      protection public
   typedef HMovable in line 83
      protection public
   typedef RMovable in line 172
      protection public
   variable GlobalObj in line 29
      protection public
   variable j1 in line 110
      protection public
   variable j2 in line 111
      protection public
   variable l in line 132
      protection public
module A
   abstract class
   function clone() in line 8
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function clone() in line 47
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function f() in line 6
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function f() in line 11
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function f() in line 14
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function g() in line 7
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function h() in line 12
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function i() in line 14
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function method() in line 30
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function operator=(A &&) in line 7
      1 lines of code
      1 parameters
      1 conditional paths
   function ~A() in line 9
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function A(const Movable &) in line 22
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function A(T *) in line 11
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function A(T) in line 4
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 19
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 24
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 10
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 13
      1 lines of code
      1 parameters
      1 conditional paths
   function A() in line 37
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function A(int,int) in line 38
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function A(void *) in line 40
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function A(void *,void *) in line 41
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function A(const A &) in line 43
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 47
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function A(double,double) in line 51
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function A(T &&...) in line 56
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 18
      1 lines of code
      1 parameters
      1 conditional paths
   function A(A &&) in line 5
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 3
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 11
      1 lines of code
      1 parameters
      1 conditional paths
   variable ee in line 149
      protection public
   variable field in line 26
      protection public
   variable foo in line 6
      protection public
   variable M in line 25
      protection public
   variable Ptr in line 19
      protection public
   variable s in line 15
      protection public
module B
   inherits from A< E1 >
   inherits from A
   inherits from A
   inherits from A
   inherits from A
   function clone() in line 11
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
      uses function clone() defined in A
   function clone() in line 53
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function create() in line 38
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function f() in line 20
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function g() in line 14
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function method() in line 35
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function placeholder_for_f() in line 11
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function B(const Movable &) in line 31
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function B(std::initializer_list< int >) in line 62
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function B(const std::initializer_list< unsigned > &) in line 63
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function B(std::initializer_list< unsigned > &&) in line 64
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function B(::std::initializer_list< double >) in line 66
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function B(const ::std::initializer_list< char > &) in line 70
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function B(::std::initializer_list< char > &&) in line 74
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function B(int) in line 20
      1 lines of code
      1 parameters
      1 conditional paths
   function B(B &&) in line 13
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function B(int) in line 6
      1 lines of code
      1 parameters
      1 conditional paths
   variable kFalse in line 12
      protection public
   variable M in line 33
      protection public
   variable s in line 20
      protection public
module C
   inherits from B
   inherits from A
   abstract class
   function begin() in line 185
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function begin() in line 187
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function clone() in line 14
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function doLoop() in line 193
      protection public
      21 lines of code
      0 parameters
      6 conditional paths
      uses function begin() defined in C
      uses function end() defined in C
      uses function doSomething() defined in C
   function doLoop() in line 215
      protection public
      13 lines of code
      0 parameters
      4 conditional paths
      uses function begin() defined in C
      uses function end() defined in C
      uses function doSomething() defined in C
   function doSomething() in line 190
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function doSomething() in line 191
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function end() in line 186
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function end() in line 188
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function h() in line 27
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function C(const Movable &) in line 39
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses variable a defined in Movable
   function C(const Movable &,int) in line 43
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function C(initializer_list< int >) in line 82
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function C(const initializer_list< unsigned > &) in line 83
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function C(initializer_list< unsigned > &&) in line 84
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function C(int) in line 22
      1 lines of code
      1 parameters
      1 conditional paths
   function C(int) in line 9
      1 lines of code
      1 parameters
      1 conditional paths
   variable i in line 46
      protection public
   variable M in line 45
      protection public
   variable s in line 24
      protection public
module D
   inherits from C
   inherits from A
   function clone() in line 19
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function h() in line 36
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function D(const Movable &) in line 51
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function D(T) in line 110
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function D() in line 29
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   variable M in line 53
      protection public
   variable s in line 30
      protection public
   variable s2 in line 31
      protection public
module E
   inherits from A
   function h() in line 43
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function E(const Movable &) in line 60
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function E(T *) in line 115
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function E(U *) in line 119
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function E(T) in line 123
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function E(U) in line 125
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   variable M in line 62
      protection public
module F
   inherits from A
   function ~F() in line 52
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function F(const NotMovable &) in line 67
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   variable NM in line 69
      protection public
module G
   inherits from A
   function h() in line 59
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function i() in line 60
      protection public
      2 lines of code
      0 parameters
      1 conditional paths
   function G(const Movable &) in line 74
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   variable M in line 76
      protection public
module H
   inherits from A
   function h() in line 70
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function H(const ns_H::HMovable &) in line 86
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   variable M in line 88
      protection public
module I
   inherits from A
   function h() in line 77
      protection public
      2 lines of code
      0 parameters
      1 conditional paths
   function I(MOVABLE_PARAM(M)) in line 98
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   variable M in line 100
      protection public
module J
   inherits from A
   function h() in line 86
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function J(const T &) in line 106
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   variable M in line 108
      protection public
module K_Movable
   function K_Movable() in line 114
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function K_Movable(const K_Movable &) in line 115
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function K_Movable(K_Movable &&) in line 116
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses function dummy(int *) defined in clang-modernize/UseNullptr/macros.cpp
   variable dummy in line 117
      protection public
module K
   inherits from A
   function h() in line 97
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function K(const K_Movable &) in line 122
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   variable M in line 124
      protection public
module L
   inherits from A
   function h() in line 106
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function L(const Movable &) in line 128
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   variable M in line 130
      protection public
module N
   inherits from A
   function h() in line 156
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function N(const Movable &) in line 136
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   variable A in line 140
      protection public
   variable M in line 139
      protection public
module O
   function O(Movable) in line 145
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   variable M in line 147
      protection public
module P
   function P(const Movable) in line 152
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   variable M in line 154
      protection public
module Q
   function Q(const Movable &,const Movable &,const Movable &,double) in line 160
      protection public
      2 lines of code
      4 parameters
      1 conditional paths
   variable A in line 164
      protection public
   variable B in line 165
      protection public
   variable C in line 166
      protection public
   variable D in line 167
      protection public
module R
   function R(ns_R::RMovable) in line 175
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   variable M in line 177
      protection public
module S
   function begin() in line 22
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function begin() in line 24
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function end() in line 23
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function end() in line 25
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function S(Movable &&) in line 182
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   variable M in line 184
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/clang-modernize/ReplaceAutoPtr/basic.cpp
module clang-modernize/ReplaceAutoPtr/basic.cpp
   macro definition MACRO_1 in line 111
      protection public
   macro definition MACRO_2 in line 114
      protection public
   macro definition MACRO_3 in line 117
      protection public
   macro definition MACRO_4 in line 120
      protection public
   typedef aaaaaaaa in line 148
      protection public
   variable d in line 153
      protection public
   function f_1() in line 25
      protection public
      66 lines of code
      0 parameters
      1 conditional paths
      uses variable a defined in diagnostic.cpp
      uses variable b defined in clang-modernize/AddOverride/basic.cpp
      uses variable d defined in clang-modernize/ReplaceAutoPtr/basic.cpp
      uses function f() defined in no.cpp
      uses function g(int,int *,int,int *,int,int *,int) defined in yes.cpp
      uses function h() defined in arg-comments.cpp
      uses variable i defined in pp-trace-macro.cpp
      uses variable j defined in pp-trace-macro.cpp
      uses variable l defined in clang-modernize/PassByValue/basic.cpp
      uses function p(unsigned short) defined in google-runtime-int.cpp
      uses function create() defined in B
      uses function create_derived_ptr() defined in clang-modernize/ReplaceAutoPtr/Inputs/basic.h
   function f_2() in line 93
      protection public
      6 lines of code
      0 parameters
      1 conditional paths
      uses variable a defined in diagnostic.cpp
   function f_3() in line 101
      protection public
      7 lines of code
      0 parameters
      1 conditional paths
      uses variable a defined in diagnostic.cpp
   function f_4() in line 110
      protection public
      18 lines of code
      0 parameters
      1 conditional paths
      uses macro definition MACRO_1 defined in clang-modernize/ReplaceAutoPtr/basic.cpp
      uses function p(unsigned short) defined in google-runtime-int.cpp
      uses macro definition MACRO_3 defined in clang-modernize/ReplaceAutoPtr/basic.cpp
      uses macro definition MACRO_4 defined in clang-modernize/ReplaceAutoPtr/basic.cpp
   function f_5() in line 130
      protection public
      7 lines of code
      0 parameters
      1 conditional paths
   function f_8() in line 139
      protection public
      7 lines of code
      0 parameters
      1 conditional paths
      uses variable a defined in diagnostic.cpp
      uses variable b defined in clang-modernize/AddOverride/basic.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/clang-modernize/UseNullptr/basic.cpp
module clang-modernize/UseNullptr/basic.cpp
   macro definition NULL in line 11
      protection public
   macro definition RET in line 190
      protection public
   variable g_null in line 10
      protection public
   function test_assignment() in line 14
      protection public
      38 lines of code
      0 parameters
      1 conditional paths
      uses macro definition NULL defined in clang-modernize/UseNullptr/basic.cpp
   function test_cxx_cases() in line 102
      protection public
      23 lines of code
      0 parameters
      1 conditional paths
      uses function f() defined in no.cpp
      uses variable g_null defined in clang-modernize/UseNullptr/basic.cpp
      uses macro definition NULL defined in clang-modernize/UseNullptr/basic.cpp
      uses variable b defined in clang-modernize/AddOverride/basic.cpp
      uses function test_function_default_param1(void *) defined in clang-modernize/UseNullptr/basic.cpp
      uses function p(unsigned short) defined in google-runtime-int.cpp
      uses function test_function_default_param2(void *) defined in clang-modernize/UseNullptr/basic.cpp
      uses function test_function_default_param3(void *) defined in clang-modernize/UseNullptr/basic.cpp
   function test_function_default_param1(void *) in line 126
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function test_function_default_param2(void *) in line 129
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function test_function_default_param3(void *) in line 132
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function test_function(int *) in line 135
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function test_function_no_ptr_param(int) in line 138
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function test_function_call() in line 140
      protection public
      13 lines of code
      0 parameters
      1 conditional paths
      uses function test_function(int *) defined in clang-modernize/UseNullptr/basic.cpp
      uses macro definition NULL defined in clang-modernize/UseNullptr/basic.cpp
      uses variable g_null defined in clang-modernize/UseNullptr/basic.cpp
      uses function test_function_no_ptr_param(int) defined in clang-modernize/UseNullptr/basic.cpp
   function test_function_return1() in line 154
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function test_function_return2() in line 159
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses macro definition NULL defined in clang-modernize/UseNullptr/basic.cpp
   function test_function_return3() in line 164
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable g_null defined in clang-modernize/UseNullptr/basic.cpp
   function test_function_return4() in line 169
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function test_function_return5() in line 174
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses macro definition NULL defined in clang-modernize/UseNullptr/basic.cpp
   function test_function_return6() in line 179
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable g_null defined in clang-modernize/UseNullptr/basic.cpp
   function test_function_return_cast1() in line 184
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function test_function_return_cast2() in line 189
      protection public
      6 lines of code
      0 parameters
      1 conditional paths
      uses macro definition RET defined in clang-modernize/UseNullptr/basic.cpp
   function test_parentheses_expression1() in line 197
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function test_parentheses_expression2() in line 202
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function f() defined in no.cpp
   function test_nested_parentheses_expression() in line 207
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function test_parentheses_explicit_cast() in line 212
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function test_parentheses_explicit_cast_sequence1() in line 217
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses macro definition NULL defined in clang-modernize/UseNullptr/basic.cpp
   function test_parentheses_explicit_cast_sequence2() in line 222
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function f() defined in no.cpp
   function ambiguous_function(int *) in line 235
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ambiguous_function(float *) in line 236
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function const_ambiguous_function(const int *) in line 237
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function const_ambiguous_function(const float *) in line 238
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function test_explicit_cast_ambiguous1() in line 240
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function ambiguous_function(int *) defined in clang-modernize/UseNullptr/basic.cpp
   function test_explicit_cast_ambiguous2() in line 245
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function ambiguous_function(int *) defined in clang-modernize/UseNullptr/basic.cpp
   function test_explicit_cast_ambiguous3() in line 250
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function ambiguous_function(int *) defined in clang-modernize/UseNullptr/basic.cpp
   function test_explicit_cast_ambiguous4() in line 255
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function test_explicit_cast_ambiguous5() in line 260
      protection public
      9 lines of code
      0 parameters
      1 conditional paths
   function test_const_pointers_abiguous() in line 270
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function const_ambiguous_function(const int *) defined in clang-modernize/UseNullptr/basic.cpp
   function test_const_pointers() in line 277
      protection public
      15 lines of code
      0 parameters
      1 conditional paths
      uses macro definition NULL defined in clang-modernize/UseNullptr/basic.cpp
      uses function f() defined in no.cpp
      uses variable t defined in negative-iterator.cpp
module Foo
   function bar(int *) in line 57
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function baz(int) in line 60
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function operator&() in line 5
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function Foo(int *) in line 54
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function Foo() in line 5
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function Foo(int) in line 6
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function Foo(int,int) in line 7
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function ~Foo() in line 8
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   variable m_p1 in line 63
      protection public
   variable m_p2 in line 64
      protection public
module Bar
   inherits from Foo
   function ConstDo() in line 26
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function Do() in line 25
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function Bar(T *) in line 72
      protection public
      21 lines of code
      1 parameters
      1 conditional paths
      uses macro definition NULL defined in clang-modernize/UseNullptr/basic.cpp
      uses function p(unsigned short) defined in google-runtime-int.cpp
      uses variable g_null defined in clang-modernize/UseNullptr/basic.cpp
   function Bar() in line 12
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   variable m_p in line 94
      protection public
module Baz
   function Baz() in line 98
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   variable i in line 99
      protection public
module Bam
   function operator=(int *) in line 231
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses variable a defined in diagnostic.cpp
   function operator=(float *) in line 232
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses variable a defined in diagnostic.cpp
   function Bam(int *) in line 229
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function Bam(float *) in line 230
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/clang-tidy/basic.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/clang-apply-replacements/conflict.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/clang-apply-replacements/crlf.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/clang-apply-replacements/Inputs/crlf/crlf.cpp
module Inputs/crlf/crlf.cpp
   function foo(void) in line 4
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/clang-apply-replacements/format.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/clang-apply-replacements/Inputs/basic/basic.h
module clang-apply-replacements/Inputs/basic/basic.h
   function ext(int(&),const Parent &) in line 16
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function func(int) in line 18
      protection public
      13 lines of code
      1 parameters
      2 conditional paths
      uses variable i defined in pp-trace-macro.cpp
      uses variable t defined in negative-iterator.cpp
      uses variable d defined in clang-modernize/ReplaceAutoPtr/basic.cpp
      uses function ext(int(&),const Parent &) defined in clang-apply-replacements/Inputs/basic/basic.h
module Parent
   function func() in line 7
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
module Derived
   inherits from Base
   inherits from Base
   inherits from Base
   inherits from T
   inherits from Parent
   function f() in line 146
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function foo(int) in line 70
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function func() in line 12
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
      uses function ext(int(&),const Parent &) defined in clang-apply-replacements/Inputs/basic/basic.h
   function Derived() in line 46
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/clang-modernize/PassByValue/basic.h
module Movable
   variable a in line 6
      protection public
   variable b in line 6
      protection public
   variable c in line 6
      protection public
module NotMovable
   function NotMovable() in line 10
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function NotMovable(const NotMovable &) in line 11
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function NotMovable(NotMovable &&) in line 12
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   variable a in line 13
      protection public
   variable b in line 13
      protection public
   variable c in line 13
      protection public
module UnmodifiableClass
   function UnmodifiableClass(const Movable &) in line 19
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   variable M in line 20
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/clang-modernize/ReplaceAutoPtr/Inputs/basic.h
module clang-modernize/ReplaceAutoPtr/Inputs/basic.h
   function create_derived_ptr() in line 10
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function f_5() in line 15
      protection public
      7 lines of code
      0 parameters
      1 conditional paths
   function f_6(std::auto_ptr< int >) in line 19
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function f_7(const std::auto_ptr< int > &) in line 21
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
module Base
   abstract class
   function a() in line 6
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function a() in line 18
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function b() in line 7
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function b() in line 19
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function c() in line 20
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function d() in line 21
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function d2() in line 22
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function e() in line 23
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function f() in line 24
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function foo(bool) in line 65
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function foo(int) in line 66
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function g() in line 25
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function j() in line 27
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function k() in line 28
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function l() in line 29
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function m() in line 32
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function m2() in line 33
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function n() in line 30
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function o() in line 34
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function ~Base() in line 5
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
      uses function a() defined in Base
      uses function b() defined in Base
   function ~Base() in line 17
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
      uses variable a defined in diagnostic.cpp
      uses variable b defined in clang-modernize/AddOverride/basic.cpp
      uses variable d defined in clang-modernize/ReplaceAutoPtr/basic.cpp
      uses variable d2 defined in clang-modernize/AddOverride/basic.cpp
      uses function f() defined in misc-use-override.cpp
      uses function g(int,int *,int,int *,int,int *,int) defined in yes.cpp
      uses variable j defined in pp-trace-macro.cpp
      uses variable l defined in clang-modernize/PassByValue/basic.cpp
      uses macro definition MUST_USE_RESULT defined in misc-use-override.cpp
      uses macro definition UNUSED defined in misc-use-override.cpp
      uses macro definition ABSTRACT defined in misc-use-override.cpp
module Derived
   inherits from Base
   inherits from Base
   inherits from Base
   inherits from T
   inherits from Parent
   function f() in line 146
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function foo(int) in line 70
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function func() in line 12
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
      uses function ext(int(&),const Parent &) defined in clang-apply-replacements/Inputs/basic/basic.h
   function Derived() in line 46
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
module A
   abstract class
   function clone() in line 8
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function clone() in line 47
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function f() in line 6
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function f() in line 11
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function f() in line 14
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function g() in line 7
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function h() in line 12
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function i() in line 14
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function method() in line 30
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function operator=(A &&) in line 7
      1 lines of code
      1 parameters
      1 conditional paths
   function ~A() in line 9
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function A(const Movable &) in line 22
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function A(T *) in line 11
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function A(T) in line 4
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 19
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 24
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 10
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 13
      1 lines of code
      1 parameters
      1 conditional paths
   function A() in line 37
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function A(int,int) in line 38
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function A(void *) in line 40
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function A(void *,void *) in line 41
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function A(const A &) in line 43
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 47
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function A(double,double) in line 51
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function A(T &&...) in line 56
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 18
      1 lines of code
      1 parameters
      1 conditional paths
   function A(A &&) in line 5
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 3
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 11
      1 lines of code
      1 parameters
      1 conditional paths
   variable ee in line 149
      protection public
   variable field in line 26
      protection public
   variable foo in line 6
      protection public
   variable M in line 25
      protection public
   variable Ptr in line 19
      protection public
   variable s in line 15
      protection public
module B
   inherits from A< E1 >
   inherits from A
   inherits from A
   inherits from A
   inherits from A
   function clone() in line 11
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
      uses function clone() defined in A
   function clone() in line 53
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function create() in line 38
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function f() in line 20
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function g() in line 14
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function method() in line 35
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function placeholder_for_f() in line 11
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function B(const Movable &) in line 31
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function B(std::initializer_list< int >) in line 62
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function B(const std::initializer_list< unsigned > &) in line 63
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function B(std::initializer_list< unsigned > &&) in line 64
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function B(::std::initializer_list< double >) in line 66
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function B(const ::std::initializer_list< char > &) in line 70
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function B(::std::initializer_list< char > &&) in line 74
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function B(int) in line 20
      1 lines of code
      1 parameters
      1 conditional paths
   function B(B &&) in line 13
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function B(int) in line 6
      1 lines of code
      1 parameters
      1 conditional paths
   variable kFalse in line 12
      protection public
   variable M in line 33
      protection public
   variable s in line 20
      protection public
module ns_2::auto_ptr
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/clang-modernize/UseNullptr/Inputs/basic.h
module clang-modernize/UseNullptr/Inputs/basic.h
   variable global_p in line 1
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/clang-apply-replacements/Inputs/conflict/common.h
module clang-apply-replacements/Inputs/conflict/common.h
   function ext(int(&)) in line 4
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function func(int) in line 6
      protection public
      10 lines of code
      1 parameters
      2 conditional paths
      uses variable i defined in pp-trace-macro.cpp
      uses variable t defined in negative-iterator.cpp
      uses function ext(int(&)) defined in clang-apply-replacements/Inputs/conflict/common.h
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/clang-modernize/HeaderReplacements/common.h
module clang-modernize/HeaderReplacements/common.h
   function func1(int &) in line 17
      protection public
      2 lines of code
      1 parameters
      1 conditional paths
   function func2() in line 18
      protection public
      7 lines of code
      0 parameters
      2 conditional paths
   function dostuff() in line 20
      protection public
      6 lines of code
      0 parameters
      2 conditional paths
      uses function begin() defined in C
      uses function end() defined in C
      uses function func1(int &) defined in clang-modernize/HeaderReplacements/common.h
module container
   function begin() in line 12
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function end() in line 13
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function push_back(const int &) in line 14
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
module container::iterator
   function operator!=(const iterator &) in line 9
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function operator*() in line 6
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function operator*() in line 7
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function operator++() in line 8
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/clang-apply-replacements/Inputs/format/no.cpp
module no.cpp
   function f() in line 3
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
module C
   inherits from B
   inherits from A
   abstract class
   function begin() in line 185
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function begin() in line 187
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function clone() in line 14
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function doLoop() in line 193
      protection public
      21 lines of code
      0 parameters
      6 conditional paths
      uses function begin() defined in C
      uses function end() defined in C
      uses function doSomething() defined in C
   function doLoop() in line 215
      protection public
      13 lines of code
      0 parameters
      4 conditional paths
      uses function begin() defined in C
      uses function end() defined in C
      uses function doSomething() defined in C
   function doSomething() in line 190
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function doSomething() in line 191
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function end() in line 186
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function end() in line 188
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function h() in line 27
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function C(const Movable &) in line 39
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses variable a defined in Movable
   function C(const Movable &,int) in line 43
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function C(initializer_list< int >) in line 82
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function C(const initializer_list< unsigned > &) in line 83
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function C(initializer_list< unsigned > &&) in line 84
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function C(int) in line 22
      1 lines of code
      1 parameters
      1 conditional paths
   function C(int) in line 9
      1 lines of code
      1 parameters
      1 conditional paths
   variable i in line 46
      protection public
   variable M in line 45
      protection public
   variable s in line 24
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/clang-apply-replacements/Inputs/format/yes.cpp
module yes.cpp
   function g(int,int *,int,int *,int,int *,int) in line 3
      protection public
      1 lines of code
      7 parameters
      1 conditional paths
   function f() in line 5
      protection public
      18 lines of code
      0 parameters
      1 conditional paths
      uses variable a defined in diagnostic.cpp
      uses function MyType012345678901234567890123456789() defined in MyType012345678901234567890123456789
      uses function g(int,int *,int,int *,int,int *,int) defined in yes.cpp
module MyType012345678901234567890123456789
   function MyType012345678901234567890123456789() in line 19
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   variable iiiiiiiiiiii in line 29
   variable jjjjjjjjjjjj in line 30
   variable kkkkkkkkkkkk in line 31
   variable mmmmmmmmmmmm in line 32
   variable nnnnnnnnnnnn in line 33
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/clang-modernize/AddOverride/pure_specifier_fail.cpp
module A
   abstract class
   function clone() in line 8
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function clone() in line 47
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function f() in line 6
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function f() in line 11
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function f() in line 14
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function g() in line 7
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function h() in line 12
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function i() in line 14
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function method() in line 30
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function operator=(A &&) in line 7
      1 lines of code
      1 parameters
      1 conditional paths
   function ~A() in line 9
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function A(const Movable &) in line 22
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function A(T *) in line 11
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function A(T) in line 4
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 19
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 24
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 10
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 13
      1 lines of code
      1 parameters
      1 conditional paths
   function A() in line 37
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function A(int,int) in line 38
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function A(void *) in line 40
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function A(void *,void *) in line 41
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function A(const A &) in line 43
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 47
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function A(double,double) in line 51
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function A(T &&...) in line 56
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 18
      1 lines of code
      1 parameters
      1 conditional paths
   function A(A &&) in line 5
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 3
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 11
      1 lines of code
      1 parameters
      1 conditional paths
   variable ee in line 149
      protection public
   variable field in line 26
      protection public
   variable foo in line 6
      protection public
   variable M in line 25
      protection public
   variable Ptr in line 19
      protection public
   variable s in line 15
      protection public
module B
   inherits from A< E1 >
   inherits from A
   inherits from A
   inherits from A
   inherits from A
   function clone() in line 11
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
      uses function clone() defined in A
   function clone() in line 53
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function create() in line 38
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function f() in line 20
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function g() in line 14
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function method() in line 35
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function placeholder_for_f() in line 11
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function B(const Movable &) in line 31
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function B(std::initializer_list< int >) in line 62
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function B(const std::initializer_list< unsigned > &) in line 63
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function B(std::initializer_list< unsigned > &&) in line 64
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function B(::std::initializer_list< double >) in line 66
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function B(const ::std::initializer_list< char > &) in line 70
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function B(::std::initializer_list< char > &&) in line 74
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function B(int) in line 20
      1 lines of code
      1 parameters
      1 conditional paths
   function B(B &&) in line 13
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function B(int) in line 6
      1 lines of code
      1 parameters
      1 conditional paths
   variable kFalse in line 12
      protection public
   variable M in line 33
      protection public
   variable s in line 20
      protection public
module C
   inherits from B
   inherits from A
   abstract class
   function begin() in line 185
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function begin() in line 187
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function clone() in line 14
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function doLoop() in line 193
      protection public
      21 lines of code
      0 parameters
      6 conditional paths
      uses function begin() defined in C
      uses function end() defined in C
      uses function doSomething() defined in C
   function doLoop() in line 215
      protection public
      13 lines of code
      0 parameters
      4 conditional paths
      uses function begin() defined in C
      uses function end() defined in C
      uses function doSomething() defined in C
   function doSomething() in line 190
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function doSomething() in line 191
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function end() in line 186
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function end() in line 188
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function h() in line 27
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function C(const Movable &) in line 39
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses variable a defined in Movable
   function C(const Movable &,int) in line 43
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function C(initializer_list< int >) in line 82
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function C(const initializer_list< unsigned > &) in line 83
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function C(initializer_list< unsigned > &&) in line 84
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function C(int) in line 22
      1 lines of code
      1 parameters
      1 conditional paths
   function C(int) in line 9
      1 lines of code
      1 parameters
      1 conditional paths
   variable i in line 46
      protection public
   variable M in line 45
      protection public
   variable s in line 24
      protection public
module D
   inherits from C
   inherits from A
   function clone() in line 19
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function h() in line 36
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function D(const Movable &) in line 51
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function D(T) in line 110
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function D() in line 29
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   variable M in line 53
      protection public
   variable s in line 30
      protection public
   variable s2 in line 31
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/clang-modernize/Combined/combined.cpp
module combined.cpp
   macro definition NULL in line 8
      protection public
   function test_loopconvert_and_nullptr_iterator() in line 24
      protection public
      10 lines of code
      0 parameters
      2 conditional paths
      uses variable t defined in negative-iterator.cpp
      uses function begin() defined in T
      uses function end() defined in T
      uses macro definition NULL defined in combined.cpp
   function test_loopconvert_and_nullptr_risky() in line 35
      protection public
      11 lines of code
      0 parameters
      2 conditional paths
      uses macro definition N defined in misc-swapped-arguments.cpp
      uses variable i defined in pp-trace-macro.cpp
      uses macro definition NULL defined in combined.cpp
module T
   function begin() in line 20
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function begin() in line 37
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function end() in line 21
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function end() in line 38
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
module T::iterator
   function insert(int *) in line 16
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function insert(int) in line 34
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function operator!=(const iterator &) in line 15
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function operator!=(const iterator &) in line 33
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function operator*() in line 12
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function operator*() in line 13
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function operator*() in line 30
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function operator*() in line 31
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function operator++() in line 14
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function operator++() in line 32
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   variable x in line 17
      protection public
   variable x in line 35
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/clang-modernize/Combined/compilers.cpp
module compilers.cpp
   macro definition LLVM_OVERRIDE in line 50
      protection public
module A
   abstract class
   function clone() in line 8
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function clone() in line 47
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function f() in line 6
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function f() in line 11
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function f() in line 14
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function g() in line 7
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function h() in line 12
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function i() in line 14
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function method() in line 30
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function operator=(A &&) in line 7
      1 lines of code
      1 parameters
      1 conditional paths
   function ~A() in line 9
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function A(const Movable &) in line 22
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function A(T *) in line 11
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function A(T) in line 4
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 19
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 24
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 10
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 13
      1 lines of code
      1 parameters
      1 conditional paths
   function A() in line 37
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function A(int,int) in line 38
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function A(void *) in line 40
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function A(void *,void *) in line 41
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function A(const A &) in line 43
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 47
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function A(double,double) in line 51
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function A(T &&...) in line 56
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 18
      1 lines of code
      1 parameters
      1 conditional paths
   function A(A &&) in line 5
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 3
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 11
      1 lines of code
      1 parameters
      1 conditional paths
   variable ee in line 149
      protection public
   variable field in line 26
      protection public
   variable foo in line 6
      protection public
   variable M in line 25
      protection public
   variable Ptr in line 19
      protection public
   variable s in line 15
      protection public
module B
   inherits from A< E1 >
   inherits from A
   inherits from A
   inherits from A
   inherits from A
   function clone() in line 11
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
      uses function clone() defined in A
   function clone() in line 53
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function create() in line 38
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function f() in line 20
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function g() in line 14
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function method() in line 35
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function placeholder_for_f() in line 11
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function B(const Movable &) in line 31
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function B(std::initializer_list< int >) in line 62
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function B(const std::initializer_list< unsigned > &) in line 63
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function B(std::initializer_list< unsigned > &&) in line 64
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function B(::std::initializer_list< double >) in line 66
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function B(const ::std::initializer_list< char > &) in line 70
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function B(::std::initializer_list< char > &&) in line 74
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function B(int) in line 20
      1 lines of code
      1 parameters
      1 conditional paths
   function B(B &&) in line 13
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function B(int) in line 6
      1 lines of code
      1 parameters
      1 conditional paths
   variable kFalse in line 12
      protection public
   variable M in line 33
      protection public
   variable s in line 20
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/clang-modernize/Compilations/compilation_inc.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/clang-modernize/Compilations/compilation_inc_sources.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/clang-modernize/Compilations/compilation_not_inc.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/clang-modernize/Compilations/detect_from_path.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/clang-modernize/Compilations/detect_from_source.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/clang-modernize/Compilations/fixed_comp.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/clang-modernize/Compilations/fixed_comp_inc.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/clang-modernize/Compilations/Inputs/compilations.cpp
module compilations.cpp
   function foo(void) in line 1
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
      uses function p(unsigned short) defined in google-runtime-int.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/clang-modernize/Compilations/Inputs/compilations_expected.cpp
module compilations_expected.cpp
   function foo(void) in line 1
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
      uses function p(unsigned short) defined in google-runtime-int.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/clang-modernize/Compilations/Inputs/cpp11.cpp
module cpp11.cpp
   function foo(void) in line 1
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function p(unsigned short) defined in google-runtime-int.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/clang-modernize/Compilations/Inputs/cpp11_expected.cpp
module cpp11_expected.cpp
   function foo(void) in line 1
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function p(unsigned short) defined in google-runtime-int.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/clang-modernize/Compilations/no_compilation.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/clang-modernize/Core/Reformatting.cpp
module Reformatting.cpp
   function f() in line 36
      protection public
      9 lines of code
      0 parameters
      1 conditional paths
      uses variable a defined in diagnostic.cpp
      uses function MyType012345678901234567890123456789() defined in MyType012345678901234567890123456789
module MyType012345678901234567890123456789
   function MyType012345678901234567890123456789() in line 19
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   variable iiiiiiiiiiii in line 29
   variable jjjjjjjjjjjj in line 30
   variable kkkkkkkkkkkk in line 31
   variable mmmmmmmmmmmm in line 32
   variable nnnnnnnnnnnn in line 33
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/clang-modernize/HeaderReplacements/common.cpp
module common.cpp
   function func1(int &) in line 7
      protection public
      2 lines of code
      1 parameters
      1 conditional paths
   function func2() in line 10
      protection public
      7 lines of code
      0 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/clang-modernize/HeaderReplacements/Inputs/no_yaml.h
module no_yaml.h
   function update(int(&)) in line 1
      protection public
      8 lines of code
      1 parameters
      2 conditional paths
      uses variable arr defined in array.cpp
      uses variable i defined in pp-trace-macro.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/clang-modernize/HeaderReplacements/main.cpp
module main.cpp
   function test_header_replacement() in line 33
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function dostuff() defined in clang-modernize/HeaderReplacements/common.h
      uses function func2() defined in common.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/clang-modernize/HeaderReplacements/no_yaml.cpp
module no_yaml.cpp
   function func() in line 16
      protection public
      10 lines of code
      0 parameters
      2 conditional paths
      uses variable arr defined in array.cpp
      uses variable i defined in pp-trace-macro.cpp
      uses function update(int(&)) defined in no_yaml.h
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/clang-modernize/LoopConvert/array.cpp
module array.cpp
   variable N in line 12
      protection public
   variable NMinusOne in line 13
      protection public
   variable arr in line 14
      protection public
   variable pArr in line 15
      protection public
   function f() in line 17
      protection public
      84 lines of code
      0 parameters
      11 conditional paths
      uses variable sum defined in naming-conflict.cpp
      uses variable N defined in array.cpp
      uses variable i defined in pp-trace-macro.cpp
      uses variable arr defined in array.cpp
      uses function printf(const char *,...) defined in structures.h
      uses variable x defined in readability-function-size.cpp
      uses variable y defined in readability-named-parameter.cpp
      uses variable NMinusOne defined in array.cpp
      uses function g() defined in Val
   function dependentExprBound() in line 140
      protection public
      6 lines of code
      0 parameters
      2 conditional paths
      uses variable N defined in array.cpp
      uses variable i defined in pp-trace-macro.cpp
      uses variable arr defined in array.cpp
      uses function dependentExprBound< 20 >() defined in array.cpp
   function dependentExprBound< 20 >() in line 146
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function memberFunctionPointer() in line 148
      protection public
      8 lines of code
      0 parameters
      2 conditional paths
      uses variable v defined in naming-alias.cpp
      uses function g() defined in Val
      uses variable N defined in array.cpp
      uses variable i defined in pp-trace-macro.cpp
module HasArr
   function explicitThis() in line 121
      protection public
      15 lines of code
      0 parameters
      3 conditional paths
      uses variable N defined in array.cpp
      uses variable i defined in pp-trace-macro.cpp
      uses function printf(const char *,...) defined in structures.h
      uses variable x defined in readability-function-size.cpp
   function implicitThis() in line 105
      protection public
      15 lines of code
      0 parameters
      3 conditional paths
      uses variable N defined in array.cpp
      uses variable i defined in pp-trace-macro.cpp
      uses function printf(const char *,...) defined in structures.h
      uses variable Arr defined in HasArr
      uses variable ValArr defined in HasArr
      uses variable x defined in readability-function-size.cpp
   variable Arr in line 103
      protection public
   variable ValArr in line 104
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/clang-modernize/LoopConvert/confidence.cpp
module confidence.cpp
   function f() in line 9
      protection public
      27 lines of code
      0 parameters
      3 conditional paths
      uses variable pArr defined in array.cpp
      uses macro definition N defined in misc-swapped-arguments.cpp
      uses variable Arr defined in naming-alias.cpp
      uses macro definition M defined in google-explicit-make-pair.cpp
      uses variable sum defined in naming-conflict.cpp
      uses variable i defined in pp-trace-macro.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/clang-modernize/LoopConvert/dependency.cpp
module dependency.cpp
   function f() in line 4
      protection public
      23 lines of code
      0 parameters
      3 conditional paths
      uses variable arr defined in array.cpp
      uses macro definition N defined in misc-swapped-arguments.cpp
      uses macro definition M defined in google-explicit-make-pair.cpp
      uses variable i defined in pp-trace-macro.cpp
      uses variable a defined in diagnostic.cpp
      uses variable b defined in clang-modernize/AddOverride/basic.cpp
      uses variable j defined in pp-trace-macro.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/clang-modernize/LoopConvert/free_begin_end_fail.cpp
module free_begin_end_fail.cpp
   function begin(const MyArray &) in line 14
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function end(const MyArray &) in line 15
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function begin(const MyContainer< T > &) in line 18
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function end(const MyContainer< T > &) in line 20
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function f() in line 24
      protection public
      9 lines of code
      0 parameters
      3 conditional paths
      uses variable Arr defined in naming-alias.cpp
      uses variable i defined in pp-trace-macro.cpp
      uses function begin(const MyArray &) defined in free_begin_end_fail.cpp
      uses function end(const MyArray &) defined in free_begin_end_fail.cpp
module MyArray
   function size() in line 7
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
module MyContainer
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/clang-modernize/LoopConvert/Inputs/macro_problem.h
module macro_problem.h
   macro definition myns in line 1
      protection public
module nsblah::MyType
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/clang-modernize/LoopConvert/Inputs/negative-header.h
module negative-header.h
   function loopInHeader() in line 6
      protection public
      7 lines of code
      0 parameters
      2 conditional paths
      uses variable arr defined in array.cpp
      uses macro definition N defined in misc-swapped-arguments.cpp
      uses variable sum defined in naming-conflict.cpp
      uses variable i defined in pp-trace-macro.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/clang-modernize/LoopConvert/Inputs/structures.h
module structures.h
   function printf(const char *,...) in line 5
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
module Val
   function g() in line 8
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   variable x in line 8
      protection public
module MutableVal
   function constFun(int) in line 11
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function constFun(MutableVal &) in line 13
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function constParamFun(const MutableVal &) in line 14
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function nonConstFun(int,int) in line 12
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function nonConstParamFun(const MutableVal &) in line 15
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   variable x in line 16
      protection public
module S
   function begin() in line 22
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function begin() in line 24
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function end() in line 23
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function end() in line 25
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function S(Movable &&) in line 182
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   variable M in line 184
      protection public
module T
   function begin() in line 20
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function begin() in line 37
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function end() in line 21
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function end() in line 38
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
module T::iterator
   function insert(int *) in line 16
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function insert(int) in line 34
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function operator!=(const iterator &) in line 15
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function operator!=(const iterator &) in line 33
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function operator*() in line 12
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function operator*() in line 13
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function operator*() in line 30
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function operator*() in line 31
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function operator++() in line 14
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function operator++() in line 32
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   variable x in line 17
      protection public
   variable x in line 35
      protection public
module U
   function begin() in line 49
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function end() in line 50
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   variable x in line 51
      protection public
module U::iterator
   function operator!=(const iterator &) in line 46
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function operator*() in line 43
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function operator*() in line 44
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function operator++() in line 45
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function operator->() in line 47
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
module X
   function f() in line 28
      protection public
      10 lines of code
      0 parameters
      1 conditional paths
      uses variable v defined in naming-alias.cpp
      uses function swap(vector &) defined in std::vector
   function getS() in line 58
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function operator bool() in line 815
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function operator++(int) in line 41
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function operator--(int) in line 42
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses function X(X &) defined in X
      uses function operator=(X &) defined in X
   function operator=(X &) in line 45
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function X(X &) in line 44
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   variable i in line 47
      protection public
   variable s in line 55
      protection public
   variable t in line 56
      protection public
   variable u in line 57
      protection public
   variable v in line 27
      protection public
module dependent
   function at(unsigned) in line 85
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function at(unsigned) in line 86
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function begin() in line 78
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function begin() in line 80
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function constFoo() in line 92
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function end() in line 79
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function end() in line 81
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function foo() in line 91
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function operator*() in line 89
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function operator[](unsigned) in line 83
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function operator[](unsigned) in line 84
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function size() in line 82
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
module dependent::iterator_base
   function operator!=(const iterator_base &) in line 67
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function operator*() in line 65
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function operator++() in line 66
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function operator->() in line 68
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
module dependent::iterator
   inherits from dependent::iterator_base
   function operator*() in line 72
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function operator++() in line 73
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function operator->() in line 74
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
module doublyDependent
   function begin() in line 117
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function begin() in line 119
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function end() in line 118
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function end() in line 120
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
module doublyDependent::Value
   variable first in line 99
      protection public
   variable second in line 100
      protection public
module doublyDependent::iterator_base
   function operator!=(const iterator_base &) in line 106
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function operator*() in line 104
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function operator++() in line 105
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function operator->() in line 107
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
module doublyDependent::iterator
   inherits from doublyDependent::iterator_base
   function operator*() in line 111
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function operator++() in line 112
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function operator->() in line 113
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
module transparent
   function at() in line 126
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function operator*() in line 128
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function operator->() in line 127
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
module Nested
   function begin() in line 137
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function begin() in line 139
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function end() in line 138
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function end() in line 140
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function operator*() in line 136
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function operator->() in line 135
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
module PtrSet
   function begin() in line 152
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function end() in line 153
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
module PtrSet::iterator
   function operator!=(const iterator &) in line 148
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function operator*() in line 149
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function operator++() in line 150
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
module TypedefDerefContainer
   function begin() in line 164
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function end() in line 165
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
module TypedefDerefContainer::iterator
   function operator!=(const iterator &) in line 160
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function operator*() in line 161
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function operator++() in line 162
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
module RValueDerefContainer
   function begin() in line 176
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function end() in line 177
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
module RValueDerefContainer::iterator
   function operator!=(const iterator &) in line 172
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function operator*() in line 173
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function operator++() in line 174
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/clang-modernize/LoopConvert/iterator.cpp
module LoopConvert/iterator.cpp
   function f() in line 9
      protection public
      127 lines of code
      0 parameters
      17 conditional paths
      uses variable t defined in negative-iterator.cpp
      uses function begin() defined in T
      uses function end() defined in T
      uses function printf(const char *,...) defined in structures.h
      uses variable s defined in negative-iterator.cpp
      uses function begin() defined in S
      uses function end() defined in S
      uses variable u defined in negative-iterator.cpp
      uses function begin() defined in U
      uses function end() defined in U
      uses variable i defined in pp-trace-macro.cpp
      uses variable v defined in naming-alias.cpp
      uses function begin() defined in doublyDependent
      uses function end() defined in doublyDependent
      uses function begin() defined in PtrSet
      uses function end() defined in PtrSet
      uses function begin() defined in TypedefDerefContainer
      uses function end() defined in TypedefDerefContainer
      uses function begin() defined in container
      uses function end() defined in container
   function different_type() in line 139
      protection public
      37 lines of code
      0 parameters
      5 conditional paths
      uses variable s defined in negative-iterator.cpp
      uses function begin() defined in S
      uses function end() defined in S
      uses function printf(const char *,...) defined in structures.h
      uses variable v defined in naming-alias.cpp
module C
   inherits from B
   inherits from A
   abstract class
   function begin() in line 185
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function begin() in line 187
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function clone() in line 14
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function doLoop() in line 193
      protection public
      21 lines of code
      0 parameters
      6 conditional paths
      uses function begin() defined in C
      uses function end() defined in C
      uses function doSomething() defined in C
   function doLoop() in line 215
      protection public
      13 lines of code
      0 parameters
      4 conditional paths
      uses function begin() defined in C
      uses function end() defined in C
      uses function doSomething() defined in C
   function doSomething() in line 190
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function doSomething() in line 191
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function end() in line 186
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function end() in line 188
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function h() in line 27
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function C(const Movable &) in line 39
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses variable a defined in Movable
   function C(const Movable &,int) in line 43
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function C(initializer_list< int >) in line 82
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function C(const initializer_list< unsigned > &) in line 83
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function C(initializer_list< unsigned > &&) in line 84
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function C(int) in line 22
      1 lines of code
      1 parameters
      1 conditional paths
   function C(int) in line 9
      1 lines of code
      1 parameters
      1 conditional paths
   variable i in line 46
      protection public
   variable M in line 45
      protection public
   variable s in line 24
      protection public
module C2
   function begin() in line 234
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function doLoop() in line 237
      protection public
      7 lines of code
      0 parameters
      2 conditional paths
      uses function begin() defined in C
      uses function end() defined in C
   function end() in line 235
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function C2(initializer_list< int >) in line 89
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function C2(const initializer_list< unsigned > &) in line 90
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function C2(initializer_list< unsigned > &&) in line 91
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function C2(initializer_list< double >) in line 93
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function C2(int) in line 3
      1 lines of code
      1 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/clang-modernize/UseAuto/iterator.cpp
module UseAuto/iterator.cpp
   macro definition CONTAINER in line 11
      protection public
   macro definition CONTAINER in line 15
      protection public
   macro definition CONTAINER in line 19
      protection public
   macro definition USE_BASE_CLASS_ITERATORS in line 20
      protection public
   typedef int_iterator in line 25
      protection public
   function main(int,char **) in line 37
      protection public
      142 lines of code
      2 parameters
      4 conditional paths
      uses function begin() defined in std::vector
      uses function end() defined in std::vector
      uses function begin() defined in foo::vector
module foo::vector
   function begin() in line 33
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
module foo::vector::iterator
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/clang-modernize/LoopConvert/macro_problem.cpp
module macro_problem.cpp
   function side_effect(const myns::MyType &) in line 12
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function f() in line 14
      protection public
      9 lines of code
      0 parameters
      2 conditional paths
      uses function begin() defined in container
      uses function end() defined in container
      uses function side_effect(const myns::MyType &) defined in macro_problem.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/clang-modernize/LoopConvert/naming-alias.cpp
module naming-alias.cpp
   variable N in line 7
      protection public
   variable Arr in line 9
      protection public
   variable v in line 10
      protection public
   variable pv in line 11
      protection public
   function func(Val &) in line 12
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function sideEffect(int) in line 13
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function aliasing() in line 15
      protection public
      109 lines of code
      0 parameters
      16 conditional paths
      uses variable N defined in naming-alias.cpp
      uses variable i defined in pp-trace-macro.cpp
      uses variable t defined in negative-iterator.cpp
      uses variable Arr defined in naming-alias.cpp
      uses variable y defined in readability-named-parameter.cpp
      uses variable z defined in readability-named-parameter.cpp
      uses variable x defined in Val
      uses variable v defined in naming-alias.cpp
      uses variable pv defined in naming-alias.cpp
      uses function func(Val &) defined in naming-alias.cpp
      uses function sideEffect(int) defined in naming-alias.cpp
      uses variable j defined in pp-trace-macro.cpp
   function refs_and_vals() in line 125
      protection public
      36 lines of code
      0 parameters
      4 conditional paths
      uses variable s defined in negative-iterator.cpp
      uses function begin() defined in S
      uses function end() defined in S
      uses variable x defined in MutableVal
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/clang-modernize/LoopConvert/naming-conflict.cpp
module naming-conflict.cpp
   macro definition MAX in line 7
      protection public
   macro definition DEF in line 8
      protection public
   variable N in line 10
      protection public
   variable nums in line 11
      protection public
   variable sum in line 12
      protection public
   function sameNames() in line 20
      protection public
      12 lines of code
      0 parameters
      2 conditional paths
      uses variable N defined in naming-conflict.cpp
      uses variable i defined in pp-trace-macro.cpp
      uses function printf(const char *,...) defined in structures.h
      uses variable nums defined in naming-conflict.cpp
      uses variable sum defined in naming-conflict.cpp
   function macroConflict() in line 33
      protection public
      28 lines of code
      0 parameters
      5 conditional paths
      uses function begin() defined in S
      uses function end() defined in S
      uses function printf(const char *,...) defined in structures.h
      uses macro definition MAX defined in naming-conflict.cpp
      uses function begin() defined in T
      uses function end() defined in T
      uses macro definition DEF defined in naming-conflict.cpp
   function keywordConflict() in line 62
      protection public
      16 lines of code
      0 parameters
      3 conditional paths
      uses function begin() defined in T
      uses function end() defined in T
      uses function begin() defined in U
      uses function end() defined in U
      uses variable x defined in U
   function typeConflict() in line 79
      protection public
      41 lines of code
      0 parameters
      6 conditional paths
      uses function begin() defined in T
      uses function end() defined in T
      uses variable x defined in Val
module ns::st
   variable x in line 16
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/clang-modernize/LoopConvert/negative-iterator.cpp
module negative-iterator.cpp
   variable s in line 10
      protection public
   variable t in line 11
      protection public
   variable u in line 12
      protection public
   function notBeginOrEnd() in line 19
      protection public
      8 lines of code
      0 parameters
      3 conditional paths
      uses function notBegin() defined in BadBeginEnd
      uses function end() defined in T
      uses variable i defined in pp-trace-macro.cpp
      uses function begin() defined in T
      uses function notEnd() defined in BadBeginEnd
   function badLoopShapes() in line 28
      protection public
      16 lines of code
      0 parameters
      5 conditional paths
      uses variable t defined in negative-iterator.cpp
      uses function begin() defined in T
      uses function end() defined in T
      uses function f(const T::iterator &,int) defined in negative-iterator.cpp
      uses variable i defined in pp-trace-macro.cpp
   function iteratorArrayMix() in line 45
      protection public
      9 lines of code
      0 parameters
      3 conditional paths
      uses variable t defined in negative-iterator.cpp
      uses function begin() defined in T
      uses function end() defined in T
      uses macro definition N defined in misc-swapped-arguments.cpp
      uses variable i defined in pp-trace-macro.cpp
   function badConstructor() in line 60
      protection public
      7 lines of code
      0 parameters
      3 conditional paths
      uses variable t defined in negative-iterator.cpp
      uses function begin() defined in T
      uses function end() defined in T
      uses variable i defined in pp-trace-macro.cpp
   function iteratorMemberUsed() in line 68
      protection public
      10 lines of code
      0 parameters
      2 conditional paths
      uses variable t defined in negative-iterator.cpp
      uses function begin() defined in T
      uses function end() defined in T
      uses variable i defined in pp-trace-macro.cpp
   function iteratorMethodCalled() in line 79
      protection public
      8 lines of code
      0 parameters
      4 conditional paths
      uses variable t defined in negative-iterator.cpp
      uses function begin() defined in T
      uses function end() defined in T
      uses variable i defined in pp-trace-macro.cpp
   function iteratorOperatorCalled() in line 88
      protection public
      7 lines of code
      0 parameters
      3 conditional paths
      uses variable t defined in negative-iterator.cpp
      uses function begin() defined in T
      uses function end() defined in T
      uses variable i defined in pp-trace-macro.cpp
      uses variable s defined in negative-iterator.cpp
      uses function begin() defined in S
      uses function end() defined in S
   function differentContainers() in line 96
      protection public
      15 lines of code
      0 parameters
      5 conditional paths
      uses variable t defined in negative-iterator.cpp
      uses function begin() defined in T
      uses function end() defined in T
      uses variable i defined in pp-trace-macro.cpp
      uses variable s defined in negative-iterator.cpp
      uses function begin() defined in S
      uses function end() defined in S
   function wrongIterators() in line 112
      protection public
      5 lines of code
      0 parameters
      2 conditional paths
      uses variable t defined in negative-iterator.cpp
      uses function begin() defined in T
      uses function end() defined in T
      uses variable i defined in pp-trace-macro.cpp
   function differentMemberAccessTypes() in line 123
      protection public
      7 lines of code
      0 parameters
      3 conditional paths
      uses variable i defined in pp-trace-macro.cpp
      uses function f(const T::iterator &,int) defined in negative-iterator.cpp
      uses function g(T &,int) defined in negative-iterator.cpp
   function f(const T::iterator &,int) in line 131
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function f(const T &,int) in line 132
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function g(T &,int) in line 133
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function iteratorPassedToFunction() in line 135
      protection public
      4 lines of code
      0 parameters
      2 conditional paths
      uses variable t defined in negative-iterator.cpp
      uses function begin() defined in T
      uses function end() defined in T
      uses variable i defined in pp-trace-macro.cpp
      uses function f(const T::iterator &,int) defined in negative-iterator.cpp
   function containerPassedToFunction() in line 142
      protection public
      6 lines of code
      0 parameters
      1 conditional paths
   function iteratorDefinedOutside() in line 152
      protection public
      9 lines of code
      0 parameters
      3 conditional paths
      uses variable t defined in negative-iterator.cpp
      uses function end() defined in T
      uses function begin() defined in T
      uses variable i defined in pp-trace-macro.cpp
module BadBeginEnd
   inherits from T
   function notBegin() in line 15
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function notEnd() in line 16
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
module ExtraConstructor
   inherits from T::iterator
   function ExtraConstructor(T::iterator,int) in line 56
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function ExtraConstructor(T::iterator) in line 57
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
module EvilArrow
   inherits from U
   function operator->() in line 120
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/clang-modernize/LoopConvert/negative-multi-end-call.cpp
module negative-multi-end-call.cpp
   variable s in line 10
      protection public
   variable t in line 11
      protection public
   variable u in line 12
      protection public
   function multipleEnd() in line 14
      protection public
      10 lines of code
      0 parameters
      4 conditional paths
      uses variable s defined in negative-multi-end-call.cpp
      uses function begin() defined in S
      uses function end() defined in S
      uses variable i defined in pp-trace-macro.cpp
      uses variable t defined in negative-multi-end-call.cpp
      uses function begin() defined in T
      uses function end() defined in T
      uses variable u defined in negative-multi-end-call.cpp
      uses function begin() defined in U
      uses function end() defined in U
      uses function f(X) defined in negative-multi-end-call.cpp
   function f(X) in line 25
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function f(S) in line 26
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function f(T) in line 27
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function complexContainer() in line 29
      protection public
      36 lines of code
      0 parameters
      7 conditional paths
      uses variable x defined in readability-function-size.cpp
      uses variable i defined in pp-trace-macro.cpp
      uses function f(X) defined in negative-multi-end-call.cpp
      uses function getS() defined in X
      uses function end() defined in S
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/clang-modernize/LoopConvert/negative-pseudoarray-extra.cpp
module negative-pseudoarray-extra.cpp
   variable N in line 10
      protection public
   variable v in line 11
      protection public
   variable pv in line 12
      protection public
   variable sum in line 14
      protection public
   function memberFunctionCalled() in line 19
      protection public
      11 lines of code
      0 parameters
      3 conditional paths
      uses variable v defined in negative-pseudoarray-extra.cpp
      uses variable i defined in pp-trace-macro.cpp
      uses variable sum defined in negative-pseudoarray-extra.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/clang-modernize/LoopConvert/negative-pseudoarray.cpp
module negative-pseudoarray.cpp
   variable N in line 10
      protection public
   variable v in line 11
      protection public
   variable pv in line 12
      protection public
   variable cv in line 14
      protection public
   variable sum in line 15
      protection public
   function indexStartAndEnd() in line 18
      protection public
      16 lines of code
      0 parameters
      6 conditional paths
      uses variable v defined in negative-pseudoarray.cpp
      uses variable i defined in pp-trace-macro.cpp
      uses variable sum defined in negative-pseudoarray.cpp
      uses variable pv defined in negative-pseudoarray.cpp
   function increment() in line 36
      protection public
      13 lines of code
      0 parameters
      5 conditional paths
      uses variable v defined in negative-pseudoarray.cpp
      uses variable i defined in pp-trace-macro.cpp
      uses variable sum defined in negative-pseudoarray.cpp
   function indexUse() in line 51
      protection public
      4 lines of code
      0 parameters
      2 conditional paths
      uses variable v defined in negative-pseudoarray.cpp
      uses variable i defined in pp-trace-macro.cpp
   function mixedVariables() in line 57
      protection public
      14 lines of code
      0 parameters
      5 conditional paths
      uses variable v defined in negative-pseudoarray.cpp
      uses variable i defined in pp-trace-macro.cpp
      uses variable sum defined in negative-pseudoarray.cpp
   function multipleArrays() in line 73
      protection public
      19 lines of code
      0 parameters
      5 conditional paths
      uses variable N defined in negative-pseudoarray.cpp
      uses variable v defined in negative-pseudoarray.cpp
      uses variable i defined in pp-trace-macro.cpp
      uses variable sum defined in negative-pseudoarray.cpp
   function multipleContainers() in line 94
      protection public
      19 lines of code
      0 parameters
      5 conditional paths
      uses variable v defined in negative-pseudoarray.cpp
      uses variable i defined in pp-trace-macro.cpp
      uses variable sum defined in negative-pseudoarray.cpp
   function derefContainer() in line 115
      protection public
      9 lines of code
      0 parameters
      3 conditional paths
      uses variable pv defined in negative-pseudoarray.cpp
      uses variable i defined in pp-trace-macro.cpp
      uses variable sum defined in negative-pseudoarray.cpp
   function wrongEnd() in line 125
      protection public
      5 lines of code
      0 parameters
      2 conditional paths
      uses function bad(int,int,int) defined in misc-repeated-side-effects-in-macro.c
      uses variable v defined in negative-pseudoarray.cpp
      uses variable i defined in pp-trace-macro.cpp
      uses variable sum defined in negative-pseudoarray.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/clang-modernize/LoopConvert/negative.cpp
module negative.cpp
   variable N in line 14
      protection public
   variable arr in line 15
      protection public
   variable pArr in line 16
      protection public
   variable sum in line 17
      protection public
   function indexStartAndEnd() in line 20
      protection public
      16 lines of code
      0 parameters
      6 conditional paths
      uses variable i defined in pp-trace-macro.cpp
      uses variable sum defined in negative.cpp
      uses variable arr defined in negative.cpp
      uses variable N defined in negative.cpp
      uses variable pArr defined in negative.cpp
   function increment() in line 38
      protection public
      13 lines of code
      0 parameters
      5 conditional paths
      uses variable N defined in negative.cpp
      uses variable i defined in pp-trace-macro.cpp
      uses variable sum defined in negative.cpp
      uses variable arr defined in negative.cpp
   function indexUse() in line 53
      protection public
      4 lines of code
      0 parameters
      2 conditional paths
      uses variable N defined in negative.cpp
      uses variable i defined in pp-trace-macro.cpp
      uses variable arr defined in negative.cpp
   function noArray() in line 59
      protection public
      8 lines of code
      0 parameters
      4 conditional paths
      uses variable N defined in negative.cpp
      uses variable i defined in pp-trace-macro.cpp
      uses variable sum defined in negative.cpp
   function mixedVariables() in line 69
      protection public
      14 lines of code
      0 parameters
      5 conditional paths
      uses variable N defined in negative.cpp
      uses variable i defined in pp-trace-macro.cpp
      uses variable sum defined in negative.cpp
      uses variable arr defined in negative.cpp
   function multipleArrays() in line 85
      protection public
      11 lines of code
      0 parameters
      3 conditional paths
      uses variable N defined in negative.cpp
      uses variable i defined in pp-trace-macro.cpp
      uses variable sum defined in negative.cpp
      uses variable arr defined in negative.cpp
      uses variable Arr defined in HasArr
      uses variable ValArr defined in HasArr
module HasArr
   function explicitThis() in line 121
      protection public
      15 lines of code
      0 parameters
      3 conditional paths
      uses variable N defined in array.cpp
      uses variable i defined in pp-trace-macro.cpp
      uses function printf(const char *,...) defined in structures.h
      uses variable x defined in readability-function-size.cpp
   function implicitThis() in line 105
      protection public
      15 lines of code
      0 parameters
      3 conditional paths
      uses variable N defined in array.cpp
      uses variable i defined in pp-trace-macro.cpp
      uses function printf(const char *,...) defined in structures.h
      uses variable Arr defined in HasArr
      uses variable ValArr defined in HasArr
      uses variable x defined in readability-function-size.cpp
   variable Arr in line 103
      protection public
   variable ValArr in line 104
      protection public
module HasIndirectArr
   function explicitThis() in line 114
      protection public
      9 lines of code
      0 parameters
      3 conditional paths
      uses variable N defined in negative.cpp
      uses variable i defined in pp-trace-macro.cpp
      uses function printf(const char *,...) defined in structures.h
      uses variable Arr defined in HasArr
      uses variable ValArr defined in HasArr
      uses variable x defined in Val
   function implicitThis() in line 104
      protection public
      9 lines of code
      0 parameters
      3 conditional paths
      uses variable N defined in negative.cpp
      uses variable i defined in pp-trace-macro.cpp
      uses function printf(const char *,...) defined in structures.h
      uses variable Arr defined in HasArr
      uses variable ValArr defined in HasArr
      uses variable x defined in Val
   variable HA in line 103
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/clang-modernize/LoopConvert/nesting.cpp
module nesting.cpp
   function f() in line 7
      protection public
      63 lines of code
      0 parameters
      11 conditional paths
      uses variable Arr defined in naming-alias.cpp
      uses macro definition N defined in misc-swapped-arguments.cpp
      uses variable i defined in pp-trace-macro.cpp
      uses variable j defined in pp-trace-macro.cpp
      uses variable x defined in Val
      uses variable l defined in clang-modernize/PassByValue/basic.cpp
      uses macro definition M defined in google-explicit-make-pair.cpp
      uses function printf(const char *,...) defined in structures.h
      uses variable x defined in readability-function-size.cpp
      uses function begin() defined in Nested
      uses function end() defined in Nested
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/clang-modernize/LoopConvert/nocompile.cpp
module nocompile.cpp
   variable hasSyntaxError in line 12
      protection public
   function valid() in line 5
      protection public
      7 lines of code
      0 parameters
      2 conditional paths
      uses variable arr defined in array.cpp
      uses variable sum defined in naming-conflict.cpp
      uses variable i defined in pp-trace-macro.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/clang-modernize/LoopConvert/pseudoarray.cpp
module pseudoarray.cpp
   variable N in line 6
      protection public
   variable v in line 7
      protection public
   variable pv in line 8
      protection public
   variable cv in line 10
      protection public
   function f() in line 12
      protection public
      46 lines of code
      0 parameters
      6 conditional paths
      uses variable sum defined in naming-conflict.cpp
      uses variable v defined in pseudoarray.cpp
      uses variable i defined in pp-trace-macro.cpp
      uses function printf(const char *,...) defined in structures.h
      uses variable pv defined in pseudoarray.cpp
      uses variable cv defined in pseudoarray.cpp
   function noContainer() in line 60
      protection public
      7 lines of code
      0 parameters
      3 conditional paths
      uses variable v defined in pseudoarray.cpp
      uses variable i defined in pp-trace-macro.cpp
   function NoBeginEndTest() in line 88
      protection public
      17 lines of code
      0 parameters
      5 conditional paths
      uses function size() defined in NoBeginEnd
      uses variable i defined in pp-trace-macro.cpp
      uses function size() defined in NoConstBeginEnd
      uses function size() defined in ConstBeginEnd
module NoBeginEnd
   function size() in line 69
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
module NoConstBeginEnd
   function begin() in line 75
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function end() in line 76
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function size() in line 74
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function NoConstBeginEnd() in line 73
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
module ConstBeginEnd
   function begin() in line 82
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function end() in line 83
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function size() in line 81
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function ConstBeginEnd() in line 80
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/clang-modernize/LoopConvert/single-iterator.cpp
module single-iterator.cpp
   function complexContainer() in line 7
      protection public
      12 lines of code
      0 parameters
      2 conditional paths
      uses function begin(const MyArray &) defined in free_begin_end_fail.cpp
      uses function end(const MyArray &) defined in free_begin_end_fail.cpp
      uses variable i defined in pp-trace-macro.cpp
      uses variable j defined in pp-trace-macro.cpp
   function f() in line 20
      protection public
      96 lines of code
      0 parameters
      14 conditional paths
      uses variable t defined in negative-iterator.cpp
      uses function begin() defined in T
      uses function end() defined in T
      uses function printf(const char *,...) defined in structures.h
      uses variable s defined in negative-iterator.cpp
      uses function begin() defined in S
      uses function end() defined in S
      uses variable u defined in negative-iterator.cpp
      uses function begin() defined in U
      uses function end() defined in U
      uses variable i defined in pp-trace-macro.cpp
      uses variable v defined in naming-alias.cpp
      uses function begin() defined in doublyDependent
      uses function end() defined in doublyDependent
   function different_type() in line 117
      protection public
      36 lines of code
      0 parameters
      5 conditional paths
      uses variable s defined in negative-iterator.cpp
      uses function begin() defined in S
      uses function end() defined in S
      uses function printf(const char *,...) defined in structures.h
      uses variable v defined in naming-alias.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/clang-modernize/ReplaceAutoPtr/Inputs/memory_stub.h
module std::auto_ptr_ref
   variable y_ in line 23
      protection public
module std::auto_ptr
   function operator auto_ptr< Y >() in line 46
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function operator auto_ptr_ref< Y >() in line 41
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
   function operator=(auto_ptr &) in line 33
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function operator=(auto_ptr< Y > &) in line 34
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function operator=(auto_ptr_ref< X >) in line 37
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function auto_ptr(X *) in line 30
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function auto_ptr(auto_ptr &) in line 31
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function auto_ptr(auto_ptr< Y > &) in line 32
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ~auto_ptr() in line 38
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function auto_ptr(auto_ptr_ref< X >) in line 40
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   variable x_ in line 49
module std::auto_ptr< void >
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/clang-modernize/ReplaceAutoPtr/move.cpp
module move.cpp
   function takes_ownership_fn(std::auto_ptr< int >) in line 16
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function get_by_value() in line 19
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function f() in line 30
      protection public
      34 lines of code
      0 parameters
      1 conditional paths
      uses variable a defined in diagnostic.cpp
      uses variable b defined in clang-modernize/AddOverride/basic.cpp
      uses function get_wrapped() defined in Wrapper
      uses function takes_ownership_fn(std::auto_ptr< int >) defined in move.cpp
      uses variable d defined in clang-modernize/ReplaceAutoPtr/basic.cpp
      uses function g(int,int *,int,int *,int,int *,int) defined in yes.cpp
      uses function get_by_value() defined in move.cpp
module Wrapper
   function get_wrapped() in line 24
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   variable wrapped in line 27
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/clang-modernize/ReplaceAutoPtr/template_fail.cpp
module template_fail.cpp
   typedef aaaaaaaa in line 30
      protection public
   function f() in line 24
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function p(unsigned short) defined in google-runtime-int.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/clang-modernize/UseAuto/basic_iterator_tests.cpp
module basic_iterator_tests.cpp
   function main(int,char **) in line 100
      protection public
      24 lines of code
      2 parameters
      1 conditional paths
      uses function begin() defined in C
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/clang-modernize/UseAuto/Inputs/test_std_container.h
module internal::iterator_wrapper
   function operator!=(const iterator_wrapper< T, i > &) in line 36
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function operator*() in line 38
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function operator++() in line 37
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function iterator_wrapper() in line 33
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
module internal::iterator_provider
module internal::iterator_provider::iterator
   function iterator() in line 46
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function iterator(const iterator &) in line 47
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
module internal::iterator_provider::const_iterator
   function operator iterator() in line 54
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function const_iterator(int) in line 51
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function const_iterator(const iterator &) in line 52
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function const_iterator(const const_iterator &) in line 53
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
module internal::iterator_provider::reverse_iterator
module internal::iterator_provider::const_reverse_iterator
module std::CONTAINER
   function begin() in line 99
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function begin() in line 102
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function end() in line 100
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function end() in line 103
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function find(const K &) in line 112
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function rbegin() in line 105
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function rbegin() in line 108
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function rend() in line 106
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function rend() in line 109
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function CONTAINER() in line 97
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/clang-modernize/UseAuto/new.cpp
module new.cpp
   function main(int,char **) in line 11
      protection public
      87 lines of code
      2 parameters
      1 conditional paths
      uses variable a defined in diagnostic.cpp
      uses variable b defined in clang-modernize/AddOverride/basic.cpp
      uses function func(int) defined in clang-apply-replacements/Inputs/basic/basic.h
      uses function f() defined in no.cpp
      uses function g(int,int *,int,int *,int,int *,int) defined in yes.cpp
      uses variable d defined in clang-modernize/ReplaceAutoPtr/basic.cpp
      uses function h() defined in arg-comments.cpp
      uses variable j defined in pp-trace-macro.cpp
      uses variable l defined in clang-modernize/PassByValue/basic.cpp
module MyType
module MyDerivedType
   inherits from MyType
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/clang-modernize/UseAuto/new_cv_failing.cpp
module new_cv_failing.cpp
   function main(int,char **) in line 12
      protection public
      25 lines of code
      2 parameters
      1 conditional paths
      uses variable d defined in clang-modernize/ReplaceAutoPtr/basic.cpp
      uses variable d2 defined in clang-modernize/AddOverride/basic.cpp
      uses function f() defined in no.cpp
module MyType
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/clang-modernize/UseNullptr/basic_failing.cpp
module basic_failing.cpp
   macro definition NULL in line 6
      protection public
   function f2(T *) in line 23
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable a defined in diagnostic.cpp
      uses macro definition NULL defined in basic_failing.cpp
module A
   abstract class
   function clone() in line 8
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function clone() in line 47
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function f() in line 6
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function f() in line 11
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function f() in line 14
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function g() in line 7
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function h() in line 12
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function i() in line 14
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function method() in line 30
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function operator=(A &&) in line 7
      1 lines of code
      1 parameters
      1 conditional paths
   function ~A() in line 9
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function A(const Movable &) in line 22
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function A(T *) in line 11
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function A(T) in line 4
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 19
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 24
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 10
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 13
      1 lines of code
      1 parameters
      1 conditional paths
   function A() in line 37
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function A(int,int) in line 38
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function A(void *) in line 40
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function A(void *,void *) in line 41
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function A(const A &) in line 43
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 47
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function A(double,double) in line 51
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function A(T &&...) in line 56
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 18
      1 lines of code
      1 parameters
      1 conditional paths
   function A(A &&) in line 5
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 3
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 11
      1 lines of code
      1 parameters
      1 conditional paths
   variable ee in line 149
      protection public
   variable field in line 26
      protection public
   variable foo in line 6
      protection public
   variable M in line 25
      protection public
   variable Ptr in line 19
      protection public
   variable s in line 15
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/clang-modernize/UseNullptr/macros.cpp
module clang-modernize/UseNullptr/macros.cpp
   macro definition NULL in line 8
      protection public
   macro definition MACRO_EXPANSION_HAS_NULL in line 14
      protection public
   macro definition MACRO_EXPANSION_HAS_NULL in line 30
      protection public
   macro definition MACRO_EXPANSION_HAS_NULL in line 44
      protection public
   macro definition MACRO_EXPANSION_HAS_NULL in line 57
      protection public
   macro definition OUTER_MACRO in line 63
      protection public
   macro definition MY_NULL in line 75
      protection public
   macro definition IS_EQ in line 82
      protection public
   macro definition myassert in line 95
      protection public
   macro definition BLAH in line 102
      protection public
   macro definition BLAH2 in line 104
      protection public
   macro definition EXPECT_NULL in line 112
      protection public
   macro definition EXPECT_NULL2 in line 114
      protection public
   macro definition EQUALS_PTR in line 123
      protection public
   macro definition EQUALS_PTR_I in line 128
      protection public
   macro definition decorate in line 136
      protection public
   macro definition INT_AND_PTR_USE in line 145
      protection public
   macro definition PTR_AND_PTR_USE in line 151
      protection public
   macro definition OPTIONAL_CODE in line 157
      protection public
   macro definition NOT_NULL in line 158
      protection public
   macro definition CALL in line 159
      protection public
   variable MACRO_EXPANSION_HAS_NULL in line 24
      protection public
   function dummy(int *) in line 11
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function side_effect() in line 12
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function test_macro_expansion1() in line 29
      protection public
      12 lines of code
      0 parameters
      1 conditional paths
      uses macro definition MACRO_EXPANSION_HAS_NULL defined in clang-modernize/UseNullptr/macros.cpp
   function test_macro_expansion2() in line 43
      protection public
      12 lines of code
      0 parameters
      1 conditional paths
      uses macro definition MACRO_EXPANSION_HAS_NULL defined in clang-modernize/UseNullptr/macros.cpp
   function test_macro_expansion3() in line 56
      protection public
      17 lines of code
      0 parameters
      1 conditional paths
      uses macro definition OUTER_MACRO defined in clang-modernize/UseNullptr/macros.cpp
   function test_macro_expansion4() in line 74
      protection public
      7 lines of code
      0 parameters
      1 conditional paths
      uses function p(unsigned short) defined in google-runtime-int.cpp
      uses macro definition MY_NULL defined in clang-modernize/UseNullptr/macros.cpp
   function test_macro_args() in line 83
      protection public
      82 lines of code
      0 parameters
      1 conditional paths
      uses macro definition IS_EQ defined in clang-modernize/UseNullptr/macros.cpp
      uses macro definition NULL defined in clang-modernize/UseNullptr/macros.cpp
      uses macro definition myassert defined in clang-modernize/UseNullptr/macros.cpp
      uses macro definition BLAH defined in clang-modernize/UseNullptr/macros.cpp
      uses macro definition BLAH2 defined in clang-modernize/UseNullptr/macros.cpp
      uses macro definition EXPECT_NULL defined in clang-modernize/UseNullptr/macros.cpp
      uses macro definition EXPECT_NULL2 defined in clang-modernize/UseNullptr/macros.cpp
      uses macro definition EQUALS_PTR defined in clang-modernize/UseNullptr/macros.cpp
      uses macro definition EQUALS_PTR_I defined in clang-modernize/UseNullptr/macros.cpp
      uses macro definition decorate defined in clang-modernize/UseNullptr/macros.cpp
      uses macro definition INT_AND_PTR_USE defined in clang-modernize/UseNullptr/macros.cpp
      uses macro definition PTR_AND_PTR_USE defined in clang-modernize/UseNullptr/macros.cpp
      uses macro definition OPTIONAL_CODE defined in clang-modernize/UseNullptr/macros.cpp
      uses macro definition NOT_NULL defined in clang-modernize/UseNullptr/macros.cpp
      uses macro definition CALL defined in clang-modernize/UseNullptr/macros.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/clang-tidy/macros.cpp
module clang-tidy/macros.cpp
   macro definition Q in line 3
      protection public
   function Q(A) in line 5
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/clang-modernize/UseNullptr/nullptr_t.cpp
module nullptr_t.cpp
   variable nullptr_t in line 7
      protection public
   function external() in line 12
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function make_null() in line 14
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function external() defined in nullptr_t.cpp
   function func() in line 19
      protection public
      11 lines of code
      0 parameters
      1 conditional paths
      uses function make_null() defined in nullptr_t.cpp
      uses variable var defined in InconsistentSubHeader.h
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/clang-query/errors.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/clang-query/function-decl.c
module function-decl.c
   function foo(void) in line 4
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/clang-rename/VarTest.cpp
module VarTest.cpp
   variable foo in line 8
      protection public
   variable bar in line 9
      protection public
   variable baz in line 10
      protection public
   function fun1() in line 11
      protection public
      14 lines of code
      0 parameters
      1 conditional paths
      uses variable foo defined in A
      uses variable b defined in clang-modernize/AddOverride/basic.cpp
      uses variable baz defined in VarTest.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/clang-tidy/arg-comments.cpp
module arg-comments.cpp
   function ffff(int,int) in line 7
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function f(int,int) in line 9
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function g() in line 10
      protection public
      7 lines of code
      0 parameters
      1 conditional paths
      uses function f(int,int) defined in arg-comments.cpp
   function NewCallback(void(*)(T1, T2),T1,T2) in line 21
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function NewPermanentCallback(void(*)(T1, T2),T1,T2) in line 24
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function h() in line 26
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function NewCallback(void(*)(T1, T2),T1,T2) defined in arg-comments.cpp
      uses function ffff(int,int) defined in arg-comments.cpp
      uses function NewPermanentCallback(void(*)(T1, T2),T1,T2) defined in arg-comments.cpp
      uses function variadic(Args &&...) defined in arg-comments.cpp
      uses function variadic2(int,Args &&...) defined in arg-comments.cpp
   function variadic(Args &&...) in line 32
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function variadic2(int,Args &&...) in line 35
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function templates() in line 37
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
      uses function variadic(Args &&...) defined in arg-comments.cpp
      uses function variadic2(int,Args &&...) defined in arg-comments.cpp
module Closure
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/clang-tidy/clang-tidy-diff.cpp
module A
   abstract class
   function clone() in line 8
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function clone() in line 47
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function f() in line 6
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function f() in line 11
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function f() in line 14
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function g() in line 7
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function h() in line 12
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function i() in line 14
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function method() in line 30
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function operator=(A &&) in line 7
      1 lines of code
      1 parameters
      1 conditional paths
   function ~A() in line 9
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function A(const Movable &) in line 22
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function A(T *) in line 11
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function A(T) in line 4
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 19
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 24
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 10
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 13
      1 lines of code
      1 parameters
      1 conditional paths
   function A() in line 37
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function A(int,int) in line 38
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function A(void *) in line 40
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function A(void *,void *) in line 41
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function A(const A &) in line 43
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 47
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function A(double,double) in line 51
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function A(T &&...) in line 56
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 18
      1 lines of code
      1 parameters
      1 conditional paths
   function A(A &&) in line 5
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 3
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 11
      1 lines of code
      1 parameters
      1 conditional paths
   variable ee in line 149
      protection public
   variable field in line 26
      protection public
   variable foo in line 6
      protection public
   variable M in line 25
      protection public
   variable Ptr in line 19
      protection public
   variable s in line 15
      protection public
module B
   inherits from A< E1 >
   inherits from A
   inherits from A
   inherits from A
   inherits from A
   function clone() in line 11
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
      uses function clone() defined in A
   function clone() in line 53
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function create() in line 38
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function f() in line 20
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function g() in line 14
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function method() in line 35
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function placeholder_for_f() in line 11
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function B(const Movable &) in line 31
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function B(std::initializer_list< int >) in line 62
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function B(const std::initializer_list< unsigned > &) in line 63
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function B(std::initializer_list< unsigned > &&) in line 64
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function B(::std::initializer_list< double >) in line 66
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function B(const ::std::initializer_list< char > &) in line 70
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function B(::std::initializer_list< char > &&) in line 74
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function B(int) in line 20
      1 lines of code
      1 parameters
      1 conditional paths
   function B(B &&) in line 13
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function B(int) in line 6
      1 lines of code
      1 parameters
      1 conditional paths
   variable kFalse in line 12
      protection public
   variable M in line 33
      protection public
   variable s in line 20
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/clang-tidy/config-files.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/clang-tidy/deduplication.cpp
module deduplication.cpp
   function f() in line 9
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable a defined in diagnostic.cpp
      uses variable b defined in clang-modernize/AddOverride/basic.cpp
module A
   abstract class
   function clone() in line 8
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function clone() in line 47
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function f() in line 6
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function f() in line 11
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function f() in line 14
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function g() in line 7
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function h() in line 12
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function i() in line 14
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function method() in line 30
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function operator=(A &&) in line 7
      1 lines of code
      1 parameters
      1 conditional paths
   function ~A() in line 9
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function A(const Movable &) in line 22
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function A(T *) in line 11
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function A(T) in line 4
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 19
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 24
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 10
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 13
      1 lines of code
      1 parameters
      1 conditional paths
   function A() in line 37
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function A(int,int) in line 38
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function A(void *) in line 40
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function A(void *,void *) in line 41
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function A(const A &) in line 43
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 47
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function A(double,double) in line 51
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function A(T &&...) in line 56
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 18
      1 lines of code
      1 parameters
      1 conditional paths
   function A(A &&) in line 5
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 3
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 11
      1 lines of code
      1 parameters
      1 conditional paths
   variable ee in line 149
      protection public
   variable field in line 26
      protection public
   variable foo in line 6
      protection public
   variable M in line 25
      protection public
   variable Ptr in line 19
      protection public
   variable s in line 15
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/clang-tidy/diagnostic.cpp
module diagnostic.cpp
   macro definition MACRO_FROM_COMMAND_LINE in line 24
      protection public
   variable a in line 15
      protection public
module A
   abstract class
   function clone() in line 8
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function clone() in line 47
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function f() in line 6
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function f() in line 11
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function f() in line 14
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function g() in line 7
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function h() in line 12
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function i() in line 14
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function method() in line 30
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function operator=(A &&) in line 7
      1 lines of code
      1 parameters
      1 conditional paths
   function ~A() in line 9
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function A(const Movable &) in line 22
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function A(T *) in line 11
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function A(T) in line 4
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 19
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 24
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 10
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 13
      1 lines of code
      1 parameters
      1 conditional paths
   function A() in line 37
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function A(int,int) in line 38
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function A(void *) in line 40
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function A(void *,void *) in line 41
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function A(const A &) in line 43
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 47
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function A(double,double) in line 51
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function A(T &&...) in line 56
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 18
      1 lines of code
      1 parameters
      1 conditional paths
   function A(A &&) in line 5
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 3
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 11
      1 lines of code
      1 parameters
      1 conditional paths
   variable ee in line 149
      protection public
   variable field in line 26
      protection public
   variable foo in line 6
      protection public
   variable M in line 25
      protection public
   variable Ptr in line 19
      protection public
   variable s in line 15
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/clang-tidy/file-filter.cpp
module A
   abstract class
   function clone() in line 8
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function clone() in line 47
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function f() in line 6
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function f() in line 11
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function f() in line 14
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function g() in line 7
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function h() in line 12
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function i() in line 14
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function method() in line 30
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function operator=(A &&) in line 7
      1 lines of code
      1 parameters
      1 conditional paths
   function ~A() in line 9
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function A(const Movable &) in line 22
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function A(T *) in line 11
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function A(T) in line 4
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 19
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 24
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 10
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 13
      1 lines of code
      1 parameters
      1 conditional paths
   function A() in line 37
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function A(int,int) in line 38
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function A(void *) in line 40
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function A(void *,void *) in line 41
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function A(const A &) in line 43
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 47
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function A(double,double) in line 51
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function A(T &&...) in line 56
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 18
      1 lines of code
      1 parameters
      1 conditional paths
   function A(A &&) in line 5
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 3
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 11
      1 lines of code
      1 parameters
      1 conditional paths
   variable ee in line 149
      protection public
   variable field in line 26
      protection public
   variable foo in line 6
      protection public
   variable M in line 25
      protection public
   variable Ptr in line 19
      protection public
   variable s in line 15
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/clang-tidy/fix-errors.cpp
module A
   abstract class
   function clone() in line 8
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function clone() in line 47
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function f() in line 6
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function f() in line 11
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function f() in line 14
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function g() in line 7
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function h() in line 12
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function i() in line 14
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function method() in line 30
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function operator=(A &&) in line 7
      1 lines of code
      1 parameters
      1 conditional paths
   function ~A() in line 9
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function A(const Movable &) in line 22
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function A(T *) in line 11
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function A(T) in line 4
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 19
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 24
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 10
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 13
      1 lines of code
      1 parameters
      1 conditional paths
   function A() in line 37
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function A(int,int) in line 38
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function A(void *) in line 40
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function A(void *,void *) in line 41
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function A(const A &) in line 43
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 47
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function A(double,double) in line 51
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function A(T &&...) in line 56
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 18
      1 lines of code
      1 parameters
      1 conditional paths
   function A(A &&) in line 5
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 3
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 11
      1 lines of code
      1 parameters
      1 conditional paths
   variable ee in line 149
      protection public
   variable field in line 26
      protection public
   variable foo in line 6
      protection public
   variable M in line 25
      protection public
   variable Ptr in line 19
      protection public
   variable s in line 15
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/clang-tidy/fix.cpp
module A
   abstract class
   function clone() in line 8
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function clone() in line 47
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function f() in line 6
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function f() in line 11
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function f() in line 14
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function g() in line 7
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function h() in line 12
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function i() in line 14
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function method() in line 30
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function operator=(A &&) in line 7
      1 lines of code
      1 parameters
      1 conditional paths
   function ~A() in line 9
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function A(const Movable &) in line 22
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function A(T *) in line 11
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function A(T) in line 4
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 19
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 24
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 10
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 13
      1 lines of code
      1 parameters
      1 conditional paths
   function A() in line 37
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function A(int,int) in line 38
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function A(void *) in line 40
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function A(void *,void *) in line 41
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function A(const A &) in line 43
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 47
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function A(double,double) in line 51
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function A(T &&...) in line 56
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 18
      1 lines of code
      1 parameters
      1 conditional paths
   function A(A &&) in line 5
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 3
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 11
      1 lines of code
      1 parameters
      1 conditional paths
   variable ee in line 149
      protection public
   variable field in line 26
      protection public
   variable foo in line 6
      protection public
   variable M in line 25
      protection public
   variable Ptr in line 19
      protection public
   variable s in line 15
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/clang-tidy/google-explicit-constructor.cpp
module google-explicit-constructor.cpp
   variable size_t in line 5
      protection public
   function f(std::initializer_list< int >) in line 128
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable d defined in clang-modernize/ReplaceAutoPtr/basic.cpp
module std::initializer_list
   function begin() in line 31
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function end() in line 32
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function size() in line 30
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function initializer_list(const _E *,size_t) in line 14
      4 lines of code
      2 parameters
      1 conditional paths
   function initializer_list() in line 28
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   variable __begin_ in line 11
   variable __size_ in line 12
module A
   abstract class
   function clone() in line 8
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function clone() in line 47
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function f() in line 6
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function f() in line 11
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function f() in line 14
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function g() in line 7
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function h() in line 12
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function i() in line 14
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function method() in line 30
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function operator=(A &&) in line 7
      1 lines of code
      1 parameters
      1 conditional paths
   function ~A() in line 9
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function A(const Movable &) in line 22
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function A(T *) in line 11
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function A(T) in line 4
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 19
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 24
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 10
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 13
      1 lines of code
      1 parameters
      1 conditional paths
   function A() in line 37
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function A(int,int) in line 38
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function A(void *) in line 40
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function A(void *,void *) in line 41
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function A(const A &) in line 43
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 47
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function A(double,double) in line 51
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function A(T &&...) in line 56
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 18
      1 lines of code
      1 parameters
      1 conditional paths
   function A(A &&) in line 5
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 3
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 11
      1 lines of code
      1 parameters
      1 conditional paths
   variable ee in line 149
      protection public
   variable field in line 26
      protection public
   variable foo in line 6
      protection public
   variable M in line 25
      protection public
   variable Ptr in line 19
      protection public
   variable s in line 15
      protection public
module B
   inherits from A< E1 >
   inherits from A
   inherits from A
   inherits from A
   inherits from A
   function clone() in line 11
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
      uses function clone() defined in A
   function clone() in line 53
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function create() in line 38
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function f() in line 20
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function g() in line 14
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function method() in line 35
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function placeholder_for_f() in line 11
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function B(const Movable &) in line 31
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function B(std::initializer_list< int >) in line 62
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function B(const std::initializer_list< unsigned > &) in line 63
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function B(std::initializer_list< unsigned > &&) in line 64
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function B(::std::initializer_list< double >) in line 66
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function B(const ::std::initializer_list< char > &) in line 70
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function B(::std::initializer_list< char > &&) in line 74
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function B(int) in line 20
      1 lines of code
      1 parameters
      1 conditional paths
   function B(B &&) in line 13
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function B(int) in line 6
      1 lines of code
      1 parameters
      1 conditional paths
   variable kFalse in line 12
      protection public
   variable M in line 33
      protection public
   variable s in line 20
      protection public
module C
   inherits from B
   inherits from A
   abstract class
   function begin() in line 185
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function begin() in line 187
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function clone() in line 14
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function doLoop() in line 193
      protection public
      21 lines of code
      0 parameters
      6 conditional paths
      uses function begin() defined in C
      uses function end() defined in C
      uses function doSomething() defined in C
   function doLoop() in line 215
      protection public
      13 lines of code
      0 parameters
      4 conditional paths
      uses function begin() defined in C
      uses function end() defined in C
      uses function doSomething() defined in C
   function doSomething() in line 190
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function doSomething() in line 191
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function end() in line 186
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function end() in line 188
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function h() in line 27
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function C(const Movable &) in line 39
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses variable a defined in Movable
   function C(const Movable &,int) in line 43
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function C(initializer_list< int >) in line 82
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function C(const initializer_list< unsigned > &) in line 83
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function C(initializer_list< unsigned > &&) in line 84
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function C(int) in line 22
      1 lines of code
      1 parameters
      1 conditional paths
   function C(int) in line 9
      1 lines of code
      1 parameters
      1 conditional paths
   variable i in line 46
      protection public
   variable M in line 45
      protection public
   variable s in line 24
      protection public
module C2
   function begin() in line 234
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function doLoop() in line 237
      protection public
      7 lines of code
      0 parameters
      2 conditional paths
      uses function begin() defined in C
      uses function end() defined in C
   function end() in line 235
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function C2(initializer_list< int >) in line 89
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function C2(const initializer_list< unsigned > &) in line 90
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function C2(initializer_list< unsigned > &&) in line 91
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function C2(initializer_list< double >) in line 93
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function C2(int) in line 3
      1 lines of code
      1 parameters
      1 conditional paths
module C3
   function C3(initializer_list< T >) in line 100
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function C3(const std::initializer_list< T * > &) in line 101
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function C3(::std::initializer_list< T ** > &&) in line 102
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function C3(initializer_list< U >) in line 105
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
module D
   inherits from C
   inherits from A
   function clone() in line 19
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function h() in line 36
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function D(const Movable &) in line 51
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function D(T) in line 110
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function D() in line 29
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   variable M in line 53
      protection public
   variable s in line 30
      protection public
   variable s2 in line 31
      protection public
module E
   inherits from A
   function h() in line 43
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function E(const Movable &) in line 60
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function E(T *) in line 115
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function E(U *) in line 119
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function E(T) in line 123
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function E(U) in line 125
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   variable M in line 62
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/clang-tidy/google-explicit-make-pair.cpp
module google-explicit-make-pair.cpp
   macro definition M in line 40
      protection public
   function make_pair(T1,T2) in line 11
      protection public
      3 lines of code
      2 parameters
      1 conditional paths
      uses variable x defined in readability-function-size.cpp
      uses variable y defined in readability-named-parameter.cpp
   function templ(T,T) in line 17
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
      uses variable a defined in diagnostic.cpp
      uses variable b defined in clang-modernize/AddOverride/basic.cpp
      uses function t() defined in google-explicit-make-pair.cpp
   function t() in line 25
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function test(int) in line 27
      protection public
      26 lines of code
      1 parameters
      1 conditional paths
      uses variable i defined in pp-trace-macro.cpp
      uses function templ(T,T) defined in google-explicit-make-pair.cpp
      uses function make_pair(T1,T2) defined in google-explicit-make-pair.cpp
module std::pair
   function pair(T1,T2) in line 7
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/clang-tidy/google-member-string-references.cpp
module google-member-string-references.cpp
   typedef string in line 8
      protection public
   variable d in line 35
      protection public
   variable dd in line 50
      protection public
module std::basic_string
   function c_str() in line 13
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function basic_string() in line 11
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function basic_string(const C *,const A &) in line 12
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
module string
module A
   abstract class
   function clone() in line 8
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function clone() in line 47
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function f() in line 6
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function f() in line 11
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function f() in line 14
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function g() in line 7
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function h() in line 12
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function i() in line 14
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function method() in line 30
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function operator=(A &&) in line 7
      1 lines of code
      1 parameters
      1 conditional paths
   function ~A() in line 9
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function A(const Movable &) in line 22
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function A(T *) in line 11
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function A(T) in line 4
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 19
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 24
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 10
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 13
      1 lines of code
      1 parameters
      1 conditional paths
   function A() in line 37
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function A(int,int) in line 38
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function A(void *) in line 40
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function A(void *,void *) in line 41
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function A(const A &) in line 43
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 47
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function A(double,double) in line 51
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function A(T &&...) in line 56
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 18
      1 lines of code
      1 parameters
      1 conditional paths
   function A(A &&) in line 5
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 3
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 11
      1 lines of code
      1 parameters
      1 conditional paths
   variable ee in line 149
      protection public
   variable field in line 26
      protection public
   variable foo in line 6
      protection public
   variable M in line 25
      protection public
   variable Ptr in line 19
      protection public
   variable s in line 15
      protection public
module B
   inherits from A< E1 >
   inherits from A
   inherits from A
   inherits from A
   inherits from A
   function clone() in line 11
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
      uses function clone() defined in A
   function clone() in line 53
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function create() in line 38
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function f() in line 20
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function g() in line 14
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function method() in line 35
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function placeholder_for_f() in line 11
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function B(const Movable &) in line 31
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function B(std::initializer_list< int >) in line 62
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function B(const std::initializer_list< unsigned > &) in line 63
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function B(std::initializer_list< unsigned > &&) in line 64
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function B(::std::initializer_list< double >) in line 66
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function B(const ::std::initializer_list< char > &) in line 70
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function B(::std::initializer_list< char > &&) in line 74
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function B(int) in line 20
      1 lines of code
      1 parameters
      1 conditional paths
   function B(B &&) in line 13
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function B(int) in line 6
      1 lines of code
      1 parameters
      1 conditional paths
   variable kFalse in line 12
      protection public
   variable M in line 33
      protection public
   variable s in line 20
      protection public
module C
   inherits from B
   inherits from A
   abstract class
   function begin() in line 185
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function begin() in line 187
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function clone() in line 14
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function doLoop() in line 193
      protection public
      21 lines of code
      0 parameters
      6 conditional paths
      uses function begin() defined in C
      uses function end() defined in C
      uses function doSomething() defined in C
   function doLoop() in line 215
      protection public
      13 lines of code
      0 parameters
      4 conditional paths
      uses function begin() defined in C
      uses function end() defined in C
      uses function doSomething() defined in C
   function doSomething() in line 190
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function doSomething() in line 191
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function end() in line 186
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function end() in line 188
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function h() in line 27
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function C(const Movable &) in line 39
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses variable a defined in Movable
   function C(const Movable &,int) in line 43
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function C(initializer_list< int >) in line 82
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function C(const initializer_list< unsigned > &) in line 83
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function C(initializer_list< unsigned > &&) in line 84
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function C(int) in line 22
      1 lines of code
      1 parameters
      1 conditional paths
   function C(int) in line 9
      1 lines of code
      1 parameters
      1 conditional paths
   variable i in line 46
      protection public
   variable M in line 45
      protection public
   variable s in line 24
      protection public
module D
   inherits from C
   inherits from A
   function clone() in line 19
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function h() in line 36
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function D(const Movable &) in line 51
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function D(T) in line 110
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function D() in line 29
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   variable M in line 53
      protection public
   variable s in line 30
      protection public
   variable s2 in line 31
      protection public
module AA
   variable s in line 38
      protection public
module BB
   variable s in line 43
      protection public
module CC
   variable s in line 47
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/clang-tidy/google-memset-zero-length.cpp
module google-memset-zero-length.cpp
   macro definition M in line 26
      protection public
   function memset(void *,int,__SIZE_TYPE__) in line 4
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function memtmpl() in line 11
      protection public
      10 lines of code
      0 parameters
      1 conditional paths
      uses function memset(void *,int,__SIZE_TYPE__) defined in google-memset-zero-length.cpp
   function foo(void *,int,int) in line 22
      protection public
      40 lines of code
      3 parameters
      1 conditional paths
      uses function memset(void *,int,__SIZE_TYPE__) defined in google-memset-zero-length.cpp
      uses variable a defined in diagnostic.cpp
      uses variable v defined in naming-alias.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/clang-tidy/google-module.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/clang-tidy/google-namespaces.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/clang-tidy/google-overloaded-unary-and.cpp
module google-overloaded-unary-and.cpp
   variable tfoo in line 15
      protection public
   function operator&(Bar &) in line 18
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function operator&(Qux &,Qux &) in line 26
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
module Foo
   function bar(int *) in line 57
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function baz(int) in line 60
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function operator&() in line 5
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function Foo(int *) in line 54
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function Foo() in line 5
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function Foo(int) in line 6
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function Foo(int,int) in line 7
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function ~Foo() in line 8
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   variable m_p1 in line 63
      protection public
   variable m_p2 in line 64
      protection public
module TFoo
   function operator&() in line 11
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function TFoo(T) in line 27
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ~TFoo() in line 28
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
module Qux
   function operator&(Qux &) in line 23
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/clang-tidy/google-readability-casting.c
module google-readability-casting.c
   function f(const char *) in line 16
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/clang-tidy/google-readability-casting.cpp
module google-readability-casting.cpp
   macro definition CAST in line 138
      protection public
   enumeration Enum in line 6
      protection public
   enumeration E in line 143
      protection public
   enumvalue Enum1 in line 6
      protection public
   enumvalue E1 in line 143
      protection public
   function g() in line 4
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function f(int,double,const char *,const void *,X *) in line 10
      protection public
      89 lines of code
      5 parameters
      1 conditional paths
      uses variable b defined in clang-modernize/AddOverride/basic.cpp
      uses enumvalue Enum1 defined in google-readability-casting.cpp
      uses variable aa defined in readability-simplify-bool-expr.cpp
      uses variable a defined in diagnostic.cpp
      uses function g() defined in google-readability-casting.cpp
   function template_function(T,int) in line 101
      protection public
      8 lines of code
      2 parameters
      1 conditional paths
      uses variable t defined in X
      uses variable j defined in pp-trace-macro.cpp
   function test_templates() in line 122
      protection public
      6 lines of code
      0 parameters
      1 conditional paths
      uses function template_function(T,int) defined in google-readability-casting.cpp
      uses function f() defined in X
   function extern_c_code(const char *) in line 130
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function macros(double) in line 139
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
      uses macro definition CAST defined in google-readability-casting.cpp
      uses variable d defined in clang-modernize/ReplaceAutoPtr/basic.cpp
module X
   function f() in line 28
      protection public
      10 lines of code
      0 parameters
      1 conditional paths
      uses variable v defined in naming-alias.cpp
      uses function swap(vector &) defined in std::vector
   function getS() in line 58
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function operator bool() in line 815
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function operator++(int) in line 41
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function operator--(int) in line 42
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses function X(X &) defined in X
      uses function operator=(X &) defined in X
   function operator=(X &) in line 45
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function X(X &) in line 44
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   variable i in line 47
      protection public
   variable s in line 55
      protection public
   variable t in line 56
      protection public
   variable u in line 57
      protection public
   variable v in line 27
      protection public
module Y
   inherits from X
   function foo(T) in line 56
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
module TemplateStruct
   function f(T,int) in line 112
      protection public
      8 lines of code
      2 parameters
      1 conditional paths
      uses variable t defined in X
      uses variable l defined in clang-modernize/PassByValue/basic.cpp
module A
   abstract class
   function clone() in line 8
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function clone() in line 47
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function f() in line 6
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function f() in line 11
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function f() in line 14
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function g() in line 7
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function h() in line 12
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function i() in line 14
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function method() in line 30
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function operator=(A &&) in line 7
      1 lines of code
      1 parameters
      1 conditional paths
   function ~A() in line 9
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function A(const Movable &) in line 22
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function A(T *) in line 11
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function A(T) in line 4
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 19
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 24
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 10
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 13
      1 lines of code
      1 parameters
      1 conditional paths
   function A() in line 37
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function A(int,int) in line 38
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function A(void *) in line 40
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function A(void *,void *) in line 41
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function A(const A &) in line 43
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 47
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function A(double,double) in line 51
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function A(T &&...) in line 56
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 18
      1 lines of code
      1 parameters
      1 conditional paths
   function A(A &&) in line 5
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 3
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 11
      1 lines of code
      1 parameters
      1 conditional paths
   variable ee in line 149
      protection public
   variable field in line 26
      protection public
   variable foo in line 6
      protection public
   variable M in line 25
      protection public
   variable Ptr in line 19
      protection public
   variable s in line 15
      protection public
module B
   inherits from A< E1 >
   inherits from A
   inherits from A
   inherits from A
   inherits from A
   function clone() in line 11
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
      uses function clone() defined in A
   function clone() in line 53
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function create() in line 38
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function f() in line 20
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function g() in line 14
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function method() in line 35
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function placeholder_for_f() in line 11
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function B(const Movable &) in line 31
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function B(std::initializer_list< int >) in line 62
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function B(const std::initializer_list< unsigned > &) in line 63
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function B(std::initializer_list< unsigned > &&) in line 64
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function B(::std::initializer_list< double >) in line 66
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function B(const ::std::initializer_list< char > &) in line 70
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function B(::std::initializer_list< char > &&) in line 74
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function B(int) in line 20
      1 lines of code
      1 parameters
      1 conditional paths
   function B(B &&) in line 13
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function B(int) in line 6
      1 lines of code
      1 parameters
      1 conditional paths
   variable kFalse in line 12
      protection public
   variable M in line 33
      protection public
   variable s in line 20
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/clang-tidy/google-readability-namespace-comments.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/clang-tidy/google-readability-todo.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/clang-tidy/google-runtime-int.c
module google-runtime-int.c
   function a() in line 3
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function b(long) in line 5
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function bar(const short,unsigned short) in line 7
      protection public
      17 lines of code
      2 parameters
      1 conditional paths
      uses variable foo defined in VarTest.cpp
      uses variable y defined in readability-named-parameter.cpp
   function qux() in line 25
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/clang-tidy/google-runtime-int.cpp
module google-runtime-int.cpp
   macro definition l in line 48
      protection public
   typedef uint64 in line 7
      protection public
   function a() in line 4
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function b(long) in line 9
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function tmpl() in line 14
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses variable i defined in pp-trace-macro.cpp
   function bar(const short,unsigned short) in line 18
      protection public
      36 lines of code
      2 parameters
      1 conditional paths
      uses function qux() defined in google-runtime-int.cpp
      uses variable y defined in readability-named-parameter.cpp
      uses variable z defined in readability-named-parameter.cpp
      uses macro definition l defined in google-runtime-int.cpp
      uses variable x defined in readability-function-size.cpp
      uses function p(unsigned short) defined in google-runtime-int.cpp
   function p(unsigned short) in line 55
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function qux() in line 57
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/clang-tidy/Inputs/file-filter/header1.h
module A1
   function A1(int) in line 1
      1 lines of code
      1 parameters
      1 conditional paths
   function A1(int) in line 1
      1 lines of code
      1 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/clang-tidy/Inputs/line-filter/header1.h
module A1
   function A1(int) in line 1
      1 lines of code
      1 parameters
      1 conditional paths
   function A1(int) in line 1
      1 lines of code
      1 parameters
      1 conditional paths
module B1
   function B1(int) in line 2
      1 lines of code
      1 parameters
      1 conditional paths
module C1
   function C1(int) in line 3
      1 lines of code
      1 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/clang-tidy/Inputs/file-filter/header2.h
module A2
   function A2(int) in line 1
      1 lines of code
      1 parameters
      1 conditional paths
   function A2(int) in line 1
      1 lines of code
      1 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/clang-tidy/Inputs/line-filter/header2.h
module A2
   function A2(int) in line 1
      1 lines of code
      1 parameters
      1 conditional paths
   function A2(int) in line 1
      1 lines of code
      1 parameters
      1 conditional paths
module B2
   function B2(int) in line 2
      1 lines of code
      1 parameters
      1 conditional paths
module C2
   function begin() in line 234
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function doLoop() in line 237
      protection public
      7 lines of code
      0 parameters
      2 conditional paths
      uses function begin() defined in C
      uses function end() defined in C
   function end() in line 235
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function C2(initializer_list< int >) in line 89
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function C2(const initializer_list< unsigned > &) in line 90
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function C2(initializer_list< unsigned > &&) in line 91
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function C2(initializer_list< double >) in line 93
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function C2(int) in line 3
      1 lines of code
      1 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/clang-tidy/Inputs/file-filter/system/system-header.h
module A0
   function A0(int) in line 1
      1 lines of code
      1 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/clang-tidy/Inputs/google-namespaces.h
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/clang-tidy/Inputs/Headers/a.h
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/clang-tidy/Inputs/Headers/llvm/a.h
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/clang-tidy/Inputs/Headers/b.h
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/clang-tidy/Inputs/Headers/clang/b.h
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/clang-tidy/Inputs/Headers/clang-c/c.h
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/clang-tidy/Inputs/Headers/gtest/foo.h
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/clang-tidy/Inputs/Headers/i.h
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/clang-tidy/Inputs/Headers/j.h
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/clang-tidy/Inputs/Headers/llvm-c/d.h
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/clang-tidy/Inputs/Headers/s.h
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/clang-tidy/Inputs/line-filter/header3.h
module A3
   function A3(int) in line 1
      1 lines of code
      1 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/clang-tidy/line-filter.cpp
module A
   abstract class
   function clone() in line 8
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function clone() in line 47
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function f() in line 6
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function f() in line 11
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function f() in line 14
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function g() in line 7
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function h() in line 12
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function i() in line 14
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function method() in line 30
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function operator=(A &&) in line 7
      1 lines of code
      1 parameters
      1 conditional paths
   function ~A() in line 9
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function A(const Movable &) in line 22
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function A(T *) in line 11
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function A(T) in line 4
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 19
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 24
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 10
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 13
      1 lines of code
      1 parameters
      1 conditional paths
   function A() in line 37
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function A(int,int) in line 38
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function A(void *) in line 40
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function A(void *,void *) in line 41
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function A(const A &) in line 43
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 47
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function A(double,double) in line 51
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function A(T &&...) in line 56
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 18
      1 lines of code
      1 parameters
      1 conditional paths
   function A(A &&) in line 5
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 3
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 11
      1 lines of code
      1 parameters
      1 conditional paths
   variable ee in line 149
      protection public
   variable field in line 26
      protection public
   variable foo in line 6
      protection public
   variable M in line 25
      protection public
   variable Ptr in line 19
      protection public
   variable s in line 15
      protection public
module B
   inherits from A< E1 >
   inherits from A
   inherits from A
   inherits from A
   inherits from A
   function clone() in line 11
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
      uses function clone() defined in A
   function clone() in line 53
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function create() in line 38
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function f() in line 20
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function g() in line 14
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function method() in line 35
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function placeholder_for_f() in line 11
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function B(const Movable &) in line 31
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function B(std::initializer_list< int >) in line 62
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function B(const std::initializer_list< unsigned > &) in line 63
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function B(std::initializer_list< unsigned > &&) in line 64
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function B(::std::initializer_list< double >) in line 66
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function B(const ::std::initializer_list< char > &) in line 70
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function B(::std::initializer_list< char > &&) in line 74
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function B(int) in line 20
      1 lines of code
      1 parameters
      1 conditional paths
   function B(B &&) in line 13
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function B(int) in line 6
      1 lines of code
      1 parameters
      1 conditional paths
   variable kFalse in line 12
      protection public
   variable M in line 33
      protection public
   variable s in line 20
      protection public
module C
   inherits from B
   inherits from A
   abstract class
   function begin() in line 185
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function begin() in line 187
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function clone() in line 14
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function doLoop() in line 193
      protection public
      21 lines of code
      0 parameters
      6 conditional paths
      uses function begin() defined in C
      uses function end() defined in C
      uses function doSomething() defined in C
   function doLoop() in line 215
      protection public
      13 lines of code
      0 parameters
      4 conditional paths
      uses function begin() defined in C
      uses function end() defined in C
      uses function doSomething() defined in C
   function doSomething() in line 190
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function doSomething() in line 191
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function end() in line 186
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function end() in line 188
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function h() in line 27
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function C(const Movable &) in line 39
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses variable a defined in Movable
   function C(const Movable &,int) in line 43
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function C(initializer_list< int >) in line 82
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function C(const initializer_list< unsigned > &) in line 83
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function C(initializer_list< unsigned > &&) in line 84
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function C(int) in line 22
      1 lines of code
      1 parameters
      1 conditional paths
   function C(int) in line 9
      1 lines of code
      1 parameters
      1 conditional paths
   variable i in line 46
      protection public
   variable M in line 45
      protection public
   variable s in line 24
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/clang-tidy/llvm-include-order.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/clang-tidy/llvm-twine-local.cpp
module llvm-twine-local.cpp
   variable Moo in line 17
      protection public
   function foo(const Twine &) in line 15
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function main() in line 22
      protection public
      12 lines of code
      0 parameters
      1 conditional paths
      uses variable t defined in negative-iterator.cpp
      uses function Twine(const char *) defined in llvm::Twine
      uses function foo(const Twine &) defined in llvm-twine-local.cpp
module llvm::Twine
   function operator+(const Twine &) in line 9
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function Twine(const char *) in line 7
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function Twine(int) in line 8
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/clang-tidy/misc-assert-side-effect.cpp
module misc-assert-side-effect.cpp
   macro definition assert in line 10
      protection public
   macro definition assert2 in line 16
      protection public
   macro definition my_assert in line 22
      protection public
   macro definition not_my_assert in line 29
      protection public
   function abort() in line 5
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function print(...) in line 15
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function freeFunction() in line 49
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function main() in line 53
      protection public
      46 lines of code
      0 parameters
      1 conditional paths
      uses macro definition assert defined in misc-assert-side-effect.cpp
      uses macro definition my_assert defined in misc-assert-side-effect.cpp
      uses macro definition not_my_assert defined in misc-assert-side-effect.cpp
      uses function freeFunction() defined in misc-assert-side-effect.cpp
      uses function badFunc(int,int) defined in MyClass
      uses function goodFunc(int,int) defined in MyClass
      uses macro definition assert2 defined in misc-assert-side-effect.cpp
module MyClass
   function badFunc(int,int) in line 37
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
      uses variable a defined in diagnostic.cpp
      uses variable b defined in clang-modernize/AddOverride/basic.cpp
   function goodFunc(int,int) in line 38
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
      uses variable a defined in diagnostic.cpp
      uses variable b defined in clang-modernize/AddOverride/basic.cpp
   function operator bool() in line 44
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function operator delete(void *) in line 46
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function operator-() in line 42
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function operator=(const MyClass &) in line 40
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/clang-tidy/misc-assign-operator-signature.cpp
module Good
   function operator=(const Good &) in line 5
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function operator=(Good &&) in line 6
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function operator=(int) in line 9
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
module AlsoGood
   function operator=(AlsoGood) in line 14
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
module BadReturn
   function operator=(const BadReturn &) in line 18
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function operator=(BadReturn &&) in line 20
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
module BadReturn2
   function operator=(const BadReturn2 &) in line 24
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function operator=(BadReturn2 &&) in line 26
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
module BadArgument
   function operator=(BadArgument &) in line 31
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function operator=(const BadArgument &&) in line 33
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
module BadModifier
   function operator=(const BadModifier &) in line 38
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
module Deleted
   function operator=(const Deleted &) in line 44
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function operator=(Deleted &&) in line 45
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
module Private
   function operator=(const Private &) in line 51
      1 lines of code
      1 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/clang-tidy/misc-bool-pointer-implicit-conversion.cpp
module misc-bool-pointer-implicit-conversion.cpp
   macro definition TESTMACRO in line 33
      protection public
   macro definition CHECK in line 81
      protection public
   function SomeFunction() in line 4
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function SomeOtherFunction(bool *) in line 5
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function F() in line 6
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function G(bool) in line 7
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function t(T) in line 11
      protection public
      4 lines of code
      1 parameters
      2 conditional paths
      uses variable b defined in clang-modernize/AddOverride/basic.cpp
   function foo(void) in line 16
      protection public
      68 lines of code
      1 parameters
      14 conditional paths
      uses variable b defined in clang-modernize/AddOverride/basic.cpp
      uses function SomeFunction() defined in misc-bool-pointer-implicit-conversion.cpp
      uses function F() defined in misc-bool-pointer-implicit-conversion.cpp
      uses function G(bool) defined in misc-bool-pointer-implicit-conversion.cpp
      uses macro definition TESTMACRO defined in misc-bool-pointer-implicit-conversion.cpp
      uses function t(T) defined in misc-bool-pointer-implicit-conversion.cpp
      uses function SomeOtherFunction(bool *) defined in misc-bool-pointer-implicit-conversion.cpp
      uses variable d defined in clang-modernize/ReplaceAutoPtr/basic.cpp
      uses macro definition CHECK defined in misc-bool-pointer-implicit-conversion.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/clang-tidy/misc-inaccurate-erase.cpp
module misc-inaccurate-erase.cpp
   macro definition ERASE in line 49
      protection public
   function remove(FwIt,FwIt,const T &) in line 21
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function remove_if(FwIt,FwIt,Func) in line 24
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function unique(FwIt,FwIt) in line 26
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function g() in line 38
      protection public
      10 lines of code
      0 parameters
      1 conditional paths
      uses variable t defined in negative-iterator.cpp
      uses function remove(FwIt,FwIt,const T &) defined in misc-inaccurate-erase.cpp
      uses function begin() defined in T
      uses function end() defined in T
      uses variable v defined in naming-alias.cpp
   function main() in line 52
      protection public
      26 lines of code
      0 parameters
      1 conditional paths
      uses variable v defined in naming-alias.cpp
      uses macro definition ERASE defined in misc-inaccurate-erase.cpp
      uses function begin() defined in std::vector
      uses function erase(iterator) defined in std::vector
module std::vec_iterator
   function operator++(int) in line 7
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   variable ptr in line 6
      protection public
module std::vector
   function begin() in line 13
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function empty() in line 8
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function end() in line 14
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function erase(iterator) in line 16
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function erase(iterator,iterator) in line 17
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function size() in line 7
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function swap(vector &) in line 5
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function vector() in line 6
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
module std::unique_ptr
   function get() in line 12
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function operator*() in line 10
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function operator->() in line 11
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function release() in line 16
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function reset(T *) in line 15
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function unique_ptr() in line 11
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function unique_ptr(T *) in line 12
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function unique_ptr(unique_ptr< U, E > &&) in line 14
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
module custom_iter
module custom_container
   function begin() in line 34
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function end() in line 35
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function erase(...) in line 33
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/clang-tidy/misc-inefficient-algorithm.cpp
module misc-inefficient-algorithm.cpp
   macro definition FIND_IN_SET in line 58
      protection public
   function find(FwIt,FwIt,const K &) in line 43
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function find(FwIt,FwIt,const K &,Cmp) in line 46
      protection public
      1 lines of code
      4 parameters
      1 conditional paths
   function find_if(FwIt,FwIt,Pred) in line 48
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function count(FwIt,FwIt,const K &) in line 50
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function lower_bound(FwIt,FwIt,const K &) in line 52
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function lower_bound(FwIt,FwIt,const K &,Ord) in line 55
      protection public
      1 lines of code
      4 parameters
      1 conditional paths
   function f(const T &) in line 61
      protection public
      9 lines of code
      1 parameters
      1 conditional paths
      uses variable s defined in negative-iterator.cpp
      uses function find(FwIt,FwIt,const K &) defined in misc-inefficient-algorithm.cpp
      uses function begin() defined in S
      uses function end() defined in S
      uses variable t defined in negative-iterator.cpp
      uses function begin() defined in T
      uses function end() defined in T
   function main() in line 71
      protection public
      46 lines of code
      0 parameters
      1 conditional paths
      uses variable s defined in negative-iterator.cpp
      uses function find(FwIt,FwIt,const K &) defined in misc-inefficient-algorithm.cpp
      uses function begin() defined in S
      uses function end() defined in S
      uses function count(FwIt,FwIt,const K &) defined in misc-inefficient-algorithm.cpp
      uses function find_if(FwIt,FwIt,Pred) defined in misc-inefficient-algorithm.cpp
      uses macro definition FIND_IN_SET defined in misc-inefficient-algorithm.cpp
      uses function f(const T &) defined in misc-inefficient-algorithm.cpp
      uses function lower_bound(FwIt,FwIt,const K &) defined in misc-inefficient-algorithm.cpp
      uses function begin() defined in set< K >
      uses function end() defined in set< K >
   function g(std::set< Value, Ordering >,int) in line 129
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses function lower_bound(FwIt,FwIt,const K &) defined in misc-inefficient-algorithm.cpp
      uses function begin() defined in container
      uses function end() defined in container
module std::less
   function operator()(const T &,const T &) in line 6
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
module std::greater
   function operator()(const T &,const T &) in line 10
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
module std::iterator_type
module std::set
   function begin() in line 20
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function begin() in line 22
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function count(const K &) in line 18
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function end() in line 21
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function end() in line 23
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function find(const K &) in line 17
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
module std::other_iterator_type
module std::map
   function begin() in line 33
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function begin() in line 35
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function count(const K &) in line 31
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function end() in line 34
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function end() in line 36
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function find(const K &) in line 30
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
module std::unordered_set
   inherits from set< K >
module std::multiset
   inherits from std::set
module Value
   variable value in line 119
      protection public
module Ordering
   function operator()(const Value &,const Value &) in line 123
      protection public
      3 lines of code
      2 parameters
      1 conditional paths
      uses variable value defined in Value
   function operator()(int,const Value &) in line 126
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
      uses variable value defined in Value
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/clang-tidy/misc-macro-parentheses.cpp
module misc-macro-parentheses.cpp
   macro definition BAD1 in line 4
      protection public
   macro definition BAD2 in line 6
      protection public
   macro definition BAD3 in line 8
      protection public
   macro definition BAD4 in line 10
      protection public
   macro definition GOOD1 in line 13
      protection public
   macro definition GOOD2 in line 14
      protection public
   macro definition GOOD3 in line 15
      protection public
   macro definition GOOD4 in line 16
      protection public
   macro definition GOOD5 in line 17
      protection public
   macro definition GOOD6 in line 18
      protection public
   macro definition GOOD7 in line 19
      protection public
   macro definition GOOD8 in line 20
      protection public
   macro definition GOOD9 in line 21
      protection public
   macro definition GOOD10 in line 22
      protection public
   macro definition GOOD11 in line 23
      protection public
   macro definition GOOD12 in line 24
      protection public
   macro definition GOOD13 in line 25
      protection public
   macro definition GOOD14 in line 26
      protection public
   macro definition GOOD15 in line 27
      protection public
   macro definition GOOD16 in line 28
      protection public
   macro definition GOOD17 in line 29
      protection public
   macro definition GOOD18 in line 30
      protection public
   macro definition GOOD19 in line 31
      protection public
   macro definition GOOD20 in line 32
      protection public
   macro definition GOOD21 in line 33
      protection public
   macro definition GOOD22 in line 34
      protection public
   macro definition GOOD23 in line 35
      protection public
   macro definition GOOD24 in line 36
      protection public
   macro definition GOOD25 in line 37
      protection public
   macro definition MAYBE1 in line 40
      protection public
   macro definition MAYBE2 in line 41
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/clang-tidy/misc-noexcept-move-constructor.cpp
module misc-noexcept-move-constructor.cpp
   function f() in line 19
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable a defined in diagnostic.cpp
module A
   abstract class
   function clone() in line 8
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function clone() in line 47
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function f() in line 6
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function f() in line 11
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function f() in line 14
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function g() in line 7
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function h() in line 12
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function i() in line 14
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function method() in line 30
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function operator=(A &&) in line 7
      1 lines of code
      1 parameters
      1 conditional paths
   function ~A() in line 9
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function A(const Movable &) in line 22
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function A(T *) in line 11
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function A(T) in line 4
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 19
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 24
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 10
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 13
      1 lines of code
      1 parameters
      1 conditional paths
   function A() in line 37
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function A(int,int) in line 38
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function A(void *) in line 40
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function A(void *,void *) in line 41
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function A(const A &) in line 43
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 47
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function A(double,double) in line 51
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function A(T &&...) in line 56
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 18
      1 lines of code
      1 parameters
      1 conditional paths
   function A(A &&) in line 5
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 3
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 11
      1 lines of code
      1 parameters
      1 conditional paths
   variable ee in line 149
      protection public
   variable field in line 26
      protection public
   variable foo in line 6
      protection public
   variable M in line 25
      protection public
   variable Ptr in line 19
      protection public
   variable s in line 15
      protection public
module B
   inherits from A< E1 >
   inherits from A
   inherits from A
   inherits from A
   inherits from A
   function clone() in line 11
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
      uses function clone() defined in A
   function clone() in line 53
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function create() in line 38
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function f() in line 20
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function g() in line 14
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function method() in line 35
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function placeholder_for_f() in line 11
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function B(const Movable &) in line 31
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function B(std::initializer_list< int >) in line 62
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function B(const std::initializer_list< unsigned > &) in line 63
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function B(std::initializer_list< unsigned > &&) in line 64
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function B(::std::initializer_list< double >) in line 66
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function B(const ::std::initializer_list< char > &) in line 70
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function B(::std::initializer_list< char > &&) in line 74
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function B(int) in line 20
      1 lines of code
      1 parameters
      1 conditional paths
   function B(B &&) in line 13
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function B(int) in line 6
      1 lines of code
      1 parameters
      1 conditional paths
   variable kFalse in line 12
      protection public
   variable M in line 33
      protection public
   variable s in line 20
      protection public
module OK
module OK1
   function f() in line 30
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function g() in line 31
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function operator=(OK1 &&) in line 29
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function OK1() in line 26
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function OK1(const OK1 &) in line 27
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function OK1(OK1 &&) in line 28
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
module OK2
   function operator=(OK2 &&) in line 39
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function OK2(OK2 &&) in line 38
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   variable kTrue in line 35
module OK3
   function operator=(OK3 &&) in line 44
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function OK3(OK3 &&) in line 43
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses function operator=(A &&) defined in A
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/clang-tidy/misc-repeated-side-effects-in-macro.c
module misc-repeated-side-effects-in-macro.c
   macro definition badA in line 4
      protection public
   macro definition MIN in line 25
      protection public
   macro definition LIMIT in line 26
      protection public
   macro definition UNROLL in line 42
      protection public
   macro definition strchrs in line 50
      protection public
   macro definition largeA in line 63
      protection public
   macro definition builtinbad in line 78
      protection public
   macro definition builtingood1 in line 79
      protection public
   macro definition builtingood2 in line 80
      protection public
   macro definition macrobad in line 81
      protection public
   macro definition macrogood in line 82
      protection public
   macro definition condB in line 97
      protection public
   function bad(int,int,int) in line 5
      protection public
      18 lines of code
      3 parameters
      1 conditional paths
      uses macro definition badA defined in misc-repeated-side-effects-in-macro.c
      uses variable a defined in diagnostic.cpp
      uses variable b defined in clang-modernize/AddOverride/basic.cpp
   function question(int) in line 27
      protection public
      12 lines of code
      1 parameters
      1 conditional paths
      uses macro definition MIN defined in misc-repeated-side-effects-in-macro.c
      uses variable x defined in readability-function-size.cpp
      uses macro definition LIMIT defined in misc-repeated-side-effects-in-macro.c
   function fp1(int) in line 43
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses macro definition UNROLL defined in misc-repeated-side-effects-in-macro.c
   function __rawmemchr(char *,char) in line 55
      protection public
      3 lines of code
      2 parameters
      1 conditional paths
      uses variable a defined in diagnostic.cpp
   function pass(char *,char) in line 58
      protection public
      3 lines of code
      2 parameters
      1 conditional paths
      uses macro definition strchrs defined in misc-repeated-side-effects-in-macro.c
   function large(int) in line 68
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses macro definition largeA defined in misc-repeated-side-effects-in-macro.c
      uses variable a defined in diagnostic.cpp
   function builtins(int,int) in line 83
      protection public
      12 lines of code
      2 parameters
      1 conditional paths
      uses macro definition builtinbad defined in misc-repeated-side-effects-in-macro.c
      uses variable a defined in diagnostic.cpp
      uses macro definition builtingood1 defined in misc-repeated-side-effects-in-macro.c
      uses macro definition builtingood2 defined in misc-repeated-side-effects-in-macro.c
      uses macro definition macrobad defined in misc-repeated-side-effects-in-macro.c
      uses macro definition macrogood defined in misc-repeated-side-effects-in-macro.c
   function conditionals(int,int) in line 98
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses macro definition condB defined in misc-repeated-side-effects-in-macro.c
      uses variable a defined in diagnostic.cpp
      uses variable b defined in clang-modernize/AddOverride/basic.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/clang-tidy/misc-static-assert.cpp
module misc-static-assert.cpp
   macro definition assert in line 8
      protection public
   macro definition ZERO_MACRO in line 15
      protection public
   macro definition False in line 17
      protection public
   macro definition FALSE in line 18
      protection public
   macro definition my_macro in line 20
      protection public
   macro definition NULL in line 86
      protection public
   macro definition NULL in line 99
      protection public
   macro definition NULL in line 104
      protection public
   macro definition false in line 117
      protection public
   macro definition false in line 120
      protection public
   macro definition assert in line 131
      protection public
   typedef size_t in line 25
      protection public
   function abort() in line 4
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function print(...) in line 13
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function myfunc(int,int) in line 23
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
      uses variable a defined in diagnostic.cpp
      uses variable b defined in clang-modernize/AddOverride/basic.cpp
   function strlen(const char *) in line 26
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function doSomething(T) in line 38
      protection public
      10 lines of code
      1 parameters
      1 conditional paths
      uses macro definition assert defined in misc-static-assert.cpp
      uses function myfunc(int,int) defined in misc-static-assert.cpp
      uses variable t defined in negative-iterator.cpp
   function main() in line 49
      protection public
      93 lines of code
      0 parameters
      1 conditional paths
      uses macro definition my_macro defined in misc-static-assert.cpp
      uses macro definition assert defined in misc-static-assert.cpp
      uses function myfunc(int,int) defined in misc-static-assert.cpp
      uses variable x defined in readability-function-size.cpp
      uses variable a defined in diagnostic.cpp
      uses variable b defined in clang-modernize/AddOverride/basic.cpp
      uses macro definition False defined in misc-static-assert.cpp
      uses macro definition FALSE defined in misc-static-assert.cpp
      uses macro definition ZERO_MACRO defined in misc-static-assert.cpp
      uses macro definition NULL defined in misc-static-assert.cpp
      uses function strlen(const char *) defined in misc-static-assert.cpp
module A
   abstract class
   function clone() in line 8
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function clone() in line 47
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function f() in line 6
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function f() in line 11
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function f() in line 14
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function g() in line 7
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function h() in line 12
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function i() in line 14
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function method() in line 30
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function operator=(A &&) in line 7
      1 lines of code
      1 parameters
      1 conditional paths
   function ~A() in line 9
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function A(const Movable &) in line 22
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function A(T *) in line 11
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function A(T) in line 4
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 19
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 24
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 10
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 13
      1 lines of code
      1 parameters
      1 conditional paths
   function A() in line 37
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function A(int,int) in line 38
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function A(void *) in line 40
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function A(void *,void *) in line 41
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function A(const A &) in line 43
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 47
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function A(double,double) in line 51
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function A(T &&...) in line 56
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 18
      1 lines of code
      1 parameters
      1 conditional paths
   function A(A &&) in line 5
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 3
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 11
      1 lines of code
      1 parameters
      1 conditional paths
   variable ee in line 149
      protection public
   variable field in line 26
      protection public
   variable foo in line 6
      protection public
   variable M in line 25
      protection public
   variable Ptr in line 19
      protection public
   variable s in line 15
      protection public
module B
   inherits from A< E1 >
   inherits from A
   inherits from A
   inherits from A
   inherits from A
   function clone() in line 11
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
      uses function clone() defined in A
   function clone() in line 53
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function create() in line 38
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function f() in line 20
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function g() in line 14
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function method() in line 35
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function placeholder_for_f() in line 11
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function B(const Movable &) in line 31
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function B(std::initializer_list< int >) in line 62
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function B(const std::initializer_list< unsigned > &) in line 63
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function B(std::initializer_list< unsigned > &&) in line 64
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function B(::std::initializer_list< double >) in line 66
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function B(const ::std::initializer_list< char > &) in line 70
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function B(::std::initializer_list< char > &&) in line 74
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function B(int) in line 20
      1 lines of code
      1 parameters
      1 conditional paths
   function B(B &&) in line 13
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function B(int) in line 6
      1 lines of code
      1 parameters
      1 conditional paths
   variable kFalse in line 12
      protection public
   variable M in line 33
      protection public
   variable s in line 20
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/clang-tidy/misc-swapped-arguments.cpp
module misc-swapped-arguments.cpp
   macro definition M in line 21
      protection public
   macro definition N in line 29
      protection public
   function F(int,double) in line 4
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function SomeFunction() in line 6
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function G(T,U) in line 9
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
      uses function F(int,double) defined in misc-swapped-arguments.cpp
      uses variable a defined in diagnostic.cpp
      uses variable b defined in clang-modernize/AddOverride/basic.cpp
   function foo(void) in line 16
      protection public
      29 lines of code
      1 parameters
      1 conditional paths
      uses variable x defined in readability-function-size.cpp
      uses function F(int,double) defined in misc-swapped-arguments.cpp
      uses variable b defined in clang-modernize/AddOverride/basic.cpp
      uses macro definition M defined in misc-swapped-arguments.cpp
      uses macro definition N defined in misc-swapped-arguments.cpp
      uses function G(T,U) defined in misc-swapped-arguments.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/clang-tidy/misc-undelegated-constructor.cpp
module misc-undelegated-constructor.cpp
   variable t in line 55
      protection public
   function foo(void) in line 5
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
      uses variable x defined in readability-function-size.cpp
      uses function p(unsigned short) defined in google-runtime-int.cpp
      uses variable b defined in clang-modernize/AddOverride/basic.cpp
      uses function SomeFunction() defined in misc-bool-pointer-implicit-conversion.cpp
      uses function F() defined in misc-bool-pointer-implicit-conversion.cpp
      uses function G(bool) defined in misc-bool-pointer-implicit-conversion.cpp
      uses macro definition TESTMACRO defined in misc-bool-pointer-implicit-conversion.cpp
      uses function t(T) defined in misc-bool-pointer-implicit-conversion.cpp
      uses function SomeOtherFunction(bool *) defined in misc-bool-pointer-implicit-conversion.cpp
      uses variable d defined in clang-modernize/ReplaceAutoPtr/basic.cpp
      uses macro definition CHECK defined in misc-bool-pointer-implicit-conversion.cpp
      uses macro definition M defined in misc-swapped-arguments.cpp
      uses macro definition N defined in misc-swapped-arguments.cpp
module Ctor
   function Ctor() in line 8
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function Ctor(int) in line 9
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function Ctor(int,int) in line 10
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function Ctor(Ctor *) in line 11
      protection public
      9 lines of code
      1 parameters
      1 conditional paths
      uses function Ctor() defined in Ctor
      uses function foo(void) defined in misc-undelegated-constructor.cpp
   function Ctor(int) in line 34
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function Ctor() in line 35
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
module Dtor
   function Dtor() in line 30
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function Dtor(int) in line 31
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function Dtor(int,int) in line 32
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function Dtor(Ctor *) in line 33
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
   function ~Dtor() in line 41
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
module Base
   abstract class
   function a() in line 6
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function a() in line 18
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function b() in line 7
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function b() in line 19
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function c() in line 20
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function d() in line 21
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function d2() in line 22
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function e() in line 23
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function f() in line 24
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function foo(bool) in line 65
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function foo(int) in line 66
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function g() in line 25
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function j() in line 27
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function k() in line 28
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function l() in line 29
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function m() in line 32
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function m2() in line 33
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function n() in line 30
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function o() in line 34
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function ~Base() in line 5
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
      uses function a() defined in Base
      uses function b() defined in Base
   function ~Base() in line 17
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
      uses variable a defined in diagnostic.cpp
      uses variable b defined in clang-modernize/AddOverride/basic.cpp
      uses variable d defined in clang-modernize/ReplaceAutoPtr/basic.cpp
      uses variable d2 defined in clang-modernize/AddOverride/basic.cpp
      uses function f() defined in misc-use-override.cpp
      uses function g(int,int *,int,int *,int,int *,int) defined in yes.cpp
      uses variable j defined in pp-trace-macro.cpp
      uses variable l defined in clang-modernize/PassByValue/basic.cpp
      uses macro definition MUST_USE_RESULT defined in misc-use-override.cpp
      uses macro definition UNUSED defined in misc-use-override.cpp
      uses macro definition ABSTRACT defined in misc-use-override.cpp
module Derived
   inherits from Base
   inherits from Base
   inherits from Base
   inherits from T
   inherits from Parent
   function f() in line 146
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function foo(int) in line 70
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function func() in line 12
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
      uses function ext(int(&),const Parent &) defined in clang-apply-replacements/Inputs/basic/basic.h
   function Derived() in line 46
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
module TDerived
   inherits from Base
   function TDerived() in line 52
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/clang-tidy/misc-uniqueptr-reset-release.cpp
module misc-uniqueptr-reset-release.cpp
   typedef FooFunc in line 27
      protection public
   typedef BarFunc in line 28
      protection public
   function Create() in line 23
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function Look() in line 24
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function Get() in line 25
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function f() in line 30
      protection public
      30 lines of code
      0 parameters
      1 conditional paths
      uses variable a defined in diagnostic.cpp
      uses variable b defined in clang-modernize/AddOverride/basic.cpp
      uses variable x defined in readability-function-size.cpp
      uses variable y defined in readability-named-parameter.cpp
      uses function release() defined in std::unique_ptr
      uses function Create() defined in misc-uniqueptr-reset-release.cpp
      uses variable release defined in conf.py
      uses function Look() defined in misc-uniqueptr-reset-release.cpp
      uses function Get() defined in misc-uniqueptr-reset-release.cpp
      uses function reset(T *) defined in std::unique_ptr
   function negatives() in line 61
      protection public
      10 lines of code
      0 parameters
      1 conditional paths
      uses function reset(T *) defined in std::unique_ptr
      uses function release() defined in std::unique_ptr
module std::default_delete
module std::unique_ptr
   function get() in line 12
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function operator*() in line 10
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function operator->() in line 11
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function release() in line 16
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function reset(T *) in line 15
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function unique_ptr() in line 11
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function unique_ptr(T *) in line 12
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function unique_ptr(unique_ptr< U, E > &&) in line 14
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
module Foo
   function bar(int *) in line 57
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function baz(int) in line 60
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function operator&() in line 5
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function Foo(int *) in line 54
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function Foo() in line 5
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function Foo(int) in line 6
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function Foo(int,int) in line 7
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function ~Foo() in line 8
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   variable m_p1 in line 63
      protection public
   variable m_p2 in line 64
      protection public
module Bar
   inherits from Foo
   function ConstDo() in line 26
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function Do() in line 25
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function Bar(T *) in line 72
      protection public
      21 lines of code
      1 parameters
      1 conditional paths
      uses macro definition NULL defined in clang-modernize/UseNullptr/basic.cpp
      uses function p(unsigned short) defined in google-runtime-int.cpp
      uses variable g_null defined in clang-modernize/UseNullptr/basic.cpp
   function Bar() in line 12
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   variable m_p in line 94
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/clang-tidy/misc-unused-raii.cpp
module misc-unused-raii.cpp
   macro definition M in line 62
      protection public
   function qux() in line 21
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses function f() defined in misc-unused-raii.cpp
   function f() in line 31
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable a defined in diagnostic.cpp
      uses function C(const Movable &) defined in C
      uses function MyType012345678901234567890123456789() defined in MyType012345678901234567890123456789
      uses function g(int,int *,int,int *,int,int *,int) defined in yes.cpp
      uses variable sum defined in naming-conflict.cpp
      uses variable N defined in array.cpp
      uses variable i defined in pp-trace-macro.cpp
      uses variable arr defined in array.cpp
      uses function printf(const char *,...) defined in structures.h
      uses variable x defined in readability-function-size.cpp
      uses variable y defined in readability-named-parameter.cpp
      uses variable NMinusOne defined in array.cpp
      uses function g() defined in Val
      uses variable pArr defined in array.cpp
      uses variable Arr defined in naming-alias.cpp
      uses macro definition M defined in google-explicit-make-pair.cpp
      uses variable b defined in clang-modernize/AddOverride/basic.cpp
      uses variable j defined in pp-trace-macro.cpp
      uses function begin(const MyArray &) defined in free_begin_end_fail.cpp
      uses function end(const MyArray &) defined in free_begin_end_fail.cpp
      uses variable t defined in negative-iterator.cpp
      uses function begin() defined in T
      uses function end() defined in T
      uses variable s defined in negative-iterator.cpp
      uses function begin() defined in S
      uses function end() defined in S
      uses variable u defined in negative-iterator.cpp
      uses function begin() defined in U
      uses function end() defined in U
      uses variable v defined in naming-alias.cpp
      uses function begin() defined in doublyDependent
      uses function end() defined in doublyDependent
      uses function begin() defined in PtrSet
      uses function end() defined in PtrSet
      uses function begin() defined in TypedefDerefContainer
      uses function end() defined in TypedefDerefContainer
      uses function begin() defined in container
      uses function end() defined in container
      uses function side_effect(const myns::MyType &) defined in macro_problem.cpp
      uses variable x defined in Val
      uses variable l defined in clang-modernize/PassByValue/basic.cpp
      uses function begin() defined in Nested
      uses function end() defined in Nested
      uses variable pv defined in pseudoarray.cpp
      uses variable cv defined in pseudoarray.cpp
      uses function get_wrapped() defined in Wrapper
      uses function takes_ownership_fn(std::auto_ptr< int >) defined in move.cpp
      uses variable d defined in clang-modernize/ReplaceAutoPtr/basic.cpp
      uses function get_by_value() defined in move.cpp
      uses function p(unsigned short) defined in google-runtime-int.cpp
      uses function release() defined in std::unique_ptr
      uses function Create() defined in misc-uniqueptr-reset-release.cpp
      uses variable release defined in conf.py
      uses function Look() defined in misc-uniqueptr-reset-release.cpp
      uses function Get() defined in misc-uniqueptr-reset-release.cpp
      uses function reset(T *) defined in std::unique_ptr
      uses macro definition CHECKSIZE defined in readability-container-size-empty.cpp
      uses function swap(vector &) defined in std::vector
   function test() in line 40
      protection public
      30 lines of code
      0 parameters
      1 conditional paths
      uses function Foo() defined in Foo
      uses function f() defined in misc-unused-raii.cpp
module Foo
   function bar(int *) in line 57
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function baz(int) in line 60
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function operator&() in line 5
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function Foo(int *) in line 54
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function Foo() in line 5
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function Foo(int) in line 6
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function Foo(int,int) in line 7
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function ~Foo() in line 8
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   variable m_p1 in line 63
      protection public
   variable m_p2 in line 64
      protection public
module Bar
   inherits from Foo
   function ConstDo() in line 26
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function Do() in line 25
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function Bar(T *) in line 72
      protection public
      21 lines of code
      1 parameters
      1 conditional paths
      uses macro definition NULL defined in clang-modernize/UseNullptr/basic.cpp
      uses function p(unsigned short) defined in google-runtime-int.cpp
      uses variable g_null defined in clang-modernize/UseNullptr/basic.cpp
   function Bar() in line 12
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   variable m_p in line 94
      protection public
module FooBar
   function FooBar() in line 16
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   variable f in line 17
      protection public
module TFoo
   function operator&() in line 11
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function TFoo(T) in line 27
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ~TFoo() in line 28
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
module Ctor
   function Ctor() in line 8
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function Ctor(int) in line 9
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function Ctor(int,int) in line 10
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function Ctor(Ctor *) in line 11
      protection public
      9 lines of code
      1 parameters
      1 conditional paths
      uses function Ctor() defined in Ctor
      uses function foo(void) defined in misc-undelegated-constructor.cpp
   function Ctor(int) in line 34
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function Ctor() in line 35
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/clang-tidy/misc-use-override-cxx98.cpp
module Base
   abstract class
   function a() in line 6
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function a() in line 18
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function b() in line 7
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function b() in line 19
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function c() in line 20
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function d() in line 21
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function d2() in line 22
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function e() in line 23
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function f() in line 24
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function foo(bool) in line 65
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function foo(int) in line 66
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function g() in line 25
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function j() in line 27
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function k() in line 28
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function l() in line 29
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function m() in line 32
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function m2() in line 33
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function n() in line 30
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function o() in line 34
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function ~Base() in line 5
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
      uses function a() defined in Base
      uses function b() defined in Base
   function ~Base() in line 17
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
      uses variable a defined in diagnostic.cpp
      uses variable b defined in clang-modernize/AddOverride/basic.cpp
      uses variable d defined in clang-modernize/ReplaceAutoPtr/basic.cpp
      uses variable d2 defined in clang-modernize/AddOverride/basic.cpp
      uses function f() defined in misc-use-override.cpp
      uses function g(int,int *,int,int *,int,int *,int) defined in yes.cpp
      uses variable j defined in pp-trace-macro.cpp
      uses variable l defined in clang-modernize/PassByValue/basic.cpp
      uses macro definition MUST_USE_RESULT defined in misc-use-override.cpp
      uses macro definition UNUSED defined in misc-use-override.cpp
      uses macro definition ABSTRACT defined in misc-use-override.cpp
module SimpleCases
   inherits from Base
   inherits from Base
   abstract class
   function a() in line 15
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function a() in line 43
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function b() in line 18
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function b() in line 47
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function c() in line 51
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function d() in line 55
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function d2() in line 59
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function e() in line 63
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function f() in line 67
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function g() in line 71
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function j() in line 75
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function k() in line 79
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function l() in line 83
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function m() in line 91
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function m2() in line 95
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function n() in line 87
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function o() in line 99
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function ~SimpleCases() in line 12
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function ~SimpleCases() in line 39
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/clang-tidy/misc-use-override.cpp
module misc-use-override.cpp
   macro definition ABSTRACT in line 4
      protection public
   macro definition OVERRIDE in line 6
      protection public
   macro definition VIRTUAL in line 7
      protection public
   macro definition NOT_VIRTUAL in line 8
      protection public
   macro definition NOT_OVERRIDE in line 9
      protection public
   macro definition MUST_USE_RESULT in line 11
      protection public
   macro definition UNUSED in line 12
      protection public
   macro definition FUNC in line 200
      protection public
   macro definition F in line 204
      protection public
   function f() in line 223
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function ff() in line 247
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
      uses variable a defined in diagnostic.cpp
module MustUseResultObject
module Base
   abstract class
   function a() in line 6
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function a() in line 18
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function b() in line 7
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function b() in line 19
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function c() in line 20
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function d() in line 21
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function d2() in line 22
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function e() in line 23
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function f() in line 24
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function foo(bool) in line 65
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function foo(int) in line 66
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function g() in line 25
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function j() in line 27
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function k() in line 28
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function l() in line 29
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function m() in line 32
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function m2() in line 33
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function n() in line 30
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function o() in line 34
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function ~Base() in line 5
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
      uses function a() defined in Base
      uses function b() defined in Base
   function ~Base() in line 17
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
      uses variable a defined in diagnostic.cpp
      uses variable b defined in clang-modernize/AddOverride/basic.cpp
      uses variable d defined in clang-modernize/ReplaceAutoPtr/basic.cpp
      uses variable d2 defined in clang-modernize/AddOverride/basic.cpp
      uses function f() defined in misc-use-override.cpp
      uses function g(int,int *,int,int *,int,int *,int) defined in yes.cpp
      uses variable j defined in pp-trace-macro.cpp
      uses variable l defined in clang-modernize/PassByValue/basic.cpp
      uses macro definition MUST_USE_RESULT defined in misc-use-override.cpp
      uses macro definition UNUSED defined in misc-use-override.cpp
      uses macro definition ABSTRACT defined in misc-use-override.cpp
module SimpleCases
   inherits from Base
   inherits from Base
   abstract class
   function a() in line 15
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function a() in line 43
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function b() in line 18
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function b() in line 47
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function c() in line 51
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function d() in line 55
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function d2() in line 59
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function e() in line 63
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function f() in line 67
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function g() in line 71
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function j() in line 75
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function k() in line 79
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function l() in line 83
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function m() in line 91
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function m2() in line 95
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function n() in line 87
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function o() in line 99
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function ~SimpleCases() in line 12
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function ~SimpleCases() in line 39
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
module DefaultedDestructor
   inherits from Base
   function DefaultedDestructor() in line 113
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function ~DefaultedDestructor() in line 114
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
module FinalSpecified
   inherits from Base
   abstract class
   function b() in line 125
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function d() in line 129
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function e() in line 133
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function j() in line 137
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function l() in line 141
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function ~FinalSpecified() in line 121
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
module InlineDefinitions
   inherits from Base
   function a() in line 152
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function b() in line 156
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function c() in line 160
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function d() in line 164
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function j() in line 168
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function k() in line 172
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function l() in line 176
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function ~InlineDefinitions() in line 148
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
module Macros
   inherits from Base
   function a() in line 184
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function b() in line 188
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function c() in line 192
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function d() in line 196
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function FUNC(void,e) in line 201
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function g() in line 208
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
module TemplateBase
   function f(T) in line 215
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
module DerivedFromTemplate
   inherits from TemplateBase
   function f(T) in line 219
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
module UnusedMemberInstantiation
   inherits from C
   function ~UnusedMemberInstantiation() in line 227
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
module IntantiateWithoutUse
   inherits from UnusedMemberInstantiation< Base >
module Base2
   function a() in line 235
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function ~Base2() in line 234
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
      uses variable a defined in diagnostic.cpp
module MembersOfSpecializations
   inherits from Base2
   function a() in line 242
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function a() in line 246
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/clang-tidy/nolint.cpp
module A
   abstract class
   function clone() in line 8
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function clone() in line 47
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function f() in line 6
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function f() in line 11
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function f() in line 14
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function g() in line 7
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function h() in line 12
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function i() in line 14
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function method() in line 30
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function operator=(A &&) in line 7
      1 lines of code
      1 parameters
      1 conditional paths
   function ~A() in line 9
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function A(const Movable &) in line 22
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function A(T *) in line 11
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function A(T) in line 4
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 19
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 24
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 10
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 13
      1 lines of code
      1 parameters
      1 conditional paths
   function A() in line 37
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function A(int,int) in line 38
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function A(void *) in line 40
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function A(void *,void *) in line 41
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function A(const A &) in line 43
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 47
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function A(double,double) in line 51
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function A(T &&...) in line 56
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 18
      1 lines of code
      1 parameters
      1 conditional paths
   function A(A &&) in line 5
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 3
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 11
      1 lines of code
      1 parameters
      1 conditional paths
   variable ee in line 149
      protection public
   variable field in line 26
      protection public
   variable foo in line 6
      protection public
   variable M in line 25
      protection public
   variable Ptr in line 19
      protection public
   variable s in line 15
      protection public
module B
   inherits from A< E1 >
   inherits from A
   inherits from A
   inherits from A
   inherits from A
   function clone() in line 11
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
      uses function clone() defined in A
   function clone() in line 53
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function create() in line 38
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function f() in line 20
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function g() in line 14
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function method() in line 35
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function placeholder_for_f() in line 11
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function B(const Movable &) in line 31
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function B(std::initializer_list< int >) in line 62
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function B(const std::initializer_list< unsigned > &) in line 63
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function B(std::initializer_list< unsigned > &&) in line 64
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function B(::std::initializer_list< double >) in line 66
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function B(const ::std::initializer_list< char > &) in line 70
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function B(::std::initializer_list< char > &&) in line 74
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function B(int) in line 20
      1 lines of code
      1 parameters
      1 conditional paths
   function B(B &&) in line 13
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function B(int) in line 6
      1 lines of code
      1 parameters
      1 conditional paths
   variable kFalse in line 12
      protection public
   variable M in line 33
      protection public
   variable s in line 20
      protection public
module C
   inherits from B
   inherits from A
   abstract class
   function begin() in line 185
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function begin() in line 187
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function clone() in line 14
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function doLoop() in line 193
      protection public
      21 lines of code
      0 parameters
      6 conditional paths
      uses function begin() defined in C
      uses function end() defined in C
      uses function doSomething() defined in C
   function doLoop() in line 215
      protection public
      13 lines of code
      0 parameters
      4 conditional paths
      uses function begin() defined in C
      uses function end() defined in C
      uses function doSomething() defined in C
   function doSomething() in line 190
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function doSomething() in line 191
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function end() in line 186
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function end() in line 188
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function h() in line 27
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function C(const Movable &) in line 39
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses variable a defined in Movable
   function C(const Movable &,int) in line 43
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function C(initializer_list< int >) in line 82
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function C(const initializer_list< unsigned > &) in line 83
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function C(initializer_list< unsigned > &&) in line 84
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function C(int) in line 22
      1 lines of code
      1 parameters
      1 conditional paths
   function C(int) in line 9
      1 lines of code
      1 parameters
      1 conditional paths
   variable i in line 46
      protection public
   variable M in line 45
      protection public
   variable s in line 24
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/clang-tidy/readability-braces-around-statements-few-lines.cpp
module readability-braces-around-statements-few-lines.cpp
   function do_something(const char *) in line 4
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function cond(const char *) in line 6
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function test() in line 10
      protection public
      22 lines of code
      0 parameters
      5 conditional paths
      uses function cond(const char *) defined in readability-braces-around-statements-few-lines.cpp
      uses function do_something(const char *) defined in readability-braces-around-statements-few-lines.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/clang-tidy/readability-braces-around-statements-same-line.cpp
module readability-braces-around-statements-same-line.cpp
   function do_something(const char *) in line 4
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function cond(const char *) in line 6
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function test() in line 10
      protection public
      28 lines of code
      0 parameters
      5 conditional paths
      uses function cond(const char *) defined in readability-braces-around-statements-same-line.cpp
      uses function do_something(const char *) defined in readability-braces-around-statements-same-line.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/clang-tidy/readability-braces-around-statements-single-line.cpp
module readability-braces-around-statements-single-line.cpp
   function do_something(const char *) in line 4
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function cond(const char *) in line 6
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function test() in line 10
      protection public
      25 lines of code
      0 parameters
      5 conditional paths
      uses function cond(const char *) defined in readability-braces-around-statements-single-line.cpp
      uses function do_something(const char *) defined in readability-braces-around-statements-single-line.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/clang-tidy/readability-braces-around-statements.cpp
module readability-braces-around-statements.cpp
   macro definition EMPTY_MACRO in line 10
      protection public
   macro definition EMPTY_MACRO_FUN in line 11
      protection public
   function do_something(const char *) in line 4
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function cond(const char *) in line 6
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function test() in line 13
      protection public
      162 lines of code
      0 parameters
      34 conditional paths
      uses function cond(const char *) defined in readability-braces-around-statements.cpp
      uses function do_something(const char *) defined in readability-braces-around-statements.cpp
      uses variable arr defined in array.cpp
      uses variable a defined in diagnostic.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/clang-tidy/readability-container-size-empty.cpp
module readability-container-size-empty.cpp
   macro definition CHECKSIZE in line 87
      protection public
   function main() in line 12
      protection public
      74 lines of code
      0 parameters
      17 conditional paths
      uses function size() defined in std::vector
      uses function empty() defined in std::vector
   function f() in line 90
      protection public
      11 lines of code
      0 parameters
      2 conditional paths
      uses variable v defined in naming-alias.cpp
      uses macro definition CHECKSIZE defined in readability-container-size-empty.cpp
   function g() in line 102
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
module std::vector
   function begin() in line 13
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function empty() in line 8
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function end() in line 14
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function erase(iterator) in line 16
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function erase(iterator,iterator) in line 17
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function size() in line 7
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function swap(vector &) in line 5
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function vector() in line 6
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/clang-tidy/readability-else-after-return.cpp
module readability-else-after-return.cpp
   function f(int) in line 4
      protection public
      31 lines of code
      1 parameters
      7 conditional paths
      uses variable a defined in diagnostic.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/clang-tidy/readability-function-size.cpp
module readability-function-size.cpp
   variable x in line 36
      protection public
   function foo1() in line 4
      protection public
      2 lines of code
      0 parameters
      1 conditional paths
   function foo2() in line 7
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function foo3() in line 11
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function foo4(int) in line 19
      protection public
      2 lines of code
      1 parameters
      2 conditional paths
   function foo5(int) in line 26
      protection public
      3 lines of code
      1 parameters
      4 conditional paths
      uses variable i defined in pp-trace-macro.cpp
   function foo6(T) in line 34
      protection public
      2 lines of code
      1 parameters
      1 conditional paths
      uses variable i defined in pp-trace-macro.cpp
   function bar1() in line 41
      protection public
      4 lines of code
      0 parameters
      2 conditional paths
   function bar2() in line 50
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/clang-tidy/readability-named-parameter.cpp
module readability-named-parameter.cpp
   macro definition M in line 30
      protection public
   typedef TypeM in line 36
      protection public
   typedef Unused in line 115
      protection public
   variable Func1 in line 50
      protection public
   variable y in line 61
      protection public
   variable z in line 62
      protection public
   function Method(char *) in line 4
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function Method2(char *) in line 7
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function Method3(char *,void *) in line 10
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function Method4(char *,int) in line 13
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function operator delete[](void *) in line 16
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function Method5(int) in line 19
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function Method6(void(*)(void *)) in line 22
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function Method7(T) in line 25
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function operator delete(void *) in line 33
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function Method7(char *) in line 34
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function Method8(char *) in line 35
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function Func2(void(*)(void *)) in line 51
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function Func3() in line 52
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function FDef(int) in line 75
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses function FDef2(int,int) defined in readability-named-parameter.cpp
   function FDef2(int,int) in line 80
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
      uses function FNoDef(int) defined in readability-named-parameter.cpp
   function FNoDef(int) in line 87
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function operator++(Z &) in line 91
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function operator++(Z &,int) in line 95
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function operator--(Z &) in line 99
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function operator--(Z &,int) in line 103
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function MockFunction(Unused,int,Unused) in line 120
      protection public
      5 lines of code
      3 parameters
      1 conditional paths
      uses variable nullptr_t defined in nullptr_t.cpp
   function f(std::nullptr_t) in line 130
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
module X
   function f() in line 28
      protection public
      10 lines of code
      0 parameters
      1 conditional paths
      uses variable v defined in naming-alias.cpp
      uses function swap(vector &) defined in std::vector
   function getS() in line 58
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function operator bool() in line 815
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function operator++(int) in line 41
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function operator--(int) in line 42
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses function X(X &) defined in X
      uses function operator=(X &) defined in X
   function operator=(X &) in line 45
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function X(X &) in line 44
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   variable i in line 47
      protection public
   variable s in line 55
      protection public
   variable t in line 56
      protection public
   variable u in line 57
      protection public
   variable v in line 27
      protection public
module Y
   inherits from X
   function foo(T) in line 56
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
module Base
   abstract class
   function a() in line 6
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function a() in line 18
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function b() in line 7
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function b() in line 19
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function c() in line 20
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function d() in line 21
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function d2() in line 22
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function e() in line 23
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function f() in line 24
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function foo(bool) in line 65
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function foo(int) in line 66
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function g() in line 25
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function j() in line 27
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function k() in line 28
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function l() in line 29
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function m() in line 32
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function m2() in line 33
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function n() in line 30
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function o() in line 34
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function ~Base() in line 5
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
      uses function a() defined in Base
      uses function b() defined in Base
   function ~Base() in line 17
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
      uses variable a defined in diagnostic.cpp
      uses variable b defined in clang-modernize/AddOverride/basic.cpp
      uses variable d defined in clang-modernize/ReplaceAutoPtr/basic.cpp
      uses variable d2 defined in clang-modernize/AddOverride/basic.cpp
      uses function f() defined in misc-use-override.cpp
      uses function g(int,int *,int,int *,int,int *,int) defined in yes.cpp
      uses variable j defined in pp-trace-macro.cpp
      uses variable l defined in clang-modernize/PassByValue/basic.cpp
      uses macro definition MUST_USE_RESULT defined in misc-use-override.cpp
      uses macro definition UNUSED defined in misc-use-override.cpp
      uses macro definition ABSTRACT defined in misc-use-override.cpp
module Derived
   inherits from Base
   inherits from Base
   inherits from Base
   inherits from T
   inherits from Parent
   function f() in line 146
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function foo(int) in line 70
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function func() in line 12
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
      uses function ext(int(&),const Parent &) defined in clang-apply-replacements/Inputs/basic/basic.h
   function Derived() in line 46
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
module Z
module testing::internal::IgnoredValue
   function IgnoredValue(const T &) in line 112
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/clang-tidy/readability-redundant-smartptr-get.cpp
module readability-redundant-smartptr-get.cpp
   macro definition NULL in line 4
      protection public
   function Positive() in line 48
      protection public
      57 lines of code
      0 parameters
      1 conditional paths
      uses variable u defined in negative-iterator.cpp
      uses function get() defined in BarPtr
      uses function Do() defined in Bar
      uses variable b defined in clang-modernize/AddOverride/basic.cpp
      uses function get() defined in int_ptr
      uses function get() defined in std::unique_ptr
      uses function get() defined in std::shared_ptr
   function Negative() in line 106
      protection public
      24 lines of code
      0 parameters
      1 conditional paths
      uses function operator->() defined in std::unique_ptr
      uses function operator*() defined in std::unique_ptr
      uses variable u defined in negative-iterator.cpp
      uses function get() defined in Fail1
      uses function Do() defined in Bar
      uses function get() defined in Fail2
      uses variable b defined in clang-modernize/AddOverride/basic.cpp
      uses macro definition NULL defined in readability-redundant-smartptr-get.cpp
      uses function get() defined in int_ptr
module std::unique_ptr
   function get() in line 12
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function operator*() in line 10
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function operator->() in line 11
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function release() in line 16
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function reset(T *) in line 15
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function unique_ptr() in line 11
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function unique_ptr(T *) in line 12
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function unique_ptr(unique_ptr< U, E > &&) in line 14
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
module std::shared_ptr
   function get() in line 19
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function operator*() in line 17
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function operator->() in line 18
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
module Bar
   inherits from Foo
   function ConstDo() in line 26
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function Do() in line 25
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function Bar(T *) in line 72
      protection public
      21 lines of code
      1 parameters
      1 conditional paths
      uses macro definition NULL defined in clang-modernize/UseNullptr/basic.cpp
      uses function p(unsigned short) defined in google-runtime-int.cpp
      uses variable g_null defined in clang-modernize/UseNullptr/basic.cpp
   function Bar() in line 12
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   variable m_p in line 94
      protection public
module BarPtr
   function get() in line 31
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function operator*() in line 30
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function operator->() in line 29
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
module int_ptr
   function get() in line 34
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function operator*() in line 36
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function operator->() in line 35
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
module Fail1
   function get() in line 40
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
module Fail2
   function get() in line 43
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function operator*() in line 45
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function operator->() in line 44
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/clang-tidy/readability-redundant-string-cstr.cpp
module readability-redundant-string-cstr.cpp
   function f1(const std::string &) in line 24
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable s defined in negative-iterator.cpp
   function f2(const llvm::StringRef) in line 29
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses variable s defined in negative-iterator.cpp
   function f3(const llvm::StringRef &) in line 36
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses variable s defined in negative-iterator.cpp
module std::allocator
module std::char_traits
module std::basic_string
   function c_str() in line 13
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function basic_string() in line 11
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function basic_string(const C *,const A &) in line 12
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
module llvm::StringRef
   function StringRef(const char *) in line 19
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function StringRef(const std::string &) in line 20
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/clang-tidy/readability-shrink-to-fit.cpp
module readability-shrink-to-fit.cpp
   macro definition COPY_AND_SWAP_INT_VEC in line 62
      protection public
   function f() in line 8
      protection public
      17 lines of code
      0 parameters
      1 conditional paths
      uses variable v defined in naming-alias.cpp
      uses function swap(vector &) defined in std::vector
   function g() in line 40
      protection public
      10 lines of code
      0 parameters
      1 conditional paths
      uses variable v defined in naming-alias.cpp
      uses function swap(vector &) defined in std::vector
   function g2() in line 51
      protection public
      10 lines of code
      0 parameters
      1 conditional paths
      uses variable v defined in naming-alias.cpp
      uses function swap(vector &) defined in std::vector
   function h() in line 65
      protection public
      10 lines of code
      0 parameters
      1 conditional paths
      uses variable v defined in naming-alias.cpp
      uses macro definition COPY_AND_SWAP_INT_VEC defined in readability-shrink-to-fit.cpp
module std::vector
   function begin() in line 13
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function empty() in line 8
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function end() in line 14
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function erase(iterator) in line 16
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function erase(iterator,iterator) in line 17
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function size() in line 7
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function swap(vector &) in line 5
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function vector() in line 6
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
module X
   function f() in line 28
      protection public
      10 lines of code
      0 parameters
      1 conditional paths
      uses variable v defined in naming-alias.cpp
      uses function swap(vector &) defined in std::vector
   function getS() in line 58
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function operator bool() in line 815
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function operator++(int) in line 41
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function operator--(int) in line 42
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses function X(X &) defined in X
      uses function operator=(X &) defined in X
   function operator=(X &) in line 45
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function X(X &) in line 44
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   variable i in line 47
      protection public
   variable s in line 55
      protection public
   variable t in line 56
      protection public
   variable u in line 57
      protection public
   variable v in line 27
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/clang-tidy/readability-simplify-bool-expr-chained-conditional-assignment.cpp
module readability-simplify-bool-expr-chained-conditional-assignment.cpp
   function chained_conditional_compound_assignment(int) in line 4
      protection public
      16 lines of code
      1 parameters
      4 conditional paths
      uses variable b defined in clang-modernize/AddOverride/basic.cpp
   function chained_conditional_assignment(int) in line 21
      protection public
      15 lines of code
      1 parameters
      4 conditional paths
      uses variable b defined in clang-modernize/AddOverride/basic.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/clang-tidy/readability-simplify-bool-expr-chained-conditional-return.cpp
module readability-simplify-bool-expr-chained-conditional-return.cpp
   function chained_conditional_compound_return(int) in line 4
      protection public
      15 lines of code
      1 parameters
      4 conditional paths
   function chained_conditional_return(int) in line 20
      protection public
      14 lines of code
      1 parameters
      4 conditional paths
   function chained_simple_if_return(int) in line 35
      protection public
      7 lines of code
      1 parameters
      3 conditional paths
   function chained_simple_if_return_negated(int) in line 49
      protection public
      7 lines of code
      1 parameters
      3 conditional paths
   function complex_chained_if_return_return(int) in line 63
      protection public
      9 lines of code
      1 parameters
      3 conditional paths
   function complex_chained_if_return_return_negated(int) in line 80
      protection public
      9 lines of code
      1 parameters
      3 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/clang-tidy/readability-simplify-bool-expr.cpp
module readability-simplify-bool-expr.cpp
   macro definition HAS_XYZ_FEATURE in line 284
      protection public
   variable a1 in line 4
      protection public
   variable aa in line 7
      protection public
   variable ab in line 10
      protection public
   variable a2 in line 13
      protection public
   variable a3 in line 16
      protection public
   variable n1 in line 21
      protection public
   variable n2 in line 24
      protection public
   variable n3 in line 27
      protection public
   variable n4 in line 30
      protection public
   variable a4 in line 35
      protection public
   variable a5 in line 38
      protection public
   variable a6 in line 41
      protection public
   variable a7 in line 44
      protection public
   variable a8 in line 49
      protection public
   variable a9 in line 52
      protection public
   variable ac in line 55
      protection public
   variable ad in line 58
      protection public
   function if_with_bool_literal_condition() in line 62
      protection public
      39 lines of code
      0 parameters
      4 conditional paths
   function operator_equals() in line 102
      protection public
      35 lines of code
      0 parameters
      5 conditional paths
   function operator_or() in line 138
      protection public
      35 lines of code
      0 parameters
      5 conditional paths
   function operator_and() in line 174
      protection public
      35 lines of code
      0 parameters
      5 conditional paths
   function ternary_operator() in line 210
      protection public
      14 lines of code
      0 parameters
      1 conditional paths
   function operator_not_equal() in line 225
      protection public
      35 lines of code
      0 parameters
      5 conditional paths
   function nested_booleans() in line 261
      protection public
      18 lines of code
      0 parameters
      5 conditional paths
   function truthy() in line 280
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function macros_and_constexprs(int) in line 286
      protection public
      15 lines of code
      1 parameters
      3 conditional paths
      uses variable b defined in clang-modernize/AddOverride/basic.cpp
      uses function truthy() defined in readability-simplify-bool-expr.cpp
      uses macro definition HAS_XYZ_FEATURE defined in readability-simplify-bool-expr.cpp
   function conditional_return_statements(int) in line 302
      protection public
      3 lines of code
      1 parameters
      2 conditional paths
   function conditional_return_statements_then_expr(int,int) in line 309
      protection public
      3 lines of code
      2 parameters
      2 conditional paths
      uses variable j defined in pp-trace-macro.cpp
   function conditional_return_statements_else_expr(int,int) in line 313
      protection public
      3 lines of code
      2 parameters
      2 conditional paths
      uses variable j defined in pp-trace-macro.cpp
   function negated_conditional_return_statements(int) in line 317
      protection public
      3 lines of code
      1 parameters
      2 conditional paths
   function negative_condition_conditional_return_statement(int) in line 324
      protection public
      3 lines of code
      1 parameters
      2 conditional paths
   function conditional_compound_return_statements(int) in line 331
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
   function negated_conditional_compound_return_statements(int) in line 343
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
   function conditional_return_statements_side_effects_then(int) in line 355
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses function macros_and_constexprs(int) defined in readability-simplify-bool-expr.cpp
   function negated_conditional_return_statements_side_effects_then(int) in line 363
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses function macros_and_constexprs(int) defined in readability-simplify-bool-expr.cpp
   function conditional_return_statements_side_effects_else(int) in line 371
      protection public
      8 lines of code
      1 parameters
      2 conditional paths
      uses function macros_and_constexprs(int) defined in readability-simplify-bool-expr.cpp
   function negated_conditional_return_statements_side_effects_else(int) in line 380
      protection public
      8 lines of code
      1 parameters
      2 conditional paths
      uses function macros_and_constexprs(int) defined in readability-simplify-bool-expr.cpp
   function lambda_conditional_return_statements() in line 389
      protection public
      44 lines of code
      0 parameters
      7 conditional paths
      uses function macros_and_constexprs(int) defined in readability-simplify-bool-expr.cpp
   function simple_conditional_assignment_statements(int) in line 434
      protection public
      50 lines of code
      1 parameters
      7 conditional paths
      uses variable b defined in clang-modernize/AddOverride/basic.cpp
      uses variable j defined in pp-trace-macro.cpp
   function complex_conditional_assignment_statements(int) in line 485
      protection public
      66 lines of code
      1 parameters
      8 conditional paths
      uses variable d defined in clang-modernize/ReplaceAutoPtr/basic.cpp
      uses variable j defined in pp-trace-macro.cpp
      uses function f() defined in no.cpp
      uses function g(int,int *,int,int *,int,int *,int) defined in yes.cpp
      uses function h() defined in arg-comments.cpp
   function chained_conditional_compound_return(int) in line 553
      protection public
      11 lines of code
      1 parameters
      4 conditional paths
   function chained_conditional_return(int) in line 566
      protection public
      10 lines of code
      1 parameters
      4 conditional paths
   function chained_conditional_compound_assignment(int) in line 578
      protection public
      12 lines of code
      1 parameters
      4 conditional paths
      uses variable b defined in clang-modernize/AddOverride/basic.cpp
   function chained_conditional_assignment(int) in line 592
      protection public
      11 lines of code
      1 parameters
      4 conditional paths
      uses variable b defined in clang-modernize/AddOverride/basic.cpp
   function chained_simple_if_return_negated(int) in line 605
      protection public
      7 lines of code
      1 parameters
      3 conditional paths
   function complex_chained_if_return_return(int) in line 614
      protection public
      9 lines of code
      1 parameters
      3 conditional paths
   function complex_chained_if_return_return_negated(int) in line 625
      protection public
      9 lines of code
      1 parameters
      3 conditional paths
   function chained_simple_if_return(int) in line 636
      protection public
      7 lines of code
      1 parameters
      3 conditional paths
   function simple_if_return_return(int) in line 644
      protection public
      5 lines of code
      1 parameters
      2 conditional paths
   function simple_if_return_return_negated(int) in line 654
      protection public
      5 lines of code
      1 parameters
      2 conditional paths
   function complex_if_return_return(int) in line 664
      protection public
      6 lines of code
      1 parameters
      2 conditional paths
   function complex_if_return_return_negated(int) in line 675
      protection public
      6 lines of code
      1 parameters
      2 conditional paths
   function if_implicit_bool_expr(int) in line 686
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
   function negated_if_implicit_bool_expr(int) in line 696
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
   function implicit_int(int) in line 706
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
   function explicit_bool(bool) in line 716
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses variable b defined in clang-modernize/AddOverride/basic.cpp
   function object_bool_implicit_conversion(Implicit) in line 733
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
   function negated_explicit_bool(bool) in line 743
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses variable b defined in clang-modernize/AddOverride/basic.cpp
   function bitwise_complement_conversion(int) in line 753
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
   function logical_or(bool,bool) in line 763
      protection public
      7 lines of code
      2 parameters
      2 conditional paths
      uses variable a defined in diagnostic.cpp
      uses variable b defined in clang-modernize/AddOverride/basic.cpp
   function logical_and(bool,bool) in line 773
      protection public
      7 lines of code
      2 parameters
      2 conditional paths
      uses variable a defined in diagnostic.cpp
      uses variable b defined in clang-modernize/AddOverride/basic.cpp
   function comparable_objects() in line 790
      protection public
      9 lines of code
      0 parameters
      2 conditional paths
      uses variable d defined in clang-modernize/ReplaceAutoPtr/basic.cpp
   function negated_comparable_objects() in line 802
      protection public
      9 lines of code
      0 parameters
      2 conditional paths
      uses variable d defined in clang-modernize/ReplaceAutoPtr/basic.cpp
   function explicit_conversion_assignment(X) in line 818
      protection public
      8 lines of code
      1 parameters
      2 conditional paths
      uses variable y defined in readability-named-parameter.cpp
      uses variable x defined in readability-function-size.cpp
   function ternary_integer_condition(int) in line 830
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
      uses variable b defined in clang-modernize/AddOverride/basic.cpp
   function non_null_pointer_condition(int *) in line 836
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
   function null_pointer_condition(int *) in line 846
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
   function negated_non_null_pointer_condition(int *) in line 856
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
   function negated_null_pointer_condition(int *) in line 866
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
module Implicit
   function operator bool() in line 728
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
module Comparable
   function operator!=(Comparable const &) in line 787
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function operator==(Comparable const &) in line 786
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
module X
   function f() in line 28
      protection public
      10 lines of code
      0 parameters
      1 conditional paths
      uses variable v defined in naming-alias.cpp
      uses function swap(vector &) defined in std::vector
   function getS() in line 58
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function operator bool() in line 815
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function operator++(int) in line 41
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function operator--(int) in line 42
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
      uses function X(X &) defined in X
      uses function operator=(X &) defined in X
   function operator=(X &) in line 45
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function X(X &) in line 44
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   variable i in line 47
      protection public
   variable s in line 55
      protection public
   variable t in line 56
      protection public
   variable u in line 57
      protection public
   variable v in line 27
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/clang-tidy/select-checks.cpp
module A
   abstract class
   function clone() in line 8
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function clone() in line 47
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function f() in line 6
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function f() in line 11
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function f() in line 14
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function g() in line 7
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function h() in line 12
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function i() in line 14
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function method() in line 30
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function operator=(A &&) in line 7
      1 lines of code
      1 parameters
      1 conditional paths
   function ~A() in line 9
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function A(const Movable &) in line 22
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function A(T *) in line 11
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function A(T) in line 4
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 19
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 24
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 10
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 13
      1 lines of code
      1 parameters
      1 conditional paths
   function A() in line 37
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function A(int,int) in line 38
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function A(void *) in line 40
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function A(void *,void *) in line 41
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function A(const A &) in line 43
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 47
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function A(double,double) in line 51
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function A(T &&...) in line 56
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 18
      1 lines of code
      1 parameters
      1 conditional paths
   function A(A &&) in line 5
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 3
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 11
      1 lines of code
      1 parameters
      1 conditional paths
   variable ee in line 149
      protection public
   variable field in line 26
      protection public
   variable foo in line 6
      protection public
   variable M in line 25
      protection public
   variable Ptr in line 19
      protection public
   variable s in line 15
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/clang-tidy/serialize-diagnostics.cpp
module A
   abstract class
   function clone() in line 8
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function clone() in line 47
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function f() in line 6
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function f() in line 11
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function f() in line 14
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function g() in line 7
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function h() in line 12
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function i() in line 14
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function method() in line 30
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function operator=(A &&) in line 7
      1 lines of code
      1 parameters
      1 conditional paths
   function ~A() in line 9
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function A(const Movable &) in line 22
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function A(T *) in line 11
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function A(T) in line 4
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 19
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 24
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 10
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 13
      1 lines of code
      1 parameters
      1 conditional paths
   function A() in line 37
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function A(int,int) in line 38
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function A(void *) in line 40
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function A(void *,void *) in line 41
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function A(const A &) in line 43
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 47
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function A(double,double) in line 51
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function A(T &&...) in line 56
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 18
      1 lines of code
      1 parameters
      1 conditional paths
   function A(A &&) in line 5
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 3
      1 lines of code
      1 parameters
      1 conditional paths
   function A(int) in line 11
      1 lines of code
      1 parameters
      1 conditional paths
   variable ee in line 149
      protection public
   variable field in line 26
      protection public
   variable foo in line 6
      protection public
   variable M in line 25
      protection public
   variable Ptr in line 19
      protection public
   variable s in line 15
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/clang-tidy/static-analyzer-config.cpp
module static-analyzer-config.cpp
   function __typeof(sizeof(int)) in line 2
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function malloc(size_t) in line 3
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function free(void *) in line 4
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function __attribute((ownership_returns(malloc))) in line 5
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function __attribute((ownership_takes(malloc, 1))) in line 6
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function f1() in line 8
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
      uses function p(unsigned short) defined in google-runtime-int.cpp
      uses function malloc(size_t) defined in static-analyzer-config.cpp
   function af2() in line 14
      protection public
      6 lines of code
      0 parameters
      1 conditional paths
      uses function p(unsigned short) defined in google-runtime-int.cpp
      uses function free(void *) defined in static-analyzer-config.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/clang-tidy/static-analyzer.cpp
module static-analyzer.cpp
   function malloc(unsigned) in line 2
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function free(void *) in line 3
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function f() in line 5
      protection public
      6 lines of code
      0 parameters
      1 conditional paths
      uses variable a defined in diagnostic.cpp
      uses function C(const Movable &) defined in C
      uses function p(unsigned short) defined in google-runtime-int.cpp
   function g() in line 12
      protection public
      6 lines of code
      0 parameters
      1 conditional paths
      uses function malloc(unsigned) defined in static-analyzer.cpp
      uses function free(void *) defined in static-analyzer.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/clang-tidy/temporaries.cpp
module temporaries.cpp
   function check(const NoReturnDtor &) in line 7
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function testNullPointerDereferencePositive() in line 10
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
   function testNullPointerDereference() in line 17
      protection public
      7 lines of code
      0 parameters
      2 conditional paths
      uses function check(const NoReturnDtor &) defined in temporaries.cpp
module NoReturnDtor
   function ~NoReturnDtor() in line 4
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/clang-tidy/validate-check-names.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/modularize/Inputs/Anonymous.h
module Anonymous.h
   enumeration @0 in line 4
      protection public
   enumeration AnonymousEnum in line 9
      protection public
   enumvalue Tag1 in line 6
      protection public
   enumvalue Tag2 in line 11
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/modularize/Inputs/CompileError/HasError.h
module HasError.h
   typedef BadType in line 1
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/modularize/Inputs/CompileError/Level1A.h
module modularize/Inputs/CompileError/Level1A.h
   macro definition MACRO_1A in line 1
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/modularize/Inputs/CoverageNoProblems/Includes1/Level1A.h
module modularize/Inputs/CoverageNoProblems/Includes1/Level1A.h
   macro definition MACRO_1A in line 1
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/modularize/Inputs/CoverageProblems/Level1A.h
module modularize/Inputs/CoverageProblems/Level1A.h
   macro definition MACRO_1A in line 2
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/modularize/Inputs/MissingHeader/Level1A.h
module modularize/Inputs/MissingHeader/Level1A.h
   macro definition MACRO_1A in line 1
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/pp-trace/Inputs/Level1A.h
module pp-trace/Inputs/Level1A.h
   macro definition MACRO_1A in line 2
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/modularize/Inputs/CoverageNoProblems/Includes2/Level2A.h
module modularize/Inputs/CoverageNoProblems/Includes2/Level2A.h
   macro definition MACRO_2A in line 1
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/modularize/Inputs/CoverageProblems/Level2A.h
module modularize/Inputs/CoverageProblems/Level2A.h
   macro definition MACRO_2A in line 1
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/pp-trace/Inputs/Level2A.h
module pp-trace/Inputs/Level2A.h
   macro definition MACRO_2A in line 1
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/modularize/Inputs/CoverageNoProblems/NonIncludes/Level3A.h
module CoverageNoProblems/NonIncludes/Level3A.h
   macro definition MACRO_3A in line 1
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/modularize/Inputs/CoverageProblems/Level3A.h
module CoverageProblems/Level3A.h
   macro definition MACRO_3A in line 2
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/modularize/Inputs/CoverageProblems/Level1B.h
module modularize/Inputs/CoverageProblems/Level1B.h
   macro definition MACRO_1B in line 2
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/pp-trace/Inputs/Level1B.h
module pp-trace/Inputs/Level1B.h
   macro definition MACRO_1B in line 2
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/modularize/Inputs/CoverageProblems/Level2B.h
module modularize/Inputs/CoverageProblems/Level2B.h
   macro definition MACRO_2B in line 1
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/pp-trace/Inputs/Level2B.h
module pp-trace/Inputs/Level2B.h
   macro definition MACRO_2B in line 1
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/modularize/Inputs/CoverageProblems/Sub/Level3B.h
module Level3B.h
   macro definition MACRO_3B in line 1
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/modularize/Inputs/CoverageProblems/UmbrellaFile.h
module UmbrellaFile.h
   macro definition UMBRELLA_HEADER in line 1
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/modularize/Inputs/CoverageProblems/UmbrellaInclude1.h
module UmbrellaInclude1.h
   macro definition UMBRELLA_INCLUDE_1 in line 1
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/modularize/Inputs/CoverageProblems/UmbrellaInclude2.h
module UmbrellaInclude2.h
   macro definition UMBRELLA_INCLUDE_2 in line 1
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/modularize/Inputs/CoverageProblems/UmbrellaSub/Umbrell1.h
module Umbrell1.h
   macro definition UMBRELLA_1 in line 1
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/modularize/Inputs/CoverageProblems/UmbrellaSub/Umbrell2.h
module Umbrell2.h
   macro definition UMBRELLA_2 in line 1
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/modularize/Inputs/DuplicateHeader1.h
module DuplicateHeader1.h
   typedef TypeInt in line 2
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/modularize/Inputs/DuplicateHeader2.h
module DuplicateHeader2.h
   typedef TypeInt in line 2
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/modularize/Inputs/Empty.h
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/modularize/Inputs/HeaderGuardSub1.h
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/modularize/Inputs/HeaderGuardSub2.h
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/modularize/Inputs/HeaderGuardSubSub.h
module HeaderGuardSubSub.h
   macro definition SOMETHING in line 4
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/modularize/Inputs/HeaderGuardSubSubDefined.h
module HeaderGuardSubSubDefined.h
   macro definition SOMETHING_OTHER in line 4
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/modularize/Inputs/IncludeInExtern.h
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/modularize/Inputs/IncludeInNamespace.h
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/modularize/Inputs/InconsistentHeader1.h
module InconsistentHeader1.h
   macro definition SYMBOL1 in line 3
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/modularize/Inputs/InconsistentHeader2.h
module InconsistentHeader2.h
   macro definition SYMBOL2 in line 2
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/modularize/Inputs/InconsistentSubHeader.h
module InconsistentSubHeader.h
   variable var in line 15
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/modularize/Inputs/IsDependent.h
module IsDependent.h
   typedef NewTypeInt in line 3
      protection public
   typedef OtherNewTypeInt in line 4
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/modularize/Inputs/NamespaceClasses.h
module Namespace1::NamespaceClass
   function NamespaceClass() in line 6
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   variable Member in line 8
module Namespace2::NamespaceClass
   function NamespaceClass() in line 15
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   variable Member in line 17
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/modularize/Inputs/NestedMacro.h
module NestedMacro.h
   macro definition FUNCMACROINNER in line 3
      protection public
   macro definition FUNCMACROOUTER in line 4
      protection public
   variable FuncMacroValue in line 5
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/modularize/Inputs/SomeDecls.h
module SomeDecls.h
   function FuncOne() in line 3
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function FuncTwo(int) in line 5
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function FuncOverload(int) in line 7
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function FuncOverload(char *) in line 8
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function FuncNameSpace() in line 11
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function FuncNameSpace() in line 15
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/modularize/Inputs/SomeOtherTypes.h
module SomeOtherTypes.h
   typedef OtherTypeInt in line 4
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/modularize/Inputs/SomeTypes.h
module SomeTypes.h
   typedef TypeInt in line 3
      protection public
   typedef NestedTypeInt in line 5
      protection public
module TypeStruct
   variable Member in line 8
      protection public
module TypeClass
   function TypeClass() in line 13
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   variable Member in line 15
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/modularize/Inputs/SubModule1/Header1.h
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/modularize/Inputs/SubModule1/Header2.h
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/modularize/Inputs/SubModule2/Header3.h
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/modularize/Inputs/SubModule2/Header4.h
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/modularize/Inputs/TemplateClasses.h
module TemplateClasses.h
   typedef TemplateClassAlias in line 15
      protection public
module TemplateClass
   function TemplateClass() in line 9
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   variable Member in line 11
module TemplateClass
   function TemplateClass() in line 9
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   variable Member in line 11
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/modularize/SubModule2.h
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/pp-trace/pp-trace-conditional.cpp
module pp-trace-conditional.cpp
   macro definition MACRO in line 54
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/pp-trace/pp-trace-ident.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/pp-trace/pp-trace-include.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/pp-trace/pp-trace-macro.cpp
module pp-trace-macro.cpp
   macro definition MACRO in line 3
      protection public
   macro definition FUNCMACRO in line 10
      protection public
   macro definition X in line 12
      protection public
   macro definition X_IMPL in line 13
      protection public
   macro definition X_IMPL2 in line 14
      protection public
   variable i in line 4
      protection public
   variable j in line 11
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/pp-trace/pp-trace-modules.cpp
module pp-trace-modules.cpp
   variable Level1A in line 6
      protection public
   variable Level2B in line 13
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/pp-trace/pp-trace-pragma-general.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/pp-trace/pp-trace-pragma-ms.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/test/pp-trace/pp-trace-pragma-opencl.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/tool-template/ToolTemplate.cpp
module ToolTemplate.cpp
   function CommonHelp(CommonOptionsParser::HelpMessage) in line 72
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ToolTemplateCategory("tool-template options") in line 73
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function main(int,const char **) in line 75
      protection public
      14 lines of code
      2 parameters
      1 conditional paths
      uses function ToolTemplateCategory("tool-template options") defined in ToolTemplate.cpp
      uses variable Finder defined in ClangTidy.cpp
module @384::ToolTemplateCallback
   variable Replace in line 67
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/unittests/clang-apply-replacements/ReformattingTest.cpp
module ReformattingTest.cpp
   typedef ReplacementsVec in line 20
      protection public
   function makeReplacement(unsigned,unsigned,unsigned,llvm::StringRef) in line 22
      protection public
      6 lines of code
      4 parameters
      1 conditional paths
   function makeReplacements(unsigned,unsigned,unsigned,llvm::StringRef) in line 30
      protection public
      8 lines of code
      4 parameters
      1 conditional paths
      uses function makeReplacement(unsigned,unsigned,unsigned,llvm::StringRef) defined in ReformattingTest.cpp
   function operator==(const Range &,const Range &) in line 43
      protection public
      3 lines of code
      2 parameters
      1 conditional paths
   function operator<<(std::ostream &,const Range &) in line 47
      protection public
      3 lines of code
      2 parameters
      1 conditional paths
   function TEST(CalculateChangedRangesTest,producesZeroLengthRange) in line 55
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function calculateChangedRanges(const std::vector< clang::tooling::Replacement > &) defined in ApplyReplacements.h
      uses function makeReplacements(unsigned,unsigned,unsigned,llvm::StringRef) defined in ReformattingTest.cpp
      uses variable Range defined in IncludeOrderCheck.cpp
   function TEST(CalculateChangedRangesTest,calculatesRanges) in line 61
      protection public
      9 lines of code
      2 parameters
      1 conditional paths
      uses function makeReplacement(unsigned,unsigned,unsigned,llvm::StringRef) defined in ReformattingTest.cpp
      uses function calculateChangedRanges(const std::vector< clang::tooling::Replacement > &) defined in ApplyReplacements.h
      uses variable Range defined in IncludeOrderCheck.cpp
      uses function begin() defined in std::vector
      uses function end() defined in std::vector
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/unittests/clang-modernize/IncludeDirectivesTest.cpp
module IncludeDirectivesTest.cpp
   function applyActionOnCode(FrontendAction *,StringRef) in line 22
      protection public
      17 lines of code
      2 parameters
      4 conditional paths
      uses variable Path defined in PreprocessorTracker.cpp
      uses macro definition assert defined in misc-assert-side-effect.cpp
      uses variable IncludeDirectives defined in IncludeOrderCheck.cpp
   function TEST(IncludeDirectivesTest2,endOfLinesVariants) in line 127
      protection public
      11 lines of code
      2 parameters
      1 conditional paths
   function TEST(IncludeDirectivesTest,ppToken) in line 139
      protection public
      9 lines of code
      2 parameters
      1 conditional paths
   function TEST(IncludeDirectivesTest,noFileHeader) in line 149
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
   function TEST(IncludeDirectivesTest,commentBeforeTopMostCode) in line 156
      protection public
      8 lines of code
      2 parameters
      1 conditional paths
   function TEST(IncludeDirectivesTest,multiLineComment) in line 165
      protection public
      8 lines of code
      2 parameters
      1 conditional paths
   function TEST(IncludeDirectivesTest,multilineCommentWithTrailingSpace) in line 174
      protection public
      8 lines of code
      2 parameters
      1 conditional paths
   function TEST(IncludeDirectivesTest,fileHeaders) in line 183
      protection public
      14 lines of code
      2 parameters
      1 conditional paths
   function TEST(IncludeDirectivesTest,preferablyAngledNextToAngled) in line 198
      protection public
      12 lines of code
      2 parameters
      1 conditional paths
   function TEST(IncludeDirectivesTest,avoidDuplicates) in line 211
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function TEST(IncludeDirectivesTest,ignoreHeadersMeantForMultipleInclusion) in line 217
      protection public
      20 lines of code
      2 parameters
      1 conditional paths
      uses variable Result defined in USRFinder.cpp
   function TEST(IncludeDirectivesTest,indirectIncludes) in line 252
      protection public
      26 lines of code
      2 parameters
      1 conditional paths
      uses function applyActionOnCode(FrontendAction *,StringRef) defined in IncludeDirectivesTest.cpp
   function addIncludeInGuardedHeader(StringRef,StringRef) in line 280
      protection public
      14 lines of code
      2 parameters
      2 conditional paths
      uses function applyActionOnCode(FrontendAction *,StringRef) defined in IncludeDirectivesTest.cpp
   function TEST(IncludeDirectivesTest,insertInsideIncludeGuard) in line 295
      protection public
      16 lines of code
      2 parameters
      1 conditional paths
      uses function addIncludeInGuardedHeader(StringRef,StringRef) defined in IncludeDirectivesTest.cpp
   function TEST(IncludeDirectivesTest,guardAndHeader) in line 312
      protection public
      20 lines of code
      2 parameters
      1 conditional paths
      uses function addIncludeInGuardedHeader(StringRef,StringRef) defined in IncludeDirectivesTest.cpp
   function TEST(IncludeDirectivesTest,fullHeaderFitsAsAPreamble) in line 333
      protection public
      16 lines of code
      2 parameters
      1 conditional paths
      uses function addIncludeInGuardedHeader(StringRef,StringRef) defined in IncludeDirectivesTest.cpp
   function TEST(IncludeDirectivesTest,codeBeforeIfndef) in line 350
      protection public
      20 lines of code
      2 parameters
      1 conditional paths
      uses function addIncludeInGuardedHeader(StringRef,StringRef) defined in IncludeDirectivesTest.cpp
   function TEST(IncludeDirectivesTest,codeAfterEndif) in line 371
      protection public
      20 lines of code
      2 parameters
      1 conditional paths
      uses function addIncludeInGuardedHeader(StringRef,StringRef) defined in IncludeDirectivesTest.cpp
   function TEST(IncludeDirectivesTest,headerGuardWithInclude) in line 392
      protection public
      19 lines of code
      2 parameters
      1 conditional paths
      uses function addIncludeInGuardedHeader(StringRef,StringRef) defined in IncludeDirectivesTest.cpp
module @386::TestAddIncludeAction
   variable FileIncludes in line 108
   variable FileToModify in line 109
   variable HeaderToModify in line 112
   variable Include in line 105
   variable Replaces in line 107
   variable VFHelper in line 106
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/unittests/clang-modernize/IncludeExcludeTest.cpp
module IncludeExcludeTest.cpp
   function TEST(IncludeExcludeTest,ParseString) in line 17
      protection public
      44 lines of code
      2 parameters
      1 conditional paths
      uses function readListFromString(llvm::StringRef,llvm::StringRef) defined in IncludeExcludeInfo
      uses function isFileIncluded(llvm::StringRef) defined in IncludeExcludeInfo
      uses macro definition ASSERT_NO_ERROR defined in Utility.h
   function TEST(IncludeExcludeTest,ParseStringCases) in line 62
      protection public
      16 lines of code
      2 parameters
      1 conditional paths
      uses function readListFromString(llvm::StringRef,llvm::StringRef) defined in IncludeExcludeInfo
      uses function isFileIncluded(llvm::StringRef) defined in IncludeExcludeInfo
   function TEST(IncludeExcludeFileTest,UNIXFile) in line 121
      protection public
      14 lines of code
      2 parameters
      1 conditional paths
      uses function CreateFiles(bool) defined in InputFiles
      uses function readListFromFile(llvm::StringRef,llvm::StringRef) defined in IncludeExcludeInfo
      uses variable IncludeDataPath defined in InputFiles
      uses function c_str() defined in std::basic_string
      uses variable ExcludeDataPath defined in InputFiles
   function TEST(IncludeExcludeFileTest,DOSFile) in line 136
      protection public
      14 lines of code
      2 parameters
      1 conditional paths
      uses function CreateFiles(bool) defined in InputFiles
      uses function readListFromFile(llvm::StringRef,llvm::StringRef) defined in IncludeExcludeInfo
      uses variable IncludeDataPath defined in InputFiles
      uses function c_str() defined in std::basic_string
      uses variable ExcludeDataPath defined in InputFiles
module InputFiles
   function CreateFiles(bool) in line 85
      protection public
      24 lines of code
      1 parameters
      3 conditional paths
      uses variable Path defined in PreprocessorTracker.cpp
      uses macro definition ASSERT_NO_ERROR defined in Utility.h
      uses variable IncludeDataPath defined in InputFiles
      uses variable IncludeData defined in InputFiles
      uses variable i defined in pp-trace-macro.cpp
      uses variable ExcludeDataPath defined in InputFiles
      uses variable ExcludeData defined in InputFiles
   variable ExcludeData in line 111
      protection public
   variable ExcludeDataPath in line 114
      protection public
   variable IncludeData in line 110
      protection public
   variable IncludeDataPath in line 113
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/unittests/clang-modernize/PerfSupportTest.cpp
module PerfSupportTest.cpp
   function TEST(PerfSupport,collectSourcePerfData) in line 55
      protection public
      43 lines of code
      2 parameters
      1 conditional paths
      uses function collectSourcePerfData(const Transform &,SourcePerfData &) defined in PerfSupport.cpp
      uses function find(const K &) defined in std::map
      uses function end() defined in std::map
      uses variable u defined in negative-iterator.cpp
module TransformA
   inherits from Transform
   function addTiming(StringRef,TimeRecord) in line 26
      protection public
      3 lines of code
      2 parameters
      1 conditional paths
      uses function addTiming(llvm::StringRef,llvm::TimeRecord) defined in Transform
   function apply(const tooling::CompilationDatabase &,const std::vector< std::string > &) in line 21
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function TransformA(const TransformOptions &) in line 18
      protection public
      2 lines of code
      1 parameters
      1 conditional paths
module TransformB
   inherits from Transform
   function addTiming(StringRef,TimeRecord) in line 41
      protection public
      3 lines of code
      2 parameters
      1 conditional paths
      uses function addTiming(llvm::StringRef,llvm::TimeRecord) defined in Transform
   function apply(const tooling::CompilationDatabase &,const std::vector< std::string > &) in line 36
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function TransformB(const TransformOptions &) in line 33
      protection public
      2 lines of code
      1 parameters
      1 conditional paths
module ExpectedResults
   variable Data in line 52
      protection public
   variable DataCount in line 48
      protection public
   variable SourceName in line 47
      protection public
module ExpectedResults::Datum
   variable Duration in line 51
      protection public
   variable Label in line 50
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/unittests/clang-modernize/TransformTest.cpp
module TransformTest.cpp
   function TEST(Transform,Interface) in line 45
      protection public
      28 lines of code
      2 parameters
      1 conditional paths
      uses variable u defined in negative-iterator.cpp
   function TEST(Transform,Timings) in line 116
      protection public
      64 lines of code
      2 parameters
      3 conditional paths
      uses variable EnableTiming defined in TransformOptions
      uses macro definition assert defined in misc-assert-side-effect.cpp
      uses variable Called defined in ConsumerFactory
   function TEST(Transform,isFileModifiable) in line 216
      protection public
      62 lines of code
      2 parameters
      1 conditional paths
      uses macro definition assert defined in misc-assert-side-effect.cpp
      uses variable ModifiableFiles defined in TransformOptions
      uses function readListFromString(llvm::StringRef,llvm::StringRef) defined in IncludeExcludeInfo
      uses variable Finder defined in ClangTidy.cpp
   function TEST(VersionTest,Interface) in line 279
      protection public
      12 lines of code
      2 parameters
      1 conditional paths
      uses function isNull() defined in Version
   function TEST(VersionTest,getFromString) in line 292
      protection public
      8 lines of code
      2 parameters
      1 conditional paths
module DummyTransform
   inherits from Transform
   function apply(const tooling::CompilationDatabase &,const std::vector< std::string > &) in line 28
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function setAcceptedChanges(unsigned) in line 33
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
      uses function setAcceptedChanges(unsigned) defined in Transform
   function setDeferredChanges(unsigned) in line 39
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
      uses function setDeferredChanges(unsigned) defined in Transform
   function setRejectedChanges(unsigned) in line 36
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
      uses function setRejectedChanges(unsigned) defined in Transform
   function DummyTransform(llvm::StringRef,const TransformOptions &) in line 25
      protection public
      2 lines of code
      2 parameters
      1 conditional paths
module TimePassingASTConsumer
   inherits from ASTConsumer
   function HandleTopLevelDecl(DeclGroupRef) in line 78
      protection public
      16 lines of code
      1 parameters
      2 conditional paths
   function TimePassingASTConsumer(bool *) in line 76
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   variable Called in line 94
      protection public
module ConsumerFactory
   function newASTConsumer() in line 98
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   variable Called in line 101
      protection public
module CallbackForwarder
   inherits from clang::tooling::SourceFileCallbacks
   function handleBeginSource(CompilerInstance &,StringRef) in line 107
      protection public
      3 lines of code
      2 parameters
      1 conditional paths
      uses variable Filename defined in IncludeOrderCheck.cpp
   function handleEndSource() in line 111
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function CallbackForwarder(Transform &) in line 105
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   variable Callee in line 113
      protection public
module ModifiableCallback
   inherits from clang::ast_matchers::MatchFinder::MatchCallback
   function run(const clang::ast_matchers::MatchFinder::MatchResult &) in line 188
      protection public
      23 lines of code
      1 parameters
      4 conditional paths
      uses variable Result defined in USRFinder.cpp
      uses variable SM defined in IncludeOrderCheck.cpp
   function ModifiableCallback(const Transform &) in line 184
      protection public
      2 lines of code
      1 parameters
      1 conditional paths
   variable Owner in line 213
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/unittests/clang-modernize/UniqueHeaderNameTest.cpp
module UniqueHeaderNameTest.cpp
   function TEST(UniqueHeaderName,testUniqueHeaderName) in line 21
      protection public
      41 lines of code
      2 parameters
      1 conditional paths
      uses variable Result defined in USRFinder.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/unittests/clang-query/QueryEngineTest.cpp
module QueryEngineTest.cpp
   function TEST_F(QueryEngineTest,Basic) in line 51
      protection public
      71 lines of code
      2 parameters
      1 conditional paths
      uses enumvalue OK_Print defined in Query.h
      uses enumvalue OK_Dump defined in Query.h
   function TEST_F(QueryEngineTest,LetAndMatch) in line 123
      protection public
      24 lines of code
      2 parameters
      1 conditional paths
module QueryEngineTest
   inherits from testing::Test
   function mkASTUnit2(std::unique_ptr< ASTUnit >,std::unique_ptr< ASTUnit >) in line 29
      6 lines of code
      2 parameters
      1 conditional paths
      uses variable a defined in diagnostic.cpp
      uses variable b defined in clang-modernize/AddOverride/basic.cpp
   function QueryEngineTest() in line 37
      6 lines of code
      0 parameters
      1 conditional paths
   variable ASTs in line 44
   variable OS in line 48
   variable S in line 45
   variable Str in line 47
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/unittests/clang-query/QueryParserTest.cpp
module QueryParserTest.cpp
   function TEST_F(QueryParserTest,NoOp) in line 27
      protection public
      7 lines of code
      2 parameters
      1 conditional paths
   function TEST_F(QueryParserTest,Invalid) in line 35
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
   function TEST_F(QueryParserTest,Help) in line 41
      protection public
      8 lines of code
      2 parameters
      1 conditional paths
   function TEST_F(QueryParserTest,Set) in line 50
      protection public
      38 lines of code
      2 parameters
      1 conditional paths
      uses variable OutKind defined in clang::query::QuerySession
      uses enumvalue OK_Dump defined in Query.h
      uses variable BindRoot defined in clang::query::QuerySession
   function TEST_F(QueryParserTest,Match) in line 89
      protection public
      9 lines of code
      2 parameters
      1 conditional paths
   function TEST_F(QueryParserTest,LetUnlet) in line 99
      protection public
      31 lines of code
      2 parameters
      1 conditional paths
      uses variable Name defined in PreprocessorTracker.cpp
   function TEST_F(QueryParserTest,Complete) in line 131
      protection public
      26 lines of code
      2 parameters
      1 conditional paths
      uses variable u defined in negative-iterator.cpp
      uses function size() defined in std::vector
module QueryParserTest
   inherits from testing::Test
   function parse(StringRef) in line 22
      1 lines of code
      1 parameters
      1 conditional paths
   function QueryParserTest() in line 21
      1 lines of code
      0 parameters
      1 conditional paths
   variable QS in line 24
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/unittests/clang-rename/USRLocFindingTest.cpp
module USRLocFindingTest.cpp
   function testOffsetGroups(const char *,const std::vector< std::vector< unsigned >>) in line 17
      protection public
      25 lines of code
      2 parameters
      3 conditional paths
      uses variable USR defined in USRLocFinder.cpp
      uses function getUSRs() defined in clang::rename::USRFindingAction
      uses variable u defined in negative-iterator.cpp
   function TEST(USRLocFinding,FindsVarUSR) in line 44
      protection public
      37 lines of code
      2 parameters
      1 conditional paths
      uses function testOffsetGroups(const char *,const std::vector< std::vector< unsigned >>) defined in USRLocFindingTest.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/unittests/clang-tidy/ClangTidyDiagnosticConsumerTest.cpp
module ClangTidyDiagnosticConsumerTest.cpp
   function TEST(ClangTidyDiagnosticConsumer,SortsErrors) in line 24
      protection public
      7 lines of code
      2 parameters
      1 conditional paths
      uses function size() defined in std::vector
   function TEST(GlobList,Empty) in line 32
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
      uses function contains(StringRef) defined in clang::tidy::GlobList
   function TEST(GlobList,Nothing) in line 39
      protection public
      9 lines of code
      2 parameters
      1 conditional paths
      uses function contains(StringRef) defined in clang::tidy::GlobList
   function TEST(GlobList,Everything) in line 49
      protection public
      9 lines of code
      2 parameters
      1 conditional paths
      uses function contains(StringRef) defined in clang::tidy::GlobList
   function TEST(GlobList,Simple) in line 59
      protection public
      9 lines of code
      2 parameters
      1 conditional paths
      uses function contains(StringRef) defined in clang::tidy::GlobList
   function TEST(GlobList,Complex) in line 69
      protection public
      15 lines of code
      2 parameters
      1 conditional paths
      uses function contains(StringRef) defined in clang::tidy::GlobList
module clang::tidy::test::TestCheck
   inherits from clang::tidy::ClangTidyCheck
   function check(const ast_matchers::MatchFinder::MatchResult &) in line 16
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses variable Result defined in USRFinder.cpp
      uses function diag(SourceLocation,StringRef,DiagnosticIDs::Level) defined in clang::tidy::ClangTidyCheck
   function registerMatchers(ast_matchers::MatchFinder *) in line 13
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
      uses variable Finder defined in ClangTidy.cpp
   function TestCheck(StringRef,ClangTidyContext *) in line 11
      protection public
      2 lines of code
      2 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/unittests/clang-tidy/ClangTidyOptionsTest.cpp
module ClangTidyOptionsTest.cpp
   function TEST(ParseLineFilter,EmptyFilter) in line 8
      protection public
      7 lines of code
      2 parameters
      1 conditional paths
      uses function parseLineFilter(StringRef,clang::tidy::ClangTidyGlobalOptions &) defined in ClangTidyOptions.cpp
      uses variable LineFilter defined in clang::tidy::ClangTidyGlobalOptions
   function TEST(ParseLineFilter,InvalidFilter) in line 16
      protection public
      14 lines of code
      2 parameters
      1 conditional paths
      uses function parseLineFilter(StringRef,clang::tidy::ClangTidyGlobalOptions &) defined in ClangTidyOptions.cpp
      uses variable LineFilter defined in clang::tidy::ClangTidyGlobalOptions
   function TEST(ParseLineFilter,ValidFilter) in line 31
      protection public
      24 lines of code
      2 parameters
      1 conditional paths
      uses function parseLineFilter(StringRef,clang::tidy::ClangTidyGlobalOptions &) defined in ClangTidyOptions.cpp
      uses variable u defined in negative-iterator.cpp
      uses variable LineFilter defined in clang::tidy::ClangTidyGlobalOptions
   function TEST(ParseConfiguration,ValidConfiguration) in line 56
      protection public
      12 lines of code
      2 parameters
      1 conditional paths
      uses function parseConfiguration(StringRef) defined in ClangTidyOptions.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/unittests/clang-tidy/ClangTidyTest.h
module ClangTidyTest.h
   macro definition EXPECT_NO_CHANGES in line 82
      protection public
   function runCheckOnCode(StringRef,std::vector< ClangTidyError > *,const Twine &,ArrayRef< std::string >,const ClangTidyOptions &) in line 46
      protection public
      35 lines of code
      5 parameters
      4 conditional paths
      uses variable Checks defined in clang::tidy::ClangTidyOptions
      uses variable Context defined in clang::tidy::test::TestClangTidyAction
      uses variable Check defined in clang::tidy::test::TestClangTidyAction
      uses variable Finder defined in clang::tidy::test::TestClangTidyAction
      uses function registerMatchers(ast_matchers::MatchFinder *) defined in clang::tidy::ClangTidyCheck
      uses function end() defined in std::vector
      uses variable Filename defined in IncludeOrderCheck.cpp
      uses variable Files defined in ClangTidy.cpp
      uses function TestClangTidyAction(ClangTidyCheck &,ast_matchers::MatchFinder &,ClangTidyContext &) defined in clang::tidy::test::TestClangTidyAction
      uses function finish() defined in clang::tidy::ClangTidyDiagnosticConsumer
      uses function getErrors() defined in clang::tidy::ClangTidyContext
module clang::tidy::test::TestClangTidyAction
   inherits from ASTFrontendAction
   function CreateASTConsumer(CompilerInstance &,StringRef) in line 32
      6 lines of code
      2 parameters
      1 conditional paths
      uses variable Context defined in clang::tidy::test::TestClangTidyAction
      uses function setSourceManager(SourceManager *) defined in clang::tidy::ClangTidyContext
      uses variable Check defined in clang::tidy::test::TestClangTidyAction
      uses function registerPPCallbacks(CompilerInstance &) defined in clang::tidy::ClangTidyCheck
      uses variable Finder defined in clang::tidy::test::TestClangTidyAction
   function TestClangTidyAction(ClangTidyCheck &,ast_matchers::MatchFinder &,ClangTidyContext &) in line 27
      protection public
      3 lines of code
      3 parameters
      1 conditional paths
   variable Check in line 39
   variable Context in line 41
   variable Finder in line 40
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/unittests/clang-tidy/GoogleModuleTest.cpp
module GoogleModuleTest.cpp
   function TEST(ExplicitConstructorCheckTest,SingleArgumentConstructorsOnly) in line 12
      protection public
      10 lines of code
      2 parameters
      1 conditional paths
      uses macro definition EXPECT_NO_CHANGES defined in ClangTidyTest.h
   function TEST(ExplicitConstructorCheckTest,Basic) in line 23
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function TEST(ExplicitConstructorCheckTest,DefaultParameters) in line 28
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
   function TEST(ExplicitConstructorCheckTest,OutOfLineDefinitions) in line 34
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
   function TEST(ExplicitConstructorCheckTest,RemoveExplicit) in line 40
      protection public
      9 lines of code
      2 parameters
      1 conditional paths
   function TEST(ExplicitConstructorCheckTest,RemoveExplicitWithMacros) in line 50
      protection public
      8 lines of code
      2 parameters
      1 conditional paths
   function TEST_F(GlobalNamesInHeadersCheckTest,UsingDeclarations) in line 84
      protection public
      9 lines of code
      2 parameters
      1 conditional paths
      uses function runCheckOnCode(StringRef,std::vector< ClangTidyError > *,const Twine &,ArrayRef< std::string >,const ClangTidyOptions &) defined in ClangTidyTest.h
   function TEST_F(GlobalNamesInHeadersCheckTest,UsingDirectives) in line 94
      protection public
      9 lines of code
      2 parameters
      1 conditional paths
      uses function runCheckOnCode(StringRef,std::vector< ClangTidyError > *,const Twine &,ArrayRef< std::string >,const ClangTidyOptions &) defined in ClangTidyTest.h
   function TEST_F(GlobalNamesInHeadersCheckTest,RegressionAnonymousNamespace) in line 104
      protection public
      3 lines of code
      2 parameters
      1 conditional paths
      uses function runCheckOnCode(StringRef,std::vector< ClangTidyError > *,const Twine &,ArrayRef< std::string >,const ClangTidyOptions &) defined in ClangTidyTest.h
module clang::tidy::test::GlobalNamesInHeadersCheckTest
   inherits from testing::Test
   function runCheckOnCode(const std::string &,const std::string &) in line 61
      21 lines of code
      2 parameters
      3 conditional paths
      uses variable Filename defined in IncludeOrderCheck.cpp
      uses macro definition assert defined in misc-assert-side-effect.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/unittests/clang-tidy/LLVMModuleTest.cpp
module LLVMModuleTest.cpp
   function runHeaderGuardCheck(StringRef,const Twine &,unsigned) in line 14
      protection public
      7 lines of code
      3 parameters
      1 conditional paths
      uses variable Result defined in USRFinder.cpp
      uses variable Filename defined in IncludeOrderCheck.cpp
      uses variable Name defined in PreprocessorTracker.cpp
      uses variable Context defined in ClangTidy.cpp
   function runHeaderGuardCheckWithEndif(StringRef,const Twine &,unsigned) in line 30
      protection public
      8 lines of code
      3 parameters
      1 conditional paths
      uses variable Result defined in USRFinder.cpp
      uses variable Filename defined in IncludeOrderCheck.cpp
   function TEST(LLVMHeaderGuardCheckTest,FixHeaderGuards) in line 39
      protection public
      146 lines of code
      2 parameters
      1 conditional paths
      uses function runHeaderGuardCheck(StringRef,const Twine &,unsigned) defined in LLVMModuleTest.cpp
      uses function runHeaderGuardCheckWithEndif(StringRef,const Twine &,unsigned) defined in LLVMModuleTest.cpp
module clang::tidy::test::@398::WithEndifComment
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/unittests/clang-tidy/MiscModuleTest.cpp
module MiscModuleTest.cpp
   function TEST(ArgumentCommentCheckTest,CorrectComments) in line 11
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
      uses macro definition EXPECT_NO_CHANGES defined in ClangTidyTest.h
   function TEST(ArgumentCommentCheckTest,ThisEditDistanceAboveThreshold) in line 18
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses macro definition EXPECT_NO_CHANGES defined in ClangTidyTest.h
   function TEST(ArgumentCommentCheckTest,OtherEditDistanceAboveThreshold) in line 23
      protection public
      8 lines of code
      2 parameters
      1 conditional paths
   function TEST(ArgumentCommentCheckTest,OtherEditDistanceBelowThreshold) in line 32
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses macro definition EXPECT_NO_CHANGES defined in ClangTidyTest.h
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/unittests/clang-tidy/ReadabilityModuleTest.cpp
module ReadabilityModuleTest.cpp
   function TEST(NamespaceCommentCheckTest,Basic) in line 13
      protection public
      9 lines of code
      2 parameters
      1 conditional paths
   function TEST(NamespaceCommentCheckTest,SingleLineNamespaces) in line 23
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
   function TEST(NamespaceCommentCheckTest,CheckExistingComments) in line 29
      protection public
      50 lines of code
      2 parameters
      1 conditional paths
   function TEST(NamespaceCommentCheckTest,FixWrongComments) in line 80
      protection public
      19 lines of code
      2 parameters
      1 conditional paths
   function TEST(BracesAroundStatementsCheck,IfWithComments) in line 100
      protection public
      36 lines of code
      2 parameters
      1 conditional paths
   function TEST(BracesAroundStatementsCheck,If) in line 137
      protection public
      100 lines of code
      2 parameters
      1 conditional paths
      uses macro definition EXPECT_NO_CHANGES defined in ClangTidyTest.h
   function TEST(BracesAroundStatementsCheck,IfElseWithShortStatements) in line 238
      protection public
      33 lines of code
      2 parameters
      1 conditional paths
      uses variable CheckOptions defined in clang::tidy::ClangTidyOptions
   function TEST(BracesAroundStatementsCheck,For) in line 272
      protection public
      34 lines of code
      2 parameters
      1 conditional paths
      uses macro definition EXPECT_NO_CHANGES defined in ClangTidyTest.h
   function TEST(BracesAroundStatementsCheck,ForRange) in line 307
      protection public
      24 lines of code
      2 parameters
      1 conditional paths
      uses macro definition EXPECT_NO_CHANGES defined in ClangTidyTest.h
   function TEST(BracesAroundStatementsCheck,DoWhile) in line 332
      protection public
      17 lines of code
      2 parameters
      1 conditional paths
      uses macro definition EXPECT_NO_CHANGES defined in ClangTidyTest.h
   function TEST(BracesAroundStatementsCheck,While) in line 350
      protection public
      63 lines of code
      2 parameters
      1 conditional paths
      uses macro definition EXPECT_NO_CHANGES defined in ClangTidyTest.h
   function TEST(BracesAroundStatementsCheck,Nested) in line 414
      protection public
      34 lines of code
      2 parameters
      1 conditional paths
   function TEST(BracesAroundStatementsCheck,Macros) in line 449
      protection public
      12 lines of code
      2 parameters
      1 conditional paths
      uses macro definition EXPECT_NO_CHANGES defined in ClangTidyTest.h
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/unittests/include/common/Utility.h
module Utility.h
   macro definition ASSERT_NO_ERROR in line 14
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/clang/clang-tools-extra-3.7.1.src/unittests/include/common/VirtualFileHelper.h
module clang::VirtualFileHelper
   function getNewSourceManager() in line 50
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
      uses variable Sources defined in clang::VirtualFileHelper
      uses function reset(T *) defined in std::unique_ptr
      uses variable Diagnostics defined in clang::VirtualFileHelper
      uses variable Files defined in clang::VirtualFileHelper
      uses function mapVirtualFiles(SourceManager &) defined in clang::VirtualFileHelper
   function mapFile(llvm::StringRef,llvm::StringRef) in line 43
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses variable FileName defined in clang::VirtualFileHelper::VirtualFile
      uses variable Code defined in clang::VirtualFileHelper::VirtualFile
      uses variable VirtualFiles defined in clang::VirtualFileHelper
   function mapVirtualFiles(SourceManager &) in line 57
      protection public
      12 lines of code
      1 parameters
      2 conditional paths
      uses variable VirtualFiles defined in clang::VirtualFileHelper
      uses variable SM defined in IncludeOrderCheck.cpp
   function VirtualFileHelper() in line 35
      protection public
      6 lines of code
      0 parameters
      1 conditional paths
   variable DiagnosticPrinter in line 73
   variable Diagnostics in line 72
   variable DiagOpts in line 71
   variable Files in line 74
   variable Sources in line 77
   variable VirtualFiles in line 76
module clang::VirtualFileHelper::VirtualFile
   variable Code in line 31
      protection public
   variable FileName in line 30
      protection public
