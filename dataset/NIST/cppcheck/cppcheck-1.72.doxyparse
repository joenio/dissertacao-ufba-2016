file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/addons/cert.py
module cert.py
   variable data in line 84
      protection public
   function reportError((null),(null),(null)) in line 16
      protection public
      5 lines of code
      3 parameters
      1 conditional paths
   function isUnpackedStruct((null)) in line 21
      protection public
      18 lines of code
      1 parameters
      1 conditional paths
   function isLocalUnpackedStruct((null)) in line 39
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses function isUnpackedStruct((null)) defined in cert.py
   function isBitwiseOp((null)) in line 45
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function isComparisonOp((null)) in line 49
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function exp42((null)) in line 55
      protection public
      21 lines of code
      1 parameters
      1 conditional paths
      uses function isLocalUnpackedStruct((null)) defined in cert.py
      uses function reportError((null),(null),(null)) defined in cert.py
   function exp46((null)) in line 76
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses function isBitwiseOp((null)) defined in cert.py
      uses function isComparisonOp((null)) defined in cert.py
      uses function reportError((null),(null),(null)) defined in cert.py
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/addons/cppcheckdata.py
module cppcheckdata.py
   function parsedump((null)) in line 506
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function astIsFloat((null)) in line 512
      protection public
      26 lines of code
      1 parameters
      1 conditional paths
module cppcheckdata::Token
   function getValue((null),(null)) in line 221
      protection public
      8 lines of code
      2 parameters
      1 conditional paths
      uses variable values defined in cppcheckdata::Token
   function setId((null),(null)) in line 208
      protection public
      11 lines of code
      2 parameters
      1 conditional paths
      uses variable scope defined in cppcheckdata::Token
      uses variable scopeId defined in cppcheckdata::Token
      uses variable link defined in cppcheckdata::Token
      uses variable linkId defined in cppcheckdata::Token
      uses variable variable defined in cppcheckdata::Token
      uses variable variableId defined in cppcheckdata::Token
      uses variable function defined in cppcheckdata::Token
      uses variable functionId defined in cppcheckdata::Token
      uses variable values defined in cppcheckdata::Token
      uses variable valuesId defined in cppcheckdata::Token
      uses variable typeScope defined in cppcheckdata::Token
      uses variable typeScopeId defined in cppcheckdata::Token
      uses variable astParent defined in cppcheckdata::Token
      uses variable astParentId defined in cppcheckdata::Token
      uses variable astOperand1 defined in cppcheckdata::Token
      uses variable astOperand1Id defined in cppcheckdata::Token
      uses variable astOperand2 defined in cppcheckdata::Token
      uses variable astOperand2Id defined in cppcheckdata::Token
   function __init__((null),(null)) in line 157
      protection public
      51 lines of code
      2 parameters
      1 conditional paths
      uses variable Id defined in cppcheckdata::Token
      uses variable str defined in cppcheckdata::Token
      uses variable next defined in cppcheckdata::Token
      uses variable previous defined in cppcheckdata::Token
      uses variable scopeId defined in cppcheckdata::Token
      uses variable scope defined in cppcheckdata::Token
   variable astOperand1 in line 134
      protection public
   variable astOperand1Id in line 119
      protection public
   variable astOperand2 in line 150
      protection public
   variable astOperand2Id in line 135
      protection public
   variable astParent in line 118
      protection public
   variable astParentId in line 116
      protection public
   variable file in line 153
      protection public
   variable function in line 90
      protection public
   variable functionId in line 87
      protection public
   variable Id in line 28
      protection public
   variable isArithmeticalOp in line 60
      protection public
   variable isArithmeticalOp in line 181
      protection public
   variable isAssignmentOp in line 62
      protection public
   variable isAssignmentOp in line 183
      protection public
   variable isChar in line 56
      protection public
   variable isChar in line 177
      protection public
   variable isComparisonOp in line 64
      protection public
   variable isComparisonOp in line 185
      protection public
   variable isFloat in line 50
      protection public
   variable isFloat in line 172
      protection public
   variable isInt in line 48
      protection public
   variable isInt in line 170
      protection public
   variable isLogicalOp in line 66
      protection public
   variable isLogicalOp in line 187
      protection public
   variable isName in line 44
      protection public
   variable isName in line 166
      protection public
   variable isNumber in line 46
      protection public
   variable isNumber in line 168
      protection public
   variable isOp in line 58
      protection public
   variable isOp in line 179
      protection public
   variable isString in line 52
      protection public
   variable isString in line 174
      protection public
   variable linenr in line 155
      protection public
   variable link in line 39
      protection public
   variable linkId in line 35
      protection public
   variable next in line 32
      protection public
   variable previous in line 34
      protection public
   variable scope in line 42
      protection public
   variable scopeId in line 40
      protection public
   variable str in line 30
      protection public
   variable strlen in line 54
      protection public
   variable typeScope in line 114
      protection public
   variable typeScopeId in line 112
      protection public
   variable values in line 110
      protection public
   variable valuesId in line 91
      protection public
   variable variable in line 86
      protection public
   variable variableId in line 69
      protection public
   variable varId in line 68
      protection public
module cppcheckdata::Scope
   function setId((null),(null)) in line 260
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses variable classStart defined in cppcheckdata::Scope
      uses variable classStartId defined in cppcheckdata::Scope
      uses variable classEnd defined in cppcheckdata::Scope
      uses variable classEndId defined in cppcheckdata::Scope
      uses variable nestedIn defined in cppcheckdata::Scope
      uses variable nestedInId defined in cppcheckdata::Scope
   function __init__((null),(null)) in line 249
      protection public
      11 lines of code
      2 parameters
      1 conditional paths
      uses variable Id defined in cppcheckdata::Token
      uses variable Id defined in cppcheckdata::Scope
      uses variable className defined in cppcheckdata::Scope
      uses variable classStartId defined in cppcheckdata::Scope
      uses variable classStart defined in cppcheckdata::Scope
      uses variable classEndId defined in cppcheckdata::Scope
      uses variable classEnd defined in cppcheckdata::Scope
   variable classEnd in line 241
      protection public
   variable classEndId in line 239
      protection public
   variable className in line 245
      protection public
   variable classStart in line 238
      protection public
   variable classStartId in line 235
      protection public
   variable Id in line 234
      protection public
   variable nestedIn in line 257
      protection public
   variable nestedInId in line 256
      protection public
   variable type in line 247
      protection public
module cppcheckdata::Function
   function setId((null),(null)) in line 287
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses variable argument defined in cppcheckdata::Function
      uses variable tokenDef defined in cppcheckdata::Function
      uses variable tokenDefId defined in cppcheckdata::Function
   function __init__((null),(null)) in line 278
      protection public
      9 lines of code
      2 parameters
      1 conditional paths
      uses variable Id defined in cppcheckdata::Token
      uses variable Id defined in cppcheckdata::Scope
      uses variable Id defined in cppcheckdata::Function
      uses variable tokenDefId defined in cppcheckdata::Function
      uses variable name defined in cppcheckdata::Function
      uses variable argument defined in cppcheckdata::Function
      uses variable argumentId defined in cppcheckdata::Function
   variable argument in line 272
      protection public
   variable argumentId in line 273
      protection public
   variable Id in line 271
      protection public
   variable name in line 276
      protection public
   variable tokenDef in line 274
      protection public
   variable tokenDefId in line 275
      protection public
module cppcheckdata::Variable
   function setId((null),(null)) in line 339
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses variable nameToken defined in cppcheckdata::Variable
      uses variable nameTokenId defined in cppcheckdata::Variable
      uses variable typeStartToken defined in cppcheckdata::Variable
      uses variable typeStartTokenId defined in cppcheckdata::Variable
      uses variable typeEndToken defined in cppcheckdata::Variable
      uses variable typeEndTokenId defined in cppcheckdata::Variable
   function __init__((null),(null)) in line 323
      protection public
      16 lines of code
      2 parameters
      1 conditional paths
      uses variable Id defined in cppcheckdata::Token
      uses variable Id defined in cppcheckdata::Scope
      uses variable Id defined in cppcheckdata::Function
      uses variable Id defined in cppcheckdata::Variable
      uses variable nameTokenId defined in cppcheckdata::Variable
      uses variable nameToken defined in cppcheckdata::Variable
      uses variable typeStartTokenId defined in cppcheckdata::Variable
      uses variable typeStartToken defined in cppcheckdata::Variable
      uses variable typeEndTokenId defined in cppcheckdata::Variable
      uses variable typeEndToken defined in cppcheckdata::Variable
   variable Id in line 298
      protection public
   variable isArgument in line 309
      protection public
   variable isArgument in line 331
      protection public
   variable isArray in line 311
      protection public
   variable isArray in line 332
      protection public
   variable isClass in line 313
      protection public
   variable isClass in line 333
      protection public
   variable isLocal in line 315
      protection public
   variable isLocal in line 334
      protection public
   variable isPointer in line 317
      protection public
   variable isPointer in line 335
      protection public
   variable isReference in line 319
      protection public
   variable isReference in line 336
      protection public
   variable isStatic in line 321
      protection public
   variable isStatic in line 337
      protection public
   variable nameToken in line 301
      protection public
   variable nameTokenId in line 299
      protection public
   variable typeEndToken in line 307
      protection public
   variable typeEndTokenId in line 305
      protection public
   variable typeStartToken in line 304
      protection public
   variable typeStartTokenId in line 302
      protection public
module cppcheckdata::ValueFlow
   function __init__((null),(null)) in line 376
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
      uses variable Id defined in cppcheckdata::Token
      uses variable Id defined in cppcheckdata::Scope
      uses variable Id defined in cppcheckdata::Function
      uses variable Id defined in cppcheckdata::Variable
      uses variable Id defined in cppcheckdata::ValueFlow
      uses variable values defined in cppcheckdata::Token
      uses variable values defined in cppcheckdata::ValueFlow
   variable Id in line 371
      protection public
   variable values in line 374
      protection public
module cppcheckdata::ValueFlow::Value
   function __init__((null),(null)) in line 362
      protection public
      10 lines of code
      2 parameters
      1 conditional paths
      uses variable intvalue defined in cppcheckdata::ValueFlow::Value
      uses variable tokvalue defined in cppcheckdata::ValueFlow::Value
      uses variable condition defined in cppcheckdata::ValueFlow::Value
   variable condition in line 360
      protection public
   variable intvalue in line 356
      protection public
   variable tokvalue in line 358
      protection public
module cppcheckdata::Configuration
   function __init__((null),(null)) in line 401
      protection public
      57 lines of code
      2 parameters
      1 conditional paths
   variable functions in line 395
      protection public
   variable functions in line 405
      protection public
   variable name in line 389
      protection public
   variable name in line 402
      protection public
   variable scopes in line 393
      protection public
   variable scopes in line 404
      protection public
   variable tokenlist in line 391
      protection public
   variable tokenlist in line 403
      protection public
   variable valueflow in line 399
      protection public
   variable valueflow in line 407
      protection public
   variable variables in line 397
      protection public
   variable variables in line 406
      protection public
module cppcheckdata::CppcheckData
   function __init__((null),(null)) in line 495
      protection public
      8 lines of code
      2 parameters
      1 conditional paths
   variable configurations in line 493
      protection public
   variable configurations in line 496
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/addons/findcasts.py
module findcasts.py
   variable messages in line 9
      protection public
   variable data in line 13
      protection public
   variable typetok in line 24
      protection public
   variable msg in line 36
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/addons/naming.py
module naming.py
   variable RE_VARNAME in line 14
      protection public
   variable RE_FUNCTIONNAME in line 15
      protection public
   variable data in line 31
      protection public
   variable res in line 37
      protection public
   function reportError((null),(null),(null)) in line 23
      protection public
      4 lines of code
      3 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/addons/threadsafety.py
module threadsafety.py
   variable data in line 23
      protection public
   function reportError((null),(null),(null)) in line 11
      protection public
      5 lines of code
      3 parameters
      1 conditional paths
   function checkstatic((null)) in line 16
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function reportError((null),(null),(null)) defined in threadsafety.py
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/cli/cmdlineparser.cpp
module cmdlineparser.cpp
   function AddFilesToList(const std::string &,std::vector< std::string > &) in line 42
      protection public
      20 lines of code
      2 parameters
      5 conditional paths
   function AddInclPathsToList(const std::string &,std::list< std::string > *) in line 63
      protection public
      20 lines of code
      2 parameters
      5 conditional paths
   function AddPathsToSet(const std::string &,std::set< std::string > *) in line 84
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
      uses function AddInclPathsToList(const std::string &,std::list< std::string > *) defined in cmdlineparser.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/cli/cmdlineparser.h
module CmdLineParser
   function ExitAfterPrinting() in line 85
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses variable _exitAfterPrint defined in CmdLineParser
   function GetIgnoredPaths() in line 92
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses variable _ignoredPaths defined in CmdLineParser
      uses function PrintHelp() defined in CmdLineParser
      uses function PrintMessage(const std::string &) defined in CmdLineParser
      uses variable message defined in triage-report.py
   function GetPathNames() in line 71
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses variable _pathnames defined in CmdLineParser
   function GetShowErrorMessages() in line 64
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses variable _showErrorMessages defined in CmdLineParser
   function GetShowHelp() in line 78
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses variable _showHelp defined in CmdLineParser
   function GetShowVersion() in line 57
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses variable _showVersion defined in CmdLineParser
   function ParseFromArgs(int,const char *const) in line 52
      protection public
      663 lines of code
      2 parameters
      135 conditional paths
      uses variable _showVersion defined in CmdLineParser
      uses variable _exitAfterPrint defined in CmdLineParser
      uses variable _settings defined in CmdLineParser
      uses variable debug defined in Settings
      uses variable debugwarnings defined in Settings
      uses variable debugnormal defined in Settings
      uses variable dump defined in Settings
      uses variable exceptionHandling defined in Settings
      uses variable inconclusive defined in Settings
      uses function PrintMessage(const std::string &) defined in CmdLineParser
      uses variable enforcedLang defined in Settings
      uses enumvalue C defined in Settings
      uses enumvalue CPP defined in Settings
      uses variable filename defined in extracttests.py
      uses function f(char) defined in test.cxx
      uses variable nofail defined in Settings
      uses function parseFile(std::istream &) defined in Suppressions
      uses variable message defined in triage-report.py
      uses variable count defined in extracttests.py
      uses variable nomsg defined in Settings
      uses function addSuppressionLine(const std::string &) defined in Suppressions
      uses variable inlineSuppressions defined in Settings
      uses variable verbose defined in Settings
      uses variable force defined in Settings
      uses variable relativePaths defined in Settings
      uses variable basePaths defined in Settings
      uses variable xml defined in Settings
      uses variable xml_version defined in Settings
      uses variable quiet defined in Settings
      uses function append(const std::string &) defined in Settings
      uses variable checkConfiguration defined in Settings
      uses variable checkLibrary defined in Settings
      uses function addEnabled(const std::string &) defined in Settings
      uses function isEnabled(T &&) defined in Settings
      uses variable exitCode defined in Settings
      uses variable userDefines defined in Settings
      uses variable userUndefs defined in Settings
      uses variable preprocessOnly defined in Settings
      uses variable path defined in daca2-report.py
      uses variable includePaths defined in Settings
      uses variable userIncludes defined in Settings
      uses variable configExcludePaths defined in Settings
      uses variable _pathnames defined in CmdLineParser
      uses variable _ignoredPaths defined in CmdLineParser
      uses variable library defined in Settings
      uses variable reportProgress defined in Settings
      uses variable standards defined in Settings
      uses variable posix defined in Standards
      uses variable c defined in Standards
      uses enumvalue C89 defined in Standards
      uses enumvalue C99 defined in Standards
      uses enumvalue C11 defined in Standards
      uses variable cpp defined in Standards
      uses enumvalue CPP03 defined in Standards
      uses enumvalue CPP11 defined in Standards
      uses variable outputFormat defined in Settings
      uses variable jobs defined in Settings
      uses variable loadAverage defined in Settings
      uses variable _showErrorMessages defined in CmdLineParser
      uses variable name defined in setup.py
      uses variable showtime defined in Settings
      uses enumvalue SHOWTIME_FILE defined in timer.h
      uses enumvalue SHOWTIME_SUMMARY defined in timer.h
      uses enumvalue SHOWTIME_TOP5 defined in timer.h
      uses enumvalue SHOWTIME_NONE defined in timer.h
      uses variable pattern defined in Settings::Rule
      uses variable rules defined in Settings
      uses function LoadFile(const char *) defined in tinyxml2::XMLDocument
      uses enumvalue XML_NO_ERROR defined in tinyxml2.h
      uses function FirstChildElement(const char *) defined in tinyxml2::XMLNode
      uses function Value() defined in tinyxml2::XMLNode
      uses function NextSiblingElement(const char *) defined in tinyxml2::XMLNode
      uses variable tokenlist defined in Settings::Rule
      uses function GetText() defined in tinyxml2::XMLElement
      uses variable severity defined in Settings::Rule
      uses variable id defined in Settings::Rule
      uses variable summary defined in Settings::Rule
      uses function platform(PlatformType) defined in Settings
      uses enumvalue Win32A defined in Settings
      uses enumvalue Win32W defined in Settings
      uses enumvalue Win64 defined in Settings
      uses enumvalue Unix32 defined in Settings
      uses enumvalue Unix64 defined in Settings
      uses enumvalue Unspecified defined in Settings
      uses function platformFile(const std::string &) defined in Settings
      uses variable maxConfigs defined in Settings
      uses variable _showHelp defined in CmdLineParser
      uses function PrintHelp() defined in CmdLineParser
   function PrintHelp() in line 101
      212 lines of code
      0 parameters
      1 conditional paths
   function PrintMessage(const std::string &) in line 106
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable message defined in triage-report.py
   function PrintMessage(const char *) in line 107
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable message defined in triage-report.py
   function CmdLineParser(Settings *) in line 46
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
   variable _exitAfterPrint in line 116
   variable _ignoredPaths in line 111
   variable _pathnames in line 110
   variable _settings in line 112
   variable _showErrorMessages in line 115
   variable _showHelp in line 113
   variable _showVersion in line 114
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/cli/cppcheckexecutor.cpp
module cppcheckexecutor.cpp
   function GetArrayLength(const ) in line 195
      protection public
      4 lines of code
      1 parameters
      76 conditional paths
      uses variable output defined in redirect.h
      uses variable a defined in daca2-report.py
      uses variable result defined in triage-report.py
      uses variable code defined in extracttests.py
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/cli/cppcheckexecutor.h
module CppCheckExecutor
   inherits from ErrorLogger
   function check(int,const char *const) in line 62
      protection public
      23 lines of code
      2 parameters
      4 conditional paths
      uses variable missingIncludeFlag defined in Preprocessor
      uses variable missingSystemIncludeFlag defined in Preprocessor
      uses function settings() defined in CppCheck
      uses variable _settings defined in CppCheckExecutor
      uses function parseFromArgs(CppCheck *,int,const char *const) defined in CppCheckExecutor
      uses function terminated() defined in Settings
      uses variable exceptionHandling defined in Settings
      uses function check_wrapper(CppCheck &,int,const char *const) defined in CppCheckExecutor
      uses function check_internal(CppCheck &,int,const char *const) defined in CppCheckExecutor
   function check_internal(CppCheck &,int,const char *const) in line 150
      121 lines of code
      3 parameters
      22 conditional paths
      uses function settings() defined in CppCheck
      uses variable _settings defined in CppCheckExecutor
      uses function tryLoadLibrary(Library &,const char *,const char *) defined in CppCheckExecutor
      uses variable library defined in Settings
      uses variable standards defined in Settings
      uses variable posix defined in Standards
      uses function isWindowsPlatform() defined in Settings
      uses variable msg defined in findcasts.py
      uses enumvalue information defined in Severity
      uses function reportErr(const ErrorLogger::ErrorMessage &) defined in CppCheckExecutor
      uses variable reportProgress defined in Settings
      uses variable time1 defined in CppCheckExecutor
      uses variable xml defined in Settings
      uses variable xml_version defined in Settings
      uses variable jobs defined in Settings
      uses variable jointSuppressionReport defined in Settings
      uses variable _files defined in CppCheckExecutor
      uses function markupFile(const std::string &) defined in Library
      uses function processMarkupAfterCode(const std::string &) defined in Library
      uses function check(const std::string &) defined in CppCheck
      uses variable quiet defined in Settings
      uses function reportStatus(std::size_t,std::size_t,std::size_t,std::size_t) defined in CppCheckExecutor
      uses function analyseWholeProgram() defined in CppCheck
      uses function check() defined in ThreadExecutor
      uses function isEnabled(T &&) defined in Settings
      uses variable checkConfiguration defined in Settings
      uses function unusedFunctionCheckIsEnabled() defined in CppCheck
      uses function reportUnmatchedSuppressions(const std::list< Suppressions::SuppressionEntry > &) defined in ErrorLogger
      uses variable nomsg defined in Settings
      uses function getUnmatchedLocalSuppressions(const std::string &,const bool) defined in Suppressions
      uses function getUnmatchedGlobalSuppressions(const bool) defined in Suppressions
      uses function tooManyConfigsError(const std::string &,const std::size_t) defined in CppCheck
      uses variable missingIncludeFlag defined in Preprocessor
      uses variable missingSystemIncludeFlag defined in Preprocessor
      uses function reportInfo(const ErrorLogger::ErrorMessage &) defined in CppCheckExecutor
      uses variable exitCode defined in Settings
   function check_wrapper(CppCheck &,int,const char *const) in line 136
      38 lines of code
      3 parameters
      2 conditional paths
      uses function check_internal(CppCheck &,int,const char *const) defined in CppCheckExecutor
   function getExceptionOutput() in line 99
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable exceptionOutput defined in CppCheckExecutor
   function parseFromArgs(CppCheck *,int,const char *const) in line 124
      86 lines of code
      3 parameters
      16 conditional paths
      uses function settings() defined in CppCheck
      uses function ParseFromArgs(int,const char *const) defined in CmdLineParser
      uses function GetShowVersion() defined in CmdLineParser
      uses function GetShowErrorMessages() defined in CmdLineParser
      uses variable errorlist defined in CppCheckExecutor
      uses variable xml_version defined in Settings
      uses function getErrorMessages() defined in CppCheck
      uses function ExitAfterPrinting() defined in CmdLineParser
      uses function terminate() defined in Settings
      uses variable includePaths defined in Settings
      uses variable path defined in daca2-report.py
      uses function isEnabled(T &&) defined in Settings
      uses function GetIgnoredPaths() defined in CmdLineParser
      uses function GetPathNames() defined in CmdLineParser
      uses variable _files defined in CppCheckExecutor
      uses variable _settings defined in CppCheckExecutor
      uses variable library defined in Settings
      uses function markupExtensions() defined in Library
   function reportErr(const ErrorLogger::ErrorMessage &) in line 73
      protection public
      10 lines of code
      1 parameters
      3 conditional paths
      uses variable errorlist defined in CppCheckExecutor
      uses function reportOut(const std::string &) defined in CppCheckExecutor
      uses variable msg defined in findcasts.py
      uses variable _settings defined in CppCheckExecutor
      uses variable xml_version defined in Settings
      uses variable xml defined in Settings
      uses variable verbose defined in Settings
      uses variable outputFormat defined in Settings
   function reportErr(const std::string &) in line 113
      9 lines of code
      1 parameters
      2 conditional paths
      uses variable _errorList defined in CppCheckExecutor
   function reportInfo(const ErrorLogger::ErrorMessage &) in line 80
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function reportErr(const ErrorLogger::ErrorMessage &) defined in CppCheckExecutor
      uses variable msg defined in findcasts.py
   function reportOut(const std::string &) in line 70
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function reportProgress(const std::string &,const char,const std::size_t) in line 75
      protection public
      22 lines of code
      3 parameters
      3 conditional paths
      uses variable filename defined in extracttests.py
      uses variable time1 defined in CppCheckExecutor
      uses function reportOut(const std::string &) defined in CppCheckExecutor
   function reportStatus(std::size_t,std::size_t,std::size_t,std::size_t) in line 90
      protection public
      11 lines of code
      4 parameters
      2 conditional paths
   function setExceptionOutput(FILE *) in line 95
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable exceptionOutput defined in CppCheckExecutor
   function tryLoadLibrary(Library &,const char *,const char *) in line 105
      protection public
      43 lines of code
      3 parameters
      13 conditional paths
      uses function load(const char,const char) defined in Library
      uses variable filename defined in extracttests.py
      uses variable errorcode defined in Library::Error
      uses enumvalue UNKNOWN_ELEMENT defined in Library
      uses variable reason defined in Library::Error
      uses enumvalue OK defined in Library
      uses enumvalue FILE_NOT_FOUND defined in Library
      uses enumvalue BAD_XML defined in Library
      uses enumvalue MISSING_ATTRIBUTE defined in Library
      uses enumvalue BAD_ATTRIBUTE_VALUE defined in Library
      uses enumvalue UNSUPPORTED_FORMAT defined in Library
      uses enumvalue DUPLICATE_PLATFORM_TYPE defined in Library
      uses enumvalue PLATFORM_TYPE_REDEFINED defined in Library
   function CppCheckExecutor() in line 44
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function ~CppCheckExecutor() in line 49
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   variable _errorList in line 160
   variable _files in line 165
   variable _settings in line 155
   variable errorlist in line 180
   variable exceptionOutput in line 175
   variable time1 in line 170
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/cli/filelister.cpp
module filelister.cpp
   function addFiles2(std::map< std::string, std::size_t > &,const std::string &,const std::set< std::string > &,bool,const PathMatch &) in line 172
      protection public
      44 lines of code
      5 parameters
      9 conditional paths
      uses variable path defined in daca2-report.py
      uses function Match(const std::string &) defined in PathMatch
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/cli/filelister.h
module FileLister
   function addFiles(std::map< std::string, std::size_t > &,const std::string &,const std::set< std::string > &,bool,const PathMatch &) in line 71
      protection public
      10 lines of code
      5 parameters
      3 conditional paths
      uses variable path defined in daca2-report.py
   function fileExists(const std::string &) in line 83
      protection public
      8 lines of code
      1 parameters
      2 conditional paths
      uses variable path defined in daca2-report.py
   function isDirectory(const std::string &) in line 77
      protection public
      8 lines of code
      1 parameters
      2 conditional paths
      uses variable path defined in daca2-report.py
   function recursiveAddFiles(std::map< std::string, std::size_t > &,const std::string &,const PathMatch &) in line 43
      protection public
      4 lines of code
      3 parameters
      1 conditional paths
      uses variable path defined in daca2-report.py
      uses function addFiles(std::map< std::string, std::size_t > &,const std::string &,const std::set< std::string > &,bool,const PathMatch &) defined in FileLister
      uses function isDirectory(const std::string &) defined in FileLister
      uses function fileExists(const std::string &) defined in FileLister
   function recursiveAddFiles(std::map< std::string, std::size_t > &,const std::string &,const std::set< std::string > &,const PathMatch &) in line 58
      protection public
      4 lines of code
      4 parameters
      1 conditional paths
      uses function addFiles(std::map< std::string, std::size_t > &,const std::string &,const std::set< std::string > &,bool,const PathMatch &) defined in FileLister
      uses variable path defined in daca2-report.py
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/cli/main.cpp
module cli/main.cpp
   function main(int,char *) in line 120
      protection public
      28 lines of code
      2 parameters
      2 conditional paths
      uses function check(int,const char *const) defined in CppCheckExecutor
      uses variable e defined in extracttests.py
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/gui/main.cpp
module gui/main.cpp
   function ShowUsage() in line 38
      protection public
      24 lines of code
      0 parameters
      1 conditional paths
   function ShowVersion() in line 39
      protection public
      16 lines of code
      0 parameters
      2 conditional paths
   function CheckArgs(const QStringList &) in line 40
      protection public
      12 lines of code
      1 parameters
      3 conditional paths
      uses function ShowUsage() defined in gui/main.cpp
      uses function ShowVersion() defined in gui/main.cpp
   function main(int,char *) in line 42
      protection public
      40 lines of code
      2 parameters
      4 conditional paths
      uses function SetLanguage(const QString &) defined in TranslationHandler
      uses macro definition SETTINGS_LANGUAGE defined in common.h
      uses function SuggestLanguage() defined in TranslationHandler
      uses function CheckArgs(const QStringList &) defined in gui/main.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/cli/pathmatch.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/cli/pathmatch.h
module PathMatch
   function Match(const std::string &) in line 47
      protection public
      43 lines of code
      1 parameters
      11 conditional paths
      uses variable path defined in daca2-report.py
      uses variable _masks defined in PathMatch
      uses variable _caseSensitive defined in PathMatch
      uses function RemoveFilename(const std::string &) defined in PathMatch
   function RemoveFilename(const std::string &) in line 56
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable path defined in daca2-report.py
   function PathMatch(const std::vector< std::string > &,bool) in line 40
      protection public
      7 lines of code
      2 parameters
      3 conditional paths
      uses variable _caseSensitive defined in PathMatch
      uses variable _masks defined in PathMatch
   variable _caseSensitive in line 60
   variable _masks in line 59
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/cli/threadexecutor.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/cli/threadexecutor.h
module ThreadExecutor
   inherits from ErrorLogger
   function addFileContent(const std::string &,const std::string &) in line 60
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function check() in line 47
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function isEnabled() in line 139
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses function ThreadExecutor(const std::map< std::string, std::size_t > &,Settings &,ErrorLogger &) defined in ThreadExecutor
      uses function operator=(const ThreadExecutor &) defined in ThreadExecutor
   function operator=(const ThreadExecutor &) in line 149
      1 lines of code
      1 parameters
      1 conditional paths
   function reportErr(const ErrorLogger::ErrorMessage &) in line 50
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function reportInfo(const ErrorLogger::ErrorMessage &) in line 51
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function reportOut(const std::string &) in line 49
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function ThreadExecutor(const std::map< std::string, std::size_t > &,Settings &,ErrorLogger &) in line 45
      protection public
      12 lines of code
      3 parameters
      1 conditional paths
   function ~ThreadExecutor() in line 46
      protection public
      4 lines of code
      0 parameters
      57 conditional paths
      uses function addFileContent(const std::string &,const std::string &) defined in ThreadExecutor
      uses variable path defined in daca2-report.py
      uses variable result defined in triage-report.py
      uses variable _errorLogger defined in ThreadExecutor
      uses function reportOut(const std::string &) defined in ErrorLogger
      uses variable msg defined in findcasts.py
      uses variable line defined in triage-report.py
      uses variable _settings defined in ThreadExecutor
      uses variable nomsg defined in Settings
      uses function isSuppressed(const std::string &,const std::string &,unsigned int) defined in Suppressions
      uses variable verbose defined in Settings
      uses function reportErr(const ErrorLogger::ErrorMessage &) defined in ErrorLogger
      uses function reportInfo(const ErrorLogger::ErrorMessage &) defined in ErrorLogger
      uses variable loadAverage defined in Settings
      uses function check() defined in ThreadExecutor
      uses variable _fileCount defined in ThreadExecutor
      uses variable _files defined in ThreadExecutor
      uses variable jobs defined in Settings
      uses function settings() defined in CppCheck
      uses function check(const std::string &) defined in CppCheck
      uses variable name defined in setup.py
      uses variable quiet defined in Settings
      uses enumvalue error defined in Severity
      uses variable data defined in cert.py
      uses variable out defined in triage-report.py
      uses function reportOut(const std::string &) defined in ThreadExecutor
      uses function reportErr(const ErrorLogger::ErrorMessage &) defined in ThreadExecutor
      uses function reportInfo(const ErrorLogger::ErrorMessage &) defined in ThreadExecutor
      uses function reportError((null),(null),(null)) defined in cert.py
   function ThreadExecutor(const ThreadExecutor &) in line 146
      1 lines of code
      1 parameters
      1 conditional paths
   variable _errorLogger in line 65
   variable _fileCount in line 66
   variable _files in line 63
   variable _settings in line 64
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/democlient/democlient.cpp
module democlient.cpp
   function unencode(const char *,char *) in line 10
      protection public
      16 lines of code
      2 parameters
      5 conditional paths
      uses variable code defined in extracttests.py
   function main() in line 74
      protection public
      43 lines of code
      0 parameters
      6 conditional paths
      uses variable data defined in cert.py
      uses variable code defined in extracttests.py
      uses function unencode(const char *,char *) defined in democlient.cpp
      uses macro definition CPPCHECK_VERSION_STRING defined in version.h
      uses function run(const char) defined in CppcheckExecutor
module CppcheckExecutor
   inherits from ErrorLogger
   inherits from ErrorLogger
   function reportErr(const ErrorLogger::ErrorMessage &) in line 47
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses variable s defined in extracttests.py
      uses variable msg defined in findcasts.py
   function reportErr(const ErrorLogger::ErrorMessage &) in line 67
      protection public
      6 lines of code
      1 parameters
      2 conditional paths
      uses variable msg defined in findcasts.py
      uses function terminate() defined in CppCheck
   function reportOut(const std::string &) in line 46
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function reportOut(const std::string &) in line 66
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function reportProgress(const std::string &,const char,const unsigned int) in line 59
      protection public
      12 lines of code
      3 parameters
      2 conditional paths
      uses variable stoptime defined in CppcheckExecutor
      uses variable cppcheck defined in CppcheckExecutor
      uses function terminate() defined in CppCheck
   function reportProgress(const std::string &,const char,const std::size_t) in line 73
      protection public
      10 lines of code
      3 parameters
      3 conditional paths
      uses function terminate() defined in CppCheck
   function run(const char) in line 42
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
      uses variable cppcheck defined in CppcheckExecutor
      uses function check(const std::string &) defined in CppCheck
      uses variable code defined in extracttests.py
   function run(const char,unsigned int) in line 59
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
      uses variable maxtime defined in ReduceSettings
      uses function check(const std::string &) defined in CppCheck
      uses variable filename defined in ReduceSettings
   function CppcheckExecutor() in line 34
      protection public
      7 lines of code
      0 parameters
      1 conditional paths
      uses variable cppcheck defined in CppcheckExecutor
      uses function settings() defined in CppCheck
      uses function addEnabled(const std::string &) defined in Settings
      uses variable inconclusive defined in Settings
   function CppcheckExecutor(const ReduceSettings &) in line 47
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses variable hang defined in ReduceSettings
      uses variable linenr defined in ReduceSettings
      uses function settings() defined in CppCheck
   variable cppcheck in line 31
   variable foundLine in line 43
   variable pattern in line 42
   variable stoptime in line 30
   variable stopTime in line 44
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/externals/tinyxml/tinyxml2.cpp
module tinyxml2.cpp
   macro definition TIXML_SNPRINTF in line 92
      protection public
   macro definition TIXML_VSNPRINTF in line 93
      protection public
   macro definition TIXML_SSCANF in line 100
      protection public
   variable LINE_FEED in line 104
      protection public
   variable LF in line 105
      protection public
   variable CARRIAGE_RETURN in line 106
      protection public
   variable CR in line 107
      protection public
   variable SINGLE_QUOTE in line 108
      protection public
   variable DOUBLE_QUOTE in line 109
      protection public
   variable TIXML_UTF_LEAD_0 in line 115
      protection public
   variable TIXML_UTF_LEAD_1 in line 116
      protection public
   variable TIXML_UTF_LEAD_2 in line 117
      protection public
   variable NUM_ENTITIES in line 128
      protection public
   variable entities in line 129
      protection public
   function TIXML_VSCPRINTF(const char *,va_list) in line 94
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
      uses macro definition TIXMLASSERT defined in tinyxml2.h
   function callfopen(const char *,const char *) in line 1871
      protection public
      15 lines of code
      2 parameters
      2 conditional paths
      uses macro definition TIXMLASSERT defined in tinyxml2.h
module tinyxml2::Entity
   variable length in line 124
      protection public
   variable pattern in line 123
      protection public
   variable value in line 125
      protection public
module tinyxml2::LongFitsIntoSizeTMinusOne
   function Fits(unsigned long) in line 1927
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function Fits(unsigned) in line 1934
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/externals/tinyxml/tinyxml2.h
module tinyxml2.h
   macro definition TINYXML2_LIB in line 72
      protection public
   macro definition TIXMLASSERT in line 88
      protection public
   enumeration XMLError in line 486
      protection public
   enumeration Whitespace in line 1509
      protection public
   variable TIXML2_MAJOR_VERSION in line 95
      protection public
   variable TIXML2_MINOR_VERSION in line 96
      protection public
   variable TIXML2_PATCH_VERSION in line 97
      protection public
   enumvalue XML_SUCCESS in line 487
      protection public
   enumvalue XML_NO_ERROR in line 488
      protection public
   enumvalue XML_NO_ATTRIBUTE in line 489
      protection public
   enumvalue XML_WRONG_ATTRIBUTE_TYPE in line 490
      protection public
   enumvalue XML_ERROR_FILE_NOT_FOUND in line 491
      protection public
   enumvalue XML_ERROR_FILE_COULD_NOT_BE_OPENED in line 492
      protection public
   enumvalue XML_ERROR_FILE_READ_ERROR in line 493
      protection public
   enumvalue XML_ERROR_ELEMENT_MISMATCH in line 494
      protection public
   enumvalue XML_ERROR_PARSING_ELEMENT in line 495
      protection public
   enumvalue XML_ERROR_PARSING_ATTRIBUTE in line 496
      protection public
   enumvalue XML_ERROR_IDENTIFYING_TAG in line 497
      protection public
   enumvalue XML_ERROR_PARSING_TEXT in line 498
      protection public
   enumvalue XML_ERROR_PARSING_CDATA in line 499
      protection public
   enumvalue XML_ERROR_PARSING_COMMENT in line 500
      protection public
   enumvalue XML_ERROR_PARSING_DECLARATION in line 501
      protection public
   enumvalue XML_ERROR_PARSING_UNKNOWN in line 502
      protection public
   enumvalue XML_ERROR_EMPTY_DOCUMENT in line 503
      protection public
   enumvalue XML_ERROR_MISMATCHED_ELEMENT in line 504
      protection public
   enumvalue XML_ERROR_PARSING in line 505
      protection public
   enumvalue XML_CAN_NOT_CONVERT_TEXT in line 506
      protection public
   enumvalue XML_NO_TEXT_NODE in line 507
      protection public
   enumvalue XML_ERROR_COUNT in line 510
      protection public
   enumvalue PRESERVE_WHITESPACE in line 1510
      protection public
   enumvalue COLLAPSE_WHITESPACE in line 1512
      protection public
module tinyxml2::StrPair
   function CollapseWhitespace() in line 162
      27 lines of code
      0 parameters
      5 conditional paths
      uses macro definition TIXMLASSERT defined in tinyxml2.h
      uses function SkipWhiteSpace(const char *) defined in tinyxml2::XMLUtil
      uses function IsWhiteSpace(char) defined in tinyxml2::XMLUtil
   function Empty() in line 144
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses variable _start defined in tinyxml2::StrPair
      uses variable _end defined in tinyxml2::StrPair
   function GetStr() in line 142
      protection public
      97 lines of code
      0 parameters
      15 conditional paths
      uses macro definition TIXMLASSERT defined in tinyxml2.h
      uses function GetCharacterRef(const char *,char *,int *) defined in tinyxml2::XMLUtil
      uses variable pattern defined in tinyxml2::Entity
      uses variable length defined in tinyxml2::Entity
      uses variable value defined in tinyxml2::Entity
   function operator=(StrPair &) in line 174
      1 lines of code
      1 parameters
      1 conditional paths
   function ParseName(char *) in line 156
      protection public
      18 lines of code
      1 parameters
      4 conditional paths
      uses function IsNameStartChar(unsigned char) defined in tinyxml2::XMLUtil
      uses function IsNameChar(unsigned char) defined in tinyxml2::XMLUtil
   function ParseText(char *,const char *,int) in line 155
      protection public
      18 lines of code
      3 parameters
      3 conditional paths
      uses macro definition TIXMLASSERT defined in tinyxml2.h
      uses variable length defined in tinyxml2::Entity
   function Reset() in line 161
      9 lines of code
      0 parameters
      2 conditional paths
   function Set(char *,char *,int) in line 135
      protection public
      6 lines of code
      3 parameters
      1 conditional paths
      uses function Reset() defined in tinyxml2::StrPair
      uses variable _start defined in tinyxml2::StrPair
      uses variable _end defined in tinyxml2::StrPair
      uses variable _flags defined in tinyxml2::StrPair
      uses enumvalue NEEDS_FLUSH defined in tinyxml2::StrPair
      uses function GetStr() defined in tinyxml2::StrPair
   function SetInternedStr(const char *) in line 148
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function Reset() defined in tinyxml2::StrPair
      uses variable _start defined in tinyxml2::StrPair
      uses function SetStr(const char *,int) defined in tinyxml2::StrPair
      uses function ParseText(char *,const char *,int) defined in tinyxml2::StrPair
      uses function ParseName(char *) defined in tinyxml2::StrPair
      uses function TransferTo(StrPair *) defined in tinyxml2::StrPair
      uses function CollapseWhitespace() defined in tinyxml2::StrPair
   function SetStr(const char *,int) in line 153
      protection public
      11 lines of code
      2 parameters
      1 conditional paths
      uses macro definition TIXMLASSERT defined in tinyxml2.h
   function TransferTo(StrPair *) in line 158
      protection public
      22 lines of code
      1 parameters
      2 conditional paths
      uses macro definition TIXMLASSERT defined in tinyxml2.h
      uses variable _flags defined in tinyxml2::StrPair
      uses variable _start defined in tinyxml2::StrPair
      uses variable _end defined in tinyxml2::StrPair
      uses function Reset() defined in tinyxml2::StrPair
   function StrPair() in line 132
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
      uses function ~StrPair() defined in tinyxml2::StrPair
   function ~StrPair() in line 133
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function StrPair(const StrPair &) in line 173
      1 lines of code
      1 parameters
      1 conditional paths
   variable _end in line 171
   variable _flags in line 169
   variable _start in line 170
module tinyxml2::DynArray
   function Capacity() in line 252
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function Clear() in line 199
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function Empty() in line 228
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function EnsureCapacity(int) in line 271
      14 lines of code
      1 parameters
      1 conditional paths
   function Mem() in line 257
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function Mem() in line 262
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function operator=(const DynArray &) in line 269
      1 lines of code
      1 parameters
      1 conditional paths
   function operator[](int) in line 232
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function operator[](int) in line 237
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function PeekTop() in line 242
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function Pop() in line 218
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function PopArr(int) in line 223
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function Push(T) in line 203
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
   function PushArr(int) in line 209
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
   function Size() in line 247
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function DynArray() in line 187
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
   function ~DynArray() in line 193
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
   function DynArray(const DynArray &) in line 268
      1 lines of code
      1 parameters
      1 conditional paths
   variable _allocated in line 288
   variable _mem in line 286
   variable _pool in line 287
   variable _size in line 289
module tinyxml2::MemPool
   abstract class
   function Alloc() in line 304
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function Clear() in line 307
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function Free(void *) in line 305
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ItemSize() in line 303
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function SetTracked() in line 306
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function MemPool() in line 300
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function ~MemPool() in line 301
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
module tinyxml2::MemPoolT
   inherits from tinyxml2::MemPool
   function Alloc() in line 343
      protection public
      23 lines of code
      0 parameters
      1 conditional paths
   function Clear() in line 323
      protection public
      12 lines of code
      0 parameters
      1 conditional paths
   function CurrentAllocs() in line 339
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function Free(void *) in line 367
      protection public
      12 lines of code
      1 parameters
      1 conditional paths
   function ItemSize() in line 336
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function operator=(const MemPoolT &) in line 405
      1 lines of code
      1 parameters
      1 conditional paths
   function SetTracked() in line 384
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function Trace(const char *) in line 379
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function Untracked() in line 388
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function MemPoolT() in line 318
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function ~MemPoolT() in line 319
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function MemPoolT(const MemPoolT &) in line 404
      1 lines of code
      1 parameters
      1 conditional paths
   variable _blockPtrs in line 414
   variable _currentAllocs in line 417
   variable _maxAllocs in line 419
   variable _nAllocs in line 418
   variable _nUntracked in line 420
   variable _root in line 415
module tinyxml2::MemPoolT::Chunk
   variable mem in line 409
      protection public
   variable next in line 408
      protection public
module tinyxml2::MemPoolT::Block
   variable chunk in line 412
      protection public
module tinyxml2::XMLVisitor
   function Visit(const XMLDeclaration &) in line 468
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function Visit(const XMLText &) in line 472
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function Visit(const XMLComment &) in line 476
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function Visit(const XMLUnknown &) in line 480
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function VisitEnter(const XMLDocument &) in line 450
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function VisitEnter(const XMLElement &,const XMLAttribute *) in line 459
      protection public
      3 lines of code
      2 parameters
      1 conditional paths
   function VisitExit(const XMLDocument &) in line 454
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function VisitExit(const XMLElement &) in line 463
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function ~XMLVisitor() in line 447
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
module tinyxml2::XMLUtil
   function ConvertUTF32ToUTF8(unsigned long,char *,int *) in line 570
      protection public
      47 lines of code
      3 parameters
      9 conditional paths
      uses variable length defined in tinyxml2::Entity
      uses variable output defined in redirect.h
      uses macro definition TIXMLASSERT defined in tinyxml2.h
   function GetCharacterRef(const char *,char *,int *) in line 569
      protection public
      94 lines of code
      3 parameters
      13 conditional paths
      uses variable length defined in tinyxml2::Entity
      uses macro definition TIXMLASSERT defined in tinyxml2.h
      uses variable value defined in tinyxml2::Entity
   function IsNameChar(unsigned char) in line 548
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function IsNameStartChar(unsigned char) in line 537
      protection public
      10 lines of code
      1 parameters
      3 conditional paths
   function IsUTF8Continuation(char) in line 562
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
      uses variable output defined in redirect.h
   function IsWhiteSpace(char) in line 533
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function ReadBOM(const char *,bool *) in line 566
      protection public
      16 lines of code
      2 parameters
      2 conditional paths
      uses macro definition TIXMLASSERT defined in tinyxml2.h
   function SkipWhiteSpace(const char *) in line 519
      protection public
      8 lines of code
      1 parameters
      2 conditional paths
      uses macro definition TIXMLASSERT defined in tinyxml2.h
   function SkipWhiteSpace(char *) in line 527
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function StringEqual(const char *,const char *,int) in line 555
      protection public
      6 lines of code
      3 parameters
      2 conditional paths
   function ToBool(const char *,bool *) in line 582
      protection public
      17 lines of code
      2 parameters
      4 conditional paths
      uses variable value defined in tinyxml2::Entity
   function ToDouble(const char *,double *) in line 584
      protection public
      7 lines of code
      2 parameters
      2 conditional paths
      uses macro definition TIXML_SSCANF defined in tinyxml2.cpp
      uses variable value defined in tinyxml2::Entity
   function ToFloat(const char *,float *) in line 583
      protection public
      7 lines of code
      2 parameters
      2 conditional paths
      uses macro definition TIXML_SSCANF defined in tinyxml2.cpp
      uses variable value defined in tinyxml2::Entity
   function ToInt(const char *,int *) in line 580
      protection public
      7 lines of code
      2 parameters
      2 conditional paths
      uses macro definition TIXML_SSCANF defined in tinyxml2.cpp
      uses variable value defined in tinyxml2::Entity
   function ToStr(int,char *,int) in line 573
      protection public
      4 lines of code
      3 parameters
      1 conditional paths
      uses macro definition TIXML_SNPRINTF defined in tinyxml2.cpp
   function ToStr(unsigned,char *,int) in line 574
      protection public
      4 lines of code
      3 parameters
      1 conditional paths
      uses macro definition TIXML_SNPRINTF defined in tinyxml2.cpp
   function ToStr(bool,char *,int) in line 575
      protection public
      4 lines of code
      3 parameters
      1 conditional paths
      uses macro definition TIXML_SNPRINTF defined in tinyxml2.cpp
   function ToStr(float,char *,int) in line 576
      protection public
      4 lines of code
      3 parameters
      1 conditional paths
      uses macro definition TIXML_SNPRINTF defined in tinyxml2.cpp
   function ToStr(double,char *,int) in line 577
      protection public
      4 lines of code
      3 parameters
      1 conditional paths
      uses macro definition TIXML_SNPRINTF defined in tinyxml2.cpp
   function ToUnsigned(const char *,unsigned *) in line 581
      protection public
      7 lines of code
      2 parameters
      2 conditional paths
      uses macro definition TIXML_SSCANF defined in tinyxml2.cpp
      uses variable value defined in tinyxml2::Entity
module tinyxml2::XMLNode
   abstract class
   function Accept(XMLVisitor *) in line 853
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function DeleteChild(XMLNode *) in line 810
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses macro definition TIXMLASSERT defined in tinyxml2.h
      uses variable _document defined in tinyxml2::XMLNode
      uses variable _parent defined in tinyxml2::XMLNode
      uses function DeleteNode(XMLNode *) defined in tinyxml2::XMLNode
   function DeleteChildren() in line 805
      protection public
      12 lines of code
      0 parameters
      2 conditional paths
      uses variable _firstChild defined in tinyxml2::XMLNode
      uses macro definition TIXMLASSERT defined in tinyxml2.h
      uses variable _lastChild defined in tinyxml2::XMLNode
      uses variable _document defined in tinyxml2::XMLNode
      uses function Unlink(XMLNode *) defined in tinyxml2::XMLNode
      uses function DeleteNode(XMLNode *) defined in tinyxml2::XMLNode
   function DeleteNode(XMLNode *) in line 874
      9 lines of code
      1 parameters
      2 conditional paths
      uses variable _memPool defined in tinyxml2::XMLNode
      uses function ~XMLNode() defined in tinyxml2::XMLNode
      uses function Free(void *) defined in tinyxml2::MemPool
   function FirstChild() in line 705
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function FirstChild() in line 709
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses variable name defined in setup.py
   function FirstChildElement(const char *) in line 716
      protection public
      12 lines of code
      1 parameters
      4 conditional paths
      uses variable _firstChild defined in tinyxml2::XMLNode
      uses variable _next defined in tinyxml2::XMLNode
      uses function ToElement() defined in tinyxml2::XMLElement
      uses variable name defined in setup.py
      uses function StringEqual(const char *,const char *,int) defined in tinyxml2::XMLUtil
      uses function Name() defined in tinyxml2::XMLElement
   function FirstChildElement(const char *) in line 718
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
      uses variable name defined in setup.py
   function GetDocument() in line 620
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses macro definition TIXMLASSERT defined in tinyxml2.h
   function GetDocument() in line 625
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses macro definition TIXMLASSERT defined in tinyxml2.h
   function InsertAfterChild(XMLNode *,XMLNode *) in line 800
      protection public
      27 lines of code
      2 parameters
      4 conditional paths
      uses macro definition TIXMLASSERT defined in tinyxml2.h
      uses variable _document defined in tinyxml2::XMLNode
      uses variable _parent defined in tinyxml2::XMLNode
      uses variable _next defined in tinyxml2::XMLNode
      uses function InsertEndChild(XMLNode *) defined in tinyxml2::XMLNode
      uses function InsertChildPreamble(XMLNode *) defined in tinyxml2::XMLNode
      uses variable _prev defined in tinyxml2::XMLNode
   function InsertChildPreamble(XMLNode *) in line 875
      10 lines of code
      1 parameters
      2 conditional paths
      uses macro definition TIXMLASSERT defined in tinyxml2.h
      uses variable _document defined in tinyxml2::XMLNode
      uses variable _parent defined in tinyxml2::XMLNode
      uses function Unlink(XMLNode *) defined in tinyxml2::XMLNode
      uses variable _memPool defined in tinyxml2::XMLNode
      uses function SetTracked() defined in tinyxml2::MemPool
   function InsertEndChild(XMLNode *) in line 779
      protection public
      28 lines of code
      1 parameters
      3 conditional paths
      uses macro definition TIXMLASSERT defined in tinyxml2.h
      uses variable _document defined in tinyxml2::XMLNode
      uses function InsertChildPreamble(XMLNode *) defined in tinyxml2::XMLNode
      uses variable _lastChild defined in tinyxml2::XMLNode
      uses variable _firstChild defined in tinyxml2::XMLNode
      uses variable _next defined in tinyxml2::XMLNode
      uses variable _prev defined in tinyxml2::XMLNode
      uses variable _parent defined in tinyxml2::XMLNode
   function InsertFirstChild(XMLNode *) in line 791
      protection public
      29 lines of code
      1 parameters
      3 conditional paths
      uses macro definition TIXMLASSERT defined in tinyxml2.h
      uses variable _document defined in tinyxml2::XMLNode
      uses function InsertChildPreamble(XMLNode *) defined in tinyxml2::XMLNode
      uses variable _firstChild defined in tinyxml2::XMLNode
      uses variable _lastChild defined in tinyxml2::XMLNode
      uses variable _prev defined in tinyxml2::XMLNode
      uses variable _next defined in tinyxml2::XMLNode
      uses variable _parent defined in tinyxml2::XMLNode
   function LastChild() in line 723
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function LastChild() in line 727
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses variable name defined in setup.py
   function LastChildElement(const char *) in line 734
      protection public
      12 lines of code
      1 parameters
      4 conditional paths
      uses variable _lastChild defined in tinyxml2::XMLNode
      uses variable _prev defined in tinyxml2::XMLNode
      uses function ToElement() defined in tinyxml2::XMLElement
      uses variable name defined in setup.py
      uses function StringEqual(const char *,const char *,int) defined in tinyxml2::XMLUtil
      uses function Name() defined in tinyxml2::XMLElement
   function LastChildElement(const char *) in line 736
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
      uses variable name defined in setup.py
   function LinkEndChild(XMLNode *) in line 781
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function NextSibling() in line 757
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function NextSibling() in line 761
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses variable name defined in setup.py
   function NextSiblingElement(const char *) in line 766
      protection public
      11 lines of code
      1 parameters
      3 conditional paths
      uses variable _next defined in tinyxml2::XMLNode
      uses function ToElement() defined in tinyxml2::XMLElement
      uses variable name defined in setup.py
      uses function StringEqual(const char *,const char *,int) defined in tinyxml2::XMLUtil
      uses function Name() defined in tinyxml2::XMLElement
   function NextSiblingElement(const char *) in line 768
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
      uses variable name defined in setup.py
   function NoChildren() in line 700
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function operator=(const XMLNode &) in line 878
      1 lines of code
      1 parameters
      1 conditional paths
   function Parent() in line 691
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function Parent() in line 695
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function ParseDeep(char *,StrPair *) in line 859
      86 lines of code
      2 parameters
      15 conditional paths
      uses variable _document defined in tinyxml2::XMLNode
      uses function Identify(char *,XMLNode **) defined in tinyxml2::XMLDocument
      uses function ParseDeep(char *,StrPair *) defined in tinyxml2::XMLNode
      uses function DeleteNode(XMLNode *) defined in tinyxml2::XMLNode
      uses function Error() defined in tinyxml2::XMLDocument
      uses function SetError(XMLError,const char *,const char *) defined in tinyxml2::XMLDocument
      uses enumvalue XML_ERROR_PARSING defined in tinyxml2.h
      uses function ToDeclaration() defined in tinyxml2::XMLNode
      uses function NoChildren() defined in tinyxml2::XMLNode
      uses enumvalue XML_ERROR_PARSING_DECLARATION defined in tinyxml2.h
      uses function Value() defined in tinyxml2::XMLNode
      uses function ToElement() defined in tinyxml2::XMLNode
      uses function ClosingType() defined in tinyxml2::XMLElement
      uses enumvalue CLOSING defined in tinyxml2::XMLElement
      uses variable _value defined in tinyxml2::XMLNode
      uses function TransferTo(StrPair *) defined in tinyxml2::StrPair
      uses variable _memPool defined in tinyxml2::XMLNode
      uses function SetTracked() defined in tinyxml2::MemPool
      uses function Empty() defined in tinyxml2::StrPair
      uses enumvalue OPEN defined in tinyxml2::XMLElement
      uses function StringEqual(const char *,const char *,int) defined in tinyxml2::XMLUtil
      uses function GetStr() defined in tinyxml2::StrPair
      uses function Name() defined in tinyxml2::XMLElement
      uses enumvalue XML_ERROR_MISMATCHED_ELEMENT defined in tinyxml2.h
      uses function InsertEndChild(XMLNode *) defined in tinyxml2::XMLNode
   function PreviousSibling() in line 741
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function PreviousSibling() in line 745
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses variable name defined in setup.py
   function PreviousSiblingElement(const char *) in line 750
      protection public
      11 lines of code
      1 parameters
      3 conditional paths
      uses variable _prev defined in tinyxml2::XMLNode
      uses function ToElement() defined in tinyxml2::XMLElement
      uses variable name defined in setup.py
      uses function StringEqual(const char *,const char *,int) defined in tinyxml2::XMLUtil
      uses function Name() defined in tinyxml2::XMLElement
   function PreviousSiblingElement(const char *) in line 752
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
      uses variable name defined in setup.py
   function SetValue(const char *,bool) in line 688
      protection public
      9 lines of code
      2 parameters
      2 conditional paths
      uses variable _value defined in tinyxml2::XMLNode
      uses function SetInternedStr(const char *) defined in tinyxml2::StrPair
      uses function SetStr(const char *,int) defined in tinyxml2::StrPair
   function ShallowClone(XMLDocument *) in line 821
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ShallowEqual(const XMLNode *) in line 829
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ToComment() in line 639
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function ToComment() in line 661
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function ToDeclaration() in line 647
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function ToDeclaration() in line 667
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function ToDocument() in line 643
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function ToDocument() in line 664
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function ToElement() in line 631
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function ToElement() in line 655
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function ToText() in line 635
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function ToText() in line 658
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function ToUnknown() in line 651
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function ToUnknown() in line 670
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function Unlink(XMLNode *) in line 873
      20 lines of code
      1 parameters
      5 conditional paths
      uses macro definition TIXMLASSERT defined in tinyxml2.h
      uses variable _document defined in tinyxml2::XMLNode
      uses variable _parent defined in tinyxml2::XMLNode
      uses variable _firstChild defined in tinyxml2::XMLNode
      uses variable _next defined in tinyxml2::XMLNode
      uses variable _lastChild defined in tinyxml2::XMLNode
      uses variable _prev defined in tinyxml2::XMLNode
   function Value() in line 683
      protection public
      7 lines of code
      0 parameters
      2 conditional paths
      uses function ToDocument() defined in tinyxml2::XMLNode
      uses variable _value defined in tinyxml2::XMLNode
      uses function GetStr() defined in tinyxml2::StrPair
   function XMLNode(XMLDocument *) in line 856
      8 lines of code
      1 parameters
      1 conditional paths
   function ~XMLNode() in line 857
      7 lines of code
      0 parameters
      2 conditional paths
      uses function DeleteChildren() defined in tinyxml2::XMLNode
      uses variable _parent defined in tinyxml2::XMLNode
      uses function Unlink(XMLNode *) defined in tinyxml2::XMLNode
   function XMLNode(const XMLNode &) in line 877
      1 lines of code
      1 parameters
      1 conditional paths
   variable _document in line 861
   variable _firstChild in line 865
   variable _lastChild in line 866
   variable _memPool in line 872
   variable _next in line 869
   variable _parent in line 862
   variable _prev in line 868
   variable _value in line 863
module tinyxml2::XMLText
   inherits from tinyxml2::XMLNode
   function Accept(XMLVisitor *) in line 899
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses macro definition TIXMLASSERT defined in tinyxml2.h
      uses function Visit(const XMLDeclaration &) defined in tinyxml2::XMLVisitor
   function CData() in line 913
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function operator=(const XMLText &) in line 930
      1 lines of code
      1 parameters
      1 conditional paths
   function ParseDeep(char *,StrPair *) in line 924
      26 lines of code
      2 parameters
      6 conditional paths
      uses variable _value defined in tinyxml2::XMLNode
      uses function ParseText(char *,const char *,int) defined in tinyxml2::StrPair
      uses enumvalue NEEDS_NEWLINE_NORMALIZATION defined in tinyxml2::StrPair
      uses variable _document defined in tinyxml2::XMLNode
      uses function SetError(XMLError,const char *,const char *) defined in tinyxml2::XMLDocument
      uses enumvalue XML_ERROR_PARSING_CDATA defined in tinyxml2.h
      uses function ProcessEntities() defined in tinyxml2::XMLDocument
      uses enumvalue TEXT_ELEMENT defined in tinyxml2::StrPair
      uses enumvalue TEXT_ELEMENT_LEAVE_ENTITIES defined in tinyxml2::StrPair
      uses function WhitespaceMode() defined in tinyxml2::XMLDocument
      uses enumvalue COLLAPSE_WHITESPACE defined in tinyxml2.h
      uses enumvalue NEEDS_WHITESPACE_COLLAPSING defined in tinyxml2::StrPair
      uses enumvalue XML_ERROR_PARSING_TEXT defined in tinyxml2.h
   function SetCData(bool) in line 909
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function ShallowClone(XMLDocument *) in line 917
      protection public
      9 lines of code
      1 parameters
      2 conditional paths
      uses variable _document defined in tinyxml2::XMLNode
      uses function NewText(const char *) defined in tinyxml2::XMLDocument
      uses function Value() defined in tinyxml2::XMLNode
      uses function SetCData(bool) defined in tinyxml2::XMLText
   function ShallowEqual(const XMLNode *) in line 918
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function ToText() defined in tinyxml2::XMLNode
      uses function StringEqual(const char *,const char *,int) defined in tinyxml2::XMLUtil
      uses function Value() defined in tinyxml2::XMLNode
   function ToText() in line 901
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function ToText() in line 904
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function XMLText(XMLDocument *) in line 921
      1 lines of code
      1 parameters
      1 conditional paths
   function ~XMLText() in line 922
      1 lines of code
      0 parameters
      1 conditional paths
   function XMLText(const XMLText &) in line 929
      1 lines of code
      1 parameters
      1 conditional paths
   variable _isCData in line 927
module tinyxml2::XMLComment
   inherits from tinyxml2::XMLNode
   function Accept(XMLVisitor *) in line 946
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses macro definition TIXMLASSERT defined in tinyxml2.h
      uses function Visit(const XMLDeclaration &) defined in tinyxml2::XMLVisitor
   function operator=(const XMLComment &) in line 959
      1 lines of code
      1 parameters
      1 conditional paths
   function ParseDeep(char *,StrPair *) in line 955
      10 lines of code
      2 parameters
      2 conditional paths
      uses variable _value defined in tinyxml2::XMLNode
      uses function ParseText(char *,const char *,int) defined in tinyxml2::StrPair
      uses enumvalue COMMENT defined in tinyxml2::StrPair
      uses variable _document defined in tinyxml2::XMLNode
      uses function SetError(XMLError,const char *,const char *) defined in tinyxml2::XMLDocument
      uses enumvalue XML_ERROR_PARSING_COMMENT defined in tinyxml2.h
   function ShallowClone(XMLDocument *) in line 948
      protection public
      8 lines of code
      1 parameters
      2 conditional paths
      uses variable _document defined in tinyxml2::XMLNode
      uses function NewComment(const char *) defined in tinyxml2::XMLDocument
      uses function Value() defined in tinyxml2::XMLNode
   function ShallowEqual(const XMLNode *) in line 949
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses macro definition TIXMLASSERT defined in tinyxml2.h
      uses function ToComment() defined in tinyxml2::XMLNode
      uses function StringEqual(const char *,const char *,int) defined in tinyxml2::XMLUtil
      uses function Value() defined in tinyxml2::XMLNode
   function ToComment() in line 939
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function ToComment() in line 942
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses function operator=(StrPair &) defined in tinyxml2::StrPair
   function XMLComment(XMLDocument *) in line 952
      3 lines of code
      1 parameters
      1 conditional paths
   function ~XMLComment() in line 953
      3 lines of code
      0 parameters
      1 conditional paths
   function XMLComment(const XMLComment &) in line 958
      1 lines of code
      1 parameters
      1 conditional paths
module tinyxml2::XMLDeclaration
   inherits from tinyxml2::XMLNode
   function Accept(XMLVisitor *) in line 985
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses macro definition TIXMLASSERT defined in tinyxml2.h
      uses function Visit(const XMLDeclaration &) defined in tinyxml2::XMLVisitor
   function operator=(const XMLDeclaration &) in line 998
      1 lines of code
      1 parameters
      1 conditional paths
   function ParseDeep(char *,StrPair *) in line 994
      10 lines of code
      2 parameters
      2 conditional paths
      uses variable _value defined in tinyxml2::XMLNode
      uses function ParseText(char *,const char *,int) defined in tinyxml2::StrPair
      uses enumvalue NEEDS_NEWLINE_NORMALIZATION defined in tinyxml2::StrPair
      uses variable _document defined in tinyxml2::XMLNode
      uses function SetError(XMLError,const char *,const char *) defined in tinyxml2::XMLDocument
      uses enumvalue XML_ERROR_PARSING_DECLARATION defined in tinyxml2.h
   function ShallowClone(XMLDocument *) in line 987
      protection public
      8 lines of code
      1 parameters
      2 conditional paths
      uses variable _document defined in tinyxml2::XMLNode
      uses function NewDeclaration(const char *) defined in tinyxml2::XMLDocument
      uses function Value() defined in tinyxml2::XMLNode
   function ShallowEqual(const XMLNode *) in line 988
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses macro definition TIXMLASSERT defined in tinyxml2.h
      uses function ToDeclaration() defined in tinyxml2::XMLNode
      uses function StringEqual(const char *,const char *,int) defined in tinyxml2::XMLUtil
      uses function Value() defined in tinyxml2::XMLNode
   function ToDeclaration() in line 978
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function ToDeclaration() in line 981
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses function operator=(StrPair &) defined in tinyxml2::StrPair
   function XMLDeclaration(XMLDocument *) in line 991
      3 lines of code
      1 parameters
      1 conditional paths
   function ~XMLDeclaration() in line 992
      4 lines of code
      0 parameters
      1 conditional paths
   function XMLDeclaration(const XMLDeclaration &) in line 997
      1 lines of code
      1 parameters
      1 conditional paths
module tinyxml2::XMLUnknown
   inherits from tinyxml2::XMLNode
   function Accept(XMLVisitor *) in line 1020
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses macro definition TIXMLASSERT defined in tinyxml2.h
      uses function Visit(const XMLDeclaration &) defined in tinyxml2::XMLVisitor
   function operator=(const XMLUnknown &) in line 1033
      1 lines of code
      1 parameters
      1 conditional paths
   function ParseDeep(char *,StrPair *) in line 1029
      11 lines of code
      2 parameters
      2 conditional paths
      uses variable _value defined in tinyxml2::XMLNode
      uses function ParseText(char *,const char *,int) defined in tinyxml2::StrPair
      uses enumvalue NEEDS_NEWLINE_NORMALIZATION defined in tinyxml2::StrPair
      uses variable _document defined in tinyxml2::XMLNode
      uses function SetError(XMLError,const char *,const char *) defined in tinyxml2::XMLDocument
      uses enumvalue XML_ERROR_PARSING_UNKNOWN defined in tinyxml2.h
   function ShallowClone(XMLDocument *) in line 1022
      protection public
      8 lines of code
      1 parameters
      2 conditional paths
      uses variable _document defined in tinyxml2::XMLNode
      uses function NewUnknown(const char *) defined in tinyxml2::XMLDocument
      uses function Value() defined in tinyxml2::XMLNode
   function ShallowEqual(const XMLNode *) in line 1023
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses macro definition TIXMLASSERT defined in tinyxml2.h
      uses function ToUnknown() defined in tinyxml2::XMLNode
      uses function StringEqual(const char *,const char *,int) defined in tinyxml2::XMLUtil
      uses function Value() defined in tinyxml2::XMLNode
   function ToUnknown() in line 1013
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function ToUnknown() in line 1016
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses function operator=(StrPair &) defined in tinyxml2::StrPair
   function XMLUnknown(XMLDocument *) in line 1026
      3 lines of code
      1 parameters
      1 conditional paths
   function ~XMLUnknown() in line 1027
      3 lines of code
      0 parameters
      1 conditional paths
   function XMLUnknown(const XMLUnknown &) in line 1032
      1 lines of code
      1 parameters
      1 conditional paths
module tinyxml2::XMLAttribute
   function BoolValue() in line 1075
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
   function DoubleValue() in line 1081
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
   function FloatValue() in line 1087
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
      uses function f(char) defined in test.cxx
   function IntValue() in line 1063
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
   function Name() in line 1049
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function Next() in line 1055
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function operator=(const XMLAttribute &) in line 1127
      1 lines of code
      1 parameters
      1 conditional paths
   function ParseDeep(char *,bool) in line 1130
      26 lines of code
      2 parameters
      4 conditional paths
      uses function SkipWhiteSpace(const char *) defined in tinyxml2::XMLUtil
      uses variable _value defined in tinyxml2::XMLNode
      uses function ParseText(char *,const char *,int) defined in tinyxml2::StrPair
      uses enumvalue ATTRIBUTE_VALUE defined in tinyxml2::StrPair
      uses enumvalue ATTRIBUTE_VALUE_LEAVE_ENTITIES defined in tinyxml2::StrPair
   function QueryBoolValue(bool *) in line 1101
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses function ToBool(const char *,bool *) defined in tinyxml2::XMLUtil
      uses function Value() defined in tinyxml2::XMLNode
      uses enumvalue XML_NO_ERROR defined in tinyxml2.h
      uses enumvalue XML_WRONG_ATTRIBUTE_TYPE defined in tinyxml2.h
   function QueryDoubleValue(double *) in line 1103
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses function ToDouble(const char *,double *) defined in tinyxml2::XMLUtil
      uses function Value() defined in tinyxml2::XMLNode
      uses enumvalue XML_NO_ERROR defined in tinyxml2.h
      uses enumvalue XML_WRONG_ATTRIBUTE_TYPE defined in tinyxml2.h
   function QueryFloatValue(float *) in line 1105
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses function ToFloat(const char *,float *) defined in tinyxml2::XMLUtil
      uses function Value() defined in tinyxml2::XMLNode
      uses enumvalue XML_NO_ERROR defined in tinyxml2.h
      uses enumvalue XML_WRONG_ATTRIBUTE_TYPE defined in tinyxml2.h
   function QueryIntValue(int *) in line 1097
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses function ToInt(const char *,int *) defined in tinyxml2::XMLUtil
      uses function Value() defined in tinyxml2::XMLNode
      uses enumvalue XML_NO_ERROR defined in tinyxml2.h
      uses enumvalue XML_WRONG_ATTRIBUTE_TYPE defined in tinyxml2.h
   function QueryUnsignedValue(unsigned int *) in line 1099
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses function ToUnsigned(const char *,unsigned *) defined in tinyxml2::XMLUtil
      uses function Value() defined in tinyxml2::XMLNode
      uses enumvalue XML_NO_ERROR defined in tinyxml2.h
      uses enumvalue XML_WRONG_ATTRIBUTE_TYPE defined in tinyxml2.h
   function SetAttribute(const char *) in line 1108
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable _value defined in tinyxml2::XMLNode
      uses function SetStr(const char *,int) defined in tinyxml2::StrPair
   function SetAttribute(int) in line 1110
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses function ToStr(int,char *,int) defined in tinyxml2::XMLUtil
      uses variable _value defined in tinyxml2::XMLNode
      uses function SetStr(const char *,int) defined in tinyxml2::StrPair
   function SetAttribute(unsigned) in line 1112
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses function ToStr(int,char *,int) defined in tinyxml2::XMLUtil
      uses variable _value defined in tinyxml2::XMLNode
      uses function SetStr(const char *,int) defined in tinyxml2::StrPair
   function SetAttribute(bool) in line 1114
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses function ToStr(int,char *,int) defined in tinyxml2::XMLUtil
      uses variable _value defined in tinyxml2::XMLNode
      uses function SetStr(const char *,int) defined in tinyxml2::StrPair
   function SetAttribute(double) in line 1116
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses function ToStr(int,char *,int) defined in tinyxml2::XMLUtil
      uses variable _value defined in tinyxml2::XMLNode
      uses function SetStr(const char *,int) defined in tinyxml2::StrPair
   function SetAttribute(float) in line 1118
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses function ToStr(int,char *,int) defined in tinyxml2::XMLUtil
      uses variable _value defined in tinyxml2::XMLNode
      uses function SetStr(const char *,int) defined in tinyxml2::StrPair
   function SetName(const char *) in line 1128
      4 lines of code
      1 parameters
      1 conditional paths
   function UnsignedValue() in line 1069
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
   function Value() in line 1052
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable _value defined in tinyxml2::XMLNode
      uses function GetStr() defined in tinyxml2::StrPair
   function XMLAttribute() in line 1123
      1 lines of code
      0 parameters
      1 conditional paths
   function ~XMLAttribute() in line 1124
      1 lines of code
      0 parameters
      1 conditional paths
      uses function operator=(StrPair &) defined in tinyxml2::StrPair
      uses variable name defined in setup.py
   function XMLAttribute(const XMLAttribute &) in line 1126
      1 lines of code
      1 parameters
      1 conditional paths
   variable _memPool in line 1135
   variable _name in line 1132
   variable _next in line 1134
   variable _value in line 1133
module tinyxml2::XMLElement
   inherits from tinyxml2::XMLNode
   function Accept(XMLVisitor *) in line 1163
      protection public
      12 lines of code
      1 parameters
      4 conditional paths
      uses macro definition TIXMLASSERT defined in tinyxml2.h
      uses function VisitEnter(const XMLDocument &) defined in tinyxml2::XMLVisitor
      uses variable _rootAttribute defined in tinyxml2::XMLElement
      uses function FirstChild() defined in tinyxml2::XMLNode
      uses function NextSibling() defined in tinyxml2::XMLNode
      uses function VisitExit(const XMLDocument &) defined in tinyxml2::XMLVisitor
      uses variable _errorNames defined in tinyxml2::XMLDocument
      uses enumvalue XML_ERROR_COUNT defined in tinyxml2.h
   function Attribute(const char *,const char *) in line 1188
      protection public
      11 lines of code
      2 parameters
      3 conditional paths
      uses variable a defined in daca2-report.py
      uses function FindAttribute(const char *) defined in tinyxml2::XMLElement
      uses variable name defined in setup.py
      uses function StringEqual(const char *,const char *,int) defined in tinyxml2::XMLUtil
   function BoolAttribute(const char *) in line 1207
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable name defined in setup.py
   function ClosingType() in line 1477
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses function operator=(StrPair &) defined in tinyxml2::StrPair
   function DeleteAttribute(const char *) in line 1350
      protection public
      17 lines of code
      1 parameters
      4 conditional paths
      uses variable a defined in daca2-report.py
      uses variable _rootAttribute defined in tinyxml2::XMLElement
      uses function StringEqual(const char *,const char *,int) defined in tinyxml2::XMLUtil
      uses variable name defined in setup.py
      uses variable _next defined in tinyxml2::XMLAttribute
   function DeleteAttribute(XMLAttribute *) in line 1498
      9 lines of code
      1 parameters
      2 conditional paths
      uses variable _memPool defined in tinyxml2::XMLAttribute
      uses function ~XMLAttribute() defined in tinyxml2::XMLAttribute
      uses function Free(void *) defined in tinyxml2::MemPool
   function DoubleAttribute(const char *) in line 1213
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable name defined in setup.py
   function FindAttribute(const char *) in line 1357
      protection public
      9 lines of code
      1 parameters
      3 conditional paths
      uses variable a defined in daca2-report.py
      uses variable _rootAttribute defined in tinyxml2::XMLElement
      uses function StringEqual(const char *,const char *,int) defined in tinyxml2::XMLUtil
      uses variable name defined in setup.py
   function FindAttribute(const char *) in line 1492
      3 lines of code
      1 parameters
      1 conditional paths
      uses variable name defined in setup.py
   function FindOrCreateAttribute(const char *) in line 1495
      26 lines of code
      1 parameters
      5 conditional paths
      uses variable _rootAttribute defined in tinyxml2::XMLElement
      uses variable _next defined in tinyxml2::XMLAttribute
      uses function StringEqual(const char *,const char *,int) defined in tinyxml2::XMLUtil
      uses variable name defined in setup.py
      uses macro definition TIXMLASSERT defined in tinyxml2.h
      uses variable _document defined in tinyxml2::XMLNode
      uses variable _attributePool defined in tinyxml2::XMLDocument
      uses variable _memPool defined in tinyxml2::XMLAttribute
      uses function SetName(const char *) defined in tinyxml2::XMLAttribute
   function FirstAttribute() in line 1353
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses variable name defined in setup.py
   function FloatAttribute(const char *) in line 1219
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function f(char) defined in test.cxx
      uses variable name defined in setup.py
   function GetText() in line 1387
      protection public
      7 lines of code
      0 parameters
      2 conditional paths
      uses function FirstChild() defined in tinyxml2::XMLNode
      uses function ToText() defined in tinyxml2::XMLNode
      uses function Value() defined in tinyxml2::XMLNode
   function IntAttribute(const char *) in line 1195
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable name defined in setup.py
   function Name() in line 1149
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function operator=(const XMLElement &) in line 1490
      1 lines of code
      1 parameters
      1 conditional paths
   function ParseAttributes(char *) in line 1497
      56 lines of code
      1 parameters
      8 conditional paths
      uses function SkipWhiteSpace(const char *) defined in tinyxml2::XMLUtil
      uses variable _document defined in tinyxml2::XMLNode
      uses function SetError(XMLError,const char *,const char *) defined in tinyxml2::XMLDocument
      uses enumvalue XML_ERROR_PARSING_ELEMENT defined in tinyxml2.h
      uses function Name() defined in tinyxml2::XMLElement
      uses function IsNameStartChar(unsigned char) defined in tinyxml2::XMLUtil
      uses macro definition TIXMLASSERT defined in tinyxml2.h
      uses variable _attributePool defined in tinyxml2::XMLDocument
      uses variable _memPool defined in tinyxml2::XMLAttribute
      uses function ProcessEntities() defined in tinyxml2::XMLDocument
      uses function Attribute(const char *,const char *) defined in tinyxml2::XMLElement
      uses function DeleteAttribute(const char *) defined in tinyxml2::XMLElement
      uses enumvalue XML_ERROR_PARSING_ATTRIBUTE defined in tinyxml2.h
      uses variable _next defined in tinyxml2::XMLAttribute
      uses variable _rootAttribute defined in tinyxml2::XMLElement
      uses variable _closingType defined in tinyxml2::XMLElement
      uses enumvalue CLOSED defined in tinyxml2::XMLElement
   function ParseDeep(char *,StrPair *) in line 1484
      26 lines of code
      2 parameters
      4 conditional paths
      uses function SkipWhiteSpace(const char *) defined in tinyxml2::XMLUtil
      uses variable _closingType defined in tinyxml2::XMLElement
      uses enumvalue CLOSING defined in tinyxml2::XMLElement
      uses variable _value defined in tinyxml2::XMLNode
      uses function ParseName(char *) defined in tinyxml2::StrPair
      uses function Empty() defined in tinyxml2::StrPair
      uses function ParseAttributes(char *) defined in tinyxml2::XMLElement
      uses function ParseDeep(char *,StrPair *) defined in tinyxml2::XMLNode
   function QueryAttribute(const char *,int *) in line 1296
      protection public
      3 lines of code
      2 parameters
      1 conditional paths
      uses variable name defined in setup.py
   function QueryAttribute(const char *,unsigned int *) in line 1300
      protection public
      3 lines of code
      2 parameters
      1 conditional paths
      uses variable name defined in setup.py
   function QueryAttribute(const char *,bool *) in line 1304
      protection public
      3 lines of code
      2 parameters
      1 conditional paths
      uses variable name defined in setup.py
   function QueryAttribute(const char *,double *) in line 1308
      protection public
      3 lines of code
      2 parameters
      1 conditional paths
      uses variable name defined in setup.py
   function QueryAttribute(const char *,float *) in line 1312
      protection public
      3 lines of code
      2 parameters
      1 conditional paths
      uses variable name defined in setup.py
   function QueryBoolAttribute(const char *,bool *) in line 1254
      protection public
      7 lines of code
      2 parameters
      2 conditional paths
      uses variable a defined in daca2-report.py
      uses variable name defined in setup.py
      uses enumvalue XML_NO_ATTRIBUTE defined in tinyxml2.h
   function QueryBoolText(bool *) in line 1465
      protection public
      11 lines of code
      1 parameters
      3 conditional paths
      uses function FirstChild() defined in tinyxml2::XMLNode
      uses function ToText() defined in tinyxml2::XMLNode
      uses function Value() defined in tinyxml2::XMLNode
      uses function ToBool(const char *,bool *) defined in tinyxml2::XMLUtil
      uses enumvalue XML_SUCCESS defined in tinyxml2.h
      uses enumvalue XML_CAN_NOT_CONVERT_TEXT defined in tinyxml2.h
      uses enumvalue XML_NO_TEXT_NODE defined in tinyxml2.h
   function QueryDoubleAttribute(const char *,double *) in line 1262
      protection public
      7 lines of code
      2 parameters
      2 conditional paths
      uses variable a defined in daca2-report.py
      uses variable name defined in setup.py
      uses enumvalue XML_NO_ATTRIBUTE defined in tinyxml2.h
   function QueryDoubleText(double *) in line 1467
      protection public
      11 lines of code
      1 parameters
      3 conditional paths
      uses function FirstChild() defined in tinyxml2::XMLNode
      uses function ToText() defined in tinyxml2::XMLNode
      uses function Value() defined in tinyxml2::XMLNode
      uses function ToDouble(const char *,double *) defined in tinyxml2::XMLUtil
      uses enumvalue XML_SUCCESS defined in tinyxml2.h
      uses enumvalue XML_CAN_NOT_CONVERT_TEXT defined in tinyxml2.h
      uses enumvalue XML_NO_TEXT_NODE defined in tinyxml2.h
   function QueryFloatAttribute(const char *,float *) in line 1270
      protection public
      7 lines of code
      2 parameters
      2 conditional paths
      uses variable a defined in daca2-report.py
      uses variable name defined in setup.py
      uses enumvalue XML_NO_ATTRIBUTE defined in tinyxml2.h
   function QueryFloatText(float *) in line 1469
      protection public
      11 lines of code
      1 parameters
      3 conditional paths
      uses function FirstChild() defined in tinyxml2::XMLNode
      uses function ToText() defined in tinyxml2::XMLNode
      uses function Value() defined in tinyxml2::XMLNode
      uses function ToFloat(const char *,float *) defined in tinyxml2::XMLUtil
      uses enumvalue XML_SUCCESS defined in tinyxml2.h
      uses enumvalue XML_CAN_NOT_CONVERT_TEXT defined in tinyxml2.h
      uses enumvalue XML_NO_TEXT_NODE defined in tinyxml2.h
   function QueryIntAttribute(const char *,int *) in line 1238
      protection public
      7 lines of code
      2 parameters
      2 conditional paths
      uses variable a defined in daca2-report.py
      uses variable name defined in setup.py
      uses enumvalue XML_NO_ATTRIBUTE defined in tinyxml2.h
   function QueryIntText(int *) in line 1461
      protection public
      11 lines of code
      1 parameters
      3 conditional paths
      uses function FirstChild() defined in tinyxml2::XMLNode
      uses function ToText() defined in tinyxml2::XMLNode
      uses function Value() defined in tinyxml2::XMLNode
      uses function ToInt(const char *,int *) defined in tinyxml2::XMLUtil
      uses enumvalue XML_SUCCESS defined in tinyxml2.h
      uses enumvalue XML_CAN_NOT_CONVERT_TEXT defined in tinyxml2.h
      uses enumvalue XML_NO_TEXT_NODE defined in tinyxml2.h
   function QueryUnsignedAttribute(const char *,unsigned int *) in line 1246
      protection public
      7 lines of code
      2 parameters
      2 conditional paths
      uses variable a defined in daca2-report.py
      uses variable name defined in setup.py
      uses enumvalue XML_NO_ATTRIBUTE defined in tinyxml2.h
   function QueryUnsignedText(unsigned *) in line 1463
      protection public
      11 lines of code
      1 parameters
      3 conditional paths
      uses function FirstChild() defined in tinyxml2::XMLNode
      uses function ToText() defined in tinyxml2::XMLNode
      uses function Value() defined in tinyxml2::XMLNode
      uses function ToUnsigned(const char *,unsigned *) defined in tinyxml2::XMLUtil
      uses enumvalue XML_SUCCESS defined in tinyxml2.h
      uses enumvalue XML_CAN_NOT_CONVERT_TEXT defined in tinyxml2.h
      uses enumvalue XML_NO_TEXT_NODE defined in tinyxml2.h
   function SetAttribute(const char *,const char *) in line 1317
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses variable a defined in daca2-report.py
      uses variable name defined in setup.py
   function SetAttribute(const char *,int) in line 1322
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses variable a defined in daca2-report.py
      uses variable name defined in setup.py
   function SetAttribute(const char *,unsigned) in line 1327
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses variable a defined in daca2-report.py
      uses variable name defined in setup.py
   function SetAttribute(const char *,bool) in line 1332
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses variable a defined in daca2-report.py
      uses variable name defined in setup.py
   function SetAttribute(const char *,double) in line 1337
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses variable a defined in daca2-report.py
      uses variable name defined in setup.py
   function SetAttribute(const char *,float) in line 1342
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses variable a defined in daca2-report.py
      uses variable name defined in setup.py
   function SetName(const char *,bool) in line 1153
      protection public
      3 lines of code
      2 parameters
      1 conditional paths
   function SetText(const char *) in line 1423
      protection public
      9 lines of code
      1 parameters
      2 conditional paths
      uses function FirstChild() defined in tinyxml2::XMLNode
      uses function ToText() defined in tinyxml2::XMLNode
      uses function SetValue(const char *,bool) defined in tinyxml2::XMLNode
      uses function GetDocument() defined in tinyxml2::XMLNode
      uses function NewText(const char *) defined in tinyxml2::XMLDocument
      uses function InsertFirstChild(XMLNode *) defined in tinyxml2::XMLNode
   function SetText(int) in line 1425
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses enumvalue BUF_SIZE defined in tinyxml2::XMLElement
      uses function ToStr(int,char *,int) defined in tinyxml2::XMLUtil
      uses function SetText(const char *) defined in tinyxml2::XMLElement
   function SetText(unsigned) in line 1427
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses enumvalue BUF_SIZE defined in tinyxml2::XMLElement
      uses function ToStr(int,char *,int) defined in tinyxml2::XMLUtil
      uses function SetText(const char *) defined in tinyxml2::XMLElement
   function SetText(bool) in line 1429
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses enumvalue BUF_SIZE defined in tinyxml2::XMLElement
      uses function ToStr(int,char *,int) defined in tinyxml2::XMLUtil
      uses function SetText(const char *) defined in tinyxml2::XMLElement
   function SetText(double) in line 1431
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses enumvalue BUF_SIZE defined in tinyxml2::XMLElement
      uses function ToStr(int,char *,int) defined in tinyxml2::XMLUtil
      uses function SetText(const char *) defined in tinyxml2::XMLElement
   function SetText(float) in line 1433
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses enumvalue BUF_SIZE defined in tinyxml2::XMLElement
      uses function ToStr(int,char *,int) defined in tinyxml2::XMLUtil
      uses function SetText(const char *) defined in tinyxml2::XMLElement
   function ShallowClone(XMLDocument *) in line 1480
      protection public
      11 lines of code
      1 parameters
      3 conditional paths
      uses variable _document defined in tinyxml2::XMLNode
      uses function NewElement(const char *) defined in tinyxml2::XMLDocument
      uses function Value() defined in tinyxml2::XMLNode
      uses variable a defined in daca2-report.py
      uses function FirstAttribute() defined in tinyxml2::XMLElement
      uses function SetAttribute(const char *,const char *) defined in tinyxml2::XMLElement
   function ShallowEqual(const XMLNode *) in line 1481
      protection public
      24 lines of code
      1 parameters
      5 conditional paths
      uses macro definition TIXMLASSERT defined in tinyxml2.h
      uses function ToElement() defined in tinyxml2::XMLNode
      uses function StringEqual(const char *,const char *,int) defined in tinyxml2::XMLUtil
      uses function Name() defined in tinyxml2::XMLElement
      uses variable a defined in daca2-report.py
      uses function FirstAttribute() defined in tinyxml2::XMLElement
      uses function Value() defined in tinyxml2::XMLAttribute
      uses function Next() defined in tinyxml2::XMLAttribute
   function ToElement() in line 1157
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function ToElement() in line 1160
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses variable name defined in setup.py
   function UnsignedAttribute(const char *) in line 1201
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable name defined in setup.py
   function XMLElement(XMLDocument *) in line 1487
      5 lines of code
      1 parameters
      1 conditional paths
   function ~XMLElement() in line 1488
      8 lines of code
      0 parameters
      2 conditional paths
      uses variable _rootAttribute defined in tinyxml2::XMLElement
      uses variable _next defined in tinyxml2::XMLAttribute
      uses function DeleteAttribute(const char *) defined in tinyxml2::XMLElement
   function XMLElement(const XMLElement &) in line 1489
      1 lines of code
      1 parameters
      1 conditional paths
   variable _closingType in line 1501
   variable _rootAttribute in line 1505
module tinyxml2::XMLDocument
   inherits from tinyxml2::XMLNode
   function Accept(XMLVisitor *) in line 1629
      protection public
      12 lines of code
      1 parameters
      4 conditional paths
      uses macro definition TIXMLASSERT defined in tinyxml2.h
      uses function VisitEnter(const XMLDocument &) defined in tinyxml2::XMLVisitor
      uses function NextSibling() defined in tinyxml2::XMLNode
      uses function VisitExit(const XMLDocument &) defined in tinyxml2::XMLVisitor
   function Clear() in line 1698
      protection public
      30 lines of code
      0 parameters
      2 conditional paths
      uses function DeleteChildren() defined in tinyxml2::XMLNode
      uses function Error() defined in tinyxml2::XMLDocument
      uses variable _errorID defined in tinyxml2::XMLDocument
      uses enumvalue XML_NO_ERROR defined in tinyxml2.h
      uses variable _errorStr1 defined in tinyxml2::XMLDocument
      uses variable _errorStr2 defined in tinyxml2::XMLDocument
      uses variable _charBuffer defined in tinyxml2::XMLDocument
      uses variable _textPool defined in tinyxml2::XMLDocument
      uses variable _elementPool defined in tinyxml2::XMLDocument
      uses variable _commentPool defined in tinyxml2::XMLDocument
      uses variable _attributePool defined in tinyxml2::XMLDocument
      uses macro definition TIXMLASSERT defined in tinyxml2.h
   function DeleteNode(XMLNode *) in line 1672
      protection public
      16 lines of code
      1 parameters
      2 conditional paths
      uses macro definition TIXMLASSERT defined in tinyxml2.h
      uses variable _document defined in tinyxml2::XMLNode
      uses variable _parent defined in tinyxml2::XMLNode
      uses function DeleteChild(XMLNode *) defined in tinyxml2::XMLNode
      uses variable _memPool defined in tinyxml2::XMLNode
      uses function SetTracked() defined in tinyxml2::MemPool
      uses function DeleteNode(XMLNode *) defined in tinyxml2::XMLNode
   function Error() in line 1677
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses enumvalue XML_NO_ERROR defined in tinyxml2.h
   function ErrorID() in line 1681
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function ErrorName() in line 1684
      protection public
      7 lines of code
      0 parameters
      1 conditional paths
      uses macro definition TIXMLASSERT defined in tinyxml2.h
      uses variable _errorID defined in tinyxml2::XMLDocument
      uses enumvalue XML_ERROR_COUNT defined in tinyxml2.h
      uses variable _errorNames defined in tinyxml2::XMLDocument
   function GetErrorStr1() in line 1687
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function GetErrorStr2() in line 1691
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function HasBOM() in line 1595
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function Identify(char *,XMLNode **) in line 1701
      protection public
      72 lines of code
      2 parameters
      7 conditional paths
      uses macro definition TIXMLASSERT defined in tinyxml2.h
      uses function SkipWhiteSpace(const char *) defined in tinyxml2::XMLUtil
      uses function StringEqual(const char *,const char *,int) defined in tinyxml2::XMLUtil
      uses variable _memPool defined in tinyxml2::XMLNode
   function LoadFile(const char *) in line 1554
      protection public
      12 lines of code
      1 parameters
      2 conditional paths
      uses function Clear() defined in tinyxml2::XMLDocument
      uses variable filename defined in extracttests.py
      uses function SetError(XMLError,const char *,const char *) defined in tinyxml2::XMLDocument
      uses enumvalue XML_ERROR_FILE_NOT_FOUND defined in tinyxml2.h
      uses variable _errorID defined in tinyxml2::XMLDocument
   function LoadFile(FILE *) in line 1567
      protection public
      43 lines of code
      1 parameters
      6 conditional paths
      uses function Clear() defined in tinyxml2::XMLDocument
      uses function SetError(XMLError,const char *,const char *) defined in tinyxml2::XMLDocument
      uses enumvalue XML_ERROR_FILE_READ_ERROR defined in tinyxml2.h
      uses variable _errorID defined in tinyxml2::XMLDocument
      uses enumvalue XML_ERROR_EMPTY_DOCUMENT defined in tinyxml2.h
      uses macro definition TIXMLASSERT defined in tinyxml2.h
      uses variable _charBuffer defined in tinyxml2::XMLDocument
      uses function Parse() defined in tinyxml2::XMLDocument
   function NewComment(const char *) in line 1642
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses macro definition TIXMLASSERT defined in tinyxml2.h
      uses variable _commentPool defined in tinyxml2::XMLDocument
   function NewDeclaration(const char *) in line 1660
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses macro definition TIXMLASSERT defined in tinyxml2.h
      uses variable _commentPool defined in tinyxml2::XMLDocument
   function NewElement(const char *) in line 1636
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses macro definition TIXMLASSERT defined in tinyxml2.h
      uses variable _elementPool defined in tinyxml2::XMLDocument
      uses friend XMLElement defined in tinyxml2::XMLDocument
      uses variable name defined in setup.py
   function NewText(const char *) in line 1648
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses macro definition TIXMLASSERT defined in tinyxml2.h
      uses variable _textPool defined in tinyxml2::XMLDocument
   function NewUnknown(const char *) in line 1666
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses macro definition TIXMLASSERT defined in tinyxml2.h
      uses variable _commentPool defined in tinyxml2::XMLDocument
   function operator=(const XMLDocument &) in line 1712
      1 lines of code
      1 parameters
      1 conditional paths
   function Parse(const char *,size_t) in line 1547
      protection public
      29 lines of code
      2 parameters
      4 conditional paths
      uses function Clear() defined in tinyxml2::XMLDocument
      uses function SetError(XMLError,const char *,const char *) defined in tinyxml2::XMLDocument
      uses enumvalue XML_ERROR_EMPTY_DOCUMENT defined in tinyxml2.h
      uses variable _errorID defined in tinyxml2::XMLDocument
      uses macro definition TIXMLASSERT defined in tinyxml2.h
      uses variable _charBuffer defined in tinyxml2::XMLDocument
      uses function Parse() defined in tinyxml2::XMLDocument
      uses function Error() defined in tinyxml2::XMLDocument
      uses function DeleteChildren() defined in tinyxml2::XMLNode
      uses variable _elementPool defined in tinyxml2::XMLDocument
      uses variable _attributePool defined in tinyxml2::XMLDocument
      uses variable _textPool defined in tinyxml2::XMLDocument
      uses variable _commentPool defined in tinyxml2::XMLDocument
   function Parse() in line 1729
      13 lines of code
      0 parameters
      2 conditional paths
      uses macro definition TIXMLASSERT defined in tinyxml2.h
      uses function NoChildren() defined in tinyxml2::XMLNode
      uses variable _charBuffer defined in tinyxml2::XMLDocument
      uses function SkipWhiteSpace(const char *) defined in tinyxml2::XMLUtil
      uses function ReadBOM(const char *,bool *) defined in tinyxml2::XMLUtil
      uses variable _writeBOM defined in tinyxml2::XMLDocument
      uses function SetError(XMLError,const char *,const char *) defined in tinyxml2::XMLDocument
      uses enumvalue XML_ERROR_EMPTY_DOCUMENT defined in tinyxml2.h
      uses function ParseDeep(char *,StrPair *) defined in tinyxml2::XMLNode
   function Print(XMLPrinter *) in line 1628
      protection public
      10 lines of code
      1 parameters
      2 conditional paths
      uses function Accept(XMLVisitor *) defined in tinyxml2::XMLDocument
   function PrintError() in line 1695
      protection public
      21 lines of code
      0 parameters
      4 conditional paths
      uses function Error() defined in tinyxml2::XMLDocument
      uses variable _errorStr1 defined in tinyxml2::XMLDocument
      uses macro definition TIXML_SNPRINTF defined in tinyxml2.cpp
      uses variable _errorStr2 defined in tinyxml2::XMLDocument
      uses macro definition TIXMLASSERT defined in tinyxml2.h
      uses variable _errorID defined in tinyxml2::XMLDocument
      uses enumvalue XML_ERROR_COUNT defined in tinyxml2.h
      uses function ErrorName() defined in tinyxml2::XMLDocument
   function ProcessEntities() in line 1585
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function RootElement() in line 1607
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function RootElement() in line 1610
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses variable name defined in setup.py
   function SaveFile(const char *,bool) in line 1574
      protection public
      11 lines of code
      2 parameters
      2 conditional paths
      uses variable filename defined in extracttests.py
      uses function SetError(XMLError,const char *,const char *) defined in tinyxml2::XMLDocument
      uses enumvalue XML_ERROR_FILE_COULD_NOT_BE_OPENED defined in tinyxml2.h
      uses variable _errorID defined in tinyxml2::XMLDocument
   function SaveFile(FILE *,bool) in line 1583
      protection public
      9 lines of code
      2 parameters
      1 conditional paths
      uses function SetError(XMLError,const char *,const char *) defined in tinyxml2::XMLDocument
      uses enumvalue XML_NO_ERROR defined in tinyxml2.h
      uses function Print(XMLPrinter *) defined in tinyxml2::XMLDocument
      uses variable _errorID defined in tinyxml2::XMLDocument
   function SetBOM(bool) in line 1600
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function SetError(XMLError,const char *,const char *) in line 1674
      protection public
      7 lines of code
      3 parameters
      1 conditional paths
      uses macro definition TIXMLASSERT defined in tinyxml2.h
      uses enumvalue XML_ERROR_COUNT defined in tinyxml2.h
      uses variable _errorID defined in tinyxml2::XMLDocument
      uses variable _errorStr1 defined in tinyxml2::XMLDocument
      uses variable _errorStr2 defined in tinyxml2::XMLDocument
   function ShallowClone(XMLDocument *) in line 1703
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function ShallowEqual(const XMLNode *) in line 1706
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
      uses function operator=(StrPair &) defined in tinyxml2::StrPair
   function ToDocument() in line 1528
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses macro definition TIXMLASSERT defined in tinyxml2.h
   function ToDocument() in line 1532
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses macro definition TIXMLASSERT defined in tinyxml2.h
      uses variable xml defined in extracttests.py
      uses variable filename defined in extracttests.py
   function WhitespaceMode() in line 1588
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function XMLDocument(bool,Whitespace) in line 1525
      protection public
      13 lines of code
      2 parameters
      1 conditional paths
      uses variable _document defined in tinyxml2::XMLNode
   function ~XMLDocument() in line 1526
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function Clear() defined in tinyxml2::XMLDocument
   function XMLDocument(const XMLDocument &) in line 1711
      1 lines of code
      1 parameters
      1 conditional paths
   variable _attributePool in line 1723
   variable _charBuffer in line 1720
   variable _commentPool in line 1725
   variable _elementPool in line 1722
   variable _errorID in line 1716
   variable _errorNames in line 1727
   variable _errorStr1 in line 1718
   variable _errorStr2 in line 1719
   variable _processEntities in line 1715
   variable _textPool in line 1724
   variable _whitespace in line 1717
   variable _writeBOM in line 1714
module tinyxml2::XMLHandle
   function FirstChild() in line 1810
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function FirstChildElement(const char *) in line 1814
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
      uses variable name defined in setup.py
   function LastChild() in line 1818
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function LastChildElement(const char *) in line 1822
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
      uses variable name defined in setup.py
   function NextSibling() in line 1834
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function NextSiblingElement(const char *) in line 1838
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
      uses variable name defined in setup.py
   function operator=(const XMLHandle &) in line 1804
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable _node defined in tinyxml2::XMLHandle
   function PreviousSibling() in line 1826
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function PreviousSiblingElement(const char *) in line 1830
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
      uses variable name defined in setup.py
   function ToDeclaration() in line 1859
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function ToElement() in line 1847
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function ToNode() in line 1843
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function ToText() in line 1851
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function ToUnknown() in line 1855
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function XMLHandle(XMLNode *) in line 1792
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function XMLHandle(XMLNode &) in line 1796
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function XMLHandle(const XMLHandle &) in line 1800
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
      uses variable _node defined in tinyxml2::XMLHandle
   variable _node in line 1864
module tinyxml2::XMLConstHandle
   function FirstChild() in line 1890
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function FirstChildElement(const char *) in line 1893
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
      uses variable name defined in setup.py
   function LastChild() in line 1896
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function LastChildElement(const char *) in line 1899
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
      uses variable name defined in setup.py
   function NextSibling() in line 1908
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function NextSiblingElement(const char *) in line 1911
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
      uses variable name defined in setup.py
   function operator=(const XMLConstHandle &) in line 1885
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable _node defined in tinyxml2::XMLConstHandle
   function PreviousSibling() in line 1902
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function PreviousSiblingElement(const char *) in line 1905
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
      uses variable name defined in setup.py
   function ToDeclaration() in line 1928
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function ToElement() in line 1919
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function ToNode() in line 1916
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function ToText() in line 1922
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function ToUnknown() in line 1925
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function XMLConstHandle(const XMLNode *) in line 1875
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function XMLConstHandle(const XMLNode &) in line 1878
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function XMLConstHandle(const XMLConstHandle &) in line 1881
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
      uses variable _node defined in tinyxml2::XMLConstHandle
   variable _node in line 1933
module tinyxml2::XMLPrinter
   inherits from tinyxml2::XMLVisitor
   function ClearBuffer() in line 2057
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function CloseElement(bool) in line 2004
      protection public
      24 lines of code
      1 parameters
      5 conditional paths
      uses variable _depth defined in tinyxml2::XMLPrinter
      uses variable name defined in setup.py
      uses variable _stack defined in tinyxml2::XMLPrinter
      uses function Pop() defined in tinyxml2::DynArray
      uses variable _elementJustOpened defined in tinyxml2::XMLPrinter
      uses function Print(const char *,...) defined in tinyxml2::XMLPrinter
      uses variable _textDepth defined in tinyxml2::XMLPrinter
      uses function PrintSpace(int) defined in tinyxml2::XMLPrinter
   function CompactMode(const XMLElement &) in line 2063
      1 lines of code
      1 parameters
      1 conditional paths
   function CStr() in line 2042
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function CStrSize() in line 2050
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function OpenElement(const char *,bool) in line 1996
      protection public
      17 lines of code
      2 parameters
      3 conditional paths
      uses function SealElementIfJustOpened() defined in tinyxml2::XMLPrinter
      uses variable _stack defined in tinyxml2::XMLPrinter
      uses function Push(T) defined in tinyxml2::DynArray
      uses variable name defined in setup.py
      uses variable _textDepth defined in tinyxml2::XMLPrinter
      uses variable _firstElement defined in tinyxml2::XMLPrinter
      uses function Print(const char *,...) defined in tinyxml2::XMLPrinter
      uses function PrintSpace(int) defined in tinyxml2::XMLPrinter
      uses variable _depth defined in tinyxml2::XMLPrinter
      uses variable _elementJustOpened defined in tinyxml2::XMLPrinter
   function Print(const char *,...) in line 2069
      20 lines of code
      2 parameters
      2 conditional paths
      uses variable _fp defined in tinyxml2::XMLPrinter
      uses macro definition TIXMLASSERT defined in tinyxml2.h
      uses variable _buffer defined in tinyxml2::XMLPrinter
      uses function Size() defined in tinyxml2::DynArray
      uses function PushArr(int) defined in tinyxml2::DynArray
      uses macro definition TIXML_VSNPRINTF defined in tinyxml2.cpp
   function PrintSpace(int) in line 2068
      6 lines of code
      1 parameters
      2 conditional paths
      uses function Print(const char *,...) defined in tinyxml2::XMLPrinter
   function PrintString(const char *,bool) in line 2076
      48 lines of code
      2 parameters
      10 conditional paths
      uses variable _processEntities defined in tinyxml2::XMLPrinter
      uses variable _restrictedEntityFlag defined in tinyxml2::XMLPrinter
      uses variable _entityFlag defined in tinyxml2::XMLPrinter
      uses macro definition TIXMLASSERT defined in tinyxml2.h
      uses enumvalue ENTITY_RANGE defined in tinyxml2::XMLPrinter
      uses function Print(const char *,...) defined in tinyxml2::XMLPrinter
   function PushAttribute(const char *,const char *) in line 1998
      protection public
      7 lines of code
      2 parameters
      1 conditional paths
      uses macro definition TIXMLASSERT defined in tinyxml2.h
      uses variable _elementJustOpened defined in tinyxml2::XMLPrinter
      uses function Print(const char *,...) defined in tinyxml2::XMLPrinter
      uses variable name defined in setup.py
      uses function PrintString(const char *,bool) defined in tinyxml2::XMLPrinter
   function PushAttribute(const char *,int) in line 1999
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
      uses enumvalue BUF_SIZE defined in tinyxml2::XMLPrinter
      uses function ToStr(int,char *,int) defined in tinyxml2::XMLUtil
      uses function PushAttribute(const char *,const char *) defined in tinyxml2::XMLPrinter
      uses variable name defined in setup.py
   function PushAttribute(const char *,unsigned) in line 2000
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
      uses enumvalue BUF_SIZE defined in tinyxml2::XMLPrinter
      uses function ToStr(int,char *,int) defined in tinyxml2::XMLUtil
      uses function PushAttribute(const char *,const char *) defined in tinyxml2::XMLPrinter
      uses variable name defined in setup.py
   function PushAttribute(const char *,bool) in line 2001
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
      uses enumvalue BUF_SIZE defined in tinyxml2::XMLPrinter
      uses function ToStr(int,char *,int) defined in tinyxml2::XMLUtil
      uses function PushAttribute(const char *,const char *) defined in tinyxml2::XMLPrinter
      uses variable name defined in setup.py
   function PushAttribute(const char *,double) in line 2002
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
      uses enumvalue BUF_SIZE defined in tinyxml2::XMLPrinter
      uses function ToStr(int,char *,int) defined in tinyxml2::XMLUtil
      uses function PushAttribute(const char *,const char *) defined in tinyxml2::XMLPrinter
      uses variable name defined in setup.py
   function PushComment(const char *) in line 2020
      protection public
      10 lines of code
      1 parameters
      2 conditional paths
      uses function SealElementIfJustOpened() defined in tinyxml2::XMLPrinter
      uses variable _textDepth defined in tinyxml2::XMLPrinter
      uses variable _firstElement defined in tinyxml2::XMLPrinter
      uses variable _compactMode defined in tinyxml2::XMLPrinter
      uses function Print(const char *,...) defined in tinyxml2::XMLPrinter
      uses function PrintSpace(int) defined in tinyxml2::XMLPrinter
      uses variable _depth defined in tinyxml2::XMLPrinter
   function PushDeclaration(const char *) in line 2022
      protection public
      10 lines of code
      1 parameters
      2 conditional paths
      uses function SealElementIfJustOpened() defined in tinyxml2::XMLPrinter
      uses variable _textDepth defined in tinyxml2::XMLPrinter
      uses variable _firstElement defined in tinyxml2::XMLPrinter
      uses variable _compactMode defined in tinyxml2::XMLPrinter
      uses function Print(const char *,...) defined in tinyxml2::XMLPrinter
      uses function PrintSpace(int) defined in tinyxml2::XMLPrinter
      uses variable _depth defined in tinyxml2::XMLPrinter
   function PushHeader(bool,bool) in line 1992
      protection public
      10 lines of code
      2 parameters
      3 conditional paths
      uses function Print(const char *,...) defined in tinyxml2::XMLPrinter
      uses function PushDeclaration(const char *) defined in tinyxml2::XMLPrinter
   function PushText(const char *,bool) in line 2007
      protection public
      12 lines of code
      2 parameters
      2 conditional paths
      uses variable _textDepth defined in tinyxml2::XMLPrinter
      uses variable _depth defined in tinyxml2::XMLPrinter
      uses function SealElementIfJustOpened() defined in tinyxml2::XMLPrinter
      uses function Print(const char *,...) defined in tinyxml2::XMLPrinter
      uses function PrintString(const char *,bool) defined in tinyxml2::XMLPrinter
   function PushText(int) in line 2009
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses enumvalue BUF_SIZE defined in tinyxml2::XMLPrinter
      uses function ToStr(int,char *,int) defined in tinyxml2::XMLUtil
      uses function PushText(const char *,bool) defined in tinyxml2::XMLPrinter
   function PushText(unsigned) in line 2011
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses enumvalue BUF_SIZE defined in tinyxml2::XMLPrinter
      uses function ToStr(int,char *,int) defined in tinyxml2::XMLUtil
      uses function PushText(const char *,bool) defined in tinyxml2::XMLPrinter
   function PushText(bool) in line 2013
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses enumvalue BUF_SIZE defined in tinyxml2::XMLPrinter
      uses function ToStr(int,char *,int) defined in tinyxml2::XMLUtil
      uses function PushText(const char *,bool) defined in tinyxml2::XMLPrinter
   function PushText(float) in line 2015
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses enumvalue BUF_SIZE defined in tinyxml2::XMLPrinter
      uses function ToStr(int,char *,int) defined in tinyxml2::XMLUtil
      uses function PushText(const char *,bool) defined in tinyxml2::XMLPrinter
   function PushText(double) in line 2017
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses enumvalue BUF_SIZE defined in tinyxml2::XMLPrinter
      uses function ToStr(int,char *,int) defined in tinyxml2::XMLUtil
      uses function PushText(const char *,bool) defined in tinyxml2::XMLPrinter
   function PushUnknown(const char *) in line 2023
      protection public
      10 lines of code
      1 parameters
      2 conditional paths
      uses function SealElementIfJustOpened() defined in tinyxml2::XMLPrinter
      uses variable _textDepth defined in tinyxml2::XMLPrinter
      uses variable _firstElement defined in tinyxml2::XMLPrinter
      uses variable _compactMode defined in tinyxml2::XMLPrinter
      uses function Print(const char *,...) defined in tinyxml2::XMLPrinter
      uses function PrintSpace(int) defined in tinyxml2::XMLPrinter
      uses variable _depth defined in tinyxml2::XMLPrinter
   function SealElementIfJustOpened() in line 2071
      8 lines of code
      0 parameters
      2 conditional paths
      uses variable _elementJustOpened defined in tinyxml2::XMLPrinter
      uses function Print(const char *,...) defined in tinyxml2::XMLPrinter
   function Visit(const XMLText &) in line 2033
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function PushText(const char *,bool) defined in tinyxml2::XMLPrinter
      uses function Value() defined in tinyxml2::XMLNode
      uses function CData() defined in tinyxml2::XMLText
   function Visit(const XMLComment &) in line 2034
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function PushComment(const char *) defined in tinyxml2::XMLPrinter
      uses function Value() defined in tinyxml2::XMLNode
   function Visit(const XMLDeclaration &) in line 2035
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function PushDeclaration(const char *) defined in tinyxml2::XMLPrinter
      uses function Value() defined in tinyxml2::XMLNode
   function Visit(const XMLUnknown &) in line 2036
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function PushUnknown(const char *) defined in tinyxml2::XMLPrinter
      uses function Value() defined in tinyxml2::XMLNode
   function VisitEnter(const XMLDocument &) in line 2025
      protection public
      8 lines of code
      1 parameters
      2 conditional paths
      uses variable _processEntities defined in tinyxml2::XMLPrinter
      uses function ProcessEntities() defined in tinyxml2::XMLDocument
      uses function HasBOM() defined in tinyxml2::XMLDocument
      uses function PushHeader(bool,bool) defined in tinyxml2::XMLPrinter
   function VisitEnter(const XMLElement &,const XMLAttribute *) in line 2030
      protection public
      14 lines of code
      2 parameters
      3 conditional paths
      uses function Parent() defined in tinyxml2::XMLNode
      uses function ToElement() defined in tinyxml2::XMLNode
      uses function CompactMode(const XMLElement &) defined in tinyxml2::XMLPrinter
      uses variable _compactMode defined in tinyxml2::XMLPrinter
      uses function OpenElement(const char *,bool) defined in tinyxml2::XMLPrinter
      uses function Name() defined in tinyxml2::XMLElement
      uses function PushAttribute(const char *,const char *) defined in tinyxml2::XMLPrinter
      uses function Name() defined in tinyxml2::XMLAttribute
      uses function Value() defined in tinyxml2::XMLAttribute
      uses function Next() defined in tinyxml2::XMLAttribute
   function VisitExit(const XMLDocument &) in line 2026
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function VisitExit(const XMLElement &) in line 2031
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function CloseElement(bool) defined in tinyxml2::XMLPrinter
      uses function CompactMode(const XMLElement &) defined in tinyxml2::XMLPrinter
   function XMLPrinter(FILE *,bool,int) in line 1988
      protection public
      23 lines of code
      3 parameters
      3 conditional paths
      uses enumvalue ENTITY_RANGE defined in tinyxml2::XMLPrinter
      uses variable _entityFlag defined in tinyxml2::XMLPrinter
      uses variable _restrictedEntityFlag defined in tinyxml2::XMLPrinter
      uses variable value defined in tinyxml2::Entity
      uses macro definition TIXMLASSERT defined in tinyxml2.h
      uses variable _buffer defined in tinyxml2::XMLPrinter
      uses function Push(T) defined in tinyxml2::DynArray
   function ~XMLPrinter() in line 1989
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
      uses variable name defined in setup.py
   variable _buffer in line 2092
   variable _compactMode in line 2083
   variable _depth in line 2080
   variable _elementJustOpened in line 2072
   variable _entityFlag in line 2089
   variable _firstElement in line 2078
   variable _fp in line 2079
   variable _processEntities in line 2082
   variable _restrictedEntityFlag in line 2090
   variable _stack in line 2073
   variable _textDepth in line 2081
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/gui/aboutdialog.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/gui/aboutdialog.h
module AboutDialog
   inherits from QDialog
   function AboutDialog(const QString &,const QString &,QWidget *) in line 38
      protection public
      14 lines of code
      3 parameters
      2 conditional paths
      uses variable mUI defined in AboutDialog
   variable mUI in line 42
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/gui/application.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/gui/application.h
module Application
   function getName() in line 52
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses variable mName defined in Application
   function getParameters() in line 68
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses variable mParameters defined in Application
   function getPath() in line 60
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses variable mPath defined in Application
   function setName(const QString &) in line 76
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
      uses variable mName defined in Application
      uses variable name defined in setup.py
   function setParameters(const QString &) in line 92
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
      uses variable mParameters defined in Application
   function setPath(const QString &) in line 84
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
      uses variable mPath defined in Application
      uses variable path defined in daca2-report.py
   function Application() in line 45
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
      uses variable name defined in setup.py
      uses variable path defined in daca2-report.py
   function Application(const QString &,const QString &,const QString &) in line 46
      protection public
      7 lines of code
      3 parameters
      1 conditional paths
   variable mName in line 101
   variable mParameters in line 111
   variable mPath in line 106
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/gui/applicationdialog.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/gui/applicationdialog.h
module ApplicationDialog
   inherits from QDialog
   slot Browse in line 60
   slot Ok in line 54
   function ApplicationDialog(const QString &,Application &,QWidget *) in line 48
      protection public
      17 lines of code
      3 parameters
      1 conditional paths
      uses variable mUI defined in ApplicationDialog
      uses slot Browse defined in ApplicationDialog
      uses slot Ok defined in ApplicationDialog
      uses function getPath() defined in Application
      uses function getName() defined in Application
      uses function getParameters() defined in Application
   function ~ApplicationDialog() in line 50
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   variable mApplication in line 75
   variable mUI in line 68
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/gui/applicationlist.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/gui/applicationlist.h
module ApplicationList
   inherits from QObject
   function AddApplication(const Application &) in line 81
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses function getName() defined in Application
      uses function getPath() defined in Application
      uses variable mApplications defined in ApplicationList
   function CheckAndAddApplication(QString,QString,QString) in line 119
      12 lines of code
      3 parameters
      2 conditional paths
      uses function setName(const QString &) defined in Application
      uses variable name defined in setup.py
      uses function setPath(const QString &) defined in Application
      uses function setParameters(const QString &) defined in Application
      uses function AddApplication(const Application &) defined in ApplicationList
   function Clear() in line 109
      5 lines of code
      0 parameters
      1 conditional paths
      uses variable mApplications defined in ApplicationList
      uses variable mDefaultApplicationIndex defined in ApplicationList
   function Copy(const ApplicationList *) in line 101
      protection public
      13 lines of code
      1 parameters
      3 conditional paths
      uses function Clear() defined in ApplicationList
      uses function GetApplicationCount() defined in ApplicationList
      uses function GetApplication(const int) defined in ApplicationList
      uses function AddApplication(const Application &) defined in ApplicationList
      uses variable mDefaultApplicationIndex defined in ApplicationList
      uses function GetDefaultApplication() defined in ApplicationList
   function FindDefaultWindowsEditor() in line 115
      26 lines of code
      0 parameters
      6 conditional paths
      uses function CheckAndAddApplication(QString,QString,QString) defined in ApplicationList
   function GetApplication(const int) in line 65
      protection public
      9 lines of code
      1 parameters
      2 conditional paths
      uses variable mApplications defined in ApplicationList
   function GetApplication(const int) in line 66
      protection public
      9 lines of code
      1 parameters
      2 conditional paths
      uses variable mApplications defined in ApplicationList
   function GetApplicationCount() in line 57
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable mApplications defined in ApplicationList
   function GetDefaultApplication() in line 72
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses variable mDefaultApplicationIndex defined in ApplicationList
      uses function AddApplication(const Application &) defined in ApplicationList
      uses function RemoveApplication(const int) defined in ApplicationList
      uses function SetDefault(const int) defined in ApplicationList
      uses function Copy(const ApplicationList *) defined in ApplicationList
      uses function Clear() defined in ApplicationList
      uses function FindDefaultWindowsEditor() defined in ApplicationList
      uses function CheckAndAddApplication(QString,QString,QString) defined in ApplicationList
      uses variable name defined in setup.py
   function LoadSettings() in line 46
      protection public
      58 lines of code
      0 parameters
      11 conditional paths
      uses macro definition SETTINGS_APPLICATION_NAMES defined in common.h
      uses macro definition SETTINGS_APPLICATION_PATHS defined in common.h
      uses macro definition SETTINGS_APPLICATION_PARAMS defined in common.h
      uses macro definition SETTINGS_APPLICATION_DEFAULT defined in common.h
      uses function setName(const QString &) defined in Application
      uses function setPath(const QString &) defined in Application
      uses function setParameters(const QString &) defined in Application
      uses function AddApplication(const Application &) defined in ApplicationList
      uses function FindDefaultWindowsEditor() defined in ApplicationList
      uses variable mDefaultApplicationIndex defined in ApplicationList
   function RemoveApplication(const int) in line 88
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable mApplications defined in ApplicationList
   function SaveSettings() in line 51
      protection public
      19 lines of code
      0 parameters
      2 conditional paths
      uses function GetApplicationCount() defined in ApplicationList
      uses function GetApplication(const int) defined in ApplicationList
      uses function getName() defined in Application
      uses function getPath() defined in Application
      uses function getParameters() defined in Application
      uses macro definition SETTINGS_APPLICATION_NAMES defined in common.h
      uses macro definition SETTINGS_APPLICATION_PATHS defined in common.h
      uses macro definition SETTINGS_APPLICATION_PARAMS defined in common.h
      uses macro definition SETTINGS_APPLICATION_DEFAULT defined in common.h
      uses variable mDefaultApplicationIndex defined in ApplicationList
   function SetDefault(const int) in line 94
      protection public
      6 lines of code
      1 parameters
      2 conditional paths
      uses variable mApplications defined in ApplicationList
      uses variable mDefaultApplicationIndex defined in ApplicationList
   function ApplicationList(QObject *) in line 36
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function ~ApplicationList() in line 37
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function Clear() defined in ApplicationList
   variable mApplications in line 125
   variable mDefaultApplicationIndex in line 131
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/gui/checkstatistics.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/gui/checkstatistics.h
module CheckStatistics
   inherits from QObject
   function AddItem(ShowTypes::ShowType) in line 40
      protection public
      27 lines of code
      1 parameters
      8 conditional paths
      uses enumvalue ShowStyle defined in ShowTypes
      uses variable mStyle defined in CheckStatistics
      uses enumvalue ShowWarnings defined in ShowTypes
      uses variable mWarning defined in CheckStatistics
      uses enumvalue ShowPerformance defined in ShowTypes
      uses variable mPerformance defined in CheckStatistics
      uses enumvalue ShowPortability defined in ShowTypes
      uses variable mPortability defined in CheckStatistics
      uses enumvalue ShowErrors defined in ShowTypes
      uses variable mError defined in CheckStatistics
      uses enumvalue ShowInformation defined in ShowTypes
      uses variable mInformation defined in CheckStatistics
      uses enumvalue ShowNone defined in ShowTypes
   function Clear() in line 46
      protection public
      9 lines of code
      0 parameters
      1 conditional paths
      uses variable mStyle defined in CheckStatistics
      uses variable mWarning defined in CheckStatistics
      uses variable mPerformance defined in CheckStatistics
      uses variable mPortability defined in CheckStatistics
      uses variable mInformation defined in CheckStatistics
      uses variable mError defined in CheckStatistics
   function GetCount(ShowTypes::ShowType) in line 54
      protection public
      21 lines of code
      1 parameters
      8 conditional paths
      uses enumvalue ShowStyle defined in ShowTypes
      uses variable mStyle defined in CheckStatistics
      uses enumvalue ShowWarnings defined in ShowTypes
      uses variable mWarning defined in CheckStatistics
      uses enumvalue ShowPerformance defined in ShowTypes
      uses variable mPerformance defined in CheckStatistics
      uses enumvalue ShowPortability defined in ShowTypes
      uses variable mPortability defined in CheckStatistics
      uses enumvalue ShowErrors defined in ShowTypes
      uses variable mError defined in CheckStatistics
      uses enumvalue ShowInformation defined in ShowTypes
      uses variable mInformation defined in CheckStatistics
      uses enumvalue ShowNone defined in ShowTypes
   function CheckStatistics(QObject *) in line 33
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function Clear() defined in CheckStatistics
   variable mError in line 62
   variable mInformation in line 61
   variable mPerformance in line 59
   variable mPortability in line 60
   variable mStyle in line 57
   variable mWarning in line 58
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/gui/checkthread.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/gui/checkthread.h
module CheckThread
   inherits from QThread
   function Check(const Settings &) in line 47
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable mCppcheck defined in CheckThread
      uses function settings() defined in CppCheck
   signal Done in line 64
      protection public
   signal FileChecked in line 66
      protection public
   function run() in line 53
      protection public
      21 lines of code
      0 parameters
      4 conditional paths
      uses variable mState defined in CheckThread
      uses enumvalue Running defined in CheckThread
      uses variable mResult defined in CheckThread
      uses function GetNextFile() defined in ThreadResult
      uses variable mCppcheck defined in CheckThread
      uses function check(const std::string &) defined in CppCheck
      uses signal FileChecked defined in CheckThread
      uses enumvalue Ready defined in CheckThread
      uses enumvalue Stopped defined in CheckThread
      uses signal Done defined in CheckThread
   function stop() in line 55
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
      uses variable mState defined in CheckThread
      uses enumvalue Stopping defined in CheckThread
      uses variable mCppcheck defined in CheckThread
      uses function terminate() defined in CppCheck
   function CheckThread(ThreadResult &) in line 39
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
   function ~CheckThread() in line 40
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   variable mCppcheck in line 93
   variable mResult in line 88
   variable mState in line 86
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/gui/common.cpp
module common.cpp
   function GetPath(const QString &) in line 26
      protection public
      13 lines of code
      1 parameters
      1 conditional paths
      uses variable path defined in daca2-report.py
      uses macro definition SETTINGS_LAST_CHECK_PATH defined in common.h
   function SetPath(const QString &,const QString &) in line 40
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/gui/common.h
module common.h
   macro definition SETTINGS_WINDOW_MAXIMIZED in line 33
      protection public
   macro definition SETTINGS_WINDOW_WIDTH in line 34
      protection public
   macro definition SETTINGS_WINDOW_HEIGHT in line 35
      protection public
   macro definition SETTINGS_LOG_VIEW_WIDTH in line 36
      protection public
   macro definition SETTINGS_LOG_VIEW_HEIGHT in line 37
      protection public
   macro definition SETTINGS_MAINWND_SPLITTER_STATE in line 38
      protection public
   macro definition SETTINGS_CHECK_DIALOG_WIDTH in line 39
      protection public
   macro definition SETTINGS_CHECK_DIALOG_HEIGHT in line 40
      protection public
   macro definition SETTINGS_PROJECT_DIALOG_WIDTH in line 41
      protection public
   macro definition SETTINGS_PROJECT_DIALOG_HEIGHT in line 42
      protection public
   macro definition SETTINGS_RESULT_COLUMN_WIDTH in line 45
      protection public
   macro definition SETTINGS_TOOLBARS_MAIN_SHOW in line 46
      protection public
   macro definition SETTINGS_TOOLBARS_VIEW_SHOW in line 47
      protection public
   macro definition SETTINGS_TOOLBARS_FILTER_SHOW in line 48
      protection public
   macro definition SETTINGS_SHOW_STYLE in line 51
      protection public
   macro definition SETTINGS_SHOW_ERRORS in line 52
      protection public
   macro definition SETTINGS_SHOW_WARNINGS in line 53
      protection public
   macro definition SETTINGS_SHOW_PERFORMANCE in line 54
      protection public
   macro definition SETTINGS_SHOW_INFORMATION in line 55
      protection public
   macro definition SETTINGS_SHOW_PORTABILITY in line 56
      protection public
   macro definition SETTINGS_STD_CPP03 in line 59
      protection public
   macro definition SETTINGS_STD_CPP11 in line 60
      protection public
   macro definition SETTINGS_STD_C89 in line 61
      protection public
   macro definition SETTINGS_STD_C99 in line 62
      protection public
   macro definition SETTINGS_STD_C11 in line 63
      protection public
   macro definition SETTINGS_STD_POSIX in line 64
      protection public
   macro definition SETTINGS_ENFORCED_LANGUAGE in line 67
      protection public
   macro definition SETTINGS_CHECK_FORCE in line 70
      protection public
   macro definition SETTINGS_CHECK_THREADS in line 71
      protection public
   macro definition SETTINGS_SHOW_FULL_PATH in line 72
      protection public
   macro definition SETTINGS_SHOW_NO_ERRORS in line 73
      protection public
   macro definition SETTINGS_SHOW_DEBUG_WARNINGS in line 74
      protection public
   macro definition SETTINGS_SAVE_ALL_ERRORS in line 75
      protection public
   macro definition SETTINGS_SAVE_FULL_PATH in line 76
      protection public
   macro definition SETTINGS_APPLICATION_NAMES in line 77
      protection public
   macro definition SETTINGS_APPLICATION_PATHS in line 78
      protection public
   macro definition SETTINGS_APPLICATION_PARAMS in line 79
      protection public
   macro definition SETTINGS_APPLICATION_DEFAULT in line 80
      protection public
   macro definition SETTINGS_LANGUAGE in line 81
      protection public
   macro definition SETTINGS_GLOBAL_INCLUDE_PATHS in line 82
      protection public
   macro definition SETTINGS_INLINE_SUPPRESSIONS in line 83
      protection public
   macro definition SETTINGS_INCONCLUSIVE_ERRORS in line 84
      protection public
   macro definition SETTINGS_MRU_PROJECTS in line 85
      protection public
   macro definition SETTINGS_SHOW_ERROR_ID in line 86
      protection public
   macro definition PROGRESS_MAX in line 89
      protection public
   macro definition SETTINGS_CHECKED_PLATFORM in line 91
      protection public
   macro definition SETTINGS_LAST_CHECK_PATH in line 93
      protection public
   macro definition SETTINGS_LAST_PROJECT_PATH in line 94
      protection public
   macro definition SETTINGS_LAST_RESULT_PATH in line 95
      protection public
   macro definition SETTINGS_LAST_SOURCE_PATH in line 96
      protection public
   macro definition SETTINGS_LAST_INCLUDE_PATH in line 97
      protection public
   macro definition SETTINGS_LAST_APP_PATH in line 98
      protection public
   function GetPath(const QString &) in line 108
      protection public
      13 lines of code
      1 parameters
      3 conditional paths
      uses variable path defined in daca2-report.py
      uses macro definition SETTINGS_LAST_CHECK_PATH defined in common.h
   function SetPath(const QString &,const QString &) in line 116
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/gui/cppchecklibrarydata.cpp
module cppchecklibrarydata.cpp
   function loadContainer(QXmlStreamReader &) in line 30
      protection public
      45 lines of code
      1 parameters
      12 conditional paths
      uses variable id defined in CppcheckLibraryData::Container
      uses variable inherits defined in CppcheckLibraryData::Container
      uses variable startPattern defined in CppcheckLibraryData::Container
      uses variable endPattern defined in CppcheckLibraryData::Container
      uses variable type defined in CppcheckLibraryData::Container
      uses variable templateParameter defined in CppcheckLibraryData::Container
      uses variable string defined in CppcheckLibraryData::Container
      uses variable access_arrayLike defined in CppcheckLibraryData::Container
      uses variable size_templateParameter defined in CppcheckLibraryData::Container
      uses variable name defined in CppcheckLibraryData::Container::Function
      uses variable sizeFunctions defined in CppcheckLibraryData::Container
      uses variable accessFunctions defined in CppcheckLibraryData::Container
      uses variable otherFunctions defined in CppcheckLibraryData::Container
   function loadDefine(const QXmlStreamReader &) in line 76
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses variable name defined in CppcheckLibraryData::Define
      uses variable value defined in CppcheckLibraryData::Define
   function loadFunctionArg(QXmlStreamReader &) in line 84
      protection public
      37 lines of code
      1 parameters
      11 conditional paths
      uses variable nr defined in CppcheckLibraryData::Function::Arg
      uses variable ANY defined in CppcheckLibraryData::Function::Arg
      uses variable type defined in CppcheckLibraryData::Container
      uses variable notbool defined in CppcheckLibraryData::Function::Arg
      uses variable notnull defined in CppcheckLibraryData::Function::Arg
      uses variable notuninit defined in CppcheckLibraryData::Function::Arg
      uses variable strz defined in CppcheckLibraryData::Function::Arg
      uses variable formatstr defined in CppcheckLibraryData::Function::Arg
      uses variable valid defined in CppcheckLibraryData::Function::Arg
      uses variable type defined in CppcheckLibraryData::Function::Arg::MinSize
      uses variable arg defined in CppcheckLibraryData::Function::Arg::MinSize
      uses variable arg2 defined in CppcheckLibraryData::Function::Arg::MinSize
      uses variable minsizes defined in CppcheckLibraryData::Function::Arg
   function loadFunction(QXmlStreamReader &,const QString) in line 122
      protection public
      35 lines of code
      2 parameters
      11 conditional paths
      uses variable comments defined in CppcheckLibraryData::Function
      uses variable type defined in CppcheckLibraryData::Container
      uses enumvalue True defined in CppcheckLibraryData::Function
      uses enumvalue False defined in CppcheckLibraryData::Function
      uses function loadFunctionArg(QXmlStreamReader &) defined in cppchecklibrarydata.cpp
   function loadMemoryResource(QXmlStreamReader &) in line 158
      protection public
      22 lines of code
      1 parameters
      6 conditional paths
      uses variable memoryresource defined in CppcheckLibraryData
      uses variable type defined in CppcheckLibraryData::Container
      uses variable init defined in CppcheckLibraryData::MemoryResource::Alloc
      uses variable name defined in CppcheckLibraryData::MemoryResource::Alloc
   function loadPodType(const QXmlStreamReader &) in line 181
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses variable name defined in CppcheckLibraryData::PodType
      uses variable size defined in CppcheckLibraryData::PodType
      uses variable sign defined in CppcheckLibraryData::PodType
   function writeContainerFunctions(QXmlStreamWriter &,const QString,int,const QList< struct CppcheckLibraryData::Container::Function > &) in line 224
      protection public
      22 lines of code
      4 parameters
      8 conditional paths
      uses variable functions defined in CppcheckLibraryData
      uses variable name defined in setup.py
      uses variable action defined in CppcheckLibraryData::Container::Function
      uses variable yields defined in CppcheckLibraryData::Container::Function
   function writeContainer(QXmlStreamWriter &,const CppcheckLibraryData::Container &) in line 247
      protection public
      23 lines of code
      2 parameters
      7 conditional paths
      uses variable id defined in CppcheckLibraryData::Container
      uses variable startPattern defined in CppcheckLibraryData::Container
      uses variable endPattern defined in CppcheckLibraryData::Container
      uses variable inherits defined in CppcheckLibraryData::Container
      uses variable type defined in CppcheckLibraryData::Container
      uses variable templateParameter defined in CppcheckLibraryData::Container
      uses variable string defined in CppcheckLibraryData::Container
      uses function writeContainerFunctions(QXmlStreamWriter &,const QString,int,const QList< struct CppcheckLibraryData::Container::Function > &) defined in cppchecklibrarydata.cpp
      uses variable size_templateParameter defined in CppcheckLibraryData::Container
      uses variable sizeFunctions defined in CppcheckLibraryData::Container
      uses variable access_arrayLike defined in CppcheckLibraryData::Container
      uses variable accessFunctions defined in CppcheckLibraryData::Container
      uses variable otherFunctions defined in CppcheckLibraryData::Container
   function writeFunction(QXmlStreamWriter &,const CppcheckLibraryData::Function &) in line 271
      protection public
      87 lines of code
      2 parameters
      28 conditional paths
      uses variable name defined in setup.py
      uses enumvalue Unknown defined in CppcheckLibraryData::Function
      uses enumvalue True defined in CppcheckLibraryData::Function
      uses variable formatstr defined in CppcheckLibraryData::Function::Arg
      uses variable nr defined in CppcheckLibraryData::Function::Arg
      uses variable ANY defined in CppcheckLibraryData::Function::Arg
      uses variable notnull defined in CppcheckLibraryData::Function::Arg
      uses variable notuninit defined in CppcheckLibraryData::Function::Arg
      uses variable notbool defined in CppcheckLibraryData::Function::Arg
      uses variable strz defined in CppcheckLibraryData::Function::Arg
      uses variable valid defined in CppcheckLibraryData::Function::Arg
      uses variable minsizes defined in CppcheckLibraryData::Function::Arg
      uses variable type defined in CppcheckLibraryData::Function::Arg::MinSize
      uses variable arg defined in CppcheckLibraryData::Function::Arg::MinSize
      uses variable arg2 defined in CppcheckLibraryData::Function::Arg::MinSize
   function writeMemoryResource(QXmlStreamWriter &,const CppcheckLibraryData::MemoryResource &) in line 359
      protection public
      17 lines of code
      2 parameters
      4 conditional paths
      uses variable type defined in CppcheckLibraryData::MemoryResource
      uses variable alloc defined in CppcheckLibraryData::MemoryResource
      uses variable init defined in CppcheckLibraryData::MemoryResource::Alloc
      uses variable name defined in CppcheckLibraryData::MemoryResource::Alloc
      uses variable dealloc defined in CppcheckLibraryData::MemoryResource
      uses variable use defined in CppcheckLibraryData::MemoryResource
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/gui/cppchecklibrarydata.h
module CppcheckLibraryData
   function clear() in line 134
      protection public
      6 lines of code
      0 parameters
      1 conditional paths
      uses variable defines defined in CppcheckLibraryData
      uses variable functions defined in CppcheckLibraryData
      uses variable memoryresource defined in CppcheckLibraryData
      uses variable podtypes defined in CppcheckLibraryData
      uses function open(QIODevice &) defined in CppcheckLibraryData
      uses function toString() defined in CppcheckLibraryData
   function open(QIODevice &) in line 141
      protection public
      33 lines of code
      1 parameters
      10 conditional paths
      uses function clear() defined in CppcheckLibraryData
      uses variable containers defined in CppcheckLibraryData
      uses variable defines defined in CppcheckLibraryData
      uses variable functions defined in CppcheckLibraryData
      uses variable memoryresource defined in CppcheckLibraryData
      uses variable podtypes defined in CppcheckLibraryData
   function toString() in line 142
      protection public
      43 lines of code
      0 parameters
      8 conditional paths
      uses variable defines defined in CppcheckLibraryData
      uses variable name defined in CppcheckLibraryData::Define
      uses variable value defined in CppcheckLibraryData::Define
      uses variable functions defined in CppcheckLibraryData
      uses variable memoryresource defined in CppcheckLibraryData
      uses variable containers defined in CppcheckLibraryData
      uses variable podtypes defined in CppcheckLibraryData
      uses variable name defined in CppcheckLibraryData::PodType
      uses variable sign defined in CppcheckLibraryData::PodType
      uses variable size defined in CppcheckLibraryData::PodType
   function CppcheckLibraryData() in line 29
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   variable containers in line 144
      protection public
   variable defines in line 145
      protection public
   variable functions in line 146
      protection public
   variable memoryresource in line 147
      protection public
   variable podtypes in line 148
      protection public
module CppcheckLibraryData::Container
   function Container() in line 32
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   variable access_arrayLike in line 39
      protection public
   variable accessFunctions in line 52
      protection public
   variable endPattern in line 37
      protection public
   variable id in line 34
      protection public
   variable inherits in line 35
      protection public
   variable otherFunctions in line 53
      protection public
   variable size_templateParameter in line 40
      protection public
   variable sizeFunctions in line 54
      protection public
   variable startPattern in line 36
      protection public
   variable string in line 44
      protection public
   variable templateParameter in line 43
      protection public
   variable type in line 45
      protection public
module CppcheckLibraryData::Container::@7
   variable string in line 44
      protection public
   variable templateParameter in line 43
      protection public
module CppcheckLibraryData::Container::Function
   variable action in line 50
      protection public
   variable name in line 48
      protection public
   variable yields in line 49
      protection public
module CppcheckLibraryData::Define
   variable name in line 58
      protection public
   variable value in line 59
      protection public
module CppcheckLibraryData::Function
   function Function() in line 63
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   variable alternatives in line 104
      protection public
   variable args in line 99
      protection public
   variable comments in line 67
      protection public
   variable formatstr in line 77
      protection public
   variable gccConst in line 71
      protection public
   variable gccPure in line 70
      protection public
   variable leakignore in line 72
      protection public
   variable msg in line 105
      protection public
   variable name in line 68
      protection public
   variable noreturn in line 69
      protection public
   variable reason in line 103
      protection public
   variable scan in line 75
      protection public
   variable secure in line 76
      protection public
   variable severity in line 102
      protection public
   variable useretval in line 73
      protection public
   variable warn in line 113
      protection public
module CppcheckLibraryData::Function::@8
   variable scan in line 75
      protection public
   variable secure in line 76
      protection public
module CppcheckLibraryData::Function::Arg
   function Arg() in line 79
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   variable ANY in line 85
      protection public
   variable formatstr in line 89
      protection public
   variable minsizes in line 97
      protection public
   variable name in line 83
      protection public
   variable notbool in line 86
      protection public
   variable notnull in line 87
      protection public
   variable notuninit in line 88
      protection public
   variable nr in line 84
      protection public
   variable strz in line 90
      protection public
   variable valid in line 91
      protection public
module CppcheckLibraryData::Function::Arg::MinSize
   variable arg in line 94
      protection public
   variable arg2 in line 95
      protection public
   variable type in line 93
      protection public
module CppcheckLibraryData::Function::@9
   variable alternatives in line 104
      protection public
   variable msg in line 105
      protection public
   variable reason in line 103
      protection public
   variable severity in line 102
      protection public
module CppcheckLibraryData::MemoryResource
   variable alloc in line 123
      protection public
   variable dealloc in line 124
      protection public
   variable type in line 117
      protection public
   variable use in line 125
      protection public
module CppcheckLibraryData::MemoryResource::Alloc
   function Alloc() in line 119
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   variable init in line 120
      protection public
   variable name in line 121
      protection public
module CppcheckLibraryData::PodType
   variable name in line 129
      protection public
   variable sign in line 131
      protection public
   variable size in line 130
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/gui/csvreport.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/gui/csvreport.h
module CsvReport
   inherits from Report
   function Create() in line 45
      protection public
      8 lines of code
      0 parameters
      2 conditional paths
      uses function Create() defined in Report
      uses variable mTxtWriter defined in CsvReport
      uses function GetFile() defined in Report
   function WriteError(const ErrorItem &) in line 61
      protection public
      13 lines of code
      1 parameters
      1 conditional paths
      uses variable files defined in ErrorItem
      uses variable line defined in triage-report.py
      uses variable lines defined in ErrorItem
      uses variable severity defined in ErrorItem
      uses variable summary defined in ErrorItem
      uses variable mTxtWriter defined in CsvReport
   function WriteFooter() in line 55
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function WriteHeader() in line 50
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function CsvReport(const QString &) in line 38
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function ~CsvReport() in line 39
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   variable mTxtWriter in line 68
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/gui/erroritem.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/gui/erroritem.h
module erroritem.h
   function Q_DECLARE_METATYPE(ErrorItem) in line 79
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
module GuiSeverity
   function fromString(const QString &) in line 44
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function toString(Severity::SeverityType) in line 40
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
module ErrorItem
   function ToString() in line 66
      protection public
      13 lines of code
      0 parameters
      3 conditional paths
      uses variable file defined in ErrorItem
      uses variable errorId defined in ErrorItem
      uses variable inconclusive defined in ErrorItem
      uses function toString(Severity::SeverityType) defined in GuiSeverity
      uses variable severity defined in ErrorItem
      uses variable summary defined in ErrorItem
      uses variable message defined in ErrorItem
      uses variable files defined in ErrorItem
      uses variable lines defined in ErrorItem
   function ErrorItem() in line 59
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
   function ErrorItem(const ErrorLine &) in line 60
      protection public
      11 lines of code
      1 parameters
      1 conditional paths
      uses variable lines defined in ErrorItem
      uses variable line defined in triage-report.py
   variable errorId in line 72
      protection public
   variable file in line 68
      protection public
   variable file0 in line 70
      protection public
   variable files in line 69
      protection public
   variable inconclusive in line 74
      protection public
   variable lines in line 71
      protection public
   variable message in line 76
      protection public
   variable severity in line 73
      protection public
   variable summary in line 75
      protection public
module ErrorLine
   variable errorId in line 88
      protection public
   variable file in line 86
      protection public
   variable inconclusive in line 89
      protection public
   variable line in line 87
      protection public
   variable message in line 92
      protection public
   variable severity in line 90
      protection public
   variable summary in line 91
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/gui/filelist.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/gui/filelist.h
module FileList
   function AddDirectory(const QString &,bool) in line 51
      protection public
      26 lines of code
      2 parameters
      3 conditional paths
      uses function GetDefaultFilters() defined in FileList
      uses variable mFileList defined in FileList
      uses variable path defined in daca2-report.py
   function AddExcludeList(const QStringList &) in line 69
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable mExcludedPaths defined in FileList
   function AddFile(const QString &) in line 44
      protection public
      6 lines of code
      1 parameters
      2 conditional paths
      uses function FilterMatches(const QFileInfo &) defined in FileList
      uses variable mFileList defined in FileList
   function AddPathList(const QStringList &) in line 57
      protection public
      11 lines of code
      1 parameters
      3 conditional paths
      uses variable path defined in daca2-report.py
      uses function AddFile(const QString &) defined in FileList
      uses function AddDirectory(const QString &,bool) defined in FileList
   function ApplyExcludeList() in line 92
      10 lines of code
      0 parameters
      3 conditional paths
      uses variable mFileList defined in FileList
      uses variable name defined in setup.py
      uses function Match(const QString &) defined in FileList
   function FilterMatches(const QFileInfo &) in line 83
      11 lines of code
      1 parameters
      3 conditional paths
      uses function GetDefaultFilters() defined in FileList
   function GetDefaultFilters() in line 75
      protection public
      6 lines of code
      0 parameters
      1 conditional paths
   function GetFileList() in line 63
      protection public
      13 lines of code
      0 parameters
      3 conditional paths
      uses variable mExcludedPaths defined in FileList
      uses variable mFileList defined in FileList
      uses variable name defined in setup.py
      uses function ApplyExcludeList() defined in FileList
   function Match(const QString &) in line 99
      14 lines of code
      1 parameters
      5 conditional paths
      uses variable mExcludedPaths defined in FileList
      uses variable path defined in daca2-report.py
   variable mExcludedPaths in line 103
   variable mFileList in line 102
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/gui/fileviewdialog.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/gui/fileviewdialog.h
module FileViewDialog
   inherits from QDialog
   function FormatTitle(const QString &) in line 62
      1 lines of code
      1 parameters
      1 conditional paths
   function LoadTextFile(const QString &,QTextEdit *) in line 55
      35 lines of code
      2 parameters
      3 conditional paths
      uses variable filename defined in extracttests.py
      uses variable msg defined in findcasts.py
   function FileViewDialog(const QString &,const QString &,QWidget *) in line 42
      protection public
      12 lines of code
      3 parameters
      1 conditional paths
      uses variable mUI defined in FileViewDialog
      uses function LoadTextFile(const QString &,QTextEdit *) defined in FileViewDialog
   variable mUI in line 64
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/gui/libraryaddfunctiondialog.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/gui/libraryaddfunctiondialog.h
module libraryaddfunctiondialog.h
   macro definition SIMPLENAME in line 6
      protection public
   macro definition SCOPENAME in line 7
      protection public
   macro definition NAMES in line 8
      protection public
module LibraryAddFunctionDialog
   inherits from QDialog
   function functionName() in line 21
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable ui defined in LibraryAddFunctionDialog
   function numberOfArguments() in line 22
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable ui defined in LibraryAddFunctionDialog
   function LibraryAddFunctionDialog(QWidget *) in line 18
      protection public
      9 lines of code
      1 parameters
      1 conditional paths
      uses variable ui defined in LibraryAddFunctionDialog
      uses macro definition NAMES defined in libraryaddfunctiondialog.h
   function ~LibraryAddFunctionDialog() in line 19
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable ui defined in LibraryAddFunctionDialog
   variable ui in line 25
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/gui/librarydialog.cpp
module FunctionListItem
   inherits from QListWidgetItem
   function FunctionListItem(QListWidget *,CppcheckLibraryData::Function *,bool) in line 36
      protection public
      8 lines of code
      3 parameters
      1 conditional paths
      uses variable function defined in FunctionListItem
      uses variable name defined in CppcheckLibraryData::Function
   variable function in line 44
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/gui/librarydialog.h
module LibraryDialog
   inherits from QDialog
   slot addFunction in line 44
   slot changeFunction in line 45
   function currentFunction() in line 59
      7 lines of code
      0 parameters
      2 conditional paths
      uses variable ui defined in LibraryDialog
   slot editArg in line 46
   slot editFunctionName in line 47
   slot filterFunctions in line 48
   function getArgText(const CppcheckLibraryData::Function::Arg &) in line 58
      17 lines of code
      1 parameters
      3 conditional paths
      uses variable s defined in extracttests.py
      uses variable nr defined in CppcheckLibraryData::Function::Arg
      uses variable ANY defined in CppcheckLibraryData::Function::Arg
      uses variable notbool defined in CppcheckLibraryData::Function::Arg
      uses variable notnull defined in CppcheckLibraryData::Function::Arg
      uses variable notuninit defined in CppcheckLibraryData::Function::Arg
      uses variable formatstr defined in CppcheckLibraryData::Function::Arg
      uses variable strz defined in CppcheckLibraryData::Function::Arg
      uses variable valid defined in CppcheckLibraryData::Function::Arg
      uses variable minsizes defined in CppcheckLibraryData::Function::Arg
      uses variable type defined in CppcheckLibraryData::Function::Arg::MinSize
      uses variable arg defined in CppcheckLibraryData::Function::Arg::MinSize
      uses variable arg2 defined in CppcheckLibraryData::Function::Arg::MinSize
   slot openCfg in line 41
   slot saveCfg in line 42
   slot saveCfgAs in line 43
   slot selectFunction in line 49
   slot sortFunctions in line 50
   function updateArguments(const CppcheckLibraryData::Function &) in line 60
      7 lines of code
      1 parameters
      2 conditional paths
      uses variable ui defined in LibraryDialog
      uses function getArgText(const CppcheckLibraryData::Function::Arg &) defined in LibraryDialog
   function LibraryDialog(QWidget *) in line 37
      protection public
      15 lines of code
      1 parameters
      1 conditional paths
      uses variable ui defined in LibraryDialog
      uses slot selectFunction defined in LibraryDialog
   function ~LibraryDialog() in line 38
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable ui defined in LibraryDialog
   variable data in line 54
   variable ignoreChanges in line 56
   variable mFileName in line 55
   variable ui in line 53
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/gui/libraryeditargdialog.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/gui/libraryeditargdialog.h
module LibraryEditArgDialog
   inherits from QDialog
   function getArg() in line 18
      protection public
      28 lines of code
      0 parameters
      5 conditional paths
      uses variable notbool defined in CppcheckLibraryData::Function::Arg
      uses variable ui defined in LibraryEditArgDialog
      uses variable notnull defined in CppcheckLibraryData::Function::Arg
      uses variable notuninit defined in CppcheckLibraryData::Function::Arg
      uses variable strz defined in CppcheckLibraryData::Function::Arg
      uses variable formatstr defined in CppcheckLibraryData::Function::Arg
      uses variable type defined in CppcheckLibraryData::Function::Arg::MinSize
      uses variable arg defined in CppcheckLibraryData::Function::Arg::MinSize
      uses variable arg2 defined in CppcheckLibraryData::Function::Arg::MinSize
      uses variable minsizes defined in CppcheckLibraryData::Function::Arg
      uses variable valid defined in CppcheckLibraryData::Function::Arg
   slot minsizeChanged in line 21
   function LibraryEditArgDialog(QWidget *,const CppcheckLibraryData::Function::Arg &) in line 15
      protection public
      53 lines of code
      2 parameters
      5 conditional paths
      uses variable ui defined in LibraryEditArgDialog
      uses variable notbool defined in CppcheckLibraryData::Function::Arg
      uses variable notnull defined in CppcheckLibraryData::Function::Arg
      uses variable notuninit defined in CppcheckLibraryData::Function::Arg
      uses variable strz defined in CppcheckLibraryData::Function::Arg
      uses variable formatstr defined in CppcheckLibraryData::Function::Arg
      uses variable valid defined in CppcheckLibraryData::Function::Arg
      uses variable minsizes defined in CppcheckLibraryData::Function::Arg
      uses variable minsizes defined in LibraryEditArgDialog
   function ~LibraryEditArgDialog() in line 16
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable ui defined in LibraryEditArgDialog
   variable minsizes in line 26
   variable ui in line 24
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/gui/logview.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/gui/logview.h
module LogView
   inherits from QWidget
   function AppendLine(const QString &) in line 43
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable mUI defined in LogView
      uses variable line defined in triage-report.py
   slot ClearButtonClicked in line 57
   slot CloseButtonClicked in line 51
   slot SaveButtonClicked in line 63
   function LogView(QWidget *) in line 35
      protection public
      15 lines of code
      1 parameters
      1 conditional paths
      uses variable mUI defined in LogView
      uses slot CloseButtonClicked defined in LogView
      uses slot ClearButtonClicked defined in LogView
      uses slot SaveButtonClicked defined in LogView
      uses macro definition SETTINGS_LOG_VIEW_WIDTH defined in common.h
      uses macro definition SETTINGS_LOG_VIEW_HEIGHT defined in common.h
   function ~LogView() in line 36
      protection public
      6 lines of code
      0 parameters
      1 conditional paths
      uses macro definition SETTINGS_LOG_VIEW_WIDTH defined in common.h
      uses macro definition SETTINGS_LOG_VIEW_HEIGHT defined in common.h
   variable mUI in line 66
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/gui/mainwindow.cpp
module mainwindow.cpp
   function OnlineHelpURL("http://cppcheck.sourceforge.net/manual.html") in line 49
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/gui/mainwindow.h
module MainWindow
   inherits from QMainWindow
   slot About in line 173
      protection public
   slot AboutToShowViewMenu in line 279
   function AddIncludeDirs(const QStringList &,Settings &) in line 431
      16 lines of code
      2 parameters
      4 conditional paths
      uses variable mCurrentDirectory defined in MainWindow
      uses variable result defined in triage-report.py
   function AddProjectMRU(const QString &) in line 483
      11 lines of code
      1 parameters
      2 conditional paths
      uses variable mSettings defined in MainWindow
      uses macro definition SETTINGS_MRU_PROJECTS defined in common.h
      uses variable project defined in triage-report.py
      uses enumvalue MaxRecentProjects defined in MainWindow
      uses function UpdateMRUMenuItems() defined in MainWindow
   slot CheckAll in line 150
      protection public
   function CheckCode(const QString &,const QString &) in line 71
      protection public
      25 lines of code
      2 parameters
      1 conditional paths
      uses variable result defined in triage-report.py
      uses variable filename defined in extracttests.py
      uses variable mUI defined in MainWindow
      uses slot Log defined in MainWindow
      uses slot DebugError defined in MainWindow
      uses function settings() defined in CppCheck
      uses function GetCppcheckSettings() defined in MainWindow
      uses slot CheckLockDownUI defined in MainWindow
      uses slot ClearResults defined in MainWindow
      uses function check(const std::string &) defined in CppCheck
      uses variable code defined in extracttests.py
      uses slot CheckDone defined in MainWindow
   slot CheckDirectory in line 161
      protection public
   slot CheckDone in line 247
   slot CheckFiles in line 79
      protection public
   slot CheckLockDownUI in line 253
   function CheckProject(Project *) in line 339
      42 lines of code
      1 parameters
      8 conditional paths
      uses variable project defined in triage-report.py
      uses variable mProject defined in MainWindow
      uses variable mCurrentDirectory defined in MainWindow
      uses variable path defined in daca2-report.py
      uses function DoCheckFiles(const QStringList &) defined in MainWindow
   slot ClearResults in line 103
      protection public
   function closeEvent(QCloseEvent *) in line 350
      28 lines of code
      1 parameters
      3 conditional paths
      uses variable mThread defined in MainWindow
      uses function IsChecking() defined in ThreadHandler
      uses function SaveSettings() defined in MainWindow
      uses variable msg defined in findcasts.py
      uses slot Stop defined in ThreadHandler
      uses variable mExiting defined in MainWindow
   slot CloseProjectFile in line 215
      protection public
   slot DebugError in line 303
   function DoCheckFiles(const QStringList &) in line 379
      44 lines of code
      1 parameters
      5 conditional paths
      uses slot ClearResults defined in MainWindow
      uses function AddPathList(const QStringList &) defined in FileList
      uses variable mProject defined in MainWindow
      uses function AddExcludeList(const QStringList &) defined in FileList
      uses function GetProjectFile() defined in Project
      uses function GetExcludedPaths() defined in ProjectFile
      uses function GetFileList() defined in FileList
      uses variable mUI defined in MainWindow
      uses variable mThread defined in MainWindow
      uses function ClearFiles() defined in ThreadHandler
      uses variable msg defined in findcasts.py
      uses function SetFiles(const QStringList &) defined in ThreadHandler
      uses variable mCurrentDirectory defined in MainWindow
      uses function SetPath(const QString &,const QString &) defined in common.cpp
      uses macro definition SETTINGS_LAST_CHECK_PATH defined in common.h
      uses slot CheckLockDownUI defined in MainWindow
      uses function GetCppcheckSettings() defined in MainWindow
      uses function GetFilename() defined in ProjectFile
      uses function SetCheckFiles(bool) defined in ThreadHandler
      uses function Check(const Settings &,bool) defined in ThreadHandler
   slot EditProjectFile in line 221
      protection public
   function EnableCheckButtons(bool) in line 362
      12 lines of code
      1 parameters
      2 conditional paths
      uses variable mUI defined in MainWindow
      uses variable mThread defined in MainWindow
      uses function HasPreviousFiles() defined in ThreadHandler
   function EnableProjectActions(bool) in line 417
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable mUI defined in MainWindow
   function EnableProjectOpenActions(bool) in line 424
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable mUI defined in MainWindow
   slot FilterResults in line 308
   function FormatAndSetTitle(const QString &) in line 404
      9 lines of code
      1 parameters
      2 conditional paths
   function GetCppcheckSettings() in line 386
      83 lines of code
      0 parameters
      12 conditional paths
      uses function SaveSettings() defined in MainWindow
      uses variable result defined in triage-report.py
      uses variable mProject defined in MainWindow
      uses function GetProjectFile() defined in Project
      uses function GetIncludeDirs() defined in ProjectFile
      uses function AddIncludeDirs(const QStringList &,Settings &) defined in MainWindow
      uses function GetDefines() defined in ProjectFile
      uses function GetLibraries() defined in ProjectFile
      uses variable filename defined in extracttests.py
      uses function TryLoadLibrary(Library *,QString) defined in MainWindow
      uses function GetSuppressions() defined in ProjectFile
      uses variable mSettings defined in MainWindow
      uses macro definition SETTINGS_GLOBAL_INCLUDE_PATHS defined in common.h
      uses macro definition SETTINGS_SHOW_DEBUG_WARNINGS defined in common.h
      uses macro definition SETTINGS_CHECK_FORCE defined in common.h
      uses macro definition SETTINGS_CHECK_THREADS defined in common.h
      uses macro definition SETTINGS_INLINE_SUPPRESSIONS defined in common.h
      uses macro definition SETTINGS_INCONCLUSIVE_ERRORS defined in common.h
      uses macro definition SETTINGS_CHECKED_PLATFORM defined in common.h
      uses macro definition SETTINGS_STD_CPP11 defined in common.h
      uses enumvalue CPP11 defined in Standards
      uses enumvalue CPP03 defined in Standards
      uses macro definition SETTINGS_STD_C99 defined in common.h
      uses enumvalue C99 defined in Standards
      uses macro definition SETTINGS_STD_C11 defined in common.h
      uses enumvalue C11 defined in Standards
      uses enumvalue C89 defined in Standards
      uses macro definition SETTINGS_STD_POSIX defined in common.h
      uses macro definition SETTINGS_ENFORCED_LANGUAGE defined in common.h
      uses enumvalue Win32A defined in Settings
      uses enumvalue Win32W defined in Settings
      uses enumvalue Win64 defined in Settings
   function HandleCLIParams(const QStringList &) in line 437
      30 lines of code
      1 parameters
      9 conditional paths
      uses function LoadProjectFile(const QString &) defined in MainWindow
      uses function LoadResults(const QString) defined in MainWindow
      uses function DoCheckFiles(const QStringList &) defined in MainWindow
   function LoadLibrary(Library *,QString) in line 464
      34 lines of code
      2 parameters
      8 conditional paths
      uses variable mProject defined in MainWindow
      uses variable path defined in daca2-report.py
      uses function GetProjectFile() defined in Project
      uses function GetFilename() defined in ProjectFile
      uses function load(const char,const char) defined in Library
      uses variable filename defined in extracttests.py
      uses variable errorcode defined in Library::Error
      uses variable mSettings defined in MainWindow
   function LoadProjectFile(const QString &) in line 456
      13 lines of code
      1 parameters
      1 conditional paths
      uses variable filename defined in extracttests.py
      uses function FormatAndSetTitle(const QString &) defined in MainWindow
      uses function AddProjectMRU(const QString &) defined in MainWindow
      uses variable mUI defined in MainWindow
      uses variable mProject defined in MainWindow
      uses function CheckProject(Project *) defined in MainWindow
   function LoadResults(const QString) in line 443
      8 lines of code
      1 parameters
      2 conditional paths
      uses variable mUI defined in MainWindow
      uses function SetPath(const QString &,const QString &) defined in common.cpp
      uses macro definition SETTINGS_LAST_RESULT_PATH defined in common.h
   function LoadResults(const QString,const QString) in line 450
      5 lines of code
      2 parameters
      1 conditional paths
      uses function LoadResults(const QString) defined in MainWindow
      uses variable mUI defined in MainWindow
   function LoadSettings() in line 392
      68 lines of code
      0 parameters
      5 conditional paths
      uses variable mSettings defined in MainWindow
      uses macro definition SETTINGS_WINDOW_MAXIMIZED defined in common.h
      uses macro definition SETTINGS_WINDOW_WIDTH defined in common.h
      uses macro definition SETTINGS_WINDOW_HEIGHT defined in common.h
      uses variable mUI defined in MainWindow
      uses enumvalue ShowStyle defined in ShowTypes
      uses enumvalue ShowErrors defined in ShowTypes
      uses enumvalue ShowWarnings defined in ShowTypes
      uses enumvalue ShowPortability defined in ShowTypes
      uses enumvalue ShowPerformance defined in ShowTypes
      uses enumvalue ShowInformation defined in ShowTypes
      uses macro definition SETTINGS_STD_CPP03 defined in common.h
      uses macro definition SETTINGS_STD_CPP11 defined in common.h
      uses macro definition SETTINGS_STD_C89 defined in common.h
      uses macro definition SETTINGS_STD_C11 defined in common.h
      uses macro definition SETTINGS_STD_C99 defined in common.h
      uses macro definition SETTINGS_STD_POSIX defined in common.h
      uses macro definition SETTINGS_TOOLBARS_MAIN_SHOW defined in common.h
      uses macro definition SETTINGS_TOOLBARS_VIEW_SHOW defined in common.h
      uses macro definition SETTINGS_TOOLBARS_FILTER_SHOW defined in common.h
      uses macro definition SETTINGS_ENFORCED_LANGUAGE defined in common.h
      uses enumvalue CPP defined in Settings
      uses enumvalue C defined in Settings
      uses variable mApplications defined in MainWindow
      uses function LoadSettings() defined in ApplicationList
      uses variable msg defined in findcasts.py
   slot Log in line 297
   slot NewProjectFile in line 197
      protection public
   slot OpenHelpContents in line 291
   function OpenOnlineHelp() in line 409
      4 lines of code
      0 parameters
      1 conditional paths
   slot OpenProjectFile in line 203
      protection public
   slot OpenRecentProject in line 313
   slot OpenResults in line 109
      protection public
   slot PerformSelectedFilesCheck in line 91
      protection public
   slot ProgramSettings in line 167
      protection public
   function ReCheck(bool) in line 326
      22 lines of code
      1 parameters
      4 conditional paths
      uses variable mThread defined in MainWindow
      uses function GetReCheckFiles(bool) defined in ThreadHandler
      uses variable mUI defined in MainWindow
      uses slot CheckLockDownUI defined in MainWindow
      uses variable mProject defined in MainWindow
      uses function GetProjectFile() defined in Project
      uses function GetFilename() defined in ProjectFile
      uses function SetCheckFiles(bool) defined in ThreadHandler
      uses function Check(const Settings &,bool) defined in ThreadHandler
      uses function GetCppcheckSettings() defined in MainWindow
   slot ReCheckAll in line 85
      protection public
   slot ReCheckModified in line 97
      protection public
   function ReCheckSelected(QStringList,bool) in line 333
      28 lines of code
      2 parameters
      5 conditional paths
      uses variable mThread defined in MainWindow
      uses function IsChecking() defined in ThreadHandler
      uses variable mUI defined in MainWindow
      uses function AddPathList(const QStringList &) defined in FileList
      uses variable mProject defined in MainWindow
      uses function AddExcludeList(const QStringList &) defined in FileList
      uses function GetProjectFile() defined in Project
      uses function GetExcludedPaths() defined in ProjectFile
      uses function GetFileList() defined in FileList
      uses slot CheckLockDownUI defined in MainWindow
      uses function SetCheckFiles(bool) defined in ThreadHandler
      uses function GetCheckStartTime() defined in ThreadHandler
      uses function Check(const Settings &,bool) defined in ThreadHandler
      uses function GetCppcheckSettings() defined in MainWindow
      uses function SetCheckStartTime(QDateTime) defined in ThreadHandler
   function RemoveProjectMRU(const QString &) in line 489
      8 lines of code
      1 parameters
      1 conditional paths
      uses variable mSettings defined in MainWindow
      uses macro definition SETTINGS_MRU_PROJECTS defined in common.h
      uses variable project defined in triage-report.py
      uses function UpdateMRUMenuItems() defined in MainWindow
   slot ResultsAdded in line 259
   slot Save in line 191
      protection public
   function SaveSettings() in line 398
      39 lines of code
      0 parameters
      3 conditional paths
      uses variable mSettings defined in MainWindow
      uses macro definition SETTINGS_WINDOW_WIDTH defined in common.h
      uses macro definition SETTINGS_WINDOW_HEIGHT defined in common.h
      uses macro definition SETTINGS_WINDOW_MAXIMIZED defined in common.h
      uses macro definition SETTINGS_SHOW_STYLE defined in common.h
      uses variable mUI defined in MainWindow
      uses macro definition SETTINGS_SHOW_ERRORS defined in common.h
      uses macro definition SETTINGS_SHOW_WARNINGS defined in common.h
      uses macro definition SETTINGS_SHOW_PORTABILITY defined in common.h
      uses macro definition SETTINGS_SHOW_PERFORMANCE defined in common.h
      uses macro definition SETTINGS_SHOW_INFORMATION defined in common.h
      uses macro definition SETTINGS_STD_CPP03 defined in common.h
      uses macro definition SETTINGS_STD_CPP11 defined in common.h
      uses macro definition SETTINGS_STD_C89 defined in common.h
      uses macro definition SETTINGS_STD_C99 defined in common.h
      uses macro definition SETTINGS_STD_C11 defined in common.h
      uses macro definition SETTINGS_STD_POSIX defined in common.h
      uses macro definition SETTINGS_TOOLBARS_MAIN_SHOW defined in common.h
      uses macro definition SETTINGS_TOOLBARS_VIEW_SHOW defined in common.h
      uses macro definition SETTINGS_TOOLBARS_FILTER_SHOW defined in common.h
      uses macro definition SETTINGS_ENFORCED_LANGUAGE defined in common.h
      uses enumvalue CPP defined in Settings
      uses enumvalue C defined in Settings
      uses enumvalue None defined in Settings
      uses variable mApplications defined in MainWindow
      uses function SaveSettings() defined in ApplicationList
      uses macro definition SETTINGS_LANGUAGE defined in common.h
      uses variable mTranslation defined in MainWindow
      uses function GetCurrentLanguage() defined in TranslationHandler
   function SelectFilesToCheck(QFileDialog::FileMode) in line 372
      47 lines of code
      1 parameters
      6 conditional paths
      uses variable mProject defined in MainWindow
      uses variable msg defined in findcasts.py
      uses function GetPath(const QString &) defined in common.cpp
      uses macro definition SETTINGS_LAST_CHECK_PATH defined in common.h
      uses variable mCurrentDirectory defined in MainWindow
      uses function FormatAndSetTitle(const QString &) defined in MainWindow
      uses function SetPath(const QString &,const QString &) defined in common.cpp
   slot SelectPlatform in line 318
   function SetLanguage(const QString &) in line 345
      14 lines of code
      1 parameters
      3 conditional paths
      uses variable mTranslation defined in MainWindow
      uses function GetCurrentLanguage() defined in TranslationHandler
      uses variable code defined in extracttests.py
      uses function SetLanguage(const QString &) defined in TranslationHandler
      uses variable mUI defined in MainWindow
      uses variable mLogView defined in MainWindow
   slot ShowAuthors in line 185
      protection public
   slot ShowErrors in line 121
      protection public
   slot ShowInformation in line 145
      protection public
   slot ShowLibraryEditor in line 239
      protection public
   slot ShowLicense in line 179
      protection public
   slot ShowLogView in line 227
      protection public
   slot ShowPerformance in line 139
      protection public
   slot ShowPortability in line 133
      protection public
   slot ShowScratchpad in line 209
      protection public
   slot ShowStatistics in line 233
      protection public
   slot ShowStyle in line 115
      protection public
   slot ShowWarnings in line 127
      protection public
   slot StopChecking in line 285
   function ToggleAllChecked(bool) in line 356
      15 lines of code
      1 parameters
      1 conditional paths
      uses variable mUI defined in MainWindow
      uses slot ShowStyle defined in MainWindow
      uses slot ShowErrors defined in MainWindow
      uses slot ShowWarnings defined in MainWindow
      uses slot ShowPortability defined in MainWindow
      uses slot ShowPerformance defined in MainWindow
      uses slot ShowInformation defined in MainWindow
   slot ToggleFilterToolBar in line 274
   slot ToggleMainToolBar in line 264
   slot ToggleViewToolBar in line 269
   function TryLoadLibrary(Library *,QString) in line 472
      48 lines of code
      2 parameters
      13 conditional paths
      uses function LoadLibrary(Library *,QString) defined in MainWindow
      uses variable filename defined in extracttests.py
      uses variable errorcode defined in Library::Error
      uses enumvalue UNKNOWN_ELEMENT defined in Library
      uses variable reason defined in Library::Error
   slot UncheckAll in line 155
      protection public
   function UpdateMRUMenuItems() in line 477
      35 lines of code
      0 parameters
      8 conditional paths
      uses enumvalue MaxRecentProjects defined in MainWindow
      uses variable mRecentProjectActs defined in MainWindow
      uses variable mUI defined in MainWindow
      uses variable mSettings defined in MainWindow
      uses macro definition SETTINGS_MRU_PROJECTS defined in common.h
      uses variable filename defined in extracttests.py
   function MainWindow(TranslationHandler *,QSettings *) in line 57
      protection public
      156 lines of code
      2 parameters
      4 conditional paths
      uses variable mUI defined in MainWindow
      uses variable mThread defined in MainWindow
      uses variable mSettings defined in MainWindow
      uses variable mApplications defined in MainWindow
      uses variable mFilterTimer defined in MainWindow
      uses slot FilterResults defined in MainWindow
      uses variable mLineEditFilter defined in MainWindow
      uses slot CheckFiles defined in MainWindow
      uses slot CheckDirectory defined in MainWindow
      uses slot ProgramSettings defined in MainWindow
      uses slot ClearResults defined in MainWindow
      uses slot OpenResults defined in MainWindow
      uses slot ShowStyle defined in MainWindow
      uses slot ShowErrors defined in MainWindow
      uses slot ShowWarnings defined in MainWindow
      uses slot ShowPortability defined in MainWindow
      uses slot ShowPerformance defined in MainWindow
      uses slot ShowInformation defined in MainWindow
      uses slot CheckAll defined in MainWindow
      uses slot UncheckAll defined in MainWindow
      uses slot ShowLogView defined in MainWindow
      uses slot ShowStatistics defined in MainWindow
      uses slot ShowLibraryEditor defined in MainWindow
      uses slot ReCheckModified defined in MainWindow
      uses slot ReCheckAll defined in MainWindow
      uses slot StopChecking defined in MainWindow
      uses slot Save defined in MainWindow
      uses slot About defined in MainWindow
      uses slot ShowLicense defined in MainWindow
      uses slot ToggleMainToolBar defined in MainWindow
      uses slot ToggleViewToolBar defined in MainWindow
      uses slot ToggleFilterToolBar defined in MainWindow
      uses slot ShowAuthors defined in MainWindow
      uses slot CheckDone defined in MainWindow
      uses slot ResultsAdded defined in MainWindow
      uses slot PerformSelectedFilesCheck defined in MainWindow
      uses slot AboutToShowViewMenu defined in MainWindow
      uses slot NewProjectFile defined in MainWindow
      uses slot OpenProjectFile defined in MainWindow
      uses slot ShowScratchpad defined in MainWindow
      uses slot CloseProjectFile defined in MainWindow
      uses slot EditProjectFile defined in MainWindow
      uses slot OpenHelpContents defined in MainWindow
      uses function LoadSettings() defined in MainWindow
      uses function Initialize(ResultsView *) defined in ThreadHandler
      uses function FormatAndSetTitle(const QString &) defined in MainWindow
      uses function EnableCheckButtons(bool) defined in MainWindow
      uses function EnableProjectOpenActions(bool) defined in MainWindow
      uses function EnableProjectActions(bool) defined in MainWindow
      uses enumvalue MaxRecentProjects defined in MainWindow
      uses variable mRecentProjectActs defined in MainWindow
      uses slot OpenRecentProject defined in MainWindow
      uses function UpdateMRUMenuItems() defined in MainWindow
      uses function HandleCLIParams(const QStringList &) defined in MainWindow
      uses variable mPlatforms defined in MainWindow
      uses function getCount() defined in Platforms
      uses variable mPlatforms defined in Platforms
      uses variable mActMainWindow defined in Platform
      uses variable mTitle defined in Platform
      uses variable mType defined in Platform
      uses variable mPlatformActions defined in MainWindow
      uses slot SelectPlatform defined in MainWindow
      uses variable mCStandardActions defined in MainWindow
      uses variable mCppStandardActions defined in MainWindow
      uses variable mSelectLanguageActions defined in MainWindow
      uses enumvalue Win32W defined in Settings
      uses enumvalue Unspecified defined in Settings
      uses function get(Settings::PlatformType) defined in Platforms
      uses macro definition SETTINGS_CHECKED_PLATFORM defined in common.h
   function ~MainWindow() in line 58
      protection public
      6 lines of code
      0 parameters
      1 conditional paths
      uses variable mLogView defined in MainWindow
      uses variable mProject defined in MainWindow
      uses variable mScratchPad defined in MainWindow
   variable mApplications in line 507
   variable mCppStandardActions in line 559
   variable mCStandardActions in line 559
   variable mCurrentDirectory in line 524
   variable mExiting in line 571
   variable mFilterTimer in line 549
   variable mLineEditFilter in line 544
   variable mLogView in line 529
   variable mPlatformActions in line 554
   variable mPlatforms in line 63
      protection public
   variable mProject in line 539
   variable mRecentProjectActs in line 577
   variable mScratchPad in line 534
   variable mSelectLanguageActions in line 564
   variable mSettings in line 495
   variable mThread in line 501
   variable mTranslation in line 513
   variable mUI in line 519
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/gui/platforms.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/gui/platforms.h
module Platform
   variable mActMainWindow in line 37
      protection public
   variable mTitle in line 35
      protection public
   variable mType in line 36
      protection public
module Platforms
   inherits from QObject
   function add(const QString &,Settings::PlatformType) in line 48
      protection public
      7 lines of code
      2 parameters
      1 conditional paths
      uses variable mTitle defined in Platform
      uses variable mType defined in Platform
      uses variable mPlatforms defined in Platforms
   function get(Settings::PlatformType) in line 51
      protection public
      11 lines of code
      1 parameters
      3 conditional paths
      uses variable mPlatforms defined in Platforms
   function getCount() in line 49
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable mPlatforms defined in Platforms
   function init() in line 50
      protection public
      9 lines of code
      0 parameters
      1 conditional paths
      uses function add(const QString &,Settings::PlatformType) defined in Platforms
      uses enumvalue Native defined in Settings
      uses enumvalue Unix32 defined in Settings
      uses enumvalue Unix64 defined in Settings
      uses enumvalue Win32A defined in Settings
      uses enumvalue Win32W defined in Settings
      uses enumvalue Win64 defined in Settings
   function Platforms(QObject *) in line 47
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function init() defined in Platforms
   variable mPlatforms in line 53
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/gui/printablereport.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/gui/printablereport.h
module PrintableReport
   inherits from Report
   function Create() in line 41
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function GetFormattedReportText() in line 62
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable mFormattedReport defined in PrintableReport
   function WriteError(const ErrorItem &) in line 57
      protection public
      9 lines of code
      1 parameters
      1 conditional paths
      uses variable files defined in ErrorItem
      uses variable line defined in triage-report.py
      uses variable lines defined in ErrorItem
      uses variable severity defined in ErrorItem
      uses variable summary defined in ErrorItem
      uses variable mFormattedReport defined in PrintableReport
   function WriteFooter() in line 51
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function WriteHeader() in line 46
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function PrintableReport() in line 34
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function ~PrintableReport() in line 35
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   variable mFormattedReport in line 69
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/gui/project.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/gui/project.h
module Project
   inherits from QObject
   function Create() in line 76
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable mPFile defined in Project
      uses variable mFilename defined in Project
   function Edit() in line 71
      protection public
      48 lines of code
      0 parameters
      3 conditional paths
      uses variable mFilename defined in Project
      uses variable mParentWidget defined in Project
      uses variable mPFile defined in Project
      uses function GetRootPath() defined in ProjectFile
      uses function SetRootPath(const QString &) defined in ProjectFileDialog
      uses function GetIncludeDirs() defined in ProjectFile
      uses function SetIncludepaths(const QStringList &) defined in ProjectFileDialog
      uses function GetDefines() defined in ProjectFile
      uses function SetDefines(const QStringList &) defined in ProjectFileDialog
      uses function GetCheckPaths() defined in ProjectFile
      uses function SetPaths(const QStringList &) defined in ProjectFileDialog
      uses function GetExcludedPaths() defined in ProjectFile
      uses function SetExcludedPaths(const QStringList &) defined in ProjectFileDialog
      uses function GetLibraries() defined in ProjectFile
      uses function SetLibraries(const QStringList &) defined in ProjectFileDialog
      uses function GetSuppressions() defined in ProjectFile
      uses function SetSuppressions(const QStringList &) defined in ProjectFileDialog
      uses function GetRootPath() defined in ProjectFileDialog
      uses function SetRootPath(const QString &) defined in ProjectFile
      uses function GetIncludePaths() defined in ProjectFileDialog
      uses function SetIncludes(const QStringList &) defined in ProjectFile
      uses function GetDefines() defined in ProjectFileDialog
      uses function SetDefines(const QStringList &) defined in ProjectFile
      uses function GetPaths() defined in ProjectFileDialog
      uses function SetCheckPaths(const QStringList &) defined in ProjectFile
      uses function GetExcludedPaths() defined in ProjectFileDialog
      uses function SetExcludedPaths(const QStringList &) defined in ProjectFile
      uses function GetLibraries() defined in ProjectFileDialog
      uses function SetLibraries(const QStringList &) defined in ProjectFile
      uses function GetSuppressions() defined in ProjectFileDialog
      uses function SetSuppressions(const QStringList &) defined in ProjectFile
      uses function Write(const QString &) defined in ProjectFile
      uses variable msg defined in findcasts.py
   function Filename() in line 47
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable mFilename defined in Project
   function GetProjectFile() in line 82
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses variable mPFile defined in Project
   function IsOpen() in line 60
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable mPFile defined in Project
   function Open() in line 65
      protection public
      19 lines of code
      0 parameters
      3 conditional paths
      uses variable mPFile defined in Project
      uses variable mFilename defined in Project
      uses function Read(const QString &) defined in ProjectFile
      uses variable msg defined in findcasts.py
      uses variable mParentWidget defined in Project
      uses function SetFilename(const QString &) defined in ProjectFile
   function SetFilename(const QString &) in line 53
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable mFilename defined in Project
      uses variable filename defined in extracttests.py
   function Project(QWidget *) in line 39
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function Project(const QString &,QWidget *) in line 40
      protection public
      7 lines of code
      2 parameters
      1 conditional paths
   function ~Project() in line 41
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable mPFile defined in Project
   variable mFilename in line 88
   variable mParentWidget in line 90
   variable mPFile in line 89
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/gui/projectfile.cpp
module projectfile.cpp
   variable ProjectElementName in line 27
      protection public
   variable ProjectVersionAttrib in line 28
      protection public
   variable ProjectFileVersion in line 29
      protection public
   variable IncludeDirElementName in line 30
      protection public
   variable DirElementName in line 31
      protection public
   variable DirNameAttrib in line 32
      protection public
   variable DefinesElementName in line 33
      protection public
   variable DefineName in line 34
      protection public
   variable DefineNameAttrib in line 35
      protection public
   variable PathsElementName in line 36
      protection public
   variable PathName in line 37
      protection public
   variable PathNameAttrib in line 38
      protection public
   variable RootPathName in line 39
      protection public
   variable RootPathNameAttrib in line 40
      protection public
   variable IgnoreElementName in line 41
      protection public
   variable IgnorePathName in line 42
      protection public
   variable IgnorePathNameAttrib in line 43
      protection public
   variable ExcludeElementName in line 44
      protection public
   variable ExcludePathName in line 45
      protection public
   variable ExcludePathNameAttrib in line 46
      protection public
   variable LibrariesElementName in line 47
      protection public
   variable LibraryElementName in line 48
      protection public
   variable SuppressionsElementName in line 49
      protection public
   variable SuppressionElementName in line 50
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/gui/projectfile.h
module ProjectFile
   inherits from QObject
   function GetCheckPaths() in line 73
      protection public
      8 lines of code
      0 parameters
      2 conditional paths
      uses variable path defined in daca2-report.py
      uses variable mPaths defined in ProjectFile
   function GetDefines() in line 67
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable mDefines defined in ProjectFile
   function GetExcludedPaths() in line 79
      protection public
      8 lines of code
      0 parameters
      2 conditional paths
      uses variable path defined in daca2-report.py
      uses variable mExcludedPaths defined in ProjectFile
   function GetFilename() in line 97
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses variable mFilename defined in ProjectFile
   function GetIncludeDirs() in line 61
      protection public
      8 lines of code
      0 parameters
      2 conditional paths
      uses variable path defined in daca2-report.py
      uses variable mIncludeDirs defined in ProjectFile
   function GetLibraries() in line 85
      protection public
      8 lines of code
      0 parameters
      2 conditional paths
      uses variable mLibraries defined in ProjectFile
   function GetRootPath() in line 53
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses variable mRootPath defined in ProjectFile
      uses function GetIncludeDirs() defined in ProjectFile
      uses function GetDefines() defined in ProjectFile
      uses function GetCheckPaths() defined in ProjectFile
      uses function GetExcludedPaths() defined in ProjectFile
      uses function GetLibraries() defined in ProjectFile
      uses function GetSuppressions() defined in ProjectFile
   function GetSuppressions() in line 91
      protection public
      8 lines of code
      0 parameters
      2 conditional paths
      uses variable mSuppressions defined in ProjectFile
   function Read(const QString &) in line 47
      protection public
      79 lines of code
      1 parameters
      26 conditional paths
      uses variable filename defined in extracttests.py
      uses variable mFilename defined in ProjectFile
      uses function ReadRootPath(QXmlStreamReader &) defined in ProjectFile
      uses function ReadCheckPaths(QXmlStreamReader &) defined in ProjectFile
      uses function ReadIncludeDirs(QXmlStreamReader &) defined in ProjectFile
      uses function ReadDefines(QXmlStreamReader &) defined in ProjectFile
      uses function ReadExcludes(QXmlStreamReader &) defined in ProjectFile
      uses function ReadStringList(QStringList &,QXmlStreamReader &,const char) defined in ProjectFile
      uses variable mLibraries defined in ProjectFile
      uses variable mSuppressions defined in ProjectFile
   function ReadCheckPaths(QXmlStreamReader &) in line 192
      37 lines of code
      1 parameters
      16 conditional paths
      uses variable name defined in setup.py
      uses variable mPaths defined in ProjectFile
   function ReadDefines(QXmlStreamReader &) in line 186
      36 lines of code
      1 parameters
      16 conditional paths
      uses variable name defined in setup.py
      uses variable mDefines defined in ProjectFile
   function ReadExcludes(QXmlStreamReader &) in line 198
      45 lines of code
      1 parameters
      19 conditional paths
      uses variable name defined in setup.py
      uses variable mExcludedPaths defined in ProjectFile
   function ReadIncludeDirs(QXmlStreamReader &) in line 180
      37 lines of code
      1 parameters
      16 conditional paths
      uses variable name defined in setup.py
      uses variable mIncludeDirs defined in ProjectFile
   function ReadRootPath(QXmlStreamReader &) in line 174
      7 lines of code
      1 parameters
      2 conditional paths
      uses variable name defined in setup.py
      uses variable mRootPath defined in ProjectFile
   function ReadStringList(QStringList &,QXmlStreamReader &,const char) in line 206
      37 lines of code
      3 parameters
      16 conditional paths
   function SetCheckPaths(const QStringList &) in line 125
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable mPaths defined in ProjectFile
   function SetDefines(const QStringList &) in line 119
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable mDefines defined in ProjectFile
   function SetExcludedPaths(const QStringList &) in line 131
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable mExcludedPaths defined in ProjectFile
   function SetFilename(const QString &) in line 164
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
      uses variable mFilename defined in ProjectFile
      uses variable filename defined in extracttests.py
      uses function ReadRootPath(QXmlStreamReader &) defined in ProjectFile
      uses function ReadIncludeDirs(QXmlStreamReader &) defined in ProjectFile
      uses function ReadDefines(QXmlStreamReader &) defined in ProjectFile
      uses function ReadCheckPaths(QXmlStreamReader &) defined in ProjectFile
      uses function ReadExcludes(QXmlStreamReader &) defined in ProjectFile
      uses function ReadStringList(QStringList &,QXmlStreamReader &,const char) defined in ProjectFile
   function SetIncludes(const QStringList &) in line 113
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable mIncludeDirs defined in ProjectFile
   function SetLibraries(const QStringList &) in line 137
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable mLibraries defined in ProjectFile
   function SetRootPath(const QString &) in line 105
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
      uses variable mRootPath defined in ProjectFile
      uses function SetIncludes(const QStringList &) defined in ProjectFile
      uses function SetDefines(const QStringList &) defined in ProjectFile
      uses function SetCheckPaths(const QStringList &) defined in ProjectFile
      uses function SetExcludedPaths(const QStringList &) defined in ProjectFile
      uses function SetLibraries(const QStringList &) defined in ProjectFile
      uses function SetSuppressions(const QStringList &) defined in ProjectFile
      uses function Write(const QString &) defined in ProjectFile
      uses variable filename defined in extracttests.py
      uses function WriteStringList(QXmlStreamWriter &,const QStringList &,const char,const char) defined in ProjectFile
   function SetSuppressions(const QStringList &) in line 143
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable mSuppressions defined in ProjectFile
   function Write(const QString &) in line 149
      protection public
      75 lines of code
      1 parameters
      12 conditional paths
      uses variable filename defined in extracttests.py
      uses variable mFilename defined in ProjectFile
      uses variable mRootPath defined in ProjectFile
      uses variable mIncludeDirs defined in ProjectFile
      uses variable mDefines defined in ProjectFile
      uses variable mPaths defined in ProjectFile
      uses variable path defined in daca2-report.py
      uses variable mExcludedPaths defined in ProjectFile
      uses function WriteStringList(QXmlStreamWriter &,const QStringList &,const char,const char) defined in ProjectFile
      uses variable mLibraries defined in ProjectFile
      uses variable mSuppressions defined in ProjectFile
   function WriteStringList(QXmlStreamWriter &,const QStringList &,const char,const char) in line 158
      protection public
      13 lines of code
      4 parameters
      3 conditional paths
   function ProjectFile(QObject *) in line 40
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function ProjectFile(const QString &,QObject *) in line 41
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
   variable mDefines in line 231
   variable mExcludedPaths in line 241
   variable mFilename in line 213
   variable mIncludeDirs in line 226
   variable mLibraries in line 246
   variable mPaths in line 236
   variable mRootPath in line 221
   variable mSuppressions in line 251
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/gui/projectfiledialog.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/gui/projectfiledialog.h
module ProjectFileDialog
   inherits from QDialog
   slot AddExcludePath in line 163
   function AddExcludePath(const QString &) in line 223
      10 lines of code
      1 parameters
      2 conditional paths
      uses variable path defined in daca2-report.py
      uses variable mUI defined in ProjectFileDialog
   slot AddIncludeDir in line 133
   function AddIncludeDir(const QString &) in line 211
      10 lines of code
      1 parameters
      2 conditional paths
      uses variable mUI defined in ProjectFileDialog
   slot AddPath in line 138
   function AddPath(const QString &) in line 217
      10 lines of code
      1 parameters
      2 conditional paths
      uses variable path defined in daca2-report.py
      uses variable mUI defined in ProjectFileDialog
   slot AddSuppression in line 188
   slot EditExcludePath in line 168
   slot EditIncludeDir in line 148
   slot EditPath in line 153
   function GetDefines() in line 60
      protection public
      13 lines of code
      0 parameters
      3 conditional paths
      uses variable mUI defined in ProjectFileDialog
   function GetExcludedPaths() in line 72
      protection public
      10 lines of code
      0 parameters
      2 conditional paths
      uses variable count defined in extracttests.py
      uses variable mUI defined in ProjectFileDialog
   function GetIncludePaths() in line 54
      protection public
      10 lines of code
      0 parameters
      2 conditional paths
      uses variable count defined in extracttests.py
      uses variable mUI defined in ProjectFileDialog
   function GetLibraries() in line 78
      protection public
      9 lines of code
      0 parameters
      3 conditional paths
      uses variable mLibraryCheckboxes defined in ProjectFileDialog
   function GetPaths() in line 66
      protection public
      10 lines of code
      0 parameters
      2 conditional paths
      uses variable count defined in extracttests.py
      uses variable mUI defined in ProjectFileDialog
   function GetRootPath() in line 48
      protection public
      7 lines of code
      0 parameters
      1 conditional paths
      uses variable mUI defined in ProjectFileDialog
   function GetSuppressions() in line 84
      protection public
      10 lines of code
      0 parameters
      2 conditional paths
      uses variable count defined in extracttests.py
      uses variable mUI defined in ProjectFileDialog
   function LoadSettings() in line 200
      6 lines of code
      0 parameters
      1 conditional paths
      uses macro definition SETTINGS_PROJECT_DIALOG_WIDTH defined in common.h
      uses macro definition SETTINGS_PROJECT_DIALOG_HEIGHT defined in common.h
   slot MoveIncludePathDown in line 183
   slot MoveIncludePathUp in line 178
   slot RemoveExcludePath in line 173
   slot RemoveIncludeDir in line 143
   slot RemovePath in line 158
   slot RemoveSuppression in line 193
   function SaveSettings() in line 205
      6 lines of code
      0 parameters
      1 conditional paths
      uses macro definition SETTINGS_PROJECT_DIALOG_WIDTH defined in common.h
      uses macro definition SETTINGS_PROJECT_DIALOG_HEIGHT defined in common.h
   function SetDefines(const QStringList &) in line 102
      protection public
      13 lines of code
      1 parameters
      3 conditional paths
      uses variable mUI defined in ProjectFileDialog
   function SetExcludedPaths(const QStringList &) in line 114
      protection public
      6 lines of code
      1 parameters
      2 conditional paths
      uses variable path defined in daca2-report.py
      uses slot AddExcludePath defined in ProjectFileDialog
   function SetIncludepaths(const QStringList &) in line 96
      protection public
      6 lines of code
      1 parameters
      2 conditional paths
      uses slot AddIncludeDir defined in ProjectFileDialog
   function SetLibraries(const QStringList &) in line 120
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses variable mLibraryCheckboxes defined in ProjectFileDialog
   function SetPaths(const QStringList &) in line 108
      protection public
      6 lines of code
      1 parameters
      2 conditional paths
      uses variable path defined in daca2-report.py
      uses slot AddPath defined in ProjectFileDialog
   function SetRootPath(const QString &) in line 90
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable mUI defined in ProjectFileDialog
   function SetSuppressions(const QStringList &) in line 126
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses variable mUI defined in ProjectFileDialog
   function ProjectFileDialog(const QString &,QWidget *) in line 41
      protection public
      66 lines of code
      2 parameters
      8 conditional paths
      uses variable mUI defined in ProjectFileDialog
      uses variable path defined in daca2-report.py
      uses variable filename defined in extracttests.py
      uses function LoadSettings() defined in ProjectFileDialog
      uses function load(const char,const char) defined in Library
      uses variable errorcode defined in Library::Error
      uses enumvalue OK defined in Library
      uses variable mLibraryCheckboxes defined in ProjectFileDialog
      uses slot AddIncludeDir defined in ProjectFileDialog
      uses slot AddPath defined in ProjectFileDialog
      uses slot EditIncludeDir defined in ProjectFileDialog
      uses slot RemoveIncludeDir defined in ProjectFileDialog
      uses slot EditPath defined in ProjectFileDialog
      uses slot RemovePath defined in ProjectFileDialog
      uses slot AddExcludePath defined in ProjectFileDialog
      uses slot EditExcludePath defined in ProjectFileDialog
      uses slot RemoveExcludePath defined in ProjectFileDialog
      uses slot MoveIncludePathUp defined in ProjectFileDialog
      uses slot MoveIncludePathDown defined in ProjectFileDialog
      uses slot AddSuppression defined in ProjectFileDialog
      uses slot RemoveSuppression defined in ProjectFileDialog
   function ~ProjectFileDialog() in line 42
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function SaveSettings() defined in ProjectFileDialog
   variable mFilePath in line 231
   variable mLibraryCheckboxes in line 234
   variable mUI in line 226
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/gui/report.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/gui/report.h
module Report
   inherits from QObject
   abstract class
   function Close() in line 61
      protection public
      5 lines of code
      0 parameters
      2 conditional paths
      uses variable mFile defined in Report
   function Create() in line 50
      protection public
      9 lines of code
      0 parameters
      2 conditional paths
      uses variable mFile defined in Report
      uses variable mFilename defined in Report
   function GetFile() in line 84
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable mFile defined in Report
   function Open() in line 56
      protection public
      9 lines of code
      0 parameters
      2 conditional paths
      uses variable mFile defined in Report
      uses variable mFilename defined in Report
   function WriteError(const ErrorItem &) in line 77
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function WriteFooter() in line 71
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function WriteHeader() in line 66
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function Report(const QString &) in line 43
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function ~Report() in line 44
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function Close() defined in Report
   variable mFile in line 96
   variable mFilename in line 91
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/gui/resultstree.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/gui/resultstree.h
module ResultsTree
   inherits from QTreeView
   function AddBacktraceFiles(QStandardItem *,const ErrorLine &,const bool,const QString &,bool) in line 346
      66 lines of code
      5 parameters
      11 conditional paths
      uses variable file defined in ErrorLine
      uses function CreateNormalItem(const QString &) defined in ResultsTree
      uses function SeverityToTranslatedString(Severity::SeverityType) defined in ResultsTree
      uses variable severity defined in ErrorLine
      uses function CreateLineNumberItem(const QString &) defined in ResultsTree
      uses variable line defined in ErrorLine
      uses variable errorId defined in ErrorLine
      uses function CreateCheckboxItem(bool) defined in ResultsTree
      uses variable inconclusive defined in ErrorLine
      uses variable summary defined in ErrorLine
   function AddErrorItem(const ErrorItem &) in line 60
      protection public
      91 lines of code
      1 parameters
      9 conditional paths
      uses variable files defined in ErrorItem
      uses function StripPath(const QString &,bool) defined in ResultsTree
      uses variable mShowSeverities defined in ResultsTree
      uses function isShown(ShowTypes::ShowType) defined in ShowTypes
      uses variable severity defined in ErrorItem
      uses variable mFilter defined in ResultsTree
      uses variable summary defined in ErrorItem
      uses variable message defined in ErrorItem
      uses variable file defined in ErrorItem
      uses variable errorId defined in ErrorItem
      uses variable mVisibleErrors defined in ResultsTree
      uses variable line defined in triage-report.py
      uses variable inconclusive defined in ErrorItem
      uses variable lines defined in ErrorItem
      uses function EnsureFileItem(const QString &,const QString &,bool) defined in ResultsTree
      uses variable file0 defined in ErrorItem
      uses function AddBacktraceFiles(QStandardItem *,const ErrorLine &,const bool,const QString &,bool) defined in ResultsTree
      uses function SeverityToIcon(Severity::SeverityType) defined in ResultsTree
      uses variable data defined in cert.py
   function AskFileDir(const QString &) in line 378
      16 lines of code
      1 parameters
      1 conditional paths
      uses function GetPath(const QString &) defined in common.cpp
      uses macro definition SETTINGS_LAST_SOURCE_PATH defined in common.h
      uses variable mCheckPath defined in ResultsTree
      uses function SetPath(const QString &,const QString &) defined in common.cpp
   signal CheckSelected in line 186
      protection public
   function Clear() in line 66
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable mModel defined in ResultsTree
   function Clear(const QString &) in line 71
      protection public
      17 lines of code
      1 parameters
      4 conditional paths
      uses function StripPath(const QString &,bool) defined in ResultsTree
      uses variable filename defined in extracttests.py
      uses variable mModel defined in ResultsTree
      uses variable data defined in cert.py
   function ClearRecheckFile(const QString &) in line 76
      protection public
      14 lines of code
      1 parameters
      4 conditional paths
      uses variable mModel defined in ResultsTree
      uses variable data defined in cert.py
      uses variable filename defined in extracttests.py
   slot Context in line 208
   function contextMenuEvent(QContextMenuEvent *) in line 334
      115 lines of code
      1 parameters
      13 conditional paths
      uses variable e defined in extracttests.py
      uses variable mSelectionModel defined in ResultsTree
      uses variable mContextItem defined in ResultsTree
      uses variable mModel defined in ResultsTree
      uses variable mApplications defined in ResultsTree
      uses function GetApplicationCount() defined in ApplicationList
      uses function GetApplication(const int) defined in ApplicationList
      uses function getName() defined in Application
      uses slot Context defined in ResultsTree
      uses variable mThread defined in ResultsTree
      uses function IsChecking() defined in ThreadHandler
      uses slot RecheckSelectedFiles defined in ResultsTree
      uses slot CopyFilename defined in ResultsTree
      uses slot CopyFullPath defined in ResultsTree
      uses slot CopyMessage defined in ResultsTree
      uses slot CopyMessageId defined in ResultsTree
      uses slot HideResult defined in ResultsTree
      uses slot HideAllIdResult defined in ResultsTree
      uses slot OpenContainingFolder defined in ResultsTree
   slot CopyFilename in line 214
   slot CopyFullPath in line 220
   slot CopyMessage in line 226
   slot CopyMessageId in line 232
   function CopyPathToClipboard(QStandardItem *,bool) in line 319
      5 lines of code
      2 parameters
      1 conditional paths
      uses function GetFilePath(QStandardItem *,bool) defined in ResultsTree
   function CreateCheckboxItem(bool) in line 396
      8 lines of code
      1 parameters
      1 conditional paths
   function CreateLineNumberItem(const QString &) in line 405
      9 lines of code
      1 parameters
      1 conditional paths
   function CreateNormalItem(const QString &) in line 387
      7 lines of code
      1 parameters
      1 conditional paths
      uses variable name defined in setup.py
   slot currentChanged in line 263
   function EnsureFileItem(const QString &,const QString &,bool) in line 424
      27 lines of code
      3 parameters
      2 conditional paths
      uses variable name defined in setup.py
      uses function StripPath(const QString &,bool) defined in ResultsTree
      uses function FindFileItem(const QString &) defined in ResultsTree
      uses function CreateNormalItem(const QString &) defined in ResultsTree
      uses variable data defined in cert.py
      uses variable mModel defined in ResultsTree
   function FilterResults(const QString &) in line 93
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable mFilter defined in ResultsTree
      uses function RefreshTree() defined in ResultsTree
   function FindFileItem(const QString &) in line 413
      15 lines of code
      1 parameters
      4 conditional paths
      uses variable mModel defined in ResultsTree
      uses variable name defined in setup.py
   function GetFilePath(QStandardItem *,bool) in line 327
      23 lines of code
      2 parameters
      4 conditional paths
      uses variable data defined in cert.py
   function HasResults() in line 135
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable mModel defined in ResultsTree
   function HasVisibleResults() in line 129
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable mVisibleErrors defined in ResultsTree
   slot HideAllIdResult in line 250
   slot HideResult in line 238
   function Initialize(QSettings *,ApplicationList *,ThreadHandler *) in line 53
      protection public
      7 lines of code
      3 parameters
      1 conditional paths
      uses variable mSettings defined in ResultsTree
      uses variable mApplications defined in ResultsTree
      uses variable mThread defined in ResultsTree
      uses function LoadSettings() defined in ResultsTree
   function keyPressEvent(QKeyEvent *) in line 171
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses slot QuickStartApplication defined in ResultsTree
   function LoadSettings() in line 371
      14 lines of code
      0 parameters
      2 conditional paths
      uses variable mModel defined in ResultsTree
      uses macro definition SETTINGS_RESULT_COLUMN_WIDTH defined in common.h
      uses variable mSettings defined in ResultsTree
      uses variable mSaveFullPath defined in ResultsTree
      uses macro definition SETTINGS_SAVE_FULL_PATH defined in common.h
      uses variable mSaveAllErrors defined in ResultsTree
      uses macro definition SETTINGS_SAVE_ALL_ERRORS defined in common.h
      uses variable mShowFullPath defined in ResultsTree
      uses macro definition SETTINGS_SHOW_FULL_PATH defined in common.h
      uses function ShowIdColumn() defined in ResultsTree
      uses macro definition SETTINGS_SHOW_ERROR_ID defined in common.h
      uses function ShowInconclusiveColumn(bool) defined in ResultsTree
      uses macro definition SETTINGS_INCONCLUSIVE_ERRORS defined in common.h
   slot OpenContainingFolder in line 255
   slot QuickStartApplication in line 201
   slot RecheckSelectedFiles in line 244
   function RefreshFilePaths() in line 271
      9 lines of code
      0 parameters
      2 conditional paths
      uses variable mModel defined in ResultsTree
   function RefreshFilePaths(QStandardItem *) in line 277
      58 lines of code
      1 parameters
      8 conditional paths
      uses variable data defined in cert.py
      uses function StripPath(const QString &,bool) defined in ResultsTree
   function RefreshTree() in line 358
      66 lines of code
      0 parameters
      10 conditional paths
      uses variable mVisibleErrors defined in ResultsTree
      uses variable mModel defined in ResultsTree
      uses variable data defined in cert.py
      uses variable mShowSeverities defined in ResultsTree
      uses function isShown(ShowTypes::ShowType) defined in ShowTypes
      uses variable mFilter defined in ResultsTree
   signal ResultsHidden in line 179
      protection public
   function SaveErrors(Report *,QStandardItem *) in line 295
      52 lines of code
      2 parameters
      6 conditional paths
      uses variable mSaveAllErrors defined in ResultsTree
      uses variable data defined in cert.py
      uses variable severity defined in ErrorItem
      uses variable summary defined in ErrorItem
      uses variable message defined in ErrorItem
      uses variable errorId defined in ErrorItem
      uses variable inconclusive defined in ErrorItem
      uses variable file0 defined in ErrorItem
      uses function StripPath(const QString &,bool) defined in ResultsTree
      uses variable line defined in triage-report.py
      uses variable files defined in ErrorItem
      uses variable lines defined in ErrorItem
      uses function WriteError(const ErrorItem &) defined in Report
   function SaveResults(Report *) in line 104
      protection public
      12 lines of code
      1 parameters
      3 conditional paths
      uses function WriteHeader() defined in Report
      uses variable mModel defined in ResultsTree
      uses function SaveErrors(Report *,QStandardItem *) defined in ResultsTree
      uses function WriteFooter() defined in Report
   function SaveSettings() in line 141
      protection public
      7 lines of code
      0 parameters
      2 conditional paths
      uses variable mModel defined in ResultsTree
      uses macro definition SETTINGS_RESULT_COLUMN_WIDTH defined in common.h
      uses variable mSettings defined in ResultsTree
   signal SelectionChanged in line 193
      protection public
   function SetCheckDirectory(const QString &) in line 123
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable mCheckPath defined in ResultsTree
   function SeverityToIcon(Severity::SeverityType) in line 302
      19 lines of code
      1 parameters
      7 conditional paths
      uses enumvalue error defined in Severity
      uses enumvalue style defined in Severity
      uses enumvalue warning defined in Severity
      uses enumvalue portability defined in Severity
      uses enumvalue performance defined in Severity
      uses enumvalue information defined in Severity
   function SeverityToTranslatedString(Severity::SeverityType) in line 365
      29 lines of code
      1 parameters
      9 conditional paths
      uses enumvalue style defined in Severity
      uses enumvalue error defined in Severity
      uses enumvalue warning defined in Severity
      uses enumvalue performance defined in Severity
      uses enumvalue portability defined in Severity
      uses enumvalue information defined in Severity
      uses enumvalue debug defined in Severity
      uses enumvalue none defined in Severity
   function ShowHiddenResults() in line 98
      protection public
      26 lines of code
      0 parameters
      5 conditional paths
      uses variable mModel defined in ResultsTree
      uses variable data defined in cert.py
      uses function RefreshTree() defined in ResultsTree
      uses signal ResultsHidden defined in ResultsTree
   function ShowIdColumn(bool) in line 152
      protection public
      8 lines of code
      1 parameters
      2 conditional paths
      uses variable mShowErrorId defined in ResultsTree
   function ShowIdColumn() in line 162
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses variable mShowErrorId defined in ResultsTree
   function ShowInconclusiveColumn(bool) in line 157
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
   function ShowResults(ShowTypes::ShowType,bool) in line 85
      protection public
      7 lines of code
      2 parameters
      2 conditional paths
      uses enumvalue ShowNone defined in ShowTypes
      uses variable mShowSeverities defined in ResultsTree
      uses function isShown(ShowTypes::ShowType) defined in ShowTypes
      uses function show(ShowTypes::ShowType,bool) defined in ShowTypes
      uses function RefreshTree() defined in ResultsTree
   function StartApplication(QStandardItem *,int) in line 311
      106 lines of code
      2 parameters
      13 conditional paths
      uses variable mApplications defined in ResultsTree
      uses function GetApplicationCount() defined in ApplicationList
      uses variable msg defined in findcasts.py
      uses function GetDefaultApplication() defined in ApplicationList
      uses variable data defined in cert.py
      uses variable mCheckPath defined in ResultsTree
      uses function AskFileDir(const QString &) defined in ResultsTree
      uses function GetApplication(const int) defined in ApplicationList
      uses function getParameters() defined in Application
      uses variable line defined in triage-report.py
      uses function getPath() defined in Application
   function StripPath(const QString &,bool) in line 287
      9 lines of code
      2 parameters
      2 conditional paths
      uses variable mShowFullPath defined in ResultsTree
      uses variable mSaveFullPath defined in ResultsTree
      uses variable path defined in daca2-report.py
      uses variable mCheckPath defined in ResultsTree
   function Translate() in line 147
      protection public
      7 lines of code
      0 parameters
      1 conditional paths
      uses variable mModel defined in ResultsTree
   function UpdateSettings(bool,bool,bool,bool,bool) in line 115
      protection public
      17 lines of code
      5 parameters
      2 conditional paths
      uses variable mShowFullPath defined in ResultsTree
      uses function RefreshFilePaths() defined in ResultsTree
      uses variable mSaveFullPath defined in ResultsTree
      uses variable mSaveAllErrors defined in ResultsTree
      uses function ShowIdColumn() defined in ResultsTree
      uses function ShowInconclusiveColumn(bool) defined in ResultsTree
   function ResultsTree(QWidget *) in line 51
      protection public
      15 lines of code
      1 parameters
      1 conditional paths
      uses variable mModel defined in ResultsTree
      uses function Translate() defined in ResultsTree
      uses slot QuickStartApplication defined in ResultsTree
   function ~ResultsTree() in line 52
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   variable mApplications in line 448
   variable mCheckPath in line 484
   variable mContextItem in line 454
   variable mFilter in line 442
   variable mModel in line 430
   variable mSaveAllErrors in line 472
   variable mSaveFullPath in line 466
   variable mSelectionModel in line 493
   variable mSettings in line 436
   variable mShowErrorId in line 478
   variable mShowFullPath in line 460
   variable mShowSeverities in line 169
      protection public
   variable mThread in line 494
   variable mVisibleErrors in line 490
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/gui/resultsview.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/gui/resultsview.h
module ResultsView
   inherits from QWidget
   function CheckingFinished() in line 120
      protection public
      30 lines of code
      0 parameters
      4 conditional paths
      uses variable mUI defined in ResultsView
      uses variable mShowNoErrorsMessage defined in ResultsView
      uses function HasResults() defined in ResultsView
      uses variable msg defined in findcasts.py
   function CheckingStarted(int) in line 114
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses variable mUI defined in ResultsView
      uses macro definition PROGRESS_MAX defined in common.h
      uses variable count defined in extracttests.py
   signal CheckSelected in line 194
      protection public
   function Clear(bool) in line 64
      protection public
      15 lines of code
      1 parameters
      2 conditional paths
      uses variable results defined in daca2-addons.py
      uses variable mUI defined in ResultsView
      uses variable mStatistics defined in ResultsView
      uses function Clear() defined in CheckStatistics
      uses macro definition PROGRESS_MAX defined in common.h
   function Clear(const QString &) in line 69
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable mUI defined in ResultsView
      uses variable filename defined in extracttests.py
   function ClearRecheckFile(const QString &) in line 74
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable mUI defined in ResultsView
      uses variable filename defined in extracttests.py
   slot CollapseAllResults in line 216
      protection public
   function DisableProgressbar() in line 149
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable mUI defined in ResultsView
   slot Error in line 211
      protection public
   slot ExpandAllResults in line 221
      protection public
   slot FilterResults in line 226
      protection public
   function GetShowTypes() in line 170
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses variable mUI defined in ResultsView
      uses signal GotResults defined in ResultsView
      uses signal ResultsHidden defined in ResultsView
      uses signal CheckSelected defined in ResultsView
      uses slot Progress defined in ResultsView
      uses slot Error defined in ResultsView
      uses slot CollapseAllResults defined in ResultsView
      uses slot ExpandAllResults defined in ResultsView
      uses slot FilterResults defined in ResultsView
      uses slot ShowHiddenResults defined in ResultsView
      uses slot UpdateDetails defined in ResultsView
      uses slot Print defined in ResultsView
      uses slot PrintPreview defined in ResultsView
   function GetStatistics() in line 162
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses variable mStatistics defined in ResultsView
   signal GotResults in line 180
      protection public
   function HasResults() in line 134
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable mUI defined in ResultsView
   function HasVisibleResults() in line 127
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable mUI defined in ResultsView
   function Initialize(QSettings *,ApplicationList *,ThreadHandler *) in line 48
      protection public
      11 lines of code
      3 parameters
      1 conditional paths
      uses variable mUI defined in ResultsView
      uses macro definition SETTINGS_MAINWND_SPLITTER_STATE defined in common.h
      uses variable mShowNoErrorsMessage defined in ResultsView
      uses macro definition SETTINGS_SHOW_NO_ERRORS defined in common.h
   slot Print in line 243
      protection public
   slot Print in line 249
      protection public
   slot PrintPreview in line 254
      protection public
   slot Progress in line 204
      protection public
   function ReadErrorsXml(const QString &) in line 156
      protection public
      42 lines of code
      1 parameters
      7 conditional paths
      uses variable filename defined in extracttests.py
      uses variable errors defined in extracttests.py
      uses function Open() defined in Report
      uses function Read() defined in XmlReport
      uses variable mUI defined in ResultsView
   signal ResultsHidden in line 187
      protection public
   function Save(const QString &,Report::Type) in line 82
      protection public
      44 lines of code
      2 parameters
      8 conditional paths
      uses function HasResults() defined in ResultsView
      uses enumvalue CSV defined in Report
      uses variable filename defined in extracttests.py
      uses enumvalue TXT defined in Report
      uses enumvalue XML defined in Report
      uses enumvalue XMLV2 defined in Report
      uses function Create() defined in Report
      uses variable mUI defined in ResultsView
   function SaveSettings(QSettings *) in line 141
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses variable mUI defined in ResultsView
      uses macro definition SETTINGS_MAINWND_SPLITTER_STATE defined in common.h
   function SetCheckDirectory(const QString &) in line 107
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable mUI defined in ResultsView
   slot ShowHiddenResults in line 231
      protection public
   function ShowResults(ShowTypes::ShowType,bool) in line 58
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses variable mUI defined in ResultsView
   function Translate() in line 147
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable mUI defined in ResultsView
   slot UpdateDetails in line 238
      protection public
   function UpdateSettings(bool,bool,bool,bool,bool,bool) in line 94
      protection public
      10 lines of code
      6 parameters
      1 conditional paths
      uses variable mUI defined in ResultsView
      uses variable mShowNoErrorsMessage defined in ResultsView
   function ResultsView(QWidget *) in line 47
      protection public
      11 lines of code
      1 parameters
      1 conditional paths
      uses variable mUI defined in ResultsView
      uses signal ResultsHidden defined in ResultsView
      uses signal CheckSelected defined in ResultsView
      uses slot UpdateDetails defined in ResultsView
   function ~ResultsView() in line 49
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   variable mShowNoErrorsMessage in line 260
   variable mStatistics in line 264
   variable mUI in line 262
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/gui/scratchpad.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/gui/scratchpad.h
module ScratchPad
   inherits from QDialog
   slot CheckButtonClicked in line 42
   function ScratchPad(MainWindow &) in line 36
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses variable mUI defined in ScratchPad
      uses slot CheckButtonClicked defined in ScratchPad
   variable mMainWindow in line 46
   variable mUI in line 45
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/gui/settingsdialog.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/gui/settingsdialog.h
module SettingsDialog
   inherits from QDialog
   slot AddApplication in line 107
   slot AddIncludePath in line 131
   function AddIncludePath(const QString &) in line 152
      9 lines of code
      1 parameters
      2 conditional paths
      uses variable path defined in daca2-report.py
      uses variable mUI defined in SettingsDialog
   function BoolToCheckState(bool) in line 189
      7 lines of code
      1 parameters
      2 conditional paths
   function CheckStateToBool(Qt::CheckState) in line 197
      7 lines of code
      1 parameters
      2 conditional paths
   slot DefaultApplication in line 125
   slot EditApplication in line 119
   slot EditIncludePath in line 143
   function InitIncludepathsList() in line 202
      9 lines of code
      0 parameters
      2 conditional paths
      uses macro definition SETTINGS_GLOBAL_INCLUDE_PATHS defined in common.h
      uses variable path defined in daca2-report.py
      uses slot AddIncludePath defined in SettingsDialog
   function InitTranslationsList() in line 207
      13 lines of code
      0 parameters
      3 conditional paths
      uses variable mTranslator defined in SettingsDialog
      uses function GetCurrentLanguage() defined in TranslationHandler
      uses function GetTranslations() defined in TranslationHandler
      uses variable mName defined in TranslationInfo
      uses variable LangCodeRole defined in SettingsDialog
      uses variable mCode defined in TranslationInfo
      uses variable mUI defined in SettingsDialog
   function LoadSettings() in line 172
      6 lines of code
      0 parameters
      1 conditional paths
      uses macro definition SETTINGS_CHECK_DIALOG_WIDTH defined in common.h
      uses macro definition SETTINGS_CHECK_DIALOG_HEIGHT defined in common.h
   slot Ok in line 101
   function PopulateApplicationList() in line 158
      24 lines of code
      0 parameters
      5 conditional paths
      uses variable mTempApplications defined in SettingsDialog
      uses function GetDefaultApplication() defined in ApplicationList
      uses function GetApplicationCount() defined in ApplicationList
      uses function GetApplication(const int) defined in ApplicationList
      uses variable name defined in setup.py
      uses function getName() defined in Application
      uses variable mUI defined in SettingsDialog
   slot RemoveApplication in line 113
   slot RemoveIncludePath in line 137
   function SaveAllErrors() in line 94
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function CheckStateToBool(Qt::CheckState) defined in SettingsDialog
      uses variable mUI defined in SettingsDialog
   function SaveCheckboxValue(QSettings *,QCheckBox *,const QString &) in line 181
      5 lines of code
      3 parameters
      1 conditional paths
      uses variable name defined in setup.py
      uses function CheckStateToBool(Qt::CheckState) defined in SettingsDialog
   function SaveFullPath() in line 64
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function CheckStateToBool(Qt::CheckState) defined in SettingsDialog
      uses variable mUI defined in SettingsDialog
   function SaveSettings() in line 165
      6 lines of code
      0 parameters
      1 conditional paths
      uses macro definition SETTINGS_CHECK_DIALOG_WIDTH defined in common.h
      uses macro definition SETTINGS_CHECK_DIALOG_HEIGHT defined in common.h
   function SaveSettingValues() in line 50
      protection public
      34 lines of code
      0 parameters
      4 conditional paths
      uses variable mUI defined in SettingsDialog
      uses macro definition SETTINGS_CHECK_THREADS defined in common.h
      uses function SaveCheckboxValue(QSettings *,QCheckBox *,const QString &) defined in SettingsDialog
      uses macro definition SETTINGS_CHECK_FORCE defined in common.h
      uses macro definition SETTINGS_SAVE_ALL_ERRORS defined in common.h
      uses macro definition SETTINGS_SAVE_FULL_PATH defined in common.h
      uses macro definition SETTINGS_SHOW_FULL_PATH defined in common.h
      uses macro definition SETTINGS_SHOW_NO_ERRORS defined in common.h
      uses macro definition SETTINGS_SHOW_DEBUG_WARNINGS defined in common.h
      uses macro definition SETTINGS_INLINE_SUPPRESSIONS defined in common.h
      uses macro definition SETTINGS_INCONCLUSIVE_ERRORS defined in common.h
      uses macro definition SETTINGS_SHOW_ERROR_ID defined in common.h
      uses variable LangCodeRole defined in SettingsDialog
      uses macro definition SETTINGS_LANGUAGE defined in common.h
      uses variable count defined in extracttests.py
      uses macro definition SETTINGS_GLOBAL_INCLUDE_PATHS defined in common.h
   function ShowErrorId() in line 79
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function CheckStateToBool(Qt::CheckState) defined in SettingsDialog
      uses variable mUI defined in SettingsDialog
   function ShowFullPath() in line 57
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function CheckStateToBool(Qt::CheckState) defined in SettingsDialog
      uses variable mUI defined in SettingsDialog
   function ShowInconclusive() in line 87
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function CheckStateToBool(Qt::CheckState) defined in SettingsDialog
      uses variable mUI defined in SettingsDialog
   function ShowNoErrorsMessage() in line 72
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function CheckStateToBool(Qt::CheckState) defined in SettingsDialog
      uses variable mUI defined in SettingsDialog
   function SettingsDialog(ApplicationList *,TranslationHandler *,QWidget *) in line 41
      protection public
      55 lines of code
      3 parameters
      2 conditional paths
      uses variable mUI defined in SettingsDialog
      uses variable mTempApplications defined in SettingsDialog
      uses function Copy(const ApplicationList *) defined in ApplicationList
      uses macro definition SETTINGS_CHECK_THREADS defined in common.h
      uses function BoolToCheckState(bool) defined in SettingsDialog
      uses macro definition SETTINGS_CHECK_FORCE defined in common.h
      uses macro definition SETTINGS_SHOW_FULL_PATH defined in common.h
      uses macro definition SETTINGS_SHOW_NO_ERRORS defined in common.h
      uses macro definition SETTINGS_SHOW_DEBUG_WARNINGS defined in common.h
      uses macro definition SETTINGS_SAVE_ALL_ERRORS defined in common.h
      uses macro definition SETTINGS_SAVE_FULL_PATH defined in common.h
      uses macro definition SETTINGS_INLINE_SUPPRESSIONS defined in common.h
      uses macro definition SETTINGS_INCONCLUSIVE_ERRORS defined in common.h
      uses macro definition SETTINGS_SHOW_ERROR_ID defined in common.h
      uses slot Ok defined in SettingsDialog
      uses slot AddApplication defined in SettingsDialog
      uses slot RemoveApplication defined in SettingsDialog
      uses slot EditApplication defined in SettingsDialog
      uses slot DefaultApplication defined in SettingsDialog
      uses slot AddIncludePath defined in SettingsDialog
      uses slot RemoveIncludePath defined in SettingsDialog
      uses slot EditIncludePath defined in SettingsDialog
      uses function PopulateApplicationList() defined in SettingsDialog
      uses variable count defined in extracttests.py
      uses function LoadSettings() defined in SettingsDialog
      uses function InitTranslationsList() defined in SettingsDialog
      uses function InitIncludepathsList() defined in SettingsDialog
   function ~SettingsDialog() in line 44
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function SaveSettings() defined in SettingsDialog
   variable LangCodeRole in line 234
   variable mApplications in line 213
   variable mTempApplications in line 220
   variable mTranslator in line 226
   variable mUI in line 232
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/gui/showtypes.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/gui/showtypes.h
module ShowTypes
   function isShown(ShowTypes::ShowType) in line 80
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable mVisible defined in ShowTypes
   function isShown(Severity::SeverityType) in line 87
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function isShown(ShowTypes::ShowType) defined in ShowTypes
      uses function SeverityToShowType(Severity::SeverityType) defined in ShowTypes
   function load() in line 68
      protection public
      10 lines of code
      0 parameters
      1 conditional paths
      uses variable mVisible defined in ShowTypes
      uses enumvalue ShowStyle defined in ShowTypes
      uses macro definition SETTINGS_SHOW_STYLE defined in common.h
      uses enumvalue ShowErrors defined in ShowTypes
      uses macro definition SETTINGS_SHOW_ERRORS defined in common.h
      uses enumvalue ShowWarnings defined in ShowTypes
      uses macro definition SETTINGS_SHOW_WARNINGS defined in common.h
      uses enumvalue ShowPortability defined in ShowTypes
      uses macro definition SETTINGS_SHOW_PORTABILITY defined in common.h
      uses enumvalue ShowPerformance defined in ShowTypes
      uses macro definition SETTINGS_SHOW_PERFORMANCE defined in common.h
      uses enumvalue ShowInformation defined in ShowTypes
      uses macro definition SETTINGS_SHOW_INFORMATION defined in common.h
   function save() in line 73
      protection public
      10 lines of code
      0 parameters
      1 conditional paths
      uses macro definition SETTINGS_SHOW_STYLE defined in common.h
      uses variable mVisible defined in ShowTypes
      uses enumvalue ShowStyle defined in ShowTypes
      uses macro definition SETTINGS_SHOW_ERRORS defined in common.h
      uses enumvalue ShowErrors defined in ShowTypes
      uses macro definition SETTINGS_SHOW_WARNINGS defined in common.h
      uses enumvalue ShowWarnings defined in ShowTypes
      uses macro definition SETTINGS_SHOW_PORTABILITY defined in common.h
      uses enumvalue ShowPortability defined in ShowTypes
      uses macro definition SETTINGS_SHOW_PERFORMANCE defined in common.h
      uses enumvalue ShowPerformance defined in ShowTypes
      uses macro definition SETTINGS_SHOW_INFORMATION defined in common.h
      uses enumvalue ShowInformation defined in ShowTypes
   function SeverityToShowType(Severity::SeverityType) in line 101
      protection public
      21 lines of code
      1 parameters
      8 conditional paths
      uses enumvalue none defined in Severity
      uses enumvalue ShowNone defined in ShowTypes
      uses enumvalue error defined in Severity
      uses enumvalue ShowErrors defined in ShowTypes
      uses enumvalue style defined in Severity
      uses enumvalue ShowStyle defined in ShowTypes
      uses enumvalue warning defined in Severity
      uses enumvalue ShowWarnings defined in ShowTypes
      uses enumvalue performance defined in Severity
      uses enumvalue ShowPerformance defined in ShowTypes
      uses enumvalue portability defined in Severity
      uses enumvalue ShowPortability defined in ShowTypes
      uses enumvalue information defined in Severity
      uses enumvalue ShowInformation defined in ShowTypes
   function show(ShowTypes::ShowType,bool) in line 94
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses variable mVisible defined in ShowTypes
   function ShowTypeToSeverity(ShowTypes::ShowType) in line 108
      protection public
      26 lines of code
      1 parameters
      8 conditional paths
      uses enumvalue ShowStyle defined in ShowTypes
      uses enumvalue style defined in Severity
      uses enumvalue ShowErrors defined in ShowTypes
      uses enumvalue error defined in Severity
      uses enumvalue ShowWarnings defined in ShowTypes
      uses enumvalue warning defined in Severity
      uses enumvalue ShowPerformance defined in ShowTypes
      uses enumvalue performance defined in Severity
      uses enumvalue ShowPortability defined in ShowTypes
      uses enumvalue portability defined in Severity
      uses enumvalue ShowInformation defined in ShowTypes
      uses enumvalue information defined in Severity
      uses enumvalue ShowNone defined in ShowTypes
      uses enumvalue none defined in Severity
   function VariantToShowType(const QVariant &) in line 116
      protection public
      8 lines of code
      1 parameters
      2 conditional paths
      uses variable data defined in cert.py
      uses enumvalue ShowErrors defined in ShowTypes
      uses enumvalue ShowNone defined in ShowTypes
   function ShowTypes() in line 57
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function load() defined in ShowTypes
   function ~ShowTypes() in line 63
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function save() defined in ShowTypes
   variable mVisible in line 118
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/gui/statsdialog.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/gui/statsdialog.h
module StatsDialog
   inherits from QDialog
   slot copyToClipboard in line 66
   function setNumberOfFilesScanned(int) in line 53
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable mUI defined in StatsDialog
   function setPathSelected(const QString &) in line 48
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable mUI defined in StatsDialog
      uses variable path defined in daca2-report.py
   function setProject(const Project &) in line 43
      protection public
      15 lines of code
      1 parameters
      2 conditional paths
      uses variable project defined in triage-report.py
      uses variable mUI defined in StatsDialog
      uses function GetRootPath() defined in ProjectFile
      uses function GetCheckPaths() defined in ProjectFile
      uses function GetIncludeDirs() defined in ProjectFile
      uses function GetDefines() defined in ProjectFile
   function setScanDuration(double) in line 58
      protection public
      28 lines of code
      1 parameters
      6 conditional paths
      uses variable mUI defined in StatsDialog
   function setStatistics(const CheckStatistics *) in line 63
      protection public
      10 lines of code
      1 parameters
      1 conditional paths
      uses variable mStatistics defined in StatsDialog
      uses variable mUI defined in StatsDialog
      uses function GetCount(ShowTypes::ShowType) defined in CheckStatistics
      uses enumvalue ShowErrors defined in ShowTypes
      uses enumvalue ShowWarnings defined in ShowTypes
      uses enumvalue ShowStyle defined in ShowTypes
      uses enumvalue ShowPortability defined in ShowTypes
      uses enumvalue ShowPerformance defined in ShowTypes
      uses enumvalue ShowInformation defined in ShowTypes
   function StatsDialog(QWidget *) in line 38
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses variable mUI defined in StatsDialog
      uses slot copyToClipboard defined in StatsDialog
   variable mStatistics in line 70
   variable mUI in line 69
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/gui/test/benchmark/simple/benchmarksimple.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/gui/test/benchmark/simple/benchmarksimple.h
module BenchmarkSimple
   inherits from QObject
   inherits from ErrorLogger
   function reportErr(const ErrorLogger::ErrorMessage &) in line 36
      2 lines of code
      1 parameters
      1 conditional paths
   function reportOut(const std::string &) in line 34
      2 lines of code
      1 parameters
      1 conditional paths
   slot simplify in line 28
   slot tokenize in line 27
   slot tokenizeAndSimplify in line 29
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/gui/test/data/benchmark/simple.cpp
module simple.cpp
   function doAssignment(Variables &,const Token *,bool,ScopeInfo *) in line 1345
      protection public
      212 lines of code
      4 parameters
      39 conditional paths
      uses function str(T &&) defined in Token
      uses function strAt(int) defined in Token
      uses function varId() defined in Token
      uses function find(unsigned int) defined in Variables
      uses function tokAt(int) defined in Token
      uses function use(unsigned int) defined in Variables
      uses variable _type defined in Variables::VariableUsage
      uses enumvalue pointer defined in Variables
      uses function read(unsigned int) defined in Variables
      uses enumvalue array defined in Variables
      uses function replace(char *,char,char) defined in times.c
      uses variable _scope defined in Variables::VariableUsage
      uses variable _assignments defined in Variables::VariableUsage
      uses function alias(unsigned int,unsigned int,bool) defined in Variables
      uses enumvalue reference defined in Variables
      uses function readAliases(unsigned int) defined in Variables
      uses function clearAliases(unsigned int) defined in Variables
      uses function eraseAll(unsigned int) defined in Variables
   function nextIsStandardType(const Token *) in line 1558
      protection public
      9 lines of code
      1 parameters
      2 conditional paths
      uses function next() defined in Token
      uses function str(T &&) defined in Token
      uses function isStandardType() defined in Token
   function nextIsStandardTypeOrVoid(const Token *) in line 1568
      protection public
      12 lines of code
      1 parameters
      131 conditional paths
      uses function next() defined in Token
      uses function str(T &&) defined in Token
      uses function isStandardType() defined in Token
      uses variable _tokenizer defined in Check
      uses function getSymbolDatabase() defined in Tokenizer
      uses function getVariableFromVarId(std::size_t) defined in SymbolDatabase
      uses function varId() defined in Token
      uses function type() defined in Variable
      uses variable needInitialization defined in Type
      uses variable derivedFrom defined in Type
      uses variable _settings defined in Check
      uses function isEnabled(T &&) defined in Settings
      uses variable scopeList defined in SymbolDatabase
      uses enumvalue eFunction defined in Scope
      uses function addChild(const Token *) defined in ScopeInfo
      uses function parent() defined in ScopeInfo
      uses function link(Token *) defined in Token
      uses function clear() defined in Variables
      uses function addVar(const Token *,VariableType,ScopeInfo *,bool) defined in Variables
      uses enumvalue standard defined in Variables
      uses function tokAt(int) defined in Token
      uses function strAt(int) defined in Token
      uses function nextIsStandardType(const Token *) defined in simple.cpp
      uses function readAll(unsigned int) defined in Variables
      uses enumvalue pointerArray defined in Variables
      uses enumvalue array defined in Variables
      uses function read(unsigned int) defined in Variables
      uses enumvalue pointer defined in Variables
      uses enumvalue reference defined in Variables
      uses function doAssignment(Variables &,const Token *,bool,ScopeInfo *) defined in simple.cpp
      uses enumvalue pointerPointer defined in Variables
      uses function find(unsigned int) defined in Variables
      uses function use(unsigned int) defined in Variables
      uses variable _type defined in Variables::VariableUsage
      uses variable _aliases defined in Variables::VariableUsage
      uses enumvalue referenceArray defined in Variables
      uses variable _allocateMemory defined in Variables::VariableUsage
      uses function write(unsigned int) defined in Variables
      uses function writeAliases(unsigned int) defined in Variables
      uses function allocateMemory(unsigned int) defined in Variables
      uses variable _read defined in Variables::VariableUsage
      uses function previous() defined in Token
      uses function writeAll(unsigned int) defined in Variables
      uses function isExtendedOp() defined in Token
      uses function modified(unsigned int) defined in Variables
      uses function isAssignmentOp() defined in Token
      uses function varUsage() defined in Variables
      uses variable _name defined in Variables::VariableUsage
      uses function unused() defined in Variables::VariableUsage
      uses variable _modified defined in Variables::VariableUsage
      uses variable _write defined in Variables::VariableUsage
      uses enumvalue style defined in Severity
   function isFunction(const std::string &,const Token *) in line 2811
      protection public
      20 lines of code
      2 parameters
      6 conditional paths
      uses function name() defined in Check
      uses function next() defined in Token
      uses function str(T &&) defined in Token
      uses function link(Token *) defined in Token
      uses function tokAt(int) defined in Token
      uses function isName() defined in Token
   function stringifyTokens(const Token *,const Token *) in line 2903
      protection public
      31 lines of code
      2 parameters
      8 conditional paths
      uses function isUnsigned() defined in Token
      uses function isSigned() defined in Token
      uses function isLong() defined in Token
      uses function str(T &&) defined in Token
      uses function next() defined in Token
   function expressionHasSideEffects(const Token *,const Token *) in line 2935
      protection public
      19 lines of code
      2 parameters
      13 conditional paths
      uses function next() defined in Token
      uses function isAssignmentOp() defined in Token
      uses function isStandardType() defined in Token
      uses variable _settings defined in Check
      uses function isEnabled(T &&) defined in Settings
      uses variable _tokenizer defined in Check
      uses function getSymbolDatabase() defined in Tokenizer
      uses variable scopeList defined in SymbolDatabase
      uses enumvalue eFunction defined in Scope
      uses function link(Token *) defined in Token
      uses function strAt(int) defined in Token
      uses function stringifyTokens(const Token *,const Token *) defined in simple.cpp
      uses function tokAt(int) defined in Token
      uses enumvalue style defined in Severity
module ScopeInfo
   function addChild(const Token *) in line 994
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
   function parent() in line 991
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function remove(ScopeInfo *) in line 995
      protection public
      12 lines of code
      1 parameters
      3 conditional paths
   function ScopeInfo() in line 987
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function ScopeInfo(const Token *,ScopeInfo *) in line 988
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function ~ScopeInfo() in line 989
      protection public
      7 lines of code
      0 parameters
      2 conditional paths
   variable _children in line 1000
   variable _parent in line 999
   variable _token in line 998
module Variables
   function addVar(const Variable *,VariableType,bool) in line 109
      protection public
      9 lines of code
      3 parameters
      2 conditional paths
      uses function declarationId() defined in Variable
      uses variable _varAddedInScope defined in Variables
      uses variable _varUsage defined in Variables
      uses function VariableUsage(const Token *,VariableType,ScopeInfo *,bool,bool,bool,bool) defined in Variables::VariableUsage
   function addVar(const Token *,VariableType,ScopeInfo *,bool) in line 1089
      protection public
      8 lines of code
      4 parameters
      2 conditional paths
      uses function name() defined in Check
   function alias(unsigned int,unsigned int,bool) in line 120
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function alias(unsigned int,unsigned int,bool) in line 1100
      protection public
      40 lines of code
      3 parameters
      9 conditional paths
      uses function use() defined in Variables::VariableUsage
      uses function replace(char *,char,char) defined in times.c
      uses variable _aliases defined in Variables::VariableUsage
      uses variable _name defined in Variables::VariableUsage
      uses function varId() defined in Token
      uses variable _type defined in Variables::VariableUsage
      uses enumvalue pointer defined in Variables
      uses variable _read defined in Variables::VariableUsage
   function allocateMemory(unsigned int,const Token *) in line 110
      protection public
      9 lines of code
      2 parameters
      2 conditional paths
      uses function find(unsigned int) defined in Variables
      uses variable _allocateMemory defined in Variables::VariableUsage
      uses variable _lastAccess defined in Variables::VariableUsage
   function allocateMemory(unsigned int) in line 1090
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses variable _allocateMemory defined in Variables::VariableUsage
   function clear() in line 103
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses variable _varUsage defined in Variables
   function clear() in line 1083
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function clearAliases(unsigned int) in line 126
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function clearAliases(unsigned int) in line 1106
      protection public
      19 lines of code
      1 parameters
      4 conditional paths
      uses variable _aliases defined in Variables::VariableUsage
      uses variable _name defined in Variables::VariableUsage
      uses function varId() defined in Token
   function enterScope() in line 133
      5 lines of code
      0 parameters
      1 conditional paths
      uses variable _varAddedInScope defined in Variables
      uses variable _varReadInScope defined in Variables
   function erase(unsigned int) in line 121
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
      uses variable _varUsage defined in Variables
      uses function eraseAliases(unsigned int) defined in Variables
      uses function eraseAll(unsigned int) defined in Variables
      uses function clearAliases(unsigned int) defined in Variables
   function erase(unsigned int) in line 1101
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function eraseAliases(unsigned int) in line 124
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function eraseAliases(unsigned int) in line 1104
      protection public
      11 lines of code
      1 parameters
      3 conditional paths
      uses variable _aliases defined in Variables::VariableUsage
   function eraseAll(unsigned int) in line 125
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function eraseAll(unsigned int) in line 1105
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
   function find(unsigned int) in line 119
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function find(unsigned int) in line 1099
      protection public
      9 lines of code
      1 parameters
      3 conditional paths
   function leaveScope(bool) in line 134
      31 lines of code
      1 parameters
      5 conditional paths
      uses variable _varReadInScope defined in Variables
      uses function read(unsigned int) defined in Variables
      uses variable _varAddedInScope defined in Variables
   function modified(unsigned int,const Token *) in line 118
      protection public
      20 lines of code
      2 parameters
      6 conditional paths
      uses function find(unsigned int) defined in Variables
      uses variable _modified defined in Variables::VariableUsage
      uses variable _lastAccess defined in Variables::VariableUsage
      uses variable _aliases defined in Variables::VariableUsage
      uses variable _varUsage defined in Variables
   function modified(unsigned int) in line 1098
      protection public
      17 lines of code
      1 parameters
      4 conditional paths
      uses variable _modified defined in Variables::VariableUsage
      uses variable _aliases defined in Variables::VariableUsage
   function newScope(bool) in line 128
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
      uses function enterScope() defined in Variables
      uses function leaveScope(bool) defined in Variables
   function read(unsigned int,const Token *) in line 111
      protection public
      11 lines of code
      2 parameters
      3 conditional paths
      uses function find(unsigned int) defined in Variables
      uses variable _varReadInScope defined in Variables
      uses variable _read defined in Variables::VariableUsage
      uses variable _lastAccess defined in Variables::VariableUsage
   function read(unsigned int) in line 1091
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses variable _read defined in Variables::VariableUsage
   function readAliases(unsigned int,const Token *) in line 112
      protection public
      18 lines of code
      2 parameters
      4 conditional paths
      uses function find(unsigned int) defined in Variables
      uses variable _aliases defined in Variables::VariableUsage
      uses variable _varReadInScope defined in Variables
      uses variable _read defined in Variables::VariableUsage
      uses variable _lastAccess defined in Variables::VariableUsage
   function readAliases(unsigned int) in line 1092
      protection public
      15 lines of code
      1 parameters
      4 conditional paths
      uses variable _aliases defined in Variables::VariableUsage
      uses variable _read defined in Variables::VariableUsage
   function readAll(unsigned int,const Token *) in line 113
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses function read(unsigned int) defined in Variables
      uses function readAliases(unsigned int) defined in Variables
   function readAll(unsigned int) in line 1093
      protection public
      17 lines of code
      1 parameters
      4 conditional paths
      uses variable _read defined in Variables::VariableUsage
      uses variable _aliases defined in Variables::VariableUsage
   function use(unsigned int,const Token *) in line 117
      protection public
      20 lines of code
      2 parameters
      4 conditional paths
      uses function find(unsigned int) defined in Variables
      uses function use() defined in Variables::VariableUsage
      uses variable _varReadInScope defined in Variables
      uses variable _lastAccess defined in Variables::VariableUsage
      uses variable _aliases defined in Variables::VariableUsage
   function use(unsigned int) in line 1097
      protection public
      17 lines of code
      1 parameters
      4 conditional paths
      uses function use() defined in Variables::VariableUsage
      uses variable _aliases defined in Variables::VariableUsage
   function varUsage() in line 106
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses variable _varUsage defined in Variables
      uses function addVar(const Token *,VariableType,ScopeInfo *,bool) defined in Variables
      uses function allocateMemory(unsigned int) defined in Variables
      uses function read(unsigned int) defined in Variables
      uses function readAliases(unsigned int) defined in Variables
      uses function readAll(unsigned int) defined in Variables
      uses function write(unsigned int) defined in Variables
      uses function writeAliases(unsigned int) defined in Variables
      uses function writeAll(unsigned int) defined in Variables
      uses function use() defined in Variables::VariableUsage
      uses function modified(unsigned int) defined in Variables
      uses function find(unsigned int) defined in Variables
      uses function alias(unsigned int,unsigned int,bool) defined in Variables
      uses function replace(char *,char,char) defined in times.c
   function varUsage() in line 1086
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses function name() defined in Check
      uses function replace(char *,char,char) defined in times.c
   function write(unsigned int,const Token *) in line 114
      protection public
      11 lines of code
      2 parameters
      3 conditional paths
      uses function find(unsigned int) defined in Variables
      uses variable _write defined in Variables::VariableUsage
      uses variable _var defined in Variables::VariableUsage
      uses function isStatic() defined in Variable
      uses function next() defined in Token
      uses variable _read defined in Variables::VariableUsage
      uses variable _lastAccess defined in Variables::VariableUsage
   function write(unsigned int) in line 1094
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses variable _write defined in Variables::VariableUsage
   function writeAliases(unsigned int,const Token *) in line 115
      protection public
      17 lines of code
      2 parameters
      4 conditional paths
      uses function find(unsigned int) defined in Variables
      uses variable _aliases defined in Variables::VariableUsage
      uses variable _write defined in Variables::VariableUsage
      uses variable _lastAccess defined in Variables::VariableUsage
   function writeAliases(unsigned int) in line 1095
      protection public
      15 lines of code
      1 parameters
      4 conditional paths
      uses variable _aliases defined in Variables::VariableUsage
      uses variable _write defined in Variables::VariableUsage
   function writeAll(unsigned int,const Token *) in line 116
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses function write(unsigned int) defined in Variables
      uses function writeAliases(unsigned int) defined in Variables
   function writeAll(unsigned int) in line 1096
      protection public
      17 lines of code
      1 parameters
      4 conditional paths
      uses variable _write defined in Variables::VariableUsage
      uses variable _aliases defined in Variables::VariableUsage
   variable _varAddedInScope in line 137
   variable _varReadInScope in line 138
   variable _varUsage in line 136
   variable _varUsage in line 1109
module Variables::VariableUsage
   function unused() in line 65
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses variable _read defined in Variables::VariableUsage
      uses variable _write defined in Variables::VariableUsage
      uses variable _aliases defined in Variables::VariableUsage
   function unused() in line 1066
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function use(std::list< std::set< unsigned int > > &) in line 58
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable _var defined in Variables::VariableUsage
      uses function declarationId() defined in Variable
      uses variable _read defined in Variables::VariableUsage
      uses variable _write defined in Variables::VariableUsage
   function use() in line 1060
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function VariableUsage(const Token *,VariableType,ScopeInfo *,bool,bool,bool,bool) in line 1043
      protection public
      15 lines of code
      7 parameters
      1 conditional paths
   function VariableUsage(const Variable *,VariableType,bool,bool,bool,bool) in line 42
      protection public
      14 lines of code
      6 parameters
      1 conditional paths
   variable _aliases in line 1077
      protection public
   variable _allocateMemory in line 1076
      protection public
   variable _assignments in line 70
      protection public
   variable _assignments in line 1078
      protection public
   variable _lastAccess in line 73
      protection public
   variable _modified in line 1075
      protection public
   variable _name in line 1070
      protection public
   variable _read in line 1073
      protection public
   variable _scope in line 1072
      protection public
   variable _type in line 1071
      protection public
   variable _var in line 72
      protection public
   variable _write in line 1074
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/gui/test/data/files/dir1/dir11/foo11.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/gui/test/data/files/dir1/foo1.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/gui/test/data/files/dir2/foo1.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/gui/test/data/files/foo1.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/gui/test/data/files/foo2.cxx
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/gui/test/data/files/foo3.cc
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/gui/test/data/files/foo4.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/gui/test/data/files/foo5.c++
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/gui/test/filelist/testfilelist.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/gui/test/filelist/testfilelist.h
module TestFileList
   inherits from QObject
   slot addDirectory in line 30
   slot addDirectory_recursive in line 31
   slot addFile in line 26
   slot addFile_notexist in line 28
   slot addFile_unknown in line 29
   slot addPathList in line 27
   slot filterFiles in line 32
   slot filterFiles2 in line 33
   slot filterFiles3 in line 34
   slot filterFiles4 in line 35
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/gui/test/projectfile/testprojectfile.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/gui/test/projectfile/testprojectfile.h
module TestProjectFile
   inherits from QObject
   slot loadInexisting in line 26
   slot loadSimple in line 27
   slot loadSimpleNoroot in line 29
   slot loadSimpleWithIgnore in line 28
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/gui/test/translationhandler/testtranslationhandler.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/gui/test/translationhandler/testtranslationhandler.h
module TestTranslationHandler
   inherits from QObject
   slot construct in line 26
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/gui/test/xmlreport/testxmlreport.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/gui/test/xmlreport/testxmlreport.h
module TestXmlReport
   inherits from QObject
   slot testGetVersion1 in line 28
   slot testGetVersion2 in line 29
   slot testQuoteMessage in line 26
   slot testUnquoteMessage in line 27
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/gui/test/xmlreportv1/testxmlreportv1.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/gui/test/xmlreportv1/testxmlreportv1.h
module TestXmlReportV1
   inherits from QObject
   slot readXml in line 26
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/gui/test/xmlreportv2/testxmlreportv2.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/gui/test/xmlreportv2/testxmlreportv2.h
module TestXmlReportV2
   inherits from QObject
   slot readXml in line 26
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/gui/threadhandler.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/gui/threadhandler.h
module ThreadHandler
   inherits from QObject
   function Check(const Settings &,bool) in line 92
      protection public
      25 lines of code
      2 parameters
      4 conditional paths
      uses variable mResults defined in ThreadHandler
      uses function GetFileCount() defined in ThreadResult
      uses variable mRunningThreadCount defined in ThreadHandler
      uses variable jobs defined in Settings
      uses signal Done defined in ThreadHandler
      uses function SetThreadCount(const int) defined in ThreadHandler
      uses variable mThreads defined in ThreadHandler
      uses variable mCheckStartTime defined in ThreadHandler
      uses variable mTime defined in ThreadHandler
   function ClearFiles() in line 77
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
      uses variable mLastFiles defined in ThreadHandler
      uses variable mResults defined in ThreadHandler
      uses function ClearFiles() defined in ThreadResult
   signal Done in line 161
      protection public
   function GetCheckStartTime() in line 147
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable mCheckStartTime defined in ThreadHandler
   function GetPreviousFilesCount() in line 127
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable mLastFiles defined in ThreadHandler
   function GetPreviousScanDuration() in line 134
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable mScanDuration defined in ThreadHandler
   function GetReCheckFiles(bool) in line 140
      protection public
      15 lines of code
      1 parameters
      4 conditional paths
      uses variable mLastCheckTime defined in ThreadHandler
      uses variable mLastFiles defined in ThreadHandler
      uses function NeedsReCheck(const QString &,std::set< QString > &,std::set< QString > &) defined in ThreadHandler
   function HasPreviousFiles() in line 120
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable mLastFiles defined in ThreadHandler
   function Initialize(ResultsView *) in line 59
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
      uses variable mResults defined in ThreadHandler
   function IsChecking() in line 113
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable mRunningThreadCount defined in ThreadHandler
   function LoadSettings(QSettings &) in line 65
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function SetThreadCount(const int) defined in ThreadHandler
      uses macro definition SETTINGS_CHECK_THREADS defined in common.h
   function NeedsReCheck(const QString &,std::set< QString > &,std::set< QString > &) in line 235
      39 lines of code
      3 parameters
      9 conditional paths
      uses variable filename defined in extracttests.py
      uses variable mLastCheckTime defined in ThreadHandler
      uses function f(char) defined in test.cxx
      uses variable line defined in triage-report.py
   function RemoveThreads() in line 210
      14 lines of code
      0 parameters
      2 conditional paths
      uses variable mThreads defined in ThreadHandler
      uses signal Done defined in ThreadHandler
      uses slot ThreadDone defined in ThreadHandler
      uses variable mResults defined in ThreadHandler
   function SaveSettings(QSettings &) in line 71
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses macro definition SETTINGS_CHECK_THREADS defined in common.h
      uses variable mThreads defined in ThreadHandler
   function SetCheckFiles(bool) in line 99
      protection public
      6 lines of code
      1 parameters
      2 conditional paths
      uses variable mRunningThreadCount defined in ThreadHandler
      uses variable mResults defined in ThreadHandler
      uses function SetFiles(const QStringList &) defined in ThreadResult
      uses function GetReCheckFiles(bool) defined in ThreadHandler
   function SetCheckFiles(QStringList) in line 106
      protection public
      6 lines of code
      1 parameters
      2 conditional paths
      uses variable mRunningThreadCount defined in ThreadHandler
      uses variable mResults defined in ThreadHandler
      uses function SetFiles(const QStringList &) defined in ThreadResult
   function SetCheckStartTime(QDateTime) in line 154
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable mCheckStartTime defined in ThreadHandler
   function SetFiles(const QStringList &) in line 84
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable mResults defined in ThreadHandler
      uses function SetFiles(const QStringList &) defined in ThreadResult
      uses variable mLastFiles defined in ThreadHandler
   function SetThreadCount(const int) in line 52
      protection public
      20 lines of code
      1 parameters
      3 conditional paths
      uses variable mRunningThreadCount defined in ThreadHandler
      uses variable count defined in extracttests.py
      uses variable mThreads defined in ThreadHandler
      uses function RemoveThreads() defined in ThreadHandler
      uses variable mResults defined in ThreadHandler
      uses signal Done defined in ThreadHandler
      uses slot ThreadDone defined in ThreadHandler
   slot Stop in line 169
      protection public
   slot ThreadDone in line 178
   function ThreadHandler(QObject *) in line 45
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses function SetThreadCount(const int) defined in ThreadHandler
   function ~ThreadHandler() in line 46
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function RemoveThreads() defined in ThreadHandler
   variable mCheckStartTime in line 187
   variable mLastCheckTime in line 192
   variable mLastFiles in line 184
   variable mResults in line 216
   variable mRunningThreadCount in line 228
   variable mScanDuration in line 204
   variable mThreads in line 222
   variable mTime in line 198
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/gui/threadresult.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/gui/threadresult.h
module ThreadResult
   inherits from QObject
   inherits from ErrorLogger
   function ClearFiles() in line 59
      protection public
      7 lines of code
      0 parameters
      1 conditional paths
      uses variable mutex defined in ThreadResult
      uses variable mFiles defined in ThreadResult
      uses variable mFilesChecked defined in ThreadResult
      uses variable mTotalFiles defined in ThreadResult
   signal DebugError in line 107
      protection public
   signal Error in line 93
      protection public
   slot FileChecked in line 79
      protection public
   function GetFileCount() in line 65
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
      uses variable mutex defined in ThreadResult
      uses variable mFiles defined in ThreadResult
   function GetNextFile() in line 47
      protection public
      9 lines of code
      0 parameters
      2 conditional paths
      uses variable mutex defined in ThreadResult
      uses variable mFiles defined in ThreadResult
   signal Log in line 100
      protection public
   signal Progress in line 86
      protection public
   function reportErr(const ErrorLogger::ErrorMessage &) in line 71
      protection public
      30 lines of code
      1 parameters
      3 conditional paths
      uses variable mutex defined in ThreadResult
      uses variable msg defined in findcasts.py
      uses variable file defined in ErrorItem
      uses variable files defined in ErrorItem
      uses variable errorId defined in ErrorItem
      uses variable lines defined in ErrorItem
      uses variable summary defined in ErrorItem
      uses variable message defined in ErrorItem
      uses variable severity defined in ErrorItem
      uses variable inconclusive defined in ErrorItem
      uses variable file0 defined in ErrorItem
      uses enumvalue debug defined in Severity
      uses signal Error defined in ThreadResult
      uses signal DebugError defined in ThreadResult
   function reportOut(const std::string &) in line 70
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses signal Log defined in ThreadResult
   function SetFiles(const QStringList &) in line 53
      protection public
      16 lines of code
      1 parameters
      2 conditional paths
      uses variable mutex defined in ThreadResult
      uses variable mFiles defined in ThreadResult
      uses variable mProgress defined in ThreadResult
      uses variable mFilesChecked defined in ThreadResult
      uses variable mTotalFiles defined in ThreadResult
      uses variable mMaxProgress defined in ThreadResult
   function ThreadResult() in line 40
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function ~ThreadResult() in line 41
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   variable mFiles in line 121
   variable mFilesChecked in line 139
   variable mMaxProgress in line 127
   variable mProgress in line 133
   variable mTotalFiles in line 145
   variable mutex in line 115
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/gui/translationhandler.cpp
module translationhandler.cpp
   function unused() in line 30
      protection public
      13 lines of code
      0 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/gui/translationhandler.h
module TranslationInfo
   variable mCode in line 51
      protection public
   variable mFilename in line 45
      protection public
   variable mName in line 39
      protection public
module TranslationHandler
   inherits from QObject
   function AddTranslation(const char *,const char *) in line 116
      9 lines of code
      2 parameters
      1 conditional paths
      uses variable mName defined in TranslationInfo
      uses variable name defined in setup.py
      uses variable mFilename defined in TranslationInfo
      uses variable filename defined in extracttests.py
      uses variable mCode defined in TranslationInfo
      uses variable mTranslations defined in TranslationHandler
   function GetCurrentLanguage() in line 96
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable mCurrentLanguage defined in TranslationHandler
   function GetLanguageIndexByCode(const QString &) in line 124
      14 lines of code
      1 parameters
      4 conditional paths
      uses variable mTranslations defined in TranslationHandler
      uses variable code defined in extracttests.py
   function GetNames() in line 72
      protection public
      8 lines of code
      0 parameters
      2 conditional paths
      uses variable mTranslations defined in TranslationHandler
      uses variable mName defined in TranslationInfo
   function GetTranslations() in line 79
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable name defined in setup.py
      uses variable filename defined in extracttests.py
   function SetLanguage(const QString &) in line 89
      protection public
      82 lines of code
      1 parameters
      11 conditional paths
      uses variable code defined in extracttests.py
      uses variable mTranslator defined in TranslationHandler
      uses variable mCurrentLanguage defined in TranslationHandler
      uses function GetLanguageIndexByCode(const QString &) defined in TranslationHandler
      uses variable mTranslations defined in TranslationHandler
      uses variable msg defined in findcasts.py
   function SuggestLanguage() in line 106
      protection public
      16 lines of code
      0 parameters
      2 conditional paths
      uses function GetLanguageIndexByCode(const QString &) defined in TranslationHandler
   function TranslationHandler(QObject *) in line 64
      protection public
      21 lines of code
      1 parameters
      1 conditional paths
      uses function AddTranslation(const char *,const char *) defined in TranslationHandler
   function ~TranslationHandler() in line 65
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   variable mCurrentLanguage in line 132
   variable mTranslations in line 138
   variable mTranslator in line 144
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/gui/txtreport.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/gui/txtreport.h
module TxtReport
   inherits from Report
   function Create() in line 45
      protection public
      8 lines of code
      0 parameters
      2 conditional paths
      uses function Create() defined in Report
      uses variable mTxtWriter defined in TxtReport
      uses function GetFile() defined in Report
   function WriteError(const ErrorItem &) in line 61
      protection public
      31 lines of code
      1 parameters
      5 conditional paths
      uses variable line defined in triage-report.py
      uses variable lines defined in ErrorItem
      uses variable files defined in ErrorItem
      uses variable inconclusive defined in ErrorItem
      uses variable severity defined in ErrorItem
      uses variable summary defined in ErrorItem
      uses variable mTxtWriter defined in TxtReport
   function WriteFooter() in line 55
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function WriteHeader() in line 50
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function TxtReport(const QString &) in line 38
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function ~TxtReport() in line 39
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   variable mTxtWriter in line 68
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/gui/xmlreport.cpp
module xmlreport.cpp
   variable ResultElementName in line 26
      protection public
   variable VersionAttribute in line 27
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/gui/xmlreport.h
module XmlReport
   inherits from Report
   abstract class
   function determineVersion(const QString &) in line 64
      protection public
      38 lines of code
      1 parameters
      16 conditional paths
      uses variable filename defined in extracttests.py
   function quoteMessage(const QString &) in line 50
      protection public
      10 lines of code
      1 parameters
      1 conditional paths
      uses variable message defined in triage-report.py
   function Read() in line 43
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function unquoteMessage(const QString &) in line 57
      protection public
      10 lines of code
      1 parameters
      1 conditional paths
      uses variable message defined in triage-report.py
   function XmlReport(const QString &) in line 38
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/gui/xmlreportv1.cpp
module xmlreportv1.cpp
   variable ResultElementName in line 30
      protection public
   variable ErrorElementName in line 31
      protection public
   variable FilenameAttribute in line 32
      protection public
   variable LineAttribute in line 33
      protection public
   variable IdAttribute in line 34
      protection public
   variable SeverityAttribute in line 35
      protection public
   variable MsgAttribute in line 36
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/gui/xmlreportv1.h
module XmlReportV1
   inherits from XmlReport
   function Create() in line 45
      protection public
      8 lines of code
      0 parameters
      2 conditional paths
      uses function Create() defined in Report
      uses variable mXmlWriter defined in XmlReportV1
      uses function GetFile() defined in Report
   function Open() in line 50
      protection public
      8 lines of code
      0 parameters
      2 conditional paths
      uses function Open() defined in Report
      uses variable mXmlReader defined in XmlReportV1
      uses function GetFile() defined in Report
   function Read() in line 71
      protection public
      41 lines of code
      0 parameters
      17 conditional paths
      uses variable errors defined in extracttests.py
      uses variable mXmlReader defined in XmlReportV1
      uses function ReadError(QXmlStreamReader *) defined in XmlReportV1
   function ReadError(QXmlStreamReader *) in line 78
      28 lines of code
      1 parameters
      3 conditional paths
      uses variable file defined in ErrorItem
      uses variable files defined in ErrorItem
      uses variable line defined in triage-report.py
      uses variable lines defined in ErrorItem
      uses variable errorId defined in ErrorItem
      uses variable severity defined in ErrorItem
      uses variable summary defined in ErrorItem
      uses variable message defined in triage-report.py
      uses variable message defined in ErrorItem
   function WriteError(const ErrorItem &) in line 66
      protection public
      26 lines of code
      1 parameters
      2 conditional paths
      uses variable inconclusive defined in ErrorItem
      uses variable mXmlWriter defined in XmlReportV1
      uses variable files defined in ErrorItem
      uses variable line defined in triage-report.py
      uses variable lines defined in ErrorItem
      uses variable errorId defined in ErrorItem
      uses variable severity defined in ErrorItem
      uses variable message defined in triage-report.py
      uses variable message defined in ErrorItem
   function WriteFooter() in line 60
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
      uses variable mXmlWriter defined in XmlReportV1
   function WriteHeader() in line 55
      protection public
      6 lines of code
      0 parameters
      1 conditional paths
      uses variable mXmlWriter defined in XmlReportV1
   function XmlReportV1(const QString &) in line 38
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function ~XmlReportV1() in line 39
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
      uses variable mXmlReader defined in XmlReportV1
      uses variable mXmlWriter defined in XmlReportV1
   variable mXmlReader in line 84
   variable mXmlWriter in line 89
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/gui/xmlreportv2.cpp
module xmlreportv2.cpp
   variable ResultElementName in line 31
      protection public
   variable CppcheckElementName in line 32
      protection public
   variable ErrorElementName in line 33
      protection public
   variable ErrorsElementName in line 34
      protection public
   variable LocationElementName in line 35
      protection public
   variable FilenameAttribute in line 36
      protection public
   variable LineAttribute in line 37
      protection public
   variable IdAttribute in line 38
      protection public
   variable SeverityAttribute in line 39
      protection public
   variable MsgAttribute in line 40
      protection public
   variable VersionAttribute in line 41
      protection public
   variable VerboseAttribute in line 42
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/gui/xmlreportv2.h
module XmlReportV2
   inherits from XmlReport
   function Create() in line 46
      protection public
      8 lines of code
      0 parameters
      2 conditional paths
      uses function Create() defined in Report
      uses variable mXmlWriter defined in XmlReportV2
      uses function GetFile() defined in Report
   function Open() in line 51
      protection public
      8 lines of code
      0 parameters
      2 conditional paths
      uses function Open() defined in Report
      uses variable mXmlReader defined in XmlReportV2
      uses function GetFile() defined in Report
   function Read() in line 72
      protection public
      41 lines of code
      0 parameters
      17 conditional paths
      uses variable errors defined in extracttests.py
      uses variable mXmlReader defined in XmlReportV2
      uses function ReadError(QXmlStreamReader *) defined in XmlReportV2
   function ReadError(QXmlStreamReader *) in line 79
      62 lines of code
      1 parameters
      17 conditional paths
      uses variable mXmlReader defined in XmlReportV2
      uses variable errorId defined in ErrorItem
      uses variable severity defined in ErrorItem
      uses variable summary defined in ErrorItem
      uses variable message defined in triage-report.py
      uses variable message defined in ErrorItem
      uses variable file defined in ErrorItem
      uses variable files defined in ErrorItem
      uses variable line defined in triage-report.py
      uses variable lines defined in ErrorItem
   function WriteError(const ErrorItem &) in line 67
      protection public
      39 lines of code
      1 parameters
      3 conditional paths
      uses variable inconclusive defined in ErrorItem
      uses variable mXmlWriter defined in XmlReportV2
      uses variable errorId defined in ErrorItem
      uses variable severity defined in ErrorItem
      uses variable summary defined in ErrorItem
      uses variable message defined in triage-report.py
      uses variable message defined in ErrorItem
      uses variable files defined in ErrorItem
      uses variable line defined in triage-report.py
      uses variable lines defined in ErrorItem
   function WriteFooter() in line 61
      protection public
      6 lines of code
      0 parameters
      1 conditional paths
      uses variable mXmlWriter defined in XmlReportV2
   function WriteHeader() in line 56
      protection public
      11 lines of code
      0 parameters
      1 conditional paths
      uses variable mXmlWriter defined in XmlReportV2
   function XmlReportV2(const QString &) in line 39
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function ~XmlReportV2() in line 40
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
      uses variable mXmlReader defined in XmlReportV2
      uses variable mXmlWriter defined in XmlReportV2
   variable mXmlReader in line 85
   variable mXmlWriter in line 90
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/htmlreport/example.cc
module example.cc
   function main() in line 3
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/htmlreport/setup.py
module setup.py
   variable name in line 6
      protection public
   variable scripts in line 7
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/htmlreport/test_htmlreport.py
module test_htmlreport.py
   variable ROOT_DIR in line 17
      protection public
   variable CPPCHECK_BIN in line 18
      protection public
   variable HTML_REPORT_BIN in line 20
      protection public
   function runCheck((null),(null),(null)) in line 80
      protection public
      34 lines of code
      3 parameters
      1 conditional paths
module test_htmlreport::TestHTMLReport
   inherits from unittest::TestCase
   function checkReportError((null),(null)) in line 30
      protection public
      19 lines of code
      2 parameters
      1 conditional paths
      uses function runCheck((null),(null),(null)) defined in test_htmlreport.py
   function checkReportNoError((null),(null)) in line 53
      protection public
      13 lines of code
      2 parameters
      1 conditional paths
      uses function runCheck((null),(null),(null)) defined in test_htmlreport.py
   function testMissingInclude((null)) in line 66
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
      uses function runCheck((null),(null),(null)) defined in test_htmlreport.py
   function testReportError((null)) in line 26
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function checkReportError((null),(null)) defined in test_htmlreport::TestHTMLReport
   function testReportNoError((null)) in line 49
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function checkReportNoError((null),(null)) defined in test_htmlreport::TestHTMLReport
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/lib/astutils.cpp
module astutils.cpp
   function astIsSignedChar(const Token *) in line 27
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function valueType() defined in Token
      uses variable sign defined in ValueType
      uses variable type defined in ValueType
      uses variable pointer defined in ValueType
   function astIsIntegral(const Token *,bool) in line 32
      protection public
      7 lines of code
      2 parameters
      1 conditional paths
      uses function valueType() defined in Token
      uses function isIntegral() defined in ValueType
      uses variable pointer defined in ValueType
   function astIsFloat(const Token *,bool) in line 40
      protection public
      7 lines of code
      2 parameters
      1 conditional paths
      uses function valueType() defined in Token
      uses variable type defined in ValueType
      uses variable pointer defined in ValueType
   function astCanonicalType(const Token *) in line 48
      protection public
      17 lines of code
      1 parameters
      1 conditional paths
      uses function variable(const Variable *) defined in Token
      uses function typeStartToken() defined in Variable
      uses function nameToken() defined in Variable
      uses function next() defined in Token
   function astIsVariableComparison(const Token *,const std::string &,const std::string &,const Token **) in line 66
      protection public
      34 lines of code
      4 parameters
      1 conditional paths
      uses function isComparisonOp() defined in Token
      uses function astOperand1(Token *) defined in Token
      uses variable s defined in extracttests.py
      uses function str(T &&) defined in Token
      uses function astOperand2(Token *) defined in Token
      uses function varId() defined in Token
   function isSameExpression(bool,bool,const Token *,const Token *,const std::set< std::string > &) in line 101
      protection public
      92 lines of code
      5 parameters
      1 conditional paths
      uses function str(T &&) defined in Token
      uses function astOperand1(Token *) defined in Token
      uses function astOperand2(Token *) defined in Token
      uses function varId() defined in Token
      uses function isSameExpression(bool,bool,const Token *,const Token *,const std::set< std::string > &) defined in astutils.cpp
      uses function originalName() defined in Token
      uses function isExpandedMacro() defined in Token
      uses function isName() defined in Token
      uses function next() defined in Token
      uses function function(const Function *) defined in Token
      uses function previous() defined in Token
      uses function isAttributeConst() defined in Token
      uses function isAttributePure() defined in Token
      uses function link(Token *) defined in Token
      uses function tokType() defined in Token
      uses enumvalue eIncDecOp defined in Token
      uses function isAssignmentOp() defined in Token
      uses enumvalue eString defined in Token
      uses function astIsIntegral(const Token *,bool) defined in astutils.cpp
   function isOppositeCond(bool,bool,const Token *const,const Token *const,const std::set< std::string > &) in line 194
      protection public
      47 lines of code
      5 parameters
      1 conditional paths
      uses function str(T &&) defined in Token
      uses function astOperand1(Token *) defined in Token
      uses function isSameExpression(bool,bool,const Token *,const Token *,const std::set< std::string > &) defined in astutils.cpp
      uses function astOperand2(Token *) defined in Token
      uses function isOppositeCond(bool,bool,const Token *const,const Token *const,const std::set< std::string > &) defined in astutils.cpp
      uses function isComparisonOp() defined in Token
   function isConstExpression(const Token *,const std::set< std::string > &) in line 242
      protection public
      17 lines of code
      2 parameters
      1 conditional paths
      uses function isName() defined in Token
      uses function next() defined in Token
      uses function str(T &&) defined in Token
      uses function function(const Function *) defined in Token
      uses function previous() defined in Token
      uses function tokType() defined in Token
      uses enumvalue eIncDecOp defined in Token
      uses function isConstExpression(const Token *,const std::set< std::string > &) defined in astutils.cpp
      uses function astOperand1(Token *) defined in Token
      uses function astOperand2(Token *) defined in Token
   function isWithoutSideEffects(bool,const Token *) in line 260
      protection public
      13 lines of code
      2 parameters
      1 conditional paths
      uses function astOperand2(Token *) defined in Token
      uses function varId() defined in Token
      uses function variable(const Variable *) defined in Token
      uses function isClass() defined in Variable
      uses function isPointer() defined in Variable
      uses function isStlType() defined in Variable
   function isVariableChanged(const Token *,const Token *,const unsigned int) in line 274
      protection public
      31 lines of code
      3 parameters
      1 conditional paths
      uses function next() defined in Token
      uses function astParent() defined in Token
      uses function str(T &&) defined in Token
      uses function previous() defined in Token
      uses function function(const Function *) defined in Token
      uses function tokType() defined in Token
      uses enumvalue eIncDecOp defined in Token
   function numberOfArguments(const Token *) in line 306
      protection public
      13 lines of code
      1 parameters
      1 conditional paths
      uses function next() defined in Token
      uses function str(T &&) defined in Token
      uses function nextArgument() defined in Token
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/lib/astutils.h
module astutils.h
   function astIsSignedChar(const Token *) in line 31
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function valueType() defined in Token
      uses variable sign defined in ValueType
      uses variable type defined in ValueType
      uses variable pointer defined in ValueType
   function astIsIntegral(const Token *,bool) in line 33
      protection public
      7 lines of code
      2 parameters
      2 conditional paths
      uses function valueType() defined in Token
      uses function isIntegral() defined in ValueType
      uses variable pointer defined in ValueType
   function astIsFloat(const Token *,bool) in line 35
      protection public
      7 lines of code
      2 parameters
      2 conditional paths
      uses function valueType() defined in Token
      uses variable type defined in ValueType
      uses variable pointer defined in ValueType
   function astCanonicalType(const Token *) in line 46
      protection public
      17 lines of code
      1 parameters
      5 conditional paths
      uses function variable(const Variable *) defined in Token
      uses function typeStartToken() defined in Variable
      uses function nameToken() defined in Variable
      uses function next() defined in Token
   function astIsVariableComparison(const Token *,const std::string &,const std::string &,const Token **) in line 49
      protection public
      34 lines of code
      4 parameters
      14 conditional paths
      uses function isComparisonOp() defined in Token
      uses function astOperand1(Token *) defined in Token
      uses variable s defined in extracttests.py
      uses function str(T &&) defined in Token
      uses function astOperand2(Token *) defined in Token
      uses function varId() defined in Token
   function isSameExpression(bool,bool,const Token *,const Token *,const std::set< std::string > &) in line 51
      protection public
      92 lines of code
      5 parameters
      25 conditional paths
      uses function str(T &&) defined in Token
      uses function astOperand1(Token *) defined in Token
      uses function astOperand2(Token *) defined in Token
      uses function varId() defined in Token
      uses function isSameExpression(bool,bool,const Token *,const Token *,const std::set< std::string > &) defined in astutils.cpp
      uses function originalName() defined in Token
      uses function isExpandedMacro() defined in Token
      uses function isName() defined in Token
      uses function next() defined in Token
      uses function function(const Function *) defined in Token
      uses function previous() defined in Token
      uses function isAttributeConst() defined in Token
      uses function isAttributePure() defined in Token
      uses function link(Token *) defined in Token
      uses function tokType() defined in Token
      uses enumvalue eIncDecOp defined in Token
      uses function isAssignmentOp() defined in Token
      uses enumvalue eString defined in Token
      uses function astIsIntegral(const Token *,bool) defined in astutils.cpp
   function isOppositeCond(bool,bool,const Token *const,const Token *const,const std::set< std::string > &) in line 61
      protection public
      47 lines of code
      5 parameters
      12 conditional paths
      uses function str(T &&) defined in Token
      uses function astOperand1(Token *) defined in Token
      uses function isSameExpression(bool,bool,const Token *,const Token *,const std::set< std::string > &) defined in astutils.cpp
      uses function astOperand2(Token *) defined in Token
      uses function isOppositeCond(bool,bool,const Token *const,const Token *const,const std::set< std::string > &) defined in astutils.cpp
      uses function isComparisonOp() defined in Token
   function isConstExpression(const Token *,const std::set< std::string > &) in line 63
      protection public
      17 lines of code
      2 parameters
      7 conditional paths
      uses function isName() defined in Token
      uses function next() defined in Token
      uses function str(T &&) defined in Token
      uses function function(const Function *) defined in Token
      uses function previous() defined in Token
      uses function tokType() defined in Token
      uses enumvalue eIncDecOp defined in Token
      uses function isConstExpression(const Token *,const std::set< std::string > &) defined in astutils.cpp
      uses function astOperand1(Token *) defined in Token
      uses function astOperand2(Token *) defined in Token
   function isWithoutSideEffects(bool,const Token *) in line 65
      protection public
      13 lines of code
      2 parameters
      4 conditional paths
      uses function astOperand2(Token *) defined in Token
      uses function varId() defined in Token
      uses function variable(const Variable *) defined in Token
      uses function isClass() defined in Variable
      uses function isPointer() defined in Variable
      uses function isStlType() defined in Variable
   function isVariableChanged(const Token *,const Token *,const unsigned int) in line 68
      protection public
      31 lines of code
      3 parameters
      11 conditional paths
      uses function next() defined in Token
      uses function astParent() defined in Token
      uses function str(T &&) defined in Token
      uses function previous() defined in Token
      uses function function(const Function *) defined in Token
      uses function tokType() defined in Token
      uses enumvalue eIncDecOp defined in Token
   function numberOfArguments(const Token *) in line 74
      protection public
      13 lines of code
      1 parameters
      3 conditional paths
      uses function next() defined in Token
      uses function str(T &&) defined in Token
      uses function nextArgument() defined in Token
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/lib/check.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/lib/check.h
module Check
   abstract class
   function analyseWholeProgram(const std::list< FileInfo * > &,const Settings &,ErrorLogger &) in line 100
      protection public
      5 lines of code
      3 parameters
      1 conditional paths
   function classInfo() in line 74
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function getErrorMessages(ErrorLogger *,const Settings *) in line 66
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function getFileInfo(const Tokenizer *,const Settings *) in line 94
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
   function inconclusiveFlag() in line 83
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function instances() in line 56
      protection public
      12 lines of code
      0 parameters
      1 conditional paths
   function name() in line 69
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses function reportError((null),(null),(null)) defined in cert.py
   function operator=(const Check &) in line 145
      1 lines of code
      1 parameters
      1 conditional paths
   function reportError(const ErrorLogger::ErrorMessage &) in line 81
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function toXML(bool,int) defined in ErrorLogger::ErrorMessage
   function reportError(const Token *,const Severity::SeverityType,const T,const U) in line 113
      3 lines of code
      4 parameters
      1 conditional paths
      uses function reportError((null),(null),(null)) defined in cert.py
      uses variable msg defined in findcasts.py
   function reportError(const Token *,const Severity::SeverityType,const T,const U,unsigned int,bool) in line 119
      4 lines of code
      6 parameters
      1 conditional paths
      uses function reportError((null),(null),(null)) defined in cert.py
      uses variable msg defined in findcasts.py
   function reportError(const std::list< const Token * > &,Severity::SeverityType,const T,const U) in line 126
      3 lines of code
      4 parameters
      1 conditional paths
      uses function reportError((null),(null),(null)) defined in cert.py
      uses variable msg defined in findcasts.py
   function reportError(const std::list< const Token * > &,Severity::SeverityType,const T,const U,unsigned int,bool) in line 132
      8 lines of code
      6 parameters
      2 conditional paths
      uses variable list defined in Tokenizer
      uses variable msg defined in findcasts.py
      uses variable _cwe defined in ErrorLogger::ErrorMessage
      uses function reportErr(const ErrorLogger::ErrorMessage &) defined in ErrorLogger
      uses function reportError((null),(null),(null)) defined in cert.py
   function runChecks(const Tokenizer *,const Settings *,ErrorLogger *) in line 59
      protection public
      2 lines of code
      3 parameters
      1 conditional paths
   function runSimplifiedChecks(const Tokenizer *,const Settings *,ErrorLogger *) in line 63
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function Check(const std::string &) in line 43
      protection public
      11 lines of code
      1 parameters
      3 conditional paths
      uses function instances() defined in Check
   function Check(const std::string &,const Tokenizer *,const Settings *,ErrorLogger *) in line 46
      protection public
      3 lines of code
      4 parameters
      1 conditional paths
   function ~Check() in line 50
      protection public
      4 lines of code
      0 parameters
      2 conditional paths
   function Check(const Check &) in line 146
      1 lines of code
      1 parameters
      1 conditional paths
   variable _errorLogger in line 109
   variable _name in line 142
   variable _settings in line 108
   variable _tokenizer in line 107
module Check::FileInfo
   function FileInfo() in line 90
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function ~FileInfo() in line 91
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/lib/check64bit.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/lib/check64bit.h
module Check64BitPortability
   inherits from Check
   function assignmentAddressToIntegerError(const Token *) in line 65
      10 lines of code
      1 parameters
      1 conditional paths
      uses enumvalue portability defined in Severity
   function assignmentIntegerToAddressError(const Token *) in line 66
      10 lines of code
      1 parameters
      1 conditional paths
      uses enumvalue portability defined in Severity
   function classInfo() in line 82
      5 lines of code
      0 parameters
      1 conditional paths
   function getErrorMessages(ErrorLogger *,const Settings *) in line 70
      7 lines of code
      2 parameters
      1 conditional paths
      uses function assignmentAddressToIntegerError(const Token *) defined in Check64BitPortability
      uses function assignmentIntegerToAddressError(const Token *) defined in Check64BitPortability
      uses function returnIntegerError(const Token *) defined in Check64BitPortability
      uses function returnPointerError(const Token *) defined in Check64BitPortability
   function myName() in line 78
      3 lines of code
      0 parameters
      1 conditional paths
   function pointerassignment() in line 61
      protection public
      76 lines of code
      0 parameters
      20 conditional paths
      uses variable _settings defined in Check
      uses function isEnabled(T &&) defined in Settings
      uses variable _tokenizer defined in Check
      uses function getSymbolDatabase() defined in Tokenizer
      uses variable functionScopes defined in SymbolDatabase
      uses variable function defined in Scope
      uses function hasBody() defined in Function
      uses variable token defined in Function
      uses function strAt(int) defined in Token
      uses function previous() defined in Token
      uses variable classStart defined in Scope
      uses function next() defined in Token
      uses variable classEnd defined in Scope
      uses variable pointer defined in ValueType
      uses function returnIntegerError(const Token *) defined in Check64BitPortability
      uses function returnPointerError(const Token *) defined in Check64BitPortability
      uses variable originalTypeName defined in ValueType
      uses variable type defined in ValueType
      uses function assignmentIntegerToAddressError(const Token *) defined in Check64BitPortability
      uses function assignmentAddressToIntegerError(const Token *) defined in Check64BitPortability
   function returnIntegerError(const Token *) in line 67
      10 lines of code
      1 parameters
      1 conditional paths
      uses enumvalue portability defined in Severity
   function returnPointerError(const Token *) in line 68
      10 lines of code
      1 parameters
      1 conditional paths
      uses enumvalue portability defined in Severity
   function runChecks(const Tokenizer *,const Settings *,ErrorLogger *) in line 48
      protection public
      4 lines of code
      3 parameters
      1 conditional paths
      uses function pointerassignment() defined in Check64BitPortability
   function runSimplifiedChecks(const Tokenizer *,const Settings *,ErrorLogger *) in line 54
      protection public
      5 lines of code
      3 parameters
      1 conditional paths
   function Check64BitPortability() in line 39
      protection public
      2 lines of code
      0 parameters
      1 conditional paths
   function Check64BitPortability(const Tokenizer *,const Settings *,ErrorLogger *) in line 43
      protection public
      3 lines of code
      3 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/lib/checkassert.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/lib/checkassert.h
module CheckAssert
   inherits from Check
   function assertWithSideEffects() in line 49
      protection public
      51 lines of code
      0 parameters
      16 conditional paths
      uses variable _settings defined in Check
      uses function isEnabled(T &&) defined in Settings
      uses variable _tokenizer defined in Check
      uses variable list defined in Tokenizer
      uses function front() defined in TokenList
      uses function next() defined in Token
      uses function link(Token *) defined in Token
      uses function checkVariableAssignment(const Token *) defined in CheckAssert
      uses enumvalue eFunction defined in Token
      uses function f(char) defined in test.cxx
      uses function sideEffectInAssertError(const Token *,const std::string &) defined in CheckAssert
      uses variable classStart defined in Scope
      uses variable classEnd defined in Scope
      uses enumvalue eAssignmentOp defined in Token
      uses enumvalue eIncDecOp defined in Token
      uses function isLocal() defined in Variable
      uses function isArgument() defined in Variable
      uses function isReference() defined in Variable
      uses function isPointer() defined in Variable
      uses function inSameScope(const Token *,const Token *) defined in CheckAssert
   function assignmentInAssertError(const Token *,const std::string &) in line 57
      9 lines of code
      2 parameters
      1 conditional paths
      uses enumvalue warning defined in Severity
   function checkVariableAssignment(const Token *) in line 52
      15 lines of code
      1 parameters
      4 conditional paths
      uses function previous() defined in Token
      uses function variable(const Variable *) defined in Token
      uses function isAssignmentOp() defined in Token
      uses function tokType() defined in Token
      uses enumvalue eIncDecOp defined in Token
      uses function isConst() defined in Variable
      uses function assignmentInAssertError(const Token *,const std::string &) defined in CheckAssert
      uses function name() defined in Variable
   function classInfo() in line 69
      3 lines of code
      0 parameters
      1 conditional paths
   function getErrorMessages(ErrorLogger *,const Settings *) in line 59
      5 lines of code
      2 parameters
      1 conditional paths
      uses function sideEffectInAssertError(const Token *,const std::string &) defined in CheckAssert
      uses function assignmentInAssertError(const Token *,const std::string &) defined in CheckAssert
   function inSameScope(const Token *,const Token *) in line 53
      5 lines of code
      2 parameters
      1 conditional paths
      uses function scope(const Scope *) defined in Token
   function myName() in line 65
      3 lines of code
      0 parameters
      1 conditional paths
   function runSimplifiedChecks(const Tokenizer *,const Settings *,ErrorLogger *) in line 44
      protection public
      4 lines of code
      3 parameters
      1 conditional paths
      uses function assertWithSideEffects() defined in CheckAssert
      uses variable functionName defined in extracttests.py
   function sideEffectInAssertError(const Token *,const std::string &) in line 56
      9 lines of code
      2 parameters
      1 conditional paths
      uses enumvalue warning defined in Severity
      uses variable functionName defined in extracttests.py
   function CheckAssert() in line 37
      protection public
      2 lines of code
      0 parameters
      1 conditional paths
   function CheckAssert(const Tokenizer *,const Settings *,ErrorLogger *) in line 40
      protection public
      3 lines of code
      3 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/lib/checkautovariables.cpp
module checkautovariables.cpp
   function checkRvalueExpression(const Token *const) in line 130
      protection public
      18 lines of code
      1 parameters
      4 conditional paths
      uses function variable(const Variable *) defined in Token
      uses function previous() defined in Token
      uses function isPointer() defined in Variable
      uses function next() defined in Token
      uses function str(T &&) defined in Token
      uses function isClass() defined in Variable
      uses function type() defined in Variable
      uses function strAt(int) defined in Token
   function variableIsUsedInScope(const Token *,unsigned int,const Scope *) in line 149
      protection public
      16 lines of code
      3 parameters
      6 conditional paths
      uses variable classEnd defined in Scope
      uses function next() defined in Token
      uses enumvalue eFor defined in Scope
      uses enumvalue eDo defined in Scope
      uses enumvalue eWhile defined in Scope
   function astHasAutoResult(const Token *) in line 388
      protection public
      34 lines of code
      1 parameters
      11 conditional paths
      uses function astOperand1(Token *) defined in Token
      uses function astOperand2(Token *) defined in Token
      uses function isOp() defined in Token
      uses function str(T &&) defined in Token
      uses function variable(const Variable *) defined in Token
      uses function isLiteral() defined in Token
      uses function isName() defined in Token
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/lib/checkautovariables.h
module CheckAutoVariables
   inherits from Check
   function assignFunctionArg() in line 58
      protection public
      25 lines of code
      0 parameters
      7 conditional paths
      uses variable _settings defined in Check
      uses function isEnabled(T &&) defined in Settings
      uses variable _tokenizer defined in Check
      uses function getSymbolDatabase() defined in Tokenizer
      uses variable functionScopes defined in SymbolDatabase
      uses variable classStart defined in Scope
      uses variable classEnd defined in Scope
      uses function next() defined in Token
      uses function isNonReferenceArg(const Token *) defined in CheckAutoVariables
      uses function varId() defined in Token
      uses function errorUselessAssignmentPtrArg(const Token *) defined in CheckAutoVariables
      uses function errorUselessAssignmentArg(const Token *) defined in CheckAutoVariables
   function autoVariables() in line 61
      protection public
      69 lines of code
      0 parameters
      26 conditional paths
      uses variable _settings defined in Check
      uses variable inconclusive defined in Settings
      uses variable _tokenizer defined in Check
      uses function getSymbolDatabase() defined in Tokenizer
      uses variable functionScopes defined in SymbolDatabase
      uses variable classStart defined in Scope
      uses variable classEnd defined in Scope
      uses function next() defined in Token
      uses function isRefPtrArg(const Token *) defined in CheckAutoVariables
      uses function isAutoVar(const Token *) defined in CheckAutoVariables
      uses function errorAutoVariableAssignment(const Token *,bool) defined in CheckAutoVariables
      uses function isPtrArg(const Token *) defined in CheckAutoVariables
      uses function tokAt(int) defined in Token
      uses function isAutoVarArray(const Token *) defined in CheckAutoVariables
      uses function isArgument() defined in Variable
      uses function nameToken() defined in Variable
      uses function isArrayArg(const Token *) defined in CheckAutoVariables
      uses function linkAt(int) defined in Token
      uses function errorReturnAddressToAutoVariable(const Token *) defined in CheckAutoVariables
      uses function varId() defined in Token
      uses function variable(const Variable *) defined in Token
      uses function typeEndToken() defined in Variable
      uses function str(T &&) defined in Token
      uses function errorReturnAddressOfFunctionParameter(const Token *,const std::string &) defined in CheckAutoVariables
      uses variable library defined in Settings
      uses function dealloc(const Token *) defined in Library
      uses function isCPP() defined in Tokenizer
      uses function errorInvalidDeallocation(const Token *) defined in CheckAutoVariables
   function classInfo() in line 111
      10 lines of code
      0 parameters
      1 conditional paths
   function errorAutoVariableAssignment(const Token *,bool) in line 86
      20 lines of code
      2 parameters
      2 conditional paths
      uses enumvalue error defined in Severity
   function errorInvalidDeallocation(const Token *) in line 89
      9 lines of code
      1 parameters
      1 conditional paths
      uses enumvalue error defined in Severity
   function errorReturnAddressOfFunctionParameter(const Token *,const std::string &) in line 90
      8 lines of code
      2 parameters
      1 conditional paths
      uses enumvalue error defined in Severity
   function errorReturnAddressToAutoVariable(const Token *) in line 84
      4 lines of code
      1 parameters
      1 conditional paths
      uses enumvalue error defined in Severity
   function errorReturnPointerToLocalArray(const Token *) in line 85
      4 lines of code
      1 parameters
      1 conditional paths
      uses enumvalue error defined in Severity
   function errorReturnReference(const Token *) in line 87
      4 lines of code
      1 parameters
      1 conditional paths
      uses enumvalue error defined in Severity
   function errorReturnTempReference(const Token *) in line 88
      4 lines of code
      1 parameters
      1 conditional paths
      uses enumvalue error defined in Severity
   function errorUselessAssignmentArg(const Token *) in line 91
      7 lines of code
      1 parameters
      1 conditional paths
      uses enumvalue style defined in Severity
   function errorUselessAssignmentPtrArg(const Token *) in line 92
      7 lines of code
      1 parameters
      1 conditional paths
      uses enumvalue warning defined in Severity
   function getErrorMessages(ErrorLogger *,const Settings *) in line 94
      12 lines of code
      2 parameters
      1 conditional paths
      uses function errorAutoVariableAssignment(const Token *,bool) defined in CheckAutoVariables
      uses function errorReturnAddressToAutoVariable(const Token *) defined in CheckAutoVariables
      uses function errorReturnPointerToLocalArray(const Token *) defined in CheckAutoVariables
      uses function errorReturnReference(const Token *) defined in CheckAutoVariables
      uses function errorReturnTempReference(const Token *) defined in CheckAutoVariables
      uses function errorInvalidDeallocation(const Token *) defined in CheckAutoVariables
      uses function errorReturnAddressOfFunctionParameter(const Token *,const std::string &) defined in CheckAutoVariables
      uses function errorUselessAssignmentArg(const Token *) defined in CheckAutoVariables
      uses function errorUselessAssignmentPtrArg(const Token *) defined in CheckAutoVariables
   function isArrayArg(const Token *) in line 71
      6 lines of code
      1 parameters
      1 conditional paths
      uses function variable(const Variable *) defined in Token
      uses function isArgument() defined in Variable
      uses function isArray() defined in Variable
   function isAutoVar(const Token *) in line 74
      23 lines of code
      1 parameters
      6 conditional paths
      uses function variable(const Variable *) defined in Token
      uses function isLocal() defined in Variable
      uses function isStatic() defined in Variable
      uses function isReference() defined in Variable
      uses function tokAt(int) defined in Token
   function isAutoVarArray(const Token *) in line 75
      39 lines of code
      1 parameters
      10 conditional paths
      uses function str(T &&) defined in Token
      uses function astOperand1(Token *) defined in Token
      uses function astOperand2(Token *) defined in Token
      uses function variable(const Variable *) defined in Token
      uses function isLocal() defined in Variable
      uses function isStatic() defined in Variable
      uses function isArray() defined in Variable
      uses function isPointer() defined in Variable
      uses variable values defined in Token
      uses variable tokvalue defined in ValueFlow::Value
   function isNonReferenceArg(const Token *) in line 73
      6 lines of code
      1 parameters
      1 conditional paths
      uses function variable(const Variable *) defined in Token
      uses function isArgument() defined in Variable
      uses function isReference() defined in Variable
      uses function isPointer() defined in Variable
      uses function typeStartToken() defined in Variable
      uses function isStandardType() defined in Token
      uses function type() defined in Variable
   function isPtrArg(const Token *) in line 70
      6 lines of code
      1 parameters
      1 conditional paths
      uses function variable(const Variable *) defined in Token
      uses function isArgument() defined in Variable
      uses function isPointer() defined in Variable
   function isRefPtrArg(const Token *) in line 72
      6 lines of code
      1 parameters
      1 conditional paths
      uses function variable(const Variable *) defined in Token
      uses function isArgument() defined in Variable
      uses function isReference() defined in Variable
      uses function isPointer() defined in Variable
   function myName() in line 107
      3 lines of code
      0 parameters
      1 conditional paths
   function returnPointerToLocalArray() in line 64
      protection public
      23 lines of code
      0 parameters
      6 conditional paths
      uses variable _tokenizer defined in Check
      uses function getSymbolDatabase() defined in Tokenizer
      uses variable functionScopes defined in SymbolDatabase
      uses variable function defined in Scope
      uses variable tokenDef defined in Function
      uses function previous() defined in Token
      uses function str(T &&) defined in Token
      uses variable classStart defined in Scope
      uses function next() defined in Token
      uses variable classEnd defined in Scope
      uses function isAutoVarArray(const Token *) defined in CheckAutoVariables
      uses function errorReturnPointerToLocalArray(const Token *) defined in CheckAutoVariables
   function returnReference() in line 67
      protection public
      69 lines of code
      0 parameters
      17 conditional paths
      uses variable _tokenizer defined in Check
      uses function isC() defined in Tokenizer
      uses function getSymbolDatabase() defined in Tokenizer
      uses variable functionScopes defined in SymbolDatabase
      uses variable function defined in Scope
      uses variable tokenDef defined in Function
      uses function previous() defined in Token
      uses function str(T &&) defined in Token
      uses variable classStart defined in Scope
      uses function next() defined in Token
      uses variable classEnd defined in Scope
      uses function scope(const Scope *) defined in Token
      uses function isAutoVar(const Token *) defined in CheckAutoVariables
      uses function nameToken() defined in Variable
      uses function tokAt(int) defined in Token
      uses function errorReturnReference(const Token *) defined in CheckAutoVariables
      uses function returnTemporary(const Token *) defined in CheckAutoVariables
      uses function errorReturnTempReference(const Token *) defined in CheckAutoVariables
   function returnTemporary(const Token *) in line 82
      38 lines of code
      1 parameters
      10 conditional paths
      uses function function(const Function *) defined in Token
      uses enumvalue eOperatorEqual defined in Function
      uses enumvalue eFunction defined in Function
      uses function str(T &&) defined in Token
      uses function next() defined in Token
      uses function strAt(int) defined in Token
      uses function linkAt(int) defined in Token
      uses function type(const ::Type *) defined in Token
   function runChecks(const Tokenizer *,const Settings *,ErrorLogger *) in line 45
      protection public
      5 lines of code
      3 parameters
      1 conditional paths
      uses function assignFunctionArg() defined in CheckAutoVariables
      uses function returnReference() defined in CheckAutoVariables
   function runSimplifiedChecks(const Tokenizer *,const Settings *,ErrorLogger *) in line 51
      protection public
      5 lines of code
      3 parameters
      1 conditional paths
      uses function autoVariables() defined in CheckAutoVariables
      uses function returnPointerToLocalArray() defined in CheckAutoVariables
   function CheckAutoVariables() in line 36
      protection public
      2 lines of code
      0 parameters
      1 conditional paths
   function CheckAutoVariables(const Tokenizer *,const Settings *,ErrorLogger *) in line 40
      protection public
      3 lines of code
      3 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/lib/checkbool.cpp
module checkbool.cpp
   function astIsBool(const Token *) in line 32
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function link(Token *) defined in Token
   function isBool(const Variable *) in line 117
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function typeEndToken() defined in Variable
      uses function str(T &&) defined in Token
   function isNonBoolStdType(const Variable *) in line 121
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function typeEndToken() defined in Variable
      uses function isStandardType() defined in Token
      uses function str(T &&) defined in Token
   function tokenIsFunctionReturningBool(const Token *) in line 205
      protection public
      10 lines of code
      1 parameters
      3 conditional paths
      uses function function(const Function *) defined in Token
      uses variable tokenDef defined in Function
      uses function strAt(int) defined in Token
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/lib/checkbool.h
module CheckBool
   inherits from Check
   function assignBoolToFloatError(const Token *) in line 108
      5 lines of code
      1 parameters
      1 conditional paths
      uses enumvalue style defined in Severity
   function assignBoolToPointerError(const Token *) in line 107
      5 lines of code
      1 parameters
      1 conditional paths
      uses enumvalue error defined in Severity
   function bitwiseOnBooleanError(const Token *,const std::string &,const std::string &) in line 109
      7 lines of code
      3 parameters
      1 conditional paths
      uses enumvalue style defined in Severity
   function checkAssignBoolToFloat() in line 87
      protection public
      19 lines of code
      0 parameters
      7 conditional paths
      uses variable _tokenizer defined in Check
      uses function isCPP() defined in Tokenizer
      uses variable _settings defined in Check
      uses function isEnabled(T &&) defined in Settings
      uses function getSymbolDatabase() defined in Tokenizer
      uses variable functionScopes defined in SymbolDatabase
      uses variable classStart defined in Scope
      uses variable classEnd defined in Scope
      uses function next() defined in Token
      uses function isFloatingType() defined in Variable
      uses function isArrayOrPointer() defined in Variable
      uses function assignBoolToFloatError(const Token *) defined in CheckBool
   function checkAssignBoolToPointer() in line 84
      protection public
      19 lines of code
      0 parameters
      6 conditional paths
      uses variable _tokenizer defined in Check
      uses function getSymbolDatabase() defined in Tokenizer
      uses variable functionScopes defined in SymbolDatabase
      uses variable classStart defined in Scope
      uses variable classEnd defined in Scope
      uses function next() defined in Token
      uses function astOperand1(Token *) defined in Token
      uses function str(T &&) defined in Token
      uses function astOperand2(Token *) defined in Token
      uses function variable(const Variable *) defined in Token
      uses function assignBoolToPointerError(const Token *) defined in CheckBool
   function checkBitwiseOnBoolean() in line 90
      protection public
      31 lines of code
      0 parameters
      9 conditional paths
      uses variable _settings defined in Check
      uses function isEnabled(T &&) defined in Settings
      uses variable inconclusive defined in Settings
      uses variable _tokenizer defined in Check
      uses function getSymbolDatabase() defined in Tokenizer
      uses variable functionScopes defined in SymbolDatabase
      uses variable classStart defined in Scope
      uses function next() defined in Token
      uses variable classEnd defined in Scope
      uses function typeEndToken() defined in Variable
      uses function str(T &&) defined in Token
      uses function bitwiseOnBooleanError(const Token *,const std::string &,const std::string &) defined in CheckBool
      uses function name() defined in Variable
   function checkComparisonOfBoolExpressionWithInt() in line 93
      protection public
      56 lines of code
      0 parameters
      14 conditional paths
      uses variable _settings defined in Check
      uses function isEnabled(T &&) defined in Settings
      uses variable _tokenizer defined in Check
      uses function getSymbolDatabase() defined in Tokenizer
      uses variable functionScopes defined in SymbolDatabase
      uses variable classStart defined in Scope
      uses function next() defined in Token
      uses variable classEnd defined in Scope
      uses function astOperand1(Token *) defined in Token
      uses function astOperand2(Token *) defined in Token
      uses function isOp() defined in Token
      uses function isName() defined in Token
      uses function isNumber() defined in Token
      uses function str(T &&) defined in Token
      uses function comparisonOfBoolExpressionWithIntError(const Token *,bool) defined in CheckBool
      uses function variable(const Variable *) defined in Token
   function checkComparisonOfBoolWithBool() in line 75
      protection public
      45 lines of code
      0 parameters
      13 conditional paths
      uses variable _settings defined in Check
      uses variable experimental defined in Settings
      uses function isEnabled(T &&) defined in Settings
      uses variable _tokenizer defined in Check
      uses function isCPP() defined in Tokenizer
      uses function getSymbolDatabase() defined in Tokenizer
      uses variable functionScopes defined in SymbolDatabase
      uses variable classStart defined in Scope
      uses function next() defined in Token
      uses variable classEnd defined in Scope
      uses enumvalue eComparisonOp defined in Token
      uses function previous() defined in Token
      uses function varId() defined in Token
      uses function variable(const Variable *) defined in Token
      uses function comparisonOfBoolWithBoolError(const Token *,const std::string &) defined in CheckBool
      uses function str(T &&) defined in Token
   function checkComparisonOfBoolWithInt() in line 81
      protection public
      51 lines of code
      0 parameters
      19 conditional paths
      uses variable _settings defined in Check
      uses function isEnabled(T &&) defined in Settings
      uses variable _tokenizer defined in Check
      uses function isCPP() defined in Tokenizer
      uses function getSymbolDatabase() defined in Tokenizer
      uses variable functionScopes defined in SymbolDatabase
      uses variable classStart defined in Scope
      uses function next() defined in Token
      uses variable classEnd defined in Scope
      uses function astOperand1(Token *) defined in Token
      uses function astOperand2(Token *) defined in Token
      uses function isComparisonOp() defined in Token
      uses function varId() defined in Token
      uses function isNumber() defined in Token
      uses function variable(const Variable *) defined in Token
      uses function str(T &&) defined in Token
      uses function comparisonOfBoolWithIntError(const Token *,const std::string &,bool) defined in CheckBool
      uses function isBoolean() defined in Token
      uses function comparisonOfBoolWithInvalidComparator(const Token *,const std::string &) defined in CheckBool
      uses function name() defined in Variable
   function checkComparisonOfFuncReturningBool() in line 72
      protection public
      36 lines of code
      0 parameters
      11 conditional paths
      uses variable _settings defined in Check
      uses function isEnabled(T &&) defined in Settings
      uses variable _tokenizer defined in Check
      uses function isCPP() defined in Tokenizer
      uses function getSymbolDatabase() defined in Tokenizer
      uses variable functionScopes defined in SymbolDatabase
      uses variable classStart defined in Scope
      uses function next() defined in Token
      uses variable classEnd defined in Scope
      uses enumvalue eComparisonOp defined in Token
      uses function previous() defined in Token
      uses function link(Token *) defined in Token
      uses function str(T &&) defined in Token
      uses function comparisonOfTwoFuncsReturningBoolError(const Token *,const std::string &,const std::string &) defined in CheckBool
      uses function comparisonOfFuncReturningBoolError(const Token *,const std::string &) defined in CheckBool
   function checkIncrementBoolean() in line 78
      protection public
      18 lines of code
      0 parameters
      6 conditional paths
      uses variable _settings defined in Check
      uses function isEnabled(T &&) defined in Settings
      uses variable _tokenizer defined in Check
      uses function getSymbolDatabase() defined in Tokenizer
      uses variable functionScopes defined in SymbolDatabase
      uses variable classStart defined in Scope
      uses function next() defined in Token
      uses variable classEnd defined in Scope
      uses function typeEndToken() defined in Variable
      uses function str(T &&) defined in Token
      uses function incrementBooleanError(const Token *) defined in CheckBool
   function classInfo() in line 132
      11 lines of code
      0 parameters
      1 conditional paths
   function comparisonOfBoolExpressionWithIntError(const Token *,bool) in line 110
      9 lines of code
      2 parameters
      2 conditional paths
      uses enumvalue warning defined in Severity
   function comparisonOfBoolWithBoolError(const Token *,const std::string &) in line 103
      8 lines of code
      2 parameters
      1 conditional paths
      uses enumvalue style defined in Severity
   function comparisonOfBoolWithIntError(const Token *,const std::string &,bool) in line 105
      14 lines of code
      3 parameters
      2 conditional paths
      uses enumvalue warning defined in Severity
   function comparisonOfBoolWithInvalidComparator(const Token *,const std::string &) in line 106
      8 lines of code
      2 parameters
      1 conditional paths
      uses enumvalue warning defined in Severity
   function comparisonOfFuncReturningBoolError(const Token *,const std::string &) in line 101
      8 lines of code
      2 parameters
      1 conditional paths
      uses enumvalue style defined in Severity
   function comparisonOfTwoFuncsReturningBoolError(const Token *,const std::string &,const std::string &) in line 102
      8 lines of code
      3 parameters
      1 conditional paths
      uses enumvalue style defined in Severity
   function getErrorMessages(ErrorLogger *,const Settings *) in line 113
      14 lines of code
      2 parameters
      1 conditional paths
      uses function assignBoolToPointerError(const Token *) defined in CheckBool
      uses function assignBoolToFloatError(const Token *) defined in CheckBool
      uses function comparisonOfFuncReturningBoolError(const Token *,const std::string &) defined in CheckBool
      uses function comparisonOfTwoFuncsReturningBoolError(const Token *,const std::string &,const std::string &) defined in CheckBool
      uses function comparisonOfBoolWithBoolError(const Token *,const std::string &) defined in CheckBool
      uses function incrementBooleanError(const Token *) defined in CheckBool
      uses function comparisonOfBoolWithIntError(const Token *,const std::string &,bool) defined in CheckBool
      uses function bitwiseOnBooleanError(const Token *,const std::string &,const std::string &) defined in CheckBool
      uses function comparisonOfBoolExpressionWithIntError(const Token *,bool) defined in CheckBool
      uses function pointerArithBoolError(const Token *) defined in CheckBool
   function incrementBooleanError(const Token *) in line 104
      10 lines of code
      1 parameters
      1 conditional paths
      uses enumvalue style defined in Severity
   function myName() in line 128
      3 lines of code
      0 parameters
      1 conditional paths
   function pointerArithBool() in line 96
      protection public
      20 lines of code
      0 parameters
      7 conditional paths
      uses variable _tokenizer defined in Check
      uses function getSymbolDatabase() defined in Tokenizer
      uses variable scopeList defined in SymbolDatabase
      uses enumvalue eIf defined in Scope
      uses enumvalue eWhile defined in Scope
      uses enumvalue eDo defined in Scope
      uses enumvalue eFor defined in Scope
      uses function next() defined in Token
      uses function astOperand2(Token *) defined in Token
      uses function astOperand1(Token *) defined in Token
      uses function tokAt(int) defined in Token
      uses function pointerArithBoolCond(const Token *) defined in CheckBool
   function pointerArithBoolCond(const Token *) in line 97
      protection public
      20 lines of code
      1 parameters
      5 conditional paths
      uses function astOperand1(Token *) defined in Token
      uses function astOperand2(Token *) defined in Token
      uses function str(T &&) defined in Token
      uses function pointerArithBoolError(const Token *) defined in CheckBool
   function pointerArithBoolError(const Token *) in line 111
      8 lines of code
      1 parameters
      1 conditional paths
      uses enumvalue error defined in Severity
   function runChecks(const Tokenizer *,const Settings *,ErrorLogger *) in line 49
      protection public
      9 lines of code
      3 parameters
      1 conditional paths
      uses function checkComparisonOfBoolExpressionWithInt() defined in CheckBool
      uses function checkComparisonOfBoolWithInt() defined in CheckBool
      uses function checkAssignBoolToFloat() defined in CheckBool
      uses function pointerArithBool() defined in CheckBool
   function runSimplifiedChecks(const Tokenizer *,const Settings *,ErrorLogger *) in line 60
      protection public
      10 lines of code
      3 parameters
      1 conditional paths
      uses function checkComparisonOfFuncReturningBool() defined in CheckBool
      uses function checkComparisonOfBoolWithBool() defined in CheckBool
      uses function checkIncrementBoolean() defined in CheckBool
      uses function checkAssignBoolToPointer() defined in CheckBool
      uses function checkBitwiseOnBoolean() defined in CheckBool
   function CheckBool() in line 40
      protection public
      2 lines of code
      0 parameters
      1 conditional paths
   function CheckBool(const Tokenizer *,const Settings *,ErrorLogger *) in line 44
      protection public
      3 lines of code
      3 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/lib/checkboost.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/lib/checkboost.h
module CheckBoost
   inherits from Check
   function boostForeachError(const Token *) in line 60
      6 lines of code
      1 parameters
      1 conditional paths
      uses enumvalue error defined in Severity
   function checkBoostForeachModification() in line 57
      protection public
      27 lines of code
      0 parameters
      8 conditional paths
      uses variable _tokenizer defined in Check
      uses function getSymbolDatabase() defined in Tokenizer
      uses variable functionScopes defined in SymbolDatabase
      uses variable classStart defined in Scope
      uses function next() defined in Token
      uses variable classEnd defined in Scope
      uses function link(Token *) defined in Token
      uses function tokAt(int) defined in Token
      uses function varId() defined in Token
      uses function linkAt(int) defined in Token
      uses function boostForeachError(const Token *) defined in CheckBoost
   function classInfo() in line 71
      4 lines of code
      0 parameters
      1 conditional paths
   function getErrorMessages(ErrorLogger *,const Settings *) in line 62
      4 lines of code
      2 parameters
      1 conditional paths
      uses function boostForeachError(const Token *) defined in CheckBoost
   function myName() in line 67
      3 lines of code
      0 parameters
      1 conditional paths
   function runSimplifiedChecks(const Tokenizer *,const Settings *,ErrorLogger *) in line 47
      protection public
      8 lines of code
      3 parameters
      2 conditional paths
      uses function isCPP() defined in Tokenizer
      uses function checkBoostForeachModification() defined in CheckBoost
   function CheckBoost() in line 38
      protection public
      2 lines of code
      0 parameters
      1 conditional paths
   function CheckBoost(const Tokenizer *,const Settings *,ErrorLogger *) in line 42
      protection public
      3 lines of code
      3 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/lib/checkbufferoverrun.cpp
module checkbufferoverrun.cpp
   function makeArrayIndexOutOfBoundsError(std::ostream &,const CheckBufferOverrun::ArrayInfo &,const std::vector< MathLib::bigint > &) in line 46
      protection public
      14 lines of code
      3 parameters
      4 conditional paths
      uses function varname() defined in CheckBufferOverrun::ArrayInfo
      uses function num() defined in CheckBufferOverrun::ArrayInfo
   function bufferOverrunMessage(std::string) in line 121
      protection public
      12 lines of code
      1 parameters
      2 conditional paths
   function isAddressOf(const Token *) in line 262
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses function astParent() defined in Token
      uses function str(T &&) defined in Token
      uses function astOperand1(Token *) defined in Token
      uses function astOperand2(Token *) defined in Token
   function bailoutIfSwitch(const Token *,const unsigned int) in line 276
      protection public
      28 lines of code
      2 parameters
      7 conditional paths
      uses function linkAt(int) defined in Token
      uses function str(T &&) defined in Token
      uses function next() defined in Token
      uses function varId() defined in Token
   function checkMinSizes(const std::list< Library::ArgumentChecks::MinSize > &,const Token *const,const MathLib::bigint,const Token **,const Settings *const) in line 306
      protection public
      67 lines of code
      5 parameters
      23 conditional paths
      uses function tokAt(int) defined in Token
      uses function nextArgument() defined in Token
      uses enumvalue ARGVALUE defined in Library::ArgumentChecks::MinSize
      uses function str(T &&) defined in Token
      uses function tokType() defined in Token
      uses enumvalue eChar defined in Token
      uses function next() defined in Token
      uses enumvalue MUL defined in Library::ArgumentChecks::MinSize
      uses function strAt(int) defined in Token
      uses enumvalue STRLEN defined in Library::ArgumentChecks::MinSize
      uses variable library defined in Settings
      uses function isargformatstr(const Token *,int) defined in Library
      uses function getValueTokenMaxStrLength() defined in Token
      uses enumvalue SIZEOF defined in Library::ArgumentChecks::MinSize
      uses enumvalue eString defined in Token
      uses enumvalue NONE defined in Library::ArgumentChecks::MinSize
   function valueFlowGetArrayIndexes(const Token *const,bool,std::size_t) in line 751
      protection public
      23 lines of code
      3 parameters
      7 conditional paths
      uses variable varId defined in ValueFlow::Value
      uses variable intvalue defined in ValueFlow::Value
   function isVLAIndex(const Token *) in line 992
      protection public
      25 lines of code
      1 parameters
      6 conditional paths
      uses function varId() defined in Token
      uses function str(T &&) defined in Token
      uses function astOperand2(Token *) defined in Token
      uses function astOperand1(Token *) defined in Token
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/lib/checkbufferoverrun.h
module CheckBufferOverrun
   inherits from Check
   function analyseWholeProgram(const std::list< Check::FileInfo * > &,const Settings &,ErrorLogger &) in line 215
      protection public
      49 lines of code
      3 parameters
      9 conditional paths
      uses variable arrayUsage defined in CheckBufferOverrun::MyFileInfo
      uses variable arraySize defined in CheckBufferOverrun::MyFileInfo
      uses function setfile(const std::string &) defined in ErrorLogger::ErrorMessage::FileLocation
      uses variable line defined in ErrorLogger::ErrorMessage::FileLocation
      uses enumvalue error defined in Severity
      uses function reportErr(const ErrorLogger::ErrorMessage &) defined in ErrorLogger
   function argumentSizeError(const Token *,const std::string &,const std::string &) in line 236
      4 lines of code
      3 parameters
      1 conditional paths
      uses enumvalue warning defined in Severity
      uses variable functionName defined in extracttests.py
   function arrayIndexOutOfBoundsError(const Token *,const ArrayInfo &,const std::vector< MathLib::bigint > &) in line 192
      protection public
      6 lines of code
      3 parameters
      1 conditional paths
      uses enumvalue error defined in Severity
   function arrayIndexOutOfBoundsError(const Token *,const ArrayInfo &,const std::vector< ValueFlow::Value > &) in line 193
      protection public
      46 lines of code
      3 parameters
      11 conditional paths
      uses variable _settings defined in Check
      uses function isEnabled(T &&) defined in Settings
      uses function eitherTheConditionIsRedundant(const Token *) defined in valueflow.h
      uses function varname() defined in CheckBufferOverrun::ArrayInfo
      uses function num() defined in CheckBufferOverrun::ArrayInfo
      uses enumvalue warning defined in Severity
      uses enumvalue error defined in Severity
   function arrayIndexOutOfBoundsError(const std::list< const Token * > &,const ArrayInfo &,const std::vector< MathLib::bigint > &) in line 220
      6 lines of code
      3 parameters
      1 conditional paths
      uses enumvalue error defined in Severity
   function arrayIndexThenCheck() in line 73
      protection public
      45 lines of code
      0 parameters
      12 conditional paths
      uses variable _settings defined in Check
      uses function isEnabled(T &&) defined in Settings
      uses variable _tokenizer defined in Check
      uses function getSymbolDatabase() defined in Tokenizer
      uses variable functionScopes defined in SymbolDatabase
      uses variable classStart defined in Scope
      uses variable classEnd defined in Scope
      uses function next() defined in Token
      uses enumvalue eComparisonOp defined in Token
      uses function arrayIndexThenCheckError(const Token *,const std::string &) defined in CheckBufferOverrun
   function arrayIndexThenCheckError(const Token *,const std::string &) in line 234
      9 lines of code
      2 parameters
      1 conditional paths
      uses enumvalue style defined in Severity
   function bufferNotZeroTerminatedError(const Token *,const std::string &,const std::string &) in line 229
      8 lines of code
      3 parameters
      1 conditional paths
      uses enumvalue warning defined in Severity
   function bufferOverrun() in line 67
      protection public
      8 lines of code
      0 parameters
      1 conditional paths
      uses function checkGlobalAndLocalVariable() defined in CheckBufferOverrun
      uses function checkStructVariable() defined in CheckBufferOverrun
      uses function checkBufferAllocatedWithStrlen() defined in CheckBufferOverrun
      uses function checkStringArgument() defined in CheckBufferOverrun
      uses function checkInsecureCmdLineArgs() defined in CheckBufferOverrun
   function bufferOverrun2() in line 70
      protection public
      46 lines of code
      0 parameters
      9 conditional paths
      uses variable _tokenizer defined in Check
      uses function tokens() defined in Tokenizer
      uses function next() defined in Token
      uses function astOperand2(Token *) defined in Token
      uses function getValueLE(const MathLib::bigint,const Settings *) defined in Token
      uses variable _settings defined in Check
      uses function astParent() defined in Token
      uses function str(T &&) defined in Token
      uses function expressionString() defined in Token
      uses function getValueTokenMinStrSize() defined in Token
      uses function valueFlowCheckArrayIndex(const Token *const,const ArrayInfo &) defined in CheckBufferOverrun
      uses function nameToken() defined in Variable
      uses function isArray() defined in Variable
      uses function dimension(std::size_t) defined in Variable
      uses function linkAt(int) defined in Token
      uses variable library defined in Settings
      uses function varname() defined in CheckBufferOverrun::ArrayInfo
   function bufferOverrunError(const Token *,const std::string &) in line 221
      4 lines of code
      2 parameters
      1 conditional paths
      uses enumvalue error defined in Severity
   function bufferOverrunError(const std::list< const Token * > &,const std::string &) in line 222
      4 lines of code
      2 parameters
      1 conditional paths
      uses enumvalue error defined in Severity
   function checkBufferAllocatedWithStrlen() in line 93
      protection public
      44 lines of code
      0 parameters
      10 conditional paths
      uses variable _tokenizer defined in Check
      uses function getSymbolDatabase() defined in Tokenizer
      uses variable functionScopes defined in SymbolDatabase
      uses variable classStart defined in Scope
      uses function next() defined in Token
      uses variable classEnd defined in Scope
      uses function isCPP() defined in Tokenizer
      uses function scope(const Scope *) defined in Token
      uses function bufferOverrunError(const Token *,const std::string &) defined in CheckBufferOverrun
   function checkFunctionCall(const Token *,const ArrayInfo &,std::list< const Token * >) in line 190
      protection public
      31 lines of code
      3 parameters
      7 conditional paths
      uses function str(T &&) defined in Token
      uses function declarationId() defined in CheckBufferOverrun::ArrayInfo
      uses function tokAt(int) defined in Token
      uses function checkFunctionParameter(const Token &,const unsigned int,const ArrayInfo &,const std::list< const Token * > &) defined in CheckBufferOverrun
      uses function limit(MathLib::bigint) defined in CheckBufferOverrun::ArrayInfo
      uses function strAt(int) defined in Token
      uses function nextArgument() defined in Token
   function checkFunctionParameter(const Token &,const unsigned int,const ArrayInfo &,const std::list< const Token * > &) in line 182
      protection public
      126 lines of code
      4 parameters
      30 conditional paths
      uses variable _settings defined in Check
      uses variable library defined in Settings
      uses function argminsizes(const Token *,int) defined in Library
      uses function previous() defined in Token
      uses function tokAt(int) defined in Token
      uses function element_size() defined in CheckBufferOverrun::ArrayInfo
      uses function num() defined in CheckBufferOverrun::ArrayInfo
      uses function bufferOverrunError(const Token *,const std::string &) defined in CheckBufferOverrun
      uses function varname() defined in CheckBufferOverrun::ArrayInfo
      uses function sizeArgumentAsCharError(const Token *) defined in CheckBufferOverrun
      uses function function(const Function *) defined in Token
      uses function hasBody() defined in Function
      uses function getArgumentVar(std::size_t) defined in Function
      uses variable _tokenizer defined in Check
      uses function sizeOfType(const Token *) defined in Tokenizer
      uses function typeStartToken() defined in Variable
      uses function declarationId() defined in Variable
      uses variable functionScope defined in Function
      uses variable classStart defined in Scope
      uses variable classEnd defined in Scope
      uses function next() defined in Token
      uses function arrayIndexOutOfBoundsError(const Token *,const ArrayInfo &,const std::vector< MathLib::bigint > &) defined in CheckBufferOverrun
      uses function declarationId() defined in CheckBufferOverrun::ArrayInfo
      uses function checkFunctionCall(const Token *,const ArrayInfo &,std::list< const Token * >) defined in CheckBufferOverrun
      uses function isEnabled(T &&) defined in Settings
      uses function nameToken() defined in Variable
      uses function strAt(int) defined in Token
      uses function argumentSizeError(const Token *,const std::string &,const std::string &) defined in CheckBufferOverrun
      uses function str(T &&) defined in Token
   function checkGlobalAndLocalVariable() in line 90
      protection public
      160 lines of code
      0 parameters
      34 conditional paths
      uses variable _tokenizer defined in Check
      uses function tokens() defined in Tokenizer
      uses function next() defined in Token
      uses variable intvalue defined in ValueFlow::Value
      uses function bufferOverrunError(const Token *,const std::string &) defined in CheckBufferOverrun
      uses function isArray() defined in Variable
      uses function astCanonicalType(const Token *) defined in astutils.cpp
      uses variable _settings defined in Check
      uses variable library defined in Settings
      uses function numberOfElements() defined in CheckBufferOverrun::ArrayInfo
      uses function dimensions() defined in Variable
      uses function totalIndex(const std::vector< ValueFlow::Value > &) defined in CheckBufferOverrun::ArrayInfo
      uses function arrayIndexOutOfBoundsError(const Token *,const ArrayInfo &,const std::vector< MathLib::bigint > &) defined in CheckBufferOverrun
      uses function getSymbolDatabase() defined in Tokenizer
      uses function varIdCount() defined in Tokenizer
      uses function getVariableFromVarId(std::size_t) defined in SymbolDatabase
      uses function dimension(std::size_t) defined in Variable
      uses function nameToken() defined in Variable
      uses function str(T &&) defined in Token
      uses function previous() defined in Token
      uses function link(Token *) defined in Token
      uses function checkScope(const Token *,const ArrayInfo &) defined in CheckBufferOverrun
      uses variable functionScopes defined in SymbolDatabase
      uses variable classStart defined in Scope
      uses variable classEnd defined in Scope
      uses variable _errorLogger defined in Check
      uses function reportProgress(const std::string &,const char,const std::size_t) defined in ErrorLogger
      uses variable list defined in Tokenizer
      uses function getSourceFilePath() defined in TokenList
      uses function isCPP() defined in Tokenizer
      uses function negativeMemoryAllocationSizeError(const Token *) defined in CheckBufferOverrun
      uses function isPointer() defined in Variable
      uses function typeStartToken() defined in Variable
      uses function typeEndToken() defined in Variable
      uses function sizeOfType(const Token *) defined in Tokenizer
      uses function declarationId() defined in Variable
   function checkInsecureCmdLineArgs() in line 99
      protection public
      40 lines of code
      0 parameters
      8 conditional paths
      uses variable _tokenizer defined in Check
      uses function getSymbolDatabase() defined in Tokenizer
      uses variable functionScopes defined in SymbolDatabase
      uses function tokAt(int) defined in Token
      uses function varId() defined in Token
      uses function link(Token *) defined in Token
      uses function next() defined in Token
      uses function cmdLineArgsError(const Token *) defined in CheckBufferOverrun
      uses function linkAt(int) defined in Token
   function checkScope(const Token *,const ArrayInfo &) in line 170
      protection public
      135 lines of code
      2 parameters
      35 conditional paths
      uses function previous() defined in Token
      uses function num() defined in CheckBufferOverrun::ArrayInfo
      uses function element_size() defined in CheckBufferOverrun::ArrayInfo
      uses function declarationId() defined in CheckBufferOverrun::ArrayInfo
      uses variable _settings defined in Check
      uses function isEnabled(T &&) defined in Settings
      uses variable inconclusive defined in Settings
      uses function scope(const Scope *) defined in Token
      uses function next() defined in Token
      uses function str(T &&) defined in Token
      uses function varId() defined in Token
      uses function strAt(int) defined in Token
      uses function valueFlowCheckArrayIndex(const Token *const,const ArrayInfo &) defined in CheckBufferOverrun
      uses function isCast() defined in Token
      uses function astParent() defined in Token
      uses function astOperand1(Token *) defined in Token
      uses function astOperand2(Token *) defined in Token
      uses function getValueGE(const MathLib::bigint,const Settings *) defined in Token
      uses function getValueLE(const MathLib::bigint,const Settings *) defined in Token
      uses function pointerOutOfBoundsError(const Token *,const Token *,const MathLib::bigint) defined in CheckBufferOverrun
      uses variable intvalue defined in ValueFlow::Value
      uses variable _tokenizer defined in Check
      uses function getSymbolDatabase() defined in Tokenizer
      uses function getVariableFromVarId(std::size_t) defined in SymbolDatabase
      uses function isArray() defined in Variable
      uses function checkFunctionCall(const Token *,const ArrayInfo &,std::list< const Token * >) defined in CheckBufferOverrun
      uses function tokAt(int) defined in Token
      uses function bufferNotZeroTerminatedError(const Token *,const std::string &,const std::string &) defined in CheckBufferOverrun
      uses function linkAt(int) defined in Token
      uses function link(Token *) defined in Token
      uses function terminateStrncpyError(const Token *,const std::string &) defined in CheckBufferOverrun
      uses function strncatUsageError(const Token *) defined in CheckBufferOverrun
      uses function bufferOverrunError(const Token *,const std::string &) defined in CheckBufferOverrun
      uses function varname() defined in CheckBufferOverrun::ArrayInfo
   function checkScope(const Token *,const std::vector< std::string > &,const ArrayInfo &) in line 173
      protection public
      216 lines of code
      3 parameters
      47 conditional paths
      uses function num() defined in CheckBufferOverrun::ArrayInfo
      uses function str(T &&) defined in Token
      uses function next() defined in Token
      uses variable _settings defined in Check
      uses variable inconclusive defined in Settings
      uses function element_size() defined in CheckBufferOverrun::ArrayInfo
      uses function declarationId() defined in CheckBufferOverrun::ArrayInfo
      uses function valueFlowCheckArrayIndex(const Token *const,const ArrayInfo &) defined in CheckBufferOverrun
      uses function isEnabled(T &&) defined in Settings
      uses function scope(const Scope *) defined in Token
      uses function tokAt(int) defined in Token
      uses function varId() defined in Token
      uses function isName() defined in Token
      uses function strAt(int) defined in Token
      uses variable intvalue defined in ValueFlow::Value
      uses function previous() defined in Token
      uses function arrayIndexOutOfBoundsError(const Token *,const ArrayInfo &,const std::vector< MathLib::bigint > &) defined in CheckBufferOverrun
      uses function checkFunctionParameter(const Token &,const unsigned int,const ArrayInfo &,const std::list< const Token * > &) defined in CheckBufferOverrun
      uses function tokType() defined in Token
      uses function bufferOverrunError(const Token *,const std::string &) defined in CheckBufferOverrun
      uses function variable(const Variable *) defined in Token
      uses function isArray() defined in Variable
      uses function dimensions() defined in Variable
      uses function dimension(std::size_t) defined in Variable
      uses function possibleBufferOverrunError(const Token *,const std::string &,const std::string &,bool) defined in CheckBufferOverrun
      uses function checkFunctionCall(const Token *,const ArrayInfo &,std::list< const Token * >) defined in CheckBufferOverrun
      uses function pointerOutOfBoundsError(const Token *,const Token *,const MathLib::bigint) defined in CheckBufferOverrun
      uses function outOfBoundsError(const Token *,const std::string &,const bool,const MathLib::bigint &,const MathLib::bigint &) defined in CheckBufferOverrun
   function checkStringArgument() in line 96
      protection public
      28 lines of code
      0 parameters
      10 conditional paths
      uses variable _tokenizer defined in Check
      uses function getSymbolDatabase() defined in Tokenizer
      uses variable functionScopes defined in SymbolDatabase
      uses variable classStart defined in Scope
      uses variable classEnd defined in Scope
      uses function next() defined in Token
      uses variable _settings defined in Check
      uses variable library defined in Settings
      uses function hasminsize(const std::string &) defined in Library
      uses function tokAt(int) defined in Token
      uses function nextArgument() defined in Token
      uses function getValueTokenMinStrSize() defined in Token
      uses function argminsizes(const Token *,int) defined in Library
      uses function bufferOverrunError(const Token *,const std::string &) defined in CheckBufferOverrun
   function checkStructVariable() in line 87
      protection public
      169 lines of code
      0 parameters
      30 conditional paths
      uses variable _tokenizer defined in Check
      uses function getSymbolDatabase() defined in Tokenizer
      uses variable classAndStructScopes defined in SymbolDatabase
      uses variable varlist defined in Scope
      uses variable _settings defined in Check
      uses variable library defined in Settings
      uses variable functionScopes defined in SymbolDatabase
      uses variable nestedIn defined in Scope
      uses variable type defined in Scope
      uses enumvalue eFunction defined in Scope
      uses variable functionOf defined in Scope
      uses variable classStart defined in Scope
      uses function next() defined in Token
      uses variable classEnd defined in Scope
      uses function checkScope(const Token *,const ArrayInfo &) defined in CheckBufferOverrun
      uses function isClassOrStruct() defined in Scope
      uses function varname() defined in CheckBufferOverrun::ArrayInfo
      uses variable classDef defined in Scope
      uses variable className defined in Scope
      uses function isArrayOfStruct(const Token *,int &) defined in CheckBufferOverrun
      uses enumvalue eStruct defined in Scope
      uses function element_size() defined in CheckBufferOverrun::ArrayInfo
      uses function num() defined in CheckBufferOverrun::ArrayInfo
      uses function tokAt(int) defined in Token
      uses function declarationId() defined in CheckBufferOverrun::ArrayInfo
   function classInfo() in line 267
      12 lines of code
      0 parameters
      1 conditional paths
   function cmdLineArgsError(const Token *) in line 232
      4 lines of code
      1 parameters
      1 conditional paths
      uses enumvalue error defined in Severity
   function countSprintfLength(const std::string &,const std::list< const Token * > &) in line 84
      protection public
      102 lines of code
      2 parameters
      32 conditional paths
      uses enumvalue eString defined in Token
   function getErrorMessages(ErrorLogger *,const Settings *) in line 241
      protection public
      20 lines of code
      2 parameters
      1 conditional paths
      uses function arrayIndexOutOfBoundsError(const Token *,const ArrayInfo &,const std::vector< MathLib::bigint > &) defined in CheckBufferOverrun
      uses function bufferOverrunError(const Token *,const std::string &) defined in CheckBufferOverrun
      uses function strncatUsageError(const Token *) defined in CheckBufferOverrun
      uses function outOfBoundsError(const Token *,const std::string &,const bool,const MathLib::bigint &,const MathLib::bigint &) defined in CheckBufferOverrun
      uses function sizeArgumentAsCharError(const Token *) defined in CheckBufferOverrun
      uses function terminateStrncpyError(const Token *,const std::string &) defined in CheckBufferOverrun
      uses function bufferNotZeroTerminatedError(const Token *,const std::string &,const std::string &) defined in CheckBufferOverrun
      uses function negativeIndexError(const Token *,MathLib::bigint) defined in CheckBufferOverrun
      uses function cmdLineArgsError(const Token *) defined in CheckBufferOverrun
      uses function pointerOutOfBoundsError(const Token *,const Token *,const MathLib::bigint) defined in CheckBufferOverrun
      uses function arrayIndexThenCheckError(const Token *,const std::string &) defined in CheckBufferOverrun
      uses function possibleBufferOverrunError(const Token *,const std::string &,const std::string &,bool) defined in CheckBufferOverrun
      uses function argumentSizeError(const Token *,const std::string &,const std::string &) defined in CheckBufferOverrun
      uses function negativeMemoryAllocationSizeError(const Token *) defined in CheckBufferOverrun
      uses function negativeArraySizeError(const Token *) defined in CheckBufferOverrun
      uses enumvalue warning defined in Severity
   function getFileInfo(const Tokenizer *,const Settings *) in line 212
      protection public
      44 lines of code
      2 parameters
      8 conditional paths
      uses function getSymbolDatabase() defined in Tokenizer
      uses variable functionScopes defined in SymbolDatabase
      uses variable classStart defined in Scope
      uses variable classEnd defined in Scope
      uses function next() defined in Token
      uses variable intvalue defined in ValueFlow::Value
      uses variable arrayUsage defined in CheckBufferOverrun::MyFileInfo
      uses variable index defined in CheckBufferOverrun::MyFileInfo::ArrayUsage
      uses variable fileName defined in CheckBufferOverrun::MyFileInfo::ArrayUsage
      uses variable list defined in Tokenizer
      uses function file(const Token *) defined in TokenList
      uses variable linenr defined in CheckBufferOverrun::MyFileInfo::ArrayUsage
      uses variable scopeList defined in SymbolDatabase
      uses function isStatic() defined in Variable
      uses function isArray() defined in Variable
      uses function dimensions() defined in Variable
      uses function dimension(std::size_t) defined in Variable
      uses variable arraySize defined in CheckBufferOverrun::MyFileInfo
      uses function name() defined in Variable
   function isArrayOfStruct(const Token *,int &) in line 219
      19 lines of code
      2 parameters
      5 conditional paths
      uses function next() defined in Token
      uses function tokAt(int) defined in Token
   function myName() in line 263
      3 lines of code
      0 parameters
      1 conditional paths
   function negativeArraySize() in line 76
      protection public
      16 lines of code
      0 parameters
      5 conditional paths
      uses variable _tokenizer defined in Check
      uses function getSymbolDatabase() defined in Tokenizer
      uses function varIdCount() defined in Tokenizer
      uses function getVariableFromVarId(std::size_t) defined in SymbolDatabase
      uses function isArray() defined in Variable
      uses function nameToken() defined in Variable
      uses function next() defined in Token
      uses function astOperand2(Token *) defined in Token
      uses variable _settings defined in Check
      uses function negativeArraySizeError(const Token *) defined in CheckBufferOverrun
   function negativeArraySizeError(const Token *) in line 225
      5 lines of code
      1 parameters
      1 conditional paths
      uses enumvalue error defined in Severity
      uses function str(T &&) defined in Token
   function negativeIndexError(const Token *,MathLib::bigint) in line 230
      6 lines of code
      2 parameters
      1 conditional paths
      uses enumvalue error defined in Severity
   function negativeIndexError(const Token *,const ValueFlow::Value &) in line 231
      8 lines of code
      2 parameters
      2 conditional paths
      uses variable intvalue defined in ValueFlow::Value
      uses variable condition defined in ValueFlow::Value
      uses function linenr() defined in Token
      uses enumvalue warning defined in Severity
      uses enumvalue error defined in Severity
      uses variable inconclusive defined in ValueFlow::Value
   function negativeMemoryAllocationSizeError(const Token *) in line 224
      7 lines of code
      1 parameters
      1 conditional paths
      uses enumvalue error defined in Severity
   function outOfBoundsError(const Token *,const std::string &,const bool,const MathLib::bigint &,const MathLib::bigint &) in line 226
      10 lines of code
      5 parameters
      2 conditional paths
      uses enumvalue error defined in Severity
   function pointerOutOfBoundsError(const Token *,const Token *,const MathLib::bigint) in line 233
      26 lines of code
      3 parameters
      2 conditional paths
      uses function expressionString() defined in Token
      uses function isNumber() defined in Token
      uses enumvalue portability defined in Severity
   function possibleBufferOverrunError(const Token *,const std::string &,const std::string &,bool) in line 235
      13 lines of code
      4 parameters
      2 conditional paths
      uses enumvalue warning defined in Severity
   function runSimplifiedChecks(const Tokenizer *,const Settings *,ErrorLogger *) in line 58
      protection public
      7 lines of code
      3 parameters
      1 conditional paths
      uses function bufferOverrun() defined in CheckBufferOverrun
      uses function bufferOverrun2() defined in CheckBufferOverrun
      uses function arrayIndexThenCheck() defined in CheckBufferOverrun
      uses function negativeArraySize() defined in CheckBufferOverrun
   function sizeArgumentAsCharError(const Token *) in line 227
      6 lines of code
      1 parameters
      2 conditional paths
      uses variable _settings defined in Check
      uses function isEnabled(T &&) defined in Settings
      uses enumvalue warning defined in Severity
   function strncatUsageError(const Token *) in line 223
      12 lines of code
      1 parameters
      2 conditional paths
      uses variable _settings defined in Check
      uses function isEnabled(T &&) defined in Settings
      uses enumvalue warning defined in Severity
   function terminateStrncpyError(const Token *,const std::string &) in line 228
      8 lines of code
      2 parameters
      1 conditional paths
      uses enumvalue warning defined in Severity
   function valueFlowCheckArrayIndex(const Token *const,const ArrayInfo &) in line 238
      73 lines of code
      2 parameters
      13 conditional paths
      uses function scope(const Scope *) defined in Token
      uses enumvalue eGlobal defined in Scope
      uses enumvalue eNamespace defined in Scope
      uses variable _settings defined in Check
      uses variable inconclusive defined in Settings
      uses function str(T &&) defined in Token
      uses function astOperand2(Token *) defined in Token
      uses function getValueLE(const MathLib::bigint,const Settings *) defined in Token
      uses function negativeIndexError(const Token *,MathLib::bigint) defined in CheckBufferOverrun
      uses function num() defined in CheckBufferOverrun::ArrayInfo
      uses function numberOfElements() defined in CheckBufferOverrun::ArrayInfo
      uses function totalIndex(const std::vector< ValueFlow::Value > &) defined in CheckBufferOverrun::ArrayInfo
      uses function arrayIndexOutOfBoundsError(const Token *,const ArrayInfo &,const std::vector< MathLib::bigint > &) defined in CheckBufferOverrun
   function CheckBufferOverrun() in line 50
      protection public
      2 lines of code
      0 parameters
      1 conditional paths
   function CheckBufferOverrun(const Tokenizer *,const Settings *,ErrorLogger *) in line 54
      protection public
      3 lines of code
      3 parameters
      1 conditional paths
module CheckBufferOverrun::ArrayInfo
   function declarationId() in line 150
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function declarationId(unsigned int) in line 153
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function element_size() in line 145
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function limit(MathLib::bigint) in line 129
      protection public
      10 lines of code
      1 parameters
      3 conditional paths
      uses variable _num defined in CheckBufferOverrun::ArrayInfo
      uses function ArrayInfo() defined in CheckBufferOverrun::ArrayInfo
      uses variable _declarationId defined in CheckBufferOverrun::ArrayInfo
      uses variable _varname defined in CheckBufferOverrun::ArrayInfo
      uses variable _element_size defined in CheckBufferOverrun::ArrayInfo
   function num() in line 132
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function num(std::size_t) in line 137
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function num(std::size_t,MathLib::bigint) in line 140
      protection public
      3 lines of code
      2 parameters
      1 conditional paths
   function numberOfElements() in line 165
      protection public
      12 lines of code
      0 parameters
      3 conditional paths
      uses variable _num defined in CheckBufferOverrun::ArrayInfo
   function totalIndex(const std::vector< ValueFlow::Value > &) in line 166
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses variable _num defined in CheckBufferOverrun::ArrayInfo
   function varname() in line 158
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function varname(const std::string &) in line 161
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
      uses variable name defined in setup.py
   function ArrayInfo() in line 117
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function ArrayInfo(const Variable *,const Tokenizer *,const Library *,const unsigned int) in line 118
      protection public
      18 lines of code
      4 parameters
      6 conditional paths
      uses function dimensions() defined in Variable
      uses variable _num defined in CheckBufferOverrun::ArrayInfo
      uses function dimension(std::size_t) defined in Variable
      uses function typeEndToken() defined in Variable
      uses function str(T &&) defined in Token
      uses variable _element_size defined in CheckBufferOverrun::ArrayInfo
      uses function sizeOfType(const Token *) defined in Tokenizer
      uses function typeStartToken() defined in Variable
      uses function podtype(const std::string &) defined in Library
      uses variable size defined in Library::PodType
   function ArrayInfo(unsigned int,const std::string &,MathLib::bigint,MathLib::bigint) in line 126
      protection public
      5 lines of code
      4 parameters
      1 conditional paths
      uses variable _num defined in CheckBufferOverrun::ArrayInfo
   variable _declarationId in line 114
   variable _element_size in line 111
   variable _num in line 105
   variable _varname in line 108
module CheckBufferOverrun::MyFileInfo
   inherits from Check::FileInfo
   variable arraySize in line 208
      protection public
   variable arrayUsage in line 205
      protection public
module CheckBufferOverrun::MyFileInfo::ArrayUsage
   variable fileName in line 200
      protection public
   variable index in line 199
      protection public
   variable linenr in line 201
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/lib/checkclass.cpp
module checkclass.cpp
   function checkFunctionUsage(const std::string &,const Scope *) in line 869
      protection public
      46 lines of code
      2 parameters
      19 conditional paths
      uses variable functionList defined in Scope
      uses variable functionScope defined in Function
      uses variable tokenDef defined in Function
      uses function tokAt(int) defined in Token
      uses function str(T &&) defined in Token
      uses function name() defined in Check
      uses variable classDef defined in Scope
      uses function linkAt(int) defined in Token
      uses variable classEnd defined in Scope
      uses function next() defined in Token
      uses variable type defined in Function
      uses enumvalue eCopyConstructor defined in Function
      uses enumvalue eOperatorEqual defined in Function
      uses variable access defined in Function
      uses enumvalue Private defined in symboldatabase.h
      uses variable nestedList defined in Scope
      uses variable varlist defined in Scope
      uses function strAt(int) defined in Token
      uses variable className defined in Scope
   function findFunctionOf(const Scope *) in line 977
      protection public
      9 lines of code
      1 parameters
      3 conditional paths
      uses variable type defined in Scope
      uses enumvalue eFunction defined in Scope
      uses variable functionOf defined in Scope
      uses variable nestedIn defined in Scope
module @127::VarInfo
   variable tok in line 2019
      protection public
   variable var in line 2018
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/lib/checkclass.h
module CheckClass
   inherits from Check
   function assignAllVar(std::vector< Usage > &) in line 275
      5 lines of code
      1 parameters
      2 conditional paths
   function assignVar(unsigned int,const Scope *,std::vector< Usage > &) in line 261
      12 lines of code
      3 parameters
      3 conditional paths
      uses variable count defined in extracttests.py
      uses variable varlist defined in Scope
   function callsPureVirtualFunction(const Function &,std::map< const Function *, std::list< const Token * > > &) in line 298
      59 lines of code
      2 parameters
      12 conditional paths
      uses function link(Token *) defined in Token
      uses enumvalue eConstructor defined in Function
      uses enumvalue eCopyConstructor defined in Function
      uses enumvalue eMoveConstructor defined in Function
      uses enumvalue eDestructor defined in Function
      uses enumvalue eLambda defined in Scope
      uses variable nestedIn defined in Function
      uses function previous() defined in Token
      uses variable _settings defined in Check
      uses variable library defined in Settings
      uses function ignorefunction(const std::string &) defined in Library
      uses function str(T &&) defined in Token
   function callsPureVirtualFunctionError(const Function &,const std::list< const Token * > &,const std::string &) in line 168
      9 lines of code
      3 parameters
      1 conditional paths
      uses variable type defined in Function
      uses enumvalue warning defined in Severity
   function canNotCopy(const Scope *) in line 313
      19 lines of code
      1 parameters
      5 conditional paths
      uses variable functionList defined in Scope
      uses enumvalue eCopyConstructor defined in Function
      uses enumvalue Public defined in symboldatabase.h
      uses enumvalue eOperatorEqual defined in Function
   function canNotMove(const Scope *) in line 315
      23 lines of code
      1 parameters
      6 conditional paths
      uses variable functionList defined in Scope
      uses enumvalue eCopyConstructor defined in Function
      uses enumvalue Public defined in symboldatabase.h
      uses enumvalue eMoveConstructor defined in Function
      uses enumvalue eOperatorEqual defined in Function
   function checkConst() in line 120
      protection public
      84 lines of code
      0 parameters
      23 conditional paths
      uses variable _settings defined in Check
      uses variable inconclusive defined in Settings
      uses function isEnabled(T &&) defined in Settings
      uses variable symbolDatabase defined in CheckClass
      uses variable classAndStructScopes defined in SymbolDatabase
      uses variable functionList defined in Scope
      uses enumvalue eFunction defined in Function
      uses function previous() defined in Token
      uses function str(T &&) defined in Token
      uses function type(const ::Type *) defined in Token
      uses function isUpperCaseName() defined in Token
      uses variable definedType defined in Scope
      uses variable derivedFrom defined in Type
      uses function checkConstFunc(const Scope *,const Function *,bool &) defined in CheckClass
      uses variable className defined in Scope
      uses variable nestedIn defined in Scope
      uses variable type defined in Scope
      uses enumvalue eGlobal defined in Scope
      uses variable functionName defined in extracttests.py
      uses function checkConstError(const Token *,const std::string &,const std::string &,bool) defined in CheckClass
      uses function checkConstError2(const Token *,const Token *,const std::string &,const std::string &,bool) defined in CheckClass
   function checkConstError(const Token *,const std::string &,const std::string &,bool) in line 163
      4 lines of code
      4 parameters
      1 conditional paths
      uses function checkConstError2(const Token *,const Token *,const std::string &,const std::string &,bool) defined in CheckClass
   function checkConstError2(const Token *,const Token *,const std::string &,const std::string &,bool) in line 164
      23 lines of code
      5 parameters
      3 conditional paths
      uses enumvalue style defined in Severity
      uses enumvalue performance defined in Severity
   function checkConstFunc(const Scope *,const Function *,bool &) in line 239
      127 lines of code
      3 parameters
      40 conditional paths
      uses variable functionScope defined in Function
      uses variable classStart defined in Scope
      uses variable classEnd defined in Scope
      uses function next() defined in Token
      uses function isMemberVar(const Scope *,const Token *) defined in CheckClass
      uses function isMutable() defined in Variable
      uses function previous() defined in Token
      uses function str(T &&) defined in Token
      uses function tokType() defined in Token
      uses enumvalue eAssignmentOp defined in Token
      uses function variable(const Variable *) defined in Token
      uses function astParent() defined in Token
      uses function strAt(int) defined in Token
      uses function isConst() defined in Variable
      uses function isReference() defined in Variable
      uses function nameToken() defined in Variable
      uses function tokAt(int) defined in Token
      uses function varId() defined in Token
      uses function isStlType() defined in Variable
      uses function linkAt(int) defined in Token
      uses function typeScope() defined in Variable
      uses function isConstMemberFunc(const Scope *,const Token *) defined in CheckClass
      uses enumvalue eIncDecOp defined in Token
      uses function isMemberFunc(const Scope *,const Token *) defined in CheckClass
      uses function link(Token *) defined in Token
   function checkDuplInheritedMembers() in line 137
      protection public
      34 lines of code
      0 parameters
      8 conditional paths
      uses variable _settings defined in Check
      uses function isEnabled(T &&) defined in Settings
      uses variable symbolDatabase defined in CheckClass
      uses variable typeList defined in SymbolDatabase
      uses function duplInheritedMembersError(const Token *,const Token *,const std::string &,const std::string &,const std::string &,bool,bool) defined in CheckClass
      uses enumvalue eStruct defined in Scope
   function checkExplicitConstructors() in line 88
      protection public
      47 lines of code
      0 parameters
      10 conditional paths
      uses variable _settings defined in Check
      uses function isEnabled(T &&) defined in Settings
      uses variable symbolDatabase defined in CheckClass
      uses variable classAndStructScopes defined in SymbolDatabase
      uses variable numConstructors defined in Scope
      uses variable functionList defined in Scope
      uses function isPure() defined in Function
      uses variable standards defined in Settings
      uses variable cpp defined in Standards
      uses enumvalue CPP11 defined in Standards
      uses function isConstructor() defined in Function
      uses function isDelete() defined in Function
      uses function hasBody() defined in Function
      uses variable access defined in Function
      uses enumvalue Private defined in symboldatabase.h
      uses function isExplicit() defined in Function
      uses function argCount() defined in Function
      uses variable type defined in Function
      uses enumvalue eCopyConstructor defined in Function
      uses enumvalue eMoveConstructor defined in Function
      uses function noExplicitConstructorError(const Token *,const std::string &,bool) defined in CheckClass
      uses variable tokenDef defined in Function
      uses variable className defined in Scope
      uses variable type defined in Scope
      uses enumvalue eStruct defined in Scope
   function checkMemset() in line 101
      protection public
      81 lines of code
      0 parameters
      25 conditional paths
      uses variable _settings defined in Check
      uses function isEnabled(T &&) defined in Settings
      uses variable symbolDatabase defined in CheckClass
      uses variable functionScopes defined in SymbolDatabase
      uses variable classStart defined in Scope
      uses variable classEnd defined in Scope
      uses function next() defined in Token
      uses function tokAt(int) defined in Token
      uses function nextArgument() defined in Token
      uses function scope(const Scope *) defined in Token
      uses function str(T &&) defined in Token
      uses function variable(const Variable *) defined in Token
      uses function strAt(int) defined in Token
      uses function isArrayOrPointer() defined in Variable
      uses function typeEndToken() defined in Variable
      uses function previous() defined in Token
      uses function isArray() defined in Variable
      uses function dimensions() defined in Variable
      uses function typeScope() defined in Variable
      uses function type(const ::Type *) defined in Token
      uses function checkMemsetType(const Scope *,const Token *,const Scope *,bool,std::set< const Scope * >) defined in CheckClass
      uses function mallocOnClassWarning(const Token *,const std::string &,const Token *) defined in CheckClass
   function checkMemsetType(const Scope *,const Token *,const Scope *,bool,std::set< const Scope * >) in line 102
      protection public
      58 lines of code
      5 parameters
      14 conditional paths
      uses variable _settings defined in Check
      uses function isEnabled(T &&) defined in Settings
      uses variable definedType defined in Scope
      uses variable derivedFrom defined in Type
      uses variable classScope defined in Type
      uses variable functionList defined in Scope
      uses function mallocOnClassError(const Token *,const std::string &,const Token *,const std::string &) defined in CheckClass
      uses function str(T &&) defined in Token
      uses variable classDef defined in Scope
      uses function memsetError(const Token *,const std::string &,const std::string &,const std::string &) defined in CheckClass
      uses variable varlist defined in Scope
      uses function memsetErrorReference(const Token *,const std::string &,const std::string &) defined in CheckClass
      uses function strAt(int) defined in Token
      uses variable library defined in Settings
      uses function podtype(const std::string &) defined in Library
      uses function memsetErrorFloat(const Token *,const std::string &) defined in CheckClass
   function checkPureVirtualFunctionCall() in line 134
      protection public
      26 lines of code
      0 parameters
      6 conditional paths
      uses variable _settings defined in Check
      uses function isEnabled(T &&) defined in Settings
      uses variable symbolDatabase defined in CheckClass
      uses variable functionScopes defined in SymbolDatabase
      uses variable function defined in Scope
      uses function hasBody() defined in Function
      uses function isConstructor() defined in Function
      uses function isDestructor() defined in Function
      uses function callsPureVirtualFunction(const Function &,std::map< const Function *, std::list< const Token * > > &) defined in CheckClass
      uses function getFirstPureVirtualFunctionCallStack(std::map< const Function *, std::list< const Token * > > &,const Token &,std::list< const Token * > &) defined in CheckClass
      uses function callsPureVirtualFunctionError(const Function &,const std::list< const Token * > &,const std::string &) defined in CheckClass
   function checkReturnPtrThis(const Scope *,const Function *,const Token *,const Token *) in line 228
      5 lines of code
      4 parameters
      1 conditional paths
   function checkReturnPtrThis(const Scope *,const Function *,const Token *,const Token *,std::set< const Function * > &) in line 229
      75 lines of code
      5 parameters
      15 conditional paths
      uses function next() defined in Token
      uses function str(T &&) defined in Token
      uses variable className defined in Scope
      uses function tokAt(int) defined in Token
      uses function strAt(int) defined in Token
      uses function linkAt(int) defined in Token
      uses variable functionList defined in Scope
      uses enumvalue eFunction defined in Function
      uses function checkReturnPtrThis(const Scope *,const Function *,const Token *,const Token *) defined in CheckClass
      uses function operatorEqRetRefThisError(const Token *) defined in CheckClass
      uses variable token defined in Function
      uses variable argDef defined in Function
      uses function operatorEqMissingReturnStatementError(const Token *,bool) defined in CheckClass
      uses variable access defined in Function
      uses enumvalue Public defined in symboldatabase.h
      uses variable _settings defined in Check
      uses variable library defined in Settings
      uses function isScopeNoReturn(const Token *,std::string *) defined in Library
      uses function operatorEqShouldBeLeftUnimplementedError(const Token *) defined in CheckClass
   function checkSelfInitialization() in line 129
      protection public
      19 lines of code
      0 parameters
      6 conditional paths
      uses variable symbolDatabase defined in CheckClass
      uses variable functionScopes defined in SymbolDatabase
      uses variable function defined in Scope
      uses function link(Token *) defined in Token
      uses function str(T &&) defined in Token
      uses variable classStart defined in Scope
      uses function next() defined in Token
      uses function varId() defined in Token
      uses function tokAt(int) defined in Token
      uses function selfInitializationError(const Token *,const std::string &) defined in CheckClass
      uses function strAt(int) defined in Token
   function classInfo() in line 205
      21 lines of code
      0 parameters
      1 conditional paths
   function clearAllVar(std::vector< Usage > &) in line 281
      7 lines of code
      1 parameters
      2 conditional paths
   function constructors() in line 84
      protection public
      144 lines of code
      0 parameters
      34 conditional paths
      uses variable _settings defined in Check
      uses function isEnabled(T &&) defined in Settings
      uses variable inconclusive defined in Settings
      uses variable symbolDatabase defined in CheckClass
      uses variable classAndStructScopes defined in SymbolDatabase
      uses variable numConstructors defined in Scope
      uses variable varlist defined in Scope
      uses enumvalue True defined in Type
      uses function noConstructorError(const Token *,const std::string &,bool) defined in CheckClass
      uses variable classDef defined in Scope
      uses variable className defined in Scope
      uses function str(T &&) defined in Token
      uses variable nestedList defined in Scope
      uses variable type defined in Scope
      uses enumvalue eUnion defined in Scope
      uses variable functionList defined in Scope
      uses enumvalue eOperatorEqual defined in Function
      uses function clearAllVar(std::vector< Usage > &) defined in CheckClass
      uses function initializeVarList(const Function &,std::list< const Function * > &,const Scope *,std::vector< Usage > &) defined in CheckClass
      uses variable count defined in extracttests.py
      uses enumvalue eConstructor defined in Function
      uses enumvalue eMoveConstructor defined in Function
      uses function canNotMove(const Scope *) defined in CheckClass
      uses function canNotCopy(const Scope *) defined in CheckClass
      uses enumvalue eCopyConstructor defined in Function
      uses function link(Token *) defined in Token
      uses function operatorEqVarError(const Token *,const std::string &,const std::string &,bool) defined in CheckClass
      uses enumvalue Private defined in symboldatabase.h
      uses function uninitVarError(const Token *,const std::string &,const std::string &,bool) defined in CheckClass
   function copyconstructors() in line 131
      protection public
      79 lines of code
      0 parameters
      26 conditional paths
      uses variable _settings defined in Check
      uses function isEnabled(T &&) defined in Settings
      uses variable symbolDatabase defined in CheckClass
      uses variable classAndStructScopes defined in SymbolDatabase
      uses variable functionList defined in Scope
      uses variable type defined in Function
      uses enumvalue eConstructor defined in Function
      uses variable functionScope defined in Function
      uses variable classDef defined in Scope
      uses function linkAt(int) defined in Token
      uses variable classStart defined in Scope
      uses function next() defined in Token
      uses function variable(const Variable *) defined in Token
      uses function isPointer() defined in Variable
      uses function scope() defined in Variable
      uses function varId() defined in Token
      uses variable classEnd defined in Scope
      uses function isStatic() defined in Variable
      uses enumvalue eCopyConstructor defined in Function
      uses variable tokenDef defined in Function
      uses function str(T &&) defined in Token
      uses function tokAt(int) defined in Token
      uses variable definedType defined in Scope
      uses variable derivedFrom defined in Type
      uses function noCopyConstructorError(const Token *,const std::string &,bool) defined in CheckClass
      uses variable className defined in Scope
      uses variable type defined in Scope
      uses enumvalue eStruct defined in Scope
      uses function copyConstructorShallowCopyError(const Token *,const std::string &) defined in CheckClass
   function copyConstructorShallowCopyError(const Token *,const std::string &) in line 146
      4 lines of code
      2 parameters
      1 conditional paths
      uses enumvalue style defined in Severity
   function duplInheritedMembersError(const Token *,const Token *,const std::string &,const std::string &,const std::string &,bool,bool) in line 169
      13 lines of code
      7 parameters
      1 conditional paths
      uses variable message defined in triage-report.py
      uses enumvalue warning defined in Severity
   function getErrorMessages(ErrorLogger *,const Settings *) in line 171
      29 lines of code
      2 parameters
      1 conditional paths
      uses function noConstructorError(const Token *,const std::string &,bool) defined in CheckClass
      uses function noExplicitConstructorError(const Token *,const std::string &,bool) defined in CheckClass
      uses function copyConstructorShallowCopyError(const Token *,const std::string &) defined in CheckClass
      uses function noCopyConstructorError(const Token *,const std::string &,bool) defined in CheckClass
      uses function uninitVarError(const Token *,const std::string &,const std::string &,bool) defined in CheckClass
      uses function operatorEqVarError(const Token *,const std::string &,const std::string &,bool) defined in CheckClass
      uses function unusedPrivateFunctionError(const Token *,const std::string &,const std::string &) defined in CheckClass
      uses function memsetError(const Token *,const std::string &,const std::string &,const std::string &) defined in CheckClass
      uses function memsetErrorReference(const Token *,const std::string &,const std::string &) defined in CheckClass
      uses function memsetErrorFloat(const Token *,const std::string &) defined in CheckClass
      uses function mallocOnClassWarning(const Token *,const std::string &,const Token *) defined in CheckClass
      uses function mallocOnClassError(const Token *,const std::string &,const Token *,const std::string &) defined in CheckClass
      uses function operatorEqReturnError(const Token *,const std::string &) defined in CheckClass
      uses function virtualDestructorError(const Token *,const std::string &,const std::string &,bool) defined in CheckClass
      uses function thisSubtractionError(const Token *) defined in CheckClass
      uses function operatorEqRetRefThisError(const Token *) defined in CheckClass
      uses function operatorEqMissingReturnStatementError(const Token *,bool) defined in CheckClass
      uses function operatorEqShouldBeLeftUnimplementedError(const Token *) defined in CheckClass
      uses function operatorEqToSelfError(const Token *) defined in CheckClass
      uses function checkConstError(const Token *,const std::string &,const std::string &,bool) defined in CheckClass
      uses function initializerListError(const Token *,const Token *,const std::string &,const std::string &) defined in CheckClass
      uses function suggestInitializationList(const Token *,const std::string &) defined in CheckClass
      uses function selfInitializationError(const Token *,const std::string &) defined in CheckClass
      uses function duplInheritedMembersError(const Token *,const Token *,const std::string &,const std::string &,const std::string &,bool,bool) defined in CheckClass
   function getFirstPureVirtualFunctionCallStack(std::map< const Function *, std::list< const Token * > > &,const Token &,std::list< const Token * > &) in line 308
      19 lines of code
      3 parameters
      3 conditional paths
      uses function function(const Function *) defined in Token
   function hasAllocation(const Function *,const Scope *) in line 232
      32 lines of code
      2 parameters
      9 conditional paths
      uses variable functionScope defined in Function
      uses variable classEnd defined in Scope
      uses variable classStart defined in Scope
      uses function next() defined in Token
      uses function isMemberVar(const Scope *,const Token *) defined in CheckClass
      uses function tokAt(int) defined in Token
      uses function varId() defined in Token
   function hasAssignSelf(const Function *,const Token *) in line 233
      26 lines of code
      2 parameters
      10 conditional paths
      uses variable functionScope defined in Function
      uses variable classEnd defined in Scope
      uses variable classStart defined in Scope
      uses function next() defined in Token
      uses function tokAt(int) defined in Token
      uses function link(Token *) defined in Token
      uses function strAt(int) defined in Token
      uses function str(T &&) defined in Token
   function initializationListUsage() in line 126
      protection public
      53 lines of code
      0 parameters
      17 conditional paths
      uses variable _settings defined in Check
      uses function isEnabled(T &&) defined in Settings
      uses variable symbolDatabase defined in CheckClass
      uses variable functionScopes defined in SymbolDatabase
      uses variable function defined in Scope
      uses function isConstructor() defined in Function
      uses variable functionOf defined in Scope
      uses variable classStart defined in Scope
      uses variable classEnd defined in Scope
      uses function next() defined in Token
      uses function scope() defined in Variable
      uses function isStatic() defined in Variable
      uses function isPointer() defined in Variable
      uses function isReference() defined in Variable
      uses function type() defined in Variable
      uses function isStlStringType() defined in Variable
      uses function typeStartToken() defined in Variable
      uses function linkAt(int) defined in Token
      uses function tokAt(int) defined in Token
      uses function str(T &&) defined in Token
      uses function isArray() defined in Variable
      uses function isLocal() defined in Variable
      uses function isMemberFunc(const Scope *,const Token *) defined in CheckClass
      uses function suggestInitializationList(const Token *,const std::string &) defined in CheckClass
   function initializerListError(const Token *,const Token *,const std::string &,const std::string &) in line 165
      15 lines of code
      4 parameters
      1 conditional paths
      uses enumvalue style defined in Severity
   function initializerListOrder() in line 123
      protection public
      56 lines of code
      0 parameters
      14 conditional paths
      uses variable _settings defined in Check
      uses function isEnabled(T &&) defined in Settings
      uses variable inconclusive defined in Settings
      uses variable symbolDatabase defined in CheckClass
      uses variable classAndStructScopes defined in SymbolDatabase
      uses variable functionList defined in Scope
      uses function link(Token *) defined in Token
      uses function str(T &&) defined in Token
      uses function next() defined in Token
      uses function getVariable(const std::string &) defined in Scope
      uses function tokAt(int) defined in Token
      uses function strAt(int) defined in Token
      uses function initializerListError(const Token *,const Token *,const std::string &,const std::string &) defined in CheckClass
      uses variable className defined in Scope
   function initializeVarList(const Function &,std::list< const Function * > &,const Scope *,std::vector< Usage > &) in line 290
      288 lines of code
      4 parameters
      62 conditional paths
      uses variable functionScope defined in Function
      uses function isConstructor() defined in Function
      uses variable arg defined in Function
      uses function link(Token *) defined in Token
      uses variable classEnd defined in Scope
      uses function next() defined in Token
      uses function linkAt(int) defined in Token
      uses function str(T &&) defined in Token
      uses function name() defined in Function
      uses function initVar(unsigned int,const Scope *,std::vector< Usage > &) defined in CheckClass
      uses function varId() defined in Token
      uses function function(const Function *) defined in Token
      uses function assignAllVar(std::vector< Usage > &) defined in CheckClass
      uses function hasBody() defined in Function
      uses function assignVar(unsigned int,const Scope *,std::vector< Usage > &) defined in CheckClass
      uses function previous() defined in Token
      uses variable type defined in Function
      uses enumvalue eOperatorEqual defined in Function
      uses variable varlist defined in Scope
      uses function tokAt(int) defined in Token
      uses function isBaseClassFunc(const Token *,const Scope *) defined in CheckClass
      uses variable definedType defined in Scope
      uses variable friendList defined in Type
      uses function variable(const Variable *) defined in Token
      uses function strAt(int) defined in Token
   function initVar(unsigned int,const Scope *,std::vector< Usage > &) in line 269
      12 lines of code
      3 parameters
      3 conditional paths
      uses variable count defined in extracttests.py
      uses variable varlist defined in Scope
   function isBaseClassFunc(const Token *,const Scope *) in line 253
      24 lines of code
      2 parameters
      5 conditional paths
      uses variable definedType defined in Scope
      uses variable derivedFrom defined in Type
      uses variable classScope defined in Type
      uses variable functionList defined in Scope
      uses function str(T &&) defined in Token
   function isConstMemberFunc(const Scope *,const Token *) in line 238
      22 lines of code
      2 parameters
      6 conditional paths
      uses function function(const Function *) defined in Token
      uses variable definedType defined in Scope
      uses variable derivedFrom defined in Type
      uses variable classScope defined in Type
   function isMemberFunc(const Scope *,const Token *) in line 237
      22 lines of code
      2 parameters
      6 conditional paths
      uses function function(const Function *) defined in Token
      uses variable definedType defined in Scope
      uses variable derivedFrom defined in Type
      uses variable classScope defined in Type
   function isMemberVar(const Scope *,const Token *) in line 236
      51 lines of code
      2 parameters
      14 conditional paths
      uses function str(T &&) defined in Token
      uses function tokAt(int) defined in Token
      uses function linkAt(int) defined in Token
      uses function previous() defined in Token
      uses function link(Token *) defined in Token
      uses variable varlist defined in Scope
      uses function varId() defined in Token
      uses variable symbolDatabase defined in CheckClass
      uses function debugMessage(const Token *,const std::string &) defined in SymbolDatabase
      uses variable definedType defined in Scope
      uses variable derivedFrom defined in Type
      uses variable classScope defined in Type
   function mallocOnClassError(const Token *,const std::string &,const Token *,const std::string &) in line 154
      10 lines of code
      4 parameters
      1 conditional paths
      uses enumvalue error defined in Severity
   function mallocOnClassWarning(const Token *,const std::string &,const Token *) in line 155
      10 lines of code
      3 parameters
      1 conditional paths
      uses enumvalue warning defined in Severity
   function memsetError(const Token *,const std::string &,const std::string &,const std::string &) in line 151
      8 lines of code
      4 parameters
      1 conditional paths
      uses enumvalue error defined in Severity
   function memsetErrorFloat(const Token *,const std::string &) in line 153
      8 lines of code
      2 parameters
      1 conditional paths
      uses enumvalue portability defined in Severity
   function memsetErrorReference(const Token *,const std::string &,const std::string &) in line 152
      4 lines of code
      3 parameters
      1 conditional paths
      uses enumvalue error defined in Severity
   function myName() in line 201
      3 lines of code
      0 parameters
      1 conditional paths
   function noConstructorError(const Token *,const std::string &,bool) in line 143
      11 lines of code
      3 parameters
      1 conditional paths
      uses enumvalue style defined in Severity
   function noCopyConstructorError(const Token *,const std::string &,bool) in line 147
      7 lines of code
      3 parameters
      1 conditional paths
      uses enumvalue style defined in Severity
   function noExplicitConstructorError(const Token *,const std::string &,bool) in line 144
      6 lines of code
      3 parameters
      1 conditional paths
      uses variable message defined in triage-report.py
      uses enumvalue style defined in Severity
   function operatorEq() in line 105
      protection public
      41 lines of code
      0 parameters
      13 conditional paths
      uses variable _settings defined in Check
      uses function isEnabled(T &&) defined in Settings
      uses variable symbolDatabase defined in CheckClass
      uses variable classAndStructScopes defined in SymbolDatabase
      uses variable functionList defined in Scope
      uses enumvalue eOperatorEqual defined in Function
      uses enumvalue Public defined in symboldatabase.h
      uses variable className defined in Scope
      uses function next() defined in Token
      uses function str(T &&) defined in Token
      uses function link(Token *) defined in Token
      uses function operatorEqReturnError(const Token *,const std::string &) defined in CheckClass
   function operatorEqMissingReturnStatementError(const Token *,bool) in line 161
      8 lines of code
      2 parameters
      2 conditional paths
      uses enumvalue error defined in Severity
      uses function operatorEqRetRefThisError(const Token *) defined in CheckClass
   function operatorEqRetRefThis() in line 108
      protection public
      20 lines of code
      0 parameters
      6 conditional paths
      uses variable _settings defined in Check
      uses function isEnabled(T &&) defined in Settings
      uses variable symbolDatabase defined in CheckClass
      uses variable classAndStructScopes defined in SymbolDatabase
      uses variable functionList defined in Scope
      uses enumvalue eOperatorEqual defined in Function
      uses variable className defined in Scope
      uses function checkReturnPtrThis(const Scope *,const Function *,const Token *,const Token *) defined in CheckClass
      uses variable classStart defined in Scope
   function operatorEqRetRefThisError(const Token *) in line 159
      4 lines of code
      1 parameters
      1 conditional paths
      uses enumvalue style defined in Severity
   function operatorEqReturnError(const Token *,const std::string &) in line 156
      6 lines of code
      2 parameters
      1 conditional paths
      uses enumvalue style defined in Severity
   function operatorEqShouldBeLeftUnimplementedError(const Token *) in line 160
      4 lines of code
      1 parameters
      1 conditional paths
      uses enumvalue style defined in Severity
   function operatorEqToSelf() in line 111
      protection public
      38 lines of code
      0 parameters
      12 conditional paths
      uses variable _settings defined in Check
      uses function isEnabled(T &&) defined in Settings
      uses variable symbolDatabase defined in CheckClass
      uses variable classAndStructScopes defined in SymbolDatabase
      uses variable definedType defined in Scope
      uses variable derivedFrom defined in Type
      uses variable functionList defined in Scope
      uses enumvalue eOperatorEqual defined in Function
      uses function str(T &&) defined in Token
      uses function previous() defined in Token
      uses variable className defined in Scope
      uses function hasAssignSelf(const Function *,const Token *) defined in CheckClass
      uses function hasAllocation(const Function *,const Scope *) defined in CheckClass
      uses function operatorEqToSelfError(const Token *) defined in CheckClass
   function operatorEqToSelfError(const Token *) in line 162
      7 lines of code
      1 parameters
      1 conditional paths
      uses enumvalue warning defined in Severity
   function operatorEqVarError(const Token *,const std::string &,const std::string &,bool) in line 149
      4 lines of code
      4 parameters
      1 conditional paths
      uses enumvalue warning defined in Severity
   function privateFunctions() in line 91
      protection public
      51 lines of code
      0 parameters
      13 conditional paths
      uses variable _settings defined in Check
      uses function isEnabled(T &&) defined in Settings
      uses variable symbolDatabase defined in CheckClass
      uses variable classAndStructScopes defined in SymbolDatabase
      uses variable classStart defined in Scope
      uses variable classEnd defined in Scope
      uses variable functionList defined in Scope
      uses variable type defined in Function
      uses enumvalue eFunction defined in Function
      uses variable access defined in Function
      uses enumvalue Private defined in symboldatabase.h
      uses function isOperator() defined in Function
      uses variable definedType defined in Scope
      uses variable derivedFrom defined in Type
      uses variable friendList defined in Type
      uses function unusedPrivateFunctionError(const Token *,const std::string &,const std::string &) defined in CheckClass
      uses variable className defined in Scope
   function runChecks(const Tokenizer *,const Settings *,ErrorLogger *) in line 45
      protection public
      9 lines of code
      3 parameters
      2 conditional paths
      uses function isC() defined in Tokenizer
      uses function checkMemset() defined in CheckClass
   function runSimplifiedChecks(const Tokenizer *,const Settings *,ErrorLogger *) in line 56
      protection public
      25 lines of code
      3 parameters
      2 conditional paths
      uses function isC() defined in Tokenizer
      uses function constructors() defined in CheckClass
      uses function operatorEq() defined in CheckClass
      uses function privateFunctions() defined in CheckClass
      uses function operatorEqRetRefThis() defined in CheckClass
      uses function thisSubtraction() defined in CheckClass
      uses function operatorEqToSelf() defined in CheckClass
      uses function initializerListOrder() defined in CheckClass
      uses function initializationListUsage() defined in CheckClass
      uses function checkSelfInitialization() defined in CheckClass
      uses function virtualDestructor() defined in CheckClass
      uses function checkConst() defined in CheckClass
      uses function copyconstructors() defined in CheckClass
      uses function checkPureVirtualFunctionCall() defined in CheckClass
      uses function checkDuplInheritedMembers() defined in CheckClass
      uses function checkExplicitConstructors() defined in CheckClass
   function selfInitializationError(const Token *,const std::string &) in line 167
      4 lines of code
      2 parameters
      1 conditional paths
      uses enumvalue error defined in Severity
   function suggestInitializationList(const Token *,const std::string &) in line 166
      7 lines of code
      2 parameters
      1 conditional paths
      uses enumvalue performance defined in Severity
   function thisSubtraction() in line 117
      protection public
      17 lines of code
      0 parameters
      5 conditional paths
      uses variable _settings defined in Check
      uses function isEnabled(T &&) defined in Settings
      uses variable _tokenizer defined in Check
      uses function tokens() defined in Tokenizer
      uses function strAt(int) defined in Token
      uses function thisSubtractionError(const Token *) defined in CheckClass
      uses function next() defined in Token
   function thisSubtractionError(const Token *) in line 158
      4 lines of code
      1 parameters
      1 conditional paths
      uses enumvalue warning defined in Severity
   function uninitVarError(const Token *,const std::string &,const std::string &,bool) in line 148
      4 lines of code
      4 parameters
      1 conditional paths
      uses enumvalue warning defined in Severity
   function unusedPrivateFunctionError(const Token *,const std::string &,const std::string &) in line 150
      4 lines of code
      3 parameters
      1 conditional paths
      uses enumvalue style defined in Severity
   function virtualDestructor() in line 114
      protection public
      141 lines of code
      0 parameters
      28 conditional paths
      uses variable _settings defined in Check
      uses variable inconclusive defined in Settings
      uses variable symbolDatabase defined in CheckClass
      uses variable classAndStructScopes defined in SymbolDatabase
      uses variable definedType defined in Scope
      uses variable derivedFrom defined in Type
      uses function getDestructor() defined in Scope
      uses function isVirtual() defined in Function
      uses variable functionList defined in Scope
      uses function hasBody() defined in Function
      uses variable token defined in Function
      uses function linkAt(int) defined in Token
      uses function tokAt(int) defined in Token
      uses variable classDef defined in Scope
      uses function next() defined in Token
      uses enumvalue Private defined in symboldatabase.h
      uses variable classScope defined in Type
      uses function getVariableListSize() defined in SymbolDatabase
      uses function getVariableFromVarId(std::size_t) defined in SymbolDatabase
      uses function isPointer() defined in Variable
      uses function type() defined in Variable
      uses function declarationId() defined in Variable
      uses variable _tokenizer defined in Check
      uses function tokens() defined in Tokenizer
      uses function str(T &&) defined in Token
      uses function virtualDestructorError(const Token *,const std::string &,const std::string &,bool) defined in CheckClass
      uses variable classDef defined in Type
      uses function name() defined in Type
      uses variable access defined in Function
      uses enumvalue Public defined in symboldatabase.h
   function virtualDestructorError(const Token *,const std::string &,const std::string &,bool) in line 157
      11 lines of code
      4 parameters
      2 conditional paths
      uses enumvalue warning defined in Severity
      uses enumvalue error defined in Severity
   function CheckClass() in line 38
      protection public
      2 lines of code
      0 parameters
      1 conditional paths
   function CheckClass(const Tokenizer *,const Settings *,ErrorLogger *) in line 42
      protection public
      6 lines of code
      3 parameters
      1 conditional paths
   variable symbolDatabase in line 140
module CheckClass::Usage
   function Usage() in line 244
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   variable assign in line 247
      protection public
   variable init in line 250
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/lib/checkcondition.cpp
module checkcondition.cpp
   function isParameterChanged(const Token *) in line 83
      protection public
      27 lines of code
      1 parameters
      10 conditional paths
      uses function str(T &&) defined in Token
      uses function previous() defined in Token
      uses function link(Token *) defined in Token
      uses function function(const Function *) defined in Token
      uses function isConst() defined in Variable
      uses function isReference() defined in Variable
      uses function isPointer() defined in Variable
   function getnumchildren(const Token *,std::list< MathLib::bigint > &) in line 215
      protection public
      11 lines of code
      2 parameters
      5 conditional paths
      uses function astOperand1(Token *) defined in Token
      uses function str(T &&) defined in Token
      uses function astOperand2(Token *) defined in Token
   function inBooleanFunction(const Token *) in line 228
      protection public
      16 lines of code
      1 parameters
      4 conditional paths
      uses function scope(const Scope *) defined in Token
      uses function isLocal() defined in Scope
      uses variable nestedIn defined in Scope
      uses variable type defined in Scope
      uses enumvalue eFunction defined in Scope
      uses variable function defined in Scope
      uses variable retDef defined in Function
      uses function next() defined in Token
      uses function str(T &&) defined in Token
   function invertOperatorForOperandSwap(std::string) in line 504
      protection public
      8 lines of code
      1 parameters
      3 conditional paths
      uses variable s defined in extracttests.py
   function checkIntRelation(const std::string &,const T,const T) in line 514
      protection public
      9 lines of code
      3 parameters
      1 conditional paths
   function checkFloatRelation(const std::string &,const double,const double) in line 524
      protection public
      7 lines of code
      3 parameters
      1 conditional paths
   function getvalue3(const T,const T) in line 533
      protection public
      8 lines of code
      2 parameters
      2 conditional paths
   function getvalue3(const double,const double) in line 543
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function getvalue(const int,const T,const T) in line 550
      protection public
      38 lines of code
      3 parameters
      12 conditional paths
   function parseComparison(const Token *,bool *,std::string *,std::string *,const Token **) in line 589
      protection public
      39 lines of code
      5 parameters
      9 conditional paths
      uses function str(T &&) defined in Token
      uses function astOperand1(Token *) defined in Token
      uses function isComparisonOp() defined in Token
      uses function astOperand2(Token *) defined in Token
      uses function invertOperatorForOperandSwap(std::string) defined in checkcondition.cpp
   function conditionString(bool,const Token *,const std::string &,const std::string &) in line 629
      protection public
      14 lines of code
      4 parameters
      2 conditional paths
      uses function astParent() defined in Token
      uses function isComparisonOp() defined in Token
      uses function isName() defined in Token
      uses function str(T &&) defined in Token
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/lib/checkcondition.h
module CheckCondition
   inherits from Check
   function alwaysTrueFalse() in line 99
      protection public
      45 lines of code
      0 parameters
      13 conditional paths
      uses variable _settings defined in Check
      uses function isEnabled(T &&) defined in Settings
      uses variable _tokenizer defined in Check
      uses function getSymbolDatabase() defined in Tokenizer
      uses variable functionScopes defined in SymbolDatabase
      uses variable classStart defined in Scope
      uses function next() defined in Token
      uses variable classEnd defined in Scope
      uses function astOperand1(Token *) defined in Token
      uses function astOperand2(Token *) defined in Token
      uses function isExpandedMacro() defined in Token
      uses function alwaysTrueFalseError(const Token *,bool) defined in CheckCondition
   function alwaysTrueFalseError(const Token *,bool) in line 127
      9 lines of code
      2 parameters
      1 conditional paths
      uses function expressionString() defined in Token
      uses enumvalue style defined in Severity
   function assignIf() in line 67
      protection public
      43 lines of code
      0 parameters
      11 conditional paths
      uses variable _settings defined in Check
      uses function isEnabled(T &&) defined in Settings
      uses variable _tokenizer defined in Check
      uses function tokens() defined in Tokenizer
      uses function next() defined in Token
      uses function tokAt(int) defined in Token
      uses function strAt(int) defined in Token
      uses function previous() defined in Token
      uses function str(T &&) defined in Token
      uses function assignIfParseScope(const Token *const,const Token *const,const unsigned int,const bool,const char,const MathLib::bigint) defined in CheckCondition
      uses function declarationId() defined in Variable
      uses function isLocal() defined in Variable
   function assignIfError(const Token *,const Token *,const std::string &,bool) in line 107
      11 lines of code
      4 parameters
      1 conditional paths
      uses enumvalue style defined in Severity
      uses variable result defined in triage-report.py
   function assignIfParseScope(const Token *const,const Token *const,const unsigned int,const bool,const char,const MathLib::bigint) in line 70
      protection public
      72 lines of code
      6 parameters
      23 conditional paths
      uses function next() defined in Token
      uses function mismatchingBitAndError(const Token *,const MathLib::bigint,const Token *,const MathLib::bigint) defined in CheckCondition
      uses function linkAt(int) defined in Token
      uses function link(Token *) defined in Token
      uses function str(T &&) defined in Token
      uses function isVariableChanged(const Token *,const Token *,const unsigned int) defined in astutils.cpp
      uses function strAt(int) defined in Token
      uses function assignIfError(const Token *,const Token *,const std::string &,bool) defined in CheckCondition
      uses function tokAt(int) defined in Token
   function badBitmaskCheckError(const Token *) in line 109
      4 lines of code
      1 parameters
      1 conditional paths
      uses enumvalue warning defined in Severity
   function checkBadBitmaskCheck() in line 78
      protection public
      22 lines of code
      0 parameters
      5 conditional paths
      uses variable _settings defined in Check
      uses function isEnabled(T &&) defined in Settings
      uses variable _tokenizer defined in Check
      uses function tokens() defined in Tokenizer
      uses function next() defined in Token
      uses function astParent() defined in Token
      uses function str(T &&) defined in Token
      uses function astOperand1(Token *) defined in Token
      uses function astOperand2(Token *) defined in Token
      uses function badBitmaskCheckError(const Token *) defined in CheckCondition
   function checkIncorrectLogicOperator() in line 90
      protection public
      157 lines of code
      0 parameters
      25 conditional paths
      uses variable _settings defined in Check
      uses function isEnabled(T &&) defined in Settings
      uses variable _tokenizer defined in Check
      uses function getSymbolDatabase() defined in Tokenizer
      uses variable functionScopes defined in SymbolDatabase
      uses variable classStart defined in Scope
      uses function next() defined in Token
      uses variable classEnd defined in Scope
      uses function isOppositeCond(bool,bool,const Token *const,const Token *const,const std::set< std::string > &) defined in astutils.cpp
      uses function isCPP() defined in Tokenizer
      uses variable library defined in Settings
      uses variable functionpure defined in Library
      uses function incorrectLogicOperatorError(const Token *,const std::string &,bool) defined in CheckCondition
      uses function astOperand2(Token *) defined in Token
      uses function redundantConditionError(const Token *,const std::string &) defined in CheckCondition
      uses function expressionString() defined in Token
      uses function astOperand1(Token *) defined in Token
      uses function str(T &&) defined in Token
      uses function isSameExpression(bool,bool,const Token *,const Token *,const std::set< std::string > &) defined in astutils.cpp
      uses function astIsFloat((null)) defined in cppcheckdata.py
   function checkInvalidTestForOverflow() in line 102
      protection public
      52 lines of code
      0 parameters
      14 conditional paths
      uses variable _settings defined in Check
      uses function isEnabled(T &&) defined in Settings
      uses variable _tokenizer defined in Check
      uses function getSymbolDatabase() defined in Tokenizer
      uses variable functionScopes defined in SymbolDatabase
      uses variable classStart defined in Scope
      uses variable classEnd defined in Scope
      uses function next() defined in Token
      uses variable result defined in triage-report.py
      uses function astOperand1(Token *) defined in Token
      uses function astOperand2(Token *) defined in Token
      uses function valueType() defined in Token
      uses variable pointer defined in ValueType
      uses variable sign defined in ValueType
      uses function isSameExpression(bool,bool,const Token *,const Token *,const std::set< std::string > &) defined in astutils.cpp
      uses function isCPP() defined in Tokenizer
      uses variable library defined in Settings
      uses variable functionpure defined in Library
      uses function invalidTestForOverflow(const Token *,bool) defined in CheckCondition
      uses function isNumber() defined in Token
      uses function str(T &&) defined in Token
   function checkModuloAlwaysTrueFalse() in line 93
      protection public
      29 lines of code
      0 parameters
      8 conditional paths
      uses variable _settings defined in Check
      uses function isEnabled(T &&) defined in Settings
      uses variable _tokenizer defined in Check
      uses function getSymbolDatabase() defined in Tokenizer
      uses variable functionScopes defined in SymbolDatabase
      uses variable classStart defined in Scope
      uses function next() defined in Token
      uses variable classEnd defined in Scope
      uses function astOperand1(Token *) defined in Token
      uses function astOperand2(Token *) defined in Token
      uses function str(T &&) defined in Token
      uses function moduloAlwaysTrueFalseError(const Token *,const std::string &) defined in CheckCondition
   function clarifyCondition() in line 96
      protection public
      73 lines of code
      0 parameters
      23 conditional paths
      uses variable _settings defined in Check
      uses function isEnabled(T &&) defined in Settings
      uses variable _tokenizer defined in Check
      uses function isC() defined in Tokenizer
      uses function getSymbolDatabase() defined in Tokenizer
      uses variable functionScopes defined in SymbolDatabase
      uses variable classStart defined in Scope
      uses function next() defined in Token
      uses variable classEnd defined in Scope
      uses function tokAt(int) defined in Token
      uses enumvalue eComparisonOp defined in Token
      uses function clarifyConditionError(const Token *,bool,bool) defined in CheckCondition
      uses function isName() defined in Token
      uses function isNumber() defined in Token
      uses function link(Token *) defined in Token
      uses function previous() defined in Token
   function clarifyConditionError(const Token *,bool,bool) in line 125
      22 lines of code
      3 parameters
      3 conditional paths
      uses enumvalue style defined in Severity
   function classInfo() in line 152
      14 lines of code
      0 parameters
      1 conditional paths
   function comparison() in line 81
      protection public
      35 lines of code
      0 parameters
      12 conditional paths
      uses variable _settings defined in Check
      uses function isEnabled(T &&) defined in Settings
      uses variable _tokenizer defined in Check
      uses function tokens() defined in Tokenizer
      uses function next() defined in Token
      uses function astOperand1(Token *) defined in Token
      uses function astOperand2(Token *) defined in Token
      uses function isNumber() defined in Token
      uses function str(T &&) defined in Token
      uses function comparisonError(const Token *,const std::string &,MathLib::bigint,const std::string &,MathLib::bigint,bool) defined in CheckCondition
   function comparisonError(const Token *,const std::string &,MathLib::bigint,const std::string &,MathLib::bigint,bool) in line 110
      13 lines of code
      6 parameters
      1 conditional paths
      uses variable result defined in triage-report.py
      uses enumvalue style defined in Severity
   function getErrorMessages(ErrorLogger *,const Settings *) in line 131
      16 lines of code
      2 parameters
      1 conditional paths
      uses function assignIfError(const Token *,const Token *,const std::string &,bool) defined in CheckCondition
      uses function badBitmaskCheckError(const Token *) defined in CheckCondition
      uses function comparisonError(const Token *,const std::string &,MathLib::bigint,const std::string &,MathLib::bigint,bool) defined in CheckCondition
      uses function multiConditionError(const Token *,unsigned int) defined in CheckCondition
      uses function mismatchingBitAndError(const Token *,const MathLib::bigint,const Token *,const MathLib::bigint) defined in CheckCondition
      uses function oppositeInnerConditionError(const Token *,const Token *) defined in CheckCondition
      uses function incorrectLogicOperatorError(const Token *,const std::string &,bool) defined in CheckCondition
      uses function redundantConditionError(const Token *,const std::string &) defined in CheckCondition
      uses function moduloAlwaysTrueFalseError(const Token *,const std::string &) defined in CheckCondition
      uses function clarifyConditionError(const Token *,bool,bool) defined in CheckCondition
      uses function alwaysTrueFalseError(const Token *,bool) defined in CheckCondition
      uses function invalidTestForOverflow(const Token *,bool) defined in CheckCondition
   function incorrectLogicOperatorError(const Token *,const std::string &,bool) in line 120
      13 lines of code
      3 parameters
      2 conditional paths
      uses enumvalue warning defined in Severity
   function invalidTestForOverflow(const Token *,bool) in line 129
      10 lines of code
      2 parameters
      1 conditional paths
      uses function expressionString() defined in Token
      uses variable result defined in triage-report.py
      uses enumvalue warning defined in Severity
   function isOverlappingCond(const Token *const,const Token *const,const std::set< std::string > &) in line 106
      38 lines of code
      3 parameters
      11 conditional paths
      uses function isSameExpression(bool,bool,const Token *,const Token *,const std::set< std::string > &) defined in astutils.cpp
      uses variable _tokenizer defined in Check
      uses function isCPP() defined in Tokenizer
      uses function str(T &&) defined in Token
      uses function astOperand1(Token *) defined in Token
      uses function astOperand2(Token *) defined in Token
      uses function isNumber() defined in Token
   function mismatchingBitAndError(const Token *,const MathLib::bigint,const Token *,const MathLib::bigint) in line 108
      15 lines of code
      4 parameters
      1 conditional paths
      uses variable msg defined in findcasts.py
      uses enumvalue style defined in Severity
   function moduloAlwaysTrueFalseError(const Token *,const std::string &) in line 123
      5 lines of code
      2 parameters
      1 conditional paths
      uses enumvalue warning defined in Severity
   function multiCondition() in line 84
      protection public
      28 lines of code
      0 parameters
      8 conditional paths
      uses variable _settings defined in Check
      uses function isEnabled(T &&) defined in Settings
      uses variable _tokenizer defined in Check
      uses function getSymbolDatabase() defined in Tokenizer
      uses variable scopeList defined in SymbolDatabase
      uses enumvalue eIf defined in Scope
      uses function next() defined in Token
      uses function astOperand2(Token *) defined in Token
      uses function link(Token *) defined in Token
      uses function linkAt(int) defined in Token
      uses function tokAt(int) defined in Token
      uses function isOverlappingCond(const Token *const,const Token *const,const std::set< std::string > &) defined in CheckCondition
      uses variable library defined in Settings
      uses variable functionpure defined in Library
      uses function multiConditionError(const Token *,unsigned int) defined in CheckCondition
      uses function linenr() defined in Token
   function multiConditionError(const Token *,unsigned int) in line 116
      8 lines of code
      2 parameters
      1 conditional paths
      uses enumvalue style defined in Severity
   function myName() in line 148
      3 lines of code
      0 parameters
      1 conditional paths
   function oppositeInnerCondition() in line 87
      protection public
      73 lines of code
      0 parameters
      22 conditional paths
      uses variable _settings defined in Check
      uses function isEnabled(T &&) defined in Settings
      uses variable _tokenizer defined in Check
      uses function getSymbolDatabase() defined in Tokenizer
      uses variable scopeList defined in SymbolDatabase
      uses enumvalue eIf defined in Scope
      uses function linkAt(int) defined in Token
      uses function previous() defined in Token
      uses function isLocal() defined in Variable
      uses function isStatic() defined in Variable
      uses function isArgument() defined in Variable
      uses function isPointer() defined in Variable
      uses function isReference() defined in Variable
      uses function next() defined in Token
      uses function astOperand2(Token *) defined in Token
      uses function isOppositeCond(bool,bool,const Token *const,const Token *const,const std::set< std::string > &) defined in astutils.cpp
      uses function isCPP() defined in Tokenizer
      uses variable library defined in Settings
      uses variable functionpure defined in Library
      uses function oppositeInnerConditionError(const Token *,const Token *) defined in CheckCondition
   function oppositeInnerConditionError(const Token *,const Token *) in line 118
      7 lines of code
      2 parameters
      1 conditional paths
      uses enumvalue warning defined in Severity
   function redundantConditionError(const Token *,const std::string &) in line 121
      4 lines of code
      2 parameters
      1 conditional paths
      uses enumvalue style defined in Severity
   function runChecks(const Tokenizer *,const Settings *,ErrorLogger *) in line 47
      protection public
      8 lines of code
      3 parameters
      1 conditional paths
      uses function multiCondition() defined in CheckCondition
      uses function clarifyCondition() defined in CheckCondition
      uses function oppositeInnerCondition() defined in CheckCondition
      uses function checkIncorrectLogicOperator() defined in CheckCondition
      uses function checkInvalidTestForOverflow() defined in CheckCondition
   function runSimplifiedChecks(const Tokenizer *,const Settings *,ErrorLogger *) in line 57
      protection public
      8 lines of code
      3 parameters
      1 conditional paths
      uses function assignIf() defined in CheckCondition
      uses function checkBadBitmaskCheck() defined in CheckCondition
      uses function comparison() defined in CheckCondition
      uses function checkModuloAlwaysTrueFalse() defined in CheckCondition
      uses function alwaysTrueFalse() defined in CheckCondition
      uses variable result defined in triage-report.py
   function CheckCondition() in line 39
      protection public
      2 lines of code
      0 parameters
      1 conditional paths
   function CheckCondition(const Tokenizer *,const Settings *,ErrorLogger *) in line 43
      protection public
      3 lines of code
      3 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/lib/checkexceptionsafety.cpp
module checkexceptionsafety.cpp
   function functionThrowsRecursive(const Function *,std::set< const Function * > &) in line 192
      protection public
      33 lines of code
      2 parameters
      10 conditional paths
      uses function next() defined in Token
      uses function isThrow() defined in Function
      uses variable throwArg defined in Function
      uses function isNoExcept() defined in Function
      uses variable noexceptArg defined in Function
      uses function str(T &&) defined in Token
   function functionThrows(const Function *) in line 226
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses function functionThrowsRecursive(const Function *,std::set< const Function * > &) defined in checkexceptionsafety.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/lib/checkexceptionsafety.h
module CheckExceptionSafety
   inherits from Check
   function catchExceptionByValueError(const Token *) in line 105
      6 lines of code
      1 parameters
      1 conditional paths
      uses enumvalue style defined in Severity
   function checkCatchExceptionByValue() in line 75
      protection public
      18 lines of code
      0 parameters
      5 conditional paths
      uses variable _settings defined in Check
      uses function isEnabled(T &&) defined in Settings
      uses variable _tokenizer defined in Check
      uses function getSymbolDatabase() defined in Tokenizer
      uses variable scopeList defined in SymbolDatabase
      uses enumvalue eCatch defined in Scope
      uses function isClass() defined in Variable
      uses function isPointer() defined in Variable
      uses function isReference() defined in Variable
      uses function catchExceptionByValueError(const Token *) defined in CheckExceptionSafety
   function checkRethrowCopy() in line 72
      protection public
      24 lines of code
      0 parameters
      9 conditional paths
      uses variable _settings defined in Check
      uses function isEnabled(T &&) defined in Settings
      uses variable _tokenizer defined in Check
      uses function getSymbolDatabase() defined in Tokenizer
      uses variable scopeList defined in SymbolDatabase
      uses enumvalue eCatch defined in Scope
      uses function next() defined in Token
      uses function rethrowCopyError(const Token *const,const std::string &) defined in CheckExceptionSafety
   function classInfo() in line 145
      9 lines of code
      0 parameters
      1 conditional paths
   function deallocThrow() in line 69
      protection public
      62 lines of code
      0 parameters
      15 conditional paths
      uses variable _settings defined in Check
      uses function isEnabled(T &&) defined in Settings
      uses variable inconclusive defined in Settings
      uses variable _tokenizer defined in Check
      uses function getSymbolDatabase() defined in Tokenizer
      uses variable functionScopes defined in SymbolDatabase
      uses variable classStart defined in Scope
      uses function next() defined in Token
      uses variable classEnd defined in Scope
      uses function isGlobal() defined in Variable
      uses function isStatic() defined in Variable
      uses function scope(const Scope *) defined in Token
      uses function deallocThrowError(const Token *const,const std::string &) defined in CheckExceptionSafety
   function deallocThrowError(const Token *const,const std::string &) in line 93
      4 lines of code
      2 parameters
      1 conditional paths
      uses enumvalue warning defined in Severity
   function destructors() in line 66
      protection public
      38 lines of code
      0 parameters
      9 conditional paths
      uses variable _settings defined in Check
      uses function isEnabled(T &&) defined in Settings
      uses variable _tokenizer defined in Check
      uses function getSymbolDatabase() defined in Tokenizer
      uses variable functionScopes defined in SymbolDatabase
      uses variable function defined in Scope
      uses enumvalue eDestructor defined in Function
      uses variable classStart defined in Scope
      uses function next() defined in Token
      uses variable classEnd defined in Scope
      uses function destructorsError(const Token *const,const std::string &) defined in CheckExceptionSafety
      uses variable className defined in Scope
   function destructorsError(const Token *const,const std::string &) in line 85
      7 lines of code
      2 parameters
      1 conditional paths
      uses enumvalue warning defined in Severity
   function getErrorMessages(ErrorLogger *,const Settings *) in line 129
      9 lines of code
      2 parameters
      1 conditional paths
      uses function destructorsError(const Token *const,const std::string &) defined in CheckExceptionSafety
      uses function deallocThrowError(const Token *const,const std::string &) defined in CheckExceptionSafety
      uses function rethrowCopyError(const Token *const,const std::string &) defined in CheckExceptionSafety
      uses function catchExceptionByValueError(const Token *) defined in CheckExceptionSafety
      uses function noexceptThrowError(const Token *const) defined in CheckExceptionSafety
      uses function unhandledExceptionSpecificationError(const Token *const,const Token *const,const std::string &) defined in CheckExceptionSafety
   function myName() in line 140
      3 lines of code
      0 parameters
      1 conditional paths
   function noexceptThrowError(const Token *const) in line 112
      3 lines of code
      1 parameters
      1 conditional paths
      uses enumvalue error defined in Severity
   function nothrowThrows() in line 78
      protection public
      34 lines of code
      0 parameters
      9 conditional paths
      uses variable _tokenizer defined in Check
      uses function getSymbolDatabase() defined in Tokenizer
      uses variable functionScopes defined in SymbolDatabase
      uses variable function defined in Scope
      uses function noexceptThrowError(const Token *const) defined in CheckExceptionSafety
   function rethrowCopyError(const Token *const,const std::string &) in line 98
      6 lines of code
      2 parameters
      1 conditional paths
      uses enumvalue style defined in Severity
   function runSimplifiedChecks(const Tokenizer *,const Settings *,ErrorLogger *) in line 52
      protection public
      12 lines of code
      3 parameters
      2 conditional paths
      uses function isC() defined in Tokenizer
      uses function destructors() defined in CheckExceptionSafety
      uses function deallocThrow() defined in CheckExceptionSafety
      uses function checkRethrowCopy() defined in CheckExceptionSafety
      uses function checkCatchExceptionByValue() defined in CheckExceptionSafety
      uses function nothrowThrows() defined in CheckExceptionSafety
      uses function unhandledExceptionSpecification() defined in CheckExceptionSafety
   function unhandledExceptionSpecification() in line 81
      protection public
      30 lines of code
      0 parameters
      8 conditional paths
      uses variable _settings defined in Check
      uses function isEnabled(T &&) defined in Settings
      uses variable inconclusive defined in Settings
      uses variable _tokenizer defined in Check
      uses function getSymbolDatabase() defined in Tokenizer
      uses variable functionScopes defined in SymbolDatabase
      uses variable function defined in Scope
      uses function isThrow() defined in Function
      uses variable className defined in Scope
      uses variable functionScope defined in Function
      uses variable classStart defined in Scope
      uses function next() defined in Token
      uses variable classEnd defined in Scope
      uses variable throwArg defined in Function
      uses function unhandledExceptionSpecificationError(const Token *const,const Token *const,const std::string &) defined in CheckExceptionSafety
      uses variable tokenDef defined in Function
      uses function name() defined in Function
   function unhandledExceptionSpecificationError(const Token *const,const Token *const,const std::string &) in line 117
      10 lines of code
      3 parameters
      1 conditional paths
      uses function str(T &&) defined in Token
      uses enumvalue style defined in Severity
   function CheckExceptionSafety() in line 43
      protection public
      2 lines of code
      0 parameters
      1 conditional paths
   function CheckExceptionSafety(const Tokenizer *,const Settings *,ErrorLogger *) in line 47
      protection public
      3 lines of code
      3 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/lib/checkfunctions.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/lib/checkfunctions.h
module CheckFunctions
   inherits from Check
   function checkIgnoredReturnValue() in line 82
      protection public
      29 lines of code
      0 parameters
      9 conditional paths
      uses variable _settings defined in Check
      uses function isEnabled(T &&) defined in Settings
      uses variable _tokenizer defined in Check
      uses function getSymbolDatabase() defined in Tokenizer
      uses variable functionScopes defined in SymbolDatabase
      uses variable classStart defined in Scope
      uses function next() defined in Token
      uses variable classEnd defined in Scope
      uses function astParent() defined in Token
      uses function str(T &&) defined in Token
      uses variable library defined in Settings
      uses function isUseRetVal(const Token *) defined in Library
      uses function ignoredReturnValueError(const Token *,const std::string &) defined in CheckFunctions
   function checkLibraryMatchFunctions() in line 88
      protection public
      22 lines of code
      0 parameters
      4 conditional paths
      uses variable _settings defined in Check
      uses variable checkLibrary defined in Settings
      uses function isEnabled(T &&) defined in Settings
      uses variable _tokenizer defined in Check
      uses function tokens() defined in Tokenizer
      uses function next() defined in Token
      uses variable library defined in Settings
      uses function isNotLibraryFunction(const Token *) defined in Library
      uses enumvalue information defined in Severity
   function checkMathFunctions() in line 85
      protection public
      72 lines of code
      0 parameters
      25 conditional paths
      uses variable _settings defined in Check
      uses function isEnabled(T &&) defined in Settings
      uses variable standards defined in Settings
      uses variable c defined in Standards
      uses enumvalue C89 defined in Standards
      uses variable cpp defined in Standards
      uses enumvalue CPP03 defined in Standards
      uses variable _tokenizer defined in Check
      uses function getSymbolDatabase() defined in Tokenizer
      uses variable functionScopes defined in SymbolDatabase
      uses variable classStart defined in Scope
      uses function next() defined in Token
      uses variable classEnd defined in Scope
      uses function mathfunctionCallWarning(const Token *,const unsigned int) defined in CheckFunctions
      uses function tokAt(int) defined in Token
      uses function nextArgument() defined in Token
      uses function isNumber() defined in Token
      uses function str(T &&) defined in Token
      uses function astOperand2(Token *) defined in Token
      uses function astOperand1(Token *) defined in Token
   function checkProhibitedFunctions() in line 69
      protection public
      38 lines of code
      0 parameters
      9 conditional paths
      uses variable _settings defined in Check
      uses function isEnabled(T &&) defined in Settings
      uses variable standards defined in Settings
      uses variable c defined in Standards
      uses enumvalue C99 defined in Standards
      uses variable _tokenizer defined in Check
      uses function isC() defined in Tokenizer
      uses variable cpp defined in Standards
      uses enumvalue CPP11 defined in Standards
      uses function getSymbolDatabase() defined in Tokenizer
      uses variable functionScopes defined in SymbolDatabase
      uses variable classStart defined in Scope
      uses variable classEnd defined in Scope
      uses function next() defined in Token
      uses enumvalue eGlobal defined in Scope
      uses enumvalue warning defined in Severity
      uses variable library defined in Settings
      uses function getWarnInfo(const Token *) defined in Library
      uses variable severity defined in Library::WarnInfo
      uses variable standards defined in Library::WarnInfo
      uses variable message defined in Library::WarnInfo
   function classInfo() in line 115
      6 lines of code
      0 parameters
      1 conditional paths
   function getErrorMessages(ErrorLogger *,const Settings *) in line 97
      13 lines of code
      2 parameters
      2 conditional paths
      uses variable library defined in Settings
      uses variable functionwarn defined in Library
      uses enumvalue style defined in Severity
      uses function invalidFunctionArgError(const Token *,const std::string &,int,const std::string &) defined in CheckFunctions
      uses function invalidFunctionArgBoolError(const Token *,const std::string &,int) defined in CheckFunctions
      uses function ignoredReturnValueError(const Token *,const std::string &) defined in CheckFunctions
      uses function mathfunctionCallWarning(const Token *,const unsigned int) defined in CheckFunctions
   function ignoredReturnValueError(const Token *,const std::string &) in line 93
      5 lines of code
      2 parameters
      1 conditional paths
      uses enumvalue warning defined in Severity
   function invalidFunctionArgBoolError(const Token *,const std::string &,int) in line 92
      6 lines of code
      3 parameters
      1 conditional paths
      uses variable functionName defined in extracttests.py
      uses enumvalue error defined in Severity
   function invalidFunctionArgError(const Token *,const std::string &,int,const std::string &) in line 91
      12 lines of code
      4 parameters
      4 conditional paths
      uses variable functionName defined in extracttests.py
      uses function isNumber() defined in Token
      uses function str(T &&) defined in Token
      uses function isComparisonOp() defined in Token
      uses enumvalue error defined in Severity
   function invalidFunctionUsage() in line 79
      protection public
      42 lines of code
      0 parameters
      13 conditional paths
      uses variable _tokenizer defined in Check
      uses function getSymbolDatabase() defined in Tokenizer
      uses variable functionScopes defined in SymbolDatabase
      uses variable classStart defined in Scope
      uses function next() defined in Token
      uses variable classEnd defined in Scope
      uses function tokAt(int) defined in Token
      uses function str(T &&) defined in Token
      uses variable _settings defined in Check
      uses variable library defined in Settings
      uses function isargvalid(const Token *,int,const MathLib::bigint) defined in Library
      uses function invalidFunctionArgError(const Token *,const std::string &,int,const std::string &) defined in CheckFunctions
      uses function validarg(const Token *,int) defined in Library
      uses function astParent() defined in Token
      uses function astOperand2(Token *) defined in Token
      uses function variable(const Variable *) defined in Token
      uses function isboolargbad(const Token *,int) defined in Library
      uses function invalidFunctionArgBoolError(const Token *,const std::string &,int) defined in CheckFunctions
      uses function nextArgument() defined in Token
   function mathfunctionCallWarning(const Token *,const unsigned int) in line 94
      10 lines of code
      2 parameters
      4 conditional paths
      uses enumvalue warning defined in Severity
      uses function strAt(int) defined in Token
      uses function str(T &&) defined in Token
   function mathfunctionCallWarning(const Token *,const std::string &,const std::string &) in line 95
      4 lines of code
      3 parameters
      1 conditional paths
      uses enumvalue style defined in Severity
   function myName() in line 111
      3 lines of code
      0 parameters
      1 conditional paths
   function runChecks(const Tokenizer *,const Settings *,ErrorLogger *) in line 49
      protection public
      9 lines of code
      3 parameters
      1 conditional paths
      uses function checkIgnoredReturnValue() defined in CheckFunctions
      uses function checkLibraryMatchFunctions() defined in CheckFunctions
   function runSimplifiedChecks(const Tokenizer *,const Settings *,ErrorLogger *) in line 60
      protection public
      7 lines of code
      3 parameters
      1 conditional paths
      uses function checkProhibitedFunctions() defined in CheckFunctions
      uses function invalidFunctionUsage() defined in CheckFunctions
      uses function checkMathFunctions() defined in CheckFunctions
      uses variable functionName defined in extracttests.py
   function CheckFunctions() in line 40
      protection public
      2 lines of code
      0 parameters
      1 conditional paths
   function CheckFunctions(const Tokenizer *,const Settings *,ErrorLogger *) in line 44
      protection public
      3 lines of code
      3 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/lib/checkinternal.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/lib/checkinternal.h
module CheckInternal
   inherits from Check
   function checkExtraWhitespace() in line 75
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function checkMissingPercentCharacter() in line 66
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function checkRedundantNextPrevious() in line 72
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function checkTokenMatchPatterns() in line 60
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function checkTokenSimpleMatchPatterns() in line 63
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function checkUnknownPattern() in line 69
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function classInfo() in line 103
      5 lines of code
      0 parameters
      1 conditional paths
   function complexPatternError(const Token *,const std::string &,const std::string &) in line 80
      1 lines of code
      3 parameters
      1 conditional paths
   function extraWhitespaceError(const Token *,const std::string &,const std::string &) in line 85
      1 lines of code
      3 parameters
      1 conditional paths
   function getErrorMessages(ErrorLogger *,const Settings *) in line 87
      11 lines of code
      2 parameters
      1 conditional paths
      uses function multiComparePatternError(const Token *,const std::string &,const std::string &) defined in CheckInternal
      uses function simplePatternError(const Token *,const std::string &,const std::string &) defined in CheckInternal
      uses function complexPatternError(const Token *,const std::string &,const std::string &) defined in CheckInternal
      uses function missingPercentCharacterError(const Token *,const std::string &,const std::string &) defined in CheckInternal
      uses function unknownPatternError(const Token *,const std::string &) defined in CheckInternal
      uses function redundantNextPreviousError(const Token *,const std::string &,const std::string &) defined in CheckInternal
      uses function orInComplexPattern(const Token *,const std::string &,const std::string &) defined in CheckInternal
      uses function extraWhitespaceError(const Token *,const std::string &,const std::string &) defined in CheckInternal
   function missingPercentCharacterError(const Token *,const std::string &,const std::string &) in line 81
      1 lines of code
      3 parameters
      1 conditional paths
   function multiComparePatternError(const Token *,const std::string &,const std::string &) in line 78
      1 lines of code
      3 parameters
      1 conditional paths
   function myName() in line 99
      3 lines of code
      0 parameters
      1 conditional paths
   function orInComplexPattern(const Token *,const std::string &,const std::string &) in line 84
      1 lines of code
      3 parameters
      1 conditional paths
   function redundantNextPreviousError(const Token *,const std::string &,const std::string &) in line 83
      1 lines of code
      3 parameters
      1 conditional paths
   function runSimplifiedChecks(const Tokenizer *,const Settings *,ErrorLogger *) in line 45
      protection public
      13 lines of code
      3 parameters
      2 conditional paths
      uses function isEnabled(T &&) defined in Settings
      uses function checkTokenMatchPatterns() defined in CheckInternal
      uses function checkTokenSimpleMatchPatterns() defined in CheckInternal
      uses function checkMissingPercentCharacter() defined in CheckInternal
      uses function checkUnknownPattern() defined in CheckInternal
      uses function checkRedundantNextPrevious() defined in CheckInternal
      uses function checkExtraWhitespace() defined in CheckInternal
   function simplePatternError(const Token *,const std::string &,const std::string &) in line 79
      1 lines of code
      3 parameters
      1 conditional paths
   function unknownPatternError(const Token *,const std::string &) in line 82
      1 lines of code
      2 parameters
      1 conditional paths
   function CheckInternal() in line 36
      protection public
      2 lines of code
      0 parameters
      1 conditional paths
   function CheckInternal(const Tokenizer *,const Settings *,ErrorLogger *) in line 40
      protection public
      3 lines of code
      3 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/lib/checkio.cpp
module checkio.cpp
   enumeration OpenMode in line 73
      protection public
   enumvalue CLOSED in line 73
      protection public
   enumvalue READ_MODE in line 73
      protection public
   enumvalue WRITE_MODE in line 73
      protection public
   enumvalue RW_MODE in line 73
      protection public
   enumvalue UNKNOWN_OM in line 73
      protection public
   function getMode(const std::string &) in line 74
      protection public
      10 lines of code
      1 parameters
      4 conditional paths
      uses enumvalue RW_MODE defined in checkio.cpp
      uses enumvalue WRITE_MODE defined in checkio.cpp
      uses enumvalue READ_MODE defined in checkio.cpp
      uses enumvalue UNKNOWN_OM defined in checkio.cpp
   function findFormat(unsigned int,const Token *,const Token **,const Token **) in line 450
      protection public
      26 lines of code
      4 parameters
      5 conditional paths
      uses function nextArgument() defined in Token
      uses enumvalue eString defined in Token
      uses variable values defined in Token
   function typesMatch(const std::string &,const std::string &,const std::string &) in line 478
      protection public
      4 lines of code
      3 parameters
      1 conditional paths
   function printfFormatType(std::ostream &,const std::string &,bool) in line 1843
      protection public
      33 lines of code
      3 parameters
      12 conditional paths
module Filepointer
   function Filepointer(OpenMode) in line 92
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   variable append_mode in line 91
      protection public
   variable lastOperation in line 88
      protection public
   variable mode in line 86
      protection public
   variable mode_indent in line 87
      protection public
   variable op_indent in line 89
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/lib/checkio.h
module CheckIO
   inherits from Check
   function argumentType(std::ostream &,const ArgumentInfo *) in line 130
      48 lines of code
      2 parameters
      15 conditional paths
      uses variable typeToken defined in CheckIO::ArgumentInfo
      uses function tokType() defined in Token
      uses enumvalue eString defined in Token
      uses function isLong() defined in Token
      uses function originalName() defined in Token
      uses function strAt(int) defined in Token
      uses function str(T &&) defined in Token
      uses function next() defined in Token
      uses function tokAt(int) defined in Token
      uses function stringify(std::ostream &,bool,bool,bool) defined in Token
      uses variable element defined in CheckIO::ArgumentInfo
      uses variable variableInfo defined in CheckIO::ArgumentInfo
      uses function isArray() defined in Variable
      uses variable address defined in CheckIO::ArgumentInfo
      uses function isUnsigned() defined in Token
   function checkCoutCerrMisusage() in line 59
      protection public
      21 lines of code
      0 parameters
      7 conditional paths
      uses variable _tokenizer defined in Check
      uses function isC() defined in Tokenizer
      uses function getSymbolDatabase() defined in Tokenizer
      uses variable functionScopes defined in SymbolDatabase
      uses variable classStart defined in Scope
      uses variable classEnd defined in Scope
      uses function next() defined in Token
      uses function astParent() defined in Token
      uses function str(T &&) defined in Token
      uses function astOperand2(Token *) defined in Token
      uses function coutCerrMisusageError(const Token *,const std::string &) defined in CheckIO
   function checkFileUsage() in line 62
      protection public
      226 lines of code
      0 parameters
      65 conditional paths
      uses variable _settings defined in Check
      uses function isWindowsPlatform() defined in Settings
      uses function isEnabled(T &&) defined in Settings
      uses variable _tokenizer defined in Check
      uses function getSymbolDatabase() defined in Tokenizer
      uses function getVariableListSize() defined in SymbolDatabase
      uses function getVariableFromVarId(std::size_t) defined in SymbolDatabase
      uses function declarationId() defined in Variable
      uses function isArray() defined in Variable
      uses function typeStartToken() defined in Variable
      uses function isLocal() defined in Variable
      uses function nameToken() defined in Variable
      uses function strAt(int) defined in Token
      uses enumvalue UNKNOWN_OM defined in checkio.cpp
      uses enumvalue CLOSED defined in checkio.cpp
      uses variable functionScopes defined in SymbolDatabase
      uses variable classStart defined in Scope
      uses variable classEnd defined in Scope
      uses function next() defined in Token
      uses enumvalue UNKNOWN_OP defined in Filepointer
      uses enumvalue NONE defined in Filepointer
      uses function tokAt(int) defined in Token
      uses function nextArgument() defined in Token
      uses function tokType() defined in Token
      uses enumvalue eString defined in Token
      uses function strValue() defined in Token
      uses enumvalue OPEN defined in Filepointer
      uses function str(T &&) defined in Token
      uses function fflushOnInputStreamError(const Token *,const std::string &) defined in CheckIO
      uses function f(char) defined in test.cxx
      uses function varId() defined in Token
      uses enumvalue READ_MODE defined in checkio.cpp
      uses enumvalue POSITIONING defined in Filepointer
      uses function linkAt(int) defined in Token
      uses function previous() defined in Token
      uses enumvalue READ defined in Filepointer
      uses enumvalue WRITE defined in Filepointer
      uses enumvalue CLOSE defined in Filepointer
      uses enumvalue UNIMPORTANT defined in Filepointer
      uses variable library defined in Settings
      uses variable functionpure defined in Library
      uses variable functionOf defined in Scope
      uses function isClassOrStruct() defined in Scope
      uses variable function defined in Scope
      uses function isStatic() defined in Function
      uses function isGlobal() defined in Variable
      uses function isStatic() defined in Variable
      uses enumvalue RW_MODE defined in checkio.cpp
      uses enumvalue APPEND_EX defined in Filepointer
      uses enumvalue APPEND defined in Filepointer
      uses enumvalue UNKNOWN_AM defined in Filepointer
      uses function useClosedFileError(const Token *) defined in CheckIO
      uses function seekOnAppendedFileError(const Token *) defined in CheckIO
      uses enumvalue WRITE_MODE defined in checkio.cpp
      uses function readWriteOnlyFileError(const Token *) defined in CheckIO
      uses function ioWithoutPositioningError(const Token *) defined in CheckIO
      uses function writeReadOnlyFileError(const Token *) defined in CheckIO
   function checkFormatString(const Token *const,const Token *const,const Token *,const bool,const bool) in line 97
      785 lines of code
      5 parameters
      302 conditional paths
      uses variable _settings defined in Check
      uses function isEnabled(T &&) defined in Settings
      uses function str(T &&) defined in Token
      uses function nextArgument() defined in Token
      uses variable _tokenizer defined in Check
      uses function isCPP() defined in Tokenizer
      uses function invalidScanfFormatWidthError(const Token *,unsigned int,int,const Variable *) defined in CheckIO
      uses function tokType() defined in Token
      uses enumvalue eString defined in Token
      uses function invalidScanfArgTypeError_s(const Token *,unsigned int,const std::string &,const ArgumentInfo *) defined in CheckIO
      uses function invalidScanfArgTypeError_int(const Token *,unsigned int,const std::string &,const ArgumentInfo *,bool) defined in CheckIO
      uses function invalidScanfArgTypeError_float(const Token *,unsigned int,const std::string &,const ArgumentInfo *) defined in CheckIO
      uses function invalidLengthModifierError(const Token *,unsigned int,const std::string &) defined in CheckIO
      uses function invalidPrintfArgTypeError_s(const Token *,unsigned int,const ArgumentInfo *) defined in CheckIO
      uses function invalidPrintfArgTypeError_n(const Token *,unsigned int,const ArgumentInfo *) defined in CheckIO
      uses function invalidPrintfArgTypeError_int(const Token *,unsigned int,const std::string &,const ArgumentInfo *) defined in CheckIO
      uses function invalidPrintfArgTypeError_sint(const Token *,unsigned int,const std::string &,const ArgumentInfo *) defined in CheckIO
      uses function invalidPrintfArgTypeError_uint(const Token *,unsigned int,const std::string &,const ArgumentInfo *) defined in CheckIO
      uses function invalidPrintfArgTypeError_p(const Token *,unsigned int,const ArgumentInfo *) defined in CheckIO
      uses function invalidPrintfArgTypeError_float(const Token *,unsigned int,const std::string &,const ArgumentInfo *) defined in CheckIO
      uses function wrongPrintfScanfPosixParameterPositionError(const Token *,const std::string &,unsigned int,unsigned int) defined in CheckIO
      uses function wrongPrintfScanfArgumentsError(const Token *,const std::string &,unsigned int,unsigned int) defined in CheckIO
      uses function originalName() defined in Token
   function checkWrongPrintfScanfArguments() in line 68
      protection public
      82 lines of code
      0 parameters
      26 conditional paths
      uses variable _tokenizer defined in Check
      uses function getSymbolDatabase() defined in Tokenizer
      uses variable _settings defined in Check
      uses function isWindowsPlatform() defined in Settings
      uses variable functionScopes defined in SymbolDatabase
      uses variable classStart defined in Scope
      uses function next() defined in Token
      uses variable classEnd defined in Scope
      uses variable library defined in Settings
      uses function formatstr_function(const std::string &) defined in Library
      uses variable argumentChecks defined in Library
      uses function formatstr_scan(const std::string &) defined in Library
      uses function formatstr_secure(const std::string &) defined in Library
      uses function checkFormatString(const Token *const,const Token *const,const Token *,const bool,const bool) defined in CheckIO
   function classInfo() in line 163
      12 lines of code
      0 parameters
      1 conditional paths
   function coutCerrMisusageError(const Token *,const std::string &) in line 104
      4 lines of code
      2 parameters
      1 conditional paths
      uses enumvalue error defined in Severity
   function fflushOnInputStreamError(const Token *,const std::string &) in line 105
      5 lines of code
      2 parameters
      1 conditional paths
      uses enumvalue portability defined in Severity
   function getErrorMessages(ErrorLogger *,const Settings *) in line 132
      26 lines of code
      2 parameters
      1 conditional paths
      uses function coutCerrMisusageError(const Token *,const std::string &) defined in CheckIO
      uses function fflushOnInputStreamError(const Token *,const std::string &) defined in CheckIO
      uses function ioWithoutPositioningError(const Token *) defined in CheckIO
      uses function readWriteOnlyFileError(const Token *) defined in CheckIO
      uses function writeReadOnlyFileError(const Token *) defined in CheckIO
      uses function useClosedFileError(const Token *) defined in CheckIO
      uses function seekOnAppendedFileError(const Token *) defined in CheckIO
      uses function invalidScanfError(const Token *) defined in CheckIO
      uses function wrongPrintfScanfArgumentsError(const Token *,const std::string &,unsigned int,unsigned int) defined in CheckIO
      uses function invalidScanfArgTypeError_s(const Token *,unsigned int,const std::string &,const ArgumentInfo *) defined in CheckIO
      uses function invalidScanfArgTypeError_int(const Token *,unsigned int,const std::string &,const ArgumentInfo *,bool) defined in CheckIO
      uses function invalidScanfArgTypeError_float(const Token *,unsigned int,const std::string &,const ArgumentInfo *) defined in CheckIO
      uses function invalidPrintfArgTypeError_s(const Token *,unsigned int,const ArgumentInfo *) defined in CheckIO
      uses function invalidPrintfArgTypeError_n(const Token *,unsigned int,const ArgumentInfo *) defined in CheckIO
      uses function invalidPrintfArgTypeError_p(const Token *,unsigned int,const ArgumentInfo *) defined in CheckIO
      uses function invalidPrintfArgTypeError_int(const Token *,unsigned int,const std::string &,const ArgumentInfo *) defined in CheckIO
      uses function invalidPrintfArgTypeError_uint(const Token *,unsigned int,const std::string &,const ArgumentInfo *) defined in CheckIO
      uses function invalidPrintfArgTypeError_sint(const Token *,unsigned int,const std::string &,const ArgumentInfo *) defined in CheckIO
      uses function invalidPrintfArgTypeError_float(const Token *,unsigned int,const std::string &,const ArgumentInfo *) defined in CheckIO
      uses function invalidLengthModifierError(const Token *,unsigned int,const std::string &) defined in CheckIO
      uses function invalidScanfFormatWidthError(const Token *,unsigned int,int,const Variable *) defined in CheckIO
      uses function wrongPrintfScanfPosixParameterPositionError(const Token *,const std::string &,unsigned int,unsigned int) defined in CheckIO
   function invalidLengthModifierError(const Token *,unsigned int,const std::string &) in line 128
      8 lines of code
      3 parameters
      2 conditional paths
      uses variable _settings defined in Check
      uses function isEnabled(T &&) defined in Settings
      uses enumvalue warning defined in Severity
   function invalidPrintfArgTypeError_float(const Token *,unsigned int,const std::string &,const ArgumentInfo *) in line 127
      13 lines of code
      4 parameters
      3 conditional paths
      uses variable _settings defined in Check
      uses function isEnabled(T &&) defined in Settings
      uses function argumentType(std::ostream &,const ArgumentInfo *) defined in CheckIO
      uses enumvalue warning defined in Severity
   function invalidPrintfArgTypeError_int(const Token *,unsigned int,const std::string &,const ArgumentInfo *) in line 124
      12 lines of code
      4 parameters
      2 conditional paths
      uses variable _settings defined in Check
      uses function isEnabled(T &&) defined in Settings
      uses function argumentType(std::ostream &,const ArgumentInfo *) defined in CheckIO
      uses enumvalue warning defined in Severity
   function invalidPrintfArgTypeError_n(const Token *,unsigned int,const ArgumentInfo *) in line 122
      10 lines of code
      3 parameters
      2 conditional paths
      uses variable _settings defined in Check
      uses function isEnabled(T &&) defined in Settings
      uses function argumentType(std::ostream &,const ArgumentInfo *) defined in CheckIO
      uses enumvalue warning defined in Severity
   function invalidPrintfArgTypeError_p(const Token *,unsigned int,const ArgumentInfo *) in line 123
      10 lines of code
      3 parameters
      2 conditional paths
      uses variable _settings defined in Check
      uses function isEnabled(T &&) defined in Settings
      uses function argumentType(std::ostream &,const ArgumentInfo *) defined in CheckIO
      uses enumvalue warning defined in Severity
   function invalidPrintfArgTypeError_s(const Token *,unsigned int,const ArgumentInfo *) in line 121
      10 lines of code
      3 parameters
      2 conditional paths
      uses variable _settings defined in Check
      uses function isEnabled(T &&) defined in Settings
      uses function argumentType(std::ostream &,const ArgumentInfo *) defined in CheckIO
      uses enumvalue warning defined in Severity
   function invalidPrintfArgTypeError_sint(const Token *,unsigned int,const std::string &,const ArgumentInfo *) in line 126
      12 lines of code
      4 parameters
      2 conditional paths
      uses variable _settings defined in Check
      uses function isEnabled(T &&) defined in Settings
      uses function argumentType(std::ostream &,const ArgumentInfo *) defined in CheckIO
      uses enumvalue warning defined in Severity
   function invalidPrintfArgTypeError_uint(const Token *,unsigned int,const std::string &,const ArgumentInfo *) in line 125
      12 lines of code
      4 parameters
      2 conditional paths
      uses variable _settings defined in Check
      uses function isEnabled(T &&) defined in Settings
      uses function argumentType(std::ostream &,const ArgumentInfo *) defined in CheckIO
      uses enumvalue warning defined in Severity
   function invalidScanf() in line 65
      protection public
      46 lines of code
      0 parameters
      13 conditional paths
      uses variable _settings defined in Check
      uses function isEnabled(T &&) defined in Settings
      uses variable _tokenizer defined in Check
      uses function getSymbolDatabase() defined in Tokenizer
      uses variable functionScopes defined in SymbolDatabase
      uses variable classStart defined in Scope
      uses function next() defined in Token
      uses variable classEnd defined in Scope
      uses function tokAt(int) defined in Token
      uses function nextArgument() defined in Token
      uses function tokType() defined in Token
      uses enumvalue eString defined in Token
      uses function str(T &&) defined in Token
      uses function invalidScanfError(const Token *) defined in CheckIO
   function invalidScanfArgTypeError_float(const Token *,unsigned int,const std::string &,const ArgumentInfo *) in line 120
      17 lines of code
      4 parameters
      4 conditional paths
      uses variable _settings defined in Check
      uses function isEnabled(T &&) defined in Settings
      uses function argumentType(std::ostream &,const ArgumentInfo *) defined in CheckIO
      uses enumvalue warning defined in Severity
   function invalidScanfArgTypeError_int(const Token *,unsigned int,const std::string &,const ArgumentInfo *,bool) in line 119
      44 lines of code
      5 parameters
      15 conditional paths
      uses variable _settings defined in Check
      uses function isEnabled(T &&) defined in Settings
      uses function argumentType(std::ostream &,const ArgumentInfo *) defined in CheckIO
      uses enumvalue warning defined in Severity
   function invalidScanfArgTypeError_s(const Token *,unsigned int,const std::string &,const ArgumentInfo *) in line 118
      15 lines of code
      4 parameters
      4 conditional paths
      uses variable _settings defined in Check
      uses function isEnabled(T &&) defined in Settings
      uses function argumentType(std::ostream &,const ArgumentInfo *) defined in CheckIO
      uses enumvalue warning defined in Severity
   function invalidScanfError(const Token *) in line 111
      26 lines of code
      1 parameters
      1 conditional paths
      uses enumvalue warning defined in Severity
   function invalidScanfFormatWidthError(const Token *,unsigned int,int,const Variable *) in line 129
      23 lines of code
      4 parameters
      4 conditional paths
      uses function dimension(std::size_t) defined in Variable
      uses function name() defined in Variable
      uses variable _settings defined in Check
      uses variable inconclusive defined in Settings
      uses function isEnabled(T &&) defined in Settings
      uses enumvalue warning defined in Severity
      uses enumvalue error defined in Severity
   function ioWithoutPositioningError(const Token *) in line 106
      5 lines of code
      1 parameters
      1 conditional paths
      uses enumvalue error defined in Severity
   function myName() in line 159
      3 lines of code
      0 parameters
      1 conditional paths
   function readWriteOnlyFileError(const Token *) in line 107
      6 lines of code
      1 parameters
      1 conditional paths
      uses enumvalue error defined in Severity
   function runChecks(const Tokenizer *,const Settings *,ErrorLogger *) in line 43
      protection public
      5 lines of code
      3 parameters
      1 conditional paths
      uses function checkWrongPrintfScanfArguments() defined in CheckIO
   function runSimplifiedChecks(const Tokenizer *,const Settings *,ErrorLogger *) in line 50
      protection public
      7 lines of code
      3 parameters
      1 conditional paths
      uses function checkCoutCerrMisusage() defined in CheckIO
      uses function checkFileUsage() defined in CheckIO
      uses function invalidScanf() defined in CheckIO
   function seekOnAppendedFileError(const Token *) in line 110
      5 lines of code
      1 parameters
      1 conditional paths
      uses enumvalue warning defined in Severity
   function useClosedFileError(const Token *) in line 109
      5 lines of code
      1 parameters
      1 conditional paths
      uses enumvalue error defined in Severity
   function writeReadOnlyFileError(const Token *) in line 108
      5 lines of code
      1 parameters
      1 conditional paths
      uses enumvalue error defined in Severity
   function wrongPrintfScanfArgumentsError(const Token *,const std::string &,unsigned int,unsigned int) in line 112
      21 lines of code
      4 parameters
      2 conditional paths
      uses enumvalue error defined in Severity
      uses enumvalue warning defined in Severity
      uses variable _settings defined in Check
      uses function isEnabled(T &&) defined in Settings
      uses variable functionName defined in extracttests.py
      uses function str(T &&) defined in Token
   function wrongPrintfScanfPosixParameterPositionError(const Token *,const std::string &,unsigned int,unsigned int) in line 116
      14 lines of code
      4 parameters
      3 conditional paths
      uses variable _settings defined in Check
      uses function isEnabled(T &&) defined in Settings
      uses variable functionName defined in extracttests.py
      uses enumvalue warning defined in Severity
   function CheckIO() in line 34
      protection public
      2 lines of code
      0 parameters
      1 conditional paths
   function CheckIO(const Tokenizer *,const Settings *,ErrorLogger *) in line 38
      protection public
      3 lines of code
      3 parameters
      1 conditional paths
module CheckIO::ArgumentInfo
   function isArrayOrPointer() in line 76
      protection public
      15 lines of code
      0 parameters
      5 conditional paths
      uses variable address defined in CheckIO::ArgumentInfo
      uses variable variableInfo defined in CheckIO::ArgumentInfo
      uses variable _template defined in CheckIO::ArgumentInfo
      uses function isArrayOrPointer() defined in Variable
      uses variable typeToken defined in CheckIO::ArgumentInfo
      uses function next() defined in Token
      uses function strAt(int) defined in Token
   function isComplexType() in line 77
      protection public
      11 lines of code
      0 parameters
      3 conditional paths
      uses variable variableInfo defined in CheckIO::ArgumentInfo
      uses function type() defined in Variable
      uses variable typeToken defined in CheckIO::ArgumentInfo
      uses function str(T &&) defined in Token
      uses function tokAt(int) defined in Token
      uses function isStlStringType() defined in Variable
      uses function strAt(int) defined in Token
      uses function linkAt(int) defined in Token
      uses function isArrayOrPointer() defined in Variable
   function isKnownType() in line 78
      protection public
      9 lines of code
      0 parameters
      3 conditional paths
      uses variable variableInfo defined in CheckIO::ArgumentInfo
      uses variable typeToken defined in CheckIO::ArgumentInfo
      uses function isStandardType() defined in Token
      uses function next() defined in Token
      uses function isComplexType() defined in CheckIO::ArgumentInfo
      uses variable functionInfo defined in CheckIO::ArgumentInfo
      uses variable retType defined in Function
   function isLibraryType(const Settings *) in line 81
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable typeToken defined in CheckIO::ArgumentInfo
      uses function isStandardType() defined in Token
      uses variable library defined in Settings
      uses function podtype(const std::string &) defined in Library
      uses function str(T &&) defined in Token
   function isStdContainer(const Token *) in line 80
      protection public
      29 lines of code
      1 parameters
      9 conditional paths
      uses variable isCPP defined in CheckIO::ArgumentInfo
      uses function variable(const Variable *) defined in Token
      uses function isStlType() defined in Variable
      uses variable typeToken defined in CheckIO::ArgumentInfo
      uses function typeStartToken() defined in Variable
      uses function tokAt(int) defined in Token
      uses function type() defined in Variable
      uses variable derivedFrom defined in Type
   function isStdVectorOrString() in line 79
      protection public
      56 lines of code
      0 parameters
      15 conditional paths
      uses variable isCPP defined in CheckIO::ArgumentInfo
      uses variable variableInfo defined in CheckIO::ArgumentInfo
      uses function isStlType() defined in Variable
      uses variable typeToken defined in CheckIO::ArgumentInfo
      uses function typeStartToken() defined in Variable
      uses function tokAt(int) defined in Token
      uses variable _template defined in CheckIO::ArgumentInfo
      uses variable tempToken defined in CheckIO::ArgumentInfo
      uses function fileIndex() defined in Token
      uses function linenr() defined in Token
      uses function strAt(int) defined in Token
      uses function str(T &&) defined in Token
      uses function type() defined in Variable
      uses variable derivedFrom defined in Type
      uses variable classScope defined in Type
      uses variable functionList defined in Scope
   function operator=(const ArgumentInfo &) in line 94
      1 lines of code
      1 parameters
      1 conditional paths
   function ArgumentInfo(const Token *,const Settings *,bool) in line 73
      protection public
      188 lines of code
      3 parameters
      53 conditional paths
      uses function argumentType() defined in Token
      uses variable type defined in ValueType
      uses variable typeToken defined in CheckIO::ArgumentInfo
      uses variable tempToken defined in CheckIO::ArgumentInfo
      uses variable constness defined in ValueType
      uses function str(T &&) defined in Token
      uses function insertToken(const std::string &,const std::string &,bool) defined in Token
      uses function next() defined in Token
      uses variable pointer defined in ValueType
      uses enumvalue INT defined in ValueType
      uses enumvalue BOOL defined in ValueType
      uses enumvalue CHAR defined in ValueType
      uses enumvalue SHORT defined in ValueType
      uses enumvalue LONG defined in ValueType
      uses enumvalue LONGLONG defined in ValueType
      uses function isLong() defined in Token
      uses enumvalue FLOAT defined in ValueType
      uses enumvalue DOUBLE defined in ValueType
      uses enumvalue LONGDOUBLE defined in ValueType
      uses function isIntegral() defined in ValueType
      uses variable sign defined in ValueType
      uses function isUnsigned() defined in Token
      uses function isSigned() defined in Token
      uses variable originalTypeName defined in ValueType
      uses function originalName() defined in Token
      uses function tokType() defined in Token
      uses enumvalue eString defined in Token
      uses enumvalue eVariable defined in Token
      uses enumvalue eFunction defined in Token
      uses function linkAt(int) defined in Token
      uses function tokAt(int) defined in Token
      uses variable address defined in CheckIO::ArgumentInfo
      uses function previous() defined in Token
      uses function link(Token *) defined in Token
      uses variable functionInfo defined in CheckIO::ArgumentInfo
      uses variable element defined in CheckIO::ArgumentInfo
      uses function function(const Function *) defined in Token
      uses variable isCPP defined in CheckIO::ArgumentInfo
      uses function isStdContainer(const Token *) defined in CheckIO::ArgumentInfo
      uses function fileIndex() defined in Token
      uses function linenr() defined in Token
      uses variable sizeof_size_t defined in Settings
      uses variable sizeof_long defined in Settings
      uses function strAt(int) defined in Token
      uses variable variableInfo defined in CheckIO::ArgumentInfo
      uses function variable(const Variable *) defined in Token
      uses function isStdVectorOrString() defined in CheckIO::ArgumentInfo
      uses function typeStartToken() defined in Variable
   function ~ArgumentInfo() in line 74
      protection public
      9 lines of code
      0 parameters
      3 conditional paths
      uses variable tempToken defined in CheckIO::ArgumentInfo
      uses function next() defined in Token
      uses function deleteNext(unsigned long) defined in Token
   function ArgumentInfo(const ArgumentInfo &) in line 93
      1 lines of code
      1 parameters
      1 conditional paths
   variable _template in line 88
      protection public
   variable address in line 89
      protection public
   variable element in line 87
      protection public
   variable functionInfo in line 85
      protection public
   variable isCPP in line 90
      protection public
   variable tempToken in line 86
      protection public
   variable typeToken in line 84
      protection public
   variable variableInfo in line 83
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/lib/checkleakautovar.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/lib/checkleakautovar.h
module VarInfo
   function clear() in line 45
      protection public
      6 lines of code
      0 parameters
      1 conditional paths
   function erase(unsigned int) in line 52
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
   function possibleUsageAll(const std::string &) in line 66
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses function possibleUsageAll(const std::string &) defined in VarInfo
      uses variable functionName defined in extracttests.py
   function print() in line 68
      protection public
      14 lines of code
      0 parameters
      3 conditional paths
      uses function print() defined in VarInfo
   function swap(VarInfo &) in line 58
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses variable functionName defined in extracttests.py
   variable alloctype in line 40
      protection public
   variable conditionalAlloc in line 42
      protection public
   variable possibleUsage in line 41
      protection public
   variable referenced in line 43
      protection public
module VarInfo::AllocInfo
   function AllocInfo(int,AllocStatus) in line 38
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   variable status in line 36
      protection public
   variable type in line 37
      protection public
module CheckLeakAutoVar
   inherits from Check
   function changeAllocStatus(VarInfo *,const VarInfo::AllocInfo &,const Token *,const Token *) in line 110
      26 lines of code
      4 parameters
      7 conditional paths
      uses function varId() defined in Token
      uses variable status defined in VarInfo::AllocInfo
      uses function str(T &&) defined in Token
      uses function previous() defined in Token
      uses function doubleFreeError(const Token *,const std::string &,int) defined in CheckLeakAutoVar
      uses variable type defined in VarInfo::AllocInfo
      uses function mismatchError(const Token *,const std::string &) defined in CheckLeakAutoVar
   function check() in line 99
      33 lines of code
      0 parameters
      4 conditional paths
      uses variable _tokenizer defined in Check
      uses function getSymbolDatabase() defined in Tokenizer
      uses variable functionScopes defined in SymbolDatabase
      uses function checkScope(const Token *const,VarInfo *,std::set< unsigned int >) defined in CheckLeakAutoVar
      uses variable classStart defined in Scope
      uses function getVariableFromVarId(std::size_t) defined in SymbolDatabase
      uses function isArgument() defined in Variable
      uses function isReference() defined in Variable
      uses function isLocal() defined in Variable
      uses function ret(const Token *,const VarInfo &) defined in CheckLeakAutoVar
      uses variable classEnd defined in Scope
   function checkScope(const Token *const,VarInfo *,std::set< unsigned int >) in line 102
      314 lines of code
      3 parameters
      78 conditional paths
      uses function link(Token *) defined in Token
      uses function next() defined in Token
      uses function deallocUseError(const Token *,const std::string &) defined in CheckLeakAutoVar
      uses function functionCall(const Token *,VarInfo *,const VarInfo::AllocInfo &) defined in CheckLeakAutoVar
      uses function leakIfAllocated(const Token *,const VarInfo &) defined in CheckLeakAutoVar
      uses function tokAt(int) defined in Token
      uses function isArgument() defined in Variable
      uses function isLocal() defined in Variable
      uses function isStatic() defined in Variable
      uses function isReference() defined in Variable
      uses variable _tokenizer defined in Check
      uses function isCPP() defined in Tokenizer
      uses function typeStartToken() defined in Variable
      uses function isStandardType() defined in Token
      uses variable _settings defined in Check
      uses variable library defined in Settings
      uses function alloc(const char) defined in Library
      uses function dealloc(const Token *) defined in Library
      uses variable status defined in VarInfo::AllocInfo
      uses function linkAt(int) defined in Token
      uses function str(T &&) defined in Token
      uses function astOperand1(Token *) defined in Token
      uses function astOperand2(Token *) defined in Token
      uses function astIsVariableComparison(const Token *,const std::string &,const std::string &,const Token **) defined in astutils.cpp
      uses function varId() defined in Token
      uses function ret(const Token *,const VarInfo &) defined in CheckLeakAutoVar
      uses function isExecutable() defined in Scope
      uses variable type defined in Scope
      uses enumvalue eTry defined in Scope
      uses variable nestedIn defined in Scope
      uses variable functionName defined in extracttests.py
      uses function IsScopeNoReturn(const Token *,bool *) defined in Tokenizer
      uses variable leakignore defined in Library
      uses variable use defined in Library
      uses function changeAllocStatus(VarInfo *,const VarInfo::AllocInfo &,const Token *,const Token *) defined in CheckLeakAutoVar
   function classInfo() in line 138
      3 lines of code
      0 parameters
      1 conditional paths
   function configurationInfo(const Token *,const std::string &) in line 125
      9 lines of code
      2 parameters
      2 conditional paths
      uses variable _settings defined in Check
      uses variable checkLibrary defined in Settings
      uses function isEnabled(T &&) defined in Settings
      uses enumvalue information defined in Severity
      uses variable functionName defined in extracttests.py
   function deallocReturnError(const Token *,const std::string &) in line 121
      4 lines of code
      2 parameters
      1 conditional paths
      uses enumvalue error defined in Severity
   function deallocUseError(const Token *,const std::string &) in line 120
      5 lines of code
      2 parameters
      1 conditional paths
      uses variable _tokenizer defined in Check
      uses variable _errorLogger defined in Check
      uses variable _settings defined in Check
      uses function deallocuseError(const Token *,const std::string &) defined in CheckMemoryLeak
   function doubleFreeError(const Token *,const std::string &,int) in line 122
      7 lines of code
      3 parameters
      2 conditional paths
      uses variable _settings defined in Check
      uses variable library defined in Settings
      uses enumvalue error defined in Severity
   function functionCall(const Token *,VarInfo *,const VarInfo::AllocInfo &) in line 107
      24 lines of code
      3 parameters
      7 conditional paths
      uses variable _settings defined in Check
      uses variable library defined in Settings
      uses variable leakignore defined in Library
      uses function str(T &&) defined in Token
      uses function tokAt(int) defined in Token
      uses function nextArgument() defined in Token
      uses variable _tokenizer defined in Check
      uses function isCPP() defined in Tokenizer
      uses function changeAllocStatus(VarInfo *,const VarInfo::AllocInfo &,const Token *,const Token *) defined in CheckLeakAutoVar
   function getErrorMessages(ErrorLogger *,const Settings *) in line 127
      6 lines of code
      2 parameters
      1 conditional paths
      uses function deallocReturnError(const Token *,const std::string &) defined in CheckLeakAutoVar
      uses function configurationInfo(const Token *,const std::string &) defined in CheckLeakAutoVar
      uses function doubleFreeError(const Token *,const std::string &,int) defined in CheckLeakAutoVar
   function leakError(const Token *,const std::string &,int) in line 118
      8 lines of code
      3 parameters
      2 conditional paths
      uses variable _tokenizer defined in Check
      uses variable _errorLogger defined in Check
      uses variable _settings defined in Check
      uses variable library defined in Settings
      uses function resourceLeakError(const Token *,const std::string &) defined in CheckMemoryLeak
      uses function memleakError(const Token *,const std::string &) defined in CheckMemoryLeak
   function leakIfAllocated(const Token *,const VarInfo &) in line 116
      16 lines of code
      2 parameters
      3 conditional paths
      uses function varId() defined in Token
      uses function leakError(const Token *,const std::string &,int) defined in CheckLeakAutoVar
      uses function str(T &&) defined in Token
      uses function configurationInfo(const Token *,const std::string &) defined in CheckLeakAutoVar
   function mismatchError(const Token *,const std::string &) in line 119
      6 lines of code
      2 parameters
      1 conditional paths
      uses variable _tokenizer defined in Check
      uses variable _errorLogger defined in Check
      uses variable _settings defined in Check
      uses function mismatchAllocDealloc(const std::list< const Token * > &,const std::string &) defined in CheckMemoryLeak
   function myName() in line 134
      3 lines of code
      0 parameters
      1 conditional paths
   function ret(const Token *,const VarInfo &) in line 113
      47 lines of code
      2 parameters
      12 conditional paths
      uses variable _tokenizer defined in Check
      uses function getSymbolDatabase() defined in Tokenizer
      uses function getVariableFromVarId(std::size_t) defined in SymbolDatabase
      uses function next() defined in Token
      uses function deallocReturnError(const Token *,const std::string &) defined in CheckLeakAutoVar
      uses function name() defined in Variable
      uses function leakError(const Token *,const std::string &,int) defined in CheckLeakAutoVar
      uses function configurationInfo(const Token *,const std::string &) defined in CheckLeakAutoVar
   function runSimplifiedChecks(const Tokenizer *,const Settings *,ErrorLogger *) in line 91
      protection public
      4 lines of code
      3 parameters
      1 conditional paths
      uses function check() defined in CheckLeakAutoVar
      uses variable functionName defined in extracttests.py
   function CheckLeakAutoVar() in line 82
      protection public
      2 lines of code
      0 parameters
      1 conditional paths
   function CheckLeakAutoVar(const Tokenizer *,const Settings *,ErrorLogger *) in line 86
      protection public
      3 lines of code
      3 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/lib/checkmemoryleak.cpp
module checkmemoryleak.cpp
   function notvar(const Token *,unsigned int) in line 441
      protection public
      11 lines of code
      2 parameters
      4 conditional paths
      uses function astOperand1(Token *) defined in Token
      uses function astOperand2(Token *) defined in Token
      uses function str(T &&) defined in Token
      uses function astIsVariableComparison(const Token *,const std::string &,const std::string &,const Token **) defined in astutils.cpp
   function ifvar(const Token *,unsigned int,const std::string &,const std::string &) in line 453
      protection public
      13 lines of code
      4 parameters
      4 conditional paths
      uses function next() defined in Token
      uses function astOperand2(Token *) defined in Token
      uses function str(T &&) defined in Token
      uses function astOperand1(Token *) defined in Token
      uses function astIsVariableComparison(const Token *,const std::string &,const std::string &,const Token **) defined in astutils.cpp
      uses function varId() defined in Token
   function alwaysTrue(const Token *) in line 467
      protection public
      17 lines of code
      1 parameters
      5 conditional paths
      uses variable values defined in Token
      uses function str(T &&) defined in Token
      uses function astOperand1(Token *) defined in Token
      uses function astOperand2(Token *) defined in Token
      uses function isComparisonOp() defined in Token
   function addtoken(Token **,const Token *,const std::string &) in line 655
      protection public
      7 lines of code
      3 parameters
      1 conditional paths
      uses function linenr() defined in Token
      uses function fileIndex() defined in Token
   function isNoArgument(const SymbolDatabase *,unsigned int) in line 2084
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses function getVariableFromVarId(std::size_t) defined in SymbolDatabase
      uses function isArgument() defined in Variable
   function isInMemberFunc(const Scope *) in line 2147
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses variable nestedIn defined in Scope
      uses variable functionOf defined in Scope
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/lib/checkmemoryleak.h
module CheckMemoryLeak
   function deallocDeallocError(const Token *,const std::string &) in line 145
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function reportErr(const Token *,Severity::SeverityType,const std::string &,const std::string &,unsigned int) defined in CheckMemoryLeak
      uses enumvalue error defined in Severity
   function deallocuseError(const Token *,const std::string &) in line 146
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function reportErr(const Token *,Severity::SeverityType,const std::string &,const std::string &,unsigned int) defined in CheckMemoryLeak
      uses enumvalue error defined in Severity
   function functionArgAlloc(const Function *,unsigned int,AllocType &) in line 155
      protection public
      52 lines of code
      3 parameters
      15 conditional paths
      uses enumvalue No defined in CheckMemoryLeak
      uses variable functionScope defined in Function
      uses variable retDef defined in Function
      uses variable argumentList defined in Function
      uses function previous() defined in Token
      uses function str(T &&) defined in Token
      uses variable classStart defined in Scope
      uses variable classEnd defined in Scope
      uses function next() defined in Token
      uses function varId() defined in Token
      uses function tokAt(int) defined in Token
      uses function getAllocationType(const Token *,unsigned int,std::list< const Function * > *) defined in CheckMemoryLeak
      uses function getReallocationType(const Token *,unsigned int) defined in CheckMemoryLeak
   function functionReturnType(const Function *,std::list< const Function * > *) in line 152
      protection public
      56 lines of code
      2 parameters
      16 conditional paths
      uses function hasBody() defined in Function
      uses enumvalue No defined in CheckMemoryLeak
      uses variable functionScope defined in Function
      uses variable classStart defined in Scope
      uses variable classEnd defined in Scope
      uses function next() defined in Token
      uses function getAllocationType(const Token *,unsigned int,std::list< const Function * > *) defined in CheckMemoryLeak
      uses function astOperand1(Token *) defined in Token
      uses function astOperand2(Token *) defined in Token
      uses function varId() defined in Token
      uses variable tokenizer defined in CheckMemoryLeak
      uses function getSymbolDatabase() defined in Tokenizer
      uses function getVariableFromVarId(std::size_t) defined in SymbolDatabase
      uses function isLocal() defined in Variable
      uses function isStatic() defined in Variable
      uses function tokAt(int) defined in Token
      uses function isC() defined in Tokenizer
      uses function str(T &&) defined in Token
   function getAllocationType(const Token *,unsigned int,std::list< const Function * > *) in line 111
      protection public
      77 lines of code
      3 parameters
      21 conditional paths
      uses function str(T &&) defined in Token
      uses function link(Token *) defined in Token
      uses function next() defined in Token
      uses enumvalue No defined in CheckMemoryLeak
      uses function isName() defined in Token
      uses function tokAt(int) defined in Token
      uses function varId() defined in Token
      uses enumvalue Malloc defined in CheckMemoryLeak
      uses variable tokenizer defined in CheckMemoryLeak
      uses function isCPP() defined in Tokenizer
      uses function astOperand1(Token *) defined in Token
      uses enumvalue NewArray defined in CheckMemoryLeak
      uses enumvalue New defined in CheckMemoryLeak
      uses variable settings1 defined in CheckMemoryLeak
      uses variable standards defined in Settings
      uses variable posix defined in Standards
      uses function function(const Function *) defined in Token
      uses enumvalue Fd defined in CheckMemoryLeak
      uses enumvalue Pipe defined in CheckMemoryLeak
      uses variable library defined in Settings
      uses function alloc(const char) defined in Library
      uses function dealloc(const Token *) defined in Library
      uses enumvalue File defined in CheckMemoryLeak
      uses enumvalue OtherMem defined in CheckMemoryLeak
      uses enumvalue OtherRes defined in CheckMemoryLeak
      uses function functionReturnType(const Function *,std::list< const Function * > *) defined in CheckMemoryLeak
   function getDeallocationType(const Token *,unsigned int) in line 106
      protection public
      50 lines of code
      2 parameters
      17 conditional paths
      uses variable tokenizer defined in CheckMemoryLeak
      uses function isCPP() defined in Tokenizer
      uses function str(T &&) defined in Token
      uses function astOperand1(Token *) defined in Token
      uses function astOperand2(Token *) defined in Token
      uses function varId() defined in Token
      uses function strAt(int) defined in Token
      uses enumvalue NewArray defined in CheckMemoryLeak
      uses enumvalue New defined in CheckMemoryLeak
      uses function next() defined in Token
      uses enumvalue File defined in CheckMemoryLeak
      uses function tokAt(int) defined in Token
      uses enumvalue Malloc defined in CheckMemoryLeak
      uses variable settings1 defined in CheckMemoryLeak
      uses variable standards defined in Settings
      uses variable posix defined in Standards
      uses enumvalue Fd defined in CheckMemoryLeak
      uses enumvalue Pipe defined in CheckMemoryLeak
      uses variable library defined in Settings
      uses function dealloc(const Token *) defined in Library
      uses enumvalue OtherMem defined in CheckMemoryLeak
      uses enumvalue OtherRes defined in CheckMemoryLeak
      uses enumvalue No defined in CheckMemoryLeak
   function getReallocationType(const Token *,unsigned int) in line 116
      protection public
      19 lines of code
      2 parameters
      5 conditional paths
      uses function str(T &&) defined in Token
      uses function link(Token *) defined in Token
      uses function next() defined in Token
      uses enumvalue No defined in CheckMemoryLeak
      uses enumvalue Malloc defined in CheckMemoryLeak
   function isclass(const Token *,unsigned int) in line 124
      protection public
      18 lines of code
      2 parameters
      3 conditional paths
      uses function isStandardType() defined in Token
      uses variable tokenizer defined in CheckMemoryLeak
      uses function getSymbolDatabase() defined in Tokenizer
      uses function getVariableFromVarId(std::size_t) defined in SymbolDatabase
      uses function typeScope() defined in Variable
      uses variable numConstructors defined in Scope
      uses variable varlist defined in Scope
      uses function type() defined in Variable
      uses variable needInitialization defined in Type
      uses enumvalue True defined in Type
      uses variable derivedFrom defined in Type
   function memleakError(const Token *,const std::string &) in line 131
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function reportErr(const Token *,Severity::SeverityType,const std::string &,const std::string &,unsigned int) defined in CheckMemoryLeak
      uses enumvalue error defined in Severity
   function memleakUponReallocFailureError(const Token *,const std::string &) in line 149
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function reportErr(const Token *,Severity::SeverityType,const std::string &,const std::string &,unsigned int) defined in CheckMemoryLeak
      uses enumvalue error defined in Severity
   function memoryLeak(const Token *,const std::string &,AllocType) in line 98
      protection public
      10 lines of code
      3 parameters
      2 conditional paths
      uses enumvalue File defined in CheckMemoryLeak
      uses enumvalue Pipe defined in CheckMemoryLeak
      uses enumvalue Fd defined in CheckMemoryLeak
      uses enumvalue OtherRes defined in CheckMemoryLeak
      uses function resourceLeakError(const Token *,const std::string &) defined in CheckMemoryLeak
      uses function memleakError(const Token *,const std::string &) defined in CheckMemoryLeak
   function mismatchAllocDealloc(const std::list< const Token * > &,const std::string &) in line 148
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function reportErr(const Token *,Severity::SeverityType,const std::string &,const std::string &,unsigned int) defined in CheckMemoryLeak
      uses enumvalue error defined in Severity
   function mismatchSizeError(const Token *,const std::string &) in line 147
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function reportErr(const Token *,Severity::SeverityType,const std::string &,const std::string &,unsigned int) defined in CheckMemoryLeak
      uses enumvalue error defined in Severity
   function operator=(const CheckMemoryLeak &) in line 68
      1 lines of code
      1 parameters
      1 conditional paths
   function reportErr(const Token *,Severity::SeverityType,const std::string &,const std::string &,unsigned int) in line 78
      9 lines of code
      5 parameters
      2 conditional paths
      uses variable msg defined in findcasts.py
   function reportErr(const std::list< const Token * > &,Severity::SeverityType,const std::string &,const std::string &,unsigned int) in line 88
      10 lines of code
      5 parameters
      2 conditional paths
      uses variable tokenizer defined in CheckMemoryLeak
      uses variable list defined in Tokenizer
      uses variable msg defined in findcasts.py
      uses variable _cwe defined in ErrorLogger::ErrorMessage
      uses variable errorLogger defined in CheckMemoryLeak
      uses function reportErr(const ErrorLogger::ErrorMessage &) defined in ErrorLogger
   function resourceLeakError(const Token *,const std::string &) in line 138
      protection public
      7 lines of code
      2 parameters
      2 conditional paths
      uses function reportErr(const Token *,Severity::SeverityType,const std::string &,const std::string &,unsigned int) defined in CheckMemoryLeak
      uses enumvalue error defined in Severity
   function CheckMemoryLeak() in line 62
      1 lines of code
      0 parameters
      1 conditional paths
   function CheckMemoryLeak(const CheckMemoryLeak &) in line 65
      1 lines of code
      1 parameters
      1 conditional paths
   function CheckMemoryLeak(const Tokenizer *,ErrorLogger *,const Settings *) in line 91
      protection public
      3 lines of code
      3 parameters
      1 conditional paths
   variable errorLogger in line 56
   variable settings1 in line 59
   variable tokenizer in line 52
module CheckMemoryLeakInFunction
   inherits from Check
   inherits from CheckMemoryLeak
   function call_func(const Token *,std::list< const Token * >,const unsigned int,AllocType &,AllocType &,bool &,unsigned int) in line 229
      protection public
      148 lines of code
      7 parameters
      42 conditional paths
      uses function str(T &&) defined in Token
      uses variable tokenizer defined in CheckMemoryLeak
      uses function isCPP() defined in Tokenizer
      uses function tokAt(int) defined in Token
      uses function linkAt(int) defined in Token
      uses function next() defined in Token
      uses function strAt(int) defined in Token
      uses function getReallocationType(const Token *,unsigned int) defined in CheckMemoryLeak
      uses enumvalue No defined in CheckMemoryLeak
      uses function getDeallocationType(const Token *,unsigned int) defined in CheckMemoryLeak
      uses function function(const Function *) defined in Token
      uses function hasBody() defined in Function
      uses variable functionScope defined in Function
      uses variable classStart defined in Scope
      uses function previous() defined in Token
      uses function nextArgument() defined in Token
      uses function nameToken() defined in Variable
      uses function declarationId() defined in Variable
      uses variable a defined in daca2-report.py
      uses function functionArgAlloc(const Function *,unsigned int,AllocType &) defined in CheckMemoryLeak
      uses enumvalue Many defined in CheckMemoryLeak
   function check() in line 203
      protection public
      36 lines of code
      0 parameters
      9 conditional paths
      uses variable classStart defined in Scope
      uses function next() defined in Token
      uses variable functionOf defined in Scope
      uses function isLocal() defined in Variable
      uses function isArgument() defined in Variable
      uses function isStatic() defined in Variable
      uses function scope() defined in Variable
      uses function isReference() defined in Variable
      uses function isPointer() defined in Variable
      uses function typeStartToken() defined in Variable
      uses function str(T &&) defined in Token
      uses function type() defined in Variable
      uses function typeScope() defined in Variable
      uses function name() defined in Variable
      uses function nameToken() defined in Variable
   function checkReallocUsage() in line 208
      protection public
      50 lines of code
      0 parameters
      11 conditional paths
      uses variable classStart defined in Scope
      uses function next() defined in Token
      uses variable classEnd defined in Scope
      uses function varId() defined in Token
      uses function tokAt(int) defined in Token
      uses function linkAt(int) defined in Token
      uses function astOperand2(Token *) defined in Token
      uses function memleakUponReallocFailureError(const Token *,const std::string &) defined in CheckMemoryLeak
      uses function str(T &&) defined in Token
      uses function strAt(int) defined in Token
   function checkScope(const Token *,const std::string &,unsigned int,bool,unsigned int) in line 282
      protection public
      103 lines of code
      5 parameters
      21 conditional paths
      uses enumvalue No defined in CheckMemoryLeak
      uses variable result defined in triage-report.py
      uses function next() defined in Token
      uses function deallocuseError(const Token *,const std::string &) defined in CheckMemoryLeak
      uses function printOut(const char *) defined in Token
      uses function memoryLeak(const Token *,const std::string &,AllocType) defined in CheckMemoryLeak
      uses function deallocDeallocError(const Token *,const std::string &) defined in CheckMemoryLeak
      uses function str(T &&) defined in Token
      uses function reportError((null),(null),(null)) defined in cert.py
      uses enumvalue debug defined in Severity
      uses function stringifyList(bool,bool,bool,bool,bool,const std::vector< std::string > *,const Token *) defined in Token
   function classInfo() in line 312
      3 lines of code
      0 parameters
      1 conditional paths
   function findleak(const Token *) in line 272
      protection public
      47 lines of code
      1 parameters
      12 conditional paths
      uses variable result defined in triage-report.py
      uses function tokAt(int) defined in Token
      uses function next() defined in Token
   function getcode(const Token *,std::list< const Token * >,const unsigned int,CheckMemoryLeak::AllocType &,CheckMemoryLeak::AllocType &,bool,unsigned int) in line 264
      protection public
      654 lines of code
      7 parameters
      154 conditional paths
      uses function str(T &&) defined in Token
      uses function linenr() defined in Token
      uses function fileIndex() defined in Token
      uses function next() defined in Token
      uses function tokAt(int) defined in Token
      uses function previous() defined in Token
      uses function varId() defined in Token
      uses enumvalue File defined in CheckMemoryLeak
      uses function link(Token *) defined in Token
      uses function linkAt(int) defined in Token
      uses enumvalue Malloc defined in CheckMemoryLeak
      uses function getAllocationType(const Token *,unsigned int,std::list< const Function * > *) defined in CheckMemoryLeak
      uses function strAt(int) defined in Token
      uses function mismatchSizeError(const Token *,const std::string &) defined in CheckMemoryLeak
      uses enumvalue No defined in CheckMemoryLeak
      uses function getReallocationType(const Token *,unsigned int) defined in CheckMemoryLeak
      uses enumvalue New defined in CheckMemoryLeak
      uses function isclass(const Token *,unsigned int) defined in CheckMemoryLeak
      uses enumvalue Many defined in CheckMemoryLeak
      uses function mismatchAllocDealloc(const std::list< const Token * > &,const std::string &) defined in CheckMemoryLeak
      uses function getDeallocationType(const Token *,unsigned int) defined in CheckMemoryLeak
      uses enumvalue Fd defined in CheckMemoryLeak
      uses variable tokenizer defined in CheckMemoryLeak
      uses function isCPP() defined in Tokenizer
      uses function nextArgument() defined in Token
      uses function astOperand2(Token *) defined in Token
      uses function deleteNext(unsigned long) defined in Token
      uses function astParent() defined in Token
      uses function astOperand1(Token *) defined in Token
      uses variable functionName defined in extracttests.py
   function getErrorMessages(ErrorLogger *,const Settings *) in line 286
      13 lines of code
      2 parameters
      1 conditional paths
      uses variable e defined in extracttests.py
      uses function memleakError(const Token *,const std::string &) defined in CheckMemoryLeak
      uses function resourceLeakError(const Token *,const std::string &) defined in CheckMemoryLeak
      uses function deallocDeallocError(const Token *,const std::string &) defined in CheckMemoryLeak
      uses function deallocuseError(const Token *,const std::string &) defined in CheckMemoryLeak
      uses function mismatchSizeError(const Token *,const std::string &) defined in CheckMemoryLeak
      uses function mismatchAllocDealloc(const std::list< const Token * > &,const std::string &) defined in CheckMemoryLeak
      uses function memleakUponReallocFailureError(const Token *,const std::string &) defined in CheckMemoryLeak
   function myName() in line 304
      3 lines of code
      0 parameters
      1 conditional paths
   function runSimplifiedChecks(const Tokenizer *,const Settings *,ErrorLogger *) in line 193
      protection public
      5 lines of code
      3 parameters
      1 conditional paths
      uses function checkReallocUsage() defined in CheckMemoryLeakInFunction
      uses function check() defined in CheckMemoryLeakInFunction
   function simplifycode(Token *) in line 270
      protection public
      596 lines of code
      1 parameters
      121 conditional paths
      uses function next() defined in Token
      uses function deleteNext(unsigned long) defined in Token
      uses function deleteThis() defined in Token
      uses function str(T &&) defined in Token
      uses function strAt(int) defined in Token
      uses function tokAt(int) defined in Token
   function test_white_list(const std::string &,const Settings *,bool) in line 200
      protection public
      4 lines of code
      3 parameters
      1 conditional paths
      uses variable library defined in Settings
      uses variable leakignore defined in Library
   function CheckMemoryLeakInFunction() in line 179
      protection public
      2 lines of code
      0 parameters
      1 conditional paths
   function CheckMemoryLeakInFunction(const Tokenizer *,const Settings *,ErrorLogger *) in line 183
      protection public
      8 lines of code
      3 parameters
      2 conditional paths
      uses function getSymbolDatabase() defined in Tokenizer
   variable symbolDatabase in line 316
module CheckMemoryLeakInClass
   inherits from Check
   inherits from CheckMemoryLeak
   function check() in line 342
      protection public
      24 lines of code
      0 parameters
      6 conditional paths
      uses variable classAndStructScopes defined in SymbolDatabase
      uses variable varlist defined in Scope
      uses function isStandardType() defined in Token
   function checkPublicFunctions(const Scope *,const Token *) in line 348
      31 lines of code
      2 parameters
      8 conditional paths
      uses function varId() defined in Token
      uses variable functionList defined in Scope
      uses enumvalue eFunction defined in Function
      uses enumvalue eOperatorEqual defined in Function
      uses enumvalue Public defined in symboldatabase.h
      uses function next() defined in Token
      uses function getAllocationType(const Token *,unsigned int,std::list< const Function * > *) defined in CheckMemoryLeak
      uses function tokAt(int) defined in Token
      uses enumvalue No defined in CheckMemoryLeak
      uses function str(T &&) defined in Token
      uses variable className defined in Scope
      uses function strAt(int) defined in Token
   function classInfo() in line 363
      3 lines of code
      0 parameters
      1 conditional paths
   function getErrorMessages(ErrorLogger *,const Settings *) in line 353
      5 lines of code
      2 parameters
      1 conditional paths
      uses variable e defined in extracttests.py
      uses function publicAllocationError(const Token *,const std::string &) defined in CheckMemoryLeakInClass
      uses function unsafeClassError(const Token *,const std::string &,const std::string &) defined in CheckMemoryLeakInClass
   function myName() in line 359
      3 lines of code
      0 parameters
      1 conditional paths
   function publicAllocationError(const Token *,const std::string &) in line 349
      4 lines of code
      2 parameters
      1 conditional paths
      uses function reportError((null),(null),(null)) defined in cert.py
      uses enumvalue warning defined in Severity
   function runSimplifiedChecks(const Tokenizer *,const Settings *,ErrorLogger *) in line 334
      protection public
      7 lines of code
      3 parameters
      2 conditional paths
      uses function isCPP() defined in Tokenizer
      uses function check() defined in CheckMemoryLeakInClass
   function unsafeClassError(const Token *,const std::string &,const std::string &) in line 351
      9 lines of code
      3 parameters
      2 conditional paths
      uses function reportError((null),(null),(null)) defined in cert.py
      uses enumvalue style defined in Severity
   function variable(const Scope *,const Token *) in line 345
      109 lines of code
      2 parameters
      25 conditional paths
      uses function str(T &&) defined in Token
      uses function varId() defined in Token
      uses variable className defined in Scope
      uses enumvalue No defined in CheckMemoryLeak
      uses variable functionList defined in Scope
      uses enumvalue Many defined in CheckMemoryLeak
      uses function link(Token *) defined in Token
      uses function next() defined in Token
      uses function strAt(int) defined in Token
      uses function getAllocationType(const Token *,unsigned int,std::list< const Function * > *) defined in CheckMemoryLeak
      uses function tokAt(int) defined in Token
      uses function mismatchAllocDealloc(const std::list< const Token * > &,const std::string &) defined in CheckMemoryLeak
      uses function getDeallocationType(const Token *,unsigned int) defined in CheckMemoryLeak
      uses function previous() defined in Token
      uses function test_white_list(const std::string &,const Settings *,bool) defined in CheckMemoryLeakInFunction
      uses variable tokenizer defined in CheckMemoryLeak
      uses function isCPP() defined in Tokenizer
   function CheckMemoryLeakInClass() in line 327
      protection public
      2 lines of code
      0 parameters
      1 conditional paths
   function CheckMemoryLeakInClass(const Tokenizer *,const Settings *,ErrorLogger *) in line 330
      protection public
      3 lines of code
      3 parameters
      1 conditional paths
module CheckMemoryLeakStructMember
   inherits from Check
   inherits from CheckMemoryLeak
   function check() in line 386
      protection public
      12 lines of code
      0 parameters
      4 conditional paths
      uses function getVariableListSize() defined in SymbolDatabase
      uses function getVariableFromVarId(std::size_t) defined in SymbolDatabase
      uses function isLocal() defined in Variable
      uses function isStatic() defined in Variable
      uses function typeEndToken() defined in Variable
      uses function isStandardType() defined in Token
   function checkStructVariable(const Variable *const) in line 393
      169 lines of code
      1 parameters
      43 conditional paths
      uses function isPointer() defined in Variable
      uses function typeScope() defined in Variable
      uses function getDestructor() defined in Scope
      uses function nameToken() defined in Variable
      uses function scope() defined in Variable
      uses variable classEnd defined in Scope
      uses function next() defined in Token
      uses function declarationId() defined in Variable
      uses function getAllocationType(const Token *,unsigned int,std::list< const Function * > *) defined in CheckMemoryLeak
      uses function memoryLeak(const Token *,const std::string &,AllocType) defined in CheckMemoryLeak
      uses function name() defined in Variable
      uses enumvalue Malloc defined in CheckMemoryLeak
      uses function getDeallocationType(const Token *,unsigned int) defined in CheckMemoryLeak
      uses function test_white_list(const std::string &,const Settings *,bool) defined in CheckMemoryLeakInFunction
      uses variable tokenizer defined in CheckMemoryLeak
      uses function isCPP() defined in Tokenizer
      uses function linkAt(int) defined in Token
   function classInfo() in line 402
      3 lines of code
      0 parameters
      1 conditional paths
   function getErrorMessages(ErrorLogger *,const Settings *) in line 395
      2 lines of code
      2 parameters
      1 conditional paths
   function isMalloc(const Variable *) in line 391
      13 lines of code
      1 parameters
      4 conditional paths
      uses function declarationId() defined in Variable
      uses function nameToken() defined in Variable
      uses function scope() defined in Variable
      uses variable classEnd defined in Scope
      uses function next() defined in Token
   function myName() in line 398
      3 lines of code
      0 parameters
      1 conditional paths
   function runSimplifiedChecks(const Tokenizer *,const Settings *,ErrorLogger *) in line 381
      protection public
      4 lines of code
      3 parameters
      1 conditional paths
      uses function check() defined in CheckMemoryLeakStructMember
   function CheckMemoryLeakStructMember() in line 374
      protection public
      2 lines of code
      0 parameters
      1 conditional paths
   function CheckMemoryLeakStructMember(const Tokenizer *,const Settings *,ErrorLogger *) in line 377
      protection public
      3 lines of code
      3 parameters
      1 conditional paths
module CheckMemoryLeakNoVar
   inherits from Check
   inherits from CheckMemoryLeak
   function check() in line 425
      protection public
      45 lines of code
      0 parameters
      10 conditional paths
      uses variable functionScopes defined in SymbolDatabase
      uses variable classStart defined in Scope
      uses variable classEnd defined in Scope
      uses function next() defined in Token
      uses function linkAt(int) defined in Token
      uses function getAllocationType(const Token *,unsigned int,std::list< const Function * > *) defined in CheckMemoryLeak
      uses enumvalue No defined in CheckMemoryLeak
      uses function astParent() defined in Token
      uses function str(T &&) defined in Token
      uses function tokAt(int) defined in Token
      uses variable functionName defined in extracttests.py
      uses function strAt(int) defined in Token
      uses variable tokenizer defined in CheckMemoryLeak
      uses function isCPP() defined in Tokenizer
      uses function test_white_list(const std::string &,const Settings *,bool) defined in CheckMemoryLeakInFunction
   function checkForUnsafeArgAlloc(const Scope *) in line 438
      44 lines of code
      1 parameters
      13 conditional paths
      uses variable classStart defined in Scope
      uses variable classEnd defined in Scope
      uses function next() defined in Token
      uses function link(Token *) defined in Token
      uses function tokAt(int) defined in Token
      uses function nextArgument() defined in Token
      uses function isAttributeNothrow() defined in Function
      uses function isThrow() defined in Function
      uses variable functionName defined in extracttests.py
      uses function str(T &&) defined in Token
      uses function strAt(int) defined in Token
   function checkForUnusedReturnValue(const Scope *) in line 432
      11 lines of code
      1 parameters
      4 conditional paths
      uses variable classStart defined in Scope
      uses variable classEnd defined in Scope
      uses function next() defined in Token
      uses function varId() defined in Token
      uses function function(const Function *) defined in Token
      uses function astParent() defined in Token
      uses function str(T &&) defined in Token
      uses function isComparisonOp() defined in Token
      uses function astOperand1(Token *) defined in Token
      uses function getAllocationType(const Token *,unsigned int,std::list< const Function * > *) defined in CheckMemoryLeak
      uses enumvalue No defined in CheckMemoryLeak
   function classInfo() in line 456
      3 lines of code
      0 parameters
      1 conditional paths
   function functionCallLeak(const Token *,const std::string &,const std::string &) in line 440
      4 lines of code
      3 parameters
      1 conditional paths
      uses function reportError((null),(null),(null)) defined in cert.py
      uses enumvalue error defined in Severity
   function getErrorMessages(ErrorLogger *,const Settings *) in line 444
      7 lines of code
      2 parameters
      1 conditional paths
      uses variable e defined in extracttests.py
      uses function functionCallLeak(const Token *,const std::string &,const std::string &) defined in CheckMemoryLeakNoVar
      uses function returnValueNotUsedError(const Token *,const std::string &) defined in CheckMemoryLeakNoVar
      uses function unsafeArgAllocError(const Token *,const std::string &,const std::string &,const std::string &) defined in CheckMemoryLeakNoVar
   function myName() in line 452
      3 lines of code
      0 parameters
      1 conditional paths
   function returnValueNotUsedError(const Token *,const std::string &) in line 441
      4 lines of code
      2 parameters
      1 conditional paths
      uses function reportError((null),(null),(null)) defined in cert.py
      uses enumvalue error defined in Severity
   function runSimplifiedChecks(const Tokenizer *,const Settings *,ErrorLogger *) in line 420
      protection public
      4 lines of code
      3 parameters
      1 conditional paths
      uses function check() defined in CheckMemoryLeakNoVar
   function unsafeArgAllocError(const Token *,const std::string &,const std::string &,const std::string &) in line 442
      8 lines of code
      4 parameters
      1 conditional paths
      uses function reportError((null),(null),(null)) defined in cert.py
      uses enumvalue warning defined in Severity
   function CheckMemoryLeakNoVar() in line 413
      protection public
      2 lines of code
      0 parameters
      1 conditional paths
   function CheckMemoryLeakNoVar(const Tokenizer *,const Settings *,ErrorLogger *) in line 416
      protection public
      3 lines of code
      3 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/lib/checknullpointer.cpp
module checknullpointer.cpp
   function checkNullpointerFunctionCallPlausibility(const Function *,unsigned int) in line 35
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function argCount() defined in Function
      uses function getArgumentVar(std::size_t) defined in Function
      uses function isPointer() defined in Variable
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/lib/checknullpointer.h
module CheckNullPointer
   inherits from Check
   function classInfo() in line 107
      4 lines of code
      0 parameters
      1 conditional paths
   function getErrorMessages(ErrorLogger *,const Settings *) in line 94
      6 lines of code
      2 parameters
      1 conditional paths
      uses function nullPointerError(const Token *) defined in CheckNullPointer
   function isPointerDeRef(const Token *,bool &) in line 80
      protection public
      85 lines of code
      2 parameters
      26 conditional paths
      uses function astParent() defined in Token
      uses function astOperand1(Token *) defined in Token
      uses function str(T &&) defined in Token
      uses function astOperand2(Token *) defined in Token
      uses function strAt(int) defined in Token
      uses function tokAt(int) defined in Token
      uses function previous() defined in Token
      uses function varId() defined in Token
      uses function variable(const Variable *) defined in Token
      uses function isPointer() defined in Variable
      uses function isArray() defined in Variable
      uses function isStlStringType() defined in Variable
      uses function typeStartToken() defined in Variable
      uses function isStlType() defined in Variable
   function myName() in line 102
      3 lines of code
      0 parameters
      1 conditional paths
   function nullConstantDereference() in line 86
      protection public
      81 lines of code
      0 parameters
      25 conditional paths
      uses variable _tokenizer defined in Check
      uses function getSymbolDatabase() defined in Tokenizer
      uses variable functionScopes defined in SymbolDatabase
      uses variable function defined in Scope
      uses function hasBody() defined in Function
      uses variable classStart defined in Scope
      uses function isConstructor() defined in Function
      uses variable token defined in Function
      uses variable classEnd defined in Scope
      uses function next() defined in Token
      uses function link(Token *) defined in Token
      uses function previous() defined in Token
      uses function isOp() defined in Token
      uses function nullPointerError(const Token *) defined in CheckNullPointer
      uses function str(T &&) defined in Token
      uses function strAt(int) defined in Token
      uses function tokAt(int) defined in Token
      uses function varId() defined in Token
      uses function variable(const Variable *) defined in Token
      uses function isPointer() defined in Variable
      uses function isArray() defined in Variable
      uses function isStlStringType() defined in Variable
      uses function parseFunctionCall(const Token &,std::list< const Token * > &,const Library *,unsigned char) defined in CheckNullPointer
      uses variable _settings defined in Check
      uses variable library defined in Settings
      uses function isStlType() defined in Variable
      uses function originalName() defined in Token
   function nullPointer() in line 83
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
      uses function nullPointerLinkedList() defined in CheckNullPointer
      uses function nullPointerByDeRefAndChec() defined in CheckNullPointer
   function nullPointerByDeRefAndChec() in line 122
      62 lines of code
      0 parameters
      18 conditional paths
      uses variable _settings defined in Check
      uses function isEnabled(T &&) defined in Settings
      uses variable inconclusive defined in Settings
      uses variable _tokenizer defined in Check
      uses function tokens() defined in Tokenizer
      uses function next() defined in Token
      uses function isPointer() defined in Variable
      uses function nameToken() defined in Variable
      uses variable inconclusive defined in ValueFlow::Value
      uses function previous() defined in Token
      uses function str(T &&) defined in Token
      uses function link(Token *) defined in Token
      uses function parseFunctionCall(const Token &,std::list< const Token * > &,const Library *,unsigned char) defined in CheckNullPointer
      uses variable library defined in Settings
      uses variable condition defined in ValueFlow::Value
      uses function nullPointerError(const Token *) defined in CheckNullPointer
      uses variable defaultArg defined in ValueFlow::Value
      uses function isPointerDeRef(const Token *,bool &) defined in CheckNullPointer
   function nullPointerError(const Token *) in line 88
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses enumvalue error defined in Severity
   function nullPointerError(const Token *,const std::string &,bool,bool) in line 89
      protection public
      8 lines of code
      4 parameters
      3 conditional paths
      uses variable _settings defined in Check
      uses function isEnabled(T &&) defined in Settings
      uses enumvalue warning defined in Severity
      uses enumvalue error defined in Severity
   function nullPointerError(const Token *,const std::string &,const Token *,bool) in line 90
      protection public
      8 lines of code
      4 parameters
      1 conditional paths
      uses function eitherTheConditionIsRedundant(const Token *) defined in valueflow.h
      uses enumvalue warning defined in Severity
   function nullPointerLinkedList() in line 116
      65 lines of code
      0 parameters
      14 conditional paths
      uses variable _settings defined in Check
      uses function isEnabled(T &&) defined in Settings
      uses variable _tokenizer defined in Check
      uses function getSymbolDatabase() defined in Tokenizer
      uses variable scopeList defined in SymbolDatabase
      uses enumvalue eFor defined in Scope
      uses function linkAt(int) defined in Token
      uses function tokAt(int) defined in Token
      uses function next() defined in Token
      uses function isPointer() defined in Variable
      uses variable type defined in Scope
      uses enumvalue eWhile defined in Scope
      uses variable classDef defined in Scope
      uses variable classStart defined in Scope
      uses function nullPointerError(const Token *) defined in CheckNullPointer
      uses function name() defined in Variable
   function parseFunctionCall(const Token &,std::list< const Token * > &,const Library *,unsigned char) in line 66
      protection public
      91 lines of code
      4 parameters
      28 conditional paths
      uses function tokAt(int) defined in Token
      uses function nextArgument() defined in Token
      uses function str(T &&) defined in Token
      uses function isnullargbad(const Token *,int) defined in Library
      uses function function(const Function *) defined in Token
      uses function isuninitargbad(const Token *,int) defined in Library
      uses function strValue() defined in Token
      uses function tokType() defined in Token
      uses enumvalue eString defined in Token
   function runChecks(const Tokenizer *,const Settings *,ErrorLogger *) in line 47
      protection public
      4 lines of code
      3 parameters
      1 conditional paths
      uses function nullPointer() defined in CheckNullPointer
   function runSimplifiedChecks(const Tokenizer *,const Settings *,ErrorLogger *) in line 53
      protection public
      4 lines of code
      3 parameters
      1 conditional paths
      uses function nullConstantDereference() defined in CheckNullPointer
      uses function nullPointer(char *) defined in posix.c
   function CheckNullPointer() in line 38
      protection public
      2 lines of code
      0 parameters
      1 conditional paths
   function CheckNullPointer(const Tokenizer *,const Settings *,ErrorLogger *) in line 42
      protection public
      3 lines of code
      3 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/lib/checkother.cpp
module checkother.cpp
   function analyzeType(const Token *) in line 291
      protection public
      14 lines of code
      1 parameters
      5 conditional paths
      uses function str(T &&) defined in Token
      uses function isLong() defined in Token
   function nonLocal(const Variable *) in line 433
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function isLocal() defined in Variable
      uses function isArgument() defined in Variable
      uses function isStatic() defined in Variable
      uses function isReference() defined in Variable
   function eraseNotLocalArg(std::map< unsigned int, const Token * > &,const SymbolDatabase *) in line 438
      protection public
      10 lines of code
      2 parameters
      3 conditional paths
      uses function getVariableFromVarId(std::size_t) defined in SymbolDatabase
      uses function nonLocal(const Variable *) defined in checkother.cpp
   function eraseMemberAssignments(const unsigned int,const std::map< unsigned int, std::set< unsigned int > > &,std::map< unsigned int, const Token * > &) in line 449
      protection public
      12 lines of code
      3 parameters
      4 conditional paths
   function checkExceptionHandling(const Token *) in line 462
      protection public
      21 lines of code
      1 parameters
      6 conditional paths
      uses function variable(const Variable *) defined in Token
      uses function scope(const Scope *) defined in Token
      uses function scope() defined in Variable
      uses variable type defined in Scope
      uses enumvalue eTry defined in Scope
      uses enumvalue eLambda defined in Scope
      uses variable nestedIn defined in Scope
      uses function isExecutable() defined in Scope
      uses variable classEnd defined in Scope
      uses function linkAt(int) defined in Token
      uses function next() defined in Token
      uses function link(Token *) defined in Token
      uses function declarationId() defined in Variable
   function isFunctionOrBreakPattern(const Token *) in line 679
      protection public
      7 lines of code
      1 parameters
      20 conditional paths
      uses function checkRedundantAssignmentInSwitch() defined in CheckOther
      uses variable _settings defined in Check
      uses function isEnabled(T &&) defined in Settings
      uses variable _tokenizer defined in Check
      uses function getSymbolDatabase() defined in Tokenizer
      uses variable scopeList defined in SymbolDatabase
      uses enumvalue eSwitch defined in Scope
      uses function next() defined in Token
      uses function str(T &&) defined in Token
      uses function previous() defined in Token
      uses function link(Token *) defined in Token
      uses function varId() defined in Token
      uses function strAt(int) defined in Token
      uses function astOperand2(Token *) defined in Token
      uses function redundantBitwiseOperationInSwitchError(const Token *,const std::string &) defined in CheckOther
      uses function tokAt(int) defined in Token
   function constructorTakesReference(const Scope *const) in line 2132
      protection public
      15 lines of code
      1 parameters
      5 conditional paths
      uses variable functionList defined in Scope
      uses function argCount() defined in Function
      uses function getArgumentVar(std::size_t) defined in Function
      uses function isReference() defined in Variable
   function isNegative(const Token *,const Settings *) in line 2203
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function valueType() defined in Token
      uses variable sign defined in ValueType
      uses enumvalue SIGNED defined in ValueType
      uses function getValueLE(const MathLib::bigint,const Settings *) defined in Token
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/lib/checkother.h
module CheckOther
   inherits from Check
   function charArrayIndexError(const Token *) in line 221
      10 lines of code
      1 parameters
      1 conditional paths
      uses enumvalue warning defined in Severity
   function charBitOpError(const Token *) in line 222
      13 lines of code
      1 parameters
      1 conditional paths
      uses enumvalue warning defined in Severity
   function checkCastIntToCharAndBack() in line 193
      protection public
      49 lines of code
      0 parameters
      17 conditional paths
      uses variable _settings defined in Check
      uses function isEnabled(T &&) defined in Settings
      uses variable _tokenizer defined in Check
      uses function getSymbolDatabase() defined in Tokenizer
      uses variable functionScopes defined in SymbolDatabase
      uses variable classStart defined in Scope
      uses function next() defined in Token
      uses variable classEnd defined in Scope
      uses function typeEndToken() defined in Variable
      uses function str(T &&) defined in Token
      uses function isSigned() defined in Token
      uses function checkCastIntToCharAndBackError(const Token *,const std::string &) defined in CheckOther
      uses function isCPP() defined in Tokenizer
   function checkCastIntToCharAndBackError(const Token *,const std::string &) in line 213
      14 lines of code
      2 parameters
      10 conditional paths
      uses enumvalue warning defined in Severity
      uses function clarifyCalculation() defined in CheckOther
      uses variable _settings defined in Check
      uses function isEnabled(T &&) defined in Settings
      uses variable _tokenizer defined in Check
      uses function getSymbolDatabase() defined in Tokenizer
      uses variable functionScopes defined in SymbolDatabase
      uses variable classStart defined in Scope
      uses function next() defined in Token
      uses variable classEnd defined in Scope
      uses enumvalue eBitOp defined in Token
      uses function astOperand1(Token *) defined in Token
      uses function str(T &&) defined in Token
      uses function link(Token *) defined in Token
      uses function clarifyCalculationError(const Token *,const std::string &) defined in CheckOther
      uses enumvalue style defined in Severity
   function checkCharVariable() in line 123
      protection public
      83 lines of code
      0 parameters
      22 conditional paths
      uses variable _settings defined in Check
      uses function isEnabled(T &&) defined in Settings
      uses variable _tokenizer defined in Check
      uses function tokens() defined in Tokenizer
      uses function next() defined in Token
      uses function str(T &&) defined in Token
      uses function isUnsigned() defined in Token
      uses function strAt(int) defined in Token
      uses function charArrayIndexError(const Token *) defined in CheckOther
      uses function varId() defined in Token
      uses function charBitOpError(const Token *) defined in CheckOther
   function checkCommaSeparatedReturn() in line 117
      protection public
      27 lines of code
      0 parameters
      9 conditional paths
      uses variable _settings defined in Check
      uses variable experimental defined in Settings
      uses function isEnabled(T &&) defined in Settings
      uses variable _tokenizer defined in Check
      uses function tokens() defined in Tokenizer
      uses function next() defined in Token
      uses function str(T &&) defined in Token
      uses function link(Token *) defined in Token
      uses function isExpandedMacro() defined in Token
      uses function linenr() defined in Token
      uses function commaSeparatedReturnError(const Token *) defined in CheckOther
   function checkComparisonFunctionIsAlwaysTrueOrFalse() in line 196
      protection public
      30 lines of code
      0 parameters
      7 conditional paths
      uses variable _settings defined in Check
      uses function isEnabled(T &&) defined in Settings
      uses variable _tokenizer defined in Check
      uses function getSymbolDatabase() defined in Tokenizer
      uses variable functionScopes defined in SymbolDatabase
      uses variable classStart defined in Scope
      uses function next() defined in Token
      uses variable classEnd defined in Scope
      uses function isName() defined in Token
      uses function tokAt(int) defined in Token
      uses function varId() defined in Token
      uses variable functionName defined in extracttests.py
      uses function str(T &&) defined in Token
      uses function strAt(int) defined in Token
      uses function checkComparisonFunctionIsAlwaysTrueOrFalseError(const Token *,const std::string &,const std::string &,const bool) defined in CheckOther
   function checkComparisonFunctionIsAlwaysTrueOrFalseError(const Token *,const std::string &,const std::string &,const bool) in line 212
      8 lines of code
      4 parameters
      20 conditional paths
      uses variable result defined in triage-report.py
      uses enumvalue warning defined in Severity
      uses variable functionName defined in extracttests.py
      uses function checkSignOfUnsignedVariable() defined in CheckOther
      uses variable _settings defined in Check
      uses function isEnabled(T &&) defined in Settings
      uses variable _tokenizer defined in Check
      uses function codeWithTemplates() defined in Tokenizer
      uses variable inconclusive defined in Settings
      uses function getSymbolDatabase() defined in Tokenizer
      uses variable functionScopes defined in SymbolDatabase
      uses variable classStart defined in Scope
      uses function next() defined in Token
      uses variable classEnd defined in Scope
      uses function varId() defined in Token
      uses function str(T &&) defined in Token
      uses function tokAt(int) defined in Token
      uses function previous() defined in Token
      uses function isName() defined in Token
      uses function variable(const Variable *) defined in Token
      uses function typeEndToken() defined in Variable
      uses function isUnsigned() defined in Token
      uses function unsignedLessThanZeroError(const Token *,const std::string &,bool) defined in CheckOther
      uses function name() defined in Variable
      uses function isPointer() defined in Variable
      uses function isArray() defined in Variable
      uses function pointerLessThanZeroError(const Token *,bool) defined in CheckOther
      uses function unsignedPositiveError(const Token *,const std::string &,bool) defined in CheckOther
      uses function pointerPositiveError(const Token *,bool) defined in CheckOther
      uses function strAt(int) defined in Token
   function checkConstantFunctionParameter() in line 120
      protection public
      49 lines of code
      0 parameters
      35 conditional paths
      uses variable _settings defined in Check
      uses function isEnabled(T &&) defined in Settings
      uses variable _tokenizer defined in Check
      uses function getSymbolDatabase() defined in Tokenizer
      uses function tokens() defined in Tokenizer
      uses function next() defined in Token
      uses function passedByValueError(const Token *,const std::string &) defined in CheckOther
      uses function strAt(int) defined in Token
      uses function fileIndex() defined in Token
      uses function previous() defined in Token
      uses function tokAt(int) defined in Token
      uses function link(Token *) defined in Token
      uses variable s defined in extracttests.py
      uses function str(T &&) defined in Token
      uses function isStandardType() defined in Token
   function checkDuplicateBranch() in line 159
      protection public
      40 lines of code
      0 parameters
      8 conditional paths
      uses variable _settings defined in Check
      uses function isEnabled(T &&) defined in Settings
      uses variable inconclusive defined in Settings
      uses variable _tokenizer defined in Check
      uses function getSymbolDatabase() defined in Tokenizer
      uses variable scopeList defined in SymbolDatabase
      uses enumvalue eFunction defined in Scope
      uses function link(Token *) defined in Token
      uses function next() defined in Token
      uses function strAt(int) defined in Token
      uses function duplicateBranchError(const Token *,const Token *) defined in CheckOther
      uses function tokAt(int) defined in Token
   function checkDuplicateExpression() in line 162
      protection public
      35 lines of code
      0 parameters
      10 conditional paths
      uses variable _settings defined in Check
      uses function isEnabled(T &&) defined in Settings
      uses variable _tokenizer defined in Check
      uses function getSymbolDatabase() defined in Tokenizer
      uses variable scopeList defined in SymbolDatabase
      uses enumvalue eFunction defined in Scope
      uses function link(Token *) defined in Token
      uses function next() defined in Token
      uses function strAt(int) defined in Token
      uses function tokAt(int) defined in Token
      uses function varId() defined in Token
      uses function getVariableFromVarId(std::size_t) defined in SymbolDatabase
      uses function typeStartToken() defined in Variable
      uses function typeEndToken() defined in Variable
      uses function duplicateExpressionError(const Token *,const Token *,const std::string &) defined in CheckOther
   function checkEvaluationOrder() in line 208
      protection public
      78 lines of code
      0 parameters
      23 conditional paths
      uses variable _tokenizer defined in Check
      uses function isCPP() defined in Tokenizer
      uses variable _settings defined in Check
      uses variable standards defined in Settings
      uses variable cpp defined in Standards
      uses enumvalue CPP11 defined in Standards
      uses function getSymbolDatabase() defined in Tokenizer
      uses variable functionScopes defined in SymbolDatabase
      uses variable classStart defined in Scope
      uses variable classEnd defined in Scope
      uses function next() defined in Token
      uses function isAssignmentOp() defined in Token
      uses function astOperand1(Token *) defined in Token
      uses function astParent() defined in Token
      uses function str(T &&) defined in Token
      uses function astOperand2(Token *) defined in Token
      uses function previous() defined in Token
      uses function nextArgument() defined in Token
      uses function isSameExpression(bool,bool,const Token *,const Token *,const std::set< std::string > &) defined in astutils.cpp
      uses variable library defined in Settings
      uses variable functionpure defined in Library
      uses function isEnabled(T &&) defined in Settings
      uses function selfAssignmentError(const Token *,const std::string &) defined in CheckOther
      uses function unknownEvaluationOrder(const Token *) defined in CheckOther
   function checkIncompleteArrayFill() in line 184
      protection public
      34 lines of code
      0 parameters
      11 conditional paths
      uses variable _settings defined in Check
      uses variable inconclusive defined in Settings
      uses function isEnabled(T &&) defined in Settings
      uses variable _tokenizer defined in Check
      uses function getSymbolDatabase() defined in Tokenizer
      uses variable functionScopes defined in SymbolDatabase
      uses variable classStart defined in Scope
      uses function next() defined in Token
      uses variable classEnd defined in Scope
      uses function linkAt(int) defined in Token
      uses function tokAt(int) defined in Token
      uses function variable(const Variable *) defined in Token
      uses function isArray() defined in Variable
      uses function dimensions() defined in Variable
      uses function dimension(std::size_t) defined in Variable
      uses function strAt(int) defined in Token
      uses function sizeOfType(const Token *) defined in Tokenizer
      uses function typeStartToken() defined in Variable
      uses function str(T &&) defined in Token
      uses variable sizeof_pointer defined in Settings
      uses function isPointer() defined in Variable
      uses function incompleteArrayFillError(const Token *,const std::string &,const std::string &,bool) defined in CheckOther
      uses function name() defined in Variable
   function checkIncompleteStatement() in line 126
      protection public
      34 lines of code
      0 parameters
      19 conditional paths
      uses variable _settings defined in Check
      uses function isEnabled(T &&) defined in Settings
      uses variable _tokenizer defined in Check
      uses function tokens() defined in Tokenizer
      uses function next() defined in Token
      uses function str(T &&) defined in Token
      uses function link(Token *) defined in Token
      uses function tokAt(int) defined in Token
      uses function constStatementError(const Token *,const std::string &) defined in CheckOther
      uses function isNumber() defined in Token
      uses function varId() defined in Token
      uses variable s defined in extracttests.py
      uses function strAt(int) defined in Token
   function checkInnerScope(const Token *,const Variable *,bool &) in line 114
      protection public
      82 lines of code
      3 parameters
      28 conditional paths
      uses function next() defined in Token
      uses function scope(const Scope *) defined in Token
      uses variable type defined in Scope
      uses enumvalue eFor defined in Scope
      uses enumvalue eWhile defined in Scope
      uses enumvalue eDo defined in Scope
      uses function link(Token *) defined in Token
      uses enumvalue eUnconditional defined in Scope
      uses function strAt(int) defined in Token
      uses function previous() defined in Token
      uses function isName() defined in Token
      uses function linkAt(int) defined in Token
      uses enumvalue eSwitch defined in Scope
      uses variable nestedList defined in Scope
      uses function str(T &&) defined in Token
      uses function declarationId() defined in Variable
      uses function tokAt(int) defined in Token
      uses function varId() defined in Token
      uses function isArray() defined in Variable
      uses function isPointer() defined in Variable
      uses function variableScopeError(const Token *,const std::string &) defined in CheckOther
      uses enumvalue style defined in Severity
   function checkInterlockedDecrement() in line 202
      protection public
      37 lines of code
      0 parameters
      11 conditional paths
      uses variable _settings defined in Check
      uses function isWindowsPlatform() defined in Settings
      uses variable _tokenizer defined in Check
      uses function tokens() defined in Tokenizer
      uses function next() defined in Token
      uses function isName() defined in Token
      uses function tokAt(int) defined in Token
      uses function strAt(int) defined in Token
      uses function str(T &&) defined in Token
      uses function raceAfterInterlockedDecrementError(const Token *) defined in CheckOther
      uses function link(Token *) defined in Token
   function checkInvalidFree() in line 174
      protection public
      66 lines of code
      0 parameters
      12 conditional paths
      uses variable _settings defined in Check
      uses variable inconclusive defined in Settings
      uses variable _tokenizer defined in Check
      uses function getSymbolDatabase() defined in Tokenizer
      uses variable functionScopes defined in SymbolDatabase
      uses variable classStart defined in Scope
      uses function next() defined in Token
      uses variable classEnd defined in Scope
      uses function varId() defined in Token
      uses function tokAt(int) defined in Token
      uses function strAt(int) defined in Token
      uses function invalidFreeError(const Token *,bool) defined in CheckOther
      uses variable library defined in Settings
      uses variable functionpure defined in Library
      uses function str(T &&) defined in Token
      uses function linkAt(int) defined in Token
   function checkMemsetInvalid2ndParam() in line 156
      protection public
      40 lines of code
      0 parameters
      12 conditional paths
      uses variable _settings defined in Check
      uses function isEnabled(T &&) defined in Settings
      uses variable _tokenizer defined in Check
      uses function getSymbolDatabase() defined in Tokenizer
      uses variable functionScopes defined in SymbolDatabase
      uses variable classStart defined in Scope
      uses function next() defined in Token
      uses variable classEnd defined in Scope
      uses function tokAt(int) defined in Token
      uses function nextArgument() defined in Token
      uses function str(T &&) defined in Token
      uses function astParent() defined in Token
      uses function astIsFloat((null)) defined in cppcheckdata.py
      uses function memsetFloatError(const Token *,const std::string &) defined in CheckOther
      uses function expressionString() defined in Token
      uses function isNumber() defined in Token
      uses function memsetValueOutOfRangeError(const Token *,const std::string &) defined in CheckOther
   function checkMemsetZeroBytes() in line 153
      protection public
      8 lines of code
      0 parameters
      2 conditional paths
      uses variable _tokenizer defined in Check
      uses function tokens() defined in Tokenizer
      uses function memsetZeroBytesError(const Token *,const std::string &) defined in CheckOther
      uses function strAt(int) defined in Token
      uses function tokAt(int) defined in Token
   function checkMisusedScopedObject() in line 150
      protection public
      45 lines of code
      0 parameters
      15 conditional paths
      uses variable _tokenizer defined in Check
      uses function getSymbolDatabase() defined in Tokenizer
      uses variable scopeList defined in SymbolDatabase
      uses enumvalue eFunction defined in Scope
      uses function next() defined in Token
      uses function str(T &&) defined in Token
      uses function tokAt(int) defined in Token
      uses function link(Token *) defined in Token
      uses function tokens() defined in Tokenizer
      uses function misusedScopeObjectError(const Token *,const std::string &) defined in CheckOther
   function checkNanInArithmeticExpression() in line 132
      protection public
      10 lines of code
      0 parameters
      3 conditional paths
      uses variable _tokenizer defined in Check
      uses function tokens() defined in Tokenizer
      uses function next() defined in Token
      uses function nanInArithmeticExpressionError(const Token *) defined in CheckOther
   function checkNegativeBitwiseShift() in line 181
      protection public
      41 lines of code
      0 parameters
      14 conditional paths
      uses variable _tokenizer defined in Check
      uses function tokens() defined in Tokenizer
      uses function next() defined in Token
      uses function astOperand1(Token *) defined in Token
      uses function astOperand2(Token *) defined in Token
      uses function isCPP() defined in Tokenizer
      uses function isNumber() defined in Token
      uses function variable(const Variable *) defined in Token
      uses function astParent() defined in Token
      uses variable _settings defined in Check
      uses function negativeBitwiseShiftError(const Token *,int) defined in CheckOther
   function checkPipeParameterSize() in line 190
      protection public
      24 lines of code
      0 parameters
      6 conditional paths
      uses variable _settings defined in Check
      uses variable standards defined in Settings
      uses variable posix defined in Standards
      uses variable _tokenizer defined in Check
      uses function getSymbolDatabase() defined in Tokenizer
      uses variable functionScopes defined in SymbolDatabase
      uses variable classStart defined in Scope
      uses function next() defined in Token
      uses variable classEnd defined in Scope
      uses function tokAt(int) defined in Token
      uses function variable(const Variable *) defined in Token
      uses function isArray() defined in Variable
      uses function isArgument() defined in Variable
      uses function dimension(std::size_t) defined in Variable
      uses function checkPipeParameterSizeError(const Token *,const std::string &,const std::string &) defined in CheckOther
      uses function str(T &&) defined in Token
   function checkPipeParameterSizeError(const Token *,const std::string &,const std::string &) in line 214
      7 lines of code
      3 parameters
      1 conditional paths
      uses enumvalue error defined in Severity
   function checkRedundantAssignment() in line 135
      protection public
      151 lines of code
      0 parameters
      45 conditional paths
      uses variable _settings defined in Check
      uses function isEnabled(T &&) defined in Settings
      uses variable inconclusive defined in Settings
      uses variable _tokenizer defined in Check
      uses function getSymbolDatabase() defined in Tokenizer
      uses variable scopeList defined in SymbolDatabase
      uses function next() defined in Token
      uses function str(T &&) defined in Token
      uses function astOperand2(Token *) defined in Token
      uses function strAt(int) defined in Token
      uses function link(Token *) defined in Token
      uses function linkAt(int) defined in Token
      uses function tokType() defined in Token
      uses enumvalue eVariable defined in Token
      uses function varId() defined in Token
      uses function previous() defined in Token
      uses function tokAt(int) defined in Token
      uses function variable(const Variable *) defined in Token
      uses function isGlobal() defined in Variable
      uses function isReference() defined in Variable
      uses variable nestedIn defined in Function
      uses enumvalue eSwitch defined in Scope
      uses function redundantAssignmentInSwitchError(const Token *,const Token *,const std::string &) defined in CheckOther
      uses function isC() defined in Tokenizer
      uses function redundantAssignmentError(const Token *,const Token *,const std::string &,bool) defined in CheckOther
      uses enumvalue eIncDecOp defined in Token
      uses variable library defined in Settings
      uses variable functionpure defined in Library
      uses function redundantCopyInSwitchError(const Token *,const Token *,const std::string &) defined in CheckOther
      uses function redundantCopyError(const Token *,const Token *,const std::string &) defined in CheckOther
      uses function function(const Function *) defined in Token
      uses function hasBody() defined in Function
      uses variable functionScope defined in Function
      uses variable classEnd defined in Scope
      uses function IsScopeNoReturn(const Token *,bool *) defined in Tokenizer
   function checkRedundantAssignmentInSwitch() in line 138
      protection public
      64 lines of code
      0 parameters
      14 conditional paths
      uses variable _tokenizer defined in Check
      uses function tokens() defined in Tokenizer
      uses function tokAt(int) defined in Token
      uses function next() defined in Token
      uses function link(Token *) defined in Token
      uses function redundantAssignmentInSwitchError(const Token *,const Token *,const std::string &) defined in CheckOther
   function checkRedundantCopy() in line 178
      protection public
      37 lines of code
      0 parameters
      11 conditional paths
      uses variable _settings defined in Check
      uses function isEnabled(T &&) defined in Settings
      uses variable _tokenizer defined in Check
      uses function isC() defined in Tokenizer
      uses variable inconclusive defined in Settings
      uses function getSymbolDatabase() defined in Tokenizer
      uses function getVariableListSize() defined in SymbolDatabase
      uses function getVariableFromVarId(std::size_t) defined in SymbolDatabase
      uses function isReference() defined in Variable
      uses function isConst() defined in Variable
      uses function isPointer() defined in Variable
      uses function type() defined in Variable
      uses function isStlType() defined in Variable
      uses function nameToken() defined in Variable
      uses function strAt(int) defined in Token
      uses function isClass() defined in Variable
      uses function typeScope() defined in Variable
      uses function next() defined in Token
      uses function astOperand2(Token *) defined in Token
      uses function previous() defined in Token
      uses function link(Token *) defined in Token
      uses function function(const Function *) defined in Token
      uses variable tokenDef defined in Function
      uses function redundantCopyError(const Token *,const Token *,const std::string &) defined in CheckOther
      uses function str(T &&) defined in Token
   function checkRedundantPointerOp() in line 199
      protection public
      30 lines of code
      0 parameters
      8 conditional paths
      uses variable _settings defined in Check
      uses function isEnabled(T &&) defined in Settings
      uses variable _tokenizer defined in Check
      uses function getSymbolDatabase() defined in Tokenizer
      uses function tokens() defined in Tokenizer
      uses function next() defined in Token
      uses function str(T &&) defined in Token
      uses function astOperand2(Token *) defined in Token
      uses function astOperand1(Token *) defined in Token
      uses function isExpandedMacro() defined in Token
      uses function varId() defined in Token
      uses function getVariableFromVarId(std::size_t) defined in SymbolDatabase
      uses function isPointer() defined in Variable
      uses function redundantPointerOpError(const Token *,const std::string &,bool) defined in CheckOther
      uses function name() defined in Variable
   function checkSignOfUnsignedVariable() in line 168
      protection public
      32 lines of code
      0 parameters
      11 conditional paths
      uses variable _settings defined in Check
      uses function isEnabled(T &&) defined in Settings
      uses variable _tokenizer defined in Check
      uses function getSymbolDatabase() defined in Tokenizer
      uses variable scopeList defined in SymbolDatabase
      uses enumvalue eFunction defined in Scope
      uses function link(Token *) defined in Token
      uses function next() defined in Token
      uses function varId() defined in Token
      uses function getVariableFromVarId(std::size_t) defined in SymbolDatabase
      uses function typeEndToken() defined in Variable
      uses function isUnsigned() defined in Token
      uses function str(T &&) defined in Token
      uses function tokAt(int) defined in Token
      uses function strAt(int) defined in Token
      uses enumvalue style defined in Severity
   function checkSuspiciousCaseInSwitch() in line 141
      protection public
      31 lines of code
      0 parameters
      12 conditional paths
      uses variable _settings defined in Check
      uses variable inconclusive defined in Settings
      uses function isEnabled(T &&) defined in Settings
      uses variable _tokenizer defined in Check
      uses function getSymbolDatabase() defined in Tokenizer
      uses variable scopeList defined in SymbolDatabase
      uses enumvalue eSwitch defined in Scope
      uses function next() defined in Token
      uses function str(T &&) defined in Token
      uses function suspiciousCaseInSwitchError(const Token *,const std::string &) defined in CheckOther
   function checkSuspiciousEqualityComparison() in line 144
      protection public
      41 lines of code
      0 parameters
      9 conditional paths
      uses variable _settings defined in Check
      uses function isEnabled(T &&) defined in Settings
      uses variable inconclusive defined in Settings
      uses variable _tokenizer defined in Check
      uses function getSymbolDatabase() defined in Tokenizer
      uses variable functionScopes defined in SymbolDatabase
      uses variable classStart defined in Scope
      uses variable classEnd defined in Scope
      uses function next() defined in Token
      uses function linkAt(int) defined in Token
      uses function suspiciousEqualityComparisonError(const Token *) defined in CheckOther
      uses function tokAt(int) defined in Token
      uses function strAt(int) defined in Token
   function checkSuspiciousSemicolon() in line 171
      protection public
      20 lines of code
      0 parameters
      5 conditional paths
      uses variable _settings defined in Check
      uses variable inconclusive defined in Settings
      uses function isEnabled(T &&) defined in Settings
      uses variable _tokenizer defined in Check
      uses function getSymbolDatabase() defined in Tokenizer
      uses variable scopeList defined in SymbolDatabase
      uses enumvalue eIf defined in Scope
      uses enumvalue eElse defined in Scope
      uses enumvalue eWhile defined in Scope
      uses enumvalue eFor defined in Scope
      uses function SuspiciousSemicolonError(const Token *) defined in CheckOther
   function checkSwitchCaseFallThrough() in line 147
      protection public
      128 lines of code
      0 parameters
      112 conditional paths
      uses variable _settings defined in Check
      uses function isEnabled(T &&) defined in Settings
      uses variable experimental defined in Settings
      uses variable _tokenizer defined in Check
      uses function tokens() defined in Tokenizer
      uses function tokAt(int) defined in Token
      uses function link(Token *) defined in Token
      uses enumvalue debug defined in Severity
      uses function switchCaseFallThrough(const Token *) defined in CheckOther
      uses function next() defined in Token
      uses function isStandardType() defined in Token
      uses function varId() defined in Token
      uses function previous() defined in Token
      uses function selfAssignmentError(const Token *,const std::string &) defined in CheckOther
      uses function str(T &&) defined in Token
      uses function strAt(int) defined in Token
      uses function duplicateBreakError(const Token *,bool) defined in CheckOther
      uses enumvalue error defined in Severity
      uses enumvalue warning defined in Severity
      uses function isUnsigned() defined in Token
   function checkUnreachableCode() in line 165
      protection public
      96 lines of code
      0 parameters
      29 conditional paths
      uses variable _settings defined in Check
      uses function isEnabled(T &&) defined in Settings
      uses variable inconclusive defined in Settings
      uses variable _tokenizer defined in Check
      uses function getSymbolDatabase() defined in Tokenizer
      uses variable functionScopes defined in SymbolDatabase
      uses variable classStart defined in Scope
      uses variable classEnd defined in Scope
      uses function next() defined in Token
      uses function link(Token *) defined in Token
      uses function tokAt(int) defined in Token
      uses function str(T &&) defined in Token
      uses variable library defined in Settings
      uses function isnoreturn(const Token *) defined in Library
      uses function astParent() defined in Token
      uses function function(const Function *) defined in Token
      uses function linkAt(int) defined in Token
      uses function strAt(int) defined in Token
      uses function linenr() defined in Token
      uses function previous() defined in Token
      uses function duplicateBreakError(const Token *,bool) defined in CheckOther
      uses function scope(const Scope *) defined in Token
      uses enumvalue eSwitch defined in Scope
      uses function unreachableCodeError(const Token *,bool) defined in CheckOther
      uses enumvalue style defined in Severity
   function checkUnusedLabel() in line 205
      protection public
      21 lines of code
      0 parameters
      7 conditional paths
      uses variable _settings defined in Check
      uses function isEnabled(T &&) defined in Settings
      uses variable _tokenizer defined in Check
      uses function getSymbolDatabase() defined in Tokenizer
      uses variable functionScopes defined in SymbolDatabase
      uses variable classStart defined in Scope
      uses variable classEnd defined in Scope
      uses function next() defined in Token
      uses function scope(const Scope *) defined in Token
      uses function strAt(int) defined in Token
      uses function previous() defined in Token
      uses function unusedLabelError(const Token *) defined in CheckOther
   function checkVarFuncNullUB() in line 187
      protection public
      37 lines of code
      0 parameters
      11 conditional paths
      uses variable _settings defined in Check
      uses function isEnabled(T &&) defined in Settings
      uses variable _tokenizer defined in Check
      uses function getSymbolDatabase() defined in Tokenizer
      uses variable functionScopes defined in SymbolDatabase
      uses variable classStart defined in Scope
      uses variable classEnd defined in Scope
      uses function next() defined in Token
      uses function str(T &&) defined in Token
      uses function link(Token *) defined in Token
      uses function previous() defined in Token
      uses function isName() defined in Token
      uses function f(char) defined in test.cxx
      uses function function(const Function *) defined in Token
      uses function tokAt(int) defined in Token
      uses function varFuncNullUBError(const Token *) defined in CheckOther
   function checkVariableScope() in line 113
      protection public
      71 lines of code
      0 parameters
      42 conditional paths
      uses variable _settings defined in Check
      uses function isEnabled(T &&) defined in Settings
      uses variable _tokenizer defined in Check
      uses function getSymbolDatabase() defined in Tokenizer
      uses variable scopeList defined in SymbolDatabase
      uses enumvalue eFunction defined in Scope
      uses function next() defined in Token
      uses function str(T &&) defined in Token
      uses function link(Token *) defined in Token
      uses function varId() defined in Token
      uses function tokAt(int) defined in Token
      uses function strAt(int) defined in Token
      uses function isStandardType() defined in Token
      uses function previous() defined in Token
      uses function variableScopeError(const Token *,const std::string &) defined in CheckOther
   function checkZeroDivision() in line 129
      protection public
      15 lines of code
      0 parameters
      14 conditional paths
      uses variable _tokenizer defined in Check
      uses function tokens() defined in Tokenizer
      uses function next() defined in Token
      uses function str(T &&) defined in Token
      uses function zerodivError(const Token *,bool) defined in CheckOther
      uses function tokAt(int) defined in Token
      uses function varId() defined in Token
   function clarifyCalculation() in line 101
      protection public
      39 lines of code
      0 parameters
      12 conditional paths
      uses variable _settings defined in Check
      uses function isEnabled(T &&) defined in Settings
      uses variable _tokenizer defined in Check
      uses function tokens() defined in Tokenizer
      uses function next() defined in Token
      uses function isName() defined in Token
      uses function isNumber() defined in Token
      uses function previous() defined in Token
      uses function str(T &&) defined in Token
      uses function link(Token *) defined in Token
      uses function isArithmeticalOp() defined in Token
      uses function strAt(int) defined in Token
      uses function tokAt(int) defined in Token
      uses function clarifyCalculationError(const Token *,const std::string &) defined in CheckOther
   function clarifyCalculationError(const Token *,const std::string &) in line 215
      18 lines of code
      2 parameters
      8 conditional paths
      uses enumvalue style defined in Severity
      uses variable _settings defined in Check
      uses function isEnabled(T &&) defined in Settings
      uses variable _tokenizer defined in Check
      uses function tokens() defined in Tokenizer
      uses function next() defined in Token
      uses function tokAt(int) defined in Token
   function clarifyStatement() in line 104
      protection public
      25 lines of code
      0 parameters
      8 conditional paths
      uses variable _settings defined in Check
      uses function isEnabled(T &&) defined in Settings
      uses variable _tokenizer defined in Check
      uses function getSymbolDatabase() defined in Tokenizer
      uses variable functionScopes defined in SymbolDatabase
      uses variable classStart defined in Scope
      uses variable classEnd defined in Scope
      uses function next() defined in Token
      uses function astOperand1(Token *) defined in Token
      uses function previous() defined in Token
      uses function str(T &&) defined in Token
      uses function astParent() defined in Token
      uses function clarifyStatementError(const Token *) defined in CheckOther
   function clarifyStatementError(const Token *) in line 216
      6 lines of code
      1 parameters
      1 conditional paths
      uses enumvalue warning defined in Severity
   function classInfo() in line 320
      53 lines of code
      0 parameters
      1 conditional paths
   function commaSeparatedReturnError(const Token *) in line 254
      16 lines of code
      1 parameters
      54 conditional paths
      uses enumvalue style defined in Severity
      uses function checkConstantFunctionParameter() defined in CheckOther
      uses variable _settings defined in Check
      uses function isEnabled(T &&) defined in Settings
      uses variable _tokenizer defined in Check
      uses function isC() defined in Tokenizer
      uses function getSymbolDatabase() defined in Tokenizer
      uses function getVariableListSize() defined in SymbolDatabase
      uses function getVariableFromVarId(std::size_t) defined in SymbolDatabase
      uses function isArgument() defined in Variable
      uses function isClass() defined in Variable
      uses function isConst() defined in Variable
      uses function isPointer() defined in Variable
      uses function isArray() defined in Variable
      uses function isReference() defined in Variable
      uses function scope() defined in Variable
      uses variable function defined in Scope
      uses variable arg defined in Function
      uses function link(Token *) defined in Token
      uses function typeStartToken() defined in Variable
      uses function isStlStringType() defined in Variable
      uses function passedByValueError(const Token *,const std::string &) defined in CheckOther
      uses function name() defined in Variable
      uses function isStlType() defined in Variable
      uses function linkAt(int) defined in Token
      uses function type() defined in Variable
      uses enumvalue performance defined in Severity
      uses function checkCharVariable() defined in CheckOther
      uses variable functionScopes defined in SymbolDatabase
      uses variable classStart defined in Scope
      uses variable classEnd defined in Scope
      uses function next() defined in Token
      uses function variable(const Variable *) defined in Token
      uses function astOperand2(Token *) defined in Token
      uses function astIsSignedChar(const Token *) defined in astutils.cpp
      uses function getValueGE(const MathLib::bigint,const Settings *) defined in Token
      uses function charArrayIndexError(const Token *) defined in CheckOther
      uses function astOperand1(Token *) defined in Token
      uses function str(T &&) defined in Token
      uses function isKnown() defined in ValueFlow::Value
      uses variable intvalue defined in ValueFlow::Value
      uses function astParent() defined in Token
      uses function valueType() defined in Token
      uses variable type defined in ValueType
      uses function charBitOpError(const Token *) defined in CheckOther
      uses enumvalue warning defined in Severity
      uses function checkIncompleteStatement() defined in CheckOther
      uses function tokens() defined in Tokenizer
      uses function previous() defined in Token
      uses function isCast() defined in Token
      uses function isExpandedMacro() defined in Token
      uses function tokAt(int) defined in Token
      uses function constStatementError(const Token *,const std::string &) defined in CheckOther
      uses function isNumber() defined in Token
      uses function checkZeroDivision() defined in CheckOther
      uses variable inconclusive defined in Settings
      uses function isIntegral() defined in ValueType
      uses variable inconclusive defined in ValueFlow::Value
      uses variable condition defined in ValueFlow::Value
      uses function zerodivError(const Token *,bool) defined in CheckOther
      uses function zerodivcondError(const Token *,const Token *,bool) defined in CheckOther
      uses enumvalue error defined in Severity
   function constStatementError(const Token *,const std::string &) in line 220
      4 lines of code
      2 parameters
      1 conditional paths
      uses enumvalue warning defined in Severity
   function cstyleCastError(const Token *) in line 217
      4 lines of code
      1 parameters
      1 conditional paths
      uses enumvalue style defined in Severity
      uses enumvalue error defined in Severity
   function duplicateBranchError(const Token *,const Token *) in line 240
      11 lines of code
      2 parameters
      1 conditional paths
      uses enumvalue style defined in Severity
   function duplicateBreakError(const Token *,bool) in line 243
      6 lines of code
      2 parameters
      4 conditional paths
      uses enumvalue style defined in Severity
      uses variable _tokenizer defined in Check
      uses function tokens() defined in Tokenizer
      uses function next() defined in Token
      uses function getSymbolDatabase() defined in Tokenizer
      uses function getVariableFromVarId(std::size_t) defined in SymbolDatabase
      uses function varId() defined in Token
      uses function nameToken() defined in Variable
      uses function strAt(int) defined in Token
      uses enumvalue error defined in Severity
   function duplicateExpressionError(const Token *,const Token *,const std::string &) in line 241
      11 lines of code
      3 parameters
      5 conditional paths
      uses enumvalue style defined in Severity
      uses variable _settings defined in Check
      uses function isEnabled(T &&) defined in Settings
      uses variable _tokenizer defined in Check
      uses function tokens() defined in Tokenizer
      uses function strAt(int) defined in Token
      uses function tokAt(int) defined in Token
      uses enumvalue warning defined in Severity
      uses enumvalue performance defined in Severity
   function duplicateExpressionTernaryError(const Token *) in line 242
      6 lines of code
      1 parameters
      1 conditional paths
      uses enumvalue style defined in Severity
      uses function selfAssignmentError(const Token *,const std::string &) defined in CheckOther
      uses enumvalue warning defined in Severity
   function getErrorMessages(ErrorLogger *,const Settings *) in line 260
      55 lines of code
      2 parameters
      1 conditional paths
      uses function zerodivError(const Token *,bool) defined in CheckOther
      uses function zerodivcondError(const Token *,const Token *,bool) defined in CheckOther
      uses function misusedScopeObjectError(const Token *,const std::string &) defined in CheckOther
      uses function invalidPointerCastError(const Token *,const std::string &,const std::string &,bool) defined in CheckOther
      uses function negativeBitwiseShiftError(const Token *,int) defined in CheckOther
      uses function checkPipeParameterSizeError(const Token *,const std::string &,const std::string &) defined in CheckOther
      uses function raceAfterInterlockedDecrementError(const Token *) defined in CheckOther
      uses function redundantCopyError(const Token *,const Token *,const std::string &) defined in CheckOther
      uses function redundantAssignmentError(const Token *,const Token *,const std::string &,bool) defined in CheckOther
      uses function checkComparisonFunctionIsAlwaysTrueOrFalseError(const Token *,const std::string &,const std::string &,const bool) defined in CheckOther
      uses function checkCastIntToCharAndBackError(const Token *,const std::string &) defined in CheckOther
      uses function cstyleCastError(const Token *) defined in CheckOther
      uses function passedByValueError(const Token *,const std::string &) defined in CheckOther
      uses function constStatementError(const Token *,const std::string &) defined in CheckOther
      uses function charArrayIndexError(const Token *) defined in CheckOther
      uses function charBitOpError(const Token *) defined in CheckOther
      uses function variableScopeError(const Token *,const std::string &) defined in CheckOther
      uses function redundantAssignmentInSwitchError(const Token *,const Token *,const std::string &) defined in CheckOther
      uses function redundantCopyInSwitchError(const Token *,const Token *,const std::string &) defined in CheckOther
      uses function switchCaseFallThrough(const Token *) defined in CheckOther
      uses function suspiciousCaseInSwitchError(const Token *,const std::string &) defined in CheckOther
      uses function suspiciousEqualityComparisonError(const Token *) defined in CheckOther
      uses function selfAssignmentError(const Token *,const std::string &) defined in CheckOther
      uses function memsetZeroBytesError(const Token *,const std::string &) defined in CheckOther
      uses function memsetFloatError(const Token *,const std::string &) defined in CheckOther
      uses function memsetValueOutOfRangeError(const Token *,const std::string &) defined in CheckOther
      uses function clarifyCalculationError(const Token *,const std::string &) defined in CheckOther
      uses function clarifyStatementError(const Token *) defined in CheckOther
      uses function duplicateBranchError(const Token *,const Token *) defined in CheckOther
      uses function duplicateExpressionError(const Token *,const Token *,const std::string &) defined in CheckOther
      uses function duplicateExpressionTernaryError(const Token *) defined in CheckOther
      uses function duplicateBreakError(const Token *,bool) defined in CheckOther
      uses function unreachableCodeError(const Token *,bool) defined in CheckOther
      uses function unsignedLessThanZeroError(const Token *,const std::string &,bool) defined in CheckOther
      uses function unsignedPositiveError(const Token *,const std::string &,bool) defined in CheckOther
      uses function pointerLessThanZeroError(const Token *,bool) defined in CheckOther
      uses function pointerPositiveError(const Token *,bool) defined in CheckOther
      uses function SuspiciousSemicolonError(const Token *) defined in CheckOther
      uses function incompleteArrayFillError(const Token *,const std::string &,const std::string &,bool) defined in CheckOther
      uses function varFuncNullUBError(const Token *) defined in CheckOther
      uses function nanInArithmeticExpressionError(const Token *) defined in CheckOther
      uses function commaSeparatedReturnError(const Token *) defined in CheckOther
      uses function redundantPointerOpError(const Token *,const std::string &,bool) defined in CheckOther
      uses function unusedLabelError(const Token *) defined in CheckOther
      uses function unknownEvaluationOrder(const Token *) defined in CheckOther
   function incompleteArrayFillError(const Token *,const std::string &,const std::string &,bool) in line 252
      11 lines of code
      4 parameters
      2 conditional paths
      uses enumvalue portability defined in Severity
      uses enumvalue warning defined in Severity
   function invalidFreeError(const Token *,bool) in line 175
      protection public
      4 lines of code
      2 parameters
      27 conditional paths
      uses enumvalue error defined in Severity
      uses function isConst() defined in Function
      uses variable scopeList defined in SymbolDatabase
      uses function checkDuplicateExpression() defined in CheckOther
      uses variable _settings defined in Check
      uses function isEnabled(T &&) defined in Settings
      uses variable _tokenizer defined in Check
      uses function getSymbolDatabase() defined in Tokenizer
      uses enumvalue eFunction defined in Scope
      uses function next() defined in Token
      uses function isOp() defined in Token
      uses function astOperand1(Token *) defined in Token
      uses function astIsFloat((null)) defined in cppcheckdata.py
      uses function isSameExpression(bool,bool,const Token *,const Token *,const std::set< std::string > &) defined in astutils.cpp
      uses function isCPP() defined in Tokenizer
      uses function astOperand2(Token *) defined in Token
      uses variable library defined in Settings
      uses variable functionpure defined in Library
      uses function isWithoutSideEffects(bool,const Token *) defined in astutils.cpp
      uses function str(T &&) defined in Token
      uses function selfAssignmentError(const Token *,const std::string &) defined in CheckOther
      uses variable standards defined in Settings
      uses variable cpp defined in Standards
      uses enumvalue CPP11 defined in Standards
      uses function astParent() defined in Token
      uses function previous() defined in Token
      uses function duplicateExpressionError(const Token *,const Token *,const std::string &) defined in CheckOther
      uses function isConstExpression(const Token *,const std::set< std::string > &) defined in astutils.cpp
      uses function duplicateExpressionTernaryError(const Token *) defined in CheckOther
      uses enumvalue style defined in Severity
   function invalidPointerCast() in line 110
      protection public
      69 lines of code
      0 parameters
      19 conditional paths
      uses variable _settings defined in Check
      uses function isEnabled(T &&) defined in Settings
      uses variable inconclusive defined in Settings
      uses variable _tokenizer defined in Check
      uses function getSymbolDatabase() defined in Tokenizer
      uses variable functionScopes defined in SymbolDatabase
      uses variable classStart defined in Scope
      uses function next() defined in Token
      uses variable classEnd defined in Scope
      uses function link(Token *) defined in Token
      uses function str(T &&) defined in Token
      uses function tokAt(int) defined in Token
      uses function isStandardType() defined in Token
      uses function isCPP() defined in Tokenizer
      uses function variable(const Variable *) defined in Token
      uses function isPointer() defined in Variable
      uses function isArray() defined in Variable
      uses function typeStartToken() defined in Variable
      uses function invalidPointerCastError(const Token *,const std::string &,const std::string &,bool) defined in CheckOther
   function invalidPointerCastError(const Token *,const std::string &,const std::string &,bool) in line 218
      10 lines of code
      4 parameters
      3 conditional paths
      uses enumvalue portability defined in Severity
   function memsetFloatError(const Token *,const std::string &) in line 238
      8 lines of code
      2 parameters
      1 conditional paths
      uses variable message defined in triage-report.py
      uses enumvalue portability defined in Severity
   function memsetValueOutOfRangeError(const Token *,const std::string &) in line 239
      6 lines of code
      2 parameters
      22 conditional paths
      uses variable message defined in triage-report.py
      uses enumvalue warning defined in Severity
      uses function checkVariableScope() defined in CheckOther
      uses variable _settings defined in Check
      uses function isEnabled(T &&) defined in Settings
      uses variable _tokenizer defined in Check
      uses function getSymbolDatabase() defined in Tokenizer
      uses function getVariableListSize() defined in SymbolDatabase
      uses function getVariableFromVarId(std::size_t) defined in SymbolDatabase
      uses function isLocal() defined in Variable
      uses function isPointer() defined in Variable
      uses function typeStartToken() defined in Variable
      uses function isStandardType() defined in Token
      uses function isConst() defined in Variable
      uses function previous() defined in Token
      uses function str(T &&) defined in Token
      uses function nameToken() defined in Variable
      uses function next() defined in Token
      uses function declarationId() defined in Variable
      uses function tokAt(int) defined in Token
      uses function isNumber() defined in Token
      uses function tokType() defined in Token
      uses enumvalue eString defined in Token
      uses enumvalue eChar defined in Token
      uses function isBoolean() defined in Token
      uses function scope() defined in Variable
      uses variable classEnd defined in Scope
      uses function scope(const Scope *) defined in Token
      uses function isExpandedMacro() defined in Token
      uses enumvalue eLambda defined in Scope
      uses function checkInnerScope(const Token *,const Variable *,bool &) defined in CheckOther
      uses function link(Token *) defined in Token
      uses function linkAt(int) defined in Token
      uses function varId() defined in Token
      uses function variableScopeError(const Token *,const std::string &) defined in CheckOther
      uses function name() defined in Variable
   function memsetZeroBytesError(const Token *,const std::string &) in line 237
      6 lines of code
      2 parameters
      1 conditional paths
      uses enumvalue warning defined in Severity
   function misusedScopeObjectError(const Token *,const std::string &) in line 236
      5 lines of code
      2 parameters
      1 conditional paths
      uses enumvalue error defined in Severity
      uses enumvalue style defined in Severity
   function myName() in line 316
      3 lines of code
      0 parameters
      1 conditional paths
   function nanInArithmeticExpressionError(const Token *) in line 226
      7 lines of code
      1 parameters
      15 conditional paths
      uses enumvalue style defined in Severity
      uses function checkMisusedScopedObject() defined in CheckOther
      uses variable _tokenizer defined in Check
      uses function isC() defined in Tokenizer
      uses variable _settings defined in Check
      uses function isEnabled(T &&) defined in Settings
      uses function getSymbolDatabase() defined in Tokenizer
      uses variable functionScopes defined in SymbolDatabase
      uses variable classStart defined in Scope
      uses variable classEnd defined in Scope
      uses function next() defined in Token
      uses function type(const ::Type *) defined in Token
      uses function function(const Function *) defined in Token
      uses function linkAt(int) defined in Token
      uses function misusedScopeObjectError(const Token *,const std::string &) defined in CheckOther
      uses function str(T &&) defined in Token
      uses function checkDuplicateBranch() defined in CheckOther
      uses variable inconclusive defined in Settings
      uses variable scopeList defined in SymbolDatabase
      uses enumvalue eIf defined in Scope
      uses function isExpandedMacro() defined in Token
      uses function duplicateBranchError(const Token *,const Token *) defined in CheckOther
   function negativeBitwiseShiftError(const Token *,int) in line 250
      7 lines of code
      2 parameters
      2 conditional paths
      uses enumvalue error defined in Severity
   function passedByValueError(const Token *,const std::string &) in line 219
      7 lines of code
      2 parameters
      1 conditional paths
      uses enumvalue performance defined in Severity
   function pointerLessThanZeroError(const Token *,bool) in line 246
      5 lines of code
      2 parameters
      1 conditional paths
      uses enumvalue style defined in Severity
   function pointerPositiveError(const Token *,bool) in line 248
      5 lines of code
      2 parameters
      1 conditional paths
      uses enumvalue style defined in Severity
   function raceAfterInterlockedDecrementError(const Token *) in line 256
      5 lines of code
      1 parameters
      1 conditional paths
      uses enumvalue error defined in Severity
   function redundantAssignmentError(const Token *,const Token *,const std::string &,bool) in line 227
      11 lines of code
      4 parameters
      2 conditional paths
      uses enumvalue performance defined in Severity
      uses function redundantAssignmentInSwitchError(const Token *,const Token *,const std::string &) defined in CheckOther
      uses enumvalue warning defined in Severity
   function redundantAssignmentInSwitchError(const Token *,const Token *,const std::string &) in line 228
      5 lines of code
      3 parameters
      1 conditional paths
      uses enumvalue warning defined in Severity
   function redundantBitwiseOperationInSwitchError(const Token *,const std::string &) in line 231
      5 lines of code
      2 parameters
      18 conditional paths
      uses enumvalue warning defined in Severity
      uses function checkSwitchCaseFallThrough() defined in CheckOther
      uses variable _settings defined in Check
      uses function isEnabled(T &&) defined in Settings
      uses variable experimental defined in Settings
      uses variable _tokenizer defined in Check
      uses function getSymbolDatabase() defined in Tokenizer
      uses variable scopeList defined in SymbolDatabase
      uses enumvalue eSwitch defined in Scope
      uses function next() defined in Token
      uses function link(Token *) defined in Token
      uses function switchCaseFallThrough(const Token *) defined in CheckOther
      uses function str(T &&) defined in Token
      uses function tokAt(int) defined in Token
      uses enumvalue style defined in Severity
   function redundantCopyError(const Token *,const Token *,const std::string &) in line 229
      6 lines of code
      3 parameters
      1 conditional paths
      uses enumvalue performance defined in Severity
   function redundantCopyError(const Token *,const std::string &) in line 251
      9 lines of code
      2 parameters
      1 conditional paths
      uses enumvalue performance defined in Severity
   function redundantCopyInSwitchError(const Token *,const Token *,const std::string &) in line 230
      6 lines of code
      3 parameters
      1 conditional paths
      uses enumvalue warning defined in Severity
   function redundantPointerOpError(const Token *,const std::string &,bool) in line 255
      5 lines of code
      3 parameters
      1 conditional paths
      uses enumvalue style defined in Severity
   function runChecks(const Tokenizer *,const Settings *,ErrorLogger *) in line 49
      protection public
      27 lines of code
      3 parameters
      1 conditional paths
      uses function warningOldStylePointerCast() defined in CheckOther
      uses function invalidPointerCast() defined in CheckOther
      uses function checkCharVariable() defined in CheckOther
      uses function checkRedundantAssignment() defined in CheckOther
      uses function checkRedundantAssignmentInSwitch() defined in CheckOther
      uses function checkSuspiciousCaseInSwitch() defined in CheckOther
      uses function checkDuplicateBranch() defined in CheckOther
      uses function checkDuplicateExpression() defined in CheckOther
      uses function checkUnreachableCode() defined in CheckOther
      uses function checkSuspiciousSemicolon() defined in CheckOther
      uses function checkVariableScope() defined in CheckOther
      uses function checkSignOfUnsignedVariable() defined in CheckOther
      uses function checkIncompleteArrayFill() defined in CheckOther
      uses function checkVarFuncNullUB() defined in CheckOther
      uses function checkNanInArithmeticExpression() defined in CheckOther
      uses function checkCommaSeparatedReturn() defined in CheckOther
      uses function checkRedundantPointerOp() defined in CheckOther
      uses function checkZeroDivision() defined in CheckOther
      uses function checkNegativeBitwiseShift() defined in CheckOther
      uses function checkInterlockedDecrement() defined in CheckOther
      uses function checkUnusedLabel() defined in CheckOther
      uses function checkEvaluationOrder() defined in CheckOther
   function runSimplifiedChecks(const Tokenizer *,const Settings *,ErrorLogger *) in line 78
      protection public
      21 lines of code
      3 parameters
      1 conditional paths
      uses function clarifyCalculation() defined in CheckOther
      uses function clarifyStatement() defined in CheckOther
      uses function checkConstantFunctionParameter() defined in CheckOther
      uses function checkIncompleteStatement() defined in CheckOther
      uses function checkCastIntToCharAndBack() defined in CheckOther
      uses function checkMisusedScopedObject() defined in CheckOther
      uses function checkMemsetZeroBytes() defined in CheckOther
      uses function checkMemsetInvalid2ndParam() defined in CheckOther
      uses function checkSwitchCaseFallThrough() defined in CheckOther
      uses function checkPipeParameterSize() defined in CheckOther
      uses function checkInvalidFree() defined in CheckOther
      uses function checkRedundantCopy() defined in CheckOther
      uses function checkSuspiciousEqualityComparison() defined in CheckOther
      uses function checkComparisonFunctionIsAlwaysTrueOrFalse() defined in CheckOther
      uses variable result defined in triage-report.py
   function selfAssignmentError(const Token *,const std::string &) in line 235
      5 lines of code
      2 parameters
      2 conditional paths
      uses enumvalue warning defined in Severity
   function suspiciousCaseInSwitchError(const Token *,const std::string &) in line 233
      6 lines of code
      2 parameters
      1 conditional paths
      uses enumvalue warning defined in Severity
   function suspiciousEqualityComparisonError(const Token *) in line 234
      5 lines of code
      1 parameters
      1 conditional paths
      uses enumvalue warning defined in Severity
   function SuspiciousSemicolonError(const Token *) in line 249
      5 lines of code
      1 parameters
      9 conditional paths
      uses enumvalue warning defined in Severity
      uses function str(T &&) defined in Token
      uses function warningOldStylePointerCast() defined in CheckOther
      uses variable _settings defined in Check
      uses function isEnabled(T &&) defined in Settings
      uses variable _tokenizer defined in Check
      uses function isCPP() defined in Tokenizer
      uses function getSymbolDatabase() defined in Tokenizer
      uses variable functionScopes defined in SymbolDatabase
      uses variable function defined in Scope
      uses function isConstructor() defined in Function
      uses variable classDef defined in Scope
      uses variable classStart defined in Scope
      uses variable classEnd defined in Scope
      uses function next() defined in Token
      uses function strAt(int) defined in Token
      uses function type(const ::Type *) defined in Token
      uses function cstyleCastError(const Token *) defined in CheckOther
      uses enumvalue style defined in Severity
   function switchCaseFallThrough(const Token *) in line 232
      5 lines of code
      1 parameters
      1 conditional paths
      uses enumvalue style defined in Severity
   function unknownEvaluationOrder(const Token *) in line 258
      5 lines of code
      1 parameters
      1 conditional paths
      uses enumvalue error defined in Severity
      uses function expressionString() defined in Token
   function unreachableCodeError(const Token *,bool) in line 244
      5 lines of code
      2 parameters
      6 conditional paths
      uses enumvalue style defined in Severity
      uses function checkMemsetZeroBytes() defined in CheckOther
      uses variable _settings defined in Check
      uses function isEnabled(T &&) defined in Settings
      uses variable _tokenizer defined in Check
      uses function getSymbolDatabase() defined in Tokenizer
      uses variable functionScopes defined in SymbolDatabase
      uses variable classStart defined in Scope
      uses function next() defined in Token
      uses variable classEnd defined in Scope
      uses function numberOfArguments(const Token *) defined in astutils.cpp
      uses function link(Token *) defined in Token
      uses function str(T &&) defined in Token
      uses function memsetZeroBytesError(const Token *,const std::string &) defined in CheckOther
      uses function strAt(int) defined in Token
      uses enumvalue warning defined in Severity
   function unsignedLessThanZeroError(const Token *,const std::string &,bool) in line 245
      16 lines of code
      3 parameters
      2 conditional paths
      uses enumvalue style defined in Severity
   function unsignedPositiveError(const Token *,const std::string &,bool) in line 247
      13 lines of code
      3 parameters
      2 conditional paths
      uses enumvalue style defined in Severity
   function unusedLabelError(const Token *) in line 257
      5 lines of code
      1 parameters
      1 conditional paths
      uses enumvalue style defined in Severity
      uses function str(T &&) defined in Token
   function varFuncNullUBError(const Token *) in line 253
      46 lines of code
      1 parameters
      1 conditional paths
      uses enumvalue portability defined in Severity
   function variableScopeError(const Token *,const std::string &) in line 223
      22 lines of code
      2 parameters
      1 conditional paths
      uses enumvalue information defined in Severity
      uses enumvalue style defined in Severity
      uses enumvalue error defined in Severity
   function warningOldStylePointerCast() in line 107
      protection public
      27 lines of code
      0 parameters
      23 conditional paths
      uses variable _settings defined in Check
      uses function isEnabled(T &&) defined in Settings
      uses variable _tokenizer defined in Check
      uses function tokens() defined in Tokenizer
      uses function next() defined in Token
      uses function tokAt(int) defined in Token
      uses function str(T &&) defined in Token
      uses function cstyleCastError(const Token *) defined in CheckOther
      uses function strAt(int) defined in Token
      uses function varId() defined in Token
      uses function link(Token *) defined in Token
   function zerodivcondError(const Token *,const Token *,bool) in line 225
      10 lines of code
      3 parameters
      2 conditional paths
      uses variable linenr defined in triage-report.py
      uses function linenr() defined in Token
      uses enumvalue warning defined in Severity
      uses function eitherTheConditionIsRedundant(const Token *) defined in valueflow.h
   function zerodivError(const Token *,bool) in line 224
      4 lines of code
      2 parameters
      15 conditional paths
      uses enumvalue error defined in Severity
      uses function tokAt(int) defined in Token
      uses function str(T &&) defined in Token
      uses variable _settings defined in Check
      uses function isEnabled(T &&) defined in Settings
      uses variable _tokenizer defined in Check
      uses function tokens() defined in Tokenizer
      uses function next() defined in Token
      uses enumvalue warning defined in Severity
   function CheckOther() in line 40
      protection public
      2 lines of code
      0 parameters
      1 conditional paths
   function CheckOther(const Tokenizer *,const Settings *,ErrorLogger *) in line 44
      protection public
      3 lines of code
      3 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/lib/checkpostfixoperator.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/lib/checkpostfixoperator.h
module CheckPostfixOperator
   inherits from Check
   function classInfo() in line 70
      3 lines of code
      0 parameters
      1 conditional paths
   function getErrorMessages(ErrorLogger *,const Settings *) in line 61
      4 lines of code
      2 parameters
      1 conditional paths
      uses function postfixOperatorError(const Token *) defined in CheckPostfixOperator
   function myName() in line 66
      3 lines of code
      0 parameters
      1 conditional paths
   function postfixOperator() in line 55
      protection public
      31 lines of code
      0 parameters
      9 conditional paths
      uses variable _settings defined in Check
      uses function isEnabled(T &&) defined in Settings
      uses variable _tokenizer defined in Check
      uses function getSymbolDatabase() defined in Tokenizer
      uses variable functionScopes defined in SymbolDatabase
      uses variable classStart defined in Scope
      uses function next() defined in Token
      uses variable classEnd defined in Scope
      uses function astParent() defined in Token
      uses function str(T &&) defined in Token
      uses function isPointer() defined in Variable
      uses function isArray() defined in Variable
      uses function nameToken() defined in Variable
      uses function previous() defined in Token
      uses function postfixOperatorError(const Token *) defined in CheckPostfixOperator
      uses function type() defined in Variable
   function postfixOperatorError(const Token *) in line 59
      10 lines of code
      1 parameters
      1 conditional paths
      uses enumvalue performance defined in Severity
   function runSimplifiedChecks(const Tokenizer *,const Settings *,ErrorLogger *) in line 46
      protection public
      7 lines of code
      3 parameters
      2 conditional paths
      uses function isC() defined in Tokenizer
      uses function postfixOperator() defined in CheckPostfixOperator
   function CheckPostfixOperator() in line 38
      protection public
      2 lines of code
      0 parameters
      1 conditional paths
   function CheckPostfixOperator(const Tokenizer *,const Settings *,ErrorLogger *) in line 42
      protection public
      3 lines of code
      3 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/lib/checksizeof.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/lib/checksizeof.h
module CheckSizeof
   inherits from Check
   function arithOperationsOnVoidPointerError(const Token *,const std::string &,const std::string &) in line 99
      6 lines of code
      3 parameters
      1 conditional paths
      uses variable message defined in triage-report.py
      uses enumvalue portability defined in Severity
   function checkSizeofForArrayParameter() in line 76
      protection public
      23 lines of code
      0 parameters
      7 conditional paths
      uses variable _settings defined in Check
      uses function isEnabled(T &&) defined in Settings
      uses variable _tokenizer defined in Check
      uses function getSymbolDatabase() defined in Tokenizer
      uses variable functionScopes defined in SymbolDatabase
      uses variable classStart defined in Scope
      uses function next() defined in Token
      uses variable classEnd defined in Scope
      uses function str(T &&) defined in Token
      uses function variable(const Variable *) defined in Token
      uses function isArray() defined in Variable
      uses function isArgument() defined in Variable
      uses function isReference() defined in Variable
      uses function sizeofForArrayParameterError(const Token *) defined in CheckSizeof
   function checkSizeofForNumericParameter() in line 82
      protection public
      17 lines of code
      0 parameters
      5 conditional paths
      uses variable _settings defined in Check
      uses function isEnabled(T &&) defined in Settings
      uses variable _tokenizer defined in Check
      uses function getSymbolDatabase() defined in Tokenizer
      uses variable functionScopes defined in SymbolDatabase
      uses variable classStart defined in Scope
      uses function next() defined in Token
      uses variable classEnd defined in Scope
      uses function sizeofForNumericParameterError(const Token *) defined in CheckSizeof
   function checkSizeofForPointerSize() in line 79
      protection public
      114 lines of code
      0 parameters
      29 conditional paths
      uses variable _settings defined in Check
      uses function isEnabled(T &&) defined in Settings
      uses variable _tokenizer defined in Check
      uses function getSymbolDatabase() defined in Tokenizer
      uses variable functionScopes defined in SymbolDatabase
      uses variable classStart defined in Scope
      uses variable classEnd defined in Scope
      uses function next() defined in Token
      uses function tokAt(int) defined in Token
      uses function nextArgument() defined in Token
      uses function linkAt(int) defined in Token
      uses function divideBySizeofError(const Token *,const std::string &) defined in CheckSizeof
      uses function str(T &&) defined in Token
      uses function variable(const Variable *) defined in Token
      uses function isPointer() defined in Variable
      uses function isArray() defined in Variable
      uses function varId() defined in Token
      uses function sizeofForPointerError(const Token *,const std::string &) defined in CheckSizeof
   function classInfo() in line 121
      10 lines of code
      0 parameters
      1 conditional paths
   function divideBySizeofError(const Token *,const std::string &) in line 95
      5 lines of code
      2 parameters
      1 conditional paths
      uses enumvalue warning defined in Severity
   function divideSizeofError(const Token *) in line 92
      7 lines of code
      1 parameters
      1 conditional paths
      uses enumvalue warning defined in Severity
   function getErrorMessages(ErrorLogger *,const Settings *) in line 101
      15 lines of code
      2 parameters
      1 conditional paths
      uses function sizeofForArrayParameterError(const Token *) defined in CheckSizeof
      uses function sizeofForPointerError(const Token *,const std::string &) defined in CheckSizeof
      uses function divideBySizeofError(const Token *,const std::string &) defined in CheckSizeof
      uses function sizeofForNumericParameterError(const Token *) defined in CheckSizeof
      uses function sizeofsizeofError(const Token *) defined in CheckSizeof
      uses function sizeofCalculationError(const Token *,bool) defined in CheckSizeof
      uses function multiplySizeofError(const Token *) defined in CheckSizeof
      uses function divideSizeofError(const Token *) defined in CheckSizeof
      uses function sizeofVoidError(const Token *) defined in CheckSizeof
      uses function sizeofDereferencedVoidPointerError(const Token *,const std::string &) defined in CheckSizeof
      uses function arithOperationsOnVoidPointerError(const Token *,const std::string &,const std::string &) defined in CheckSizeof
   function multiplySizeofError(const Token *) in line 91
      5 lines of code
      1 parameters
      1 conditional paths
      uses enumvalue warning defined in Severity
   function myName() in line 117
      3 lines of code
      0 parameters
      1 conditional paths
   function runChecks(const Tokenizer *,const Settings *,ErrorLogger *) in line 49
      protection public
      12 lines of code
      3 parameters
      1 conditional paths
      uses function sizeofsizeof() defined in CheckSizeof
      uses function sizeofCalculation() defined in CheckSizeof
      uses function suspiciousSizeofCalculation() defined in CheckSizeof
      uses function checkSizeofForArrayParameter() defined in CheckSizeof
      uses function checkSizeofForPointerSize() defined in CheckSizeof
      uses function checkSizeofForNumericParameter() defined in CheckSizeof
      uses function sizeofVoid() defined in CheckSizeof
   function runSimplifiedChecks(const Tokenizer *,const Settings *,ErrorLogger *) in line 63
      protection public
      2 lines of code
      3 parameters
      1 conditional paths
   function sizeofCalculation() in line 70
      protection public
      26 lines of code
      0 parameters
      7 conditional paths
      uses variable _settings defined in Check
      uses function isEnabled(T &&) defined in Settings
      uses variable inconclusive defined in Settings
      uses variable _tokenizer defined in Check
      uses function tokens() defined in Tokenizer
      uses function next() defined in Token
      uses function previous() defined in Token
      uses function tokAt(int) defined in Token
      uses function astOperand2(Token *) defined in Token
      uses function isCalculation() defined in Token
      uses function isExpandedMacro() defined in Token
      uses function sizeofCalculationError(const Token *,bool) defined in CheckSizeof
   function sizeofCalculationError(const Token *,bool) in line 90
      5 lines of code
      2 parameters
      1 conditional paths
      uses enumvalue warning defined in Severity
   function sizeofDereferencedVoidPointerError(const Token *,const std::string &) in line 98
      6 lines of code
      2 parameters
      1 conditional paths
      uses variable message defined in triage-report.py
      uses enumvalue portability defined in Severity
   function sizeofForArrayParameterError(const Token *) in line 93
      15 lines of code
      1 parameters
      1 conditional paths
      uses enumvalue warning defined in Severity
   function sizeofForNumericParameterError(const Token *) in line 96
      8 lines of code
      1 parameters
      1 conditional paths
      uses enumvalue warning defined in Severity
   function sizeofForPointerError(const Token *,const std::string &) in line 94
      8 lines of code
      2 parameters
      1 conditional paths
      uses enumvalue warning defined in Severity
   function sizeofsizeof() in line 67
      protection public
      12 lines of code
      0 parameters
      4 conditional paths
      uses variable _settings defined in Check
      uses function isEnabled(T &&) defined in Settings
      uses variable _tokenizer defined in Check
      uses function tokens() defined in Tokenizer
      uses function next() defined in Token
      uses function sizeofsizeofError(const Token *) defined in CheckSizeof
   function sizeofsizeofError(const Token *) in line 89
      8 lines of code
      1 parameters
      1 conditional paths
      uses enumvalue warning defined in Severity
   function sizeofVoid() in line 85
      protection public
      35 lines of code
      0 parameters
      11 conditional paths
      uses variable _settings defined in Check
      uses function isEnabled(T &&) defined in Settings
      uses variable _tokenizer defined in Check
      uses function tokens() defined in Tokenizer
      uses function next() defined in Token
      uses function sizeofVoidError(const Token *) defined in CheckSizeof
      uses variable type defined in ValueType
      uses variable pointer defined in ValueType
      uses function sizeofDereferencedVoidPointerError(const Token *,const std::string &) defined in CheckSizeof
      uses function isIntegral() defined in ValueType
      uses function arithOperationsOnVoidPointerError(const Token *,const std::string &,const std::string &) defined in CheckSizeof
      uses function str() defined in ValueType
   function sizeofVoidError(const Token *) in line 97
      6 lines of code
      1 parameters
      1 conditional paths
      uses variable message defined in triage-report.py
      uses enumvalue portability defined in Severity
   function suspiciousSizeofCalculation() in line 73
      protection public
      18 lines of code
      0 parameters
      7 conditional paths
      uses variable _settings defined in Check
      uses function isEnabled(T &&) defined in Settings
      uses variable inconclusive defined in Settings
      uses variable _tokenizer defined in Check
      uses function tokens() defined in Tokenizer
      uses function next() defined in Token
      uses function linkAt(int) defined in Token
      uses function previous() defined in Token
      uses function variable(const Variable *) defined in Token
      uses function strAt(int) defined in Token
      uses function isPointer() defined in Variable
      uses function isArray() defined in Variable
      uses function divideSizeofError(const Token *) defined in CheckSizeof
      uses function astOperand1(Token *) defined in Token
      uses function multiplySizeofError(const Token *) defined in CheckSizeof
   function CheckSizeof() in line 40
      protection public
      2 lines of code
      0 parameters
      1 conditional paths
   function CheckSizeof(const Tokenizer *,const Settings *,ErrorLogger *) in line 44
      protection public
      3 lines of code
      3 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/lib/checkstl.cpp
module checkstl.cpp
   function skipMembers(const Token *) in line 61
      protection public
      6 lines of code
      1 parameters
      2 conditional paths
      uses function tokAt(int) defined in Token
   function if_findCompare(const Token *const) in line 627
      protection public
      15 lines of code
      1 parameters
      6 conditional paths
      uses function astParent() defined in Token
      uses function isComparisonOp() defined in Token
      uses function astOperand1(Token *) defined in Token
      uses function astOperand2(Token *) defined in Token
      uses function isArithmeticalOp() defined in Token
      uses function str(T &&) defined in Token
      uses function isAssignmentOp() defined in Token
   function isCpp03ContainerSizeSlow(const Token *) in line 729
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses function variable(const Variable *) defined in Token
      uses function isStlType() defined in Variable
   function isLocal(const Token *) in line 917
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function variable(const Variable *) defined in Token
      uses function isStatic() defined in Variable
      uses function isLocal() defined in Variable
   function hasArrayEnd(const Token *) in line 1095
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function previous() defined in Token
   function hasArrayEndParen(const Token *) in line 1101
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses function previous() defined in Token
      uses function tokAt(int) defined in Token
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/lib/checkstl.h
module CheckStl
   inherits from Check
   function autoPointerArrayError(const Token *) in line 175
      7 lines of code
      1 parameters
      1 conditional paths
      uses enumvalue error defined in Severity
   function autoPointerContainerError(const Token *) in line 174
      7 lines of code
      1 parameters
      1 conditional paths
      uses enumvalue error defined in Severity
   function autoPointerError(const Token *) in line 173
      7 lines of code
      1 parameters
      1 conditional paths
      uses enumvalue style defined in Severity
   function autoPointerMallocError(const Token *,const std::string &) in line 176
      6 lines of code
      2 parameters
      1 conditional paths
      uses enumvalue error defined in Severity
   function checkAutoPointer() in line 134
      protection public
      84 lines of code
      0 parameters
      25 conditional paths
      uses variable _settings defined in Check
      uses variable library defined in Settings
      uses function alloc(const char) defined in Library
      uses function isEnabled(T &&) defined in Settings
      uses variable _tokenizer defined in Check
      uses function tokens() defined in Tokenizer
      uses function next() defined in Token
      uses function autoPointerContainerError(const Token *) defined in CheckStl
      uses function linkAt(int) defined in Token
      uses function tokAt(int) defined in Token
      uses function autoPointerArrayError(const Token *) defined in CheckStl
      uses function autoPointerMallocError(const Token *,const std::string &) defined in CheckStl
      uses function str(T &&) defined in Token
      uses function varId() defined in Token
      uses function previous() defined in Token
      uses function autoPointerError(const Token *) defined in CheckStl
   function checkDereferenceInvalidIterator() in line 140
      protection public
      61 lines of code
      0 parameters
      14 conditional paths
      uses variable _settings defined in Check
      uses function isEnabled(T &&) defined in Settings
      uses variable _tokenizer defined in Check
      uses function getSymbolDatabase() defined in Tokenizer
      uses variable scopeList defined in SymbolDatabase
      uses enumvalue eIf defined in Scope
      uses enumvalue eDo defined in Scope
      uses enumvalue eWhile defined in Scope
      uses enumvalue eFor defined in Scope
      uses function next() defined in Token
      uses function link(Token *) defined in Token
      uses function tokAt(int) defined in Token
      uses function varId() defined in Token
      uses function dereferenceInvalidIteratorError(const Token *,const std::string &) defined in CheckStl
      uses function strAt(int) defined in Token
   function classInfo() in line 223
      16 lines of code
      0 parameters
      1 conditional paths
   function dereferenceErasedError(const Token *,const Token *,const std::string &) in line 148
      protection public
      17 lines of code
      3 parameters
      2 conditional paths
      uses enumvalue error defined in Severity
   function dereferenceInvalidIteratorError(const Token *,const std::string &) in line 184
      6 lines of code
      2 parameters
      1 conditional paths
      uses enumvalue warning defined in Severity
   function erase() in line 94
      protection public
      18 lines of code
      0 parameters
      6 conditional paths
      uses variable _tokenizer defined in Check
      uses function getSymbolDatabase() defined in Tokenizer
      uses variable scopeList defined in SymbolDatabase
      uses enumvalue eFor defined in Scope
      uses function linkAt(int) defined in Token
      uses function tokAt(int) defined in Token
      uses function previous() defined in Token
      uses function isName() defined in Token
      uses function eraseCheckLoopVar(const Scope &,const Variable *) defined in CheckStl
      uses function variable(const Variable *) defined in Token
      uses enumvalue eWhile defined in Scope
   function eraseCheckLoopVar(const Scope &,const Variable *) in line 95
      protection public
      39 lines of code
      2 parameters
      15 conditional paths
      uses function typeEndToken() defined in Variable
      uses variable classStart defined in Scope
      uses variable classEnd defined in Scope
      uses function next() defined in Token
      uses function declarationId() defined in Variable
      uses function link(Token *) defined in Token
      uses function str(T &&) defined in Token
      uses function linkAt(int) defined in Token
      uses function varId() defined in Token
      uses function dereferenceErasedError(const Token *,const Token *,const std::string &) defined in CheckStl
      uses variable classDef defined in Scope
      uses function nameToken() defined in Variable
   function getErrorMessages(ErrorLogger *,const Settings *) in line 188
      30 lines of code
      2 parameters
      1 conditional paths
      uses function invalidIteratorError(const Token *,const std::string &) defined in CheckStl
      uses function iteratorsError(const Token *,const std::string &,const std::string &) defined in CheckStl
      uses function mismatchingContainersError(const Token *) defined in CheckStl
      uses function dereferenceErasedError(const Token *,const Token *,const std::string &) defined in CheckStl
      uses function stlOutOfBoundsError(const Token *,const std::string &,const std::string &,bool) defined in CheckStl
      uses function invalidPointerError(const Token *,const std::string &,const std::string &) defined in CheckStl
      uses function stlBoundariesError(const Token *) defined in CheckStl
      uses function if_findError(const Token *,bool) defined in CheckStl
      uses function string_c_strError(const Token *) defined in CheckStl
      uses function string_c_strReturn(const Token *) defined in CheckStl
      uses function string_c_strParam(const Token *,unsigned int) defined in CheckStl
      uses function sizeError(const Token *) defined in CheckStl
      uses function missingComparisonError(const Token *,const Token *) defined in CheckStl
      uses function redundantIfRemoveError(const Token *) defined in CheckStl
      uses function autoPointerError(const Token *) defined in CheckStl
      uses function autoPointerContainerError(const Token *) defined in CheckStl
      uses function autoPointerArrayError(const Token *) defined in CheckStl
      uses function autoPointerMallocError(const Token *,const std::string &) defined in CheckStl
      uses function uselessCallsReturnValueError(const Token *,const std::string &,const std::string &) defined in CheckStl
      uses function uselessCallsSwapError(const Token *,const std::string &) defined in CheckStl
      uses function uselessCallsSubstrError(const Token *,bool) defined in CheckStl
      uses function uselessCallsEmptyError(const Token *) defined in CheckStl
      uses function uselessCallsRemoveError(const Token *,const std::string &) defined in CheckStl
      uses function dereferenceInvalidIteratorError(const Token *,const std::string &) defined in CheckStl
      uses function readingEmptyStlContainerError(const Token *) defined in CheckStl
   function if_find() in line 109
      protection public
      67 lines of code
      0 parameters
      18 conditional paths
      uses variable _settings defined in Check
      uses function isEnabled(T &&) defined in Settings
      uses variable _tokenizer defined in Check
      uses function getSymbolDatabase() defined in Tokenizer
      uses variable scopeList defined in SymbolDatabase
      uses enumvalue eIf defined in Scope
      uses enumvalue eWhile defined in Scope
      uses function next() defined in Token
      uses function str(T &&) defined in Token
      uses variable library defined in Settings
      uses function detectContainer(const Token *,bool) defined in Library
      uses function tokAt(int) defined in Token
      uses function astParent() defined in Token
      uses variable type_templateArgNo defined in Library::Container
      uses function nextTemplateArgument() defined in Token
      uses function getAction(const std::string &) defined in Library::Container
      uses enumvalue FIND defined in Library::Container
      uses function getYield(const std::string &) defined in Library::Container
      uses enumvalue ITERATOR defined in Library::Container
      uses function if_findError(const Token *,bool) defined in CheckStl
      uses variable stdStringLike defined in Library::Container
   function if_findError(const Token *,bool) in line 169
      12 lines of code
      2 parameters
      2 conditional paths
      uses enumvalue performance defined in Severity
      uses enumvalue warning defined in Severity
   function invalidIteratorError(const Token *,const std::string &) in line 163
      4 lines of code
      2 parameters
      1 conditional paths
      uses enumvalue error defined in Severity
   function invalidIteratorError(const Token *,const std::string &,const std::string &) in line 166
      4 lines of code
      3 parameters
      1 conditional paths
      uses enumvalue error defined in Severity
   function invalidPointerError(const Token *,const std::string &,const std::string &) in line 167
      4 lines of code
      3 parameters
      1 conditional paths
      uses enumvalue error defined in Severity
   function iterators() in line 82
      protection public
      165 lines of code
      0 parameters
      31 conditional paths
      uses variable _tokenizer defined in Check
      uses function getSymbolDatabase() defined in Tokenizer
      uses function getVariableListSize() defined in SymbolDatabase
      uses function getVariableFromVarId(std::size_t) defined in SymbolDatabase
      uses function isLocal() defined in Variable
      uses function typeEndToken() defined in Variable
      uses function str(T &&) defined in Token
      uses function tokAt(int) defined in Token
      uses function variable(const Variable *) defined in Token
      uses variable _settings defined in Check
      uses variable library defined in Settings
      uses function detectContainer(const Token *,bool) defined in Library
      uses function getYield(const std::string &) defined in Library::Container
      uses function strAt(int) defined in Token
      uses enumvalue END_ITERATOR defined in Library::Container
      uses enumvalue START_ITERATOR defined in Library::Container
      uses enumvalue ITERATOR defined in Library::Container
      uses function type() defined in Variable
      uses function getFunction(const std::string &) defined in Type
      uses function argCount() defined in Function
      uses function nameToken() defined in Variable
      uses function next() defined in Token
      uses function scope() defined in Variable
      uses variable classEnd defined in Scope
      uses function declarationId() defined in Variable
      uses function iteratorsError(const Token *,const std::string &,const std::string &) defined in CheckStl
      uses function name() defined in Variable
      uses function invalidIteratorError(const Token *,const std::string &) defined in CheckStl
      uses function typeStartToken() defined in Variable
      uses function previous() defined in Token
      uses function scope(const Scope *) defined in Token
      uses function linkAt(int) defined in Token
      uses function dereferenceErasedError(const Token *,const Token *,const std::string &) defined in CheckStl
   function iteratorsError(const Token *,const std::string &,const std::string &) in line 164
      4 lines of code
      3 parameters
      1 conditional paths
      uses enumvalue error defined in Severity
   function mismatchingContainers() in line 88
      protection public
      47 lines of code
      0 parameters
      16 conditional paths
      uses variable _tokenizer defined in Check
      uses function getSymbolDatabase() defined in Tokenizer
      uses variable functionScopes defined in SymbolDatabase
      uses variable classStart defined in Scope
      uses function next() defined in Token
      uses variable classEnd defined in Scope
      uses function tokAt(int) defined in Token
      uses function str(T &&) defined in Token
      uses function strAt(int) defined in Token
      uses function mismatchingContainersError(const Token *) defined in CheckStl
      uses function nextArgument() defined in Token
      uses function linkAt(int) defined in Token
      uses function getVariableListSize() defined in SymbolDatabase
      uses function getVariableFromVarId(std::size_t) defined in SymbolDatabase
      uses function isStlStringType() defined in Variable
      uses function nameToken() defined in Variable
   function mismatchingContainersError(const Token *) in line 165
      4 lines of code
      1 parameters
      1 conditional paths
      uses enumvalue error defined in Severity
   function missingComparison() in line 128
      protection public
      58 lines of code
      0 parameters
      18 conditional paths
      uses variable _settings defined in Check
      uses function isEnabled(T &&) defined in Settings
      uses variable _tokenizer defined in Check
      uses function getSymbolDatabase() defined in Tokenizer
      uses variable scopeList defined in SymbolDatabase
      uses enumvalue eFor defined in Scope
      uses function tokAt(int) defined in Token
      uses function next() defined in Token
      uses function linkAt(int) defined in Token
      uses function missingComparisonError(const Token *,const Token *) defined in CheckStl
   function missingComparisonError(const Token *,const Token *) in line 156
      20 lines of code
      2 parameters
      3 conditional paths
      uses function linenr() defined in Token
      uses enumvalue warning defined in Severity
   function myName() in line 219
      3 lines of code
      0 parameters
      1 conditional paths
   function pushback() in line 101
      protection public
      136 lines of code
      0 parameters
      32 conditional paths
      uses variable _tokenizer defined in Check
      uses function getSymbolDatabase() defined in Tokenizer
      uses variable functionScopes defined in SymbolDatabase
      uses variable classStart defined in Scope
      uses function next() defined in Token
      uses variable classEnd defined in Scope
      uses function tokAt(int) defined in Token
      uses function variable(const Variable *) defined in Token
      uses function scope(const Scope *) defined in Token
      uses function varId() defined in Token
      uses function invalidPointerError(const Token *,const std::string &,const std::string &) defined in CheckStl
      uses function getVariableListSize() defined in SymbolDatabase
      uses function getVariableFromVarId(std::size_t) defined in SymbolDatabase
      uses function isLocal() defined in Variable
      uses function typeEndToken() defined in Variable
      uses function typeStartToken() defined in Variable
      uses function scope() defined in Variable
      uses function nameToken() defined in Variable
      uses function linkAt(int) defined in Token
      uses function str(T &&) defined in Token
      uses function previous() defined in Token
      uses function isAssignmentOp() defined in Token
      uses function strAt(int) defined in Token
      uses function invalidIteratorError(const Token *,const std::string &) defined in CheckStl
      uses function name() defined in Variable
   function readingEmptyStlContainer() in line 151
      protection public
      66 lines of code
      0 parameters
      19 conditional paths
      uses variable _settings defined in Check
      uses function isEnabled(T &&) defined in Settings
      uses variable inconclusive defined in Settings
      uses variable _tokenizer defined in Check
      uses function getSymbolDatabase() defined in Tokenizer
      uses variable scopeList defined in SymbolDatabase
      uses enumvalue eFunction defined in Scope
      uses function next() defined in Token
      uses function linkAt(int) defined in Token
      uses function link(Token *) defined in Token
      uses function varId() defined in Token
      uses function readingEmptyStlContainer_parseUsage(const Token *,const Library::Container *,std::map< unsigned int, const Library::Container * > &,bool) defined in CheckStl
      uses function isArrayOrPointer() defined in Variable
      uses function typeStartToken() defined in Variable
      uses function isStandardType() defined in Token
      uses function nameToken() defined in Variable
      uses function isLocal() defined in Variable
      uses function isStatic() defined in Variable
      uses variable library defined in Settings
      uses function detectContainer(const Token *,bool) defined in Library
      uses function declarationId() defined in Variable
   function readingEmptyStlContainer_parseUsage(const Token *,const Library::Container *,std::map< unsigned int, const Library::Container * > &,bool) in line 154
      41 lines of code
      4 parameters
      13 conditional paths
      uses function strAt(int) defined in Token
      uses function linkAt(int) defined in Token
      uses function varId() defined in Token
      uses variable arrayLike_indexOp defined in Library::Container
      uses function readingEmptyStlContainerError(const Token *) defined in CheckStl
      uses function getYield(const std::string &) defined in Library::Container
      uses function tokAt(int) defined in Token
      uses function astParent() defined in Token
      uses enumvalue NO_YIELD defined in Library::Container
      uses enumvalue ITERATOR defined in Library::Container
      uses enumvalue START_ITERATOR defined in Library::Container
      uses enumvalue END_ITERATOR defined in Library::Container
      uses function getAction(const std::string &) defined in Library::Container
      uses enumvalue FIND defined in Library::Container
      uses enumvalue ERASE defined in Library::Container
      uses enumvalue POP defined in Library::Container
      uses enumvalue CLEAR defined in Library::Container
   function readingEmptyStlContainerError(const Token *) in line 186
      4 lines of code
      1 parameters
      1 conditional paths
      uses enumvalue style defined in Severity
      uses function str(T &&) defined in Token
   function redundantCondition() in line 120
      protection public
      30 lines of code
      0 parameters
      6 conditional paths
      uses variable _settings defined in Check
      uses function isEnabled(T &&) defined in Settings
      uses variable _tokenizer defined in Check
      uses function getSymbolDatabase() defined in Tokenizer
      uses variable scopeList defined in SymbolDatabase
      uses enumvalue eIf defined in Scope
      uses function tokAt(int) defined in Token
      uses function str(T &&) defined in Token
      uses function redundantIfRemoveError(const Token *) defined in CheckStl
   function redundantIfRemoveError(const Token *) in line 171
      7 lines of code
      1 parameters
      1 conditional paths
      uses enumvalue style defined in Severity
   function runSimplifiedChecks(const Tokenizer *,const Settings *,ErrorLogger *) in line 46
      protection public
      24 lines of code
      3 parameters
      2 conditional paths
      uses function isCPP() defined in Tokenizer
      uses function stlOutOfBounds() defined in CheckStl
      uses function iterators() defined in CheckStl
      uses function mismatchingContainers() defined in CheckStl
      uses function erase() defined in CheckStl
      uses function pushback() defined in CheckStl
      uses function stlBoundaries() defined in CheckStl
      uses function if_find() defined in CheckStl
      uses function string_c_str() defined in CheckStl
      uses function checkAutoPointer() defined in CheckStl
      uses function uselessCalls() defined in CheckStl
      uses function checkDereferenceInvalidIterator() defined in CheckStl
      uses function size() defined in CheckStl
      uses function redundantCondition() defined in CheckStl
      uses function missingComparison() defined in CheckStl
      uses function readingEmptyStlContainer() defined in CheckStl
   function size() in line 115
      protection public
      48 lines of code
      0 parameters
      13 conditional paths
      uses variable _settings defined in Check
      uses function isEnabled(T &&) defined in Settings
      uses variable standards defined in Settings
      uses variable cpp defined in Standards
      uses enumvalue CPP11 defined in Standards
      uses variable _tokenizer defined in Check
      uses function getSymbolDatabase() defined in Tokenizer
      uses variable functionScopes defined in SymbolDatabase
      uses variable classStart defined in Scope
      uses function next() defined in Token
      uses variable classEnd defined in Scope
      uses function tokAt(int) defined in Token
      uses function isArithmeticalOp() defined in Token
      uses function sizeError(const Token *) defined in CheckStl
      uses function str(T &&) defined in Token
      uses enumvalue eLogicalOp defined in Token
   function sizeError(const Token *) in line 170
      10 lines of code
      1 parameters
      1 conditional paths
      uses function str(T &&) defined in Token
      uses enumvalue performance defined in Severity
   function stlBoundaries() in line 106
      protection public
      22 lines of code
      0 parameters
      7 conditional paths
      uses variable _tokenizer defined in Check
      uses function getSymbolDatabase() defined in Tokenizer
      uses function getVariableListSize() defined in SymbolDatabase
      uses function getVariableFromVarId(std::size_t) defined in SymbolDatabase
      uses function scope() defined in Variable
      uses function isExecutable() defined in Scope
      uses variable _settings defined in Check
      uses variable library defined in Settings
      uses function detectContainer(const Token *,bool) defined in Library
      uses function typeStartToken() defined in Variable
      uses variable opLessAllowed defined in Library::Container
      uses variable classEnd defined in Scope
      uses function nameToken() defined in Variable
      uses function next() defined in Token
      uses function declarationId() defined in Variable
      uses function stlBoundariesError(const Token *) defined in CheckStl
   function stlBoundariesError(const Token *) in line 168
      7 lines of code
      1 parameters
      1 conditional paths
      uses enumvalue error defined in Severity
   function stlOutOfBounds() in line 76
      protection public
      61 lines of code
      0 parameters
      17 conditional paths
      uses variable _tokenizer defined in Check
      uses function getSymbolDatabase() defined in Tokenizer
      uses variable scopeList defined in SymbolDatabase
      uses enumvalue eFor defined in Scope
      uses enumvalue eWhile defined in Scope
      uses enumvalue eIf defined in Scope
      uses enumvalue eDo defined in Scope
      uses function tokAt(int) defined in Token
      uses function linkAt(int) defined in Token
      uses function next() defined in Token
      uses function variable(const Variable *) defined in Token
      uses variable _settings defined in Check
      uses variable library defined in Settings
      uses function detectContainer(const Token *,bool) defined in Library
      uses function typeStartToken() defined in Variable
      uses function getYield(const std::string &) defined in Library::Container
      uses function strAt(int) defined in Token
      uses enumvalue SIZE defined in Library::Container
      uses function varId() defined in Token
      uses function declarationId() defined in Variable
      uses variable arrayLike_indexOp defined in Library::Container
      uses function stlOutOfBoundsError(const Token *,const std::string &,const std::string &,bool) defined in CheckStl
      uses function name() defined in Variable
      uses enumvalue AT_INDEX defined in Library::Container
   function stlOutOfBoundsError(const Token *,const std::string &,const std::string &,bool) in line 162
      7 lines of code
      4 parameters
      2 conditional paths
      uses enumvalue error defined in Severity
   function string_c_str() in line 131
      protection public
      140 lines of code
      0 parameters
      43 conditional paths
      uses variable _settings defined in Check
      uses variable inconclusive defined in Settings
      uses function isEnabled(T &&) defined in Settings
      uses variable _tokenizer defined in Check
      uses function getSymbolDatabase() defined in Tokenizer
      uses variable scopeList defined in SymbolDatabase
      uses enumvalue eFunction defined in Scope
      uses function next() defined in Token
      uses function string_c_strThrowError(const Token *) defined in CheckStl
      uses function isPointer() defined in Variable
      uses function isStlType() defined in Variable
      uses function string_c_strError(const Token *) defined in CheckStl
      uses function tokAt(int) defined in Token
      uses function nextArgument() defined in Token
      uses function link(Token *) defined in Token
      uses function previous() defined in Token
      uses function variable(const Variable *) defined in Token
      uses function isStlStringType() defined in Variable
      uses function string_c_strParam(const Token *,unsigned int) defined in CheckStl
      uses variable tokenDef defined in Function
      uses function string_c_strReturn(const Token *) defined in CheckStl
   function string_c_strError(const Token *) in line 158
      5 lines of code
      1 parameters
      1 conditional paths
      uses enumvalue error defined in Severity
   function string_c_strParam(const Token *,unsigned int) in line 160
      7 lines of code
      2 parameters
      1 conditional paths
      uses enumvalue performance defined in Severity
   function string_c_strReturn(const Token *) in line 159
      5 lines of code
      1 parameters
      1 conditional paths
      uses enumvalue performance defined in Severity
   function string_c_strThrowError(const Token *) in line 157
      5 lines of code
      1 parameters
      1 conditional paths
      uses enumvalue error defined in Severity
   function uselessCalls() in line 137
      protection public
      36 lines of code
      0 parameters
      13 conditional paths
      uses variable _settings defined in Check
      uses function isEnabled(T &&) defined in Settings
      uses variable _tokenizer defined in Check
      uses function getSymbolDatabase() defined in Tokenizer
      uses variable functionScopes defined in SymbolDatabase
      uses variable classStart defined in Scope
      uses variable classEnd defined in Scope
      uses function next() defined in Token
      uses function uselessCallsReturnValueError(const Token *,const std::string &,const std::string &) defined in CheckStl
      uses function uselessCallsSwapError(const Token *,const std::string &) defined in CheckStl
      uses function uselessCallsSubstrError(const Token *,bool) defined in CheckStl
      uses function uselessCallsEmptyError(const Token *) defined in CheckStl
      uses function uselessCallsRemoveError(const Token *,const std::string &) defined in CheckStl
   function uselessCallsEmptyError(const Token *) in line 181
      4 lines of code
      1 parameters
      1 conditional paths
      uses enumvalue warning defined in Severity
   function uselessCallsRemoveError(const Token *,const std::string &) in line 182
      6 lines of code
      2 parameters
      1 conditional paths
      uses enumvalue warning defined in Severity
   function uselessCallsReturnValueError(const Token *,const std::string &,const std::string &) in line 178
      10 lines of code
      3 parameters
      1 conditional paths
      uses enumvalue warning defined in Severity
   function uselessCallsSubstrError(const Token *,bool) in line 180
      7 lines of code
      2 parameters
      2 conditional paths
      uses enumvalue performance defined in Severity
   function uselessCallsSwapError(const Token *,const std::string &) in line 179
      9 lines of code
      2 parameters
      1 conditional paths
      uses enumvalue performance defined in Severity
   function CheckStl() in line 37
      protection public
      2 lines of code
      0 parameters
      1 conditional paths
   function CheckStl(const Tokenizer *,const Settings *,ErrorLogger *) in line 41
      protection public
      3 lines of code
      3 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/lib/checkstring.cpp
module checkstring.cpp
   function isChar(const Variable *) in line 222
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function isPointer() defined in Variable
      uses function isArray() defined in Variable
      uses function typeStartToken() defined in Variable
      uses function str(T &&) defined in Token
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/lib/checkstring.h
module CheckString
   inherits from Check
   function alwaysTrueFalseStringCompareError(const Token *,const std::string &,const std::string &) in line 89
      11 lines of code
      3 parameters
      1 conditional paths
      uses enumvalue warning defined in Severity
   function alwaysTrueStringVariableCompareError(const Token *,const std::string &,const std::string &) in line 90
      7 lines of code
      3 parameters
      1 conditional paths
      uses enumvalue warning defined in Severity
   function checkAlwaysTrueOrFalseStringCompare() in line 78
      protection public
      40 lines of code
      0 parameters
      12 conditional paths
      uses variable _settings defined in Check
      uses function isEnabled(T &&) defined in Settings
      uses variable _tokenizer defined in Check
      uses function tokens() defined in Tokenizer
      uses function next() defined in Token
      uses function alwaysTrueFalseStringCompareError(const Token *,const std::string &,const std::string &) defined in CheckString
      uses function alwaysTrueStringVariableCompareError(const Token *,const std::string &,const std::string &) defined in CheckString
   function checkIncorrectStringCompare() in line 72
      protection public
      48 lines of code
      0 parameters
      15 conditional paths
      uses variable _settings defined in Check
      uses function isEnabled(T &&) defined in Settings
      uses variable _tokenizer defined in Check
      uses function getSymbolDatabase() defined in Tokenizer
      uses variable functionScopes defined in SymbolDatabase
      uses variable classStart defined in Scope
      uses function next() defined in Token
      uses variable classEnd defined in Scope
      uses function previous() defined in Token
      uses function link(Token *) defined in Token
      uses function linkAt(int) defined in Token
      uses function incorrectStringCompareError(const Token *,const std::string &,const std::string &) defined in CheckString
      uses function strAt(int) defined in Token
      uses function incorrectStringBooleanError(const Token *,const std::string &) defined in CheckString
   function checkSuspiciousStringCompare() in line 75
      protection public
      60 lines of code
      0 parameters
      20 conditional paths
      uses variable _settings defined in Check
      uses function isEnabled(T &&) defined in Settings
      uses variable _tokenizer defined in Check
      uses function getSymbolDatabase() defined in Tokenizer
      uses variable functionScopes defined in SymbolDatabase
      uses variable classStart defined in Scope
      uses function next() defined in Token
      uses variable classEnd defined in Scope
      uses enumvalue eComparisonOp defined in Token
      uses function astOperand1(Token *) defined in Token
      uses function astOperand2(Token *) defined in Token
      uses function tokType() defined in Token
      uses enumvalue eString defined in Token
      uses enumvalue eNumber defined in Token
      uses function str(T &&) defined in Token
      uses function isC() defined in Tokenizer
      uses function variable(const Variable *) defined in Token
      uses function isName() defined in Token
      uses function astParent() defined in Token
      uses function expressionString() defined in Token
      uses function isArrayOrPointer() defined in Variable
      uses function suspiciousStringCompareError(const Token *,const std::string &) defined in CheckString
      uses function originalName() defined in Token
      uses function isPointer() defined in Variable
      uses function suspiciousStringCompareError_char(const Token *,const std::string &) defined in CheckString
   function classInfo() in line 112
      9 lines of code
      0 parameters
      1 conditional paths
   function getErrorMessages(ErrorLogger *,const Settings *) in line 94
      13 lines of code
      2 parameters
      1 conditional paths
      uses function stringLiteralWriteError(const Token *,const Token *) defined in CheckString
      uses function sprintfOverlappingDataError(const Token *,const std::string &) defined in CheckString
      uses function strPlusCharError(const Token *) defined in CheckString
      uses function incorrectStringCompareError(const Token *,const std::string &,const std::string &) defined in CheckString
      uses function suspiciousStringCompareError(const Token *,const std::string &) defined in CheckString
      uses function suspiciousStringCompareError_char(const Token *,const std::string &) defined in CheckString
      uses function incorrectStringBooleanError(const Token *,const std::string &) defined in CheckString
      uses function alwaysTrueFalseStringCompareError(const Token *,const std::string &,const std::string &) defined in CheckString
      uses function alwaysTrueStringVariableCompareError(const Token *,const std::string &,const std::string &) defined in CheckString
   function incorrectStringBooleanError(const Token *,const std::string &) in line 88
      4 lines of code
      2 parameters
      1 conditional paths
      uses enumvalue warning defined in Severity
   function incorrectStringCompareError(const Token *,const std::string &,const std::string &) in line 87
      4 lines of code
      3 parameters
      1 conditional paths
      uses enumvalue warning defined in Severity
   function myName() in line 108
      3 lines of code
      0 parameters
      1 conditional paths
   function runChecks(const Tokenizer *,const Settings *,ErrorLogger *) in line 46
      protection public
      7 lines of code
      3 parameters
      1 conditional paths
      uses function strPlusChar() defined in CheckString
      uses function checkSuspiciousStringCompare() defined in CheckString
   function runSimplifiedChecks(const Tokenizer *,const Settings *,ErrorLogger *) in line 55
      protection public
      9 lines of code
      3 parameters
      1 conditional paths
      uses function checkIncorrectStringCompare() defined in CheckString
      uses function checkAlwaysTrueOrFalseStringCompare() defined in CheckString
      uses function sprintfOverlappingData() defined in CheckString
      uses function stringLiteralWrite() defined in CheckString
   function sprintfOverlappingData() in line 81
      protection public
      38 lines of code
      0 parameters
      9 conditional paths
      uses variable _tokenizer defined in Check
      uses function getSymbolDatabase() defined in Tokenizer
      uses variable functionScopes defined in SymbolDatabase
      uses variable classStart defined in Scope
      uses function next() defined in Token
      uses variable classEnd defined in Scope
      uses function tokAt(int) defined in Token
      uses function nextArgument() defined in Token
      uses function sprintfOverlappingDataError(const Token *,const std::string &) defined in CheckString
      uses function str(T &&) defined in Token
   function sprintfOverlappingDataError(const Token *,const std::string &) in line 85
      10 lines of code
      2 parameters
      1 conditional paths
      uses enumvalue error defined in Severity
   function stringLiteralWrite() in line 66
      protection public
      19 lines of code
      0 parameters
      7 conditional paths
      uses variable _tokenizer defined in Check
      uses function getSymbolDatabase() defined in Tokenizer
      uses variable functionScopes defined in SymbolDatabase
      uses variable classStart defined in Scope
      uses function next() defined in Token
      uses variable classEnd defined in Scope
      uses function getValueTokenMinStrSize() defined in Token
      uses function stringLiteralWriteError(const Token *,const Token *) defined in CheckString
   function stringLiteralWriteError(const Token *,const Token *) in line 84
      18 lines of code
      2 parameters
      4 conditional paths
      uses variable s defined in extracttests.py
      uses function strValue() defined in Token
      uses enumvalue error defined in Severity
   function strPlusChar() in line 69
      protection public
      16 lines of code
      0 parameters
      6 conditional paths
      uses variable _tokenizer defined in Check
      uses function getSymbolDatabase() defined in Tokenizer
      uses variable functionScopes defined in SymbolDatabase
      uses variable classStart defined in Scope
      uses function next() defined in Token
      uses variable classEnd defined in Scope
      uses enumvalue eString defined in Token
      uses enumvalue eChar defined in Token
      uses function strPlusCharError(const Token *) defined in CheckString
   function strPlusCharError(const Token *) in line 86
      4 lines of code
      1 parameters
      1 conditional paths
      uses enumvalue error defined in Severity
   function suspiciousStringCompareError(const Token *,const std::string &) in line 91
      5 lines of code
      2 parameters
      1 conditional paths
      uses enumvalue warning defined in Severity
   function suspiciousStringCompareError_char(const Token *,const std::string &) in line 92
      5 lines of code
      2 parameters
      1 conditional paths
      uses enumvalue warning defined in Severity
   function CheckString() in line 37
      protection public
      2 lines of code
      0 parameters
      1 conditional paths
   function CheckString(const Tokenizer *,const Settings *,ErrorLogger *) in line 41
      protection public
      3 lines of code
      3 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/lib/checktype.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/lib/checktype.h
module CheckType
   inherits from Check
   function checkIntegerOverflow() in line 66
      protection public
      31 lines of code
      0 parameters
      8 conditional paths
      uses variable _settings defined in Check
      uses variable platformType defined in Settings
      uses enumvalue Unspecified defined in Settings
      uses variable int_bit defined in Settings
      uses variable _tokenizer defined in Check
      uses function getSymbolDatabase() defined in Tokenizer
      uses variable functionScopes defined in SymbolDatabase
      uses variable classStart defined in Scope
      uses function next() defined in Token
      uses variable classEnd defined in Scope
      uses variable type defined in ValueType
      uses variable sign defined in ValueType
      uses function integerOverflowError(const Token *,const ValueFlow::Value &) defined in CheckType
   function checkLongCast() in line 72
      protection public
      67 lines of code
      0 parameters
      16 conditional paths
      uses variable _settings defined in Check
      uses function isEnabled(T &&) defined in Settings
      uses variable _tokenizer defined in Check
      uses function tokens() defined in Tokenizer
      uses function next() defined in Token
      uses variable type defined in ValueType
      uses variable pointer defined in ValueType
      uses variable originalTypeName defined in ValueType
      uses variable constness defined in ValueType
      uses function longCastAssignError(const Token *) defined in CheckType
      uses function getSymbolDatabase() defined in Tokenizer
      uses variable functionScopes defined in SymbolDatabase
      uses variable classDef defined in Scope
      uses function str(T &&) defined in Token
      uses function originalName() defined in Token
      uses function previous() defined in Token
      uses variable classStart defined in Scope
      uses variable classEnd defined in Scope
      uses function longCastReturnError(const Token *) defined in CheckType
   function checkSignConversion() in line 69
      protection public
      34 lines of code
      0 parameters
      10 conditional paths
      uses variable _settings defined in Check
      uses function isEnabled(T &&) defined in Settings
      uses variable _tokenizer defined in Check
      uses function getSymbolDatabase() defined in Tokenizer
      uses variable functionScopes defined in SymbolDatabase
      uses variable classStart defined in Scope
      uses function next() defined in Token
      uses variable classEnd defined in Scope
      uses function getValueLE(const MathLib::bigint,const Settings *) defined in Token
      uses function valueType() defined in Token
      uses variable sign defined in ValueType
      uses function signConversionError(const Token *,const bool) defined in CheckType
      uses function isNumber() defined in Token
   function checkTooBigBitwiseShift() in line 63
      protection public
      46 lines of code
      0 parameters
      13 conditional paths
      uses variable _settings defined in Check
      uses function isEnabled(T &&) defined in Settings
      uses variable inconclusive defined in Settings
      uses variable platformType defined in Settings
      uses enumvalue Unspecified defined in Settings
      uses variable _tokenizer defined in Check
      uses function getSymbolDatabase() defined in Tokenizer
      uses variable functionScopes defined in SymbolDatabase
      uses variable classStart defined in Scope
      uses function next() defined in Token
      uses variable classEnd defined in Scope
      uses function isIntegral() defined in ValueType
      uses variable pointer defined in ValueType
      uses variable type defined in ValueType
      uses variable int_bit defined in Settings
      uses variable long_bit defined in Settings
      uses variable long_long_bit defined in Settings
      uses variable condition defined in ValueFlow::Value
      uses variable inconclusive defined in ValueFlow::Value
      uses function tooBigBitwiseShiftError(const Token *,int,const ValueFlow::Value &) defined in CheckType
   function classInfo() in line 95
      8 lines of code
      0 parameters
      1 conditional paths
   function getErrorMessages(ErrorLogger *,const Settings *) in line 82
      8 lines of code
      2 parameters
      1 conditional paths
      uses function tooBigBitwiseShiftError(const Token *,int,const ValueFlow::Value &) defined in CheckType
      uses function integerOverflowError(const Token *,const ValueFlow::Value &) defined in CheckType
      uses function signConversionError(const Token *,const bool) defined in CheckType
      uses function longCastAssignError(const Token *) defined in CheckType
      uses function longCastReturnError(const Token *) defined in CheckType
   function integerOverflowError(const Token *,const ValueFlow::Value &) in line 77
      18 lines of code
      2 parameters
      2 conditional paths
      uses function expressionString() defined in Token
      uses variable msg defined in findcasts.py
      uses variable condition defined in ValueFlow::Value
      uses function eitherTheConditionIsRedundant(const Token *) defined in valueflow.h
      uses enumvalue warning defined in Severity
      uses enumvalue error defined in Severity
      uses variable inconclusive defined in ValueFlow::Value
   function longCastAssignError(const Token *) in line 79
      8 lines of code
      1 parameters
      1 conditional paths
      uses enumvalue style defined in Severity
   function longCastReturnError(const Token *) in line 80
      8 lines of code
      1 parameters
      1 conditional paths
      uses enumvalue style defined in Severity
   function myName() in line 91
      3 lines of code
      0 parameters
      1 conditional paths
   function runChecks(const Tokenizer *,const Settings *,ErrorLogger *) in line 46
      protection public
      8 lines of code
      3 parameters
      1 conditional paths
      uses function checkTooBigBitwiseShift() defined in CheckType
      uses function checkIntegerOverflow() defined in CheckType
      uses function checkSignConversion() defined in CheckType
      uses function checkLongCast() defined in CheckType
   function runSimplifiedChecks(const Tokenizer *,const Settings *,ErrorLogger *) in line 56
      protection public
      5 lines of code
      3 parameters
      1 conditional paths
   function signConversionError(const Token *,const bool) in line 78
      11 lines of code
      2 parameters
      1 conditional paths
      uses function str(T &&) defined in Token
      uses enumvalue warning defined in Severity
   function tooBigBitwiseShiftError(const Token *,int,const ValueFlow::Value &) in line 76
      12 lines of code
      3 parameters
      3 conditional paths
      uses variable condition defined in ValueFlow::Value
      uses variable intvalue defined in ValueFlow::Value
      uses function linenr() defined in Token
      uses enumvalue warning defined in Severity
      uses enumvalue error defined in Severity
      uses variable inconclusive defined in ValueFlow::Value
   function CheckType() in line 37
      protection public
      2 lines of code
      0 parameters
      1 conditional paths
   function CheckType(const Tokenizer *,const Settings *,ErrorLogger *) in line 41
      protection public
      3 lines of code
      3 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/lib/checkuninitvar.cpp
module checkuninitvar.cpp
   function operator!(VariableValue) in line 178
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable notEqual defined in VariableValue
   function operator==(const VariableValue &,MathLib::bigint) in line 183
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses variable notEqual defined in VariableValue
      uses variable value defined in VariableValue
   function operator!=(const VariableValue &,MathLib::bigint) in line 187
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses variable notEqual defined in VariableValue
      uses variable value defined in VariableValue
   function conditionAlwaysTrueOrFalse(const Token *,const std::map< unsigned int, VariableValue > &,bool *,bool *) in line 192
      protection public
      72 lines of code
      4 parameters
      18 conditional paths
      uses function isName() defined in Token
      uses function str(T &&) defined in Token
      uses function astOperand2(Token *) defined in Token
      uses function varId() defined in Token
      uses function isComparisonOp() defined in Token
      uses function astOperand1(Token *) defined in Token
      uses function f(char) defined in test.cxx
      uses variable f2 defined in daca2-report.py
   function isVariableUsed(const Token *,const Variable &) in line 265
      protection public
      23 lines of code
      2 parameters
      8 conditional paths
      uses function str(T &&) defined in Token
      uses function astOperand2(Token *) defined in Token
      uses function isConstOp() defined in Token
      uses function astOperand1(Token *) defined in Token
      uses function varId() defined in Token
      uses function declarationId() defined in Variable
      uses function isArray() defined in Variable
      uses function astParent() defined in Token
module VariableValue
   function VariableValue(MathLib::bigint) in line 174
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   variable notEqual in line 176
      protection public
   variable value in line 175
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/lib/checkuninitvar.h
module CheckUninitVar
   inherits from Check
   function check() in line 56
      protection public
      12 lines of code
      0 parameters
      3 conditional paths
      uses variable _tokenizer defined in Check
      uses function getSymbolDatabase() defined in Tokenizer
      uses variable scopeList defined in SymbolDatabase
      uses function checkScope(const Scope *) defined in CheckUninitVar
   function checkIfForWhileHead(const Token *,const Variable &,bool,bool,Alloc,const std::string &) in line 61
      protection public
      34 lines of code
      6 parameters
      13 conditional paths
      uses function link(Token *) defined in Token
      uses function tokAt(int) defined in Token
      uses function getValue(const MathLib::bigint) defined in Token
      uses function next() defined in Token
      uses function declarationId() defined in Variable
      uses function isMemberVariableAssignment(const Token *,const std::string &) defined in CheckUninitVar
      uses function isMemberVariableUsage(const Token *,bool,Alloc,const std::string &) defined in CheckUninitVar
      uses function isPointer() defined in Variable
      uses function uninitStructMemberError(const Token *,const std::string &) defined in CheckUninitVar
      uses function isVariableUsage(const Token *,bool,Alloc) defined in CheckUninitVar
      uses function uninitvarError(const Token *,const std::string &) defined in CheckUninitVar
   function checkLoopBody(const Token *,const Variable &,const Alloc,const std::string &,const bool) in line 62
      protection public
      81 lines of code
      5 parameters
      24 conditional paths
      uses function str(T &&) defined in Token
      uses function link(Token *) defined in Token
      uses function next() defined in Token
      uses function varId() defined in Token
      uses function declarationId() defined in Variable
      uses function isMemberVariableAssignment(const Token *,const std::string &) defined in CheckUninitVar
      uses function isMemberVariableUsage(const Token *,bool,Alloc,const std::string &) defined in CheckUninitVar
      uses function isPointer() defined in Variable
      uses function previous() defined in Token
      uses function isVariableUsage(const Token *,bool,Alloc) defined in CheckUninitVar
      uses function strAt(int) defined in Token
      uses function astOperand2(Token *) defined in Token
      uses function astOperand1(Token *) defined in Token
      uses function uninitvarError(const Token *,const std::string &) defined in CheckUninitVar
      uses function uninitStructMemberError(const Token *,const std::string &) defined in CheckUninitVar
   function checkRhs(const Token *,const Variable &,Alloc,unsigned int,const std::string &) in line 63
      protection public
      32 lines of code
      5 parameters
      13 conditional paths
      uses function next() defined in Token
      uses function str(T &&) defined in Token
      uses function varId() defined in Token
      uses function declarationId() defined in Variable
      uses function isVariableUsage(const Token *,bool,Alloc) defined in CheckUninitVar
      uses function isPointer() defined in Variable
      uses function uninitvarError(const Token *,const std::string &) defined in CheckUninitVar
      uses function isMemberVariableUsage(const Token *,bool,Alloc,const std::string &) defined in CheckUninitVar
      uses function uninitStructMemberError(const Token *,const std::string &) defined in CheckUninitVar
      uses function astOperand2(Token *) defined in Token
      uses function nameToken() defined in Variable
      uses function link(Token *) defined in Token
   function checkScope(const Scope *) in line 57
      protection public
      80 lines of code
      1 parameters
      26 conditional paths
      uses variable varlist defined in Scope
      uses variable _tokenizer defined in Check
      uses function isCPP() defined in Tokenizer
      uses enumvalue True defined in Type
      uses function checkRhs(const Token *,const Variable &,Alloc,unsigned int,const std::string &) defined in CheckUninitVar
      uses enumvalue NO_ALLOC defined in CheckUninitVar
      uses function next() defined in Token
      uses function link(Token *) defined in Token
      uses function isC() defined in Tokenizer
      uses function str(T &&) defined in Token
      uses function isStandardType() defined in Token
      uses enumvalue ARRAY defined in CheckUninitVar
      uses function checkScopeForVariable(const Token *,const Variable &,bool *const,bool *const,Alloc *const,const std::string &) defined in CheckUninitVar
      uses function checkStruct(const Token *,const Variable &) defined in CheckUninitVar
      uses variable function defined in Scope
      uses function argCount() defined in Function
      uses function getArgumentVar(std::size_t) defined in Function
      uses function declarationId() defined in Variable
      uses function typeStartToken() defined in Variable
      uses variable classStart defined in Scope
      uses variable classEnd defined in Scope
      uses variable _settings defined in Check
      uses variable library defined in Settings
      uses variable returnuninitdata defined in Library
   function checkScopeForVariable(const Token *,const Variable &,bool *const,bool *const,Alloc *const,const std::string &) in line 60
      protection public
      379 lines of code
      6 parameters
      87 conditional paths
      uses variable _settings defined in Check
      uses variable debugwarnings defined in Settings
      uses function declarationId() defined in Variable
      uses function next() defined in Token
      uses function str(T &&) defined in Token
      uses variable _tokenizer defined in Check
      uses function IsScopeNoReturn(const Token *,bool *) defined in Tokenizer
      uses function previous() defined in Token
      uses function link(Token *) defined in Token
      uses function varId() defined in Token
      uses function astOperand2(Token *) defined in Token
      uses function checkIfForWhileHead(const Token *,const Variable &,bool,bool,Alloc,const std::string &) defined in CheckUninitVar
      uses function astIsVariableComparison(const Token *,const std::string &,const std::string &,const Token **) defined in astutils.cpp
      uses function astOperand1(Token *) defined in Token
      uses function isNumber() defined in Token
      uses function linkAt(int) defined in Token
      uses enumvalue debug defined in Severity
      uses function name() defined in Variable
      uses function tokAt(int) defined in Token
      uses function checkLoopBody(const Token *,const Variable &,const Alloc,const std::string &,const bool) defined in CheckUninitVar
      uses function uninitvarError(const Token *,const std::string &) defined in CheckUninitVar
      uses function nameToken() defined in Variable
      uses function strAt(int) defined in Token
      uses function uninitStructMemberError(const Token *,const std::string &) defined in CheckUninitVar
      uses function isVariableUsage(const Token *,bool,Alloc) defined in CheckUninitVar
      uses function isPointer() defined in Variable
      uses variable library defined in Settings
      uses variable returnuninitdata defined in Library
      uses enumvalue NO_CTOR_CALL defined in CheckUninitVar
      uses function typeStartToken() defined in Variable
      uses function isStandardType() defined in Token
      uses function type() defined in Variable
      uses variable needInitialization defined in Type
      uses enumvalue True defined in Type
      uses enumvalue CTOR_CALL defined in CheckUninitVar
      uses function typeScope() defined in Variable
      uses variable numConstructors defined in Scope
      uses function isMemberVariableAssignment(const Token *,const std::string &) defined in CheckUninitVar
      uses function checkRhs(const Token *,const Variable &,Alloc,unsigned int,const std::string &) defined in CheckUninitVar
      uses function isMemberVariableUsage(const Token *,bool,Alloc,const std::string &) defined in CheckUninitVar
   function checkStruct(const Token *,const Variable &) in line 58
      protection public
      40 lines of code
      2 parameters
      11 conditional paths
      uses function typeStartToken() defined in Variable
      uses function str(T &&) defined in Token
      uses function next() defined in Token
      uses variable _tokenizer defined in Check
      uses function getSymbolDatabase() defined in Tokenizer
      uses variable classAndStructScopes defined in SymbolDatabase
      uses variable className defined in Scope
      uses variable numConstructors defined in Scope
      uses variable varlist defined in Scope
      uses function hasDefault() defined in Variable
      uses function isArray() defined in Variable
      uses function isC() defined in Tokenizer
      uses function isClass() defined in Variable
      uses function type() defined in Variable
      uses variable needInitialization defined in Type
      uses enumvalue True defined in Type
      uses variable scopeList defined in SymbolDatabase
      uses variable type defined in Scope
      uses enumvalue eUnion defined in Scope
      uses variable nestedIn defined in Scope
      uses function linenr() defined in Token
      uses variable classStart defined in Scope
      uses variable classEnd defined in Scope
      uses enumvalue NO_ALLOC defined in CheckUninitVar
      uses function checkScopeForVariable(const Token *,const Variable &,bool *const,bool *const,Alloc *const,const std::string &) defined in CheckUninitVar
      uses function name() defined in Variable
   function classInfo() in line 110
      6 lines of code
      0 parameters
      1 conditional paths
   function deadPointer() in line 70
      protection public
      22 lines of code
      0 parameters
      6 conditional paths
      uses variable _tokenizer defined in Check
      uses function getSymbolDatabase() defined in Tokenizer
      uses variable scopeList defined in SymbolDatabase
      uses function next() defined in Token
      uses function isVariableUsage(const Token *,bool,Alloc) defined in CheckUninitVar
      uses enumvalue NO_ALLOC defined in CheckUninitVar
      uses function getValueTokenDeadPointer() defined in Token
      uses function deadPointerError(const Token *,const Token *) defined in CheckUninitVar
   function deadPointerError(const Token *,const Token *) in line 71
      protection public
      10 lines of code
      2 parameters
      1 conditional paths
      uses function str(T &&) defined in Token
      uses function expressionString() defined in Token
      uses enumvalue error defined in Severity
      uses function linenr() defined in Token
   function getErrorMessages(ErrorLogger *,const Settings *) in line 95
      10 lines of code
      2 parameters
      1 conditional paths
      uses function uninitstringError(const Token *,const std::string &,bool) defined in CheckUninitVar
      uses function uninitdataError(const Token *,const std::string &) defined in CheckUninitVar
      uses function uninitvarError(const Token *,const std::string &) defined in CheckUninitVar
      uses function uninitStructMemberError(const Token *,const std::string &) defined in CheckUninitVar
      uses function deadPointerError(const Token *,const Token *) defined in CheckUninitVar
   function isFunctionParUsage(const Token *,bool,Alloc) in line 65
      protection public
      57 lines of code
      3 parameters
      17 conditional paths
      uses function previous() defined in Token
      uses function tokAt(int) defined in Token
      uses function str(T &&) defined in Token
      uses function link(Token *) defined in Token
      uses function variable(const Variable *) defined in Token
      uses function function(const Function *) defined in Token
      uses function typeStartToken() defined in Variable
      uses enumvalue NO_ALLOC defined in CheckUninitVar
      uses function isName() defined in Token
      uses function linkAt(int) defined in Token
      uses variable _settings defined in Check
      uses variable library defined in Settings
      uses function isnullargbad(const Token *,int) defined in Library
      uses function isuninitargbad(const Token *,int) defined in Library
   function isMemberVariableAssignment(const Token *,const std::string &) in line 66
      protection public
      58 lines of code
      2 parameters
      20 conditional paths
      uses function strAt(int) defined in Token
      uses function tokAt(int) defined in Token
      uses function previous() defined in Token
      uses function isConstOp() defined in Token
      uses function isFunctionParUsage(const Token *,bool,Alloc) defined in CheckUninitVar
      uses enumvalue NO_ALLOC defined in CheckUninitVar
      uses function function(const Function *) defined in Token
      uses function str(T &&) defined in Token
      uses function link(Token *) defined in Token
      uses function typeStartToken() defined in Variable
      uses function isName() defined in Token
   function isMemberVariableUsage(const Token *,bool,Alloc,const std::string &) in line 67
      protection public
      36 lines of code
      4 parameters
      9 conditional paths
      uses function previous() defined in Token
      uses function strAt(int) defined in Token
      uses function isFunctionParUsage(const Token *,bool,Alloc) defined in CheckUninitVar
      uses function isMemberVariableAssignment(const Token *,const std::string &) defined in CheckUninitVar
      uses function tokAt(int) defined in Token
      uses function variable(const Variable *) defined in Token
      uses function isVariableUsage(const Token *,bool,Alloc) defined in CheckUninitVar
      uses function astParent() defined in Token
      uses function astOperand2(Token *) defined in Token
      uses variable _settings defined in Check
      uses variable experimental defined in Settings
   function isVariableUsage(const Token *,bool,Alloc) in line 64
      protection public
      147 lines of code
      3 parameters
      44 conditional paths
      uses enumvalue NO_ALLOC defined in CheckUninitVar
      uses function previous() defined in Token
      uses function strAt(int) defined in Token
      uses function linkAt(int) defined in Token
      uses function tokAt(int) defined in Token
      uses function next() defined in Token
      uses enumvalue CTOR_CALL defined in CheckUninitVar
      uses function astParent() defined in Token
      uses function str(T &&) defined in Token
      uses variable _settings defined in Check
      uses variable library defined in Settings
      uses variable functionpure defined in Library
      uses function isFunctionParUsage(const Token *,bool,Alloc) defined in CheckUninitVar
      uses variable _tokenizer defined in Check
      uses function isCPP() defined in Tokenizer
      uses enumvalue ARRAY defined in CheckUninitVar
      uses function astOperand1(Token *) defined in Token
      uses function variable(const Variable *) defined in Token
      uses function isStandardType() defined in Token
      uses function typeStartToken() defined in Variable
      uses function astOperand2(Token *) defined in Token
      uses function isOp() defined in Token
      uses function isAssignmentOp() defined in Token
   function myName() in line 106
      3 lines of code
      0 parameters
      1 conditional paths
   function runSimplifiedChecks(const Tokenizer *,const Settings *,ErrorLogger *) in line 49
      protection public
      5 lines of code
      3 parameters
      1 conditional paths
      uses function check() defined in CheckUninitVar
      uses function deadPointer() defined in CheckUninitVar
   function uninitdataError(const Token *,const std::string &) in line 84
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses enumvalue error defined in Severity
   function uninitstringError(const Token *,const std::string &,bool) in line 83
      protection public
      4 lines of code
      3 parameters
      1 conditional paths
      uses enumvalue error defined in Severity
   function uninitStructMemberError(const Token *,const std::string &) in line 92
      protection public
      7 lines of code
      2 parameters
      1 conditional paths
      uses enumvalue error defined in Severity
   function uninitvarError(const Token *,const std::string &) in line 85
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses enumvalue error defined in Severity
   function uninitvarError(const Token *,const std::string &,Alloc) in line 86
      protection public
      6 lines of code
      3 parameters
      2 conditional paths
   function CheckUninitVar() in line 40
      protection public
      2 lines of code
      0 parameters
      1 conditional paths
   function CheckUninitVar(const Tokenizer *,const Settings *,ErrorLogger *) in line 44
      protection public
      3 lines of code
      3 parameters
      1 conditional paths
module CheckUninitVar::MyFileInfo
   inherits from Check::FileInfo
   variable functionCalls in line 80
      protection public
   variable uvarFunctions in line 77
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/lib/checkunusedfunctions.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/lib/checkunusedfunctions.h
module CheckUnusedFunctions
   inherits from Check
   function analyseWholeProgram(const std::list< Check::FileInfo * > &,const Settings &,ErrorLogger &) in line 54
      protection public
      5 lines of code
      3 parameters
      1 conditional paths
      uses function check(ErrorLogger *const,const Settings &) defined in CheckUnusedFunctions
   function check(ErrorLogger *const,const Settings &) in line 48
      protection public
      28 lines of code
      2 parameters
      7 conditional paths
      uses variable _functions defined in CheckUnusedFunctions
      uses variable usedOtherFile defined in CheckUnusedFunctions::FunctionUsage
      uses variable filename defined in CheckUnusedFunctions::FunctionUsage
      uses function isWindowsPlatform() defined in Settings
      uses variable usedSameFile defined in CheckUnusedFunctions::FunctionUsage
      uses variable filename defined in extracttests.py
      uses function unusedFunctionError(ErrorLogger *const,const std::string &,unsigned int,const std::string &) defined in CheckUnusedFunctions
      uses variable lineNumber defined in CheckUnusedFunctions::FunctionUsage
   function classInfo() in line 83
      3 lines of code
      0 parameters
      1 conditional paths
   function getErrorMessages(ErrorLogger *,const Settings *) in line 60
      4 lines of code
      2 parameters
      1 conditional paths
      uses function unusedFunctionError(ErrorLogger *const,const std::string &,unsigned int,const std::string &) defined in CheckUnusedFunctions
      uses variable filename defined in extracttests.py
   function getFileInfo(const Tokenizer *,const Settings *) in line 51
      protection public
      7 lines of code
      2 parameters
      2 conditional paths
      uses function isEnabled(T &&) defined in Settings
      uses variable jobs defined in Settings
      uses variable instance defined in CheckUnusedFunctions
      uses function parseTokens(const Tokenizer &,const char,const Settings *) defined in CheckUnusedFunctions
      uses variable list defined in Tokenizer
      uses function getFiles() defined in TokenList
   function myName() in line 79
      3 lines of code
      0 parameters
      1 conditional paths
   function parseTokens(const Tokenizer &,const char,const Settings *) in line 46
      protection public
      170 lines of code
      3 parameters
      47 conditional paths
      uses variable library defined in Settings
      uses function markupFile(const std::string &) defined in Library
      uses function getSymbolDatabase() defined in Tokenizer
      uses variable functionScopes defined in SymbolDatabase
      uses variable function defined in Scope
      uses variable token defined in Function
      uses variable classStart defined in Scope
      uses function fileIndex() defined in Token
      uses function isAttributeConstructor() defined in Function
      uses function isAttributeDestructor() defined in Function
      uses variable type defined in Function
      uses enumvalue eFunction defined in Function
      uses function isCPP() defined in Tokenizer
      uses variable retDef defined in Function
      uses function str(T &&) defined in Token
      uses variable _functions defined in CheckUnusedFunctions
      uses function name() defined in Function
      uses variable lineNumber defined in CheckUnusedFunctions::FunctionUsage
      uses function linenr() defined in Token
      uses variable filename defined in CheckUnusedFunctions::FunctionUsage
      uses variable list defined in Tokenizer
      uses function getSourceFilePath() defined in TokenList
      uses variable usedOtherFile defined in CheckUnusedFunctions::FunctionUsage
      uses variable usedSameFile defined in CheckUnusedFunctions::FunctionUsage
      uses function tokens() defined in Tokenizer
      uses function next() defined in Token
      uses function isexecutableblock(const std::string &,const std::string &) defined in Library
      uses function tokAt(int) defined in Token
      uses function blockstartoffset(const std::string &) defined in Library
      uses function blockstart(const std::string &) defined in Library
      uses function blockend(const std::string &) defined in Library
      uses function iskeyword(const std::string &,const std::string &) defined in Library
      uses function isexporter(const std::string &) defined in Library
      uses function isexportedprefix(const std::string &,const std::string &) defined in Library
      uses function isexportedsuffix(const std::string &,const std::string &) defined in Library
      uses function previous() defined in Token
      uses function isimporter(const std::string &,const std::string &) defined in Library
      uses function isreflection(const std::string &) defined in Library
      uses function reflectionArgument(const std::string &) defined in Library
      uses function link(Token *) defined in Token
      uses function linkAt(int) defined in Token
   function runSimplifiedChecks(const Tokenizer *,const Settings *,ErrorLogger *) in line 75
      3 lines of code
      3 parameters
      1 conditional paths
   function unusedFunctionError(ErrorLogger *const,const std::string &,unsigned int,const std::string &) in line 68
      18 lines of code
      4 parameters
      3 conditional paths
      uses variable filename defined in extracttests.py
      uses function setfile(const std::string &) defined in ErrorLogger::ErrorMessage::FileLocation
      uses variable line defined in ErrorLogger::ErrorMessage::FileLocation
      uses enumvalue style defined in Severity
      uses function reportErr(const ErrorLogger::ErrorMessage &) defined in ErrorLogger
   function CheckUnusedFunctions() in line 35
      protection public
      2 lines of code
      0 parameters
      1 conditional paths
   function CheckUnusedFunctions(const Tokenizer *,const Settings *,ErrorLogger *) in line 39
      protection public
      3 lines of code
      3 parameters
      1 conditional paths
      uses function getFileInfo(const Tokenizer *,const Settings *) defined in Check
      uses function analyseWholeProgram(const std::list< FileInfo * > &,const Settings &,ErrorLogger &) defined in Check
   variable _functions in line 98
   variable instance in line 56
      protection public
module CheckUnusedFunctions::FunctionUsage
   function FunctionUsage() in line 89
      protection public
      2 lines of code
      0 parameters
      1 conditional paths
   variable filename in line 92
      protection public
   variable lineNumber in line 93
      protection public
   variable usedOtherFile in line 95
      protection public
   variable usedSameFile in line 94
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/lib/checkunusedvar.cpp
module checkunusedvar.cpp
   function doAssignment(Variables &,const Token *,bool,const Scope *) in line 413
      protection public
      218 lines of code
      4 parameters
      46 conditional paths
      uses function varId() defined in Token
      uses function tokAt(int) defined in Token
      uses function strAt(int) defined in Token
      uses function next() defined in Token
      uses function find(unsigned int) defined in Variables
      uses function isAssignmentOp() defined in Token
      uses function read(unsigned int) defined in Variables
      uses function link(Token *) defined in Token
      uses function use(unsigned int) defined in Variables
      uses function str(T &&) defined in Token
      uses function isName() defined in Token
      uses variable _type defined in Variables::VariableUsage
      uses enumvalue pointer defined in Variables
      uses enumvalue pointerArray defined in Variables
      uses enumvalue array defined in Variables
      uses function replace(char *,char,char) defined in times.c
      uses variable _var defined in Variables::VariableUsage
      uses function scope() defined in Variable
      uses variable _assignments defined in Variables::VariableUsage
      uses variable type defined in Scope
      uses enumvalue eSwitch defined in Scope
      uses function alias(unsigned int,unsigned int,bool) defined in Variables
      uses enumvalue reference defined in Variables
      uses function readAliases(unsigned int) defined in Variables
      uses function readAll(unsigned int) defined in Variables
      uses function clearAliases(unsigned int) defined in Variables
      uses function eraseAll(unsigned int) defined in Variables
   function isPartOfClassStructUnion(const Token *) in line 632
      protection public
      13 lines of code
      1 parameters
      5 conditional paths
      uses function previous() defined in Token
      uses function str(T &&) defined in Token
      uses function link(Token *) defined in Token
      uses function strAt(int) defined in Token
   function skipBrackets(const Token *) in line 647
      protection public
      6 lines of code
      1 parameters
      2 conditional paths
      uses function str(T &&) defined in Token
      uses function link(Token *) defined in Token
   function skipBracketsAndMembers(const Token *) in line 656
      protection public
      12 lines of code
      1 parameters
      4 conditional paths
      uses function str(T &&) defined in Token
      uses function link(Token *) defined in Token
      uses function tokAt(int) defined in Token
module Variables
   function addVar(const Variable *,VariableType,bool) in line 109
      protection public
      9 lines of code
      3 parameters
      2 conditional paths
      uses function declarationId() defined in Variable
      uses variable _varAddedInScope defined in Variables
      uses variable _varUsage defined in Variables
      uses function VariableUsage(const Token *,VariableType,ScopeInfo *,bool,bool,bool,bool) defined in Variables::VariableUsage
   function addVar(const Token *,VariableType,ScopeInfo *,bool) in line 1089
      protection public
      8 lines of code
      4 parameters
      2 conditional paths
      uses function name() defined in Check
   function alias(unsigned int,unsigned int,bool) in line 120
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function alias(unsigned int,unsigned int,bool) in line 1100
      protection public
      40 lines of code
      3 parameters
      9 conditional paths
      uses function use() defined in Variables::VariableUsage
      uses function replace(char *,char,char) defined in times.c
      uses variable _aliases defined in Variables::VariableUsage
      uses variable _name defined in Variables::VariableUsage
      uses function varId() defined in Token
      uses variable _type defined in Variables::VariableUsage
      uses enumvalue pointer defined in Variables
      uses variable _read defined in Variables::VariableUsage
   function allocateMemory(unsigned int,const Token *) in line 110
      protection public
      9 lines of code
      2 parameters
      2 conditional paths
      uses function find(unsigned int) defined in Variables
      uses variable _allocateMemory defined in Variables::VariableUsage
      uses variable _lastAccess defined in Variables::VariableUsage
   function allocateMemory(unsigned int) in line 1090
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses variable _allocateMemory defined in Variables::VariableUsage
   function clear() in line 103
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses variable _varUsage defined in Variables
   function clear() in line 1083
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function clearAliases(unsigned int) in line 126
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function clearAliases(unsigned int) in line 1106
      protection public
      19 lines of code
      1 parameters
      4 conditional paths
      uses variable _aliases defined in Variables::VariableUsage
      uses variable _name defined in Variables::VariableUsage
      uses function varId() defined in Token
   function enterScope() in line 133
      5 lines of code
      0 parameters
      1 conditional paths
      uses variable _varAddedInScope defined in Variables
      uses variable _varReadInScope defined in Variables
   function erase(unsigned int) in line 121
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
      uses variable _varUsage defined in Variables
      uses function eraseAliases(unsigned int) defined in Variables
      uses function eraseAll(unsigned int) defined in Variables
      uses function clearAliases(unsigned int) defined in Variables
   function erase(unsigned int) in line 1101
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function eraseAliases(unsigned int) in line 124
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function eraseAliases(unsigned int) in line 1104
      protection public
      11 lines of code
      1 parameters
      3 conditional paths
      uses variable _aliases defined in Variables::VariableUsage
   function eraseAll(unsigned int) in line 125
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function eraseAll(unsigned int) in line 1105
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
   function find(unsigned int) in line 119
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function find(unsigned int) in line 1099
      protection public
      9 lines of code
      1 parameters
      3 conditional paths
   function leaveScope(bool) in line 134
      31 lines of code
      1 parameters
      5 conditional paths
      uses variable _varReadInScope defined in Variables
      uses function read(unsigned int) defined in Variables
      uses variable _varAddedInScope defined in Variables
   function modified(unsigned int,const Token *) in line 118
      protection public
      20 lines of code
      2 parameters
      6 conditional paths
      uses function find(unsigned int) defined in Variables
      uses variable _modified defined in Variables::VariableUsage
      uses variable _lastAccess defined in Variables::VariableUsage
      uses variable _aliases defined in Variables::VariableUsage
      uses variable _varUsage defined in Variables
   function modified(unsigned int) in line 1098
      protection public
      17 lines of code
      1 parameters
      4 conditional paths
      uses variable _modified defined in Variables::VariableUsage
      uses variable _aliases defined in Variables::VariableUsage
   function newScope(bool) in line 128
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
      uses function enterScope() defined in Variables
      uses function leaveScope(bool) defined in Variables
   function read(unsigned int,const Token *) in line 111
      protection public
      11 lines of code
      2 parameters
      3 conditional paths
      uses function find(unsigned int) defined in Variables
      uses variable _varReadInScope defined in Variables
      uses variable _read defined in Variables::VariableUsage
      uses variable _lastAccess defined in Variables::VariableUsage
   function read(unsigned int) in line 1091
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses variable _read defined in Variables::VariableUsage
   function readAliases(unsigned int,const Token *) in line 112
      protection public
      18 lines of code
      2 parameters
      4 conditional paths
      uses function find(unsigned int) defined in Variables
      uses variable _aliases defined in Variables::VariableUsage
      uses variable _varReadInScope defined in Variables
      uses variable _read defined in Variables::VariableUsage
      uses variable _lastAccess defined in Variables::VariableUsage
   function readAliases(unsigned int) in line 1092
      protection public
      15 lines of code
      1 parameters
      4 conditional paths
      uses variable _aliases defined in Variables::VariableUsage
      uses variable _read defined in Variables::VariableUsage
   function readAll(unsigned int,const Token *) in line 113
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses function read(unsigned int) defined in Variables
      uses function readAliases(unsigned int) defined in Variables
   function readAll(unsigned int) in line 1093
      protection public
      17 lines of code
      1 parameters
      4 conditional paths
      uses variable _read defined in Variables::VariableUsage
      uses variable _aliases defined in Variables::VariableUsage
   function use(unsigned int,const Token *) in line 117
      protection public
      20 lines of code
      2 parameters
      4 conditional paths
      uses function find(unsigned int) defined in Variables
      uses function use() defined in Variables::VariableUsage
      uses variable _varReadInScope defined in Variables
      uses variable _lastAccess defined in Variables::VariableUsage
      uses variable _aliases defined in Variables::VariableUsage
   function use(unsigned int) in line 1097
      protection public
      17 lines of code
      1 parameters
      4 conditional paths
      uses function use() defined in Variables::VariableUsage
      uses variable _aliases defined in Variables::VariableUsage
   function varUsage() in line 106
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses variable _varUsage defined in Variables
      uses function addVar(const Token *,VariableType,ScopeInfo *,bool) defined in Variables
      uses function allocateMemory(unsigned int) defined in Variables
      uses function read(unsigned int) defined in Variables
      uses function readAliases(unsigned int) defined in Variables
      uses function readAll(unsigned int) defined in Variables
      uses function write(unsigned int) defined in Variables
      uses function writeAliases(unsigned int) defined in Variables
      uses function writeAll(unsigned int) defined in Variables
      uses function use() defined in Variables::VariableUsage
      uses function modified(unsigned int) defined in Variables
      uses function find(unsigned int) defined in Variables
      uses function alias(unsigned int,unsigned int,bool) defined in Variables
      uses function replace(char *,char,char) defined in times.c
   function varUsage() in line 1086
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses function name() defined in Check
      uses function replace(char *,char,char) defined in times.c
   function write(unsigned int,const Token *) in line 114
      protection public
      11 lines of code
      2 parameters
      3 conditional paths
      uses function find(unsigned int) defined in Variables
      uses variable _write defined in Variables::VariableUsage
      uses variable _var defined in Variables::VariableUsage
      uses function isStatic() defined in Variable
      uses function next() defined in Token
      uses variable _read defined in Variables::VariableUsage
      uses variable _lastAccess defined in Variables::VariableUsage
   function write(unsigned int) in line 1094
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses variable _write defined in Variables::VariableUsage
   function writeAliases(unsigned int,const Token *) in line 115
      protection public
      17 lines of code
      2 parameters
      4 conditional paths
      uses function find(unsigned int) defined in Variables
      uses variable _aliases defined in Variables::VariableUsage
      uses variable _write defined in Variables::VariableUsage
      uses variable _lastAccess defined in Variables::VariableUsage
   function writeAliases(unsigned int) in line 1095
      protection public
      15 lines of code
      1 parameters
      4 conditional paths
      uses variable _aliases defined in Variables::VariableUsage
      uses variable _write defined in Variables::VariableUsage
   function writeAll(unsigned int,const Token *) in line 116
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses function write(unsigned int) defined in Variables
      uses function writeAliases(unsigned int) defined in Variables
   function writeAll(unsigned int) in line 1096
      protection public
      17 lines of code
      1 parameters
      4 conditional paths
      uses variable _write defined in Variables::VariableUsage
      uses variable _aliases defined in Variables::VariableUsage
   variable _varAddedInScope in line 137
   variable _varReadInScope in line 138
   variable _varUsage in line 136
   variable _varUsage in line 1109
module Variables::VariableUsage
   function unused() in line 65
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses variable _read defined in Variables::VariableUsage
      uses variable _write defined in Variables::VariableUsage
      uses variable _aliases defined in Variables::VariableUsage
   function unused() in line 1066
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function use(std::list< std::set< unsigned int > > &) in line 58
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable _var defined in Variables::VariableUsage
      uses function declarationId() defined in Variable
      uses variable _read defined in Variables::VariableUsage
      uses variable _write defined in Variables::VariableUsage
   function use() in line 1060
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function VariableUsage(const Token *,VariableType,ScopeInfo *,bool,bool,bool,bool) in line 1043
      protection public
      15 lines of code
      7 parameters
      1 conditional paths
   function VariableUsage(const Variable *,VariableType,bool,bool,bool,bool) in line 42
      protection public
      14 lines of code
      6 parameters
      1 conditional paths
   variable _aliases in line 1077
      protection public
   variable _allocateMemory in line 1076
      protection public
   variable _assignments in line 70
      protection public
   variable _assignments in line 1078
      protection public
   variable _lastAccess in line 73
      protection public
   variable _modified in line 1075
      protection public
   variable _name in line 1070
      protection public
   variable _read in line 1073
      protection public
   variable _scope in line 1072
      protection public
   variable _type in line 1071
      protection public
   variable _var in line 72
      protection public
   variable _write in line 1074
      protection public
module Variables::ScopeGuard
   function operator=(const ScopeGuard &) in line 97
      1 lines of code
      1 parameters
      1 conditional paths
   function ScopeGuard(Variables &,bool) in line 83
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
   function ~ScopeGuard() in line 90
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function ScopeGuard() in line 96
      1 lines of code
      0 parameters
      1 conditional paths
   variable _guarded in line 99
   variable _insideLoop in line 100
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/lib/checkunusedvar.h
module CheckUnusedVar
   inherits from Check
   function allocatedButUnusedVariableError(const Token *,const std::string &) in line 80
      4 lines of code
      2 parameters
      1 conditional paths
      uses function reportError((null),(null),(null)) defined in cert.py
      uses enumvalue style defined in Severity
   function checkFunctionVariableUsage() in line 68
      protection public
      61 lines of code
      0 parameters
      11 conditional paths
      uses variable functionScopes defined in SymbolDatabase
      uses function varUsage() defined in Variables
      uses variable _var defined in Variables::VariableUsage
      uses function nameToken() defined in Variable
      uses function isAttributeUnused() defined in Token
      uses function isAttributeUsed() defined in Token
      uses variable _type defined in Variables::VariableUsage
      uses enumvalue pointerPointer defined in Variables
      uses enumvalue pointerArray defined in Variables
      uses enumvalue referenceArray defined in Variables
      uses function name() defined in Variable
      uses function getVariableFromVarId(std::size_t) defined in SymbolDatabase
      uses function unused() defined in Variables::VariableUsage
      uses variable _modified defined in Variables::VariableUsage
      uses variable _allocateMemory defined in Variables::VariableUsage
      uses variable _lastAccess defined in Variables::VariableUsage
      uses variable _write defined in Variables::VariableUsage
      uses function isStlType() defined in Variable
      uses variable _read defined in Variables::VariableUsage
      uses function type() defined in Variable
   function checkFunctionVariableUsage_iterateScopes(const Scope *const,Variables &,bool) in line 67
      protection public
      423 lines of code
      3 parameters
      121 conditional paths
      uses function newScope(bool) defined in Variables
      uses function isExecutable() defined in Scope
      uses variable varlist defined in Scope
      uses enumvalue none defined in Variables
      uses enumvalue pointerArray defined in Variables
      uses enumvalue referenceArray defined in Variables
      uses enumvalue array defined in Variables
      uses enumvalue reference defined in Variables
      uses enumvalue pointerPointer defined in Variables
      uses enumvalue pointer defined in Variables
      uses enumvalue standard defined in Variables
      uses function next() defined in Token
      uses function str(T &&) defined in Token
      uses function link(Token *) defined in Token
      uses function addVar(const Token *,VariableType,ScopeInfo *,bool) defined in Variables
      uses function write(unsigned int) defined in Variables
      uses function read(unsigned int) defined in Variables
      uses function linkAt(int) defined in Token
      uses variable type defined in Scope
      uses enumvalue eFunction defined in Scope
      uses variable classStart defined in Scope
      uses variable classDef defined in Scope
      uses variable classEnd defined in Scope
      uses variable nestedList defined in Scope
      uses function previous() defined in Token
      uses function varId() defined in Token
      uses function clear() defined in Variables
      uses function erase(unsigned int) defined in Variables
      uses function nameToken() defined in Variable
      uses function isReference() defined in Variable
      uses function typeEndToken() defined in Variable
      uses function find(unsigned int) defined in Variables
      uses variable _allocateMemory defined in Variables::VariableUsage
      uses function readAll(unsigned int) defined in Variables
      uses enumvalue eIncDecOp defined in Token
      uses function astParent() defined in Token
      uses function use(unsigned int) defined in Variables
      uses variable _type defined in Variables::VariableUsage
      uses function writeAliases(unsigned int) defined in Variables
      uses function strAt(int) defined in Token
      uses function tokAt(int) defined in Token
      uses function isStandardType() defined in Token
      uses function variable(const Variable *) defined in Token
      uses function type() defined in Variable
      uses function allocateMemory(unsigned int) defined in Variables
      uses function writeAll(unsigned int) defined in Variables
      uses function modified(unsigned int) defined in Variables
   function checkStructMemberUsage() in line 71
      protection public
      98 lines of code
      0 parameters
      25 conditional paths
      uses function next() defined in Token
      uses function tokAt(int) defined in Token
      uses function strAt(int) defined in Token
      uses function isExtern() defined in Variable
      uses function isGlobal() defined in Variable
      uses function isStatic() defined in Variable
      uses enumvalue eUnion defined in Scope
   function classInfo() in line 99
      10 lines of code
      0 parameters
      1 conditional paths
   function getErrorMessages(ErrorLogger *,const Settings *) in line 84
      10 lines of code
      2 parameters
      1 conditional paths
      uses function unusedVariableError(const Token *,const std::string &) defined in CheckUnusedVar
      uses function allocatedButUnusedVariableError(const Token *,const std::string &) defined in CheckUnusedVar
      uses function unreadVariableError(const Token *,const std::string &) defined in CheckUnusedVar
      uses function unassignedVariableError(const Token *,const std::string &) defined in CheckUnusedVar
      uses function unusedStructMemberError(const Token *,const std::string &,const std::string &,bool) defined in CheckUnusedVar
   function isEmptyType(const Type *) in line 75
      25 lines of code
      1 parameters
      5 conditional paths
      uses variable classScope defined in Type
      uses variable numConstructors defined in Scope
      uses variable varlist defined in Scope
      uses variable derivedFrom defined in Type
   function isRecordTypeWithoutSideEffects(const Type *) in line 74
      26 lines of code
      1 parameters
      5 conditional paths
      uses variable classScope defined in Type
      uses variable numConstructors defined in Scope
      uses variable varlist defined in Scope
      uses variable needInitialization defined in Type
      uses enumvalue True defined in Type
      uses variable derivedFrom defined in Type
   function myName() in line 95
      3 lines of code
      0 parameters
      1 conditional paths
   function runChecks(const Tokenizer *,const Settings *,ErrorLogger *) in line 51
      protection public
      7 lines of code
      3 parameters
      1 conditional paths
      uses function checkStructMemberUsage() defined in CheckUnusedVar
      uses function checkFunctionVariableUsage() defined in CheckUnusedVar
   function runSimplifiedChecks(const Tokenizer *,const Settings *,ErrorLogger *) in line 60
      protection public
      5 lines of code
      3 parameters
      1 conditional paths
   function unassignedVariableError(const Token *,const std::string &) in line 82
      4 lines of code
      2 parameters
      1 conditional paths
      uses function reportError((null),(null),(null)) defined in cert.py
      uses enumvalue style defined in Severity
   function unreadVariableError(const Token *,const std::string &) in line 81
      4 lines of code
      2 parameters
      1 conditional paths
      uses function reportError((null),(null),(null)) defined in cert.py
      uses enumvalue style defined in Severity
   function unusedStructMemberError(const Token *,const std::string &,const std::string &,bool) in line 78
      5 lines of code
      4 parameters
      1 conditional paths
      uses function reportError((null),(null),(null)) defined in cert.py
      uses enumvalue style defined in Severity
   function unusedVariableError(const Token *,const std::string &) in line 79
      4 lines of code
      2 parameters
      1 conditional paths
      uses function reportError((null),(null),(null)) defined in cert.py
      uses enumvalue style defined in Severity
   function CheckUnusedVar() in line 42
      protection public
      2 lines of code
      0 parameters
      1 conditional paths
   function CheckUnusedVar(const Tokenizer *,const Settings *,ErrorLogger *) in line 46
      protection public
      3 lines of code
      3 parameters
      1 conditional paths
   variable isEmptyTypeMap in line 112
   variable isRecordTypeWithoutSideEffectsMap in line 110
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/lib/checkvaarg.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/lib/checkvaarg.h
module CheckVaarg
   inherits from Check
   function classInfo() in line 73
      8 lines of code
      0 parameters
      1 conditional paths
   function getErrorMessages(ErrorLogger *,const Settings *) in line 60
      8 lines of code
      2 parameters
      1 conditional paths
      uses function wrongParameterTo_va_start_error(const Token *,const std::string &,const std::string &) defined in CheckVaarg
      uses function referenceAs_va_start_error(const Token *,const std::string &) defined in CheckVaarg
      uses function va_end_missingError(const Token *,const std::string &) defined in CheckVaarg
      uses function va_list_usedBeforeStartedError(const Token *,const std::string &) defined in CheckVaarg
      uses function va_start_subsequentCallsError(const Token *,const std::string &) defined in CheckVaarg
   function myName() in line 69
      3 lines of code
      0 parameters
      1 conditional paths
   function referenceAs_va_start_error(const Token *,const std::string &) in line 55
      5 lines of code
      2 parameters
      1 conditional paths
      uses enumvalue error defined in Severity
   function runSimplifiedChecks(const Tokenizer *,const Settings *,ErrorLogger *) in line 44
      protection public
      5 lines of code
      3 parameters
      1 conditional paths
      uses function va_start_argument() defined in CheckVaarg
      uses function va_list_usage() defined in CheckVaarg
   function va_end_missingError(const Token *,const std::string &) in line 56
      5 lines of code
      2 parameters
      1 conditional paths
      uses enumvalue error defined in Severity
   function va_list_usage() in line 51
      protection public
      52 lines of code
      0 parameters
      19 conditional paths
      uses variable _tokenizer defined in Check
      uses function getSymbolDatabase() defined in Tokenizer
      uses function getVariableListSize() defined in SymbolDatabase
      uses function getVariableFromVarId(std::size_t) defined in SymbolDatabase
      uses function isPointer() defined in Variable
      uses function isReference() defined in Variable
      uses function isArray() defined in Variable
      uses function scope() defined in Variable
      uses function typeStartToken() defined in Variable
      uses function str(T &&) defined in Token
      uses function isLocal() defined in Variable
      uses function isArgument() defined in Variable
      uses function nameToken() defined in Variable
      uses function next() defined in Token
      uses variable classEnd defined in Scope
      uses function declarationId() defined in Variable
      uses function va_start_subsequentCallsError(const Token *,const std::string &) defined in CheckVaarg
      uses function name() defined in Variable
      uses function linkAt(int) defined in Token
      uses function va_list_usedBeforeStartedError(const Token *,const std::string &) defined in CheckVaarg
      uses function previous() defined in Token
      uses function varId() defined in Token
      uses function tokAt(int) defined in Token
      uses function isCPP() defined in Tokenizer
      uses function va_end_missingError(const Token *,const std::string &) defined in CheckVaarg
   function va_list_usedBeforeStartedError(const Token *,const std::string &) in line 57
      5 lines of code
      2 parameters
      1 conditional paths
      uses enumvalue error defined in Severity
   function va_start_argument() in line 50
      protection public
      31 lines of code
      0 parameters
      9 conditional paths
      uses variable _tokenizer defined in Check
      uses function getSymbolDatabase() defined in Tokenizer
      uses variable functionScopes defined in SymbolDatabase
      uses variable _settings defined in Check
      uses function isEnabled(T &&) defined in Settings
      uses variable function defined in Scope
      uses variable classStart defined in Scope
      uses function next() defined in Token
      uses variable classEnd defined in Scope
      uses function tokAt(int) defined in Token
      uses function nextArgument() defined in Token
      uses function variable(const Variable *) defined in Token
      uses function isReference() defined in Variable
      uses function referenceAs_va_start_error(const Token *,const std::string &) defined in CheckVaarg
      uses function name() defined in Variable
      uses function index() defined in Variable
      uses function wrongParameterTo_va_start_error(const Token *,const std::string &,const std::string &) defined in CheckVaarg
   function va_start_subsequentCallsError(const Token *,const std::string &) in line 58
      5 lines of code
      2 parameters
      1 conditional paths
      uses enumvalue error defined in Severity
   function wrongParameterTo_va_start_error(const Token *,const std::string &,const std::string &) in line 54
      5 lines of code
      3 parameters
      1 conditional paths
      uses enumvalue warning defined in Severity
   function CheckVaarg() in line 37
      protection public
      2 lines of code
      0 parameters
      1 conditional paths
   function CheckVaarg(const Tokenizer *,const Settings *,ErrorLogger *) in line 40
      protection public
      3 lines of code
      3 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/lib/config.h
module config.h
   macro definition CPPCHECKLIB in line 13
      protection public
   variable emptyString in line 23
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/lib/cppcheck.cpp
module cppcheck.cpp
   variable Version in line 38
      protection public
   variable ExtraVersion in line 39
      protection public
   variable S_timerResults in line 41
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/lib/cppcheck.h
module CppCheck
   inherits from ErrorLogger
   function analyseWholeProgram() in line 128
      protection public
      6 lines of code
      0 parameters
      2 conditional paths
      uses variable fileInfo defined in CppCheck
      uses variable _settings defined in CppCheck
   function check(const std::string &) in line 70
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable fin defined in triage-report.py
      uses variable path defined in daca2-report.py
      uses function processFile(const std::string &,std::istream &) defined in CppCheck
   function check(const std::string &,const std::string &) in line 83
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses function processFile(const std::string &,std::istream &) defined in CppCheck
      uses variable path defined in daca2-report.py
   function checkNormalTokens(const Tokenizer &) in line 157
      20 lines of code
      1 parameters
      5 conditional paths
      uses variable _settings defined in CppCheck
      uses function terminated() defined in Settings
      uses variable showtime defined in Settings
      uses variable fileInfo defined in CppCheck
      uses function executeRules(const std::string &,const Tokenizer &) defined in CppCheck
   function checkRawTokens(const Tokenizer &) in line 151
      5 lines of code
      1 parameters
      1 conditional paths
      uses function executeRules(const std::string &,const Tokenizer &) defined in CppCheck
   function checkSimplifiedTokens(const Tokenizer &) in line 163
      15 lines of code
      1 parameters
      4 conditional paths
      uses variable _settings defined in CppCheck
      uses function terminated() defined in Settings
      uses variable showtime defined in Settings
      uses function Stop() defined in Timer
      uses function executeRules(const std::string &,const Tokenizer &) defined in CppCheck
   function dontSimplify() in line 123
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses variable filename defined in extracttests.py
      uses variable msg defined in findcasts.py
      uses function reportErr(const ErrorLogger::ErrorMessage &) defined in ErrorLogger
      uses function reportOut(const std::string &) defined in ErrorLogger
   function executeRules(const std::string &,const Tokenizer &) in line 170
      86 lines of code
      2 parameters
      13 conditional paths
      uses variable _settings defined in CppCheck
      uses variable rules defined in Settings
      uses function tokens() defined in Tokenizer
      uses function next() defined in Token
      uses variable pattern defined in Settings::Rule
      uses variable id defined in Settings::Rule
      uses variable severity defined in Settings::Rule
      uses enumvalue none defined in Severity
      uses variable tokenlist defined in Settings::Rule
      uses enumvalue error defined in Severity
      uses function reportErr(const ErrorLogger::ErrorMessage &) defined in CppCheck
      uses function setfile(const std::string &) defined in ErrorLogger::ErrorMessage::FileLocation
      uses variable list defined in Tokenizer
      uses function getSourceFilePath() defined in TokenList
      uses variable line defined in ErrorLogger::ErrorMessage::FileLocation
      uses function getFiles() defined in TokenList
      uses variable summary defined in Settings::Rule
   function extraVersion() in line 103
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function getErrorMessages() in line 118
      protection public
      19 lines of code
      0 parameters
      2 conditional paths
      uses variable s defined in extracttests.py
      uses variable _settings defined in CppCheck
      uses variable tooManyConfigs defined in CppCheck
      uses function tooManyConfigsError(const std::string &,const std::size_t) defined in CppCheck
   function internalError(const std::string &,const std::string &) in line 137
      23 lines of code
      2 parameters
      2 conditional paths
      uses variable filename defined in extracttests.py
      uses variable msg defined in findcasts.py
      uses variable _settings defined in CppCheck
      uses function isEnabled(T &&) defined in Settings
      uses enumvalue information defined in Severity
      uses variable _errorLogger defined in CppCheck
      uses function reportErr(const ErrorLogger::ErrorMessage &) defined in ErrorLogger
      uses function reportOut(const std::string &) defined in ErrorLogger
   function processFile(const std::string &,std::istream &) in line 145
      235 lines of code
      2 parameters
      42 conditional paths
      uses variable exitcode defined in CppCheck
      uses variable filename defined in extracttests.py
      uses variable _settings defined in CppCheck
      uses variable debugwarnings defined in Settings
      uses function terminated() defined in Settings
      uses variable quiet defined in Settings
      uses variable _errorLogger defined in CppCheck
      uses function reportOut(const std::string &) defined in ErrorLogger
      uses variable showtime defined in Settings
      uses function preprocess(std::istream &,std::map< std::string, std::string > &,const std::string &,const std::list< std::string > &) defined in Preprocessor
      uses variable includePaths defined in Settings
      uses variable checkConfiguration defined in Settings
      uses variable rules defined in Settings
      uses variable list defined in Tokenizer
      uses function createTokens(std::istream &,const std::string &) defined in TokenList
      uses function front() defined in TokenList
      uses function next() defined in Token
      uses variable code defined in extracttests.py
      uses function linenr() defined in Token
      uses function file(const Token *) defined in TokenList
      uses function executeRules(const std::string &,const Tokenizer &) defined in CppCheck
      uses variable userDefines defined in Settings
      uses variable maxConfigs defined in Settings
      uses variable force defined in Settings
      uses function isEnabled(T &&) defined in Settings
      uses function tooManyConfigsError(const std::string &,const std::size_t) defined in CppCheck
      uses variable tooManyConfigs defined in CppCheck
      uses variable dump defined in Settings
      uses variable cfg defined in CppCheck
      uses function getcode(const std::string &,const std::string &,const std::string &) defined in Preprocessor
      uses function Stop() defined in Timer
      uses function append(const std::string &) defined in Settings
      uses variable preprocessOnly defined in Settings
      uses variable macroChar defined in Preprocessor
      uses function reportOut(const std::string &) defined in CppCheck
      uses enumvalue SHOWTIME_NONE defined in timer.h
      uses function setTimerResults(TimerResults *) defined in Tokenizer
      uses variable result defined in triage-report.py
      uses function createTokens(std::istream &,const char) defined in Tokenizer
      uses function checkRawTokens(const Tokenizer &) defined in CppCheck
      uses function simplifyTokens1(const std::string &,bool) defined in Tokenizer
      uses function dump(std::ostream &) defined in Tokenizer
      uses function calculateChecksum() defined in TokenList
      uses function checkNormalTokens(const Tokenizer &) defined in CppCheck
      uses variable _simplify defined in CppCheck
      uses function simplifyTokenList2() defined in Tokenizer
      uses function checkSimplifiedTokens(const Tokenizer &) defined in CppCheck
      uses variable e defined in extracttests.py
      uses variable debug defined in Settings
      uses variable verbose defined in Settings
      uses function purgedConfigurationMessage(const std::string &,const std::string &) defined in CppCheck
      uses variable line defined in ErrorLogger::ErrorMessage::FileLocation
      uses function setfile(const std::string &) defined in ErrorLogger::ErrorMessage::FileLocation
      uses function getSourceFilePath() defined in TokenList
      uses enumvalue error defined in Severity
      uses function reportErr(const ErrorLogger::ErrorMessage &) defined in CppCheck
      uses function internalError(const std::string &,const std::string &) defined in CppCheck
      uses variable jointSuppressionReport defined in Settings
      uses function reportUnmatchedSuppressions(const std::list< Suppressions::SuppressionEntry > &) defined in ErrorLogger
      uses variable nomsg defined in Settings
      uses function getUnmatchedLocalSuppressions(const std::string &,const bool) defined in Suppressions
      uses function unusedFunctionCheckIsEnabled() defined in CppCheck
      uses variable _errorList defined in CppCheck
   function purgedConfigurationMessage(const std::string &,const std::string &) in line 121
      protection public
      23 lines of code
      2 parameters
      3 conditional paths
      uses variable tooManyConfigs defined in CppCheck
      uses variable _settings defined in CppCheck
      uses function isEnabled(T &&) defined in Settings
      uses function setfile(const std::string &) defined in ErrorLogger::ErrorMessage::FileLocation
      uses enumvalue information defined in Severity
      uses function reportErr(const ErrorLogger::ErrorMessage &) defined in CppCheck
   function reportErr(const ErrorLogger::ErrorMessage &) in line 179
      35 lines of code
      1 parameters
      9 conditional paths
      uses variable _settings defined in CppCheck
      uses variable library defined in Settings
      uses function reportErrors(const std::string &) defined in Library
      uses variable msg defined in findcasts.py
      uses variable verbose defined in Settings
      uses variable _errorList defined in CppCheck
      uses variable line defined in triage-report.py
      uses variable _useGlobalSuppressions defined in CppCheck
      uses variable nomsg defined in Settings
      uses function isSuppressed(const std::string &,const std::string &,unsigned int) defined in Suppressions
      uses function isSuppressedLocal(const std::string &,const std::string &,unsigned int) defined in Suppressions
      uses variable nofail defined in Settings
      uses variable exitcode defined in CppCheck
      uses variable _errorLogger defined in CppCheck
      uses function reportErr(const ErrorLogger::ErrorMessage &) defined in ErrorLogger
   function reportInfo(const ErrorLogger::ErrorMessage &) in line 196
      19 lines of code
      1 parameters
      5 conditional paths
      uses variable line defined in triage-report.py
      uses variable msg defined in findcasts.py
      uses variable _useGlobalSuppressions defined in CppCheck
      uses variable _settings defined in CppCheck
      uses variable nomsg defined in Settings
      uses function isSuppressed(const std::string &,const std::string &,unsigned int) defined in Suppressions
      uses function isSuppressedLocal(const std::string &,const std::string &,unsigned int) defined in Suppressions
      uses variable _errorLogger defined in CppCheck
      uses function reportInfo(const ErrorLogger::ErrorMessage &) defined in ErrorLogger
   function reportOut(const std::string &) in line 186
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable _errorLogger defined in CppCheck
      uses function reportOut(const std::string &) defined in ErrorLogger
   function reportProgress(const std::string &,const char,const std::size_t) in line 191
      4 lines of code
      3 parameters
      1 conditional paths
      uses variable _errorLogger defined in CppCheck
      uses function reportProgress(const std::string &,const char,const std::size_t) defined in ErrorLogger
      uses variable filename defined in extracttests.py
   function reportStatus(unsigned int,unsigned int,std::size_t,std::size_t) in line 105
      protection public
      4 lines of code
      4 parameters
      1 conditional paths
   function settings() in line 89
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable _settings defined in CppCheck
   function terminate() in line 110
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function tooManyConfigsError(const std::string &,const std::size_t) in line 120
      protection public
      39 lines of code
      2 parameters
      7 conditional paths
      uses variable _settings defined in CppCheck
      uses function isEnabled(T &&) defined in Settings
      uses variable tooManyConfigs defined in CppCheck
      uses function setfile(const std::string &) defined in ErrorLogger::ErrorMessage::FileLocation
      uses variable msg defined in findcasts.py
      uses variable maxConfigs defined in Settings
      uses enumvalue information defined in Severity
      uses function reportErr(const ErrorLogger::ErrorMessage &) defined in CppCheck
   function unusedFunctionCheckIsEnabled() in line 132
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable _settings defined in CppCheck
      uses variable jobs defined in Settings
      uses function isEnabled(T &&) defined in Settings
   function version() in line 95
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function CppCheck(ErrorLogger &,bool) in line 49
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function ~CppCheck() in line 54
      protection public
      8 lines of code
      0 parameters
      2 conditional paths
      uses variable fileInfo defined in CppCheck
      uses function ShowResults(SHOWTIME_MODES) defined in TimerResults
      uses variable _settings defined in CppCheck
      uses variable showtime defined in Settings
   variable _errorList in line 188
   variable _errorLogger in line 198
   variable _settings in line 189
   variable _simplify in line 211
   variable _useGlobalSuppressions in line 205
   variable cfg in line 201
   variable exitcode in line 203
   variable fileInfo in line 214
   variable tooManyConfigs in line 208
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/lib/cxx11emu.h
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/lib/errorlogger.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/lib/errorlogger.h
module InternalError
   function InternalError(const Token *,const std::string &,Type) in line 39
      protection public
      12 lines of code
      3 parameters
      3 conditional paths
      uses enumvalue SYNTAX defined in InternalError
      uses enumvalue INTERNAL defined in InternalError
   variable errorMessage in line 41
      protection public
   variable id in line 42
      protection public
   variable token in line 40
      protection public
module Severity
   function fromString(const std::string &) in line 124
      protection public
      21 lines of code
      1 parameters
      10 conditional paths
   function toString(SeverityType) in line 103
      protection public
      21 lines of code
      1 parameters
      9 conditional paths
      uses function InternalError(const Token *,const std::string &,Type) defined in InternalError
module ErrorLogger
   abstract class
   function callStackToString(const std::list< ErrorLogger::ErrorMessage::FileLocation > &) in line 313
      protection public
      8 lines of code
      1 parameters
      2 conditional paths
   function reportErr(const ErrorLogger::ErrorMessage &) in line 285
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function reportInfo(const ErrorLogger::ErrorMessage &) in line 303
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
      uses variable msg defined in findcasts.py
   function reportOut(const std::string &) in line 277
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function reportProgress(const std::string &,const char,const std::size_t) in line 293
      protection public
      5 lines of code
      3 parameters
      1 conditional paths
      uses variable filename defined in extracttests.py
   function reportUnmatchedSuppressions(const std::list< Suppressions::SuppressionEntry > &) in line 311
      protection public
      28 lines of code
      1 parameters
      7 conditional paths
      uses function reportErr(const ErrorLogger::ErrorMessage &) defined in ErrorLogger
      uses enumvalue information defined in Severity
   function toxml(const std::string &) in line 320
      protection public
      32 lines of code
      1 parameters
      8 conditional paths
      uses variable xml defined in extracttests.py
   function ErrorLogger() in line 268
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function ~ErrorLogger() in line 269
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
      uses variable msg defined in findcasts.py
module ErrorLogger::ErrorMessage
   function deserialize(const std::string &) in line 224
      protection public
      69 lines of code
      1 parameters
      12 conditional paths
      uses variable _inconclusive defined in ErrorLogger::ErrorMessage
      uses variable _callStack defined in ErrorLogger::ErrorMessage
      uses variable data defined in cert.py
      uses variable results defined in daca2-addons.py
      uses variable _id defined in ErrorLogger::ErrorMessage
      uses variable _severity defined in ErrorLogger::ErrorMessage
      uses function fromString(const std::string &) defined in Severity
      uses variable _cwe defined in ErrorLogger::ErrorMessage
      uses variable _shortMessage defined in ErrorLogger::ErrorMessage
      uses variable _verboseMessage defined in ErrorLogger::ErrorMessage
      uses function setfile(const std::string &) defined in ErrorLogger::ErrorMessage::FileLocation
      uses variable line defined in ErrorLogger::ErrorMessage::FileLocation
   function findAndReplace(std::string &,const std::string &,const std::string &) in line 257
      8 lines of code
      3 parameters
      2 conditional paths
   function fixInvalidChars(const std::string &) in line 259
      24 lines of code
      1 parameters
      4 conditional paths
      uses variable result defined in triage-report.py
   function getXMLFooter(int) in line 212
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function getXMLHeader(int) in line 211
      protection public
      22 lines of code
      1 parameters
      2 conditional paths
      uses function PushDeclaration(const char *) defined in tinyxml2::XMLPrinter
      uses function OpenElement(const char *,bool) defined in tinyxml2::XMLPrinter
      uses function PushAttribute(const char *,const char *) defined in tinyxml2::XMLPrinter
      uses function CloseElement(bool) defined in tinyxml2::XMLPrinter
      uses function CStr() defined in tinyxml2::XMLPrinter
   function serialize() in line 223
      protection public
      27 lines of code
      0 parameters
      3 conditional paths
      uses variable _id defined in ErrorLogger::ErrorMessage
      uses function toString(SeverityType) defined in Severity
      uses variable _severity defined in ErrorLogger::ErrorMessage
      uses variable _cwe defined in ErrorLogger::ErrorMessage
      uses variable _inconclusive defined in ErrorLogger::ErrorMessage
      uses function fixInvalidChars(const std::string &) defined in ErrorLogger::ErrorMessage
      uses variable _shortMessage defined in ErrorLogger::ErrorMessage
      uses variable _verboseMessage defined in ErrorLogger::ErrorMessage
      uses variable _callStack defined in ErrorLogger::ErrorMessage
   function setmsg(const std::string &) in line 237
      protection public
      21 lines of code
      1 parameters
      2 conditional paths
      uses variable msg defined in findcasts.py
      uses variable _shortMessage defined in ErrorLogger::ErrorMessage
      uses variable _verboseMessage defined in ErrorLogger::ErrorMessage
   function shortMessage() in line 240
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function toString(bool,const std::string &) in line 221
      protection public
      46 lines of code
      2 parameters
      6 conditional paths
      uses variable _callStack defined in ErrorLogger::ErrorMessage
      uses function callStackToString(const std::list< ErrorLogger::ErrorMessage::FileLocation > &) defined in ErrorLogger
      uses variable _severity defined in ErrorLogger::ErrorMessage
      uses enumvalue none defined in Severity
      uses function toString(SeverityType) defined in Severity
      uses variable _inconclusive defined in ErrorLogger::ErrorMessage
      uses variable _verboseMessage defined in ErrorLogger::ErrorMessage
      uses variable _shortMessage defined in ErrorLogger::ErrorMessage
      uses variable result defined in triage-report.py
      uses function findAndReplace(std::string &,const std::string &,const std::string &) defined in ErrorLogger::ErrorMessage
      uses variable _id defined in ErrorLogger::ErrorMessage
   function toXML(bool,int) in line 209
      protection public
      46 lines of code
      2 parameters
      8 conditional paths
      uses variable _inconclusive defined in ErrorLogger::ErrorMessage
      uses function OpenElement(const char *,bool) defined in tinyxml2::XMLPrinter
      uses variable _callStack defined in ErrorLogger::ErrorMessage
      uses function PushAttribute(const char *,const char *) defined in tinyxml2::XMLPrinter
      uses variable _id defined in ErrorLogger::ErrorMessage
      uses variable _severity defined in ErrorLogger::ErrorMessage
      uses enumvalue error defined in Severity
      uses variable _verboseMessage defined in ErrorLogger::ErrorMessage
      uses variable _shortMessage defined in ErrorLogger::ErrorMessage
      uses function CloseElement(bool) defined in tinyxml2::XMLPrinter
      uses function CStr() defined in tinyxml2::XMLPrinter
      uses function toString(SeverityType) defined in Severity
      uses function fixInvalidChars(const std::string &) defined in ErrorLogger::ErrorMessage
      uses variable _cwe defined in ErrorLogger::ErrorMessage
   function verboseMessage() in line 245
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function ErrorMessage(const std::list< FileLocation > &,Severity::SeverityType,const std::string &,const std::string &,bool) in line 200
      protection public
      10 lines of code
      5 parameters
      1 conditional paths
      uses function setmsg(const std::string &) defined in ErrorLogger::ErrorMessage
      uses variable msg defined in findcasts.py
   function ErrorMessage(const std::list< const Token * > &,const TokenList *,Severity::SeverityType,const std::string &,const std::string &,bool) in line 201
      protection public
      17 lines of code
      6 parameters
      4 conditional paths
      uses variable _callStack defined in ErrorLogger::ErrorMessage
      uses function getFiles() defined in TokenList
      uses variable file0 defined in ErrorLogger::ErrorMessage
      uses function setmsg(const std::string &) defined in ErrorLogger::ErrorMessage
      uses variable msg defined in findcasts.py
   function ErrorMessage() in line 202
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   variable _callStack in line 226
      protection public
   variable _cwe in line 233
      protection public
   variable _id in line 227
      protection public
   variable _inconclusive in line 234
      protection public
   variable _severity in line 232
      protection public
   variable _shortMessage in line 262
   variable _verboseMessage in line 265
   variable file0 in line 230
      protection public
module ErrorLogger::ErrorMessage::FileLocation
   function getfile(bool) in line 181
      protection public
      6 lines of code
      1 parameters
      2 conditional paths
      uses variable _file defined in ErrorLogger::ErrorMessage::FileLocation
   function setfile(const std::string &) in line 187
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses variable _file defined in ErrorLogger::ErrorMessage::FileLocation
   function stringify() in line 192
      protection public
      9 lines of code
      0 parameters
      2 conditional paths
      uses variable _file defined in ErrorLogger::ErrorMessage::FileLocation
      uses variable line defined in ErrorLogger::ErrorMessage::FileLocation
   function FileLocation() in line 166
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function FileLocation(const std::string &,unsigned int) in line 170
      protection public
      3 lines of code
      2 parameters
      1 conditional paths
   function FileLocation(const Token *,const TokenList *) in line 174
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   variable _file in line 196
   variable line in line 194
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/lib/library.cpp
module library.cpp
   function getnames(const char *) in line 30
      protection public
      10 lines of code
      1 parameters
      2 conditional paths
   function functionName(const Token *,bool *) in line 696
      protection public
      25 lines of code
      2 parameters
      7 conditional paths
      uses function isName() defined in Token
      uses function str(T &&) defined in Token
      uses function astOperand2(Token *) defined in Token
      uses function astOperand1(Token *) defined in Token
      uses function astCanonicalType(const Token *) defined in astutils.cpp
   function functionName(const Token *) in line 722
      protection public
      25 lines of code
      1 parameters
      6 conditional paths
      uses function astParent() defined in Token
      uses function functionName(const Token *,bool *) defined in library.cpp
      uses function next() defined in Token
      uses function astOperand1(Token *) defined in Token
      uses function previous() defined in Token
      uses function tokAt(int) defined in Token
      uses function str(T &&) defined in Token
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/lib/library.h
module Library
   function alloc(const char) in line 68
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
      uses variable name defined in setup.py
   function alloc(const Token *) in line 73
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function isNotLibraryFunction(const Token *) defined in Library
      uses variable argumentChecks defined in Library
      uses function getid(const std::map< std::string, int > &,const std::string &) defined in Library
      uses variable _alloc defined in Library
   function argminsizes(const Token *,int) in line 260
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses variable minsizes defined in Library::ArgumentChecks
      uses variable path defined in daca2-report.py
   function blockend(const std::string &) in line 284
      protection public
      10 lines of code
      1 parameters
      2 conditional paths
      uses variable _executableblocks defined in Library
   function blockstart(const std::string &) in line 283
      protection public
      10 lines of code
      1 parameters
      2 conditional paths
      uses variable _executableblocks defined in Library
   function blockstartoffset(const std::string &) in line 281
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses variable _executableblocks defined in Library
   function dealloc(const Token *) in line 76
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function isNotLibraryFunction(const Token *) defined in Library
      uses variable argumentChecks defined in Library
      uses function getid(const std::map< std::string, int > &,const std::string &) defined in Library
      uses variable _dealloc defined in Library
   function dealloc(const char) in line 79
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
      uses variable name defined in setup.py
   function detectContainer(const Token *,bool) in line 189
      protection public
      23 lines of code
      2 parameters
      8 conditional paths
      uses variable containers defined in Library
      uses variable startPattern defined in Library::Container
      uses variable endPattern defined in Library::Container
      uses function varId() defined in Token
      uses variable itEndPattern defined in Library::Container
   function formatstr_function(const std::string &) in line 107
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function formatstr_scan(const std::string &) in line 111
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function formatstr_secure(const std::string &) in line 115
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function getarg(const Token *,int) in line 463
      16 lines of code
      2 parameters
      5 conditional paths
      uses function isNotLibraryFunction(const Token *) defined in Library
      uses variable argumentChecks defined in Library
   function getid(const std::map< std::string, int > &,const std::string &) in line 465
      4 lines of code
      2 parameters
      1 conditional paths
      uses variable data defined in cert.py
      uses variable name defined in setup.py
   function getWarnInfo(const Token *) in line 131
      protection public
      9 lines of code
      1 parameters
      3 conditional paths
      uses function isNotLibraryFunction(const Token *) defined in Library
      uses variable functionwarn defined in Library
   function hasminsize(const std::string &) in line 247
      protection public
      12 lines of code
      1 parameters
      4 conditional paths
      uses variable functionName defined in extracttests.py
   function ignorefunction(const std::string &) in line 275
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function isargformatstr(const Token *,int) in line 230
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses variable formatstr defined in Library::ArgumentChecks
   function isargstrz(const Token *,int) in line 235
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses variable strz defined in Library::ArgumentChecks
   function isargvalid(const Token *,int,const MathLib::bigint) in line 240
      protection public
      26 lines of code
      3 parameters
      9 conditional paths
      uses function getarg(const Token *,int) defined in Library
      uses variable valid defined in Library::ArgumentChecks
      uses function createTokens(std::istream &,const std::string &) defined in TokenList
      uses function front() defined in TokenList
      uses function next() defined in Token
   function isboolargbad(const Token *,int) in line 222
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses variable notbool defined in Library::ArgumentChecks
   function isexecutableblock(const std::string &,const std::string &) in line 279
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses variable _executableblocks defined in Library
   function isexportedprefix(const std::string &,const std::string &) in line 292
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function isexportedsuffix(const std::string &,const std::string &) in line 297
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function isexporter(const std::string &) in line 288
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function isimporter(const std::string &,const std::string &) in line 302
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
      uses variable _importers defined in Library
   function iskeyword(const std::string &,const std::string &) in line 286
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
      uses variable _keywords defined in Library
   function ismemory(int) in line 98
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function isnoreturn(const Token *) in line 139
      protection public
      9 lines of code
      1 parameters
      3 conditional paths
      uses function function(const Function *) defined in Token
      uses function isNotLibraryFunction(const Token *) defined in Library
      uses variable _noreturn defined in Library
   function isNotLibraryFunction(const Token *) in line 134
      protection public
      22 lines of code
      1 parameters
      7 conditional paths
      uses function function(const Function *) defined in Token
      uses enumvalue eGlobal defined in Scope
      uses function varId() defined in Token
      uses function numberOfArguments(const Token *) defined in astutils.cpp
      uses variable argumentChecks defined in Library
   function isnotnoreturn(const Token *) in line 140
      protection public
      9 lines of code
      1 parameters
      3 conditional paths
      uses function function(const Function *) defined in Token
      uses function isNotLibraryFunction(const Token *) defined in Library
      uses variable _noreturn defined in Library
   function isnullargbad(const Token *,int) in line 227
      protection public
      12 lines of code
      2 parameters
      3 conditional paths
      uses function getarg(const Token *,int) defined in Library
      uses variable _formatstr defined in Library
      uses variable notnull defined in Library::ArgumentChecks
   function isreflection(const std::string &) in line 304
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
   function isresource(int) in line 103
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function isScopeNoReturn(const Token *,std::string *) in line 142
      protection public
      30 lines of code
      2 parameters
      10 conditional paths
      uses function tokAt(int) defined in Token
      uses function linkAt(int) defined in Token
      uses function previous() defined in Token
      uses function isName() defined in Token
      uses function str(T &&) defined in Token
      uses function isnotnoreturn(const Token *) defined in Library
      uses function isnoreturn(const Token *) defined in Library
   function isuninitargbad(const Token *,int) in line 228
      protection public
      12 lines of code
      2 parameters
      3 conditional paths
      uses function getarg(const Token *,int) defined in Library
      uses variable _formatstr defined in Library
      uses variable notuninit defined in Library::ArgumentChecks
   function isUseRetVal(const Token *) in line 137
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function isNotLibraryFunction(const Token *) defined in Library
      uses variable _useretval defined in Library
   function load(const char,const char) in line 61
      protection public
      63 lines of code
      2 parameters
      15 conditional paths
      uses variable path defined in daca2-report.py
      uses variable e defined in extracttests.py
      uses enumvalue OK defined in Library
      uses function LoadFile(const char *) defined in tinyxml2::XMLDocument
      uses enumvalue XML_ERROR_FILE_NOT_FOUND defined in tinyxml2.h
      uses enumvalue FILE_NOT_FOUND defined in Library
      uses variable filename defined in extracttests.py
      uses enumvalue XML_NO_ERROR defined in tinyxml2.h
      uses variable _files defined in Library
      uses variable errorcode defined in Library::Error
      uses enumvalue BAD_XML defined in Library
   function load(const tinyxml2::XMLDocument &) in line 62
      protection public
      393 lines of code
      1 parameters
      122 conditional paths
      uses function FirstChildElement(const char *) defined in tinyxml2::XMLNode
      uses enumvalue BAD_XML defined in Library
      uses function Name() defined in tinyxml2::XMLElement
      uses enumvalue UNSUPPORTED_FORMAT defined in Library
      uses function Attribute(const char *,const char *) defined in tinyxml2::XMLElement
      uses function NextSiblingElement(const char *) defined in tinyxml2::XMLNode
      uses variable _dealloc defined in Library
      uses function ismemory(int) defined in Library
      uses variable allocid defined in Library
      uses function isresource(int) defined in Library
      uses variable _alloc defined in Library
      uses variable returnuninitdata defined in Library
      uses variable use defined in Library
      uses variable name defined in setup.py
      uses enumvalue MISSING_ATTRIBUTE defined in Library
      uses variable defines defined in Library
      uses function loadFunction(const tinyxml2::XMLElement *const,const std::string &,std::set< std::string > &) defined in Library
      uses variable errorcode defined in Library::Error
      uses variable _reflection defined in Library
      uses variable _markupExtensions defined in Library
      uses variable _reporterrors defined in Library
      uses variable _processAfterCode defined in Library
      uses variable _keywords defined in Library
      uses variable e defined in extracttests.py
      uses variable _exporters defined in Library
      uses variable _importers defined in Library
      uses variable _executableblocks defined in Library
      uses variable containers defined in Library
      uses enumvalue BAD_ATTRIBUTE_VALUE defined in Library
      uses variable startPattern defined in Library::Container
      uses variable endPattern defined in Library::Container
      uses variable itEndPattern defined in Library::Container
      uses variable opLessAllowed defined in Library::Container
      uses enumvalue NO_ACTION defined in Library::Container
      uses enumvalue RESIZE defined in Library::Container
      uses enumvalue CLEAR defined in Library::Container
      uses enumvalue PUSH defined in Library::Container
      uses enumvalue POP defined in Library::Container
      uses enumvalue FIND defined in Library::Container
      uses enumvalue INSERT defined in Library::Container
      uses enumvalue ERASE defined in Library::Container
      uses enumvalue CHANGE_CONTENT defined in Library::Container
      uses enumvalue CHANGE_INTERNAL defined in Library::Container
      uses enumvalue CHANGE defined in Library::Container
      uses enumvalue NO_YIELD defined in Library::Container
      uses enumvalue AT_INDEX defined in Library::Container
      uses enumvalue ITEM defined in Library::Container
      uses enumvalue BUFFER defined in Library::Container
      uses enumvalue BUFFER_NT defined in Library::Container
      uses enumvalue START_ITERATOR defined in Library::Container
      uses enumvalue END_ITERATOR defined in Library::Container
      uses enumvalue ITERATOR defined in Library::Container
      uses enumvalue SIZE defined in Library::Container
      uses enumvalue EMPTY defined in Library::Container
      uses variable functions defined in Library::Container
      uses variable size_templateArgNo defined in Library::Container
      uses variable arrayLike_indexOp defined in Library::Container
      uses variable type_templateArgNo defined in Library::Container
      uses variable stdStringLike defined in Library::Container
      uses variable size defined in Library::PodType
      uses variable sign defined in Library::PodType
      uses variable podtypes defined in Library
      uses variable _type defined in Library::PlatformType
      uses variable _signed defined in Library::PlatformType
      uses variable _unsigned defined in Library::PlatformType
      uses variable _long defined in Library::PlatformType
      uses variable _pointer defined in Library::PlatformType
      uses variable _ptr_ptr defined in Library::PlatformType
      uses variable _const_ptr defined in Library::PlatformType
      uses function platform_type(const std::string &,const std::string &) defined in Library
      uses enumvalue DUPLICATE_PLATFORM_TYPE defined in Library
      uses enumvalue PLATFORM_TYPE_REDEFINED defined in Library
      uses variable platform_types defined in Library
      uses variable platforms defined in Library
      uses enumvalue UNKNOWN_ELEMENT defined in Library
      uses enumvalue OK defined in Library
   function loadFunction(const tinyxml2::XMLElement *const,const std::string &,std::set< std::string > &) in line 387
      159 lines of code
      3 parameters
      44 conditional paths
      uses variable name defined in setup.py
      uses enumvalue OK defined in Library
      uses function FirstChildElement(const char *) defined in tinyxml2::XMLNode
      uses function NextSiblingElement(const char *) defined in tinyxml2::XMLNode
      uses variable _noreturn defined in Library
      uses variable functionpure defined in Library
      uses variable functionconst defined in Library
      uses variable leakignore defined in Library
      uses variable _useretval defined in Library
      uses variable argumentChecks defined in Library
      uses enumvalue BAD_ATTRIBUTE_VALUE defined in Library
      uses enumvalue MISSING_ATTRIBUTE defined in Library
      uses enumvalue STRLEN defined in Library::ArgumentChecks::MinSize
      uses enumvalue ARGVALUE defined in Library::ArgumentChecks::MinSize
      uses enumvalue SIZEOF defined in Library::ArgumentChecks::MinSize
      uses enumvalue MUL defined in Library::ArgumentChecks::MinSize
      uses variable _ignorefunction defined in Library
      uses variable _formatstr defined in Library
      uses function BoolValue() defined in tinyxml2::XMLAttribute
      uses variable severity defined in Library::WarnInfo
      uses variable standards defined in Library::WarnInfo
      uses function setC(const std::string &) defined in Standards
      uses variable c defined in Standards
      uses enumvalue C89 defined in Standards
      uses function setCPP(const std::string &) defined in Standards
      uses variable cpp defined in Standards
      uses enumvalue CPP03 defined in Standards
      uses variable message defined in Library::WarnInfo
      uses variable functionwarn defined in Library
   function loadxmldata(const char,std::size_t) in line 65
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses enumvalue XML_NO_ERROR defined in tinyxml2.h
      uses function Parse(const char *,size_t) defined in tinyxml2::XMLDocument
      uses function load(const char,const char) defined in Library
      uses variable errorcode defined in Library::Error
      uses enumvalue OK defined in Library
   function markupExtensions() in line 269
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses variable path defined in daca2-report.py
   function markupFile(const std::string &) in line 265
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable _markupExtensions defined in Library
      uses variable path defined in daca2-report.py
   function platform_type(const std::string &,const std::string &) in line 370
      protection public
      14 lines of code
      2 parameters
      3 conditional paths
      uses variable name defined in setup.py
   function podtype(const std::string &) in line 327
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable name defined in setup.py
   function processMarkupAfterCode(const std::string &) in line 267
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable _processAfterCode defined in Library
      uses variable path defined in daca2-report.py
   function reflectionArgument(const std::string &) in line 310
      protection public
      9 lines of code
      1 parameters
      2 conditional paths
   function reportErrors(const std::string &) in line 273
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable _reporterrors defined in Library
      uses variable path defined in daca2-report.py
   function setalloc(const std::string &,int) in line 84
      protection public
      3 lines of code
      2 parameters
      1 conditional paths
      uses variable functionname defined in extracttests.py
   function setdealloc(const std::string &,int) in line 88
      protection public
      3 lines of code
      2 parameters
      1 conditional paths
      uses variable functionname defined in extracttests.py
   function setnoreturn(const std::string &,bool) in line 93
      protection public
      3 lines of code
      2 parameters
      1 conditional paths
   function validarg(const Token *,int) in line 242
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses variable valid defined in Library::ArgumentChecks
   function Library() in line 48
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   variable _alloc in line 446
   variable _dealloc in line 447
   variable _executableblocks in line 454
   variable _exporters in line 455
   variable _files in line 444
   variable _formatstr in line 458
   variable _ignorefunction in line 449
   variable _importers in line 456
   variable _keywords in line 453
   variable _markupExtensions in line 452
   variable _noreturn in line 448
   variable _processAfterCode in line 451
   variable _reflection in line 457
   variable _reporterrors in line 450
   variable _useretval in line 445
   variable allocid in line 443
   variable argumentChecks in line 220
      protection public
   variable containers in line 188
      protection public
   variable defines in line 321
      protection public
   variable functionconst in line 121
      protection public
   variable functionpure in line 122
      protection public
   variable functionwarn in line 129
      protection public
   variable leakignore in line 120
      protection public
   variable platform_types in line 460
   variable platforms in line 461
   variable podtypes in line 459
   variable returnuninitdata in line 320
      protection public
   variable use in line 119
      protection public
module Library::Error
   function Error() in line 54
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function Error(ErrorCode) in line 55
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function Error(ErrorCode,const std::string &) in line 56
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   variable errorcode in line 57
      protection public
   variable reason in line 58
      protection public
module Library::WarnInfo
   variable message in line 125
      protection public
   variable severity in line 127
      protection public
   variable standards in line 126
      protection public
module Library::Container
   function getAction(const std::string &) in line 174
      protection public
      6 lines of code
      1 parameters
      2 conditional paths
   function getYield(const std::string &) in line 181
      protection public
      6 lines of code
      1 parameters
      2 conditional paths
   function Container() in line 146
      protection public
      7 lines of code
      0 parameters
      1 conditional paths
   variable arrayLike_indexOp in line 170
      protection public
   variable endPattern in line 166
      protection public
   variable functions in line 167
      protection public
   variable itEndPattern in line 166
      protection public
   variable opLessAllowed in line 172
      protection public
   variable size_templateArgNo in line 169
      protection public
   variable startPattern in line 166
      protection public
   variable stdStringLike in line 171
      protection public
   variable type_templateArgNo in line 168
      protection public
module Library::Container::Function
   variable action in line 163
      protection public
   variable yield in line 164
      protection public
module Library::ArgumentChecks
   function ArgumentChecks() in line 193
      protection public
      7 lines of code
      0 parameters
      1 conditional paths
   variable formatstr in line 204
      protection public
   variable minsizes in line 216
      protection public
   variable notbool in line 201
      protection public
   variable notnull in line 202
      protection public
   variable notuninit in line 203
      protection public
   variable strz in line 205
      protection public
   variable valid in line 206
      protection public
module Library::ArgumentChecks::MinSize
   function MinSize(Type,int) in line 211
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   variable arg in line 213
      protection public
   variable arg2 in line 214
      protection public
   variable type in line 212
      protection public
module Library::PodType
   variable sign in line 325
      protection public
   variable size in line 324
      protection public
module Library::PlatformType
   function operator!=(const PlatformType &) in line 350
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function operator==(const PlatformType &) in line 341
      protection public
      9 lines of code
      1 parameters
      1 conditional paths
      uses variable _type defined in Library::PlatformType
      uses variable _signed defined in Library::PlatformType
      uses variable _unsigned defined in Library::PlatformType
      uses variable _long defined in Library::PlatformType
      uses variable _pointer defined in Library::PlatformType
      uses variable _ptr_ptr defined in Library::PlatformType
      uses variable _const_ptr defined in Library::PlatformType
   function PlatformType() in line 333
      protection public
      8 lines of code
      0 parameters
      1 conditional paths
   variable _const_ptr in line 359
      protection public
   variable _long in line 356
      protection public
   variable _pointer in line 357
      protection public
   variable _ptr_ptr in line 358
      protection public
   variable _signed in line 354
      protection public
   variable _type in line 353
      protection public
   variable _unsigned in line 355
      protection public
module Library::Platform
   function platform_type(const std::string &) in line 363
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable name defined in setup.py
   variable _platform_types in line 367
      protection public
module Library::ExportedFunctions
   function addPrefix(const std::string &) in line 391
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function addSuffix(const std::string &) in line 394
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function isPrefix(const std::string &) in line 397
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function isSuffix(const std::string &) in line 400
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   variable _prefixes in line 405
   variable _suffixes in line 406
module Library::CodeBlock
   function addBlock(const std::string &) in line 421
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function end() in line 427
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function isBlock(const std::string &) in line 433
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function offset() in line 430
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function setEnd(const std::string &) in line 415
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
      uses variable e defined in extracttests.py
   function setOffset(const int) in line 418
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function setStart(const std::string &) in line 412
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
      uses variable s defined in extracttests.py
   function start() in line 424
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function CodeBlock() in line 410
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   variable _blocks in line 441
   variable _end in line 439
   variable _offset in line 440
   variable _start in line 438
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/lib/matchcompiler.h
module matchcompiler.h
   function equalN(const char,const char) in line 44
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function equalN< 0 >(const char,const char) in line 50
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function operator==(const std::string &,ConstString< n > const &) in line 56
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function operator!=(const std::string &,ConstString< n > const &) in line 62
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function operator==(const std::string &,ConstString< n > const &) defined in matchcompiler.h
   function makeConstString(const char(&)) in line 68
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable s defined in extracttests.py
module MatchCompiler::ConstString
   function operator StringRef() in line 35
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses variable _s defined in MatchCompiler::ConstString
   function ConstString(StringRef) in line 31
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   variable _s in line 40
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/lib/mathlib.cpp
module mathlib.cpp
   macro definition ISINF in line 37
      protection public
   macro definition ISNAN in line 38
      protection public
   function isOctalDigitString(const std::string &) in line 317
      protection public
      8 lines of code
      1 parameters
      3 conditional paths
      uses function str() defined in MathLib::value
   function encodeMultiChar(const std::string &) in line 326
      protection public
      8 lines of code
      1 parameters
      2 conditional paths
      uses function str() defined in MathLib::value
   function intsuffix(const std::string &,const std::string &) in line 947
      protection public
      35 lines of code
      2 parameters
      12 conditional paths
   function operator+(const MathLib::value &,const MathLib::value &) in line 1210
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function operator-(const MathLib::value &,const MathLib::value &) in line 1215
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function operator*(const MathLib::value &,const MathLib::value &) in line 1220
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function operator/(const MathLib::value &,const MathLib::value &) in line 1225
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function operator%(const MathLib::value &,const MathLib::value &) in line 1230
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function operator&(const MathLib::value &,const MathLib::value &) in line 1235
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function operator|(const MathLib::value &,const MathLib::value &) in line 1240
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function operator^(const MathLib::value &,const MathLib::value &) in line 1245
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/lib/mathlib.h
module mathlib.h
   function operator+(const MathLib::value &,const MathLib::value &) in line 119
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function calc(char,const value &,const value &) defined in MathLib::value
   function operator-(const MathLib::value &,const MathLib::value &) in line 120
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function calc(char,const value &,const value &) defined in MathLib::value
   function operator*(const MathLib::value &,const MathLib::value &) in line 121
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function calc(char,const value &,const value &) defined in MathLib::value
   function operator/(const MathLib::value &,const MathLib::value &) in line 122
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function calc(char,const value &,const value &) defined in MathLib::value
   function operator%(const MathLib::value &,const MathLib::value &) in line 123
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function calc(char,const value &,const value &) defined in MathLib::value
   function operator&(const MathLib::value &,const MathLib::value &) in line 124
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function calc(char,const value &,const value &) defined in MathLib::value
   function operator|(const MathLib::value &,const MathLib::value &) in line 125
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function calc(char,const value &,const value &) defined in MathLib::value
   function operator^(const MathLib::value &,const MathLib::value &) in line 126
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function calc(char,const value &,const value &) defined in MathLib::value
module MathLib
   function abs(const std::string &) in line 101
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function toString(T) defined in MathLib
      uses function toDoubleNumber(const std::string &) defined in MathLib
   function add(const std::string &,const std::string &) in line 90
      protection public
      21 lines of code
      2 parameters
      4 conditional paths
      uses function value(const std::string &) defined in MathLib::value
      uses function isInt(const std::string &) defined in MathLib
      uses function toString(T) defined in MathLib
      uses function toLongNumber(const std::string &) defined in MathLib
      uses function toDoubleNumber(const std::string &) defined in MathLib
      uses variable count defined in extracttests.py
   function calculate(const std::string &,const std::string &,char) in line 96
      protection public
      31 lines of code
      3 parameters
      9 conditional paths
      uses function add(const std::string &,const std::string &) defined in MathLib
      uses function subtract(const std::string &,const std::string &) defined in MathLib
      uses function multiply(const std::string &,const std::string &) defined in MathLib
      uses function divide(const std::string &,const std::string &) defined in MathLib
      uses function mod(const std::string &,const std::string &) defined in MathLib
      uses function toString(T) defined in MathLib
      uses function toLongNumber(const std::string &) defined in MathLib
   function characterLiteralToLongNumber(const std::string &) in line 115
      protection public
      83 lines of code
      1 parameters
      31 conditional paths
      uses function str() defined in MathLib::value
      uses function toLongNumber(const std::string &) defined in MathLib
   function cos(const std::string &) in line 99
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function toString(T) defined in MathLib
      uses function toDoubleNumber(const std::string &) defined in MathLib
   function divide(const std::string &,const std::string &) in line 93
      protection public
      21 lines of code
      2 parameters
      6 conditional paths
      uses function value(const std::string &) defined in MathLib::value
      uses function isInt(const std::string &) defined in MathLib
      uses variable a defined in daca2-report.py
      uses function toLongNumber(const std::string &) defined in MathLib
      uses function toString(T) defined in MathLib
      uses function isNullValue(const std::string &) defined in MathLib
      uses function isPositive(const std::string &) defined in MathLib
      uses function toDoubleNumber(const std::string &) defined in MathLib
   function incdec(const std::string &,const std::string &) in line 95
      protection public
      16 lines of code
      2 parameters
      5 conditional paths
      uses function value(const std::string &) defined in MathLib::value
      uses function add(const std::string &,const std::string &) defined in MathLib
      uses function subtract(const std::string &,const std::string &) defined in MathLib
   function isBin(const std::string &) in line 86
      protection public
      43 lines of code
      1 parameters
      13 conditional paths
      uses variable s defined in extracttests.py
      uses function isValidIntegerSuffix(std::string::const_iterator,std::string::const_iterator) defined in MathLib
   function isDec(const std::string &) in line 82
      protection public
      31 lines of code
      1 parameters
      9 conditional paths
      uses variable s defined in extracttests.py
      uses function isValidIntegerSuffix(std::string::const_iterator,std::string::const_iterator) defined in MathLib
   function isDecimalFloat(const std::string &) in line 79
      protection public
      97 lines of code
      1 parameters
      39 conditional paths
      uses variable s defined in extracttests.py
   function isEqual(const std::string &,const std::string &) in line 102
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
      uses function toString(T) defined in MathLib
      uses function toDoubleNumber(const std::string &) defined in MathLib
   function isFloat(const std::string &) in line 78
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function isDecimalFloat(const std::string &) defined in MathLib
      uses variable s defined in extracttests.py
      uses function isFloatHex(const std::string &) defined in MathLib
   function isFloatHex(const std::string &) in line 83
      protection public
      67 lines of code
      1 parameters
      23 conditional paths
      uses variable s defined in extracttests.py
   function isGreater(const std::string &,const std::string &) in line 104
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function toDoubleNumber(const std::string &) defined in MathLib
   function isGreaterEqual(const std::string &,const std::string &) in line 105
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function toDoubleNumber(const std::string &) defined in MathLib
   function isInt(const std::string &) in line 77
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function isDec(const std::string &) defined in MathLib
      uses variable s defined in extracttests.py
      uses function isIntHex(const std::string &) defined in MathLib
      uses function isOct(const std::string &) defined in MathLib
      uses function isBin(const std::string &) defined in MathLib
   function isIntHex(const std::string &) in line 84
      protection public
      43 lines of code
      1 parameters
      13 conditional paths
      uses variable s defined in extracttests.py
      uses function isValidIntegerSuffix(std::string::const_iterator,std::string::const_iterator) defined in MathLib
   function isLess(const std::string &,const std::string &) in line 106
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function toDoubleNumber(const std::string &) defined in MathLib
   function isLessEqual(const std::string &,const std::string &) in line 107
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function toDoubleNumber(const std::string &) defined in MathLib
   function isNegative(const std::string &) in line 80
      protection public
      6 lines of code
      1 parameters
      2 conditional paths
      uses variable s defined in extracttests.py
   function isNotEqual(const std::string &,const std::string &) in line 103
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function isEqual(const std::string &,const std::string &) defined in MathLib
   function isNullValue(const std::string &) in line 108
      protection public
      13 lines of code
      1 parameters
      5 conditional paths
      uses function str() defined in MathLib::value
   function isOct(const std::string &) in line 85
      protection public
      37 lines of code
      1 parameters
      11 conditional paths
      uses variable s defined in extracttests.py
      uses function isOctalDigit(char) defined in MathLib
      uses function isValidIntegerSuffix(std::string::const_iterator,std::string::const_iterator) defined in MathLib
   function isOctalDigit(char) in line 114
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function isPositive(const std::string &) in line 81
      protection public
      6 lines of code
      1 parameters
      2 conditional paths
      uses variable s defined in extracttests.py
      uses function isNegative(const std::string &) defined in MathLib
   function isValidIntegerSuffix(std::string::const_iterator,std::string::const_iterator) in line 88
      protection public
      68 lines of code
      2 parameters
      20 conditional paths
   function mod(const std::string &,const std::string &) in line 94
      protection public
      14 lines of code
      2 parameters
      3 conditional paths
      uses function value(const std::string &) defined in MathLib::value
      uses function isInt(const std::string &) defined in MathLib
      uses function toLongNumber(const std::string &) defined in MathLib
      uses function toString(T) defined in MathLib
      uses function toDoubleNumber(const std::string &) defined in MathLib
   function multiply(const std::string &,const std::string &) in line 92
      protection public
      11 lines of code
      2 parameters
      2 conditional paths
      uses function value(const std::string &) defined in MathLib::value
      uses function isInt(const std::string &) defined in MathLib
      uses function toString(T) defined in MathLib
      uses function toLongNumber(const std::string &) defined in MathLib
      uses function toDoubleNumber(const std::string &) defined in MathLib
   function sin(const std::string &) in line 98
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function toString(T) defined in MathLib
      uses function toDoubleNumber(const std::string &) defined in MathLib
   function subtract(const std::string &,const std::string &) in line 91
      protection public
      24 lines of code
      2 parameters
      5 conditional paths
      uses function value(const std::string &) defined in MathLib::value
      uses function isInt(const std::string &) defined in MathLib
      uses function toString(T) defined in MathLib
      uses function toLongNumber(const std::string &) defined in MathLib
      uses function toDoubleNumber(const std::string &) defined in MathLib
      uses variable count defined in extracttests.py
   function tan(const std::string &) in line 100
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function toString(T) defined in MathLib
      uses function toDoubleNumber(const std::string &) defined in MathLib
   function toDoubleNumber(const std::string &) in line 75
      protection public
      19 lines of code
      1 parameters
      4 conditional paths
      uses function isIntHex(const std::string &) defined in MathLib
      uses function str() defined in MathLib::value
      uses function toLongNumber(const std::string &) defined in MathLib
      uses function isNullValue(const std::string &) defined in MathLib
      uses function isFloat() defined in MathLib::value
   function toLongNumber(const std::string &) in line 67
      protection public
      59 lines of code
      1 parameters
      12 conditional paths
      uses function isIntHex(const std::string &) defined in MathLib
      uses function str() defined in MathLib::value
      uses function isOct(const std::string &) defined in MathLib
      uses function isBin(const std::string &) defined in MathLib
      uses function isFloat() defined in MathLib::value
      uses function toDoubleNumber(const std::string &) defined in MathLib
      uses function characterLiteralToLongNumber(const std::string &) defined in MathLib
   function toString(T) in line 70
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable result defined in triage-report.py
      uses function operator+(const MathLib::value &,const MathLib::value &) defined in mathlib.h
      uses function operator-(const MathLib::value &,const MathLib::value &) defined in mathlib.h
      uses function operator*(const MathLib::value &,const MathLib::value &) defined in mathlib.h
      uses function operator/(const MathLib::value &,const MathLib::value &) defined in mathlib.h
      uses function operator%(const MathLib::value &,const MathLib::value &) defined in mathlib.h
      uses function operator&(const MathLib::value &,const MathLib::value &) defined in mathlib.h
      uses function operator|(const MathLib::value &,const MathLib::value &) defined in mathlib.h
      uses function operator^(const MathLib::value &,const MathLib::value &) defined in mathlib.h
      uses macro definition CPPCHECKLIB defined in config.h
   function toString(double) in line 128
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function toString(double) in line 500
      protection public
      11 lines of code
      1 parameters
      3 conditional paths
      uses variable result defined in triage-report.py
      uses function value(const std::string &) defined in MathLib::value
   function toULongNumber(const std::string &) in line 68
      protection public
      53 lines of code
      1 parameters
      9 conditional paths
      uses function isIntHex(const std::string &) defined in MathLib
      uses function str() defined in MathLib::value
      uses function isOct(const std::string &) defined in MathLib
      uses function isBin(const std::string &) defined in MathLib
      uses function isFloat() defined in MathLib::value
module MathLib::value
   function add(int) in line 61
      protection public
      9 lines of code
      1 parameters
      2 conditional paths
      uses function isInt() defined in MathLib::value
      uses variable intValue defined in MathLib::value
      uses variable doubleValue defined in MathLib::value
   function calc(char,const value &,const value &) in line 59
      protection public
      99 lines of code
      3 parameters
      31 conditional paths
      uses function promote(const value &) defined in MathLib::value
      uses function isFloat() defined in MathLib::value
      uses variable doubleValue defined in MathLib::value
      uses function getDoubleValue() defined in MathLib::value
      uses variable isUnsigned defined in MathLib::value
      uses variable intValue defined in MathLib::value
   function compare(const value &) in line 60
      protection public
      27 lines of code
      1 parameters
      9 conditional paths
      uses function promote(const value &) defined in MathLib::value
      uses function isFloat() defined in MathLib::value
      uses variable doubleValue defined in MathLib::value
      uses function getDoubleValue() defined in MathLib::value
      uses variable isUnsigned defined in MathLib::value
      uses variable intValue defined in MathLib::value
   function getDoubleValue() in line 55
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function isFloat() in line 51
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function isInt() in line 48
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function promote(const value &) in line 43
      15 lines of code
      1 parameters
      5 conditional paths
      uses function isInt() defined in MathLib::value
      uses variable type defined in MathLib::value
      uses variable isUnsigned defined in MathLib::value
      uses function isFloat() defined in MathLib::value
      uses variable doubleValue defined in MathLib::value
      uses variable intValue defined in MathLib::value
      uses enumvalue FLOAT defined in MathLib::value
   function str() in line 47
      protection public
      32 lines of code
      0 parameters
      9 conditional paths
      uses variable type defined in MathLib::value
      uses enumvalue FLOAT defined in MathLib::value
      uses macro definition ISNAN defined in mathlib.cpp
      uses variable doubleValue defined in MathLib::value
      uses macro definition ISINF defined in mathlib.cpp
      uses variable intValue defined in MathLib::value
      uses variable isUnsigned defined in MathLib::value
      uses enumvalue LONG defined in MathLib::value
      uses enumvalue LONGLONG defined in MathLib::value
   function value(const std::string &) in line 46
      protection public
      30 lines of code
      1 parameters
      9 conditional paths
      uses function isFloat(const std::string &) defined in MathLib
      uses variable s defined in extracttests.py
      uses variable type defined in MathLib::value
      uses enumvalue FLOAT defined in MathLib::value
      uses variable doubleValue defined in MathLib::value
      uses function toDoubleNumber(const std::string &) defined in MathLib
      uses function isInt(const std::string &) defined in MathLib
      uses enumvalue INT defined in MathLib::value
      uses variable intValue defined in MathLib::value
      uses function toLongNumber(const std::string &) defined in MathLib
      uses variable isUnsigned defined in MathLib::value
      uses enumvalue LONG defined in MathLib::value
      uses enumvalue LONGLONG defined in MathLib::value
   variable doubleValue in line 39
   variable intValue in line 38
   variable isUnsigned in line 41
   variable type in line 40
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/lib/path.cpp
module path.cpp
   function caseInsensitiveFilesystem() in line 30
      protection public
      9 lines of code
      0 parameters
      1 conditional paths
   function tolowerWrapper(int) in line 159
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/lib/path.h
module Path
   function acceptFile(const std::string &) in line 120
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable filename defined in extracttests.py
      uses variable path defined in daca2-report.py
   function acceptFile(const std::string &,const std::set< std::string > &) in line 132
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function isHeader(const std::string &) defined in Path
      uses variable path defined in daca2-report.py
      uses function isCPP(const std::string &) defined in Path
      uses function isC(const std::string &) defined in Path
      uses function getFilenameExtension(const std::string &) defined in Path
   function fromNativeSeparators(std::string) in line 53
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses function replace(char *,char,char) defined in times.c
      uses variable path defined in daca2-report.py
   function getAbsoluteFilePath(const std::string &) in line 112
      protection public
      17 lines of code
      1 parameters
      3 conditional paths
   function getFilenameExtension(const std::string &) in line 90
      protection public
      14 lines of code
      1 parameters
      3 conditional paths
      uses variable path defined in daca2-report.py
   function getFilenameExtensionInLowerCase(const std::string &) in line 97
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses function getFilenameExtension(const std::string &) defined in Path
      uses variable path defined in daca2-report.py
   function getPathFromFilename(const std::string &) in line 67
      protection public
      9 lines of code
      1 parameters
      2 conditional paths
      uses variable filename defined in extracttests.py
   function getRelativePath(const std::string &,const std::vector< std::string > &) in line 105
      protection public
      14 lines of code
      2 parameters
      4 conditional paths
   function isC(const std::string &) in line 139
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses function getFilenameExtension(const std::string &) defined in Path
      uses variable path defined in daca2-report.py
   function isCPP(const std::string &) in line 146
      protection public
      18 lines of code
      1 parameters
      2 conditional paths
      uses function getFilenameExtensionInLowerCase(const std::string &) defined in Path
      uses variable path defined in daca2-report.py
      uses function getFilenameExtension(const std::string &) defined in Path
   function isHeader(const std::string &) in line 153
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function getFilenameExtensionInLowerCase(const std::string &) defined in Path
      uses variable path defined in daca2-report.py
   function removeQuotationMarks(std::string) in line 83
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable path defined in daca2-report.py
   function sameFileName(const std::string &,const std::string &) in line 76
      protection public
      14 lines of code
      2 parameters
      1 conditional paths
   function simplifyPath(std::string) in line 60
      protection public
      69 lines of code
      1 parameters
      16 conditional paths
   function toNativeSeparators(std::string) in line 46
      protection public
      12 lines of code
      1 parameters
      1 conditional paths
      uses function replace(char *,char,char) defined in times.c
      uses variable path defined in daca2-report.py
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/lib/preprocessor.cpp
module preprocessor.cpp
   function readChar(std::istream &,unsigned int) in line 61
      protection public
      30 lines of code
      2 parameters
      6 conditional paths
   function join(const std::set< std::string > &,char) in line 93
      protection public
      11 lines of code
      2 parameters
      3 conditional paths
      uses variable s defined in extracttests.py
   function unify(const std::string &,char) in line 106
      protection public
      17 lines of code
      2 parameters
      5 conditional paths
      uses variable s defined in extracttests.py
      uses function join(const std::set< std::string > &,char) defined in preprocessor.cpp
   function getcfgmap(const std::string &,const Settings *,const std::string &) in line 136
      protection public
      33 lines of code
      3 parameters
      7 conditional paths
      uses variable filename defined in extracttests.py
   function hasbom(const std::string &) in line 426
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
   function tolowerWrapper(int) in line 437
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function isFallThroughComment(std::string) in line 443
      protection public
      19 lines of code
      1 parameters
      3 conditional paths
      uses function tolowerWrapper(int) defined in preprocessor.cpp
   function simplifyVarMapExpandValue(Token *,const std::map< std::string, std::string > &,std::set< std::string >,const Settings &) in line 1133
      protection public
      34 lines of code
      4 parameters
      8 conditional paths
      uses function str(T &&) defined in Token
      uses function createTokens(std::istream &,const std::string &) defined in TokenList
      uses function front() defined in TokenList
      uses function next() defined in Token
      uses function insertToken(const std::string &,const std::string &,bool) defined in Token
   function simplifyVarMap(std::map< std::string, std::string > &,const Settings &) in line 1173
      protection public
      20 lines of code
      2 parameters
      6 conditional paths
      uses function createTokens(std::istream &,const std::string &) defined in TokenList
      uses function front() defined in TokenList
      uses function next() defined in Token
      uses function simplifyVarMapExpandValue(Token *,const std::map< std::string, std::string > &,std::set< std::string >,const Settings &) defined in preprocessor.cpp
   function openHeader(std::string &,const std::list< std::string > &,const std::string &,std::ifstream &) in line 2019
      protection public
      24 lines of code
      4 parameters
      5 conditional paths
      uses variable fin defined in triage-report.py
      uses variable filename defined in extracttests.py
   function skipstring(const std::string &,std::string::size_type &) in line 2403
      protection public
      11 lines of code
      2 parameters
      3 conditional paths
      uses variable line defined in triage-report.py
   function trim(const std::string &) in line 2420
      protection public
      8 lines of code
      1 parameters
      2 conditional paths
      uses variable s defined in extracttests.py
   function getparams(const std::string &,std::string::size_type &,std::vector< std::string > &,unsigned int &,bool &) in line 2437
      protection public
      77 lines of code
      5 parameters
      15 conditional paths
      uses variable line defined in triage-report.py
      uses function trim(const std::string &) defined in preprocessor.cpp
      uses function skipstring(const std::string &,std::string::size_type &) defined in preprocessor.cpp
      uses variable macroChar defined in Preprocessor
   function getlines(std::istream &,std::string &) in line 2804
      protection public
      51 lines of code
      2 parameters
      16 conditional paths
      uses variable line defined in triage-report.py
module PreprocessorMacro
   function code(const std::vector< std::string > &,const std::map< std::string, PreprocessorMacro * > &,std::string &) in line 2664
      protection public
      128 lines of code
      3 parameters
      34 conditional paths
      uses variable s defined in extracttests.py
      uses function str(T &&) defined in Token
      uses function next() defined in Token
      uses function isName() defined in Token
      uses function strAt(int) defined in Token
   function expandInnerMacros(const std::vector< std::string > &,const std::map< std::string, PreprocessorMacro * > &) in line 2537
      50 lines of code
      2 parameters
      8 conditional paths
      uses function strAt(int) defined in Token
      uses function tokAt(int) defined in Token
      uses variable s defined in extracttests.py
      uses function getparams(const std::string &,std::string::size_type &,std::vector< std::string > &,unsigned int &,bool &) defined in preprocessor.cpp
      uses function code(const std::vector< std::string > &,const std::map< std::string, PreprocessorMacro * > &,std::string &) defined in PreprocessorMacro
   function name() in line 2653
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function nopar() in line 2648
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function operator=(const PreprocessorMacro &) in line 2534
      1 lines of code
      1 parameters
      1 conditional paths
   function params() in line 2638
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function tokens() in line 2633
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses function front() defined in TokenList
   function variadic() in line 2643
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function PreprocessorMacro(const std::string &,const Settings *) in line 2596
      protection public
      35 lines of code
      2 parameters
      10 conditional paths
      uses function createTokens(std::istream &,const std::string &) defined in TokenList
      uses function next() defined in Token
   variable _macro in line 2525
   variable _nopar in line 2531
   variable _params in line 2522
   variable _variadic in line 2528
   variable tokenlist in line 2519
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/lib/preprocessor.h
module Preprocessor
   function cplusplus(const Settings *,const std::string &) in line 101
      protection public
      7 lines of code
      2 parameters
      1 conditional paths
      uses variable userUndefs defined in Settings
      uses variable enforcedLang defined in Settings
      uses enumvalue CPP defined in Settings
      uses enumvalue None defined in Settings
      uses variable filename defined in extracttests.py
   function error(const std::string &,unsigned int,const std::string &) in line 256
      13 lines of code
      3 parameters
      2 conditional paths
      uses variable filename defined in extracttests.py
      uses variable linenr defined in triage-report.py
      uses variable _errorLogger defined in Preprocessor
      uses function reportErr(const ErrorLogger::ErrorMessage &) defined in ErrorLogger
      uses enumvalue error defined in Severity
      uses variable msg defined in findcasts.py
   function expandMacros(const std::string &,std::string,const std::string &,ErrorLogger *) in line 161
      protection public
      335 lines of code
      4 parameters
      54 conditional paths
      uses variable s defined in extracttests.py
      uses variable linenr defined in triage-report.py
      uses variable code defined in extracttests.py
      uses variable line defined in triage-report.py
      uses function name() defined in PreprocessorMacro
      uses variable filename defined in extracttests.py
      uses function writeError(const std::string &,const unsigned int,ErrorLogger *,const std::string &,const std::string &) defined in Preprocessor
      uses function params() defined in PreprocessorMacro
      uses function variadic() defined in PreprocessorMacro
      uses function nopar() defined in PreprocessorMacro
      uses function code(const std::vector< std::string > &,const std::map< std::string, PreprocessorMacro * > &,std::string &) defined in PreprocessorMacro
      uses variable macroChar defined in Preprocessor
   function getcfgs(const std::string &,const std::string &,const std::map< std::string, std::string > &) in line 219
      protection public
      393 lines of code
      3 parameters
      82 conditional paths
      uses variable filename defined in extracttests.py
      uses variable linenr defined in triage-report.py
      uses variable line defined in triage-report.py
      uses variable _settings defined in Preprocessor
      uses variable debugwarnings defined in Settings
      uses function terminated() defined in Settings
      uses variable _errorLogger defined in Preprocessor
      uses function reportProgress(const std::string &,const char,const std::size_t) defined in ErrorLogger
      uses function configurationExcluded(const std::string &) defined in Settings
      uses function getdef(std::string,bool) defined in Preprocessor
      uses function writeError(const std::string &,const unsigned int,ErrorLogger *,const std::string &,const std::string &) defined in Preprocessor
      uses function simplifyCondition(const std::map< std::string, std::string > &,std::string &,bool) defined in Preprocessor
      uses enumvalue debug defined in Severity
      uses function reportErr(const ErrorLogger::ErrorMessage &) defined in ErrorLogger
      uses variable count defined in extracttests.py
      uses variable s defined in extracttests.py
      uses function tokenizeCondition(const std::string &) defined in Tokenizer
      uses function setfile(const std::string &) defined in ErrorLogger::ErrorMessage::FileLocation
      uses variable line defined in ErrorLogger::ErrorMessage::FileLocation
      uses variable _callStack defined in ErrorLogger::ErrorMessage
      uses variable _severity defined in ErrorLogger::ErrorMessage
      uses enumvalue error defined in Severity
      uses function setmsg(const std::string &) defined in ErrorLogger::ErrorMessage
      uses variable _id defined in ErrorLogger::ErrorMessage
      uses function tokens() defined in Tokenizer
      uses function strAt(int) defined in Token
      uses function tokAt(int) defined in Token
      uses function str(T &&) defined in Token
      uses function next() defined in Token
   function getcode(const std::string &,const std::string &,const std::string &) in line 109
      protection public
      218 lines of code
      3 parameters
      49 conditional paths
      uses variable _settings defined in Preprocessor
      uses variable filename defined in extracttests.py
      uses variable line defined in triage-report.py
      uses function terminated() defined in Settings
      uses variable _errorLogger defined in Preprocessor
      uses function tokenize(std::istream &,const char,const std::string &,bool) defined in Tokenizer
      uses function tokens() defined in Tokenizer
      uses function strAt(int) defined in Token
      uses function getdef(std::string,bool) defined in Preprocessor
      uses variable userUndefs defined in Settings
      uses variable name defined in setup.py
      uses function match_cfg_def(std::map< std::string, std::string >,std::string) defined in Preprocessor
      uses variable userDefines defined in Settings
      uses variable force defined in Settings
      uses function error(const std::string &,unsigned int,const std::string &) defined in Preprocessor
      uses function validateCfg(const std::string &,const std::string &) defined in Preprocessor
      uses function expandMacros(const std::string &,std::string,const std::string &,ErrorLogger *) defined in Preprocessor
   function getdef(std::string,bool) in line 211
      43 lines of code
      2 parameters
      9 conditional paths
      uses variable line defined in triage-report.py
   function getErrorMessages(ErrorLogger *,const Settings *) in line 235
      protection public
      10 lines of code
      2 parameters
      1 conditional paths
      uses variable checkConfiguration defined in Settings
      uses function missingInclude(const std::string &,unsigned int,const std::string &,HeaderTypes) defined in Preprocessor
      uses enumvalue UserHeader defined in Preprocessor
      uses enumvalue SystemHeader defined in Preprocessor
      uses function validateCfgError(const std::string &,const std::string &) defined in Preprocessor
      uses function error(const std::string &,unsigned int,const std::string &) defined in Preprocessor
   function getHeaderFileName(std::string &) in line 200
      protection public
      27 lines of code
      1 parameters
      5 conditional paths
      uses enumvalue NoHeader defined in Preprocessor
      uses variable result defined in triage-report.py
      uses function replace(char *,char,char) defined in times.c
      uses enumvalue UserHeader defined in Preprocessor
      uses enumvalue SystemHeader defined in Preprocessor
   function handleIncludes(const std::string &,const std::string &,const std::list< std::string > &,std::map< std::string, std::string > &,std::set< std::string > &,std::list< std::string >) in line 247
      protection public
      211 lines of code
      6 parameters
      45 conditional paths
      uses variable path defined in daca2-report.py
      uses variable linenr defined in triage-report.py
      uses variable _settings defined in Preprocessor
      uses variable userUndefs defined in Settings
      uses variable _errorLogger defined in Preprocessor
      uses function reportProgress(const std::string &,const char,const std::size_t) defined in ErrorLogger
      uses variable code defined in extracttests.py
      uses variable line defined in triage-report.py
      uses function terminated() defined in Settings
      uses function writeError(const std::string &,const unsigned int,ErrorLogger *,const std::string &,const std::string &) defined in Preprocessor
      uses function getdef(std::string,bool) defined in Preprocessor
      uses function match_cfg_def(std::map< std::string, std::string >,std::string) defined in Preprocessor
      uses variable filename defined in extracttests.py
      uses function getHeaderFileName(std::string &) defined in Preprocessor
      uses enumvalue NoHeader defined in Preprocessor
      uses enumvalue UserHeader defined in Preprocessor
      uses variable fin defined in triage-report.py
      uses function missingInclude(const std::string &,unsigned int,const std::string &,HeaderTypes) defined in Preprocessor
      uses function read(std::istream &,const std::string &) defined in Preprocessor
   function handleIncludes(std::string &,const std::string &,const std::list< std::string > &) in line 269
      106 lines of code
      3 parameters
      19 conditional paths
      uses variable path defined in daca2-report.py
      uses variable code defined in extracttests.py
      uses variable _settings defined in Preprocessor
      uses function terminated() defined in Settings
      uses variable filename defined in extracttests.py
      uses function getHeaderFileName(std::string &) defined in Preprocessor
      uses enumvalue NoHeader defined in Preprocessor
      uses enumvalue UserHeader defined in Preprocessor
      uses variable fin defined in triage-report.py
      uses function read(std::istream &,const std::string &) defined in Preprocessor
      uses function f(char) defined in test.cxx
      uses variable linenr defined in triage-report.py
      uses function missingInclude(const std::string &,unsigned int,const std::string &,HeaderTypes) defined in Preprocessor
   function handleUndef(std::list< std::string > &) in line 134
      protection public
      29 lines of code
      1 parameters
      12 conditional paths
      uses variable _settings defined in Preprocessor
      uses variable userUndefs defined in Settings
   function match_cfg_def(std::map< std::string, std::string >,std::string) in line 233
      protection public
      29 lines of code
      2 parameters
      4 conditional paths
      uses variable _settings defined in Preprocessor
      uses function simplifyCondition(const std::map< std::string, std::string > &,std::string &,bool) defined in Preprocessor
   function missingInclude(const std::string &,unsigned int,const std::string &,HeaderTypes) in line 254
      31 lines of code
      4 parameters
      6 conditional paths
      uses variable filename defined in extracttests.py
      uses variable _settings defined in Preprocessor
      uses variable nomsg defined in Settings
      uses function isSuppressed(const std::string &,const std::string &,unsigned int) defined in Suppressions
      uses variable linenr defined in triage-report.py
      uses enumvalue SystemHeader defined in Preprocessor
      uses variable missingSystemIncludeFlag defined in Preprocessor
      uses variable missingIncludeFlag defined in Preprocessor
      uses variable _errorLogger defined in Preprocessor
      uses variable checkConfiguration defined in Settings
      uses variable line defined in ErrorLogger::ErrorMessage::FileLocation
      uses function setfile(const std::string &) defined in ErrorLogger::ErrorMessage::FileLocation
      uses enumvalue information defined in Severity
      uses variable file0 defined in ErrorLogger::ErrorMessage
      uses variable file0 defined in Preprocessor
      uses function reportInfo(const ErrorLogger::ErrorMessage &) defined in ErrorLogger
   function preprocess(std::istream &,std::map< std::string, std::string > &,const std::string &,const std::list< std::string > &) in line 73
      protection public
      11 lines of code
      4 parameters
      3 conditional paths
      uses variable data defined in cert.py
      uses variable filename defined in extracttests.py
      uses variable _settings defined in Preprocessor
      uses variable userUndefs defined in Settings
      uses variable result defined in triage-report.py
      uses function getcode(const std::string &,const std::string &,const std::string &) defined in Preprocessor
   function preprocess(std::istream &,std::string &,std::list< std::string > &,const std::string &,const std::list< std::string > &) in line 92
      protection public
      101 lines of code
      5 parameters
      12 conditional paths
      uses variable file0 defined in Preprocessor
      uses variable filename defined in extracttests.py
      uses function read(std::istream &,const std::string &) defined in Preprocessor
      uses variable _settings defined in Preprocessor
      uses variable userIncludes defined in Settings
      uses variable fin defined in triage-report.py
      uses function missingInclude(const std::string &,unsigned int,const std::string &,HeaderTypes) defined in Preprocessor
      uses enumvalue UserHeader defined in Preprocessor
      uses variable library defined in Settings
      uses variable defines defined in Library
      uses function removeAsm(std::string &) defined in Preprocessor
      uses variable line defined in triage-report.py
      uses function terminated() defined in Settings
      uses variable userDefines defined in Settings
      uses variable maxConfigs defined in Settings
      uses function handleIncludes(const std::string &,const std::string &,const std::list< std::string > &,std::map< std::string, std::string > &,std::set< std::string > &,std::list< std::string >) defined in Preprocessor
      uses function getcfgs(const std::string &,const std::string &,const std::map< std::string, std::string > &) defined in Preprocessor
      uses function replaceIfDefined(std::string &) defined in Preprocessor
      uses function handleUndef(std::list< std::string > &) defined in Preprocessor
   function preprocessCleanupDirectives(const std::string &) in line 190
      protection public
      80 lines of code
      1 parameters
      19 conditional paths
      uses variable code defined in extracttests.py
      uses variable line defined in triage-report.py
   function preprocessWhitespaces(std::string &) in line 123
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses function replace(char *,char,char) defined in times.c
      uses function removeSpaceNearNL(const std::string &) defined in Preprocessor
   function read(std::istream &,const std::string &) in line 95
      protection public
      104 lines of code
      2 parameters
      17 conditional paths
      uses variable _settings defined in Preprocessor
      uses function terminated() defined in Settings
      uses variable checkConfiguration defined in Settings
      uses function readpreprocessor(std::istream &,const unsigned int) defined in Preprocessor
      uses variable code defined in extracttests.py
      uses variable result defined in triage-report.py
      uses function removeComments(const std::string &,const std::string &) defined in Preprocessor
      uses variable filename defined in extracttests.py
      uses function preprocessCleanupDirectives(const std::string &) defined in Preprocessor
      uses function removeParentheses(const std::string &) defined in Preprocessor
      uses function removeIf0(const std::string &) defined in Preprocessor
   function readpreprocessor(std::istream &,const unsigned int) in line 98
      protection public
      65 lines of code
      2 parameters
      18 conditional paths
      uses variable code defined in extracttests.py
      uses variable result defined in triage-report.py
      uses function preprocessCleanupDirectives(const std::string &) defined in Preprocessor
      uses function removeParentheses(const std::string &) defined in Preprocessor
      uses function removeIf0(const std::string &) defined in Preprocessor
   function removeAsm(std::string &) in line 225
      protection public
      13 lines of code
      1 parameters
      3 conditional paths
   function removeComments(const std::string &,const std::string &) in line 170
      protection public
      281 lines of code
      2 parameters
      63 conditional paths
      uses variable code defined in extracttests.py
      uses variable _settings defined in Preprocessor
      uses variable experimental defined in Settings
      uses function isEnabled(T &&) defined in Settings
      uses function writeError(const std::string &,const unsigned int,ErrorLogger *,const std::string &,const std::string &) defined in Preprocessor
      uses variable filename defined in extracttests.py
      uses variable _errorLogger defined in Preprocessor
      uses function terminated() defined in Settings
      uses variable inlineSuppressions defined in Settings
      uses variable nomsg defined in Settings
      uses function addSuppression(const std::string &,const std::string &,unsigned int) defined in Suppressions
      uses variable relativePaths defined in Settings
      uses variable basePaths defined in Settings
   function removeIf0(const std::string &) in line 177
      protection public
      34 lines of code
      1 parameters
      9 conditional paths
      uses variable code defined in extracttests.py
      uses variable line defined in triage-report.py
   function removeParentheses(const std::string &) in line 184
      protection public
      65 lines of code
      1 parameters
      18 conditional paths
      uses variable line defined in triage-report.py
   function removeSpaceNearNL(const std::string &) in line 209
      20 lines of code
      1 parameters
      3 conditional paths
   function replaceIfDefined(std::string &) in line 151
      protection public
      49 lines of code
      1 parameters
      13 conditional paths
      uses variable _settings defined in Preprocessor
      uses function terminated() defined in Settings
   function setFile0(const std::string &) in line 249
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
      uses function f(char) defined in test.cxx
      uses variable filename defined in extracttests.py
      uses variable linenr defined in triage-report.py
      uses variable msg defined in findcasts.py
      uses variable code defined in extracttests.py
   function simplifyCondition(const std::map< std::string, std::string > &,std::string &,bool) in line 117
      protection public
      130 lines of code
      3 parameters
      35 conditional paths
      uses variable _settings defined in Preprocessor
      uses variable _errorLogger defined in Preprocessor
      uses function tokenizeCondition(const std::string &) defined in Tokenizer
      uses function tokens() defined in Tokenizer
      uses function strAt(int) defined in Token
      uses function next() defined in Token
      uses function concatenateNegativeNumberAndAnyPositive() defined in Tokenizer
      uses function simplifySizeof() defined in Tokenizer
      uses function simplifyCalculations() defined in Tokenizer
      uses function simplifyConstTernaryOp() defined in Tokenizer
      uses function simplifyRedundantParentheses() defined in Tokenizer
   function validateCfg(const std::string &,const std::string &) in line 131
      protection public
      60 lines of code
      2 parameters
      16 conditional paths
      uses variable _settings defined in Preprocessor
      uses function isEnabled(T &&) defined in Settings
      uses variable code defined in extracttests.py
      uses function validateCfgError(const std::string &,const std::string &) defined in Preprocessor
   function validateCfgError(const std::string &,const std::string &) in line 132
      protection public
      9 lines of code
      2 parameters
      1 conditional paths
      uses variable file0 defined in Preprocessor
      uses enumvalue information defined in Severity
      uses variable _errorLogger defined in Preprocessor
      uses function reportInfo(const ErrorLogger::ErrorMessage &) defined in ErrorLogger
   function writeError(const std::string &,const unsigned int,ErrorLogger *,const std::string &,const std::string &) in line 144
      protection public
      14 lines of code
      5 parameters
      2 conditional paths
      uses variable linenr defined in triage-report.py
      uses function reportErr(const ErrorLogger::ErrorMessage &) defined in ErrorLogger
      uses enumvalue error defined in Severity
   function Preprocessor(Settings &,ErrorLogger *) in line 57
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   variable _errorLogger in line 272
   variable _settings in line 271
   variable file0 in line 275
   variable macroChar in line 55
      protection public
   variable missingIncludeFlag in line 59
      protection public
   variable missingSystemIncludeFlag in line 60
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/lib/settings.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/lib/settings.h
module Settings
   function addEnabled(const std::string &) in line 175
      protection public
      42 lines of code
      1 parameters
      12 conditional paths
      uses variable _enabled defined in Settings
   function append(const std::string &) in line 149
      protection public
      13 lines of code
      1 parameters
      3 conditional paths
      uses variable fin defined in triage-report.py
      uses variable filename defined in extracttests.py
      uses variable line defined in triage-report.py
      uses variable _append defined in Settings
   function append() in line 152
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable _append defined in Settings
   function clearEnabled() in line 180
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function configurationExcluded(const std::string &) in line 300
      protection public
      8 lines of code
      1 parameters
      3 conditional paths
   function isEnabled(T &&) in line 165
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function isWindowsPlatform() in line 290
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
   function platform(PlatformType) in line 281
      protection public
      132 lines of code
      1 parameters
      8 conditional paths
      uses enumvalue Unspecified defined in Settings
      uses variable platformType defined in Settings
      uses variable sizeof_bool defined in Settings
      uses variable sizeof_short defined in Settings
      uses variable sizeof_int defined in Settings
      uses variable sizeof_long defined in Settings
      uses variable sizeof_long_long defined in Settings
      uses variable sizeof_float defined in Settings
      uses variable sizeof_double defined in Settings
      uses variable sizeof_long_double defined in Settings
      uses variable sizeof_wchar_t defined in Settings
      uses variable sizeof_size_t defined in Settings
      uses variable sizeof_pointer defined in Settings
      uses variable defaultSign defined in Settings
      uses variable char_bit defined in Settings
      uses variable short_bit defined in Settings
      uses variable int_bit defined in Settings
      uses variable long_bit defined in Settings
      uses variable long_long_bit defined in Settings
      uses enumvalue Native defined in Settings
      uses enumvalue Win32W defined in Settings
      uses enumvalue Win32A defined in Settings
      uses enumvalue Win64 defined in Settings
      uses enumvalue Unix32 defined in Settings
      uses enumvalue Unix64 defined in Settings
   function platformFile(const std::string &) in line 284
      protection public
      50 lines of code
      1 parameters
      18 conditional paths
      uses function LoadFile(const char *) defined in tinyxml2::XMLDocument
      uses variable filename defined in extracttests.py
      uses enumvalue XML_NO_ERROR defined in tinyxml2.h
      uses function FirstChildElement(const char *) defined in tinyxml2::XMLNode
      uses function Name() defined in tinyxml2::XMLElement
      uses function NextSiblingElement(const char *) defined in tinyxml2::XMLNode
      uses variable defaultSign defined in Settings
      uses variable char_bit defined in Settings
      uses variable sizeof_short defined in Settings
      uses variable sizeof_int defined in Settings
      uses variable sizeof_long defined in Settings
      uses variable sizeof_long_long defined in Settings
      uses variable sizeof_float defined in Settings
      uses variable sizeof_double defined in Settings
      uses variable sizeof_long_double defined in Settings
      uses variable sizeof_pointer defined in Settings
      uses variable sizeof_size_t defined in Settings
      uses variable sizeof_wchar_t defined in Settings
      uses variable short_bit defined in Settings
      uses variable int_bit defined in Settings
      uses variable long_bit defined in Settings
      uses variable long_long_bit defined in Settings
   function terminate() in line 99
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function terminated() in line 104
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function Settings() in line 56
      protection public
      36 lines of code
      0 parameters
      1 conditional paths
      uses function platform(PlatformType) defined in Settings
      uses enumvalue Win64 defined in Settings
      uses enumvalue Win32A defined in Settings
      uses enumvalue Native defined in Settings
   variable _append in line 47
   variable _enabled in line 50
   variable _terminated in line 53
   variable basePaths in line 115
      protection public
   variable char_bit in line 246
      protection public
   variable checkConfiguration in line 238
      protection public
   variable checkLibrary in line 241
      protection public
   variable configExcludePaths in line 207
      protection public
   variable debug in line 59
      protection public
   variable debugnormal in line 62
      protection public
   variable debugwarnings in line 65
      protection public
   variable defaultSign in line 265
      protection public
   variable dump in line 68
      protection public
   variable enforcedLang in line 189
      protection public
   variable exceptionHandling in line 71
      protection public
   variable exitCode in line 132
      protection public
   variable experimental in line 87
      protection public
   variable force in line 109
      protection public
   variable includePaths in line 146
      protection public
   variable inconclusive in line 74
      protection public
   variable inlineSuppressions in line 93
      protection public
   variable int_bit in line 248
      protection public
   variable jobs in line 125
      protection public
   variable jointSuppressionReport in line 79
      protection public
   variable library in line 214
      protection public
   variable loadAverage in line 128
      protection public
   variable long_bit in line 249
      protection public
   variable long_long_bit in line 250
      protection public
   variable maxConfigs in line 156
      protection public
   variable nofail in line 195
      protection public
   variable nomsg in line 192
      protection public
   variable outputFormat in line 136
      protection public
   variable platformType in line 278
      protection public
   variable preprocessOnly in line 142
      protection public
   variable quiet in line 90
      protection public
   variable relativePaths in line 112
      protection public
   variable reportProgress in line 211
      protection public
   variable rules in line 235
      protection public
   variable short_bit in line 247
      protection public
   variable showtime in line 139
      protection public
   variable sizeof_bool in line 253
      protection public
   variable sizeof_double in line 259
      protection public
   variable sizeof_float in line 258
      protection public
   variable sizeof_int in line 255
      protection public
   variable sizeof_long in line 256
      protection public
   variable sizeof_long_double in line 260
      protection public
   variable sizeof_long_long in line 257
      protection public
   variable sizeof_pointer in line 263
      protection public
   variable sizeof_short in line 254
      protection public
   variable sizeof_size_t in line 262
      protection public
   variable sizeof_wchar_t in line 261
      protection public
   variable standards in line 244
      protection public
   variable userDefines in line 198
      protection public
   variable userIncludes in line 204
      protection public
   variable userUndefs in line 201
      protection public
   variable verbose in line 96
      protection public
   variable xml in line 118
      protection public
   variable xml_version in line 121
      protection public
module Settings::Rule
   function Rule() in line 219
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
   variable id in line 227
      protection public
   variable pattern in line 226
      protection public
   variable severity in line 229
      protection public
   variable summary in line 228
      protection public
   variable tokenlist in line 225
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/lib/standards.h
module Standards
   function setC(const std::string &) in line 45
      protection public
      15 lines of code
      1 parameters
      4 conditional paths
      uses variable c defined in Standards
      uses enumvalue C89 defined in Standards
      uses enumvalue C99 defined in Standards
      uses enumvalue C11 defined in Standards
   function setCPP(const std::string &) in line 60
      protection public
      11 lines of code
      1 parameters
      3 conditional paths
      uses variable cpp defined in Standards
      uses enumvalue CPP03 defined in Standards
      uses enumvalue CPP11 defined in Standards
   function Standards() in line 43
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   variable c in line 34
      protection public
   variable cpp in line 37
      protection public
   variable posix in line 40
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/lib/suppressions.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/lib/suppressions.h
module Suppressions
   function addSuppression(const std::string &,const std::string &,unsigned int) in line 102
      protection public
      24 lines of code
      3 parameters
      7 conditional paths
      uses variable _suppressions defined in Suppressions
      uses variable line defined in triage-report.py
   function addSuppressionLine(const std::string &) in line 92
      protection public
      40 lines of code
      1 parameters
      7 conditional paths
      uses variable line defined in triage-report.py
      uses function addSuppression(const std::string &,const std::string &,unsigned int) defined in Suppressions
   function getUnmatchedGlobalSuppressions(const bool) in line 142
      protection public
      18 lines of code
      1 parameters
      6 conditional paths
      uses variable result defined in triage-report.py
      uses variable _suppressions defined in Suppressions
   function getUnmatchedLocalSuppressions(const std::string &,const bool) in line 136
      protection public
      18 lines of code
      2 parameters
      6 conditional paths
      uses variable result defined in triage-report.py
      uses variable _suppressions defined in Suppressions
      uses function f(char) defined in test.cxx
   function isSuppressed(const std::string &,const std::string &,unsigned int) in line 111
      protection public
      12 lines of code
      3 parameters
      4 conditional paths
      uses variable _suppressions defined in Suppressions
      uses variable line defined in triage-report.py
   function isSuppressedLocal(const std::string &,const std::string &,unsigned int) in line 120
      protection public
      12 lines of code
      3 parameters
      4 conditional paths
      uses variable _suppressions defined in Suppressions
      uses variable line defined in triage-report.py
   function parseFile(std::istream &) in line 85
      protection public
      27 lines of code
      1 parameters
      6 conditional paths
      uses variable line defined in triage-report.py
      uses function replace(char *,char,char) defined in times.c
      uses function addSuppressionLine(const std::string &) defined in Suppressions
   variable _suppressions in line 78
module Suppressions::FileMatcher
   function addFile(const std::string &,unsigned int) in line 58
      protection public
      19 lines of code
      2 parameters
      6 conditional paths
      uses variable name defined in setup.py
      uses variable line defined in triage-report.py
   function isSuppressed(const std::string &,unsigned int) in line 66
      protection public
      22 lines of code
      2 parameters
      6 conditional paths
      uses function isSuppressedLocal(const std::string &,const std::string &,unsigned int) defined in Suppressions
      uses variable line defined in triage-report.py
   function isSuppressedLocal(const std::string &,unsigned int) in line 74
      protection public
      18 lines of code
      2 parameters
      4 conditional paths
      uses function f(char) defined in test.cxx
      uses variable line defined in triage-report.py
   function match(const std::string &,const std::string &) in line 49
      59 lines of code
      2 parameters
      11 conditional paths
      uses variable name defined in setup.py
   variable _files in line 39
   variable _globs in line 41
module Suppressions::SuppressionEntry
   function SuppressionEntry(const std::string &,const std::string &,unsigned int) in line 123
      protection public
      3 lines of code
      3 parameters
      1 conditional paths
   variable file in line 128
      protection public
   variable id in line 127
      protection public
   variable line in line 129
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/lib/symboldatabase.cpp
module symboldatabase.cpp
   function operator<<(std::ostream &,Scope::ScopeType) in line 2115
      protection public
      21 lines of code
      2 parameters
      1 conditional paths
      uses variable s defined in extracttests.py
      uses enumvalue eGlobal defined in Scope
      uses enumvalue eClass defined in Scope
      uses enumvalue eStruct defined in Scope
      uses enumvalue eUnion defined in Scope
      uses enumvalue eNamespace defined in Scope
      uses enumvalue eFunction defined in Scope
      uses enumvalue eIf defined in Scope
      uses enumvalue eElse defined in Scope
      uses enumvalue eFor defined in Scope
      uses enumvalue eWhile defined in Scope
      uses enumvalue eDo defined in Scope
      uses enumvalue eSwitch defined in Scope
      uses enumvalue eTry defined in Scope
      uses enumvalue eCatch defined in Scope
      uses enumvalue eUnconditional defined in Scope
      uses enumvalue eLambda defined in Scope
   function tokenToString(const Token *,const Tokenizer *) in line 2137
      protection public
      10 lines of code
      2 parameters
      2 conditional paths
      uses function str(T &&) defined in Token
      uses variable list defined in Tokenizer
      uses function fileLine(const Token *) defined in TokenList
   function scopeToString(const Scope *,const Tokenizer *) in line 2148
      protection public
      11 lines of code
      2 parameters
      3 conditional paths
      uses variable type defined in Scope
      uses variable classDef defined in Scope
      uses variable list defined in Tokenizer
      uses function fileLine(const Token *) defined in TokenList
   function findVariableTypeIncludingUsedNamespaces(const SymbolDatabase *,const Scope *,const Token *) in line 2483
      protection public
      20 lines of code
      3 parameters
      6 conditional paths
      uses function findVariableType(const Scope *,const Token *) defined in SymbolDatabase
      uses variable usingList defined in Scope
      uses variable nestedIn defined in Scope
   function skipScopeIdentifiers(const Token *) in line 2938
      protection public
      11 lines of code
      1 parameters
      3 conditional paths
      uses function str(T &&) defined in Token
      uses function next() defined in Token
      uses function tokAt(int) defined in Token
   function skipPointers(const Token *) in line 2950
      protection public
      10 lines of code
      1 parameters
      3 conditional paths
      uses function str(T &&) defined in Token
      uses function link(Token *) defined in Token
      uses function next() defined in Token
      uses function strAt(int) defined in Token
      uses function tokAt(int) defined in Token
   function parsedecl(const Token *,ValueType *const,ValueType::Sign) in line 3609
      protection public
      49 lines of code
      3 parameters
      9 conditional paths
      uses variable pointer defined in ValueType
      uses variable type defined in Scope
      uses variable sign defined in ValueType
      uses variable type defined in ValueType
      uses variable constness defined in ValueType
      uses variable originalTypeName defined in ValueType
   function setValueType(Token *,const ValueType &,bool,ValueType::Sign) in line 3610
      protection public
      120 lines of code
      4 parameters
      26 conditional paths
      uses function setValueType(ValueType *) defined in Token
      uses function astParent() defined in Token
      uses function valueType() defined in Token
      uses function astOperand1(Token *) defined in Token
      uses function astOperand2(Token *) defined in Token
      uses function str(T &&) defined in Token
      uses variable pointer defined in ValueType
      uses variable constness defined in ValueType
      uses variable typeScope defined in ValueType
      uses variable name defined in setup.py
      uses variable varlist defined in Scope
      uses function nameToken() defined in Variable
      uses function isArithmeticalOp() defined in Token
      uses variable type defined in ValueType
      uses function isIntegral() defined in ValueType
      uses function tokType() defined in Token
      uses enumvalue eBitOp defined in Token
      uses variable sign defined in ValueType
      uses variable originalTypeName defined in ValueType
   function setValueType(Token *,const Variable &,bool,ValueType::Sign) in line 3612
      protection public
      8 lines of code
      4 parameters
      2 conditional paths
      uses variable pointer defined in ValueType
      uses function dimensions() defined in Variable
      uses variable typeScope defined in ValueType
      uses function typeScope() defined in Variable
      uses function parsedecl(const Token *,ValueType *const,ValueType::Sign) defined in symboldatabase.cpp
      uses function typeStartToken() defined in Variable
      uses function setValueType(Token *,const ValueType &,bool,ValueType::Sign) defined in symboldatabase.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/lib/symboldatabase.h
module symboldatabase.h
   enumeration AccessControl in line 46
      protection public
   enumvalue Public in line 46
      protection public
   enumvalue Protected in line 46
      protection public
   enumvalue Private in line 46
      protection public
   enumvalue Global in line 46
      protection public
   enumvalue Namespace in line 46
      protection public
   enumvalue Argument in line 46
      protection public
   enumvalue Local in line 46
      protection public
   enumvalue Throw in line 46
      protection public
module Dimension
   function Dimension() in line 52
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   variable end in line 55
      protection public
   variable known in line 57
      protection public
   variable num in line 56
      protection public
   variable start in line 54
      protection public
module Type
   function findDependency(const Type *) in line 131
      protection public
      10 lines of code
      1 parameters
      4 conditional paths
   function getFunction(const std::string &) in line 117
      protection public
      18 lines of code
      1 parameters
      6 conditional paths
      uses variable type defined in Function
      uses function getFunction(const std::string &) defined in Type
   function hasCircularDependencies(std::set< BaseInfo > *) in line 124
      protection public
      21 lines of code
      1 parameters
      7 conditional paths
   function initBaseInfo(const Token *,const Token *) in line 115
      protection public
      79 lines of code
      2 parameters
      18 conditional paths
      uses function str(T &&) defined in Token
      uses function link(Token *) defined in Token
      uses function next() defined in Token
      uses variable isVirtual defined in Type::BaseInfo
      uses variable access defined in Type::BaseInfo
      uses enumvalue Public defined in symboldatabase.h
      uses enumvalue Protected defined in symboldatabase.h
      uses enumvalue Private defined in symboldatabase.h
      uses variable nameTok defined in Type::BaseInfo
      uses function tokAt(int) defined in Token
      uses variable name defined in Type::BaseInfo
   function name() in line 108
      protection public
      6 lines of code
      0 parameters
      2 conditional paths
      uses function next() defined in Token
      uses function isName() defined in Token
      uses function str(T &&) defined in Token
   function Type(const Token *,const Scope *,const Scope *) in line 101
      protection public
      6 lines of code
      3 parameters
      1 conditional paths
   variable classDef in line 63
      protection public
   variable classScope in line 64
      protection public
   variable derivedFrom in line 98
      protection public
   variable enclosingScope in line 65
      protection public
   variable friendList in line 99
      protection public
   variable needInitialization in line 68
      protection public
module Type::BaseInfo
   function operator<(const BaseInfo &) in line 82
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
      uses variable type defined in Type::BaseInfo
   function BaseInfo() in line 72
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   variable access in line 79
      protection public
   variable isVirtual in line 80
      protection public
   variable name in line 76
      protection public
   variable nameTok in line 78
      protection public
   variable type in line 77
      protection public
module Type::FriendInfo
   function FriendInfo() in line 88
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   variable name in line 94
      protection public
   variable nameEnd in line 93
      protection public
   variable nameStart in line 92
      protection public
   variable type in line 95
      protection public
module Variable
   function arrayDimensions(const Library *) in line 177
      53 lines of code
      1 parameters
      14 conditional paths
      uses function detectContainer(const Token *,bool) defined in Library
      uses variable arrayLike_indexOp defined in Library::Container
      uses variable size_templateArgNo defined in Library::Container
      uses function next() defined in Token
      uses function nextTemplateArgument() defined in Token
      uses variable start defined in Dimension
      uses variable end defined in Dimension
      uses function previous() defined in Token
      uses variable num defined in Dimension
      uses function str(T &&) defined in Token
      uses function link(Token *) defined in Token
      uses function isNumber() defined in Token
   function declarationId() in line 251
      protection public
      7 lines of code
      0 parameters
      2 conditional paths
   function declEndToken() in line 233
      protection public
      10 lines of code
      0 parameters
      3 conditional paths
      uses function link(Token *) defined in Token
      uses function next() defined in Token
   function dimension(std::size_t) in line 469
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function dimensionKnown(std::size_t) in line 477
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function dimensions() in line 461
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function evaluate(const Library *) in line 590
      85 lines of code
      1 parameters
      28 conditional paths
      uses function previous() defined in Token
      uses function isName() defined in Token
      uses function str(T &&) defined in Token
      uses function link(Token *) defined in Token
      uses function next() defined in Token
      uses function podtype(const std::string &) defined in Library
      uses enumvalue Argument defined in symboldatabase.h
      uses function strAt(int) defined in Token
   function getFlag(unsigned int) in line 159
      3 lines of code
      1 parameters
      1 conditional paths
   function hasDefault() in line 429
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function index() in line 263
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function isArgument() in line 311
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses enumvalue Argument defined in symboldatabase.h
   function isArray() in line 375
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function isArrayOrPointer() in line 405
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function isClass() in line 367
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function isConst() in line 351
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function isExtern() in line 343
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function isFloatingType() in line 537
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function isGlobal() in line 295
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses enumvalue Global defined in symboldatabase.h
   function isIntegralType() in line 545
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function isLocal() in line 319
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses enumvalue Local defined in symboldatabase.h
   function isMutable() in line 327
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function isNamespace() in line 303
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses enumvalue Namespace defined in symboldatabase.h
   function isPointer() in line 383
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function isPointerArray() in line 399
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function isPointerToArray() in line 391
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function isPrivate() in line 287
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses enumvalue Private defined in symboldatabase.h
   function isProtected() in line 279
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses enumvalue Protected defined in symboldatabase.h
   function isPublic() in line 271
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses enumvalue Public defined in symboldatabase.h
   function isReference() in line 413
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function isRValueReference() in line 421
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function isStatic() in line 335
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function isStlStringType() in line 501
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function isStlType() in line 489
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function isStlType(const std::string &) in line 515
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function isStlType(const std::set< std::string > &) in line 529
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function isThrow() in line 359
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses enumvalue Throw defined in symboldatabase.h
   function name() in line 239
      protection public
      7 lines of code
      0 parameters
      2 conditional paths
   function nameToken() in line 198
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function scope() in line 453
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function setFlag(unsigned int,bool) in line 168
      3 lines of code
      2 parameters
      1 conditional paths
   function type() in line 437
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function type(const Type *) in line 558
      3 lines of code
      1 parameters
      1 conditional paths
   function typeEndToken() in line 222
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function typeScope() in line 445
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function typeStartToken() in line 210
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function Variable(const Token *,const Token *,const Token *,std::size_t,AccessControl,const Type *,const Scope *,const Library *) in line 180
      protection public
      13 lines of code
      8 parameters
      1 conditional paths
   variable _access in line 575
   variable _dimensions in line 587
   variable _end in line 569
   variable _flags in line 578
   variable _index in line 572
   variable _name in line 563
   variable _scope in line 584
   variable _start in line 566
   variable _type in line 581
module Function
   function addArguments(const SymbolDatabase *,const Scope *) in line 667
      protection public
      84 lines of code
      2 parameters
      24 conditional paths
      uses function link(Token *) defined in Token
      uses function next() defined in Token
      uses variable count defined in extracttests.py
      uses function previous() defined in Token
      uses function tokAt(int) defined in Token
      uses function str(T &&) defined in Token
      uses function debugMessage(const Token *,const std::string &) defined in SymbolDatabase
      uses function isStandardType() defined in Token
      uses enumvalue Argument defined in symboldatabase.h
      uses variable _settings defined in SymbolDatabase
      uses variable library defined in Settings
   function argCount() in line 657
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function argsMatch(const Scope *,const Token *,const Token *,const std::string &,unsigned int) in line 818
      protection public
      138 lines of code
      5 parameters
      37 conditional paths
      uses function isCPP() defined in SymbolDatabase
      uses variable check defined in Scope
      uses function str(T &&) defined in Token
      uses function next() defined in Token
      uses function isLong() defined in Token
      uses function isUnsigned() defined in Token
      uses function nextArgument() defined in Token
      uses function tokAt(int) defined in Token
      uses variable path defined in daca2-report.py
      uses variable className defined in Scope
      uses function strAt(int) defined in Token
   function getArgumentVar(std::size_t) in line 663
      protection public
      10 lines of code
      1 parameters
      4 conditional paths
   function getFlag(unsigned int) in line 620
      3 lines of code
      1 parameters
      1 conditional paths
   function hasBody() in line 699
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function hasBody(bool) in line 751
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function hasLvalRefQualifier() in line 744
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function hasLvalRefQualifier(bool) in line 796
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function hasRvalRefQualifier() in line 747
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function hasRvalRefQualifier(bool) in line 799
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function initializedArgCount() in line 664
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function isAttributeConst() in line 689
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function isAttributeConstructor() in line 680
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function isAttributeDestructor() in line 683
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function isAttributeNoreturn() in line 692
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function isAttributeNothrow() in line 695
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function isAttributePure() in line 686
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function isConst() in line 705
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function isConst(bool) in line 757
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function isConstructor() in line 671
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
   function isDefault() in line 729
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function isDefault(bool) in line 781
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function isDelete() in line 732
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function isDelete(bool) in line 784
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function isDestructor() in line 677
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function isExplicit() in line 726
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function isExplicit(bool) in line 778
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function isExtern() in line 720
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function isExtern(bool) in line 772
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function isFriend() in line 723
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function isFriend(bool) in line 775
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function isImplicitlyVirtual(bool) in line 669
      protection public
      16 lines of code
      1 parameters
      5 conditional paths
      uses enumvalue Private defined in symboldatabase.h
      uses enumvalue Public defined in symboldatabase.h
      uses enumvalue Protected defined in symboldatabase.h
   function isImplicitlyVirtual_rec(const ::Type *,bool &) in line 821
      50 lines of code
      2 parameters
      10 conditional paths
      uses variable functionMap defined in Scope
      uses function isVirtual() defined in Function
      uses variable tokenDef defined in Function
      uses function previous() defined in Token
      uses function str(T &&) defined in Token
      uses variable argDef defined in Function
   function isInline() in line 702
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function isInline(bool) in line 754
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function isNoExcept() in line 735
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function isNoExcept(bool) in line 787
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function isOperator() in line 741
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function isOperator(bool) in line 793
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function isPure() in line 711
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function isPure(bool) in line 763
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function isStatic() in line 714
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function isStatic(bool) in line 766
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function isStaticLocal() in line 717
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function isStaticLocal(bool) in line 769
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function isThrow() in line 738
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function isThrow(bool) in line 790
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function isVirtual() in line 708
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function isVirtual(bool) in line 760
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function minArgCount() in line 660
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses variable num defined in Dimension
   function name() in line 653
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function setFlag(unsigned int,bool) in line 629
      3 lines of code
      2 parameters
      1 conditional paths
   function Function() in line 636
      protection public
      16 lines of code
      0 parameters
      1 conditional paths
   variable access in line 814
      protection public
   variable arg in line 806
      protection public
   variable argDef in line 804
      protection public
   variable argumentList in line 811
      protection public
   variable flags in line 823
   variable functionScope in line 809
      protection public
   variable initArgCount in line 812
      protection public
   variable nestedIn in line 810
      protection public
   variable noexceptArg in line 815
      protection public
   variable retDef in line 807
      protection public
   variable retType in line 808
      protection public
   variable throwArg in line 816
      protection public
   variable token in line 805
      protection public
   variable tokenDef in line 803
      protection public
   variable type in line 813
      protection public
module Scope
   function addFunction(const Function &) in line 920
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses variable tokenDef defined in Function
      uses function str(T &&) defined in Token
      uses variable typetok defined in findcasts.py
      uses variable name defined in setup.py
   function addVariable(const Token *,const Token *,const Token *,AccessControl,const Type *,const Scope *,const Library *) in line 907
      protection public
      7 lines of code
      7 parameters
      1 conditional paths
   function checkVariable(const Token *,AccessControl,const Library *) in line 939
      protection public
      58 lines of code
      3 parameters
      12 conditional paths
      uses function linkAt(int) defined in Token
      uses function next() defined in Token
      uses function varId() defined in Token
      uses function tokAt(int) defined in Token
      uses function str(T &&) defined in Token
      uses function link(Token *) defined in Token
      uses variable typetok defined in findcasts.py
      uses function isVariableDeclaration(const Token *,const Token *&,const Token *&) defined in Scope
      uses function isBoolean() defined in Token
      uses variable check defined in Scope
      uses function debugMessage(const Token *,const std::string &) defined in SymbolDatabase
      uses function addVariable(const Token *,const Token *,const Token *,AccessControl,const Type *,const Scope *,const Library *) defined in Scope
      uses function previous() defined in Token
   function defaultAccess() in line 930
      protection public
      17 lines of code
      0 parameters
      6 conditional paths
      uses variable type defined in Scope
      uses enumvalue eGlobal defined in Scope
      uses enumvalue Global defined in symboldatabase.h
      uses enumvalue eClass defined in Scope
      uses enumvalue Private defined in symboldatabase.h
      uses enumvalue eStruct defined in Scope
      uses enumvalue Public defined in symboldatabase.h
      uses enumvalue eUnion defined in Scope
      uses enumvalue eNamespace defined in Scope
      uses enumvalue Namespace defined in symboldatabase.h
      uses enumvalue Local defined in symboldatabase.h
   function findFunction(const Token *,bool) in line 883
      protection public
      157 lines of code
      2 parameters
      36 conditional paths
      uses function linkAt(int) defined in Token
      uses function tokAt(int) defined in Token
      uses function nextArgument() defined in Token
      uses variable functionMap defined in Scope
      uses function str(T &&) defined in Token
      uses function argCount() defined in Function
      uses function minArgCount() defined in Function
      uses function findFunctionInBase(const std::string &,size_t,std::vector< const Function * > &) defined in Scope
      uses function getArgumentVar(std::size_t) defined in Function
      uses variable check defined in Scope
      uses function getVariableFromVarId(std::size_t) defined in SymbolDatabase
      uses function typeStartToken() defined in Variable
      uses function isUnsigned() defined in Token
      uses function isLong() defined in Token
      uses function isReference() defined in Variable
      uses function isConst() defined in Function
      uses function scope(const Scope *) defined in Token
      uses variable functionOf defined in Scope
      uses function isClassOrStruct() defined in Scope
      uses variable function defined in Scope
   function findFunctionInBase(const std::string &,size_t,std::vector< const Function * > &) in line 958
      21 lines of code
      3 parameters
      7 conditional paths
      uses function isClassOrStruct() defined in Scope
      uses variable definedType defined in Scope
      uses variable derivedFrom defined in Type
      uses variable classScope defined in Type
      uses variable functionMap defined in Scope
      uses variable name defined in setup.py
      uses function argCount() defined in Function
      uses function minArgCount() defined in Function
      uses function findFunctionInBase(const std::string &,size_t,std::vector< const Function * > &) defined in Scope
   function findInNestedList(const std::string &) in line 889
      protection public
      10 lines of code
      1 parameters
      3 conditional paths
      uses variable nestedList defined in Scope
      uses variable name defined in setup.py
   function findInNestedListRecursive(const std::string &) in line 905
      protection public
      16 lines of code
      1 parameters
      5 conditional paths
      uses variable nestedList defined in Scope
      uses variable name defined in setup.py
      uses function findInNestedListRecursive(const std::string &) defined in Scope
   function findRecordInNestedList(const std::string &) in line 891
      protection public
      10 lines of code
      1 parameters
      3 conditional paths
      uses variable nestedList defined in Scope
      uses variable name defined in setup.py
      uses enumvalue eFunction defined in Scope
   function findRecordInNestedList(const std::string &) in line 892
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
      uses variable name defined in setup.py
   function findType(const std::string &) in line 896
      protection public
      10 lines of code
      1 parameters
      3 conditional paths
      uses variable definedTypes defined in Scope
      uses variable name defined in setup.py
   function findType(const std::string &) in line 897
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
      uses variable name defined in setup.py
   function getDestructor() in line 918
      protection public
      9 lines of code
      0 parameters
      3 conditional paths
      uses variable functionList defined in Scope
      uses enumvalue eDestructor defined in Function
   function getVariable(const std::string &) in line 946
      protection public
      11 lines of code
      1 parameters
      3 conditional paths
      uses variable varlist defined in Scope
   function getVariableList(const Library *) in line 916
      protection public
      107 lines of code
      1 parameters
      27 conditional paths
      uses variable classStart defined in Scope
      uses function next() defined in Token
      uses variable className defined in Scope
      uses variable check defined in Scope
      uses variable _tokenizer defined in SymbolDatabase
      uses function tokens() defined in Tokenizer
      uses function defaultAccess() defined in Scope
      uses variable classEnd defined in Scope
      uses enumvalue Public defined in symboldatabase.h
      uses enumvalue Protected defined in symboldatabase.h
      uses enumvalue Private defined in symboldatabase.h
      uses function checkVariable(const Token *,AccessControl,const Library *) defined in Scope
   function hasDefaultConstructor() in line 928
      protection public
      12 lines of code
      0 parameters
      4 conditional paths
      uses variable numConstructors defined in Scope
      uses variable functionList defined in Scope
      uses enumvalue eConstructor defined in Function
   function isClassOrStruct() in line 862
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function isExecutable() in line 866
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function isLocal() in line 870
      protection public
      6 lines of code
      0 parameters
      1 conditional paths
      uses variable name defined in setup.py
   function isVariableDeclaration(const Token *,const Token *&,const Token *&) in line 956
      52 lines of code
      3 parameters
      14 conditional paths
      uses variable check defined in Scope
      uses variable _tokenizer defined in SymbolDatabase
      uses function isCPP() defined in Tokenizer
      uses function next() defined in Token
      uses function link(Token *) defined in Token
      uses function strAt(int) defined in Token
      uses function linkAt(int) defined in Token
      uses function tokAt(int) defined in Token
      uses function str(T &&) defined in Token
      uses function varId() defined in Token
      uses variable typetok defined in findcasts.py
      uses variable type defined in Scope
      uses enumvalue eCatch defined in Scope
   function Scope(const SymbolDatabase *,const Token *,const Scope *) in line 838
      protection public
      38 lines of code
      3 parameters
      9 conditional paths
      uses variable classDef defined in Scope
      uses variable type defined in Scope
      uses enumvalue eGlobal defined in Scope
      uses function str(T &&) defined in Token
      uses enumvalue eClass defined in Scope
      uses function next() defined in Token
      uses enumvalue eStruct defined in Scope
      uses enumvalue eUnion defined in Scope
      uses enumvalue eNamespace defined in Scope
      uses enumvalue eFunction defined in Scope
      uses function tokAt(int) defined in Token
      uses variable className defined in Scope
   function Scope(const SymbolDatabase *,const Token *,const Scope *,ScopeType,const Token *) in line 839
      protection public
      14 lines of code
      5 parameters
      1 conditional paths
   variable check in line 841
      protection public
   variable classDef in line 843
      protection public
   variable classEnd in line 845
      protection public
   variable className in line 842
      protection public
   variable classStart in line 844
      protection public
   variable definedType in line 855
      protection public
   variable definedTypes in line 856
      protection public
   variable function in line 860
      protection public
   variable functionList in line 846
      protection public
   variable functionMap in line 847
      protection public
   variable functionOf in line 859
      protection public
   variable nestedIn in line 849
      protection public
   variable nestedList in line 850
      protection public
   variable numConstructors in line 851
      protection public
   variable numCopyOrMoveConstructors in line 852
      protection public
   variable type in line 854
      protection public
   variable usingList in line 853
      protection public
   variable varlist in line 848
      protection public
module Scope::UsingInfo
   variable scope in line 833
      protection public
   variable start in line 832
      protection public
module SymbolDatabase
   function addClassFunction(Scope **,const Token **,const Token *) in line 1036
      159 lines of code
      3 parameters
      33 conditional paths
      uses function link(Token *) defined in Token
      uses function tokAt(int) defined in Token
      uses function linkAt(int) defined in Token
      uses function previous() defined in Token
      uses variable count defined in extracttests.py
      uses variable path defined in daca2-report.py
      uses variable scopeList defined in SymbolDatabase
      uses variable usingList defined in Scope
      uses function findFunctionInScope(const Token *,const Scope *) defined in SymbolDatabase
      uses function hasBody() defined in Function
      uses variable token defined in Function
      uses variable arg defined in Function
      uses function addNewFunction(Scope **,const Token **) defined in SymbolDatabase
      uses variable nestedIn defined in Function
      uses variable function defined in Scope
      uses variable functionScope defined in Function
      uses variable className defined in Scope
      uses variable type defined in Scope
      uses enumvalue eFunction defined in Scope
      uses variable nestedIn defined in Scope
      uses function findInNestedList(const std::string &) defined in Scope
      uses variable functionMap defined in Scope
      uses function argsMatch(const Scope *,const Token *,const Token *,const std::string &,unsigned int) defined in Function
      uses variable argDef defined in Function
      uses function next() defined in Token
      uses variable type defined in Function
      uses enumvalue eDestructor defined in Function
      uses function isConst() defined in Function
      uses function hasLvalRefQualifier() defined in Function
      uses function hasRvalRefQualifier() defined in Function
   function addGlobalFunction(Scope *&,const Token *&,const Token *,const Token *) in line 1038
      26 lines of code
      4 parameters
      5 conditional paths
      uses variable functionMap defined in Scope
      uses function str(T &&) defined in Token
      uses function argsMatch(const Scope *,const Token *,const Token *,const std::string &,unsigned int) defined in Function
      uses function next() defined in Token
      uses function addGlobalFunctionDecl(Scope *&,const Token *,const Token *,const Token *) defined in SymbolDatabase
      uses function addNewFunction(Scope **,const Token **) defined in SymbolDatabase
      uses variable function defined in Scope
      uses variable functionScope defined in Function
   function addGlobalFunctionDecl(Scope *&,const Token *,const Token *,const Token *) in line 1037
      40 lines of code
      4 parameters
      6 conditional paths
      uses variable argDef defined in Function
      uses enumvalue Public defined in symboldatabase.h
      uses function type(const ::Type *) defined in Token
      uses enumvalue eFunction defined in Function
      uses function previous() defined in Token
      uses function next() defined in Token
      uses function str(T &&) defined in Token
      uses function addFunction(const Function &) defined in Scope
      uses variable functionList defined in Scope
   function addNewFunction(Scope **,const Token **) in line 1039
      45 lines of code
      2 parameters
      8 conditional paths
      uses variable scopeList defined in SymbolDatabase
      uses friend Scope defined in SymbolDatabase
      uses function str(T &&) defined in Token
      uses function link(Token *) defined in Token
      uses function linkAt(int) defined in Token
      uses function next() defined in Token
      uses variable classStart defined in Scope
      uses variable classEnd defined in Scope
   function cppcheckError(const Token *) in line 1048
      4 lines of code
      1 parameters
      1 conditional paths
      uses enumvalue INTERNAL defined in InternalError
   function debugMessage(const Token *,const std::string &) in line 1016
      protection public
      13 lines of code
      2 parameters
      3 conditional paths
      uses variable _settings defined in SymbolDatabase
      uses variable debugwarnings defined in Settings
      uses variable _tokenizer defined in SymbolDatabase
      uses variable list defined in Tokenizer
      uses enumvalue debug defined in Severity
      uses variable msg defined in findcasts.py
      uses variable _errorLogger defined in SymbolDatabase
      uses function reportErr(const ErrorLogger::ErrorMessage &) defined in ErrorLogger
   function findFunction(const Token *) in line 991
      protection public
      77 lines of code
      1 parameters
      17 conditional paths
      uses function scope(const Scope *) defined in Token
      uses function isExecutable() defined in Scope
      uses variable functionOf defined in Scope
      uses variable nestedIn defined in Scope
      uses function strAt(int) defined in Token
      uses function tokAt(int) defined in Token
      uses function findRecordInNestedList(const std::string &) defined in Scope
      uses function str(T &&) defined in Token
      uses variable className defined in Scope
      uses function findFunction(const Token *,bool) defined in Scope
      uses function varId() defined in Token
      uses function typeScope() defined in Variable
      uses function isConst() defined in Variable
   function findFunctionInScope(const Token *,const Scope *) in line 1043
      27 lines of code
      2 parameters
      6 conditional paths
      uses function strAt(int) defined in Token
      uses variable functionMap defined in Scope
      uses function str(T &&) defined in Token
      uses function argsMatch(const Scope *,const Token *,const Token *,const std::string &,unsigned int) defined in Function
      uses function tokAt(int) defined in Token
      uses function next() defined in Token
      uses function findRecordInNestedList(const std::string &) defined in Scope
   function findNamespace(const Token *,const Scope *) in line 1042
      11 lines of code
      2 parameters
      3 conditional paths
      uses variable s defined in extracttests.py
      uses variable nestedIn defined in Scope
   function findScope(const Token *,const Scope *) in line 1000
      protection public
      24 lines of code
      2 parameters
      5 conditional paths
      uses function str(T &&) defined in Token
      uses function next() defined in Token
      uses function isName() defined in Token
      uses function strAt(int) defined in Token
      uses function findRecordInNestedList(const std::string &) defined in Scope
      uses function tokAt(int) defined in Token
   function findScope(const Token *,Scope *) in line 1001
      protection public
      3 lines of code
      2 parameters
      1 conditional paths
   function findScopeByName(const std::string &) in line 993
      protection public
      8 lines of code
      1 parameters
      3 conditional paths
      uses variable name defined in setup.py
   function findType(const Token *,const Scope *) in line 995
      protection public
      38 lines of code
      2 parameters
      7 conditional paths
      uses function next() defined in Token
      uses function str(T &&) defined in Token
      uses variable className defined in Scope
      uses function isClassOrStruct() defined in Scope
      uses variable definedType defined in Scope
      uses function isName() defined in Token
      uses function strAt(int) defined in Token
      uses function findRecordInNestedList(const std::string &) defined in Scope
      uses function tokAt(int) defined in Token
      uses variable nestedIn defined in Scope
      uses function findType(const std::string &) defined in Scope
   function findType(const Token *,Scope *) in line 996
      protection public
      3 lines of code
      2 parameters
      1 conditional paths
   function findTypeInNested(const Token *,const Scope *) in line 1041
      50 lines of code
      2 parameters
      9 conditional paths
      uses function next() defined in Token
      uses function str(T &&) defined in Token
      uses variable className defined in Scope
      uses function isClassOrStruct() defined in Scope
      uses variable definedType defined in Scope
      uses function isName() defined in Token
      uses function strAt(int) defined in Token
      uses function findRecordInNestedList(const std::string &) defined in Scope
      uses function tokAt(int) defined in Token
      uses variable nestedIn defined in Scope
      uses variable type defined in Scope
      uses function findType(const std::string &) defined in Scope
   function findVariableType(const Scope *,const Token *) in line 984
      protection public
      36 lines of code
      2 parameters
      8 conditional paths
      uses variable type defined in Scope
      uses function str(T &&) defined in Token
      uses function strAt(int) defined in Token
      uses enumvalue eFunction defined in Scope
      uses variable functionOf defined in Scope
      uses variable nestedIn defined in Scope
   function getVariableFromVarId(std::size_t) in line 1005
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function getVariableListSize() in line 1009
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses variable msg defined in findcasts.py
      uses variable out defined in triage-report.py
   function isCPP() in line 1022
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function isFunction(const Token *,const Scope *,const Token **,const Token **) in line 1040
      123 lines of code
      4 parameters
      24 conditional paths
      uses function varId() defined in Token
      uses function str(T &&) defined in Token
      uses function link(Token *) defined in Token
      uses function previous() defined in Token
      uses function isReservedName(const std::string &) defined in SymbolDatabase
      uses function isName() defined in Token
      uses function strAt(int) defined in Token
      uses function isClassOrStruct() defined in Scope
      uses function tokAt(int) defined in Token
      uses function linkAt(int) defined in Token
      uses function isNumber() defined in Token
      uses function next() defined in Token
      uses function isUpperCaseName() defined in Token
      uses variable type defined in Scope
      uses enumvalue eGlobal defined in Scope
   function isReservedName(const std::string &) in line 1051
      7 lines of code
      1 parameters
      2 conditional paths
      uses variable type defined in Scope
   function printOut(const char *) in line 1018
      protection public
      195 lines of code
      1 parameters
      30 conditional paths
      uses variable scopeList defined in SymbolDatabase
      uses variable _tokenizer defined in SymbolDatabase
      uses enumvalue eConstructor defined in Function
      uses enumvalue eCopyConstructor defined in Function
      uses enumvalue eMoveConstructor defined in Function
      uses enumvalue eOperatorEqual defined in Function
      uses enumvalue eDestructor defined in Function
      uses enumvalue eFunction defined in Function
      uses enumvalue Public defined in symboldatabase.h
      uses enumvalue Protected defined in symboldatabase.h
      uses enumvalue Private defined in symboldatabase.h
      uses function printVariable(const Variable *,const char *) defined in SymbolDatabase
      uses variable count defined in extracttests.py
      uses function tokAt(int) defined in Token
      uses function str(T &&) defined in Token
      uses function strAt(int) defined in Token
      uses variable list defined in Tokenizer
      uses function fileLine(const Token *) defined in TokenList
      uses variable typeList defined in SymbolDatabase
      uses enumvalue Unknown defined in Type
      uses enumvalue True defined in Type
      uses enumvalue False defined in Type
      uses variable _variableList defined in SymbolDatabase
   function printVariable(const Variable *,const char *) in line 1019
      protection public
      50 lines of code
      2 parameters
      5 conditional paths
      uses function nameToken() defined in Variable
      uses variable _tokenizer defined in SymbolDatabase
      uses function declarationId() defined in Variable
      uses function typeStartToken() defined in Variable
      uses function typeEndToken() defined in Variable
      uses function index() defined in Variable
      uses function isPublic() defined in Variable
      uses function isProtected() defined in Variable
      uses function isPrivate() defined in Variable
      uses function isGlobal() defined in Variable
      uses function isNamespace() defined in Variable
      uses function isArgument() defined in Variable
      uses function isLocal() defined in Variable
      uses function isThrow() defined in Variable
      uses function isMutable() defined in Variable
      uses function isStatic() defined in Variable
      uses function isExtern() defined in Variable
      uses function isConst() defined in Variable
      uses function isClass() defined in Variable
      uses function isArray() defined in Variable
      uses function isPointer() defined in Variable
      uses function isReference() defined in Variable
      uses function isRValueReference() defined in Variable
      uses function hasDefault() defined in Variable
      uses function isStlType() defined in Variable
      uses function type() defined in Variable
      uses function name() defined in Type
      uses variable list defined in Tokenizer
      uses function fileLine(const Token *) defined in TokenList
      uses variable classDef defined in Type
      uses function scope() defined in Variable
      uses function dimensions() defined in Variable
      uses function dimension(std::size_t) defined in Variable
   function printXml(std::ostream &) in line 1020
      protection public
      73 lines of code
      1 parameters
      12 conditional paths
      uses variable out defined in triage-report.py
      uses variable scopeList defined in SymbolDatabase
      uses variable _variableList defined in SymbolDatabase
   function setValueTypeInTokenList(Token *,bool,char) in line 1030
      protection public
      79 lines of code
      3 parameters
      26 conditional paths
      uses enumvalue SIGNED defined in ValueType
      uses enumvalue UNSIGNED defined in ValueType
      uses enumvalue UNKNOWN_SIGN defined in ValueType
      uses function next() defined in Token
      uses function setValueType(ValueType *) defined in Token
      uses function isNumber() defined in Token
      uses function str(T &&) defined in Token
      uses variable type defined in Scope
      uses function isComparisonOp() defined in Token
      uses function tokType() defined in Token
      uses enumvalue eChar defined in Token
      uses enumvalue eString defined in Token
      uses function isLong() defined in Token
      uses variable originalTypeName defined in ValueType
      uses variable type defined in ValueType
      uses function astOperand2(Token *) defined in Token
      uses function astOperand1(Token *) defined in Token
      uses function previous() defined in Token
      uses function function(const Function *) defined in Token
      uses function variable(const Variable *) defined in Token
   function validate() in line 1027
      protection public
      20 lines of code
      0 parameters
      4 conditional paths
      uses variable _settings defined in SymbolDatabase
      uses variable debugwarnings defined in Settings
      uses variable functionScopes defined in SymbolDatabase
      uses variable function defined in Scope
      uses function isExecutable() defined in Scope
      uses variable classDef defined in Scope
      uses variable msg defined in findcasts.py
      uses function str(T &&) defined in Token
      uses variable _tokenizer defined in SymbolDatabase
      uses variable list defined in Tokenizer
      uses enumvalue debug defined in Severity
      uses variable _errorLogger defined in SymbolDatabase
      uses function reportErr(const ErrorLogger::ErrorMessage &) defined in ErrorLogger
   function SymbolDatabase(const Tokenizer *,const Settings *,ErrorLogger *) in line 963
      protection public
      1201 lines of code
      3 parameters
      268 conditional paths
      uses variable scopeList defined in SymbolDatabase
      uses friend Scope defined in SymbolDatabase
      uses variable _settings defined in SymbolDatabase
      uses variable debugwarnings defined in Settings
      uses variable _tokenizer defined in SymbolDatabase
      uses function tokens() defined in Tokenizer
      uses function next() defined in Token
      uses variable _errorLogger defined in SymbolDatabase
      uses function reportProgress(const std::string &,const char,const std::size_t) defined in ErrorLogger
      uses variable list defined in Tokenizer
      uses function getSourceFilePath() defined in TokenList
      uses function isCPP() defined in Tokenizer
      uses function isC() defined in Tokenizer
      uses function tokAt(int) defined in Token
      uses function str(T &&) defined in Token
      uses function link(Token *) defined in Token
      uses function linkAt(int) defined in Token
      uses function findScope(const Token *,const Scope *) defined in SymbolDatabase
      uses function isClassOrStruct() defined in Scope
      uses variable definedType defined in Scope
      uses function syntaxError(const Token *) defined in Tokenizer
      uses function initBaseInfo(const Token *,const Token *) defined in Type
      uses enumvalue Private defined in symboldatabase.h
      uses variable type defined in Scope
      uses enumvalue eClass defined in Scope
      uses enumvalue Public defined in symboldatabase.h
      uses enumvalue eStruct defined in Scope
      uses variable classDef defined in Scope
      uses variable classStart defined in Scope
      uses variable classEnd defined in Scope
      uses enumvalue eUnion defined in Scope
      uses function findType(const Token *,const Scope *) defined in SymbolDatabase
      uses variable typeList defined in SymbolDatabase
      uses variable definedTypes defined in Scope
      uses variable classScope defined in Type
      uses variable nestedList defined in Scope
      uses variable start defined in Scope::UsingInfo
      uses variable scope defined in Scope::UsingInfo
      uses function findNamespace(const Token *,const Scope *) defined in SymbolDatabase
      uses variable usingList defined in Scope
      uses function addVariable(const Token *,const Token *,const Token *,AccessControl,const Type *,const Scope *,const Library *) defined in Scope
      uses variable library defined in Settings
      uses variable nestedIn defined in Scope
      uses enumvalue Protected defined in symboldatabase.h
      uses function isFunction(const Token *,const Scope *,const Token **,const Token **) defined in SymbolDatabase
      uses variable argDef defined in Function
      uses enumvalue eOperatorEqual defined in Function
      uses variable className defined in Scope
      uses enumvalue eDestructor defined in Function
      uses function strAt(int) defined in Token
      uses function type(const ::Type *) defined in Token
      uses enumvalue eCopyConstructor defined in Function
      uses enumvalue eMoveConstructor defined in Function
      uses enumvalue eConstructor defined in Function
      uses function previous() defined in Token
      uses variable numConstructors defined in Scope
      uses variable numCopyOrMoveConstructors defined in Scope
      uses function isFunctionHead(const Token *,const std::string &) defined in Tokenizer
      uses function addFunction(const Function &) defined in Scope
      uses variable functionList defined in Scope
      uses function addNewFunction(Scope **,const Token **) defined in SymbolDatabase
      uses variable functionOf defined in Scope
      uses variable function defined in Scope
      uses variable functionScope defined in Function
      uses function findInNestedListRecursive(const std::string &) defined in Scope
      uses function addClassFunction(Scope **,const Token **,const Token *) defined in SymbolDatabase
      uses variable nameStart defined in Type::FriendInfo
      uses variable nameEnd defined in Type::FriendInfo
      uses variable name defined in Type::FriendInfo
      uses variable type defined in Type::FriendInfo
      uses variable friendList defined in Type
      uses enumvalue eNamespace defined in Scope
      uses enumvalue eGlobal defined in Scope
      uses function isName() defined in Token
      uses function addGlobalFunction(Scope *&,const Token *&,const Token *,const Token *) defined in SymbolDatabase
      uses variable functionMap defined in Scope
      uses function argsMatch(const Scope *,const Token *,const Token *,const std::string &,unsigned int) defined in Function
      uses function addGlobalFunctionDecl(Scope *&,const Token *,const Token *,const Token *) defined in SymbolDatabase
      uses variable noexceptArg defined in Function
      uses function isNoExcept() defined in Function
      uses variable throwArg defined in Function
      uses function isThrow() defined in Function
      uses function isExtern() defined in Function
      uses function isExecutable() defined in Scope
      uses enumvalue eElse defined in Scope
      uses enumvalue eDo defined in Scope
      uses enumvalue eTry defined in Scope
      uses enumvalue eIf defined in Scope
      uses enumvalue eFor defined in Scope
      uses enumvalue eWhile defined in Scope
      uses enumvalue eCatch defined in Scope
      uses enumvalue eSwitch defined in Scope
      uses function checkVariable(const Token *,AccessControl,const Library *) defined in Scope
      uses enumvalue Local defined in symboldatabase.h
      uses enumvalue Throw defined in symboldatabase.h
      uses enumvalue eLambda defined in Scope
      uses enumvalue eUnconditional defined in Scope
      uses function findDependency(const Type *) defined in Type
      uses function getVariableList(const Library *) defined in Scope
      uses enumvalue eFunction defined in Scope
      uses variable functionScopes defined in SymbolDatabase
      uses variable classAndStructScopes defined in SymbolDatabase
      uses function findTypeInNested(const Token *,const Scope *) defined in SymbolDatabase
      uses variable needInitialization defined in Type
      uses enumvalue True defined in Type
      uses variable _blankTypes defined in SymbolDatabase
      uses enumvalue Unknown defined in Type
      uses enumvalue False defined in Type
      uses variable varlist defined in Scope
      uses function debugMessage(const Token *,const std::string &) defined in SymbolDatabase
      uses variable _variableList defined in SymbolDatabase
      uses function varIdCount() defined in Tokenizer
      uses function varId() defined in Token
      uses function typeScope() defined in Variable
      uses function getVariable(const std::string &) defined in Scope
      uses variable num defined in Dimension
      uses variable known defined in Dimension
      uses variable start defined in Dimension
      uses variable end defined in Dimension
      uses function getVariableFromVarId(std::size_t) defined in SymbolDatabase
      uses function typeEndToken() defined in Variable
      uses function isUnsigned() defined in Token
      uses function isSigned() defined in Token
      uses function isLong() defined in Token
      uses function front() defined in TokenList
      uses function back() defined in TokenList
      uses function scope(const Scope *) defined in Token
      uses function function(const Function *) defined in Token
      uses function findFunction(const Token *) defined in SymbolDatabase
      uses function findVariableType(const Scope *,const Token *) defined in SymbolDatabase
      uses function variable(const Variable *) defined in Token
   function ~SymbolDatabase() in line 964
      protection public
      10 lines of code
      0 parameters
      2 conditional paths
      uses variable _tokenizer defined in SymbolDatabase
      uses variable list defined in Tokenizer
      uses function front() defined in TokenList
      uses function back() defined in TokenList
      uses function next() defined in Token
   variable _blankTypes in line 1061
   variable _errorLogger in line 1055
   variable _settings in line 1054
   variable _tokenizer in line 1053
   variable _variableList in line 1058
   variable classAndStructScopes in line 973
      protection public
   variable functionScopes in line 970
      protection public
   variable scopeList in line 967
      protection public
   variable typeList in line 976
      protection public
module ValueType
   function isIntegral() in line 1080
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function str() in line 1084
      protection public
      37 lines of code
      0 parameters
      17 conditional paths
      uses variable type defined in Scope
   function ValueType() in line 1074
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function ValueType(const ValueType &) in line 1075
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function ValueType(enum Sign,enum Type,unsigned int) in line 1076
      protection public
      1 lines of code
      3 parameters
      1 conditional paths
   function ValueType(enum Sign,enum Type,unsigned int,unsigned int) in line 1077
      protection public
      1 lines of code
      4 parameters
      1 conditional paths
   function ValueType(enum Sign,enum Type,unsigned int,unsigned int,const std::string &) in line 1078
      protection public
      1 lines of code
      5 parameters
      1 conditional paths
   variable constness in line 1070
      protection public
   variable originalTypeName in line 1072
      protection public
   variable pointer in line 1069
      protection public
   variable sign in line 1067
      protection public
   variable type in line 1068
      protection public
   variable typeScope in line 1071
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/lib/templatesimplifier.cpp
module templatesimplifier.cpp
   function isLowerThanLogicalAnd(const Token *) in line 863
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function isAssignmentOp() defined in Token
   function isLowerThanOr(const Token *) in line 867
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function isLowerThanLogicalAnd(const Token *) defined in templatesimplifier.cpp
      uses function str(T &&) defined in Token
   function isLowerThanXor(const Token *) in line 871
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function isLowerThanOr(const Token *) defined in templatesimplifier.cpp
      uses function str(T &&) defined in Token
   function isLowerThanAnd(const Token *) in line 875
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function isLowerThanXor(const Token *) defined in templatesimplifier.cpp
      uses function str(T &&) defined in Token
   function isLowerThanShift(const Token *) in line 879
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function isLowerThanAnd(const Token *) defined in templatesimplifier.cpp
      uses function str(T &&) defined in Token
   function isLowerThanPlusMinus(const Token *) in line 883
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function isLowerThanShift(const Token *) defined in templatesimplifier.cpp
   function isLowerThanMulDiv(const Token *) in line 887
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function isLowerThanPlusMinus(const Token *) defined in templatesimplifier.cpp
   function isLowerEqualThanMulDiv(const Token *) in line 891
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function isLowerThanMulDiv(const Token *) defined in templatesimplifier.cpp
   function ShiftInt(const char,const Token *,const Token *) in line 896
      protection public
      26 lines of code
      3 parameters
      6 conditional paths
      uses function str(T &&) defined in Token
      uses function previous() defined in Token
   function ShiftUInt(const char,const Token *,const Token *) in line 923
      protection public
      15 lines of code
      3 parameters
      4 conditional paths
      uses function str(T &&) defined in Token
      uses function previous() defined in Token
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/lib/templatesimplifier.h
module TemplateSimplifier
   function checkComplicatedSyntaxErrorsInTemplates(const Token *) in line 57
      protection public
      96 lines of code
      1 parameters
      35 conditional paths
      uses function next() defined in Token
      uses function syntaxError(const Token *) defined in TemplateSimplifier
      uses function link(Token *) defined in Token
      uses function tokAt(int) defined in Token
   function cleanupAfterSimplify(Token *) in line 51
      protection public
      50 lines of code
      1 parameters
      14 conditional paths
      uses function next() defined in Token
      uses function str(T &&) defined in Token
      uses function link(Token *) defined in Token
      uses function tokAt(int) defined in Token
   function expandSpecialized(Token *) in line 71
      protection public
      61 lines of code
      1 parameters
      10 conditional paths
      uses function next() defined in Token
      uses function tokAt(int) defined in Token
      uses function isName() defined in Token
      uses function str(T &&) defined in Token
      uses function templateParameters(const Token *) defined in TemplateSimplifier
      uses function previous() defined in Token
      uses variable s defined in extracttests.py
      uses variable name defined in setup.py
   function expandTemplate(TokenList &,const Token *,const std::string &,std::vector< const Token * > &,const std::string &,std::vector< const Token * > &,std::list< Token * > &) in line 111
      protection public
      124 lines of code
      7 parameters
      27 conditional paths
      uses function front() defined in TokenList
      uses function next() defined in Token
      uses function TemplateParametersInDeclaration(const Token *,std::vector< const Token * > &) defined in TemplateSimplifier
      uses function link(Token *) defined in Token
      uses function instantiateMatch(const Token *,const std::string &,std::size_t,const char) defined in TemplateSimplifier
      uses variable name defined in setup.py
      uses function addtoken(std::string,const unsigned int,const unsigned int,bool) defined in TokenList
      uses variable typetok defined in findcasts.py
      uses function templateParameters(const Token *) defined in TemplateSimplifier
      uses function back() defined in TokenList
      uses function linenr() defined in Token
      uses function fileIndex() defined in Token
   function getTemplateDeclarations(Token *,bool &) in line 77
      protection public
      40 lines of code
      2 parameters
      12 conditional paths
      uses function next() defined in Token
      uses function syntaxError(const Token *) defined in TemplateSimplifier
      uses function findClosingBracket() defined in Token
   function getTemplateInstantiations(Token *) in line 83
      protection public
      34 lines of code
      1 parameters
      8 conditional paths
      uses function next() defined in Token
      uses function findClosingBracket() defined in Token
      uses function previous() defined in Token
      uses function templateParameters(const Token *) defined in TemplateSimplifier
      uses function tokAt(int) defined in Token
   function getTemplateNamePosition(const Token *) in line 109
      protection public
      25 lines of code
      1 parameters
      7 conditional paths
      uses function tokAt(int) defined in Token
   function instantiateMatch(const Token *,const std::string &,std::size_t,const char) in line 101
      protection public
      24 lines of code
      4 parameters
      8 conditional paths
      uses variable name defined in setup.py
      uses function numberOfArguments(const Token *) defined in astutils.cpp
      uses function templateParameters(const Token *) defined in TemplateSimplifier
      uses function next() defined in Token
      uses function str(T &&) defined in Token
   function removeTemplate(Token *) in line 187
      66 lines of code
      1 parameters
      14 conditional paths
      uses function next() defined in Token
      uses function deleteThis() defined in Token
      uses function deleteNext(unsigned long) defined in Token
   function simplifyCalculations(Token *) in line 180
      protection public
      189 lines of code
      1 parameters
      42 conditional paths
      uses function next() defined in Token
      uses function str(T &&) defined in Token
      uses variable result defined in triage-report.py
      uses function simplifyNumericCalculations(Token *) defined in TemplateSimplifier
      uses function tokAt(int) defined in Token
   function simplifyNumericCalculations(Token *) in line 171
      protection public
      78 lines of code
      1 parameters
      14 conditional paths
      uses function tokAt(int) defined in Token
      uses function next() defined in Token
      uses function isNumber() defined in Token
      uses function strAt(int) defined in Token
      uses function str(T &&) defined in Token
      uses variable result defined in triage-report.py
      uses function previous() defined in Token
      uses variable e defined in extracttests.py
      uses function deleteNext(unsigned long) defined in Token
   function simplifyTemplateInstantiations(TokenList &,ErrorLogger *,const Settings *,const Token *,std::list< Token * > &,std::set< std::string > &) in line 144
      protection public
      179 lines of code
      6 parameters
      37 conditional paths
      uses function TemplateParametersInDeclaration(const Token *,std::vector< const Token * > &) defined in TemplateSimplifier
      uses function tokAt(int) defined in Token
      uses variable debugwarnings defined in Settings
      uses function getTemplateNamePosition(const Token *) defined in TemplateSimplifier
      uses function reportErr(const ErrorLogger::ErrorMessage &) defined in ErrorLogger
      uses enumvalue debug defined in Severity
      uses variable name defined in setup.py
      uses function strAt(int) defined in Token
      uses function simplifyCalculations(Token *) defined in TemplateSimplifier
      uses function front() defined in TokenList
      uses function validateToken(const Token *) defined in TokenList
      uses function str(T &&) defined in Token
      uses function previous() defined in Token
      uses function instantiateMatch(const Token *,const std::string &,std::size_t,const char) defined in TemplateSimplifier
      uses function next() defined in Token
      uses function templateParameters(const Token *) defined in TemplateSimplifier
      uses function expandTemplate(TokenList &,const Token *,const std::string &,std::vector< const Token * > &,const std::string &,std::vector< const Token * > &,std::list< Token * > &) defined in TemplateSimplifier
      uses variable typetok defined in findcasts.py
      uses function isUnsigned() defined in Token
      uses function isSigned() defined in Token
      uses function isLong() defined in Token
   function simplifyTemplates(TokenList &,ErrorLogger *,const Settings *,bool &) in line 159
      protection public
      65 lines of code
      4 parameters
      12 conditional paths
      uses function expandSpecialized(Token *) defined in TemplateSimplifier
      uses function front() defined in TokenList
      uses function getTemplateDeclarations(Token *,bool &) defined in TemplateSimplifier
      uses function next() defined in Token
      uses function getTemplateInstantiations(Token *) defined in TemplateSimplifier
      uses function useDefaultArgumentValues(const std::list< Token * > &,std::list< Token * > *) defined in TemplateSimplifier
      uses function simplifyTemplateInstantiations(TokenList &,ErrorLogger *,const Settings *,const Token *,std::list< Token * > &,std::set< std::string > &) defined in TemplateSimplifier
      uses function removeTemplate(Token *) defined in TemplateSimplifier
   function syntaxError(const Token *) in line 190
      4 lines of code
      1 parameters
      1 conditional paths
      uses enumvalue SYNTAX defined in InternalError
   function templateParameters(const Token *) in line 65
      protection public
      118 lines of code
      1 parameters
      34 conditional paths
      uses function str(T &&) defined in Token
      uses function next() defined in Token
      uses function tokAt(int) defined in Token
      uses function link(Token *) defined in Token
      uses function isNumber() defined in Token
      uses function tokType() defined in Token
      uses enumvalue eChar defined in Token
      uses function isName() defined in Token
      uses function syntaxError(const Token *) defined in TemplateSimplifier
   function TemplateParametersInDeclaration(const Token *,std::vector< const Token * > &) in line 129
      protection public
      11 lines of code
      2 parameters
      3 conditional paths
      uses function str(T &&) defined in Token
      uses function next() defined in Token
   function useDefaultArgumentValues(const std::list< Token * > &,std::list< Token * > *) in line 90
      protection public
      143 lines of code
      2 parameters
      34 conditional paths
      uses function next() defined in Token
      uses function templateParameters(const Token *) defined in TemplateSimplifier
      uses function findClosingBracket() defined in Token
      uses function str(T &&) defined in Token
      uses function previous() defined in Token
      uses function insertToken(const std::string &,const std::string &,bool) defined in Token
      uses function originalName() defined in Token
      uses function link(Token *) defined in Token
      uses function deleteThis() defined in Token
   function TemplateSimplifier() in line 42
      1 lines of code
      0 parameters
      1 conditional paths
   function ~TemplateSimplifier() in line 43
      1 lines of code
      0 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/lib/timer.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/lib/timer.h
module timer.h
   enumeration SHOWTIME_MODES in line 28
      protection public
   enumvalue SHOWTIME_NONE in line 29
      protection public
   enumvalue SHOWTIME_FILE in line 30
      protection public
   enumvalue SHOWTIME_SUMMARY in line 31
      protection public
   enumvalue SHOWTIME_TOP5 in line 33
      protection public
module TimerResultsIntf
   abstract class
   function AddResults(const std::string &,std::clock_t) in line 39
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function ~TimerResultsIntf() in line 37
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
module TimerResultsData
   function seconds() in line 51
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function TimerResultsData() in line 46
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   variable _clocks in line 43
      protection public
   variable _numberOfResults in line 44
      protection public
module TimerResults
   inherits from TimerResultsIntf
   function AddResults(const std::string &,std::clock_t) in line 63
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses variable _results defined in TimerResults
   function ShowResults(SHOWTIME_MODES) in line 62
      protection public
      25 lines of code
      1 parameters
      4 conditional paths
      uses enumvalue SHOWTIME_NONE defined in timer.h
      uses variable data defined in cert.py
      uses variable _results defined in TimerResults
      uses variable _clocks defined in TimerResultsData
      uses enumvalue SHOWTIME_TOP5 defined in timer.h
      uses function seconds() defined in TimerResultsData
   function TimerResults() in line 59
      protection public
      2 lines of code
      0 parameters
      1 conditional paths
   variable _results in line 66
module Timer
   function operator=(const Timer &) in line 76
      1 lines of code
      1 parameters
      1 conditional paths
   function Stop() in line 73
      protection public
      17 lines of code
      0 parameters
      4 conditional paths
      uses variable _showtimeMode defined in Timer
      uses enumvalue SHOWTIME_NONE defined in timer.h
      uses variable _stopped defined in Timer
      uses variable _start defined in Timer
      uses enumvalue SHOWTIME_FILE defined in timer.h
      uses variable _str defined in Timer
      uses variable _timerResults defined in Timer
      uses function AddResults(const std::string &,std::clock_t) defined in TimerResultsIntf
   function Timer(const std::string &,unsigned int,TimerResultsIntf *) in line 71
      protection public
      10 lines of code
      3 parameters
      2 conditional paths
      uses enumvalue SHOWTIME_NONE defined in timer.h
      uses variable _start defined in Timer
   function ~Timer() in line 72
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function Stop() defined in Timer
   variable _showtimeMode in line 81
   variable _start in line 80
   variable _stopped in line 82
   variable _str in line 78
   variable _timerResults in line 79
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/lib/token.cpp
module token.cpp
   function multiComparePercent(const Token *,const char *&,bool,unsigned int) in line 327
      protection public
      141 lines of code
      4 parameters
      37 conditional paths
      uses function isArithmeticalOp() defined in Token
      uses function str(T &&) defined in Token
      uses function varId() defined in Token
      uses function isName() defined in Token
      uses function isKeyword(bool) defined in Token
      uses function isAssignmentOp() defined in Token
      uses function isNumber() defined in Token
      uses function tokType() defined in Token
      uses enumvalue eChar defined in Token
      uses function isConstOp() defined in Token
      uses function isComparisonOp() defined in Token
      uses enumvalue eString defined in Token
      uses function isBoolean() defined in Token
      uses function isOp() defined in Token
      uses enumvalue eBitOp defined in Token
      uses enumvalue eLogicalOp defined in Token
   function astStringXml(const Token *,std::size_t,std::ostream &) in line 1195
      protection public
      27 lines of code
      3 parameters
      5 conditional paths
      uses function indent(const unsigned int,const unsigned int) defined in token.cpp
      uses variable out defined in triage-report.py
      uses function str(T &&) defined in Token
      uses function varId() defined in Token
      uses function variable(const Variable *) defined in Token
      uses function function(const Function *) defined in Token
      uses variable values defined in Token
      uses function astOperand1(Token *) defined in Token
      uses function astOperand2(Token *) defined in Token
   function indent(const unsigned int,const unsigned int) in line 1248
      protection public
      7 lines of code
      2 parameters
      1 conditional paths
   function getfunctionscope(const Scope *) in line 1415
      protection public
      6 lines of code
      1 parameters
      2 conditional paths
      uses variable s defined in extracttests.py
      uses enumvalue eFunction defined in Scope
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/lib/token.h
module Token
   function argumentType() in line 226
      protection public
      6 lines of code
      0 parameters
      2 conditional paths
      uses function Match(const Token *,const char,unsigned int) defined in Token
      uses function astParent() defined in Token
      uses variable valuetype defined in Token
   function assignProgressValues(Token *) in line 670
      protection public
      9 lines of code
      1 parameters
      3 conditional paths
      uses function next() defined in Token
      uses variable count defined in extracttests.py
   function astOperand1(Token *) in line 860
      protection public
      16 lines of code
      1 parameters
      5 conditional paths
      uses variable _astOperand1 defined in Token
      uses variable _astParent defined in Token
   function astOperand1() in line 863
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function astOperand2(Token *) in line 861
      protection public
      17 lines of code
      1 parameters
      5 conditional paths
      uses variable _astOperand2 defined in Token
      uses variable _astParent defined in Token
   function astOperand2() in line 866
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function astParent() in line 869
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function astString(const char *) in line 892
      protection public
      8 lines of code
      1 parameters
      3 conditional paths
      uses function astString(const char *) defined in Token
      uses variable xml defined in extracttests.py
      uses variable out defined in triage-report.py
   function astStringVerbose(const unsigned int,const unsigned int) in line 901
      protection public
      25 lines of code
      2 parameters
      5 conditional paths
      uses variable _astOperand2 defined in Token
      uses variable _astOperand1 defined in Token
      uses function astStringVerbose(const unsigned int,const unsigned int) defined in Token
   function astTop() in line 872
      protection public
      6 lines of code
      0 parameters
      2 conditional paths
      uses variable _astParent defined in Token
   function chrInFirstWord(const char *,char) in line 773
      12 lines of code
      2 parameters
      4 conditional paths
      uses function str() defined in Token
   function clearAst() in line 888
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function concatStr(std::string const &) in line 86
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses variable _str defined in Token
      uses function update_property_info() defined in Token
   function createMutualLinks(Token *,Token *) in line 645
      protection public
      8 lines of code
      2 parameters
      1 conditional paths
      uses function link(Token *) defined in Token
   function deleteNext(unsigned long) in line 95
      protection public
      14 lines of code
      1 parameters
      4 conditional paths
      uses variable _next defined in Token
      uses function next() defined in Token
      uses function previous() defined in Token
      uses variable tokensBack defined in Token
   function deleteThis() in line 544
      protection public
      56 lines of code
      0 parameters
      7 conditional paths
      uses variable _next defined in Token
      uses variable _str defined in Token
      uses variable _tokType defined in Token
      uses variable _flags defined in Token
      uses variable _varId defined in Token
      uses variable _fileIndex defined in Token
      uses variable _linenr defined in Token
      uses variable _link defined in Token
      uses variable _scope defined in Token
      uses variable _function defined in Token
      uses variable _variable defined in Token
      uses variable _type defined in Token
      uses variable _originalName defined in Token
      uses variable values defined in Token
      uses function link(Token *) defined in Token
      uses function deleteNext(unsigned long) defined in Token
      uses variable _previous defined in Token
      uses function str() defined in Token
   function eraseTokens(Token *,const Token *) in line 457
      protection public
      9 lines of code
      2 parameters
      3 conditional paths
      uses function next() defined in Token
      uses function deleteNext(unsigned long) defined in Token
   function expressionString() in line 903
      protection public
      51 lines of code
      0 parameters
      14 conditional paths
      uses function astOperand1(Token *) defined in Token
      uses function astOperand2(Token *) defined in Token
      uses function isUnaryPreOp() defined in Token
      uses function simpleMatch(const Token *,const char) defined in Token
      uses function Match(const Token *,const char,unsigned int) defined in Token
      uses function link(Token *) defined in Token
      uses function next() defined in Token
      uses function previous() defined in Token
      uses function str(T &&) defined in Token
   function fileIndex() in line 438
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function fileIndex(unsigned int) in line 441
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function findClosingBracket() in line 698
      protection public
      29 lines of code
      0 parameters
      12 conditional paths
      uses variable _str defined in Token
      uses function next() defined in Token
      uses function Match(const Token *,const char,unsigned int) defined in Token
      uses function link(Token *) defined in Token
      uses function str(T &&) defined in Token
   function findClosingBracket() in line 699
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
      uses function findClosingBracket() defined in Token
   function findmatch(const Token *,const char,unsigned int) in line 400
      protection public
      8 lines of code
      3 parameters
      3 conditional paths
      uses function next() defined in Token
      uses function Match(const Token *,const char,unsigned int) defined in Token
      uses function varId() defined in Token
   function findmatch(const Token *,const char,const Token *,unsigned int) in line 401
      protection public
      8 lines of code
      4 parameters
      3 conditional paths
      uses function next() defined in Token
      uses function Match(const Token *,const char,unsigned int) defined in Token
      uses function varId() defined in Token
   function findmatch(Token *,const char,unsigned int) in line 408
      protection public
      3 lines of code
      3 parameters
      1 conditional paths
   function findmatch(Token *,const char,const Token *,unsigned int) in line 411
      protection public
      3 lines of code
      4 parameters
      1 conditional paths
   function findsimplematch(const Token *,const char) in line 398
      protection public
      8 lines of code
      2 parameters
      3 conditional paths
      uses function next() defined in Token
      uses function simpleMatch(const Token *,const char) defined in Token
   function findsimplematch(const Token *,const char,const Token *) in line 399
      protection public
      8 lines of code
      3 parameters
      3 conditional paths
      uses function next() defined in Token
      uses function simpleMatch(const Token *,const char) defined in Token
   function findsimplematch(Token *,const char) in line 402
      protection public
      3 lines of code
      2 parameters
      1 conditional paths
   function findsimplematch(Token *,const char,const Token *) in line 405
      protection public
      3 lines of code
      3 parameters
      1 conditional paths
   function firstWordEquals(const char *,const char *) in line 766
      14 lines of code
      2 parameters
      4 conditional paths
      uses function str() defined in Token
   function flags() in line 289
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function flags(unsigned int) in line 292
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function function(const Function *) in line 589
      protection public
      7 lines of code
      1 parameters
      3 conditional paths
      uses function f(char) defined in test.cxx
   function function() in line 600
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function getCharAt(const Token *,std::size_t) in line 219
      protection public
      29 lines of code
      2 parameters
      6 conditional paths
      uses function str(T &&) defined in Token
   function getFlag(unsigned int) in line 828
      3 lines of code
      1 parameters
      1 conditional paths
   function getMaxValue(bool) in line 731
      protection public
      12 lines of code
      1 parameters
      4 conditional paths
      uses variable intvalue defined in ValueFlow::Value
   function getStrLength(const Token *) in line 200
      protection public
      27 lines of code
      1 parameters
      5 conditional paths
      uses variable _tokType defined in Token
      uses enumvalue eString defined in Token
      uses function str(T &&) defined in Token
   function getStrSize(const Token *) in line 209
      protection public
      12 lines of code
      1 parameters
      3 conditional paths
      uses function tokType() defined in Token
      uses enumvalue eString defined in Token
      uses function str() defined in Token
   function getValue(const MathLib::bigint) in line 722
      protection public
      8 lines of code
      1 parameters
      3 conditional paths
   function getValueGE(const MathLib::bigint,const Settings *) in line 745
      protection public
      20 lines of code
      2 parameters
      8 conditional paths
      uses variable values defined in Token
      uses variable inconclusive defined in ValueFlow::Value
      uses variable condition defined in ValueFlow::Value
      uses variable inconclusive defined in Settings
      uses function isEnabled(T &&) defined in Settings
   function getValueLE(const MathLib::bigint,const Settings *) in line 744
      protection public
      20 lines of code
      2 parameters
      8 conditional paths
      uses variable values defined in Token
      uses variable inconclusive defined in ValueFlow::Value
      uses variable condition defined in ValueFlow::Value
      uses variable inconclusive defined in Settings
      uses function isEnabled(T &&) defined in Settings
   function getValueTokenDeadPointer() in line 750
      protection public
      32 lines of code
      0 parameters
      10 conditional paths
      uses function scope() defined in Token
      uses variable values defined in Token
      uses function astOperand1(Token *) defined in Token
      uses function isName() defined in Token
      uses function variable(const Variable *) defined in Token
      uses function isStatic() defined in Variable
      uses function isReference() defined in Variable
      uses function scope() defined in Variable
      uses variable type defined in Scope
      uses enumvalue eUnion defined in Scope
      uses variable nestedIn defined in Scope
      uses variable s defined in extracttests.py
   function getValueTokenMaxStrLength() in line 747
      protection public
      16 lines of code
      0 parameters
      4 conditional paths
      uses variable values defined in Token
      uses enumvalue eString defined in Token
      uses function getStrLength(const Token *) defined in Token
   function getValueTokenMinStrSize() in line 748
      protection public
      16 lines of code
      0 parameters
      4 conditional paths
      uses variable values defined in Token
      uses enumvalue eString defined in Token
      uses function getStrSize(const Token *) defined in Token
   function insertToken(const std::string &,const std::string &,bool) in line 467
      protection public
      40 lines of code
      3 parameters
      8 conditional paths
      uses function previous() defined in Token
      uses variable _str defined in Token
      uses function Token() defined in Token
      uses variable tokensBack defined in Token
      uses function str(T &&) defined in Token
      uses function originalName() defined in Token
      uses variable _linenr defined in Token
      uses variable _fileIndex defined in Token
      uses variable _progressValue defined in Token
      uses function next() defined in Token
   function isArithmeticalOp() in line 275
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function isAssignmentOp() in line 281
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function isAttributeConst() in line 367
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function isAttributeConst(bool) in line 370
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function isAttributeConstructor() in line 337
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function isAttributeConstructor(bool) in line 340
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function isAttributeDestructor() in line 343
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function isAttributeDestructor(bool) in line 346
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function isAttributeNoreturn() in line 373
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function isAttributeNoreturn(bool) in line 376
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function isAttributeNothrow() in line 379
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function isAttributeNothrow(bool) in line 382
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function isAttributePure() in line 361
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function isAttributePure(bool) in line 364
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function isAttributeUnused() in line 349
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function isAttributeUnused(bool) in line 352
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
      uses function unused() defined in test.cxx
   function isAttributeUsed() in line 355
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function isAttributeUsed(bool) in line 358
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
      uses function unused() defined in test.cxx
   function isBoolean() in line 284
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function isCalculation() in line 886
      protection public
      35 lines of code
      0 parameters
      10 conditional paths
      uses function Match(const Token *,const char,unsigned int) defined in Token
      uses function astOperand2() defined in Token
      uses function str() defined in Token
      uses function isNumber() defined in Token
      uses function varId() defined in Token
      uses function astOperand1(Token *) defined in Token
   function isCast() in line 331
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function isCast(bool) in line 334
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function isComparisonOp() in line 278
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function isComplex() in line 391
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function isComplex(bool) in line 394
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function isConstOp() in line 265
      protection public
      6 lines of code
      0 parameters
      1 conditional paths
   function isExpandedMacro() in line 325
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function isExpandedMacro(bool) in line 328
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function isExtendedOp() in line 271
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function isKeyword(bool) in line 239
      protection public
      6 lines of code
      1 parameters
      3 conditional paths
   function isKeyword() in line 245
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function isLiteral() in line 253
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function isLong() in line 313
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function isLong(bool) in line 316
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function isName() in line 248
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   function isNumber() in line 257
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function isOp() in line 260
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
   function isOperatorKeyword() in line 385
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function isOperatorKeyword(bool) in line 388
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function isPointerCompare() in line 307
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function isPointerCompare(bool) in line 310
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function isSigned() in line 301
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function isSigned(bool) in line 304
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function isStandardType() in line 319
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function isStandardType(bool) in line 322
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function isUnaryPreOp() in line 287
      protection public
      18 lines of code
      0 parameters
      6 conditional paths
      uses function astOperand1() defined in Token
      uses function astOperand2() defined in Token
      uses function Match(const Token *,const char,unsigned int) defined in Token
      uses variable _previous defined in Token
      uses variable _next defined in Token
      uses variable _astOperand1 defined in Token
   function isUnsigned() in line 295
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function isUnsigned(bool) in line 298
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function isUpperCaseName() in line 252
      protection public
      10 lines of code
      0 parameters
      4 conditional paths
      uses function isName() defined in Token
      uses variable _str defined in Token
   function linenr() in line 431
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function linenr(unsigned int) in line 434
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function link(Token *) in line 551
      protection public
      5 lines of code
      1 parameters
      2 conditional paths
   function link() in line 566
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function linkAt(int) in line 116
      protection public
      8 lines of code
      1 parameters
      2 conditional paths
      uses function tokAt(int) defined in Token
      uses function link(Token *) defined in Token
   function linkAt(int) in line 117
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function Match(const Token *,const char,unsigned int) in line 191
      protection public
      86 lines of code
      3 parameters
      22 conditional paths
      uses function chrInFirstWord(const char *,char) defined in Token
      uses function str(T &&) defined in Token
      uses variable count defined in extracttests.py
      uses function firstWordEquals(const char *,const char *) defined in Token
      uses variable res defined in naming.py
      uses function multiCompare(const Token *,const char *,unsigned int) defined in Token
      uses function next() defined in Token
   function move(Token *,Token *,Token *) in line 662
      protection public
      20 lines of code
      3 parameters
      2 conditional paths
      uses function previous() defined in Token
      uses function next() defined in Token
      uses variable _progressValue defined in Token
   function multiCompare(const Token *,const char *,unsigned int) in line 429
      protection public
      58 lines of code
      3 parameters
      15 conditional paths
      uses function str(T &&) defined in Token
   function next() in line 445
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function next(Token *) in line 754
      3 lines of code
      1 parameters
      1 conditional paths
   function nextArgument() in line 677
      protection public
      12 lines of code
      0 parameters
      5 conditional paths
      uses function next() defined in Token
      uses function Match(const Token *,const char,unsigned int) defined in Token
      uses function link(Token *) defined in Token
   function nextArgumentBeforeCreateLinks2() in line 684
      protection public
      16 lines of code
      0 parameters
      7 conditional paths
      uses function next() defined in Token
      uses function Match(const Token *,const char,unsigned int) defined in Token
      uses function link(Token *) defined in Token
      uses function findClosingBracket() defined in Token
   function nextTemplateArgument() in line 691
      protection public
      12 lines of code
      0 parameters
      5 conditional paths
      uses function next() defined in Token
      uses function Match(const Token *,const char,unsigned int) defined in Token
      uses function link(Token *) defined in Token
   function operator=(const Token &) in line 59
      1 lines of code
      1 parameters
      1 conditional paths
   function originalName() in line 704
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function originalName(T &&) in line 712
      protection public
      6 lines of code
      1 parameters
      2 conditional paths
      uses variable name defined in setup.py
   function previous() in line 469
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function previous(Token *) in line 757
      3 lines of code
      1 parameters
      1 conditional paths
   function printAst(bool,bool,std::ostream &) in line 905
      protection public
      24 lines of code
      3 parameters
      1 conditional paths
   function printOut(const char *) in line 491
      protection public
      6 lines of code
      1 parameters
      2 conditional paths
      uses function stringifyList(bool,bool,bool,bool,bool,const std::vector< std::string > *,const Token *) defined in Token
   function printOut(const char *,const std::vector< std::string > &) in line 501
      protection public
      6 lines of code
      2 parameters
      2 conditional paths
      uses function stringifyList(bool,bool,bool,bool,bool,const std::vector< std::string > *,const Token *) defined in Token
   function printValueFlow(bool,std::ostream &) in line 907
      protection public
      55 lines of code
      2 parameters
      19 conditional paths
      uses variable line defined in triage-report.py
      uses variable xml defined in extracttests.py
      uses variable out defined in triage-report.py
      uses function next() defined in Token
      uses variable values defined in Token
      uses function linenr() defined in Token
      uses function str(T &&) defined in Token
   function progressValue() in line 665
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function replace(Token *,Token *,Token *) in line 510
      protection public
      32 lines of code
      3 parameters
      8 conditional paths
      uses function previous() defined in Token
      uses function next() defined in Token
      uses variable tokensBack defined in Token
      uses variable _progressValue defined in Token
   function scope(const Scope *) in line 574
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
      uses variable s defined in extracttests.py
   function scope() in line 581
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function setFlag(unsigned int,bool) in line 837
      3 lines of code
      2 parameters
      1 conditional paths
   function setValueType(ValueType *) in line 224
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses variable valuetype defined in Token
   function simpleMatch(const Token *,const char) in line 146
      protection public
      26 lines of code
      2 parameters
      7 conditional paths
      uses function next() defined in Token
      uses variable _str defined in Token
   function str(T &&) in line 75
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses variable s defined in extracttests.py
   function str() in line 88
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function strAt(int) in line 125
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function tokAt(int) defined in Token
      uses variable _str defined in Token
   function stringify(std::ostream &,bool,bool,bool) in line 519
      protection public
      31 lines of code
      4 parameters
      12 conditional paths
      uses function isUnsigned() defined in Token
      uses function isSigned() defined in Token
      uses function isComplex() defined in Token
      uses function isLong() defined in Token
      uses variable _tokType defined in Token
      uses enumvalue eString defined in Token
      uses enumvalue eChar defined in Token
      uses function isExpandedMacro() defined in Token
      uses variable _str defined in Token
      uses variable _varId defined in Token
   function stringifyList(bool,bool,bool,bool,bool,const std::vector< std::string > *,const Token *) in line 532
      protection public
      57 lines of code
      7 parameters
      14 conditional paths
      uses variable _linenr defined in Token
      uses variable _fileIndex defined in Token
      uses function next() defined in Token
      uses function linenr() defined in Token
   function stringifyList(const Token *,bool) in line 533
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses function stringifyList(bool,bool,bool,bool,bool,const std::vector< std::string > *,const Token *) defined in Token
   function stringifyList(bool) in line 534
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function stringifyList(bool,bool,bool,bool,bool,const std::vector< std::string > *,const Token *) defined in Token
   function strValue() in line 653
      protection public
      21 lines of code
      0 parameters
      7 conditional paths
      uses variable _tokType defined in Token
      uses enumvalue eString defined in Token
      uses variable _str defined in Token
   function swapWithNext() in line 100
      protection public
      16 lines of code
      0 parameters
      2 conditional paths
      uses variable _next defined in Token
      uses variable _str defined in Token
      uses variable _tokType defined in Token
      uses variable _flags defined in Token
      uses variable _varId defined in Token
      uses variable _fileIndex defined in Token
      uses variable _link defined in Token
      uses variable _scope defined in Token
      uses variable _function defined in Token
      uses variable _originalName defined in Token
      uses variable values defined in Token
      uses variable _progressValue defined in Token
   function tokAt(int) in line 107
      protection public
      13 lines of code
      1 parameters
      3 conditional paths
      uses function next() defined in Token
      uses function previous() defined in Token
   function tokAt(int) in line 108
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function tokType() in line 233
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function tokType(Token::Type) in line 236
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function type(const ::Type *) in line 627
      protection public
      7 lines of code
      1 parameters
      3 conditional paths
   function type() in line 638
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function update_property_info() in line 843
      52 lines of code
      0 parameters
      17 conditional paths
      uses variable _str defined in Token
      uses variable _tokType defined in Token
      uses enumvalue eBoolean defined in Token
      uses variable _varId defined in Token
      uses enumvalue eVariable defined in Token
      uses enumvalue eFunction defined in Token
      uses enumvalue eType defined in Token
      uses enumvalue eKeyword defined in Token
      uses enumvalue eName defined in Token
      uses enumvalue eNumber defined in Token
      uses enumvalue eString defined in Token
      uses enumvalue eChar defined in Token
      uses enumvalue eAssignmentOp defined in Token
      uses enumvalue eExtendedOp defined in Token
      uses enumvalue eArithmeticalOp defined in Token
      uses enumvalue eBitOp defined in Token
      uses enumvalue eLogicalOp defined in Token
      uses variable _link defined in Token
      uses enumvalue eComparisonOp defined in Token
      uses enumvalue eIncDecOp defined in Token
      uses enumvalue eBracket defined in Token
      uses enumvalue eOther defined in Token
      uses enumvalue eNone defined in Token
      uses function update_property_isStandardType() defined in Token
   function update_property_isStandardType() in line 846
      12 lines of code
      0 parameters
      3 conditional paths
      uses function isStandardType() defined in Token
      uses variable _str defined in Token
      uses variable _tokType defined in Token
      uses enumvalue eType defined in Token
   function valueType() in line 221
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function variable(const Variable *) in line 608
      protection public
      7 lines of code
      1 parameters
      3 conditional paths
   function variable() in line 619
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function varId() in line 474
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function varId(unsigned int) in line 477
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses function replace(char *,char,char) defined in times.c
   function Token() in line 57
      1 lines of code
      0 parameters
      1 conditional paths
   function Token(const Token &) in line 58
      1 lines of code
      1 parameters
      1 conditional paths
   function Token(Token **) in line 71
      protection public
      20 lines of code
      1 parameters
      1 conditional paths
   function ~Token() in line 72
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
      uses variable _originalName defined in Token
      uses variable valuetype defined in Token
   variable @15 in line 787
   variable _astOperand1 in line 849
   variable _astOperand2 in line 850
   variable _astParent in line 851
   variable _fileIndex in line 790
   variable _flags in line 821
   variable _function in line 784
      protection public
   variable _linenr in line 791
   variable _link in line 779
   variable _next in line 777
   variable _originalName in line 854
   variable _previous in line 778
   variable _progressValue in line 797
   variable _scope in line 782
   variable _str in line 775
   variable _tokType in line 799
   variable _type in line 786
      protection public
   variable _variable in line 785
      protection public
   variable _varId in line 789
   variable tokensBack in line 54
   variable values in line 720
      protection public
   variable valuetype in line 857
module Token::@14
   variable _function in line 784
      protection public
   variable _type in line 786
      protection public
   variable _variable in line 785
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/lib/tokenize.cpp
module tokenize.cpp
   function isClassStructUnionEnumStart(const Token *) in line 91
      protection public
      9 lines of code
      1 parameters
      3 conditional paths
      uses function previous() defined in Token
   function splitDefinitionFromTypedef(Token *) in line 426
      protection public
      68 lines of code
      1 parameters
      11 conditional paths
      uses variable name defined in setup.py
      uses function next() defined in Token
      uses function str(T &&) defined in Token
      uses function deleteNext(unsigned long) defined in Token
      uses function strAt(int) defined in Token
      uses function linkAt(int) defined in Token
      uses variable count defined in extracttests.py
      uses function insertToken(const std::string &,const std::string &,bool) defined in Token
      uses function tokAt(int) defined in Token
      uses function link(Token *) defined in Token
      uses function previous() defined in Token
      uses function deleteThis() defined in Token
   function skipTernaryOp(Token *) in line 2224
      protection public
      22 lines of code
      1 parameters
      8 conditional paths
      uses function next() defined in Token
      uses function str(T &&) defined in Token
      uses function link(Token *) defined in Token
   function setVarIdParseDeclaration(const Token **,const std::map< std::string, unsigned int > &,bool,bool,bool) in line 2400
      protection public
      75 lines of code
      5 parameters
      23 conditional paths
      uses function isName() defined in Token
      uses function str(T &&) defined in Token
      uses function previous() defined in Token
      uses function next() defined in Token
      uses function findClosingBracket() defined in Token
      uses function link(Token *) defined in Token
      uses function tokAt(int) defined in Token
   function setVarIdStructMembers(Token **,std::map< unsigned int, std::map< std::string, unsigned int > > &,unsigned int *) in line 2477
      protection public
      27 lines of code
      3 parameters
      5 conditional paths
      uses function next() defined in Token
      uses function varId() defined in Token
      uses function tokAt(int) defined in Token
      uses function str(T &&) defined in Token
      uses variable _varId defined in Tokenizer
   function setVarIdClassFunction(const std::string &,Token *const,const Token *const,const std::map< std::string, unsigned int > &,std::map< unsigned int, std::map< std::string, unsigned int > > &,unsigned int *) in line 2579
      protection public
      24 lines of code
      6 parameters
      7 conditional paths
      uses function next() defined in Token
      uses function setVarIdStructMembers(Token **,std::map< unsigned int, std::map< std::string, unsigned int > > &,unsigned int *) defined in tokenize.cpp
      uses variable _varId defined in Tokenizer
   function linkBrackets(Tokenizer *,std::stack< const Token * > &,std::stack< Token * > &,Token *,char,char) in line 2989
      protection public
      19 lines of code
      6 parameters
      5 conditional paths
      uses function str(T &&) defined in Token
      uses function syntaxError(const Token *) defined in Tokenizer
   function isNumberOneOf(const std::string &,const MathLib::bigint &,const char *) in line 8185
      protection public
      11 lines of code
      3 parameters
      5 conditional paths
      uses variable s defined in extracttests.py
   function operatorEnd(const Token *) in line 9753
      protection public
      30 lines of code
      1 parameters
      9 conditional paths
      uses function str(T &&) defined in Token
      uses function next() defined in Token
      uses function link(Token *) defined in Token
      uses function isUpperCaseName() defined in Token
module @193::scopeStackEntryType
   variable isExecutable in line 50
      protection public
   variable startVarid in line 51
      protection public
module Space
   function Space() in line 420
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   variable classEnd in line 422
      protection public
   variable className in line 421
      protection public
   variable isNamespace in line 423
      protection public
module EnumValue
   function operator=(const EnumValue &) in line 7289
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses variable name defined in setup.py
      uses variable name defined in EnumValue
      uses variable value defined in EnumValue
      uses variable start defined in EnumValue
      uses variable end defined in EnumValue
   function simplify(const std::map< std::string, EnumValue > &) in line 7303
      protection public
      31 lines of code
      1 parameters
      9 conditional paths
      uses function next() defined in Token
      uses variable value defined in EnumValue
      uses function str(T &&) defined in Token
      uses variable start defined in EnumValue
      uses variable end defined in EnumValue
      uses function deleteThis() defined in Token
   function EnumValue() in line 7280
      protection public
      6 lines of code
      0 parameters
      1 conditional paths
   function EnumValue(const EnumValue &) in line 7286
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function EnumValue(Token *,Token *,Token *,Token *) in line 7296
      protection public
      6 lines of code
      4 parameters
      1 conditional paths
   variable end in line 7338
      protection public
   variable name in line 7335
      protection public
   variable start in line 7337
      protection public
   variable value in line 7336
      protection public
module @193::triplet
   variable mbcs in line 9564
      protection public
   variable tchar in line 9564
      protection public
   variable unicode in line 9564
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/lib/tokenize.h
module Tokenizer
   function arraySize() in line 207
      protection public
      52 lines of code
      0 parameters
      13 conditional paths
      uses variable list defined in Tokenizer
      uses function front() defined in TokenList
      uses function next() defined in Token
      uses function tokAt(int) defined in Token
      uses function deleteNext(unsigned long) defined in Token
      uses function linkAt(int) defined in Token
      uses function link(Token *) defined in Token
   function checkForEnumsWithTypedef() in line 502
      protection public
      12 lines of code
      0 parameters
      4 conditional paths
      uses variable list defined in Tokenizer
      uses function front() defined in TokenList
      uses function next() defined in Token
      uses function syntaxError(const Token *) defined in Tokenizer
   function codeWithTemplates() in line 742
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function combineOperators() in line 484
      protection public
      75 lines of code
      0 parameters
      19 conditional paths
      uses function isCPP() defined in Tokenizer
      uses variable list defined in Tokenizer
      uses function front() defined in TokenList
      uses function next() defined in Token
      uses function tokAt(int) defined in Token
      uses function deleteThis() defined in Token
      uses function deleteNext(unsigned long) defined in Token
      uses function str(T &&) defined in Token
      uses function previous() defined in Token
   function combineStrings() in line 486
      protection public
      29 lines of code
      0 parameters
      6 conditional paths
      uses variable list defined in Tokenizer
      uses function front() defined in TokenList
      uses function next() defined in Token
      uses enumvalue eString defined in Token
      uses function simplifyString(const std::string &) defined in Tokenizer
   function concatenateDoubleSharp() in line 488
      protection public
      9 lines of code
      0 parameters
      3 conditional paths
      uses variable list defined in Tokenizer
      uses function front() defined in TokenList
      uses function next() defined in Token
   function concatenateNegativeNumberAndAnyPositive() in line 494
      protection public
      15 lines of code
      0 parameters
      5 conditional paths
      uses variable list defined in Tokenizer
      uses function front() defined in TokenList
      uses function next() defined in Token
      uses enumvalue eIncDecOp defined in Token
   function copyTokens(Token *,const Token *,const Token *,bool) in line 794
      protection public
      34 lines of code
      4 parameters
      6 conditional paths
      uses function linenr() defined in Token
      uses function fileIndex() defined in Token
      uses function next() defined in Token
      uses function insertToken(const std::string &,const std::string &,bool) defined in Token
      uses function tokType() defined in Token
      uses function flags() defined in Token
      uses function varId() defined in Token
      uses function link(Token *) defined in Token
   function cppcheckError(const Token *) in line 578
      5 lines of code
      1 parameters
      1 conditional paths
      uses function printDebugOutput(unsigned int) defined in Tokenizer
      uses enumvalue INTERNAL defined in InternalError
   function createLinks() in line 583
      33 lines of code
      0 parameters
      6 conditional paths
      uses variable list defined in Tokenizer
      uses function front() defined in TokenList
      uses function next() defined in Token
      uses function syntaxError(const Token *) defined in Tokenizer
   function createLinks2() in line 588
      47 lines of code
      0 parameters
      17 conditional paths
      uses function isC() defined in Tokenizer
      uses variable list defined in Tokenizer
      uses function front() defined in TokenList
      uses function next() defined in Token
      uses function previous() defined in Token
      uses function tokAt(int) defined in Token
      uses function str(T &&) defined in Token
   function createSymbolDatabase() in line 755
      protection public
      6 lines of code
      0 parameters
      2 conditional paths
      uses variable _symbolDatabase defined in Tokenizer
      uses variable _settings defined in Tokenizer
      uses variable _errorLogger defined in Tokenizer
      uses function validate() defined in SymbolDatabase
   function createTokens(std::istream &,const char) in line 74
      protection public
      8 lines of code
      2 parameters
      1 conditional paths
      uses variable _settings defined in Tokenizer
      uses variable list defined in Tokenizer
      uses function createTokens(std::istream &,const std::string &) defined in TokenList
      uses variable code defined in extracttests.py
      uses variable basePaths defined in Settings
   function deleteInvalidTypedef(Token *) in line 767
      protection public
      26 lines of code
      1 parameters
      6 conditional paths
      uses function next() defined in Token
      uses function str(T &&) defined in Token
      uses function deleteNext(unsigned long) defined in Token
      uses function linkAt(int) defined in Token
      uses variable list defined in Tokenizer
      uses function front() defined in TokenList
      uses function previous() defined in Token
      uses function deleteThis() defined in Token
   function deleteSymbolDatabase() in line 756
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
      uses variable _symbolDatabase defined in Tokenizer
   function dump(std::ostream &) in line 765
      protection public
      62 lines of code
      1 parameters
      22 conditional paths
      uses variable out defined in triage-report.py
      uses variable list defined in Tokenizer
      uses function front() defined in TokenList
      uses function next() defined in Token
      uses function file(const Token *) defined in TokenList
      uses enumvalue eString defined in Token
      uses enumvalue eChar defined in Token
      uses enumvalue eLogicalOp defined in Token
      uses variable _symbolDatabase defined in Tokenizer
      uses function printXml(std::ostream &) defined in SymbolDatabase
      uses function printValueFlow(bool,std::ostream &) defined in Token
   function duplicateDefinition(Token **,const Token *) in line 704
      80 lines of code
      2 parameters
      22 conditional paths
      uses function next() defined in Token
      uses function str(T &&) defined in Token
      uses function link(Token *) defined in Token
      uses function previous() defined in Token
      uses function tokAt(int) defined in Token
      uses function duplicateEnumError(const Token *,const Token *,const std::string &) defined in Tokenizer
      uses variable name defined in setup.py
      uses function isName() defined in Token
   function duplicateEnumError(const Token *,const Token *,const std::string &) in line 715
      13 lines of code
      3 parameters
      2 conditional paths
      uses variable _settings defined in Tokenizer
      uses function isEnabled(T &&) defined in Settings
      uses function str(T &&) defined in Token
      uses function reportError(const Token *,const Severity::SeverityType,const std::string &,const std::string &,bool) defined in Tokenizer
      uses enumvalue style defined in Severity
   function duplicateTypedef(Token **,const Token *,const Token *,const std::set< std::string > &) in line 717
      138 lines of code
      4 parameters
      41 conditional paths
      uses function next() defined in Token
      uses function str(T &&) defined in Token
      uses function link(Token *) defined in Token
      uses function syntaxError(const Token *) defined in Tokenizer
      uses function previous() defined in Token
      uses function linkAt(int) defined in Token
      uses function tokAt(int) defined in Token
      uses function duplicateTypedefError(const Token *,const Token *,const std::string &) defined in Tokenizer
      uses variable name defined in setup.py
      uses function strAt(int) defined in Token
      uses function isCPP() defined in Tokenizer
   function duplicateTypedefError(const Token *,const Token *,const std::string &) in line 718
      13 lines of code
      3 parameters
      2 conditional paths
      uses variable _settings defined in Tokenizer
      uses function isEnabled(T &&) defined in Settings
      uses variable inconclusive defined in Settings
      uses function str(T &&) defined in Token
      uses function reportError(const Token *,const Severity::SeverityType,const std::string &,const std::string &,bool) defined in Tokenizer
      uses enumvalue style defined in Severity
   function elseif() in line 408
      protection public
      21 lines of code
      0 parameters
      7 conditional paths
      uses variable list defined in Tokenizer
      uses function front() defined in TokenList
      uses function next() defined in Token
   function eraseDeadCode(Token *,const Token *) in line 151
      protection public
      187 lines of code
      2 parameters
      49 conditional paths
      uses function tokAt(int) defined in Token
      uses function next() defined in Token
      uses function str(T &&) defined in Token
      uses function deleteNext(unsigned long) defined in Token
      uses function linkAt(int) defined in Token
      uses function link(Token *) defined in Token
      uses function previous() defined in Token
      uses function strAt(int) defined in Token
   function fillTypeSizes() in line 482
      protection public
      16 lines of code
      0 parameters
      1 conditional paths
      uses variable _typeSize defined in Tokenizer
      uses variable _settings defined in Tokenizer
      uses variable sizeof_bool defined in Settings
      uses variable sizeof_short defined in Settings
      uses variable sizeof_int defined in Settings
      uses variable sizeof_long defined in Settings
      uses variable sizeof_float defined in Settings
      uses variable sizeof_double defined in Settings
      uses variable sizeof_wchar_t defined in Settings
      uses variable sizeof_size_t defined in Settings
      uses variable sizeof_pointer defined in Settings
   function findComplicatedSyntaxErrorsInTemplates() in line 504
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
      uses function validate() defined in Tokenizer
      uses variable list defined in Tokenizer
      uses function front() defined in TokenList
   function getErrorMessages(ErrorLogger *,const Settings *) in line 177
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
      uses function duplicateTypedefError(const Token *,const Token *,const std::string &) defined in Tokenizer
      uses function duplicateEnumError(const Token *,const Token *,const std::string &) defined in Tokenizer
   function getSymbolDatabase() in line 752
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses variable out defined in triage-report.py
   function initVar(Token *) in line 260
      protection public
      44 lines of code
      1 parameters
      8 conditional paths
      uses function strAt(int) defined in Token
      uses function next() defined in Token
      uses function isStandardType() defined in Token
      uses function str(T &&) defined in Token
      uses function tokAt(int) defined in Token
      uses function isNumber() defined in Token
      uses function varId() defined in Token
      uses function insertToken(const std::string &,const std::string &,bool) defined in Token
      uses function link(Token *) defined in Token
      uses function deleteThis() defined in Token
   function isC() in line 57
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function isCPP() in line 62
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses function simplifyMulAndParens() defined in TestTokenizer
      uses function simplifyCalculations() defined in TestTokenizer
      uses function arraySize() defined in TestTokenizer
      uses function simplifyCaseRange() defined in TestTokenizer
      uses function removeMacroInClassDef() defined in TestTokenizer
      uses function removeMacroInVarDecl() defined in TestTokenizer
      uses function removeRedundantAssignment() defined in TestTokenizer
      uses function sizeofAddParentheses() defined in TestTokenizer
      uses function simplifyInitVar() defined in TestTokenizer
      uses function simplifyStdType() defined in TestTokenizer
      uses function simplifyStaticConst() defined in TestTokenizer
      uses function simplifyCAlternativeTokens() defined in TestTokenizer
      uses function simplifyKnownVariables(const char) defined in TestTokenizer
      uses function simplifyStructDecl() defined in TestTokenizer
      uses function simplifyFunctionParameters() defined in TestTokenizer
      uses function combineOperators() defined in TestTokenizer
      uses function simplifyFileAndLineMacro() defined in TestTokenizer
      uses function simplifyNull() defined in TestTokenizer
      uses function simplifyExternC() defined in TestTokenizer
      uses function simplifyRoundCurlyParentheses() defined in TestTokenizer
      uses function simplifySQL() defined in TestTokenizer
      uses function simplifyMathFunctions() defined in TestTokenizer
      uses function simplifyMathExpressions() defined in TestTokenizer
      uses function simplifyString() defined in TestTokenizer
      uses function simplifyPointerToStandardType() defined in TestTokenizer
      uses function createLinks() defined in TestTokenizer
      uses function simplifyKeyword() defined in TestTokenizer
      uses function simplifyAsm2() defined in TestTokenizer
      uses function simplifyNamespaceStd() defined in TestTokenizer
      uses function simplifyDeprecated() defined in TestTokenizer
      uses function prepareTernaryOpForAST() defined in TestTokenizer
      uses variable name defined in setup.py
      uses function reportError((null),(null),(null)) defined in cert.py
      uses variable msg defined in findcasts.py
   function isFunctionHead(const Token *,const std::string &) in line 530
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function isFunctionHead(const Token *,const std::string &,bool) in line 541
      27 lines of code
      3 parameters
      10 conditional paths
      uses function str(T &&) defined in Token
      uses function link(Token *) defined in Token
      uses function next() defined in Token
      uses function isName() defined in Token
      uses function isUpperCaseName() defined in Token
      uses function linkAt(int) defined in Token
      uses function tokAt(int) defined in Token
   function isFunctionParameterPassedByValue(const Token *) in line 172
      protection public
      65 lines of code
      1 parameters
      20 conditional paths
      uses function isC() defined in Tokenizer
      uses function previous() defined in Token
      uses function str(T &&) defined in Token
      uses function link(Token *) defined in Token
      uses function tokAt(int) defined in Token
      uses variable functionName defined in extracttests.py
      uses function tokens() defined in Tokenizer
      uses function next() defined in Token
   function isOneNumber(const std::string &) in line 808
      protection public
      6 lines of code
      1 parameters
      2 conditional paths
      uses variable s defined in extracttests.py
   function IsScopeNoReturn(const Token *,bool *) in line 72
      protection public
      31 lines of code
      2 parameters
      6 conditional paths
      uses variable _settings defined in Tokenizer
      uses variable library defined in Settings
      uses function isScopeNoReturn(const Token *,std::string *) defined in Library
      uses variable checkLibrary defined in Settings
      uses function isEnabled(T &&) defined in Settings
      uses function tokAt(int) defined in Token
      uses function linkAt(int) defined in Token
      uses function previous() defined in Token
      uses function isName() defined in Token
      uses function function(const Function *) defined in Token
      uses enumvalue eGlobal defined in Scope
      uses function reportError(const Token *,const Severity::SeverityType,const std::string &,const std::string &,bool) defined in Tokenizer
      uses enumvalue information defined in Severity
   function isTwoNumber(const std::string &) in line 815
      protection public
      6 lines of code
      1 parameters
      2 conditional paths
      uses variable s defined in extracttests.py
   function isZeroNumber(const std::string &) in line 801
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable s defined in extracttests.py
   function operator=(const Tokenizer &) in line 830
      1 lines of code
      1 parameters
      1 conditional paths
   function prepareTernaryOpForAST() in line 699
      34 lines of code
      0 parameters
      11 conditional paths
      uses variable list defined in Tokenizer
      uses function front() defined in TokenList
      uses function next() defined in Token
      uses function link(Token *) defined in Token
      uses function str(T &&) defined in Token
      uses function insertToken(const std::string &,const std::string &,bool) defined in Token
      uses function previous() defined in Token
   function printDebugOutput(unsigned int) in line 763
      protection public
      49 lines of code
      1 parameters
      13 conditional paths
      uses variable _settings defined in Tokenizer
      uses variable debug defined in Settings
      uses variable debugnormal defined in Settings
      uses variable list defined in Tokenizer
      uses function front() defined in TokenList
      uses function printOut(const char *) defined in Token
      uses function getFiles() defined in TokenList
      uses variable xml defined in Settings
      uses variable _symbolDatabase defined in Tokenizer
      uses function printXml(std::ostream &) defined in SymbolDatabase
      uses variable verbose defined in Settings
      uses function printOut(const char *) defined in SymbolDatabase
      uses function printAst(bool,bool,std::ostream &) defined in Token
      uses function printValueFlow(bool,std::ostream &) defined in Token
      uses variable debugwarnings defined in Settings
      uses function printUnknownTypes() defined in Tokenizer
      uses function getVariableListSize() defined in SymbolDatabase
      uses function getVariableFromVarId(std::size_t) defined in SymbolDatabase
      uses variable typetok defined in findcasts.py
      uses function typeStartToken() defined in Variable
      uses function typeEndToken() defined in Variable
      uses function reportError(const Token *,const Severity::SeverityType,const std::string &,const std::string &,bool) defined in Tokenizer
      uses enumvalue debug defined in Severity
      uses function name() defined in Variable
      uses function str(T &&) defined in Token
      uses function linenr() defined in Token
   function printUnknownTypes() in line 737
      76 lines of code
      0 parameters
      16 conditional paths
      uses variable _symbolDatabase defined in Tokenizer
      uses variable _varId defined in Tokenizer
      uses function getVariableFromVarId(std::size_t) defined in SymbolDatabase
      uses function type() defined in Variable
      uses function typeStartToken() defined in Variable
      uses function isStandardType() defined in Token
      uses variable name defined in setup.py
      uses function typeEndToken() defined in Variable
      uses function str(T &&) defined in Token
      uses function next() defined in Token
      uses variable count defined in extracttests.py
      uses function reportError(const Token *,const Severity::SeverityType,const std::string &,const std::string &,bool) defined in Tokenizer
      uses enumvalue debug defined in Severity
   function processFunc(Token *,bool) in line 832
      59 lines of code
      2 parameters
      18 conditional paths
      uses function next() defined in Token
      uses function str(T &&) defined in Token
      uses function linkAt(int) defined in Token
      uses function tokAt(int) defined in Token
      uses function link(Token *) defined in Token
      uses function syntaxError(const Token *) defined in Tokenizer
   function removeMacroInClassDef() in line 224
      protection public
      12 lines of code
      0 parameters
      5 conditional paths
      uses variable list defined in Tokenizer
      uses function front() defined in TokenList
      uses function next() defined in Token
   function removeMacroInVarDecl() in line 227
      protection public
      27 lines of code
      0 parameters
      9 conditional paths
      uses variable list defined in Tokenizer
      uses function front() defined in TokenList
      uses function next() defined in Token
      uses function str(T &&) defined in Token
      uses function isUpperCaseName() defined in Token
      uses function isStandardType() defined in Token
   function removeMacrosInGlobalScope() in line 218
      protection public
      61 lines of code
      0 parameters
      17 conditional paths
      uses variable list defined in Tokenizer
      uses function front() defined in TokenList
      uses function next() defined in Token
      uses function str(T &&) defined in Token
      uses function link(Token *) defined in Token
      uses function isFunctionHead(const Token *,const std::string &) defined in Tokenizer
      uses function tokAt(int) defined in Token
      uses function strAt(int) defined in Token
      uses function previous() defined in Token
      uses function isName() defined in Token
   function removeRedundantAssignment() in line 230
      protection public
      52 lines of code
      0 parameters
      15 conditional paths
      uses variable list defined in Tokenizer
      uses function front() defined in TokenList
      uses function next() defined in Token
      uses function startOfExecutableScope(const Token *) defined in Tokenizer
      uses function previous() defined in Token
      uses function link(Token *) defined in Token
   function removeRedundantConditions() in line 421
      protection public
      65 lines of code
      0 parameters
      6 conditional paths
      uses variable list defined in Tokenizer
      uses function front() defined in TokenList
      uses function next() defined in Token
      uses function linkAt(int) defined in Token
      uses function deleteNext(unsigned long) defined in Token
      uses function eraseDeadCode(Token *,const Token *) defined in Tokenizer
      uses function deleteThis() defined in Token
      uses function link(Token *) defined in Token
      uses function previous() defined in Token
   function removeRedundantFor() in line 427
      protection public
      83 lines of code
      0 parameters
      16 conditional paths
      uses variable list defined in Tokenizer
      uses function front() defined in TokenList
      uses function next() defined in Token
      uses function tokAt(int) defined in Token
      uses function isName() defined in Token
      uses function str(T &&) defined in Token
      uses function varId() defined in Token
      uses function strAt(int) defined in Token
      uses function linkAt(int) defined in Token
      uses function previous() defined in Token
      uses function link(Token *) defined in Token
      uses function deleteNext(unsigned long) defined in Token
      uses function deleteThis() defined in Token
      uses function insertToken(const std::string &,const std::string &,bool) defined in Token
   function removeRedundantSemicolons() in line 433
      protection public
      18 lines of code
      0 parameters
      6 conditional paths
      uses variable list defined in Tokenizer
      uses function front() defined in TokenList
      uses function next() defined in Token
   function removeUnnecessaryQualification() in line 647
      69 lines of code
      0 parameters
      20 conditional paths
      uses function isC() defined in Tokenizer
      uses variable list defined in Tokenizer
      uses function front() defined in TokenList
      uses function next() defined in Token
      uses variable isNamespace defined in Space
      uses variable className defined in Space
      uses variable classEnd defined in Space
      uses function link(Token *) defined in Token
      uses function tokAt(int) defined in Token
      uses function str(T &&) defined in Token
   function reportError(const Token *,const Severity::SeverityType,const std::string &,const std::string &,bool) in line 709
      5 lines of code
      5 parameters
      1 conditional paths
      uses variable msg defined in findcasts.py
   function reportError(const std::list< const Token * > &,Severity::SeverityType,const std::string &,const std::string &,bool) in line 710
      8 lines of code
      5 parameters
      2 conditional paths
      uses variable list defined in Tokenizer
      uses variable msg defined in findcasts.py
      uses variable _errorLogger defined in Tokenizer
      uses function reportErr(const ErrorLogger::ErrorMessage &) defined in ErrorLogger
   function setPodTypes() in line 835
      20 lines of code
      0 parameters
      7 conditional paths
      uses variable _settings defined in Tokenizer
      uses variable list defined in Tokenizer
      uses function front() defined in TokenList
      uses function next() defined in Token
      uses variable library defined in Settings
      uses function podtype(const std::string &) defined in Library
      uses function previous() defined in Token
      uses function isName() defined in Token
      uses function isStandardType() defined in Token
   function setSettings(const Settings *) in line 747
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function setTimerResults(TimerResults *) in line 52
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function setVarId() in line 113
      protection public
      375 lines of code
      0 parameters
      100 conditional paths
      uses variable list defined in Tokenizer
      uses function front() defined in TokenList
      uses function next() defined in Token
      uses function setPodTypes() defined in Tokenizer
      uses function isC() defined in Tokenizer
      uses variable _varId defined in Tokenizer
      uses function cppcheckError(const Token *) defined in Tokenizer
      uses function isFunctionHead(const Token *,const std::string &) defined in Tokenizer
      uses function link(Token *) defined in Token
      uses function str(T &&) defined in Token
      uses function setVarIdClassDeclaration(Token *const,const std::map< std::string, unsigned int > &,const unsigned int,std::map< unsigned int, std::map< std::string, unsigned int > > &) defined in Tokenizer
      uses variable _settings defined in Tokenizer
      uses function terminated() defined in Settings
      uses function isCPP() defined in Tokenizer
      uses function previous() defined in Token
      uses function isOperatorKeyword() defined in Token
      uses function isStandardType() defined in Token
      uses function nextArgumentBeforeCreateLinks2() defined in Token
      uses function isLiteral() defined in Token
      uses function isName() defined in Token
      uses function isOp() defined in Token
      uses function tokAt(int) defined in Token
      uses function varId() defined in Token
      uses function syntaxError(const Token *) defined in Tokenizer
      uses function strAt(int) defined in Token
      uses function linkAt(int) defined in Token
      uses function findClosingBracket() defined in Token
   function setVarIdClassDeclaration(Token *const,const std::map< std::string, unsigned int > &,const unsigned int,std::map< unsigned int, std::map< std::string, unsigned int > > &) in line 722
      68 lines of code
      4 parameters
      22 conditional paths
      uses function link(Token *) defined in Token
      uses function previous() defined in Token
      uses function next() defined in Token
      uses function syntaxError(const Token *) defined in Tokenizer
      uses variable _varId defined in Tokenizer
   function simplifyAddBraces() in line 337
      protection public
      9 lines of code
      0 parameters
      3 conditional paths
      uses variable list defined in Tokenizer
      uses function front() defined in TokenList
      uses function next() defined in Token
      uses function simplifyAddBracesToCommand(Token *) defined in Tokenizer
   function simplifyAddBracesPair(Token *,bool) in line 353
      protection public
      74 lines of code
      2 parameters
      15 conditional paths
      uses function next() defined in Token
      uses function str(T &&) defined in Token
      uses function link(Token *) defined in Token
      uses function syntaxError(const Token *) defined in Tokenizer
      uses function strAt(int) defined in Token
      uses function linkAt(int) defined in Token
      uses function previous() defined in Token
      uses function insertToken(const std::string &,const std::string &,bool) defined in Token
      uses function simplifyAddBracesToCommand(Token *) defined in Tokenizer
      uses function tokType() defined in Token
      uses enumvalue eBracket defined in Token
   function simplifyAddBracesToCommand(Token *) in line 345
      protection public
      43 lines of code
      1 parameters
      14 conditional paths
      uses function simplifyAddBracesPair(Token *,bool) defined in Tokenizer
      uses function str(T &&) defined in Token
      uses function previous() defined in Token
      uses function link(Token *) defined in Token
      uses function strAt(int) defined in Token
      uses function next() defined in Token
      uses function syntaxError(const Token *) defined in Tokenizer
      uses function tokAt(int) defined in Token
   function simplifyArrayAccessSyntax() in line 478
      protection public
      13 lines of code
      0 parameters
      3 conditional paths
      uses variable list defined in Tokenizer
      uses function front() defined in TokenList
      uses function next() defined in Token
      uses function tokAt(int) defined in Token
      uses function str(T &&) defined in Token
   function simplifyAsm() in line 632
      59 lines of code
      0 parameters
      12 conditional paths
      uses variable list defined in Tokenizer
      uses function front() defined in TokenList
      uses function next() defined in Token
      uses function str(T &&) defined in Token
      uses function stringifyList(bool,bool,bool,bool,bool,const std::vector< std::string > *,const Token *) defined in Token
      uses function link(Token *) defined in Token
      uses function isNumber() defined in Token
      uses function isName() defined in Token
      uses function linenr() defined in Token
   function simplifyAsm2() in line 637
      58 lines of code
      0 parameters
      16 conditional paths
      uses variable list defined in Tokenizer
      uses function front() defined in TokenList
      uses function next() defined in Token
      uses function link(Token *) defined in Token
      uses function previous() defined in Token
      uses function linkAt(int) defined in Token
      uses function str(T &&) defined in Token
      uses function deleteNext(unsigned long) defined in Token
      uses function insertToken(const std::string &,const std::string &,bool) defined in Token
      uses function tokAt(int) defined in Token
      uses function syntaxError(const Token *) defined in Tokenizer
   function simplifyAssignmentBlock() in line 184
      protection public
      33 lines of code
      0 parameters
      10 conditional paths
      uses variable list defined in Tokenizer
      uses function front() defined in TokenList
      uses function next() defined in Token
      uses function str(T &&) defined in Token
      uses function previous() defined in Token
      uses function tokAt(int) defined in Token
      uses function insertToken(const std::string &,const std::string &,bool) defined in Token
      uses function varId() defined in Token
      uses function deleteNext(unsigned long) defined in Token
   function simplifyAssignmentInFunctionCall() in line 181
      protection public
      38 lines of code
      0 parameters
      8 conditional paths
      uses variable list defined in Tokenizer
      uses function front() defined in TokenList
      uses function next() defined in Token
      uses function tokAt(int) defined in Token
      uses function link(Token *) defined in Token
   function simplifyAttribute() in line 622
      95 lines of code
      0 parameters
      30 conditional paths
      uses variable list defined in Tokenizer
      uses function front() defined in TokenList
      uses function next() defined in Token
      uses variable _settings defined in Tokenizer
      uses variable library defined in Settings
      uses function isNotLibraryFunction(const Token *) defined in Library
      uses variable functionpure defined in Library
      uses variable functionconst defined in Library
      uses function syntaxError(const Token *) defined in Tokenizer
      uses function previous() defined in Token
      uses function link(Token *) defined in Token
      uses function isAttributeUnused() defined in Token
      uses function isAttributeUsed() defined in Token
      uses function linkAt(int) defined in Token
      uses function isAttributePure() defined in Token
      uses function isAttributeConst() defined in Token
      uses function isAttributeNoreturn() defined in Token
      uses function isAttributeNothrow() defined in Token
   function simplifyBitfields() in line 642
      49 lines of code
      0 parameters
      10 conditional paths
      uses variable list defined in Tokenizer
      uses function front() defined in TokenList
      uses function next() defined in Token
      uses function tokAt(int) defined in Token
      uses function link(Token *) defined in Token
      uses function deleteNext(unsigned long) defined in Token
      uses function str(T &&) defined in Token
      uses function insertToken(const std::string &,const std::string &,bool) defined in Token
      uses function isSigned() defined in Token
      uses function isUnsigned() defined in Token
      uses function isLong() defined in Token
   function simplifyBorland() in line 672
      50 lines of code
      0 parameters
      16 conditional paths
      uses variable _settings defined in Tokenizer
      uses function isWindowsPlatform() defined in Settings
      uses function isC() defined in Tokenizer
      uses variable list defined in Tokenizer
      uses function front() defined in TokenList
      uses function next() defined in Token
      uses function link(Token *) defined in Token
   function simplifyCalculations() in line 191
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable list defined in Tokenizer
      uses function front() defined in TokenList
   function simplifyCallingConvention() in line 617
      8 lines of code
      0 parameters
      3 conditional paths
      uses variable list defined in Tokenizer
      uses function front() defined in TokenList
      uses function next() defined in Token
   function simplifyCAlternativeTokens() in line 324
      protection public
      41 lines of code
      0 parameters
      11 conditional paths
      uses variable list defined in Tokenizer
      uses function front() defined in TokenList
      uses function next() defined in Token
      uses function isC() defined in Tokenizer
   function simplifyCaseRange() in line 215
      protection public
      35 lines of code
      0 parameters
      8 conditional paths
      uses variable list defined in Tokenizer
      uses function front() defined in TokenList
      uses function next() defined in Token
   function simplifyCasts() in line 368
      protection public
      89 lines of code
      0 parameters
      17 conditional paths
      uses variable list defined in Tokenizer
      uses function front() defined in TokenList
      uses function next() defined in Token
      uses variable _settings defined in Tokenizer
      uses variable char_bit defined in Settings
      uses variable _typeSize defined in Tokenizer
      uses function isCPP() defined in Tokenizer
      uses function isCast() defined in Token
      uses function linkAt(int) defined in Token
      uses function tokAt(int) defined in Token
   function simplifyCharAt() in line 458
      protection public
      14 lines of code
      0 parameters
      4 conditional paths
      uses variable list defined in Tokenizer
      uses function front() defined in TokenList
      uses function next() defined in Token
   function simplifyComma() in line 332
      protection public
      114 lines of code
      0 parameters
      29 conditional paths
      uses variable list defined in Tokenizer
      uses function front() defined in TokenList
      uses function next() defined in Token
      uses function isCPP() defined in Tokenizer
      uses function replace(char *,char,char) defined in times.c
      uses function previous() defined in Token
      uses function link(Token *) defined in Token
      uses function deleteNext(unsigned long) defined in Token
   function simplifyCompoundAssignment() in line 287
      protection public
      108 lines of code
      0 parameters
      22 conditional paths
      uses variable list defined in Tokenizer
      uses function front() defined in TokenList
      uses function next() defined in Token
      uses function link(Token *) defined in Token
      uses function deleteNext(unsigned long) defined in Token
      uses function previous() defined in Token
      uses enumvalue eIncDecOp defined in Token
   function simplifyConditions() in line 414
      protection public
      153 lines of code
      0 parameters
      33 conditional paths
      uses variable list defined in Tokenizer
      uses function front() defined in TokenList
      uses function next() defined in Token
      uses function previous() defined in Token
      uses function str(T &&) defined in Token
      uses function link(Token *) defined in Token
      uses variable result defined in triage-report.py
   function simplifyConstTernaryOp() in line 281
      protection public
      77 lines of code
      0 parameters
      16 conditional paths
      uses variable list defined in Tokenizer
      uses function front() defined in TokenList
      uses function next() defined in Token
      uses function isC() defined in Tokenizer
      uses function previous() defined in Token
      uses function str(T &&) defined in Token
      uses function tokAt(int) defined in Token
   function simplifyDeclspec() in line 612
      23 lines of code
      0 parameters
      8 conditional paths
      uses variable list defined in Tokenizer
      uses function front() defined in TokenList
      uses function next() defined in Token
      uses function link(Token *) defined in Token
      uses function isAttributeNoreturn() defined in Token
      uses function isAttributeNothrow() defined in Token
   function simplifyDeprecated() in line 688
      12 lines of code
      0 parameters
      4 conditional paths
      uses variable _settings defined in Tokenizer
      uses variable standards defined in Settings
      uses variable cpp defined in Standards
      uses enumvalue CPP11 defined in Standards
      uses function isC() defined in Tokenizer
      uses variable list defined in Tokenizer
      uses function front() defined in TokenList
      uses function next() defined in Token
   function simplifyDoublePlusAndDoubleMinus() in line 474
      protection public
      39 lines of code
      0 parameters
      11 conditional paths
      uses variable list defined in Tokenizer
      uses function front() defined in TokenList
      uses function next() defined in Token
   function simplifyEmptyNamespaces() in line 397
      protection public
      32 lines of code
      0 parameters
      8 conditional paths
      uses function isC() defined in Tokenizer
      uses variable list defined in Tokenizer
      uses function front() defined in TokenList
      uses function next() defined in Token
   function simplifyEnum() in line 561
      477 lines of code
      0 parameters
      105 conditional paths
      uses variable _settings defined in Tokenizer
      uses function isEnabled(T &&) defined in Settings
      uses variable list defined in Tokenizer
      uses function front() defined in TokenList
      uses function next() defined in Token
      uses function syntaxError(const Token *) defined in Tokenizer
      uses function isName() defined in Token
      uses function isCPP() defined in Tokenizer
      uses function str(T &&) defined in Token
      uses function deleteThis() defined in Token
      uses function link(Token *) defined in Token
      uses function insertToken(const std::string &,const std::string &,bool) defined in Token
      uses function copyTokens(Token *,const Token *,const Token *,bool) defined in Tokenizer
      uses function tokAt(int) defined in Token
      uses function findClosingBracket() defined in Token
      uses function simplify(const std::map< std::string, EnumValue > &) defined in EnumValue
      uses variable start defined in EnumValue
      uses variable end defined in EnumValue
      uses variable value defined in EnumValue
      uses function terminated() defined in Settings
      uses function fileIndex() defined in Token
      uses function linenr() defined in Token
      uses function previous() defined in Token
      uses function strAt(int) defined in Token
      uses function duplicateEnumError(const Token *,const Token *,const std::string &) defined in Tokenizer
      uses variable name defined in EnumValue
      uses function isStandardType() defined in Token
      uses function duplicateDefinition(Token **,const Token *) defined in Tokenizer
      uses function deleteNext(unsigned long) defined in Token
   function simplifyErrNoInWhile() in line 551
      28 lines of code
      0 parameters
      7 conditional paths
      uses variable list defined in Tokenizer
      uses function front() defined in TokenList
      uses function next() defined in Token
      uses function tokAt(int) defined in Token
      uses function link(Token *) defined in Token
      uses function previous() defined in Token
      uses function str(T &&) defined in Token
   function simplifyExternC() in line 496
      protection public
      15 lines of code
      0 parameters
      5 conditional paths
      uses function isC() defined in Tokenizer
      uses variable list defined in Tokenizer
      uses function front() defined in TokenList
      uses function next() defined in Token
   function simplifyFileAndLineMacro() in line 490
      protection public
      9 lines of code
      0 parameters
      4 conditional paths
      uses variable list defined in Tokenizer
      uses function front() defined in TokenList
      uses function next() defined in Token
      uses function file(const Token *) defined in TokenList
   function simplifyFlowControl() in line 402
      protection public
      74 lines of code
      0 parameters
      21 conditional paths
      uses variable list defined in Tokenizer
      uses function front() defined in TokenList
      uses function next() defined in Token
      uses function linkAt(int) defined in Token
      uses function link(Token *) defined in Token
      uses function eraseDeadCode(Token *,const Token *) defined in Tokenizer
      uses variable _settings defined in Tokenizer
      uses variable library defined in Settings
      uses function isnoreturn(const Token *) defined in Library
      uses function isCPP() defined in Tokenizer
      uses function syntaxError(const Token *) defined in Tokenizer
   function simplifyFuncInWhile() in line 556
      36 lines of code
      0 parameters
      3 conditional paths
      uses variable count defined in extracttests.py
      uses variable list defined in Tokenizer
      uses function front() defined in TokenList
      uses function next() defined in Token
      uses function tokAt(int) defined in Token
      uses function link(Token *) defined in Token
      uses variable _varId defined in Tokenizer
      uses function str(T &&) defined in Token
      uses function varId() defined in Token
      uses function previous() defined in Token
      uses function insertToken(const std::string &,const std::string &,bool) defined in Token
   function simplifyFunctionParameters() in line 467
      protection public
      168 lines of code
      0 parameters
      32 conditional paths
      uses variable list defined in Tokenizer
      uses function front() defined in TokenList
      uses function next() defined in Token
      uses function tokAt(int) defined in Token
      uses function deleteNext(unsigned long) defined in Token
      uses function syntaxError(const Token *) defined in Tokenizer
      uses function previous() defined in Token
      uses function str(T &&) defined in Token
      uses function link(Token *) defined in Token
      uses function isName() defined in Token
   function simplifyFunctionPointers() in line 572
      86 lines of code
      0 parameters
      22 conditional paths
      uses variable list defined in Tokenizer
      uses function front() defined in TokenList
      uses function next() defined in Token
      uses function isCPP() defined in Tokenizer
      uses function str(T &&) defined in Token
      uses function linkAt(int) defined in Token
      uses function deleteNext(unsigned long) defined in Token
      uses function tokAt(int) defined in Token
      uses function syntaxError(const Token *) defined in Tokenizer
      uses function link(Token *) defined in Token
      uses function strAt(int) defined in Token
   function simplifyFunctionReturn() in line 439
      protection public
      24 lines of code
      0 parameters
      6 conditional paths
      uses function tokens() defined in Tokenizer
      uses function next() defined in Token
      uses function tokAt(int) defined in Token
      uses variable list defined in Tokenizer
      uses function front() defined in TokenList
      uses function str(T &&) defined in Token
   function simplifyIfAndWhileAssign() in line 309
      protection public
      116 lines of code
      0 parameters
      23 conditional paths
      uses variable list defined in Tokenizer
      uses function front() defined in TokenList
      uses function next() defined in Token
      uses function tokAt(int) defined in Token
      uses function link(Token *) defined in Token
      uses function str(T &&) defined in Token
      uses function previous() defined in Token
      uses function insertToken(const std::string &,const std::string &,bool) defined in Token
      uses function varId() defined in Token
      uses function fileIndex() defined in Token
      uses function linenr() defined in Token
   function simplifyInitVar() in line 259
      protection public
      32 lines of code
      0 parameters
      11 conditional paths
      uses function isC() defined in Tokenizer
      uses variable list defined in Tokenizer
      uses function front() defined in TokenList
      uses function next() defined in Token
      uses function initVar(Token *) defined in Tokenizer
      uses function tokAt(int) defined in Token
      uses function link(Token *) defined in Token
      uses function linkAt(int) defined in Token
      uses function str(T &&) defined in Token
   function simplifyKeyword() in line 627
      81 lines of code
      0 parameters
      23 conditional paths
      uses variable list defined in Tokenizer
      uses function front() defined in TokenList
      uses function next() defined in Token
      uses function isC() defined in Tokenizer
      uses variable _settings defined in Tokenizer
      uses variable standards defined in Settings
      uses variable cpp defined in Standards
      uses enumvalue CPP03 defined in Standards
      uses variable c defined in Standards
      uses enumvalue C99 defined in Standards
      uses enumvalue C11 defined in Standards
      uses function isCPP() defined in Tokenizer
      uses enumvalue CPP11 defined in Standards
      uses function tokAt(int) defined in Token
      uses function str(T &&) defined in Token
      uses function deleteThis() defined in Token
   function simplifyKnownVariables() in line 382
      protection public
      232 lines of code
      0 parameters
      52 conditional paths
      uses variable list defined in Tokenizer
      uses function front() defined in TokenList
      uses function next() defined in Token
      uses function previous() defined in Token
      uses function tokAt(int) defined in Token
      uses function varId() defined in Token
      uses function str(T &&) defined in Token
      uses function deleteNext(unsigned long) defined in Token
      uses function deleteThis() defined in Token
      uses function startOfExecutableScope(const Token *) defined in Tokenizer
      uses function link(Token *) defined in Token
      uses function isName() defined in Token
      uses function strAt(int) defined in Token
      uses variable _settings defined in Tokenizer
      uses function terminated() defined in Settings
      uses function simplifyKnownVariablesGetData(unsigned int,Token **,Token **,std::string &,unsigned int &,bool &,bool) defined in Tokenizer
      uses function simplifyKnownVariablesSimplify(Token **,Token *,unsigned int,const std::string &,std::string &,unsigned int,bool,const Token *const,int) defined in Tokenizer
   function simplifyKnownVariablesGetData(unsigned int,Token **,Token **,std::string &,unsigned int &,bool &,bool) in line 388
      protection public
      68 lines of code
      7 parameters
      13 conditional paths
      uses function tokAt(int) defined in Token
      uses function linkAt(int) defined in Token
      uses function previous() defined in Token
      uses function link(Token *) defined in Token
      uses function next() defined in Token
      uses function str(T &&) defined in Token
      uses function varId() defined in Token
      uses function strAt(int) defined in Token
      uses function isBoolean() defined in Token
   function simplifyKnownVariablesSimplify(Token **,Token *,unsigned int,const std::string &,std::string &,unsigned int,bool,const Token *const,int) in line 394
      protection public
      425 lines of code
      9 parameters
      90 conditional paths
      uses function isName() defined in Token
      uses variable _settings defined in Tokenizer
      uses variable debugwarnings defined in Settings
      uses variable _errorLogger defined in Tokenizer
      uses variable list defined in Tokenizer
      uses function getFiles() defined in TokenList
      uses function reportProgress(const std::string &,const char,const std::size_t) defined in ErrorLogger
      uses function progressValue() defined in Token
      uses function next() defined in Token
      uses function str(T &&) defined in Token
      uses function tokAt(int) defined in Token
      uses function varId() defined in Token
      uses function previous() defined in Token
      uses function link(Token *) defined in Token
      uses function isFunctionParameterPassedByValue(const Token *) defined in Tokenizer
      uses function strAt(int) defined in Token
      uses function reportError(const Token *,const Severity::SeverityType,const std::string &,const std::string &,bool) defined in Tokenizer
      uses enumvalue debug defined in Severity
      uses function deleteNext(unsigned long) defined in Token
      uses function insertToken(const std::string &,const std::string &,bool) defined in Token
      uses function isCPP() defined in Tokenizer
      uses variable functionName defined in extracttests.py
      uses function deleteThis() defined in Token
      uses function linkAt(int) defined in Token
      uses function isExtendedOp() defined in Token
   function simplifyLabelsCaseDefault() in line 211
      protection public
      62 lines of code
      0 parameters
      20 conditional paths
      uses variable list defined in Tokenizer
      uses function front() defined in TokenList
      uses function next() defined in Token
      uses function startOfExecutableScope(const Token *) defined in Tokenizer
      uses function link(Token *) defined in Token
      uses function syntaxError(const Token *) defined in Tokenizer
   function simplifyMathExpressions() in line 514
      protection public
      89 lines of code
      0 parameters
      27 conditional paths
      uses variable list defined in Tokenizer
      uses function front() defined in TokenList
      uses function next() defined in Token
      uses function linkAt(int) defined in Token
      uses function strAt(int) defined in Token
      uses function isTwoNumber(const std::string &) defined in Tokenizer
      uses function tokAt(int) defined in Token
      uses function link(Token *) defined in Token
      uses function stringifyList(bool,bool,bool,bool,bool,const std::vector< std::string > *,const Token *) defined in Token
   function simplifyMathFunctions() in line 509
      protection public
      238 lines of code
      0 parameters
      40 conditional paths
      uses variable list defined in Tokenizer
      uses function front() defined in TokenList
      uses function next() defined in Token
      uses function isZeroNumber(const std::string &) defined in Tokenizer
      uses function isOneNumber(const std::string &) defined in Tokenizer
   function simplifyMicrosoftMemoryFunctions() in line 661
      49 lines of code
      0 parameters
      13 conditional paths
      uses variable _settings defined in Tokenizer
      uses function isWindowsPlatform() defined in Settings
      uses variable list defined in Tokenizer
      uses function front() defined in TokenList
      uses function next() defined in Token
      uses function tokAt(int) defined in Token
      uses function nextArgument() defined in Token
      uses function previous() defined in Token
      uses function link(Token *) defined in Token
      uses function insertToken(const std::string &,const std::string &,bool) defined in Token
   function simplifyMicrosoftStringFunctions() in line 667
      31 lines of code
      0 parameters
      8 conditional paths
      uses variable _settings defined in Tokenizer
      uses function isWindowsPlatform() defined in Settings
      uses variable platformType defined in Settings
      uses enumvalue Win32A defined in Settings
      uses variable list defined in Tokenizer
      uses function front() defined in TokenList
      uses function next() defined in Token
   function simplifyMulAndParens() in line 157
      protection public
      63 lines of code
      0 parameters
      17 conditional paths
      uses variable list defined in Tokenizer
      uses function front() defined in TokenList
      uses function tokAt(int) defined in Token
      uses function next() defined in Token
      uses function previous() defined in Token
      uses function str(T &&) defined in Token
      uses function isAssignmentOp() defined in Token
      uses function deleteNext(unsigned long) defined in Token
   function SimplifyNamelessRValueReferences() in line 126
      protection public
      10 lines of code
      0 parameters
      3 conditional paths
      uses variable list defined in Tokenizer
      uses function front() defined in TokenList
      uses function next() defined in Token
   function simplifyNamespaceStd() in line 652
      37 lines of code
      0 parameters
      12 conditional paths
      uses function isCPP() defined in Tokenizer
      uses variable _settings defined in Tokenizer
      uses variable standards defined in Settings
      uses variable cpp defined in Standards
      uses enumvalue CPP11 defined in Standards
      uses variable list defined in Tokenizer
      uses function front() defined in TokenList
      uses function next() defined in Token
   function simplifyNestedStrcat() in line 405
      protection public
      33 lines of code
      0 parameters
      5 conditional paths
      uses variable list defined in Tokenizer
      uses function front() defined in TokenList
      uses function next() defined in Token
      uses function tokAt(int) defined in Token
      uses function strAt(int) defined in Token
      uses function previous() defined in Token
      uses function link(Token *) defined in Token
      uses function insertToken(const std::string &,const std::string &,bool) defined in Token
      uses function varId() defined in Token
   function simplifyNull() in line 492
      protection public
      22 lines of code
      0 parameters
      8 conditional paths
      uses variable list defined in Tokenizer
      uses function front() defined in TokenList
      uses function next() defined in Token
      uses function isCPP() defined in Tokenizer
      uses variable _settings defined in Tokenizer
      uses variable standards defined in Settings
      uses variable cpp defined in Standards
      uses enumvalue CPP11 defined in Standards
   function simplifyOffsetPointerDereference() in line 198
      protection public
      33 lines of code
      0 parameters
      5 conditional paths
      uses variable list defined in Tokenizer
      uses function front() defined in TokenList
      uses function next() defined in Token
      uses function str(T &&) defined in Token
   function simplifyOffsetPointerReference() in line 204
      protection public
      47 lines of code
      0 parameters
      11 conditional paths
      uses variable list defined in Tokenizer
      uses function front() defined in TokenList
      uses function next() defined in Token
      uses function syntaxError(const Token *) defined in Tokenizer
   function simplifyOperatorName() in line 683
      68 lines of code
      0 parameters
      16 conditional paths
      uses function isC() defined in Tokenizer
      uses variable list defined in Tokenizer
      uses function front() defined in TokenList
      uses function next() defined in Token
      uses function isName() defined in Token
      uses function str(T &&) defined in Token
      uses function tokAt(int) defined in Token
      uses function link(Token *) defined in Token
      uses variable _settings defined in Tokenizer
      uses variable debugwarnings defined in Settings
      uses function reportError(const Token *,const Severity::SeverityType,const std::string &,const std::string &,bool) defined in Tokenizer
      uses enumvalue debug defined in Severity
   function simplifyParameterVoid() in line 480
      protection public
      7 lines of code
      0 parameters
      3 conditional paths
      uses variable list defined in Tokenizer
      uses function front() defined in TokenList
      uses function next() defined in Token
   function simplifyPlatformTypes() in line 267
      protection public
      117 lines of code
      0 parameters
      30 conditional paths
      uses variable _settings defined in Tokenizer
      uses variable sizeof_size_t defined in Settings
      uses variable sizeof_long defined in Settings
      uses variable list defined in Tokenizer
      uses function front() defined in TokenList
      uses function next() defined in Token
      uses function isWindowsPlatform() defined in Settings
      uses variable platformType defined in Settings
      uses enumvalue Win32A defined in Settings
      uses enumvalue Win32W defined in Settings
      uses enumvalue eType defined in Token
      uses enumvalue eName defined in Token
      uses variable library defined in Settings
      uses function platform_type(const std::string &,const std::string &) defined in Library
      uses function tokAt(int) defined in Token
      uses function tokType() defined in Token
      uses function deleteThis() defined in Token
      uses variable _const_ptr defined in Library::PlatformType
      uses function str(T &&) defined in Token
      uses variable _type defined in Library::PlatformType
      uses variable _pointer defined in Library::PlatformType
      uses function insertToken(const std::string &,const std::string &,bool) defined in Token
      uses variable _ptr_ptr defined in Library::PlatformType
      uses variable _signed defined in Library::PlatformType
      uses function isSigned() defined in Token
      uses variable _unsigned defined in Library::PlatformType
      uses function isUnsigned() defined in Token
      uses variable _long defined in Library::PlatformType
      uses function isLong() defined in Token
   function simplifyPointerConst() in line 293
      protection public
      7 lines of code
      0 parameters
      3 conditional paths
      uses variable list defined in Tokenizer
      uses function front() defined in TokenList
      uses function next() defined in Token
   function simplifyPointerToStandardType() in line 569
      18 lines of code
      0 parameters
      5 conditional paths
      uses function isC() defined in Tokenizer
      uses variable list defined in Tokenizer
      uses function front() defined in TokenList
      uses function next() defined in Token
   function simplifyQtSignalsSlots() in line 677
      51 lines of code
      0 parameters
      15 conditional paths
      uses function isC() defined in Tokenizer
      uses variable list defined in Tokenizer
      uses function front() defined in TokenList
      uses function next() defined in Token
   function simplifyRealloc() in line 236
      protection public
      44 lines of code
      0 parameters
      7 conditional paths
      uses variable list defined in Tokenizer
      uses function front() defined in TokenList
      uses function next() defined in Token
      uses function link(Token *) defined in Token
      uses function tokAt(int) defined in Token
      uses function previous() defined in Token
      uses function deleteNext(unsigned long) defined in Token
      uses function insertToken(const std::string &,const std::string &,bool) defined in Token
   function simplifyRedundantConsecutiveBraces() in line 476
      protection public
      14 lines of code
      0 parameters
      4 conditional paths
      uses variable list defined in Tokenizer
      uses function front() defined in TokenList
   function simplifyRedundantParentheses() in line 456
      protection public
      157 lines of code
      0 parameters
      25 conditional paths
      uses variable list defined in Tokenizer
      uses function front() defined in TokenList
      uses function next() defined in Token
      uses function isCPP() defined in Tokenizer
      uses function tokAt(int) defined in Token
      uses function link(Token *) defined in Token
      uses function previous() defined in Token
      uses function deleteNext(unsigned long) defined in Token
      uses function deleteThis() defined in Token
      uses function isArithmeticalOp() defined in Token
      uses function str(T &&) defined in Token
   function simplifyReference() in line 461
      protection public
      34 lines of code
      0 parameters
      9 conditional paths
      uses function isC() defined in Tokenizer
      uses variable list defined in Tokenizer
      uses function front() defined in TokenList
      uses function next() defined in Token
      uses function startOfExecutableScope(const Token *) defined in Tokenizer
      uses function link(Token *) defined in Token
      uses function tokAt(int) defined in Token
   function simplifyReturnStrncat() in line 732
      46 lines of code
      0 parameters
      7 conditional paths
      uses variable list defined in Tokenizer
      uses function front() defined in TokenList
      uses function next() defined in Token
      uses function tokAt(int) defined in Token
      uses function nextArgument() defined in Token
      uses function linkAt(int) defined in Token
      uses function deleteThis() defined in Token
      uses function link(Token *) defined in Token
      uses function insertToken(const std::string &,const std::string &,bool) defined in Token
      uses function copyTokens(Token *,const Token *,const Token *,bool) defined in Tokenizer
   function simplifyRoundCurlyParentheses() in line 498
      protection public
      20 lines of code
      0 parameters
      6 conditional paths
      uses variable list defined in Tokenizer
      uses function front() defined in TokenList
      uses function next() defined in Token
      uses function linkAt(int) defined in Token
      uses function tokAt(int) defined in Token
      uses function deleteNext(unsigned long) defined in Token
   function simplifySizeof() in line 246
      protection public
      192 lines of code
      0 parameters
      41 conditional paths
      uses variable list defined in Tokenizer
      uses function front() defined in TokenList
      uses function next() defined in Token
      uses function sizeOfType(const Token *) defined in Tokenizer
      uses function strAt(int) defined in Token
      uses function tokAt(int) defined in Token
      uses function syntaxError(const Token *) defined in Tokenizer
      uses function str(T &&) defined in Token
      uses function link(Token *) defined in Token
      uses function varId() defined in Token
      uses function previous() defined in Token
      uses function linkAt(int) defined in Token
      uses function isStandardType() defined in Token
   function simplifySQL() in line 500
      protection public
      25 lines of code
      0 parameters
      5 conditional paths
      uses variable list defined in Tokenizer
      uses function front() defined in TokenList
      uses function next() defined in Token
      uses function tokAt(int) defined in Token
      uses function str(T &&) defined in Token
      uses function stringifyList(bool,bool,bool,bool,bool,const std::vector< std::string > *,const Token *) defined in Token
   function simplifyStaticConst() in line 301
      protection public
      41 lines of code
      0 parameters
      9 conditional paths
      uses variable list defined in Tokenizer
      uses function front() defined in TokenList
      uses function next() defined in Token
      uses function previous() defined in Token
      uses function isCPP() defined in Tokenizer
      uses function deleteNext(unsigned long) defined in Token
      uses function insertToken(const std::string &,const std::string &,bool) defined in Token
      uses function swapWithNext() defined in Token
   function simplifyStd() in line 566
      16 lines of code
      0 parameters
      5 conditional paths
      uses function isC() defined in Tokenizer
      uses variable list defined in Tokenizer
      uses function front() defined in TokenList
      uses function next() defined in Token
   function simplifyStdType() in line 273
      protection public
      60 lines of code
      0 parameters
      17 conditional paths
      uses variable list defined in Tokenizer
      uses function front() defined in TokenList
      uses function next() defined in Token
      uses variable _settings defined in Tokenizer
      uses variable standards defined in Settings
      uses variable c defined in Standards
      uses enumvalue C99 defined in Standards
      uses function str(T &&) defined in Token
      uses function isLong() defined in Token
      uses function isComplex() defined in Token
      uses function isSigned() defined in Token
      uses function isUnsigned() defined in Token
      uses function previous() defined in Token
      uses function deleteThis() defined in Token
   function simplifyString(const std::string &) in line 522
      protection public
      38 lines of code
      1 parameters
      10 conditional paths
   function simplifyStrlen() in line 694
      13 lines of code
      0 parameters
      3 conditional paths
      uses variable list defined in Tokenizer
      uses function front() defined in TokenList
      uses function next() defined in Token
   function simplifyStructDecl() in line 445
      protection public
      133 lines of code
      0 parameters
      30 conditional paths
      uses variable count defined in extracttests.py
      uses variable list defined in Tokenizer
      uses function front() defined in TokenList
      uses function next() defined in Token
      uses function previous() defined in Token
      uses function tokAt(int) defined in Token
      uses function str(T &&) defined in Token
      uses function link(Token *) defined in Token
      uses function insertToken(const std::string &,const std::string &,bool) defined in Token
      uses function deleteThis() defined in Token
      uses function varId() defined in Token
   function simplifyTemplates() in line 472
      protection public
      30 lines of code
      0 parameters
      6 conditional paths
      uses function isC() defined in Tokenizer
      uses variable list defined in Tokenizer
      uses function front() defined in TokenList
      uses function next() defined in Token
      uses function sizeOfType(const Token *) defined in Tokenizer
      uses function tokAt(int) defined in Token
      uses function deleteNext(unsigned long) defined in Token
      uses function insertToken(const std::string &,const std::string &,bool) defined in Token
      uses function findClosingBracket() defined in Token
      uses function str(T &&) defined in Token
      uses variable _errorLogger defined in Tokenizer
      uses variable _settings defined in Tokenizer
      uses variable _codeWithTemplates defined in Tokenizer
   function simplifyTokenList1(const char) in line 124
      protection public
      346 lines of code
      1 parameters
      38 conditional paths
      uses variable _settings defined in Tokenizer
      uses function terminated() defined in Settings
      uses variable list defined in Tokenizer
      uses function front() defined in TokenList
      uses function next() defined in Token
      uses function syntaxError(const Token *) defined in Tokenizer
      uses function removeMacroInVarDecl() defined in Tokenizer
      uses function combineStrings() defined in Tokenizer
      uses function simplifySQL() defined in Tokenizer
      uses function simplifyFileAndLineMacro() defined in Tokenizer
      uses function concatenateDoubleSharp() defined in Tokenizer
      uses function createLinks() defined in Tokenizer
      uses function simplifyDeprecated() defined in Tokenizer
      uses function simplifyCAlternativeTokens() defined in Tokenizer
      uses function simplifyNull() defined in Tokenizer
      uses function simplifyMathExpressions() defined in Tokenizer
      uses function concatenateNegativeNumberAndAnyPositive() defined in Tokenizer
      uses function combineOperators() defined in Tokenizer
      uses function isCPP() defined in Tokenizer
      uses function simplifyExternC() defined in Tokenizer
      uses function simplifyRoundCurlyParentheses() defined in Tokenizer
      uses function simplifyAddBraces() defined in Tokenizer
      uses function sizeofAddParentheses() defined in Tokenizer
      uses function simplifyKeyword() defined in Tokenizer
      uses function simplifyVarDecl(bool) defined in Tokenizer
      uses function simplifyFunctionParameters() defined in Tokenizer
      uses function simplifyCaseRange() defined in Tokenizer
      uses function simplifyLabelsCaseDefault() defined in Tokenizer
      uses function simplifyMulAndParens() defined in Tokenizer
      uses function isC() defined in Tokenizer
      uses variable library defined in Settings
      uses function markupFile(const std::string &) defined in Library
      uses function findComplicatedSyntaxErrorsInTemplates() defined in Tokenizer
      uses function simplifyCallingConvention() defined in Tokenizer
      uses function simplifyDeclspec() defined in Tokenizer
      uses function validate() defined in Tokenizer
      uses function removeMacrosInGlobalScope() defined in Tokenizer
      uses function removeMacroInClassDef() defined in Tokenizer
      uses function simplifyAttribute() defined in Tokenizer
      uses function removeUnnecessaryQualification() defined in Tokenizer
      uses function simplifyMicrosoftMemoryFunctions() defined in Tokenizer
      uses function simplifyMicrosoftStringFunctions() defined in Tokenizer
      uses function simplifyQtSignalsSlots() defined in Tokenizer
      uses function simplifyBorland() defined in Tokenizer
      uses function checkForEnumsWithTypedef() defined in Tokenizer
      uses function simplifyAsm() defined in Tokenizer
      uses function prepareTernaryOpForAST() defined in Tokenizer
      uses function simplifyInitVar() defined in Tokenizer
      uses variable m_timerResults defined in Tokenizer
      uses variable showtime defined in Settings
      uses function simplifyTypedef() defined in Tokenizer
      uses function isEnabled(T &&) defined in Settings
      uses function unhandled_macro_class_x_y(const Token *) defined in Tokenizer
      uses function simplifyEnum() defined in Tokenizer
      uses function simplifyAsm2() defined in Tokenizer
      uses function simplifyStaticConst() defined in Tokenizer
      uses function simplifyPlatformTypes() defined in Tokenizer
      uses function simplifyStdType() defined in Tokenizer
      uses function simplifyBitfields() defined in Tokenizer
      uses function simplifyStructDecl() defined in Tokenizer
      uses function simplifyAssignmentBlock() defined in Tokenizer
      uses function simplifyVariableMultipleAssign() defined in Tokenizer
      uses function simplifyOperatorName() defined in Tokenizer
      uses function simplifyRedundantParentheses() defined in Tokenizer
      uses function simplifyTemplates() defined in Tokenizer
      uses function simplifyPointerToStandardType() defined in Tokenizer
      uses function simplifyFunctionPointers() defined in Tokenizer
      uses function setVarId() defined in Tokenizer
      uses function createLinks2() defined in Tokenizer
      uses function arraySize() defined in Tokenizer
      uses function simplifyNamespaceStd() defined in Tokenizer
      uses function simplifyMathFunctions() defined in Tokenizer
      uses function simplifyDoublePlusAndDoubleMinus() defined in Tokenizer
      uses function simplifyArrayAccessSyntax() defined in Tokenizer
      uses function removeRedundantSemicolons() defined in Tokenizer
      uses function simplifyParameterVoid() defined in Tokenizer
      uses function simplifyRedundantConsecutiveBraces() defined in Tokenizer
      uses function simplifyEmptyNamespaces() defined in Tokenizer
      uses function elseif() defined in Tokenizer
      uses function SimplifyNamelessRValueReferences() defined in Tokenizer
   function simplifyTokenList2() in line 134
      protection public
      142 lines of code
      0 parameters
      12 conditional paths
      uses function deleteSymbolDatabase() defined in Tokenizer
      uses variable list defined in Tokenizer
      uses function front() defined in TokenList
      uses function next() defined in Token
      uses function simplifyAssignmentInFunctionCall() defined in Tokenizer
      uses function simplifyCompoundAssignment() defined in Tokenizer
      uses function simplifyCharAt() defined in Tokenizer
      uses function simplifyReference() defined in Tokenizer
      uses function simplifyStd() defined in Tokenizer
      uses variable _settings defined in Tokenizer
      uses function terminated() defined in Settings
      uses function simplifySizeof() defined in Tokenizer
      uses function simplifyUndefinedSizeArray() defined in Tokenizer
      uses function simplifyCasts() defined in Tokenizer
      uses function simplifyCalculations() defined in Tokenizer
      uses function simplifyOffsetPointerDereference() defined in Tokenizer
      uses function simplifyOffsetPointerReference() defined in Tokenizer
      uses function removeRedundantAssignment() defined in Tokenizer
      uses function simplifyRealloc() defined in Tokenizer
      uses function simplifyInitVar() defined in Tokenizer
      uses function simplifyVarDecl(bool) defined in Tokenizer
      uses function simplifyErrNoInWhile() defined in Tokenizer
      uses function simplifyIfAndWhileAssign() defined in Tokenizer
      uses function simplifyRedundantParentheses() defined in Tokenizer
      uses function simplifyNestedStrcat() defined in Tokenizer
      uses function simplifyFuncInWhile() defined in Tokenizer
      uses function simplifyConditions() defined in Tokenizer
      uses function simplifyFunctionReturn() defined in Tokenizer
      uses function simplifyKnownVariables() defined in Tokenizer
      uses function simplifyStrlen() defined in Tokenizer
      uses function removeRedundantConditions() defined in Tokenizer
      uses function simplifyConstTernaryOp() defined in Tokenizer
      uses function validate() defined in Tokenizer
      uses function simplifyWhile0() defined in Tokenizer
      uses function removeRedundantFor() defined in Tokenizer
      uses function link(Token *) defined in Token
      uses function deleteThis() defined in Token
      uses function simplifyReturnStrncat() defined in Tokenizer
      uses function simplifyComma() defined in Tokenizer
      uses function removeRedundantSemicolons() defined in Tokenizer
      uses function simplifyFlowControl() defined in Tokenizer
      uses function simplifyRedundantConsecutiveBraces() defined in Tokenizer
      uses function simplifyEmptyNamespaces() defined in Tokenizer
      uses function simplifyMathFunctions() defined in Tokenizer
      uses function createSymbolDatabase() defined in Tokenizer
      uses function simplifyPointerConst() defined in Tokenizer
      uses function createAst() defined in TokenList
      uses function setValues(TokenList *,SymbolDatabase *,ErrorLogger *,const Settings *) defined in valueflow.h
      uses variable _symbolDatabase defined in Tokenizer
      uses variable _errorLogger defined in Tokenizer
      uses function printDebugOutput(unsigned int) defined in Tokenizer
   function simplifyTokens1(const std::string &,bool) in line 77
      protection public
      36 lines of code
      2 parameters
      5 conditional paths
      uses function fillTypeSizes() defined in Tokenizer
      uses variable _configuration defined in Tokenizer
      uses function simplifyTokenList1(const char) defined in Tokenizer
      uses variable list defined in Tokenizer
      uses function getFiles() defined in TokenList
      uses function createSymbolDatabase() defined in Tokenizer
      uses variable _symbolDatabase defined in Tokenizer
      uses function getVariableListSize() defined in SymbolDatabase
      uses function getVariableFromVarId(std::size_t) defined in SymbolDatabase
      uses function isRValueReference() defined in Variable
      uses function typeEndToken() defined in Variable
      uses function str(T &&) defined in Token
      uses function insertToken(const std::string &,const std::string &,bool) defined in Token
      uses function next() defined in Token
      uses function scope(const Scope *) defined in Token
      uses function createAst() defined in TokenList
      uses function validateAst() defined in TokenList
      uses function front() defined in TokenList
      uses function isCPP() defined in Tokenizer
      uses variable _settings defined in Tokenizer
      uses variable defaultSign defined in Settings
      uses function setValues(TokenList *,SymbolDatabase *,ErrorLogger *,const Settings *) defined in valueflow.h
      uses variable _errorLogger defined in Tokenizer
      uses function printDebugOutput(unsigned int) defined in Tokenizer
   function simplifyTypedef() in line 363
      protection public
      1078 lines of code
      0 parameters
      213 conditional paths
      uses variable list defined in Tokenizer
      uses function front() defined in TokenList
      uses function next() defined in Token
      uses variable _errorLogger defined in Tokenizer
      uses function getFiles() defined in TokenList
      uses function reportProgress(const std::string &,const char,const std::size_t) defined in ErrorLogger
      uses variable _settings defined in Tokenizer
      uses function terminated() defined in Settings
      uses variable isNamespace defined in Space
      uses variable className defined in Space
      uses variable classEnd defined in Space
      uses function link(Token *) defined in Token
      uses function str(T &&) defined in Token
      uses function deleteNext(unsigned long) defined in Token
      uses function syntaxError(const Token *) defined in Tokenizer
      uses function tokAt(int) defined in Token
      uses function isStandardType() defined in Token
      uses function isC() defined in Tokenizer
      uses function findClosingBracket() defined in Token
      uses function unsupportedTypedef(const Token *) defined in Tokenizer
      uses function deleteInvalidTypedef(Token *) defined in Tokenizer
      uses function isFunctionHead(const Token *,const std::string &) defined in Tokenizer
      uses function previous() defined in Token
      uses function linkAt(int) defined in Token
      uses function isCPP() defined in Tokenizer
      uses function strAt(int) defined in Token
      uses variable count defined in extracttests.py
      uses function duplicateTypedef(Token **,const Token *,const Token *,const std::set< std::string > &) defined in Tokenizer
      uses function copyTokens(Token *,const Token *,const Token *,bool) defined in Tokenizer
      uses function insertToken(const std::string &,const std::string &,bool) defined in Token
      uses function processFunc(Token *,bool) defined in Tokenizer
      uses function deleteThis() defined in Token
   function simplifyUndefinedSizeArray() in line 373
      protection public
      28 lines of code
      0 parameters
      8 conditional paths
      uses variable list defined in Tokenizer
      uses function front() defined in TokenList
      uses function next() defined in Token
      uses function str(T &&) defined in Token
      uses function previous() defined in Token
      uses variable count defined in extracttests.py
      uses function tokAt(int) defined in Token
      uses function deleteNext(unsigned long) defined in Token
   function simplifyVarDecl(bool) in line 252
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable list defined in Tokenizer
      uses function front() defined in TokenList
   function simplifyVarDecl(Token *,Token *,bool) in line 253
      protection public
      282 lines of code
      3 parameters
      75 conditional paths
      uses function next() defined in Token
      uses function syntaxError(const Token *) defined in Tokenizer
      uses function isCPP() defined in Tokenizer
      uses function link(Token *) defined in Token
      uses function str(T &&) defined in Token
      uses function simplifyVarDecl(bool) defined in Tokenizer
      uses function strAt(int) defined in Token
      uses function isC() defined in Tokenizer
      uses function tokAt(int) defined in Token
      uses function previous() defined in Token
      uses function findClosingBracket() defined in Token
      uses function linkAt(int) defined in Token
      uses variable list defined in Tokenizer
      uses function isName() defined in Token
      uses function varId() defined in Token
   function simplifyVariableMultipleAssign() in line 315
      protection public
      29 lines of code
      0 parameters
      6 conditional paths
      uses variable list defined in Tokenizer
      uses function front() defined in TokenList
      uses function next() defined in Token
      uses function previous() defined in Token
      uses function str(T &&) defined in Token
      uses function tokAt(int) defined in Token
      uses function insertToken(const std::string &,const std::string &,bool) defined in Token
   function simplifyWhile0() in line 546
      50 lines of code
      0 parameters
      10 conditional paths
      uses variable list defined in Tokenizer
      uses function front() defined in TokenList
      uses function next() defined in Token
      uses function previous() defined in Token
      uses function link(Token *) defined in Token
      uses function str(T &&) defined in Token
      uses function deleteThis() defined in Token
      uses function eraseDeadCode(Token *,const Token *) defined in Tokenizer
   function sizeofAddParentheses() in line 239
      protection public
      20 lines of code
      0 parameters
      5 conditional paths
      uses variable list defined in Tokenizer
      uses function front() defined in TokenList
      uses function next() defined in Token
      uses function isLiteral() defined in Token
      uses function isName() defined in Token
      uses function strAt(int) defined in Token
      uses function linkAt(int) defined in Token
      uses function insertToken(const std::string &,const std::string &,bool) defined in Token
   function sizeOfType(const Token *) in line 164
      protection public
      24 lines of code
      1 parameters
      7 conditional paths
      uses function str(T &&) defined in Token
      uses function tokType() defined in Token
      uses enumvalue eString defined in Token
      uses variable _typeSize defined in Tokenizer
      uses variable _settings defined in Tokenizer
      uses variable library defined in Settings
      uses function podtype(const std::string &) defined in Library
      uses variable size defined in Library::PodType
      uses function isLong() defined in Token
      uses variable sizeof_long_double defined in Settings
      uses variable sizeof_long_long defined in Settings
   function startOfExecutableScope(const Token *) in line 823
      protection public
      14 lines of code
      1 parameters
      4 conditional paths
      uses function str(T &&) defined in Token
      uses function isFunctionHead(const Token *,const std::string &) defined in Tokenizer
      uses function linkAt(int) defined in Token
      uses function next() defined in Token
   function syntaxError(const Token *) in line 593
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function printDebugOutput(unsigned int) defined in Tokenizer
      uses enumvalue SYNTAX defined in InternalError
   function syntaxError(const Token *,char) in line 596
      protection public
      8 lines of code
      2 parameters
      1 conditional paths
      uses function printDebugOutput(unsigned int) defined in Tokenizer
      uses variable _configuration defined in Tokenizer
      uses enumvalue SYNTAX defined in InternalError
   function tokenize(std::istream &,const char,const std::string &,bool) in line 101
      protection public
      10 lines of code
      4 parameters
      2 conditional paths
      uses function createTokens(std::istream &,const char) defined in Tokenizer
      uses variable code defined in extracttests.py
      uses function simplifyTokens1(const std::string &,bool) defined in Tokenizer
   function tokenizeCondition(const std::string &) in line 110
      protection public
      66 lines of code
      1 parameters
      6 conditional paths
      uses variable _settings defined in Tokenizer
      uses function fillTypeSizes() defined in Tokenizer
      uses variable code defined in extracttests.py
      uses variable list defined in Tokenizer
      uses function createTokens(std::istream &,const std::string &) defined in TokenList
      uses function cppcheckError(const Token *) defined in Tokenizer
      uses function combineStrings() defined in Tokenizer
      uses function simplifyKeyword() defined in Tokenizer
      uses function concatenateDoubleSharp() defined in Tokenizer
      uses function createLinks() defined in Tokenizer
      uses function simplifyStaticConst() defined in Tokenizer
      uses function simplifyPlatformTypes() defined in Tokenizer
      uses function simplifyStdType() defined in Tokenizer
      uses function simplifyNull() defined in Tokenizer
      uses function concatenateNegativeNumberAndAnyPositive() defined in Tokenizer
      uses function front() defined in TokenList
      uses function next() defined in Token
      uses function combineOperators() defined in Tokenizer
      uses function simplifyRedundantParentheses() defined in Tokenizer
      uses function simplifyCAlternativeTokens() defined in Tokenizer
      uses function simplifyDoublePlusAndDoubleMinus() defined in Tokenizer
   function tokens() in line 782
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses function front() defined in TokenList
      uses function isZeroNumber() defined in TestTokenizer
      uses variable s defined in extracttests.py
      uses function isOneNumber() defined in TestTokenizer
      uses function isTwoNumber() defined in TestTokenizer
      uses function startOfExecutableScope() defined in TestTokenizer
   function unhandled_macro_class_x_y(const Token *) in line 601
      11 lines of code
      1 parameters
      1 conditional paths
      uses function reportError(const Token *,const Severity::SeverityType,const std::string &,const std::string &,bool) defined in Tokenizer
      uses enumvalue information defined in Severity
      uses function str(T &&) defined in Token
      uses function strAt(int) defined in Token
   function unsupportedTypedef(const Token *) in line 720
      30 lines of code
      1 parameters
      9 conditional paths
      uses variable _settings defined in Tokenizer
      uses variable debugwarnings defined in Settings
      uses function str(T &&) defined in Token
      uses function next() defined in Token
      uses function reportError(const Token *,const Severity::SeverityType,const std::string &,const std::string &,bool) defined in Tokenizer
      uses enumvalue debug defined in Severity
   function validate() in line 607
      40 lines of code
      0 parameters
      12 conditional paths
      uses function tokens() defined in Tokenizer
      uses function next() defined in Token
      uses function cppcheckError(const Token *) defined in Tokenizer
      uses variable list defined in Tokenizer
      uses function back() defined in TokenList
   function varIdCount() in line 773
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function Tokenizer() in line 48
      protection public
      13 lines of code
      0 parameters
      1 conditional paths
   function Tokenizer(const Settings *,ErrorLogger *) in line 49
      protection public
      15 lines of code
      2 parameters
      1 conditional paths
      uses variable _settings defined in Tokenizer
   function ~Tokenizer() in line 50
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable _symbolDatabase defined in Tokenizer
   function Tokenizer(const Tokenizer &) in line 827
      1 lines of code
      1 parameters
      1 conditional paths
   variable _codeWithTemplates in line 860
   variable _configuration in line 848
   variable _errorLogger in line 841
   variable _settings in line 838
   variable _symbolDatabase in line 844
   variable _typeSize in line 851
   variable _varId in line 854
   variable list in line 780
      protection public
   variable m_timerResults in line 865
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/lib/tokenlist.cpp
module tokenlist.cpp
   variable AST_MAX_DEPTH in line 36
      protection public
   function iscast(const Token *) in line 441
      protection public
      33 lines of code
      1 parameters
      10 conditional paths
      uses function previous() defined in Token
      uses function isName() defined in Token
      uses function str(T &&) defined in Token
      uses function link(Token *) defined in Token
      uses function next() defined in Token
   function iscpp11init(const Token *const) in line 476
      protection public
      31 lines of code
      1 parameters
      10 conditional paths
      uses function isName() defined in Token
      uses function previous() defined in Token
      uses function linkAt(int) defined in Token
   function compileUnaryOp(Token *&,AST_state &,void(*)(Token *&tok, AST_state &state)) in line 508
      protection public
      17 lines of code
      3 parameters
      4 conditional paths
      uses function f(char) defined in test.cxx
      uses function next() defined in Token
      uses variable depth defined in AST_state
      uses variable AST_MAX_DEPTH defined in tokenlist.cpp
      uses variable op defined in AST_state
      uses function astOperand1(Token *) defined in Token
   function compileBinOp(Token *&,AST_state &,void(*)(Token *&tok, AST_state &state)) in line 526
      protection public
      24 lines of code
      3 parameters
      5 conditional paths
      uses function f(char) defined in test.cxx
      uses function next() defined in Token
      uses variable depth defined in AST_state
      uses variable AST_MAX_DEPTH defined in tokenlist.cpp
      uses variable op defined in AST_state
      uses function astOperand2(Token *) defined in Token
      uses function astOperand1(Token *) defined in Token
      uses function compileExpression(Token *&,AST_state &) defined in tokenlist.cpp
   function compileExpression(Token *&,AST_state &) in line 551
      protection public
      7 lines of code
      2 parameters
      3 conditional paths
      uses variable depth defined in AST_state
      uses variable AST_MAX_DEPTH defined in tokenlist.cpp
      uses function compileComma(Token *&,AST_state &) defined in tokenlist.cpp
   function compileTerm(Token *&,AST_state &) in line 553
      protection public
      58 lines of code
      2 parameters
      21 conditional paths
      uses function next() defined in Token
      uses variable inArrayAssignment defined in AST_state
      uses function str(T &&) defined in Token
      uses function previous() defined in Token
      uses function isLiteral() defined in Token
      uses variable op defined in AST_state
      uses function isName() defined in Token
      uses function compileUnaryOp(Token *&,AST_state &,void(*)(Token *&tok, AST_state &state)) defined in tokenlist.cpp
      uses function compileExpression(Token *&,AST_state &) defined in tokenlist.cpp
      uses variable cpp defined in AST_state
      uses function iscpp11init(const Token *const) defined in tokenlist.cpp
      uses function link(Token *) defined in Token
      uses function linkAt(int) defined in Token
      uses function compileBinOp(Token *&,AST_state &,void(*)(Token *&tok, AST_state &state)) defined in tokenlist.cpp
      uses function strAt(int) defined in Token
   function compileScope(Token *&,AST_state &) in line 612
      protection public
      19 lines of code
      2 parameters
      6 conditional paths
      uses function compileTerm(Token *&,AST_state &) defined in tokenlist.cpp
      uses function str(T &&) defined in Token
      uses function next() defined in Token
      uses function previous() defined in Token
      uses function isName() defined in Token
      uses function link(Token *) defined in Token
      uses function strAt(int) defined in Token
      uses function compileBinOp(Token *&,AST_state &,void(*)(Token *&tok, AST_state &state)) defined in tokenlist.cpp
      uses function compileUnaryOp(Token *&,AST_state &,void(*)(Token *&tok, AST_state &state)) defined in tokenlist.cpp
   function isPrefixUnary(const Token *,bool) in line 632
      protection public
      9 lines of code
      2 parameters
      2 conditional paths
      uses function previous() defined in Token
      uses function strAt(int) defined in Token
      uses function tokType() defined in Token
      uses enumvalue eIncDecOp defined in Token
      uses function iscast(const Token *) defined in tokenlist.cpp
      uses function linkAt(int) defined in Token
   function compilePrecedence2(Token *&,AST_state &) in line 642
      protection public
      70 lines of code
      2 parameters
      17 conditional paths
      uses function compileScope(Token *&,AST_state &) defined in tokenlist.cpp
      uses function tokType() defined in Token
      uses enumvalue eIncDecOp defined in Token
      uses function isPrefixUnary(const Token *,bool) defined in tokenlist.cpp
      uses variable cpp defined in AST_state
      uses function compileUnaryOp(Token *&,AST_state &,void(*)(Token *&tok, AST_state &state)) defined in tokenlist.cpp
      uses function str(T &&) defined in Token
      uses function strAt(int) defined in Token
      uses variable op defined in AST_state
      uses function tokAt(int) defined in Token
      uses function compileBinOp(Token *&,AST_state &,void(*)(Token *&tok, AST_state &state)) defined in tokenlist.cpp
      uses function link(Token *) defined in Token
      uses function next() defined in Token
      uses function astOperand1(Token *) defined in Token
      uses function compileExpression(Token *&,AST_state &) defined in tokenlist.cpp
      uses function iscast(const Token *) defined in tokenlist.cpp
      uses function previous() defined in Token
      uses function isName() defined in Token
      uses function linkAt(int) defined in Token
      uses function iscpp11init(const Token *const) defined in tokenlist.cpp
   function compilePrecedence3(Token *&,AST_state &) in line 713
      protection public
      72 lines of code
      2 parameters
      21 conditional paths
      uses function compilePrecedence2(Token *&,AST_state &) defined in tokenlist.cpp
      uses function tokType() defined in Token
      uses enumvalue eIncDecOp defined in Token
      uses function isPrefixUnary(const Token *,bool) defined in tokenlist.cpp
      uses variable cpp defined in AST_state
      uses function next() defined in Token
      uses function str(T &&) defined in Token
      uses function compileUnaryOp(Token *&,AST_state &,void(*)(Token *&tok, AST_state &state)) defined in tokenlist.cpp
      uses function iscast(const Token *) defined in tokenlist.cpp
      uses function link(Token *) defined in Token
      uses variable op defined in AST_state
      uses function compileBinOp(Token *&,AST_state &,void(*)(Token *&tok, AST_state &state)) defined in tokenlist.cpp
   function compilePointerToElem(Token *&,AST_state &) in line 786
      protection public
      9 lines of code
      2 parameters
      3 conditional paths
      uses function compilePrecedence3(Token *&,AST_state &) defined in tokenlist.cpp
      uses function compileBinOp(Token *&,AST_state &,void(*)(Token *&tok, AST_state &state)) defined in tokenlist.cpp
   function compileMulDiv(Token *&,AST_state &) in line 796
      protection public
      18 lines of code
      2 parameters
      6 conditional paths
      uses function compilePointerToElem(Token *&,AST_state &) defined in tokenlist.cpp
      uses function str(T &&) defined in Token
      uses function astOperand1(Token *) defined in Token
      uses function next() defined in Token
      uses function compileBinOp(Token *&,AST_state &,void(*)(Token *&tok, AST_state &state)) defined in tokenlist.cpp
   function compileAddSub(Token *&,AST_state &) in line 815
      protection public
      9 lines of code
      2 parameters
      3 conditional paths
      uses function compileMulDiv(Token *&,AST_state &) defined in tokenlist.cpp
      uses function astOperand1(Token *) defined in Token
      uses function compileBinOp(Token *&,AST_state &,void(*)(Token *&tok, AST_state &state)) defined in tokenlist.cpp
   function compileShift(Token *&,AST_state &) in line 825
      protection public
      9 lines of code
      2 parameters
      3 conditional paths
      uses function compileAddSub(Token *&,AST_state &) defined in tokenlist.cpp
      uses function compileBinOp(Token *&,AST_state &,void(*)(Token *&tok, AST_state &state)) defined in tokenlist.cpp
   function compileRelComp(Token *&,AST_state &) in line 835
      protection public
      9 lines of code
      2 parameters
      3 conditional paths
      uses function compileShift(Token *&,AST_state &) defined in tokenlist.cpp
      uses function link(Token *) defined in Token
      uses function compileBinOp(Token *&,AST_state &,void(*)(Token *&tok, AST_state &state)) defined in tokenlist.cpp
   function compileEqComp(Token *&,AST_state &) in line 845
      protection public
      9 lines of code
      2 parameters
      3 conditional paths
      uses function compileRelComp(Token *&,AST_state &) defined in tokenlist.cpp
      uses function compileBinOp(Token *&,AST_state &,void(*)(Token *&tok, AST_state &state)) defined in tokenlist.cpp
   function compileAnd(Token *&,AST_state &) in line 855
      protection public
      18 lines of code
      2 parameters
      6 conditional paths
      uses function compileEqComp(Token *&,AST_state &) defined in tokenlist.cpp
      uses function str(T &&) defined in Token
      uses function astOperand1(Token *) defined in Token
      uses function next() defined in Token
      uses variable cpp defined in AST_state
      uses function compileBinOp(Token *&,AST_state &,void(*)(Token *&tok, AST_state &state)) defined in tokenlist.cpp
   function compileXor(Token *&,AST_state &) in line 874
      protection public
      9 lines of code
      2 parameters
      3 conditional paths
      uses function compileAnd(Token *&,AST_state &) defined in tokenlist.cpp
      uses function str(T &&) defined in Token
      uses function compileBinOp(Token *&,AST_state &,void(*)(Token *&tok, AST_state &state)) defined in tokenlist.cpp
   function compileOr(Token *&,AST_state &) in line 884
      protection public
      9 lines of code
      2 parameters
      3 conditional paths
      uses function compileXor(Token *&,AST_state &) defined in tokenlist.cpp
      uses function str(T &&) defined in Token
      uses function compileBinOp(Token *&,AST_state &,void(*)(Token *&tok, AST_state &state)) defined in tokenlist.cpp
   function compileLogicAnd(Token *&,AST_state &) in line 894
      protection public
      9 lines of code
      2 parameters
      3 conditional paths
      uses function compileOr(Token *&,AST_state &) defined in tokenlist.cpp
      uses function str(T &&) defined in Token
      uses function compileBinOp(Token *&,AST_state &,void(*)(Token *&tok, AST_state &state)) defined in tokenlist.cpp
   function compileLogicOr(Token *&,AST_state &) in line 904
      protection public
      9 lines of code
      2 parameters
      3 conditional paths
      uses function compileLogicAnd(Token *&,AST_state &) defined in tokenlist.cpp
      uses function str(T &&) defined in Token
      uses function compileBinOp(Token *&,AST_state &,void(*)(Token *&tok, AST_state &state)) defined in tokenlist.cpp
   function compileAssignTernary(Token *&,AST_state &) in line 914
      protection public
      27 lines of code
      2 parameters
      8 conditional paths
      uses function compileLogicOr(Token *&,AST_state &) defined in tokenlist.cpp
      uses function isAssignmentOp() defined in Token
      uses variable assign defined in AST_state
      uses function compileBinOp(Token *&,AST_state &,void(*)(Token *&tok, AST_state &state)) defined in tokenlist.cpp
      uses function str(T &&) defined in Token
      uses function strAt(int) defined in Token
      uses variable op defined in AST_state
   function compileComma(Token *&,AST_state &) in line 942
      protection public
      9 lines of code
      2 parameters
      3 conditional paths
      uses function compileAssignTernary(Token *&,AST_state &) defined in tokenlist.cpp
      uses function str(T &&) defined in Token
      uses function compileBinOp(Token *&,AST_state &,void(*)(Token *&tok, AST_state &state)) defined in tokenlist.cpp
   function createAstAtToken(Token *,bool) in line 960
      protection public
      110 lines of code
      2 parameters
      27 conditional paths
      uses function tokAt(int) defined in Token
      uses function next() defined in Token
      uses function link(Token *) defined in Token
      uses function str(T &&) defined in Token
      uses function previous() defined in Token
      uses function compileExpression(Token *&,AST_state &) defined in tokenlist.cpp
      uses function astOperand2(Token *) defined in Token
      uses function astOperand1(Token *) defined in Token
      uses function astTop() defined in Token
      uses function isName() defined in Token
      uses function isNumber() defined in Token
      uses function linkAt(int) defined in Token
      uses function astParent() defined in Token
module AST_state
   function AST_state(bool) in line 438
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   variable assign in line 437
      protection public
   variable cpp in line 436
      protection public
   variable depth in line 434
      protection public
   variable inArrayAssignment in line 435
      protection public
   variable op in line 433
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/lib/tokenlist.h
module TokenList
   function addtoken(std::string,const unsigned int,const unsigned int,bool) in line 62
      protection public
      42 lines of code
      4 parameters
      9 conditional paths
      uses variable _back defined in TokenList
      uses function insertToken(const std::string &,const std::string &,bool) defined in Token
      uses variable _front defined in TokenList
      uses function str(T &&) defined in Token
      uses function isCPP() defined in TokenList
      uses function isKeyword(bool) defined in Token
      uses function linenr() defined in Token
      uses function fileIndex() defined in Token
   function addtoken(const Token *,const unsigned int,const unsigned int) in line 63
      protection public
      19 lines of code
      3 parameters
      4 conditional paths
      uses variable _back defined in TokenList
      uses function insertToken(const std::string &,const std::string &,bool) defined in Token
      uses function str(T &&) defined in Token
      uses function originalName() defined in Token
      uses variable _front defined in TokenList
      uses function linenr() defined in Token
      uses function fileIndex() defined in Token
      uses function flags() defined in Token
   function appendFileIfNew(const std::string &) in line 82
      protection public
      22 lines of code
      1 parameters
      5 conditional paths
      uses variable _files defined in TokenList
      uses variable _settings defined in TokenList
      uses variable _isC defined in TokenList
      uses function getSourceFilePath() defined in TokenList
      uses variable _isCPP defined in TokenList
      uses variable enforcedLang defined in Settings
      uses enumvalue C defined in Settings
      uses enumvalue None defined in Settings
      uses enumvalue CPP defined in Settings
   function back() in line 93
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function back() in line 96
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function calculateChecksum() in line 127
      protection public
      22 lines of code
      0 parameters
      6 conditional paths
      uses function front() defined in TokenList
      uses function next() defined in Token
   function createAst() in line 132
      protection public
      6 lines of code
      0 parameters
      2 conditional paths
      uses variable _front defined in TokenList
      uses function next() defined in Token
      uses function isCPP() defined in TokenList
   function createTokens(std::istream &,const std::string &) in line 76
      protection public
      197 lines of code
      2 parameters
      31 conditional paths
      uses function appendFileIfNew(const std::string &) defined in TokenList
      uses variable code defined in extracttests.py
      uses variable macroChar defined in Preprocessor
      uses function addtoken(std::string,const unsigned int,const unsigned int,bool) defined in TokenList
      uses variable _back defined in TokenList
      uses function isExpandedMacro() defined in Token
      uses variable line defined in triage-report.py
      uses function deallocateTokens() defined in TokenList
      uses variable _settings defined in TokenList
      uses function terminated() defined in Settings
      uses variable _front defined in TokenList
      uses function next() defined in Token
      uses variable _files defined in TokenList
      uses variable basePaths defined in Settings
   function deallocateTokens() in line 79
      protection public
      7 lines of code
      0 parameters
      1 conditional paths
      uses function deleteTokens(Token *) defined in TokenList
      uses variable _front defined in TokenList
      uses variable _back defined in TokenList
      uses variable _files defined in TokenList
   function deleteTokens(Token *) in line 60
      protection public
      8 lines of code
      1 parameters
      2 conditional paths
      uses function next() defined in Token
   function file(const Token *) in line 114
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable _files defined in TokenList
      uses function fileIndex() defined in Token
   function fileLine(const Token *) in line 121
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses function stringify() defined in ErrorLogger::ErrorMessage::FileLocation
   function front() in line 85
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function front() in line 88
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function getFiles() in line 105
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function getSourceFilePath() in line 44
      protection public
      7 lines of code
      0 parameters
      2 conditional paths
      uses function getFiles() defined in TokenList
   function insertTokens(Token *,const Token *,unsigned int) in line 65
      protection public
      25 lines of code
      3 parameters
      4 conditional paths
      uses function insertToken(const std::string &,const std::string &,bool) defined in Token
      uses function str(T &&) defined in Token
      uses function originalName() defined in Token
      uses function next() defined in Token
      uses function fileIndex() defined in Token
      uses function linenr() defined in Token
      uses function varId() defined in Token
      uses function tokType() defined in Token
      uses function flags() defined in Token
   function isC() in line 47
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function isCPP() in line 52
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
   function operator=(const TokenList &) in line 154
      1 lines of code
      1 parameters
      1 conditional paths
   function setSettings(const Settings *) in line 39
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function validateAst() in line 138
      protection public
      25 lines of code
      0 parameters
      7 conditional paths
      uses variable _front defined in TokenList
      uses function next() defined in Token
      uses function isAssignmentOp() defined in Token
      uses function isComparisonOp() defined in Token
      uses function astOperand1(Token *) defined in Token
      uses function astOperand2(Token *) defined in Token
      uses enumvalue SYNTAX defined in InternalError
      uses function str(T &&) defined in Token
      uses function astParent() defined in Token
   function validateToken(const Token *) in line 146
      protection public
      10 lines of code
      1 parameters
      4 conditional paths
      uses variable _front defined in TokenList
      uses function next() defined in Token
   function TokenList(const Settings *) in line 36
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
   function ~TokenList() in line 37
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function deallocateTokens() defined in TokenList
   function TokenList(const TokenList &) in line 151
      1 lines of code
      1 parameters
      1 conditional paths
   variable _back in line 157
   variable _files in line 160
   variable _front in line 157
   variable _isC in line 166
   variable _isCPP in line 166
   variable _settings in line 163
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/lib/utils.h
module make_container
   function operator Cont() in line 51
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses variable data_ defined in make_container
   function operator<<(const T &) in line 33
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable data_ defined in make_container
   function operator<<(const Cont &) in line 37
      protection public
      6 lines of code
      1 parameters
      2 conditional paths
      uses variable data_ defined in make_container
   function operator<<(T &&) in line 43
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable data_ defined in make_container
   function operator<<(const char *) in line 47
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable data_ defined in make_container
   variable data_ in line 55
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/lib/valueflow.cpp
module valueflow.cpp
   function execute(const Token *,ProgramMemory *const,MathLib::bigint *,bool *) in line 77
      protection public
      152 lines of code
      4 parameters
      42 conditional paths
      uses variable values defined in Token
      uses variable result defined in triage-report.py
      uses function isNumber() defined in Token
      uses function str(T &&) defined in Token
      uses function varId() defined in Token
      uses function isComparisonOp() defined in Token
      uses function astOperand1(Token *) defined in Token
      uses function astOperand2(Token *) defined in Token
      uses function isArithmeticalOp() defined in Token
      uses function isLiteral() defined in Token
      uses function strValue() defined in Token
   function bailout(TokenList *,ErrorLogger *,const Token *,const std::string &) in line 82
      protection public
      7 lines of code
      4 parameters
      1 conditional paths
      uses enumvalue debug defined in Severity
      uses function reportErr(const ErrorLogger::ErrorMessage &) defined in ErrorLogger
   function bailoutFunctionPar(const Token *,const ValueFlow::Value &,const Settings *,bool *) in line 90
      protection public
      54 lines of code
      4 parameters
      13 conditional paths
      uses function previous() defined in Token
      uses function tokAt(int) defined in Token
      uses function linkAt(int) defined in Token
      uses function str(T &&) defined in Token
      uses function link(Token *) defined in Token
      uses function function(const Function *) defined in Token
      uses variable intvalue defined in ValueFlow::Value
      uses variable library defined in Settings
      uses function isnullargbad(const Token *,int) defined in Library
      uses function isConst() defined in Variable
      uses function isReference() defined in Variable
   function conditionIsFalse(const Token *,const ProgramMemory &) in line 150
      protection public
      15 lines of code
      2 parameters
      3 conditional paths
      uses function str(T &&) defined in Token
      uses function astOperand1(Token *) defined in Token
      uses function astOperand2(Token *) defined in Token
      uses variable result defined in triage-report.py
      uses function execute(const Token *,ProgramMemory *const,MathLib::bigint *,bool *) defined in valueflow.cpp
   function conditionIsTrue(const Token *,const ProgramMemory &) in line 171
      protection public
      15 lines of code
      2 parameters
      3 conditional paths
      uses function str(T &&) defined in Token
      uses function astOperand1(Token *) defined in Token
      uses function astOperand2(Token *) defined in Token
      uses variable result defined in triage-report.py
      uses function execute(const Token *,ProgramMemory *const,MathLib::bigint *,bool *) defined in valueflow.cpp
   function getProgramMemory(const Token *,unsigned int,const ValueFlow::Value &) in line 190
      protection public
      42 lines of code
      3 parameters
      12 conditional paths
      uses variable varId defined in ValueFlow::Value
      uses variable varvalue defined in ValueFlow::Value
      uses function previous() defined in Token
      uses function tokAt(int) defined in Token
      uses function varId() defined in Token
      uses function next() defined in Token
      uses variable result defined in triage-report.py
      uses function execute(const Token *,ProgramMemory *const,MathLib::bigint *,bool *) defined in valueflow.cpp
      uses function link(Token *) defined in Token
      uses function linkAt(int) defined in Token
      uses function conditionIsFalse(const Token *,const ProgramMemory &) defined in valueflow.cpp
      uses function astOperand2(Token *) defined in Token
      uses function conditionIsTrue(const Token *,const ProgramMemory &) defined in valueflow.cpp
   function skipValueInConditionalExpression(const Token *const) in line 240
      protection public
      31 lines of code
      1 parameters
      6 conditional paths
      uses function astParent() defined in Token
      uses function astOperand1(Token *) defined in Token
      uses function str(T &&) defined in Token
      uses function variable(const Variable *) defined in Token
      uses function varId() defined in Token
      uses function astOperand2(Token *) defined in Token
   function bailoutSelfAssignment(const Token *const) in line 272
      protection public
      22 lines of code
      1 parameters
      6 conditional paths
      uses function astParent() defined in Token
      uses function astOperand2(Token *) defined in Token
      uses function astOperand1(Token *) defined in Token
      uses function str(T &&) defined in Token
      uses function varId() defined in Token
   function isReturn(const Token *) in line 295
      protection public
      29 lines of code
      1 parameters
      9 conditional paths
      uses function previous() defined in Token
      uses function link(Token *) defined in Token
      uses function linkAt(int) defined in Token
      uses function tokAt(int) defined in Token
      uses function isName() defined in Token
   function addValue(Token *,const ValueFlow::Value &) in line 326
      protection public
      47 lines of code
      2 parameters
      11 conditional paths
      uses function isKnown() defined in ValueFlow::Value
      uses variable values defined in Token
      uses variable intvalue defined in ValueFlow::Value
      uses variable tokvalue defined in ValueFlow::Value
      uses function str(T &&) defined in Token
      uses variable inconclusive defined in ValueFlow::Value
      uses variable varId defined in ValueFlow::Value
      uses function varId() defined in Token
   function setTokenValue(Token *,const ValueFlow::Value &) in line 375
      protection public
      218 lines of code
      2 parameters
      59 conditional paths
      uses function addValue(Token *,const ValueFlow::Value &) defined in valueflow.cpp
      uses function astParent() defined in Token
      uses function str(T &&) defined in Token
      uses function link(Token *) defined in Token
      uses function astOperand2(Token *) defined in Token
      uses function astOperand1(Token *) defined in Token
      uses function varId() defined in Token
      uses variable varId defined in ValueFlow::Value
      uses function previous() defined in Token
      uses variable conditional defined in ValueFlow::Value
      uses function changeKnownToPossible() defined in ValueFlow::Value
      uses function isArithmeticalOp() defined in Token
      uses function isComparisonOp() defined in Token
      uses function tokType() defined in Token
      uses enumvalue eBitOp defined in Token
      uses enumvalue eString defined in Token
      uses variable result defined in triage-report.py
      uses variable values defined in Token
      uses variable intvalue defined in ValueFlow::Value
      uses variable s defined in extracttests.py
      uses function next() defined in Token
   function valueFlowNumber(TokenList *) in line 594
      protection public
      20 lines of code
      1 parameters
      6 conditional paths
      uses function front() defined in TokenList
      uses function next() defined in Token
      uses enumvalue eChar defined in Token
      uses function setKnown() defined in ValueFlow::Value
      uses function setTokenValue(Token *,const ValueFlow::Value &) defined in valueflow.cpp
      uses function isCPP() defined in TokenList
   function valueFlowString(TokenList *) in line 615
      protection public
      11 lines of code
      1 parameters
      3 conditional paths
      uses function front() defined in TokenList
      uses function next() defined in Token
      uses enumvalue eString defined in Token
      uses variable tokvalue defined in ValueFlow::Value
      uses function setKnown() defined in ValueFlow::Value
      uses function setTokenValue(Token *,const ValueFlow::Value &) defined in valueflow.cpp
   function valueFlowArray(TokenList *) in line 627
      protection public
      47 lines of code
      1 parameters
      7 conditional paths
      uses function front() defined in TokenList
      uses function next() defined in Token
      uses variable tokvalue defined in ValueFlow::Value
      uses function setKnown() defined in ValueFlow::Value
      uses function setTokenValue(Token *,const ValueFlow::Value &) defined in valueflow.cpp
      uses function tokAt(int) defined in Token
      uses function link(Token *) defined in Token
      uses function varId() defined in Token
   function valueFlowPointerAlias(TokenList *) in line 675
      protection public
      29 lines of code
      1 parameters
      8 conditional paths
      uses function front() defined in TokenList
      uses function next() defined in Token
      uses function astOperand1(Token *) defined in Token
      uses function str(T &&) defined in Token
      uses function astOperand2(Token *) defined in Token
      uses function variable(const Variable *) defined in Token
      uses variable tokvalue defined in ValueFlow::Value
      uses function setTokenValue(Token *,const ValueFlow::Value &) defined in valueflow.cpp
   function valueFlowBitAnd(TokenList *) in line 705
      protection public
      27 lines of code
      1 parameters
      8 conditional paths
      uses function front() defined in TokenList
      uses function next() defined in Token
      uses function setTokenValue(Token *,const ValueFlow::Value &) defined in valueflow.cpp
   function valueFlowReverse(TokenList *,Token *,const Token *const,ValueFlow::Value,ValueFlow::Value,ErrorLogger *,const Settings *) in line 733
      protection public
      147 lines of code
      7 parameters
      40 conditional paths
      uses variable intvalue defined in ValueFlow::Value
      uses function variable(const Variable *) defined in Token
      uses function varId() defined in Token
      uses function nameToken() defined in Variable
      uses function previous() defined in Token
      uses variable debugwarnings defined in Settings
      uses function bailout(TokenList *,ErrorLogger *,const Token *,const std::string &) defined in valueflow.cpp
      uses function bailoutSelfAssignment(const Token *const) defined in valueflow.cpp
      uses function str(T &&) defined in Token
      uses function bailoutFunctionPar(const Token *,const ValueFlow::Value &,const Settings *,bool *) defined in valueflow.cpp
      uses variable condition defined in ValueFlow::Value
      uses variable inconclusive defined in ValueFlow::Value
      uses function skipValueInConditionalExpression(const Token *const) defined in valueflow.cpp
      uses function setTokenValue(Token *,const ValueFlow::Value &) defined in valueflow.cpp
      uses function name() defined in Variable
      uses function tokAt(int) defined in Token
      uses function getValue(const MathLib::bigint) defined in Token
      uses function next() defined in Token
      uses function link(Token *) defined in Token
      uses function isVariableChanged(const Token *,const Token *,const unsigned int) defined in astutils.cpp
      uses function isLocal() defined in Variable
      uses function astParent() defined in Token
   function valueFlowBeforeCondition(TokenList *,SymbolDatabase *,ErrorLogger *,const Settings *) in line 881
      protection public
      105 lines of code
      4 parameters
      27 conditional paths
      uses variable functionScopes defined in SymbolDatabase
      uses variable classStart defined in Scope
      uses variable classEnd defined in Scope
      uses function next() defined in Token
      uses function astOperand1(Token *) defined in Token
      uses function astOperand2(Token *) defined in Token
      uses function varId() defined in Token
      uses function variable(const Variable *) defined in Token
      uses function isLocal() defined in Variable
      uses function isArgument() defined in Variable
      uses function isConst() defined in Variable
      uses variable debugwarnings defined in Settings
      uses function bailout(TokenList *,ErrorLogger *,const Token *,const std::string &) defined in valueflow.cpp
      uses function name() defined in Variable
      uses function astParent() defined in Token
      uses function isVariableChanged(const Token *,const Token *,const unsigned int) defined in astutils.cpp
      uses function link(Token *) defined in Token
      uses variable varId defined in ValueFlow::Value
      uses function typeStartToken() defined in Variable
      uses function isUnsigned() defined in Token
      uses function valueFlowReverse(TokenList *,Token *,const Token *const,ValueFlow::Value,ValueFlow::Value,ErrorLogger *,const Settings *) defined in valueflow.cpp
   function removeValues(std::list< ValueFlow::Value > &,const std::list< ValueFlow::Value > &) in line 987
      protection public
      16 lines of code
      2 parameters
      5 conditional paths
   function valueFlowAST(Token *,unsigned int,const ValueFlow::Value &) in line 1004
      protection public
      9 lines of code
      3 parameters
      3 conditional paths
      uses function varId() defined in Token
      uses function setTokenValue(Token *,const ValueFlow::Value &) defined in valueflow.cpp
      uses function astOperand1(Token *) defined in Token
      uses function astOperand2(Token *) defined in Token
   function handleKnownValuesInLoop(const Token *,const Token *,std::list< ValueFlow::Value > *,unsigned int) in line 1015
      protection public
      18 lines of code
      4 parameters
      5 conditional paths
      uses function isVariableChanged(const Token *,const Token *,const unsigned int) defined in astutils.cpp
   function valueFlowForward(Token *const,const Token *const,const Variable *const,const unsigned int,std::list< ValueFlow::Value >,const bool,TokenList *const,ErrorLogger *const,const Settings *const) in line 1034
      protection public
      487 lines of code
      9 parameters
      124 conditional paths
      uses function next() defined in Token
      uses function isReturn(const Token *) defined in valueflow.cpp
      uses function link(Token *) defined in Token
      uses function tokAt(int) defined in Token
      uses function linkAt(int) defined in Token
      uses function previous() defined in Token
      uses function astOperand2(Token *) defined in Token
      uses variable debugwarnings defined in Settings
      uses function bailout(TokenList *,ErrorLogger *,const Token *,const std::string &) defined in valueflow.cpp
      uses function name() defined in Variable
      uses function conditionIsTrue(const Token *,const ProgramMemory &) defined in valueflow.cpp
      uses function getProgramMemory(const Token *,unsigned int,const ValueFlow::Value &) defined in valueflow.cpp
      uses function astParent() defined in Token
      uses function conditionIsFalse(const Token *,const ProgramMemory &) defined in valueflow.cpp
      uses function handleKnownValuesInLoop(const Token *,const Token *,std::list< ValueFlow::Value > *,unsigned int) defined in valueflow.cpp
      uses function isVariableChanged(const Token *,const Token *,const unsigned int) defined in astutils.cpp
      uses function setTokenValue(Token *,const ValueFlow::Value &) defined in valueflow.cpp
      uses variable values defined in Token
      uses function removeValues(std::list< ValueFlow::Value > &,const std::list< ValueFlow::Value > &) defined in valueflow.cpp
      uses function isStatic() defined in Variable
      uses function scope(const Scope *) defined in Token
      uses function str(T &&) defined in Token
      uses variable type defined in Scope
      uses enumvalue eSwitch defined in Scope
      uses variable classEnd defined in Scope
      uses function astOperand1(Token *) defined in Token
      uses variable intvalue defined in ValueFlow::Value
      uses function valueFlowAST(Token *,unsigned int,const ValueFlow::Value &) defined in valueflow.cpp
      uses function skipValueInConditionalExpression(const Token *const) defined in valueflow.cpp
      uses function astTop() defined in Token
      uses function bailoutFunctionPar(const Token *,const ValueFlow::Value &,const Settings *,bool *) defined in valueflow.cpp
   function valueFlowAfterAssign(TokenList *,SymbolDatabase *,ErrorLogger *,const Settings *) in line 1522
      protection public
      38 lines of code
      4 parameters
      9 conditional paths
      uses variable functionScopes defined in SymbolDatabase
      uses variable classStart defined in Scope
      uses variable classEnd defined in Scope
      uses function next() defined in Token
      uses function isLocal() defined in Variable
      uses function isArgument() defined in Variable
      uses function typeStartToken() defined in Variable
      uses function scope(const Scope *) defined in Token
      uses function isStatic() defined in Variable
      uses function nameToken() defined in Variable
      uses function astOperand1(Token *) defined in Token
      uses function valueFlowForward(Token *const,const Token *const,const Variable *const,const unsigned int,std::list< ValueFlow::Value >,const bool,TokenList *const,ErrorLogger *const,const Settings *const) defined in valueflow.cpp
   function valueFlowAfterCondition(TokenList *,SymbolDatabase *,ErrorLogger *,const Settings *) in line 1561
      protection public
      162 lines of code
      4 parameters
      43 conditional paths
      uses variable functionScopes defined in SymbolDatabase
      uses variable classStart defined in Scope
      uses variable classEnd defined in Scope
      uses function next() defined in Token
      uses function astOperand1(Token *) defined in Token
      uses function astOperand2(Token *) defined in Token
      uses function str(T &&) defined in Token
      uses function isName() defined in Token
      uses function isNumber() defined in Token
      uses function varId() defined in Token
      uses function variable(const Variable *) defined in Token
      uses function isLocal() defined in Variable
      uses function isArgument() defined in Variable
      uses function astParent() defined in Token
      uses function setTokenValue(Token *,const ValueFlow::Value &) defined in valueflow.cpp
      uses function astTop() defined in Token
      uses function previous() defined in Token
      uses function isExpandedMacro() defined in Token
      uses function isVariableChanged(const Token *,const Token *,const unsigned int) defined in astutils.cpp
      uses function link(Token *) defined in Token
      uses variable debugwarnings defined in Settings
      uses function bailout(TokenList *,ErrorLogger *,const Token *,const std::string &) defined in valueflow.cpp
      uses function valueFlowForward(Token *const,const Token *const,const Variable *const,const unsigned int,std::list< ValueFlow::Value >,const bool,TokenList *const,ErrorLogger *const,const Settings *const) defined in valueflow.cpp
      uses function name() defined in Variable
      uses variable library defined in Settings
      uses function isScopeNoReturn(const Token *,std::string *) defined in Library
      uses function isReturn(const Token *) defined in valueflow.cpp
      uses function linkAt(int) defined in Token
      uses function tokAt(int) defined in Token
      uses function scope(const Scope *) defined in Token
   function valueFlowForLoop1(const Token *,unsigned int *const,MathLib::bigint *const,MathLib::bigint *const,MathLib::bigint *const) in line 1877
      protection public
      37 lines of code
      5 parameters
      12 conditional paths
      uses function tokAt(int) defined in Token
      uses function next() defined in Token
      uses function varId() defined in Token
      uses function str(T &&) defined in Token
      uses function link(Token *) defined in Token
      uses function astOperand2(Token *) defined in Token
      uses function astOperand1(Token *) defined in Token
   function valueFlowForLoop2(const Token *,ProgramMemory *,ProgramMemory *,ProgramMemory *) in line 1915
      protection public
      53 lines of code
      4 parameters
      9 conditional paths
      uses function next() defined in Token
      uses function astOperand2(Token *) defined in Token
      uses variable result defined in triage-report.py
      uses function execute(const Token *,ProgramMemory *const,MathLib::bigint *,bool *) defined in valueflow.cpp
      uses function str(T &&) defined in Token
      uses function astOperand1(Token *) defined in Token
   function valueFlowForLoopSimplify(Token *const,const unsigned int,const MathLib::bigint,TokenList *,ErrorLogger *,const Settings *) in line 1969
      protection public
      76 lines of code
      6 parameters
      23 conditional paths
      uses function link(Token *) defined in Token
      uses function isVariableChanged(const Token *,const Token *,const unsigned int) defined in astutils.cpp
      uses function next() defined in Token
      uses function astParent() defined in Token
      uses function str(T &&) defined in Token
      uses function astOperand2(Token *) defined in Token
      uses variable debugwarnings defined in Settings
      uses function bailout(TokenList *,ErrorLogger *,const Token *,const std::string &) defined in valueflow.cpp
      uses variable varId defined in ValueFlow::Value
      uses function setTokenValue(Token *,const ValueFlow::Value &) defined in valueflow.cpp
      uses function getProgramMemory(const Token *,unsigned int,const ValueFlow::Value &) defined in valueflow.cpp
      uses function conditionIsFalse(const Token *,const ProgramMemory &) defined in valueflow.cpp
      uses function conditionIsTrue(const Token *,const ProgramMemory &) defined in valueflow.cpp
   function valueFlowForLoopSimplifyAfter(Token *,unsigned int,const MathLib::bigint,TokenList *,ErrorLogger *,const Settings *) in line 2046
      protection public
      32 lines of code
      6 parameters
      5 conditional paths
      uses function next() defined in Token
      uses function variable(const Variable *) defined in Token
      uses function isLocal() defined in Variable
      uses function typeStartToken() defined in Variable
      uses function scope(const Scope *) defined in Token
      uses function valueFlowForward(Token *const,const Token *const,const Variable *const,const unsigned int,std::list< ValueFlow::Value >,const bool,TokenList *const,ErrorLogger *const,const Settings *const) defined in valueflow.cpp
      uses function linkAt(int) defined in Token
   function valueFlowForLoop(TokenList *,SymbolDatabase *,ErrorLogger *,const Settings *) in line 2079
      protection public
      37 lines of code
      4 parameters
      10 conditional paths
      uses variable scopeList defined in SymbolDatabase
      uses enumvalue eFor defined in Scope
      uses function next() defined in Token
      uses function astOperand2(Token *) defined in Token
      uses function valueFlowForLoop1(const Token *,unsigned int *const,MathLib::bigint *const,MathLib::bigint *const,MathLib::bigint *const) defined in valueflow.cpp
      uses function valueFlowForLoopSimplify(Token *const,const unsigned int,const MathLib::bigint,TokenList *,ErrorLogger *,const Settings *) defined in valueflow.cpp
      uses function valueFlowForLoopSimplifyAfter(Token *,unsigned int,const MathLib::bigint,TokenList *,ErrorLogger *,const Settings *) defined in valueflow.cpp
      uses function valueFlowForLoop2(const Token *,ProgramMemory *,ProgramMemory *,ProgramMemory *) defined in valueflow.cpp
   function valueFlowInjectParameter(TokenList *,ErrorLogger *,const Settings *,const Variable *,const Scope *,const std::list< ValueFlow::Value > &) in line 2117
      protection public
      13 lines of code
      6 parameters
      3 conditional paths
      uses function isReference() defined in Variable
      uses function isConst() defined in Variable
      uses function isClass() defined in Variable
      uses function declarationId() defined in Variable
      uses function valueFlowForward(Token *const,const Token *const,const Variable *const,const unsigned int,std::list< ValueFlow::Value >,const bool,TokenList *const,ErrorLogger *const,const Settings *const) defined in valueflow.cpp
      uses variable classStart defined in Scope
      uses function next() defined in Token
      uses variable classEnd defined in Scope
   function valueFlowSwitchVariable(TokenList *,SymbolDatabase *,ErrorLogger *,const Settings *) in line 2131
      protection public
      49 lines of code
      4 parameters
      13 conditional paths
      uses variable scopeList defined in SymbolDatabase
      uses function tokAt(int) defined in Token
      uses function variable(const Variable *) defined in Token
      uses function isLocal() defined in Variable
      uses function isArgument() defined in Variable
      uses function isConst() defined in Variable
      uses variable debugwarnings defined in Settings
      uses function bailout(TokenList *,ErrorLogger *,const Token *,const std::string &) defined in valueflow.cpp
      uses function name() defined in Variable
      uses function next() defined in Token
      uses function valueFlowReverse(TokenList *,Token *,const Token *const,ValueFlow::Value,ValueFlow::Value,ErrorLogger *,const Settings *) defined in valueflow.cpp
      uses function valueFlowForward(Token *const,const Token *const,const Variable *const,const unsigned int,std::list< ValueFlow::Value >,const bool,TokenList *const,ErrorLogger *const,const Settings *const) defined in valueflow.cpp
      uses function varId() defined in Token
   function valueFlowSubFunction(TokenList *,ErrorLogger *,const Settings *) in line 2181
      protection public
      53 lines of code
      3 parameters
      11 conditional paths
      uses function front() defined in TokenList
      uses function next() defined in Token
      uses variable functionScope defined in Function
      uses function tokAt(int) defined in Token
      uses function nextArgument() defined in Token
      uses function getArgumentVar(std::size_t) defined in Function
      uses function astParent() defined in Token
      uses variable values defined in Token
      uses function valueFlowInjectParameter(TokenList *,ErrorLogger *,const Settings *,const Variable *,const Scope *,const std::list< ValueFlow::Value > &) defined in valueflow.cpp
   function valueFlowFunctionDefaultParameter(TokenList *,SymbolDatabase *,ErrorLogger *,const Settings *) in line 2235
      protection public
      29 lines of code
      4 parameters
      9 conditional paths
      uses function isCPP() defined in TokenList
      uses variable functionScopes defined in SymbolDatabase
      uses variable function defined in Scope
      uses function hasDefault() defined in Variable
      uses function nameToken() defined in Variable
      uses function tokAt(int) defined in Token
      uses variable values defined in Token
      uses variable defaultArg defined in ValueFlow::Value
      uses function changeKnownToPossible() defined in ValueFlow::Value
      uses function isPossible() defined in ValueFlow::Value
      uses function valueFlowInjectParameter(TokenList *,ErrorLogger *,const Settings *,const Variable *,const Scope *,const std::list< ValueFlow::Value > &) defined in valueflow.cpp
   function constval(const Token *) in line 2265
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable values defined in Token
   function valueFlowFunctionReturn(TokenList *,ErrorLogger *,const Settings *) in line 2270
      protection public
      58 lines of code
      3 parameters
      14 conditional paths
      uses function front() defined in TokenList
      uses function next() defined in Token
      uses function astOperand2(Token *) defined in Token
      uses function str(T &&) defined in Token
      uses function constval(const Token *) defined in valueflow.cpp
      uses function astOperand1(Token *) defined in Token
      uses variable values defined in Token
      uses function astParent() defined in Token
      uses variable classStart defined in Scope
      uses variable debugwarnings defined in Settings
      uses function bailout(TokenList *,ErrorLogger *,const Token *,const std::string &) defined in valueflow.cpp
      uses function typeStartToken() defined in Variable
      uses function declarationId() defined in Variable
      uses variable result defined in triage-report.py
      uses function execute(const Token *,ProgramMemory *const,MathLib::bigint *,bool *) defined in valueflow.cpp
      uses function setTokenValue(Token *,const ValueFlow::Value &) defined in valueflow.cpp
module @198::ProgramMemory
   variable intvalues in line 31
      protection public
   variable tokvalues in line 32
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/lib/valueflow.h
module valueflow.h
   function setValues(TokenList *,SymbolDatabase *,ErrorLogger *,const Settings *) in line 97
      protection public
      19 lines of code
      4 parameters
      2 conditional paths
      uses function front() defined in TokenList
      uses function next() defined in Token
   function eitherTheConditionIsRedundant(const Token *) in line 99
      protection public
      15 lines of code
      1 parameters
      5 conditional paths
      uses function str(T &&) defined in Token
      uses function expressionString() defined in Token
module ValueFlow::Value
   function changeKnownToPossible() in line 91
      protection public
      4 lines of code
      0 parameters
      2 conditional paths
      uses function setValues(TokenList *,SymbolDatabase *,ErrorLogger *,const Settings *) defined in valueflow.h
      uses function eitherTheConditionIsRedundant(const Token *) defined in valueflow.h
   function isKnown() in line 79
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function isPossible() in line 87
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function setKnown() in line 75
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function setPossible() in line 83
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
   function Value(long long) in line 36
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function Value(const Token *,long long) in line 37
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   variable condition in line 49
      protection public
   variable conditional in line 55
      protection public
   variable defaultArg in line 61
      protection public
   variable inconclusive in line 58
      protection public
   variable intvalue in line 40
      protection public
   variable tokvalue in line 43
      protection public
   variable valueKind in line 73
      protection public
   variable varId in line 52
      protection public
   variable varvalue in line 46
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/lib/version.h
module version.h
   macro definition CPPCHECK_MAJOR in line 1
      protection public
   macro definition CPPCHECK_MINOR in line 2
      protection public
   macro definition CPPCHECK_DEVMINOR in line 3
      protection public
   macro definition STRINGIFY in line 5
      protection public
   macro definition STRING in line 6
      protection public
   macro definition CPPCHECK_VERSION_STRING in line 8
      protection public
   macro definition CPPCHECK_VERSION in line 9
      protection public
   macro definition LEGALCOPYRIGHT in line 14
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/readme.md
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/tools/readme.md
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/samples/arrayIndexOutOfBounds/bad.c
module arrayIndexOutOfBounds/bad.c
   function main() in line 1
      protection public
      8 lines of code
      0 parameters
      1 conditional paths
      uses variable a defined in daca2-report.py
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/samples/AssignmentAddressToInteger/bad.c
module AssignmentAddressToInteger/bad.c
   function foo(int *) in line 1
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable a defined in daca2-report.py
   function main() in line 7
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
      uses function foo(int *) defined in AssignmentAddressToInteger/bad.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/samples/autoVariables/bad.c
module autoVariables/bad.c
   function foo(int **) in line 1
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable a defined in daca2-report.py
   function main() in line 7
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
      uses function foo(int *) defined in AssignmentAddressToInteger/bad.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/samples/bufferAccessOutOfBounds/bad.c
module bufferAccessOutOfBounds/bad.c
   function main() in line 1
      protection public
      8 lines of code
      0 parameters
      2 conditional paths
      uses variable a defined in daca2-report.py
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/samples/memleak/bad.c
module memleak/bad.c
   function main() in line 2
      protection public
      8 lines of code
      0 parameters
      1 conditional paths
      uses variable result defined in triage-report.py
      uses variable a defined in daca2-report.py
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/samples/outOfBounds/bad.c
module outOfBounds/bad.c
   function main() in line 2
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/samples/resourceLeak/bad.c
module resourceLeak/bad.c
   function main() in line 2
      protection public
      8 lines of code
      0 parameters
      2 conditional paths
      uses variable a defined in daca2-report.py
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/samples/syntaxError/bad.c
module syntaxError/bad.c
   function main() in line 1
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/samples/arrayIndexOutOfBounds/good.c
module arrayIndexOutOfBounds/good.c
   function main() in line 1
      protection public
      8 lines of code
      0 parameters
      1 conditional paths
      uses variable a defined in daca2-report.py
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/samples/AssignmentAddressToInteger/good.c
module AssignmentAddressToInteger/good.c
   function foo(int *) in line 1
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function main() in line 6
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
      uses function foo(int *) defined in AssignmentAddressToInteger/good.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/samples/autoVariables/good.c
module autoVariables/good.c
   function foo(int **) in line 1
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable a defined in daca2-report.py
   function main() in line 7
      protection public
      6 lines of code
      0 parameters
      1 conditional paths
      uses function foo(int *) defined in AssignmentAddressToInteger/good.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/samples/bufferAccessOutOfBounds/good.c
module bufferAccessOutOfBounds/good.c
   function main() in line 1
      protection public
      8 lines of code
      0 parameters
      2 conditional paths
      uses variable a defined in daca2-report.py
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/samples/memleak/good.c
module memleak/good.c
   function main() in line 2
      protection public
      9 lines of code
      0 parameters
      1 conditional paths
      uses variable result defined in triage-report.py
      uses variable a defined in daca2-report.py
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/samples/outOfBounds/good.c
module outOfBounds/good.c
   function main() in line 2
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/samples/resourceLeak/good.c
module resourceLeak/good.c
   function main() in line 2
      protection public
      8 lines of code
      0 parameters
      2 conditional paths
      uses variable a defined in daca2-report.py
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/samples/syntaxError/good.c
module syntaxError/good.c
   function main() in line 1
      protection public
      5 lines of code
      0 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/samples/erase/bad.cpp
module bad.cpp
   function main() in line 2
      protection public
      13 lines of code
      0 parameters
      3 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/samples/erase/good.cpp
module good.cpp
   function main() in line 2
      protection public
      15 lines of code
      0 parameters
      3 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/test/cfg/gnu.c
module gnu.c
   function leakReturnValNotUsed() in line 12
      protection public
      18 lines of code
      0 parameters
      2 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/test/cfg/posix.c
module posix.c
   function bufferAccessOutOfBounds(int) in line 22
      protection public
      24 lines of code
      1 parameters
      1 conditional paths
      uses variable a defined in daca2-report.py
   function nullPointer(char *) in line 47
      protection public
      13 lines of code
      1 parameters
      1 conditional paths
   function memleak_getaddrinfo() in line 61
      protection public
      7 lines of code
      0 parameters
      1 conditional paths
      uses variable res defined in naming.py
   function memleak_mmap(int) in line 69
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function resourceLeak_fdopendir(int) in line 83
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function resourceLeak_opendir(void) in line 90
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function resourceLeak_socket(void) in line 97
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses variable s defined in extracttests.py
   function noleak(int,int,int) in line 104
      protection public
      15 lines of code
      3 parameters
      1 conditional paths
      uses variable s defined in extracttests.py
   function ignoredReturnValue(void *,int) in line 123
      protection public
      10 lines of code
      2 parameters
      1 conditional paths
   function invalidFunctionArg() in line 137
      protection public
      13 lines of code
      0 parameters
      1 conditional paths
   function uninitvar(int) in line 151
      protection public
      44 lines of code
      1 parameters
      1 conditional paths
      uses variable filename defined in extracttests.py
   function uninitvar_getcwd(void) in line 196
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_types(void) in line 205
      protection public
      11 lines of code
      1 parameters
      1 conditional paths
   function timet_h(struct timespec *) in line 217
      protection public
      23 lines of code
      1 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/test/cfg/std.c
module std.c
   function bufferAccessOutOfBounds(void) in line 26
      protection public
      32 lines of code
      1 parameters
      1 conditional paths
      uses variable a defined in daca2-report.py
   function ignoreleak(void) in line 61
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function nullpointer(int) in line 70
      protection public
      103 lines of code
      1 parameters
      1 conditional paths
      uses variable res defined in naming.py
   function nullpointerMemchr1(char *,char *) in line 174
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses variable s defined in extracttests.py
   function nullpointerMemchr2(char *,char *) in line 180
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses variable s defined in extracttests.py
   function nullPointer_memchr(char *) in line 186
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses variable s defined in extracttests.py
   function nullPointer_memcmp(char *) in line 194
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
   function nullPointer_wmemcmp(wchar_t *) in line 200
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
   function uninivar_abs(void) in line 208
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function uninit_clearerr(void) in line 215
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function uninit_fclose(void) in line 222
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function uninit_fopen(void) in line 229
      protection public
      11 lines of code
      1 parameters
      1 conditional paths
      uses variable filename defined in extracttests.py
   function uninit_feof(void) in line 241
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
   function uninit_ferror(void) in line 249
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
   function uninit_fflush(void) in line 257
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function uninit_fgetc(void) in line 264
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function uninit_fgetpos(void) in line 271
      protection public
      13 lines of code
      1 parameters
      1 conditional paths
   function uninit_fsetpos(void) in line 285
      protection public
      13 lines of code
      1 parameters
      1 conditional paths
   function uninit_fgets(void) in line 299
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
   function uninit_fputc(void) in line 314
      protection public
      13 lines of code
      1 parameters
      1 conditional paths
   function uninit_fputs(void) in line 328
      protection public
      13 lines of code
      1 parameters
      1 conditional paths
      uses variable s defined in extracttests.py
   function uninit_ftell(void) in line 342
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function uninit_puts(void) in line 349
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses variable s defined in extracttests.py
   function uninit_putchar(void) in line 356
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_cproj(void) in line 363
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_creal(void) in line 378
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_acos(void) in line 393
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
      uses function f(char) defined in test.cxx
   function uninitvar_acosh(void) in line 408
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
      uses function f(char) defined in test.cxx
   function uninitvar_asctime(void) in line 423
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_sqrt(void) in line 440
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
      uses function f(char) defined in test.cxx
   function uninitvar_csqrt(void) in line 455
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_sinh(void) in line 470
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
      uses function f(char) defined in test.cxx
   function uninitvar_sin(void) in line 485
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
      uses function f(char) defined in test.cxx
   function uninitvar_csin(void) in line 500
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_csinh(void) in line 515
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_asin(void) in line 530
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
      uses function f(char) defined in test.cxx
   function uninitvar_casin(void) in line 545
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_asinh(void) in line 560
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
      uses function f(char) defined in test.cxx
   function uninitvar_casinh(void) in line 575
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_wcsftime(wchar_t *) in line 590
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_tan(void) in line 599
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
      uses function f(char) defined in test.cxx
   function uninitvar_ctan(void) in line 614
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_tanh(void) in line 629
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
      uses function f(char) defined in test.cxx
   function uninitvar_ctanh(void) in line 644
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_feclearexcept(void) in line 659
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_fegetexceptflag(fexcept_t *) in line 666
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_feraiseexcept(void) in line 673
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_fesetenv(void) in line 680
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_fesetround(void) in line 687
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_fetestexcept(void) in line 694
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_feupdateenv(void) in line 701
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_atan(void) in line 708
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
      uses function f(char) defined in test.cxx
   function uninitvar_catan(void) in line 723
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_tgamma(void) in line 738
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
      uses function f(char) defined in test.cxx
   function uninitvar_trunc(void) in line 753
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
      uses function f(char) defined in test.cxx
   function uninitvar_atanh(void) in line 768
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
      uses function f(char) defined in test.cxx
   function uninitvar_catanh(void) in line 783
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_atan2(void) in line 798
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
      uses variable f2 defined in daca2-report.py
   function uninitvar_atof(void) in line 813
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_atol(void) in line 820
      protection public
      12 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_calloc(void) in line 833
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_ceil(void) in line 842
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
      uses function f(char) defined in test.cxx
   function uninitvar_copysign(void) in line 857
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
      uses variable f2 defined in daca2-report.py
   function uninitvar_cbrt(void) in line 872
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
      uses function f(char) defined in test.cxx
   function uninitvar_cos(void) in line 887
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
      uses function f(char) defined in test.cxx
   function uninitvar_clearerr(void) in line 902
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_ccos(void) in line 909
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_cosh(void) in line 924
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
      uses function f(char) defined in test.cxx
   function uninitvar_ccosh(void) in line 939
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_ctime(void) in line 954
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_difftime(void) in line 961
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_div(void) in line 968
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_exit(void) in line 976
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_erf(void) in line 983
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
      uses function f(char) defined in test.cxx
   function uninitvar_erfc(void) in line 998
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
      uses function f(char) defined in test.cxx
   function uninitvar_carg(void) in line 1013
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_exp(void) in line 1028
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
      uses function f(char) defined in test.cxx
   function uninitvar_cexp(void) in line 1043
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_cimag(void) in line 1058
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_exp2(void) in line 1073
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
      uses function f(char) defined in test.cxx
   function uninitvar_expm1(void) in line 1088
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
      uses function f(char) defined in test.cxx
   function uninitvar_fabs(void) in line 1103
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
      uses function f(char) defined in test.cxx
   function uninitvar_fdim(void) in line 1118
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
      uses variable f2 defined in daca2-report.py
   function uninitvar_fclose(void) in line 1133
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_feof(void) in line 1140
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_ferror(void) in line 1147
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_fflush(void) in line 1154
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_fgetc(void) in line 1161
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_fgetwc(void) in line 1168
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_fgetpos(void) in line 1175
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_floor(void) in line 1183
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
      uses function f(char) defined in test.cxx
   function uninitvar_fma(void) in line 1198
      protection public
      17 lines of code
      1 parameters
      1 conditional paths
      uses variable f2 defined in daca2-report.py
   function uninitvar_fmax(void) in line 1216
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
      uses variable f2 defined in daca2-report.py
   function uninitvar_fmin(void) in line 1231
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
      uses variable f2 defined in daca2-report.py
   function uninitvar_fmod(void) in line 1246
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
      uses variable f2 defined in daca2-report.py
   function uninitar_fopen(void) in line 1261
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses variable filename defined in extracttests.py
   function uninitar_fprintf(FILE *,char *,int) in line 1270
      protection public
      17 lines of code
      3 parameters
      1 conditional paths
      uses enumvalue Argument defined in symboldatabase.h
   function uninitar_vfprintf(FILE *,const char *,va_list) in line 1288
      protection public
      18 lines of code
      3 parameters
      1 conditional paths
   function uninitar_vfwprintf(FILE *,wchar_t *,va_list) in line 1307
      protection public
      18 lines of code
      3 parameters
      1 conditional paths
   function uninitvar_fputc(void) in line 1326
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_fputwc(void) in line 1334
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_fputs(void) in line 1342
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_fputws(void) in line 1350
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_fread(void) in line 1358
      protection public
      9 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_free(void) in line 1368
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_freopen(void) in line 1376
      protection public
      9 lines of code
      1 parameters
      1 conditional paths
      uses variable filename defined in extracttests.py
   function uninitvar_frexp(void) in line 1386
      protection public
      17 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_hypot(void) in line 1404
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
      uses variable f2 defined in daca2-report.py
   function uninitvar_fscanf(void) in line 1419
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_vfscanf(void) in line 1428
      protection public
      9 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_vfwscanf(void) in line 1438
      protection public
      9 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_fseek(void) in line 1448
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_fsetpos(void) in line 1457
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_fgets(void) in line 1465
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_fgetws(void) in line 1474
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_ftell(void) in line 1483
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_fwide(void) in line 1490
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_fwrite(void) in line 1498
      protection public
      9 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_mblen(void) in line 1508
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_mbtowc(void) in line 1516
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_mbrlen(const char *,size_t,mbstate_t *) in line 1525
      protection public
      16 lines of code
      3 parameters
      1 conditional paths
      uses variable s defined in extracttests.py
   function uninitvar_btowc(void) in line 1542
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_mbsinit(void) in line 1549
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_mbstowcs(void) in line 1556
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses variable s defined in extracttests.py
   function uninitvar_mbsrtowcs(void) in line 1565
      protection public
      9 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_wctob(void) in line 1575
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_wctomb(void) in line 1582
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses variable s defined in extracttests.py
   function uninitvar_wcstombs(void) in line 1590
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_getc(void) in line 1599
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_getwc(void) in line 1606
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_ungetc(void) in line 1613
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_ungetwc(void) in line 1621
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_getenv(void) in line 1629
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses variable name defined in setup.py
   function uninitvar_gets(void) in line 1636
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_gmtime(void) in line 1644
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_isalnum(void) in line 1651
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_iswalnum(void) in line 1658
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_isalpha(void) in line 1665
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_iswalpha(void) in line 1672
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_isblank(void) in line 1679
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_iswblank(void) in line 1686
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_iscntrl(void) in line 1693
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_iswcntrl(void) in line 1700
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_iswctype(void) in line 1707
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_isdigit(void) in line 1715
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_iswdigit(void) in line 1722
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_isgraph(void) in line 1729
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_iswgraph(void) in line 1736
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_islower(void) in line 1743
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_iswlower(void) in line 1750
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_isprint(void) in line 1757
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_iswprint(void) in line 1764
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_ispunct(void) in line 1771
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_iswpunct(void) in line 1778
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_isspace(void) in line 1785
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_iswspace(void) in line 1792
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_isupper(void) in line 1799
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_iswupper(void) in line 1806
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_isxdigit(void) in line 1813
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_iswxdigit(void) in line 1820
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_towctrans(void) in line 1827
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_towlower(void) in line 1835
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_towupper(void) in line 1842
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_wctrans(void) in line 1849
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_wctype(void) in line 1856
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function ignoreretrn(void) in line 1863
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_cabs(void) in line 1870
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_cacos(void) in line 1885
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_cacosh(void) in line 1900
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_labs(void) in line 1915
      protection public
      10 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_ldexp(void) in line 1926
      protection public
      17 lines of code
      1 parameters
      1 conditional paths
      uses function f(char) defined in test.cxx
   function uninitvar_lgamma(void) in line 1944
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
      uses function f(char) defined in test.cxx
   function uninitvar_rint(void) in line 1959
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
      uses function f(char) defined in test.cxx
   function uninitvar_lrint(void) in line 1974
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
      uses function f(char) defined in test.cxx
   function uninitvar_llrint(void) in line 1989
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
      uses function f(char) defined in test.cxx
   function uninitvar_lround(void) in line 2004
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
      uses function f(char) defined in test.cxx
   function uninitvar_llround(void) in line 2019
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
      uses function f(char) defined in test.cxx
   function uninitvar_srand(void) in line 2034
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_ldiv(void) in line 2041
      protection public
      12 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_localtime(void) in line 2054
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_log(void) in line 2061
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
      uses function f(char) defined in test.cxx
   function uninitvar_clog(void) in line 2076
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_conj(void) in line 2091
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_fpclassify(void) in line 2106
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
      uses function f(char) defined in test.cxx
   function uninitvar_isfinite(void) in line 2121
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
      uses function f(char) defined in test.cxx
   function uninitvar_isgreater(void) in line 2136
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
      uses variable f2 defined in daca2-report.py
   function uninitvar_isgreaterequal(void) in line 2151
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
      uses variable f2 defined in daca2-report.py
   function uninitvar_isinf(void) in line 2166
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
      uses function f(char) defined in test.cxx
   function uninitvar_logb(void) in line 2181
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
      uses function f(char) defined in test.cxx
   function uninitvar_isless(void) in line 2196
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
      uses variable f2 defined in daca2-report.py
   function uninitvar_islessequal(void) in line 2211
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
      uses variable f2 defined in daca2-report.py
   function uninitvar_islessgreater(void) in line 2226
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
      uses variable f2 defined in daca2-report.py
   function uninitvar_nan(void) in line 2241
      protection public
      10 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_isnan(void) in line 2252
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_isnormal(void) in line 2259
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_isunordered(void) in line 2266
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_ilogb(void) in line 2273
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
      uses function f(char) defined in test.cxx
   function uninitvar_log10(void) in line 2288
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
      uses function f(char) defined in test.cxx
   function uninitvar_log1p(void) in line 2303
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
      uses function f(char) defined in test.cxx
   function uninitvar_log2(void) in line 2318
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
      uses function f(char) defined in test.cxx
   function uninitvar_nearbyint(void) in line 2333
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
      uses function f(char) defined in test.cxx
   function uninitvar_nextafter(void) in line 2348
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
      uses variable f2 defined in daca2-report.py
   function uninitvar_nexttoward(void) in line 2363
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
      uses variable f2 defined in daca2-report.py
   function uninitvar_longjmp(void) in line 2378
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_malloc(void) in line 2386
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_alloca(void) in line 2394
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_memchr(void) in line 2402
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_wmemchr(void) in line 2411
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_memcmp(void) in line 2420
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_wmemcmp(void) in line 2429
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_memcpy(void) in line 2438
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_wmemcpy(void) in line 2447
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_memmove(void) in line 2456
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_wmemmove(void) in line 2465
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_memset(void) in line 2474
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses variable s defined in extracttests.py
   function uninitvar_wmemset(void) in line 2483
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_mktime(void) in line 2492
      protection public
      10 lines of code
      1 parameters
      1 conditional paths
   function uninivar_modf(void) in line 2503
      protection public
      17 lines of code
      1 parameters
      1 conditional paths
      uses variable f2 defined in daca2-report.py
   function uninivar_perror(void) in line 2521
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_pow(void) in line 2528
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
      uses variable f2 defined in daca2-report.py
   function uninitvar_cpow(void) in line 2543
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
      uses variable f2 defined in daca2-report.py
   function uninitvar_remainder(void) in line 2558
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
      uses variable f2 defined in daca2-report.py
   function uninitvar_remquo(void) in line 2573
      protection public
      17 lines of code
      1 parameters
      1 conditional paths
      uses variable f2 defined in daca2-report.py
   function uninivar_printf(char *,int) in line 2591
      protection public
      18 lines of code
      2 parameters
      1 conditional paths
      uses enumvalue Argument defined in symboldatabase.h
   function uninivar_vprintf(char *,va_list) in line 2610
      protection public
      15 lines of code
      2 parameters
      1 conditional paths
   function uninivar_vwprintf(wchar_t *,va_list) in line 2626
      protection public
      15 lines of code
      2 parameters
      1 conditional paths
   function uninivar_bsearch(void) in line 2642
      protection public
      9 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_qsort(void) in line 2652
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_putc(void) in line 2661
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_putwc(void) in line 2669
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_putchar(void) in line 2677
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_putwchar(void) in line 2684
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_puts(void) in line 2691
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses variable s defined in extracttests.py
   function uninitvar_realloc(void) in line 2698
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_remove(void) in line 2707
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses variable s defined in extracttests.py
   function uninitvar_rename(void) in line 2714
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_rewind(void) in line 2722
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses function f(char) defined in test.cxx
   function uninitvar_round(void) in line 2729
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
      uses function f(char) defined in test.cxx
   function uninivar_scalbn(void) in line 2744
      protection public
      17 lines of code
      1 parameters
      1 conditional paths
      uses function f(char) defined in test.cxx
   function uninivar_scalbln(void) in line 2762
      protection public
      17 lines of code
      1 parameters
      1 conditional paths
      uses function f(char) defined in test.cxx
   function uninitvar_signbit(void) in line 2780
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function uninivar_signal(void) in line 2787
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function uninivar_raise(void) in line 2794
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function uninivar_scanf(void) in line 2801
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
   function uninivar_vsscanf(void) in line 2809
      protection public
      9 lines of code
      1 parameters
      1 conditional paths
      uses variable s defined in extracttests.py
   function uninivar_vswscanf(void) in line 2819
      protection public
      9 lines of code
      1 parameters
      1 conditional paths
      uses variable s defined in extracttests.py
   function uninivar_vscanf(void) in line 2829
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
   function uninivar_vwscanf(void) in line 2838
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
   function uninivar_setbuf(void) in line 2847
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
   function uninivar_setvbuf(void) in line 2855
      protection public
      9 lines of code
      1 parameters
      1 conditional paths
   function uninivar_strcat(void) in line 2865
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
   function uninivar_wcscat(void) in line 2873
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
   function uninivar_wcrtomb(void) in line 2881
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses variable s defined in extracttests.py
   function uninivar_strchr(void) in line 2890
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
   function uninivar_wcschr(void) in line 2898
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
   function uninivar_strcmp(void) in line 2906
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
   function uninivar_wcscmp(void) in line 2914
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
   function uninivar_strcpy(void) in line 2922
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
   function uninivar_wcscpy(void) in line 2930
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
   function uninivar_strftime(void) in line 2938
      protection public
      13 lines of code
      1 parameters
      1 conditional paths
      uses variable s defined in extracttests.py
   function uninivar_strlen(void) in line 2952
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses variable s defined in extracttests.py
   function uninivar_wcslen(void) in line 2959
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses variable s defined in extracttests.py
   function uninivar_strncpy(void) in line 2966
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses variable s defined in extracttests.py
   function uninivar_strpbrk(void) in line 2975
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
   function uninivar_strncat(char *,char *,size_t) in line 2983
      protection public
      17 lines of code
      3 parameters
      1 conditional paths
      uses variable s defined in extracttests.py
   function uninivar_wcsncat(wchar_t *,wchar_t *,size_t) in line 3001
      protection public
      17 lines of code
      3 parameters
      1 conditional paths
      uses variable s defined in extracttests.py
   function uninivar_strncmp(char *,char *,size_t) in line 3019
      protection public
      17 lines of code
      3 parameters
      1 conditional paths
      uses variable s defined in extracttests.py
   function uninivar_wcsncmp(wchar_t *,wchar_t *,size_t) in line 3037
      protection public
      17 lines of code
      3 parameters
      1 conditional paths
      uses variable s defined in extracttests.py
   function uninivar_strstr(void) in line 3055
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
   function uninivar_wcsstr(void) in line 3063
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
   function uninivar_strspn(void) in line 3071
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
   function uninivar_strxfrm(void) in line 3079
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
   function uninivar_wcsxfrm(void) in line 3088
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
   function uninivar_wcsspn(void) in line 3097
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
   function uninivar_setlocale(void) in line 3105
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
   function uninivar_strerror(void) in line 3113
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function uninivar_strcspn(void) in line 3120
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
   function uninivar_wcscspn(void) in line 3128
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
   function uninivar_wcspbrk(void) in line 3136
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
   function uninivar_wcsncpy(void) in line 3144
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
   function uninivar_strcoll(void) in line 3153
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
   function uninivar_wcscoll(void) in line 3161
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
   function uninivar_strrchr(void) in line 3169
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
   function uninivar_strbprk(void) in line 3177
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
   function uninivar_wcsrchr(void) in line 3185
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
   function uninivar_wcsrtombs(void) in line 3193
      protection public
      9 lines of code
      1 parameters
      1 conditional paths
   function uninivar_strtok(void) in line 3203
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses variable s defined in extracttests.py
   function uninivar_strtoimax(void) in line 3211
      protection public
      10 lines of code
      1 parameters
      1 conditional paths
      uses variable s defined in extracttests.py
   function uninivar_strtof(void) in line 3222
      protection public
      11 lines of code
      1 parameters
      1 conditional paths
      uses variable s defined in extracttests.py
   function uninivar_strtol(void) in line 3234
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
      uses variable s defined in extracttests.py
   function uninitvar_time(void) in line 3249
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_tmpnam(void) in line 3256
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses variable s defined in extracttests.py
   function uninivar_tolower(void) in line 3263
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function uninivar_toupper(void) in line 3270
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function uninivar_wcstof(void) in line 3277
      protection public
      11 lines of code
      1 parameters
      1 conditional paths
      uses variable s defined in extracttests.py
   function uninivar_mbrtowc(void) in line 3289
      protection public
      9 lines of code
      1 parameters
      1 conditional paths
   function uninivar_wcstok(void) in line 3299
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses variable s defined in extracttests.py
   function uninivar_wcstoimax(void) in line 3308
      protection public
      10 lines of code
      1 parameters
      1 conditional paths
      uses variable s defined in extracttests.py
   function uninivar_wcstol(void) in line 3319
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
      uses variable s defined in extracttests.py
   function uninitvar_wprintf(wchar_t *,int) in line 3334
      protection public
      16 lines of code
      2 parameters
      1 conditional paths
      uses enumvalue Argument defined in symboldatabase.h
   function uninitvar_sprintf(char *,char *,int) in line 3351
      protection public
      20 lines of code
      3 parameters
      1 conditional paths
      uses variable s defined in extracttests.py
      uses enumvalue Argument defined in symboldatabase.h
   function uninitvar_swprintf(void) in line 3372
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses variable s defined in extracttests.py
   function uninitvar_vsprintf(void) in line 3381
      protection public
      9 lines of code
      1 parameters
      1 conditional paths
      uses variable s defined in extracttests.py
   function uninitvar_vswprintf(void) in line 3391
      protection public
      10 lines of code
      1 parameters
      1 conditional paths
      uses variable s defined in extracttests.py
   function uninivar_fwprintf(void) in line 3402
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
   function uninivar_snprintf(char *,size_t,char *,int) in line 3411
      protection public
      24 lines of code
      4 parameters
      1 conditional paths
      uses variable s defined in extracttests.py
   function uninivar_vsnprintf(char *,size_t,char *,va_list) in line 3436
      protection public
      21 lines of code
      4 parameters
      1 conditional paths
      uses variable s defined in extracttests.py
   function uninivar_wscanf(void) in line 3458
      protection public
      9 lines of code
      1 parameters
      1 conditional paths
   function uninivar_sscanf(void) in line 3468
      protection public
      10 lines of code
      1 parameters
      1 conditional paths
   function uninivar_fwscanf(void) in line 3479
      protection public
      10 lines of code
      1 parameters
      1 conditional paths
   function uninivar_swscanf(void) in line 3490
      protection public
      10 lines of code
      1 parameters
      1 conditional paths
      uses variable s defined in extracttests.py
   function uninitvar_system(void) in line 3501
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_zonetime(void) in line 3508
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_itoa(void) in line 3516
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
   function invalidFunctionArgBool_abs(bool,double,double) in line 3567
      protection public
      9 lines of code
      3 parameters
      1 conditional paths
   function ignoredReturnValue_abs(int) in line 3577
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
   function nullPointer_asctime(void) in line 3585
      protection public
      10 lines of code
      1 parameters
      1 conditional paths
   function nullPointer_wcsftime(size_t) in line 3596
      protection public
      10 lines of code
      1 parameters
      1 conditional paths
   function nullPointer_fegetenv(void) in line 3607
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
   function nullPointer_fegetexceptflag(int) in line 3616
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
   function nullPointer_feholdexcept(void) in line 3625
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
   function nullPointer_fesetenv(void) in line 3634
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
   function nullPointer_fesetexceptflag(int) in line 3643
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
   function nullPointer_feupdateenv(void) in line 3652
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
   function nullPointer_atexit(void) in line 3661
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
   function nullPointer_atof(void) in line 3667
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
   function invalidPrintfArgType_printf(void) in line 3676
      protection public
      11 lines of code
      1 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/test/cfg/std.cpp
module std.cpp
   function bufferAccessOutOfBounds(void) in line 27
      protection public
      13 lines of code
      1 parameters
      1 conditional paths
      uses variable a defined in daca2-report.py
   function uninitvar_abs(void) in line 41
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function uninivar_imaxabs(void) in line 48
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_isalnum(void) in line 57
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_isalpha(void) in line 64
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_iscntrl(void) in line 71
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_isdigit(void) in line 78
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_isgraph(void) in line 85
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_islower(void) in line 92
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_isprint(void) in line 99
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_isspace(void) in line 106
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_isupper(void) in line 113
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_isxdigit(void) in line 120
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_proj(void) in line 127
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_acos(void) in line 135
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
      uses function f(char) defined in test.cxx
   function uninitvar_acosh(void) in line 150
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
      uses function f(char) defined in test.cxx
   function uninitvar_asctime(void) in line 165
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_sqrt(void) in line 173
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
      uses function f(char) defined in test.cxx
   function uninitvar_sinh(void) in line 188
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
      uses function f(char) defined in test.cxx
   function uninitvar_sin(void) in line 203
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
      uses function f(char) defined in test.cxx
   function uninitvar_asin(void) in line 218
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
      uses function f(char) defined in test.cxx
   function uninitvar_asinh(void) in line 233
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
      uses function f(char) defined in test.cxx
   function uninitvar_wcsftime(wchar_t *) in line 248
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_tan(void) in line 257
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
      uses function f(char) defined in test.cxx
   function uninitvar_tanh(void) in line 272
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
      uses function f(char) defined in test.cxx
   function uninitvar_atan(void) in line 287
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
      uses function f(char) defined in test.cxx
   function uninitvar_tgamma(void) in line 302
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
      uses function f(char) defined in test.cxx
   function uninitvar_trunc(void) in line 317
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
      uses function f(char) defined in test.cxx
   function uninitvar_atanh(void) in line 332
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
      uses function f(char) defined in test.cxx
   function uninitvar_atan2(void) in line 347
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
      uses variable f2 defined in daca2-report.py
   function uninitvar_atof(void) in line 362
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_atol(void) in line 369
      protection public
      12 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_ceil(void) in line 382
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
      uses function f(char) defined in test.cxx
   function uninitvar_copysign(void) in line 397
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
      uses variable f2 defined in daca2-report.py
   function uninitvar_cbrt(void) in line 412
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
      uses function f(char) defined in test.cxx
   function uninitvar_cos(void) in line 427
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
      uses function f(char) defined in test.cxx
   function uninitvar_clearerr(void) in line 442
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_cosh(void) in line 449
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
      uses function f(char) defined in test.cxx
   function uninitvar_feraiseexcept(void) in line 464
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_fesetexceptflag(fexcept_t *) in line 471
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_feclearexcept(void) in line 478
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_fesetenv(void) in line 485
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_fesetround(void) in line 492
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_fetestexcept(void) in line 499
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_feupdateenv(void) in line 506
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_ctime(void) in line 513
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_difftime(void) in line 520
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_div(void) in line 527
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_imaxdiv(void) in line 535
      protection public
      9 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_exit(void) in line 545
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_erf(void) in line 552
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
      uses function f(char) defined in test.cxx
   function uninitvar_erfc(void) in line 567
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
      uses function f(char) defined in test.cxx
   function uninitvar_exp(void) in line 582
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
      uses function f(char) defined in test.cxx
   function uninitvar_exp2(void) in line 597
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
      uses function f(char) defined in test.cxx
   function uninitvar_expm1(void) in line 612
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
      uses function f(char) defined in test.cxx
   function uninitvar_fabs(void) in line 627
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
      uses function f(char) defined in test.cxx
   function uninitvar_fdim(void) in line 642
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
      uses variable f2 defined in daca2-report.py
   function uninitvar_fclose(void) in line 657
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_ferror(void) in line 664
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_feof(void) in line 671
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_fflush(void) in line 678
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_fgetc(void) in line 685
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_fgetwc(void) in line 692
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_fgetpos(void) in line 699
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_floor(void) in line 707
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
      uses function f(char) defined in test.cxx
   function uninitvar_fma(void) in line 722
      protection public
      17 lines of code
      1 parameters
      1 conditional paths
      uses variable f2 defined in daca2-report.py
   function uninitvar_fmax(void) in line 740
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
      uses variable f2 defined in daca2-report.py
   function uninitvar_fmin(void) in line 755
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
      uses variable f2 defined in daca2-report.py
   function uninitvar_fmod(void) in line 770
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
      uses variable f2 defined in daca2-report.py
   function uninitar_fopen(void) in line 785
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses variable filename defined in extracttests.py
   function uninitar_fprintf(FILE *,char *,int) in line 794
      protection public
      17 lines of code
      3 parameters
      1 conditional paths
      uses enumvalue Argument defined in symboldatabase.h
   function uninitar_vfprintf(FILE *,const char *,va_list) in line 812
      protection public
      18 lines of code
      3 parameters
      1 conditional paths
   function uninitar_vfwprintf(FILE *,wchar_t *,va_list) in line 831
      protection public
      18 lines of code
      3 parameters
      1 conditional paths
   function uninitvar_fputc(void) in line 850
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_fputwc(void) in line 858
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_fputs(void) in line 866
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_fputws(void) in line 874
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_fread(void) in line 882
      protection public
      9 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_free(void) in line 892
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_freopen(void) in line 900
      protection public
      9 lines of code
      1 parameters
      1 conditional paths
      uses variable filename defined in extracttests.py
   function uninitvar_frexp(void) in line 910
      protection public
      17 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_hypot(void) in line 928
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
      uses variable f2 defined in daca2-report.py
   function uninitvar_fscanf(void) in line 943
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_vfscanf(void) in line 952
      protection public
      9 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_vfwscanf(void) in line 962
      protection public
      9 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_fseek(void) in line 972
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_fsetpos(void) in line 981
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_fgets(void) in line 989
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_fgetws(void) in line 998
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_ftell(void) in line 1007
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_fwide(void) in line 1014
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_fwrite(void) in line 1022
      protection public
      9 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_mblen(void) in line 1032
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_mbtowc(void) in line 1040
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_mbrlen(const char *,size_t,mbstate_t *) in line 1049
      protection public
      16 lines of code
      3 parameters
      1 conditional paths
      uses variable s defined in extracttests.py
   function uninitvar_btowc(void) in line 1066
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_mbsinit(void) in line 1073
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_mbstowcs(void) in line 1080
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses variable s defined in extracttests.py
   function uninitvar_mbsrtowcs(void) in line 1089
      protection public
      9 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_wctob(void) in line 1099
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_wctomb(void) in line 1106
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses variable s defined in extracttests.py
   function uninitvar_wcstombs(void) in line 1114
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_getc(void) in line 1123
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_getwc(void) in line 1130
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_ungetc(void) in line 1137
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_ungetwc(void) in line 1145
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_getenv(void) in line 1153
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses variable name defined in setup.py
   function uninitvar_gmtime(void) in line 1160
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_iswalnum(void) in line 1167
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_iswalpha(void) in line 1174
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_isblank(void) in line 1181
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_iswblank(void) in line 1188
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_iswcntrl(void) in line 1195
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_iswctype(void) in line 1202
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_iswdigit(void) in line 1210
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_iswgraph(void) in line 1217
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_iswlower(void) in line 1224
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_iswprint(void) in line 1231
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_ispunct(void) in line 1238
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_iswpunct(void) in line 1245
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_iswspace(void) in line 1252
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_iswupper(void) in line 1259
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_iswxdigit(void) in line 1266
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_towctrans(void) in line 1273
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_towlower(void) in line 1281
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_towupper(void) in line 1288
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_wctrans(void) in line 1295
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_wctype(void) in line 1302
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_labs(void) in line 1309
      protection public
      10 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_ldexp(void) in line 1320
      protection public
      17 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_lgamma(void) in line 1338
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
      uses function f(char) defined in test.cxx
   function uninitvar_rint(void) in line 1353
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
      uses function f(char) defined in test.cxx
   function uninitvar_lrint(void) in line 1368
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
      uses function f(char) defined in test.cxx
   function uninitvar_llrint(void) in line 1383
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
      uses function f(char) defined in test.cxx
   function uninitvar_lround(void) in line 1398
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
      uses function f(char) defined in test.cxx
   function uninitvar_llround(void) in line 1413
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
      uses function f(char) defined in test.cxx
   function uninitvar_srand(void) in line 1428
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_ldiv(void) in line 1435
      protection public
      12 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_localtime(void) in line 1448
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_log(void) in line 1455
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
      uses function f(char) defined in test.cxx
   function uninitvar_fpclassify(void) in line 1470
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
      uses function f(char) defined in test.cxx
   function uninitvar_isfinite(void) in line 1485
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
      uses function f(char) defined in test.cxx
   function uninitvar_isgreater(void) in line 1500
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
      uses variable f2 defined in daca2-report.py
   function uninitvar_isgreaterequal(void) in line 1515
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
      uses variable f2 defined in daca2-report.py
   function uninitvar_isinf(void) in line 1530
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_logb(void) in line 1537
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
      uses function f(char) defined in test.cxx
   function uninitvar_isless(void) in line 1552
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
      uses variable f2 defined in daca2-report.py
   function uninitvar_islessequal(void) in line 1567
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
      uses variable f2 defined in daca2-report.py
   function uninitvar_islessgreater(void) in line 1582
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
      uses variable f2 defined in daca2-report.py
   function uninitvar_nan(void) in line 1597
      protection public
      10 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_isnan(void) in line 1608
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_isnormal(void) in line 1615
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_isunordered(void) in line 1622
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_ilogb(void) in line 1629
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
      uses function f(char) defined in test.cxx
   function uninitvar_log10(void) in line 1644
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
      uses function f(char) defined in test.cxx
   function uninitvar_log1p(void) in line 1659
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
      uses function f(char) defined in test.cxx
   function uninitvar_log2(void) in line 1674
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
      uses function f(char) defined in test.cxx
   function uninitvar_nearbyint(void) in line 1689
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
      uses function f(char) defined in test.cxx
   function uninitvar_nextafter(void) in line 1704
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
      uses variable f2 defined in daca2-report.py
   function uninitvar_nexttoward(void) in line 1719
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
      uses variable f2 defined in daca2-report.py
   function uninitvar_longjmp(void) in line 1734
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_malloc(void) in line 1742
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_memchr(void) in line 1750
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_wmemchr(void) in line 1759
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_memcmp(void) in line 1768
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_wmemcmp(void) in line 1777
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_memcpy(void) in line 1786
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_wmemcpy(void) in line 1795
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_memmove(void) in line 1804
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_wmemmove(void) in line 1813
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_memset(void) in line 1822
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses variable s defined in extracttests.py
   function uninitvar_wmemset(void) in line 1831
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_mktime(void) in line 1840
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function uninivar_modf(void) in line 1847
      protection public
      17 lines of code
      1 parameters
      1 conditional paths
      uses variable f2 defined in daca2-report.py
   function uninivar_perror(void) in line 1865
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_pow(void) in line 1872
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
      uses variable f2 defined in daca2-report.py
   function uninitvar_remainder(void) in line 1887
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
      uses variable f2 defined in daca2-report.py
   function uninitvar_remquo(void) in line 1902
      protection public
      17 lines of code
      1 parameters
      1 conditional paths
      uses variable f2 defined in daca2-report.py
   function uninivar_printf(char *,int) in line 1920
      protection public
      18 lines of code
      2 parameters
      1 conditional paths
      uses enumvalue Argument defined in symboldatabase.h
   function uninivar_vprintf(char *,va_list) in line 1939
      protection public
      15 lines of code
      2 parameters
      1 conditional paths
   function uninivar_vwprintf(wchar_t *,va_list) in line 1955
      protection public
      15 lines of code
      2 parameters
      1 conditional paths
   function uninivar_bsearch(void) in line 1971
      protection public
      9 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_qsort(void) in line 1981
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_putc(void) in line 1990
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_putwc(void) in line 1998
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_putchar(void) in line 2006
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_putwchar(void) in line 2013
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_puts(void) in line 2020
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses variable s defined in extracttests.py
   function uninitvar_realloc(void) in line 2027
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_remove(void) in line 2036
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses variable s defined in extracttests.py
   function uninitvar_rename(void) in line 2043
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_rewind(void) in line 2051
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses function f(char) defined in test.cxx
   function uninitvar_round(void) in line 2058
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
      uses function f(char) defined in test.cxx
   function uninivar_scalbn(void) in line 2073
      protection public
      17 lines of code
      1 parameters
      1 conditional paths
      uses function f(char) defined in test.cxx
   function uninivar_scalbln(void) in line 2091
      protection public
      17 lines of code
      1 parameters
      1 conditional paths
      uses function f(char) defined in test.cxx
   function uninitvar_signbit(void) in line 2109
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function uninivar_signal(void) in line 2116
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function uninivar_raise(void) in line 2123
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function uninivar_scanf(void) in line 2130
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
   function uninivar_vsscanf(void) in line 2138
      protection public
      9 lines of code
      1 parameters
      1 conditional paths
      uses variable s defined in extracttests.py
   function uninivar_vswscanf(void) in line 2148
      protection public
      9 lines of code
      1 parameters
      1 conditional paths
      uses variable s defined in extracttests.py
   function uninivar_vscanf(void) in line 2158
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
   function uninivar_vwscanf(void) in line 2167
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
   function uninivar_setbuf(void) in line 2176
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
   function uninivar_setvbuf(void) in line 2184
      protection public
      9 lines of code
      1 parameters
      1 conditional paths
   function uninivar_strcat(void) in line 2194
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
   function uninivar_wcscat(void) in line 2202
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
   function uninivar_wcrtomb(void) in line 2209
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses variable s defined in extracttests.py
   function uninivar_strchr(void) in line 2218
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
   function uninivar_wcschr(void) in line 2226
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
   function uninivar_strcmp(void) in line 2234
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
   function uninivar_wcscmp(void) in line 2242
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
   function uninivar_strcpy(void) in line 2250
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
   function uninivar_wcscpy(void) in line 2258
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
   function uninivar_strftime(void) in line 2266
      protection public
      9 lines of code
      1 parameters
      1 conditional paths
      uses variable s defined in extracttests.py
   function uninivar_strlen(void) in line 2276
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses variable s defined in extracttests.py
   function uninivar_wcslen(void) in line 2283
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses variable s defined in extracttests.py
   function uninivar_strncpy(void) in line 2290
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses variable s defined in extracttests.py
   function uninivar_strpbrk(void) in line 2299
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
   function uninivar_strncat(char *,char *,size_t) in line 2307
      protection public
      17 lines of code
      3 parameters
      1 conditional paths
      uses variable s defined in extracttests.py
   function uninivar_wcsncat(wchar_t *,wchar_t *,size_t) in line 2325
      protection public
      17 lines of code
      3 parameters
      1 conditional paths
      uses variable s defined in extracttests.py
   function uninivar_strncmp(char *,char *,size_t) in line 2343
      protection public
      17 lines of code
      3 parameters
      1 conditional paths
      uses variable s defined in extracttests.py
   function uninivar_wcsncmp(wchar_t *,wchar_t *,size_t) in line 2361
      protection public
      17 lines of code
      3 parameters
      1 conditional paths
      uses variable s defined in extracttests.py
   function uninivar_strstr(void) in line 2379
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
   function uninivar_wcsstr(void) in line 2387
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
   function uninivar_strspn(void) in line 2395
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
   function uninivar_strxfrm(void) in line 2403
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
   function uninivar_wcsxfrm(void) in line 2412
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
   function uninivar_wcsspn(void) in line 2421
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
   function uninivar_setlocale(void) in line 2429
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
   function uninivar_strerror(void) in line 2436
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function uninivar_strcspn(void) in line 2443
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
   function uninivar_wcscspn(void) in line 2451
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
   function uninivar_wcspbrk(void) in line 2459
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
   function uninivar_wcsncpy(void) in line 2467
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
   function uninivar_strcoll(void) in line 2476
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
   function uninivar_wcscoll(void) in line 2484
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
   function uninivar_strrchr(void) in line 2492
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
   function uninivar_wcsrchr(void) in line 2500
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
   function uninivar_wcsrtombs(void) in line 2508
      protection public
      9 lines of code
      1 parameters
      1 conditional paths
   function uninivar_strtok(void) in line 2518
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses variable s defined in extracttests.py
   function uninivar_strtoimax(void) in line 2526
      protection public
      10 lines of code
      1 parameters
      1 conditional paths
      uses variable s defined in extracttests.py
   function uninivar_strtof(void) in line 2537
      protection public
      11 lines of code
      1 parameters
      1 conditional paths
      uses variable s defined in extracttests.py
   function uninivar_strtol(void) in line 2549
      protection public
      22 lines of code
      1 parameters
      1 conditional paths
      uses variable s defined in extracttests.py
   function uninitvar_time(void) in line 2572
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_tmpnam(void) in line 2579
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses variable s defined in extracttests.py
   function uninivar_tolower(void) in line 2586
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function uninivar_toupper(void) in line 2593
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function uninivar_wcstof(void) in line 2600
      protection public
      11 lines of code
      1 parameters
      1 conditional paths
      uses variable s defined in extracttests.py
   function uninivar_stoX(void) in line 2612
      protection public
      38 lines of code
      1 parameters
      1 conditional paths
   function uninivar_to_string(void) in line 2651
      protection public
      30 lines of code
      1 parameters
      1 conditional paths
      uses function f(char) defined in test.cxx
   function uninivar_to_wstring(void) in line 2682
      protection public
      30 lines of code
      1 parameters
      1 conditional paths
      uses function f(char) defined in test.cxx
   function uninivar_mbrtowc(void) in line 2713
      protection public
      9 lines of code
      1 parameters
      1 conditional paths
   function uninivar_wcstok(void) in line 2723
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses variable s defined in extracttests.py
   function uninivar_wcstoimax(void) in line 2732
      protection public
      10 lines of code
      1 parameters
      1 conditional paths
      uses variable s defined in extracttests.py
   function uninivar_wcstol(void) in line 2743
      protection public
      22 lines of code
      1 parameters
      1 conditional paths
      uses variable s defined in extracttests.py
   function uninitvar_wprintf(wchar_t *,int) in line 2766
      protection public
      16 lines of code
      2 parameters
      1 conditional paths
      uses enumvalue Argument defined in symboldatabase.h
   function uninitvar_sprintf(void) in line 2783
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses variable s defined in extracttests.py
   function uninitvar_swprintf(void) in line 2792
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses variable s defined in extracttests.py
   function uninitvar_vsprintf(void) in line 2801
      protection public
      9 lines of code
      1 parameters
      1 conditional paths
      uses variable s defined in extracttests.py
   function uninitvar_vswprintf(void) in line 2811
      protection public
      10 lines of code
      1 parameters
      1 conditional paths
      uses variable s defined in extracttests.py
   function uninivar_fwprintf(void) in line 2822
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
   function uninivar_snprintf(char *,size_t,char *,int) in line 2831
      protection public
      24 lines of code
      4 parameters
      1 conditional paths
      uses variable s defined in extracttests.py
   function uninivar_vsnprintf(char *,size_t,char *,va_list) in line 2856
      protection public
      21 lines of code
      4 parameters
      1 conditional paths
      uses variable s defined in extracttests.py
   function uninivar_wscanf(void) in line 2878
      protection public
      9 lines of code
      1 parameters
      1 conditional paths
   function uninivar_sscanf(void) in line 2888
      protection public
      10 lines of code
      1 parameters
      1 conditional paths
   function uninivar_fwscanf(void) in line 2899
      protection public
      10 lines of code
      1 parameters
      1 conditional paths
   function uninivar_swscanf(void) in line 2910
      protection public
      10 lines of code
      1 parameters
      1 conditional paths
      uses variable s defined in extracttests.py
   function uninitvar_system(void) in line 2921
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_setw(void) in line 2928
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_setiosflags(void) in line 2935
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_resetiosflags(void) in line 2942
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_setfill(void) in line 2949
      protection public
      10 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_setprecision(void) in line 2960
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_setbase(void) in line 2967
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
   function uninitvar_find(std::string) in line 2974
      protection public
      25 lines of code
      1 parameters
      1 conditional paths
      uses variable s defined in extracttests.py
   function invalidFunctionArgBool_abs(bool,double,double) in line 3000
      protection public
      9 lines of code
      3 parameters
      1 conditional paths
   function ignoredReturnValue_abs(int) in line 3010
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
   function nullPointer_asctime(void) in line 3018
      protection public
      10 lines of code
      1 parameters
      1 conditional paths
   function nullPointer_wcsftime(size_t) in line 3029
      protection public
      10 lines of code
      1 parameters
      1 conditional paths
   function nullPointer_fegetenv(void) in line 3040
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
   function nullPointer_fegetexceptflag(int) in line 3049
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
   function nullPointer_feholdexcept(void) in line 3058
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
   function nullPointer_fesetenv(void) in line 3067
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
   function nullPointer_fesetexceptflag(int) in line 3076
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
   function nullPointer_feupdateenv(void) in line 3085
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
   function nullPointer_atexit(void) in line 3094
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
   function nullPointer_atof(void) in line 3100
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
   function nullPointer_memcmp(char *) in line 3109
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
   function nullPointer_wmemcmp(wchar_t *) in line 3115
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/test/cfg/windows.cpp
module CSharedFilesCtrl
   function OnNmDblClk(NMHDR *,LRESULT *) in line 11
      5 lines of code
      2 parameters
      2 conditional paths
      uses function OpenFile(const CShareableFile *,int,int) defined in CSharedFilesCtrl
   function OpenFile(const CShareableFile *,int,int) in line 10
      1 lines of code
      3 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/test/options.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/test/options.h
module options
   function gcc_style_errors() in line 36
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable _gcc_style_errors defined in options
   function operator=(const options &) in line 43
      1 lines of code
      1 parameters
      1 conditional paths
   function quiet() in line 33
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable _quiet defined in options
   function which_test() in line 38
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable _which_test defined in options
   function options(int,const char *) in line 31
      protection public
      12 lines of code
      2 parameters
      2 conditional paths
      uses variable _options defined in options
      uses variable _which_test defined in options
   function options() in line 41
      1 lines of code
      0 parameters
      1 conditional paths
   function options(const options &) in line 42
      1 lines of code
      1 parameters
      1 conditional paths
   variable _gcc_style_errors in line 48
   variable _options in line 46
   variable _quiet in line 49
   variable _which_test in line 47
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/test/redirect.h
module redirect.h
   macro definition REDIRECT in line 82
      protection public
   macro definition GET_REDIRECT_OUTPUT in line 83
      protection public
   macro definition CLEAR_REDIRECT_OUTPUT in line 84
      protection public
   macro definition GET_REDIRECT_ERROUT in line 85
      protection public
   macro definition CLEAR_REDIRECT_ERROUT in line 86
      protection public
   variable errout in line 22
      protection public
   variable output in line 23
      protection public
module RedirectOutputError
   function clearErrout() in line 71
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses variable _err defined in RedirectOutputError
   function clearOutput() in line 60
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses variable _out defined in RedirectOutputError
   function getErrout() in line 65
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses variable _err defined in RedirectOutputError
   function getOutput() in line 54
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses variable _out defined in RedirectOutputError
   function RedirectOutputError() in line 32
      protection public
      11 lines of code
      0 parameters
      1 conditional paths
      uses variable _oldCout defined in RedirectOutputError
      uses variable _oldCerr defined in RedirectOutputError
      uses variable _out defined in RedirectOutputError
      uses variable _err defined in RedirectOutputError
   function ~RedirectOutputError() in line 45
      protection public
      7 lines of code
      0 parameters
      1 conditional paths
      uses variable _oldCout defined in RedirectOutputError
      uses variable _oldCerr defined in RedirectOutputError
      uses variable errout defined in redirect.h
      uses variable _err defined in RedirectOutputError
      uses variable output defined in redirect.h
      uses variable _out defined in RedirectOutputError
   variable _err in line 77
   variable _oldCerr in line 79
   variable _oldCout in line 78
   variable _out in line 76
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/test/test.cxx
module test.cxx
   function unused() in line 9
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable a defined in daca2-report.py
   function f(char) in line 14
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function possible_style() in line 19
      protection public
      6 lines of code
      0 parameters
      2 conditional paths
   function main() in line 26
      protection public
      9 lines of code
      0 parameters
      2 conditional paths
      uses variable a defined in daca2-report.py
      uses function f(char) defined in test.cxx
      uses function possible_style() defined in test.cxx
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/test/test64bit.cpp
module Test64BitPortability
   inherits from TestFixture
   function check(const char) in line 43
      13 lines of code
      1 parameters
      1 conditional paths
      uses variable errout defined in redirect.h
      uses variable settings defined in Test64BitPortability
      uses variable code defined in extracttests.py
      uses function tokenize(std::istream &,const char,const std::string &,bool) defined in Tokenizer
      uses function pointerassignment() defined in Check64BitPortability
   function functionpar() in line 66
      40 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char) defined in Test64BitPortability
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function novardecl() in line 57
      8 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char) defined in Test64BitPortability
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function ptrarithmetic() in line 123
      26 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char) defined in Test64BitPortability
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function ptrcompare() in line 115
      7 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char) defined in Test64BitPortability
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function returnIssues() in line 150
      63 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char) defined in Test64BitPortability
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
      uses macro definition REGISTER_TEST defined in testsuite.h
   function run() in line 32
      10 lines of code
      0 parameters
      1 conditional paths
      uses variable settings defined in Test64BitPortability
      uses function addEnabled(const std::string &) defined in Settings
      uses macro definition TEST_CASE defined in testsuite.h
      uses function novardecl() defined in Test64BitPortability
      uses function functionpar() defined in Test64BitPortability
      uses function structmember() defined in Test64BitPortability
      uses function ptrcompare() defined in Test64BitPortability
      uses function ptrarithmetic() defined in Test64BitPortability
      uses function returnIssues() defined in Test64BitPortability
   function structmember() in line 107
      7 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char) defined in Test64BitPortability
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function Test64BitPortability() in line 26
      protection public
      2 lines of code
      0 parameters
      1 conditional paths
   variable settings in line 30
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/test/testassert.cpp
module TestAssert
   inherits from TestFixture
   function assignmentInAssert() in line 167
      54 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char *) defined in TestAssert
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
      uses macro definition REGISTER_TEST defined in testsuite.h
   function check(const char,const char *) in line 31
      13 lines of code
      2 parameters
      1 conditional paths
      uses variable errout defined in redirect.h
      uses variable settings defined in TestAssert
      uses variable code defined in extracttests.py
      uses function tokenize(std::istream &,const char,const std::string &,bool) defined in Tokenizer
      uses variable filename defined in extracttests.py
      uses function runSimplifiedChecks(const Tokenizer *,const Settings *,ErrorLogger *) defined in CheckAssert
   function functionCallInAssert() in line 77
      56 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char *) defined in TestAssert
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function memberFunctionCallInAssert() in line 134
      32 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char *) defined in TestAssert
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function run() in line 45
      8 lines of code
      0 parameters
      1 conditional paths
      uses variable settings defined in TestAssert
      uses function addEnabled(const std::string &) defined in Settings
      uses macro definition TEST_CASE defined in testsuite.h
      uses function assignmentInAssert() defined in TestAssert
      uses function functionCallInAssert() defined in TestAssert
      uses function memberFunctionCallInAssert() defined in TestAssert
      uses function safeFunctionCallInAssert() defined in TestAssert
   function safeFunctionCallInAssert() in line 55
      21 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char *) defined in TestAssert
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function TestAssert() in line 26
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   variable settings in line 29
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/test/testautovariables.cpp
module TestAutoVariables
   inherits from TestFixture
   function check(const char,bool,bool,const char *) in line 32
      23 lines of code
      4 parameters
      2 conditional paths
      uses variable errout defined in redirect.h
      uses variable settings defined in TestAutoVariables
      uses variable inconclusive defined in Settings
      uses variable code defined in extracttests.py
      uses function tokenize(std::istream &,const char,const std::string &,bool) defined in Tokenizer
      uses variable filename defined in extracttests.py
      uses function returnReference() defined in CheckAutoVariables
      uses function assignFunctionArg() defined in CheckAutoVariables
      uses function simplifyTokenList2() defined in Tokenizer
      uses function autoVariables() defined in CheckAutoVariables
      uses function returnPointerToLocalArray() defined in CheckAutoVariables
   function returnLocalVariable1() in line 614
      26 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,bool,const char *) defined in TestAutoVariables
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function returnLocalVariable2() in line 641
      18 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,bool,const char *) defined in TestAutoVariables
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function returnLocalVariable3() in line 661
      15 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,bool,const char *) defined in TestAutoVariables
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function returnLocalVariable4() in line 677
      13 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,bool,const char *) defined in TestAutoVariables
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function returnLocalVariable5() in line 691
      7 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,bool,const char *) defined in TestAutoVariables
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function returnParameterAddress() in line 1045
      22 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,bool,const char *) defined in TestAutoVariables
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function returnReference1() in line 700
      96 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,bool,const char *) defined in TestAutoVariables
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function returnReference2() in line 797
      88 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,bool,const char *) defined in TestAutoVariables
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function returnReference3() in line 886
      8 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,bool,const char *) defined in TestAutoVariables
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function returnReference4() in line 896
      7 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,bool,const char *) defined in TestAutoVariables
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function returnReference5() in line 904
      19 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,bool,const char *) defined in TestAutoVariables
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function returnReference6() in line 924
      7 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,bool,const char *) defined in TestAutoVariables
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function returnReference7() in line 932
      15 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,bool,const char *) defined in TestAutoVariables
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function returnReferenceCalculation() in line 960
      46 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,bool,const char *) defined in TestAutoVariables
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function returnReferenceInnerScope() in line 1018
      12 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,bool,const char *) defined in TestAutoVariables
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function returnReferenceLambda() in line 1007
      10 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,bool,const char *) defined in TestAutoVariables
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function returnReferenceLiteral() in line 948
      11 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,bool,const char *) defined in TestAutoVariables
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function run() in line 56
      60 lines of code
      0 parameters
      1 conditional paths
      uses variable settings defined in TestAutoVariables
      uses function addEnabled(const std::string &) defined in Settings
      uses macro definition LOAD_LIB_2 defined in testsuite.h
      uses variable library defined in Settings
      uses macro definition TEST_CASE defined in testsuite.h
      uses function testautovar1() defined in TestAutoVariables
      uses function testautovar2() defined in TestAutoVariables
      uses function testautovar3() defined in TestAutoVariables
      uses function testautovar4() defined in TestAutoVariables
      uses function testautovar5() defined in TestAutoVariables
      uses function testautovar6() defined in TestAutoVariables
      uses function testautovar7() defined in TestAutoVariables
      uses function testautovar8() defined in TestAutoVariables
      uses function testautovar9() defined in TestAutoVariables
      uses function testautovar10() defined in TestAutoVariables
      uses function testautovar11() defined in TestAutoVariables
      uses function testautovar12() defined in TestAutoVariables
      uses function testautovar13() defined in TestAutoVariables
      uses function testautovar14() defined in TestAutoVariables
      uses function testautovar15() defined in TestAutoVariables
      uses function testautovar_array1() defined in TestAutoVariables
      uses function testautovar_array2() defined in TestAutoVariables
      uses function testautovar_ptrptr() defined in TestAutoVariables
      uses function testautovar_return1() defined in TestAutoVariables
      uses function testautovar_return2() defined in TestAutoVariables
      uses function testautovar_return3() defined in TestAutoVariables
      uses function testautovar_extern() defined in TestAutoVariables
      uses function testinvaliddealloc() defined in TestAutoVariables
      uses function testinvaliddealloc_C() defined in TestAutoVariables
      uses function testassign1() defined in TestAutoVariables
      uses function testassign2() defined in TestAutoVariables
      uses function returnLocalVariable1() defined in TestAutoVariables
      uses function returnLocalVariable2() defined in TestAutoVariables
      uses function returnLocalVariable3() defined in TestAutoVariables
      uses function returnLocalVariable4() defined in TestAutoVariables
      uses function returnLocalVariable5() defined in TestAutoVariables
      uses function returnReference1() defined in TestAutoVariables
      uses function returnReference2() defined in TestAutoVariables
      uses function returnReference3() defined in TestAutoVariables
      uses function returnReference4() defined in TestAutoVariables
      uses function returnReference5() defined in TestAutoVariables
      uses function returnReference6() defined in TestAutoVariables
      uses function returnReference7() defined in TestAutoVariables
      uses function returnReferenceLiteral() defined in TestAutoVariables
      uses function returnReferenceCalculation() defined in TestAutoVariables
      uses function returnReferenceLambda() defined in TestAutoVariables
      uses function returnReferenceInnerScope() defined in TestAutoVariables
      uses function testglobalnamespace() defined in TestAutoVariables
      uses function returnParameterAddress() defined in TestAutoVariables
      uses function testconstructor() defined in TestAutoVariables
      uses function variableIsUsedInScope() defined in TestAutoVariables
   function testassign1() in line 598
      7 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,bool,const char *) defined in TestAutoVariables
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function testassign2() in line 606
      7 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,bool,const char *) defined in TestAutoVariables
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function testautovar1() in line 119
      22 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,bool,const char *) defined in TestAutoVariables
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function testautovar10() in line 260
      72 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,bool,const char *) defined in TestAutoVariables
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function testautovar11() in line 333
      32 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,bool,const char *) defined in TestAutoVariables
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function testautovar12() in line 366
      8 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,bool,const char *) defined in TestAutoVariables
   function testautovar13() in line 375
      9 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,bool,const char *) defined in TestAutoVariables
   function testautovar14() in line 385
      10 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,bool,const char *) defined in TestAutoVariables
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function testautovar15() in line 396
      12 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,bool,const char *) defined in TestAutoVariables
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function testautovar2() in line 142
      31 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,bool,const char *) defined in TestAutoVariables
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function testautovar3() in line 174
      8 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,bool,const char *) defined in TestAutoVariables
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function testautovar4() in line 183
      8 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,bool,const char *) defined in TestAutoVariables
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function testautovar5() in line 192
      15 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,bool,const char *) defined in TestAutoVariables
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function testautovar6() in line 208
      15 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,bool,const char *) defined in TestAutoVariables
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function testautovar7() in line 224
      9 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,bool,const char *) defined in TestAutoVariables
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function testautovar8() in line 234
      12 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,bool,const char *) defined in TestAutoVariables
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function testautovar9() in line 247
      12 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,bool,const char *) defined in TestAutoVariables
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function testautovar_array1() in line 409
      8 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,bool,const char *) defined in TestAutoVariables
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function testautovar_array2() in line 418
      11 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,bool,const char *) defined in TestAutoVariables
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function testautovar_extern() in line 469
      8 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,bool,const char *) defined in TestAutoVariables
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function testautovar_ptrptr() in line 430
      7 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,bool,const char *) defined in TestAutoVariables
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function testautovar_return1() in line 438
      8 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,bool,const char *) defined in TestAutoVariables
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function testautovar_return2() in line 447
      11 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,bool,const char *) defined in TestAutoVariables
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function testautovar_return3() in line 459
      9 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,bool,const char *) defined in TestAutoVariables
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function testconstructor() in line 1068
      8 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,bool,const char *) defined in TestAutoVariables
   function testglobalnamespace() in line 1031
      13 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,bool,const char *) defined in TestAutoVariables
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function testinvaliddealloc() in line 478
      110 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,bool,const char *) defined in TestAutoVariables
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function testinvaliddealloc_C() in line 589
      8 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,bool,const char *) defined in TestAutoVariables
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function variableIsUsedInScope() in line 1077
      9 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,bool,const char *) defined in TestAutoVariables
      uses macro definition REGISTER_TEST defined in testsuite.h
   function TestAutoVariables() in line 26
      protection public
      2 lines of code
      0 parameters
      1 conditional paths
   variable settings in line 30
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/test/testbool.cpp
module TestBool
   inherits from TestFixture
   function assignBoolToFloat() in line 169
      22 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestBool
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function assignBoolToPointer() in line 86
      82 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestBool
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function bitwiseOnBoolean() in line 724
      65 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestBool
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function check(const char,bool,const char) in line 67
      17 lines of code
      3 parameters
      1 conditional paths
      uses variable errout defined in redirect.h
      uses variable settings defined in TestBool
      uses variable experimental defined in Settings
      uses variable code defined in extracttests.py
      uses function tokenize(std::istream &,const char,const std::string &,bool) defined in Tokenizer
      uses variable filename defined in extracttests.py
      uses function runChecks(const Tokenizer *,const Settings *,ErrorLogger *) defined in CheckBool
      uses function simplifyTokenList2() defined in Tokenizer
      uses function runSimplifiedChecks(const Tokenizer *,const Settings *,ErrorLogger *) defined in CheckBool
   function checkComparisonOfBoolWithBool() in line 695
      28 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses function check(const char,bool,const char) defined in TestBool
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function checkComparisonOfFuncReturningBool1() in line 528
      23 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestBool
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function checkComparisonOfFuncReturningBool2() in line 552
      17 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestBool
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function checkComparisonOfFuncReturningBool3() in line 570
      16 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestBool
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function checkComparisonOfFuncReturningBool4() in line 587
      24 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestBool
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function checkComparisonOfFuncReturningBool5() in line 612
      23 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestBool
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function checkComparisonOfFuncReturningBool6() in line 636
      58 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestBool
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function comparisonOfBoolExpressionWithInt1() in line 192
      212 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestBool
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
      uses variable code defined in extracttests.py
   function comparisonOfBoolExpressionWithInt2() in line 405
      79 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestBool
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
      uses macro definition TODO_ASSERT_EQUALS defined in testsuite.h
   function comparisonOfBoolExpressionWithInt3() in line 485
      6 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestBool
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function comparisonOfBoolExpressionWithInt4() in line 492
      35 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestBool
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function comparisonOfBoolWithInt1() in line 806
      52 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestBool
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function comparisonOfBoolWithInt2() in line 859
      29 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestBool
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function comparisonOfBoolWithInt3() in line 889
      29 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestBool
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function comparisonOfBoolWithInt4() in line 919
      6 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestBool
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function comparisonOfBoolWithInt5() in line 926
      7 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestBool
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function comparisonOfBoolWithInt6() in line 934
      6 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestBool
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function comparisonOfBoolWithInt7() in line 941
      6 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestBool
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function incrementBoolean() in line 790
      15 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestBool
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function pointerArithBool1() in line 948
      31 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestBool
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
      uses macro definition REGISTER_TEST defined in testsuite.h
   function run() in line 32
      34 lines of code
      0 parameters
      1 conditional paths
      uses variable settings defined in TestBool
      uses function addEnabled(const std::string &) defined in Settings
      uses variable inconclusive defined in Settings
      uses macro definition TEST_CASE defined in testsuite.h
      uses function bitwiseOnBoolean() defined in TestBool
      uses function incrementBoolean() defined in TestBool
      uses function assignBoolToPointer() defined in TestBool
      uses function assignBoolToFloat() defined in TestBool
      uses function comparisonOfBoolExpressionWithInt1() defined in TestBool
      uses function comparisonOfBoolExpressionWithInt2() defined in TestBool
      uses function comparisonOfBoolExpressionWithInt3() defined in TestBool
      uses function comparisonOfBoolExpressionWithInt4() defined in TestBool
      uses function comparisonOfBoolWithInt1() defined in TestBool
      uses function comparisonOfBoolWithInt2() defined in TestBool
      uses function comparisonOfBoolWithInt3() defined in TestBool
      uses function comparisonOfBoolWithInt4() defined in TestBool
      uses function comparisonOfBoolWithInt5() defined in TestBool
      uses function comparisonOfBoolWithInt6() defined in TestBool
      uses function comparisonOfBoolWithInt7() defined in TestBool
      uses function checkComparisonOfFuncReturningBool1() defined in TestBool
      uses function checkComparisonOfFuncReturningBool2() defined in TestBool
      uses function checkComparisonOfFuncReturningBool3() defined in TestBool
      uses function checkComparisonOfFuncReturningBool4() defined in TestBool
      uses function checkComparisonOfFuncReturningBool5() defined in TestBool
      uses function checkComparisonOfFuncReturningBool6() defined in TestBool
      uses function checkComparisonOfBoolWithBool() defined in TestBool
      uses function pointerArithBool1() defined in TestBool
   function TestBool() in line 26
      protection public
      2 lines of code
      0 parameters
      1 conditional paths
   variable settings in line 30
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/test/testboost.cpp
module TestBoost
   inherits from TestFixture
   function BoostForeachContainerModification() in line 54
      50 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char) defined in TestBoost
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
      uses macro definition REGISTER_TEST defined in testsuite.h
   function check(const char) in line 39
      14 lines of code
      1 parameters
      1 conditional paths
      uses variable errout defined in redirect.h
      uses variable settings defined in TestBoost
      uses variable code defined in extracttests.py
      uses function tokenize(std::istream &,const char,const std::string &,bool) defined in Tokenizer
      uses function simplifyTokenList2() defined in Tokenizer
      uses function runSimplifiedChecks(const Tokenizer *,const Settings *,ErrorLogger *) defined in CheckBoost
   function run() in line 32
      6 lines of code
      0 parameters
      1 conditional paths
      uses variable settings defined in TestBoost
      uses function addEnabled(const std::string &) defined in Settings
      uses macro definition TEST_CASE defined in testsuite.h
      uses function BoostForeachContainerModification() defined in TestBoost
   function TestBoost() in line 26
      protection public
      2 lines of code
      0 parameters
      1 conditional paths
   variable settings in line 30
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/test/testbufferoverrun.cpp
module TestBufferOverrun
   inherits from TestFixture
   function alloc_alloca() in line 2969
      8 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestBufferOverrun
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function alloc_malloc() in line 2901
      42 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestBufferOverrun
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function alloc_new() in line 2850
      49 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestBufferOverrun
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function alloc_string() in line 2945
      22 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestBufferOverrun
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function array_index_1() in line 314
      35 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestBufferOverrun
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function array_index_11() in line 651
      19 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestBufferOverrun
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function array_index_12() in line 671
      27 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestBufferOverrun
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function array_index_13() in line 699
      12 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestBufferOverrun
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function array_index_14() in line 712
      9 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestBufferOverrun
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function array_index_15() in line 722
      9 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestBufferOverrun
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function array_index_16() in line 732
      9 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestBufferOverrun
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function array_index_17() in line 742
      39 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestBufferOverrun
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function array_index_18() in line 782
      56 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestBufferOverrun
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
      uses macro definition TODO_ASSERT_EQUALS defined in testsuite.h
   function array_index_19() in line 839
      17 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestBufferOverrun
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function array_index_2() in line 351
      9 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestBufferOverrun
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function array_index_20() in line 857
      10 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestBufferOverrun
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function array_index_21() in line 868
      13 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestBufferOverrun
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function array_index_22() in line 882
      7 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestBufferOverrun
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function array_index_23() in line 890
      8 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestBufferOverrun
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function array_index_24() in line 899
      72 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestBufferOverrun
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function array_index_25() in line 972
      7 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestBufferOverrun
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function array_index_26() in line 980
      17 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestBufferOverrun
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function array_index_27() in line 998
      9 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestBufferOverrun
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function array_index_28() in line 1008
      10 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestBufferOverrun
      uses macro definition TODO_ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function array_index_29() in line 1019
      11 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestBufferOverrun
      uses macro definition TODO_ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function array_index_3() in line 362
      52 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestBufferOverrun
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function array_index_30() in line 1031
      8 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestBufferOverrun
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function array_index_31() in line 1040
      39 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestBufferOverrun
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function array_index_32() in line 1080
      13 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestBufferOverrun
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function array_index_33() in line 1094
      6 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestBufferOverrun
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function array_index_34() in line 1101
      52 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestBufferOverrun
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function array_index_35() in line 1154
      21 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestBufferOverrun
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function array_index_36() in line 1176
      12 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestBufferOverrun
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function array_index_37() in line 1189
      10 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestBufferOverrun
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function array_index_38() in line 1200
      18 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestBufferOverrun
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function array_index_39() in line 1219
      8 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestBufferOverrun
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function array_index_40() in line 1228
      8 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestBufferOverrun
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function array_index_41() in line 1237
      23 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestBufferOverrun
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function array_index_42() in line 1261
      52 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestBufferOverrun
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function array_index_43() in line 1314
      98 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestBufferOverrun
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function array_index_44() in line 1413
      23 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestBufferOverrun
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function array_index_45() in line 1437
      22 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestBufferOverrun
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function array_index_46() in line 1461
      28 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestBufferOverrun
      uses macro definition TODO_ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function array_index_47() in line 1490
      9 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestBufferOverrun
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function array_index_6() in line 415
      154 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestBufferOverrun
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
      uses macro definition TODO_ASSERT_EQUALS defined in testsuite.h
   function array_index_7() in line 571
      12 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestBufferOverrun
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function array_index_9() in line 584
      66 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestBufferOverrun
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
      uses macro definition TODO_ASSERT_EQUALS defined in testsuite.h
   function array_index_calculation() in line 1669
      21 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestBufferOverrun
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function array_index_cast() in line 1948
      23 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestBufferOverrun
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function array_index_extern() in line 1941
      6 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestBufferOverrun
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function array_index_for() in line 1848
      33 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestBufferOverrun
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function array_index_for_andand_oror() in line 1785
      37 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestBufferOverrun
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function array_index_for_continue() in line 1823
      24 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestBufferOverrun
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function array_index_for_decr() in line 1739
      29 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestBufferOverrun
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function array_index_for_in_for() in line 1657
      11 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestBufferOverrun
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function array_index_for_neq() in line 1882
      11 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestBufferOverrun
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function array_index_for_question() in line 1894
      27 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestBufferOverrun
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
      uses macro definition TODO_ASSERT_EQUALS defined in testsuite.h
   function array_index_for_varid0() in line 1922
      7 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestBufferOverrun
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function array_index_function_parameter() in line 2110
      12 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestBufferOverrun
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function array_index_multidim() in line 1500
      118 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestBufferOverrun
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function array_index_negative1() in line 1691
      38 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestBufferOverrun
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function array_index_negative2() in line 1730
      8 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestBufferOverrun
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function array_index_same_struct_and_var_name() in line 2007
      23 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestBufferOverrun
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function array_index_string_literal() in line 1972
      34 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestBufferOverrun
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function array_index_switch_in_for() in line 1619
      37 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestBufferOverrun
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
      uses macro definition TODO_ASSERT_EQUALS defined in testsuite.h
   function array_index_valueflow() in line 2031
      38 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestBufferOverrun
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function array_index_valueflow_pointer() in line 2070
      39 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestBufferOverrun
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function array_index_varnames() in line 1770
      14 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestBufferOverrun
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function array_index_vla_for() in line 1930
      10 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestBufferOverrun
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function arrayIndexThenCheck() in line 3761
      44 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestBufferOverrun
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
      uses macro definition TODO_ASSERT_EQUALS defined in testsuite.h
   function assign1() in line 2840
      9 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestBufferOverrun
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function buffer_overrun_10() in line 2304
      12 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestBufferOverrun
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function buffer_overrun_11() in line 2317
      19 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestBufferOverrun
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function buffer_overrun_15() in line 2337
      11 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestBufferOverrun
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function buffer_overrun_16() in line 2349
      21 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestBufferOverrun
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function buffer_overrun_18() in line 2371
      25 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestBufferOverrun
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function buffer_overrun_19() in line 2397
      12 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestBufferOverrun
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function buffer_overrun_20() in line 2410
      4 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestBufferOverrun
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function buffer_overrun_21() in line 2415
      10 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestBufferOverrun
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function buffer_overrun_24() in line 2426
      21 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestBufferOverrun
      uses macro definition TODO_ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function buffer_overrun_26() in line 2448
      10 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestBufferOverrun
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function buffer_overrun_27() in line 2459
      9 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestBufferOverrun
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function buffer_overrun_28() in line 2469
      10 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestBufferOverrun
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function buffer_overrun_2_struct() in line 2123
      57 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestBufferOverrun
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function buffer_overrun_3() in line 2182
      11 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestBufferOverrun
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function buffer_overrun_4() in line 2195
      41 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestBufferOverrun
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
      uses macro definition TODO_ASSERT_EQUALS defined in testsuite.h
   function buffer_overrun_5() in line 2237
      9 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestBufferOverrun
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function buffer_overrun_6() in line 2247
      9 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestBufferOverrun
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function buffer_overrun_7() in line 2257
      9 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestBufferOverrun
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function buffer_overrun_8() in line 2267
      22 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestBufferOverrun
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function buffer_overrun_9() in line 2290
      13 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestBufferOverrun
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function buffer_overrun_bailoutIfSwitch() in line 2480
      36 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestBufferOverrun
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function buffer_overrun_function_array_argument() in line 2517
      48 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestBufferOverrun
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function buffer_overrun_readSizeFromCfg() in line 2628
      43 lines of code
      0 parameters
      1 conditional paths
      uses function Parse(const char *,size_t) defined in tinyxml2::XMLDocument
      uses variable library defined in Settings
      uses function load(const char,const char) defined in Library
      uses function check(const char,bool,const char) defined in TestBufferOverrun
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function bufferNotZeroTerminated() in line 3806
      19 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestBufferOverrun
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function check(const char,bool,const char) in line 35
      17 lines of code
      3 parameters
      1 conditional paths
      uses variable errout defined in redirect.h
      uses variable settings0 defined in TestBufferOverrun
      uses variable inconclusive defined in Settings
      uses variable experimental defined in Settings
      uses variable code defined in extracttests.py
      uses function tokenize(std::istream &,const char,const std::string &,bool) defined in Tokenizer
      uses variable filename defined in extracttests.py
      uses function simplifyTokenList2() defined in Tokenizer
      uses function runSimplifiedChecks(const Tokenizer *,const Settings *,ErrorLogger *) defined in CheckBufferOverrun
   function check(const char,const Settings &,const char) in line 53
      15 lines of code
      3 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses function tokenize(std::istream &,const char,const std::string &,bool) defined in Tokenizer
      uses variable filename defined in extracttests.py
      uses function simplifyTokenList2() defined in Tokenizer
      uses variable errout defined in redirect.h
      uses function bufferOverrun() defined in CheckBufferOverrun
      uses function bufferOverrun2() defined in CheckBufferOverrun
      uses function arrayIndexThenCheck() defined in CheckBufferOverrun
   function checkBufferAllocatedWithStrlen() in line 3654
      65 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestBufferOverrun
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function cmdLineArgs1() in line 3555
      98 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestBufferOverrun
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function countSprintfLength() in line 2978
      78 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function str(T &&) defined in Token
      uses macro definition TODO_ASSERT_EQUALS defined in testsuite.h
   function crash1() in line 3454
      13 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestBufferOverrun
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function crash2() in line 3468
      10 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestBufferOverrun
   function crash3() in line 3479
      4 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestBufferOverrun
   function executionPaths1() in line 3485
      21 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestBufferOverrun
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function executionPaths2() in line 3507
      10 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestBufferOverrun
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function executionPaths3() in line 3518
      12 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestBufferOverrun
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function executionPaths5() in line 3531
      12 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestBufferOverrun
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function executionPaths6() in line 3544
      10 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses function check(const char,bool,const char) defined in TestBufferOverrun
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function getErrorMessages() in line 3746
      5 lines of code
      0 parameters
      1 conditional paths
      uses function getErrorMessages(ErrorLogger *,const Settings *) defined in CheckBufferOverrun
   function minsize_argvalue() in line 3057
      112 lines of code
      0 parameters
      1 conditional paths
      uses function Parse(const char *,size_t) defined in tinyxml2::XMLDocument
      uses variable library defined in Settings
      uses function load(const char,const char) defined in Library
      uses function addEnabled(const std::string &) defined in Settings
      uses function check(const char,bool,const char) defined in TestBufferOverrun
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
      uses macro definition TODO_ASSERT_EQUALS defined in testsuite.h
   function minsize_mul() in line 3335
      29 lines of code
      0 parameters
      1 conditional paths
      uses function Parse(const char *,size_t) defined in tinyxml2::XMLDocument
      uses variable library defined in Settings
      uses function load(const char,const char) defined in Library
      uses function check(const char,bool,const char) defined in TestBufferOverrun
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function minsize_sizeof() in line 3170
      55 lines of code
      0 parameters
      1 conditional paths
      uses function Parse(const char *,size_t) defined in tinyxml2::XMLDocument
      uses variable library defined in Settings
      uses function load(const char,const char) defined in Library
      uses function check(const char,bool,const char) defined in TestBufferOverrun
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function minsize_strlen() in line 3226
      108 lines of code
      0 parameters
      1 conditional paths
      uses function Parse(const char *,size_t) defined in tinyxml2::XMLDocument
      uses variable library defined in Settings
      uses function load(const char,const char) defined in Library
      uses function check(const char,bool,const char) defined in TestBufferOverrun
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
      uses macro definition TODO_ASSERT_EQUALS defined in testsuite.h
   function negativeArraySize() in line 3860
      14 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestBufferOverrun
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
      uses macro definition REGISTER_TEST defined in testsuite.h
   function negativeMemoryAllocationSizeError() in line 3826
      33 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestBufferOverrun
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function noerr1() in line 243
      15 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestBufferOverrun
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function noerr2() in line 260
      20 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestBufferOverrun
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function noerr3() in line 282
      9 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestBufferOverrun
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function noerr4() in line 293
      8 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestBufferOverrun
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function pointer_out_of_bounds_1() in line 2681
      26 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestBufferOverrun
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function pointer_out_of_bounds_2() in line 2708
      34 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestBufferOverrun
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function pointer_out_of_bounds_sub() in line 2743
      21 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestBufferOverrun
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function possible_buffer_overrun_1() in line 2566
      61 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestBufferOverrun
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function recursive_long_time() in line 3424
      27 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestBufferOverrun
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function run() in line 69
      171 lines of code
      0 parameters
      1 conditional paths
      uses variable settings0 defined in TestBufferOverrun
      uses function addEnabled(const std::string &) defined in Settings
      uses macro definition TEST_CASE defined in testsuite.h
      uses function noerr1() defined in TestBufferOverrun
      uses function noerr2() defined in TestBufferOverrun
      uses function noerr3() defined in TestBufferOverrun
      uses function noerr4() defined in TestBufferOverrun
      uses function sizeof3() defined in TestBufferOverrun
      uses function array_index_1() defined in TestBufferOverrun
      uses function array_index_2() defined in TestBufferOverrun
      uses function array_index_3() defined in TestBufferOverrun
      uses function array_index_6() defined in TestBufferOverrun
      uses function array_index_7() defined in TestBufferOverrun
      uses function array_index_9() defined in TestBufferOverrun
      uses function array_index_11() defined in TestBufferOverrun
      uses function array_index_12() defined in TestBufferOverrun
      uses function array_index_13() defined in TestBufferOverrun
      uses function array_index_14() defined in TestBufferOverrun
      uses function array_index_15() defined in TestBufferOverrun
      uses function array_index_16() defined in TestBufferOverrun
      uses function array_index_17() defined in TestBufferOverrun
      uses function array_index_18() defined in TestBufferOverrun
      uses function array_index_19() defined in TestBufferOverrun
      uses function array_index_20() defined in TestBufferOverrun
      uses function array_index_21() defined in TestBufferOverrun
      uses function array_index_22() defined in TestBufferOverrun
      uses function array_index_23() defined in TestBufferOverrun
      uses function array_index_24() defined in TestBufferOverrun
      uses function array_index_25() defined in TestBufferOverrun
      uses function array_index_26() defined in TestBufferOverrun
      uses function array_index_27() defined in TestBufferOverrun
      uses function array_index_28() defined in TestBufferOverrun
      uses function array_index_29() defined in TestBufferOverrun
      uses function array_index_30() defined in TestBufferOverrun
      uses function array_index_31() defined in TestBufferOverrun
      uses function array_index_32() defined in TestBufferOverrun
      uses function array_index_33() defined in TestBufferOverrun
      uses function array_index_34() defined in TestBufferOverrun
      uses function array_index_35() defined in TestBufferOverrun
      uses function array_index_36() defined in TestBufferOverrun
      uses function array_index_37() defined in TestBufferOverrun
      uses function array_index_38() defined in TestBufferOverrun
      uses function array_index_39() defined in TestBufferOverrun
      uses function array_index_40() defined in TestBufferOverrun
      uses function array_index_41() defined in TestBufferOverrun
      uses function array_index_42() defined in TestBufferOverrun
      uses function array_index_43() defined in TestBufferOverrun
      uses function array_index_44() defined in TestBufferOverrun
      uses function array_index_45() defined in TestBufferOverrun
      uses function array_index_46() defined in TestBufferOverrun
      uses function array_index_47() defined in TestBufferOverrun
      uses function array_index_multidim() defined in TestBufferOverrun
      uses function array_index_switch_in_for() defined in TestBufferOverrun
      uses function array_index_for_in_for() defined in TestBufferOverrun
      uses function array_index_calculation() defined in TestBufferOverrun
      uses function array_index_negative1() defined in TestBufferOverrun
      uses function array_index_negative2() defined in TestBufferOverrun
      uses function array_index_for_decr() defined in TestBufferOverrun
      uses function array_index_varnames() defined in TestBufferOverrun
      uses function array_index_for_continue() defined in TestBufferOverrun
      uses function array_index_for() defined in TestBufferOverrun
      uses function array_index_for_neq() defined in TestBufferOverrun
      uses function array_index_for_question() defined in TestBufferOverrun
      uses function array_index_for_andand_oror() defined in TestBufferOverrun
      uses function array_index_for_varid0() defined in TestBufferOverrun
      uses function array_index_vla_for() defined in TestBufferOverrun
      uses function array_index_extern() defined in TestBufferOverrun
      uses function array_index_cast() defined in TestBufferOverrun
      uses function array_index_string_literal() defined in TestBufferOverrun
      uses function array_index_same_struct_and_var_name() defined in TestBufferOverrun
      uses function array_index_valueflow() defined in TestBufferOverrun
      uses function array_index_valueflow_pointer() defined in TestBufferOverrun
      uses function array_index_function_parameter() defined in TestBufferOverrun
      uses function buffer_overrun_2_struct() defined in TestBufferOverrun
      uses function buffer_overrun_3() defined in TestBufferOverrun
      uses function buffer_overrun_4() defined in TestBufferOverrun
      uses function buffer_overrun_5() defined in TestBufferOverrun
      uses function buffer_overrun_6() defined in TestBufferOverrun
      uses function buffer_overrun_7() defined in TestBufferOverrun
      uses function buffer_overrun_8() defined in TestBufferOverrun
      uses function buffer_overrun_9() defined in TestBufferOverrun
      uses function buffer_overrun_10() defined in TestBufferOverrun
      uses function buffer_overrun_11() defined in TestBufferOverrun
      uses function buffer_overrun_15() defined in TestBufferOverrun
      uses function buffer_overrun_16() defined in TestBufferOverrun
      uses function buffer_overrun_18() defined in TestBufferOverrun
      uses function buffer_overrun_19() defined in TestBufferOverrun
      uses function buffer_overrun_20() defined in TestBufferOverrun
      uses function buffer_overrun_21() defined in TestBufferOverrun
      uses function buffer_overrun_24() defined in TestBufferOverrun
      uses function buffer_overrun_26() defined in TestBufferOverrun
      uses function buffer_overrun_27() defined in TestBufferOverrun
      uses function buffer_overrun_28() defined in TestBufferOverrun
      uses function buffer_overrun_bailoutIfSwitch() defined in TestBufferOverrun
      uses function buffer_overrun_function_array_argument() defined in TestBufferOverrun
      uses function possible_buffer_overrun_1() defined in TestBufferOverrun
      uses function buffer_overrun_readSizeFromCfg() defined in TestBufferOverrun
      uses function valueflow_string() defined in TestBufferOverrun
      uses function pointer_out_of_bounds_1() defined in TestBufferOverrun
      uses function pointer_out_of_bounds_2() defined in TestBufferOverrun
      uses function pointer_out_of_bounds_sub() defined in TestBufferOverrun
      uses function strncat1() defined in TestBufferOverrun
      uses function strncat2() defined in TestBufferOverrun
      uses function strncat3() defined in TestBufferOverrun
      uses function strcat1() defined in TestBufferOverrun
      uses function strcat2() defined in TestBufferOverrun
      uses function strcat3() defined in TestBufferOverrun
      uses function varid1() defined in TestBufferOverrun
      uses function varid2() defined in TestBufferOverrun
      uses function assign1() defined in TestBufferOverrun
      uses function alloc_new() defined in TestBufferOverrun
      uses function alloc_malloc() defined in TestBufferOverrun
      uses function alloc_string() defined in TestBufferOverrun
      uses function alloc_alloca() defined in TestBufferOverrun
      uses function countSprintfLength() defined in TestBufferOverrun
      uses function minsize_argvalue() defined in TestBufferOverrun
      uses function minsize_sizeof() defined in TestBufferOverrun
      uses function minsize_strlen() defined in TestBufferOverrun
      uses function minsize_mul() defined in TestBufferOverrun
      uses function unknownType() defined in TestBufferOverrun
      uses function terminateStrncpy1() defined in TestBufferOverrun
      uses function terminateStrncpy2() defined in TestBufferOverrun
      uses function terminateStrncpy3() defined in TestBufferOverrun
      uses function recursive_long_time() defined in TestBufferOverrun
      uses function crash1() defined in TestBufferOverrun
      uses function crash2() defined in TestBufferOverrun
      uses function crash3() defined in TestBufferOverrun
      uses function executionPaths1() defined in TestBufferOverrun
      uses function executionPaths2() defined in TestBufferOverrun
      uses function executionPaths3() defined in TestBufferOverrun
      uses function executionPaths5() defined in TestBufferOverrun
      uses function executionPaths6() defined in TestBufferOverrun
      uses function cmdLineArgs1() defined in TestBufferOverrun
      uses function checkBufferAllocatedWithStrlen() defined in TestBufferOverrun
      uses function scope() defined in TestBufferOverrun
      uses function getErrorMessages() defined in TestBufferOverrun
      uses function unknownMacroNoDecl() defined in TestBufferOverrun
      uses function arrayIndexThenCheck() defined in TestBufferOverrun
      uses function bufferNotZeroTerminated() defined in TestBufferOverrun
      uses function negativeMemoryAllocationSizeError() defined in TestBufferOverrun
      uses function negativeArraySize() defined in TestBufferOverrun
   function scope() in line 3720
      25 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestBufferOverrun
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function sizeof3() in line 302
      11 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestBufferOverrun
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function strcat1() in line 2791
      9 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestBufferOverrun
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function strcat2() in line 2801
      9 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestBufferOverrun
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function strcat3() in line 2811
      7 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestBufferOverrun
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function strncat1() in line 2765
      8 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestBufferOverrun
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function strncat2() in line 2774
      7 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestBufferOverrun
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function strncat3() in line 2782
      7 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestBufferOverrun
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function terminateStrncpy1() in line 3373
      25 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestBufferOverrun
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function terminateStrncpy2() in line 3399
      9 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestBufferOverrun
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function terminateStrncpy3() in line 3409
      14 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestBufferOverrun
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function unknownMacroNoDecl() in line 3752
      8 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestBufferOverrun
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function unknownType() in line 3365
      7 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestBufferOverrun
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function valueflow_string() in line 2672
      8 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestBufferOverrun
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function varid1() in line 2819
      12 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestBufferOverrun
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function varid2() in line 2832
      7 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestBufferOverrun
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function TestBufferOverrun() in line 29
      protection public
      2 lines of code
      0 parameters
      1 conditional paths
   variable settings0 in line 33
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/test/testcharvar.cpp
module TestCharVar
   inherits from TestFixture
   function array_index_1() in line 55
      38 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char) defined in TestCharVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function array_index_2() in line 94
      9 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char) defined in TestCharVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function bitop() in line 104
      32 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char) defined in TestCharVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
      uses macro definition REGISTER_TEST defined in testsuite.h
   function check(const char) in line 41
      13 lines of code
      1 parameters
      1 conditional paths
      uses variable errout defined in redirect.h
      uses variable settings defined in TestCharVar
      uses variable code defined in extracttests.py
      uses function tokenize(std::istream &,const char,const std::string &,bool) defined in Tokenizer
      uses function checkCharVariable() defined in CheckOther
   function run() in line 32
      8 lines of code
      0 parameters
      1 conditional paths
      uses variable settings defined in TestCharVar
      uses function platform(PlatformType) defined in Settings
      uses enumvalue Unspecified defined in Settings
      uses function addEnabled(const std::string &) defined in Settings
      uses macro definition TEST_CASE defined in testsuite.h
      uses function array_index_1() defined in TestCharVar
      uses function array_index_2() defined in TestCharVar
      uses function bitop() defined in TestCharVar
   function TestCharVar() in line 26
      protection public
      2 lines of code
      0 parameters
      1 conditional paths
   variable settings in line 30
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/test/testclass.cpp
module TestClass
   inherits from TestFixture
   function assigningArrayElementIsNotAConstOperation() in line 5138
      12 lines of code
      0 parameters
      1 conditional paths
      uses function checkConst(const char,Settings *,bool) defined in TestClass
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function assigningPointerToPointerIsNotAConstOperation() in line 5125
      12 lines of code
      0 parameters
      1 conditional paths
      uses function checkConst(const char,Settings *,bool) defined in TestClass
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function checkConst(const char,Settings *,bool) in line 2785
      18 lines of code
      3 parameters
      2 conditional paths
      uses variable errout defined in redirect.h
      uses variable s defined in extracttests.py
      uses variable settings0 defined in TestClass
      uses variable code defined in extracttests.py
      uses function tokenize(std::istream &,const char,const std::string &,bool) defined in Tokenizer
      uses function simplifyTokenList2() defined in Tokenizer
      uses function checkConst() defined in CheckClass
   function checkCopyConstructor(const char) in line 385
      14 lines of code
      1 parameters
      1 conditional paths
      uses variable errout defined in redirect.h
      uses variable settings0 defined in TestClass
      uses variable code defined in extracttests.py
      uses function tokenize(std::istream &,const char,const std::string &,bool) defined in Tokenizer
      uses function simplifyTokenList2() defined in Tokenizer
      uses function copyconstructors() defined in CheckClass
   function checkDuplInheritedMembers(const char) in line 263
      14 lines of code
      1 parameters
      1 conditional paths
      uses variable errout defined in redirect.h
      uses variable settings1 defined in TestClass
      uses variable code defined in extracttests.py
      uses function tokenize(std::istream &,const char,const std::string &,bool) defined in Tokenizer
      uses function simplifyTokenList2() defined in Tokenizer
      uses function checkDuplInheritedMembers() defined in CheckClass
   function checkExplicitConstructors(const char) in line 190
      14 lines of code
      1 parameters
      1 conditional paths
      uses variable errout defined in redirect.h
      uses variable settings0 defined in TestClass
      uses variable code defined in extracttests.py
      uses function tokenize(std::istream &,const char,const std::string &,bool) defined in Tokenizer
      uses function simplifyTokenList2() defined in Tokenizer
      uses function checkExplicitConstructors() defined in CheckClass
   function checkInitializationListUsage(const char) in line 5865
      17 lines of code
      1 parameters
      1 conditional paths
      uses variable errout defined in redirect.h
      uses function addEnabled(const std::string &) defined in Settings
      uses variable code defined in extracttests.py
      uses function tokenize(std::istream &,const char,const std::string &,bool) defined in Tokenizer
      uses function simplifyTokenList2() defined in Tokenizer
      uses function initializationListUsage() defined in CheckClass
   function checkInitializerListOrder(const char) in line 5830
      16 lines of code
      1 parameters
      1 conditional paths
      uses variable errout defined in redirect.h
      uses variable settings0 defined in TestClass
      uses variable inconclusive defined in Settings
      uses variable code defined in extracttests.py
      uses function tokenize(std::istream &,const char,const std::string &,bool) defined in Tokenizer
      uses function simplifyTokenList2() defined in Tokenizer
      uses function initializerListOrder() defined in CheckClass
   function checkNoMemset(const char) in line 2169
      6 lines of code
      1 parameters
      1 conditional paths
      uses function addEnabled(const std::string &) defined in Settings
      uses variable code defined in extracttests.py
   function checkNoMemset(const char,const Settings &) in line 2176
      13 lines of code
      2 parameters
      1 conditional paths
      uses variable errout defined in redirect.h
      uses variable code defined in extracttests.py
      uses function tokenize(std::istream &,const char,const std::string &,bool) defined in Tokenizer
      uses function checkMemset() defined in CheckClass
   function checkOpertorEq(const char) in line 628
      16 lines of code
      1 parameters
      1 conditional paths
      uses variable errout defined in redirect.h
      uses variable settings0 defined in TestClass
      uses variable inconclusive defined in Settings
      uses variable code defined in extracttests.py
      uses function tokenize(std::istream &,const char,const std::string &,bool) defined in Tokenizer
      uses function simplifyTokenList2() defined in Tokenizer
      uses function operatorEq() defined in CheckClass
   function checkOpertorEqRetRefThis(const char) in line 787
      14 lines of code
      1 parameters
      1 conditional paths
      uses variable errout defined in redirect.h
      uses variable settings0 defined in TestClass
      uses variable code defined in extracttests.py
      uses function tokenize(std::istream &,const char,const std::string &,bool) defined in Tokenizer
      uses function simplifyTokenList2() defined in Tokenizer
      uses function operatorEqRetRefThis() defined in CheckClass
   function checkOpertorEqToSelf(const char) in line 1071
      14 lines of code
      1 parameters
      1 conditional paths
      uses variable errout defined in redirect.h
      uses variable settings1 defined in TestClass
      uses variable code defined in extracttests.py
      uses function tokenize(std::istream &,const char,const std::string &,bool) defined in Tokenizer
      uses function simplifyTokenList2() defined in Tokenizer
      uses function operatorEqToSelf() defined in CheckClass
   function checkPureVirtualFunctionCall(const char,Settings *,bool) in line 6114
      21 lines of code
      3 parameters
      2 conditional paths
      uses variable errout defined in redirect.h
      uses variable s defined in extracttests.py
      uses variable code defined in extracttests.py
      uses function tokenize(std::istream &,const char,const std::string &,bool) defined in Tokenizer
      uses function simplifyTokenList2() defined in Tokenizer
      uses function checkPureVirtualFunctionCall() defined in CheckClass
   function checkSelfInitialization(const char) in line 6018
      13 lines of code
      1 parameters
      1 conditional paths
      uses variable errout defined in redirect.h
      uses variable settings0 defined in TestClass
      uses variable code defined in extracttests.py
      uses function tokenize(std::istream &,const char,const std::string &,bool) defined in Tokenizer
      uses function simplifyTokenList2() defined in Tokenizer
      uses function checkSelfInitialization() defined in CheckClass
   function checkThisSubtraction(const char) in line 2752
      14 lines of code
      1 parameters
      1 conditional paths
      uses variable errout defined in redirect.h
      uses variable settings1 defined in TestClass
      uses variable code defined in extracttests.py
      uses function tokenize(std::istream &,const char,const std::string &,bool) defined in Tokenizer
      uses function simplifyTokenList2() defined in Tokenizer
      uses function thisSubtraction() defined in CheckClass
   function checkVirtualDestructor(const char,bool) in line 1891
      16 lines of code
      2 parameters
      1 conditional paths
      uses variable errout defined in redirect.h
      uses variable settings0 defined in TestClass
      uses variable inconclusive defined in Settings
      uses variable code defined in extracttests.py
      uses function tokenize(std::istream &,const char,const std::string &,bool) defined in Tokenizer
      uses function simplifyTokenList2() defined in Tokenizer
      uses function virtualDestructor() defined in CheckClass
   function const1() in line 2804
      71 lines of code
      0 parameters
      1 conditional paths
      uses function checkConst(const char,Settings *,bool) defined in TestClass
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function const10() in line 3401
      26 lines of code
      0 parameters
      1 conditional paths
      uses function checkConst(const char,Settings *,bool) defined in TestClass
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function const11() in line 3428
      10 lines of code
      0 parameters
      1 conditional paths
      uses function checkConst(const char,Settings *,bool) defined in TestClass
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function const12() in line 3439
      10 lines of code
      0 parameters
      1 conditional paths
      uses function checkConst(const char,Settings *,bool) defined in TestClass
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function const13() in line 3450
      26 lines of code
      0 parameters
      1 conditional paths
      uses function checkConst(const char,Settings *,bool) defined in TestClass
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function const14() in line 3477
      251 lines of code
      0 parameters
      1 conditional paths
      uses function checkConst(const char,Settings *,bool) defined in TestClass
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function const15() in line 3729
      31 lines of code
      0 parameters
      1 conditional paths
      uses function checkConst(const char,Settings *,bool) defined in TestClass
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function const16() in line 3761
      8 lines of code
      0 parameters
      1 conditional paths
      uses function checkConst(const char,Settings *,bool) defined in TestClass
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function const17() in line 3770
      10 lines of code
      0 parameters
      1 conditional paths
      uses function checkConst(const char,Settings *,bool) defined in TestClass
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function const18() in line 3781
      8 lines of code
      0 parameters
      1 conditional paths
      uses function checkConst(const char,Settings *,bool) defined in TestClass
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function const19() in line 3790
      11 lines of code
      0 parameters
      1 conditional paths
      uses function checkConst(const char,Settings *,bool) defined in TestClass
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function const2() in line 2876
      51 lines of code
      0 parameters
      1 conditional paths
      uses function checkConst(const char,Settings *,bool) defined in TestClass
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function const20() in line 3802
      37 lines of code
      0 parameters
      1 conditional paths
      uses function checkConst(const char,Settings *,bool) defined in TestClass
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function const21() in line 3840
      15 lines of code
      0 parameters
      1 conditional paths
      uses function checkConst(const char,Settings *,bool) defined in TestClass
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function const22() in line 3856
      19 lines of code
      0 parameters
      1 conditional paths
      uses function checkConst(const char,Settings *,bool) defined in TestClass
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function const23() in line 3876
      11 lines of code
      0 parameters
      1 conditional paths
      uses function checkConst(const char,Settings *,bool) defined in TestClass
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function const24() in line 3888
      12 lines of code
      0 parameters
      1 conditional paths
      uses function checkConst(const char,Settings *,bool) defined in TestClass
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function const25() in line 3902
      58 lines of code
      0 parameters
      1 conditional paths
      uses function checkConst(const char,Settings *,bool) defined in TestClass
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function const26() in line 3961
      19 lines of code
      0 parameters
      1 conditional paths
      uses function checkConst(const char,Settings *,bool) defined in TestClass
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function const27() in line 3981
      17 lines of code
      0 parameters
      1 conditional paths
      uses function checkConst(const char,Settings *,bool) defined in TestClass
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function const28() in line 3999
      38 lines of code
      0 parameters
      1 conditional paths
      uses function checkConst(const char,Settings *,bool) defined in TestClass
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function const29() in line 4038
      23 lines of code
      0 parameters
      1 conditional paths
      uses function checkConst(const char,Settings *,bool) defined in TestClass
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function const3() in line 2928
      43 lines of code
      0 parameters
      1 conditional paths
      uses function checkConst(const char,Settings *,bool) defined in TestClass
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function const30() in line 4062
      122 lines of code
      0 parameters
      1 conditional paths
      uses function checkConst(const char,Settings *,bool) defined in TestClass
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function const31() in line 4185
      9 lines of code
      0 parameters
      1 conditional paths
      uses function checkConst(const char,Settings *,bool) defined in TestClass
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function const32() in line 4195
      8 lines of code
      0 parameters
      1 conditional paths
      uses function checkConst(const char,Settings *,bool) defined in TestClass
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function const33() in line 4204
      7 lines of code
      0 parameters
      1 conditional paths
      uses function checkConst(const char,Settings *,bool) defined in TestClass
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function const34() in line 4212
      8 lines of code
      0 parameters
      1 conditional paths
      uses function checkConst(const char,Settings *,bool) defined in TestClass
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function const35() in line 4221
      58 lines of code
      0 parameters
      1 conditional paths
      uses function checkConst(const char,Settings *,bool) defined in TestClass
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function const36() in line 4280
      11 lines of code
      0 parameters
      1 conditional paths
      uses function checkConst(const char,Settings *,bool) defined in TestClass
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function const37() in line 4292
      28 lines of code
      0 parameters
      1 conditional paths
      uses function checkConst(const char,Settings *,bool) defined in TestClass
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function const38() in line 4321
      15 lines of code
      0 parameters
      1 conditional paths
      uses function checkConst(const char,Settings *,bool) defined in TestClass
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function const39() in line 4337
      20 lines of code
      0 parameters
      1 conditional paths
      uses function checkConst(const char,Settings *,bool) defined in TestClass
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function const4() in line 2972
      259 lines of code
      0 parameters
      1 conditional paths
      uses function checkConst(const char,Settings *,bool) defined in TestClass
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function const40() in line 4358
      16 lines of code
      0 parameters
      1 conditional paths
      uses function checkConst(const char,Settings *,bool) defined in TestClass
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function const41() in line 4375
      75 lines of code
      0 parameters
      1 conditional paths
      uses function checkConst(const char,Settings *,bool) defined in TestClass
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function const42() in line 4451
      75 lines of code
      0 parameters
      1 conditional paths
      uses function checkConst(const char,Settings *,bool) defined in TestClass
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function const43() in line 4527
      57 lines of code
      0 parameters
      1 conditional paths
      uses function checkConst(const char,Settings *,bool) defined in TestClass
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function const44() in line 4585
      13 lines of code
      0 parameters
      1 conditional paths
      uses function checkConst(const char,Settings *,bool) defined in TestClass
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function const45() in line 4599
      16 lines of code
      0 parameters
      1 conditional paths
      uses function checkConst(const char,Settings *,bool) defined in TestClass
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function const46() in line 4616
      15 lines of code
      0 parameters
      1 conditional paths
      uses function checkConst(const char,Settings *,bool) defined in TestClass
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function const47() in line 4632
      20 lines of code
      0 parameters
      1 conditional paths
      uses function checkConst(const char,Settings *,bool) defined in TestClass
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function const48() in line 4653
      21 lines of code
      0 parameters
      1 conditional paths
      uses function checkConst(const char,Settings *,bool) defined in TestClass
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function const49() in line 4675
      13 lines of code
      0 parameters
      1 conditional paths
      uses function checkConst(const char,Settings *,bool) defined in TestClass
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function const5() in line 3323
      13 lines of code
      0 parameters
      1 conditional paths
      uses function checkConst(const char,Settings *,bool) defined in TestClass
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function const50() in line 4689
      15 lines of code
      0 parameters
      1 conditional paths
      uses function checkConst(const char,Settings *,bool) defined in TestClass
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function const51() in line 4705
      27 lines of code
      0 parameters
      1 conditional paths
      uses function checkConst(const char,Settings *,bool) defined in TestClass
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function const52() in line 4733
      9 lines of code
      0 parameters
      1 conditional paths
      uses function checkConst(const char,Settings *,bool) defined in TestClass
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function const53() in line 4743
      15 lines of code
      0 parameters
      1 conditional paths
      uses function checkConst(const char,Settings *,bool) defined in TestClass
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function const54() in line 4759
      7 lines of code
      0 parameters
      1 conditional paths
      uses function checkConst(const char,Settings *,bool) defined in TestClass
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function const55() in line 4767
      9 lines of code
      0 parameters
      1 conditional paths
      uses function checkConst(const char,Settings *,bool) defined in TestClass
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function const56() in line 4777
      57 lines of code
      0 parameters
      1 conditional paths
      uses function checkConst(const char,Settings *,bool) defined in TestClass
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function const57() in line 4835
      57 lines of code
      0 parameters
      1 conditional paths
      uses function checkConst(const char,Settings *,bool) defined in TestClass
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function const58() in line 4893
      31 lines of code
      0 parameters
      1 conditional paths
      uses function checkConst(const char,Settings *,bool) defined in TestClass
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function const59() in line 4925
      11 lines of code
      0 parameters
      1 conditional paths
      uses function checkConst(const char,Settings *,bool) defined in TestClass
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function const6() in line 3337
      29 lines of code
      0 parameters
      1 conditional paths
      uses function checkConst(const char,Settings *,bool) defined in TestClass
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function const60() in line 4937
      23 lines of code
      0 parameters
      1 conditional paths
      uses function checkConst(const char,Settings *,bool) defined in TestClass
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function const61() in line 4961
      35 lines of code
      0 parameters
      1 conditional paths
      uses function checkConst(const char,Settings *,bool) defined in TestClass
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function const62() in line 4997
      13 lines of code
      0 parameters
      1 conditional paths
      uses function checkConst(const char,Settings *,bool) defined in TestClass
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function const63() in line 5011
      46 lines of code
      0 parameters
      1 conditional paths
      uses function checkConst(const char,Settings *,bool) defined in TestClass
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function const64() in line 5058
      14 lines of code
      0 parameters
      1 conditional paths
      uses function checkConst(const char,Settings *,bool) defined in TestClass
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function const7() in line 3367
      10 lines of code
      0 parameters
      1 conditional paths
      uses function checkConst(const char,Settings *,bool) defined in TestClass
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function const8() in line 3378
      11 lines of code
      0 parameters
      1 conditional paths
      uses function checkConst(const char,Settings *,bool) defined in TestClass
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function const9() in line 3390
      10 lines of code
      0 parameters
      1 conditional paths
      uses function checkConst(const char,Settings *,bool) defined in TestClass
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function const_handleDefaultParameters() in line 5073
      33 lines of code
      0 parameters
      1 conditional paths
      uses function checkConst(const char,Settings *,bool) defined in TestClass
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function const_passThisToMemberOfOtherClass() in line 5107
      17 lines of code
      0 parameters
      1 conditional paths
      uses function checkConst(const char,Settings *,bool) defined in TestClass
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function constArrayOperator() in line 5797
      16 lines of code
      0 parameters
      1 conditional paths
      uses function checkConst(const char,Settings *,bool) defined in TestClass
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function constassign1() in line 5202
      61 lines of code
      0 parameters
      1 conditional paths
      uses function checkConst(const char,Settings *,bool) defined in TestClass
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function constassign2() in line 5264
      90 lines of code
      0 parameters
      1 conditional paths
      uses function checkConst(const char,Settings *,bool) defined in TestClass
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function constassignarray() in line 5406
      61 lines of code
      0 parameters
      1 conditional paths
      uses function checkConst(const char,Settings *,bool) defined in TestClass
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function constDelete() in line 5479
      7 lines of code
      0 parameters
      1 conditional paths
      uses function checkConst(const char,Settings *,bool) defined in TestClass
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function constFriend() in line 5775
      7 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses function checkConst(const char,Settings *,bool) defined in TestClass
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function constFunc() in line 5503
      27 lines of code
      0 parameters
      1 conditional paths
      uses function checkConst(const char,Settings *,bool) defined in TestClass
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function constIfCfg() in line 5758
      16 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses function checkConst(const char,Settings *,bool) defined in TestClass
      uses variable settings0 defined in TestClass
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function constincdec() in line 5152
      49 lines of code
      0 parameters
      1 conditional paths
      uses function checkConst(const char,Settings *,bool) defined in TestClass
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function constincdecarray() in line 5356
      49 lines of code
      0 parameters
      1 conditional paths
      uses function checkConst(const char,Settings *,bool) defined in TestClass
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function constLPVOID() in line 5488
      13 lines of code
      0 parameters
      1 conditional paths
      uses function checkConst(const char,Settings *,bool) defined in TestClass
      uses macro definition TODO_ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function constoperator1() in line 3233
      7 lines of code
      0 parameters
      1 conditional paths
      uses function checkConst(const char,Settings *,bool) defined in TestClass
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function constoperator2() in line 3242
      25 lines of code
      0 parameters
      1 conditional paths
      uses function checkConst(const char,Settings *,bool) defined in TestClass
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function constoperator3() in line 3268
      14 lines of code
      0 parameters
      1 conditional paths
      uses function checkConst(const char,Settings *,bool) defined in TestClass
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function constoperator4() in line 3283
      15 lines of code
      0 parameters
      1 conditional paths
      uses function checkConst(const char,Settings *,bool) defined in TestClass
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function constoperator5() in line 3299
      22 lines of code
      0 parameters
      1 conditional paths
      uses function checkConst(const char,Settings *,bool) defined in TestClass
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function constRangeBasedFor() in line 5814
      15 lines of code
      0 parameters
      1 conditional paths
      uses function checkConst(const char,Settings *,bool) defined in TestClass
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function constReturnReference() in line 5469
      8 lines of code
      0 parameters
      1 conditional paths
      uses function checkConst(const char,Settings *,bool) defined in TestClass
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function constUnion() in line 5783
      13 lines of code
      0 parameters
      1 conditional paths
      uses function checkConst(const char,Settings *,bool) defined in TestClass
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function constVirtualFunc() in line 5531
      226 lines of code
      0 parameters
      1 conditional paths
      uses function checkConst(const char,Settings *,bool) defined in TestClass
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function copyConstructor1() in line 400
      209 lines of code
      0 parameters
      1 conditional paths
      uses function checkCopyConstructor(const char) defined in TestClass
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
      uses macro definition TODO_ASSERT_EQUALS defined in testsuite.h
   function copyConstructor2() in line 611
      14 lines of code
      0 parameters
      1 conditional paths
      uses function checkCopyConstructor(const char) defined in TestClass
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function duplInheritedMembers() in line 278
      106 lines of code
      0 parameters
      1 conditional paths
      uses function checkDuplInheritedMembers(const char) defined in TestClass
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function explicitConstructors() in line 205
      57 lines of code
      0 parameters
      1 conditional paths
      uses function checkExplicitConstructors(const char) defined in TestClass
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function initializerListOrder() in line 5847
      17 lines of code
      0 parameters
      1 conditional paths
      uses function checkInitializerListOrder(const char) defined in TestClass
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function initializerListUsage() in line 5883
      133 lines of code
      0 parameters
      1 conditional paths
      uses function checkInitializationListUsage(const char) defined in TestClass
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function mallocOnClass() in line 2701
      49 lines of code
      0 parameters
      1 conditional paths
      uses function checkNoMemset(const char) defined in TestClass
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function memsetOnClass() in line 2190
      214 lines of code
      0 parameters
      1 conditional paths
      uses function checkNoMemset(const char) defined in TestClass
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function memsetOnFloat() in line 2655
      37 lines of code
      0 parameters
      1 conditional paths
      uses function checkNoMemset(const char) defined in TestClass
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function memsetOnInvalid() in line 2405
      15 lines of code
      0 parameters
      1 conditional paths
      uses function checkNoMemset(const char) defined in TestClass
   function memsetOnStdPodType() in line 2623
      31 lines of code
      0 parameters
      1 conditional paths
      uses function Parse(const char *,size_t) defined in tinyxml2::XMLDocument
      uses variable library defined in Settings
      uses function load(const char,const char) defined in Library
      uses function checkNoMemset(const char) defined in TestClass
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function memsetOnStruct() in line 2421
      75 lines of code
      0 parameters
      1 conditional paths
      uses function checkNoMemset(const char) defined in TestClass
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function memsetOnUnknown() in line 2693
      7 lines of code
      0 parameters
      1 conditional paths
      uses function checkNoMemset(const char) defined in TestClass
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function memsetVector() in line 2497
      125 lines of code
      0 parameters
      1 conditional paths
      uses function checkNoMemset(const char) defined in TestClass
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function operatorEq1() in line 645
      85 lines of code
      0 parameters
      1 conditional paths
      uses function checkOpertorEq(const char) defined in TestClass
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function operatorEq2() in line 731
      29 lines of code
      0 parameters
      1 conditional paths
      uses function checkOpertorEq(const char) defined in TestClass
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function operatorEq3() in line 761
      8 lines of code
      0 parameters
      1 conditional paths
      uses function checkOpertorEq(const char) defined in TestClass
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function operatorEq4() in line 770
      7 lines of code
      0 parameters
      1 conditional paths
      uses function checkOpertorEq(const char) defined in TestClass
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function operatorEq5() in line 778
      7 lines of code
      0 parameters
      1 conditional paths
      uses function checkOpertorEq(const char) defined in TestClass
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function operatorEqRetRefThis1() in line 802
      103 lines of code
      0 parameters
      1 conditional paths
      uses function checkOpertorEqRetRefThis(const char) defined in TestClass
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function operatorEqRetRefThis2() in line 906
      17 lines of code
      0 parameters
      1 conditional paths
      uses function checkOpertorEqRetRefThis(const char) defined in TestClass
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function operatorEqRetRefThis3() in line 924
      48 lines of code
      0 parameters
      1 conditional paths
      uses function checkOpertorEqRetRefThis(const char) defined in TestClass
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function operatorEqRetRefThis4() in line 973
      9 lines of code
      0 parameters
      1 conditional paths
      uses function checkOpertorEqRetRefThis(const char) defined in TestClass
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function operatorEqRetRefThis5() in line 983
      51 lines of code
      0 parameters
      1 conditional paths
      uses function checkOpertorEqRetRefThis(const char) defined in TestClass
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function operatorEqRetRefThis6() in line 1035
      15 lines of code
      0 parameters
      1 conditional paths
      uses function checkOpertorEqRetRefThis(const char) defined in TestClass
   function operatorEqRetRefThis7() in line 1051
      18 lines of code
      0 parameters
      1 conditional paths
      uses function checkOpertorEqRetRefThis(const char) defined in TestClass
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function operatorEqToSelf1() in line 1086
      126 lines of code
      0 parameters
      1 conditional paths
      uses function checkOpertorEqToSelf(const char) defined in TestClass
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function operatorEqToSelf2() in line 1213
      137 lines of code
      0 parameters
      1 conditional paths
      uses function checkOpertorEqToSelf(const char) defined in TestClass
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function operatorEqToSelf3() in line 1351
      51 lines of code
      0 parameters
      1 conditional paths
      uses function checkOpertorEqToSelf(const char) defined in TestClass
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function operatorEqToSelf4() in line 1403
      67 lines of code
      0 parameters
      1 conditional paths
      uses function checkOpertorEqToSelf(const char) defined in TestClass
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function operatorEqToSelf5() in line 1471
      294 lines of code
      0 parameters
      1 conditional paths
      uses function checkOpertorEqToSelf(const char) defined in TestClass
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function operatorEqToSelf6() in line 1766
      68 lines of code
      0 parameters
      1 conditional paths
      uses function checkOpertorEqToSelf(const char) defined in TestClass
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function operatorEqToSelf7() in line 1835
      16 lines of code
      0 parameters
      1 conditional paths
      uses function checkOpertorEqToSelf(const char) defined in TestClass
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function operatorEqToSelf8() in line 1852
      18 lines of code
      0 parameters
      1 conditional paths
      uses function checkOpertorEqToSelf(const char) defined in TestClass
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function operatorEqToSelf9() in line 1871
      18 lines of code
      0 parameters
      1 conditional paths
      uses function checkOpertorEqToSelf(const char) defined in TestClass
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function pureVirtualFunctionCall() in line 6136
      103 lines of code
      0 parameters
      1 conditional paths
      uses function checkPureVirtualFunctionCall(const char,Settings *,bool) defined in TestClass
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
      uses macro definition TODO_ASSERT_EQUALS defined in testsuite.h
   function pureVirtualFunctionCallOtherClass() in line 6240
      23 lines of code
      0 parameters
      1 conditional paths
      uses function checkPureVirtualFunctionCall(const char,Settings *,bool) defined in TestClass
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function pureVirtualFunctionCallPrevented() in line 6291
      38 lines of code
      0 parameters
      1 conditional paths
      uses function checkPureVirtualFunctionCall(const char,Settings *,bool) defined in TestClass
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
      uses macro definition REGISTER_TEST defined in testsuite.h
   function pureVirtualFunctionCallWithBody() in line 6264
      26 lines of code
      0 parameters
      1 conditional paths
      uses function checkPureVirtualFunctionCall(const char,Settings *,bool) defined in TestClass
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function run() in line 34
      154 lines of code
      0 parameters
      1 conditional paths
      uses variable settings0 defined in TestClass
      uses function addEnabled(const std::string &) defined in Settings
      uses variable settings1 defined in TestClass
      uses macro definition TEST_CASE defined in testsuite.h
      uses function virtualDestructor1() defined in TestClass
      uses function virtualDestructor2() defined in TestClass
      uses function virtualDestructor3() defined in TestClass
      uses function virtualDestructor4() defined in TestClass
      uses function virtualDestructor5() defined in TestClass
      uses function virtualDestructor6() defined in TestClass
      uses function virtualDestructorProtected() defined in TestClass
      uses function virtualDestructorInherited() defined in TestClass
      uses function virtualDestructorTemplate() defined in TestClass
      uses function virtualDestructorInconclusive() defined in TestClass
      uses function copyConstructor1() defined in TestClass
      uses function copyConstructor2() defined in TestClass
      uses function operatorEq1() defined in TestClass
      uses function operatorEq2() defined in TestClass
      uses function operatorEq3() defined in TestClass
      uses function operatorEq4() defined in TestClass
      uses function operatorEq5() defined in TestClass
      uses function operatorEqRetRefThis1() defined in TestClass
      uses function operatorEqRetRefThis2() defined in TestClass
      uses function operatorEqRetRefThis3() defined in TestClass
      uses function operatorEqRetRefThis4() defined in TestClass
      uses function operatorEqRetRefThis5() defined in TestClass
      uses function operatorEqRetRefThis6() defined in TestClass
      uses function operatorEqRetRefThis7() defined in TestClass
      uses function operatorEqToSelf1() defined in TestClass
      uses function operatorEqToSelf2() defined in TestClass
      uses function operatorEqToSelf3() defined in TestClass
      uses function operatorEqToSelf4() defined in TestClass
      uses function operatorEqToSelf5() defined in TestClass
      uses function operatorEqToSelf6() defined in TestClass
      uses function operatorEqToSelf7() defined in TestClass
      uses function operatorEqToSelf8() defined in TestClass
      uses function operatorEqToSelf9() defined in TestClass
      uses function memsetOnStruct() defined in TestClass
      uses function memsetVector() defined in TestClass
      uses function memsetOnClass() defined in TestClass
      uses function memsetOnInvalid() defined in TestClass
      uses function memsetOnStdPodType() defined in TestClass
      uses function memsetOnFloat() defined in TestClass
      uses function memsetOnUnknown() defined in TestClass
      uses function mallocOnClass() defined in TestClass
      uses function this_subtraction() defined in TestClass
      uses function const1() defined in TestClass
      uses function const2() defined in TestClass
      uses function const3() defined in TestClass
      uses function const4() defined in TestClass
      uses function const5() defined in TestClass
      uses function const6() defined in TestClass
      uses function const7() defined in TestClass
      uses function const8() defined in TestClass
      uses function const9() defined in TestClass
      uses function const10() defined in TestClass
      uses function const11() defined in TestClass
      uses function const12() defined in TestClass
      uses function const13() defined in TestClass
      uses function const14() defined in TestClass
      uses function const15() defined in TestClass
      uses function const16() defined in TestClass
      uses function const17() defined in TestClass
      uses function const18() defined in TestClass
      uses function const19() defined in TestClass
      uses function const20() defined in TestClass
      uses function const21() defined in TestClass
      uses function const22() defined in TestClass
      uses function const23() defined in TestClass
      uses function const24() defined in TestClass
      uses function const25() defined in TestClass
      uses function const26() defined in TestClass
      uses function const27() defined in TestClass
      uses function const28() defined in TestClass
      uses function const29() defined in TestClass
      uses function const30() defined in TestClass
      uses function const31() defined in TestClass
      uses function const32() defined in TestClass
      uses function const33() defined in TestClass
      uses function const34() defined in TestClass
      uses function const35() defined in TestClass
      uses function const36() defined in TestClass
      uses function const37() defined in TestClass
      uses function const38() defined in TestClass
      uses function const39() defined in TestClass
      uses function const40() defined in TestClass
      uses function const41() defined in TestClass
      uses function const42() defined in TestClass
      uses function const43() defined in TestClass
      uses function const44() defined in TestClass
      uses function const45() defined in TestClass
      uses function const46() defined in TestClass
      uses function const47() defined in TestClass
      uses function const48() defined in TestClass
      uses function const49() defined in TestClass
      uses function const50() defined in TestClass
      uses function const51() defined in TestClass
      uses function const52() defined in TestClass
      uses function const53() defined in TestClass
      uses function const54() defined in TestClass
      uses function const55() defined in TestClass
      uses function const56() defined in TestClass
      uses function const57() defined in TestClass
      uses function const58() defined in TestClass
      uses function const59() defined in TestClass
      uses function const60() defined in TestClass
      uses function const61() defined in TestClass
      uses function const62() defined in TestClass
      uses function const63() defined in TestClass
      uses function const64() defined in TestClass
      uses function const_handleDefaultParameters() defined in TestClass
      uses function const_passThisToMemberOfOtherClass() defined in TestClass
      uses function assigningPointerToPointerIsNotAConstOperation() defined in TestClass
      uses function assigningArrayElementIsNotAConstOperation() defined in TestClass
      uses function constoperator1() defined in TestClass
      uses function constoperator2() defined in TestClass
      uses function constoperator3() defined in TestClass
      uses function constoperator4() defined in TestClass
      uses function constoperator5() defined in TestClass
      uses function constincdec() defined in TestClass
      uses function constassign1() defined in TestClass
      uses function constassign2() defined in TestClass
      uses function constincdecarray() defined in TestClass
      uses function constassignarray() defined in TestClass
      uses function constReturnReference() defined in TestClass
      uses function constDelete() defined in TestClass
      uses function constLPVOID() defined in TestClass
      uses function constFunc() defined in TestClass
      uses function constVirtualFunc() defined in TestClass
      uses function constIfCfg() defined in TestClass
      uses function constFriend() defined in TestClass
      uses function constUnion() defined in TestClass
      uses function constArrayOperator() defined in TestClass
      uses function constRangeBasedFor() defined in TestClass
      uses function initializerListOrder() defined in TestClass
      uses function initializerListUsage() defined in TestClass
      uses function selfInitialization() defined in TestClass
      uses function pureVirtualFunctionCall() defined in TestClass
      uses function pureVirtualFunctionCallOtherClass() defined in TestClass
      uses function pureVirtualFunctionCallWithBody() defined in TestClass
      uses function pureVirtualFunctionCallPrevented() defined in TestClass
      uses function duplInheritedMembers() defined in TestClass
      uses function explicitConstructors() defined in TestClass
   function selfInitialization() in line 6032
      81 lines of code
      0 parameters
      1 conditional paths
      uses function checkSelfInitialization(const char) defined in TestClass
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function this_subtraction() in line 2767
      17 lines of code
      0 parameters
      1 conditional paths
      uses function checkThisSubtraction(const char) defined in TestClass
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function virtualDestructor1() in line 1908
      13 lines of code
      0 parameters
      1 conditional paths
      uses function checkVirtualDestructor(const char,bool) defined in TestClass
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function virtualDestructor2() in line 1922
      27 lines of code
      0 parameters
      1 conditional paths
      uses function checkVirtualDestructor(const char,bool) defined in TestClass
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function virtualDestructor3() in line 1950
      21 lines of code
      0 parameters
      1 conditional paths
      uses function checkVirtualDestructor(const char,bool) defined in TestClass
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function virtualDestructor4() in line 1972
      15 lines of code
      0 parameters
      1 conditional paths
      uses function checkVirtualDestructor(const char,bool) defined in TestClass
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function virtualDestructor5() in line 1988
      15 lines of code
      0 parameters
      1 conditional paths
      uses function checkVirtualDestructor(const char,bool) defined in TestClass
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function virtualDestructor6() in line 2004
      8 lines of code
      0 parameters
      1 conditional paths
      uses function checkVirtualDestructor(const char,bool) defined in TestClass
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function virtualDestructorInconclusive() in line 2145
      23 lines of code
      0 parameters
      1 conditional paths
      uses function checkVirtualDestructor(const char,bool) defined in TestClass
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function virtualDestructorInherited() in line 2030
      93 lines of code
      0 parameters
      1 conditional paths
      uses function checkVirtualDestructor(const char,bool) defined in TestClass
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
      uses macro definition TODO_ASSERT_EQUALS defined in testsuite.h
   function virtualDestructorProtected() in line 2013
      16 lines of code
      0 parameters
      1 conditional paths
      uses function checkVirtualDestructor(const char,bool) defined in TestClass
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function virtualDestructorTemplate() in line 2124
      20 lines of code
      0 parameters
      1 conditional paths
      uses function checkVirtualDestructor(const char,bool) defined in TestClass
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function TestClass() in line 27
      protection public
      2 lines of code
      0 parameters
      1 conditional paths
   variable settings0 in line 31
   variable settings1 in line 32
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/test/testcmdlineparser.cpp
module TestCmdlineParser
   inherits from TestFixture
   function checkconfig() in line 986
      7 lines of code
      0 parameters
      1 conditional paths
      uses macro definition REDIRECT defined in redirect.h
      uses variable settings defined in TestCmdlineParser
      uses variable checkConfiguration defined in Settings
      uses macro definition ASSERT defined in testsuite.h
      uses variable defParser defined in TestCmdlineParser
      uses function ParseFromArgs(int,const char *const) defined in CmdLineParser
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function debug() in line 220
      7 lines of code
      0 parameters
      1 conditional paths
      uses macro definition REDIRECT defined in redirect.h
      uses variable settings defined in TestCmdlineParser
      uses variable debug defined in Settings
      uses macro definition ASSERT defined in testsuite.h
      uses variable defParser defined in TestCmdlineParser
      uses function ParseFromArgs(int,const char *const) defined in CmdLineParser
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function debugwarnings() in line 228
      7 lines of code
      0 parameters
      1 conditional paths
      uses macro definition REDIRECT defined in redirect.h
      uses variable settings defined in TestCmdlineParser
      uses variable debugwarnings defined in Settings
      uses macro definition ASSERT defined in testsuite.h
      uses variable defParser defined in TestCmdlineParser
      uses function ParseFromArgs(int,const char *const) defined in CmdLineParser
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function defines() in line 324
      7 lines of code
      0 parameters
      1 conditional paths
      uses macro definition REDIRECT defined in redirect.h
      uses variable settings defined in TestCmdlineParser
      uses variable userDefines defined in Settings
      uses macro definition ASSERT defined in testsuite.h
      uses variable defParser defined in TestCmdlineParser
      uses function ParseFromArgs(int,const char *const) defined in CmdLineParser
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function defines2() in line 332
      7 lines of code
      0 parameters
      1 conditional paths
      uses macro definition REDIRECT defined in redirect.h
      uses variable settings defined in TestCmdlineParser
      uses variable userDefines defined in Settings
      uses macro definition ASSERT defined in testsuite.h
      uses variable defParser defined in TestCmdlineParser
      uses function ParseFromArgs(int,const char *const) defined in CmdLineParser
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function defines3() in line 340
      7 lines of code
      0 parameters
      1 conditional paths
      uses macro definition REDIRECT defined in redirect.h
      uses variable settings defined in TestCmdlineParser
      uses variable userDefines defined in Settings
      uses macro definition ASSERT defined in testsuite.h
      uses variable defParser defined in TestCmdlineParser
      uses function ParseFromArgs(int,const char *const) defined in CmdLineParser
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function defines4() in line 348
      7 lines of code
      0 parameters
      1 conditional paths
      uses macro definition REDIRECT defined in redirect.h
      uses variable settings defined in TestCmdlineParser
      uses variable userDefines defined in Settings
      uses macro definition ASSERT defined in testsuite.h
      uses variable defParser defined in TestCmdlineParser
      uses function ParseFromArgs(int,const char *const) defined in CmdLineParser
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function defines_noarg() in line 303
      6 lines of code
      0 parameters
      1 conditional paths
      uses macro definition REDIRECT defined in redirect.h
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable defParser defined in TestCmdlineParser
      uses function ParseFromArgs(int,const char *const) defined in CmdLineParser
   function defines_noarg2() in line 310
      6 lines of code
      0 parameters
      1 conditional paths
      uses macro definition REDIRECT defined in redirect.h
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable defParser defined in TestCmdlineParser
      uses function ParseFromArgs(int,const char *const) defined in CmdLineParser
   function defines_noarg3() in line 317
      6 lines of code
      0 parameters
      1 conditional paths
      uses macro definition REDIRECT defined in redirect.h
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable defParser defined in TestCmdlineParser
      uses function ParseFromArgs(int,const char *const) defined in CmdLineParser
   function doc() in line 883
      6 lines of code
      0 parameters
      1 conditional paths
      uses macro definition REDIRECT defined in redirect.h
      uses macro definition ASSERT defined in testsuite.h
      uses variable defParser defined in TestCmdlineParser
      uses function ParseFromArgs(int,const char *const) defined in CmdLineParser
      uses function ExitAfterPrinting() defined in CmdLineParser
   function enabledAll() in line 453
      11 lines of code
      0 parameters
      1 conditional paths
      uses macro definition REDIRECT defined in redirect.h
      uses variable settings defined in TestCmdlineParser
      uses macro definition ASSERT defined in testsuite.h
      uses variable defParser defined in TestCmdlineParser
      uses function ParseFromArgs(int,const char *const) defined in CmdLineParser
      uses function isEnabled(T &&) defined in Settings
   function enabledMissingInclude() in line 512
      7 lines of code
      0 parameters
      1 conditional paths
      uses macro definition REDIRECT defined in redirect.h
      uses variable settings defined in TestCmdlineParser
      uses macro definition ASSERT defined in testsuite.h
      uses variable defParser defined in TestCmdlineParser
      uses function ParseFromArgs(int,const char *const) defined in CmdLineParser
      uses function isEnabled(T &&) defined in Settings
   function enabledMultiple() in line 530
      12 lines of code
      0 parameters
      1 conditional paths
      uses macro definition REDIRECT defined in redirect.h
      uses variable settings defined in TestCmdlineParser
      uses macro definition ASSERT defined in testsuite.h
      uses variable defParser defined in TestCmdlineParser
      uses function ParseFromArgs(int,const char *const) defined in CmdLineParser
      uses function isEnabled(T &&) defined in Settings
   function enabledPerformance() in line 478
      12 lines of code
      0 parameters
      1 conditional paths
      uses macro definition REDIRECT defined in redirect.h
      uses variable settings defined in TestCmdlineParser
      uses macro definition ASSERT defined in testsuite.h
      uses variable defParser defined in TestCmdlineParser
      uses function ParseFromArgs(int,const char *const) defined in CmdLineParser
      uses function isEnabled(T &&) defined in Settings
   function enabledPortability() in line 491
      12 lines of code
      0 parameters
      1 conditional paths
      uses macro definition REDIRECT defined in redirect.h
      uses variable settings defined in TestCmdlineParser
      uses macro definition ASSERT defined in testsuite.h
      uses variable defParser defined in TestCmdlineParser
      uses function ParseFromArgs(int,const char *const) defined in CmdLineParser
      uses function isEnabled(T &&) defined in Settings
   function enabledStyle() in line 465
      12 lines of code
      0 parameters
      1 conditional paths
      uses macro definition REDIRECT defined in redirect.h
      uses variable settings defined in TestCmdlineParser
      uses macro definition ASSERT defined in testsuite.h
      uses variable defParser defined in TestCmdlineParser
      uses function ParseFromArgs(int,const char *const) defined in CmdLineParser
      uses function isEnabled(T &&) defined in Settings
   function enabledUnusedFunction() in line 504
      7 lines of code
      0 parameters
      1 conditional paths
      uses macro definition REDIRECT defined in redirect.h
      uses variable settings defined in TestCmdlineParser
      uses macro definition ASSERT defined in testsuite.h
      uses variable defParser defined in TestCmdlineParser
      uses function ParseFromArgs(int,const char *const) defined in CmdLineParser
      uses function isEnabled(T &&) defined in Settings
   function enforceLanguage() in line 356
      39 lines of code
      0 parameters
      1 conditional paths
      uses macro definition REDIRECT defined in redirect.h
      uses variable settings defined in TestCmdlineParser
      uses variable enforcedLang defined in Settings
      uses enumvalue None defined in Settings
      uses macro definition ASSERT defined in testsuite.h
      uses variable defParser defined in TestCmdlineParser
      uses function ParseFromArgs(int,const char *const) defined in CmdLineParser
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses enumvalue CPP defined in Settings
      uses enumvalue C defined in Settings
   function errorExitcode() in line 551
      7 lines of code
      0 parameters
      1 conditional paths
      uses macro definition REDIRECT defined in redirect.h
      uses variable settings defined in TestCmdlineParser
      uses variable exitCode defined in Settings
      uses macro definition ASSERT defined in testsuite.h
      uses variable defParser defined in TestCmdlineParser
      uses function ParseFromArgs(int,const char *const) defined in CmdLineParser
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function errorExitcodeMissing() in line 559
      7 lines of code
      0 parameters
      1 conditional paths
      uses macro definition REDIRECT defined in redirect.h
      uses variable settings defined in TestCmdlineParser
      uses variable exitCode defined in Settings
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable defParser defined in TestCmdlineParser
      uses function ParseFromArgs(int,const char *const) defined in CmdLineParser
   function errorExitcodeStr() in line 567
      7 lines of code
      0 parameters
      1 conditional paths
      uses macro definition REDIRECT defined in redirect.h
      uses variable settings defined in TestCmdlineParser
      uses variable exitCode defined in Settings
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable defParser defined in TestCmdlineParser
      uses function ParseFromArgs(int,const char *const) defined in CmdLineParser
   function errorlist1() in line 898
      6 lines of code
      0 parameters
      1 conditional paths
      uses macro definition REDIRECT defined in redirect.h
      uses macro definition ASSERT defined in testsuite.h
      uses variable defParser defined in TestCmdlineParser
      uses function ParseFromArgs(int,const char *const) defined in CmdLineParser
      uses function GetShowErrorMessages() defined in CmdLineParser
   function errorlistverbose1() in line 905
      7 lines of code
      0 parameters
      1 conditional paths
      uses macro definition REDIRECT defined in redirect.h
      uses variable settings defined in TestCmdlineParser
      uses variable verbose defined in Settings
      uses macro definition ASSERT defined in testsuite.h
      uses variable defParser defined in TestCmdlineParser
      uses function ParseFromArgs(int,const char *const) defined in CmdLineParser
   function errorlistverbose2() in line 913
      7 lines of code
      0 parameters
      1 conditional paths
      uses macro definition REDIRECT defined in redirect.h
      uses variable settings defined in TestCmdlineParser
      uses variable verbose defined in Settings
      uses macro definition ASSERT defined in testsuite.h
      uses variable defParser defined in TestCmdlineParser
      uses function ParseFromArgs(int,const char *const) defined in CmdLineParser
   function exitcodeSuppressions() in line 583
      7 lines of code
      0 parameters
      1 conditional paths
      uses macro definition REDIRECT defined in redirect.h
      uses variable settings defined in TestCmdlineParser
      uses variable exitCode defined in Settings
      uses macro definition TODO_ASSERT_EQUALS defined in testsuite.h
      uses variable defParser defined in TestCmdlineParser
      uses function ParseFromArgs(int,const char *const) defined in CmdLineParser
   function exitcodeSuppressionsNoFile() in line 591
      7 lines of code
      0 parameters
      1 conditional paths
      uses macro definition REDIRECT defined in redirect.h
      uses variable settings defined in TestCmdlineParser
      uses variable exitCode defined in Settings
      uses macro definition TODO_ASSERT_EQUALS defined in testsuite.h
      uses variable defParser defined in TestCmdlineParser
      uses function ParseFromArgs(int,const char *const) defined in CmdLineParser
   function exitcodeSuppressionsOld() in line 575
      7 lines of code
      0 parameters
      1 conditional paths
      uses macro definition REDIRECT defined in redirect.h
      uses variable settings defined in TestCmdlineParser
      uses variable exitCode defined in Settings
      uses macro definition TODO_ASSERT_EQUALS defined in testsuite.h
      uses variable defParser defined in TestCmdlineParser
      uses function ParseFromArgs(int,const char *const) defined in CmdLineParser
   function fileList() in line 599
      6 lines of code
      0 parameters
      1 conditional paths
      uses macro definition REDIRECT defined in redirect.h
      uses macro definition TODO_ASSERT_EQUALS defined in testsuite.h
      uses variable defParser defined in TestCmdlineParser
      uses function ParseFromArgs(int,const char *const) defined in CmdLineParser
   function forcelong() in line 244
      7 lines of code
      0 parameters
      1 conditional paths
      uses macro definition REDIRECT defined in redirect.h
      uses variable settings defined in TestCmdlineParser
      uses variable force defined in Settings
      uses macro definition ASSERT defined in testsuite.h
      uses variable defParser defined in TestCmdlineParser
      uses function ParseFromArgs(int,const char *const) defined in CmdLineParser
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function forceshort() in line 236
      7 lines of code
      0 parameters
      1 conditional paths
      uses macro definition REDIRECT defined in redirect.h
      uses variable settings defined in TestCmdlineParser
      uses variable force defined in Settings
      uses macro definition ASSERT defined in testsuite.h
      uses variable defParser defined in TestCmdlineParser
      uses function ParseFromArgs(int,const char *const) defined in CmdLineParser
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function helplong() in line 162
      7 lines of code
      0 parameters
      1 conditional paths
      uses macro definition REDIRECT defined in redirect.h
      uses variable settings defined in TestCmdlineParser
      uses macro definition ASSERT defined in testsuite.h
      uses function ParseFromArgs(int,const char *const) defined in CmdLineParser
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function GetShowHelp() defined in CmdLineParser
   function helpshort() in line 154
      7 lines of code
      0 parameters
      1 conditional paths
      uses macro definition REDIRECT defined in redirect.h
      uses variable settings defined in TestCmdlineParser
      uses macro definition ASSERT defined in testsuite.h
      uses function ParseFromArgs(int,const char *const) defined in CmdLineParser
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function GetShowHelp() defined in CmdLineParser
   function ignorefilepaths1() in line 968
      8 lines of code
      0 parameters
      1 conditional paths
      uses macro definition REDIRECT defined in redirect.h
      uses variable settings defined in TestCmdlineParser
      uses macro definition ASSERT defined in testsuite.h
      uses function ParseFromArgs(int,const char *const) defined in CmdLineParser
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function GetIgnoredPaths() defined in CmdLineParser
   function ignorefilepaths2() in line 977
      8 lines of code
      0 parameters
      1 conditional paths
      uses macro definition REDIRECT defined in redirect.h
      uses variable settings defined in TestCmdlineParser
      uses macro definition ASSERT defined in testsuite.h
      uses function ParseFromArgs(int,const char *const) defined in CmdLineParser
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function GetIgnoredPaths() defined in CmdLineParser
   function ignorepaths1() in line 930
      8 lines of code
      0 parameters
      1 conditional paths
      uses macro definition REDIRECT defined in redirect.h
      uses variable settings defined in TestCmdlineParser
      uses macro definition ASSERT defined in testsuite.h
      uses function ParseFromArgs(int,const char *const) defined in CmdLineParser
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function GetIgnoredPaths() defined in CmdLineParser
   function ignorepaths2() in line 939
      8 lines of code
      0 parameters
      1 conditional paths
      uses macro definition REDIRECT defined in redirect.h
      uses variable settings defined in TestCmdlineParser
      uses macro definition ASSERT defined in testsuite.h
      uses function ParseFromArgs(int,const char *const) defined in CmdLineParser
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function GetIgnoredPaths() defined in CmdLineParser
   function ignorepaths3() in line 948
      9 lines of code
      0 parameters
      1 conditional paths
      uses macro definition REDIRECT defined in redirect.h
      uses variable settings defined in TestCmdlineParser
      uses macro definition ASSERT defined in testsuite.h
      uses function ParseFromArgs(int,const char *const) defined in CmdLineParser
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function GetIgnoredPaths() defined in CmdLineParser
   function ignorepaths4() in line 958
      9 lines of code
      0 parameters
      1 conditional paths
      uses macro definition REDIRECT defined in redirect.h
      uses variable settings defined in TestCmdlineParser
      uses macro definition ASSERT defined in testsuite.h
      uses function ParseFromArgs(int,const char *const) defined in CmdLineParser
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function GetIgnoredPaths() defined in CmdLineParser
   function ignorepathsnopath() in line 921
      8 lines of code
      0 parameters
      1 conditional paths
      uses macro definition REDIRECT defined in redirect.h
      uses variable settings defined in TestCmdlineParser
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function ParseFromArgs(int,const char *const) defined in CmdLineParser
      uses function GetIgnoredPaths() defined in CmdLineParser
   function includes() in line 403
      7 lines of code
      0 parameters
      1 conditional paths
      uses macro definition REDIRECT defined in redirect.h
      uses variable settings defined in TestCmdlineParser
      uses variable includePaths defined in Settings
      uses macro definition ASSERT defined in testsuite.h
      uses variable defParser defined in TestCmdlineParser
      uses function ParseFromArgs(int,const char *const) defined in CmdLineParser
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function includes2() in line 435
      9 lines of code
      0 parameters
      1 conditional paths
      uses macro definition REDIRECT defined in redirect.h
      uses variable settings defined in TestCmdlineParser
      uses variable includePaths defined in Settings
      uses macro definition ASSERT defined in testsuite.h
      uses variable defParser defined in TestCmdlineParser
      uses function ParseFromArgs(int,const char *const) defined in CmdLineParser
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function includesbackslash() in line 419
      7 lines of code
      0 parameters
      1 conditional paths
      uses macro definition REDIRECT defined in redirect.h
      uses variable settings defined in TestCmdlineParser
      uses variable includePaths defined in Settings
      uses macro definition ASSERT defined in testsuite.h
      uses variable defParser defined in TestCmdlineParser
      uses function ParseFromArgs(int,const char *const) defined in CmdLineParser
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function includesFile() in line 445
      7 lines of code
      0 parameters
      1 conditional paths
      uses macro definition REDIRECT defined in redirect.h
      uses variable settings defined in TestCmdlineParser
      uses variable includePaths defined in Settings
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable defParser defined in TestCmdlineParser
      uses function ParseFromArgs(int,const char *const) defined in CmdLineParser
   function includesnopath() in line 396
      6 lines of code
      0 parameters
      1 conditional paths
      uses macro definition REDIRECT defined in redirect.h
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable defParser defined in TestCmdlineParser
      uses function ParseFromArgs(int,const char *const) defined in CmdLineParser
   function includesnospace() in line 427
      7 lines of code
      0 parameters
      1 conditional paths
      uses macro definition REDIRECT defined in redirect.h
      uses variable settings defined in TestCmdlineParser
      uses variable includePaths defined in Settings
      uses macro definition ASSERT defined in testsuite.h
      uses variable defParser defined in TestCmdlineParser
      uses function ParseFromArgs(int,const char *const) defined in CmdLineParser
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function includesslash() in line 411
      7 lines of code
      0 parameters
      1 conditional paths
      uses macro definition REDIRECT defined in redirect.h
      uses variable settings defined in TestCmdlineParser
      uses variable includePaths defined in Settings
      uses macro definition ASSERT defined in testsuite.h
      uses variable defParser defined in TestCmdlineParser
      uses function ParseFromArgs(int,const char *const) defined in CmdLineParser
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function inconclusive() in line 543
      7 lines of code
      0 parameters
      1 conditional paths
      uses macro definition REDIRECT defined in redirect.h
      uses variable settings defined in TestCmdlineParser
      uses variable inconclusive defined in Settings
      uses macro definition ASSERT defined in testsuite.h
      uses variable defParser defined in TestCmdlineParser
      uses function ParseFromArgs(int,const char *const) defined in CmdLineParser
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function inlineSuppr() in line 614
      5 lines of code
      0 parameters
      1 conditional paths
      uses macro definition REDIRECT defined in redirect.h
      uses macro definition ASSERT defined in testsuite.h
      uses variable defParser defined in TestCmdlineParser
      uses function ParseFromArgs(int,const char *const) defined in CmdLineParser
   function jobs() in line 620
      7 lines of code
      0 parameters
      1 conditional paths
      uses macro definition REDIRECT defined in redirect.h
      uses variable settings defined in TestCmdlineParser
      uses variable jobs defined in Settings
      uses macro definition ASSERT defined in testsuite.h
      uses variable defParser defined in TestCmdlineParser
      uses function ParseFromArgs(int,const char *const) defined in CmdLineParser
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function jobsInvalid() in line 636
      7 lines of code
      0 parameters
      1 conditional paths
      uses macro definition REDIRECT defined in redirect.h
      uses variable settings defined in TestCmdlineParser
      uses variable jobs defined in Settings
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable defParser defined in TestCmdlineParser
      uses function ParseFromArgs(int,const char *const) defined in CmdLineParser
   function jobsMissingCount() in line 628
      7 lines of code
      0 parameters
      1 conditional paths
      uses macro definition REDIRECT defined in redirect.h
      uses variable settings defined in TestCmdlineParser
      uses variable jobs defined in Settings
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable defParser defined in TestCmdlineParser
      uses function ParseFromArgs(int,const char *const) defined in CmdLineParser
   function maxConfigs() in line 644
      9 lines of code
      0 parameters
      1 conditional paths
      uses macro definition REDIRECT defined in redirect.h
      uses variable settings defined in TestCmdlineParser
      uses variable force defined in Settings
      uses variable maxConfigs defined in Settings
      uses macro definition ASSERT defined in testsuite.h
      uses variable defParser defined in TestCmdlineParser
      uses function ParseFromArgs(int,const char *const) defined in CmdLineParser
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function maxConfigsInvalid() in line 661
      6 lines of code
      0 parameters
      1 conditional paths
      uses macro definition REDIRECT defined in redirect.h
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable defParser defined in TestCmdlineParser
      uses function ParseFromArgs(int,const char *const) defined in CmdLineParser
   function maxConfigsMissingCount() in line 654
      6 lines of code
      0 parameters
      1 conditional paths
      uses macro definition REDIRECT defined in redirect.h
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable defParser defined in TestCmdlineParser
      uses function ParseFromArgs(int,const char *const) defined in CmdLineParser
   function maxConfigsTooSmall() in line 668
      6 lines of code
      0 parameters
      1 conditional paths
      uses macro definition REDIRECT defined in redirect.h
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable defParser defined in TestCmdlineParser
      uses function ParseFromArgs(int,const char *const) defined in CmdLineParser
   function nooptions() in line 146
      7 lines of code
      0 parameters
      1 conditional paths
      uses macro definition REDIRECT defined in redirect.h
      uses variable settings defined in TestCmdlineParser
      uses macro definition ASSERT defined in testsuite.h
      uses function ParseFromArgs(int,const char *const) defined in CmdLineParser
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function GetShowHelp() defined in CmdLineParser
   function onefile() in line 178
      8 lines of code
      0 parameters
      1 conditional paths
      uses macro definition REDIRECT defined in redirect.h
      uses variable settings defined in TestCmdlineParser
      uses macro definition ASSERT defined in testsuite.h
      uses function ParseFromArgs(int,const char *const) defined in CmdLineParser
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function GetPathNames() defined in CmdLineParser
   function onepath() in line 187
      8 lines of code
      0 parameters
      1 conditional paths
      uses macro definition REDIRECT defined in redirect.h
      uses variable settings defined in TestCmdlineParser
      uses macro definition ASSERT defined in testsuite.h
      uses function ParseFromArgs(int,const char *const) defined in CmdLineParser
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function GetPathNames() defined in CmdLineParser
   function optionwithoutfile() in line 196
      7 lines of code
      0 parameters
      1 conditional paths
      uses macro definition REDIRECT defined in redirect.h
      uses variable settings defined in TestCmdlineParser
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function ParseFromArgs(int,const char *const) defined in CmdLineParser
      uses function GetPathNames() defined in CmdLineParser
   function platform() in line 707
      7 lines of code
      0 parameters
      1 conditional paths
      uses macro definition REDIRECT defined in redirect.h
      uses variable settings defined in TestCmdlineParser
      uses function platform(PlatformType) defined in Settings
      uses enumvalue Unspecified defined in Settings
      uses macro definition ASSERT defined in testsuite.h
      uses variable defParser defined in TestCmdlineParser
      uses function ParseFromArgs(int,const char *const) defined in CmdLineParser
      uses variable platformType defined in Settings
      uses enumvalue Win64 defined in Settings
   function quietlong() in line 295
      7 lines of code
      0 parameters
      1 conditional paths
      uses macro definition REDIRECT defined in redirect.h
      uses variable settings defined in TestCmdlineParser
      uses variable quiet defined in Settings
      uses macro definition ASSERT defined in testsuite.h
      uses variable defParser defined in TestCmdlineParser
      uses function ParseFromArgs(int,const char *const) defined in CmdLineParser
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function quietshort() in line 287
      7 lines of code
      0 parameters
      1 conditional paths
      uses macro definition REDIRECT defined in redirect.h
      uses variable settings defined in TestCmdlineParser
      uses variable quiet defined in Settings
      uses macro definition ASSERT defined in testsuite.h
      uses variable defParser defined in TestCmdlineParser
      uses function ParseFromArgs(int,const char *const) defined in CmdLineParser
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function relativePaths() in line 252
      34 lines of code
      0 parameters
      1 conditional paths
      uses macro definition REDIRECT defined in redirect.h
      uses variable settings defined in TestCmdlineParser
      uses variable relativePaths defined in Settings
      uses macro definition ASSERT defined in testsuite.h
      uses variable defParser defined in TestCmdlineParser
      uses function ParseFromArgs(int,const char *const) defined in CmdLineParser
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable basePaths defined in Settings
   function reportProgressTest() in line 675
      7 lines of code
      0 parameters
      1 conditional paths
      uses macro definition REDIRECT defined in redirect.h
      uses variable settings defined in TestCmdlineParser
      uses variable reportProgress defined in Settings
      uses macro definition ASSERT defined in testsuite.h
      uses variable defParser defined in TestCmdlineParser
      uses function ParseFromArgs(int,const char *const) defined in CmdLineParser
   function run() in line 37
      107 lines of code
      0 parameters
      1 conditional paths
      uses macro definition TEST_CASE defined in testsuite.h
      uses function nooptions() defined in TestCmdlineParser
      uses function helpshort() defined in TestCmdlineParser
      uses function helplong() defined in TestCmdlineParser
      uses function showversion() defined in TestCmdlineParser
      uses function onefile() defined in TestCmdlineParser
      uses function onepath() defined in TestCmdlineParser
      uses function optionwithoutfile() defined in TestCmdlineParser
      uses function verboseshort() defined in TestCmdlineParser
      uses function verboselong() defined in TestCmdlineParser
      uses function debug() defined in TestCmdlineParser
      uses function debugwarnings() defined in TestCmdlineParser
      uses function forceshort() defined in TestCmdlineParser
      uses function forcelong() defined in TestCmdlineParser
      uses function relativePaths() defined in TestCmdlineParser
      uses function quietshort() defined in TestCmdlineParser
      uses function quietlong() defined in TestCmdlineParser
      uses function defines_noarg() defined in TestCmdlineParser
      uses function defines_noarg2() defined in TestCmdlineParser
      uses function defines_noarg3() defined in TestCmdlineParser
      uses function defines() defined in TestCmdlineParser
      uses function defines2() defined in TestCmdlineParser
      uses function defines3() defined in TestCmdlineParser
      uses function defines4() defined in TestCmdlineParser
      uses function enforceLanguage() defined in TestCmdlineParser
      uses function includesnopath() defined in TestCmdlineParser
      uses function includes() defined in TestCmdlineParser
      uses function includesslash() defined in TestCmdlineParser
      uses function includesbackslash() defined in TestCmdlineParser
      uses function includesnospace() defined in TestCmdlineParser
      uses function includes2() defined in TestCmdlineParser
      uses function includesFile() defined in TestCmdlineParser
      uses function enabledAll() defined in TestCmdlineParser
      uses function enabledStyle() defined in TestCmdlineParser
      uses function enabledPerformance() defined in TestCmdlineParser
      uses function enabledPortability() defined in TestCmdlineParser
      uses function enabledUnusedFunction() defined in TestCmdlineParser
      uses function enabledMissingInclude() defined in TestCmdlineParser
      uses function enabledMultiple() defined in TestCmdlineParser
      uses function inconclusive() defined in TestCmdlineParser
      uses function errorExitcode() defined in TestCmdlineParser
      uses function errorExitcodeMissing() defined in TestCmdlineParser
      uses function errorExitcodeStr() defined in TestCmdlineParser
      uses function exitcodeSuppressionsOld() defined in TestCmdlineParser
      uses function exitcodeSuppressions() defined in TestCmdlineParser
      uses function exitcodeSuppressionsNoFile() defined in TestCmdlineParser
      uses function fileList() defined in TestCmdlineParser
      uses function inlineSuppr() defined in TestCmdlineParser
      uses function jobs() defined in TestCmdlineParser
      uses function jobsMissingCount() defined in TestCmdlineParser
      uses function jobsInvalid() defined in TestCmdlineParser
      uses function maxConfigs() defined in TestCmdlineParser
      uses function maxConfigsMissingCount() defined in TestCmdlineParser
      uses function maxConfigsInvalid() defined in TestCmdlineParser
      uses function maxConfigsTooSmall() defined in TestCmdlineParser
      uses function reportProgressTest() defined in TestCmdlineParser
      uses function stdposix() defined in TestCmdlineParser
      uses function stdc99() defined in TestCmdlineParser
      uses function stdcpp11() defined in TestCmdlineParser
      uses function platform() defined in TestCmdlineParser
      uses function suppressionsOld() defined in TestCmdlineParser
      uses function suppressions() defined in TestCmdlineParser
      uses function suppressionsNoFile() defined in TestCmdlineParser
      uses function suppressionSingle() defined in TestCmdlineParser
      uses function suppressionSingleFile() defined in TestCmdlineParser
      uses function suppressionTwo() defined in TestCmdlineParser
      uses function suppressionTwoSeparate() defined in TestCmdlineParser
      uses function templates() defined in TestCmdlineParser
      uses function templatesGcc() defined in TestCmdlineParser
      uses function templatesVs() defined in TestCmdlineParser
      uses function templatesEdit() defined in TestCmdlineParser
      uses function xml() defined in TestCmdlineParser
      uses function xmlver1() defined in TestCmdlineParser
      uses function xmlver2() defined in TestCmdlineParser
      uses function xmlver2both() defined in TestCmdlineParser
      uses function xmlver2both2() defined in TestCmdlineParser
      uses function xmlverunknown() defined in TestCmdlineParser
      uses function xmlverinvalid() defined in TestCmdlineParser
      uses function doc() defined in TestCmdlineParser
      uses function showtime() defined in TestCmdlineParser
      uses function errorlist1() defined in TestCmdlineParser
      uses function errorlistverbose1() defined in TestCmdlineParser
      uses function errorlistverbose2() defined in TestCmdlineParser
      uses function ignorepathsnopath() defined in TestCmdlineParser
      uses function checkconfig() defined in TestCmdlineParser
      uses function unknownParam() defined in TestCmdlineParser
      uses function undefs_noarg() defined in TestCmdlineParser
      uses function undefs_noarg2() defined in TestCmdlineParser
      uses function undefs_noarg3() defined in TestCmdlineParser
      uses function undefs() defined in TestCmdlineParser
      uses function undefs2() defined in TestCmdlineParser
   function showtime() in line 890
      7 lines of code
      0 parameters
      1 conditional paths
      uses macro definition REDIRECT defined in redirect.h
      uses variable settings defined in TestCmdlineParser
      uses variable showtime defined in Settings
      uses enumvalue SHOWTIME_NONE defined in timer.h
      uses macro definition ASSERT defined in testsuite.h
      uses variable defParser defined in TestCmdlineParser
      uses function ParseFromArgs(int,const char *const) defined in CmdLineParser
      uses enumvalue SHOWTIME_SUMMARY defined in timer.h
   function showversion() in line 170
      7 lines of code
      0 parameters
      1 conditional paths
      uses macro definition REDIRECT defined in redirect.h
      uses variable settings defined in TestCmdlineParser
      uses macro definition ASSERT defined in testsuite.h
      uses function ParseFromArgs(int,const char *const) defined in CmdLineParser
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function GetShowVersion() defined in CmdLineParser
   function stdc99() in line 691
      7 lines of code
      0 parameters
      1 conditional paths
      uses macro definition REDIRECT defined in redirect.h
      uses variable settings defined in TestCmdlineParser
      uses variable standards defined in Settings
      uses variable c defined in Standards
      uses enumvalue C89 defined in Standards
      uses macro definition ASSERT defined in testsuite.h
      uses variable defParser defined in TestCmdlineParser
      uses function ParseFromArgs(int,const char *const) defined in CmdLineParser
      uses enumvalue C99 defined in Standards
   function stdcpp11() in line 699
      7 lines of code
      0 parameters
      1 conditional paths
      uses macro definition REDIRECT defined in redirect.h
      uses variable settings defined in TestCmdlineParser
      uses variable standards defined in Settings
      uses variable cpp defined in Standards
      uses enumvalue CPP03 defined in Standards
      uses macro definition ASSERT defined in testsuite.h
      uses variable defParser defined in TestCmdlineParser
      uses function ParseFromArgs(int,const char *const) defined in CmdLineParser
      uses enumvalue CPP11 defined in Standards
   function stdposix() in line 683
      7 lines of code
      0 parameters
      1 conditional paths
      uses macro definition REDIRECT defined in redirect.h
      uses variable settings defined in TestCmdlineParser
      uses variable standards defined in Settings
      uses variable posix defined in Standards
      uses macro definition ASSERT defined in testsuite.h
      uses variable defParser defined in TestCmdlineParser
      uses function ParseFromArgs(int,const char *const) defined in CmdLineParser
   function suppressions() in line 722
      6 lines of code
      0 parameters
      1 conditional paths
      uses macro definition REDIRECT defined in redirect.h
      uses macro definition TODO_ASSERT_EQUALS defined in testsuite.h
      uses variable defParser defined in TestCmdlineParser
      uses function ParseFromArgs(int,const char *const) defined in CmdLineParser
   function suppressionSingle() in line 753
      7 lines of code
      0 parameters
      1 conditional paths
      uses macro definition REDIRECT defined in redirect.h
      uses variable settings defined in TestCmdlineParser
      uses macro definition ASSERT defined in testsuite.h
      uses variable defParser defined in TestCmdlineParser
      uses function ParseFromArgs(int,const char *const) defined in CmdLineParser
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable nomsg defined in Settings
      uses function isSuppressed(const std::string &,const std::string &,unsigned int) defined in Suppressions
   function suppressionSingleFile() in line 761
      7 lines of code
      0 parameters
      1 conditional paths
      uses macro definition REDIRECT defined in redirect.h
      uses variable settings defined in TestCmdlineParser
      uses macro definition ASSERT defined in testsuite.h
      uses variable defParser defined in TestCmdlineParser
      uses function ParseFromArgs(int,const char *const) defined in CmdLineParser
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable nomsg defined in Settings
      uses function isSuppressed(const std::string &,const std::string &,unsigned int) defined in Suppressions
   function suppressionsNoFile() in line 729
      23 lines of code
      0 parameters
      1 conditional paths
      uses macro definition REDIRECT defined in redirect.h
      uses macro definition CLEAR_REDIRECT_OUTPUT defined in redirect.h
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable defParser defined in TestCmdlineParser
      uses function ParseFromArgs(int,const char *const) defined in CmdLineParser
      uses macro definition GET_REDIRECT_OUTPUT defined in redirect.h
   function suppressionsOld() in line 715
      6 lines of code
      0 parameters
      1 conditional paths
      uses macro definition REDIRECT defined in redirect.h
      uses macro definition ASSERT defined in testsuite.h
      uses variable defParser defined in TestCmdlineParser
      uses function ParseFromArgs(int,const char *const) defined in CmdLineParser
   function suppressionTwo() in line 769
      8 lines of code
      0 parameters
      1 conditional paths
      uses macro definition REDIRECT defined in redirect.h
      uses variable settings defined in TestCmdlineParser
      uses macro definition TODO_ASSERT_EQUALS defined in testsuite.h
      uses variable defParser defined in TestCmdlineParser
      uses function ParseFromArgs(int,const char *const) defined in CmdLineParser
      uses variable nomsg defined in Settings
      uses function isSuppressed(const std::string &,const std::string &,unsigned int) defined in Suppressions
   function suppressionTwoSeparate() in line 778
      8 lines of code
      0 parameters
      1 conditional paths
      uses macro definition REDIRECT defined in redirect.h
      uses variable settings defined in TestCmdlineParser
      uses macro definition ASSERT defined in testsuite.h
      uses variable defParser defined in TestCmdlineParser
      uses function ParseFromArgs(int,const char *const) defined in CmdLineParser
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable nomsg defined in Settings
      uses function isSuppressed(const std::string &,const std::string &,unsigned int) defined in Suppressions
   function templates() in line 787
      7 lines of code
      0 parameters
      1 conditional paths
      uses macro definition REDIRECT defined in redirect.h
      uses variable settings defined in TestCmdlineParser
      uses variable outputFormat defined in Settings
      uses macro definition ASSERT defined in testsuite.h
      uses variable defParser defined in TestCmdlineParser
      uses function ParseFromArgs(int,const char *const) defined in CmdLineParser
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function templatesEdit() in line 811
      7 lines of code
      0 parameters
      1 conditional paths
      uses macro definition REDIRECT defined in redirect.h
      uses variable settings defined in TestCmdlineParser
      uses variable outputFormat defined in Settings
      uses macro definition ASSERT defined in testsuite.h
      uses variable defParser defined in TestCmdlineParser
      uses function ParseFromArgs(int,const char *const) defined in CmdLineParser
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function templatesGcc() in line 795
      7 lines of code
      0 parameters
      1 conditional paths
      uses macro definition REDIRECT defined in redirect.h
      uses variable settings defined in TestCmdlineParser
      uses variable outputFormat defined in Settings
      uses macro definition ASSERT defined in testsuite.h
      uses variable defParser defined in TestCmdlineParser
      uses function ParseFromArgs(int,const char *const) defined in CmdLineParser
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function templatesVs() in line 803
      7 lines of code
      0 parameters
      1 conditional paths
      uses macro definition REDIRECT defined in redirect.h
      uses variable settings defined in TestCmdlineParser
      uses variable outputFormat defined in Settings
      uses macro definition ASSERT defined in testsuite.h
      uses variable defParser defined in TestCmdlineParser
      uses function ParseFromArgs(int,const char *const) defined in CmdLineParser
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function undefs() in line 1000
      8 lines of code
      0 parameters
      1 conditional paths
      uses macro definition REDIRECT defined in redirect.h
      uses variable settings defined in TestCmdlineParser
      uses macro definition ASSERT defined in testsuite.h
      uses variable defParser defined in TestCmdlineParser
      uses function ParseFromArgs(int,const char *const) defined in CmdLineParser
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable userUndefs defined in Settings
   function undefs2() in line 1009
      9 lines of code
      0 parameters
      1 conditional paths
      uses macro definition REDIRECT defined in redirect.h
      uses variable settings defined in TestCmdlineParser
      uses macro definition ASSERT defined in testsuite.h
      uses variable defParser defined in TestCmdlineParser
      uses function ParseFromArgs(int,const char *const) defined in CmdLineParser
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable userUndefs defined in Settings
   function undefs_noarg() in line 1019
      6 lines of code
      0 parameters
      1 conditional paths
      uses macro definition REDIRECT defined in redirect.h
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable defParser defined in TestCmdlineParser
      uses function ParseFromArgs(int,const char *const) defined in CmdLineParser
   function undefs_noarg2() in line 1026
      6 lines of code
      0 parameters
      1 conditional paths
      uses macro definition REDIRECT defined in redirect.h
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable defParser defined in TestCmdlineParser
      uses function ParseFromArgs(int,const char *const) defined in CmdLineParser
   function undefs_noarg3() in line 1033
      6 lines of code
      0 parameters
      1 conditional paths
      uses macro definition REDIRECT defined in redirect.h
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable defParser defined in TestCmdlineParser
      uses function ParseFromArgs(int,const char *const) defined in CmdLineParser
      uses macro definition REGISTER_TEST defined in testsuite.h
   function unknownParam() in line 994
      5 lines of code
      0 parameters
      1 conditional paths
      uses macro definition REDIRECT defined in redirect.h
      uses macro definition ASSERT defined in testsuite.h
      uses variable defParser defined in TestCmdlineParser
      uses function ParseFromArgs(int,const char *const) defined in CmdLineParser
   function verboselong() in line 212
      7 lines of code
      0 parameters
      1 conditional paths
      uses macro definition REDIRECT defined in redirect.h
      uses variable settings defined in TestCmdlineParser
      uses variable verbose defined in Settings
      uses macro definition ASSERT defined in testsuite.h
      uses variable defParser defined in TestCmdlineParser
      uses function ParseFromArgs(int,const char *const) defined in CmdLineParser
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function verboseshort() in line 204
      7 lines of code
      0 parameters
      1 conditional paths
      uses macro definition REDIRECT defined in redirect.h
      uses variable settings defined in TestCmdlineParser
      uses variable verbose defined in Settings
      uses macro definition ASSERT defined in testsuite.h
      uses variable defParser defined in TestCmdlineParser
      uses function ParseFromArgs(int,const char *const) defined in CmdLineParser
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function xml() in line 819
      9 lines of code
      0 parameters
      1 conditional paths
      uses macro definition REDIRECT defined in redirect.h
      uses variable settings defined in TestCmdlineParser
      uses variable xml_version defined in Settings
      uses variable xml defined in Settings
      uses macro definition ASSERT defined in testsuite.h
      uses variable defParser defined in TestCmdlineParser
      uses function ParseFromArgs(int,const char *const) defined in CmdLineParser
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function xmlver1() in line 829
      9 lines of code
      0 parameters
      1 conditional paths
      uses macro definition REDIRECT defined in redirect.h
      uses variable settings defined in TestCmdlineParser
      uses variable xml_version defined in Settings
      uses variable xml defined in Settings
      uses macro definition ASSERT defined in testsuite.h
      uses variable defParser defined in TestCmdlineParser
      uses function ParseFromArgs(int,const char *const) defined in CmdLineParser
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function xmlver2() in line 839
      9 lines of code
      0 parameters
      1 conditional paths
      uses macro definition REDIRECT defined in redirect.h
      uses variable settings defined in TestCmdlineParser
      uses variable xml_version defined in Settings
      uses variable xml defined in Settings
      uses macro definition ASSERT defined in testsuite.h
      uses variable defParser defined in TestCmdlineParser
      uses function ParseFromArgs(int,const char *const) defined in CmdLineParser
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function xmlver2both() in line 849
      9 lines of code
      0 parameters
      1 conditional paths
      uses macro definition REDIRECT defined in redirect.h
      uses variable settings defined in TestCmdlineParser
      uses variable xml_version defined in Settings
      uses variable xml defined in Settings
      uses macro definition ASSERT defined in testsuite.h
      uses variable defParser defined in TestCmdlineParser
      uses function ParseFromArgs(int,const char *const) defined in CmdLineParser
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function xmlver2both2() in line 859
      9 lines of code
      0 parameters
      1 conditional paths
      uses macro definition REDIRECT defined in redirect.h
      uses variable settings defined in TestCmdlineParser
      uses variable xml_version defined in Settings
      uses variable xml defined in Settings
      uses macro definition ASSERT defined in testsuite.h
      uses variable defParser defined in TestCmdlineParser
      uses function ParseFromArgs(int,const char *const) defined in CmdLineParser
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function xmlverinvalid() in line 876
      6 lines of code
      0 parameters
      1 conditional paths
      uses macro definition REDIRECT defined in redirect.h
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable defParser defined in TestCmdlineParser
      uses function ParseFromArgs(int,const char *const) defined in CmdLineParser
   function xmlverunknown() in line 869
      6 lines of code
      0 parameters
      1 conditional paths
      uses macro definition REDIRECT defined in redirect.h
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable defParser defined in TestCmdlineParser
      uses function ParseFromArgs(int,const char *const) defined in CmdLineParser
   function TestCmdlineParser() in line 28
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   variable defParser in line 35
   variable settings in line 34
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/test/testcondition.cpp
module TestCondition
   inherits from TestFixture
   function alwaysTrue() in line 1579
      30 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char *) defined in TestCondition
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function assignAndCompare() in line 101
      192 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char *) defined in TestCondition
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function check(const char,const char *) in line 86
      14 lines of code
      2 parameters
      1 conditional paths
      uses variable errout defined in redirect.h
      uses variable settings0 defined in TestCondition
      uses variable code defined in extracttests.py
      uses function tokenize(std::istream &,const char,const std::string &,bool) defined in Tokenizer
      uses variable filename defined in extracttests.py
      uses function runChecks(const Tokenizer *,const Settings *,ErrorLogger *) defined in CheckCondition
      uses function simplifyTokenList2() defined in Tokenizer
      uses function runSimplifiedChecks(const Tokenizer *,const Settings *,ErrorLogger *) defined in CheckCondition
   function checkBadBitmaskCheck() in line 484
      101 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char *) defined in TestCondition
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function checkInvalidTestForOverflow() in line 1610
      31 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char *) defined in TestCondition
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
      uses macro definition REGISTER_TEST defined in testsuite.h
   function checkPureFunction(const char) in line 375
      14 lines of code
      1 parameters
      1 conditional paths
      uses variable errout defined in redirect.h
      uses variable settings1 defined in TestCondition
      uses variable code defined in extracttests.py
      uses function tokenize(std::istream &,const char,const std::string &,bool) defined in Tokenizer
      uses function runChecks(const Tokenizer *,const Settings *,ErrorLogger *) defined in CheckCondition
      uses function simplifyTokenList2() defined in Tokenizer
      uses function runSimplifiedChecks(const Tokenizer *,const Settings *,ErrorLogger *) defined in CheckCondition
   function clarifyCondition1() in line 1398
      91 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char *) defined in TestCondition
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function clarifyCondition2() in line 1491
      11 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char *) defined in TestCondition
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function clarifyCondition3() in line 1504
      28 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char *) defined in TestCondition
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function clarifyCondition4() in line 1533
      14 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char *) defined in TestCondition
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function clarifyCondition5() in line 1548
      4 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char *) defined in TestCondition
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function clarifyCondition6() in line 1553
      8 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char *) defined in TestCondition
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function compare() in line 317
      25 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char *) defined in TestCondition
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function duplicateIf() in line 390
      93 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char *) defined in TestCondition
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function incorrectLogicOp_condSwapping() in line 1064
      49 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char *) defined in TestCondition
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function incorrectLogicOperator1() in line 587
      104 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char *) defined in TestCondition
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function incorrectLogicOperator2() in line 692
      218 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char *) defined in TestCondition
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function incorrectLogicOperator3() in line 911
      12 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char *) defined in TestCondition
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function incorrectLogicOperator4() in line 924
      6 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char *) defined in TestCondition
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function incorrectLogicOperator5() in line 931
      6 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char *) defined in TestCondition
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function incorrectLogicOperator6() in line 938
      11 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char *) defined in TestCondition
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
      uses macro definition TODO_ASSERT_EQUALS defined in testsuite.h
   function incorrectLogicOperator7() in line 950
      34 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char *) defined in TestCondition
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
      uses macro definition TODO_ASSERT_EQUALS defined in testsuite.h
   function incorrectLogicOperator8() in line 985
      6 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char *) defined in TestCondition
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function incorrectLogicOperator9() in line 992
      8 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char *) defined in TestCondition
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function mismatchingBitAnd() in line 294
      22 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char *) defined in TestCondition
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function modulo() in line 1114
      39 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char *) defined in TestCondition
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function multicompare() in line 343
      31 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char *) defined in TestCondition
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
      uses function checkPureFunction(const char) defined in TestCondition
   function oppositeInnerCondition() in line 1154
      242 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char *) defined in TestCondition
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
      uses macro definition TODO_ASSERT_EQUALS defined in testsuite.h
   function run() in line 34
      51 lines of code
      0 parameters
      1 conditional paths
      uses variable settings0 defined in TestCondition
      uses function addEnabled(const std::string &) defined in Settings
      uses function Parse(const char *,size_t) defined in tinyxml2::XMLDocument
      uses variable settings1 defined in TestCondition
      uses variable library defined in Settings
      uses function load(const char,const char) defined in Library
      uses macro definition TEST_CASE defined in testsuite.h
      uses function assignAndCompare() defined in TestCondition
      uses function mismatchingBitAnd() defined in TestCondition
      uses function compare() defined in TestCondition
      uses function multicompare() defined in TestCondition
      uses function duplicateIf() defined in TestCondition
      uses function checkBadBitmaskCheck() defined in TestCondition
      uses function incorrectLogicOperator1() defined in TestCondition
      uses function incorrectLogicOperator2() defined in TestCondition
      uses function incorrectLogicOperator3() defined in TestCondition
      uses function incorrectLogicOperator4() defined in TestCondition
      uses function incorrectLogicOperator5() defined in TestCondition
      uses function incorrectLogicOperator6() defined in TestCondition
      uses function incorrectLogicOperator7() defined in TestCondition
      uses function incorrectLogicOperator8() defined in TestCondition
      uses function incorrectLogicOperator9() defined in TestCondition
      uses function secondAlwaysTrueFalseWhenFirstTrueError() defined in TestCondition
      uses function incorrectLogicOp_condSwapping() defined in TestCondition
      uses function testBug5895() defined in TestCondition
      uses function testBug5309() defined in TestCondition
      uses function modulo() defined in TestCondition
      uses function oppositeInnerCondition() defined in TestCondition
      uses function clarifyCondition1() defined in TestCondition
      uses function clarifyCondition2() defined in TestCondition
      uses function clarifyCondition3() defined in TestCondition
      uses function clarifyCondition4() defined in TestCondition
      uses function clarifyCondition5() defined in TestCondition
      uses function clarifyCondition6() defined in TestCondition
      uses function alwaysTrue() defined in TestCondition
      uses function checkInvalidTestForOverflow() defined in TestCondition
   function secondAlwaysTrueFalseWhenFirstTrueError() in line 1001
      62 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char *) defined in TestCondition
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function testBug5309() in line 1570
      8 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char *) defined in TestCondition
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function testBug5895() in line 1562
      7 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char *) defined in TestCondition
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function TestCondition() in line 27
      protection public
      2 lines of code
      0 parameters
      1 conditional paths
   variable settings0 in line 31
   variable settings1 in line 32
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/test/testconstructors.cpp
module TestConstructors
   inherits from TestFixture
   function check(const char,bool) in line 32
      16 lines of code
      2 parameters
      1 conditional paths
      uses variable errout defined in redirect.h
      uses variable settings defined in TestConstructors
      uses variable inconclusive defined in Settings
      uses variable code defined in extracttests.py
      uses function tokenize(std::istream &,const char,const std::string &,bool) defined in Tokenizer
      uses function simplifyTokenList2() defined in Tokenizer
      uses function constructors() defined in CheckClass
   function classWithOperatorInName() in line 3266
      8 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestConstructors
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
      uses macro definition REGISTER_TEST defined in testsuite.h
   function constructors_crash1() in line 3257
      8 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestConstructors
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function forwardDeclaration() in line 564
      13 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestConstructors
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function function() in line 2806
      19 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestConstructors
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function initvar_2constructors() in line 877
      31 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestConstructors
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function initvar_alias() in line 1394
      47 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestConstructors
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function initvar_chained_assign() in line 857
      18 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestConstructors
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function initvar_constvar() in line 910
      28 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestConstructors
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function initvar_copy_constructor() in line 1076
      33 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestConstructors
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function initvar_delegate() in line 983
      79 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestConstructors
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function initvar_destructor() in line 1374
      11 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestConstructors
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function initvar_func_ret_func_ptr() in line 1386
      7 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestConstructors
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function initvar_if() in line 588
      14 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestConstructors
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function initvar_nested_constructor() in line 1110
      92 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestConstructors
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function initvar_nocopy1() in line 1203
      111 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestConstructors
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function initvar_nocopy2() in line 1315
      33 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestConstructors
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function initvar_nocopy3() in line 1349
      15 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestConstructors
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function initvar_operator_eq1() in line 603
      44 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestConstructors
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function initvar_operator_eq2() in line 649
      9 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestConstructors
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function initvar_operator_eq3() in line 659
      11 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestConstructors
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function initvar_operator_eq4() in line 671
      61 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestConstructors
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function initvar_operator_eq5() in line 733
      14 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestConstructors
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function initvar_private_constructor() in line 1064
      11 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestConstructors
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function initvar_same_classname() in line 748
      108 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestConstructors
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function initvar_staticvar() in line 940
      9 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestConstructors
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function initvar_union() in line 951
      30 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestConstructors
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
      uses macro definition TODO_ASSERT_EQUALS defined in testsuite.h
   function initvar_with_member_function_this() in line 1365
      8 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestConstructors
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function initvar_with_this() in line 578
      9 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestConstructors
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function noConstructor1() in line 455
      8 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestConstructors
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function noConstructor10() in line 542
      19 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestConstructors
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function noConstructor2() in line 464
      11 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestConstructors
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function noConstructor3() in line 476
      8 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestConstructors
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function noConstructor4() in line 485
      8 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestConstructors
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function noConstructor5() in line 494
      7 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestConstructors
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function noConstructor6() in line 502
      13 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestConstructors
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function noConstructor7() in line 516
      6 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestConstructors
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function noConstructor8() in line 523
      7 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestConstructors
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function noConstructor9() in line 531
      10 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestConstructors
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function operatorEqSTL() in line 1442
      17 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestConstructors
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function privateCtor1() in line 2784
      7 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestConstructors
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function privateCtor2() in line 2792
      12 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestConstructors
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function run() in line 49
      135 lines of code
      0 parameters
      1 conditional paths
      uses variable settings defined in TestConstructors
      uses function addEnabled(const std::string &) defined in Settings
      uses macro definition TEST_CASE defined in testsuite.h
      uses function simple1() defined in TestConstructors
      uses function simple2() defined in TestConstructors
      uses function simple3() defined in TestConstructors
      uses function simple4() defined in TestConstructors
      uses function simple5() defined in TestConstructors
      uses function simple6() defined in TestConstructors
      uses function simple7() defined in TestConstructors
      uses function simple8() defined in TestConstructors
      uses function simple9() defined in TestConstructors
      uses function simple10() defined in TestConstructors
      uses function simple11() defined in TestConstructors
      uses function simple12() defined in TestConstructors
      uses function simple13() defined in TestConstructors
      uses function simple14() defined in TestConstructors
      uses function noConstructor1() defined in TestConstructors
      uses function noConstructor2() defined in TestConstructors
      uses function noConstructor3() defined in TestConstructors
      uses function noConstructor4() defined in TestConstructors
      uses function noConstructor5() defined in TestConstructors
      uses function noConstructor6() defined in TestConstructors
      uses function noConstructor7() defined in TestConstructors
      uses function noConstructor8() defined in TestConstructors
      uses function noConstructor9() defined in TestConstructors
      uses function noConstructor10() defined in TestConstructors
      uses function forwardDeclaration() defined in TestConstructors
      uses function initvar_with_this() defined in TestConstructors
      uses function initvar_if() defined in TestConstructors
      uses function initvar_operator_eq1() defined in TestConstructors
      uses function initvar_operator_eq2() defined in TestConstructors
      uses function initvar_operator_eq3() defined in TestConstructors
      uses function initvar_operator_eq4() defined in TestConstructors
      uses function initvar_operator_eq5() defined in TestConstructors
      uses function initvar_same_classname() defined in TestConstructors
      uses function initvar_chained_assign() defined in TestConstructors
      uses function initvar_2constructors() defined in TestConstructors
      uses function initvar_constvar() defined in TestConstructors
      uses function initvar_staticvar() defined in TestConstructors
      uses function initvar_union() defined in TestConstructors
      uses function initvar_delegate() defined in TestConstructors
      uses function initvar_private_constructor() defined in TestConstructors
      uses function initvar_copy_constructor() defined in TestConstructors
      uses function initvar_nested_constructor() defined in TestConstructors
      uses function initvar_nocopy1() defined in TestConstructors
      uses function initvar_nocopy2() defined in TestConstructors
      uses function initvar_nocopy3() defined in TestConstructors
      uses function initvar_with_member_function_this() defined in TestConstructors
      uses function initvar_destructor() defined in TestConstructors
      uses function initvar_func_ret_func_ptr() defined in TestConstructors
      uses function initvar_alias() defined in TestConstructors
      uses function operatorEqSTL() defined in TestConstructors
      uses function uninitVar1() defined in TestConstructors
      uses function uninitVar2() defined in TestConstructors
      uses function uninitVar3() defined in TestConstructors
      uses function uninitVar4() defined in TestConstructors
      uses function uninitVar5() defined in TestConstructors
      uses function uninitVar6() defined in TestConstructors
      uses function uninitVar7() defined in TestConstructors
      uses function uninitVar8() defined in TestConstructors
      uses function uninitVar9() defined in TestConstructors
      uses function uninitVar10() defined in TestConstructors
      uses function uninitVar11() defined in TestConstructors
      uses function uninitVar12() defined in TestConstructors
      uses function uninitVar13() defined in TestConstructors
      uses function uninitVar14() defined in TestConstructors
      uses function uninitVar15() defined in TestConstructors
      uses function uninitVar16() defined in TestConstructors
      uses function uninitVar17() defined in TestConstructors
      uses function uninitVar18() defined in TestConstructors
      uses function uninitVar19() defined in TestConstructors
      uses function uninitVar20() defined in TestConstructors
      uses function uninitVar21() defined in TestConstructors
      uses function uninitVar22() defined in TestConstructors
      uses function uninitVar23() defined in TestConstructors
      uses function uninitVar24() defined in TestConstructors
      uses function uninitVar25() defined in TestConstructors
      uses function uninitVar26() defined in TestConstructors
      uses function uninitVar27() defined in TestConstructors
      uses function uninitVar28() defined in TestConstructors
      uses function uninitVar29() defined in TestConstructors
      uses function uninitVar30() defined in TestConstructors
      uses function uninitVarEnum() defined in TestConstructors
      uses function uninitVarStream() defined in TestConstructors
      uses function uninitVarTypedef() defined in TestConstructors
      uses function uninitVarMemset() defined in TestConstructors
      uses function uninitVarArray1() defined in TestConstructors
      uses function uninitVarArray2() defined in TestConstructors
      uses function uninitVarArray3() defined in TestConstructors
      uses function uninitVarArray4() defined in TestConstructors
      uses function uninitVarArray5() defined in TestConstructors
      uses function uninitVarArray6() defined in TestConstructors
      uses function uninitVarArray7() defined in TestConstructors
      uses function uninitVarArray8() defined in TestConstructors
      uses function uninitVarArray9() defined in TestConstructors
      uses function uninitVarArray2D() defined in TestConstructors
      uses function uninitVarArray3D() defined in TestConstructors
      uses function uninitVarCpp11Init1() defined in TestConstructors
      uses function uninitVarCpp11Init2() defined in TestConstructors
      uses function uninitVarStruct1() defined in TestConstructors
      uses function uninitVarStruct2() defined in TestConstructors
      uses function uninitVarUnion1() defined in TestConstructors
      uses function uninitVarUnion2() defined in TestConstructors
      uses function uninitMissingFuncDef() defined in TestConstructors
      uses function privateCtor1() defined in TestConstructors
      uses function privateCtor2() defined in TestConstructors
      uses function uninitVarHeader1() defined in TestConstructors
      uses function uninitVarHeader2() defined in TestConstructors
      uses function uninitVarHeader3() defined in TestConstructors
      uses function uninitVarPublished() defined in TestConstructors
      uses function uninitOperator() defined in TestConstructors
      uses function uninitFunction1() defined in TestConstructors
      uses function uninitFunction2() defined in TestConstructors
      uses function uninitFunction3() defined in TestConstructors
      uses function uninitFunction4() defined in TestConstructors
      uses function uninitFunction5() defined in TestConstructors
      uses function uninitSameClassName() defined in TestConstructors
      uses function uninitFunctionOverload() defined in TestConstructors
      uses function uninitVarOperatorEqual() defined in TestConstructors
      uses function uninitVarPointer() defined in TestConstructors
      uses function uninitConstVar() defined in TestConstructors
      uses function constructors_crash1() defined in TestConstructors
      uses function classWithOperatorInName() defined in TestConstructors
   function simple1() in line 186
      22 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestConstructors
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function simple10() in line 374
      9 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestConstructors
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function simple11() in line 384
      17 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestConstructors
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function simple12() in line 402
      20 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestConstructors
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function simple13() in line 423
      7 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestConstructors
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function simple14() in line 431
      23 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestConstructors
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function simple2() in line 210
      44 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestConstructors
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function simple3() in line 256
      28 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestConstructors
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function simple4() in line 286
      16 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestConstructors
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function simple5() in line 303
      16 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestConstructors
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function simple6() in line 320
      27 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestConstructors
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function simple7() in line 348
      7 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestConstructors
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function simple8() in line 356
      7 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestConstructors
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function simple9() in line 364
      9 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestConstructors
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function uninitConstVar() in line 3224
      31 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestConstructors
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function uninitFunction1() in line 2888
      25 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestConstructors
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
      uses macro definition TODO_ASSERT_EQUALS defined in testsuite.h
   function uninitFunction2() in line 2914
      25 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestConstructors
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
      uses macro definition TODO_ASSERT_EQUALS defined in testsuite.h
   function uninitFunction3() in line 2940
      25 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestConstructors
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function uninitFunction4() in line 2966
      25 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestConstructors
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
      uses macro definition TODO_ASSERT_EQUALS defined in testsuite.h
   function uninitFunction5() in line 2992
      13 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestConstructors
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function uninitFunctionOverload() in line 3122
      38 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestConstructors
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function uninitMissingFuncDef() in line 2667
      55 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestConstructors
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function uninitOperator() in line 2878
      9 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestConstructors
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function uninitSameClassName() in line 3006
      115 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestConstructors
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function uninitVar1() in line 1460
      43 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestConstructors
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function uninitVar10() in line 1641
      11 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestConstructors
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function uninitVar11() in line 1653
      10 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestConstructors
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function uninitVar12() in line 1664
      16 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestConstructors
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function uninitVar13() in line 1681
      10 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestConstructors
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function uninitVar14() in line 1692
      185 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestConstructors
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function uninitVar15() in line 1878
      13 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestConstructors
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function uninitVar16() in line 1892
      32 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestConstructors
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function uninitVar17() in line 1925
      30 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestConstructors
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function uninitVar18() in line 1956
      15 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestConstructors
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function uninitVar19() in line 1972
      23 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestConstructors
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function uninitVar2() in line 1504
      10 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestConstructors
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function uninitVar20() in line 1996
      31 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestConstructors
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function uninitVar21() in line 2028
      12 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestConstructors
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function uninitVar22() in line 2041
      30 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestConstructors
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function uninitVar23() in line 2072
      22 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestConstructors
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function uninitVar24() in line 2095
      29 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestConstructors
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function uninitVar25() in line 2125
      62 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestConstructors
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function uninitVar26() in line 2188
      11 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestConstructors
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function uninitVar27() in line 2200
      18 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestConstructors
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function uninitVar28() in line 2219
      14 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestConstructors
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function uninitVar29() in line 2234
      32 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestConstructors
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function uninitVar3() in line 1515
      27 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestConstructors
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function uninitVar30() in line 2267
      15 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestConstructors
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function uninitVar4() in line 1543
      13 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestConstructors
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function uninitVar5() in line 1557
      11 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestConstructors
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function uninitVar6() in line 1569
      19 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestConstructors
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function uninitVar7() in line 1589
      20 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestConstructors
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function uninitVar8() in line 1610
      16 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestConstructors
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function uninitVar9() in line 1627
      13 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestConstructors
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function uninitVarArray1() in line 2283
      58 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestConstructors
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function uninitVarArray2() in line 2342
      22 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestConstructors
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function uninitVarArray2D() in line 2478
      11 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestConstructors
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function uninitVarArray3() in line 2365
      16 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestConstructors
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function uninitVarArray3D() in line 2490
      10 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestConstructors
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function uninitVarArray4() in line 2382
      16 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestConstructors
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function uninitVarArray5() in line 2399
      11 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestConstructors
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function uninitVarArray6() in line 2411
      11 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestConstructors
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function uninitVarArray7() in line 2423
      25 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestConstructors
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function uninitVarArray8() in line 2449
      8 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestConstructors
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function uninitVarArray9() in line 2458
      19 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestConstructors
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function uninitVarCpp11Init1() in line 2501
      10 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestConstructors
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function uninitVarCpp11Init2() in line 2512
      15 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestConstructors
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function uninitVarEnum() in line 2723
      12 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestConstructors
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function uninitVarHeader1() in line 2827
      12 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestConstructors
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function uninitVarHeader2() in line 2840
      12 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestConstructors
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function uninitVarHeader3() in line 2853
      12 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestConstructors
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function uninitVarMemset() in line 2764
      19 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestConstructors
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function uninitVarOperatorEqual() in line 3161
      30 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestConstructors
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function uninitVarPointer() in line 3192
      31 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestConstructors
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function uninitVarPublished() in line 2867
      10 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestConstructors
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function uninitVarStream() in line 2736
      15 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestConstructors
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function uninitVarStruct1() in line 2528
      44 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestConstructors
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function uninitVarStruct2() in line 2573
      64 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestConstructors
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function uninitVarTypedef() in line 2752
      11 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestConstructors
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function uninitVarUnion1() in line 2638
      11 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestConstructors
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function uninitVarUnion2() in line 2650
      16 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestConstructors
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function TestConstructors() in line 26
      protection public
      2 lines of code
      0 parameters
      1 conditional paths
   variable settings in line 30
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/test/testcppcheck.cpp
module TestCppcheck
   inherits from TestFixture
   function classInfoFormat() in line 65
      11 lines of code
      0 parameters
      4 conditional paths
      uses macro definition ASSERT defined in testsuite.h
   function getErrorMessages() in line 77
      18 lines of code
      0 parameters
      3 conditional paths
      uses function getErrorMessages() defined in CppCheck
      uses macro definition ASSERT defined in testsuite.h
      uses variable id defined in TestCppcheck::ErrorLogger2
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses macro definition REGISTER_TEST defined in testsuite.h
   function instancesSorted() in line 55
      9 lines of code
      0 parameters
      3 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function run() in line 49
      5 lines of code
      0 parameters
      1 conditional paths
      uses macro definition TEST_CASE defined in testsuite.h
      uses function instancesSorted() defined in TestCppcheck
      uses function classInfoFormat() defined in TestCppcheck
      uses function getErrorMessages() defined in TestCppcheck
   function TestCppcheck() in line 32
      protection public
      2 lines of code
      0 parameters
      1 conditional paths
module TestCppcheck::ErrorLogger2
   inherits from ErrorLogger
   function reportErr(const ErrorLogger::ErrorMessage &) in line 44
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
      uses variable msg defined in findcasts.py
   function reportOut(const std::string &) in line 41
      protection public
      2 lines of code
      1 parameters
      1 conditional paths
   variable id in line 39
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/test/testerrorlogger.cpp
module TestErrorLogger
   inherits from TestFixture
   function CustomFormat() in line 156
      9 lines of code
      0 parameters
      1 conditional paths
      uses variable fooCpp5 defined in TestErrorLogger
      uses variable msg defined in findcasts.py
      uses enumvalue error defined in Severity
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function CustomFormat2() in line 166
      9 lines of code
      0 parameters
      1 conditional paths
      uses variable fooCpp5 defined in TestErrorLogger
      uses variable msg defined in findcasts.py
      uses enumvalue error defined in Severity
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function CustomFormatLocations() in line 176
      12 lines of code
      0 parameters
      1 conditional paths
      uses variable fooCpp5 defined in TestErrorLogger
      uses variable barCpp8 defined in TestErrorLogger
      uses variable msg defined in findcasts.py
      uses enumvalue error defined in Severity
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function DeserializeInvalidInput() in line 314
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable msg defined in findcasts.py
      uses macro definition ASSERT_THROW defined in testsuite.h
   function ErrorMessageConstruct() in line 112
      9 lines of code
      0 parameters
      1 conditional paths
      uses variable fooCpp5 defined in TestErrorLogger
      uses variable msg defined in findcasts.py
      uses enumvalue error defined in Severity
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function ErrorMessageConstructLocations() in line 122
      11 lines of code
      0 parameters
      1 conditional paths
      uses variable fooCpp5 defined in TestErrorLogger
      uses variable barCpp8 defined in TestErrorLogger
      uses variable msg defined in findcasts.py
      uses enumvalue error defined in Severity
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function ErrorMessageVerbose() in line 134
      9 lines of code
      0 parameters
      1 conditional paths
      uses variable fooCpp5 defined in TestErrorLogger
      uses variable msg defined in findcasts.py
      uses enumvalue error defined in Severity
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function ErrorMessageVerboseLocations() in line 144
      11 lines of code
      0 parameters
      1 conditional paths
      uses variable fooCpp5 defined in TestErrorLogger
      uses variable barCpp8 defined in TestErrorLogger
      uses variable msg defined in findcasts.py
      uses enumvalue error defined in Severity
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function FileLocationDefaults() in line 99
      5 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function getfile(bool) defined in ErrorLogger::ErrorMessage::FileLocation
      uses variable line defined in ErrorLogger::ErrorMessage::FileLocation
   function FileLocationSetFile() in line 105
      6 lines of code
      0 parameters
      1 conditional paths
      uses function setfile(const std::string &) defined in ErrorLogger::ErrorMessage::FileLocation
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function getfile(bool) defined in ErrorLogger::ErrorMessage::FileLocation
      uses variable line defined in ErrorLogger::ErrorMessage::FileLocation
   function InconclusiveXml() in line 276
      16 lines of code
      0 parameters
      1 conditional paths
      uses variable fooCpp5 defined in TestErrorLogger
      uses variable msg defined in findcasts.py
      uses enumvalue error defined in Severity
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function PatternSearchReplace() in line 80
      18 lines of code
      0 parameters
      1 conditional paths
      uses function TestPatternSearchReplace(const std::string &,const std::string &) defined in TestErrorLogger
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function run() in line 34
      29 lines of code
      0 parameters
      1 conditional paths
      uses macro definition TEST_CASE defined in testsuite.h
      uses function PatternSearchReplace() defined in TestErrorLogger
      uses function FileLocationDefaults() defined in TestErrorLogger
      uses function FileLocationSetFile() defined in TestErrorLogger
      uses function ErrorMessageConstruct() defined in TestErrorLogger
      uses function ErrorMessageConstructLocations() defined in TestErrorLogger
      uses function ErrorMessageVerbose() defined in TestErrorLogger
      uses function ErrorMessageVerboseLocations() defined in TestErrorLogger
      uses function CustomFormat() defined in TestErrorLogger
      uses function CustomFormat2() defined in TestErrorLogger
      uses function CustomFormatLocations() defined in TestErrorLogger
      uses function ToXml() defined in TestErrorLogger
      uses function ToXmlLocations() defined in TestErrorLogger
      uses function ToVerboseXml() defined in TestErrorLogger
      uses function ToVerboseXmlLocations() defined in TestErrorLogger
      uses function ToXmlV2() defined in TestErrorLogger
      uses function ToXmlV2Locations() defined in TestErrorLogger
      uses function ToXmlV2Encoding() defined in TestErrorLogger
      uses function InconclusiveXml() defined in TestErrorLogger
      uses function SerializeInconclusiveMessage() defined in TestErrorLogger
      uses function DeserializeInvalidInput() defined in TestErrorLogger
      uses function SerializeSanitize() defined in TestErrorLogger
      uses function suppressUnmatchedSuppressions() defined in TestErrorLogger
   function SerializeInconclusiveMessage() in line 293
      20 lines of code
      0 parameters
      1 conditional paths
      uses variable msg defined in findcasts.py
      uses enumvalue error defined in Severity
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function deserialize(const std::string &) defined in ErrorLogger::ErrorMessage
   function SerializeSanitize() in line 319
      18 lines of code
      0 parameters
      1 conditional paths
      uses variable msg defined in findcasts.py
      uses enumvalue error defined in Severity
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function deserialize(const std::string &) defined in ErrorLogger::ErrorMessage
   function suppressUnmatchedSuppressions() in line 338
      49 lines of code
      0 parameters
      1 conditional paths
      uses variable errout defined in redirect.h
      uses function reportUnmatchedSuppressions(const std::list< Suppressions::SuppressionEntry > &) defined in ErrorLogger
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses macro definition REGISTER_TEST defined in testsuite.h
   function TestPatternSearchReplace(const std::string &,const std::string &) in line 64
      15 lines of code
      2 parameters
      1 conditional paths
      uses variable message defined in triage-report.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function ToVerboseXml() in line 207
      7 lines of code
      0 parameters
      1 conditional paths
      uses variable fooCpp5 defined in TestErrorLogger
      uses variable msg defined in findcasts.py
      uses enumvalue error defined in Severity
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function ToVerboseXmlLocations() in line 215
      9 lines of code
      0 parameters
      1 conditional paths
      uses variable fooCpp5 defined in TestErrorLogger
      uses variable barCpp8 defined in TestErrorLogger
      uses variable msg defined in findcasts.py
      uses enumvalue error defined in Severity
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function ToXml() in line 189
      7 lines of code
      0 parameters
      1 conditional paths
      uses variable fooCpp5 defined in TestErrorLogger
      uses variable msg defined in findcasts.py
      uses enumvalue error defined in Severity
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function ToXmlLocations() in line 197
      9 lines of code
      0 parameters
      1 conditional paths
      uses variable fooCpp5 defined in TestErrorLogger
      uses variable barCpp8 defined in TestErrorLogger
      uses variable msg defined in findcasts.py
      uses enumvalue error defined in Severity
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function ToXmlV2() in line 225
      14 lines of code
      0 parameters
      1 conditional paths
      uses variable fooCpp5 defined in TestErrorLogger
      uses variable msg defined in findcasts.py
      uses enumvalue error defined in Severity
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable message defined in triage-report.py
   function ToXmlV2Encoding() in line 258
      17 lines of code
      0 parameters
      1 conditional paths
      uses variable msg defined in findcasts.py
      uses enumvalue error defined in Severity
      uses variable message defined in triage-report.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function toXML(bool,int) defined in ErrorLogger::ErrorMessage
   function ToXmlV2Locations() in line 240
      17 lines of code
      0 parameters
      1 conditional paths
      uses variable fooCpp5 defined in TestErrorLogger
      uses variable barCpp8 defined in TestErrorLogger
      uses variable msg defined in findcasts.py
      uses enumvalue error defined in Severity
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable message defined in triage-report.py
   function TestErrorLogger() in line 27
      protection public
      2 lines of code
      0 parameters
      1 conditional paths
   variable barCpp8 in line 32
   variable fooCpp5 in line 31
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/test/testexceptionsafety.cpp
module TestExceptionSafety
   inherits from TestFixture
   function catchExceptionByValue() in line 249
      71 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestExceptionSafety
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function check(const char,bool) in line 54
      15 lines of code
      2 parameters
      1 conditional paths
      uses variable errout defined in redirect.h
      uses variable settings defined in TestExceptionSafety
      uses variable inconclusive defined in Settings
      uses variable code defined in extracttests.py
      uses function tokenize(std::istream &,const char,const std::string &,bool) defined in Tokenizer
      uses function runSimplifiedChecks(const Tokenizer *,const Settings *,ErrorLogger *) defined in CheckExceptionSafety
   function deallocThrow1() in line 107
      19 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestExceptionSafety
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function deallocThrow2() in line 127
      18 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestExceptionSafety
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function deallocThrow3() in line 146
      15 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestExceptionSafety
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function destructors() in line 70
      36 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestExceptionSafety
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function noexceptThrow() in line 321
      15 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestExceptionSafety
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function nothrowAttributeThrow() in line 375
      11 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestExceptionSafety
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function nothrowAttributeThrow2() in line 387
      8 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestExceptionSafety
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function nothrowDeclspecThrow() in line 396
      11 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestExceptionSafety
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
      uses macro definition REGISTER_TEST defined in testsuite.h
   function nothrowThrow() in line 337
      13 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestExceptionSafety
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function rethrowCopy1() in line 162
      13 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestExceptionSafety
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function rethrowCopy2() in line 176
      13 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestExceptionSafety
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function rethrowCopy3() in line 190
      11 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestExceptionSafety
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function rethrowCopy4() in line 202
      14 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestExceptionSafety
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function rethrowCopy5() in line 217
      31 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestExceptionSafety
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function run() in line 32
      21 lines of code
      0 parameters
      1 conditional paths
      uses variable settings defined in TestExceptionSafety
      uses function addEnabled(const std::string &) defined in Settings
      uses macro definition TEST_CASE defined in testsuite.h
      uses function destructors() defined in TestExceptionSafety
      uses function deallocThrow1() defined in TestExceptionSafety
      uses function deallocThrow2() defined in TestExceptionSafety
      uses function deallocThrow3() defined in TestExceptionSafety
      uses function rethrowCopy1() defined in TestExceptionSafety
      uses function rethrowCopy2() defined in TestExceptionSafety
      uses function rethrowCopy3() defined in TestExceptionSafety
      uses function rethrowCopy4() defined in TestExceptionSafety
      uses function rethrowCopy5() defined in TestExceptionSafety
      uses function catchExceptionByValue() defined in TestExceptionSafety
      uses function noexceptThrow() defined in TestExceptionSafety
      uses function nothrowThrow() defined in TestExceptionSafety
      uses function unhandledExceptionSpecification1() defined in TestExceptionSafety
      uses function unhandledExceptionSpecification2() defined in TestExceptionSafety
      uses function nothrowAttributeThrow() defined in TestExceptionSafety
      uses function nothrowAttributeThrow2() defined in TestExceptionSafety
      uses function nothrowDeclspecThrow() defined in TestExceptionSafety
   function unhandledExceptionSpecification1() in line 351
      14 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestExceptionSafety
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function unhandledExceptionSpecification2() in line 366
      8 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestExceptionSafety
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function TestExceptionSafety() in line 26
      protection public
      2 lines of code
      0 parameters
      1 conditional paths
   variable settings in line 30
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/test/testfilelister.cpp
module TestFileLister
   inherits from TestFixture
   function isDirectory() in line 52
      4 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function recursiveAddFiles() in line 57
      25 lines of code
      0 parameters
      3 conditional paths
      uses macro definition ASSERT defined in testsuite.h
      uses macro definition REGISTER_TEST defined in testsuite.h
   function run() in line 40
      11 lines of code
      0 parameters
      2 conditional paths
      uses variable fin defined in triage-report.py
      uses macro definition TEST_CASE defined in testsuite.h
      uses function isDirectory() defined in TestFileLister
      uses function recursiveAddFiles() defined in TestFileLister
   function TestFileLister() in line 35
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/test/testfunctions.cpp
module TestFunctions
   inherits from TestFixture
   function check(const char,const char,const Settings *) in line 76
      25 lines of code
      3 parameters
      2 conditional paths
      uses variable errout defined in redirect.h
      uses variable settings defined in TestFunctions
      uses variable code defined in extracttests.py
      uses function tokenize(std::istream &,const char,const std::string &,bool) defined in Tokenizer
      uses variable filename defined in extracttests.py
      uses function checkIgnoredReturnValue() defined in CheckFunctions
      uses function simplifyTokenList2() defined in Tokenizer
      uses function checkProhibitedFunctions() defined in CheckFunctions
      uses function checkMathFunctions() defined in CheckFunctions
      uses function invalidFunctionUsage() defined in CheckFunctions
   function checkIgnoredReturnValue() in line 801
      91 lines of code
      0 parameters
      1 conditional paths
      uses function addEnabled(const std::string &) defined in Settings
      uses function Parse(const char *,size_t) defined in tinyxml2::XMLDocument
      uses variable library defined in Settings
      uses function load(const char,const char) defined in Library
      uses function check(const char,const char,const Settings *) defined in TestFunctions
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
      uses macro definition REGISTER_TEST defined in testsuite.h
   function invalidFunctionUsage1() in line 400
      39 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char,const Settings *) defined in TestFunctions
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function mathfunctionCall_acos() in line 554
      57 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char,const Settings *) defined in TestFunctions
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function mathfunctionCall_asin() in line 612
      60 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char,const Settings *) defined in TestFunctions
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function mathfunctionCall_atan2() in line 694
      50 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char,const Settings *) defined in TestFunctions
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function mathfunctionCall_fmod() in line 745
      20 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char,const Settings *) defined in TestFunctions
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function mathfunctionCall_log() in line 470
      83 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char,const Settings *) defined in TestFunctions
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function mathfunctionCall_pow() in line 673
      20 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char,const Settings *) defined in TestFunctions
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function mathfunctionCall_precision() in line 766
      34 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char,const Settings *) defined in TestFunctions
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function mathfunctionCall_sqrt() in line 440
      29 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char,const Settings *) defined in TestFunctions
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function prohibitedFunctions_alloca() in line 228
      29 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char,const Settings *) defined in TestFunctions
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
      uses variable settings defined in TestFunctions
      uses variable standards defined in Settings
      uses variable c defined in Standards
      uses enumvalue C89 defined in Standards
      uses variable cpp defined in Standards
      uses enumvalue CPP03 defined in Standards
      uses enumvalue C11 defined in Standards
      uses enumvalue CPP11 defined in Standards
   function prohibitedFunctions_c_declaration() in line 294
      16 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char,const Settings *) defined in TestFunctions
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function prohibitedFunctions_crypt() in line 321
      25 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char,const Settings *) defined in TestFunctions
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function prohibitedFunctions_declaredFunction() in line 259
      12 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char,const Settings *) defined in TestFunctions
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function prohibitedFunctions_functionWithBody() in line 311
      9 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char,const Settings *) defined in TestFunctions
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function prohibitedFunctions_gets() in line 214
      13 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char,const Settings *) defined in TestFunctions
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function prohibitedFunctions_index() in line 142
      39 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char,const Settings *) defined in TestFunctions
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function prohibitedFunctions_multiple() in line 284
      9 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char,const Settings *) defined in TestFunctions
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function prohibitedFunctions_namespaceHandling() in line 347
      52 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char,const Settings *) defined in TestFunctions
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function prohibitedFunctions_posix() in line 102
      39 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char,const Settings *) defined in TestFunctions
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function prohibitedFunctions_qt_index() in line 182
      6 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char,const Settings *) defined in TestFunctions
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function prohibitedFunctions_rindex() in line 189
      14 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char,const Settings *) defined in TestFunctions
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function prohibitedFunctions_std_gets() in line 273
      9 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char,const Settings *) defined in TestFunctions
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function prohibitedFunctions_var() in line 205
      8 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char,const Settings *) defined in TestFunctions
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function run() in line 33
      42 lines of code
      0 parameters
      1 conditional paths
      uses variable settings defined in TestFunctions
      uses function addEnabled(const std::string &) defined in Settings
      uses variable standards defined in Settings
      uses variable posix defined in Standards
      uses variable c defined in Standards
      uses enumvalue C11 defined in Standards
      uses variable cpp defined in Standards
      uses enumvalue CPP11 defined in Standards
      uses macro definition LOAD_LIB_2 defined in testsuite.h
      uses variable library defined in Settings
      uses macro definition TEST_CASE defined in testsuite.h
      uses function prohibitedFunctions_posix() defined in TestFunctions
      uses function prohibitedFunctions_index() defined in TestFunctions
      uses function prohibitedFunctions_qt_index() defined in TestFunctions
      uses function prohibitedFunctions_rindex() defined in TestFunctions
      uses function prohibitedFunctions_var() defined in TestFunctions
      uses function prohibitedFunctions_gets() defined in TestFunctions
      uses function prohibitedFunctions_alloca() defined in TestFunctions
      uses function prohibitedFunctions_declaredFunction() defined in TestFunctions
      uses function prohibitedFunctions_std_gets() defined in TestFunctions
      uses function prohibitedFunctions_multiple() defined in TestFunctions
      uses function prohibitedFunctions_c_declaration() defined in TestFunctions
      uses function prohibitedFunctions_functionWithBody() defined in TestFunctions
      uses function prohibitedFunctions_crypt() defined in TestFunctions
      uses function prohibitedFunctions_namespaceHandling() defined in TestFunctions
      uses function invalidFunctionUsage1() defined in TestFunctions
      uses function mathfunctionCall_fmod() defined in TestFunctions
      uses function mathfunctionCall_sqrt() defined in TestFunctions
      uses function mathfunctionCall_log() defined in TestFunctions
      uses function mathfunctionCall_acos() defined in TestFunctions
      uses function mathfunctionCall_asin() defined in TestFunctions
      uses function mathfunctionCall_pow() defined in TestFunctions
      uses function mathfunctionCall_atan2() defined in TestFunctions
      uses function mathfunctionCall_precision() defined in TestFunctions
      uses function checkIgnoredReturnValue() defined in TestFunctions
   function TestFunctions() in line 27
      protection public
      2 lines of code
      0 parameters
      1 conditional paths
   variable settings in line 31
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/test/testgarbage.cpp
module TestGarbage
   inherits from TestFixture
   function checkCode(const char,bool) in line 229
      13 lines of code
      2 parameters
      2 conditional paths
      uses variable filename defined in extracttests.py
      uses function checkCodeInternal(const char,const char *) defined in TestGarbage
      uses variable code defined in extracttests.py
   function checkCodeInternal(const char,const char *) in line 243
      21 lines of code
      2 parameters
      3 conditional paths
      uses variable errout defined in redirect.h
      uses variable settings defined in TestGarbage
      uses variable code defined in extracttests.py
      uses function tokenize(std::istream &,const char,const std::string &,bool) defined in Tokenizer
      uses variable filename defined in extracttests.py
      uses function simplifyTokenList2() defined in Tokenizer
      uses function tokens() defined in Tokenizer
      uses function stringifyList(bool,bool,bool,bool,bool,const std::vector< std::string > *,const Token *) defined in Token
   function garbageAST() in line 1304
      9 lines of code
      0 parameters
      1 conditional paths
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode1() in line 375
      3 lines of code
      0 parameters
      1 conditional paths
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode10() in line 421
      3 lines of code
      0 parameters
      1 conditional paths
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode100() in line 857
      3 lines of code
      0 parameters
      1 conditional paths
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode101() in line 861
      6 lines of code
      0 parameters
      1 conditional paths
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode102() in line 868
      3 lines of code
      0 parameters
      1 conditional paths
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode103() in line 872
      3 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_THROW defined in testsuite.h
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode104() in line 876
      3 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_THROW defined in testsuite.h
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode105() in line 880
      3 lines of code
      0 parameters
      1 conditional paths
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode106() in line 884
      3 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_THROW defined in testsuite.h
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode107() in line 888
      3 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_THROW defined in testsuite.h
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode108() in line 892
      3 lines of code
      0 parameters
      1 conditional paths
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode109() in line 896
      3 lines of code
      0 parameters
      1 conditional paths
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode11() in line 425
      3 lines of code
      0 parameters
      1 conditional paths
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode110() in line 900
      3 lines of code
      0 parameters
      1 conditional paths
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode111() in line 904
      3 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_THROW defined in testsuite.h
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode112() in line 908
      3 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_THROW defined in testsuite.h
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode113() in line 912
      3 lines of code
      0 parameters
      1 conditional paths
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode114() in line 916
      6 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_THROW defined in testsuite.h
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode115() in line 923
      3 lines of code
      0 parameters
      1 conditional paths
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode116() in line 927
      3 lines of code
      0 parameters
      1 conditional paths
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode117() in line 931
      4 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_THROW defined in testsuite.h
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode118() in line 936
      9 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_THROW defined in testsuite.h
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode119() in line 946
      3 lines of code
      0 parameters
      1 conditional paths
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode12() in line 429
      3 lines of code
      0 parameters
      1 conditional paths
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode120() in line 950
      6 lines of code
      0 parameters
      1 conditional paths
      uses function checkCode(const char,bool) defined in TestGarbage
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function garbageCode121() in line 957
      5 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_THROW defined in testsuite.h
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode122() in line 963
      6 lines of code
      0 parameters
      1 conditional paths
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode123() in line 970
      7 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_THROW defined in testsuite.h
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode124() in line 978
      3 lines of code
      0 parameters
      1 conditional paths
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode125() in line 982
      6 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_THROW defined in testsuite.h
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode126() in line 989
      4 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_THROW defined in testsuite.h
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode127() in line 994
      11 lines of code
      0 parameters
      1 conditional paths
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode128() in line 1006
      4 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_THROW defined in testsuite.h
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode129() in line 1011
      4 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_THROW defined in testsuite.h
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode13() in line 433
      3 lines of code
      0 parameters
      1 conditional paths
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode130() in line 1016
      4 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_THROW defined in testsuite.h
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode131() in line 1021
      4 lines of code
      0 parameters
      1 conditional paths
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode132() in line 1026
      3 lines of code
      0 parameters
      1 conditional paths
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode133() in line 1030
      40 lines of code
      0 parameters
      2 conditional paths
      uses macro definition ASSERT_THROW defined in testsuite.h
      uses function checkCode(const char,bool) defined in TestGarbage
      uses variable errout defined in redirect.h
      uses variable code defined in extracttests.py
      uses variable settings defined in TestGarbage
      uses function tokenize(std::istream &,const char,const std::string &,bool) defined in Tokenizer
      uses function assertThrowFail(const char *,unsigned int) defined in TestFixture
      uses variable e defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function garbageCode134() in line 1071
      29 lines of code
      0 parameters
      1 conditional paths
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode135() in line 1101
      7 lines of code
      0 parameters
      1 conditional paths
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode136() in line 1109
      3 lines of code
      0 parameters
      1 conditional paths
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode137() in line 1113
      3 lines of code
      0 parameters
      1 conditional paths
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode138() in line 1117
      11 lines of code
      0 parameters
      1 conditional paths
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode139() in line 1129
      7 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_THROW defined in testsuite.h
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode14() in line 437
      3 lines of code
      0 parameters
      1 conditional paths
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode140() in line 1137
      3 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_THROW defined in testsuite.h
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode141() in line 1141
      3 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_THROW defined in testsuite.h
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode142() in line 1145
      3 lines of code
      0 parameters
      1 conditional paths
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode143() in line 1149
      13 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_THROW defined in testsuite.h
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode144() in line 1163
      3 lines of code
      0 parameters
      1 conditional paths
   function garbageCode145() in line 1167
      3 lines of code
      0 parameters
      1 conditional paths
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode146() in line 1171
      6 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_THROW defined in testsuite.h
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode147() in line 1178
      15 lines of code
      0 parameters
      1 conditional paths
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode148() in line 1194
      7 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_THROW defined in testsuite.h
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode149() in line 1202
      6 lines of code
      0 parameters
      1 conditional paths
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode15() in line 441
      3 lines of code
      0 parameters
      1 conditional paths
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode150() in line 1209
      8 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_THROW defined in testsuite.h
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode151() in line 1218
      7 lines of code
      0 parameters
      1 conditional paths
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode152() in line 1226
      6 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode153() in line 1233
      3 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_THROW defined in testsuite.h
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode154() in line 1237
      3 lines of code
      0 parameters
      1 conditional paths
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode155() in line 1241
      3 lines of code
      0 parameters
      1 conditional paths
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode156() in line 1245
      3 lines of code
      0 parameters
      1 conditional paths
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode157() in line 1249
      7 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_THROW defined in testsuite.h
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode158() in line 1257
      3 lines of code
      0 parameters
      1 conditional paths
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode159() in line 1261
      3 lines of code
      0 parameters
      1 conditional paths
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode16() in line 445
      3 lines of code
      0 parameters
      1 conditional paths
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode160() in line 1265
      3 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_THROW defined in testsuite.h
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode161() in line 1395
      4 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_THROW defined in testsuite.h
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode162() in line 1400
      4 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_THROW defined in testsuite.h
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode163() in line 1405
      4 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_THROW defined in testsuite.h
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode164() in line 1410
      4 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_THROW defined in testsuite.h
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode165() in line 1415
      4 lines of code
      0 parameters
      1 conditional paths
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode166() in line 1420
      4 lines of code
      0 parameters
      1 conditional paths
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode167() in line 1425
      4 lines of code
      0 parameters
      1 conditional paths
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode168() in line 1430
      4 lines of code
      0 parameters
      1 conditional paths
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode169() in line 1435
      5 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_THROW defined in testsuite.h
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode17() in line 449
      5 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_THROW defined in testsuite.h
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode170() in line 1441
      4 lines of code
      0 parameters
      1 conditional paths
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode171() in line 1446
      4 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_THROW defined in testsuite.h
      uses function checkCode(const char,bool) defined in TestGarbage
      uses macro definition REGISTER_TEST defined in testsuite.h
   function garbageCode18() in line 455
      3 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_THROW defined in testsuite.h
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode19() in line 459
      4 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode2() in line 379
      3 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_THROW defined in testsuite.h
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode20() in line 464
      4 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode21() in line 469
      10 lines of code
      0 parameters
      1 conditional paths
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode22() in line 480
      7 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_THROW defined in testsuite.h
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode23() in line 488
      8 lines of code
      0 parameters
      1 conditional paths
      uses function checkCode(const char,bool) defined in TestGarbage
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function garbageCode24() in line 497
      10 lines of code
      0 parameters
      1 conditional paths
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode25() in line 508
      8 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_THROW defined in testsuite.h
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode26() in line 517
      10 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_THROW defined in testsuite.h
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode27() in line 528
      5 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_THROW defined in testsuite.h
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode28() in line 534
      7 lines of code
      0 parameters
      1 conditional paths
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode29() in line 542
      4 lines of code
      0 parameters
      1 conditional paths
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode3() in line 383
      3 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_THROW defined in testsuite.h
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode30() in line 547
      6 lines of code
      0 parameters
      1 conditional paths
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode31() in line 554
      3 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_THROW defined in testsuite.h
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode32() in line 558
      3 lines of code
      0 parameters
      1 conditional paths
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode33() in line 562
      7 lines of code
      0 parameters
      1 conditional paths
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode34() in line 571
      7 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_THROW defined in testsuite.h
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode35() in line 579
      7 lines of code
      0 parameters
      1 conditional paths
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode36() in line 587
      8 lines of code
      0 parameters
      1 conditional paths
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode37() in line 596
      4 lines of code
      0 parameters
      1 conditional paths
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode38() in line 601
      3 lines of code
      0 parameters
      1 conditional paths
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode39() in line 605
      3 lines of code
      0 parameters
      1 conditional paths
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode4() in line 387
      3 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_THROW defined in testsuite.h
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode40() in line 609
      4 lines of code
      0 parameters
      1 conditional paths
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode41() in line 614
      3 lines of code
      0 parameters
      1 conditional paths
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode42() in line 618
      3 lines of code
      0 parameters
      1 conditional paths
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode43() in line 622
      3 lines of code
      0 parameters
      1 conditional paths
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode44() in line 626
      3 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_THROW defined in testsuite.h
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode45() in line 630
      3 lines of code
      0 parameters
      1 conditional paths
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode46() in line 634
      3 lines of code
      0 parameters
      1 conditional paths
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode47() in line 638
      3 lines of code
      0 parameters
      1 conditional paths
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode48() in line 642
      3 lines of code
      0 parameters
      1 conditional paths
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode49() in line 646
      3 lines of code
      0 parameters
      1 conditional paths
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode5() in line 391
      3 lines of code
      0 parameters
      1 conditional paths
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode50() in line 650
      3 lines of code
      0 parameters
      1 conditional paths
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode51() in line 654
      3 lines of code
      0 parameters
      1 conditional paths
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode52() in line 658
      3 lines of code
      0 parameters
      1 conditional paths
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode53() in line 662
      3 lines of code
      0 parameters
      1 conditional paths
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode54() in line 666
      3 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_THROW defined in testsuite.h
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode55() in line 670
      3 lines of code
      0 parameters
      1 conditional paths
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode56() in line 674
      3 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_THROW defined in testsuite.h
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode57() in line 678
      3 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_THROW defined in testsuite.h
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode58() in line 682
      4 lines of code
      0 parameters
      1 conditional paths
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode59() in line 687
      3 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_THROW defined in testsuite.h
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode6() in line 395
      4 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_THROW defined in testsuite.h
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode60() in line 691
      3 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_THROW defined in testsuite.h
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode61() in line 695
      3 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_THROW defined in testsuite.h
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode62() in line 699
      3 lines of code
      0 parameters
      1 conditional paths
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode63() in line 703
      3 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_THROW defined in testsuite.h
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode64() in line 707
      3 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_THROW defined in testsuite.h
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode65() in line 711
      3 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_THROW defined in testsuite.h
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode66() in line 715
      3 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_THROW defined in testsuite.h
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode67() in line 719
      3 lines of code
      0 parameters
      1 conditional paths
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode68() in line 723
      3 lines of code
      0 parameters
      1 conditional paths
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode69() in line 727
      3 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_THROW defined in testsuite.h
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode7() in line 400
      4 lines of code
      0 parameters
      1 conditional paths
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode70() in line 731
      3 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_THROW defined in testsuite.h
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode71() in line 735
      3 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_THROW defined in testsuite.h
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode72() in line 739
      3 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_THROW defined in testsuite.h
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode73() in line 743
      3 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_THROW defined in testsuite.h
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode74() in line 747
      3 lines of code
      0 parameters
      1 conditional paths
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode75() in line 751
      3 lines of code
      0 parameters
      1 conditional paths
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode76() in line 755
      3 lines of code
      0 parameters
      1 conditional paths
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode77() in line 759
      3 lines of code
      0 parameters
      1 conditional paths
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode78() in line 763
      3 lines of code
      0 parameters
      1 conditional paths
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode79() in line 767
      3 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_THROW defined in testsuite.h
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode8() in line 405
      11 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_THROW defined in testsuite.h
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode80() in line 771
      3 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_THROW defined in testsuite.h
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode81() in line 775
      3 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_THROW defined in testsuite.h
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode82() in line 779
      3 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_THROW defined in testsuite.h
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode83() in line 783
      3 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_THROW defined in testsuite.h
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode84() in line 787
      3 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_THROW defined in testsuite.h
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode85() in line 791
      3 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_THROW defined in testsuite.h
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode86() in line 795
      3 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_THROW defined in testsuite.h
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode87() in line 799
      3 lines of code
      0 parameters
      1 conditional paths
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode88() in line 803
      3 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_THROW defined in testsuite.h
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode89() in line 807
      3 lines of code
      0 parameters
      1 conditional paths
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode9() in line 417
      3 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_THROW defined in testsuite.h
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode90() in line 811
      3 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_THROW defined in testsuite.h
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode91() in line 815
      3 lines of code
      0 parameters
      1 conditional paths
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode92() in line 819
      3 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_THROW defined in testsuite.h
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode93() in line 823
      3 lines of code
      0 parameters
      1 conditional paths
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode94() in line 827
      4 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_THROW defined in testsuite.h
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode95() in line 832
      3 lines of code
      0 parameters
      1 conditional paths
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode96() in line 836
      3 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_THROW defined in testsuite.h
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode97() in line 840
      3 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_THROW defined in testsuite.h
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode98() in line 844
      5 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_THROW defined in testsuite.h
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageCode99() in line 850
      6 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_THROW defined in testsuite.h
      uses function checkCode(const char,bool) defined in TestGarbage
   function garbageSymbolDatabase() in line 1290
      13 lines of code
      0 parameters
      1 conditional paths
      uses function checkCode(const char,bool) defined in TestGarbage
      uses macro definition ASSERT_THROW defined in testsuite.h
   function garbageValueFlow() in line 1270
      19 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses function checkCode(const char,bool) defined in TestGarbage
   function run() in line 34
      194 lines of code
      0 parameters
      1 conditional paths
      uses variable settings defined in TestGarbage
      uses variable debugwarnings defined in Settings
      uses function addEnabled(const std::string &) defined in Settings
      uses variable inconclusive defined in Settings
      uses variable experimental defined in Settings
      uses macro definition TEST_CASE defined in testsuite.h
      uses function wrong_syntax1() defined in TestGarbage
      uses function wrong_syntax2() defined in TestGarbage
      uses function wrong_syntax3() defined in TestGarbage
      uses function wrong_syntax4() defined in TestGarbage
      uses function wrong_syntax_if_macro() defined in TestGarbage
      uses function wrong_syntax_class_x_y() defined in TestGarbage
      uses function syntax_case_default() defined in TestGarbage
      uses function garbageCode1() defined in TestGarbage
      uses function garbageCode2() defined in TestGarbage
      uses function garbageCode3() defined in TestGarbage
      uses function garbageCode4() defined in TestGarbage
      uses function garbageCode5() defined in TestGarbage
      uses function garbageCode6() defined in TestGarbage
      uses function garbageCode7() defined in TestGarbage
      uses function garbageCode8() defined in TestGarbage
      uses function garbageCode9() defined in TestGarbage
      uses function garbageCode10() defined in TestGarbage
      uses function garbageCode11() defined in TestGarbage
      uses function garbageCode12() defined in TestGarbage
      uses function garbageCode13() defined in TestGarbage
      uses function garbageCode14() defined in TestGarbage
      uses function garbageCode15() defined in TestGarbage
      uses function garbageCode16() defined in TestGarbage
      uses function garbageCode17() defined in TestGarbage
      uses function garbageCode18() defined in TestGarbage
      uses function garbageCode19() defined in TestGarbage
      uses function garbageCode20() defined in TestGarbage
      uses function garbageCode21() defined in TestGarbage
      uses function garbageCode22() defined in TestGarbage
      uses function garbageCode23() defined in TestGarbage
      uses function garbageCode24() defined in TestGarbage
      uses function garbageCode25() defined in TestGarbage
      uses function garbageCode26() defined in TestGarbage
      uses function garbageCode27() defined in TestGarbage
      uses function garbageCode28() defined in TestGarbage
      uses function garbageCode29() defined in TestGarbage
      uses function garbageCode30() defined in TestGarbage
      uses function garbageCode31() defined in TestGarbage
      uses function garbageCode32() defined in TestGarbage
      uses function garbageCode33() defined in TestGarbage
      uses function garbageCode34() defined in TestGarbage
      uses function garbageCode35() defined in TestGarbage
      uses function garbageCode36() defined in TestGarbage
      uses function garbageCode37() defined in TestGarbage
      uses function garbageCode38() defined in TestGarbage
      uses function garbageCode39() defined in TestGarbage
      uses function garbageCode40() defined in TestGarbage
      uses function garbageCode41() defined in TestGarbage
      uses function garbageCode42() defined in TestGarbage
      uses function garbageCode43() defined in TestGarbage
      uses function garbageCode44() defined in TestGarbage
      uses function garbageCode45() defined in TestGarbage
      uses function garbageCode46() defined in TestGarbage
      uses function garbageCode47() defined in TestGarbage
      uses function garbageCode48() defined in TestGarbage
      uses function garbageCode49() defined in TestGarbage
      uses function garbageCode50() defined in TestGarbage
      uses function garbageCode51() defined in TestGarbage
      uses function garbageCode52() defined in TestGarbage
      uses function garbageCode53() defined in TestGarbage
      uses function garbageCode54() defined in TestGarbage
      uses function garbageCode55() defined in TestGarbage
      uses function garbageCode56() defined in TestGarbage
      uses function garbageCode57() defined in TestGarbage
      uses function garbageCode58() defined in TestGarbage
      uses function garbageCode59() defined in TestGarbage
      uses function garbageCode60() defined in TestGarbage
      uses function garbageCode61() defined in TestGarbage
      uses function garbageCode62() defined in TestGarbage
      uses function garbageCode63() defined in TestGarbage
      uses function garbageCode64() defined in TestGarbage
      uses function garbageCode65() defined in TestGarbage
      uses function garbageCode66() defined in TestGarbage
      uses function garbageCode67() defined in TestGarbage
      uses function garbageCode68() defined in TestGarbage
      uses function garbageCode69() defined in TestGarbage
      uses function garbageCode70() defined in TestGarbage
      uses function garbageCode71() defined in TestGarbage
      uses function garbageCode72() defined in TestGarbage
      uses function garbageCode73() defined in TestGarbage
      uses function garbageCode74() defined in TestGarbage
      uses function garbageCode75() defined in TestGarbage
      uses function garbageCode76() defined in TestGarbage
      uses function garbageCode77() defined in TestGarbage
      uses function garbageCode78() defined in TestGarbage
      uses function garbageCode79() defined in TestGarbage
      uses function garbageCode80() defined in TestGarbage
      uses function garbageCode81() defined in TestGarbage
      uses function garbageCode82() defined in TestGarbage
      uses function garbageCode83() defined in TestGarbage
      uses function garbageCode84() defined in TestGarbage
      uses function garbageCode85() defined in TestGarbage
      uses function garbageCode86() defined in TestGarbage
      uses function garbageCode87() defined in TestGarbage
      uses function garbageCode88() defined in TestGarbage
      uses function garbageCode89() defined in TestGarbage
      uses function garbageCode90() defined in TestGarbage
      uses function garbageCode91() defined in TestGarbage
      uses function garbageCode92() defined in TestGarbage
      uses function garbageCode93() defined in TestGarbage
      uses function garbageCode94() defined in TestGarbage
      uses function garbageCode95() defined in TestGarbage
      uses function garbageCode96() defined in TestGarbage
      uses function garbageCode97() defined in TestGarbage
      uses function garbageCode98() defined in TestGarbage
      uses function garbageCode99() defined in TestGarbage
      uses function garbageCode100() defined in TestGarbage
      uses function garbageCode101() defined in TestGarbage
      uses function garbageCode102() defined in TestGarbage
      uses function garbageCode103() defined in TestGarbage
      uses function garbageCode104() defined in TestGarbage
      uses function garbageCode105() defined in TestGarbage
      uses function garbageCode106() defined in TestGarbage
      uses function garbageCode107() defined in TestGarbage
      uses function garbageCode108() defined in TestGarbage
      uses function garbageCode109() defined in TestGarbage
      uses function garbageCode110() defined in TestGarbage
      uses function garbageCode111() defined in TestGarbage
      uses function garbageCode112() defined in TestGarbage
      uses function garbageCode113() defined in TestGarbage
      uses function garbageCode114() defined in TestGarbage
      uses function garbageCode115() defined in TestGarbage
      uses function garbageCode116() defined in TestGarbage
      uses function garbageCode117() defined in TestGarbage
      uses function garbageCode118() defined in TestGarbage
      uses function garbageCode119() defined in TestGarbage
      uses function garbageCode120() defined in TestGarbage
      uses function garbageCode121() defined in TestGarbage
      uses function garbageCode122() defined in TestGarbage
      uses function garbageCode123() defined in TestGarbage
      uses function garbageCode124() defined in TestGarbage
      uses function garbageCode125() defined in TestGarbage
      uses function garbageCode126() defined in TestGarbage
      uses function garbageCode127() defined in TestGarbage
      uses function garbageCode128() defined in TestGarbage
      uses function garbageCode129() defined in TestGarbage
      uses function garbageCode130() defined in TestGarbage
      uses function garbageCode131() defined in TestGarbage
      uses function garbageCode132() defined in TestGarbage
      uses function garbageCode133() defined in TestGarbage
      uses function garbageCode134() defined in TestGarbage
      uses function garbageCode135() defined in TestGarbage
      uses function garbageCode136() defined in TestGarbage
      uses function garbageCode137() defined in TestGarbage
      uses function garbageCode138() defined in TestGarbage
      uses function garbageCode139() defined in TestGarbage
      uses function garbageCode140() defined in TestGarbage
      uses function garbageCode141() defined in TestGarbage
      uses function garbageCode142() defined in TestGarbage
      uses function garbageCode143() defined in TestGarbage
      uses function garbageCode144() defined in TestGarbage
      uses function garbageCode145() defined in TestGarbage
      uses function garbageCode146() defined in TestGarbage
      uses function garbageCode147() defined in TestGarbage
      uses function garbageCode148() defined in TestGarbage
      uses function garbageCode149() defined in TestGarbage
      uses function garbageCode150() defined in TestGarbage
      uses function garbageCode151() defined in TestGarbage
      uses function garbageCode152() defined in TestGarbage
      uses function garbageCode153() defined in TestGarbage
      uses function garbageCode154() defined in TestGarbage
      uses function garbageCode155() defined in TestGarbage
      uses function garbageCode156() defined in TestGarbage
      uses function garbageCode157() defined in TestGarbage
      uses function garbageCode158() defined in TestGarbage
      uses function garbageCode159() defined in TestGarbage
      uses function garbageCode160() defined in TestGarbage
      uses function garbageCode161() defined in TestGarbage
      uses function garbageCode162() defined in TestGarbage
      uses function garbageCode163() defined in TestGarbage
      uses function garbageCode164() defined in TestGarbage
      uses function garbageCode165() defined in TestGarbage
      uses function garbageCode166() defined in TestGarbage
      uses function garbageCode167() defined in TestGarbage
      uses function garbageCode168() defined in TestGarbage
      uses function garbageCode169() defined in TestGarbage
      uses function garbageCode170() defined in TestGarbage
      uses function garbageCode171() defined in TestGarbage
      uses function garbageValueFlow() defined in TestGarbage
      uses function garbageSymbolDatabase() defined in TestGarbage
      uses function garbageAST() defined in TestGarbage
      uses function templateSimplifierCrashes() defined in TestGarbage
   function syntax_case_default() in line 355
      19 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_THROW defined in testsuite.h
      uses function checkCode(const char,bool) defined in TestGarbage
   function templateSimplifierCrashes() in line 1314
      81 lines of code
      0 parameters
      1 conditional paths
      uses function checkCode(const char,bool) defined in TestGarbage
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function wrong_syntax1() in line 265
      17 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function checkCode(const char,bool) defined in TestGarbage
      uses variable errout defined in redirect.h
      uses macro definition ASSERT_THROW defined in testsuite.h
   function wrong_syntax2() in line 283
      11 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses function checkCode(const char,bool) defined in TestGarbage
   function wrong_syntax3() in line 295
      20 lines of code
      0 parameters
      2 conditional paths
      uses variable code defined in extracttests.py
      uses variable settings defined in TestGarbage
      uses function tokenize(std::istream &,const char,const std::string &,bool) defined in Tokenizer
      uses function assertThrowFail(const char *,unsigned int) defined in TestFixture
      uses variable e defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function wrong_syntax4() in line 316
      5 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_THROW defined in testsuite.h
      uses function checkCode(const char,bool) defined in TestGarbage
   function wrong_syntax_class_x_y() in line 333
      21 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable errout defined in redirect.h
      uses variable settings defined in TestGarbage
      uses function tokenize(std::istream &,const char,const std::string &,bool) defined in Tokenizer
      uses function simplifyTokenList2() defined in Tokenizer
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function wrong_syntax_if_macro() in line 322
      10 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_THROW defined in testsuite.h
      uses function checkCode(const char,bool) defined in TestGarbage
   function TestGarbage() in line 28
      protection public
      2 lines of code
      0 parameters
      1 conditional paths
   variable settings in line 32
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/test/testincompletestatement.cpp
module TestIncompleteStatement
   inherits from TestFixture
   function block() in line 253
      12 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char) defined in TestIncompleteStatement
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
      uses macro definition REGISTER_TEST defined in testsuite.h
   function cast() in line 231
      6 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char) defined in TestIncompleteStatement
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function check(const char) in line 32
      14 lines of code
      1 parameters
      1 conditional paths
      uses variable errout defined in redirect.h
      uses variable settings defined in TestIncompleteStatement
      uses variable code defined in extracttests.py
      uses function tokenize(std::istream &,const char,const std::string &,bool) defined in Tokenizer
      uses function simplifyTokenList2() defined in Tokenizer
      uses function checkIncompleteStatement() defined in CheckOther
   function conditionalcall() in line 176
      6 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char) defined in TestIncompleteStatement
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function cpp11init() in line 246
      6 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char) defined in TestIncompleteStatement
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function increment() in line 238
      7 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char) defined in TestIncompleteStatement
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function intarray() in line 155
      4 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char) defined in TestIncompleteStatement
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function returnstruct() in line 215
      15 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char) defined in TestIncompleteStatement
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function run() in line 47
      22 lines of code
      0 parameters
      1 conditional paths
      uses variable settings defined in TestIncompleteStatement
      uses function addEnabled(const std::string &) defined in Settings
      uses macro definition TEST_CASE defined in testsuite.h
      uses function test1() defined in TestIncompleteStatement
      uses function test2() defined in TestIncompleteStatement
      uses function test3() defined in TestIncompleteStatement
      uses function test4() defined in TestIncompleteStatement
      uses function test5() defined in TestIncompleteStatement
      uses function test6() defined in TestIncompleteStatement
      uses function test_numeric() defined in TestIncompleteStatement
      uses function void0() defined in TestIncompleteStatement
      uses function intarray() defined in TestIncompleteStatement
      uses function structarraynull() defined in TestIncompleteStatement
      uses function structarray() defined in TestIncompleteStatement
      uses function conditionalcall() defined in TestIncompleteStatement
      uses function structinit() defined in TestIncompleteStatement
      uses function returnstruct() defined in TestIncompleteStatement
      uses function cast() defined in TestIncompleteStatement
      uses function increment() defined in TestIncompleteStatement
      uses function cpp11init() defined in TestIncompleteStatement
      uses function block() defined in TestIncompleteStatement
   function structarray() in line 168
      7 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char) defined in TestIncompleteStatement
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function structarraynull() in line 160
      7 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char) defined in TestIncompleteStatement
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function structinit() in line 183
      31 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char) defined in TestIncompleteStatement
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function test1() in line 70
      9 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char) defined in TestIncompleteStatement
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function test2() in line 80
      8 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char) defined in TestIncompleteStatement
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function test3() in line 89
      8 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char) defined in TestIncompleteStatement
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function test4() in line 98
      13 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char) defined in TestIncompleteStatement
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function test5() in line 112
      8 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char) defined in TestIncompleteStatement
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function test6() in line 121
      8 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char) defined in TestIncompleteStatement
   function test_numeric() in line 130
      16 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char) defined in TestIncompleteStatement
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function void0() in line 147
      7 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char) defined in TestIncompleteStatement
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function TestIncompleteStatement() in line 26
      protection public
      2 lines of code
      0 parameters
      1 conditional paths
   variable settings in line 30
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/test/testinternal.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/test/testio.cpp
module TestIO
   inherits from TestFixture
   function check(const char,bool,bool,Settings::PlatformType) in line 65
      27 lines of code
      4 parameters
      2 conditional paths
      uses variable errout defined in redirect.h
      uses variable settings defined in TestIO
      uses function clearEnabled() defined in Settings
      uses function addEnabled(const std::string &) defined in Settings
      uses variable inconclusive defined in Settings
      uses function platform(PlatformType) defined in Settings
      uses variable code defined in extracttests.py
      uses function tokenize(std::istream &,const char,const std::string &,bool) defined in Tokenizer
      uses function checkWrongPrintfScanfArguments() defined in CheckIO
      uses function simplifyTokenList2() defined in Tokenizer
      uses function checkCoutCerrMisusage() defined in CheckIO
      uses function checkFileUsage() defined in CheckIO
      uses function invalidScanf() defined in CheckIO
   function coutCerrMisusage() in line 96
      50 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,bool,Settings::PlatformType) defined in TestIO
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function fflushOnInputStream() in line 650
      30 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,bool,Settings::PlatformType) defined in TestIO
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function fileIOwithoutPositioning() in line 511
      104 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,bool,Settings::PlatformType) defined in TestIO
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function run() in line 32
      32 lines of code
      0 parameters
      1 conditional paths
      uses macro definition LOAD_LIB_2 defined in testsuite.h
      uses variable settings defined in TestIO
      uses variable library defined in Settings
      uses macro definition TEST_CASE defined in testsuite.h
      uses function coutCerrMisusage() defined in TestIO
      uses function wrongMode_simple() defined in TestIO
      uses function wrongMode_complex() defined in TestIO
      uses function useClosedFile() defined in TestIO
      uses function fileIOwithoutPositioning() defined in TestIO
      uses function seekOnAppendedFile() defined in TestIO
      uses function fflushOnInputStream() defined in TestIO
      uses function testScanf1() defined in TestIO
      uses function testScanf2() defined in TestIO
      uses function testScanf4() defined in TestIO
      uses function testScanfArgument() defined in TestIO
      uses function testPrintfArgument() defined in TestIO
      uses function testPosixPrintfScanfParameterPosition() defined in TestIO
      uses function testMicrosoftPrintfArgument() defined in TestIO
      uses function testMicrosoftScanfArgument() defined in TestIO
      uses function testMicrosoftCStringFormatArguments() defined in TestIO
      uses function testMicrosoftSecurePrintfArgument() defined in TestIO
      uses function testMicrosoftSecureScanfArgument() defined in TestIO
      uses function testTernary() defined in TestIO
      uses function testUnsignedConst() defined in TestIO
      uses function testAstType() defined in TestIO
   function seekOnAppendedFile() in line 616
      33 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,bool,Settings::PlatformType) defined in TestIO
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function testAstType() in line 3742
      16 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,bool,Settings::PlatformType) defined in TestIO
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
      uses macro definition REGISTER_TEST defined in testsuite.h
   function testMicrosoftCStringFormatArguments() in line 3372
      26 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,bool,Settings::PlatformType) defined in TestIO
      uses enumvalue Win32A defined in Settings
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
      uses enumvalue Unix32 defined in Settings
   function testMicrosoftPrintfArgument() in line 3194
      100 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,bool,Settings::PlatformType) defined in TestIO
      uses enumvalue Win32A defined in Settings
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
      uses enumvalue Win64 defined in Settings
   function testMicrosoftScanfArgument() in line 3295
      76 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,bool,Settings::PlatformType) defined in TestIO
      uses enumvalue Win32A defined in Settings
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
      uses enumvalue Win64 defined in Settings
   function testMicrosoftSecurePrintfArgument() in line 3399
      195 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,bool,Settings::PlatformType) defined in TestIO
      uses enumvalue Win32A defined in Settings
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
      uses enumvalue Win32W defined in Settings
   function testMicrosoftSecureScanfArgument() in line 3595
      131 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,bool,Settings::PlatformType) defined in TestIO
      uses enumvalue Win32A defined in Settings
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
      uses enumvalue Win32W defined in Settings
   function testPosixPrintfScanfParameterPosition() in line 3170
      22 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,bool,Settings::PlatformType) defined in TestIO
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function testPrintfArgument() in line 2326
      843 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,bool,Settings::PlatformType) defined in TestIO
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
      uses enumvalue Unix32 defined in Settings
      uses enumvalue Unix64 defined in Settings
      uses enumvalue Win32A defined in Settings
      uses enumvalue Win64 defined in Settings
   function testScanf1() in line 684
      17 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,bool,Settings::PlatformType) defined in TestIO
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function testScanf2() in line 702
      11 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,bool,Settings::PlatformType) defined in TestIO
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function testScanf4() in line 714
      8 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,bool,Settings::PlatformType) defined in TestIO
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function testScanfArgument() in line 726
      1599 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,bool,Settings::PlatformType) defined in TestIO
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
      uses variable code defined in extracttests.py
      uses variable result defined in triage-report.py
      uses enumvalue Unix32 defined in Settings
      uses enumvalue Unix64 defined in Settings
      uses enumvalue Win32A defined in Settings
      uses enumvalue Win64 defined in Settings
   function testTernary() in line 3727
      6 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,bool,Settings::PlatformType) defined in TestIO
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function testUnsignedConst() in line 3734
      7 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,bool,Settings::PlatformType) defined in TestIO
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function useClosedFile() in line 376
      134 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,bool,Settings::PlatformType) defined in TestIO
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function wrongMode_complex() in line 350
      25 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,bool,Settings::PlatformType) defined in TestIO
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function wrongMode_simple() in line 149
      200 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,bool,Settings::PlatformType) defined in TestIO
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
      uses enumvalue Win32W defined in Settings
      uses enumvalue Win32A defined in Settings
   function TestIO() in line 26
      protection public
      2 lines of code
      0 parameters
      1 conditional paths
   variable settings in line 30
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/test/testleakautovar.cpp
module TestLeakAutoVar
   inherits from TestFixture
   function assign1() in line 141
      8 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestLeakAutoVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function assign10() in line 220
      9 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestLeakAutoVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function assign11() in line 230
      7 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestLeakAutoVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function assign12() in line 238
      9 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestLeakAutoVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function assign13() in line 248
      9 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestLeakAutoVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function assign2() in line 150
      8 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestLeakAutoVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function assign3() in line 159
      8 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestLeakAutoVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function assign4() in line 168
      8 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestLeakAutoVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function assign5() in line 177
      8 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestLeakAutoVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function assign6() in line 186
      8 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestLeakAutoVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function assign7() in line 195
      7 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestLeakAutoVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function assign8() in line 203
      7 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestLeakAutoVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function assign9() in line 211
      8 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestLeakAutoVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function check(const char,bool) in line 124
      16 lines of code
      2 parameters
      1 conditional paths
      uses variable errout defined in redirect.h
      uses variable settings defined in TestLeakAutoVar
      uses variable code defined in extracttests.py
      uses function tokenize(std::istream &,const char,const std::string &,bool) defined in Tokenizer
      uses function simplifyTokenList2() defined in Tokenizer
      uses variable checkLibrary defined in Settings
      uses function addEnabled(const std::string &) defined in Settings
      uses function runSimplifiedChecks(const Tokenizer *,const Settings *,ErrorLogger *) defined in CheckLeakAutoVar
   function configuration1() in line 1099
      14 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestLeakAutoVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function configuration2() in line 1114
      11 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestLeakAutoVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function configuration3() in line 1126
      15 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestLeakAutoVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function configuration4() in line 1142
      8 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestLeakAutoVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function deallocuse1() in line 258
      13 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestLeakAutoVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function deallocuse2() in line 272
      13 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestLeakAutoVar
      uses macro definition TODO_ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function deallocuse3() in line 286
      7 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestLeakAutoVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function deallocuse4() in line 294
      7 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestLeakAutoVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function deallocuse5() in line 302
      7 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestLeakAutoVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function deallocuse6() in line 310
      7 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestLeakAutoVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function deallocuse7() in line 318
      43 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestLeakAutoVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function doublefree1() in line 362
      402 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestLeakAutoVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
      uses macro definition TODO_ASSERT_EQUALS defined in testsuite.h
   function doublefree2() in line 765
      9 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestLeakAutoVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function doublefree3() in line 775
      17 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestLeakAutoVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function doublefree4() in line 793
      10 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestLeakAutoVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function exit1() in line 804
      7 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestLeakAutoVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function exit2() in line 812
      9 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestLeakAutoVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function goto1() in line 822
      10 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestLeakAutoVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function goto2() in line 833
      12 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestLeakAutoVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function ifelse1() in line 846
      9 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestLeakAutoVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function ifelse2() in line 856
      8 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestLeakAutoVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function ifelse3() in line 865
      31 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestLeakAutoVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function ifelse4() in line 897
      16 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestLeakAutoVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function ifelse5() in line 914
      8 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestLeakAutoVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function ifelse6() in line 923
      10 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestLeakAutoVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function ifelse7() in line 934
      9 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestLeakAutoVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function ifelse8() in line 944
      8 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestLeakAutoVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function loop1() in line 965
      10 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestLeakAutoVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function mismatch_fopen_free() in line 976
      7 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestLeakAutoVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function nestedAllocation() in line 1158
      13 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestLeakAutoVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function ptrptr() in line 1151
      6 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestLeakAutoVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function return1() in line 984
      7 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestLeakAutoVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function return2() in line 992
      7 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestLeakAutoVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function return3() in line 1000
      7 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestLeakAutoVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function return4() in line 1008
      29 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestLeakAutoVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function run() in line 32
      91 lines of code
      0 parameters
      3 conditional paths
      uses variable settings defined in TestLeakAutoVar
      uses variable library defined in Settings
      uses function setalloc(const std::string &,int) defined in Library
      uses function setdealloc(const std::string &,int) defined in Library
      uses macro definition TEST_CASE defined in testsuite.h
      uses function assign1() defined in TestLeakAutoVar
      uses function assign2() defined in TestLeakAutoVar
      uses function assign3() defined in TestLeakAutoVar
      uses function assign4() defined in TestLeakAutoVar
      uses function assign5() defined in TestLeakAutoVar
      uses function assign6() defined in TestLeakAutoVar
      uses function assign7() defined in TestLeakAutoVar
      uses function assign8() defined in TestLeakAutoVar
      uses function assign9() defined in TestLeakAutoVar
      uses function assign10() defined in TestLeakAutoVar
      uses function assign11() defined in TestLeakAutoVar
      uses function assign12() defined in TestLeakAutoVar
      uses function assign13() defined in TestLeakAutoVar
      uses function deallocuse1() defined in TestLeakAutoVar
      uses function deallocuse2() defined in TestLeakAutoVar
      uses function deallocuse3() defined in TestLeakAutoVar
      uses function deallocuse4() defined in TestLeakAutoVar
      uses function deallocuse5() defined in TestLeakAutoVar
      uses function deallocuse6() defined in TestLeakAutoVar
      uses function deallocuse7() defined in TestLeakAutoVar
      uses function doublefree1() defined in TestLeakAutoVar
      uses function doublefree2() defined in TestLeakAutoVar
      uses function doublefree3() defined in TestLeakAutoVar
      uses function doublefree4() defined in TestLeakAutoVar
      uses function exit1() defined in TestLeakAutoVar
      uses function exit2() defined in TestLeakAutoVar
      uses function goto1() defined in TestLeakAutoVar
      uses function goto2() defined in TestLeakAutoVar
      uses function ifelse1() defined in TestLeakAutoVar
      uses function ifelse2() defined in TestLeakAutoVar
      uses function ifelse3() defined in TestLeakAutoVar
      uses function ifelse4() defined in TestLeakAutoVar
      uses function ifelse5() defined in TestLeakAutoVar
      uses function ifelse6() defined in TestLeakAutoVar
      uses function ifelse7() defined in TestLeakAutoVar
      uses function ifelse8() defined in TestLeakAutoVar
      uses function switch1() defined in TestLeakAutoVar
      uses function loop1() defined in TestLeakAutoVar
      uses function mismatch_fopen_free() defined in TestLeakAutoVar
      uses function return1() defined in TestLeakAutoVar
      uses function return2() defined in TestLeakAutoVar
      uses function return3() defined in TestLeakAutoVar
      uses function return4() defined in TestLeakAutoVar
      uses function test1() defined in TestLeakAutoVar
      uses function test2() defined in TestLeakAutoVar
      uses function test3() defined in TestLeakAutoVar
      uses function test4() defined in TestLeakAutoVar
      uses function test5() defined in TestLeakAutoVar
      uses function throw1() defined in TestLeakAutoVar
      uses function configuration1() defined in TestLeakAutoVar
      uses function configuration2() defined in TestLeakAutoVar
      uses function configuration3() defined in TestLeakAutoVar
      uses function configuration4() defined in TestLeakAutoVar
      uses function ptrptr() defined in TestLeakAutoVar
      uses function nestedAllocation() defined in TestLeakAutoVar
      uses function testKeywords() defined in TestLeakAutoVar
   function switch1() in line 953
      11 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestLeakAutoVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function test1() in line 1038
      6 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestLeakAutoVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function test2() in line 1045
      7 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestLeakAutoVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function test3() in line 1053
      7 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestLeakAutoVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function test4() in line 1061
      8 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestLeakAutoVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function test5() in line 1070
      10 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestLeakAutoVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function testKeywords() in line 1172
      8 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestLeakAutoVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
      uses macro definition REGISTER_TEST defined in testsuite.h
   function throw1() in line 1081
      17 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestLeakAutoVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function TestLeakAutoVar() in line 26
      protection public
      2 lines of code
      0 parameters
      1 conditional paths
   variable settings in line 30
module TestLeakAutoVarWindows
   inherits from TestFixture
   function check(const char) in line 1196
      14 lines of code
      1 parameters
      1 conditional paths
      uses variable errout defined in redirect.h
      uses variable settings defined in TestLeakAutoVar
      uses variable code defined in extracttests.py
      uses function tokenize(std::istream &,const char,const std::string &,bool) defined in Tokenizer
      uses function simplifyTokenList2() defined in Tokenizer
      uses function runSimplifiedChecks(const Tokenizer *,const Settings *,ErrorLogger *) defined in CheckLeakAutoVar
   function heapDoubleFree() in line 1217
      48 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestLeakAutoVar
      uses macro definition TODO_ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses macro definition REGISTER_TEST defined in testsuite.h
   function run() in line 1211
      5 lines of code
      0 parameters
      1 conditional paths
      uses macro definition LOAD_LIB_2 defined in testsuite.h
      uses variable settings defined in TestLeakAutoVar
      uses variable library defined in Settings
      uses macro definition TEST_CASE defined in testsuite.h
   function TestLeakAutoVarWindows() in line 1190
      protection public
      2 lines of code
      0 parameters
      1 conditional paths
   variable settings in line 1194
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/test/testlibrary.cpp
module TestLibrary
   inherits from TestFixture
   function container() in line 419
      77 lines of code
      0 parameters
      1 conditional paths
      uses function readLibrary(Library &,const char *) defined in TestLibrary
      uses variable containers defined in Library
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable type_templateArgNo defined in Library::Container
      uses variable size_templateArgNo defined in Library::Container
      uses variable startPattern defined in Library::Container
      uses variable endPattern defined in Library::Container
      uses variable itEndPattern defined in Library::Container
      uses variable stdStringLike defined in Library::Container
      uses variable arrayLike_indexOp defined in Library::Container
      uses variable opLessAllowed defined in Library::Container
      uses enumvalue SIZE defined in Library::Container
      uses function getYield(const std::string &) defined in Library::Container
      uses enumvalue EMPTY defined in Library::Container
      uses enumvalue AT_INDEX defined in Library::Container
      uses enumvalue START_ITERATOR defined in Library::Container
      uses enumvalue END_ITERATOR defined in Library::Container
      uses enumvalue BUFFER defined in Library::Container
      uses enumvalue BUFFER_NT defined in Library::Container
      uses enumvalue ITEM defined in Library::Container
      uses enumvalue NO_YIELD defined in Library::Container
      uses enumvalue RESIZE defined in Library::Container
      uses function getAction(const std::string &) defined in Library::Container
      uses enumvalue CLEAR defined in Library::Container
      uses enumvalue PUSH defined in Library::Container
      uses enumvalue POP defined in Library::Container
      uses enumvalue FIND defined in Library::Container
      uses enumvalue NO_ACTION defined in Library::Container
      uses variable functions defined in Library::Container
      uses macro definition ASSERT defined in testsuite.h
   function empty() in line 58
      9 lines of code
      0 parameters
      1 conditional paths
      uses function readLibrary(Library &,const char *) defined in TestLibrary
      uses macro definition ASSERT defined in testsuite.h
      uses variable use defined in Library
      uses variable leakignore defined in Library
      uses variable argumentChecks defined in Library
   function function() in line 68
      20 lines of code
      0 parameters
      1 conditional paths
      uses function createTokens(std::istream &,const std::string &) defined in TokenList
      uses function front() defined in TokenList
      uses function next() defined in Token
      uses function astOperand1(Token *) defined in Token
      uses function readLibrary(Library &,const char *) defined in TestLibrary
      uses macro definition ASSERT defined in testsuite.h
      uses variable use defined in Library
      uses variable leakignore defined in Library
      uses variable argumentChecks defined in Library
      uses function isnotnoreturn(const Token *) defined in Library
   function function_arg() in line 154
      20 lines of code
      0 parameters
      1 conditional paths
      uses function readLibrary(Library &,const char *) defined in TestLibrary
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable argumentChecks defined in Library
   function function_arg_any() in line 175
      12 lines of code
      0 parameters
      1 conditional paths
      uses function readLibrary(Library &,const char *) defined in TestLibrary
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable argumentChecks defined in Library
   function function_arg_minsize() in line 241
      38 lines of code
      0 parameters
      3 conditional paths
      uses function readLibrary(Library &,const char *) defined in TestLibrary
      uses function createTokens(std::istream &,const std::string &) defined in TokenList
      uses function front() defined in TokenList
      uses function next() defined in Token
      uses function astOperand1(Token *) defined in Token
      uses function argminsizes(const Token *,int) defined in Library
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses enumvalue STRLEN defined in Library::ArgumentChecks::MinSize
      uses variable type defined in Library::ArgumentChecks::MinSize
      uses variable arg defined in Library::ArgumentChecks::MinSize
      uses enumvalue ARGVALUE defined in Library::ArgumentChecks::MinSize
   function function_arg_valid() in line 188
      52 lines of code
      0 parameters
      1 conditional paths
      uses function readLibrary(Library &,const char *) defined in TestLibrary
      uses function createTokens(std::istream &,const std::string &) defined in TokenList
      uses function front() defined in TokenList
      uses function next() defined in Token
      uses function astOperand1(Token *) defined in Token
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function isargvalid(const Token *,int,const MathLib::bigint) defined in Library
   function function_match_args() in line 117
      17 lines of code
      0 parameters
      1 conditional paths
      uses function createTokens(std::istream &,const std::string &) defined in TokenList
      uses function front() defined in TokenList
      uses function next() defined in Token
      uses function astOperand1(Token *) defined in Token
      uses function readLibrary(Library &,const char *) defined in TestLibrary
      uses macro definition ASSERT defined in testsuite.h
      uses function isNotLibraryFunction(const Token *) defined in Library
   function function_match_scope() in line 89
      27 lines of code
      0 parameters
      1 conditional paths
      uses function readLibrary(Library &,const char *) defined in TestLibrary
      uses function createTokens(std::istream &,const std::string &) defined in TokenList
      uses macro definition ASSERT defined in testsuite.h
      uses function isNotLibraryFunction(const Token *) defined in Library
      uses function front() defined in TokenList
      uses function tokAt(int) defined in Token
   function function_match_var() in line 135
      18 lines of code
      0 parameters
      1 conditional paths
      uses function createTokens(std::istream &,const std::string &) defined in TokenList
      uses function front() defined in TokenList
      uses function next() defined in Token
      uses function astOperand1(Token *) defined in Token
      uses function varId() defined in Token
      uses function readLibrary(Library &,const char *) defined in TestLibrary
      uses macro definition ASSERT defined in testsuite.h
      uses function isNotLibraryFunction(const Token *) defined in Library
   function function_namespace() in line 280
      28 lines of code
      0 parameters
      1 conditional paths
      uses function readLibrary(Library &,const char *) defined in TestLibrary
      uses macro definition ASSERT defined in testsuite.h
      uses variable use defined in Library
      uses variable leakignore defined in Library
      uses variable argumentChecks defined in Library
      uses function createTokens(std::istream &,const std::string &) defined in TokenList
      uses function isnotnoreturn(const Token *) defined in Library
      uses function front() defined in TokenList
      uses function tokAt(int) defined in Token
   function function_warn() in line 309
      35 lines of code
      0 parameters
      2 conditional paths
      uses function readLibrary(Library &,const char *) defined in TestLibrary
      uses function createTokens(std::istream &,const std::string &) defined in TokenList
      uses variable a defined in daca2-report.py
      uses function getWarnInfo(const Token *) defined in Library
      uses function front() defined in TokenList
      uses function tokAt(int) defined in Token
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable functionwarn defined in Library
      uses macro definition ASSERT defined in testsuite.h
      uses enumvalue style defined in Severity
      uses enumvalue C99 defined in Standards
      uses enumvalue CPP03 defined in Standards
      uses variable message defined in Library::WarnInfo
      uses enumvalue performance defined in Severity
      uses variable severity defined in Library::WarnInfo
      uses enumvalue C89 defined in Standards
      uses variable standards defined in Library::WarnInfo
      uses variable c defined in Standards
      uses enumvalue CPP11 defined in Standards
      uses variable cpp defined in Standards
   function memory() in line 345
      18 lines of code
      0 parameters
      1 conditional paths
      uses function readLibrary(Library &,const char *) defined in TestLibrary
      uses macro definition ASSERT defined in testsuite.h
      uses variable use defined in Library
      uses variable leakignore defined in Library
      uses variable argumentChecks defined in Library
      uses function alloc(const char) defined in Library
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function dealloc(const Token *) defined in Library
   function memory2() in line 363
      23 lines of code
      0 parameters
      1 conditional paths
      uses function loadxmldata(const char,std::size_t) defined in Library
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function dealloc(const Token *) defined in Library
      uses function alloc(const char) defined in Library
   function podtype() in line 406
      12 lines of code
      0 parameters
      1 conditional paths
      uses function readLibrary(Library &,const char *) defined in TestLibrary
      uses function podtype(const std::string &) defined in Library
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable size defined in Library::PodType
      uses variable sign defined in Library::PodType
   function readLibrary(Library &,const char *) in line 52
      5 lines of code
      2 parameters
      1 conditional paths
      uses function Parse(const char *,size_t) defined in tinyxml2::XMLDocument
      uses function load(const char,const char) defined in Library
   function resource() in line 387
      18 lines of code
      0 parameters
      1 conditional paths
      uses function readLibrary(Library &,const char *) defined in TestLibrary
      uses macro definition ASSERT defined in testsuite.h
      uses variable use defined in Library
      uses variable leakignore defined in Library
      uses variable argumentChecks defined in Library
      uses function alloc(const char) defined in Library
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function dealloc(const Token *) defined in Library
   function run() in line 32
      19 lines of code
      0 parameters
      1 conditional paths
      uses macro definition TEST_CASE defined in testsuite.h
      uses function empty() defined in TestLibrary
      uses function function_match_scope() defined in TestLibrary
      uses function function_match_args() defined in TestLibrary
      uses function function_match_var() defined in TestLibrary
      uses function function_arg() defined in TestLibrary
      uses function function_arg_any() defined in TestLibrary
      uses function function_arg_valid() defined in TestLibrary
      uses function function_arg_minsize() defined in TestLibrary
      uses function function_namespace() defined in TestLibrary
      uses function function_warn() defined in TestLibrary
      uses function memory() defined in TestLibrary
      uses function memory2() defined in TestLibrary
      uses function resource() defined in TestLibrary
      uses function podtype() defined in TestLibrary
      uses function container() defined in TestLibrary
      uses function version() defined in TestLibrary
   function version() in line 497
      26 lines of code
      0 parameters
      1 conditional paths
      uses function readLibrary(Library &,const char *) defined in TestLibrary
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errorcode defined in Library::Error
      uses enumvalue OK defined in Library
      uses enumvalue UNSUPPORTED_FORMAT defined in Library
      uses macro definition REGISTER_TEST defined in testsuite.h
   function TestLibrary() in line 28
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/test/testmathlib.cpp
module TestMathLib
   inherits from TestFixture
   function abs() in line 1101
      9 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function calculate() in line 98
      53 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses macro definition ASSERT_THROW defined in testsuite.h
   function calculate1() in line 152
      19 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses macro definition ASSERT_THROW defined in testsuite.h
   function cos() in line 1095
      3 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function incdec() in line 1071
      20 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses macro definition ASSERT_THROW defined in testsuite.h
   function isbin() in line 467
      39 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function isdec(void) in line 885
      16 lines of code
      1 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function isDecimalFloat() in line 763
      105 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function isEqual() in line 75
      5 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function isFloat() in line 756
      6 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function isFloatHex() in line 585
      21 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function isGreater() in line 63
      4 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function isGreaterEqual() in line 68
      6 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function isint() in line 378
      88 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function isIntHex() in line 607
      61 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function isLess() in line 86
      4 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function isLessEqual() in line 91
      6 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function isnegative() in line 507
      15 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function isNotEqual() in line 81
      4 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function isNullValue() in line 902
      168 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function isoct() in line 523
      61 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function ispositive() in line 739
      16 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function isValidIntegerSuffix(void) in line 669
      69 lines of code
      1 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function naninf() in line 869
      15 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function run() in line 30
      32 lines of code
      0 parameters
      1 conditional paths
      uses macro definition TEST_CASE defined in testsuite.h
      uses function isint() defined in TestMathLib
      uses function isbin() defined in TestMathLib
      uses function isdec(void) defined in TestMathLib
      uses function isoct() defined in TestMathLib
      uses function isFloatHex() defined in TestMathLib
      uses function isIntHex() defined in TestMathLib
      uses function isValidIntegerSuffix(void) defined in TestMathLib
      uses function isnegative() defined in TestMathLib
      uses function ispositive() defined in TestMathLib
      uses function isFloat() defined in TestMathLib
      uses function isDecimalFloat() defined in TestMathLib
      uses function isGreater() defined in TestMathLib
      uses function isGreaterEqual() defined in TestMathLib
      uses function isEqual() defined in TestMathLib
      uses function isNotEqual() defined in TestMathLib
      uses function isLess() defined in TestMathLib
      uses function isLessEqual() defined in TestMathLib
      uses function calculate() defined in TestMathLib
      uses function calculate1() defined in TestMathLib
      uses function typesuffix() defined in TestMathLib
      uses function toLongNumber() defined in TestMathLib
      uses function toDoubleNumber() defined in TestMathLib
      uses function naninf() defined in TestMathLib
      uses function isNullValue() defined in TestMathLib
      uses function incdec() defined in TestMathLib
      uses function sin() defined in TestMathLib
      uses function cos() defined in TestMathLib
      uses function tan() defined in TestMathLib
      uses function abs() defined in TestMathLib
      uses function toString() defined in TestMathLib
   function sin() in line 1092
      3 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function tan() in line 1098
      3 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function toDoubleNumber() in line 334
      43 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS_DOUBLE defined in testsuite.h
      uses variable e defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function toLongNumber() in line 230
      103 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses macro definition ASSERT_THROW defined in testsuite.h
   function toString() in line 1111
      11 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function f(char) defined in test.cxx
      uses macro definition REGISTER_TEST defined in testsuite.h
   function typesuffix() in line 172
      57 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function TestMathLib() in line 25
      protection public
      2 lines of code
      0 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/test/testmemleak.cpp
module TestMemleak
   inherits from TestFixture
   function functionReturnType(const char) in line 40
      13 lines of code
      1 parameters
      1 conditional paths
      uses variable errout defined in redirect.h
      uses variable settings defined in TestMemleak
      uses variable code defined in extracttests.py
      uses function tokenize(std::istream &,const char,const std::string &,bool) defined in Tokenizer
      uses function functionReturnType(const Function *,std::list< const Function * > *) defined in CheckMemoryLeak
      uses function getSymbolDatabase() defined in Tokenizer
      uses variable scopeList defined in SymbolDatabase
   function open() in line 83
      23 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable errout defined in redirect.h
      uses variable settings defined in TestMemleak
      uses function tokenize(std::istream &,const char,const std::string &,bool) defined in Tokenizer
      uses function tokens() defined in Tokenizer
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses enumvalue No defined in CheckMemoryLeak
      uses function tokAt(int) defined in Token
      uses macro definition REGISTER_TEST defined in testsuite.h
   function run() in line 35
      4 lines of code
      0 parameters
      1 conditional paths
      uses macro definition TEST_CASE defined in testsuite.h
      uses function testFunctionReturnType() defined in TestMemleak
      uses function open() defined in TestMemleak
   function testFunctionReturnType() in line 54
      28 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses enumvalue No defined in CheckMemoryLeak
      uses function functionReturnType(const char) defined in TestMemleak
      uses enumvalue New defined in CheckMemoryLeak
      uses enumvalue NewArray defined in CheckMemoryLeak
   function TestMemleak() in line 29
      protection public
      2 lines of code
      0 parameters
      1 conditional paths
   variable settings in line 33
module TestMemleakInFunction
   inherits from TestFixture
   function all1() in line 3174
      7 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function alloc_alloc_1() in line 1065
      10 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function allocfunc1() in line 2321
      31 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function allocfunc10() in line 2601
      12 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function allocfunc11() in line 2614
      6 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function allocfunc12() in line 2621
      11 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function allocfunc13() in line 2633
      31 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function allocfunc14() in line 2665
      12 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function allocfunc2() in line 2353
      39 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function allocfunc3() in line 2393
      12 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function allocfunc4() in line 2406
      28 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function allocfunc5() in line 2435
      100 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
      uses macro definition TODO_ASSERT_EQUALS defined in testsuite.h
   function allocfunc6() in line 2537
      18 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function allocfunc7() in line 2557
      15 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function allocfunc8() in line 2573
      13 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function allocfunc9() in line 2587
      13 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function assign1() in line 2936
      48 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function assign_pclose() in line 3333
      7 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function autoptr1() in line 3302
      8 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function c_code() in line 3858
      9 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function call_func() in line 594
      56 lines of code
      0 parameters
      2 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function cast1() in line 2998
      7 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function check(const char,bool,bool,bool,Settings *) in line 124
      20 lines of code
      5 parameters
      2 conditional paths
      uses variable errout defined in redirect.h
      uses variable settings defined in TestMemleak
      uses variable experimental defined in Settings
      uses variable standards defined in Settings
      uses variable posix defined in Standards
      uses variable code defined in extracttests.py
      uses function tokenize(std::istream &,const char,const std::string &,bool) defined in Tokenizer
      uses function simplifyTokenList2() defined in Tokenizer
      uses function checkReallocUsage() defined in CheckMemoryLeakInFunction
      uses function check() defined in CheckMemoryLeakInFunction
   function class1() in line 3259
      11 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function class2() in line 3271
      29 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function close_function() in line 3542
      59 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function crash() in line 3898
      17 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
      uses macro definition REGISTER_TEST defined in testsuite.h
   function creat_function() in line 3534
      7 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function dealloc_and_alloc_in_func() in line 3689
      17 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function dealloc_use() in line 3008
      84 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
      uses macro definition TODO_ASSERT_EQUALS defined in testsuite.h
   function dealloc_use_2() in line 3093
      8 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function dealloc_use_3() in line 3102
      17 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function dofindleak(const char) in line 818
      35 lines of code
      1 parameters
      5 conditional paths
      uses variable errout defined in redirect.h
      uses variable debug defined in Settings
      uses variable debugwarnings defined in Settings
      uses variable code defined in extracttests.py
      uses function createTokens(std::istream &,const std::string &) defined in TokenList
      uses function front() defined in TokenList
      uses function next() defined in Token
      uses function str(T &&) defined in Token
      uses function linenr() defined in Token
   function exit2() in line 3341
      16 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function exit4() in line 3358
      11 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function exit5() in line 3370
      12 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function exit6() in line 3383
      17 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function exit7() in line 3401
      14 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function externvar() in line 1047
      8 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function fcloseall_function() in line 3483
      15 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function fd_functions() in line 3602
      27 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function file_functions() in line 3630
      25 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function findleak() in line 854
      49 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses macro definition TODO_ASSERT_EQUALS defined in testsuite.h
   function forwhile10() in line 1297
      19 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function forwhile11() in line 1318
      10 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function forwhile5() in line 1225
      12 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function forwhile6() in line 1239
      11 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function forwhile8() in line 1252
      23 lines of code
      0 parameters
      1 conditional paths
      uses macro definition TODO_ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function forwhile9() in line 1277
      18 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function freefree1() in line 3120
      9 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function freefree2() in line 3130
      9 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function freefree3() in line 3140
      10 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function func10() in line 1610
      8 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function func11() in line 1619
      8 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function func12() in line 1628
      18 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function func13() in line 1647
      8 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function func14() in line 1656
      15 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function func15() in line 1672
      12 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function func16() in line 1685
      18 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function func17() in line 1705
      23 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function func18() in line 1730
      26 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function func19() in line 1757
      13 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function func20() in line 1771
      35 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function func21() in line 1808
      291 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function func22() in line 2101
      44 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function func23() in line 2147
      93 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function func24() in line 2242
      14 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function func25() in line 2257
      31 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function func26() in line 2289
      8 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function func27() in line 2298
      13 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function func28() in line 2312
      8 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function func3() in line 1517
      11 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function func4() in line 1530
      13 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function func5() in line 1545
      14 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function func6() in line 1561
      13 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function func7() in line 1576
      16 lines of code
      0 parameters
      1 conditional paths
      uses macro definition TODO_ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function func9() in line 1594
      15 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function functionParameter() in line 3745
      7 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function getc_function() in line 3656
      22 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function getcode(const char,const char,bool) in line 368
      32 lines of code
      3 parameters
      3 conditional paths
      uses variable errout defined in redirect.h
      uses variable standards defined in Settings
      uses variable posix defined in Standards
      uses variable code defined in extracttests.py
      uses function tokenize(std::istream &,const char,const std::string &,bool) defined in Tokenizer
      uses function simplifyTokenList2() defined in Tokenizer
      uses function tokens() defined in Tokenizer
      uses enumvalue No defined in CheckMemoryLeak
      uses function next() defined in Token
      uses function str(T &&) defined in Token
   function gnucfg() in line 3868
      13 lines of code
      0 parameters
      1 conditional paths
      uses variable settings defined in TestMemleak
      uses macro definition LOAD_LIB_2 defined in testsuite.h
      uses variable library defined in Settings
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function if10() in line 1197
      12 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function if11() in line 1210
      13 lines of code
      0 parameters
      1 conditional paths
      uses macro definition TODO_ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function if4() in line 1135
      12 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function if7() in line 1148
      15 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function if8() in line 1164
      17 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function if9() in line 1182
      14 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function if_with_and() in line 3311
      21 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function ifelse10() in line 1117
      15 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function ifelse6() in line 1076
      12 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function ifelse7() in line 1090
      12 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function ifelse8() in line 1104
      12 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function jmp() in line 3754
      21 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function knownFunctions() in line 3725
      8 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function linux_list_1() in line 2713
      14 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function linux_list_2() in line 2728
      7 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function malloc_constant_1() in line 3184
      8 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function mismatch1() in line 1402
      29 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function mismatch2() in line 1432
      13 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function mismatch3() in line 1446
      13 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function mismatch4() in line 1460
      13 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function mismatch5() in line 1474
      9 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function mismatch6() in line 1484
      15 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function mismatchSize() in line 1500
      10 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function new_nothrow() in line 966
      68 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function nonstd_free() in line 957
      7 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function noreturn() in line 3416
      21 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function open_function() in line 3499
      34 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function pointer_to_pointer() in line 3679
      9 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function ptrptr() in line 3849
      8 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function realloc1() in line 2760
      9 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function realloc10() in line 2861
      9 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function realloc11() in line 2871
      10 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function realloc12() in line 2882
      10 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function realloc13() in line 2893
      9 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function realloc14() in line 2903
      10 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function realloc15() in line 2914
      11 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function realloc16() in line 2926
      9 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function realloc2() in line 2770
      10 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function realloc3() in line 2781
      11 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function realloc4() in line 2793
      13 lines of code
      0 parameters
      1 conditional paths
      uses macro definition TODO_ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function realloc5() in line 2807
      14 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function realloc6() in line 2822
      4 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function realloc7() in line 2827
      13 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function realloc8() in line 2841
      11 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function realloc9() in line 2853
      7 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function referencevar() in line 1056
      7 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function ret5() in line 1365
      8 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function ret6() in line 1374
      8 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function ret7() in line 1383
      8 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function ret8() in line 1392
      8 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function run() in line 146
      221 lines of code
      0 parameters
      1 conditional paths
      uses macro definition LOAD_LIB_2 defined in testsuite.h
      uses variable library defined in Settings
      uses macro definition TEST_CASE defined in testsuite.h
   function same_function_name() in line 3734
      10 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function simple11() in line 936
      20 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function simple5() in line 905
      8 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function simple7() in line 915
      9 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function simple9() in line 926
      9 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function simplifycode(const char) in line 652
      27 lines of code
      1 parameters
      4 conditional paths
      uses variable errout defined in redirect.h
      uses variable code defined in extracttests.py
      uses variable list defined in Tokenizer
      uses function createTokens(std::istream &,const std::string &) defined in TokenList
      uses function front() defined in TokenList
      uses function next() defined in Token
      uses function simplifycode(Token *) defined in CheckMemoryLeakInFunction
      uses function tokens() defined in Tokenizer
      uses function stringifyList(bool,bool,bool,bool,bool,const std::vector< std::string > *,const Token *) defined in Token
   function simplifycode() in line 682
      132 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable expected defined in extracttests.py
      uses macro definition TODO_ASSERT_EQUALS defined in testsuite.h
   function sizeof1() in line 2738
      20 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function staticvar() in line 1036
      10 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function strcat_result_assignment() in line 3160
      11 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function strcpy_result_assignment() in line 3151
      8 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function strndup_function() in line 3438
      6 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function switch2() in line 1332
      15 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function switch3() in line 1348
      16 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function test_white_list(const std::string &,bool) in line 590
      3 lines of code
      2 parameters
      1 conditional paths
   function testgetcode() in line 404
      185 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses macro definition TODO_ASSERT_EQUALS defined in testsuite.h
      uses macro definition ASSERT_THROW defined in testsuite.h
   function throw1() in line 2678
      11 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function throw2() in line 2690
      19 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function tmpfile_function() in line 3445
      37 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function trac1879() in line 3839
      9 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function trac1949() in line 3776
      10 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function trac2540() in line 3787
      15 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function trac2662() in line 3803
      35 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function trac3991() in line 3882
      15 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function unknownFunction1() in line 3195
      13 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function unknownFunction2() in line 3209
      20 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function unknownFunction4() in line 3230
      10 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function unknownFunction5() in line 3241
      16 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function unknownSyntax1() in line 3708
      16 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function varid() in line 2985
      12 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function TestMemleakInFunction() in line 116
      protection public
      2 lines of code
      0 parameters
      1 conditional paths
   variable settings0 in line 120
   variable settings1 in line 121
   variable settings2 in line 122
module TestMemleakInClass
   inherits from TestFixture
   function check(const char) in line 3938
      14 lines of code
      1 parameters
      1 conditional paths
      uses variable errout defined in redirect.h
      uses variable settings defined in TestMemleak
      uses variable code defined in extracttests.py
      uses function tokenize(std::istream &,const char,const std::string &,bool) defined in Tokenizer
      uses function simplifyTokenList2() defined in Tokenizer
      uses function check() defined in CheckMemoryLeakInClass
   function class1() in line 3997
      41 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function class10() in line 4304
      19 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function class11() in line 4324
      20 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function class12() in line 4345
      35 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function class13() in line 4381
      35 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function class14() in line 4417
      69 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function class15() in line 4487
      66 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function class16() in line 4554
      12 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function class17() in line 4567
      42 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function class18() in line 4610
      29 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function class19() in line 4640
      56 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function class2() in line 4039
      37 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function class20() in line 4697
      120 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function class21() in line 4818
      37 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function class22() in line 4856
      10 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function class23() in line 4867
      18 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function class24() in line 4886
      10 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function class25() in line 4897
      10 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function class3() in line 4077
      65 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function class4() in line 4143
      39 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function class6() in line 4183
      27 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function class7() in line 4211
      34 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function class8() in line 4246
      29 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function class9() in line 4276
      27 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function free_member_in_sub_func() in line 4924
      57 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function func1() in line 5055
      25 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function func2() in line 5081
      13 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
      uses macro definition REGISTER_TEST defined in testsuite.h
   function mismatch1() in line 4982
      24 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function mismatch2() in line 5007
      47 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function run() in line 3953
      42 lines of code
      0 parameters
      1 conditional paths
      uses variable settings defined in TestMemleak
      uses function addEnabled(const std::string &) defined in Settings
      uses macro definition LOAD_LIB_2 defined in testsuite.h
      uses variable library defined in Settings
      uses macro definition TEST_CASE defined in testsuite.h
   function staticvar() in line 4908
      14 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function TestMemleakInClass() in line 3928
      protection public
      2 lines of code
      0 parameters
      1 conditional paths
   variable settings in line 3932
module TestMemleakStructMember
   inherits from TestFixture
   function assign1() in line 5259
      26 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function assign2() in line 5286
      7 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function assign3() in line 5294
      8 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function check(const char,const char,bool) in line 5112
      14 lines of code
      3 parameters
      1 conditional paths
      uses variable errout defined in redirect.h
      uses variable settings defined in TestMemleak
      uses variable code defined in extracttests.py
      uses function tokenize(std::istream &,const char,const std::string &,bool) defined in Tokenizer
      uses function simplifyTokenList2() defined in Tokenizer
      uses function check() defined in CheckMemoryLeakStructMember
   function customAllocation() in line 5519
      10 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
      uses macro definition REGISTER_TEST defined in testsuite.h
   function err() in line 5175
      41 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function failedAllocation() in line 5303
      14 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function function1() in line 5318
      18 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function function2() in line 5338
      8 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function function3() in line 5348
      8 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function function4() in line 5358
      9 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function globalvar() in line 5403
      11 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function goto_() in line 5217
      15 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function ifelse() in line 5368
      18 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function linkedlist() in line 5387
      15 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function localvars() in line 5416
      69 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function ret1() in line 5233
      15 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function ret2() in line 5249
      9 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function run() in line 5127
      47 lines of code
      0 parameters
      1 conditional paths
      uses macro definition LOAD_LIB_2 defined in testsuite.h
      uses variable settings defined in TestMemleak
      uses variable library defined in Settings
      uses macro definition TEST_CASE defined in testsuite.h
   function trac5030() in line 5487
      8 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function varid() in line 5496
      12 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function varid_2() in line 5509
      9 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function TestMemleakStructMember() in line 5106
      protection public
      2 lines of code
      0 parameters
      1 conditional paths
   variable settings in line 5110
module TestMemleakNoVar
   inherits from TestFixture
   function check(const char) in line 5545
      14 lines of code
      1 parameters
      1 conditional paths
      uses variable errout defined in redirect.h
      uses variable settings defined in TestMemleak
      uses variable code defined in extracttests.py
      uses function tokenize(std::istream &,const char,const std::string &,bool) defined in Tokenizer
      uses function simplifyTokenList2() defined in Tokenizer
      uses function check() defined in CheckMemoryLeakNoVar
   function functionParameter() in line 5578
      53 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
      uses macro definition TODO_ASSERT_EQUALS defined in testsuite.h
   function missingAssignment() in line 5632
      92 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function run() in line 5560
      17 lines of code
      0 parameters
      1 conditional paths
      uses variable settings defined in TestMemleak
      uses variable inconclusive defined in Settings
      uses variable standards defined in Settings
      uses variable posix defined in Standards
      uses function addEnabled(const std::string &) defined in Settings
      uses macro definition LOAD_LIB_2 defined in testsuite.h
      uses variable library defined in Settings
      uses macro definition TEST_CASE defined in testsuite.h
   function smartPointerFunctionParam() in line 5725
      53 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
      uses macro definition REGISTER_TEST defined in testsuite.h
   function TestMemleakNoVar() in line 5539
      protection public
      2 lines of code
      0 parameters
      1 conditional paths
   variable settings in line 5543
module TestMemleakGLib
   inherits from TestFixture
   function check(const char) in line 5793
      28 lines of code
      1 parameters
      1 conditional paths
      uses variable errout defined in redirect.h
      uses variable settings defined in TestMemleak
      uses variable code defined in extracttests.py
      uses function preprocess(std::istream &,std::map< std::string, std::string > &,const std::string &,const std::list< std::string > &) defined in Preprocessor
      uses function tokenize(std::istream &,const char,const std::string &,bool) defined in Tokenizer
      uses function simplifyTokenList2() defined in Tokenizer
      uses function check() defined in CheckMemoryLeakInFunction
      uses function checkReallocUsage() defined in CheckMemoryLeakInFunction
      uses function check() defined in CheckMemoryLeakInClass
      uses function check() defined in CheckMemoryLeakStructMember
      uses function check() defined in CheckMemoryLeakNoVar
   function glib1() in line 5830
      57 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
      uses macro definition TODO_ASSERT_EQUALS defined in testsuite.h
   function glib2() in line 5888
      18 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
      uses macro definition TODO_ASSERT_EQUALS defined in testsuite.h
      uses macro definition REGISTER_TEST defined in testsuite.h
   function run() in line 5822
      7 lines of code
      0 parameters
      1 conditional paths
      uses macro definition LOAD_LIB_2 defined in testsuite.h
      uses variable settings defined in TestMemleak
      uses variable library defined in Settings
      uses function addEnabled(const std::string &) defined in Settings
      uses macro definition TEST_CASE defined in testsuite.h
   function TestMemleakGLib() in line 5787
      protection public
      2 lines of code
      0 parameters
      1 conditional paths
   variable settings in line 5791
module TestMemleakWindows
   inherits from TestFixture
   function check(const char) in line 5921
      15 lines of code
      1 parameters
      1 conditional paths
      uses variable errout defined in redirect.h
      uses variable settings defined in TestMemleak
      uses variable code defined in extracttests.py
      uses function tokenize(std::istream &,const char,const std::string &,bool) defined in Tokenizer
      uses function simplifyTokenList2() defined in Tokenizer
      uses function checkReallocUsage() defined in CheckMemoryLeakInFunction
      uses function check() defined in CheckMemoryLeakInFunction
   function openfileNoLeak() in line 5943
      13 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
      uses macro definition TODO_ASSERT_EQUALS defined in testsuite.h
      uses macro definition REGISTER_TEST defined in testsuite.h
   function run() in line 5937
      5 lines of code
      0 parameters
      1 conditional paths
      uses macro definition LOAD_LIB_2 defined in testsuite.h
      uses variable settings defined in TestMemleak
      uses variable library defined in Settings
      uses macro definition TEST_CASE defined in testsuite.h
   function TestMemleakWindows() in line 5915
      protection public
      2 lines of code
      0 parameters
      1 conditional paths
   variable settings in line 5919
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/test/testnullpointer.cpp
module TestNullPointer
   inherits from TestFixture
   function check(const char,bool,const char) in line 101
      20 lines of code
      3 parameters
      2 conditional paths
      uses variable errout defined in redirect.h
      uses variable settings defined in TestNullPointer
      uses variable inconclusive defined in Settings
      uses variable code defined in extracttests.py
      uses function tokenize(std::istream &,const char,const std::string &,bool) defined in Tokenizer
      uses variable filename defined in extracttests.py
      uses function nullPointer() defined in CheckNullPointer
      uses function simplifyTokenList2() defined in Tokenizer
      uses function nullConstantDereference() defined in CheckNullPointer
   function functioncall() in line 2163
      89 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestNullPointer
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function functioncallDefaultArguments() in line 2327
      167 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestNullPointer
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
      uses macro definition TODO_ASSERT_EQUALS defined in testsuite.h
   function functioncalllibrary() in line 2253
      73 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses function tokenize(std::istream &,const char,const std::string &,bool) defined in Tokenizer
      uses function tokens() defined in Tokenizer
      uses variable argumentChecks defined in Library
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function gcc_statement_expression() in line 1768
      7 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestNullPointer
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function nullConstantDereference() in line 1754
      13 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestNullPointer
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function nullpointer1() in line 228
      32 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestNullPointer
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function nullpointer10() in line 1123
      8 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestNullPointer
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function nullpointer11() in line 1132
      9 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestNullPointer
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function nullpointer12() in line 1142
      14 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses function check(const char,bool,const char) defined in TestNullPointer
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function nullpointer15() in line 1157
      8 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestNullPointer
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function nullpointer16() in line 1166
      8 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestNullPointer
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function nullpointer17() in line 1175
      15 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestNullPointer
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function nullpointer18() in line 1191
      13 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestNullPointer
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function nullpointer19() in line 1205
      6 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestNullPointer
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function nullpointer2() in line 261
      10 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestNullPointer
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function nullpointer20() in line 1212
      15 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestNullPointer
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function nullpointer21() in line 1228
      9 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestNullPointer
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function nullpointer23() in line 1238
      8 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestNullPointer
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function nullpointer24() in line 1247
      8 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestNullPointer
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function nullpointer25() in line 1256
      9 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestNullPointer
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function nullpointer26() in line 1266
      16 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestNullPointer
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function nullpointer27() in line 1283
      14 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestNullPointer
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function nullpointer28() in line 1298
      10 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestNullPointer
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function nullpointer30() in line 1309
      14 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestNullPointer
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function nullpointer5() in line 847
      10 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestNullPointer
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function nullpointer7() in line 1104
      8 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestNullPointer
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function nullpointer9() in line 1113
      9 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestNullPointer
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function nullpointer_addressOf() in line 1324
      13 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestNullPointer
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function nullpointer_cast() in line 1354
      9 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestNullPointer
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function nullpointer_castToVoid() in line 1364
      7 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestNullPointer
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function nullpointer_in_for_loop() in line 1954
      10 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestNullPointer
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function nullpointer_in_return() in line 1916
      13 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestNullPointer
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function nullpointer_in_typeid() in line 1930
      23 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestNullPointer
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function nullpointer_internal_error() in line 2495
      10 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestNullPointer
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function nullpointerAfterLoop() in line 123
      104 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestNullPointer
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
      uses variable code defined in extracttests.py
      uses macro definition TODO_ASSERT_EQUALS defined in testsuite.h
   function nullpointerDelete() in line 1965
      18 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestNullPointer
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function nullpointerExecutionPaths() in line 859
      195 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestNullPointer
      uses macro definition TODO_ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable code defined in extracttests.py
   function nullpointerExecutionPathsLoop() in line 1056
      47 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestNullPointer
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
      uses macro definition TODO_ASSERT_EQUALS defined in testsuite.h
   function nullpointerExit() in line 1984
      9 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestNullPointer
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function nullpointerStdStream() in line 2087
      75 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestNullPointer
      uses macro definition TODO_ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function nullpointerStdString() in line 1994
      92 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestNullPointer
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function nullpointerSwitch() in line 1338
      15 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestNullPointer
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function pointerCheckAndDeRef() in line 1373
      379 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestNullPointer
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
      uses variable code defined in extracttests.py
   function pointerDerefAndCheck() in line 517
      329 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestNullPointer
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function printf_with_invalid_va_argument() in line 1792
      75 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestNullPointer
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function run() in line 33
      67 lines of code
      0 parameters
      1 conditional paths
      uses function Parse(const char *,size_t) defined in tinyxml2::XMLDocument
      uses variable settings defined in TestNullPointer
      uses variable library defined in Settings
      uses function load(const char,const char) defined in Library
      uses function addEnabled(const std::string &) defined in Settings
      uses macro definition TEST_CASE defined in testsuite.h
      uses function nullpointerAfterLoop() defined in TestNullPointer
      uses function nullpointer1() defined in TestNullPointer
      uses function nullpointer2() defined in TestNullPointer
      uses function structDerefAndCheck() defined in TestNullPointer
      uses function pointerDerefAndCheck() defined in TestNullPointer
      uses function nullpointer5() defined in TestNullPointer
      uses function nullpointerExecutionPaths() defined in TestNullPointer
      uses function nullpointerExecutionPathsLoop() defined in TestNullPointer
      uses function nullpointer7() defined in TestNullPointer
      uses function nullpointer9() defined in TestNullPointer
      uses function nullpointer10() defined in TestNullPointer
      uses function nullpointer11() defined in TestNullPointer
      uses function nullpointer12() defined in TestNullPointer
      uses function nullpointer15() defined in TestNullPointer
      uses function nullpointer16() defined in TestNullPointer
      uses function nullpointer17() defined in TestNullPointer
      uses function nullpointer18() defined in TestNullPointer
      uses function nullpointer19() defined in TestNullPointer
      uses function nullpointer20() defined in TestNullPointer
      uses function nullpointer21() defined in TestNullPointer
      uses function nullpointer23() defined in TestNullPointer
      uses function nullpointer24() defined in TestNullPointer
      uses function nullpointer25() defined in TestNullPointer
      uses function nullpointer26() defined in TestNullPointer
      uses function nullpointer27() defined in TestNullPointer
      uses function nullpointer28() defined in TestNullPointer
      uses function nullpointer30() defined in TestNullPointer
      uses function nullpointer_addressOf() defined in TestNullPointer
      uses function nullpointerSwitch() defined in TestNullPointer
      uses function nullpointer_cast() defined in TestNullPointer
      uses function nullpointer_castToVoid() defined in TestNullPointer
      uses function pointerCheckAndDeRef() defined in TestNullPointer
      uses function nullConstantDereference() defined in TestNullPointer
      uses function gcc_statement_expression() defined in TestNullPointer
      uses function snprintf_with_zero_size() defined in TestNullPointer
      uses function snprintf_with_non_zero_size() defined in TestNullPointer
      uses function printf_with_invalid_va_argument() defined in TestNullPointer
      uses function scanf_with_invalid_va_argument() defined in TestNullPointer
      uses function nullpointer_in_return() defined in TestNullPointer
      uses function nullpointer_in_typeid() defined in TestNullPointer
      uses function nullpointer_in_for_loop() defined in TestNullPointer
      uses function nullpointerDelete() defined in TestNullPointer
      uses function nullpointerExit() defined in TestNullPointer
      uses function nullpointerStdString() defined in TestNullPointer
      uses function nullpointerStdStream() defined in TestNullPointer
      uses function functioncall() defined in TestNullPointer
      uses function functioncalllibrary() defined in TestNullPointer
      uses function functioncallDefaultArguments() defined in TestNullPointer
      uses function nullpointer_internal_error() defined in TestNullPointer
      uses function ticket6505() defined in TestNullPointer
   function scanf_with_invalid_va_argument() in line 1868
      47 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestNullPointer
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function snprintf_with_non_zero_size() in line 1784
      7 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestNullPointer
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function snprintf_with_zero_size() in line 1776
      7 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestNullPointer
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function structDerefAndCheck() in line 275
      240 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestNullPointer
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
      uses macro definition TODO_ASSERT_EQUALS defined in testsuite.h
      uses variable code defined in extracttests.py
   function ticket6505() in line 2506
      15 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool,const char) defined in TestNullPointer
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
      uses macro definition REGISTER_TEST defined in testsuite.h
   function TestNullPointer() in line 27
      protection public
      2 lines of code
      0 parameters
      1 conditional paths
   variable settings in line 31
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/test/testoptions.cpp
module TestOptions
   inherits from TestFixture
   function gcc_errors() in line 76
      5 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function gcc_style_errors() defined in options
   function invalid_switches() in line 90
      7 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function which_test() defined in options
      uses function gcc_style_errors() defined in options
      uses function quiet() defined in options
      uses macro definition REGISTER_TEST defined in testsuite.h
   function multiple_testcases() in line 83
      5 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function which_test() defined in options
   function no_test_method() in line 55
      5 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function which_test() defined in options
   function not_quiet() in line 62
      5 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function quiet() defined in options
   function quiet() in line 69
      5 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function quiet() defined in options
   function run() in line 29
      10 lines of code
      0 parameters
      1 conditional paths
      uses macro definition TEST_CASE defined in testsuite.h
      uses function which_test() defined in TestOptions
      uses function which_test_method() defined in TestOptions
      uses function no_test_method() defined in TestOptions
      uses function not_quiet() defined in TestOptions
      uses function quiet() defined in TestOptions
      uses function gcc_errors() defined in TestOptions
      uses function multiple_testcases() defined in TestOptions
      uses function invalid_switches() defined in TestOptions
   function which_test() in line 41
      5 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function which_test() defined in options
   function which_test_method() in line 48
      5 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function which_test() defined in options
   function TestOptions() in line 23
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/test/testother.cpp
module TestOther
   inherits from TestFixture
   function check(const char,const char *,bool,bool,bool,Settings *) in line 169
      29 lines of code
      6 parameters
      3 conditional paths
      uses variable errout defined in redirect.h
      uses function addEnabled(const std::string &) defined in Settings
      uses variable code defined in extracttests.py
      uses function tokenize(std::istream &,const char,const std::string &,bool) defined in Tokenizer
      uses variable filename defined in extracttests.py
      uses function runChecks(const Tokenizer *,const Settings *,ErrorLogger *) defined in CheckOther
      uses function simplifyTokenList2() defined in Tokenizer
      uses function runSimplifiedChecks(const Tokenizer *,const Settings *,ErrorLogger *) defined in CheckOther
   function check_preprocess_suppress(const char,const char *) in line 219
      33 lines of code
      2 parameters
      2 conditional paths
      uses variable errout defined in redirect.h
      uses variable filename defined in extracttests.py
      uses function addEnabled(const std::string &) defined in Settings
      uses variable experimental defined in Settings
      uses variable fin defined in triage-report.py
      uses function preprocess(std::istream &,std::map< std::string, std::string > &,const std::string &,const std::list< std::string > &) defined in Preprocessor
      uses variable includePaths defined in Settings
      uses variable code defined in extracttests.py
      uses function getcode(const std::string &,const std::string &,const std::string &) defined in Preprocessor
      uses function tokenize(std::istream &,const char,const std::string &,bool) defined in Tokenizer
      uses function checkSwitchCaseFallThrough() defined in CheckOther
      uses function reportUnmatchedSuppressions(const std::list< Suppressions::SuppressionEntry > &) defined in ErrorLogger
      uses variable nomsg defined in Settings
      uses function getUnmatchedLocalSuppressions(const std::string &,const bool) defined in Suppressions
   function checkCastIntToCharAndBack() in line 5470
      165 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char *,bool,bool,bool,Settings *) defined in TestOther
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function checkCommaSeparatedReturn() in line 5636
      44 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char *,bool,bool,bool,Settings *) defined in TestOther
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function checkComparisonFunctionIsAlwaysTrueOrFalse() in line 5681
      33 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char *,bool,bool,bool,Settings *) defined in TestOther
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function checkForSuspiciousSemicolon1() in line 4476
      23 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char *,bool,bool,bool,Settings *) defined in TestOther
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function checkForSuspiciousSemicolon2() in line 4500
      45 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char *,bool,bool,bool,Settings *) defined in TestOther
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function checkInterlockedDecrement(const char) in line 212
      6 lines of code
      1 parameters
      1 conditional paths
      uses variable platformType defined in Settings
      uses enumvalue Win32A defined in Settings
      uses function check(const char,const char *,bool,bool,bool,Settings *) defined in TestOther
      uses variable code defined in extracttests.py
   function checkInvalidFree() in line 4547
      89 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char *,bool,bool,bool,Settings *) defined in TestOther
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function checkInvalidPointerCast(const char,bool,bool) in line 1200
      18 lines of code
      3 parameters
      2 conditional paths
      uses variable errout defined in redirect.h
      uses function addEnabled(const std::string &) defined in Settings
      uses variable inconclusive defined in Settings
      uses variable code defined in extracttests.py
      uses function tokenize(std::istream &,const char,const std::string &,bool) defined in Tokenizer
      uses function invalidPointerCast() defined in CheckOther
   function checkNegativeShift() in line 4745
      52 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char *,bool,bool,bool,Settings *) defined in TestOther
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function checkOldStylePointerCast(const char) in line 1052
      23 lines of code
      1 parameters
      1 conditional paths
      uses variable errout defined in redirect.h
      uses function addEnabled(const std::string &) defined in Settings
      uses variable standards defined in Settings
      uses variable cpp defined in Standards
      uses enumvalue CPP03 defined in Standards
      uses variable code defined in extracttests.py
      uses function tokenize(std::istream &,const char,const std::string &,bool) defined in Tokenizer
      uses function warningOldStylePointerCast() defined in CheckOther
   function checkPipeParameterSize() in line 5377
      92 lines of code
      0 parameters
      1 conditional paths
      uses function checkposix(const char) defined in TestOther
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
      uses function check(const char,const char *,bool,bool,bool,Settings *) defined in TestOther
   function checkposix(const char) in line 199
      12 lines of code
      1 parameters
      1 conditional paths
      uses function addEnabled(const std::string &) defined in Settings
      uses variable standards defined in Settings
      uses variable posix defined in Standards
      uses function check(const char,const char *,bool,bool,bool,Settings *) defined in TestOther
      uses variable code defined in extracttests.py
   function checkRedundantCopy() in line 4637
      107 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char *,bool,bool,bool,Settings *) defined in TestOther
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
      uses macro definition TODO_ASSERT_EQUALS defined in testsuite.h
   function checkSignOfPointer() in line 4237
      238 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char *,bool,bool,bool,Settings *) defined in TestOther
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function checkSignOfUnsignedVariable() in line 4013
      223 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char *,bool,bool,bool,Settings *) defined in TestOther
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
      uses variable code defined in extracttests.py
   function clarifyCalculation() in line 3351
      50 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char *,bool,bool,bool,Settings *) defined in TestOther
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
      uses macro definition TODO_ASSERT_EQUALS defined in testsuite.h
   function clarifyStatement() in line 3402
      67 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char *,bool,bool,bool,Settings *) defined in TestOther
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function duplicateBranch() in line 3470
      58 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char *,bool,bool,bool,Settings *) defined in TestOther
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function duplicateBranch1() in line 3529
      32 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char *,bool,bool,bool,Settings *) defined in TestOther
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function duplicateBranch2() in line 3562
      9 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char *,bool,bool,bool,Settings *) defined in TestOther
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function duplicateExpression1() in line 3572
      245 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char *,bool,bool,bool,Settings *) defined in TestOther
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
      uses macro definition TODO_ASSERT_EQUALS defined in testsuite.h
   function duplicateExpression2() in line 3818
      27 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char *,bool,bool,bool,Settings *) defined in TestOther
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function duplicateExpression3() in line 3846
      117 lines of code
      0 parameters
      1 conditional paths
      uses function Parse(const char *,size_t) defined in tinyxml2::XMLDocument
      uses variable library defined in Settings
      uses function load(const char,const char) defined in Library
      uses function check(const char,const char *,bool,bool,bool,Settings *) defined in TestOther
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function duplicateExpression4() in line 3964
      17 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char *,bool,bool,bool,Settings *) defined in TestOther
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function duplicateExpression5() in line 3982
      6 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char *,bool,bool,bool,Settings *) defined in TestOther
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function duplicateExpression6() in line 3989
      6 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char *,bool,bool,bool,Settings *) defined in TestOther
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function duplicateExpressionTernary() in line 3996
      16 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char *,bool,bool,bool,Settings *) defined in TestOther
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function emptyBrackets() in line 254
      5 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char *,bool,bool,bool,Settings *) defined in TestOther
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function incompleteArrayFill() in line 4798
      49 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char *,bool,bool,bool,Settings *) defined in TestOther
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
      uses macro definition TODO_ASSERT_EQUALS defined in testsuite.h
   function integerOverflow() in line 5715
      11 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char *,bool,bool,bool,Settings *) defined in TestOther
      uses macro definition TODO_ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function invalidPointerCast() in line 1220
      69 lines of code
      0 parameters
      1 conditional paths
      uses function checkInvalidPointerCast(const char,bool,bool) defined in TestOther
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function memsetInvalid2ndParam() in line 3291
      59 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char *,bool,bool,bool,Settings *) defined in TestOther
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function memsetZeroBytes() in line 3264
      26 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char *,bool,bool,bool,Settings *) defined in TestOther
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function nanInArithmeticExpression() in line 555
      41 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char *,bool,bool,bool,Settings *) defined in TestOther
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function oldStylePointerCast() in line 1076
      123 lines of code
      0 parameters
      1 conditional paths
      uses function checkOldStylePointerCast(const char) defined in TestOther
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function passedByValue() in line 1291
      57 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char *,bool,bool,bool,Settings *) defined in TestOther
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function raceAfterInterlockedDecrement() in line 5791
      270 lines of code
      0 parameters
      1 conditional paths
      uses function checkInterlockedDecrement(const char) defined in TestOther
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function redundantMemWrite() in line 5258
      108 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char *,bool,bool,bool,Settings *) defined in TestOther
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function redundantPointerOp() in line 5727
      56 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char *,bool,bool,bool,Settings *) defined in TestOther
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function redundantVarAssignment() in line 4848
      364 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char *,bool,bool,bool,Settings *) defined in TestOther
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
      uses variable code defined in extracttests.py
      uses macro definition TODO_ASSERT_EQUALS defined in testsuite.h
   function redundantVarAssignment_7133() in line 5213
      44 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char *,bool,bool,bool,Settings *) defined in TestOther
      uses macro definition TODO_ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function run() in line 34
      134 lines of code
      0 parameters
      1 conditional paths
      uses macro definition TEST_CASE defined in testsuite.h
      uses function emptyBrackets() defined in TestOther
      uses function zeroDiv1() defined in TestOther
      uses function zeroDiv2() defined in TestOther
      uses function zeroDiv4() defined in TestOther
      uses function zeroDiv5() defined in TestOther
      uses function zeroDiv6() defined in TestOther
      uses function zeroDiv7() defined in TestOther
      uses function zeroDiv8() defined in TestOther
      uses function zeroDiv9() defined in TestOther
      uses function zeroDiv10() defined in TestOther
      uses function zeroDiv11() defined in TestOther
      uses function zeroDivCond() defined in TestOther
      uses function nanInArithmeticExpression() defined in TestOther
      uses function varScope1() defined in TestOther
      uses function varScope2() defined in TestOther
      uses function varScope3() defined in TestOther
      uses function varScope4() defined in TestOther
      uses function varScope5() defined in TestOther
      uses function varScope6() defined in TestOther
      uses function varScope7() defined in TestOther
      uses function varScope8() defined in TestOther
      uses function varScope9() defined in TestOther
      uses function varScope10() defined in TestOther
      uses function varScope11() defined in TestOther
      uses function varScope12() defined in TestOther
      uses function varScope13() defined in TestOther
      uses function varScope14() defined in TestOther
      uses function varScope15() defined in TestOther
      uses function varScope16() defined in TestOther
      uses function varScope17() defined in TestOther
      uses function varScope18() defined in TestOther
      uses function varScope20() defined in TestOther
      uses function varScope21() defined in TestOther
      uses function varScope22() defined in TestOther
      uses function varScope23() defined in TestOther
      uses function oldStylePointerCast() defined in TestOther
      uses function invalidPointerCast() defined in TestOther
      uses function passedByValue() defined in TestOther
      uses function switchRedundantAssignmentTest() defined in TestOther
      uses function switchRedundantOperationTest() defined in TestOther
      uses function switchRedundantBitwiseOperationTest() defined in TestOther
      uses function switchFallThroughCase() defined in TestOther
      uses function unreachableCode() defined in TestOther
      uses function suspiciousCase() defined in TestOther
      uses function suspiciousEqualityComparison() defined in TestOther
      uses function selfAssignment() defined in TestOther
      uses function trac1132() defined in TestOther
      uses function testMisusedScopeObjectDoesNotPickFunction1() defined in TestOther
      uses function testMisusedScopeObjectDoesNotPickFunction2() defined in TestOther
      uses function testMisusedScopeObjectPicksClass() defined in TestOther
      uses function testMisusedScopeObjectPicksStruct() defined in TestOther
      uses function testMisusedScopeObjectDoesNotPickIf() defined in TestOther
      uses function testMisusedScopeObjectDoesNotPickConstructorDeclaration() defined in TestOther
      uses function testMisusedScopeObjectDoesNotPickFunctor() defined in TestOther
      uses function testMisusedScopeObjectDoesNotPickLocalClassConstructors() defined in TestOther
      uses function testMisusedScopeObjectDoesNotPickUsedObject() defined in TestOther
      uses function testMisusedScopeObjectDoesNotPickPureC() defined in TestOther
      uses function testMisusedScopeObjectDoesNotPickNestedClass() defined in TestOther
      uses function testMisusedScopeObjectInConstructor() defined in TestOther
      uses function testMisusedScopeObjectNoCodeAfter() defined in TestOther
      uses function trac2071() defined in TestOther
      uses function trac2084() defined in TestOther
      uses function trac3693() defined in TestOther
      uses function memsetZeroBytes() defined in TestOther
      uses function memsetInvalid2ndParam() defined in TestOther
      uses function clarifyCalculation() defined in TestOther
      uses function clarifyStatement() defined in TestOther
      uses function duplicateBranch() defined in TestOther
      uses function duplicateBranch1() defined in TestOther
      uses function duplicateBranch2() defined in TestOther
      uses function duplicateExpression1() defined in TestOther
      uses function duplicateExpression2() defined in TestOther
      uses function duplicateExpression3() defined in TestOther
      uses function duplicateExpression4() defined in TestOther
      uses function duplicateExpression5() defined in TestOther
      uses function duplicateExpression6() defined in TestOther
      uses function duplicateExpressionTernary() defined in TestOther
      uses function checkSignOfUnsignedVariable() defined in TestOther
      uses function checkSignOfPointer() defined in TestOther
      uses function checkForSuspiciousSemicolon1() defined in TestOther
      uses function checkForSuspiciousSemicolon2() defined in TestOther
      uses function checkInvalidFree() defined in TestOther
      uses function checkRedundantCopy() defined in TestOther
      uses function checkNegativeShift() defined in TestOther
      uses function incompleteArrayFill() defined in TestOther
      uses function redundantVarAssignment() defined in TestOther
      uses function redundantVarAssignment_7133() defined in TestOther
      uses function redundantMemWrite() defined in TestOther
      uses function varFuncNullUB() defined in TestOther
      uses function checkPipeParameterSize() defined in TestOther
      uses function checkCastIntToCharAndBack() defined in TestOther
      uses function checkCommaSeparatedReturn() defined in TestOther
      uses function checkComparisonFunctionIsAlwaysTrueOrFalse() defined in TestOther
      uses function integerOverflow() defined in TestOther
      uses function redundantPointerOp() defined in TestOther
      uses function test_isSameExpression() defined in TestOther
      uses function raceAfterInterlockedDecrement() defined in TestOther
      uses function testUnusedLabel() defined in TestOther
      uses function testEvaluationOrder() defined in TestOther
      uses function testEvaluationOrderSelfAssignment() defined in TestOther
      uses function testEvaluationOrderMacro() defined in TestOther
      uses function testEvaluationOrderSequencePointsFunctionCall() defined in TestOther
      uses function testEvaluationOrderSequencePointsComma() defined in TestOther
      uses function testEvaluationOrderSizeof() defined in TestOther
   function selfAssignment() in line 2879
      138 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char *,bool,bool,bool,Settings *) defined in TestOther
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
      uses macro definition TODO_ASSERT_EQUALS defined in testsuite.h
   function suspiciousCase() in line 2744
      31 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char *,bool,bool,bool,Settings *) defined in TestOther
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function suspiciousEqualityComparison() in line 2776
      102 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char *,bool,bool,bool,Settings *) defined in TestOther
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function switchFallThroughCase() in line 2133
      300 lines of code
      0 parameters
      1 conditional paths
      uses function check_preprocess_suppress(const char,const char *) defined in TestOther
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
      uses macro definition TODO_ASSERT_EQUALS defined in testsuite.h
   function switchRedundantAssignmentTest() in line 1349
      268 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char *,bool,bool,bool,Settings *) defined in TestOther
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function switchRedundantBitwiseOperationTest() in line 1958
      174 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char *,bool,bool,bool,Settings *) defined in TestOther
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function switchRedundantOperationTest() in line 1618
      339 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char *,bool,bool,bool,Settings *) defined in TestOther
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function test_isSameExpression() in line 5784
      6 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char *,bool,bool,bool,Settings *) defined in TestOther
      uses macro definition TODO_ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function testEvaluationOrder() in line 6107
      18 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char *,bool,bool,bool,Settings *) defined in TestOther
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function testEvaluationOrderMacro() in line 6134
      7 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char *,bool,bool,bool,Settings *) defined in TestOther
      uses variable macroChar defined in Preprocessor
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function testEvaluationOrderSelfAssignment() in line 6126
      7 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char *,bool,bool,bool,Settings *) defined in TestOther
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function testEvaluationOrderSequencePointsComma() in line 6156
      19 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char *,bool,bool,bool,Settings *) defined in TestOther
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function testEvaluationOrderSequencePointsFunctionCall() in line 6142
      13 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char *,bool,bool,bool,Settings *) defined in TestOther
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
      uses macro definition TODO_ASSERT_EQUALS defined in testsuite.h
   function testEvaluationOrderSizeof() in line 6176
      6 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char *,bool,bool,bool,Settings *) defined in TestOther
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
      uses macro definition REGISTER_TEST defined in testsuite.h
   function testMisusedScopeObjectDoesNotPickConstructorDeclaration() in line 3111
      10 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char *,bool,bool,bool,Settings *) defined in TestOther
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function testMisusedScopeObjectDoesNotPickFunction1() in line 3051
      9 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char *,bool,bool,bool,Settings *) defined in TestOther
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function testMisusedScopeObjectDoesNotPickFunction2() in line 3061
      17 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char *,bool,bool,bool,Settings *) defined in TestOther
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function testMisusedScopeObjectDoesNotPickFunctor() in line 3122
      19 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char *,bool,bool,bool,Settings *) defined in TestOther
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function testMisusedScopeObjectDoesNotPickIf() in line 3101
      9 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char *,bool,bool,bool,Settings *) defined in TestOther
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function testMisusedScopeObjectDoesNotPickLocalClassConstructors() in line 3142
      13 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char *,bool,bool,bool,Settings *) defined in TestOther
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function testMisusedScopeObjectDoesNotPickNestedClass() in line 3198
      20 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses function check(const char,const char *,bool,bool,bool,Settings *) defined in TestOther
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function testMisusedScopeObjectDoesNotPickPureC() in line 3169
      28 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses function check(const char,const char *,bool,bool,bool,Settings *) defined in TestOther
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function testMisusedScopeObjectDoesNotPickUsedObject() in line 3156
      12 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char *,bool,bool,bool,Settings *) defined in TestOther
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function testMisusedScopeObjectInConstructor() in line 3219
      12 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses function check(const char,const char *,bool,bool,bool,Settings *) defined in TestOther
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function testMisusedScopeObjectNoCodeAfter() in line 3232
      7 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char *,bool,bool,bool,Settings *) defined in TestOther
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function testMisusedScopeObjectPicksClass() in line 3079
      10 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char *,bool,bool,bool,Settings *) defined in TestOther
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function testMisusedScopeObjectPicksStruct() in line 3090
      10 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char *,bool,bool,bool,Settings *) defined in TestOther
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function testUnusedLabel() in line 6062
      44 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char *,bool,bool,bool,Settings *) defined in TestOther
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function trac1132() in line 3018
      22 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char *,bool,bool,bool,Settings *) defined in TestOther
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function trac2071() in line 3252
      11 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char *,bool,bool,bool,Settings *) defined in TestOther
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function trac2084() in line 3240
      11 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char *,bool,bool,bool,Settings *) defined in TestOther
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function trac3693() in line 3041
      9 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char *,bool,bool,bool,Settings *) defined in TestOther
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function unreachableCode() in line 2434
      308 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char *,bool,bool,bool,Settings *) defined in TestOther
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
      uses variable library defined in Settings
      uses function setnoreturn(const std::string &,bool) defined in Library
   function varFuncNullUB() in line 5367
      9 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char *,bool,bool,bool,Settings *) defined in TestOther
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function varScope1() in line 597
      29 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char *,bool,bool,bool,Settings *) defined in TestOther
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function varScope10() in line 766
      10 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char *,bool,bool,bool,Settings *) defined in TestOther
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function varScope11() in line 777
      21 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char *,bool,bool,bool,Settings *) defined in TestOther
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function varScope12() in line 799
      35 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char *,bool,bool,bool,Settings *) defined in TestOther
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function varScope13() in line 835
      10 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char *,bool,bool,bool,Settings *) defined in TestOther
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function varScope14() in line 846
      10 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char *,bool,bool,bool,Settings *) defined in TestOther
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function varScope15() in line 857
      11 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char *,bool,bool,bool,Settings *) defined in TestOther
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function varScope16() in line 869
      35 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char *,bool,bool,bool,Settings *) defined in TestOther
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function varScope17() in line 905
      20 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char *,bool,bool,bool,Settings *) defined in TestOther
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function varScope18() in line 926
      70 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char *,bool,bool,bool,Settings *) defined in TestOther
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function varScope2() in line 627
      9 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char *,bool,bool,bool,Settings *) defined in TestOther
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function varScope20() in line 997
      9 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char *,bool,bool,bool,Settings *) defined in TestOther
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function varScope21() in line 1007
      8 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char *,bool,bool,bool,Settings *) defined in TestOther
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function varScope22() in line 1016
      25 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char *,bool,bool,bool,Settings *) defined in TestOther
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function varScope23() in line 1042
      9 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char *,bool,bool,bool,Settings *) defined in TestOther
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function varScope3() in line 637
      13 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char *,bool,bool,bool,Settings *) defined in TestOther
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function varScope4() in line 651
      7 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char *,bool,bool,bool,Settings *) defined in TestOther
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function varScope5() in line 659
      28 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char *,bool,bool,bool,Settings *) defined in TestOther
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function varScope6() in line 688
      39 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char *,bool,bool,bool,Settings *) defined in TestOther
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function varScope7() in line 728
      11 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char *,bool,bool,bool,Settings *) defined in TestOther
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function varScope8() in line 740
      10 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char *,bool,bool,bool,Settings *) defined in TestOther
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function varScope9() in line 751
      14 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char *,bool,bool,bool,Settings *) defined in TestOther
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function zeroDiv1() in line 261
      21 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char *,bool,bool,bool,Settings *) defined in TestOther
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function zeroDiv10() in line 416
      10 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char *,bool,bool,bool,Settings *) defined in TestOther
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function zeroDiv11() in line 427
      13 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char *,bool,bool,bool,Settings *) defined in TestOther
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function zeroDiv2() in line 283
      12 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char *,bool,bool,bool,Settings *) defined in TestOther
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function zeroDiv4() in line 296
      54 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char *,bool,bool,bool,Settings *) defined in TestOther
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function zeroDiv5() in line 351
      12 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char *,bool,bool,bool,Settings *) defined in TestOther
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function zeroDiv6() in line 364
      12 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char *,bool,bool,bool,Settings *) defined in TestOther
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function zeroDiv7() in line 377
      14 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char *,bool,bool,bool,Settings *) defined in TestOther
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function zeroDiv8() in line 392
      9 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char *,bool,bool,bool,Settings *) defined in TestOther
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function zeroDiv9() in line 402
      13 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char *,bool,bool,bool,Settings *) defined in TestOther
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function zeroDivCond() in line 441
      113 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char *,bool,bool,bool,Settings *) defined in TestOther
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function TestOther() in line 30
      protection public
      2 lines of code
      0 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/test/testpath.cpp
module TestPath
   inherits from TestFixture
   function accept_file() in line 95
      15 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT defined in testsuite.h
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function get_path_from_filename() in line 154
      6 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses macro definition REGISTER_TEST defined in testsuite.h
   function getRelative() in line 111
      13 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function is_c() in line 125
      14 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT defined in testsuite.h
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function is_cpp() in line 140
      13 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT defined in testsuite.h
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function run() in line 30
      8 lines of code
      0 parameters
      1 conditional paths
      uses macro definition TEST_CASE defined in testsuite.h
      uses function simplify_path() defined in TestPath
      uses function accept_file() defined in TestPath
      uses function getRelative() defined in TestPath
      uses function is_c() defined in TestPath
      uses function is_cpp() defined in TestPath
      uses function get_path_from_filename() defined in TestPath
   function simplify_path() in line 39
      55 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function TestPath() in line 25
      protection public
      2 lines of code
      0 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/test/testpathmatch.cpp
module TestPathMatch
   inherits from TestFixture
   function emptymaskemptyfile() in line 72
      3 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT defined in testsuite.h
      uses variable emptyMatcher defined in TestPathMatch
      uses function Match(const std::string &) defined in PathMatch
   function emptymaskpath1() in line 76
      3 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT defined in testsuite.h
      uses variable emptyMatcher defined in TestPathMatch
      uses function Match(const std::string &) defined in PathMatch
   function emptymaskpath2() in line 80
      3 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT defined in testsuite.h
      uses variable emptyMatcher defined in TestPathMatch
      uses function Match(const std::string &) defined in PathMatch
   function emptymaskpath3() in line 84
      3 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT defined in testsuite.h
      uses variable emptyMatcher defined in TestPathMatch
      uses function Match(const std::string &) defined in PathMatch
   function filemask1() in line 168
      3 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT defined in testsuite.h
      uses variable fooCppMatcher defined in TestPathMatch
      uses function Match(const std::string &) defined in PathMatch
   function filemask2() in line 178
      3 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT defined in testsuite.h
      uses variable fooCppMatcher defined in TestPathMatch
      uses function Match(const std::string &) defined in PathMatch
   function filemask3() in line 182
      3 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT defined in testsuite.h
      uses variable fooCppMatcher defined in TestPathMatch
      uses function Match(const std::string &) defined in PathMatch
   function filemaskdifferentcase() in line 172
      5 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT defined in testsuite.h
      uses function Match(const std::string &) defined in PathMatch
   function filemaskpath1() in line 187
      3 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT defined in testsuite.h
      uses variable srcFooCppMatcher defined in TestPathMatch
      uses function Match(const std::string &) defined in PathMatch
   function filemaskpath2() in line 191
      3 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT defined in testsuite.h
      uses variable srcFooCppMatcher defined in TestPathMatch
      uses function Match(const std::string &) defined in PathMatch
   function filemaskpath3() in line 195
      3 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT defined in testsuite.h
      uses variable srcFooCppMatcher defined in TestPathMatch
      uses function Match(const std::string &) defined in PathMatch
   function filemaskpath4() in line 199
      3 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT defined in testsuite.h
      uses variable srcFooCppMatcher defined in TestPathMatch
      uses function Match(const std::string &) defined in PathMatch
      uses macro definition REGISTER_TEST defined in testsuite.h
   function onemaskdifferentdir1() in line 107
      3 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT defined in testsuite.h
      uses variable srcMatcher defined in TestPathMatch
      uses function Match(const std::string &) defined in PathMatch
   function onemaskdifferentdir2() in line 111
      3 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT defined in testsuite.h
      uses variable srcMatcher defined in TestPathMatch
      uses function Match(const std::string &) defined in PathMatch
   function onemaskdifferentdir3() in line 115
      3 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT defined in testsuite.h
      uses variable srcMatcher defined in TestPathMatch
      uses function Match(const std::string &) defined in PathMatch
   function onemaskdifferentdir4() in line 119
      3 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT defined in testsuite.h
      uses variable srcMatcher defined in TestPathMatch
      uses function Match(const std::string &) defined in PathMatch
   function onemaskemptypath() in line 89
      3 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT defined in testsuite.h
      uses variable srcMatcher defined in TestPathMatch
      uses function Match(const std::string &) defined in PathMatch
   function onemasklongerpath1() in line 123
      3 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT defined in testsuite.h
      uses variable srcMatcher defined in TestPathMatch
      uses function Match(const std::string &) defined in PathMatch
   function onemasklongerpath2() in line 127
      3 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT defined in testsuite.h
      uses variable srcMatcher defined in TestPathMatch
      uses function Match(const std::string &) defined in PathMatch
   function onemasklongerpath3() in line 131
      3 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT defined in testsuite.h
      uses variable srcMatcher defined in TestPathMatch
      uses function Match(const std::string &) defined in PathMatch
   function onemasksamepath() in line 93
      3 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT defined in testsuite.h
      uses variable srcMatcher defined in TestPathMatch
      uses function Match(const std::string &) defined in PathMatch
   function onemasksamepathdifferentcase() in line 97
      5 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT defined in testsuite.h
      uses function Match(const std::string &) defined in PathMatch
   function onemasksamepathwithfile() in line 103
      3 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT defined in testsuite.h
      uses variable srcMatcher defined in TestPathMatch
      uses function Match(const std::string &) defined in PathMatch
   function run() in line 41
      29 lines of code
      0 parameters
      1 conditional paths
      uses macro definition TEST_CASE defined in testsuite.h
      uses function emptymaskemptyfile() defined in TestPathMatch
      uses function emptymaskpath1() defined in TestPathMatch
      uses function emptymaskpath2() defined in TestPathMatch
      uses function emptymaskpath3() defined in TestPathMatch
      uses function onemaskemptypath() defined in TestPathMatch
      uses function onemasksamepath() defined in TestPathMatch
      uses function onemasksamepathdifferentcase() defined in TestPathMatch
      uses function onemasksamepathwithfile() defined in TestPathMatch
      uses function onemaskdifferentdir1() defined in TestPathMatch
      uses function onemaskdifferentdir2() defined in TestPathMatch
      uses function onemaskdifferentdir3() defined in TestPathMatch
      uses function onemaskdifferentdir4() defined in TestPathMatch
      uses function onemasklongerpath1() defined in TestPathMatch
      uses function onemasklongerpath2() defined in TestPathMatch
      uses function onemasklongerpath3() defined in TestPathMatch
      uses function twomasklongerpath1() defined in TestPathMatch
      uses function twomasklongerpath2() defined in TestPathMatch
      uses function twomasklongerpath3() defined in TestPathMatch
      uses function twomasklongerpath4() defined in TestPathMatch
      uses function filemask1() defined in TestPathMatch
      uses function filemaskdifferentcase() defined in TestPathMatch
      uses function filemask2() defined in TestPathMatch
      uses function filemask3() defined in TestPathMatch
      uses function filemaskpath1() defined in TestPathMatch
      uses function filemaskpath2() defined in TestPathMatch
      uses function filemaskpath3() defined in TestPathMatch
      uses function filemaskpath4() defined in TestPathMatch
   function twomasklongerpath1() in line 135
      7 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT defined in testsuite.h
      uses function Match(const std::string &) defined in PathMatch
   function twomasklongerpath2() in line 143
      7 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT defined in testsuite.h
      uses function Match(const std::string &) defined in PathMatch
   function twomasklongerpath3() in line 151
      7 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT defined in testsuite.h
      uses function Match(const std::string &) defined in PathMatch
   function twomasklongerpath4() in line 159
      7 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT defined in testsuite.h
      uses function Match(const std::string &) defined in PathMatch
   function TestPathMatch() in line 27
      protection public
      7 lines of code
      0 parameters
      1 conditional paths
   variable emptyMatcher in line 36
   variable fooCppMatcher in line 38
   variable srcFooCppMatcher in line 39
   variable srcMatcher in line 37
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/test/testpostfixoperator.cpp
module TestPostfixOperator
   inherits from TestFixture
   function check(const char) in line 33
      14 lines of code
      1 parameters
      1 conditional paths
      uses variable errout defined in redirect.h
      uses variable settings defined in TestPostfixOperator
      uses variable code defined in extracttests.py
      uses function tokenize(std::istream &,const char,const std::string &,bool) defined in Tokenizer
      uses function simplifyTokenList2() defined in Tokenizer
      uses function postfixOperator() defined in CheckPostfixOperator
   function pointer() in line 312
      6 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char) defined in TestPostfixOperator
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function run() in line 48
      14 lines of code
      0 parameters
      1 conditional paths
      uses variable settings defined in TestPostfixOperator
      uses function addEnabled(const std::string &) defined in Settings
      uses macro definition TEST_CASE defined in testsuite.h
      uses function testsimple() defined in TestPostfixOperator
      uses function testfor() defined in TestPostfixOperator
      uses function testvolatile() defined in TestPostfixOperator
      uses function testiterator() defined in TestPostfixOperator
      uses function test2168() defined in TestPostfixOperator
      uses function pointer() defined in TestPostfixOperator
      uses function testHangWithInvalidCode() defined in TestPostfixOperator
      uses function testtemplate() defined in TestPostfixOperator
      uses function testmember() defined in TestPostfixOperator
      uses function testcomma() defined in TestPostfixOperator
   function test2168() in line 306
      5 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char) defined in TestPostfixOperator
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function testcomma() in line 343
      16 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char) defined in TestPostfixOperator
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
      uses macro definition REGISTER_TEST defined in testsuite.h
   function testfor() in line 182
      52 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char) defined in TestPostfixOperator
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function testHangWithInvalidCode() in line 63
      4 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char) defined in TestPostfixOperator
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function testiterator() in line 249
      56 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char) defined in TestPostfixOperator
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function testmember() in line 327
      15 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char) defined in TestPostfixOperator
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function testsimple() in line 68
      113 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char) defined in TestPostfixOperator
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function testtemplate() in line 319
      7 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char) defined in TestPostfixOperator
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function testvolatile() in line 235
      13 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char) defined in TestPostfixOperator
      uses macro definition TODO_ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function TestPostfixOperator() in line 26
      protection public
      2 lines of code
      0 parameters
      1 conditional paths
   variable settings in line 30
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/test/testpreprocessor.cpp
module TestPreprocessor
   inherits from TestFixture
   function Bug2190219() in line 427
      57 lines of code
      0 parameters
      1 conditional paths
      uses variable expected defined in extracttests.py
      uses function preprocess(std::istream &,std::map< std::string, std::string > &,const std::string &,const std::list< std::string > &) defined in Preprocessor
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function comments1() in line 975
      46 lines of code
      0 parameters
      1 conditional paths
      uses function preprocess(std::istream &,std::map< std::string, std::string > &,const std::string &,const std::list< std::string > &) defined in Preprocessor
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function conditionalDefine() in line 2445
      18 lines of code
      0 parameters
      1 conditional paths
      uses function preprocess(std::istream &,std::map< std::string, std::string > &,const std::string &,const std::list< std::string > &) defined in Preprocessor
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function def_handleIncludes() in line 3041
      138 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable preprocessor0 defined in TestPreprocessor
      uses function handleIncludes(const std::string &,const std::string &,const std::list< std::string > &,std::map< std::string, std::string > &,std::set< std::string > &,std::list< std::string >) defined in Preprocessor
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function def_handleIncludes_ifelse1() in line 3259
      55 lines of code
      0 parameters
      2 conditional paths
      uses variable code defined in extracttests.py
      uses variable preprocessor0 defined in TestPreprocessor
      uses function handleIncludes(const std::string &,const std::string &,const std::list< std::string > &,std::map< std::string, std::string > &,std::set< std::string > &,std::list< std::string >) defined in Preprocessor
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function def_handleIncludes_ifelse2() in line 3315
      21 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable preprocessor0 defined in TestPreprocessor
      uses function handleIncludes(const std::string &,const std::string &,const std::list< std::string > &,std::map< std::string, std::string > &,std::set< std::string > &,std::list< std::string >) defined in Preprocessor
   function def_handleIncludes_ifelse3() in line 3337
      19 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable userUndefs defined in Settings
      uses function handleIncludes(const std::string &,const std::string &,const std::list< std::string > &,std::map< std::string, std::string > &,std::set< std::string > &,std::list< std::string >) defined in Preprocessor
   function def_missingInclude() in line 3180
      78 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable errout defined in redirect.h
      uses function handleIncludes(const std::string &,const std::string &,const std::list< std::string > &,std::map< std::string, std::string > &,std::set< std::string > &,std::list< std::string >) defined in Preprocessor
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable checkConfiguration defined in Settings
      uses variable nomsg defined in Settings
      uses function addSuppression(const std::string &,const std::string &,unsigned int) defined in Suppressions
   function def_valueWithParentheses() in line 3357
      29 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable s defined in extracttests.py
      uses variable preprocessor0 defined in TestPreprocessor
      uses function read(std::istream &,const std::string &) defined in Preprocessor
      uses function handleIncludes(const std::string &,const std::string &,const std::list< std::string > &,std::map< std::string, std::string > &,std::set< std::string > &,std::list< std::string >) defined in Preprocessor
      uses macro definition ASSERT defined in testsuite.h
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function defdef() in line 2066
      9 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function expandMacros(const char,ErrorLogger *) defined in TestPreprocessor::OurPreprocessor
   function define_if1() in line 2567
      16 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable preprocessor0 defined in TestPreprocessor
      uses function getcode(const std::string &,const std::string &,const std::string &) defined in Preprocessor
   function define_if2() in line 2584
      8 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable preprocessor0 defined in TestPreprocessor
      uses function getcode(const std::string &,const std::string &,const std::string &) defined in Preprocessor
   function define_if3() in line 2593
      7 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable preprocessor0 defined in TestPreprocessor
      uses function getcode(const std::string &,const std::string &,const std::string &) defined in Preprocessor
   function define_if4() in line 2601
      7 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable preprocessor0 defined in TestPreprocessor
      uses function getcode(const std::string &,const std::string &,const std::string &) defined in Preprocessor
   function define_if5() in line 2609
      26 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable preprocessor0 defined in TestPreprocessor
      uses function getcode(const std::string &,const std::string &,const std::string &) defined in Preprocessor
   function define_if6() in line 2636
      19 lines of code
      0 parameters
      1 conditional paths
      uses variable preprocessor0 defined in TestPreprocessor
      uses function getcode(const std::string &,const std::string &,const std::string &) defined in Preprocessor
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function define_ifdef() in line 2656
      79 lines of code
      0 parameters
      1 conditional paths
      uses function preprocess(std::istream &,std::map< std::string, std::string > &,const std::string &,const std::list< std::string > &) defined in Preprocessor
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function define_ifndef1() in line 2736
      14 lines of code
      0 parameters
      1 conditional paths
      uses function preprocess(std::istream &,std::map< std::string, std::string > &,const std::string &,const std::list< std::string > &) defined in Preprocessor
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function define_ifndef2() in line 2751
      13 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable preprocessor0 defined in TestPreprocessor
      uses function getcode(const std::string &,const std::string &,const std::string &) defined in Preprocessor
   function define_part_of_func() in line 2429
      15 lines of code
      0 parameters
      1 conditional paths
      uses function preprocess(std::istream &,std::map< std::string, std::string > &,const std::string &,const std::list< std::string > &) defined in Preprocessor
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function double_include() in line 3689
      9 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable preprocessor0 defined in TestPreprocessor
      uses function handleIncludes(const std::string &,const std::string &,const std::list< std::string > &,std::map< std::string, std::string > &,std::set< std::string > &,std::list< std::string >) defined in Preprocessor
   function dup_defines() in line 2833
      31 lines of code
      0 parameters
      3 conditional paths
      uses function preprocess(std::istream &,std::map< std::string, std::string > &,const std::string &,const std::list< std::string > &) defined in Preprocessor
      uses macro definition TODO_ASSERT_EQUALS defined in testsuite.h
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function elif() in line 1054
      39 lines of code
      0 parameters
      1 conditional paths
      uses function preprocess(std::istream &,std::map< std::string, std::string > &,const std::string &,const std::list< std::string > &) defined in Preprocessor
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function endfile() in line 2819
      13 lines of code
      0 parameters
      1 conditional paths
      uses function preprocess(std::istream &,std::map< std::string, std::string > &,const std::string &,const std::list< std::string > &) defined in Preprocessor
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function endifsemicolon() in line 2295
      16 lines of code
      0 parameters
      1 conditional paths
      uses function preprocess(std::istream &,std::map< std::string, std::string > &,const std::string &,const std::list< std::string > &) defined in Preprocessor
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable expected defined in extracttests.py
   function error1() in line 767
      17 lines of code
      0 parameters
      1 conditional paths
      uses function preprocess(std::istream &,std::map< std::string, std::string > &,const std::string &,const std::list< std::string > &) defined in Preprocessor
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function error2() in line 786
      7 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function preprocessorRead(const char *) defined in TestPreprocessor
   function error3() in line 795
      9 lines of code
      0 parameters
      1 conditional paths
      uses variable errout defined in redirect.h
      uses variable userDefines defined in Settings
      uses variable code defined in extracttests.py
      uses function getcode(const std::string &,const std::string &,const std::string &) defined in Preprocessor
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function error4() in line 806
      23 lines of code
      0 parameters
      1 conditional paths
      uses variable errout defined in redirect.h
      uses variable userDefines defined in Settings
      uses variable code defined in extracttests.py
      uses function getcode(const std::string &,const std::string &,const std::string &) defined in Preprocessor
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function error5() in line 830
      10 lines of code
      0 parameters
      1 conditional paths
      uses variable errout defined in redirect.h
      uses variable userDefines defined in Settings
      uses variable force defined in Settings
      uses variable code defined in extracttests.py
      uses function getcode(const std::string &,const std::string &,const std::string &) defined in Preprocessor
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function garbage() in line 3716
      9 lines of code
      0 parameters
      1 conditional paths
      uses function preprocess(std::istream &,std::map< std::string, std::string > &,const std::string &,const std::list< std::string > &) defined in Preprocessor
   function handle_error() in line 2312
      25 lines of code
      0 parameters
      1 conditional paths
      uses variable expected defined in extracttests.py
      uses function preprocess(std::istream &,std::map< std::string, std::string > &,const std::string &,const std::list< std::string > &) defined in Preprocessor
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function handleUndef() in line 3605
      25 lines of code
      0 parameters
      1 conditional paths
      uses variable userUndefs defined in Settings
      uses function handleUndef(std::list< std::string > &) defined in Preprocessor
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function if0() in line 1024
      14 lines of code
      0 parameters
      1 conditional paths
      uses function preprocess(std::istream &,std::map< std::string, std::string > &,const std::string &,const std::list< std::string > &) defined in Preprocessor
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function if0_elif() in line 882
      9 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function preprocessorRead(const char *) defined in TestPreprocessor
   function if0_else() in line 863
      18 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function preprocessorRead(const char *) defined in TestPreprocessor
      uses macro definition TODO_ASSERT_EQUALS defined in testsuite.h
   function if0_exclude() in line 841
      13 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function preprocessorRead(const char *) defined in TestPreprocessor
   function if0_include_1() in line 892
      7 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function preprocessorRead(const char *) defined in TestPreprocessor
   function if0_include_2() in line 900
      10 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function preprocessorRead(const char *) defined in TestPreprocessor
   function if0_whitespace() in line 855
      7 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function preprocessorRead(const char *) defined in TestPreprocessor
   function if1() in line 1039
      13 lines of code
      0 parameters
      1 conditional paths
      uses function preprocess(std::istream &,std::map< std::string, std::string > &,const std::string &,const std::list< std::string > &) defined in Preprocessor
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function if_cond1() in line 1135
      17 lines of code
      0 parameters
      1 conditional paths
      uses function preprocess(std::istream &,std::map< std::string, std::string > &,const std::string &,const std::list< std::string > &) defined in Preprocessor
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses macro definition TODO_ASSERT_EQUALS defined in testsuite.h
   function if_cond10() in line 1435
      10 lines of code
      0 parameters
      1 conditional paths
      uses function preprocess(std::istream &,std::map< std::string, std::string > &,const std::string &,const std::list< std::string > &) defined in Preprocessor
   function if_cond11() in line 1446
      10 lines of code
      0 parameters
      1 conditional paths
      uses function preprocess(std::istream &,std::map< std::string, std::string > &,const std::string &,const std::list< std::string > &) defined in Preprocessor
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function if_cond12() in line 1457
      7 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable preprocessor0 defined in TestPreprocessor
      uses function getcode(const std::string &,const std::string &,const std::string &) defined in Preprocessor
   function if_cond13() in line 1465
      6 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable preprocessor0 defined in TestPreprocessor
      uses function getcode(const std::string &,const std::string &,const std::string &) defined in Preprocessor
   function if_cond14() in line 1472
      6 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable preprocessor0 defined in TestPreprocessor
      uses function getcode(const std::string &,const std::string &,const std::string &) defined in Preprocessor
   function if_cond15() in line 1479
      10 lines of code
      0 parameters
      1 conditional paths
      uses function preprocess(std::istream &,std::map< std::string, std::string > &,const std::string &,const std::list< std::string > &) defined in Preprocessor
   function if_cond2() in line 1153
      22 lines of code
      0 parameters
      1 conditional paths
      uses function preprocess(std::istream &,std::map< std::string, std::string > &,const std::string &,const std::list< std::string > &) defined in Preprocessor
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function if_cond2b() defined in TestPreprocessor
      uses function if_cond2c() defined in TestPreprocessor
      uses function if_cond2d() defined in TestPreprocessor
      uses function if_cond2e() defined in TestPreprocessor
   function if_cond2b() in line 1176
      20 lines of code
      0 parameters
      1 conditional paths
      uses function preprocess(std::istream &,std::map< std::string, std::string > &,const std::string &,const std::list< std::string > &) defined in Preprocessor
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function if_cond2c() in line 1197
      22 lines of code
      0 parameters
      1 conditional paths
      uses function preprocess(std::istream &,std::map< std::string, std::string > &,const std::string &,const std::list< std::string > &) defined in Preprocessor
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function if_cond2d() in line 1220
      28 lines of code
      0 parameters
      1 conditional paths
      uses function preprocess(std::istream &,std::map< std::string, std::string > &,const std::string &,const std::list< std::string > &) defined in Preprocessor
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function if_cond2e() in line 1249
      23 lines of code
      0 parameters
      1 conditional paths
      uses variable errout defined in redirect.h
      uses variable debug defined in Settings
      uses variable debugwarnings defined in Settings
      uses function preprocess(std::istream &,std::map< std::string, std::string > &,const std::string &,const std::list< std::string > &) defined in Preprocessor
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses macro definition TODO_ASSERT_EQUALS defined in testsuite.h
   function if_cond3() in line 1273
      18 lines of code
      0 parameters
      1 conditional paths
      uses function preprocess(std::istream &,std::map< std::string, std::string > &,const std::string &,const std::list< std::string > &) defined in Preprocessor
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function if_cond4() in line 1292
      82 lines of code
      0 parameters
      1 conditional paths
      uses function preprocess(std::istream &,std::map< std::string, std::string > &,const std::string &,const std::list< std::string > &) defined in Preprocessor
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses macro definition TODO_ASSERT_EQUALS defined in testsuite.h
   function if_cond5() in line 1375
      18 lines of code
      0 parameters
      1 conditional paths
      uses function preprocess(std::istream &,std::map< std::string, std::string > &,const std::string &,const std::list< std::string > &) defined in Preprocessor
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function if_cond6() in line 1394
      12 lines of code
      0 parameters
      1 conditional paths
      uses function preprocess(std::istream &,std::map< std::string, std::string > &,const std::string &,const std::list< std::string > &) defined in Preprocessor
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function if_cond8() in line 1407
      12 lines of code
      0 parameters
      1 conditional paths
      uses function preprocess(std::istream &,std::map< std::string, std::string > &,const std::string &,const std::list< std::string > &) defined in Preprocessor
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function if_cond9() in line 1421
      13 lines of code
      0 parameters
      1 conditional paths
      uses function preprocess(std::istream &,std::map< std::string, std::string > &,const std::string &,const std::list< std::string > &) defined in Preprocessor
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function if_defined() in line 1649
      11 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function replaceIfDefined(std::string) defined in TestPreprocessor::OurPreprocessor
   function if_macro_eq_macro() in line 1529
      14 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses function preprocess(std::istream &,std::map< std::string, std::string > &,const std::string &,const std::list< std::string > &) defined in Preprocessor
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function if_not_defined() in line 1661
      5 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function replaceIfDefined(std::string) defined in TestPreprocessor::OurPreprocessor
   function if_or_1() in line 1492
      28 lines of code
      0 parameters
      1 conditional paths
      uses variable errout defined in redirect.h
      uses variable output defined in redirect.h
      uses variable debug defined in Settings
      uses variable debugwarnings defined in Settings
      uses function addEnabled(const std::string &) defined in Settings
      uses function preprocess(std::istream &,std::map< std::string, std::string > &,const std::string &,const std::list< std::string > &) defined in Preprocessor
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses macro definition TODO_ASSERT_EQUALS defined in testsuite.h
   function if_or_2() in line 1521
      7 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable preprocessor0 defined in TestPreprocessor
      uses function getcode(const std::string &,const std::string &,const std::string &) defined in Preprocessor
   function if_sizeof() in line 3676
      12 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses function preprocess(std::istream &,std::map< std::string, std::string > &,const std::string &,const std::list< std::string > &) defined in Preprocessor
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function ifdef_ifdefined() in line 2549
      17 lines of code
      0 parameters
      1 conditional paths
      uses function preprocess(std::istream &,std::map< std::string, std::string > &,const std::string &,const std::list< std::string > &) defined in Preprocessor
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function ifdefwithfile() in line 949
      18 lines of code
      0 parameters
      1 conditional paths
      uses function preprocess(std::istream &,std::map< std::string, std::string > &,const std::string &,const std::list< std::string > &) defined in Preprocessor
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function ifndef_define() in line 2765
      13 lines of code
      0 parameters
      1 conditional paths
      uses function preprocess(std::istream &,std::map< std::string, std::string > &,const std::string &,const std::list< std::string > &) defined in Preprocessor
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function includeguard1() in line 911
      17 lines of code
      0 parameters
      1 conditional paths
      uses function preprocess(std::istream &,std::map< std::string, std::string > &,const std::string &,const std::list< std::string > &) defined in Preprocessor
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function includeguard2() in line 929
      18 lines of code
      0 parameters
      1 conditional paths
      uses function preprocess(std::istream &,std::map< std::string, std::string > &,const std::string &,const std::list< std::string > &) defined in Preprocessor
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function includes() in line 2517
      31 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses enumvalue NoHeader defined in Preprocessor
      uses function getHeaderFileName(std::string &) defined in TestPreprocessor::OurPreprocessor
      uses enumvalue UserHeader defined in Preprocessor
      uses enumvalue SystemHeader defined in Preprocessor
   function inline_suppression_for_missing_include() in line 2922
      20 lines of code
      0 parameters
      1 conditional paths
      uses variable missingIncludeFlag defined in Preprocessor
      uses variable inlineSuppressions defined in Settings
      uses function addEnabled(const std::string &) defined in Settings
      uses variable errout defined in redirect.h
      uses function preprocess(std::istream &,std::map< std::string, std::string > &,const std::string &,const std::list< std::string > &) defined in Preprocessor
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function invalid_define_1() in line 2900
      4 lines of code
      0 parameters
      1 conditional paths
      uses function preprocess(std::istream &,std::map< std::string, std::string > &,const std::string &,const std::list< std::string > &) defined in Preprocessor
   function invalid_define_2() in line 2905
      4 lines of code
      0 parameters
      1 conditional paths
      uses function preprocess(std::istream &,std::map< std::string, std::string > &,const std::string &,const std::list< std::string > &) defined in Preprocessor
   function invalid_ifs() in line 3699
      16 lines of code
      0 parameters
      1 conditional paths
      uses function preprocess(std::istream &,std::map< std::string, std::string > &,const std::string &,const std::list< std::string > &) defined in Preprocessor
   function invalidElIf() in line 3034
      6 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable preprocessor0 defined in TestPreprocessor
      uses function getcode(const std::string &,const std::string &,const std::string &) defined in Preprocessor
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function macro_incdec() in line 1954
      6 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function expandMacros(const char,ErrorLogger *) defined in TestPreprocessor::OurPreprocessor
   function macro_linenumbers() in line 1934
      13 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function expandMacros(const char,ErrorLogger *) defined in TestPreprocessor::OurPreprocessor
   function macro_mismatch() in line 1928
      5 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function expandMacros(const char,ErrorLogger *) defined in TestPreprocessor::OurPreprocessor
   function macro_nopar() in line 1948
      5 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function expandMacros(const char,ErrorLogger *) defined in TestPreprocessor::OurPreprocessor
   function macro_NULL() in line 2007
      6 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function expandMacros(const char,ErrorLogger *) defined in TestPreprocessor::OurPreprocessor
   function macro_parameters() in line 2480
      19 lines of code
      0 parameters
      1 conditional paths
      uses variable errout defined in redirect.h
      uses function preprocess(std::istream &,std::map< std::string, std::string > &,const std::string &,const std::list< std::string > &) defined in Preprocessor
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function macro_simple1() in line 1668
      13 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function expandMacros(const char,ErrorLogger *) defined in TestPreprocessor::OurPreprocessor
   function macro_simple10() in line 1737
      5 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function expandMacros(const char,ErrorLogger *) defined in TestPreprocessor::OurPreprocessor
   function macro_simple11() in line 1743
      5 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function expandMacros(const char,ErrorLogger *) defined in TestPreprocessor::OurPreprocessor
   function macro_simple12() in line 1749
      5 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function expandMacros(const char,ErrorLogger *) defined in TestPreprocessor::OurPreprocessor
   function macro_simple13() in line 1755
      5 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function expandMacros(const char,ErrorLogger *) defined in TestPreprocessor::OurPreprocessor
   function macro_simple14() in line 1761
      5 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function expandMacros(const char,ErrorLogger *) defined in TestPreprocessor::OurPreprocessor
   function macro_simple15() in line 1767
      5 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function expandMacros(const char,ErrorLogger *) defined in TestPreprocessor::OurPreprocessor
   function macro_simple16() in line 1773
      5 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function expandMacros(const char,ErrorLogger *) defined in TestPreprocessor::OurPreprocessor
   function macro_simple17() in line 1779
      7 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function expandMacros(const char,ErrorLogger *) defined in TestPreprocessor::OurPreprocessor
   function macro_simple18() in line 1787
      33 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function expandMacros(const char,ErrorLogger *) defined in TestPreprocessor::OurPreprocessor
   function macro_simple2() in line 1682
      5 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function expandMacros(const char,ErrorLogger *) defined in TestPreprocessor::OurPreprocessor
   function macro_simple3() in line 1688
      5 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function expandMacros(const char,ErrorLogger *) defined in TestPreprocessor::OurPreprocessor
   function macro_simple4() in line 1694
      5 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function expandMacros(const char,ErrorLogger *) defined in TestPreprocessor::OurPreprocessor
   function macro_simple5() in line 1700
      10 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function expandMacros(const char,ErrorLogger *) defined in TestPreprocessor::OurPreprocessor
   function macro_simple6() in line 1711
      5 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function expandMacros(const char,ErrorLogger *) defined in TestPreprocessor::OurPreprocessor
   function macro_simple7() in line 1717
      5 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function expandMacros(const char,ErrorLogger *) defined in TestPreprocessor::OurPreprocessor
   function macro_simple8() in line 1723
      6 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function expandMacros(const char,ErrorLogger *) defined in TestPreprocessor::OurPreprocessor
   function macro_simple9() in line 1730
      6 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function expandMacros(const char,ErrorLogger *) defined in TestPreprocessor::OurPreprocessor
   function macro_switchCase() in line 1961
      45 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function expandMacros(const char,ErrorLogger *) defined in TestPreprocessor::OurPreprocessor
   function macroChar() in line 3631
      7 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function expandMacros(const char,ErrorLogger *) defined in TestPreprocessor::OurPreprocessor
      uses variable macroChar defined in Preprocessor
   function macroInMacro1() in line 1821
      99 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function expandMacros(const char,ErrorLogger *) defined in TestPreprocessor::OurPreprocessor
   function macroInMacro2() in line 1921
      6 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function expandMacros(const char,ErrorLogger *) defined in TestPreprocessor::OurPreprocessor
   function match_cfg_def() in line 1096
      37 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable preprocessor0 defined in TestPreprocessor
      uses function match_cfg_def(std::map< std::string, std::string >,std::string) defined in Preprocessor
   function missing_doublequote() in line 2338
      73 lines of code
      0 parameters
      1 conditional paths
      uses variable errout defined in redirect.h
      uses function expandMacros(const char,ErrorLogger *) defined in TestPreprocessor::OurPreprocessor
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function missingInclude() in line 2910
      11 lines of code
      0 parameters
      1 conditional paths
      uses variable missingIncludeFlag defined in Preprocessor
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable preprocessor0 defined in TestPreprocessor
      uses function preprocess(std::istream &,std::map< std::string, std::string > &,const std::string &,const std::list< std::string > &) defined in Preprocessor
   function multi_character_character() in line 2169
      16 lines of code
      0 parameters
      1 conditional paths
      uses function preprocess(std::istream &,std::map< std::string, std::string > &,const std::string &,const std::list< std::string > &) defined in Preprocessor
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function multiline1() in line 1580
      6 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function preprocessorRead(const char *) defined in TestPreprocessor
   function multiline2() in line 1587
      6 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function preprocessorRead(const char *) defined in TestPreprocessor
   function multiline3() in line 1594
      6 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function preprocessorRead(const char *) defined in TestPreprocessor
   function multiline4() in line 1601
      19 lines of code
      0 parameters
      1 conditional paths
      uses variable errout defined in redirect.h
      uses function preprocess(std::istream &,std::map< std::string, std::string > &,const std::string &,const std::list< std::string > &) defined in Preprocessor
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function multiline5() in line 1621
      17 lines of code
      0 parameters
      1 conditional paths
      uses variable errout defined in redirect.h
      uses function preprocess(std::istream &,std::map< std::string, std::string > &,const std::string &,const std::list< std::string > &) defined in Preprocessor
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function multiline_comment() in line 2465
      14 lines of code
      0 parameters
      1 conditional paths
      uses function preprocess(std::istream &,std::map< std::string, std::string > &,const std::string &,const std::list< std::string > &) defined in Preprocessor
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function newline_in_macro() in line 2500
      16 lines of code
      0 parameters
      1 conditional paths
      uses function preprocess(std::istream &,std::map< std::string, std::string > &,const std::string &,const std::list< std::string > &) defined in Preprocessor
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function newlines() in line 968
      4 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function preprocessorRead(const char *) defined in TestPreprocessor
   function pragma() in line 2235
      14 lines of code
      0 parameters
      1 conditional paths
      uses function preprocess(std::istream &,std::map< std::string, std::string > &,const std::string &,const std::list< std::string > &) defined in Preprocessor
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function pragma_asm_1() in line 2250
      18 lines of code
      0 parameters
      1 conditional paths
      uses function preprocess(std::istream &,std::map< std::string, std::string > &,const std::string &,const std::list< std::string > &) defined in Preprocessor
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function pragma_asm_2() in line 2269
      14 lines of code
      0 parameters
      1 conditional paths
      uses function preprocess(std::istream &,std::map< std::string, std::string > &,const std::string &,const std::list< std::string > &) defined in Preprocessor
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function pragma_once() in line 2284
      10 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable preprocessor0 defined in TestPreprocessor
      uses function handleIncludes(const std::string &,const std::string &,const std::list< std::string > &,std::map< std::string, std::string > &,std::set< std::string > &,std::list< std::string >) defined in Preprocessor
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function predefine1() in line 2943
      8 lines of code
      0 parameters
      1 conditional paths
      uses variable preprocessor0 defined in TestPreprocessor
      uses function getcode(const std::string &,const std::string &,const std::string &) defined in Preprocessor
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function predefine2() in line 2952
      14 lines of code
      0 parameters
      1 conditional paths
      uses variable preprocessor0 defined in TestPreprocessor
      uses function getcode(const std::string &,const std::string &,const std::string &) defined in Preprocessor
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function predefine3() in line 2967
      10 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable preprocessor0 defined in TestPreprocessor
      uses function getcode(const std::string &,const std::string &,const std::string &) defined in Preprocessor
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function predefine4() in line 2978
      6 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable preprocessor0 defined in TestPreprocessor
      uses function getcode(const std::string &,const std::string &,const std::string &) defined in Preprocessor
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function predefine5() in line 2985
      15 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable preprocessor0 defined in TestPreprocessor
      uses function getcode(const std::string &,const std::string &,const std::string &) defined in Preprocessor
      uses variable userUndefs defined in Settings
   function predefine6() in line 3001
      22 lines of code
      0 parameters
      1 conditional paths
      uses variable preprocessor0 defined in TestPreprocessor
      uses function getcfgs(const std::string &,const std::string &,const std::map< std::string, std::string > &) defined in Preprocessor
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function preprocess(const char *,std::map< std::string, std::string > &) in line 315
      5 lines of code
      2 parameters
      1 conditional paths
      uses variable errout defined in redirect.h
      uses variable code defined in extracttests.py
      uses variable preprocessor0 defined in TestPreprocessor
      uses function preprocess(std::istream &,std::map< std::string, std::string > &,const std::string &,const std::list< std::string > &) defined in Preprocessor
   function preprocessor_doublesharp() in line 2076
      37 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function expandMacros(const char,ErrorLogger *) defined in TestPreprocessor::OurPreprocessor
   function preprocessor_include_in_str() in line 2116
      15 lines of code
      0 parameters
      1 conditional paths
      uses function preprocess(std::istream &,std::map< std::string, std::string > &,const std::string &,const std::list< std::string > &) defined in Preprocessor
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function preprocessor_undef() in line 2045
      20 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function expandMacros(const char,ErrorLogger *) defined in TestPreprocessor::OurPreprocessor
      uses variable preprocessor0 defined in TestPreprocessor
      uses function getcode(const std::string &,const std::string &,const std::string &) defined in Preprocessor
   function preprocessorRead(const char *) in line 309
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable errout defined in redirect.h
      uses variable code defined in extracttests.py
      uses variable preprocessor0 defined in TestPreprocessor
      uses function read(std::istream &,const std::string &) defined in Preprocessor
   function readCode1() in line 322
      5 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function preprocessorRead(const char *) defined in TestPreprocessor
   function readCode2() in line 328
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function preprocessorRead(const char *) defined in TestPreprocessor
   function readCode3() in line 333
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function preprocessorRead(const char *) defined in TestPreprocessor
   function readCode4() in line 338
      5 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function preprocessorRead(const char *) defined in TestPreprocessor
      uses variable errout defined in redirect.h
   function readCode5() in line 344
      7 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function preprocessorRead(const char *) defined in TestPreprocessor
      uses variable errout defined in redirect.h
   function redundant_config() in line 2790
      27 lines of code
      0 parameters
      1 conditional paths
      uses function preprocess(std::istream &,std::map< std::string, std::string > &,const std::string &,const std::list< std::string > &) defined in Preprocessor
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses macro definition ASSERT defined in testsuite.h
   function remove_asm() in line 1639
      9 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function removeComments() in line 404
      21 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable preprocessor0 defined in TestPreprocessor
      uses function removeComments(const std::string &,const std::string &) defined in Preprocessor
   function run() in line 64
      244 lines of code
      0 parameters
      1 conditional paths
      uses macro definition TEST_CASE defined in testsuite.h
      uses function readCode1() defined in TestPreprocessor
      uses function readCode2() defined in TestPreprocessor
      uses function readCode3() defined in TestPreprocessor
      uses function readCode4() defined in TestPreprocessor
      uses function readCode5() defined in TestPreprocessor
      uses function utf16() defined in TestPreprocessor
      uses function removeComments(const std::string &,const std::string &) defined in Preprocessor
      uses function Bug2190219() defined in TestPreprocessor
      uses function test1() defined in TestPreprocessor
      uses function test2() defined in TestPreprocessor
      uses function test3() defined in TestPreprocessor
      uses function test4() defined in TestPreprocessor
      uses function test5() defined in TestPreprocessor
      uses function test6() defined in TestPreprocessor
      uses function test7() defined in TestPreprocessor
      uses function test7a() defined in TestPreprocessor
      uses function test7b() defined in TestPreprocessor
      uses function test7c() defined in TestPreprocessor
      uses function test7d() defined in TestPreprocessor
      uses function test7e() defined in TestPreprocessor
      uses function test8() defined in TestPreprocessor
      uses function test9() defined in TestPreprocessor
      uses function test10() defined in TestPreprocessor
      uses function error1() defined in TestPreprocessor
      uses function error2() defined in TestPreprocessor
      uses function error3() defined in TestPreprocessor
      uses function error4() defined in TestPreprocessor
      uses function error5() defined in TestPreprocessor
      uses function if0_exclude() defined in TestPreprocessor
      uses function if0_whitespace() defined in TestPreprocessor
      uses function if0_else() defined in TestPreprocessor
      uses function if0_elif() defined in TestPreprocessor
      uses function if0_include_1() defined in TestPreprocessor
      uses function if0_include_2() defined in TestPreprocessor
      uses function includeguard1() defined in TestPreprocessor
      uses function includeguard2() defined in TestPreprocessor
      uses function newlines() defined in TestPreprocessor
      uses function comments1() defined in TestPreprocessor
      uses function if0() defined in TestPreprocessor
      uses function if1() defined in TestPreprocessor
      uses function elif() defined in TestPreprocessor
      uses function match_cfg_def(std::map< std::string, std::string >,std::string) defined in Preprocessor
      uses function if_cond1() defined in TestPreprocessor
      uses function if_cond2() defined in TestPreprocessor
      uses function if_cond3() defined in TestPreprocessor
      uses function if_cond4() defined in TestPreprocessor
      uses function if_cond5() defined in TestPreprocessor
      uses function if_cond6() defined in TestPreprocessor
      uses function if_cond8() defined in TestPreprocessor
      uses function if_cond9() defined in TestPreprocessor
      uses function if_cond10() defined in TestPreprocessor
      uses function if_cond11() defined in TestPreprocessor
      uses function if_cond12() defined in TestPreprocessor
      uses function if_cond13() defined in TestPreprocessor
      uses function if_cond14() defined in TestPreprocessor
      uses function if_cond15() defined in TestPreprocessor
      uses function if_or_1() defined in TestPreprocessor
      uses function if_or_2() defined in TestPreprocessor
      uses function if_macro_eq_macro() defined in TestPreprocessor
      uses function ticket_3675() defined in TestPreprocessor
      uses function ticket_3699() defined in TestPreprocessor
      uses function ticket_4922() defined in TestPreprocessor
      uses function multiline1() defined in TestPreprocessor
      uses function multiline2() defined in TestPreprocessor
      uses function multiline3() defined in TestPreprocessor
      uses function multiline4() defined in TestPreprocessor
      uses function multiline5() defined in TestPreprocessor
      uses function remove_asm() defined in TestPreprocessor
      uses function if_defined() defined in TestPreprocessor
      uses function if_not_defined() defined in TestPreprocessor
      uses function macro_simple1() defined in TestPreprocessor
      uses function macro_simple2() defined in TestPreprocessor
      uses function macro_simple3() defined in TestPreprocessor
      uses function macro_simple4() defined in TestPreprocessor
      uses function macro_simple5() defined in TestPreprocessor
      uses function macro_simple6() defined in TestPreprocessor
      uses function macro_simple7() defined in TestPreprocessor
      uses function macro_simple8() defined in TestPreprocessor
      uses function macro_simple9() defined in TestPreprocessor
      uses function macro_simple10() defined in TestPreprocessor
      uses function macro_simple11() defined in TestPreprocessor
      uses function macro_simple12() defined in TestPreprocessor
      uses function macro_simple13() defined in TestPreprocessor
      uses function macro_simple14() defined in TestPreprocessor
      uses function macro_simple15() defined in TestPreprocessor
      uses function macro_simple16() defined in TestPreprocessor
      uses function macro_simple17() defined in TestPreprocessor
      uses function macro_simple18() defined in TestPreprocessor
      uses function macroInMacro1() defined in TestPreprocessor
      uses function macroInMacro2() defined in TestPreprocessor
      uses function macro_mismatch() defined in TestPreprocessor
      uses function macro_linenumbers() defined in TestPreprocessor
      uses function macro_nopar() defined in TestPreprocessor
      uses function macro_incdec() defined in TestPreprocessor
      uses function macro_switchCase() defined in TestPreprocessor
      uses function macro_NULL() defined in TestPreprocessor
      uses function string1() defined in TestPreprocessor
      uses function string2() defined in TestPreprocessor
      uses function string3() defined in TestPreprocessor
      uses function preprocessor_undef() defined in TestPreprocessor
      uses function defdef() defined in TestPreprocessor
      uses function preprocessor_doublesharp() defined in TestPreprocessor
      uses function preprocessor_include_in_str() defined in TestPreprocessor
      uses function va_args_1() defined in TestPreprocessor
      uses function va_args_2() defined in TestPreprocessor
      uses function va_args_3() defined in TestPreprocessor
      uses function va_args_4() defined in TestPreprocessor
      uses function multi_character_character() defined in TestPreprocessor
      uses function stringify() defined in TestPreprocessor
      uses function stringify2() defined in TestPreprocessor
      uses function stringify3() defined in TestPreprocessor
      uses function stringify4() defined in TestPreprocessor
      uses function stringify5() defined in TestPreprocessor
      uses function ifdefwithfile() defined in TestPreprocessor
      uses function pragma() defined in TestPreprocessor
      uses function pragma_asm_1() defined in TestPreprocessor
      uses function pragma_asm_2() defined in TestPreprocessor
      uses function pragma_once() defined in TestPreprocessor
      uses function endifsemicolon() defined in TestPreprocessor
      uses function missing_doublequote() defined in TestPreprocessor
      uses function handle_error() defined in TestPreprocessor
      uses function dup_defines() defined in TestPreprocessor
      uses function unicodeInCode() defined in TestPreprocessor
      uses function unicodeInComment() defined in TestPreprocessor
      uses function unicodeInString() defined in TestPreprocessor
      uses function define_part_of_func() defined in TestPreprocessor
      uses function conditionalDefine() defined in TestPreprocessor
      uses function multiline_comment() defined in TestPreprocessor
      uses function macro_parameters() defined in TestPreprocessor
      uses function newline_in_macro() defined in TestPreprocessor
      uses function includes() defined in TestPreprocessor
      uses function ifdef_ifdefined() defined in TestPreprocessor
      uses function define_if1() defined in TestPreprocessor
      uses function define_if2() defined in TestPreprocessor
      uses function define_if3() defined in TestPreprocessor
      uses function define_if4() defined in TestPreprocessor
      uses function define_if5() defined in TestPreprocessor
      uses function define_if6() defined in TestPreprocessor
      uses function define_ifdef() defined in TestPreprocessor
      uses function define_ifndef1() defined in TestPreprocessor
      uses function define_ifndef2() defined in TestPreprocessor
      uses function ifndef_define() defined in TestPreprocessor
      uses function undef_ifdef() defined in TestPreprocessor
      uses function endfile() defined in TestPreprocessor
      uses function redundant_config() defined in TestPreprocessor
      uses function testPreprocessorRead1() defined in TestPreprocessor
      uses function testPreprocessorRead2() defined in TestPreprocessor
      uses function testPreprocessorRead3() defined in TestPreprocessor
      uses function testPreprocessorRead4() defined in TestPreprocessor
      uses function invalid_define_1() defined in TestPreprocessor
      uses function invalid_define_2() defined in TestPreprocessor
      uses function missingInclude(const std::string &,unsigned int,const std::string &,HeaderTypes) defined in Preprocessor
      uses function inline_suppression_for_missing_include() defined in TestPreprocessor
      uses function predefine1() defined in TestPreprocessor
      uses function predefine2() defined in TestPreprocessor
      uses function predefine3() defined in TestPreprocessor
      uses function predefine4() defined in TestPreprocessor
      uses function predefine5() defined in TestPreprocessor
      uses function predefine6() defined in TestPreprocessor
      uses function simplifyCondition(const std::map< std::string, std::string > &,std::string &,bool) defined in Preprocessor
      uses function invalidElIf() defined in TestPreprocessor
      uses function def_handleIncludes() defined in TestPreprocessor
      uses function def_missingInclude() defined in TestPreprocessor
      uses function def_handleIncludes_ifelse1() defined in TestPreprocessor
      uses function def_handleIncludes_ifelse2() defined in TestPreprocessor
      uses function def_handleIncludes_ifelse3() defined in TestPreprocessor
      uses function def_valueWithParentheses() defined in TestPreprocessor
      uses function undef1() defined in TestPreprocessor
      uses function undef2() defined in TestPreprocessor
      uses function undef3() defined in TestPreprocessor
      uses function undef4() defined in TestPreprocessor
      uses function undef5() defined in TestPreprocessor
      uses function undef6() defined in TestPreprocessor
      uses function undef7() defined in TestPreprocessor
      uses function undef8() defined in TestPreprocessor
      uses function undef9() defined in TestPreprocessor
      uses function undef10() defined in TestPreprocessor
      uses function handleUndef(std::list< std::string > &) defined in Preprocessor
      uses variable macroChar defined in Preprocessor
      uses function validateCfg(const std::string &,const std::string &) defined in Preprocessor
      uses function if_sizeof() defined in TestPreprocessor
      uses function double_include() defined in TestPreprocessor
      uses function invalid_ifs() defined in TestPreprocessor
      uses function garbage() defined in TestPreprocessor
      uses function wrongPathOnUnicodeError() defined in TestPreprocessor
      uses function wrongPathOnErrorDirective() defined in TestPreprocessor
   function simplifyCondition() in line 3025
      8 lines of code
      0 parameters
      1 conditional paths
      uses variable preprocessor0 defined in TestPreprocessor
      uses function simplifyCondition(const std::map< std::string, std::string > &,std::string &,bool) defined in Preprocessor
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function string1() in line 2014
      14 lines of code
      0 parameters
      1 conditional paths
      uses function preprocess(std::istream &,std::map< std::string, std::string > &,const std::string &,const std::list< std::string > &) defined in Preprocessor
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function string2() in line 2029
      7 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function expandMacros(const char,ErrorLogger *) defined in TestPreprocessor::OurPreprocessor
   function string3() in line 2037
      6 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function expandMacros(const char,ErrorLogger *) defined in TestPreprocessor::OurPreprocessor
   function stringify() in line 2187
      9 lines of code
      0 parameters
      1 conditional paths
      uses function expandMacros(const char,ErrorLogger *) defined in TestPreprocessor::OurPreprocessor
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function stringify2() in line 2197
      9 lines of code
      0 parameters
      1 conditional paths
      uses function expandMacros(const char,ErrorLogger *) defined in TestPreprocessor::OurPreprocessor
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function stringify3() in line 2207
      9 lines of code
      0 parameters
      1 conditional paths
      uses function expandMacros(const char,ErrorLogger *) defined in TestPreprocessor::OurPreprocessor
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function stringify4() in line 2217
      11 lines of code
      0 parameters
      1 conditional paths
      uses function expandMacros(const char,ErrorLogger *) defined in TestPreprocessor::OurPreprocessor
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function stringify5() in line 2229
      5 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function expandMacros(const char,ErrorLogger *) defined in TestPreprocessor::OurPreprocessor
   function test1() in line 486
      16 lines of code
      0 parameters
      1 conditional paths
      uses function preprocess(std::istream &,std::map< std::string, std::string > &,const std::string &,const std::list< std::string > &) defined in Preprocessor
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function test10() in line 755
      11 lines of code
      0 parameters
      1 conditional paths
      uses function preprocess(std::istream &,std::map< std::string, std::string > &,const std::string &,const std::list< std::string > &) defined in Preprocessor
   function test2() in line 503
      16 lines of code
      0 parameters
      1 conditional paths
      uses function preprocess(std::istream &,std::map< std::string, std::string > &,const std::string &,const std::list< std::string > &) defined in Preprocessor
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function test3() in line 520
      19 lines of code
      0 parameters
      1 conditional paths
      uses function preprocess(std::istream &,std::map< std::string, std::string > &,const std::string &,const std::list< std::string > &) defined in Preprocessor
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function test4() in line 540
      17 lines of code
      0 parameters
      1 conditional paths
      uses function preprocess(std::istream &,std::map< std::string, std::string > &,const std::string &,const std::list< std::string > &) defined in Preprocessor
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function test5() in line 558
      20 lines of code
      0 parameters
      1 conditional paths
      uses function preprocess(std::istream &,std::map< std::string, std::string > &,const std::string &,const std::list< std::string > &) defined in Preprocessor
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function test6() in line 579
      10 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function preprocessorRead(const char *) defined in TestPreprocessor
   function test7() in line 590
      27 lines of code
      0 parameters
      1 conditional paths
      uses function preprocess(std::istream &,std::map< std::string, std::string > &,const std::string &,const std::list< std::string > &) defined in Preprocessor
      uses macro definition TODO_ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function test7a() defined in TestPreprocessor
      uses function test7b() defined in TestPreprocessor
      uses function test7c() defined in TestPreprocessor
      uses function test7d() defined in TestPreprocessor
   function test7a() in line 618
      19 lines of code
      0 parameters
      1 conditional paths
      uses function preprocess(std::istream &,std::map< std::string, std::string > &,const std::string &,const std::list< std::string > &) defined in Preprocessor
      uses macro definition TODO_ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function test7b() in line 638
      19 lines of code
      0 parameters
      1 conditional paths
      uses function preprocess(std::istream &,std::map< std::string, std::string > &,const std::string &,const std::list< std::string > &) defined in Preprocessor
      uses macro definition TODO_ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function test7c() in line 658
      20 lines of code
      0 parameters
      1 conditional paths
      uses function preprocess(std::istream &,std::map< std::string, std::string > &,const std::string &,const std::list< std::string > &) defined in Preprocessor
      uses macro definition TODO_ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function test7d() in line 679
      20 lines of code
      0 parameters
      1 conditional paths
      uses function preprocess(std::istream &,std::map< std::string, std::string > &,const std::string &,const std::list< std::string > &) defined in Preprocessor
      uses macro definition TODO_ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function test7e() in line 700
      21 lines of code
      0 parameters
      1 conditional paths
      uses function preprocess(std::istream &,std::map< std::string, std::string > &,const std::string &,const std::list< std::string > &) defined in Preprocessor
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function test8() in line 722
      17 lines of code
      0 parameters
      1 conditional paths
      uses function preprocess(std::istream &,std::map< std::string, std::string > &,const std::string &,const std::list< std::string > &) defined in Preprocessor
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function test9() in line 740
      14 lines of code
      0 parameters
      1 conditional paths
      uses variable maxConfigs defined in Settings
      uses variable userDefines defined in Settings
      uses function preprocess(std::istream &,std::map< std::string, std::string > &,const std::string &,const std::list< std::string > &) defined in Preprocessor
   function testPreprocessorRead1() in line 2865
      4 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function preprocessorRead(const char *) defined in TestPreprocessor
   function testPreprocessorRead2() in line 2870
      4 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function preprocessorRead(const char *) defined in TestPreprocessor
   function testPreprocessorRead3() in line 2875
      4 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function preprocessorRead(const char *) defined in TestPreprocessor
   function testPreprocessorRead4() in line 2880
      19 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function preprocessorRead(const char *) defined in TestPreprocessor
   function ticket_3675() in line 1544
      13 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses function preprocess(std::istream &,std::map< std::string, std::string > &,const std::string &,const std::list< std::string > &) defined in Preprocessor
   function ticket_3699() in line 1558
      13 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses function preprocess(std::istream &,std::map< std::string, std::string > &,const std::string &,const std::list< std::string > &) defined in Preprocessor
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function ticket_4922() in line 1572
      7 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses function preprocess(std::istream &,std::map< std::string, std::string > &,const std::string &,const std::list< std::string > &) defined in Preprocessor
   function undef1() in line 3387
      19 lines of code
      0 parameters
      1 conditional paths
      uses variable userUndefs defined in Settings
      uses function preprocess(std::istream &,std::map< std::string, std::string > &,const std::string &,const std::list< std::string > &) defined in Preprocessor
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function undef10() in line 3579
      25 lines of code
      0 parameters
      1 conditional paths
      uses variable userUndefs defined in Settings
      uses function preprocess(std::istream &,std::map< std::string, std::string > &,const std::string &,const std::list< std::string > &) defined in Preprocessor
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function undef2() in line 3407
      19 lines of code
      0 parameters
      1 conditional paths
      uses variable userUndefs defined in Settings
      uses function preprocess(std::istream &,std::map< std::string, std::string > &,const std::string &,const std::list< std::string > &) defined in Preprocessor
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function undef3() in line 3427
      20 lines of code
      0 parameters
      1 conditional paths
      uses variable userUndefs defined in Settings
      uses function preprocess(std::istream &,std::map< std::string, std::string > &,const std::string &,const std::list< std::string > &) defined in Preprocessor
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function undef4() in line 3448
      20 lines of code
      0 parameters
      1 conditional paths
      uses variable userUndefs defined in Settings
      uses function preprocess(std::istream &,std::map< std::string, std::string > &,const std::string &,const std::list< std::string > &) defined in Preprocessor
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function undef5() in line 3469
      20 lines of code
      0 parameters
      1 conditional paths
      uses variable userUndefs defined in Settings
      uses function preprocess(std::istream &,std::map< std::string, std::string > &,const std::string &,const std::list< std::string > &) defined in Preprocessor
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function undef6() in line 3490
      22 lines of code
      0 parameters
      1 conditional paths
      uses variable userUndefs defined in Settings
      uses function preprocess(std::istream &,std::map< std::string, std::string > &,const std::string &,const std::list< std::string > &) defined in Preprocessor
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function undef7() in line 3513
      18 lines of code
      0 parameters
      1 conditional paths
      uses variable userUndefs defined in Settings
      uses function preprocess(std::istream &,std::map< std::string, std::string > &,const std::string &,const std::list< std::string > &) defined in Preprocessor
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses macro definition TODO_ASSERT_EQUALS defined in testsuite.h
   function undef8() in line 3532
      23 lines of code
      0 parameters
      1 conditional paths
      uses variable userUndefs defined in Settings
      uses variable checkConfiguration defined in Settings
      uses variable errout defined in redirect.h
      uses function preprocess(std::istream &,std::map< std::string, std::string > &,const std::string &,const std::list< std::string > &) defined in Preprocessor
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function undef9() in line 3556
      22 lines of code
      0 parameters
      1 conditional paths
      uses variable userUndefs defined in Settings
      uses function preprocess(std::istream &,std::map< std::string, std::string > &,const std::string &,const std::list< std::string > &) defined in Preprocessor
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function undef_ifdef() in line 2779
      10 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable preprocessor0 defined in TestPreprocessor
      uses function getcode(const std::string &,const std::string &,const std::string &) defined in Preprocessor
   function unicodeInCode() in line 2412
      5 lines of code
      0 parameters
      1 conditional paths
      uses function preprocessorRead(const char *) defined in TestPreprocessor
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function unicodeInComment() in line 2418
      4 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function preprocessorRead(const char *) defined in TestPreprocessor
   function unicodeInString() in line 2423
      4 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function preprocessorRead(const char *) defined in TestPreprocessor
   function utf16() in line 353
      49 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable s defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable preprocessor0 defined in TestPreprocessor
      uses function read(std::istream &,const std::string &) defined in Preprocessor
      uses variable expected defined in extracttests.py
   function va_args_1() in line 2135
      9 lines of code
      0 parameters
      1 conditional paths
      uses function expandMacros(const char,ErrorLogger *) defined in TestPreprocessor::OurPreprocessor
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function va_args_2() in line 2145
      9 lines of code
      0 parameters
      1 conditional paths
      uses function expandMacros(const char,ErrorLogger *) defined in TestPreprocessor::OurPreprocessor
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function va_args_3() in line 2155
      5 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function expandMacros(const char,ErrorLogger *) defined in TestPreprocessor::OurPreprocessor
   function va_args_4() in line 2161
      5 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function expandMacros(const char,ErrorLogger *) defined in TestPreprocessor::OurPreprocessor
   function validateCfg() in line 3639
      36 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function validateCfg(const std::string &,const std::string &) defined in Preprocessor
      uses variable errout defined in redirect.h
      uses function addEnabled(const std::string &) defined in Settings
      uses function setFile0(const std::string &) defined in Preprocessor
      uses function getcode(const std::string &,const std::string &,const std::string &) defined in Preprocessor
   function wrongPathOnErrorDirective() in line 3736
      9 lines of code
      0 parameters
      1 conditional paths
      uses variable errout defined in redirect.h
      uses variable userDefines defined in Settings
      uses variable code defined in extracttests.py
      uses function getcode(const std::string &,const std::string &,const std::string &) defined in Preprocessor
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses macro definition REGISTER_TEST defined in testsuite.h
   function wrongPathOnUnicodeError() in line 3726
      9 lines of code
      0 parameters
      1 conditional paths
      uses function preprocessorRead(const char *) defined in TestPreprocessor
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function TestPreprocessor() in line 37
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   variable preprocessor0 in line 62
   variable settings0 in line 61
module TestPreprocessor::OurPreprocessor
   inherits from Preprocessor
   function expandMacros(const char,ErrorLogger *) in line 51
      protection public
      3 lines of code
      2 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
   function getHeaderFileName(std::string &) in line 55
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function replaceIfDefined(std::string) in line 44
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses function replaceIfDefined(std::string &) defined in Preprocessor
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/test/testrunner.cpp
module testrunner.cpp
   function main(int,char *) in line 25
      protection public
      27 lines of code
      2 parameters
      2 conditional paths
      uses variable macroChar defined in Preprocessor
      uses variable e defined in extracttests.py
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/test/testsamples.cpp
module TestSamples
   inherits from TestFixture
   function run() in line 37
      3 lines of code
      0 parameters
      1 conditional paths
      uses macro definition TEST_CASE defined in testsuite.h
      uses function runSamples() defined in TestSamples
   function runSamples() in line 41
      44 lines of code
      0 parameters
      5 conditional paths
      uses macro definition REDIRECT defined in redirect.h
      uses macro definition CLEAR_REDIRECT_ERROUT defined in redirect.h
      uses variable path defined in daca2-report.py
      uses variable filename defined in extracttests.py
      uses function check(int,const char *const) defined in CppCheckExecutor
      uses macro definition ASSERT_EQUALS_MSG defined in testsuite.h
      uses macro definition GET_REDIRECT_ERROUT defined in redirect.h
      uses variable expected defined in extracttests.py
      uses function replace(char *,char,char) defined in times.c
      uses macro definition REGISTER_TEST defined in testsuite.h
   function TestSamples() in line 32
      protection public
      2 lines of code
      0 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/test/testsimplifytemplate.cpp
module TestSimplifyTemplate
   inherits from TestFixture
   function run() in line 34
      71 lines of code
      0 parameters
      1 conditional paths
      uses variable settings defined in TestSimplifyTemplate
      uses function addEnabled(const std::string &) defined in Settings
      uses macro definition TEST_CASE defined in testsuite.h
      uses function template1() defined in TestSimplifyTemplate
      uses function template2() defined in TestSimplifyTemplate
      uses function template3() defined in TestSimplifyTemplate
      uses function template4() defined in TestSimplifyTemplate
      uses function template5() defined in TestSimplifyTemplate
      uses function template6() defined in TestSimplifyTemplate
      uses function template7() defined in TestSimplifyTemplate
      uses function template8() defined in TestSimplifyTemplate
      uses function template9() defined in TestSimplifyTemplate
      uses function template10() defined in TestSimplifyTemplate
      uses function template11() defined in TestSimplifyTemplate
      uses function template12() defined in TestSimplifyTemplate
      uses function template13() defined in TestSimplifyTemplate
      uses function template14() defined in TestSimplifyTemplate
      uses function template15() defined in TestSimplifyTemplate
      uses function template16() defined in TestSimplifyTemplate
      uses function template17() defined in TestSimplifyTemplate
      uses function template18() defined in TestSimplifyTemplate
      uses function template19() defined in TestSimplifyTemplate
      uses function template20() defined in TestSimplifyTemplate
      uses function template21() defined in TestSimplifyTemplate
      uses function template22() defined in TestSimplifyTemplate
      uses function template23() defined in TestSimplifyTemplate
      uses function template24() defined in TestSimplifyTemplate
      uses function template25() defined in TestSimplifyTemplate
      uses function template26() defined in TestSimplifyTemplate
      uses function template27() defined in TestSimplifyTemplate
      uses function template28() defined in TestSimplifyTemplate
      uses function template30() defined in TestSimplifyTemplate
      uses function template31() defined in TestSimplifyTemplate
      uses function template32() defined in TestSimplifyTemplate
      uses function template33() defined in TestSimplifyTemplate
      uses function template34() defined in TestSimplifyTemplate
      uses function template35() defined in TestSimplifyTemplate
      uses function template36() defined in TestSimplifyTemplate
      uses function template37() defined in TestSimplifyTemplate
      uses function template38() defined in TestSimplifyTemplate
      uses function template39() defined in TestSimplifyTemplate
      uses function template40() defined in TestSimplifyTemplate
      uses function template41() defined in TestSimplifyTemplate
      uses function template42() defined in TestSimplifyTemplate
      uses function template43() defined in TestSimplifyTemplate
      uses function template44() defined in TestSimplifyTemplate
      uses function template45() defined in TestSimplifyTemplate
      uses function template46() defined in TestSimplifyTemplate
      uses function template47() defined in TestSimplifyTemplate
      uses function template48() defined in TestSimplifyTemplate
      uses function template49() defined in TestSimplifyTemplate
      uses function template50() defined in TestSimplifyTemplate
      uses function template51() defined in TestSimplifyTemplate
      uses function template52() defined in TestSimplifyTemplate
      uses function template53() defined in TestSimplifyTemplate
      uses function template54() defined in TestSimplifyTemplate
      uses function template55() defined in TestSimplifyTemplate
      uses function template_enum() defined in TestSimplifyTemplate
      uses function template_unhandled() defined in TestSimplifyTemplate
      uses function template_default_parameter() defined in TestSimplifyTemplate
      uses function template_default_type() defined in TestSimplifyTemplate
      uses function template_typename() defined in TestSimplifyTemplate
      uses function template_constructor() defined in TestSimplifyTemplate
      uses function syntax_error_templates_1() defined in TestSimplifyTemplate
      uses function template_member_ptr() defined in TestSimplifyTemplate
      uses function templateParameters() defined in TestSimplifyTemplate
      uses function templateNamePosition() defined in TestSimplifyTemplate
   function syntax_error_templates_1() in line 1182
      46 lines of code
      0 parameters
      1 conditional paths
      uses function tok(const char,bool,bool,Settings::PlatformType) defined in TestSimplifyTemplate
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
      uses macro definition ASSERT_THROW defined in testsuite.h
   function template1() in line 135
      9 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,bool,Settings::PlatformType) defined in TestSimplifyTemplate
   function template10() in line 314
      17 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,bool,Settings::PlatformType) defined in TestSimplifyTemplate
   function template11() in line 332
      17 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,bool,Settings::PlatformType) defined in TestSimplifyTemplate
   function template12() in line 350
      19 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,bool,Settings::PlatformType) defined in TestSimplifyTemplate
   function template13() in line 370
      28 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses function tok(const char,bool,bool,Settings::PlatformType) defined in TestSimplifyTemplate
   function template14() in line 399
      17 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,bool,Settings::PlatformType) defined in TestSimplifyTemplate
   function template15() in line 417
      24 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,bool,Settings::PlatformType) defined in TestSimplifyTemplate
   function template16() in line 442
      20 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,bool,Settings::PlatformType) defined in TestSimplifyTemplate
   function template17() in line 463
      15 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses function tok(const char,bool,bool,Settings::PlatformType) defined in TestSimplifyTemplate
   function template18() in line 479
      9 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,bool,Settings::PlatformType) defined in TestSimplifyTemplate
   function template19() in line 489
      17 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,bool,Settings::PlatformType) defined in TestSimplifyTemplate
   function template2() in line 145
      9 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,bool,Settings::PlatformType) defined in TestSimplifyTemplate
   function template20() in line 507
      21 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,bool,Settings::PlatformType) defined in TestSimplifyTemplate
   function template21() in line 529
      43 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,bool,Settings::PlatformType) defined in TestSimplifyTemplate
   function template22() in line 573
      9 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,bool,Settings::PlatformType) defined in TestSimplifyTemplate
   function template23() in line 583
      13 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,bool,Settings::PlatformType) defined in TestSimplifyTemplate
   function template24() in line 597
      16 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,bool,Settings::PlatformType) defined in TestSimplifyTemplate
   function template25() in line 614
      22 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition TODO_ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,bool,Settings::PlatformType) defined in TestSimplifyTemplate
   function template26() in line 637
      12 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,bool,Settings::PlatformType) defined in TestSimplifyTemplate
   function template27() in line 650
      5 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,bool,Settings::PlatformType) defined in TestSimplifyTemplate
   function template28() in line 656
      6 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,bool,Settings::PlatformType) defined in TestSimplifyTemplate
   function template3() in line 155
      9 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,bool,Settings::PlatformType) defined in TestSimplifyTemplate
   function template30() in line 663
      5 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,bool,Settings::PlatformType) defined in TestSimplifyTemplate
   function template31() in line 669
      5 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,bool,Settings::PlatformType) defined in TestSimplifyTemplate
   function template32() in line 675
      16 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,bool,Settings::PlatformType) defined in TestSimplifyTemplate
   function template33() in line 692
      26 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,bool,Settings::PlatformType) defined in TestSimplifyTemplate
   function template34() in line 719
      11 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,bool,Settings::PlatformType) defined in TestSimplifyTemplate
   function template35() in line 731
      5 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,bool,Settings::PlatformType) defined in TestSimplifyTemplate
   function template36() in line 737
      9 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,bool,Settings::PlatformType) defined in TestSimplifyTemplate
   function template37() in line 747
      8 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,bool,Settings::PlatformType) defined in TestSimplifyTemplate
   function template38() in line 761
      13 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses function tok(const char,bool,bool,Settings::PlatformType) defined in TestSimplifyTemplate
   function template39() in line 775
      10 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses function tok(const char,bool,bool,Settings::PlatformType) defined in TestSimplifyTemplate
   function template4() in line 165
      9 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,bool,Settings::PlatformType) defined in TestSimplifyTemplate
   function template40() in line 786
      7 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,bool,Settings::PlatformType) defined in TestSimplifyTemplate
   function template41() in line 794
      9 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,bool,Settings::PlatformType) defined in TestSimplifyTemplate
   function template42() in line 804
      11 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses function tok(const char,bool,bool,Settings::PlatformType) defined in TestSimplifyTemplate
   function template43() in line 816
      12 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses function tok(const char,bool,bool,Settings::PlatformType) defined in TestSimplifyTemplate
   function template44() in line 829
      10 lines of code
      0 parameters
      1 conditional paths
      uses function tok(const char,bool,bool,Settings::PlatformType) defined in TestSimplifyTemplate
   function template45() in line 840
      10 lines of code
      0 parameters
      1 conditional paths
      uses function tok(const char,bool,bool,Settings::PlatformType) defined in TestSimplifyTemplate
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function template46() in line 851
      17 lines of code
      0 parameters
      1 conditional paths
      uses function tok(const char,bool,bool,Settings::PlatformType) defined in TestSimplifyTemplate
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function template47() in line 869
      5 lines of code
      0 parameters
      1 conditional paths
      uses function tok(const char,bool,bool,Settings::PlatformType) defined in TestSimplifyTemplate
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function template48() in line 875
      5 lines of code
      0 parameters
      1 conditional paths
      uses function tok(const char,bool,bool,Settings::PlatformType) defined in TestSimplifyTemplate
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function template49() in line 881
      19 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,bool,Settings::PlatformType) defined in TestSimplifyTemplate
   function template5() in line 175
      12 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,bool,Settings::PlatformType) defined in TestSimplifyTemplate
   function template50() in line 901
      16 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,bool,Settings::PlatformType) defined in TestSimplifyTemplate
   function template51() in line 918
      10 lines of code
      0 parameters
      1 conditional paths
      uses function tok(const char,bool,bool,Settings::PlatformType) defined in TestSimplifyTemplate
   function template52() in line 929
      9 lines of code
      0 parameters
      1 conditional paths
      uses function tok(const char,bool,bool,Settings::PlatformType) defined in TestSimplifyTemplate
   function template53() in line 939
      10 lines of code
      0 parameters
      1 conditional paths
      uses function tok(const char,bool,bool,Settings::PlatformType) defined in TestSimplifyTemplate
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function template54() in line 950
      8 lines of code
      0 parameters
      1 conditional paths
      uses function tok(const char,bool,bool,Settings::PlatformType) defined in TestSimplifyTemplate
   function template55() in line 959
      33 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,bool,Settings::PlatformType) defined in TestSimplifyTemplate
   function template6() in line 188
      11 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,bool,Settings::PlatformType) defined in TestSimplifyTemplate
   function template7() in line 200
      64 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,bool,Settings::PlatformType) defined in TestSimplifyTemplate
      uses macro definition TODO_ASSERT_EQUALS defined in testsuite.h
   function template8() in line 266
      25 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,bool,Settings::PlatformType) defined in TestSimplifyTemplate
   function template9() in line 292
      21 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,bool,Settings::PlatformType) defined in TestSimplifyTemplate
   function template_constructor() in line 1167
      14 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,bool,Settings::PlatformType) defined in TestSimplifyTemplate
   function template_default_parameter() in line 1027
      89 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,bool,Settings::PlatformType) defined in TestSimplifyTemplate
      uses macro definition TODO_ASSERT_EQUALS defined in testsuite.h
   function template_default_type() in line 1117
      28 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses function tok(const char,bool,bool,Settings::PlatformType) defined in TestSimplifyTemplate
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function template_enum() in line 993
      33 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,bool,Settings::PlatformType) defined in TestSimplifyTemplate
   function template_member_ptr() in line 1229
      26 lines of code
      0 parameters
      1 conditional paths
      uses function tok(const char,bool,bool,Settings::PlatformType) defined in TestSimplifyTemplate
   function template_typename() in line 1146
      20 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,bool,Settings::PlatformType) defined in TestSimplifyTemplate
   function template_unhandled() in line 756
      4 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,bool,Settings::PlatformType) defined in TestSimplifyTemplate
   function templateNamePosition() in line 1299
      22 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function templateNamePositionHelper(const char,unsigned) defined in TestSimplifyTemplate
      uses macro definition TODO_ASSERT_EQUALS defined in testsuite.h
      uses macro definition REGISTER_TEST defined in testsuite.h
   function templateNamePositionHelper(const char,unsigned) in line 1287
      11 lines of code
      2 parameters
      2 conditional paths
      uses variable settings defined in TestSimplifyTemplate
      uses variable code defined in extracttests.py
      uses function tokenize(std::istream &,const char,const std::string &,bool) defined in Tokenizer
      uses function tokens() defined in Tokenizer
      uses function next() defined in Token
   function templateParameters(const char) in line 1257
      8 lines of code
      1 parameters
      1 conditional paths
      uses variable settings defined in TestSimplifyTemplate
      uses variable code defined in extracttests.py
      uses function tokenize(std::istream &,const char,const std::string &,bool) defined in Tokenizer
      uses function tokens() defined in Tokenizer
   function templateParameters() in line 1266
      19 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses macro definition TODO_ASSERT_EQUALS defined in testsuite.h
   function tok(const char,bool,bool,Settings::PlatformType) in line 106
      15 lines of code
      4 parameters
      2 conditional paths
      uses variable errout defined in redirect.h
      uses variable settings defined in TestSimplifyTemplate
      uses variable debugwarnings defined in Settings
      uses function platform(PlatformType) defined in Settings
      uses variable code defined in extracttests.py
      uses function tokenize(std::istream &,const char,const std::string &,bool) defined in Tokenizer
      uses function simplifyTokenList2() defined in Tokenizer
      uses function tokens() defined in Tokenizer
      uses function stringifyList(bool,bool,bool,bool,bool,const std::vector< std::string > *,const Token *) defined in Token
   function tok(const char,const char) in line 122
      12 lines of code
      2 parameters
      1 conditional paths
      uses variable errout defined in redirect.h
      uses variable settings defined in TestSimplifyTemplate
      uses variable debugwarnings defined in Settings
      uses variable code defined in extracttests.py
      uses function tokenize(std::istream &,const char,const std::string &,bool) defined in Tokenizer
      uses variable filename defined in extracttests.py
      uses function simplifyTokenList2() defined in Tokenizer
      uses function tokens() defined in Tokenizer
      uses function stringifyList(bool,bool,bool,bool,bool,const std::vector< std::string > *,const Token *) defined in Token
   function TestSimplifyTemplate() in line 28
      protection public
      2 lines of code
      0 parameters
      1 conditional paths
   variable settings in line 32
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/test/testsimplifytokens.cpp
module TestSimplifyTokens
   inherits from TestFixture
   function and1() in line 1732
      25 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType) defined in TestSimplifyTokens
   function calculations() in line 2106
      74 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType) defined in TestSimplifyTokens
      uses enumvalue Win32A defined in Settings
   function cAlternativeTokens() in line 1781
      7 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType) defined in TestSimplifyTokens
   function cast() in line 417
      19 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType) defined in TestSimplifyTokens
   function casting() in line 1489
      34 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType) defined in TestSimplifyTokens
   function checkSimplifyEnum(const char,bool) in line 2990
      8 lines of code
      2 parameters
      1 conditional paths
      uses variable errout defined in redirect.h
      uses variable settings1 defined in TestSimplifyTokens
      uses variable code defined in extracttests.py
      uses function tokenize(std::istream &,const char,const std::string &,bool) defined in Tokenizer
      uses function tokens() defined in Tokenizer
      uses function stringifyList(bool,bool,bool,bool,bool,const std::vector< std::string > *,const Token *) defined in Token
   function combine_strings() in line 511
      19 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType) defined in TestSimplifyTokens
   function combine_wstrings() in line 531
      25 lines of code
      0 parameters
      1 conditional paths
      uses variable settings0 defined in TestSimplifyTokens
      uses function tokenize(std::istream &,const char,const std::string &,bool) defined in Tokenizer
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType) defined in TestSimplifyTokens
      uses function tokens() defined in Tokenizer
      uses function stringifyList(bool,bool,bool,bool,bool,const std::vector< std::string > *,const Token *) defined in Token
      uses function tokAt(int) defined in Token
      uses function isLong() defined in Token
   function comma_keyword() in line 1789
      142 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType) defined in TestSimplifyTokens
   function comparisons() in line 2181
      6 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType) defined in TestSimplifyTokens
   function consecutiveBraces() in line 4032
      6 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType) defined in TestSimplifyTokens
   function declareArray() in line 760
      17 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType) defined in TestSimplifyTokens
   function declareVar() in line 755
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType) defined in TestSimplifyTokens
   function dontRemoveIncrement() in line 778
      25 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType) defined in TestSimplifyTokens
   function double_plus() in line 557
      61 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType) defined in TestSimplifyTokens
   function doWhileAssign() in line 1705
      14 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function simplifyIfAndWhileAssign(const char) defined in TestSimplifyTokens
      uses function tok(const char,bool,Settings::PlatformType) defined in TestSimplifyTokens
   function duplicateDefinition() in line 3423
      7 lines of code
      0 parameters
      1 conditional paths
      uses variable settings0 defined in TestSimplifyTokens
      uses function tokenize(std::istream &,const char,const std::string &,bool) defined in Tokenizer
      uses variable list defined in Tokenizer
      uses function front() defined in TokenList
      uses function tokAt(int) defined in Token
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function duplicateDefinition(Token **,const Token *) defined in Tokenizer
      uses function tokens() defined in Tokenizer
   function elseif1() in line 840
      54 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeDebugListing(const char,bool,const char) defined in TestSimplifyTokens
      uses variable expected defined in extracttests.py
      uses function tok(const char,bool,Settings::PlatformType) defined in TestSimplifyTokens
   function enum1() in line 2864
      6 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType) defined in TestSimplifyTokens
   function enum10() in line 3055
      10 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function checkSimplifyEnum(const char,bool) defined in TestSimplifyTokens
      uses variable errout defined in redirect.h
   function enum11() in line 3066
      16 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function checkSimplifyEnum(const char,bool) defined in TestSimplifyTokens
      uses variable errout defined in redirect.h
   function enum12() in line 3083
      9 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function checkSimplifyEnum(const char,bool) defined in TestSimplifyTokens
   function enum13() in line 3093
      9 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function checkSimplifyEnum(const char,bool) defined in TestSimplifyTokens
   function enum14() in line 3103
      6 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function checkSimplifyEnum(const char,bool) defined in TestSimplifyTokens
   function enum15() in line 3110
      65 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function checkSimplifyEnum(const char,bool) defined in TestSimplifyTokens
      uses macro definition ASSERT_THROW defined in testsuite.h
   function enum16() in line 3176
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_THROW defined in testsuite.h
      uses function checkSimplifyEnum(const char,bool) defined in TestSimplifyTokens
   function enum17() in line 3181
      7 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function checkSimplifyEnum(const char,bool) defined in TestSimplifyTokens
      uses variable errout defined in redirect.h
   function enum18() in line 3189
      5 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function checkSimplifyEnum(const char,bool) defined in TestSimplifyTokens
   function enum19() in line 3195
      5 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function checkSimplifyEnum(const char,bool) defined in TestSimplifyTokens
   function enum2() in line 2871
      6 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType) defined in TestSimplifyTokens
   function enum20() in line 3201
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function checkSimplifyEnum(const char,bool) defined in TestSimplifyTokens
   function enum21() in line 3206
      5 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function checkSimplifyEnum(const char,bool) defined in TestSimplifyTokens
      uses variable errout defined in redirect.h
   function enum22() in line 3212
      37 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses function checkSimplifyEnum(const char,bool) defined in TestSimplifyTokens
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function enum23() in line 3250
      7 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function checkSimplifyEnum(const char,bool) defined in TestSimplifyTokens
      uses variable errout defined in redirect.h
   function enum24() in line 3258
      9 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function checkSimplifyEnum(const char,bool) defined in TestSimplifyTokens
      uses variable errout defined in redirect.h
   function enum25() in line 3268
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_THROW defined in testsuite.h
      uses function checkSimplifyEnum(const char,bool) defined in TestSimplifyTokens
   function enum26() in line 3273
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_THROW defined in testsuite.h
      uses function checkSimplifyEnum(const char,bool) defined in TestSimplifyTokens
   function enum27() in line 3278
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_THROW defined in testsuite.h
      uses function checkSimplifyEnum(const char,bool) defined in TestSimplifyTokens
   function enum28() in line 3283
      7 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function checkSimplifyEnum(const char,bool) defined in TestSimplifyTokens
   function enum29() in line 3291
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function checkSimplifyEnum(const char,bool) defined in TestSimplifyTokens
   function enum3() in line 2878
      6 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType) defined in TestSimplifyTokens
   function enum30() in line 3296
      21 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function checkSimplifyEnum(const char,bool) defined in TestSimplifyTokens
      uses variable errout defined in redirect.h
   function enum31() in line 3318
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function checkSimplifyEnum(const char,bool) defined in TestSimplifyTokens
   function enum32() in line 3323
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function checkSimplifyEnum(const char,bool) defined in TestSimplifyTokens
   function enum33() in line 3328
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function checkSimplifyEnum(const char,bool) defined in TestSimplifyTokens
   function enum34() in line 3333
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function checkSimplifyEnum(const char,bool) defined in TestSimplifyTokens
   function enum35() in line 3338
      4 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function checkSimplifyEnum(const char,bool) defined in TestSimplifyTokens
   function enum36() in line 3343
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function checkSimplifyEnum(const char,bool) defined in TestSimplifyTokens
   function enum37() in line 3348
      17 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function checkSimplifyEnum(const char,bool) defined in TestSimplifyTokens
      uses variable errout defined in redirect.h
   function enum38() in line 3366
      5 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses function checkSimplifyEnum(const char,bool) defined in TestSimplifyTokens
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function enum39() in line 3372
      5 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses function checkSimplifyEnum(const char,bool) defined in TestSimplifyTokens
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function enum4() in line 2885
      49 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType) defined in TestSimplifyTokens
   function enum40() in line 3378
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function checkSimplifyEnum(const char,bool) defined in TestSimplifyTokens
   function enum41() in line 3383
      11 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function checkSimplifyEnum(const char,bool) defined in TestSimplifyTokens
   function enum42() in line 3395
      5 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function checkSimplifyEnum(const char,bool) defined in TestSimplifyTokens
   function enum43() in line 3401
      5 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function checkSimplifyEnum(const char,bool) defined in TestSimplifyTokens
   function enum44() in line 3407
      9 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function checkSimplifyEnum(const char,bool) defined in TestSimplifyTokens
   function enum5() in line 2935
      22 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType) defined in TestSimplifyTokens
   function enum6() in line 2958
      5 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType) defined in TestSimplifyTokens
   function enum7() in line 2964
      24 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType) defined in TestSimplifyTokens
   function enum8() in line 2999
      40 lines of code
      0 parameters
      1 conditional paths
      uses function checkSimplifyEnum(const char,bool) defined in TestSimplifyTokens
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function enum9() in line 3040
      14 lines of code
      0 parameters
      1 conditional paths
      uses function checkSimplifyEnum(const char,bool) defined in TestSimplifyTokens
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function enumscope1() in line 3417
      5 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function checkSimplifyEnum(const char,bool) defined in TestSimplifyTokens
   function flowControl() in line 2209
      294 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokWithStdLib(const char) defined in TestSimplifyTokens
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
   function ifassign1() in line 1616
      11 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function simplifyIfAndWhileAssign(const char) defined in TestSimplifyTokens
      uses function tok(const char,bool,Settings::PlatformType) defined in TestSimplifyTokens
      uses macro definition TODO_ASSERT_EQUALS defined in testsuite.h
   function ifAssignWithCast() in line 1628
      20 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType) defined in TestSimplifyTokens
   function iftruefalse() in line 438
      72 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType) defined in TestSimplifyTokens
   function namespaces() in line 1566
      37 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType) defined in TestSimplifyTokens
      uses variable expected defined in extracttests.py
   function not1() in line 1720
      11 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType) defined in TestSimplifyTokens
   function or1() in line 1758
      22 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType) defined in TestSimplifyTokens
   function parentheses1() in line 724
      4 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType) defined in TestSimplifyTokens
   function parenthesesVar() in line 729
      25 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType) defined in TestSimplifyTokens
   function pointeralias1() in line 2751
      35 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType) defined in TestSimplifyTokens
   function pointeralias2() in line 2787
      9 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType) defined in TestSimplifyTokens
   function pointeralias3() in line 2797
      17 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType) defined in TestSimplifyTokens
   function pointeralias4() in line 2815
      14 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType) defined in TestSimplifyTokens
   function reduceConstness() in line 2830
      3 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType) defined in TestSimplifyTokens
   function redundant_plus() in line 619
      51 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType) defined in TestSimplifyTokens
   function redundant_plus_numbers() in line 671
      51 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType) defined in TestSimplifyTokens
   function redundant_semicolon() in line 3895
      4 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType) defined in TestSimplifyTokens
   function remove_comma() in line 1932
      84 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType) defined in TestSimplifyTokens
      uses variable expected defined in extracttests.py
   function removePostIncrement() in line 804
      11 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition TODO_ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType) defined in TestSimplifyTokens
   function removePreIncrement() in line 817
      22 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition TODO_ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType) defined in TestSimplifyTokens
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function removeRedundantFor() in line 4002
      29 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType) defined in TestSimplifyTokens
   function removestd() in line 3431
      8 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType) defined in TestSimplifyTokens
   function removeUnwantedKeywords() in line 3840
      23 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType) defined in TestSimplifyTokens
   function removeVoidFromFunction() in line 3934
      3 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType) defined in TestSimplifyTokens
   function return_strncat() in line 3950
      51 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType) defined in TestSimplifyTokens
   function run() in line 37
      236 lines of code
      0 parameters
      1 conditional paths
      uses macro definition LOAD_LIB_2 defined in testsuite.h
      uses variable settings_std defined in TestSimplifyTokens
      uses variable library defined in Settings
      uses variable settings_windows defined in TestSimplifyTokens
      uses variable settings0 defined in TestSimplifyTokens
      uses function addEnabled(const std::string &) defined in Settings
      uses variable settings1 defined in TestSimplifyTokens
      uses macro definition TEST_CASE defined in testsuite.h
      uses function simplifyTokenList1() defined in TestSimplifyTokens
      uses function simplifyAssignmentInFunctionCall() defined in TestSimplifyTokens
      uses function simplifyCompoundAssignment() defined in TestSimplifyTokens
      uses function cast() defined in TestSimplifyTokens
      uses function iftruefalse() defined in TestSimplifyTokens
      uses function combine_strings() defined in TestSimplifyTokens
      uses function double_plus() defined in TestSimplifyTokens
      uses function redundant_plus() defined in TestSimplifyTokens
      uses function redundant_plus_numbers() defined in TestSimplifyTokens
      uses function parentheses1() defined in TestSimplifyTokens
      uses function parenthesesVar() defined in TestSimplifyTokens
      uses function declareVar() defined in TestSimplifyTokens
      uses function declareArray() defined in TestSimplifyTokens
      uses function dontRemoveIncrement() defined in TestSimplifyTokens
      uses function removePostIncrement() defined in TestSimplifyTokens
      uses function removePreIncrement() defined in TestSimplifyTokens
      uses function elseif1() defined in TestSimplifyTokens
      uses function sizeof_array() defined in TestSimplifyTokens
      uses function sizeof5() defined in TestSimplifyTokens
      uses function sizeof6() defined in TestSimplifyTokens
      uses function sizeof7() defined in TestSimplifyTokens
      uses function sizeof8() defined in TestSimplifyTokens
      uses function sizeof9() defined in TestSimplifyTokens
      uses function sizeof10() defined in TestSimplifyTokens
      uses function sizeof11() defined in TestSimplifyTokens
      uses function sizeof12() defined in TestSimplifyTokens
      uses function sizeof13() defined in TestSimplifyTokens
      uses function sizeof14() defined in TestSimplifyTokens
      uses function sizeof15() defined in TestSimplifyTokens
      uses function sizeof16() defined in TestSimplifyTokens
      uses function sizeof17() defined in TestSimplifyTokens
      uses function sizeof18() defined in TestSimplifyTokens
      uses function sizeof19() defined in TestSimplifyTokens
      uses function sizeof20() defined in TestSimplifyTokens
      uses function sizeof21() defined in TestSimplifyTokens
      uses function sizeof22() defined in TestSimplifyTokens
      uses function sizeofsizeof() defined in TestSimplifyTokens
      uses function casting() defined in TestSimplifyTokens
      uses function strlen1() defined in TestSimplifyTokens
      uses function strlen2() defined in TestSimplifyTokens
      uses function namespaces() defined in TestSimplifyTokens
      uses function ifassign1() defined in TestSimplifyTokens
      uses function ifAssignWithCast() defined in TestSimplifyTokens
      uses function whileAssign1() defined in TestSimplifyTokens
      uses function whileAssign2() defined in TestSimplifyTokens
      uses function whileAssign3() defined in TestSimplifyTokens
      uses function whileAssign4() defined in TestSimplifyTokens
      uses function doWhileAssign() defined in TestSimplifyTokens
      uses function test_4881() defined in TestSimplifyTokens
      uses function combine_wstrings() defined in TestSimplifyTokens
      uses function not1() defined in TestSimplifyTokens
      uses function and1() defined in TestSimplifyTokens
      uses function or1() defined in TestSimplifyTokens
      uses function cAlternativeTokens() defined in TestSimplifyTokens
      uses function comma_keyword() defined in TestSimplifyTokens
      uses function remove_comma() defined in TestSimplifyTokens
      uses function simplifyConditionOperator() defined in TestSimplifyTokens
      uses function calculations() defined in TestSimplifyTokens
      uses function comparisons() defined in TestSimplifyTokens
      uses function simplifyFlowControl() defined in TestSimplifyTokens
      uses function flowControl() defined in TestSimplifyTokens
      uses function strcat1() defined in TestSimplifyTokens
      uses function strcat2() defined in TestSimplifyTokens
      uses function simplifyAtol() defined in TestSimplifyTokens
      uses function simplifyOperator1() defined in TestSimplifyTokens
      uses function simplifyOperator2() defined in TestSimplifyTokens
      uses function simplifyArrayAccessSyntax() defined in TestSimplifyTokens
      uses function simplify_numeric_condition() defined in TestSimplifyTokens
      uses function simplify_condition() defined in TestSimplifyTokens
      uses function pointeralias1() defined in TestSimplifyTokens
      uses function pointeralias2() defined in TestSimplifyTokens
      uses function pointeralias3() defined in TestSimplifyTokens
      uses function pointeralias4() defined in TestSimplifyTokens
      uses function reduceConstness() defined in TestSimplifyTokens
      uses function while0() defined in TestSimplifyTokens
      uses function while0for() defined in TestSimplifyTokens
      uses function while1() defined in TestSimplifyTokens
      uses function enum1() defined in TestSimplifyTokens
      uses function enum2() defined in TestSimplifyTokens
      uses function enum3() defined in TestSimplifyTokens
      uses function enum4() defined in TestSimplifyTokens
      uses function enum5() defined in TestSimplifyTokens
      uses function enum6() defined in TestSimplifyTokens
      uses function enum7() defined in TestSimplifyTokens
      uses function enum8() defined in TestSimplifyTokens
      uses function enum9() defined in TestSimplifyTokens
      uses function enum10() defined in TestSimplifyTokens
      uses function enum11() defined in TestSimplifyTokens
      uses function enum12() defined in TestSimplifyTokens
      uses function enum13() defined in TestSimplifyTokens
      uses function enum14() defined in TestSimplifyTokens
      uses function enum15() defined in TestSimplifyTokens
      uses function enum16() defined in TestSimplifyTokens
      uses function enum17() defined in TestSimplifyTokens
      uses function enum18() defined in TestSimplifyTokens
      uses function enum19() defined in TestSimplifyTokens
      uses function enum20() defined in TestSimplifyTokens
      uses function enum21() defined in TestSimplifyTokens
      uses function enum22() defined in TestSimplifyTokens
      uses function enum23() defined in TestSimplifyTokens
      uses function enum24() defined in TestSimplifyTokens
      uses function enum25() defined in TestSimplifyTokens
      uses function enum26() defined in TestSimplifyTokens
      uses function enum27() defined in TestSimplifyTokens
      uses function enum28() defined in TestSimplifyTokens
      uses function enum29() defined in TestSimplifyTokens
      uses function enum30() defined in TestSimplifyTokens
      uses function enum31() defined in TestSimplifyTokens
      uses function enum32() defined in TestSimplifyTokens
      uses function enum33() defined in TestSimplifyTokens
      uses function enum34() defined in TestSimplifyTokens
      uses function enum35() defined in TestSimplifyTokens
      uses function enum36() defined in TestSimplifyTokens
      uses function enum37() defined in TestSimplifyTokens
      uses function enum38() defined in TestSimplifyTokens
      uses function enum39() defined in TestSimplifyTokens
      uses function enum40() defined in TestSimplifyTokens
      uses function enum41() defined in TestSimplifyTokens
      uses function enum42() defined in TestSimplifyTokens
      uses function enum43() defined in TestSimplifyTokens
      uses function enum44() defined in TestSimplifyTokens
      uses function enumscope1() defined in TestSimplifyTokens
      uses function duplicateDefinition() defined in TestSimplifyTokens
      uses function removestd() defined in TestSimplifyTokens
      uses function simplifyInitVar() defined in TestSimplifyTokens
      uses function simplifyReference() defined in TestSimplifyTokens
      uses function simplifyRealloc() defined in TestSimplifyTokens
      uses function simplifyErrNoInWhile() defined in TestSimplifyTokens
      uses function simplifyFuncInWhile() defined in TestSimplifyTokens
      uses function simplifyStructDecl1() defined in TestSimplifyTokens
      uses function simplifyStructDecl2() defined in TestSimplifyTokens
      uses function simplifyStructDecl3() defined in TestSimplifyTokens
      uses function simplifyStructDecl4() defined in TestSimplifyTokens
      uses function simplifyStructDecl5() defined in TestSimplifyTokens
      uses function simplifyStructDecl6() defined in TestSimplifyTokens
      uses function simplifyStructDecl7() defined in TestSimplifyTokens
      uses function removeUnwantedKeywords() defined in TestSimplifyTokens
      uses function simplifyCallingConvention() defined in TestSimplifyTokens
      uses function simplifyFunctorCall() defined in TestSimplifyTokens
      uses function simplifyFunctionPointer() defined in TestSimplifyTokens
      uses function redundant_semicolon() defined in TestSimplifyTokens
      uses function simplifyFunctionReturn() defined in TestSimplifyTokens
      uses function removeVoidFromFunction() defined in TestSimplifyTokens
      uses function simplifyVarDecl1() defined in TestSimplifyTokens
      uses function simplifyVarDecl2() defined in TestSimplifyTokens
      uses function return_strncat() defined in TestSimplifyTokens
      uses function removeRedundantFor() defined in TestSimplifyTokens
      uses function consecutiveBraces() defined in TestSimplifyTokens
      uses function undefinedSizeArray() defined in TestSimplifyTokens
      uses function simplifyArrayAddress() defined in TestSimplifyTokens
      uses function simplifyCharAt() defined in TestSimplifyTokens
      uses function simplifyOverride() defined in TestSimplifyTokens
   function simplify_condition() in line 2667
      82 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType) defined in TestSimplifyTokens
   function simplify_numeric_condition() in line 2577
      89 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType) defined in TestSimplifyTokens
   function simplifyArrayAccessSyntax() in line 2572
      4 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeDebugListing(const char,bool,const char) defined in TestSimplifyTokens
   function simplifyArrayAddress() in line 4049
      13 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType) defined in TestSimplifyTokens
   function simplifyAssignmentInFunctionCall() in line 349
      4 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType) defined in TestSimplifyTokens
   function simplifyAtol() in line 2525
      6 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType) defined in TestSimplifyTokens
   function simplifyCallingConvention() in line 3864
      21 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType) defined in TestSimplifyTokens
   function simplifyCharAt() in line 4063
      11 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType) defined in TestSimplifyTokens
   function simplifyCompoundAssignment() in line 354
      61 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType) defined in TestSimplifyTokens
   function simplifyConditionOperator() in line 2017
      88 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType) defined in TestSimplifyTokens
      uses macro definition TODO_ASSERT_EQUALS defined in testsuite.h
   function simplifyErrNoInWhile() in line 3479
      6 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType) defined in TestSimplifyTokens
   function simplifyFlowControl() in line 2189
      19 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokWithStdLib(const char) defined in TestSimplifyTokens
   function simplifyFuncInWhile() in line 3486
      28 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType) defined in TestSimplifyTokens
   function simplifyFunctionPointer() in line 3891
      3 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType) defined in TestSimplifyTokens
   function simplifyFunctionReturn() in line 3900
      33 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType) defined in TestSimplifyTokens
   function simplifyFunctorCall() in line 3886
      3 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType) defined in TestSimplifyTokens
   function simplifyIfAndWhileAssign(const char) in line 1605
      10 lines of code
      1 parameters
      1 conditional paths
      uses variable settings0 defined in TestSimplifyTokens
      uses variable code defined in extracttests.py
      uses function tokenize(std::istream &,const char,const std::string &,bool) defined in Tokenizer
      uses function simplifyIfAndWhileAssign() defined in Tokenizer
      uses function tokens() defined in Tokenizer
      uses function stringifyList(bool,bool,bool,bool,bool,const std::vector< std::string > *,const Token *) defined in Token
   function simplifyInitVar() in line 3440
      17 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType) defined in TestSimplifyTokens
   function simplifyOperator1() in line 2532
      14 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType) defined in TestSimplifyTokens
   function simplifyOperator2() in line 2547
      24 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType) defined in TestSimplifyTokens
   function simplifyOverride() in line 4088
      8 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType) defined in TestSimplifyTokens
      uses macro definition REGISTER_TEST defined in testsuite.h
   function simplifyRealloc() in line 3468
      10 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType) defined in TestSimplifyTokens
   function simplifyReference() in line 3458
      9 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType) defined in TestSimplifyTokens
   function simplifyStructDecl1() in line 3515
      141 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType) defined in TestSimplifyTokens
   function simplifyStructDecl2() in line 3657
      5 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType) defined in TestSimplifyTokens
   function simplifyStructDecl3() in line 3663
      121 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType) defined in TestSimplifyTokens
   function simplifyStructDecl4() in line 3785
      27 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType) defined in TestSimplifyTokens
   function simplifyStructDecl5() in line 3813
      10 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses function tok(const char,bool,Settings::PlatformType) defined in TestSimplifyTokens
   function simplifyStructDecl6() in line 3824
      8 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType) defined in TestSimplifyTokens
   function simplifyStructDecl7() in line 3833
      6 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType) defined in TestSimplifyTokens
   function simplifyTokenList1() in line 343
      5 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType) defined in TestSimplifyTokens
   function simplifyVarDecl1() in line 3938
      5 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses function tok(const char,bool,Settings::PlatformType) defined in TestSimplifyTokens
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function simplifyVarDecl2() in line 3944
      5 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses function tok(const char,bool,Settings::PlatformType) defined in TestSimplifyTokens
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function sizeof10() in line 1139
      8 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType) defined in TestSimplifyTokens
      uses enumvalue Win32A defined in Settings
   function sizeof11() in line 1148
      30 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType) defined in TestSimplifyTokens
   function sizeof12() in line 1179
      16 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType) defined in TestSimplifyTokens
   function sizeof13() in line 1196
      23 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType) defined in TestSimplifyTokens
   function sizeof14() in line 1220
      17 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType) defined in TestSimplifyTokens
   function sizeof15() in line 1238
      9 lines of code
      0 parameters
      1 conditional paths
      uses function tok(const char,bool,Settings::PlatformType) defined in TestSimplifyTokens
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function sizeof16() in line 1248
      10 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType) defined in TestSimplifyTokens
      uses variable errout defined in redirect.h
   function sizeof17() in line 1259
      10 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType) defined in TestSimplifyTokens
      uses variable errout defined in redirect.h
   function sizeof18() in line 1270
      141 lines of code
      0 parameters
      1 conditional paths
      uses variable expected defined in extracttests.py
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType) defined in TestSimplifyTokens
      uses variable errout defined in redirect.h
   function sizeof19() in line 1412
      24 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType) defined in TestSimplifyTokens
      uses variable errout defined in redirect.h
   function sizeof20() in line 1437
      16 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType) defined in TestSimplifyTokens
   function sizeof21() in line 1454
      18 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses function tok(const char,bool,Settings::PlatformType) defined in TestSimplifyTokens
   function sizeof22() in line 1473
      5 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition TODO_ASSERT_EQUALS defined in testsuite.h
      uses function tokWithStdLib(const char) defined in TestSimplifyTokens
   function sizeof5() in line 955
      9 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses function sizeofFromTokenizer(const char) defined in TestSimplifyTokens
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType) defined in TestSimplifyTokens
   function sizeof6() in line 965
      9 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType) defined in TestSimplifyTokens
   function sizeof7() in line 975
      6 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType) defined in TestSimplifyTokens
      uses enumvalue Native defined in Settings
      uses function tokWithWindows(const char,bool,Settings::PlatformType) defined in TestSimplifyTokens
      uses enumvalue Win32A defined in Settings
   function sizeof8() in line 982
      35 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses function sizeofFromTokenizer(const char) defined in TestSimplifyTokens
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType) defined in TestSimplifyTokens
   function sizeof9() in line 1018
      120 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses function sizeofFromTokenizer(const char) defined in TestSimplifyTokens
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType) defined in TestSimplifyTokens
   function sizeof_array() in line 906
      48 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType) defined in TestSimplifyTokens
   function sizeofFromTokenizer(const char) in line 896
      7 lines of code
      1 parameters
      1 conditional paths
      uses variable settings0 defined in TestSimplifyTokens
      uses function fillTypeSizes() defined in Tokenizer
      uses function str(T &&) defined in Token
      uses function sizeOfType(const Token *) defined in Tokenizer
   function sizeofsizeof() in line 1479
      9 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType) defined in TestSimplifyTokens
      uses variable errout defined in redirect.h
   function strcat1() in line 2504
      12 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType) defined in TestSimplifyTokens
   function strcat2() in line 2516
      8 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType) defined in TestSimplifyTokens
   function strlen1() in line 1525
      33 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType) defined in TestSimplifyTokens
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
   function strlen2() in line 1559
      5 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType) defined in TestSimplifyTokens
   function test_4881() in line 4075
      12 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType) defined in TestSimplifyTokens
   function tok(const char,bool,Settings::PlatformType) in line 274
      14 lines of code
      3 parameters
      2 conditional paths
      uses variable errout defined in redirect.h
      uses variable settings0 defined in TestSimplifyTokens
      uses function platform(PlatformType) defined in Settings
      uses variable code defined in extracttests.py
      uses function tokenize(std::istream &,const char,const std::string &,bool) defined in Tokenizer
      uses function simplifyTokenList2() defined in Tokenizer
      uses function tokens() defined in Tokenizer
      uses function stringifyList(bool,bool,bool,bool,bool,const std::vector< std::string > *,const Token *) defined in Token
   function tok(const char,const char,bool) in line 304
      12 lines of code
      3 parameters
      2 conditional paths
      uses variable errout defined in redirect.h
      uses variable settings0 defined in TestSimplifyTokens
      uses variable code defined in extracttests.py
      uses function tokenize(std::istream &,const char,const std::string &,bool) defined in Tokenizer
      uses variable filename defined in extracttests.py
      uses function simplifyTokenList2() defined in Tokenizer
      uses function tokens() defined in Tokenizer
      uses function stringifyList(bool,bool,bool,bool,bool,const std::vector< std::string > *,const Token *) defined in Token
   function tokenizeDebugListing(const char,bool,const char) in line 329
      13 lines of code
      3 parameters
      2 conditional paths
      uses variable errout defined in redirect.h
      uses variable settings0 defined in TestSimplifyTokens
      uses variable code defined in extracttests.py
      uses function tokenize(std::istream &,const char,const std::string &,bool) defined in Tokenizer
      uses variable filename defined in extracttests.py
      uses function simplifyTokenList2() defined in Tokenizer
      uses function tokens() defined in Tokenizer
      uses function stringifyList(bool,bool,bool,bool,bool,const std::vector< std::string > *,const Token *) defined in Token
   function tokWithStdLib(const char) in line 317
      11 lines of code
      1 parameters
      1 conditional paths
      uses variable errout defined in redirect.h
      uses variable settings_std defined in TestSimplifyTokens
      uses variable code defined in extracttests.py
      uses function tokenize(std::istream &,const char,const std::string &,bool) defined in Tokenizer
      uses function simplifyTokenList2() defined in Tokenizer
      uses function tokens() defined in Tokenizer
      uses function stringifyList(bool,bool,bool,bool,bool,const std::vector< std::string > *,const Token *) defined in Token
   function tokWithWindows(const char,bool,Settings::PlatformType) in line 289
      14 lines of code
      3 parameters
      2 conditional paths
      uses variable errout defined in redirect.h
      uses variable settings_windows defined in TestSimplifyTokens
      uses function platform(PlatformType) defined in Settings
      uses variable code defined in extracttests.py
      uses function tokenize(std::istream &,const char,const std::string &,bool) defined in Tokenizer
      uses function simplifyTokenList2() defined in Tokenizer
      uses function tokens() defined in Tokenizer
      uses function stringifyList(bool,bool,bool,bool,bool,const std::vector< std::string > *,const Token *) defined in Token
   function undefinedSizeArray() in line 4039
      9 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType) defined in TestSimplifyTokens
   function while0() in line 2834
      9 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType) defined in TestSimplifyTokens
   function while0for() in line 2844
      12 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType) defined in TestSimplifyTokens
   function while1() in line 2857
      6 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType) defined in TestSimplifyTokens
   function whileAssign1() in line 1649
      13 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function simplifyIfAndWhileAssign(const char) defined in TestSimplifyTokens
      uses function tok(const char,bool,Settings::PlatformType) defined in TestSimplifyTokens
   function whileAssign2() in line 1663
      12 lines of code
      0 parameters
      1 conditional paths
      uses function tok(const char,bool,Settings::PlatformType) defined in TestSimplifyTokens
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function whileAssign3() in line 1676
      12 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeDebugListing(const char,bool,const char) defined in TestSimplifyTokens
   function whileAssign4() in line 1689
      15 lines of code
      0 parameters
      2 conditional paths
      uses variable errout defined in redirect.h
      uses variable settings0 defined in TestSimplifyTokens
      uses function tokenize(std::istream &,const char,const std::string &,bool) defined in Tokenizer
      uses function simplifyTokenList2() defined in Tokenizer
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokens() defined in Tokenizer
      uses function stringifyList(bool,bool,bool,bool,bool,const std::vector< std::string > *,const Token *) defined in Token
      uses macro definition ASSERT defined in testsuite.h
      uses function tokAt(int) defined in Token
      uses function linkAt(int) defined in Token
   function TestSimplifyTokens() in line 27
      protection public
      2 lines of code
      0 parameters
      1 conditional paths
   variable settings0 in line 32
   variable settings1 in line 33
   variable settings_std in line 34
   variable settings_windows in line 35
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/test/testsimplifytypedef.cpp
module TestSimplifyTypedef
   inherits from TestFixture
   function checkSimplifyTypedef(const char) in line 201
      9 lines of code
      1 parameters
      1 conditional paths
      uses variable errout defined in redirect.h
      uses variable settings2 defined in TestSimplifyTypedef
      uses variable inconclusive defined in Settings
      uses variable debugwarnings defined in Settings
      uses variable code defined in extracttests.py
      uses function tokenize(std::istream &,const char,const std::string &,bool) defined in Tokenizer
   function run() in line 36
      134 lines of code
      0 parameters
      1 conditional paths
      uses variable settings0 defined in TestSimplifyTypedef
      uses function addEnabled(const std::string &) defined in Settings
      uses variable settings2 defined in TestSimplifyTypedef
      uses macro definition TEST_CASE defined in testsuite.h
      uses function simplifyTypedef1() defined in TestSimplifyTypedef
      uses function simplifyTypedef2() defined in TestSimplifyTypedef
      uses function simplifyTypedef3() defined in TestSimplifyTypedef
      uses function simplifyTypedef4() defined in TestSimplifyTypedef
      uses function simplifyTypedef5() defined in TestSimplifyTypedef
      uses function simplifyTypedef6() defined in TestSimplifyTypedef
      uses function simplifyTypedef7() defined in TestSimplifyTypedef
      uses function simplifyTypedef8() defined in TestSimplifyTypedef
      uses function simplifyTypedef9() defined in TestSimplifyTypedef
      uses function simplifyTypedef10() defined in TestSimplifyTypedef
      uses function simplifyTypedef11() defined in TestSimplifyTypedef
      uses function simplifyTypedef12() defined in TestSimplifyTypedef
      uses function simplifyTypedef13() defined in TestSimplifyTypedef
      uses function simplifyTypedef14() defined in TestSimplifyTypedef
      uses function simplifyTypedef15() defined in TestSimplifyTypedef
      uses function simplifyTypedef16() defined in TestSimplifyTypedef
      uses function simplifyTypedef17() defined in TestSimplifyTypedef
      uses function simplifyTypedef18() defined in TestSimplifyTypedef
      uses function simplifyTypedef19() defined in TestSimplifyTypedef
      uses function simplifyTypedef20() defined in TestSimplifyTypedef
      uses function simplifyTypedef21() defined in TestSimplifyTypedef
      uses function simplifyTypedef22() defined in TestSimplifyTypedef
      uses function simplifyTypedef23() defined in TestSimplifyTypedef
      uses function simplifyTypedef24() defined in TestSimplifyTypedef
      uses function simplifyTypedef25() defined in TestSimplifyTypedef
      uses function simplifyTypedef26() defined in TestSimplifyTypedef
      uses function simplifyTypedef27() defined in TestSimplifyTypedef
      uses function simplifyTypedef28() defined in TestSimplifyTypedef
      uses function simplifyTypedef29() defined in TestSimplifyTypedef
      uses function simplifyTypedef30() defined in TestSimplifyTypedef
      uses function simplifyTypedef31() defined in TestSimplifyTypedef
      uses function simplifyTypedef32() defined in TestSimplifyTypedef
      uses function simplifyTypedef33() defined in TestSimplifyTypedef
      uses function simplifyTypedef34() defined in TestSimplifyTypedef
      uses function simplifyTypedef35() defined in TestSimplifyTypedef
      uses function simplifyTypedef36() defined in TestSimplifyTypedef
      uses function simplifyTypedef37() defined in TestSimplifyTypedef
      uses function simplifyTypedef38() defined in TestSimplifyTypedef
      uses function simplifyTypedef39() defined in TestSimplifyTypedef
      uses function simplifyTypedef40() defined in TestSimplifyTypedef
      uses function simplifyTypedef41() defined in TestSimplifyTypedef
      uses function simplifyTypedef43() defined in TestSimplifyTypedef
      uses function simplifyTypedef44() defined in TestSimplifyTypedef
      uses function simplifyTypedef45() defined in TestSimplifyTypedef
      uses function simplifyTypedef46() defined in TestSimplifyTypedef
      uses function simplifyTypedef47() defined in TestSimplifyTypedef
      uses function simplifyTypedef48() defined in TestSimplifyTypedef
      uses function simplifyTypedef49() defined in TestSimplifyTypedef
      uses function simplifyTypedef50() defined in TestSimplifyTypedef
      uses function simplifyTypedef51() defined in TestSimplifyTypedef
      uses function simplifyTypedef52() defined in TestSimplifyTypedef
      uses function simplifyTypedef53() defined in TestSimplifyTypedef
      uses function simplifyTypedef54() defined in TestSimplifyTypedef
      uses function simplifyTypedef55() defined in TestSimplifyTypedef
      uses function simplifyTypedef56() defined in TestSimplifyTypedef
      uses function simplifyTypedef57() defined in TestSimplifyTypedef
      uses function simplifyTypedef58() defined in TestSimplifyTypedef
      uses function simplifyTypedef59() defined in TestSimplifyTypedef
      uses function simplifyTypedef60() defined in TestSimplifyTypedef
      uses function simplifyTypedef61() defined in TestSimplifyTypedef
      uses function simplifyTypedef62() defined in TestSimplifyTypedef
      uses function simplifyTypedef63() defined in TestSimplifyTypedef
      uses function simplifyTypedef64() defined in TestSimplifyTypedef
      uses function simplifyTypedef65() defined in TestSimplifyTypedef
      uses function simplifyTypedef66() defined in TestSimplifyTypedef
      uses function simplifyTypedef67() defined in TestSimplifyTypedef
      uses function simplifyTypedef68() defined in TestSimplifyTypedef
      uses function simplifyTypedef69() defined in TestSimplifyTypedef
      uses function simplifyTypedef70() defined in TestSimplifyTypedef
      uses function simplifyTypedef71() defined in TestSimplifyTypedef
      uses function simplifyTypedef72() defined in TestSimplifyTypedef
      uses function simplifyTypedef73() defined in TestSimplifyTypedef
      uses function simplifyTypedef74() defined in TestSimplifyTypedef
      uses function simplifyTypedef75() defined in TestSimplifyTypedef
      uses function simplifyTypedef76() defined in TestSimplifyTypedef
      uses function simplifyTypedef77() defined in TestSimplifyTypedef
      uses function simplifyTypedef78() defined in TestSimplifyTypedef
      uses function simplifyTypedef79() defined in TestSimplifyTypedef
      uses function simplifyTypedef80() defined in TestSimplifyTypedef
      uses function simplifyTypedef81() defined in TestSimplifyTypedef
      uses function simplifyTypedef82() defined in TestSimplifyTypedef
      uses function simplifyTypedef83() defined in TestSimplifyTypedef
      uses function simplifyTypedef84() defined in TestSimplifyTypedef
      uses function simplifyTypedef85() defined in TestSimplifyTypedef
      uses function simplifyTypedef86() defined in TestSimplifyTypedef
      uses function simplifyTypedef87() defined in TestSimplifyTypedef
      uses function simplifyTypedef88() defined in TestSimplifyTypedef
      uses function simplifyTypedef89() defined in TestSimplifyTypedef
      uses function simplifyTypedef90() defined in TestSimplifyTypedef
      uses function simplifyTypedef91() defined in TestSimplifyTypedef
      uses function simplifyTypedef92() defined in TestSimplifyTypedef
      uses function simplifyTypedef93() defined in TestSimplifyTypedef
      uses function simplifyTypedef94() defined in TestSimplifyTypedef
      uses function simplifyTypedef95() defined in TestSimplifyTypedef
      uses function simplifyTypedef96() defined in TestSimplifyTypedef
      uses function simplifyTypedef97() defined in TestSimplifyTypedef
      uses function simplifyTypedef98() defined in TestSimplifyTypedef
      uses function simplifyTypedef99() defined in TestSimplifyTypedef
      uses function simplifyTypedef100() defined in TestSimplifyTypedef
      uses function simplifyTypedef101() defined in TestSimplifyTypedef
      uses function simplifyTypedef102() defined in TestSimplifyTypedef
      uses function simplifyTypedef103() defined in TestSimplifyTypedef
      uses function simplifyTypedef104() defined in TestSimplifyTypedef
      uses function simplifyTypedef105() defined in TestSimplifyTypedef
      uses function simplifyTypedef106() defined in TestSimplifyTypedef
      uses function simplifyTypedef107() defined in TestSimplifyTypedef
      uses function simplifyTypedef108() defined in TestSimplifyTypedef
      uses function simplifyTypedef109() defined in TestSimplifyTypedef
      uses function simplifyTypedef110() defined in TestSimplifyTypedef
      uses function simplifyTypedef111() defined in TestSimplifyTypedef
      uses function simplifyTypedef112() defined in TestSimplifyTypedef
      uses function simplifyTypedef113() defined in TestSimplifyTypedef
      uses function simplifyTypedef114() defined in TestSimplifyTypedef
      uses function simplifyTypedef115() defined in TestSimplifyTypedef
      uses function simplifyTypedef116() defined in TestSimplifyTypedef
      uses function simplifyTypedef117() defined in TestSimplifyTypedef
      uses function simplifyTypedefFunction1() defined in TestSimplifyTypedef
      uses function simplifyTypedefFunction2() defined in TestSimplifyTypedef
      uses function simplifyTypedefFunction3() defined in TestSimplifyTypedef
      uses function simplifyTypedefFunction4() defined in TestSimplifyTypedef
      uses function simplifyTypedefFunction5() defined in TestSimplifyTypedef
      uses function simplifyTypedefFunction6() defined in TestSimplifyTypedef
      uses function simplifyTypedefFunction7() defined in TestSimplifyTypedef
      uses function simplifyTypedefFunction8() defined in TestSimplifyTypedef
      uses function simplifyTypedefFunction9() defined in TestSimplifyTypedef
      uses function simplifyTypedefFunction10() defined in TestSimplifyTypedef
      uses function simplifyTypedefShadow() defined in TestSimplifyTypedef
   function simplifyTypedef(const char) in line 188
      12 lines of code
      1 parameters
      1 conditional paths
      uses variable errout defined in redirect.h
      uses variable settings1 defined in TestSimplifyTypedef
      uses variable code defined in extracttests.py
      uses variable list defined in Tokenizer
      uses function createTokens(std::istream &,const std::string &) defined in TokenList
      uses function createLinks() defined in Tokenizer
      uses function simplifyTypedef() defined in Tokenizer
      uses function tokens() defined in Tokenizer
      uses function stringifyList(bool,bool,bool,bool,bool,const std::vector< std::string > *,const Token *) defined in Token
   function simplifyTypedef1() in line 213
      30 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType,bool) defined in TestSimplifyTypedef
   function simplifyTypedef10() in line 413
      25 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType,bool) defined in TestSimplifyTypedef
   function simplifyTypedef100() in line 2203
      10 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses function tok(const char,bool,Settings::PlatformType,bool) defined in TestSimplifyTypedef
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function simplifyTypedef101() in line 2214
      5 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_THROW defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType,bool) defined in TestSimplifyTypedef
   function simplifyTypedef102() in line 2220
      9 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses function tok(const char,bool,Settings::PlatformType,bool) defined in TestSimplifyTypedef
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function simplifyTypedef103() in line 2230
      9 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses function tok(const char,bool,Settings::PlatformType,bool) defined in TestSimplifyTypedef
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function simplifyTypedef104() in line 2240
      5 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType,bool) defined in TestSimplifyTypedef
      uses variable errout defined in redirect.h
   function simplifyTypedef105() in line 2246
      5 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses function tok(const char,bool,Settings::PlatformType,bool) defined in TestSimplifyTypedef
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function simplifyTypedef106() in line 2252
      5 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses function tok(const char,bool,Settings::PlatformType,bool) defined in TestSimplifyTypedef
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function simplifyTypedef107() in line 2258
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_THROW defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType,bool) defined in TestSimplifyTypedef
   function simplifyTypedef108() in line 2263
      12 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType,bool) defined in TestSimplifyTypedef
   function simplifyTypedef109() in line 2276
      7 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType,bool) defined in TestSimplifyTypedef
      uses variable errout defined in redirect.h
   function simplifyTypedef11() in line 439
      11 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType,bool) defined in TestSimplifyTypedef
   function simplifyTypedef110() in line 2284
      59 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType,bool) defined in TestSimplifyTypedef
      uses enumvalue Native defined in Settings
      uses variable errout defined in redirect.h
   function simplifyTypedef111() in line 2344
      32 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType,bool) defined in TestSimplifyTypedef
   function simplifyTypedef112() in line 2377
      18 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType,bool) defined in TestSimplifyTypedef
      uses variable errout defined in redirect.h
   function simplifyTypedef113() in line 2396
      6 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType,bool) defined in TestSimplifyTypedef
   function simplifyTypedef114() in line 2403
      6 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType,bool) defined in TestSimplifyTypedef
   function simplifyTypedef115() in line 2410
      9 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType,bool) defined in TestSimplifyTypedef
      uses variable errout defined in redirect.h
   function simplifyTypedef116() in line 2420
      15 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType,bool) defined in TestSimplifyTypedef
      uses variable errout defined in redirect.h
   function simplifyTypedef117() in line 2436
      12 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType,bool) defined in TestSimplifyTypedef
      uses variable errout defined in redirect.h
   function simplifyTypedef12() in line 451
      18 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType,bool) defined in TestSimplifyTypedef
   function simplifyTypedef13() in line 470
      10 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses function tok(const char,bool,Settings::PlatformType,bool) defined in TestSimplifyTypedef
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function simplifyTypedef14() in line 481
      18 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses function tok(const char,bool,Settings::PlatformType,bool) defined in TestSimplifyTypedef
      uses enumvalue Native defined in Settings
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function simplifyTypedef15() in line 500
      19 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType,bool) defined in TestSimplifyTypedef
   function simplifyTypedef16() in line 520
      12 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses function tok(const char,bool,Settings::PlatformType,bool) defined in TestSimplifyTypedef
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function simplifyTypedef17() in line 533
      11 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType,bool) defined in TestSimplifyTypedef
   function simplifyTypedef18() in line 545
      5 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType,bool) defined in TestSimplifyTypedef
   function simplifyTypedef19() in line 551
      45 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType,bool) defined in TestSimplifyTypedef
   function simplifyTypedef2() in line 244
      20 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType,bool) defined in TestSimplifyTypedef
   function simplifyTypedef20() in line 597
      5 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType,bool) defined in TestSimplifyTypedef
   function simplifyTypedef21() in line 603
      14 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function simplifyTypedef(const char) defined in TestSimplifyTypedef
   function simplifyTypedef22() in line 618
      87 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType,bool) defined in TestSimplifyTypedef
   function simplifyTypedef23() in line 706
      11 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType,bool) defined in TestSimplifyTypedef
   function simplifyTypedef24() in line 718
      33 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType,bool) defined in TestSimplifyTypedef
   function simplifyTypedef25() in line 752
      30 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function simplifyTypedef(const char) defined in TestSimplifyTypedef
   function simplifyTypedef26() in line 783
      22 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType,bool) defined in TestSimplifyTypedef
   function simplifyTypedef27() in line 806
      17 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType,bool) defined in TestSimplifyTypedef
   function simplifyTypedef28() in line 824
      8 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType,bool) defined in TestSimplifyTypedef
   function simplifyTypedef29() in line 833
      20 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType,bool) defined in TestSimplifyTypedef
   function simplifyTypedef3() in line 265
      28 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType,bool) defined in TestSimplifyTypedef
   function simplifyTypedef30() in line 854
      15 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType,bool) defined in TestSimplifyTypedef
   function simplifyTypedef31() in line 870
      47 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType,bool) defined in TestSimplifyTypedef
   function simplifyTypedef32() in line 918
      15 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType,bool) defined in TestSimplifyTypedef
   function simplifyTypedef33() in line 934
      60 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType,bool) defined in TestSimplifyTypedef
   function simplifyTypedef34() in line 995
      17 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType,bool) defined in TestSimplifyTypedef
   function simplifyTypedef35() in line 1013
      75 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType,bool) defined in TestSimplifyTypedef
      uses variable errout defined in redirect.h
   function simplifyTypedef36() in line 1089
      13 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType,bool) defined in TestSimplifyTypedef
   function simplifyTypedef37() in line 1103
      27 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses function checkSimplifyTypedef(const char) defined in TestSimplifyTypedef
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
      uses variable expected defined in extracttests.py
      uses function tok(const char,bool,Settings::PlatformType,bool) defined in TestSimplifyTypedef
   function simplifyTypedef38() in line 1131
      7 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType,bool) defined in TestSimplifyTypedef
      uses variable errout defined in redirect.h
   function simplifyTypedef39() in line 1139
      7 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType,bool) defined in TestSimplifyTypedef
      uses variable errout defined in redirect.h
   function simplifyTypedef4() in line 294
      19 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType,bool) defined in TestSimplifyTypedef
   function simplifyTypedef40() in line 1147
      52 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType,bool) defined in TestSimplifyTypedef
      uses variable errout defined in redirect.h
      uses function checkSimplifyTypedef(const char) defined in TestSimplifyTypedef
   function simplifyTypedef41() in line 1200
      10 lines of code
      0 parameters
      1 conditional paths
      uses function checkSimplifyTypedef(const char) defined in TestSimplifyTypedef
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function simplifyTypedef43() in line 1211
      50 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType,bool) defined in TestSimplifyTypedef
      uses variable errout defined in redirect.h
   function simplifyTypedef44() in line 1262
      73 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType,bool) defined in TestSimplifyTypedef
      uses variable errout defined in redirect.h
   function simplifyTypedef45() in line 1336
      10 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses function checkSimplifyTypedef(const char) defined in TestSimplifyTypedef
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function simplifyTypedef46() in line 1347
      9 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType,bool) defined in TestSimplifyTypedef
   function simplifyTypedef47() in line 1357
      19 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType,bool) defined in TestSimplifyTypedef
   function simplifyTypedef48() in line 1377
      15 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType,bool) defined in TestSimplifyTypedef
   function simplifyTypedef49() in line 1393
      15 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType,bool) defined in TestSimplifyTypedef
   function simplifyTypedef5() in line 314
      17 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType,bool) defined in TestSimplifyTypedef
   function simplifyTypedef50() in line 1409
      19 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType,bool) defined in TestSimplifyTypedef
   function simplifyTypedef51() in line 1429
      10 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType,bool) defined in TestSimplifyTypedef
   function simplifyTypedef52() in line 1440
      20 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType,bool) defined in TestSimplifyTypedef
      uses variable errout defined in redirect.h
      uses function checkSimplifyTypedef(const char) defined in TestSimplifyTypedef
   function simplifyTypedef53() in line 1461
      24 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses function checkSimplifyTypedef(const char) defined in TestSimplifyTypedef
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function simplifyTypedef54() in line 1486
      17 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses function checkSimplifyTypedef(const char) defined in TestSimplifyTypedef
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function simplifyTypedef55() in line 1504
      18 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType,bool) defined in TestSimplifyTypedef
      uses function checkSimplifyTypedef(const char) defined in TestSimplifyTypedef
      uses variable errout defined in redirect.h
   function simplifyTypedef56() in line 1523
      16 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType,bool) defined in TestSimplifyTypedef
      uses variable errout defined in redirect.h
   function simplifyTypedef57() in line 1540
      14 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType,bool) defined in TestSimplifyTypedef
      uses variable errout defined in redirect.h
   function simplifyTypedef58() in line 1555
      21 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType,bool) defined in TestSimplifyTypedef
      uses variable errout defined in redirect.h
   function simplifyTypedef59() in line 1577
      9 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType,bool) defined in TestSimplifyTypedef
      uses variable errout defined in redirect.h
   function simplifyTypedef6() in line 332
      16 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType,bool) defined in TestSimplifyTypedef
   function simplifyTypedef60() in line 1587
      13 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType,bool) defined in TestSimplifyTypedef
      uses variable errout defined in redirect.h
   function simplifyTypedef61() in line 1601
      15 lines of code
      0 parameters
      1 conditional paths
      uses function checkSimplifyTypedef(const char) defined in TestSimplifyTypedef
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function simplifyTypedef62() in line 1617
      45 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType,bool) defined in TestSimplifyTypedef
      uses variable errout defined in redirect.h
   function simplifyTypedef63() in line 1663
      7 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses function tok(const char,bool,Settings::PlatformType,bool) defined in TestSimplifyTypedef
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function simplifyTypedef64() in line 1671
      7 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses function tok(const char,bool,Settings::PlatformType,bool) defined in TestSimplifyTypedef
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function simplifyTypedef65() in line 1679
      10 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses function tok(const char,bool,Settings::PlatformType,bool) defined in TestSimplifyTypedef
      uses enumvalue Native defined in Settings
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function simplifyTypedef66() in line 1690
      6 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses function tok(const char,bool,Settings::PlatformType,bool) defined in TestSimplifyTypedef
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function simplifyTypedef67() in line 1697
      11 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType,bool) defined in TestSimplifyTypedef
      uses variable errout defined in redirect.h
   function simplifyTypedef68() in line 1709
      7 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses function tok(const char,bool,Settings::PlatformType,bool) defined in TestSimplifyTypedef
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function simplifyTypedef69() in line 1717
      13 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType,bool) defined in TestSimplifyTypedef
      uses variable errout defined in redirect.h
   function simplifyTypedef7() in line 349
      6 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType,bool) defined in TestSimplifyTypedef
   function simplifyTypedef70() in line 1731
      7 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType,bool) defined in TestSimplifyTypedef
      uses variable errout defined in redirect.h
   function simplifyTypedef71() in line 1739
      16 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType,bool) defined in TestSimplifyTypedef
      uses variable errout defined in redirect.h
   function simplifyTypedef72() in line 1756
      58 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType,bool) defined in TestSimplifyTypedef
      uses variable errout defined in redirect.h
   function simplifyTypedef73() in line 1815
      12 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType,bool) defined in TestSimplifyTypedef
      uses variable errout defined in redirect.h
   function simplifyTypedef74() in line 1828
      10 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType,bool) defined in TestSimplifyTypedef
      uses variable errout defined in redirect.h
   function simplifyTypedef75() in line 1839
      5 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType,bool) defined in TestSimplifyTypedef
      uses enumvalue Native defined in Settings
      uses variable errout defined in redirect.h
   function simplifyTypedef76() in line 1845
      6 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType,bool) defined in TestSimplifyTypedef
      uses enumvalue Native defined in Settings
      uses variable errout defined in redirect.h
   function simplifyTypedef77() in line 1852
      5 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType,bool) defined in TestSimplifyTypedef
   function simplifyTypedef78() in line 1858
      8 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType,bool) defined in TestSimplifyTypedef
   function simplifyTypedef79() in line 1867
      12 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType,bool) defined in TestSimplifyTypedef
   function simplifyTypedef8() in line 356
      30 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType,bool) defined in TestSimplifyTypedef
   function simplifyTypedef80() in line 1880
      12 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType,bool) defined in TestSimplifyTypedef
      uses variable errout defined in redirect.h
   function simplifyTypedef81() in line 1893
      6 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_THROW defined in testsuite.h
      uses function checkSimplifyTypedef(const char) defined in TestSimplifyTypedef
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function simplifyTypedef82() in line 1900
      16 lines of code
      0 parameters
      1 conditional paths
      uses function checkSimplifyTypedef(const char) defined in TestSimplifyTypedef
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function simplifyTypedef83() in line 1917
      9 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType,bool) defined in TestSimplifyTypedef
   function simplifyTypedef84() in line 1927
      10 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_THROW defined in testsuite.h
      uses function checkSimplifyTypedef(const char) defined in TestSimplifyTypedef
   function simplifyTypedef85() in line 1938
      6 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType,bool) defined in TestSimplifyTypedef
      uses variable errout defined in redirect.h
   function simplifyTypedef86() in line 1945
      16 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType,bool) defined in TestSimplifyTypedef
      uses variable errout defined in redirect.h
   function simplifyTypedef87() in line 1962
      6 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType,bool) defined in TestSimplifyTypedef
      uses variable errout defined in redirect.h
   function simplifyTypedef88() in line 1969
      6 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType,bool) defined in TestSimplifyTypedef
      uses variable errout defined in redirect.h
   function simplifyTypedef89() in line 1976
      9 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType,bool) defined in TestSimplifyTypedef
      uses variable errout defined in redirect.h
   function simplifyTypedef9() in line 387
      25 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType,bool) defined in TestSimplifyTypedef
   function simplifyTypedef90() in line 1986
      7 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType,bool) defined in TestSimplifyTypedef
      uses variable errout defined in redirect.h
   function simplifyTypedef91() in line 1994
      93 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType,bool) defined in TestSimplifyTypedef
      uses variable errout defined in redirect.h
   function simplifyTypedef92() in line 2088
      7 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType,bool) defined in TestSimplifyTypedef
      uses variable errout defined in redirect.h
   function simplifyTypedef93() in line 2096
      7 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType,bool) defined in TestSimplifyTypedef
      uses variable errout defined in redirect.h
   function simplifyTypedef94() in line 2104
      52 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType,bool) defined in TestSimplifyTypedef
      uses variable errout defined in redirect.h
   function simplifyTypedef95() in line 2157
      13 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType,bool) defined in TestSimplifyTypedef
      uses enumvalue Native defined in Settings
      uses variable errout defined in redirect.h
   function simplifyTypedef96() in line 2171
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_THROW defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType,bool) defined in TestSimplifyTypedef
   function simplifyTypedef97() in line 2176
      6 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses function tok(const char,bool,Settings::PlatformType,bool) defined in TestSimplifyTypedef
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function simplifyTypedef98() in line 2183
      7 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType,bool) defined in TestSimplifyTypedef
   function simplifyTypedef99() in line 2191
      11 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses function tok(const char,bool,Settings::PlatformType,bool) defined in TestSimplifyTypedef
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function simplifyTypedefFunction1() in line 2449
      205 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType,bool) defined in TestSimplifyTypedef
      uses variable errout defined in redirect.h
   function simplifyTypedefFunction10() in line 3019
      18 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType,bool) defined in TestSimplifyTypedef
   function simplifyTypedefFunction2() in line 2655
      8 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType,bool) defined in TestSimplifyTypedef
   function simplifyTypedefFunction3() in line 2664
      171 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType,bool) defined in TestSimplifyTypedef
      uses enumvalue Native defined in Settings
      uses variable errout defined in redirect.h
   function simplifyTypedefFunction4() in line 2836
      15 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType,bool) defined in TestSimplifyTypedef
      uses variable errout defined in redirect.h
   function simplifyTypedefFunction5() in line 2852
      42 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType,bool) defined in TestSimplifyTypedef
      uses variable errout defined in redirect.h
   function simplifyTypedefFunction6() in line 2895
      26 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType,bool) defined in TestSimplifyTypedef
      uses variable errout defined in redirect.h
   function simplifyTypedefFunction7() in line 2922
      10 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType,bool) defined in TestSimplifyTypedef
      uses variable errout defined in redirect.h
   function simplifyTypedefFunction8() in line 2933
      7 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses function checkSimplifyTypedef(const char) defined in TestSimplifyTypedef
      uses macro definition TODO_ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function simplifyTypedefFunction9() in line 2941
      77 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType,bool) defined in TestSimplifyTypedef
      uses variable errout defined in redirect.h
      uses enumvalue Native defined in Settings
   function simplifyTypedefShadow() in line 3038
      8 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tok(const char,bool,Settings::PlatformType,bool) defined in TestSimplifyTypedef
      uses macro definition REGISTER_TEST defined in testsuite.h
   function tok(const char,bool,Settings::PlatformType,bool) in line 171
      16 lines of code
      4 parameters
      2 conditional paths
      uses variable errout defined in redirect.h
      uses variable settings0 defined in TestSimplifyTypedef
      uses variable inconclusive defined in Settings
      uses variable debugwarnings defined in Settings
      uses function platform(PlatformType) defined in Settings
      uses variable code defined in extracttests.py
      uses function tokenize(std::istream &,const char,const std::string &,bool) defined in Tokenizer
      uses function simplifyTokenList2() defined in Tokenizer
      uses function tokens() defined in Tokenizer
      uses function stringifyList(bool,bool,bool,bool,bool,const std::vector< std::string > *,const Token *) defined in Token
   function TestSimplifyTypedef() in line 27
      protection public
      2 lines of code
      0 parameters
      1 conditional paths
   variable settings0 in line 32
   variable settings1 in line 33
   variable settings2 in line 34
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/test/testsizeof.cpp
module TestSizeof
   inherits from TestFixture
   function check(const char) in line 49
      13 lines of code
      1 parameters
      1 conditional paths
      uses variable errout defined in redirect.h
      uses variable settings defined in TestSizeof
      uses variable code defined in extracttests.py
      uses function tokenize(std::istream &,const char,const std::string &,bool) defined in Tokenizer
      uses function runChecks(const Tokenizer *,const Settings *,ErrorLogger *) defined in CheckSizeof
   function checkPointerSizeof() in line 327
      219 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char) defined in TestSizeof
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function checkPointerSizeofStruct() in line 547
      23 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char) defined in TestSizeof
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function customStrncat() in line 732
      7 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char) defined in TestSizeof
      uses macro definition REGISTER_TEST defined in testsuite.h
   function run() in line 32
      16 lines of code
      0 parameters
      1 conditional paths
      uses variable settings defined in TestSizeof
      uses function addEnabled(const std::string &) defined in Settings
      uses variable inconclusive defined in Settings
      uses macro definition TEST_CASE defined in testsuite.h
      uses function sizeofsizeof() defined in TestSizeof
      uses function sizeofCalculation() defined in TestSizeof
      uses function checkPointerSizeof() defined in TestSizeof
      uses function checkPointerSizeofStruct() defined in TestSizeof
      uses function sizeofDivisionMemset() defined in TestSizeof
      uses function sizeofForArrayParameter() defined in TestSizeof
      uses function sizeofForNumericParameter() defined in TestSizeof
      uses function suspiciousSizeofCalculation() defined in TestSizeof
      uses function sizeofVoid() defined in TestSizeof
      uses function customStrncat() defined in TestSizeof
   function sizeofCalculation() in line 83
      47 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char) defined in TestSizeof
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function sizeofDivisionMemset() in line 571
      11 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char) defined in TestSizeof
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function sizeofForArrayParameter() in line 131
      139 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char) defined in TestSizeof
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function sizeofForNumericParameter() in line 271
      21 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char) defined in TestSizeof
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function sizeofsizeof() in line 63
      19 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char) defined in TestSizeof
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function sizeofVoid() in line 583
      148 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char) defined in TestSizeof
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function suspiciousSizeofCalculation() in line 293
      33 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char) defined in TestSizeof
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function TestSizeof() in line 26
      protection public
      2 lines of code
      0 parameters
      1 conditional paths
   variable settings in line 30
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/test/teststl.cpp
module TestStl
   inherits from TestFixture
   function autoPointer() in line 2285
      202 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const bool,const Standards::cppstd_t) defined in TestStl
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function check(const char,const bool,const Standards::cppstd_t) in line 138
      17 lines of code
      3 parameters
      1 conditional paths
      uses variable errout defined in redirect.h
      uses variable settings defined in TestStl
      uses variable inconclusive defined in Settings
      uses variable standards defined in Settings
      uses variable cpp defined in Standards
      uses variable code defined in extracttests.py
      uses function tokenize(std::istream &,const char,const std::string &,bool) defined in Tokenizer
      uses function simplifyTokenList2() defined in Tokenizer
      uses function runSimplifiedChecks(const Tokenizer *,const Settings *,ErrorLogger *) defined in CheckStl
   function check(const std::string &,const bool) in line 155
      3 lines of code
      2 parameters
      1 conditional paths
      uses function check(const char,const bool,const Standards::cppstd_t) defined in TestStl
      uses variable code defined in extracttests.py
   function cstr() in line 2079
      205 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const bool,const Standards::cppstd_t) defined in TestStl
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
      uses macro definition TODO_ASSERT_EQUALS defined in testsuite.h
   function dereference() in line 459
      23 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const bool,const Standards::cppstd_t) defined in TestStl
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function dereference_auto() in line 523
      25 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const bool,const Standards::cppstd_t) defined in TestStl
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function dereference_break() in line 483
      16 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const bool,const Standards::cppstd_t) defined in TestStl
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function dereference_member() in line 500
      22 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const bool,const Standards::cppstd_t) defined in TestStl
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function dereferenceInvalidIterator() in line 2596
      121 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const bool,const Standards::cppstd_t) defined in TestStl
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function erase1() in line 671
      41 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const bool,const Standards::cppstd_t) defined in TestStl
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function erase2() in line 713
      12 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const bool,const Standards::cppstd_t) defined in TestStl
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function erase3() in line 726
      9 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const bool,const Standards::cppstd_t) defined in TestStl
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function erase4() in line 736
      41 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const bool,const Standards::cppstd_t) defined in TestStl
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function erase5() in line 778
      13 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const bool,const Standards::cppstd_t) defined in TestStl
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function erase6() in line 792
      12 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const bool,const Standards::cppstd_t) defined in TestStl
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function eraseAssign1() in line 940
      11 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const bool,const Standards::cppstd_t) defined in TestStl
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function eraseAssign2() in line 952
      17 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const bool,const Standards::cppstd_t) defined in TestStl
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function eraseAssign3() in line 970
      8 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const bool,const Standards::cppstd_t) defined in TestStl
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function eraseAssign4() in line 979
      15 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const bool,const Standards::cppstd_t) defined in TestStl
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function eraseAssignByFunctionCall() in line 995
      8 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const bool,const Standards::cppstd_t) defined in TestStl
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function eraseBreak() in line 805
      36 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const bool,const Standards::cppstd_t) defined in TestStl
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function eraseByValue() in line 1015
      49 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const bool,const Standards::cppstd_t) defined in TestStl
      uses macro definition TODO_ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function eraseContinue() in line 842
      15 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const bool,const Standards::cppstd_t) defined in TestStl
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function eraseErase() in line 1004
      10 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const bool,const Standards::cppstd_t) defined in TestStl
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function eraseGoto() in line 927
      12 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const bool,const Standards::cppstd_t) defined in TestStl
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function eraseIf() in line 1065
      13 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const bool,const Standards::cppstd_t) defined in TestStl
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function eraseOnVector() in line 1079
      23 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const bool,const Standards::cppstd_t) defined in TestStl
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function eraseReturn1() in line 858
      13 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const bool,const Standards::cppstd_t) defined in TestStl
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function eraseReturn2() in line 872
      19 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const bool,const Standards::cppstd_t) defined in TestStl
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function eraseReturn3() in line 892
      34 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const bool,const Standards::cppstd_t) defined in TestStl
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function getArraylength(const ) in line 1403
      3 lines of code
      1 parameters
      1 conditional paths
   function if_find() in line 1524
      153 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const bool,const Standards::cppstd_t) defined in TestStl
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function if_str_find() in line 1678
      52 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const bool,const Standards::cppstd_t) defined in TestStl
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function insert1() in line 1312
      66 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const bool,const Standards::cppstd_t) defined in TestStl
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function insert2() in line 1379
      22 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const bool,const Standards::cppstd_t) defined in TestStl
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function iterator1() in line 160
      20 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const bool,const Standards::cppstd_t) defined in TestStl
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function iterator10() in line 370
      14 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const bool,const Standards::cppstd_t) defined in TestStl
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function iterator11() in line 385
      10 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const bool,const Standards::cppstd_t) defined in TestStl
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function iterator12() in line 396
      17 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const bool,const Standards::cppstd_t) defined in TestStl
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function iterator13() in line 414
      43 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const bool,const Standards::cppstd_t) defined in TestStl
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function iterator2() in line 181
      13 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const bool,const Standards::cppstd_t) defined in TestStl
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function iterator3() in line 195
      10 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const bool,const Standards::cppstd_t) defined in TestStl
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function iterator4() in line 206
      13 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const bool,const Standards::cppstd_t) defined in TestStl
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function iterator5() in line 220
      9 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const bool,const Standards::cppstd_t) defined in TestStl
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function iterator6() in line 230
      20 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const bool,const Standards::cppstd_t) defined in TestStl
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
      uses macro definition TODO_ASSERT_EQUALS defined in testsuite.h
   function iterator7() in line 251
      17 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const bool,const Standards::cppstd_t) defined in TestStl
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function iterator8() in line 269
      47 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const bool,const Standards::cppstd_t) defined in TestStl
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function iterator9() in line 317
      52 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const bool,const Standards::cppstd_t) defined in TestStl
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
      uses macro definition TODO_ASSERT_EQUALS defined in testsuite.h
   function missingInnerComparison1() in line 1998
      17 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const bool,const Standards::cppstd_t) defined in TestStl
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function missingInnerComparison2() in line 2016
      12 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const bool,const Standards::cppstd_t) defined in TestStl
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function missingInnerComparison3() in line 2029
      9 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const bool,const Standards::cppstd_t) defined in TestStl
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function missingInnerComparison4() in line 2039
      21 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const bool,const Standards::cppstd_t) defined in TestStl
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function missingInnerComparison5() in line 2061
      8 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const bool,const Standards::cppstd_t) defined in TestStl
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function missingInnerComparison6() in line 2070
      8 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const bool,const Standards::cppstd_t) defined in TestStl
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function pushback1() in line 1103
      9 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const bool,const Standards::cppstd_t) defined in TestStl
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function pushback10() in line 1248
      22 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const bool,const Standards::cppstd_t) defined in TestStl
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function pushback11() in line 1271
      13 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const bool,const Standards::cppstd_t) defined in TestStl
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function pushback12() in line 1285
      16 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const bool,const Standards::cppstd_t) defined in TestStl
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function pushback13() in line 1302
      9 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const bool,const Standards::cppstd_t) defined in TestStl
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function pushback2() in line 1113
      12 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const bool,const Standards::cppstd_t) defined in TestStl
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function pushback3() in line 1126
      13 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const bool,const Standards::cppstd_t) defined in TestStl
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function pushback4() in line 1140
      11 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const bool,const Standards::cppstd_t) defined in TestStl
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function pushback5() in line 1152
      16 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const bool,const Standards::cppstd_t) defined in TestStl
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function pushback6() in line 1169
      28 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const bool,const Standards::cppstd_t) defined in TestStl
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function pushback7() in line 1198
      13 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const bool,const Standards::cppstd_t) defined in TestStl
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function pushback8() in line 1212
      15 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const bool,const Standards::cppstd_t) defined in TestStl
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function pushback9() in line 1228
      19 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const bool,const Standards::cppstd_t) defined in TestStl
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function readingEmptyStlContainer() in line 2718
      176 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const bool,const Standards::cppstd_t) defined in TestStl
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
      uses macro definition REGISTER_TEST defined in testsuite.h
   function redundantCondition1() in line 1989
      8 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const bool,const Standards::cppstd_t) defined in TestStl
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function run() in line 32
      105 lines of code
      0 parameters
      1 conditional paths
      uses variable settings defined in TestStl
      uses function addEnabled(const std::string &) defined in Settings
      uses macro definition LOAD_LIB_2 defined in testsuite.h
      uses variable library defined in Settings
      uses macro definition TEST_CASE defined in testsuite.h
      uses function iterator1() defined in TestStl
      uses function iterator2() defined in TestStl
      uses function iterator3() defined in TestStl
      uses function iterator4() defined in TestStl
      uses function iterator5() defined in TestStl
      uses function iterator6() defined in TestStl
      uses function iterator7() defined in TestStl
      uses function iterator8() defined in TestStl
      uses function iterator9() defined in TestStl
      uses function iterator10() defined in TestStl
      uses function iterator11() defined in TestStl
      uses function iterator12() defined in TestStl
      uses function iterator13() defined in TestStl
      uses function dereference() defined in TestStl
      uses function dereference_break() defined in TestStl
      uses function dereference_member() defined in TestStl
      uses function STLSize() defined in TestStl
      uses function STLSizeNoErr() defined in TestStl
      uses function erase1() defined in TestStl
      uses function erase2() defined in TestStl
      uses function erase3() defined in TestStl
      uses function erase4() defined in TestStl
      uses function erase5() defined in TestStl
      uses function erase6() defined in TestStl
      uses function eraseBreak() defined in TestStl
      uses function eraseContinue() defined in TestStl
      uses function eraseReturn1() defined in TestStl
      uses function eraseReturn2() defined in TestStl
      uses function eraseReturn3() defined in TestStl
      uses function eraseGoto() defined in TestStl
      uses function eraseAssign1() defined in TestStl
      uses function eraseAssign2() defined in TestStl
      uses function eraseAssign3() defined in TestStl
      uses function eraseAssign4() defined in TestStl
      uses function eraseAssignByFunctionCall() defined in TestStl
      uses function eraseErase() defined in TestStl
      uses function eraseByValue() defined in TestStl
      uses function eraseIf() defined in TestStl
      uses function eraseOnVector() defined in TestStl
      uses function pushback1() defined in TestStl
      uses function pushback2() defined in TestStl
      uses function pushback3() defined in TestStl
      uses function pushback4() defined in TestStl
      uses function pushback5() defined in TestStl
      uses function pushback6() defined in TestStl
      uses function pushback7() defined in TestStl
      uses function pushback8() defined in TestStl
      uses function pushback9() defined in TestStl
      uses function pushback10() defined in TestStl
      uses function pushback11() defined in TestStl
      uses function pushback12() defined in TestStl
      uses function pushback13() defined in TestStl
      uses function insert1() defined in TestStl
      uses function insert2() defined in TestStl
      uses function stlBoundaries1() defined in TestStl
      uses function stlBoundaries2() defined in TestStl
      uses function stlBoundaries3() defined in TestStl
      uses function stlBoundaries4() defined in TestStl
      uses function stlBoundaries5() defined in TestStl
      uses function stlBoundaries6() defined in TestStl
      uses function if_find() defined in TestStl
      uses function if_str_find() defined in TestStl
      uses function size1() defined in TestStl
      uses function size2() defined in TestStl
      uses function size3() defined in TestStl
      uses function size4() defined in TestStl
      uses function redundantCondition1() defined in TestStl
      uses function missingInnerComparison1() defined in TestStl
      uses function missingInnerComparison2() defined in TestStl
      uses function missingInnerComparison3() defined in TestStl
      uses function missingInnerComparison4() defined in TestStl
      uses function missingInnerComparison5() defined in TestStl
      uses function missingInnerComparison6() defined in TestStl
      uses function cstr() defined in TestStl
      uses function autoPointer() defined in TestStl
      uses function uselessCalls() defined in TestStl
      uses function stabilityOfChecks() defined in TestStl
      uses function dereferenceInvalidIterator() defined in TestStl
      uses function dereference_auto() defined in TestStl
      uses function readingEmptyStlContainer() defined in TestStl
   function size1() in line 1732
      189 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses function check(const char,const bool,const Standards::cppstd_t) defined in TestStl
      uses enumvalue CPP03 defined in Standards
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function size2() in line 1922
      17 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses function check(const char,const bool,const Standards::cppstd_t) defined in TestStl
      uses enumvalue CPP03 defined in Standards
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function size3() in line 1940
      31 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses function check(const char,const bool,const Standards::cppstd_t) defined in TestStl
      uses enumvalue CPP03 defined in Standards
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function size4() in line 1972
      16 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const bool,const Standards::cppstd_t) defined in TestStl
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function stabilityOfChecks() in line 2581
      14 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const bool,const Standards::cppstd_t) defined in TestStl
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function stlBoundaries1() in line 1407
      29 lines of code
      0 parameters
      2 conditional paths
      uses function getArraylength(const ) defined in TestStl
      uses function check(const char,const bool,const Standards::cppstd_t) defined in TestStl
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function stlBoundaries2() in line 1437
      11 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const bool,const Standards::cppstd_t) defined in TestStl
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function stlBoundaries3() in line 1449
      19 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const bool,const Standards::cppstd_t) defined in TestStl
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function stlBoundaries4() in line 1469
      22 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const bool,const Standards::cppstd_t) defined in TestStl
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function stlBoundaries5() in line 1492
      19 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const bool,const Standards::cppstd_t) defined in TestStl
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function stlBoundaries6() in line 1512
      10 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const bool,const Standards::cppstd_t) defined in TestStl
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function STLSize() in line 549
      65 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const bool,const Standards::cppstd_t) defined in TestStl
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function STLSizeNoErr() in line 615
      51 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const bool,const Standards::cppstd_t) defined in TestStl
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function uselessCalls() in line 2488
      92 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const bool,const Standards::cppstd_t) defined in TestStl
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function TestStl() in line 26
      protection public
      2 lines of code
      0 parameters
      1 conditional paths
   variable settings in line 30
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/test/teststring.cpp
module TestString
   inherits from TestFixture
   function alwaysTrueFalseStringCompare() in line 94
      139 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char) defined in TestString
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function check(const char,const char) in line 57
      16 lines of code
      2 parameters
      1 conditional paths
      uses variable errout defined in redirect.h
      uses variable settings defined in TestString
      uses variable code defined in extracttests.py
      uses function tokenize(std::istream &,const char,const std::string &,bool) defined in Tokenizer
      uses variable filename defined in extracttests.py
      uses function runChecks(const Tokenizer *,const Settings *,ErrorLogger *) defined in CheckString
      uses function simplifyTokenList2() defined in Tokenizer
      uses function runSimplifiedChecks(const Tokenizer *,const Settings *,ErrorLogger *) defined in CheckString
   function incorrectStringCompare() in line 483
      76 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char) defined in TestString
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
      uses macro definition REGISTER_TEST defined in testsuite.h
   function run() in line 34
      22 lines of code
      0 parameters
      1 conditional paths
      uses variable settings defined in TestString
      uses function addEnabled(const std::string &) defined in Settings
      uses macro definition TEST_CASE defined in testsuite.h
      uses function stringLiteralWrite() defined in TestString
      uses function alwaysTrueFalseStringCompare() defined in TestString
      uses function suspiciousStringCompare() defined in TestString
      uses function suspiciousStringCompare_char() defined in TestString
      uses function strPlusChar1() defined in TestString
      uses function strPlusChar2() defined in TestString
      uses function strPlusChar3() defined in TestString
      uses function strPlusChar4() defined in TestString
      uses function sprintf1() defined in TestString
      uses function sprintf2() defined in TestString
      uses function sprintf3() defined in TestString
      uses function sprintf4() defined in TestString
      uses function incorrectStringCompare() defined in TestString
   function sprintf1() in line 396
      8 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char) defined in TestString
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function sprintf2() in line 405
      8 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char) defined in TestString
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function sprintf3() in line 414
      9 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char) defined in TestString
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function sprintf4() in line 424
      14 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char) defined in TestString
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function stringLiteralWrite() in line 74
      19 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char) defined in TestString
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function strPlusChar1() in line 439
      8 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char) defined in TestString
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function strPlusChar2() in line 448
      18 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char) defined in TestString
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function strPlusChar3() in line 467
      9 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char) defined in TestString
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function strPlusChar4() in line 477
      4 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char) defined in TestString
   function suspiciousStringCompare() in line 234
      106 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char) defined in TestString
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
      uses macro definition TODO_ASSERT_EQUALS defined in testsuite.h
   function suspiciousStringCompare_char() in line 341
      53 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,const char) defined in TestString
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function TestString() in line 28
      protection public
      2 lines of code
      0 parameters
      1 conditional paths
   variable settings in line 32
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/test/testsuite.cpp
module testsuite.cpp
   variable errout in line 27
      protection public
   variable output in line 28
      protection public
   variable warnings in line 29
      protection public
   function writestr(const std::string &,bool) in line 96
      protection public
      23 lines of code
      2 parameters
      9 conditional paths
module TestRegistry
   function addTest(TestFixture *) in line 45
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
      uses variable _tests defined in TestRegistry
   function tests() in line 49
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses variable _tests defined in TestRegistry
      uses variable errmsg defined in TestFixture
      uses variable countTests defined in TestFixture
      uses variable fails_counter defined in TestFixture
      uses variable todos_counter defined in TestFixture
      uses variable succeeded_todos_counter defined in TestFixture
      uses variable missingLibs defined in TestFixture
   function theInstance() in line 40
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
   variable _tests in line 37
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/test/testsuite.h
module testsuite.h
   macro definition TEST_CASE in line 81
      protection public
   macro definition ASSERT in line 82
      protection public
   macro definition ASSERT_EQUALS in line 83
      protection public
   macro definition ASSERT_EQUALS_DOUBLE in line 84
      protection public
   macro definition ASSERT_EQUALS_MSG in line 85
      protection public
   macro definition ASSERT_THROW in line 86
      protection public
   macro definition TODO_ASSERT in line 87
      protection public
   macro definition TODO_ASSERT_EQUALS in line 88
      protection public
   macro definition REGISTER_TEST in line 89
      protection public
   macro definition LOAD_LIB_2 in line 94
      protection public
   variable errout in line 77
      protection public
   variable output in line 78
      protection public
   variable warnings in line 79
      protection public
module TestFixture
   inherits from ErrorLogger
   abstract class
   function assert_(const char *,unsigned int,bool) in line 49
      11 lines of code
      3 parameters
      3 conditional paths
      uses variable fails_counter defined in TestFixture
      uses variable gcc_style_errors defined in TestFixture
      uses variable errmsg defined in TestFixture
      uses variable filename defined in extracttests.py
      uses variable linenr defined in triage-report.py
   function assertEquals(const char *,unsigned int,const std::string &,const std::string &,const std::string &) in line 51
      26 lines of code
      5 parameters
      5 conditional paths
      uses variable expected defined in extracttests.py
      uses variable fails_counter defined in TestFixture
      uses variable gcc_style_errors defined in TestFixture
      uses variable errmsg defined in TestFixture
      uses variable filename defined in extracttests.py
      uses variable linenr defined in triage-report.py
      uses variable msg defined in findcasts.py
   function assertEquals(const char *,unsigned int,const char,const std::string &,const std::string &) in line 52
      4 lines of code
      5 parameters
      1 conditional paths
      uses function assertEquals(const char *,unsigned int,const std::string &,const std::string &,const std::string &) defined in TestFixture
      uses variable filename defined in extracttests.py
      uses variable linenr defined in triage-report.py
      uses variable expected defined in extracttests.py
      uses variable msg defined in findcasts.py
   function assertEquals(const char *,unsigned int,const char,const char,const std::string &) in line 53
      4 lines of code
      5 parameters
      1 conditional paths
      uses function assertEquals(const char *,unsigned int,const std::string &,const std::string &,const std::string &) defined in TestFixture
      uses variable filename defined in extracttests.py
      uses variable linenr defined in triage-report.py
      uses variable expected defined in extracttests.py
      uses variable msg defined in findcasts.py
   function assertEquals(const char *,unsigned int,const std::string &,const char,const std::string &) in line 54
      4 lines of code
      5 parameters
      1 conditional paths
      uses function assertEquals(const char *,unsigned int,const std::string &,const std::string &,const std::string &) defined in TestFixture
      uses variable filename defined in extracttests.py
      uses variable linenr defined in triage-report.py
      uses variable expected defined in extracttests.py
      uses variable msg defined in findcasts.py
   function assertEquals(const char *,unsigned int,long long,long long,const std::string &) in line 55
      8 lines of code
      5 parameters
      1 conditional paths
      uses variable expected defined in extracttests.py
      uses function assertEquals(const char *,unsigned int,const std::string &,const std::string &,const std::string &) defined in TestFixture
      uses variable filename defined in extracttests.py
      uses variable linenr defined in triage-report.py
      uses variable msg defined in findcasts.py
   function assertEqualsDouble(const char *,unsigned int,double,double,const std::string &) in line 56
      8 lines of code
      5 parameters
      1 conditional paths
      uses variable expected defined in extracttests.py
      uses function assertEquals(const char *,unsigned int,const std::string &,const std::string &,const std::string &) defined in TestFixture
      uses variable filename defined in extracttests.py
      uses variable linenr defined in triage-report.py
      uses variable msg defined in findcasts.py
   function assertThrowFail(const char *,unsigned int) in line 62
      11 lines of code
      2 parameters
      2 conditional paths
      uses variable fails_counter defined in TestFixture
      uses variable gcc_style_errors defined in TestFixture
      uses variable errmsg defined in TestFixture
      uses variable filename defined in extracttests.py
      uses variable linenr defined in triage-report.py
   function complainMissingLib(const char *) in line 63
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable missingLibs defined in TestFixture
   function prepareTest(const char) in line 47
      17 lines of code
      1 parameters
      3 conditional paths
      uses variable testToRun defined in TestFixture
      uses variable countTests defined in TestFixture
      uses variable quiet_tests defined in TestFixture
      uses variable classname defined in TestFixture
      uses variable currentTest defined in TestFixture
   function processOptions(const options &) in line 65
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable quiet_tests defined in TestFixture
      uses function quiet() defined in options
      uses variable gcc_style_errors defined in TestFixture
      uses function gcc_style_errors() defined in options
   function reportErr(const ErrorLogger::ErrorMessage &) in line 68
      protection public
      6 lines of code
      1 parameters
      2 conditional paths
      uses variable msg defined in findcasts.py
      uses variable errout defined in testsuite.cpp
   function reportOut(const std::string &) in line 67
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable output defined in testsuite.cpp
   function run() in line 45
      1 lines of code
      0 parameters
      1 conditional paths
   function run(const std::string &) in line 69
      protection public
      12 lines of code
      1 parameters
      3 conditional paths
      uses variable testToRun defined in TestFixture
      uses variable quiet_tests defined in TestFixture
      uses variable classname defined in TestFixture
      uses macro definition REDIRECT defined in redirect.h
      uses function run() defined in TestFixture
   function runTests(const options &) in line 74
      protection public
      45 lines of code
      1 parameters
      8 conditional paths
      uses variable classname defined in TestFixture
      uses function which_test() defined in options
      uses variable countTests defined in TestFixture
      uses variable errmsg defined in TestFixture
      uses function tests() defined in TestRegistry
      uses variable warnings defined in testsuite.cpp
      uses variable todos_counter defined in TestFixture
      uses variable succeeded_todos_counter defined in TestFixture
      uses variable fails_counter defined in TestFixture
      uses variable missingLibs defined in TestFixture
   function todoAssertEquals(const char *,unsigned int,const std::string &,const std::string &,const std::string &) in line 58
      19 lines of code
      5 parameters
      3 conditional paths
      uses variable gcc_style_errors defined in TestFixture
      uses variable errmsg defined in TestFixture
      uses variable filename defined in extracttests.py
      uses variable linenr defined in triage-report.py
      uses variable succeeded_todos_counter defined in TestFixture
      uses function assertEquals(const char *,unsigned int,const std::string &,const std::string &,const std::string &) defined in TestFixture
      uses variable todos_counter defined in TestFixture
   function todoAssertEquals(const char *,unsigned int,long long,long long,long long) in line 60
      8 lines of code
      5 parameters
      1 conditional paths
      uses function todoAssertEquals(const char *,unsigned int,const std::string &,const std::string &,const std::string &) defined in TestFixture
      uses variable filename defined in extracttests.py
      uses variable linenr defined in triage-report.py
   function TestFixture(const std::string &) in line 71
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses function addTest(TestFixture *) defined in TestRegistry
   function ~TestFixture() in line 72
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
      uses function runTests(const options &) defined in TestFixture
      uses variable errout defined in testsuite.h
      uses variable output defined in testsuite.h
      uses variable warnings defined in testsuite.h
   variable classname in line 39
   variable countTests in line 32
   variable currentTest in line 43
   variable errmsg in line 31
   variable fails_counter in line 33
   variable gcc_style_errors in line 41
   variable missingLibs in line 36
   variable quiet_tests in line 42
   variable succeeded_todos_counter in line 35
   variable testToRun in line 40
   variable todos_counter in line 34
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/test/testsuppressions.cpp
module TestSuppressions
   inherits from TestFixture
   function checkSuppression(const char,const std::string &) in line 134
      6 lines of code
      2 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
   function checkSuppression(std::map< std::string, std::string > &,const std::string &) in line 142
      21 lines of code
      2 parameters
      3 conditional paths
      uses variable errout defined in redirect.h
      uses function settings() defined in CppCheck
      uses variable inlineSuppressions defined in Settings
      uses function addEnabled(const std::string &) defined in Settings
      uses variable jointSuppressionReport defined in Settings
      uses variable nomsg defined in Settings
      uses function addSuppressionLine(const std::string &) defined in Suppressions
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function check(const std::string &) defined in CppCheck
      uses function analyseWholeProgram() defined in CppCheck
      uses function reportSuppressions(const Settings &,const std::map< std::string, std::string > &) defined in TestSuppressions
   function checkSuppressionThreads(const char,const std::string &) in line 164
      26 lines of code
      2 parameters
      4 conditional paths
      uses variable errout defined in redirect.h
      uses variable output defined in redirect.h
      uses variable jobs defined in Settings
      uses variable inlineSuppressions defined in Settings
      uses function addEnabled(const std::string &) defined in Settings
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable nomsg defined in Settings
      uses function addSuppressionLine(const std::string &) defined in Suppressions
      uses variable code defined in extracttests.py
      uses function reportSuppressions(const Settings &,const std::map< std::string, std::string > &) defined in TestSuppressions
   function globalsuppress_unusedFunction() in line 359
      8 lines of code
      0 parameters
      1 conditional paths
      uses function addSuppressionLine(const std::string &) defined in Suppressions
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function getUnmatchedLocalSuppressions(const std::string &,const bool) defined in Suppressions
      uses function getUnmatchedGlobalSuppressions(const bool) defined in Suppressions
   function inlinesuppress_unusedFunction() in line 350
      8 lines of code
      0 parameters
      1 conditional paths
      uses function addSuppression(const std::string &,const std::string &,unsigned int) defined in Suppressions
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function getUnmatchedLocalSuppressions(const std::string &,const bool) defined in Suppressions
      uses function getUnmatchedGlobalSuppressions(const bool) defined in Suppressions
   function reportSuppressions(const Settings &,const std::map< std::string, std::string > &) in line 120
      12 lines of code
      2 parameters
      3 conditional paths
      uses variable jointSuppressionReport defined in Settings
      uses function reportUnmatchedSuppressions(const std::list< Suppressions::SuppressionEntry > &) defined in ErrorLogger
      uses variable nomsg defined in Settings
      uses function getUnmatchedLocalSuppressions(const std::string &,const bool) defined in Suppressions
      uses function getUnmatchedGlobalSuppressions(const bool) defined in Suppressions
   function run() in line 36
      16 lines of code
      0 parameters
      1 conditional paths
      uses macro definition TEST_CASE defined in testsuite.h
      uses function suppressionsBadId1() defined in TestSuppressions
      uses function suppressionsDosFormat() defined in TestSuppressions
      uses function suppressionsFileNameWithColon() defined in TestSuppressions
      uses function suppressionsGlob() defined in TestSuppressions
      uses function suppressionsFileNameWithExtraPath() defined in TestSuppressions
      uses function suppressionsSettings() defined in TestSuppressions
      uses function suppressionsMultiFile() defined in TestSuppressions
      uses function suppressionsPathSeparator() defined in TestSuppressions
      uses function inlinesuppress_unusedFunction() defined in TestSuppressions
      uses function globalsuppress_unusedFunction() defined in TestSuppressions
      uses function suppressionWithRelativePaths() defined in TestSuppressions
      uses function suppressingSyntaxErrors() defined in TestSuppressions
      uses function suppressingSyntaxErrorsInline() defined in TestSuppressions
   function runChecks(void(TestSuppressions::*)(const char[], const std::string &)) in line 191
      132 lines of code
      1 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function suppressingSyntaxErrors() in line 390
      7 lines of code
      0 parameters
      1 conditional paths
      uses function checkSuppression(const char,const std::string &) defined in TestSuppressions
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function suppressingSyntaxErrorsInline() in line 398
      15 lines of code
      0 parameters
      1 conditional paths
      uses function checkSuppression(const char,const std::string &) defined in TestSuppressions
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
      uses macro definition REGISTER_TEST defined in testsuite.h
   function suppressionsBadId1() in line 53
      8 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function parseFile(std::istream &) defined in Suppressions
   function suppressionsDosFormat() in line 62
      7 lines of code
      0 parameters
      1 conditional paths
      uses variable s defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function parseFile(std::istream &) defined in Suppressions
      uses function isSuppressed(const std::string &,const std::string &,unsigned int) defined in Suppressions
   function suppressionsFileNameWithColon() in line 70
      8 lines of code
      0 parameters
      1 conditional paths
      uses variable s defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function parseFile(std::istream &) defined in Suppressions
      uses function isSuppressed(const std::string &,const std::string &,unsigned int) defined in Suppressions
   function suppressionsFileNameWithExtraPath() in line 113
      6 lines of code
      0 parameters
      1 conditional paths
      uses function addSuppression(const std::string &,const std::string &,unsigned int) defined in Suppressions
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function isSuppressed(const std::string &,const std::string &,unsigned int) defined in Suppressions
   function suppressionsGlob() in line 79
      33 lines of code
      0 parameters
      1 conditional paths
      uses variable s defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function parseFile(std::istream &) defined in Suppressions
      uses function isSuppressed(const std::string &,const std::string &,unsigned int) defined in Suppressions
   function suppressionsMultiFile() in line 330
      13 lines of code
      0 parameters
      1 conditional paths
      uses function checkSuppression(const char,const std::string &) defined in TestSuppressions
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function suppressionsPathSeparator() in line 344
      5 lines of code
      0 parameters
      1 conditional paths
      uses function addSuppressionLine(const std::string &) defined in Suppressions
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function isSuppressed(const std::string &,const std::string &,unsigned int) defined in Suppressions
   function suppressionsSettings() in line 324
      5 lines of code
      0 parameters
      2 conditional paths
      uses function runChecks(void(TestSuppressions::*)(const char[], const std::string &)) defined in TestSuppressions
      uses function checkSuppression(const char,const std::string &) defined in TestSuppressions
      uses function checkSuppressionThreads(const char,const std::string &) defined in TestSuppressions
   function suppressionWithRelativePaths() in line 368
      21 lines of code
      0 parameters
      1 conditional paths
      uses variable errout defined in redirect.h
      uses function settings() defined in CppCheck
      uses function addEnabled(const std::string &) defined in Settings
      uses variable inlineSuppressions defined in Settings
      uses variable relativePaths defined in Settings
      uses variable basePaths defined in Settings
      uses variable code defined in extracttests.py
      uses function check(const std::string &) defined in CppCheck
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function TestSuppressions() in line 31
      protection public
      2 lines of code
      0 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/test/testsymboldatabase.cpp
module testsymboldatabase.cpp
   macro definition GET_SYMBOL_DB in line 26
      protection public
   macro definition GET_SYMBOL_DB_C in line 30
      protection public
   macro definition FUNC in line 2689
      protection public
   macro definition CLASS_FUNC in line 2720
      protection public
   macro definition FUNC_THROW in line 2788
      protection public
   macro definition CLASS_FUNC_THROW in line 2808
      protection public
module TestSymbolDatabase
   inherits from TestFixture
   function array() in line 277
      10 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses function createTokens(std::istream &,const std::string &) defined in TokenList
      uses function front() defined in TokenList
      uses function tokAt(int) defined in Token
      uses function link(Token *) defined in Token
      uses function next() defined in Token
      uses function back() defined in TokenList
      uses enumvalue Public defined in symboldatabase.h
      uses variable settings defined in TestSymbolDatabase
      uses variable library defined in Settings
      uses macro definition ASSERT defined in testsuite.h
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function arrayMemberVar1() in line 752
      15 lines of code
      0 parameters
      1 conditional paths
      uses macro definition GET_SYMBOL_DB defined in testsymboldatabase.cpp
      uses function next() defined in Token
      uses macro definition ASSERT defined in testsuite.h
   function arrayMemberVar2() in line 768
      15 lines of code
      0 parameters
      1 conditional paths
      uses macro definition GET_SYMBOL_DB defined in testsymboldatabase.cpp
      uses function next() defined in Token
      uses macro definition ASSERT defined in testsuite.h
   function arrayMemberVar3() in line 784
      15 lines of code
      0 parameters
      1 conditional paths
      uses macro definition GET_SYMBOL_DB defined in testsymboldatabase.cpp
      uses function next() defined in Token
      uses macro definition ASSERT defined in testsuite.h
   function check(const char,bool) in line 1359
      18 lines of code
      2 parameters
      1 conditional paths
      uses variable errout defined in redirect.h
      uses variable settings defined in TestSymbolDatabase
      uses variable debugwarnings defined in Settings
      uses variable code defined in extracttests.py
      uses function tokenize(std::istream &,const char,const std::string &,bool) defined in Tokenizer
      uses function simplifyTokenList2() defined in Tokenizer
      uses function createSymbolDatabase() defined in Tokenizer
   function checkTypeStartEndToken1() in line 1320
      22 lines of code
      0 parameters
      2 conditional paths
      uses macro definition GET_SYMBOL_DB defined in testsymboldatabase.cpp
      uses macro definition ASSERT defined in testsuite.h
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function checkTypeStartEndToken2() in line 1343
      15 lines of code
      0 parameters
      1 conditional paths
      uses macro definition GET_SYMBOL_DB defined in testsymboldatabase.cpp
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function circularDependencies() in line 3065
      14 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestSymbolDatabase
   function classWithFriend() in line 1228
      18 lines of code
      0 parameters
      3 conditional paths
      uses macro definition GET_SYMBOL_DB defined in testsymboldatabase.cpp
      uses macro definition ASSERT defined in testsuite.h
      uses function foo(int *) defined in AssignmentAddressToInteger/bad.c
      uses variable definedType defined in Scope
      uses variable friendList defined in Type
   function complexFunctionArrayPtr() in line 998
      29 lines of code
      0 parameters
      2 conditional paths
      uses macro definition GET_SYMBOL_DB defined in testsymboldatabase.cpp
      uses macro definition ASSERT defined in testsuite.h
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function constructorInitialization() in line 1132
      12 lines of code
      0 parameters
      2 conditional paths
      uses macro definition GET_SYMBOL_DB defined in testsymboldatabase.cpp
      uses macro definition ASSERT defined in testsuite.h
   function Cpp11InitInInitList() in line 1266
      8 lines of code
      0 parameters
      1 conditional paths
      uses macro definition GET_SYMBOL_DB defined in testsymboldatabase.cpp
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function findFunction1() in line 2354
      31 lines of code
      0 parameters
      6 conditional paths
      uses macro definition GET_SYMBOL_DB defined in testsymboldatabase.cpp
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
      uses macro definition ASSERT defined in testsuite.h
      uses variable classStart defined in Scope
      uses function next() defined in Token
      uses variable classEnd defined in Scope
      uses variable expected defined in extracttests.py
   function findFunction2() in line 2386
      13 lines of code
      0 parameters
      1 conditional paths
      uses macro definition GET_SYMBOL_DB defined in testsymboldatabase.cpp
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
      uses function function(const Function *) defined in Token
   function findFunction3() in line 2400
      14 lines of code
      0 parameters
      1 conditional paths
      uses macro definition GET_SYMBOL_DB defined in testsymboldatabase.cpp
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
      uses function tokAt(int) defined in Token
      uses function function(const Function *) defined in Token
   function findFunction4() in line 2415
      147 lines of code
      0 parameters
      1 conditional paths
      uses macro definition GET_SYMBOL_DB defined in testsymboldatabase.cpp
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
      uses function f(char) defined in test.cxx
   function findFunction5() in line 2563
      18 lines of code
      0 parameters
      1 conditional paths
      uses macro definition GET_SYMBOL_DB defined in testsymboldatabase.cpp
      uses function f(char) defined in test.cxx
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function findFunction6() in line 2582
      8 lines of code
      0 parameters
      1 conditional paths
      uses macro definition GET_SYMBOL_DB defined in testsymboldatabase.cpp
      uses function f(char) defined in test.cxx
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function findFunction7() in line 2591
      18 lines of code
      0 parameters
      1 conditional paths
      uses macro definition GET_SYMBOL_DB defined in testsymboldatabase.cpp
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
      uses function tokAt(int) defined in Token
      uses function function(const Function *) defined in Token
   function findFunction8() in line 2610
      77 lines of code
      0 parameters
      1 conditional paths
      uses macro definition GET_SYMBOL_DB defined in testsymboldatabase.cpp
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
      uses function f(char) defined in test.cxx
   function findFunctionByName(const char,const Scope *) in line 79
      17 lines of code
      2 parameters
      6 conditional paths
      uses function isExecutable() defined in Scope
      uses variable functionOf defined in Scope
      uses variable nestedIn defined in Scope
      uses variable functionList defined in Scope
   function findFunctionScopeByToken(const SymbolDatabase *,const Token *) in line 67
      11 lines of code
      2 parameters
      4 conditional paths
      uses variable scopeList defined in SymbolDatabase
      uses enumvalue eFunction defined in Scope
   function functionArgs1() in line 1378
      40 lines of code
      0 parameters
      2 conditional paths
      uses macro definition GET_SYMBOL_DB defined in testsymboldatabase.cpp
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses macro definition ASSERT defined in testsuite.h
      uses function f(char) defined in test.cxx
      uses enumvalue eFunction defined in Scope
      uses variable errout defined in redirect.h
      uses variable type defined in Scope
      uses variable function defined in Scope
      uses variable argumentList defined in Function
      uses function initializedArgCount() defined in Function
   function functionArgs2() in line 1419
      10 lines of code
      0 parameters
      1 conditional paths
      uses macro definition GET_SYMBOL_DB defined in testsymboldatabase.cpp
      uses variable a defined in daca2-report.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function functionArgs3() in line 1430
      5 lines of code
      0 parameters
      1 conditional paths
      uses macro definition GET_SYMBOL_DB defined in testsymboldatabase.cpp
      uses variable a defined in daca2-report.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function functionArgs4() in line 1436
      16 lines of code
      0 parameters
      2 conditional paths
      uses macro definition GET_SYMBOL_DB defined in testsymboldatabase.cpp
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function name() defined in Variable
      uses function dimensions() defined in Variable
      uses function dimension(std::size_t) defined in Variable
   function functionDeclarations() in line 1105
      26 lines of code
      0 parameters
      2 conditional paths
      uses macro definition GET_SYMBOL_DB defined in testsymboldatabase.cpp
      uses macro definition ASSERT defined in testsuite.h
      uses function findFunctionByName(const char,const Scope *) defined in TestSymbolDatabase
      uses variable functionList defined in Scope
      uses function foo(int *) defined in AssignmentAddressToInteger/bad.c
      uses variable token defined in Function
      uses variable tokenDef defined in Function
      uses function str(T &&) defined in Token
      uses function hasBody() defined in Function
      uses function strAt(int) defined in Token
      uses variable argumentList defined in Function
   function functionDeclarationTemplate() in line 1087
      17 lines of code
      0 parameters
      2 conditional paths
      uses macro definition GET_SYMBOL_DB defined in testsymboldatabase.cpp
      uses macro definition ASSERT defined in testsuite.h
      uses function findFunctionByName(const char,const Scope *) defined in TestSymbolDatabase
      uses variable functionList defined in Scope
      uses function foo(int *) defined in AssignmentAddressToInteger/bad.c
   function functionLinkage() in line 1197
      30 lines of code
      0 parameters
      2 conditional paths
      uses macro definition GET_SYMBOL_DB defined in testsymboldatabase.cpp
      uses macro definition ASSERT defined in testsuite.h
      uses variable errout defined in redirect.h
      uses function f(char) defined in test.cxx
   function functionPrototype() in line 3032
      10 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestSymbolDatabase
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function getSymbolDB_inner(Tokenizer &,const char *,const char *) in line 60
      6 lines of code
      3 parameters
      1 conditional paths
      uses variable errout defined in redirect.h
      uses variable code defined in extracttests.py
      uses function tokenize(std::istream &,const char,const std::string &,bool) defined in Tokenizer
      uses variable filename defined in extracttests.py
      uses function getSymbolDatabase() defined in Tokenizer
   function getVariableFromVarIdBoundsCheck() in line 811
      10 lines of code
      0 parameters
      1 conditional paths
      uses macro definition GET_SYMBOL_DB defined in testsymboldatabase.cpp
      uses macro definition ASSERT defined in testsuite.h
      uses macro definition ASSERT_THROW defined in testsuite.h
   function hasClassFunction() in line 891
      22 lines of code
      0 parameters
      2 conditional paths
      uses macro definition GET_SYMBOL_DB defined in testsymboldatabase.cpp
      uses macro definition ASSERT defined in testsuite.h
      uses function findFunctionScopeByToken(const SymbolDatabase *,const Token *) defined in TestSymbolDatabase
      uses function findFunctionByName(const char,const Scope *) defined in TestSymbolDatabase
   function hasClassFunctionReturningFunctionPointer() in line 977
      20 lines of code
      0 parameters
      2 conditional paths
      uses macro definition GET_SYMBOL_DB defined in testsymboldatabase.cpp
      uses macro definition ASSERT defined in testsuite.h
      uses function findFunctionScopeByToken(const SymbolDatabase *,const Token *) defined in TestSymbolDatabase
      uses function findFunctionByName(const char,const Scope *) defined in TestSymbolDatabase
   function hasGlobalVariables1() in line 1275
      14 lines of code
      0 parameters
      3 conditional paths
      uses macro definition GET_SYMBOL_DB defined in testsymboldatabase.cpp
      uses macro definition ASSERT defined in testsuite.h
   function hasGlobalVariables2() in line 1290
      14 lines of code
      0 parameters
      3 conditional paths
      uses macro definition GET_SYMBOL_DB defined in testsymboldatabase.cpp
      uses macro definition ASSERT defined in testsuite.h
   function hasGlobalVariables3() in line 1305
      14 lines of code
      0 parameters
      3 conditional paths
      uses macro definition GET_SYMBOL_DB defined in testsymboldatabase.cpp
      uses macro definition ASSERT defined in testsuite.h
   function hasInlineClassFunction() in line 844
      25 lines of code
      0 parameters
      2 conditional paths
      uses macro definition GET_SYMBOL_DB defined in testsymboldatabase.cpp
      uses macro definition ASSERT defined in testsuite.h
      uses function findFunctionScopeByToken(const SymbolDatabase *,const Token *) defined in TestSymbolDatabase
      uses function findFunctionByName(const char,const Scope *) defined in TestSymbolDatabase
      uses function previous() defined in Token
   function hasInlineClassFunctionReturningFunctionPointer() in line 935
      20 lines of code
      0 parameters
      2 conditional paths
      uses macro definition GET_SYMBOL_DB defined in testsymboldatabase.cpp
      uses macro definition ASSERT defined in testsuite.h
      uses function findFunctionScopeByToken(const SymbolDatabase *,const Token *) defined in TestSymbolDatabase
      uses function findFunctionByName(const char,const Scope *) defined in TestSymbolDatabase
   function hasMissingInlineClassFunction() in line 870
      20 lines of code
      0 parameters
      2 conditional paths
      uses macro definition GET_SYMBOL_DB defined in testsymboldatabase.cpp
      uses macro definition ASSERT defined in testsuite.h
      uses function findFunctionScopeByToken(const SymbolDatabase *,const Token *) defined in TestSymbolDatabase
      uses function findFunctionByName(const char,const Scope *) defined in TestSymbolDatabase
   function hasMissingInlineClassFunctionReturningFunctionPointer() in line 956
      20 lines of code
      0 parameters
      2 conditional paths
      uses macro definition GET_SYMBOL_DB defined in testsymboldatabase.cpp
      uses macro definition ASSERT defined in testsuite.h
      uses function findFunctionScopeByToken(const SymbolDatabase *,const Token *) defined in TestSymbolDatabase
      uses function findFunctionByName(const char,const Scope *) defined in TestSymbolDatabase
   function hasRegularFunction() in line 822
      21 lines of code
      0 parameters
      2 conditional paths
      uses macro definition GET_SYMBOL_DB defined in testsymboldatabase.cpp
      uses macro definition ASSERT defined in testsuite.h
      uses function findFunctionScopeByToken(const SymbolDatabase *,const Token *) defined in TestSymbolDatabase
      uses variable className defined in Scope
      uses variable functionOf defined in Scope
      uses function findFunctionByName(const char,const Scope *) defined in TestSymbolDatabase
      uses variable function defined in Scope
      uses variable nestedIn defined in Function
   function hasRegularFunctionReturningFunctionPointer() in line 914
      20 lines of code
      0 parameters
      2 conditional paths
      uses macro definition GET_SYMBOL_DB defined in testsymboldatabase.cpp
      uses macro definition ASSERT defined in testsuite.h
      uses function findFunctionScopeByToken(const SymbolDatabase *,const Token *) defined in TestSymbolDatabase
      uses function findFunctionByName(const char,const Scope *) defined in TestSymbolDatabase
   function hasSubClassConstructor() in line 1042
      17 lines of code
      0 parameters
      4 conditional paths
      uses macro definition GET_SYMBOL_DB defined in testsymboldatabase.cpp
      uses macro definition ASSERT defined in testsuite.h
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses enumvalue eConstructor defined in Function
   function isFunction() in line 2341
      12 lines of code
      0 parameters
      1 conditional paths
      uses macro definition GET_SYMBOL_DB defined in testsymboldatabase.cpp
      uses macro definition ASSERT defined in testsuite.h
      uses function typeStartToken() defined in Variable
      uses function str(T &&) defined in Token
   function isImplicitlyVirtual() in line 2210
      114 lines of code
      0 parameters
      2 conditional paths
      uses macro definition GET_SYMBOL_DB defined in testsymboldatabase.cpp
      uses macro definition ASSERT defined in testsuite.h
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses macro definition TODO_ASSERT_EQUALS defined in testsuite.h
   function isPure() in line 2325
      16 lines of code
      0 parameters
      2 conditional paths
      uses macro definition GET_SYMBOL_DB defined in testsymboldatabase.cpp
      uses macro definition ASSERT defined in testsuite.h
   function isVariableDeclarationDoesNotIdentifyCppCast() in line 653
      6 lines of code
      0 parameters
      1 conditional paths
      uses function reset() defined in TestSymbolDatabase
      uses variable result defined in triage-report.py
      uses variable si defined in TestSymbolDatabase
      uses function isVariableDeclaration(const Token *,const Token *&,const Token *&) defined in Scope
      uses function tokens() defined in givenACodeSampleToTokenize
      uses variable vartok defined in TestSymbolDatabase
      uses variable typetok defined in TestSymbolDatabase
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function isVariableDeclarationDoesNotIdentifyTemplateClass() in line 646
      6 lines of code
      0 parameters
      1 conditional paths
      uses function reset() defined in TestSymbolDatabase
      uses variable result defined in triage-report.py
      uses variable si defined in TestSymbolDatabase
      uses function isVariableDeclaration(const Token *,const Token *&,const Token *&) defined in Scope
      uses function tokens() defined in givenACodeSampleToTokenize
      uses variable vartok defined in TestSymbolDatabase
      uses variable typetok defined in TestSymbolDatabase
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function isVariableDeclarationIdentifiesNestedTemplateVariable() in line 604
      12 lines of code
      0 parameters
      1 conditional paths
      uses function reset() defined in TestSymbolDatabase
      uses variable result defined in triage-report.py
      uses variable si defined in TestSymbolDatabase
      uses function isVariableDeclaration(const Token *,const Token *&,const Token *&) defined in Scope
      uses function tokens() defined in givenACodeSampleToTokenize
      uses variable vartok defined in TestSymbolDatabase
      uses variable typetok defined in TestSymbolDatabase
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function str(T &&) defined in Token
      uses function previous() defined in Token
      uses enumvalue Public defined in symboldatabase.h
      uses variable settings defined in TestSymbolDatabase
      uses variable library defined in Settings
      uses macro definition ASSERT defined in testsuite.h
   function isVariableDeclarationIdentifiesReference() in line 617
      28 lines of code
      0 parameters
      1 conditional paths
      uses function reset() defined in TestSymbolDatabase
      uses variable si defined in TestSymbolDatabase
      uses function isVariableDeclaration(const Token *,const Token *&,const Token *&) defined in Scope
      uses function tokens() defined in givenACodeSampleToTokenize
      uses variable vartok defined in TestSymbolDatabase
      uses variable typetok defined in TestSymbolDatabase
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function previous() defined in Token
      uses enumvalue Public defined in symboldatabase.h
      uses variable settings defined in TestSymbolDatabase
      uses variable library defined in Settings
      uses macro definition ASSERT defined in testsuite.h
   function isVariableDeclarationIdentifiesTemplatedArrayVariable() in line 565
      12 lines of code
      0 parameters
      1 conditional paths
      uses function reset() defined in TestSymbolDatabase
      uses variable result defined in triage-report.py
      uses variable si defined in TestSymbolDatabase
      uses function isVariableDeclaration(const Token *,const Token *&,const Token *&) defined in Scope
      uses function tokens() defined in givenACodeSampleToTokenize
      uses variable vartok defined in TestSymbolDatabase
      uses variable typetok defined in TestSymbolDatabase
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function str(T &&) defined in Token
      uses function previous() defined in Token
      uses enumvalue Public defined in symboldatabase.h
      uses variable settings defined in TestSymbolDatabase
      uses variable library defined in Settings
      uses macro definition ASSERT defined in testsuite.h
   function isVariableDeclarationIdentifiesTemplatedPointerToPointerVariable() in line 552
      12 lines of code
      0 parameters
      1 conditional paths
      uses function reset() defined in TestSymbolDatabase
      uses variable result defined in triage-report.py
      uses variable si defined in TestSymbolDatabase
      uses function isVariableDeclaration(const Token *,const Token *&,const Token *&) defined in Scope
      uses function tokens() defined in givenACodeSampleToTokenize
      uses variable vartok defined in TestSymbolDatabase
      uses variable typetok defined in TestSymbolDatabase
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function str(T &&) defined in Token
      uses function previous() defined in Token
      uses enumvalue Public defined in symboldatabase.h
      uses variable settings defined in TestSymbolDatabase
      uses variable library defined in Settings
      uses macro definition ASSERT defined in testsuite.h
   function isVariableDeclarationIdentifiesTemplatedPointerVariable() in line 539
      12 lines of code
      0 parameters
      1 conditional paths
      uses function reset() defined in TestSymbolDatabase
      uses variable result defined in triage-report.py
      uses variable si defined in TestSymbolDatabase
      uses function isVariableDeclaration(const Token *,const Token *&,const Token *&) defined in Scope
      uses function tokens() defined in givenACodeSampleToTokenize
      uses variable vartok defined in TestSymbolDatabase
      uses variable typetok defined in TestSymbolDatabase
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function str(T &&) defined in Token
      uses function previous() defined in Token
      uses enumvalue Public defined in symboldatabase.h
      uses variable settings defined in TestSymbolDatabase
      uses variable library defined in Settings
      uses macro definition ASSERT defined in testsuite.h
   function isVariableDeclarationIdentifiesTemplatedVariable() in line 578
      12 lines of code
      0 parameters
      1 conditional paths
      uses function reset() defined in TestSymbolDatabase
      uses variable result defined in triage-report.py
      uses variable si defined in TestSymbolDatabase
      uses function isVariableDeclaration(const Token *,const Token *&,const Token *&) defined in Scope
      uses function tokens() defined in givenACodeSampleToTokenize
      uses variable vartok defined in TestSymbolDatabase
      uses variable typetok defined in TestSymbolDatabase
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function str(T &&) defined in Token
      uses function previous() defined in Token
      uses enumvalue Public defined in symboldatabase.h
      uses variable settings defined in TestSymbolDatabase
      uses variable library defined in Settings
      uses macro definition ASSERT defined in testsuite.h
   function isVariableDeclarationIdentifiesTemplatedVariableIterator() in line 591
      12 lines of code
      0 parameters
      1 conditional paths
      uses function reset() defined in TestSymbolDatabase
      uses variable result defined in triage-report.py
      uses variable si defined in TestSymbolDatabase
      uses function isVariableDeclaration(const Token *,const Token *&,const Token *&) defined in Scope
      uses function tokens() defined in givenACodeSampleToTokenize
      uses variable vartok defined in TestSymbolDatabase
      uses variable typetok defined in TestSymbolDatabase
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function str(T &&) defined in Token
      uses function previous() defined in Token
      uses enumvalue Public defined in symboldatabase.h
      uses variable settings defined in TestSymbolDatabase
      uses variable library defined in Settings
      uses macro definition ASSERT defined in testsuite.h
   function isVariableDeclarationPointerConst() in line 660
      10 lines of code
      0 parameters
      1 conditional paths
      uses function reset() defined in TestSymbolDatabase
      uses variable result defined in triage-report.py
      uses variable si defined in TestSymbolDatabase
      uses function isVariableDeclaration(const Token *,const Token *&,const Token *&) defined in Scope
      uses function tokens() defined in givenACodeSampleToTokenize
      uses variable vartok defined in TestSymbolDatabase
      uses variable typetok defined in TestSymbolDatabase
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function previous() defined in Token
      uses enumvalue Public defined in symboldatabase.h
      uses variable settings defined in TestSymbolDatabase
      uses variable library defined in Settings
      uses macro definition ASSERT defined in testsuite.h
   function isVariableDeclarationRValueRef() in line 671
      12 lines of code
      0 parameters
      1 conditional paths
      uses function reset() defined in TestSymbolDatabase
      uses variable result defined in triage-report.py
      uses variable si defined in TestSymbolDatabase
      uses function isVariableDeclaration(const Token *,const Token *&,const Token *&) defined in Scope
      uses function tokens() defined in givenACodeSampleToTokenize
      uses variable vartok defined in TestSymbolDatabase
      uses variable typetok defined in TestSymbolDatabase
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function previous() defined in Token
      uses enumvalue Public defined in symboldatabase.h
      uses variable settings defined in TestSymbolDatabase
      uses variable library defined in Settings
      uses macro definition ASSERT defined in testsuite.h
      uses function tokAt(int) defined in Token
      uses function scope(const Scope *) defined in Token
   function isVariableStlType() in line 700
      51 lines of code
      0 parameters
      1 conditional paths
      uses function reset() defined in TestSymbolDatabase
      uses variable code defined in extracttests.py
      uses function createTokens(std::istream &,const std::string &) defined in TokenList
      uses variable result defined in triage-report.py
      uses variable si defined in TestSymbolDatabase
      uses function isVariableDeclaration(const Token *,const Token *&,const Token *&) defined in Scope
      uses function front() defined in TokenList
      uses variable vartok defined in TestSymbolDatabase
      uses variable typetok defined in TestSymbolDatabase
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function back() defined in TokenList
      uses enumvalue Public defined in symboldatabase.h
      uses variable settings defined in TestSymbolDatabase
      uses variable library defined in Settings
      uses function tokAt(int) defined in Token
      uses function link(Token *) defined in Token
   function lambda() in line 3043
      21 lines of code
      0 parameters
      2 conditional paths
      uses macro definition GET_SYMBOL_DB defined in testsymboldatabase.cpp
      uses macro definition ASSERT defined in testsuite.h
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses enumvalue eGlobal defined in Scope
      uses enumvalue eFunction defined in Scope
      uses enumvalue eLambda defined in Scope
   function memberFunctionOfUnknownClassMacro1() in line 1145
      15 lines of code
      0 parameters
      2 conditional paths
      uses macro definition GET_SYMBOL_DB defined in testsymboldatabase.cpp
      uses macro definition ASSERT defined in testsuite.h
      uses variable errout defined in redirect.h
      uses variable nestedIn defined in Scope
   function memberFunctionOfUnknownClassMacro2() in line 1161
      19 lines of code
      0 parameters
      2 conditional paths
      uses macro definition GET_SYMBOL_DB defined in testsymboldatabase.cpp
      uses macro definition ASSERT defined in testsuite.h
      uses variable errout defined in redirect.h
      uses variable nestedIn defined in Scope
   function memberFunctionOfUnknownClassMacro3() in line 1181
      15 lines of code
      0 parameters
      2 conditional paths
      uses macro definition GET_SYMBOL_DB defined in testsymboldatabase.cpp
      uses macro definition ASSERT defined in testsuite.h
      uses variable errout defined in redirect.h
      uses variable nestedIn defined in Scope
   function namespaces1() in line 1453
      28 lines of code
      0 parameters
      4 conditional paths
      uses macro definition GET_SYMBOL_DB defined in testsymboldatabase.cpp
      uses macro definition ASSERT defined in testsuite.h
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable className defined in Scope
      uses variable functionList defined in Scope
   function namespaces2() in line 1483
      33 lines of code
      0 parameters
      4 conditional paths
      uses macro definition GET_SYMBOL_DB defined in testsymboldatabase.cpp
      uses macro definition ASSERT defined in testsuite.h
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable className defined in Scope
      uses variable functionList defined in Scope
   function namespaces3() in line 1517
      7 lines of code
      0 parameters
      1 conditional paths
      uses macro definition GET_SYMBOL_DB defined in testsymboldatabase.cpp
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses enumvalue eGlobal defined in Scope
      uses enumvalue eNamespace defined in Scope
   function noexceptFunction1() in line 2693
      15 lines of code
      0 parameters
      2 conditional paths
      uses macro definition GET_SYMBOL_DB defined in testsymboldatabase.cpp
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
      uses macro definition FUNC defined in testsymboldatabase.cpp
   function noexceptFunction2() in line 2709
      10 lines of code
      0 parameters
      2 conditional paths
      uses macro definition GET_SYMBOL_DB defined in testsymboldatabase.cpp
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
      uses macro definition FUNC defined in testsymboldatabase.cpp
   function noexceptFunction3() in line 2724
      39 lines of code
      0 parameters
      3 conditional paths
      uses macro definition GET_SYMBOL_DB defined in testsymboldatabase.cpp
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
      uses macro definition CLASS_FUNC defined in testsymboldatabase.cpp
   function noexceptFunction4() in line 2764
      23 lines of code
      0 parameters
      3 conditional paths
      uses macro definition GET_SYMBOL_DB defined in testsymboldatabase.cpp
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
      uses macro definition CLASS_FUNC defined in testsymboldatabase.cpp
   function nothrowAttributeFunction() in line 2849
      13 lines of code
      0 parameters
      3 conditional paths
      uses macro definition GET_SYMBOL_DB defined in testsymboldatabase.cpp
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
      uses function findFunctionByName(const char,const Scope *) defined in TestSymbolDatabase
      uses function isAttributeNothrow() defined in Function
   function nothrowDeclspecFunction() in line 2863
      12 lines of code
      0 parameters
      3 conditional paths
      uses macro definition GET_SYMBOL_DB defined in testsymboldatabase.cpp
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
      uses function findFunctionByName(const char,const Scope *) defined in TestSymbolDatabase
      uses function isAttributeNothrow() defined in Function
   function parseFunctionCorrect() in line 1247
      11 lines of code
      0 parameters
      1 conditional paths
      uses macro definition GET_SYMBOL_DB defined in testsymboldatabase.cpp
      uses macro definition ASSERT defined in testsuite.h
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function findFunctionByName(const char,const Scope *) defined in TestSymbolDatabase
   function parseFunctionDeclarationCorrect() in line 1259
      6 lines of code
      0 parameters
      1 conditional paths
      uses macro definition GET_SYMBOL_DB defined in testsymboldatabase.cpp
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function pointerToMemberFunction() in line 1028
      13 lines of code
      0 parameters
      3 conditional paths
      uses macro definition GET_SYMBOL_DB defined in testsymboldatabase.cpp
      uses macro definition ASSERT defined in testsuite.h
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function rangeBasedFor() in line 684
      16 lines of code
      0 parameters
      3 conditional paths
      uses macro definition GET_SYMBOL_DB defined in testsymboldatabase.cpp
      uses macro definition ASSERT defined in testsuite.h
      uses enumvalue eFor defined in Scope
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable e defined in extracttests.py
   function reset() in line 53
      6 lines of code
      0 parameters
      1 conditional paths
      uses variable vartok defined in TestSymbolDatabase
      uses variable typetok defined in TestSymbolDatabase
      uses variable t defined in TestSymbolDatabase
      uses variable found defined in TestSymbolDatabase
   function run() in line 97
      179 lines of code
      0 parameters
      1 conditional paths
      uses macro definition LOAD_LIB_2 defined in testsuite.h
      uses variable settings defined in TestSymbolDatabase
      uses variable library defined in Settings
      uses macro definition TEST_CASE defined in testsuite.h
      uses function array() defined in TestSymbolDatabase
      uses function stlarray() defined in TestSymbolDatabase
      uses function test_isVariableDeclarationCanHandleNull() defined in TestSymbolDatabase
      uses function test_isVariableDeclarationIdentifiesSimpleDeclaration() defined in TestSymbolDatabase
      uses function test_isVariableDeclarationIdentifiesInitialization() defined in TestSymbolDatabase
      uses function test_isVariableDeclarationIdentifiesCpp11Initialization() defined in TestSymbolDatabase
      uses function test_isVariableDeclarationIdentifiesScopedDeclaration() defined in TestSymbolDatabase
      uses function test_isVariableDeclarationIdentifiesStdDeclaration() defined in TestSymbolDatabase
      uses function test_isVariableDeclarationIdentifiesScopedStdDeclaration() defined in TestSymbolDatabase
      uses function test_isVariableDeclarationIdentifiesManyScopes() defined in TestSymbolDatabase
      uses function test_isVariableDeclarationIdentifiesPointers() defined in TestSymbolDatabase
      uses function test_isVariableDeclarationDoesNotIdentifyConstness() defined in TestSymbolDatabase
      uses function test_isVariableDeclarationIdentifiesFirstOfManyVariables() defined in TestSymbolDatabase
      uses function test_isVariableDeclarationIdentifiesScopedPointerDeclaration() defined in TestSymbolDatabase
      uses function test_isVariableDeclarationIdentifiesDeclarationWithIndirection() defined in TestSymbolDatabase
      uses function test_isVariableDeclarationIdentifiesDeclarationWithMultipleIndirection() defined in TestSymbolDatabase
      uses function test_isVariableDeclarationIdentifiesArray() defined in TestSymbolDatabase
      uses function test_isVariableDeclarationIdentifiesPointerArray() defined in TestSymbolDatabase
      uses function test_isVariableDeclarationIdentifiesOfArrayPointers() defined in TestSymbolDatabase
      uses function isVariableDeclarationIdentifiesTemplatedPointerVariable() defined in TestSymbolDatabase
      uses function isVariableDeclarationIdentifiesTemplatedPointerToPointerVariable() defined in TestSymbolDatabase
      uses function isVariableDeclarationIdentifiesTemplatedArrayVariable() defined in TestSymbolDatabase
      uses function isVariableDeclarationIdentifiesTemplatedVariable() defined in TestSymbolDatabase
      uses function isVariableDeclarationIdentifiesTemplatedVariableIterator() defined in TestSymbolDatabase
      uses function isVariableDeclarationIdentifiesNestedTemplateVariable() defined in TestSymbolDatabase
      uses function isVariableDeclarationIdentifiesReference() defined in TestSymbolDatabase
      uses function isVariableDeclarationDoesNotIdentifyTemplateClass() defined in TestSymbolDatabase
      uses function isVariableDeclarationDoesNotIdentifyCppCast() defined in TestSymbolDatabase
      uses function isVariableDeclarationPointerConst() defined in TestSymbolDatabase
      uses function isVariableDeclarationRValueRef() defined in TestSymbolDatabase
      uses function isVariableStlType() defined in TestSymbolDatabase
      uses function rangeBasedFor() defined in TestSymbolDatabase
      uses function arrayMemberVar1() defined in TestSymbolDatabase
      uses function arrayMemberVar2() defined in TestSymbolDatabase
      uses function arrayMemberVar3() defined in TestSymbolDatabase
      uses function staticMemberVar() defined in TestSymbolDatabase
      uses function getVariableFromVarIdBoundsCheck() defined in TestSymbolDatabase
      uses function hasRegularFunction() defined in TestSymbolDatabase
      uses function hasInlineClassFunction() defined in TestSymbolDatabase
      uses function hasMissingInlineClassFunction() defined in TestSymbolDatabase
      uses function hasClassFunction() defined in TestSymbolDatabase
      uses function hasRegularFunctionReturningFunctionPointer() defined in TestSymbolDatabase
      uses function hasInlineClassFunctionReturningFunctionPointer() defined in TestSymbolDatabase
      uses function hasMissingInlineClassFunctionReturningFunctionPointer() defined in TestSymbolDatabase
      uses function hasClassFunctionReturningFunctionPointer() defined in TestSymbolDatabase
      uses function complexFunctionArrayPtr() defined in TestSymbolDatabase
      uses function pointerToMemberFunction() defined in TestSymbolDatabase
      uses function hasSubClassConstructor() defined in TestSymbolDatabase
      uses function testConstructors() defined in TestSymbolDatabase
      uses function functionDeclarationTemplate() defined in TestSymbolDatabase
      uses function functionDeclarations() defined in TestSymbolDatabase
      uses function constructorInitialization() defined in TestSymbolDatabase
      uses function memberFunctionOfUnknownClassMacro1() defined in TestSymbolDatabase
      uses function memberFunctionOfUnknownClassMacro2() defined in TestSymbolDatabase
      uses function memberFunctionOfUnknownClassMacro3() defined in TestSymbolDatabase
      uses function functionLinkage() defined in TestSymbolDatabase
      uses function classWithFriend() defined in TestSymbolDatabase
      uses function parseFunctionCorrect() defined in TestSymbolDatabase
      uses function parseFunctionDeclarationCorrect() defined in TestSymbolDatabase
      uses function Cpp11InitInInitList() defined in TestSymbolDatabase
      uses function hasGlobalVariables1() defined in TestSymbolDatabase
      uses function hasGlobalVariables2() defined in TestSymbolDatabase
      uses function hasGlobalVariables3() defined in TestSymbolDatabase
      uses function checkTypeStartEndToken1() defined in TestSymbolDatabase
      uses function checkTypeStartEndToken2() defined in TestSymbolDatabase
      uses function functionArgs1() defined in TestSymbolDatabase
      uses function functionArgs2() defined in TestSymbolDatabase
      uses function functionArgs3() defined in TestSymbolDatabase
      uses function functionArgs4() defined in TestSymbolDatabase
      uses function namespaces1() defined in TestSymbolDatabase
      uses function namespaces2() defined in TestSymbolDatabase
      uses function namespaces3() defined in TestSymbolDatabase
      uses function tryCatch1() defined in TestSymbolDatabase
      uses function symboldatabase1() defined in TestSymbolDatabase
      uses function symboldatabase2() defined in TestSymbolDatabase
      uses function symboldatabase3() defined in TestSymbolDatabase
      uses function symboldatabase4() defined in TestSymbolDatabase
      uses function symboldatabase5() defined in TestSymbolDatabase
      uses function symboldatabase6() defined in TestSymbolDatabase
      uses function symboldatabase7() defined in TestSymbolDatabase
      uses function symboldatabase8() defined in TestSymbolDatabase
      uses function symboldatabase9() defined in TestSymbolDatabase
      uses function symboldatabase10() defined in TestSymbolDatabase
      uses function symboldatabase11() defined in TestSymbolDatabase
      uses function symboldatabase12() defined in TestSymbolDatabase
      uses function symboldatabase13() defined in TestSymbolDatabase
      uses function symboldatabase14() defined in TestSymbolDatabase
      uses function symboldatabase15() defined in TestSymbolDatabase
      uses function symboldatabase16() defined in TestSymbolDatabase
      uses function symboldatabase17() defined in TestSymbolDatabase
      uses function symboldatabase18() defined in TestSymbolDatabase
      uses function symboldatabase19() defined in TestSymbolDatabase
      uses function symboldatabase20() defined in TestSymbolDatabase
      uses function symboldatabase21() defined in TestSymbolDatabase
      uses function symboldatabase22() defined in TestSymbolDatabase
      uses function symboldatabase23() defined in TestSymbolDatabase
      uses function symboldatabase24() defined in TestSymbolDatabase
      uses function symboldatabase25() defined in TestSymbolDatabase
      uses function symboldatabase26() defined in TestSymbolDatabase
      uses function symboldatabase27() defined in TestSymbolDatabase
      uses function symboldatabase28() defined in TestSymbolDatabase
      uses function symboldatabase29() defined in TestSymbolDatabase
      uses function symboldatabase30() defined in TestSymbolDatabase
      uses function symboldatabase31() defined in TestSymbolDatabase
      uses function symboldatabase32() defined in TestSymbolDatabase
      uses function symboldatabase33() defined in TestSymbolDatabase
      uses function symboldatabase34() defined in TestSymbolDatabase
      uses function symboldatabase35() defined in TestSymbolDatabase
      uses function symboldatabase36() defined in TestSymbolDatabase
      uses function symboldatabase37() defined in TestSymbolDatabase
      uses function symboldatabase38() defined in TestSymbolDatabase
      uses function symboldatabase39() defined in TestSymbolDatabase
      uses function symboldatabase40() defined in TestSymbolDatabase
      uses function symboldatabase41() defined in TestSymbolDatabase
      uses function symboldatabase42() defined in TestSymbolDatabase
      uses function symboldatabase43() defined in TestSymbolDatabase
      uses function symboldatabase44() defined in TestSymbolDatabase
      uses function symboldatabase45() defined in TestSymbolDatabase
      uses function symboldatabase46() defined in TestSymbolDatabase
      uses function symboldatabase47() defined in TestSymbolDatabase
      uses function symboldatabase48() defined in TestSymbolDatabase
      uses function symboldatabase49() defined in TestSymbolDatabase
      uses function symboldatabase50() defined in TestSymbolDatabase
      uses function symboldatabase51() defined in TestSymbolDatabase
      uses function symboldatabase52() defined in TestSymbolDatabase
      uses function symboldatabase53() defined in TestSymbolDatabase
      uses function isImplicitlyVirtual() defined in TestSymbolDatabase
      uses function isPure() defined in TestSymbolDatabase
      uses function isFunction() defined in TestSymbolDatabase
      uses function findFunction1() defined in TestSymbolDatabase
      uses function findFunction2() defined in TestSymbolDatabase
      uses function findFunction3() defined in TestSymbolDatabase
      uses function findFunction4() defined in TestSymbolDatabase
      uses function findFunction5() defined in TestSymbolDatabase
      uses function findFunction6() defined in TestSymbolDatabase
      uses function findFunction7() defined in TestSymbolDatabase
      uses function findFunction8() defined in TestSymbolDatabase
      uses function noexceptFunction1() defined in TestSymbolDatabase
      uses function noexceptFunction2() defined in TestSymbolDatabase
      uses function noexceptFunction3() defined in TestSymbolDatabase
      uses function noexceptFunction4() defined in TestSymbolDatabase
      uses function throwFunction1() defined in TestSymbolDatabase
      uses function throwFunction2() defined in TestSymbolDatabase
      uses function nothrowAttributeFunction() defined in TestSymbolDatabase
      uses function nothrowDeclspecFunction() defined in TestSymbolDatabase
      uses function varTypesIntegral() defined in TestSymbolDatabase
      uses function varTypesFloating() defined in TestSymbolDatabase
      uses function varTypesOther() defined in TestSymbolDatabase
      uses function functionPrototype() defined in TestSymbolDatabase
      uses function lambda() defined in TestSymbolDatabase
      uses function circularDependencies() defined in TestSymbolDatabase
      uses function valuetype() defined in TestSymbolDatabase
   function staticMemberVar() in line 800
      10 lines of code
      0 parameters
      1 conditional paths
      uses macro definition GET_SYMBOL_DB defined in testsymboldatabase.cpp
      uses macro definition ASSERT defined in testsuite.h
      uses function isStatic() defined in Variable
      uses function isConst() defined in Variable
      uses function isPrivate() defined in Variable
   function stlarray() in line 288
      10 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses function createTokens(std::istream &,const std::string &) defined in TokenList
      uses function front() defined in TokenList
      uses function tokAt(int) defined in Token
      uses function link(Token *) defined in Token
      uses function next() defined in Token
      uses function back() defined in TokenList
      uses enumvalue Public defined in symboldatabase.h
      uses variable settings defined in TestSymbolDatabase
      uses variable library defined in Settings
      uses macro definition ASSERT defined in testsuite.h
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function symboldatabase1() in line 1540
      10 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestSymbolDatabase
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function symboldatabase10() in line 1668
      12 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestSymbolDatabase
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function symboldatabase11() in line 1681
      9 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestSymbolDatabase
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function symboldatabase12() in line 1691
      8 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestSymbolDatabase
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function symboldatabase13() in line 1700
      8 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestSymbolDatabase
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function symboldatabase14() in line 1709
      4 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_THROW defined in testsuite.h
      uses function check(const char,bool) defined in TestSymbolDatabase
   function symboldatabase15() in line 1714
      4 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_THROW defined in testsuite.h
      uses function check(const char,bool) defined in TestSymbolDatabase
   function symboldatabase16() in line 1719
      6 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestSymbolDatabase
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function symboldatabase17() in line 1726
      6 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestSymbolDatabase
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function symboldatabase18() in line 1733
      6 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestSymbolDatabase
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function symboldatabase19() in line 1740
      6 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestSymbolDatabase
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function symboldatabase2() in line 1551
      13 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestSymbolDatabase
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function symboldatabase20() in line 1747
      4 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_THROW defined in testsuite.h
      uses function check(const char,bool) defined in TestSymbolDatabase
   function symboldatabase21() in line 1752
      11 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestSymbolDatabase
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function symboldatabase22() in line 1765
      5 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestSymbolDatabase
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function symboldatabase23() in line 1772
      9 lines of code
      0 parameters
      1 conditional paths
      uses macro definition GET_SYMBOL_DB defined in testsymboldatabase.cpp
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function symboldatabase24() in line 1783
      40 lines of code
      0 parameters
      7 conditional paths
      uses macro definition GET_SYMBOL_DB defined in testsymboldatabase.cpp
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses macro definition ASSERT defined in testsuite.h
      uses enumvalue eConstructor defined in Function
      uses enumvalue eDestructor defined in Function
   function symboldatabase25() in line 1825
      9 lines of code
      0 parameters
      1 conditional paths
      uses macro definition GET_SYMBOL_DB defined in testsymboldatabase.cpp
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
      uses macro definition ASSERT defined in testsuite.h
   function symboldatabase26() in line 1836
      8 lines of code
      0 parameters
      1 conditional paths
      uses macro definition GET_SYMBOL_DB_C defined in testsymboldatabase.cpp
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
      uses macro definition ASSERT defined in testsuite.h
   function symboldatabase27() in line 1846
      8 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestSymbolDatabase
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function symboldatabase28() in line 1855
      5 lines of code
      0 parameters
      1 conditional paths
      uses macro definition GET_SYMBOL_DB defined in testsymboldatabase.cpp
      uses macro definition ASSERT defined in testsuite.h
   function symboldatabase29() in line 1862
      6 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestSymbolDatabase
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function symboldatabase3() in line 1565
      7 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestSymbolDatabase
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function symboldatabase30() in line 1869
      5 lines of code
      0 parameters
      1 conditional paths
      uses macro definition GET_SYMBOL_DB defined in testsymboldatabase.cpp
      uses macro definition ASSERT defined in testsuite.h
   function symboldatabase31() in line 1875
      41 lines of code
      0 parameters
      2 conditional paths
      uses macro definition GET_SYMBOL_DB defined in testsymboldatabase.cpp
      uses macro definition ASSERT defined in testsuite.h
      uses variable classDef defined in Type
      uses variable classScope defined in Type
      uses variable enclosingScope defined in Type
      uses function name() defined in Type
      uses variable numConstructors defined in Scope
      uses variable className defined in Scope
   function symboldatabase32() in line 1917
      8 lines of code
      0 parameters
      1 conditional paths
      uses macro definition GET_SYMBOL_DB defined in testsymboldatabase.cpp
      uses macro definition ASSERT defined in testsuite.h
   function symboldatabase33() in line 1926
      9 lines of code
      0 parameters
      1 conditional paths
      uses macro definition GET_SYMBOL_DB defined in testsymboldatabase.cpp
      uses macro definition ASSERT defined in testsuite.h
   function symboldatabase34() in line 1936
      8 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestSymbolDatabase
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function symboldatabase35() in line 1945
      5 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestSymbolDatabase
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function symboldatabase36() in line 1951
      4 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestSymbolDatabase
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function symboldatabase37() in line 1956
      29 lines of code
      0 parameters
      3 conditional paths
      uses macro definition GET_SYMBOL_DB defined in testsymboldatabase.cpp
      uses macro definition ASSERT defined in testsuite.h
      uses variable classDef defined in Type
      uses variable classScope defined in Type
      uses variable enclosingScope defined in Type
      uses function name() defined in Type
   function symboldatabase38() in line 1986
      11 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestSymbolDatabase
   function symboldatabase39() in line 1998
      3 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestSymbolDatabase
   function symboldatabase4() in line 1573
      31 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestSymbolDatabase
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function symboldatabase40() in line 2002
      7 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestSymbolDatabase
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function symboldatabase41() in line 2010
      4 lines of code
      0 parameters
      1 conditional paths
      uses macro definition GET_SYMBOL_DB defined in testsymboldatabase.cpp
      uses macro definition ASSERT defined in testsuite.h
   function symboldatabase42() in line 2015
      7 lines of code
      0 parameters
      1 conditional paths
      uses macro definition GET_SYMBOL_DB defined in testsymboldatabase.cpp
      uses macro definition ASSERT defined in testsuite.h
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable varlist defined in Scope
   function symboldatabase43() in line 2023
      6 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestSymbolDatabase
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function symboldatabase44() in line 2030
      13 lines of code
      0 parameters
      2 conditional paths
      uses macro definition GET_SYMBOL_DB defined in testsymboldatabase.cpp
      uses macro definition ASSERT defined in testsuite.h
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function symboldatabase45() in line 2044
      30 lines of code
      0 parameters
      2 conditional paths
      uses macro definition GET_SYMBOL_DB defined in testsymboldatabase.cpp
      uses macro definition ASSERT defined in testsuite.h
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses enumvalue eGlobal defined in Scope
      uses enumvalue eStruct defined in Scope
      uses enumvalue eFunction defined in Scope
   function symboldatabase46() in line 2075
      20 lines of code
      0 parameters
      1 conditional paths
      uses macro definition GET_SYMBOL_DB defined in testsymboldatabase.cpp
      uses macro definition ASSERT defined in testsuite.h
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses enumvalue eGlobal defined in Scope
      uses enumvalue eStruct defined in Scope
      uses enumvalue eNamespace defined in Scope
   function symboldatabase47() in line 2096
      12 lines of code
      0 parameters
      1 conditional paths
      uses macro definition GET_SYMBOL_DB defined in testsymboldatabase.cpp
      uses macro definition ASSERT defined in testsuite.h
   function symboldatabase48() in line 2109
      19 lines of code
      0 parameters
      1 conditional paths
      uses macro definition GET_SYMBOL_DB defined in testsymboldatabase.cpp
      uses macro definition ASSERT defined in testsuite.h
      uses function f(char) defined in test.cxx
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function symboldatabase49() in line 2129
      11 lines of code
      0 parameters
      1 conditional paths
      uses macro definition GET_SYMBOL_DB defined in testsymboldatabase.cpp
      uses macro definition ASSERT defined in testsuite.h
      uses function f(char) defined in test.cxx
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function symboldatabase5() in line 1605
      7 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestSymbolDatabase
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function symboldatabase50() in line 2141
      22 lines of code
      0 parameters
      1 conditional paths
      uses macro definition GET_SYMBOL_DB defined in testsymboldatabase.cpp
      uses macro definition ASSERT defined in testsuite.h
      uses function f(char) defined in test.cxx
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function symboldatabase51() in line 2164
      17 lines of code
      0 parameters
      2 conditional paths
      uses macro definition GET_SYMBOL_DB defined in testsymboldatabase.cpp
      uses macro definition ASSERT defined in testsuite.h
      uses function findFunctionByName(const char,const Scope *) defined in TestSymbolDatabase
   function symboldatabase52() in line 2182
      14 lines of code
      0 parameters
      2 conditional paths
      uses macro definition GET_SYMBOL_DB defined in testsymboldatabase.cpp
      uses macro definition ASSERT defined in testsuite.h
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function symboldatabase53() in line 2197
      12 lines of code
      0 parameters
      2 conditional paths
      uses macro definition GET_SYMBOL_DB defined in testsymboldatabase.cpp
      uses macro definition ASSERT defined in testsuite.h
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function symboldatabase6() in line 1613
      11 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestSymbolDatabase
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function symboldatabase7() in line 1625
      14 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestSymbolDatabase
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function symboldatabase8() in line 1640
      13 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestSymbolDatabase
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function symboldatabase9() in line 1654
      13 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,bool) defined in TestSymbolDatabase
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function test_isVariableDeclarationCanHandleNull() in line 299
      8 lines of code
      0 parameters
      1 conditional paths
      uses function reset() defined in TestSymbolDatabase
      uses variable result defined in triage-report.py
      uses variable si defined in TestSymbolDatabase
      uses function isVariableDeclaration(const Token *,const Token *&,const Token *&) defined in Scope
      uses variable vartok defined in TestSymbolDatabase
      uses variable typetok defined in TestSymbolDatabase
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses macro definition ASSERT defined in testsuite.h
      uses enumvalue Public defined in symboldatabase.h
      uses variable settings defined in TestSymbolDatabase
      uses variable library defined in Settings
   function test_isVariableDeclarationDoesNotIdentifyConstness() in line 434
      8 lines of code
      0 parameters
      1 conditional paths
      uses function reset() defined in TestSymbolDatabase
      uses variable result defined in triage-report.py
      uses variable si defined in TestSymbolDatabase
      uses function isVariableDeclaration(const Token *,const Token *&,const Token *&) defined in Scope
      uses function tokens() defined in givenACodeSampleToTokenize
      uses variable vartok defined in TestSymbolDatabase
      uses variable typetok defined in TestSymbolDatabase
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses macro definition ASSERT defined in testsuite.h
   function test_isVariableDeclarationIdentifiesArray() in line 495
      13 lines of code
      0 parameters
      1 conditional paths
      uses function reset() defined in TestSymbolDatabase
      uses variable result defined in triage-report.py
      uses variable si defined in TestSymbolDatabase
      uses function isVariableDeclaration(const Token *,const Token *&,const Token *&) defined in Scope
      uses function tokens() defined in givenACodeSampleToTokenize
      uses variable vartok defined in TestSymbolDatabase
      uses variable typetok defined in TestSymbolDatabase
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function str(T &&) defined in Token
      uses function previous() defined in Token
      uses enumvalue Public defined in symboldatabase.h
      uses variable settings defined in TestSymbolDatabase
      uses variable library defined in Settings
      uses macro definition ASSERT defined in testsuite.h
   function test_isVariableDeclarationIdentifiesCpp11Initialization() in line 335
      13 lines of code
      0 parameters
      1 conditional paths
      uses function reset() defined in TestSymbolDatabase
      uses variable result defined in triage-report.py
      uses variable si defined in TestSymbolDatabase
      uses function isVariableDeclaration(const Token *,const Token *&,const Token *&) defined in Scope
      uses function tokens() defined in givenACodeSampleToTokenize
      uses variable vartok defined in TestSymbolDatabase
      uses variable typetok defined in TestSymbolDatabase
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function str(T &&) defined in Token
      uses function previous() defined in Token
      uses enumvalue Public defined in symboldatabase.h
      uses variable settings defined in TestSymbolDatabase
      uses variable library defined in Settings
      uses macro definition ASSERT defined in testsuite.h
   function test_isVariableDeclarationIdentifiesDeclarationWithIndirection() in line 469
      12 lines of code
      0 parameters
      1 conditional paths
      uses function reset() defined in TestSymbolDatabase
      uses variable result defined in triage-report.py
      uses variable si defined in TestSymbolDatabase
      uses function isVariableDeclaration(const Token *,const Token *&,const Token *&) defined in Scope
      uses function tokens() defined in givenACodeSampleToTokenize
      uses variable vartok defined in TestSymbolDatabase
      uses variable typetok defined in TestSymbolDatabase
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function str(T &&) defined in Token
      uses function previous() defined in Token
      uses enumvalue Public defined in symboldatabase.h
      uses variable settings defined in TestSymbolDatabase
      uses variable library defined in Settings
      uses macro definition ASSERT defined in testsuite.h
   function test_isVariableDeclarationIdentifiesDeclarationWithMultipleIndirection() in line 482
      12 lines of code
      0 parameters
      1 conditional paths
      uses function reset() defined in TestSymbolDatabase
      uses variable result defined in triage-report.py
      uses variable si defined in TestSymbolDatabase
      uses function isVariableDeclaration(const Token *,const Token *&,const Token *&) defined in Scope
      uses function tokens() defined in givenACodeSampleToTokenize
      uses variable vartok defined in TestSymbolDatabase
      uses variable typetok defined in TestSymbolDatabase
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function str(T &&) defined in Token
      uses function previous() defined in Token
      uses enumvalue Public defined in symboldatabase.h
      uses variable settings defined in TestSymbolDatabase
      uses variable library defined in Settings
      uses macro definition ASSERT defined in testsuite.h
   function test_isVariableDeclarationIdentifiesFirstOfManyVariables() in line 443
      12 lines of code
      0 parameters
      1 conditional paths
      uses function reset() defined in TestSymbolDatabase
      uses variable result defined in triage-report.py
      uses variable si defined in TestSymbolDatabase
      uses function isVariableDeclaration(const Token *,const Token *&,const Token *&) defined in Scope
      uses function tokens() defined in givenACodeSampleToTokenize
      uses variable vartok defined in TestSymbolDatabase
      uses variable typetok defined in TestSymbolDatabase
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function str(T &&) defined in Token
      uses function previous() defined in Token
      uses enumvalue Public defined in symboldatabase.h
      uses variable settings defined in TestSymbolDatabase
      uses variable library defined in Settings
      uses macro definition ASSERT defined in testsuite.h
   function test_isVariableDeclarationIdentifiesInitialization() in line 321
      13 lines of code
      0 parameters
      1 conditional paths
      uses function reset() defined in TestSymbolDatabase
      uses variable result defined in triage-report.py
      uses variable si defined in TestSymbolDatabase
      uses function isVariableDeclaration(const Token *,const Token *&,const Token *&) defined in Scope
      uses function tokens() defined in givenACodeSampleToTokenize
      uses variable vartok defined in TestSymbolDatabase
      uses variable typetok defined in TestSymbolDatabase
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function str(T &&) defined in Token
      uses function previous() defined in Token
      uses enumvalue Public defined in symboldatabase.h
      uses variable settings defined in TestSymbolDatabase
      uses variable library defined in Settings
      uses macro definition ASSERT defined in testsuite.h
   function test_isVariableDeclarationIdentifiesManyScopes() in line 388
      12 lines of code
      0 parameters
      1 conditional paths
      uses function reset() defined in TestSymbolDatabase
      uses variable result defined in triage-report.py
      uses variable si defined in TestSymbolDatabase
      uses function isVariableDeclaration(const Token *,const Token *&,const Token *&) defined in Scope
      uses function tokens() defined in givenACodeSampleToTokenize
      uses variable vartok defined in TestSymbolDatabase
      uses variable typetok defined in TestSymbolDatabase
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function str(T &&) defined in Token
      uses function previous() defined in Token
      uses enumvalue Public defined in symboldatabase.h
      uses variable settings defined in TestSymbolDatabase
      uses variable library defined in Settings
      uses macro definition ASSERT defined in testsuite.h
   function test_isVariableDeclarationIdentifiesOfArrayPointers() in line 524
      14 lines of code
      0 parameters
      1 conditional paths
      uses function reset() defined in TestSymbolDatabase
      uses variable result defined in triage-report.py
      uses variable si defined in TestSymbolDatabase
      uses function isVariableDeclaration(const Token *,const Token *&,const Token *&) defined in Scope
      uses function tokens() defined in givenACodeSampleToTokenize
      uses variable vartok defined in TestSymbolDatabase
      uses variable typetok defined in TestSymbolDatabase
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function str(T &&) defined in Token
      uses function previous() defined in Token
      uses enumvalue Public defined in symboldatabase.h
      uses variable settings defined in TestSymbolDatabase
      uses variable library defined in Settings
      uses macro definition ASSERT defined in testsuite.h
   function test_isVariableDeclarationIdentifiesPointerArray() in line 509
      14 lines of code
      0 parameters
      1 conditional paths
      uses function reset() defined in TestSymbolDatabase
      uses variable result defined in triage-report.py
      uses variable si defined in TestSymbolDatabase
      uses function isVariableDeclaration(const Token *,const Token *&,const Token *&) defined in Scope
      uses function tokens() defined in givenACodeSampleToTokenize
      uses variable vartok defined in TestSymbolDatabase
      uses variable typetok defined in TestSymbolDatabase
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function str(T &&) defined in Token
      uses function previous() defined in Token
      uses enumvalue Public defined in symboldatabase.h
      uses variable settings defined in TestSymbolDatabase
      uses variable library defined in Settings
      uses macro definition ASSERT defined in testsuite.h
   function test_isVariableDeclarationIdentifiesPointers() in line 401
      32 lines of code
      0 parameters
      1 conditional paths
      uses function reset() defined in TestSymbolDatabase
      uses variable si defined in TestSymbolDatabase
      uses function isVariableDeclaration(const Token *,const Token *&,const Token *&) defined in Scope
      uses function tokens() defined in givenACodeSampleToTokenize
      uses variable vartok defined in TestSymbolDatabase
      uses variable typetok defined in TestSymbolDatabase
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function str(T &&) defined in Token
      uses function previous() defined in Token
      uses enumvalue Public defined in symboldatabase.h
      uses variable settings defined in TestSymbolDatabase
      uses variable library defined in Settings
      uses macro definition ASSERT defined in testsuite.h
      uses function tokAt(int) defined in Token
      uses function next() defined in Token
   function test_isVariableDeclarationIdentifiesScopedDeclaration() in line 349
      12 lines of code
      0 parameters
      1 conditional paths
      uses function reset() defined in TestSymbolDatabase
      uses variable result defined in triage-report.py
      uses variable si defined in TestSymbolDatabase
      uses function isVariableDeclaration(const Token *,const Token *&,const Token *&) defined in Scope
      uses function tokens() defined in givenACodeSampleToTokenize
      uses variable vartok defined in TestSymbolDatabase
      uses variable typetok defined in TestSymbolDatabase
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function str(T &&) defined in Token
      uses function previous() defined in Token
      uses enumvalue Public defined in symboldatabase.h
      uses variable settings defined in TestSymbolDatabase
      uses variable library defined in Settings
      uses macro definition ASSERT defined in testsuite.h
   function test_isVariableDeclarationIdentifiesScopedPointerDeclaration() in line 456
      12 lines of code
      0 parameters
      1 conditional paths
      uses function reset() defined in TestSymbolDatabase
      uses variable result defined in triage-report.py
      uses variable si defined in TestSymbolDatabase
      uses function isVariableDeclaration(const Token *,const Token *&,const Token *&) defined in Scope
      uses function tokens() defined in givenACodeSampleToTokenize
      uses variable vartok defined in TestSymbolDatabase
      uses variable typetok defined in TestSymbolDatabase
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function str(T &&) defined in Token
      uses function previous() defined in Token
      uses enumvalue Public defined in symboldatabase.h
      uses variable settings defined in TestSymbolDatabase
      uses variable library defined in Settings
      uses macro definition ASSERT defined in testsuite.h
   function test_isVariableDeclarationIdentifiesScopedStdDeclaration() in line 375
      12 lines of code
      0 parameters
      1 conditional paths
      uses function reset() defined in TestSymbolDatabase
      uses variable result defined in triage-report.py
      uses variable si defined in TestSymbolDatabase
      uses function isVariableDeclaration(const Token *,const Token *&,const Token *&) defined in Scope
      uses function tokens() defined in givenACodeSampleToTokenize
      uses variable vartok defined in TestSymbolDatabase
      uses variable typetok defined in TestSymbolDatabase
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function str(T &&) defined in Token
      uses function previous() defined in Token
      uses enumvalue Public defined in symboldatabase.h
      uses variable settings defined in TestSymbolDatabase
      uses variable library defined in Settings
      uses macro definition ASSERT defined in testsuite.h
   function test_isVariableDeclarationIdentifiesSimpleDeclaration() in line 308
      12 lines of code
      0 parameters
      1 conditional paths
      uses function reset() defined in TestSymbolDatabase
      uses variable result defined in triage-report.py
      uses variable si defined in TestSymbolDatabase
      uses function isVariableDeclaration(const Token *,const Token *&,const Token *&) defined in Scope
      uses function tokens() defined in givenACodeSampleToTokenize
      uses variable vartok defined in TestSymbolDatabase
      uses variable typetok defined in TestSymbolDatabase
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function str(T &&) defined in Token
      uses function previous() defined in Token
      uses enumvalue Public defined in symboldatabase.h
      uses variable settings defined in TestSymbolDatabase
      uses variable library defined in Settings
      uses macro definition ASSERT defined in testsuite.h
   function test_isVariableDeclarationIdentifiesStdDeclaration() in line 362
      12 lines of code
      0 parameters
      1 conditional paths
      uses function reset() defined in TestSymbolDatabase
      uses variable result defined in triage-report.py
      uses variable si defined in TestSymbolDatabase
      uses function isVariableDeclaration(const Token *,const Token *&,const Token *&) defined in Scope
      uses function tokens() defined in givenACodeSampleToTokenize
      uses variable vartok defined in TestSymbolDatabase
      uses variable typetok defined in TestSymbolDatabase
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function str(T &&) defined in Token
      uses function previous() defined in Token
      uses enumvalue Public defined in symboldatabase.h
      uses variable settings defined in TestSymbolDatabase
      uses variable library defined in Settings
      uses macro definition ASSERT defined in testsuite.h
   function testConstructors() in line 1060
      26 lines of code
      0 parameters
      1 conditional paths
      uses macro definition GET_SYMBOL_DB defined in testsymboldatabase.cpp
      uses macro definition ASSERT defined in testsuite.h
      uses variable type defined in Function
      uses enumvalue eConstructor defined in Function
      uses function isExplicit() defined in Function
      uses variable retDef defined in Function
      uses enumvalue eCopyConstructor defined in Function
      uses enumvalue eMoveConstructor defined in Function
   function throwFunction1() in line 2792
      15 lines of code
      0 parameters
      2 conditional paths
      uses macro definition GET_SYMBOL_DB defined in testsymboldatabase.cpp
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
      uses macro definition FUNC_THROW defined in testsymboldatabase.cpp
   function throwFunction2() in line 2811
      37 lines of code
      0 parameters
      3 conditional paths
      uses macro definition GET_SYMBOL_DB defined in testsymboldatabase.cpp
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
      uses macro definition CLASS_FUNC_THROW defined in testsymboldatabase.cpp
   function tryCatch1() in line 1525
      13 lines of code
      0 parameters
      1 conditional paths
      uses macro definition GET_SYMBOL_DB defined in testsymboldatabase.cpp
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
      uses macro definition ASSERT defined in testsuite.h
   function typeOf(const char,const char,const char) in line 3080
      9 lines of code
      3 parameters
      1 conditional paths
      uses variable s defined in extracttests.py
      uses enumvalue Unspecified defined in Settings
      uses variable code defined in extracttests.py
      uses function tokenize(std::istream &,const char,const std::string &,bool) defined in Tokenizer
      uses variable filename defined in extracttests.py
      uses function tokens() defined in Tokenizer
      uses function valueType() defined in Token
      uses function str() defined in ValueType
   function valuetype() in line 3090
      100 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function typeOf(const char,const char,const char) defined in TestSymbolDatabase
      uses macro definition REGISTER_TEST defined in testsuite.h
   function varTypesFloating() in line 2957
      56 lines of code
      0 parameters
      7 conditional paths
      uses macro definition GET_SYMBOL_DB defined in testsymboldatabase.cpp
      uses function f(char) defined in test.cxx
      uses macro definition ASSERT defined in testsuite.h
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function nameToken() defined in Variable
      uses function str(T &&) defined in Token
      uses function isIntegralType() defined in Variable
      uses function isFloatingType() defined in Variable
      uses function isArrayOrPointer() defined in Variable
   function varTypesIntegral() in line 2876
      80 lines of code
      0 parameters
      12 conditional paths
      uses macro definition GET_SYMBOL_DB defined in testsymboldatabase.cpp
      uses macro definition ASSERT defined in testsuite.h
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function nameToken() defined in Variable
      uses function str(T &&) defined in Token
      uses function isIntegralType() defined in Variable
      uses function isFloatingType() defined in Variable
      uses variable s defined in extracttests.py
   function varTypesOther() in line 3014
      17 lines of code
      0 parameters
      3 conditional paths
      uses macro definition GET_SYMBOL_DB defined in testsymboldatabase.cpp
      uses variable a defined in daca2-report.py
      uses macro definition ASSERT defined in testsuite.h
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function TestSymbolDatabase() in line 36
      protection public
      8 lines of code
      0 parameters
      1 conditional paths
   variable found in line 50
   variable settings in line 51
   variable si in line 46
   variable t in line 49
   variable typetok in line 48
   variable vartok in line 47
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/test/testthreadexecutor.cpp
module TestThreadExecutor
   inherits from TestFixture
   function check(unsigned int,int,int,const std::string &) in line 41
      22 lines of code
      4 parameters
      4 conditional paths
      uses variable errout defined in redirect.h
      uses variable output defined in redirect.h
      uses variable settings defined in TestThreadExecutor
      uses variable jobs defined in Settings
      uses function addFileContent(const std::string &,const std::string &) defined in ThreadExecutor
      uses variable data defined in cert.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable result defined in triage-report.py
      uses function check() defined in ThreadExecutor
   function deadlock_with_many_errors() in line 76
      11 lines of code
      0 parameters
      2 conditional paths
      uses function check(unsigned int,int,int,const std::string &) defined in TestThreadExecutor
   function many_threads() in line 88
      8 lines of code
      0 parameters
      1 conditional paths
      uses function check(unsigned int,int,int,const std::string &) defined in TestThreadExecutor
   function no_errors_equal_amount_files() in line 113
      7 lines of code
      0 parameters
      1 conditional paths
      uses function check(unsigned int,int,int,const std::string &) defined in TestThreadExecutor
   function no_errors_less_files() in line 105
      7 lines of code
      0 parameters
      1 conditional paths
      uses function check(unsigned int,int,int,const std::string &) defined in TestThreadExecutor
   function no_errors_more_files() in line 97
      7 lines of code
      0 parameters
      1 conditional paths
      uses function check(unsigned int,int,int,const std::string &) defined in TestThreadExecutor
   function one_error_less_files() in line 121
      8 lines of code
      0 parameters
      1 conditional paths
      uses function check(unsigned int,int,int,const std::string &) defined in TestThreadExecutor
   function one_error_several_files() in line 130
      8 lines of code
      0 parameters
      1 conditional paths
      uses function check(unsigned int,int,int,const std::string &) defined in TestThreadExecutor
      uses macro definition REGISTER_TEST defined in testsuite.h
   function run() in line 64
      11 lines of code
      0 parameters
      1 conditional paths
      uses macro definition LOAD_LIB_2 defined in testsuite.h
      uses variable settings defined in TestThreadExecutor
      uses variable library defined in Settings
      uses macro definition TEST_CASE defined in testsuite.h
      uses function deadlock_with_many_errors() defined in TestThreadExecutor
      uses function many_threads() defined in TestThreadExecutor
      uses function no_errors_more_files() defined in TestThreadExecutor
      uses function no_errors_less_files() defined in TestThreadExecutor
      uses function no_errors_equal_amount_files() defined in TestThreadExecutor
      uses function one_error_less_files() defined in TestThreadExecutor
      uses function one_error_several_files() defined in TestThreadExecutor
   function TestThreadExecutor() in line 31
      protection public
      2 lines of code
      0 parameters
      1 conditional paths
   variable settings in line 35
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/test/testtimer.cpp
module TestTimer
   inherits from TestFixture
   function result() in line 35
      8 lines of code
      0 parameters
      1 conditional paths
      uses variable _clocks defined in TimerResultsData
      uses macro definition ASSERT defined in testsuite.h
      uses function seconds() defined in TimerResultsData
      uses macro definition REGISTER_TEST defined in testsuite.h
   function run() in line 31
      3 lines of code
      0 parameters
      1 conditional paths
      uses macro definition TEST_CASE defined in testsuite.h
      uses function result() defined in TestTimer
   function TestTimer() in line 26
      protection public
      2 lines of code
      0 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/test/testtoken.cpp
module TestToken
   inherits from TestFixture
   function append_vector(std::vector< std::string > &,const std::vector< std::string > &) in line 539
      3 lines of code
      2 parameters
      1 conditional paths
   function canFindMatchingBracketsInnerPair() in line 901
      7 lines of code
      0 parameters
      1 conditional paths
      uses function tokens() defined in givenACodeSampleToTokenize
      uses function tokAt(int) defined in Token
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function str(T &&) defined in Token
      uses macro definition ASSERT defined in testsuite.h
   function canFindMatchingBracketsNeedsOpen() in line 894
      6 lines of code
      0 parameters
      1 conditional paths
      uses function tokens() defined in givenACodeSampleToTokenize
      uses function findClosingBracket() defined in Token
      uses macro definition ASSERT defined in testsuite.h
   function canFindMatchingBracketsOuterPair() in line 909
      7 lines of code
      0 parameters
      1 conditional paths
      uses function tokens() defined in givenACodeSampleToTokenize
      uses function tokAt(int) defined in Token
      uses function findClosingBracket() defined in Token
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function str(T &&) defined in Token
      uses macro definition ASSERT defined in testsuite.h
   function canFindMatchingBracketsWithTooManyClosing() in line 917
      7 lines of code
      0 parameters
      1 conditional paths
      uses function tokens() defined in givenACodeSampleToTokenize
      uses function next() defined in Token
      uses function findClosingBracket() defined in Token
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function str(T &&) defined in Token
      uses macro definition ASSERT defined in testsuite.h
      uses function tokAt(int) defined in Token
   function canFindMatchingBracketsWithTooManyOpening() in line 925
      9 lines of code
      0 parameters
      1 conditional paths
      uses function tokens() defined in givenACodeSampleToTokenize
      uses function next() defined in Token
      uses function findClosingBracket() defined in Token
      uses macro definition ASSERT defined in testsuite.h
      uses function str(T &&) defined in Token
      uses function tokAt(int) defined in Token
      uses macro definition REGISTER_TEST defined in testsuite.h
   function deleteLast() in line 310
      8 lines of code
      0 parameters
      1 conditional paths
      uses function insertToken(const std::string &,const std::string &,bool) defined in Token
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function next() defined in Token
      uses function deleteNext(unsigned long) defined in Token
   function eraseTokens() in line 334
      5 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function getStrLength() in line 254
      15 lines of code
      0 parameters
      1 conditional paths
      uses function str(T &&) defined in Token
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function getStrSize() in line 270
      12 lines of code
      0 parameters
      1 conditional paths
      uses function str(T &&) defined in Token
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function initOps() in line 543
      43 lines of code
      0 parameters
      1 conditional paths
      uses variable arithmeticalOps defined in TestToken
      uses variable logicalOps defined in TestToken
      uses variable comparisonOps defined in TestToken
      uses variable bitOps defined in TestToken
      uses variable extendedOps defined in TestToken
      uses variable assignmentOps defined in TestToken
   function isArithmeticalOp() in line 634
      23 lines of code
      0 parameters
      3 conditional paths
      uses variable arithmeticalOps defined in TestToken
      uses function str(T &&) defined in Token
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function isArithmeticalOp() defined in Token
      uses function append_vector(std::vector< std::string > &,const std::vector< std::string > &) defined in TestToken
      uses variable bitOps defined in TestToken
      uses variable comparisonOps defined in TestToken
      uses variable logicalOps defined in TestToken
      uses variable extendedOps defined in TestToken
      uses variable assignmentOps defined in TestToken
      uses macro definition ASSERT_EQUALS_MSG defined in testsuite.h
   function isAssignmentOp() in line 736
      23 lines of code
      0 parameters
      3 conditional paths
      uses variable assignmentOps defined in TestToken
      uses function str(T &&) defined in Token
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function isAssignmentOp() defined in Token
      uses function append_vector(std::vector< std::string > &,const std::vector< std::string > &) defined in TestToken
      uses variable arithmeticalOps defined in TestToken
      uses variable bitOps defined in TestToken
      uses variable comparisonOps defined in TestToken
      uses variable logicalOps defined in TestToken
      uses variable extendedOps defined in TestToken
      uses macro definition ASSERT_EQUALS_MSG defined in testsuite.h
   function isConstOp() in line 685
      26 lines of code
      0 parameters
      3 conditional paths
      uses function append_vector(std::vector< std::string > &,const std::vector< std::string > &) defined in TestToken
      uses variable arithmeticalOps defined in TestToken
      uses variable bitOps defined in TestToken
      uses variable comparisonOps defined in TestToken
      uses variable logicalOps defined in TestToken
      uses function str(T &&) defined in Token
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function isConstOp() defined in Token
      uses variable extendedOps defined in TestToken
      uses variable assignmentOps defined in TestToken
      uses macro definition ASSERT_EQUALS_MSG defined in testsuite.h
   function isExtendedOp() in line 712
      23 lines of code
      0 parameters
      3 conditional paths
      uses function append_vector(std::vector< std::string > &,const std::vector< std::string > &) defined in TestToken
      uses variable arithmeticalOps defined in TestToken
      uses variable bitOps defined in TestToken
      uses variable comparisonOps defined in TestToken
      uses variable logicalOps defined in TestToken
      uses variable extendedOps defined in TestToken
      uses function str(T &&) defined in Token
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function isExtendedOp() defined in Token
      uses variable assignmentOps defined in TestToken
      uses macro definition ASSERT_EQUALS_MSG defined in testsuite.h
   function isNameGuarantees1() in line 861
      5 lines of code
      0 parameters
      1 conditional paths
      uses function str(T &&) defined in Token
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function isName() defined in Token
   function isNameGuarantees2() in line 867
      5 lines of code
      0 parameters
      1 conditional paths
      uses function str(T &&) defined in Token
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function isName() defined in Token
   function isNameGuarantees3() in line 873
      5 lines of code
      0 parameters
      1 conditional paths
      uses function str(T &&) defined in Token
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function isName() defined in Token
   function isNameGuarantees4() in line 879
      6 lines of code
      0 parameters
      1 conditional paths
      uses function str(T &&) defined in Token
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function isName() defined in Token
      uses function isNumber() defined in Token
   function isNameGuarantees5() in line 886
      6 lines of code
      0 parameters
      1 conditional paths
      uses function str(T &&) defined in Token
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function isName() defined in Token
      uses function isNumber() defined in Token
   function isOp() in line 658
      26 lines of code
      0 parameters
      3 conditional paths
      uses function append_vector(std::vector< std::string > &,const std::vector< std::string > &) defined in TestToken
      uses variable arithmeticalOps defined in TestToken
      uses variable bitOps defined in TestToken
      uses variable comparisonOps defined in TestToken
      uses variable logicalOps defined in TestToken
      uses variable assignmentOps defined in TestToken
      uses function str(T &&) defined in Token
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function isOp() defined in Token
      uses variable extendedOps defined in TestToken
      uses macro definition ASSERT_EQUALS_MSG defined in testsuite.h
   function isStandardType() in line 808
      27 lines of code
      0 parameters
      2 conditional paths
      uses function str(T &&) defined in Token
      uses macro definition ASSERT_EQUALS_MSG defined in testsuite.h
      uses function isStandardType() defined in Token
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function literals() in line 789
      18 lines of code
      0 parameters
      1 conditional paths
      uses function str(T &&) defined in Token
      uses macro definition ASSERT defined in testsuite.h
      uses function tokType() defined in Token
      uses enumvalue eString defined in Token
      uses enumvalue eChar defined in Token
      uses enumvalue eNumber defined in Token
      uses enumvalue eBoolean defined in Token
   function Match(const std::string &,const std::string &,unsigned int) in line 117
      9 lines of code
      3 parameters
      2 conditional paths
      uses variable code defined in extracttests.py
      uses function tokenize(std::istream &,const char,const std::string &,bool) defined in Tokenizer
      uses function tokens() defined in Tokenizer
   function matchAny() in line 341
      7 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokens() defined in givenACodeSampleToTokenize
   function matchBoolean() in line 504
      10 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokens() defined in givenACodeSampleToTokenize
   function matchChar() in line 396
      10 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokens() defined in givenACodeSampleToTokenize
   function matchCompOp() in line 407
      10 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokens() defined in givenACodeSampleToTokenize
   function matchConstOp() in line 610
      22 lines of code
      0 parameters
      3 conditional paths
      uses function append_vector(std::vector< std::string > &,const std::vector< std::string > &) defined in TestToken
      uses variable arithmeticalOps defined in TestToken
      uses variable bitOps defined in TestToken
      uses variable comparisonOps defined in TestToken
      uses variable logicalOps defined in TestToken
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function Match(const std::string &,const std::string &,unsigned int) defined in TestToken
      uses variable extendedOps defined in TestToken
      uses variable assignmentOps defined in TestToken
      uses macro definition ASSERT_EQUALS_MSG defined in testsuite.h
   function matchNothingOrAnyNotElse() in line 359
      17 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokens() defined in givenACodeSampleToTokenize
   function matchNumeric() in line 450
      52 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokens() defined in givenACodeSampleToTokenize
   function matchOp() in line 587
      22 lines of code
      0 parameters
      3 conditional paths
      uses function append_vector(std::vector< std::string > &,const std::vector< std::string > &) defined in TestToken
      uses variable arithmeticalOps defined in TestToken
      uses variable bitOps defined in TestToken
      uses variable comparisonOps defined in TestToken
      uses variable logicalOps defined in TestToken
      uses variable assignmentOps defined in TestToken
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function Match(const std::string &,const std::string &,unsigned int) defined in TestToken
      uses variable extendedOps defined in TestToken
      uses macro definition ASSERT_EQUALS_MSG defined in testsuite.h
   function matchOr() in line 515
      23 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokens() defined in givenACodeSampleToTokenize
   function matchSingleChar() in line 349
      9 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokens() defined in givenACodeSampleToTokenize
      uses function str(T &&) defined in Token
   function matchStr() in line 418
      14 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokens() defined in givenACodeSampleToTokenize
   function matchType() in line 377
      18 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokens() defined in givenACodeSampleToTokenize
   function matchVarid() in line 433
      16 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_THROW defined in testsuite.h
      uses function tokens() defined in givenACodeSampleToTokenize
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function multiCompare() in line 127
      51 lines of code
      0 parameters
      1 conditional paths
      uses function str(T &&) defined in Token
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable s defined in extracttests.py
      uses variable a defined in daca2-report.py
   function multiCompare2() in line 179
      5 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokens() defined in givenACodeSampleToTokenize
   function multiCompare3() in line 185
      51 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokens() defined in givenACodeSampleToTokenize
   function multiCompare4() in line 237
      10 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses enumvalue eBracket defined in Token
      uses function tokens() defined in givenACodeSampleToTokenize
      uses function tokAt(int) defined in Token
      uses function tokType() defined in Token
   function multiCompare5() in line 248
      5 lines of code
      0 parameters
      1 conditional paths
      uses function str(T &&) defined in Token
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function nextArgument() in line 319
      14 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokens() defined in givenACodeSampleToTokenize
      uses function tokAt(int) defined in Token
      uses function nextArgument() defined in Token
   function nextprevious() in line 96
      20 lines of code
      0 parameters
      3 conditional paths
      uses function str(T &&) defined in Token
      uses function insertToken(const std::string &,const std::string &,bool) defined in Token
      uses function next() defined in Token
      uses function tokAt(int) defined in Token
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function previous() defined in Token
   function operators() in line 760
      28 lines of code
      0 parameters
      5 conditional paths
      uses variable extendedOps defined in TestToken
      uses function str(T &&) defined in Token
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses enumvalue eExtendedOp defined in Token
      uses function tokType() defined in Token
      uses variable logicalOps defined in TestToken
      uses enumvalue eLogicalOp defined in Token
      uses variable bitOps defined in TestToken
      uses enumvalue eBitOp defined in Token
      uses variable comparisonOps defined in TestToken
      uses enumvalue eComparisonOp defined in Token
      uses enumvalue eIncDecOp defined in Token
   function run() in line 41
      54 lines of code
      0 parameters
      1 conditional paths
      uses function initOps() defined in TestToken
      uses macro definition TEST_CASE defined in testsuite.h
      uses function nextprevious() defined in TestToken
      uses function multiCompare() defined in TestToken
      uses function multiCompare2() defined in TestToken
      uses function multiCompare3() defined in TestToken
      uses function multiCompare4() defined in TestToken
      uses function multiCompare5() defined in TestToken
      uses function getStrLength() defined in TestToken
      uses function getStrSize() defined in TestToken
      uses function strValue() defined in TestToken
      uses function deleteLast() defined in TestToken
      uses function nextArgument() defined in TestToken
      uses function eraseTokens() defined in TestToken
      uses function matchAny() defined in TestToken
      uses function matchSingleChar() defined in TestToken
      uses function matchNothingOrAnyNotElse() defined in TestToken
      uses function matchType() defined in TestToken
      uses function matchChar() defined in TestToken
      uses function matchCompOp() defined in TestToken
      uses function matchStr() defined in TestToken
      uses function matchVarid() defined in TestToken
      uses function matchNumeric() defined in TestToken
      uses function matchBoolean() defined in TestToken
      uses function matchOr() defined in TestToken
      uses function matchOp() defined in TestToken
      uses function matchConstOp() defined in TestToken
      uses function isArithmeticalOp() defined in TestToken
      uses function isOp() defined in TestToken
      uses function isConstOp() defined in TestToken
      uses function isExtendedOp() defined in TestToken
      uses function isAssignmentOp() defined in TestToken
      uses function isStandardType() defined in TestToken
      uses function literals() defined in TestToken
      uses function operators() defined in TestToken
      uses function updateProperties() defined in TestToken
      uses function updatePropertiesConcatStr() defined in TestToken
      uses function isNameGuarantees1() defined in TestToken
      uses function isNameGuarantees2() defined in TestToken
      uses function isNameGuarantees3() defined in TestToken
      uses function isNameGuarantees4() defined in TestToken
      uses function isNameGuarantees5() defined in TestToken
      uses function canFindMatchingBracketsNeedsOpen() defined in TestToken
      uses function canFindMatchingBracketsInnerPair() defined in TestToken
      uses function canFindMatchingBracketsOuterPair() defined in TestToken
      uses function canFindMatchingBracketsWithTooManyClosing() defined in TestToken
      uses function canFindMatchingBracketsWithTooManyOpening() defined in TestToken
   function strValue() in line 283
      25 lines of code
      0 parameters
      1 conditional paths
      uses function str(T &&) defined in Token
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function strValue() defined in Token
   function updateProperties() in line 836
      12 lines of code
      0 parameters
      1 conditional paths
      uses function str(T &&) defined in Token
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function isName() defined in Token
      uses function isNumber() defined in Token
   function updatePropertiesConcatStr() in line 849
      11 lines of code
      0 parameters
      1 conditional paths
      uses function str(T &&) defined in Token
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function isBoolean() defined in Token
      uses function concatStr(std::string const &) defined in Token
   function TestToken() in line 30
      protection public
      2 lines of code
      0 parameters
      1 conditional paths
   variable arithmeticalOps in line 34
   variable assignmentOps in line 39
   variable bitOps in line 36
   variable comparisonOps in line 37
   variable extendedOps in line 38
   variable logicalOps in line 35
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/test/testtokenize.cpp
module TestTokenizer
   inherits from TestFixture
   function arraySize() in line 4853
      12 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function astbrackets() in line 8207
      7 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function testAst(const char,bool) defined in TestTokenizer
   function astcast() in line 8259
      14 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function testAst(const char,bool) defined in TestTokenizer
   function astexpr() in line 8004
      88 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function testAst(const char,bool) defined in TestTokenizer
   function astfunction() in line 8234
      12 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function testAst(const char,bool) defined in TestTokenizer
   function astlambda() in line 8274
      14 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function testAst(const char,bool) defined in TestTokenizer
   function astnewdelete() in line 8093
      37 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function testAst(const char,bool) defined in TestTokenizer
   function astpar() in line 8131
      75 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function testAst(const char,bool) defined in TestTokenizer
      uses macro definition TODO_ASSERT_EQUALS defined in testsuite.h
   function asttemplate() in line 8247
      11 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function testAst(const char,bool) defined in TestTokenizer
   function astunaryop() in line 8215
      18 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function testAst(const char,bool) defined in TestTokenizer
   function bitfields1() in line 5127
      76 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
      uses function tokenizeAndStringifyWindows(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
      uses enumvalue Win32A defined in Settings
   function bitfields10() in line 5336
      7 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function bitfields11() in line 5344
      6 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function bitfields12() in line 5351
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function bitfields13() in line 5356
      3 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function bitfields14() in line 5360
      3 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function bitfields2() in line 5204
      19 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function bitfields3() in line 5224
      13 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function bitfields4() in line 5238
      31 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function bitfields5() in line 5270
      10 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function bitfields6() in line 5281
      16 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function bitfields7() in line 5298
      10 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
      uses variable errout defined in redirect.h
   function bitfields8() in line 5309
      14 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
      uses variable errout defined in redirect.h
   function bitfields9() in line 5324
      11 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function borland() in line 5485
      9 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
      uses enumvalue Win32A defined in Settings
   function combineOperators() in line 854
      7 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function compileLimits() in line 8289
      27 lines of code
      0 parameters
      1 conditional paths
      uses variable settings0 defined in TestTokenizer
      uses variable fin defined in triage-report.py
      uses function preprocess(std::istream &,std::map< std::string, std::string > &,const std::string &,const std::list< std::string > &) defined in Preprocessor
      uses variable includePaths defined in Settings
      uses variable code defined in extracttests.py
      uses function getcode(const std::string &,const std::string &,const std::string &) defined in Preprocessor
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function concatenateNegativeNumber() in line 862
      9 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function cpp03template1() in line 4775
      14 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function cpp0xtemplate1() in line 4790
      10 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function cpp0xtemplate2() in line 4801
      5 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function cpp0xtemplate3() in line 4807
      13 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition TODO_ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function cpp0xtemplate4() in line 4821
      26 lines of code
      0 parameters
      1 conditional paths
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function cpp14template() in line 4848
      4 lines of code
      0 parameters
      1 conditional paths
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function createLinks() in line 4303
      226 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable errout defined in redirect.h
      uses variable settings0 defined in TestTokenizer
      uses function tokenize(std::istream &,const char,const std::string &,bool) defined in Tokenizer
      uses function tokens() defined in Tokenizer
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function linkAt(int) defined in Token
      uses function tokAt(int) defined in Token
   function doublesharp() in line 3001
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function doWhileAddBraces() in line 1254
      58 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable result defined in triage-report.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function file1() in line 2930
      21 lines of code
      0 parameters
      2 conditional paths
      uses variable code defined in extracttests.py
      uses variable errout defined in redirect.h
      uses variable settings0 defined in TestTokenizer
      uses function tokenize(std::istream &,const char,const std::string &,bool) defined in Tokenizer
      uses function tokens() defined in Tokenizer
      uses function next() defined in Token
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function file2() in line 2953
      30 lines of code
      0 parameters
      2 conditional paths
      uses variable code defined in extracttests.py
      uses variable errout defined in redirect.h
      uses variable settings0 defined in TestTokenizer
      uses function tokenize(std::istream &,const char,const std::string &,bool) defined in Tokenizer
      uses function tokens() defined in Tokenizer
      uses function next() defined in Token
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function file3() in line 2986
      14 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable errout defined in redirect.h
      uses variable settings0 defined in TestTokenizer
      uses function tokenize(std::istream &,const char,const std::string &,bool) defined in Tokenizer
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable list defined in Tokenizer
      uses function fileLine(const Token *) defined in TokenList
      uses function tokens() defined in Tokenizer
   function forAddBraces1() in line 1313
      31 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function forAddBraces2() in line 1345
      9 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function foreach() in line 848
      5 lines of code
      0 parameters
      2 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function functionAttributeAfter() in line 4744
      30 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses variable errout defined in redirect.h
      uses variable settings0 defined in TestTokenizer
      uses function tokenize(std::istream &,const char,const std::string &,bool) defined in Tokenizer
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokens() defined in Tokenizer
      uses function stringifyList(bool,bool,bool,bool,bool,const std::vector< std::string > *,const Token *) defined in Token
      uses macro definition ASSERT defined in testsuite.h
   function functionAttributeBefore() in line 4713
      30 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses variable errout defined in redirect.h
      uses variable settings0 defined in TestTokenizer
      uses function tokenize(std::istream &,const char,const std::string &,bool) defined in Tokenizer
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokens() defined in Tokenizer
      uses function stringifyList(bool,bool,bool,bool,bool,const std::vector< std::string > *,const Token *) defined in Token
      uses macro definition ASSERT defined in testsuite.h
   function functionpointer1() in line 4609
      6 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function functionpointer2() in line 4616
      10 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function functionpointer3() in line 4627
      10 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function functionpointer4() in line 4638
      22 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeDebugListing(const char,bool,const char) defined in TestTokenizer
   function functionpointer5() in line 4661
      6 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeDebugListing(const char,bool,const char) defined in TestTokenizer
   function functionpointer6() in line 4668
      11 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeDebugListing(const char,bool,const char) defined in TestTokenizer
   function functionpointer7() in line 4680
      6 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeDebugListing(const char,bool,const char) defined in TestTokenizer
   function ifAddBraces1() in line 1030
      12 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function ifAddBraces10() in line 1138
      6 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function ifAddBraces11() in line 1145
      5 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function ifAddBraces12() in line 1151
      6 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function ifAddBraces13() in line 1158
      11 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function ifAddBraces14() in line 1170
      4 lines of code
      0 parameters
      1 conditional paths
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function ifAddBraces15() in line 1175
      4 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function ifAddBraces16() in line 1180
      13 lines of code
      0 parameters
      1 conditional paths
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
      uses variable code defined in extracttests.py
   function ifAddBraces17() in line 1194
      18 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function ifAddBraces18() in line 1213
      8 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function ifAddBraces19() in line 1222
      21 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function ifAddBraces2() in line 1043
      10 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function ifAddBraces20() in line 1244
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_THROW defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function ifAddBraces3() in line 1054
      10 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function ifAddBraces4() in line 1065
      18 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function ifAddBraces5() in line 1084
      18 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function ifAddBraces6() in line 1103
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function ifAddBraces7() in line 1108
      14 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function ifAddBraces9() in line 1123
      14 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function inlineasm() in line 979
      19 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function isOneNumber() in line 6334
      15 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function isStartOfExecutableScope(int,const char) in line 8317
      7 lines of code
      2 parameters
      1 conditional paths
      uses variable settings0 defined in TestTokenizer
      uses variable code defined in extracttests.py
      uses function tokenize(std::istream &,const char,const std::string &,bool) defined in Tokenizer
      uses function tokens() defined in Tokenizer
      uses function tokAt(int) defined in Token
   function isTwoNumber() in line 6350
      15 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function isZeroNumber() in line 6316
      17 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function labels() in line 4866
      23 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function longtok() in line 874
      4 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function macrodoublesharp() in line 3006
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function microsoftMemory() in line 5444
      40 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
      uses enumvalue Win32A defined in Settings
   function multipleAssignment() in line 5815
      3 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function noreturn() in line 8363
      22 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable settings0 defined in TestTokenizer
      uses function tokenize(std::istream &,const char,const std::string &,bool) defined in Tokenizer
      uses function tokens() defined in Tokenizer
      uses macro definition TODO_ASSERT defined in testsuite.h
      uses function isAttributeNoreturn() defined in Token
      uses macro definition REGISTER_TEST defined in testsuite.h
   function platformUnix32() in line 6202
      45 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
      uses enumvalue Unix32 defined in Settings
   function platformUnix64() in line 6248
      45 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
      uses enumvalue Unix64 defined in Settings
   function platformWin() in line 5819
      147 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses function tokenizeAndStringifyWindows(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
      uses enumvalue Win32A defined in Settings
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses enumvalue Win32W defined in Settings
      uses enumvalue Win64 defined in Settings
   function platformWin32() in line 5967
      72 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses function tokenizeAndStringifyWindows(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
      uses enumvalue Win32A defined in Settings
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses enumvalue Win32W defined in Settings
   function platformWin32A() in line 6040
      45 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringifyWindows(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
      uses enumvalue Win32A defined in Settings
   function platformWin32AStringCat() in line 6294
      5 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringifyWindows(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
      uses enumvalue Win32A defined in Settings
   function platformWin32W() in line 6086
      45 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringifyWindows(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
      uses enumvalue Win32W defined in Settings
   function platformWin32WStringCat() in line 6300
      5 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringifyWindows(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
      uses enumvalue Win32W defined in Settings
   function platformWin64() in line 6132
      69 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringifyWindows(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
      uses enumvalue Win64 defined in Settings
   function platformWinWithNamespace() in line 6306
      9 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringifyWindows(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
      uses enumvalue Win32A defined in Settings
   function prepareTernaryOpForAST() in line 7957
      8 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function Qt() in line 5495
      105 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
      uses variable errout defined in redirect.h
   function removeattribute() in line 4702
      10 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function removeCast1() in line 882
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function removeCast10() in line 926
      3 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function removeCast11() in line 930
      3 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function removeCast12() in line 934
      4 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function removeCast13() in line 939
      17 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
      uses macro definition TODO_ASSERT_EQUALS defined in testsuite.h
   function removeCast14() in line 957
      6 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function removeCast15() in line 964
      4 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function removeCast16() in line 969
      4 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function removeCast17() in line 974
      4 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function removeCast2() in line 888
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function removeCast3() in line 893
      6 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function removeCast4() in line 900
      6 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function removeCast5() in line 907
      4 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function removeCast7() in line 912
      3 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function removeCast8() in line 916
      3 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function removeCast9() in line 920
      5 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function removedeclspec() in line 4693
      8 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function removeMacroInClassDef() in line 8348
      6 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
      uses enumvalue Native defined in Settings
   function removeMacroInVarDecl() in line 5802
      12 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function removeMacrosInGlobalScope() in line 5782
      19 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function removeParentheses1() in line 3116
      8 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function removeParentheses10() in line 3215
      3 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function removeParentheses11() in line 3219
      4 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function removeParentheses12() in line 3224
      4 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function removeParentheses13() in line 3229
      4 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function removeParentheses14() in line 3234
      3 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function removeParentheses15() in line 3238
      8 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function removeParentheses16() in line 3247
      5 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function removeParentheses17() in line 3253
      3 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function removeParentheses18() in line 3257
      3 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function removeParentheses19() in line 3261
      3 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function removeParentheses20() in line 3265
      3 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function removeParentheses21() in line 3269
      3 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function removeParentheses22() in line 3273
      13 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function removeParentheses23() in line 3287
      30 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function removeParentheses24() in line 3318
      5 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function removeParentheses3() in line 3125
      25 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function removeParentheses4() in line 3152
      7 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function removeParentheses5() in line 3160
      19 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function removeParentheses6() in line 3181
      11 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function removeParentheses7() in line 3193
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function removeParentheses8() in line 3198
      12 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
      uses enumvalue Win32A defined in Settings
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function removeParentheses9() in line 3211
      3 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function removeRedundantAssignment() in line 4687
      5 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function run() in line 39
      426 lines of code
      0 parameters
      2 conditional paths
      uses macro definition LOAD_LIB_2 defined in testsuite.h
      uses variable settings_windows defined in TestTokenizer
      uses variable library defined in Settings
      uses macro definition TEST_CASE defined in testsuite.h
      uses function tokenize1() defined in TestTokenizer
      uses function tokenize2() defined in TestTokenizer
      uses function tokenize3() defined in TestTokenizer
      uses function tokenize4() defined in TestTokenizer
      uses function tokenize5() defined in TestTokenizer
      uses function tokenize6() defined in TestTokenizer
      uses function tokenize7() defined in TestTokenizer
      uses function tokenize8() defined in TestTokenizer
      uses function tokenize9() defined in TestTokenizer
      uses function tokenize11() defined in TestTokenizer
      uses function tokenize13() defined in TestTokenizer
      uses function tokenize14() defined in TestTokenizer
      uses function tokenize15() defined in TestTokenizer
      uses function tokenize16() defined in TestTokenizer
      uses function tokenize17() defined in TestTokenizer
      uses function tokenize18() defined in TestTokenizer
      uses function tokenize19() defined in TestTokenizer
      uses function tokenize20() defined in TestTokenizer
      uses function tokenize21() defined in TestTokenizer
      uses function tokenize22() defined in TestTokenizer
      uses function tokenize24() defined in TestTokenizer
      uses function tokenize25() defined in TestTokenizer
      uses function tokenize26() defined in TestTokenizer
      uses function tokenize27() defined in TestTokenizer
      uses function tokenize31() defined in TestTokenizer
      uses function tokenize32() defined in TestTokenizer
      uses function tokenize33() defined in TestTokenizer
      uses function syntax_case_default() defined in TestTokenizer
      uses function simplifyFileAndLineMacro() defined in TestTokenizer
      uses function combineOperators() defined in TestTokenizer
      uses function concatenateNegativeNumber() defined in TestTokenizer
      uses function longtok() defined in TestTokenizer
      uses function removeCast1() defined in TestTokenizer
      uses function removeCast2() defined in TestTokenizer
      uses function removeCast3() defined in TestTokenizer
      uses function removeCast4() defined in TestTokenizer
      uses function removeCast5() defined in TestTokenizer
      uses function removeCast7() defined in TestTokenizer
      uses function removeCast8() defined in TestTokenizer
      uses function removeCast9() defined in TestTokenizer
      uses function removeCast10() defined in TestTokenizer
      uses function removeCast11() defined in TestTokenizer
      uses function removeCast12() defined in TestTokenizer
      uses function removeCast13() defined in TestTokenizer
      uses function removeCast14() defined in TestTokenizer
      uses function removeCast15() defined in TestTokenizer
      uses function removeCast16() defined in TestTokenizer
      uses function removeCast17() defined in TestTokenizer
      uses function inlineasm() defined in TestTokenizer
      uses function simplifyAsm2() defined in TestTokenizer
      uses function ifAddBraces1() defined in TestTokenizer
      uses function ifAddBraces2() defined in TestTokenizer
      uses function ifAddBraces3() defined in TestTokenizer
      uses function ifAddBraces4() defined in TestTokenizer
      uses function ifAddBraces5() defined in TestTokenizer
      uses function ifAddBraces6() defined in TestTokenizer
      uses function ifAddBraces7() defined in TestTokenizer
      uses function ifAddBraces9() defined in TestTokenizer
      uses function ifAddBraces10() defined in TestTokenizer
      uses function ifAddBraces11() defined in TestTokenizer
      uses function ifAddBraces12() defined in TestTokenizer
      uses function ifAddBraces13() defined in TestTokenizer
      uses function ifAddBraces14() defined in TestTokenizer
      uses function ifAddBraces15() defined in TestTokenizer
      uses function ifAddBraces16() defined in TestTokenizer
      uses function ifAddBraces17() defined in TestTokenizer
      uses function ifAddBraces18() defined in TestTokenizer
      uses function ifAddBraces19() defined in TestTokenizer
      uses function ifAddBraces20() defined in TestTokenizer
      uses function whileAddBraces() defined in TestTokenizer
      uses function doWhileAddBraces() defined in TestTokenizer
      uses function forAddBraces1() defined in TestTokenizer
      uses function forAddBraces2() defined in TestTokenizer
      uses function simplifyKnownVariables1() defined in TestTokenizer
      uses function simplifyKnownVariables2() defined in TestTokenizer
      uses function simplifyKnownVariables3() defined in TestTokenizer
      uses function simplifyKnownVariables4() defined in TestTokenizer
      uses function simplifyKnownVariables5() defined in TestTokenizer
      uses function simplifyKnownVariables6() defined in TestTokenizer
      uses function simplifyKnownVariables7() defined in TestTokenizer
      uses function simplifyKnownVariables8() defined in TestTokenizer
      uses function simplifyKnownVariables9() defined in TestTokenizer
      uses function simplifyKnownVariables10() defined in TestTokenizer
      uses function simplifyKnownVariables11() defined in TestTokenizer
      uses function simplifyKnownVariables12() defined in TestTokenizer
      uses function simplifyKnownVariables13() defined in TestTokenizer
      uses function simplifyKnownVariables14() defined in TestTokenizer
      uses function simplifyKnownVariables15() defined in TestTokenizer
      uses function simplifyKnownVariables16() defined in TestTokenizer
      uses function simplifyKnownVariables17() defined in TestTokenizer
      uses function simplifyKnownVariables18() defined in TestTokenizer
      uses function simplifyKnownVariables19() defined in TestTokenizer
      uses function simplifyKnownVariables20() defined in TestTokenizer
      uses function simplifyKnownVariables21() defined in TestTokenizer
      uses function simplifyKnownVariables22() defined in TestTokenizer
      uses function simplifyKnownVariables23() defined in TestTokenizer
      uses function simplifyKnownVariables25() defined in TestTokenizer
      uses function simplifyKnownVariables27() defined in TestTokenizer
      uses function simplifyKnownVariables28() defined in TestTokenizer
      uses function simplifyKnownVariables29() defined in TestTokenizer
      uses function simplifyKnownVariables30() defined in TestTokenizer
      uses function simplifyKnownVariables31() defined in TestTokenizer
      uses function simplifyKnownVariables32() defined in TestTokenizer
      uses function simplifyKnownVariables33() defined in TestTokenizer
      uses function simplifyKnownVariables34() defined in TestTokenizer
      uses function simplifyKnownVariables35() defined in TestTokenizer
      uses function simplifyKnownVariables36() defined in TestTokenizer
      uses function simplifyKnownVariables37() defined in TestTokenizer
      uses function simplifyKnownVariables38() defined in TestTokenizer
      uses function simplifyKnownVariables39() defined in TestTokenizer
      uses function simplifyKnownVariables40() defined in TestTokenizer
      uses function simplifyKnownVariables41() defined in TestTokenizer
      uses function simplifyKnownVariables42() defined in TestTokenizer
      uses function simplifyKnownVariables43() defined in TestTokenizer
      uses function simplifyKnownVariables44() defined in TestTokenizer
      uses function simplifyKnownVariables45() defined in TestTokenizer
      uses function simplifyKnownVariables46() defined in TestTokenizer
      uses function simplifyKnownVariables47() defined in TestTokenizer
      uses function simplifyKnownVariables48() defined in TestTokenizer
      uses function simplifyKnownVariables49() defined in TestTokenizer
      uses function simplifyKnownVariables50() defined in TestTokenizer
      uses function simplifyKnownVariables51() defined in TestTokenizer
      uses function simplifyKnownVariables52() defined in TestTokenizer
      uses function simplifyKnownVariables53() defined in TestTokenizer
      uses function simplifyKnownVariables54() defined in TestTokenizer
      uses function simplifyKnownVariables55() defined in TestTokenizer
      uses function simplifyKnownVariables56() defined in TestTokenizer
      uses function simplifyKnownVariables57() defined in TestTokenizer
      uses function simplifyKnownVariables58() defined in TestTokenizer
      uses function simplifyKnownVariables59() defined in TestTokenizer
      uses function simplifyKnownVariables60() defined in TestTokenizer
      uses function simplifyKnownVariablesBailOutAssign1() defined in TestTokenizer
      uses function simplifyKnownVariablesBailOutAssign2() defined in TestTokenizer
      uses function simplifyKnownVariablesBailOutAssign3() defined in TestTokenizer
      uses function simplifyKnownVariablesBailOutFor1() defined in TestTokenizer
      uses function simplifyKnownVariablesBailOutFor2() defined in TestTokenizer
      uses function simplifyKnownVariablesBailOutFor3() defined in TestTokenizer
      uses function simplifyKnownVariablesBailOutMemberFunction() defined in TestTokenizer
      uses function simplifyKnownVariablesBailOutConditionalIncrement() defined in TestTokenizer
      uses function simplifyKnownVariablesBailOutSwitchBreak() defined in TestTokenizer
      uses function simplifyKnownVariablesFloat() defined in TestTokenizer
      uses function simplifyKnownVariablesClassMember() defined in TestTokenizer
      uses function simplifyKnownVariablesFunctionCalls() defined in TestTokenizer
      uses function simplifyKnownVariablesReturn() defined in TestTokenizer
      uses function simplifyExternC() defined in TestTokenizer
      uses function simplifyKeyword() defined in TestTokenizer
      uses function file1() defined in TestTokenizer
      uses function file2() defined in TestTokenizer
      uses function file3() defined in TestTokenizer
      uses function doublesharp() defined in TestTokenizer
      uses function isZeroNumber() defined in TestTokenizer
      uses function isOneNumber() defined in TestTokenizer
      uses function isTwoNumber() defined in TestTokenizer
      uses function macrodoublesharp() defined in TestTokenizer
      uses function simplifyFunctionParameters() defined in TestTokenizer
      uses function simplifyFunctionParameters1() defined in TestTokenizer
      uses function simplifyFunctionParameters2() defined in TestTokenizer
      uses function simplifyFunctionParameters3() defined in TestTokenizer
      uses function simplifyFunctionParametersErrors() defined in TestTokenizer
      uses function removeParentheses1() defined in TestTokenizer
      uses function removeParentheses3() defined in TestTokenizer
      uses function removeParentheses4() defined in TestTokenizer
      uses function removeParentheses5() defined in TestTokenizer
      uses function removeParentheses6() defined in TestTokenizer
      uses function removeParentheses7() defined in TestTokenizer
      uses function removeParentheses8() defined in TestTokenizer
      uses function removeParentheses9() defined in TestTokenizer
      uses function removeParentheses10() defined in TestTokenizer
      uses function removeParentheses11() defined in TestTokenizer
      uses function removeParentheses12() defined in TestTokenizer
      uses function removeParentheses13() defined in TestTokenizer
      uses function removeParentheses14() defined in TestTokenizer
      uses function removeParentheses15() defined in TestTokenizer
      uses function removeParentheses16() defined in TestTokenizer
      uses function removeParentheses17() defined in TestTokenizer
      uses function removeParentheses18() defined in TestTokenizer
      uses function removeParentheses19() defined in TestTokenizer
      uses function removeParentheses20() defined in TestTokenizer
      uses function removeParentheses21() defined in TestTokenizer
      uses function removeParentheses22() defined in TestTokenizer
      uses function removeParentheses23() defined in TestTokenizer
      uses function removeParentheses24() defined in TestTokenizer
      uses function tokenize_double() defined in TestTokenizer
      uses function tokenize_strings() defined in TestTokenizer
      uses function simplify_constants() defined in TestTokenizer
      uses function simplify_constants2() defined in TestTokenizer
      uses function simplify_constants3() defined in TestTokenizer
      uses function simplify_constants4() defined in TestTokenizer
      uses function simplify_constants5() defined in TestTokenizer
      uses function simplify_constants6() defined in TestTokenizer
      uses function simplifyNull() defined in TestTokenizer
      uses function simplifyMulAndParens() defined in TestTokenizer
      uses function simplifyStructDecl() defined in TestTokenizer
      uses function vardecl1() defined in TestTokenizer
      uses function vardecl2() defined in TestTokenizer
      uses function vardecl3() defined in TestTokenizer
      uses function vardecl4() defined in TestTokenizer
      uses function vardecl5() defined in TestTokenizer
      uses function vardec_static() defined in TestTokenizer
      uses function vardecl6() defined in TestTokenizer
      uses function vardecl7() defined in TestTokenizer
      uses function vardecl8() defined in TestTokenizer
      uses function vardecl9() defined in TestTokenizer
      uses function vardecl10() defined in TestTokenizer
      uses function vardecl11() defined in TestTokenizer
      uses function vardecl12() defined in TestTokenizer
      uses function vardecl13() defined in TestTokenizer
      uses function vardecl14() defined in TestTokenizer
      uses function vardecl15() defined in TestTokenizer
      uses function vardecl16() defined in TestTokenizer
      uses function vardecl17() defined in TestTokenizer
      uses function vardecl18() defined in TestTokenizer
      uses function vardecl19() defined in TestTokenizer
      uses function vardecl20() defined in TestTokenizer
      uses function vardecl21() defined in TestTokenizer
      uses function vardecl22() defined in TestTokenizer
      uses function vardecl23() defined in TestTokenizer
      uses function vardecl24() defined in TestTokenizer
      uses function vardecl25() defined in TestTokenizer
      uses function vardecl26() defined in TestTokenizer
      uses function vardecl_stl_1() defined in TestTokenizer
      uses function vardecl_stl_2() defined in TestTokenizer
      uses function vardecl_template_1() defined in TestTokenizer
      uses function vardecl_template_2() defined in TestTokenizer
      uses function vardecl_union() defined in TestTokenizer
      uses function vardecl_par() defined in TestTokenizer
      uses function vardecl_par2() defined in TestTokenizer
      uses function vardecl_par3() defined in TestTokenizer
      uses function volatile_variables() defined in TestTokenizer
      uses function unsigned1() defined in TestTokenizer
      uses function unsigned2() defined in TestTokenizer
      uses function unsigned3() defined in TestTokenizer
      uses function simplifyStdType() defined in TestTokenizer
      uses function createLinks() defined in TestTokenizer
      uses function signed1() defined in TestTokenizer
      uses function simplifyString() defined in TestTokenizer
      uses function simplifyConst() defined in TestTokenizer
      uses function switchCase() defined in TestTokenizer
      uses function simplifyPointerToStandardType() defined in TestTokenizer
      uses function functionpointer1() defined in TestTokenizer
      uses function functionpointer2() defined in TestTokenizer
      uses function functionpointer3() defined in TestTokenizer
      uses function functionpointer4() defined in TestTokenizer
      uses function functionpointer5() defined in TestTokenizer
      uses function functionpointer6() defined in TestTokenizer
      uses function functionpointer7() defined in TestTokenizer
      uses function removeRedundantAssignment() defined in TestTokenizer
      uses function removedeclspec() defined in TestTokenizer
      uses function removeattribute() defined in TestTokenizer
      uses function functionAttributeBefore() defined in TestTokenizer
      uses function functionAttributeAfter() defined in TestTokenizer
      uses function cpp03template1() defined in TestTokenizer
      uses function cpp0xtemplate1() defined in TestTokenizer
      uses function cpp0xtemplate2() defined in TestTokenizer
      uses function cpp0xtemplate3() defined in TestTokenizer
      uses function cpp0xtemplate4() defined in TestTokenizer
      uses function cpp14template() defined in TestTokenizer
      uses function arraySize() defined in TestTokenizer
      uses function labels() defined in TestTokenizer
      uses function simplifyInitVar() defined in TestTokenizer
      uses function simplifyInitVar2() defined in TestTokenizer
      uses function simplifyInitVar3() defined in TestTokenizer
      uses function bitfields1() defined in TestTokenizer
      uses function bitfields2() defined in TestTokenizer
      uses function bitfields3() defined in TestTokenizer
      uses function bitfields4() defined in TestTokenizer
      uses function bitfields5() defined in TestTokenizer
      uses function bitfields6() defined in TestTokenizer
      uses function bitfields7() defined in TestTokenizer
      uses function bitfields8() defined in TestTokenizer
      uses function bitfields9() defined in TestTokenizer
      uses function bitfields10() defined in TestTokenizer
      uses function bitfields11() defined in TestTokenizer
      uses function bitfields12() defined in TestTokenizer
      uses function bitfields13() defined in TestTokenizer
      uses function bitfields14() defined in TestTokenizer
      uses function simplifyNamespaceStd() defined in TestTokenizer
      uses function microsoftMemory() defined in TestTokenizer
      uses function borland() defined in TestTokenizer
      uses function Qt() defined in TestTokenizer
      uses function simplifySQL() defined in TestTokenizer
      uses function simplifyCAlternativeTokens() defined in TestTokenizer
      uses function simplifyCalculations() defined in TestTokenizer
      uses function simplifyRoundCurlyParentheses() defined in TestTokenizer
      uses function simplifyOperatorName1() defined in TestTokenizer
      uses function simplifyOperatorName2() defined in TestTokenizer
      uses function simplifyOperatorName3() defined in TestTokenizer
      uses function simplifyOperatorName4() defined in TestTokenizer
      uses function simplifyOperatorName5() defined in TestTokenizer
      uses function simplifyOperatorName6() defined in TestTokenizer
      uses function simplifyOperatorName7() defined in TestTokenizer
      uses function simplifyOperatorName8() defined in TestTokenizer
      uses function simplifyOperatorName9() defined in TestTokenizer
      uses function simplifyNullArray() defined in TestTokenizer
      uses function removeMacrosInGlobalScope() defined in TestTokenizer
      uses function removeMacroInVarDecl() defined in TestTokenizer
      uses function multipleAssignment() defined in TestTokenizer
      uses function platformWin() defined in TestTokenizer
      uses function platformWin32() defined in TestTokenizer
      uses function platformWin32A() defined in TestTokenizer
      uses function platformWin32W() defined in TestTokenizer
      uses function platformWin64() defined in TestTokenizer
      uses function platformUnix32() defined in TestTokenizer
      uses function platformUnix64() defined in TestTokenizer
      uses function platformWin32AStringCat() defined in TestTokenizer
      uses function platformWin32WStringCat() defined in TestTokenizer
      uses function platformWinWithNamespace() defined in TestTokenizer
      uses function simplifyMathFunctions() defined in TestTokenizer
      uses function simplifyMathFunctions_sqrt() defined in TestTokenizer
      uses function simplifyMathFunctions_cbrt() defined in TestTokenizer
      uses function simplifyMathFunctions_exp() defined in TestTokenizer
      uses function simplifyMathFunctions_exp2() defined in TestTokenizer
      uses function simplifyMathFunctions_logb() defined in TestTokenizer
      uses function simplifyMathFunctions_log1p() defined in TestTokenizer
      uses function simplifyMathFunctions_ilogb() defined in TestTokenizer
      uses function simplifyMathFunctions_log10() defined in TestTokenizer
      uses function simplifyMathFunctions_log() defined in TestTokenizer
      uses function simplifyMathFunctions_log2() defined in TestTokenizer
      uses function simplifyMathFunctions_div() defined in TestTokenizer
      uses function simplifyMathFunctions_pow() defined in TestTokenizer
      uses function simplifyMathFunctions_islessgreater() defined in TestTokenizer
      uses function simplifyMathFunctions_islessequal() defined in TestTokenizer
      uses function simplifyMathFunctions_isless() defined in TestTokenizer
      uses function simplifyMathFunctions_isgreaterequal() defined in TestTokenizer
      uses function simplifyMathFunctions_isgreater() defined in TestTokenizer
      uses function simplifyMathFunctions_fmin() defined in TestTokenizer
      uses function simplifyMathFunctions_fmax() defined in TestTokenizer
      uses function simplifyMathFunctions_acosh() defined in TestTokenizer
      uses function simplifyMathFunctions_acos() defined in TestTokenizer
      uses function simplifyMathFunctions_cosh() defined in TestTokenizer
      uses function simplifyMathFunctions_cos() defined in TestTokenizer
      uses function simplifyMathFunctions_erfc() defined in TestTokenizer
      uses function simplifyMathFunctions_erf() defined in TestTokenizer
      uses function simplifyMathFunctions_sin() defined in TestTokenizer
      uses function simplifyMathFunctions_sinh() defined in TestTokenizer
      uses function simplifyMathFunctions_asin() defined in TestTokenizer
      uses function simplifyMathFunctions_asinh() defined in TestTokenizer
      uses function simplifyMathFunctions_tan() defined in TestTokenizer
      uses function simplifyMathFunctions_tanh() defined in TestTokenizer
      uses function simplifyMathFunctions_atan() defined in TestTokenizer
      uses function simplifyMathFunctions_atanh() defined in TestTokenizer
      uses function simplifyMathFunctions_expm1() defined in TestTokenizer
      uses function simplifyMathFunctions_fma() defined in TestTokenizer
      uses function simplifyMathExpressions() defined in TestTokenizer
      uses function simplifyStaticConst() defined in TestTokenizer
      uses function simplifyDeprecated() defined in TestTokenizer
      uses function simplifyCaseRange() defined in TestTokenizer
      uses function compileLimits() defined in TestTokenizer
      uses function prepareTernaryOpForAST() defined in TestTokenizer
      uses function astexpr() defined in TestTokenizer
      uses function astpar() defined in TestTokenizer
      uses function astnewdelete() defined in TestTokenizer
      uses function astbrackets() defined in TestTokenizer
      uses function astunaryop() defined in TestTokenizer
      uses function astfunction() defined in TestTokenizer
      uses function asttemplate() defined in TestTokenizer
      uses function astcast() defined in TestTokenizer
      uses function astlambda() defined in TestTokenizer
      uses function startOfExecutableScope() defined in TestTokenizer
      uses function removeMacroInClassDef() defined in TestTokenizer
      uses function sizeofAddParentheses() defined in TestTokenizer
      uses function noreturn() defined in TestTokenizer
   function signed1() in line 4056
      29 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function simplify_constants() in line 3360
      19 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function simplify_constants2() in line 3380
      13 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function simplify_constants3() in line 3394
      11 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function simplify_constants4() in line 3406
      7 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function simplify_constants5() in line 3414
      8 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function simplify_constants6() in line 3423
      20 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function simplifyAsm2() in line 1000
      29 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function simplifyCalculations() in line 5628
      39 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function simplifyCAlternativeTokens() in line 5609
      18 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
      uses function tokenizeDebugListing(const char,bool,const char) defined in TestTokenizer
   function simplifyCaseRange() in line 7948
      8 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function simplifyConst() in line 4557
      28 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function simplifyDeprecated() in line 7937
      10 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
      uses enumvalue Native defined in Settings
   function simplifyExternC() in line 2924
      4 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function simplifyFileAndLineMacro() in line 843
      4 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function simplifyFunctionParameters() in line 3011
      43 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function simplifyFunctionParameters1() in line 3055
      11 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function simplifyFunctionParameters2() in line 3067
      9 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function simplifyFunctionParameters3() in line 3077
      10 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function simplifyFunctionParametersErrors() in line 3088
      26 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_THROW defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function simplifyInitVar() in line 4890
      217 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
      uses variable errout defined in redirect.h
   function simplifyInitVar2() in line 5108
      9 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function simplifyInitVar3() in line 5118
      8 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function simplifyKeyword() in line 3993
      59 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function simplifyKnownVariables(const char) in line 1355
      11 lines of code
      1 parameters
      1 conditional paths
      uses variable errout defined in redirect.h
      uses variable settings0 defined in TestTokenizer
      uses variable code defined in extracttests.py
      uses function tokenize(std::istream &,const char,const std::string &,bool) defined in Tokenizer
      uses function simplifyKnownVariables() defined in Tokenizer
      uses function tokens() defined in Tokenizer
      uses function stringifyList(bool,bool,bool,bool,bool,const std::vector< std::string > *,const Token *) defined in Token
   function simplifyKnownVariables1() in line 1367
      25 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function simplifyKnownVariables(const char) defined in TestTokenizer
   function simplifyKnownVariables10() in line 1499
      65 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition TODO_ASSERT_EQUALS defined in testsuite.h
      uses function simplifyKnownVariables(const char) defined in TestTokenizer
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function simplifyKnownVariables11() in line 1565
      11 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function simplifyKnownVariables(const char) defined in TestTokenizer
   function simplifyKnownVariables12() in line 1577
      8 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function simplifyKnownVariables(const char) defined in TestTokenizer
   function simplifyKnownVariables13() in line 1586
      11 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function simplifyKnownVariables(const char) defined in TestTokenizer
   function simplifyKnownVariables14() in line 1598
      5 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function simplifyKnownVariables(const char) defined in TestTokenizer
   function simplifyKnownVariables15() in line 1604
      25 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function simplifyKnownVariables(const char) defined in TestTokenizer
   function simplifyKnownVariables16() in line 1630
      5 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_THROW defined in testsuite.h
      uses function simplifyKnownVariables(const char) defined in TestTokenizer
   function simplifyKnownVariables17() in line 1636
      7 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function simplifyKnownVariables(const char) defined in TestTokenizer
   function simplifyKnownVariables18() in line 1644
      6 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function simplifyKnownVariables(const char) defined in TestTokenizer
   function simplifyKnownVariables19() in line 1651
      6 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function simplifyKnownVariables(const char) defined in TestTokenizer
   function simplifyKnownVariables2() in line 1393
      12 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function simplifyKnownVariables(const char) defined in TestTokenizer
   function simplifyKnownVariables20() in line 1658
      13 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function simplifyKnownVariables(const char) defined in TestTokenizer
   function simplifyKnownVariables21() in line 1672
      7 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function simplifyKnownVariables(const char) defined in TestTokenizer
   function simplifyKnownVariables22() in line 1680
      47 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function simplifyKnownVariables(const char) defined in TestTokenizer
   function simplifyKnownVariables23() in line 1728
      30 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition TODO_ASSERT_EQUALS defined in testsuite.h
      uses function simplifyKnownVariables(const char) defined in TestTokenizer
   function simplifyKnownVariables25() in line 1759
      51 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function simplifyKnownVariables(const char) defined in TestTokenizer
   function simplifyKnownVariables27() in line 1811
      17 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function simplifyKnownVariables(const char) defined in TestTokenizer
   function simplifyKnownVariables28() in line 1829
      18 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function simplifyKnownVariables(const char) defined in TestTokenizer
   function simplifyKnownVariables29() in line 1848
      307 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeDebugListing(const char,bool,const char) defined in TestTokenizer
   function simplifyKnownVariables3() in line 1406
      15 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function simplifyKnownVariables(const char) defined in TestTokenizer
   function simplifyKnownVariables30() in line 2156
      13 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function simplifyKnownVariables31() in line 2170
      13 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function simplifyKnownVariables32() in line 2184
      15 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function simplifyKnownVariables33() in line 2200
      11 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function simplifyKnownVariables34() in line 2212
      13 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function simplifyKnownVariables35() in line 2226
      12 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function simplifyKnownVariables36() in line 2239
      17 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function simplifyKnownVariables37() in line 2257
      20 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function simplifyKnownVariables38() in line 2278
      14 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function simplifyKnownVariables39() in line 2293
      19 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function simplifyKnownVariables4() in line 1422
      12 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function simplifyKnownVariables(const char) defined in TestTokenizer
   function simplifyKnownVariables40() in line 2314
      7 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function simplifyKnownVariables41() in line 2322
      8 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function simplifyKnownVariables42() in line 2331
      56 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function simplifyKnownVariables43() in line 2388
      25 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function simplifyKnownVariables44() in line 2414
      11 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function simplifyKnownVariables45() in line 2426
      13 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function simplifyKnownVariables46() in line 2440
      25 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
      uses enumvalue Native defined in Settings
   function simplifyKnownVariables47() in line 2466
      12 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
      uses enumvalue Native defined in Settings
   function simplifyKnownVariables48() in line 2479
      12 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
      uses enumvalue Native defined in Settings
   function simplifyKnownVariables49() in line 2492
      15 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
      uses enumvalue Native defined in Settings
   function simplifyKnownVariables5() in line 1435
      11 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function simplifyKnownVariables(const char) defined in TestTokenizer
   function simplifyKnownVariables50() in line 2508
      81 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function simplifyKnownVariables51() in line 2590
      8 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function simplifyKnownVariables52() in line 2599
      24 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function simplifyKnownVariables53() in line 2624
      4 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function simplifyKnownVariables54() in line 2629
      3 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function simplifyKnownVariables55() in line 2633
      5 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function simplifyKnownVariables56() in line 2639
      4 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function simplifyKnownVariables57() in line 2644
      4 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function simplifyKnownVariables58() in line 2649
      14 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function simplifyKnownVariables59() in line 2664
      14 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function simplifyKnownVariables6() in line 1447
      12 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function simplifyKnownVariables(const char) defined in TestTokenizer
   function simplifyKnownVariables60() in line 2679
      14 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function simplifyKnownVariables7() in line 1460
      12 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function simplifyKnownVariables(const char) defined in TestTokenizer
   function simplifyKnownVariables8() in line 1473
      12 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function simplifyKnownVariables(const char) defined in TestTokenizer
   function simplifyKnownVariables9() in line 1486
      12 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function simplifyKnownVariables(const char) defined in TestTokenizer
   function simplifyKnownVariablesBailOutAssign1() in line 2694
      13 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function simplifyKnownVariablesBailOutAssign2() in line 2708
      12 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function simplifyKnownVariablesBailOutAssign3() in line 2721
      13 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function simplifyKnownVariablesBailOutConditionalIncrement() in line 2784
      11 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function simplifyKnownVariablesBailOutFor1() in line 2735
      10 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
      uses variable errout defined in redirect.h
   function simplifyKnownVariablesBailOutFor2() in line 2746
      12 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
      uses variable errout defined in redirect.h
   function simplifyKnownVariablesBailOutFor3() in line 2759
      12 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
      uses variable errout defined in redirect.h
   function simplifyKnownVariablesBailOutMemberFunction() in line 2772
      11 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function simplifyKnownVariablesBailOutSwitchBreak() in line 2796
      38 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function simplifyKnownVariablesClassMember() in line 2897
      26 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable s defined in extracttests.py
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses macro definition TODO_ASSERT_EQUALS defined in testsuite.h
   function simplifyKnownVariablesFloat() in line 2835
      31 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function simplifyKnownVariablesFunctionCalls() in line 2867
      21 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function simplifyKnownVariablesReturn() in line 2889
      7 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function simplifyMathExpressions() in line 7709
      167 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function simplifyMathFunctions() in line 7665
      43 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function simplifyMathFunctions_acos() in line 6465
      32 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function simplifyMathFunctions_acosh() in line 6498
      32 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function simplifyMathFunctions_asin() in line 7020
      38 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function simplifyMathFunctions_asinh() in line 6981
      38 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function simplifyMathFunctions_atan() in line 6791
      38 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function simplifyMathFunctions_atanh() in line 6750
      40 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function simplifyMathFunctions_cbrt() in line 6576
      44 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function simplifyMathFunctions_cos() in line 6399
      32 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function simplifyMathFunctions_cosh() in line 6432
      32 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function simplifyMathFunctions_div() in line 7376
      35 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function simplifyMathFunctions_erf() in line 6711
      38 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function simplifyMathFunctions_erfc() in line 6366
      32 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function simplifyMathFunctions_exp() in line 6666
      44 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function simplifyMathFunctions_exp2() in line 6621
      44 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function simplifyMathFunctions_expm1() in line 6942
      38 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function simplifyMathFunctions_fma() in line 6830
      33 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
      uses macro definition TODO_ASSERT_EQUALS defined in testsuite.h
   function simplifyMathFunctions_fmax() in line 7632
      32 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function simplifyMathFunctions_fmin() in line 7599
      32 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function simplifyMathFunctions_ilogb() in line 7142
      38 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function simplifyMathFunctions_isgreater() in line 7572
      26 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function simplifyMathFunctions_isgreaterequal() in line 7545
      26 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function simplifyMathFunctions_isless() in line 7518
      26 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function simplifyMathFunctions_islessequal() in line 7491
      26 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function simplifyMathFunctions_islessgreater() in line 7464
      26 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function simplifyMathFunctions_log() in line 7298
      38 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function simplifyMathFunctions_log10() in line 7259
      39 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function simplifyMathFunctions_log1p() in line 7220
      38 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function simplifyMathFunctions_log2() in line 7337
      38 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function simplifyMathFunctions_logb() in line 7181
      38 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function simplifyMathFunctions_pow() in line 7412
      51 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function simplifyMathFunctions_sin() in line 7098
      43 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
   function simplifyMathFunctions_sinh() in line 7059
      38 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function simplifyMathFunctions_sqrt() in line 6531
      44 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function simplifyMathFunctions_tan() in line 6903
      38 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function simplifyMathFunctions_tanh() in line 6864
      38 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function simplifyMulAndParens() in line 3462
      38 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function simplifyNamespaceStd() in line 5365
      78 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
      uses enumvalue Native defined in Settings
   function simplifyNull() in line 3444
      17 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
      uses enumvalue Native defined in Settings
   function simplifyNullArray() in line 5778
      3 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function simplifyOperatorName1() in line 5673
      16 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable result defined in triage-report.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
      uses enumvalue Native defined in Settings
   function simplifyOperatorName2() in line 5690
      15 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable result defined in triage-report.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function simplifyOperatorName3() in line 5706
      8 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable result defined in triage-report.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function simplifyOperatorName4() in line 5715
      5 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable result defined in triage-report.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function simplifyOperatorName5() in line 5721
      9 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function simplifyOperatorName6() in line 5731
      9 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function simplifyOperatorName7() in line 5741
      5 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function simplifyOperatorName8() in line 5747
      25 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function simplifyOperatorName9() in line 5773
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function simplifyPointerToStandardType() in line 4594
      14 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
      uses enumvalue Native defined in Settings
   function simplifyRoundCurlyParentheses() in line 5668
      4 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function simplifySQL() in line 5601
      7 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function simplifyStaticConst() in line 7877
      59 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function simplifyStdType() in line 4146
      156 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function simplifyString() in line 4530
      26 lines of code
      0 parameters
      1 conditional paths
      uses variable errout defined in redirect.h
      uses variable settings0 defined in TestTokenizer
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function simplifyStructDecl() in line 3501
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function sizeofAddParentheses() in line 8355
      6 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function startOfExecutableScope() in line 8325
      22 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT defined in testsuite.h
      uses function isStartOfExecutableScope(int,const char) defined in TestTokenizer
   function switchCase() in line 4586
      7 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function syntax_case_default() in line 805
      37 lines of code
      0 parameters
      1 conditional paths
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function testAst(const char,bool) in line 7966
      37 lines of code
      2 parameters
      8 conditional paths
      uses variable settings0 defined in TestTokenizer
      uses variable code defined in extracttests.py
      uses variable list defined in Tokenizer
      uses function createTokens(std::istream &,const std::string &) defined in TokenList
      uses function combineOperators() defined in Tokenizer
      uses function createLinks() defined in Tokenizer
      uses function createLinks2() defined in Tokenizer
      uses function prepareTernaryOpForAST() defined in Tokenizer
      uses function createAst() defined in TokenList
      uses function front() defined in TokenList
      uses function next() defined in Token
      uses function astTop() defined in Token
      uses function astStringVerbose(const unsigned int,const unsigned int) defined in Token
   function tokenize1() in line 544
      5 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function tokenize11() in line 664
      3 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function tokenize13() in line 669
      7 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_THROW defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function tokenize14() in line 678
      5 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function tokenize15() in line 685
      4 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function tokenize16() in line 691
      3 lines of code
      0 parameters
      1 conditional paths
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function tokenize17() in line 695
      3 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function tokenize18() in line 699
      3 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function tokenize19() in line 703
      24 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_THROW defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function tokenize2() in line 550
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function tokenize20() in line 728
      3 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function tokenize21() in line 732
      3 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function tokenize22() in line 736
      7 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function tokenize24() in line 745
      3 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_THROW defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function tokenize25() in line 750
      3 lines of code
      0 parameters
      1 conditional paths
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function tokenize26() in line 755
      3 lines of code
      0 parameters
      1 conditional paths
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function tokenize27() in line 759
      12 lines of code
      0 parameters
      1 conditional paths
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function tokenize3() in line 555
      13 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
      uses variable errout defined in redirect.h
   function tokenize31() in line 773
      15 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function tokenize32() in line 790
      5 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function tokenize33() in line 797
      7 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function tokenize4() in line 569
      13 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
      uses variable errout defined in redirect.h
   function tokenize5() in line 583
      5 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function tokenize6() in line 589
      42 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function tokenize7() in line 632
      8 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function tokenize8() in line 641
      12 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeDebugListing(const char,bool,const char) defined in TestTokenizer
   function tokenize9() in line 654
      9 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function tokenize_double() in line 3324
      16 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function tokenize_strings() in line 3341
      18 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) in line 466
      29 lines of code
      6 parameters
      5 conditional paths
      uses variable errout defined in redirect.h
      uses variable settings1 defined in TestTokenizer
      uses variable debugwarnings defined in Settings
      uses function platform(PlatformType) defined in Settings
      uses variable standards defined in Settings
      uses variable cpp defined in Standards
      uses enumvalue CPP11 defined in Standards
      uses enumvalue CPP03 defined in Standards
      uses variable code defined in extracttests.py
      uses function tokenize(std::istream &,const char,const std::string &,bool) defined in Tokenizer
      uses variable filename defined in extracttests.py
      uses function simplifyTokenList2() defined in Tokenizer
      uses variable line defined in triage-report.py
      uses function tokens() defined in Tokenizer
      uses function stringifyList(bool,bool,bool,bool,bool,const std::vector< std::string > *,const Token *) defined in Token
   function tokenizeAndStringifyWindows(const char,bool,bool,Settings::PlatformType,const char *,bool) in line 496
      29 lines of code
      6 parameters
      5 conditional paths
      uses variable errout defined in redirect.h
      uses variable settings_windows defined in TestTokenizer
      uses variable debugwarnings defined in Settings
      uses function platform(PlatformType) defined in Settings
      uses variable standards defined in Settings
      uses variable cpp defined in Standards
      uses enumvalue CPP11 defined in Standards
      uses enumvalue CPP03 defined in Standards
      uses variable code defined in extracttests.py
      uses function tokenize(std::istream &,const char,const std::string &,bool) defined in Tokenizer
      uses variable filename defined in extracttests.py
      uses function simplifyTokenList2() defined in Tokenizer
      uses variable line defined in triage-report.py
      uses function tokens() defined in Tokenizer
      uses function stringifyList(bool,bool,bool,bool,bool,const std::vector< std::string > *,const Token *) defined in Token
   function tokenizeDebugListing(const char,bool,const char) in line 526
      16 lines of code
      3 parameters
      2 conditional paths
      uses variable errout defined in redirect.h
      uses variable settings2 defined in TestTokenizer
      uses variable standards defined in Settings
      uses variable c defined in Standards
      uses enumvalue C89 defined in Standards
      uses variable cpp defined in Standards
      uses enumvalue CPP03 defined in Standards
      uses variable code defined in extracttests.py
      uses function tokenize(std::istream &,const char,const std::string &,bool) defined in Tokenizer
      uses variable filename defined in extracttests.py
      uses function simplifyTokenList2() defined in Tokenizer
      uses function tokens() defined in Tokenizer
      uses function stringifyList(bool,bool,bool,bool,bool,const std::vector< std::string > *,const Token *) defined in Token
   function unsigned1() in line 4090
      34 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function unsigned2() in line 4125
      5 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function unsigned3() in line 4132
      13 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function vardec_static() in line 3633
      74 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function vardecl1() in line 3506
      7 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function vardecl10() in line 3747
      5 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function vardecl11() in line 3753
      5 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function vardecl12() in line 3759
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function vardecl13() in line 3764
      6 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function vardecl14() in line 3771
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
      uses enumvalue Native defined in Settings
   function vardecl15() in line 3776
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function vardecl16() in line 3781
      13 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function vardecl17() in line 3795
      5 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function vardecl18() in line 3801
      9 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function vardecl19() in line 3811
      88 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function vardecl2() in line 3514
      7 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function vardecl20() in line 3900
      11 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function vardecl21() in line 3912
      19 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function vardecl22() in line 3932
      3 lines of code
      0 parameters
      1 conditional paths
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function vardecl23() in line 3936
      3 lines of code
      0 parameters
      1 conditional paths
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function vardecl24() in line 3940
      27 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function vardecl25() in line 3968
      6 lines of code
      0 parameters
      1 conditional paths
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function vardecl26() in line 3975
      6 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
      uses enumvalue Native defined in Settings
   function vardecl3() in line 3522
      5 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function vardecl4() in line 3528
      19 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function vardecl5() in line 3548
      7 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function vardecl6() in line 3708
      7 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function vardecl7() in line 3716
      15 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable res defined in naming.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function vardecl8() in line 3732
      7 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable res defined in naming.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function vardecl9() in line 3740
      6 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable res defined in naming.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function vardecl_par() in line 3615
      5 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function vardecl_par2() in line 3621
      5 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function vardecl_par3() in line 3627
      5 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function vardecl_stl_1() in line 3556
      15 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function vardecl_stl_2() in line 3572
      7 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function vardecl_template_1() in line 3580
      8 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function vardecl_template_2() in line 3589
      6 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function vardecl_union() in line 3596
      18 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function volatile_variables() in line 3982
      9 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function whileAddBraces() in line 1249
      4 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenizeAndStringify(const char,bool,bool,Settings::PlatformType,const char *,bool) defined in TestTokenizer
   function TestTokenizer() in line 30
      protection public
      2 lines of code
      0 parameters
      1 conditional paths
   variable settings0 in line 34
   variable settings1 in line 35
   variable settings2 in line 36
   variable settings_windows in line 37
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/test/testtokenlist.cpp
module TestTokenList
   inherits from TestFixture
   function inc() in line 106
      12 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable errout defined in redirect.h
      uses variable settings defined in TestTokenList
      uses function createTokens(std::istream &,const std::string &) defined in TokenList
      uses macro definition ASSERT defined in testsuite.h
      uses function front() defined in TokenList
      uses macro definition REGISTER_TEST defined in testsuite.h
   function line1() in line 58
      33 lines of code
      0 parameters
      7 conditional paths
      uses variable code defined in extracttests.py
      uses variable errout defined in redirect.h
      uses variable settings defined in TestTokenList
      uses variable res defined in naming.py
      uses function createTokens(std::istream &,const std::string &) defined in TokenList
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function front() defined in TokenList
      uses function next() defined in Token
   function line2() in line 92
      13 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable errout defined in redirect.h
      uses variable settings defined in TestTokenList
      uses function createTokens(std::istream &,const std::string &) defined in TokenList
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function fileLine(const Token *) defined in TokenList
      uses function front() defined in TokenList
   function run() in line 36
      6 lines of code
      0 parameters
      1 conditional paths
      uses macro definition TEST_CASE defined in testsuite.h
      uses function line1() defined in TestTokenList
      uses function line2() defined in TestTokenList
      uses function testaddtoken() defined in TestTokenList
      uses function inc() defined in TestTokenList
   function testaddtoken() in line 44
      13 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable settings defined in TestTokenList
      uses function addtoken(std::string,const unsigned int,const unsigned int,bool) defined in TokenList
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function front() defined in TokenList
      uses function str(T &&) defined in Token
   function TestTokenList() in line 30
      protection public
      2 lines of code
      0 parameters
      1 conditional paths
   variable settings in line 34
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/test/testtype.cpp
module TestType
   inherits from TestFixture
   function check(const char,Settings *) in line 44
      19 lines of code
      2 parameters
      2 conditional paths
      uses variable errout defined in redirect.h
      uses function addEnabled(const std::string &) defined in Settings
      uses variable code defined in extracttests.py
      uses function tokenize(std::istream &,const char,const std::string &,bool) defined in Tokenizer
      uses function runChecks(const Tokenizer *,const Settings *,ErrorLogger *) defined in CheckType
   function checkIntegerOverflow() in line 99
      23 lines of code
      0 parameters
      1 conditional paths
      uses function platform(PlatformType) defined in Settings
      uses enumvalue Unix32 defined in Settings
      uses function addEnabled(const std::string &) defined in Settings
      uses function check(const char,Settings *) defined in TestType
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function checkTooBigShift() in line 64
      34 lines of code
      0 parameters
      1 conditional paths
      uses function platform(PlatformType) defined in Settings
      uses enumvalue Unix32 defined in Settings
      uses function check(const char,Settings *) defined in TestType
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function longCastAssign() in line 155
      25 lines of code
      0 parameters
      1 conditional paths
      uses function addEnabled(const std::string &) defined in Settings
      uses function platform(PlatformType) defined in Settings
      uses enumvalue Unix64 defined in Settings
      uses function check(const char,Settings *) defined in TestType
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function longCastReturn() in line 181
      15 lines of code
      0 parameters
      1 conditional paths
      uses function addEnabled(const std::string &) defined in Settings
      uses function check(const char,Settings *) defined in TestType
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
      uses macro definition REGISTER_TEST defined in testsuite.h
   function run() in line 36
      7 lines of code
      0 parameters
      1 conditional paths
      uses macro definition TEST_CASE defined in testsuite.h
      uses function checkTooBigShift() defined in TestType
      uses function checkIntegerOverflow() defined in TestType
      uses function signConversion() defined in TestType
      uses function longCastAssign() defined in TestType
      uses function longCastReturn() defined in TestType
   function signConversion() in line 123
      31 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,Settings *) defined in TestType
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function TestType() in line 30
      protection public
      2 lines of code
      0 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/test/testuninitvar.cpp
module TestUninitVar
   inherits from TestFixture
   function checkDeadPointer(const char) in line 3749
      14 lines of code
      1 parameters
      1 conditional paths
      uses variable errout defined in redirect.h
      uses variable settings defined in TestUninitVar
      uses variable code defined in extracttests.py
      uses function tokenize(std::istream &,const char,const std::string &,bool) defined in Tokenizer
      uses function simplifyTokenList2() defined in Tokenizer
      uses function deadPointer() defined in CheckUninitVar
   function checkUninitVar(const char,const char,bool) in line 80
      20 lines of code
      3 parameters
      1 conditional paths
      uses variable errout defined in redirect.h
      uses variable settings defined in TestUninitVar
      uses variable experimental defined in Settings
      uses variable debugwarnings defined in Settings
      uses variable code defined in extracttests.py
      uses function tokenize(std::istream &,const char,const std::string &,bool) defined in Tokenizer
      uses function simplifyTokenList2() defined in Tokenizer
      uses function check() defined in CheckUninitVar
   function deadPointer() in line 3764
      62 lines of code
      0 parameters
      1 conditional paths
      uses function checkDeadPointer(const char) defined in TestUninitVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
      uses macro definition REGISTER_TEST defined in testsuite.h
   function func_uninit_pointer() in line 1979
      19 lines of code
      0 parameters
      1 conditional paths
      uses function checkUninitVar(const char,const char,bool) defined in TestUninitVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function func_uninit_var() in line 1959
      17 lines of code
      0 parameters
      1 conditional paths
      uses function checkUninitVar(const char,const char,bool) defined in TestUninitVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function run() in line 33
      46 lines of code
      0 parameters
      1 conditional paths
      uses macro definition LOAD_LIB_2 defined in testsuite.h
      uses variable settings defined in TestUninitVar
      uses variable library defined in Settings
      uses macro definition TEST_CASE defined in testsuite.h
      uses function uninitvar1() defined in TestUninitVar
      uses function uninitvar_decl() defined in TestUninitVar
      uses function uninitvar_bitop() defined in TestUninitVar
      uses function uninitvar_alloc() defined in TestUninitVar
      uses function uninitvar_arrays() defined in TestUninitVar
      uses function uninitvar_class() defined in TestUninitVar
      uses function uninitvar_enum() defined in TestUninitVar
      uses function uninitvar_if() defined in TestUninitVar
      uses function uninitvar_loops() defined in TestUninitVar
      uses function uninitvar_switch() defined in TestUninitVar
      uses function uninitvar_references() defined in TestUninitVar
      uses function uninitvar_return() defined in TestUninitVar
      uses function uninitvar_strncpy() defined in TestUninitVar
      uses function func_uninit_var() defined in TestUninitVar
      uses function func_uninit_pointer() defined in TestUninitVar
      uses function uninitvar_typeof() defined in TestUninitVar
      uses function uninitvar2() defined in TestUninitVar
      uses function uninitvar3() defined in TestUninitVar
      uses function uninitvar4() defined in TestUninitVar
      uses function uninitvar5() defined in TestUninitVar
      uses function uninitvar2_func() defined in TestUninitVar
      uses function uninitvar2_value() defined in TestUninitVar
      uses function uninitvar2_structmembers() defined in TestUninitVar
      uses function uninitvar2_while() defined in TestUninitVar
      uses function uninitvar2_4494() defined in TestUninitVar
      uses function uninitvar2_malloc() defined in TestUninitVar
      uses function uninitvar7() defined in TestUninitVar
      uses function uninitvar8() defined in TestUninitVar
      uses function uninitvar9() defined in TestUninitVar
      uses function uninitvar_unconditionalTry() defined in TestUninitVar
      uses function uninitvar_funcptr() defined in TestUninitVar
      uses function uninitvar_operator() defined in TestUninitVar
      uses function uninitvar_ternaryexpression() defined in TestUninitVar
      uses function uninitvar_pointertoarray() defined in TestUninitVar
      uses function uninitvar_cpp11ArrayInit() defined in TestUninitVar
      uses function uninitvar_rangeBasedFor() defined in TestUninitVar
      uses function trac_4871() defined in TestUninitVar
      uses function syntax_error() defined in TestUninitVar
      uses function deadPointer() defined in TestUninitVar
   function syntax_error() in line 3738
      10 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_THROW defined in testsuite.h
      uses function checkUninitVar(const char,const char,bool) defined in TestUninitVar
   function trac_4871() in line 3719
      18 lines of code
      0 parameters
      1 conditional paths
      uses function checkUninitVar(const char,const char,bool) defined in TestUninitVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function uninitvar1() in line 101
      565 lines of code
      0 parameters
      1 conditional paths
      uses function checkUninitVar(const char,const char,bool) defined in TestUninitVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
      uses macro definition TODO_ASSERT_EQUALS defined in testsuite.h
   function uninitvar2() in line 2024
      495 lines of code
      0 parameters
      1 conditional paths
      uses function checkUninitVar(const char,const char,bool) defined in TestUninitVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
      uses variable code defined in extracttests.py
   function uninitvar2_4494() in line 3552
      62 lines of code
      0 parameters
      1 conditional paths
      uses function checkUninitVar(const char,const char,bool) defined in TestUninitVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function uninitvar2_func() in line 2660
      175 lines of code
      0 parameters
      1 conditional paths
      uses function checkUninitVar(const char,const char,bool) defined in TestUninitVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
      uses macro definition TODO_ASSERT_EQUALS defined in testsuite.h
   function uninitvar2_malloc() in line 3615
      79 lines of code
      0 parameters
      1 conditional paths
      uses function checkUninitVar(const char,const char,bool) defined in TestUninitVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function uninitvar2_structmembers() in line 2953
      427 lines of code
      0 parameters
      1 conditional paths
      uses function checkUninitVar(const char,const char,bool) defined in TestUninitVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
      uses macro definition TODO_ASSERT_EQUALS defined in testsuite.h
   function uninitvar2_value() in line 2836
      116 lines of code
      0 parameters
      1 conditional paths
      uses function checkUninitVar(const char,const char,bool) defined in TestUninitVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
      uses macro definition TODO_ASSERT_EQUALS defined in testsuite.h
   function uninitvar2_while() in line 3381
      170 lines of code
      0 parameters
      1 conditional paths
      uses function checkUninitVar(const char,const char,bool) defined in TestUninitVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
      uses macro definition TODO_ASSERT_EQUALS defined in testsuite.h
   function uninitvar3() in line 719
      16 lines of code
      0 parameters
      1 conditional paths
      uses function checkUninitVar(const char,const char,bool) defined in TestUninitVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function uninitvar4() in line 2521
      9 lines of code
      0 parameters
      1 conditional paths
      uses function checkUninitVar(const char,const char,bool) defined in TestUninitVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function uninitvar5() in line 2532
      22 lines of code
      0 parameters
      1 conditional paths
      uses function checkUninitVar(const char,const char,bool) defined in TestUninitVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function uninitvar7() in line 2555
      11 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses function checkUninitVar(const char,const char,bool) defined in TestUninitVar
   function uninitvar8() in line 2567
      14 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses function checkUninitVar(const char,const char,bool) defined in TestUninitVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function uninitvar9() in line 2582
      9 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses function checkUninitVar(const char,const char,bool) defined in TestUninitVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function uninitvar_alloc() in line 1511
      176 lines of code
      0 parameters
      1 conditional paths
      uses function checkUninitVar(const char,const char,bool) defined in TestUninitVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
      uses macro definition TODO_ASSERT_EQUALS defined in testsuite.h
   function uninitvar_arrays() in line 1230
      237 lines of code
      0 parameters
      1 conditional paths
      uses function checkUninitVar(const char,const char,bool) defined in TestUninitVar
      uses macro definition TODO_ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function uninitvar_bitop() in line 736
      13 lines of code
      0 parameters
      1 conditional paths
      uses function checkUninitVar(const char,const char,bool) defined in TestUninitVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function uninitvar_class() in line 1689
      47 lines of code
      0 parameters
      1 conditional paths
      uses function checkUninitVar(const char,const char,bool) defined in TestUninitVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function uninitvar_cpp11ArrayInit() in line 1502
      7 lines of code
      0 parameters
      1 conditional paths
      uses function checkUninitVar(const char,const char,bool) defined in TestUninitVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function uninitvar_decl() in line 668
      50 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses function checkUninitVar(const char,const char,bool) defined in TestUninitVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
      uses variable settings defined in TestUninitVar
      uses variable library defined in Settings
      uses function loadxmldata(const char,std::size_t) defined in Library
   function uninitvar_enum() in line 1738
      9 lines of code
      0 parameters
      1 conditional paths
      uses function checkUninitVar(const char,const char,bool) defined in TestUninitVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function uninitvar_funcptr() in line 2611
      22 lines of code
      0 parameters
      1 conditional paths
      uses function checkUninitVar(const char,const char,bool) defined in TestUninitVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function uninitvar_if() in line 751
      288 lines of code
      0 parameters
      1 conditional paths
      uses function checkUninitVar(const char,const char,bool) defined in TestUninitVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function uninitvar_loops() in line 1042
      110 lines of code
      0 parameters
      1 conditional paths
      uses function checkUninitVar(const char,const char,bool) defined in TestUninitVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
      uses macro definition TODO_ASSERT_EQUALS defined in testsuite.h
   function uninitvar_operator() in line 2634
      24 lines of code
      0 parameters
      1 conditional paths
      uses function checkUninitVar(const char,const char,bool) defined in TestUninitVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function uninitvar_pointertoarray() in line 1468
      33 lines of code
      0 parameters
      1 conditional paths
      uses function checkUninitVar(const char,const char,bool) defined in TestUninitVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function uninitvar_rangeBasedFor() in line 3709
      9 lines of code
      0 parameters
      1 conditional paths
      uses function checkUninitVar(const char,const char,bool) defined in TestUninitVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function uninitvar_references() in line 1749
      34 lines of code
      0 parameters
      1 conditional paths
      uses function checkUninitVar(const char,const char,bool) defined in TestUninitVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function uninitvar_return() in line 1784
      110 lines of code
      0 parameters
      1 conditional paths
      uses function checkUninitVar(const char,const char,bool) defined in TestUninitVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function uninitvar_strncpy() in line 1896
      61 lines of code
      0 parameters
      1 conditional paths
      uses function checkUninitVar(const char,const char,bool) defined in TestUninitVar
      uses macro definition TODO_ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function uninitvar_switch() in line 1154
      74 lines of code
      0 parameters
      1 conditional paths
      uses function checkUninitVar(const char,const char,bool) defined in TestUninitVar
      uses macro definition TODO_ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function uninitvar_ternaryexpression() in line 3695
      13 lines of code
      0 parameters
      1 conditional paths
      uses function checkUninitVar(const char,const char,bool) defined in TestUninitVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function uninitvar_typeof() in line 1999
      24 lines of code
      0 parameters
      1 conditional paths
      uses function checkUninitVar(const char,const char,bool) defined in TestUninitVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
      uses macro definition TODO_ASSERT_EQUALS defined in testsuite.h
   function uninitvar_unconditionalTry() in line 2592
      18 lines of code
      0 parameters
      1 conditional paths
      uses function checkUninitVar(const char,const char,bool) defined in TestUninitVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function TestUninitVar() in line 27
      protection public
      2 lines of code
      0 parameters
      1 conditional paths
   variable settings in line 31
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/test/testunusedfunctions.cpp
module TestUnusedFunctions
   inherits from TestFixture
   function attribute() in line 257
      48 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,Settings::PlatformType) defined in TestUnusedFunctions
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function boost() in line 330
      6 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,Settings::PlatformType) defined in TestUnusedFunctions
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function callback1() in line 105
      7 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,Settings::PlatformType) defined in TestUnusedFunctions
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function check(const char,Settings::PlatformType) in line 63
      16 lines of code
      2 parameters
      1 conditional paths
      uses variable errout defined in redirect.h
      uses variable settings defined in TestUnusedFunctions
      uses function platform(PlatformType) defined in Settings
      uses variable code defined in extracttests.py
      uses function tokenize(std::istream &,const char,const std::string &,bool) defined in Tokenizer
      uses function parseTokens(const Tokenizer &,const char,const Settings *) defined in CheckUnusedFunctions
      uses function check(ErrorLogger *const,const Settings &) defined in CheckUnusedFunctions
   function else1() in line 113
      8 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,Settings::PlatformType) defined in TestUnusedFunctions
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function functionpointer() in line 122
      51 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,Settings::PlatformType) defined in TestUnusedFunctions
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function ignore_declaration() in line 374
      9 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,Settings::PlatformType) defined in TestUnusedFunctions
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
      uses macro definition REGISTER_TEST defined in testsuite.h
   function incondition() in line 80
      8 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,Settings::PlatformType) defined in TestUnusedFunctions
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function initializationIsNotAFunction() in line 240
      6 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,Settings::PlatformType) defined in TestUnusedFunctions
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function initializer_list() in line 306
      9 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,Settings::PlatformType) defined in TestUnusedFunctions
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function lineNumber() in line 366
      7 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,Settings::PlatformType) defined in TestUnusedFunctions
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function member_function_ternary() in line 316
      13 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,Settings::PlatformType) defined in TestUnusedFunctions
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function multipleFiles() in line 337
      28 lines of code
      0 parameters
      2 conditional paths
      uses variable settings defined in TestUnusedFunctions
      uses variable errout defined in redirect.h
      uses variable code defined in extracttests.py
      uses function tokenize(std::istream &,const char,const std::string &,bool) defined in Tokenizer
      uses function parseTokens(const Tokenizer &,const char,const Settings *) defined in CheckUnusedFunctions
      uses function check(ErrorLogger *const,const Settings &) defined in CheckUnusedFunctions
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function operator1() in line 247
      4 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,Settings::PlatformType) defined in TestUnusedFunctions
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function return1() in line 89
      7 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,Settings::PlatformType) defined in TestUnusedFunctions
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function return2() in line 97
      7 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,Settings::PlatformType) defined in TestUnusedFunctions
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function returnRef() in line 252
      4 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,Settings::PlatformType) defined in TestUnusedFunctions
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function run() in line 33
      29 lines of code
      0 parameters
      1 conditional paths
      uses variable settings defined in TestUnusedFunctions
      uses function addEnabled(const std::string &) defined in Settings
      uses macro definition TEST_CASE defined in testsuite.h
      uses function incondition() defined in TestUnusedFunctions
      uses function return1() defined in TestUnusedFunctions
      uses function return2() defined in TestUnusedFunctions
      uses function callback1() defined in TestUnusedFunctions
      uses function else1() defined in TestUnusedFunctions
      uses function functionpointer() defined in TestUnusedFunctions
      uses function template1() defined in TestUnusedFunctions
      uses function template2() defined in TestUnusedFunctions
      uses function template3() defined in TestUnusedFunctions
      uses function throwIsNotAFunction() defined in TestUnusedFunctions
      uses function unusedError() defined in TestUnusedFunctions
      uses function unusedMain() defined in TestUnusedFunctions
      uses function initializationIsNotAFunction() defined in TestUnusedFunctions
      uses function operator1() defined in TestUnusedFunctions
      uses function returnRef() defined in TestUnusedFunctions
      uses function attribute() defined in TestUnusedFunctions
      uses function initializer_list() defined in TestUnusedFunctions
      uses function member_function_ternary() defined in TestUnusedFunctions
      uses function boost() defined in TestUnusedFunctions
      uses function multipleFiles() defined in TestUnusedFunctions
      uses function lineNumber() defined in TestUnusedFunctions
      uses function ignore_declaration() defined in TestUnusedFunctions
   function template1() in line 174
      10 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,Settings::PlatformType) defined in TestUnusedFunctions
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function template2() in line 185
      9 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,Settings::PlatformType) defined in TestUnusedFunctions
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function template3() in line 195
      10 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,Settings::PlatformType) defined in TestUnusedFunctions
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function throwIsNotAFunction() in line 206
      4 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,Settings::PlatformType) defined in TestUnusedFunctions
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function unusedError() in line 211
      17 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,Settings::PlatformType) defined in TestUnusedFunctions
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function unusedMain() in line 229
      10 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,Settings::PlatformType) defined in TestUnusedFunctions
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
      uses enumvalue Win32A defined in Settings
   function TestUnusedFunctions() in line 27
      protection public
      2 lines of code
      0 parameters
      1 conditional paths
   variable settings in line 31
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/test/testunusedprivfunc.cpp
module TestUnusedPrivateFunction
   inherits from TestFixture
   function borland1() in line 513
      13 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,Settings::PlatformType) defined in TestUnusedPrivateFunction
      uses enumvalue Win32A defined in Settings
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function borland2() in line 527
      12 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,Settings::PlatformType) defined in TestUnusedPrivateFunction
      uses enumvalue Win32A defined in Settings
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function check(const char,Settings::PlatformType) in line 82
      16 lines of code
      2 parameters
      1 conditional paths
      uses variable errout defined in redirect.h
      uses variable settings defined in TestUnusedPrivateFunction
      uses function platform(PlatformType) defined in Settings
      uses variable code defined in extracttests.py
      uses function tokenize(std::istream &,const char,const std::string &,bool) defined in Tokenizer
      uses function simplifyTokenList2() defined in Tokenizer
      uses function privateFunctions() defined in CheckClass
   function classInClass() in line 362
      34 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,Settings::PlatformType) defined in TestUnusedPrivateFunction
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function ctor() in line 334
      14 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,Settings::PlatformType) defined in TestUnusedPrivateFunction
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function ctor2() in line 349
      11 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,Settings::PlatformType) defined in TestUnusedPrivateFunction
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function derivedClass() in line 432
      42 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,Settings::PlatformType) defined in TestUnusedPrivateFunction
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function fp_operator() in line 558
      40 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,Settings::PlatformType) defined in TestUnusedPrivateFunction
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
      uses macro definition TODO_ASSERT_EQUALS defined in testsuite.h
   function friendClass() in line 475
      37 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,Settings::PlatformType) defined in TestUnusedPrivateFunction
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function func_pointer1() in line 238
      23 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,Settings::PlatformType) defined in TestUnusedPrivateFunction
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function func_pointer2() in line 264
      15 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,Settings::PlatformType) defined in TestUnusedPrivateFunction
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function func_pointer3() in line 281
      12 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,Settings::PlatformType) defined in TestUnusedPrivateFunction
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function func_pointer4() in line 295
      12 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,Settings::PlatformType) defined in TestUnusedPrivateFunction
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function func_pointer5() in line 309
      10 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,Settings::PlatformType) defined in TestUnusedPrivateFunction
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function func_pointer6() in line 321
      11 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,Settings::PlatformType) defined in TestUnusedPrivateFunction
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function hierarchie_loop() in line 711
      18 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,Settings::PlatformType) defined in TestUnusedPrivateFunction
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function incompleteImplementation() in line 414
      17 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,Settings::PlatformType) defined in TestUnusedPrivateFunction
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function multiFile() in line 680
      18 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,Settings::PlatformType) defined in TestUnusedPrivateFunction
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function run() in line 33
      47 lines of code
      0 parameters
      1 conditional paths
      uses variable settings defined in TestUnusedPrivateFunction
      uses function addEnabled(const std::string &) defined in Settings
      uses macro definition TEST_CASE defined in testsuite.h
      uses function test1() defined in TestUnusedPrivateFunction
      uses function test2() defined in TestUnusedPrivateFunction
      uses function test3() defined in TestUnusedPrivateFunction
      uses function test4() defined in TestUnusedPrivateFunction
      uses function test5() defined in TestUnusedPrivateFunction
      uses function test6() defined in TestUnusedPrivateFunction
      uses function func_pointer1() defined in TestUnusedPrivateFunction
      uses function func_pointer2() defined in TestUnusedPrivateFunction
      uses function func_pointer3() defined in TestUnusedPrivateFunction
      uses function func_pointer4() defined in TestUnusedPrivateFunction
      uses function func_pointer5() defined in TestUnusedPrivateFunction
      uses function func_pointer6() defined in TestUnusedPrivateFunction
      uses function ctor() defined in TestUnusedPrivateFunction
      uses function ctor2() defined in TestUnusedPrivateFunction
      uses function classInClass() defined in TestUnusedPrivateFunction
      uses function sameFunctionNames() defined in TestUnusedPrivateFunction
      uses function incompleteImplementation() defined in TestUnusedPrivateFunction
      uses function derivedClass() defined in TestUnusedPrivateFunction
      uses function friendClass() defined in TestUnusedPrivateFunction
      uses function borland1() defined in TestUnusedPrivateFunction
      uses function borland2() defined in TestUnusedPrivateFunction
      uses function template1() defined in TestUnusedPrivateFunction
      uses function fp_operator() defined in TestUnusedPrivateFunction
      uses function testDoesNotIdentifyMethodAsFirstFunctionArgument() defined in TestUnusedPrivateFunction
      uses function testDoesNotIdentifyMethodAsMiddleFunctionArgument() defined in TestUnusedPrivateFunction
      uses function testDoesNotIdentifyMethodAsLastFunctionArgument() defined in TestUnusedPrivateFunction
      uses function multiFile() defined in TestUnusedPrivateFunction
      uses function unknownBaseTemplate() defined in TestUnusedPrivateFunction
      uses function hierarchie_loop() defined in TestUnusedPrivateFunction
      uses function staticVariable() defined in TestUnusedPrivateFunction
   function sameFunctionNames() in line 398
      15 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,Settings::PlatformType) defined in TestUnusedPrivateFunction
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function staticVariable() in line 730
      24 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,Settings::PlatformType) defined in TestUnusedPrivateFunction
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
      uses macro definition REGISTER_TEST defined in testsuite.h
   function template1() in line 540
      17 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,Settings::PlatformType) defined in TestUnusedPrivateFunction
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function test1() in line 101
      66 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,Settings::PlatformType) defined in TestUnusedPrivateFunction
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function test2() in line 169
      16 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,Settings::PlatformType) defined in TestUnusedPrivateFunction
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function test3() in line 187
      13 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,Settings::PlatformType) defined in TestUnusedPrivateFunction
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function test4() in line 202
      13 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,Settings::PlatformType) defined in TestUnusedPrivateFunction
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function test5() in line 217
      9 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,Settings::PlatformType) defined in TestUnusedPrivateFunction
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function test6() in line 227
      6 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,Settings::PlatformType) defined in TestUnusedPrivateFunction
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function testDoesNotIdentifyMethodAsFirstFunctionArgument() in line 599
      26 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,Settings::PlatformType) defined in TestUnusedPrivateFunction
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function testDoesNotIdentifyMethodAsLastFunctionArgument() in line 653
      26 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,Settings::PlatformType) defined in TestUnusedPrivateFunction
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function testDoesNotIdentifyMethodAsMiddleFunctionArgument() in line 626
      26 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,Settings::PlatformType) defined in TestUnusedPrivateFunction
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function unknownBaseTemplate() in line 699
      11 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char,Settings::PlatformType) defined in TestUnusedPrivateFunction
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function TestUnusedPrivateFunction() in line 27
      protection public
      2 lines of code
      0 parameters
      1 conditional paths
   variable settings in line 31
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/test/testunusedvar.cpp
module TestUnusedVar
   inherits from TestFixture
   function chainedAssignment() in line 3878
      9 lines of code
      0 parameters
      1 conditional paths
      uses function functionVariableUsage(const char,const char) defined in TestUnusedVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function checkStructMemberUsage(const char) in line 170
      13 lines of code
      1 parameters
      1 conditional paths
      uses variable errout defined in redirect.h
      uses variable settings defined in TestUnusedVar
      uses variable code defined in extracttests.py
      uses function tokenize(std::istream &,const char,const std::string &,bool) defined in Tokenizer
      uses function checkStructMemberUsage() defined in CheckUnusedVar
   function crash1() in line 3888
      6 lines of code
      0 parameters
      1 conditional paths
      uses function functionVariableUsage(const char,const char) defined in TestUnusedVar
   function crash2() in line 3895
      9 lines of code
      0 parameters
      1 conditional paths
      uses function functionVariableUsage(const char,const char) defined in TestUnusedVar
   function emptyclass() in line 185
      11 lines of code
      0 parameters
      1 conditional paths
      uses function functionVariableUsage(const char,const char) defined in TestUnusedVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function emptystruct() in line 198
      9 lines of code
      0 parameters
      1 conditional paths
      uses function functionVariableUsage(const char,const char) defined in TestUnusedVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function functionVariableUsage(const char,const char) in line 458
      14 lines of code
      2 parameters
      2 conditional paths
      uses variable errout defined in redirect.h
      uses variable settings defined in TestUnusedVar
      uses variable code defined in extracttests.py
      uses function tokenize(std::istream &,const char,const std::string &,bool) defined in Tokenizer
      uses variable filename defined in extracttests.py
      uses function checkFunctionVariableUsage() defined in CheckUnusedVar
   function localvar1() in line 473
      429 lines of code
      0 parameters
      1 conditional paths
      uses function functionVariableUsage(const char,const char) defined in TestUnusedVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
      uses macro definition TODO_ASSERT_EQUALS defined in testsuite.h
   function localvar10() in line 1323
      53 lines of code
      0 parameters
      1 conditional paths
      uses function functionVariableUsage(const char,const char) defined in TestUnusedVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function localvar11() in line 1377
      28 lines of code
      0 parameters
      1 conditional paths
      uses function functionVariableUsage(const char,const char) defined in TestUnusedVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function localvar12() in line 1406
      33 lines of code
      0 parameters
      1 conditional paths
      uses function functionVariableUsage(const char,const char) defined in TestUnusedVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
      uses macro definition TODO_ASSERT_EQUALS defined in testsuite.h
   function localvar13() in line 1440
      8 lines of code
      0 parameters
      1 conditional paths
      uses function functionVariableUsage(const char,const char) defined in TestUnusedVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function localvar14() in line 1449
      8 lines of code
      0 parameters
      1 conditional paths
      uses function functionVariableUsage(const char,const char) defined in TestUnusedVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function localvar15() in line 1458
      46 lines of code
      0 parameters
      1 conditional paths
      uses function functionVariableUsage(const char,const char) defined in TestUnusedVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function localvar16() in line 1505
      36 lines of code
      0 parameters
      1 conditional paths
      uses function functionVariableUsage(const char,const char) defined in TestUnusedVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function localvar17() in line 1542
      15 lines of code
      0 parameters
      1 conditional paths
      uses function functionVariableUsage(const char,const char) defined in TestUnusedVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function localvar18() in line 1558
      7 lines of code
      0 parameters
      1 conditional paths
      uses function functionVariableUsage(const char,const char) defined in TestUnusedVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function localvar19() in line 1566
      9 lines of code
      0 parameters
      1 conditional paths
      uses function functionVariableUsage(const char,const char) defined in TestUnusedVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function localvar2() in line 903
      127 lines of code
      0 parameters
      1 conditional paths
      uses function functionVariableUsage(const char,const char) defined in TestUnusedVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
      uses macro definition TODO_ASSERT_EQUALS defined in testsuite.h
   function localvar20() in line 1576
      9 lines of code
      0 parameters
      1 conditional paths
      uses function functionVariableUsage(const char,const char) defined in TestUnusedVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function localvar21() in line 1586
      8 lines of code
      0 parameters
      1 conditional paths
      uses function functionVariableUsage(const char,const char) defined in TestUnusedVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function localvar22() in line 1595
      10 lines of code
      0 parameters
      1 conditional paths
      uses function functionVariableUsage(const char,const char) defined in TestUnusedVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function localvar23() in line 1606
      10 lines of code
      0 parameters
      1 conditional paths
      uses function functionVariableUsage(const char,const char) defined in TestUnusedVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function localvar24() in line 1617
      10 lines of code
      0 parameters
      1 conditional paths
      uses function functionVariableUsage(const char,const char) defined in TestUnusedVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function localvar25() in line 1628
      10 lines of code
      0 parameters
      1 conditional paths
      uses function functionVariableUsage(const char,const char) defined in TestUnusedVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function localvar26() in line 1639
      8 lines of code
      0 parameters
      1 conditional paths
      uses function functionVariableUsage(const char,const char) defined in TestUnusedVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function localvar27() in line 1648
      7 lines of code
      0 parameters
      1 conditional paths
      uses function functionVariableUsage(const char,const char) defined in TestUnusedVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function localvar28() in line 1656
      8 lines of code
      0 parameters
      1 conditional paths
      uses function functionVariableUsage(const char,const char) defined in TestUnusedVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function localvar29() in line 1665
      8 lines of code
      0 parameters
      1 conditional paths
      uses function functionVariableUsage(const char,const char) defined in TestUnusedVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function localvar3() in line 1031
      10 lines of code
      0 parameters
      1 conditional paths
      uses function functionVariableUsage(const char,const char) defined in TestUnusedVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function localvar30() in line 1674
      7 lines of code
      0 parameters
      1 conditional paths
      uses function functionVariableUsage(const char,const char) defined in TestUnusedVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function localvar31() in line 1682
      7 lines of code
      0 parameters
      1 conditional paths
      uses function functionVariableUsage(const char,const char) defined in TestUnusedVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function localvar32() in line 1690
      43 lines of code
      0 parameters
      1 conditional paths
      uses function functionVariableUsage(const char,const char) defined in TestUnusedVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function localvar33() in line 1734
      9 lines of code
      0 parameters
      1 conditional paths
      uses function functionVariableUsage(const char,const char) defined in TestUnusedVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function localvar34() in line 1744
      10 lines of code
      0 parameters
      1 conditional paths
      uses function functionVariableUsage(const char,const char) defined in TestUnusedVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function localvar35() in line 1755
      7 lines of code
      0 parameters
      1 conditional paths
      uses function functionVariableUsage(const char,const char) defined in TestUnusedVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function localvar36() in line 1763
      14 lines of code
      0 parameters
      1 conditional paths
      uses function functionVariableUsage(const char,const char) defined in TestUnusedVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function localvar37() in line 1778
      7 lines of code
      0 parameters
      1 conditional paths
      uses function functionVariableUsage(const char,const char) defined in TestUnusedVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function localvar38() in line 1786
      9 lines of code
      0 parameters
      1 conditional paths
      uses function functionVariableUsage(const char,const char) defined in TestUnusedVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function localvar39() in line 1796
      7 lines of code
      0 parameters
      1 conditional paths
      uses function functionVariableUsage(const char,const char) defined in TestUnusedVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function localvar4() in line 1042
      15 lines of code
      0 parameters
      1 conditional paths
      uses function functionVariableUsage(const char,const char) defined in TestUnusedVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function localvar40() in line 1804
      7 lines of code
      0 parameters
      1 conditional paths
      uses function functionVariableUsage(const char,const char) defined in TestUnusedVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function localvar41() in line 1812
      9 lines of code
      0 parameters
      1 conditional paths
      uses function functionVariableUsage(const char,const char) defined in TestUnusedVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function localvar42() in line 1822
      31 lines of code
      0 parameters
      1 conditional paths
      uses function functionVariableUsage(const char,const char) defined in TestUnusedVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function localvar43() in line 1854
      25 lines of code
      0 parameters
      1 conditional paths
      uses function functionVariableUsage(const char,const char) defined in TestUnusedVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function localvar44() in line 1880
      8 lines of code
      0 parameters
      1 conditional paths
      uses function functionVariableUsage(const char,const char) defined in TestUnusedVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function localvar45() in line 1889
      8 lines of code
      0 parameters
      1 conditional paths
      uses function functionVariableUsage(const char,const char) defined in TestUnusedVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function localvar46() in line 1898
      20 lines of code
      0 parameters
      1 conditional paths
      uses function functionVariableUsage(const char,const char) defined in TestUnusedVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function localvar47() in line 1919
      7 lines of code
      0 parameters
      1 conditional paths
      uses function functionVariableUsage(const char,const char) defined in TestUnusedVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function localvar48() in line 1927
      6 lines of code
      0 parameters
      1 conditional paths
      uses function functionVariableUsage(const char,const char) defined in TestUnusedVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function localvar5() in line 1058
      8 lines of code
      0 parameters
      1 conditional paths
      uses function functionVariableUsage(const char,const char) defined in TestUnusedVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function localvar6() in line 1067
      18 lines of code
      0 parameters
      1 conditional paths
      uses function functionVariableUsage(const char,const char) defined in TestUnusedVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function localvar7() in line 1086
      24 lines of code
      0 parameters
      1 conditional paths
      uses function functionVariableUsage(const char,const char) defined in TestUnusedVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function localvar8() in line 1111
      200 lines of code
      0 parameters
      1 conditional paths
      uses function functionVariableUsage(const char,const char) defined in TestUnusedVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
      uses macro definition TODO_ASSERT_EQUALS defined in testsuite.h
   function localvar9() in line 1312
      10 lines of code
      0 parameters
      1 conditional paths
      uses function functionVariableUsage(const char,const char) defined in TestUnusedVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function localvaralias1() in line 1934
      463 lines of code
      0 parameters
      1 conditional paths
      uses function functionVariableUsage(const char,const char) defined in TestUnusedVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function localvaralias10() in line 2841
      18 lines of code
      0 parameters
      1 conditional paths
      uses function functionVariableUsage(const char,const char) defined in TestUnusedVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function localvaralias11() in line 2860
      7 lines of code
      0 parameters
      1 conditional paths
      uses function functionVariableUsage(const char,const char) defined in TestUnusedVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function localvaralias12() in line 2868
      15 lines of code
      0 parameters
      1 conditional paths
      uses function functionVariableUsage(const char,const char) defined in TestUnusedVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function localvaralias13() in line 2884
      15 lines of code
      0 parameters
      1 conditional paths
      uses function functionVariableUsage(const char,const char) defined in TestUnusedVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
      uses macro definition TODO_ASSERT_EQUALS defined in testsuite.h
   function localvaralias2() in line 2398
      8 lines of code
      0 parameters
      1 conditional paths
      uses function functionVariableUsage(const char,const char) defined in TestUnusedVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function localvaralias3() in line 2407
      10 lines of code
      0 parameters
      1 conditional paths
      uses function functionVariableUsage(const char,const char) defined in TestUnusedVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function localvaralias4() in line 2418
      34 lines of code
      0 parameters
      1 conditional paths
      uses function functionVariableUsage(const char,const char) defined in TestUnusedVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function localvaralias5() in line 2453
      37 lines of code
      0 parameters
      1 conditional paths
      uses function functionVariableUsage(const char,const char) defined in TestUnusedVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function localvaralias6() in line 2491
      134 lines of code
      0 parameters
      1 conditional paths
      uses function functionVariableUsage(const char,const char) defined in TestUnusedVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function localvaralias7() in line 2626
      10 lines of code
      0 parameters
      1 conditional paths
      uses function functionVariableUsage(const char,const char) defined in TestUnusedVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function localvaralias8() in line 2637
      184 lines of code
      0 parameters
      1 conditional paths
      uses function functionVariableUsage(const char,const char) defined in TestUnusedVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function localvaralias9() in line 2822
      18 lines of code
      0 parameters
      1 conditional paths
      uses function functionVariableUsage(const char,const char) defined in TestUnusedVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function localvarAnd() in line 3769
      9 lines of code
      0 parameters
      1 conditional paths
      uses function functionVariableUsage(const char,const char) defined in TestUnusedVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function localvararray1() in line 3629
      7 lines of code
      0 parameters
      1 conditional paths
      uses function functionVariableUsage(const char,const char) defined in TestUnusedVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function localvararray2() in line 3637
      8 lines of code
      0 parameters
      1 conditional paths
      uses function functionVariableUsage(const char,const char) defined in TestUnusedVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function localvararray3() in line 3646
      8 lines of code
      0 parameters
      1 conditional paths
      uses function functionVariableUsage(const char,const char) defined in TestUnusedVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function localvarasm() in line 2900
      9 lines of code
      0 parameters
      1 conditional paths
      uses function functionVariableUsage(const char,const char) defined in TestUnusedVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function localvarAssignInWhile() in line 3862
      15 lines of code
      0 parameters
      1 conditional paths
      uses function functionVariableUsage(const char,const char) defined in TestUnusedVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function localvarCast() in line 3258
      9 lines of code
      0 parameters
      1 conditional paths
      uses function functionVariableUsage(const char,const char) defined in TestUnusedVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function localvarClass() in line 3268
      10 lines of code
      0 parameters
      1 conditional paths
      uses function functionVariableUsage(const char,const char) defined in TestUnusedVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function localvarconst1() in line 3694
      6 lines of code
      0 parameters
      1 conditional paths
      uses function functionVariableUsage(const char,const char) defined in TestUnusedVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function localvarconst2() in line 3701
      7 lines of code
      0 parameters
      1 conditional paths
      uses function functionVariableUsage(const char,const char) defined in TestUnusedVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function localvarCpp11Initialization() in line 3844
      8 lines of code
      0 parameters
      1 conditional paths
      uses function functionVariableUsage(const char,const char) defined in TestUnusedVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function localvarCppInitialization() in line 3836
      7 lines of code
      0 parameters
      1 conditional paths
      uses function functionVariableUsage(const char,const char) defined in TestUnusedVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function localvardynamic1() in line 3381
      116 lines of code
      0 parameters
      1 conditional paths
      uses function functionVariableUsage(const char,const char) defined in TestUnusedVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function localvardynamic2() in line 3498
      119 lines of code
      0 parameters
      1 conditional paths
      uses function functionVariableUsage(const char,const char) defined in TestUnusedVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function localvardynamic3() in line 3618
      10 lines of code
      0 parameters
      1 conditional paths
      uses function functionVariableUsage(const char,const char) defined in TestUnusedVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function localvarextern() in line 3373
      7 lines of code
      0 parameters
      1 conditional paths
      uses function functionVariableUsage(const char,const char) defined in TestUnusedVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function localvarFor() in line 3166
      14 lines of code
      0 parameters
      1 conditional paths
      uses function functionVariableUsage(const char,const char) defined in TestUnusedVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function localvarForEach() in line 3181
      51 lines of code
      0 parameters
      1 conditional paths
      uses function functionVariableUsage(const char,const char) defined in TestUnusedVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function localvarFunction() in line 3317
      10 lines of code
      0 parameters
      1 conditional paths
      uses function functionVariableUsage(const char,const char) defined in TestUnusedVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function localvarIf() in line 3098
      10 lines of code
      0 parameters
      1 conditional paths
      uses function functionVariableUsage(const char,const char) defined in TestUnusedVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function localvarIfElse() in line 3109
      10 lines of code
      0 parameters
      1 conditional paths
      uses function functionVariableUsage(const char,const char) defined in TestUnusedVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function localvarIfNOT() in line 3761
      7 lines of code
      0 parameters
      1 conditional paths
      uses function functionVariableUsage(const char,const char) defined in TestUnusedVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function localvarInvert() in line 3089
      8 lines of code
      0 parameters
      1 conditional paths
      uses function functionVariableUsage(const char,const char) defined in TestUnusedVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function localvarNULL() in line 3795
      9 lines of code
      0 parameters
      1 conditional paths
      uses function functionVariableUsage(const char,const char) defined in TestUnusedVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function localvarOp() in line 3076
      12 lines of code
      0 parameters
      2 conditional paths
      uses variable code defined in extracttests.py
      uses function functionVariableUsage(const char,const char) defined in TestUnusedVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function localvarOpAssign() in line 3120
      45 lines of code
      0 parameters
      1 conditional paths
      uses function functionVariableUsage(const char,const char) defined in TestUnusedVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function localvarRangeBasedFor() in line 3853
      8 lines of code
      0 parameters
      1 conditional paths
      uses function functionVariableUsage(const char,const char) defined in TestUnusedVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function localvarShift1() in line 3233
      8 lines of code
      0 parameters
      1 conditional paths
      uses function functionVariableUsage(const char,const char) defined in TestUnusedVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function localvarShift3() in line 3242
      15 lines of code
      0 parameters
      1 conditional paths
      uses function functionVariableUsage(const char,const char) defined in TestUnusedVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function localvarstatic() in line 3328
      44 lines of code
      0 parameters
      1 conditional paths
      uses function functionVariableUsage(const char,const char) defined in TestUnusedVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function localVarStd() in line 3717
      42 lines of code
      0 parameters
      1 conditional paths
      uses function functionVariableUsage(const char,const char) defined in TestUnusedVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
      uses macro definition TODO_ASSERT_EQUALS defined in testsuite.h
   function localvarstring1() in line 3655
      29 lines of code
      0 parameters
      1 conditional paths
      uses function functionVariableUsage(const char,const char) defined in TestUnusedVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function localvarstring2() in line 3685
      8 lines of code
      0 parameters
      1 conditional paths
      uses function functionVariableUsage(const char,const char) defined in TestUnusedVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function localvarStruct1() in line 2910
      8 lines of code
      0 parameters
      1 conditional paths
      uses function functionVariableUsage(const char,const char) defined in TestUnusedVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function localvarStruct2() in line 2919
      8 lines of code
      0 parameters
      1 conditional paths
      uses function functionVariableUsage(const char,const char) defined in TestUnusedVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function localvarStruct3() in line 2928
      12 lines of code
      0 parameters
      1 conditional paths
      uses function functionVariableUsage(const char,const char) defined in TestUnusedVar
      uses macro definition TODO_ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function localvarStruct5() in line 2941
      114 lines of code
      0 parameters
      1 conditional paths
      uses function functionVariableUsage(const char,const char) defined in TestUnusedVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function localvarStruct6() in line 3056
      10 lines of code
      0 parameters
      1 conditional paths
      uses function functionVariableUsage(const char,const char) defined in TestUnusedVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function localvarStructArray() in line 3067
      8 lines of code
      0 parameters
      1 conditional paths
      uses function functionVariableUsage(const char,const char) defined in TestUnusedVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function localvarSwitch() in line 3779
      15 lines of code
      0 parameters
      1 conditional paths
      uses function functionVariableUsage(const char,const char) defined in TestUnusedVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function localvarthrow() in line 3709
      7 lines of code
      0 parameters
      1 conditional paths
      uses function functionVariableUsage(const char,const char) defined in TestUnusedVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function localvarUnused() in line 3279
      37 lines of code
      0 parameters
      1 conditional paths
      uses function functionVariableUsage(const char,const char) defined in TestUnusedVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function localvarUnusedGoto() in line 3805
      30 lines of code
      0 parameters
      1 conditional paths
      uses function functionVariableUsage(const char,const char) defined in TestUnusedVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function run() in line 32
      137 lines of code
      0 parameters
      1 conditional paths
      uses variable settings defined in TestUnusedVar
      uses function addEnabled(const std::string &) defined in Settings
      uses macro definition TEST_CASE defined in testsuite.h
      uses function emptyclass() defined in TestUnusedVar
      uses function emptystruct() defined in TestUnusedVar
      uses function structmember1() defined in TestUnusedVar
      uses function structmember2() defined in TestUnusedVar
      uses function structmember3() defined in TestUnusedVar
      uses function structmember4() defined in TestUnusedVar
      uses function structmember5() defined in TestUnusedVar
      uses function structmember6() defined in TestUnusedVar
      uses function structmember7() defined in TestUnusedVar
      uses function structmember8() defined in TestUnusedVar
      uses function structmember9() defined in TestUnusedVar
      uses function structmember_extern() defined in TestUnusedVar
      uses function structmember10() defined in TestUnusedVar
      uses function structmember11() defined in TestUnusedVar
      uses function structmember12() defined in TestUnusedVar
      uses function localvar1() defined in TestUnusedVar
      uses function localvar2() defined in TestUnusedVar
      uses function localvar3() defined in TestUnusedVar
      uses function localvar4() defined in TestUnusedVar
      uses function localvar5() defined in TestUnusedVar
      uses function localvar6() defined in TestUnusedVar
      uses function localvar7() defined in TestUnusedVar
      uses function localvar8() defined in TestUnusedVar
      uses function localvar9() defined in TestUnusedVar
      uses function localvar10() defined in TestUnusedVar
      uses function localvar11() defined in TestUnusedVar
      uses function localvar12() defined in TestUnusedVar
      uses function localvar13() defined in TestUnusedVar
      uses function localvar14() defined in TestUnusedVar
      uses function localvar15() defined in TestUnusedVar
      uses function localvar16() defined in TestUnusedVar
      uses function localvar17() defined in TestUnusedVar
      uses function localvar18() defined in TestUnusedVar
      uses function localvar19() defined in TestUnusedVar
      uses function localvar20() defined in TestUnusedVar
      uses function localvar21() defined in TestUnusedVar
      uses function localvar22() defined in TestUnusedVar
      uses function localvar23() defined in TestUnusedVar
      uses function localvar24() defined in TestUnusedVar
      uses function localvar25() defined in TestUnusedVar
      uses function localvar26() defined in TestUnusedVar
      uses function localvar27() defined in TestUnusedVar
      uses function localvar28() defined in TestUnusedVar
      uses function localvar29() defined in TestUnusedVar
      uses function localvar30() defined in TestUnusedVar
      uses function localvar31() defined in TestUnusedVar
      uses function localvar32() defined in TestUnusedVar
      uses function localvar33() defined in TestUnusedVar
      uses function localvar34() defined in TestUnusedVar
      uses function localvar35() defined in TestUnusedVar
      uses function localvar36() defined in TestUnusedVar
      uses function localvar37() defined in TestUnusedVar
      uses function localvar38() defined in TestUnusedVar
      uses function localvar39() defined in TestUnusedVar
      uses function localvar40() defined in TestUnusedVar
      uses function localvar41() defined in TestUnusedVar
      uses function localvar42() defined in TestUnusedVar
      uses function localvar43() defined in TestUnusedVar
      uses function localvar44() defined in TestUnusedVar
      uses function localvar45() defined in TestUnusedVar
      uses function localvar46() defined in TestUnusedVar
      uses function localvar47() defined in TestUnusedVar
      uses function localvar48() defined in TestUnusedVar
      uses function localvaralias1() defined in TestUnusedVar
      uses function localvaralias2() defined in TestUnusedVar
      uses function localvaralias3() defined in TestUnusedVar
      uses function localvaralias4() defined in TestUnusedVar
      uses function localvaralias5() defined in TestUnusedVar
      uses function localvaralias6() defined in TestUnusedVar
      uses function localvaralias7() defined in TestUnusedVar
      uses function localvaralias8() defined in TestUnusedVar
      uses function localvaralias9() defined in TestUnusedVar
      uses function localvaralias10() defined in TestUnusedVar
      uses function localvaralias11() defined in TestUnusedVar
      uses function localvaralias12() defined in TestUnusedVar
      uses function localvaralias13() defined in TestUnusedVar
      uses function localvarasm() defined in TestUnusedVar
      uses function localvarstatic() defined in TestUnusedVar
      uses function localvarextern() defined in TestUnusedVar
      uses function localvardynamic1() defined in TestUnusedVar
      uses function localvardynamic2() defined in TestUnusedVar
      uses function localvardynamic3() defined in TestUnusedVar
      uses function localvararray1() defined in TestUnusedVar
      uses function localvararray2() defined in TestUnusedVar
      uses function localvararray3() defined in TestUnusedVar
      uses function localvarstring1() defined in TestUnusedVar
      uses function localvarstring2() defined in TestUnusedVar
      uses function localvarconst1() defined in TestUnusedVar
      uses function localvarconst2() defined in TestUnusedVar
      uses function localvarthrow() defined in TestUnusedVar
      uses function localVarStd() defined in TestUnusedVar
      uses function localvarStruct1() defined in TestUnusedVar
      uses function localvarStruct2() defined in TestUnusedVar
      uses function localvarStruct3() defined in TestUnusedVar
      uses function localvarStruct5() defined in TestUnusedVar
      uses function localvarStruct6() defined in TestUnusedVar
      uses function localvarStructArray() defined in TestUnusedVar
      uses function localvarOp() defined in TestUnusedVar
      uses function localvarInvert() defined in TestUnusedVar
      uses function localvarIf() defined in TestUnusedVar
      uses function localvarIfElse() defined in TestUnusedVar
      uses function localvarOpAssign() defined in TestUnusedVar
      uses function localvarFor() defined in TestUnusedVar
      uses function localvarForEach() defined in TestUnusedVar
      uses function localvarShift1() defined in TestUnusedVar
      uses function localvarShift3() defined in TestUnusedVar
      uses function localvarCast() defined in TestUnusedVar
      uses function localvarClass() defined in TestUnusedVar
      uses function localvarUnused() defined in TestUnusedVar
      uses function localvarFunction() defined in TestUnusedVar
      uses function localvarIfNOT() defined in TestUnusedVar
      uses function localvarAnd() defined in TestUnusedVar
      uses function localvarSwitch() defined in TestUnusedVar
      uses function localvarNULL() defined in TestUnusedVar
      uses function localvarUnusedGoto() defined in TestUnusedVar
      uses function localvarRangeBasedFor() defined in TestUnusedVar
      uses function localvarAssignInWhile() defined in TestUnusedVar
      uses function localvarCppInitialization() defined in TestUnusedVar
      uses function localvarCpp11Initialization() defined in TestUnusedVar
      uses function chainedAssignment() defined in TestUnusedVar
      uses function crash1() defined in TestUnusedVar
      uses function crash2() defined in TestUnusedVar
      uses function usingNamespace() defined in TestUnusedVar
   function structmember1() in line 208
      21 lines of code
      0 parameters
      1 conditional paths
      uses function checkStructMemberUsage(const char) defined in TestUnusedVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function structmember10() in line 377
      7 lines of code
      0 parameters
      1 conditional paths
      uses function checkStructMemberUsage(const char) defined in TestUnusedVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function structmember11() in line 385
      11 lines of code
      0 parameters
      1 conditional paths
      uses function checkStructMemberUsage(const char) defined in TestUnusedVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
      uses macro definition TODO_ASSERT_EQUALS defined in testsuite.h
   function structmember12() in line 397
      19 lines of code
      0 parameters
      1 conditional paths
      uses function checkStructMemberUsage(const char) defined in TestUnusedVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function structmember2() in line 230
      17 lines of code
      0 parameters
      1 conditional paths
      uses function checkStructMemberUsage(const char) defined in TestUnusedVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function structmember3() in line 248
      18 lines of code
      0 parameters
      1 conditional paths
      uses function checkStructMemberUsage(const char) defined in TestUnusedVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function structmember4() in line 267
      13 lines of code
      0 parameters
      1 conditional paths
      uses function checkStructMemberUsage(const char) defined in TestUnusedVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function structmember5() in line 281
      19 lines of code
      0 parameters
      1 conditional paths
      uses function checkStructMemberUsage(const char) defined in TestUnusedVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function structmember6() in line 301
      25 lines of code
      0 parameters
      1 conditional paths
      uses function checkStructMemberUsage(const char) defined in TestUnusedVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function structmember7() in line 327
      25 lines of code
      0 parameters
      1 conditional paths
      uses function checkStructMemberUsage(const char) defined in TestUnusedVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function structmember8() in line 353
      13 lines of code
      0 parameters
      1 conditional paths
      uses function checkStructMemberUsage(const char) defined in TestUnusedVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function structmember9() in line 367
      9 lines of code
      0 parameters
      1 conditional paths
      uses function checkStructMemberUsage(const char) defined in TestUnusedVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function structmember_extern() in line 417
      40 lines of code
      0 parameters
      1 conditional paths
      uses function checkStructMemberUsage(const char) defined in TestUnusedVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function usingNamespace() in line 3905
      15 lines of code
      0 parameters
      1 conditional paths
      uses function functionVariableUsage(const char,const char) defined in TestUnusedVar
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
      uses macro definition REGISTER_TEST defined in testsuite.h
   function TestUnusedVar() in line 26
      protection public
      2 lines of code
      0 parameters
      1 conditional paths
   variable settings in line 30
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/test/testutils.h
module givenACodeSampleToTokenize
   function tokens() in line 42
      protection public
      3 lines of code
      0 parameters
      1 conditional paths
      uses variable _tokenizer defined in givenACodeSampleToTokenize
      uses function tokens() defined in Tokenizer
   function givenACodeSampleToTokenize(const char,bool,bool) in line 33
      protection public
      8 lines of code
      3 parameters
      2 conditional paths
      uses variable _tokenizer defined in givenACodeSampleToTokenize
      uses variable list defined in Tokenizer
      uses function createTokens(std::istream &,const std::string &) defined in TokenList
      uses function tokenize(std::istream &,const char,const std::string &,bool) defined in Tokenizer
   variable _settings in line 29
   variable _tokenizer in line 30
module SimpleSuppressor
   inherits from ErrorLogger
   function reportErr(const ErrorLogger::ErrorMessage &) in line 56
      protection public
      4 lines of code
      1 parameters
      2 conditional paths
      uses variable msg defined in findcasts.py
      uses variable _settings defined in givenACodeSampleToTokenize
      uses variable nomsg defined in Settings
      uses function isSuppressed(const std::string &,const std::string &,unsigned int) defined in Suppressions
   function reportOut(const std::string &) in line 53
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function SimpleSuppressor(Settings &,ErrorLogger *) in line 50
      protection public
      3 lines of code
      2 parameters
      1 conditional paths
   variable _next in line 62
   variable _settings in line 61
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/test/testvaarg.cpp
module TestVaarg
   inherits from TestFixture
   function check(const char) in line 31
      13 lines of code
      1 parameters
      1 conditional paths
      uses variable errout defined in redirect.h
      uses variable settings defined in TestVaarg
      uses variable code defined in extracttests.py
      uses function tokenize(std::istream &,const char,const std::string &,bool) defined in Tokenizer
      uses function runSimplifiedChecks(const Tokenizer *,const Settings *,ErrorLogger *) defined in CheckVaarg
   function referenceAs_va_start() in line 107
      15 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char) defined in TestVaarg
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function run() in line 45
      10 lines of code
      0 parameters
      1 conditional paths
      uses variable settings defined in TestVaarg
      uses function addEnabled(const std::string &) defined in Settings
      uses macro definition TEST_CASE defined in testsuite.h
      uses function wrongParameterTo_va_start() defined in TestVaarg
      uses function referenceAs_va_start() defined in TestVaarg
      uses function va_end_missing() defined in TestVaarg
      uses function va_list_usedBeforeStarted() defined in TestVaarg
      uses function va_start_subsequentCalls() defined in TestVaarg
      uses function unknownFunctionScope() defined in TestVaarg
   function unknownFunctionScope() in line 232
      8 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char) defined in TestVaarg
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
      uses macro definition REGISTER_TEST defined in testsuite.h
   function va_end_missing() in line 123
      34 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char) defined in TestVaarg
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function va_list_usedBeforeStarted() in line 158
      46 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char) defined in TestVaarg
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function va_start_subsequentCalls() in line 205
      26 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char) defined in TestVaarg
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function wrongParameterTo_va_start() in line 56
      50 lines of code
      0 parameters
      1 conditional paths
      uses function check(const char) defined in TestVaarg
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function TestVaarg() in line 26
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   variable settings in line 29
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/test/testvalueflow.cpp
module TestValueFlow
   inherits from TestFixture
   function bailout(const char) in line 140
      11 lines of code
      1 parameters
      1 conditional paths
      uses variable settings defined in TestValueFlow
      uses variable debugwarnings defined in Settings
      uses variable code defined in extracttests.py
      uses variable errout defined in redirect.h
      uses function tokenize(std::istream &,const char,const std::string &,bool) defined in Tokenizer
   function isNotKnownValues(const char,const char) in line 1704
      11 lines of code
      2 parameters
      4 conditional paths
      uses function tokenValues(const char,const char) defined in TestValueFlow
      uses variable code defined in extracttests.py
   function knownValue() in line 1716
      156 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT defined in testsuite.h
      uses function valueOfTok(const char,const char) defined in TestValueFlow
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable intvalue defined in ValueFlow::Value
      uses function isKnown() defined in ValueFlow::Value
      uses function isPossible() defined in ValueFlow::Value
      uses function isNotKnownValues(const char,const char) defined in TestValueFlow
      uses function testValueOfX(const char,unsigned int,int) defined in TestValueFlow
      uses macro definition REGISTER_TEST defined in testsuite.h
   function run() in line 37
      44 lines of code
      0 parameters
      1 conditional paths
      uses variable settings defined in TestValueFlow
      uses variable library defined in Settings
      uses function loadxmldata(const char,std::size_t) defined in Library
      uses macro definition TEST_CASE defined in testsuite.h
      uses function valueFlowNumber() defined in TestValueFlow
      uses function valueFlowString() defined in TestValueFlow
      uses function valueFlowPointerAlias() defined in TestValueFlow
      uses function valueFlowArrayElement() defined in TestValueFlow
      uses function valueFlowBitAnd() defined in TestValueFlow
      uses function valueFlowCalculations() defined in TestValueFlow
      uses function valueFlowBeforeCondition() defined in TestValueFlow
      uses function valueFlowBeforeConditionAndAndOrOrGuard() defined in TestValueFlow
      uses function valueFlowBeforeConditionAssignIncDec() defined in TestValueFlow
      uses function valueFlowBeforeConditionFunctionCall() defined in TestValueFlow
      uses function valueFlowBeforeConditionGlobalVariables() defined in TestValueFlow
      uses function valueFlowBeforeConditionGoto() defined in TestValueFlow
      uses function valueFlowBeforeConditionIfElse() defined in TestValueFlow
      uses function valueFlowBeforeConditionLoop() defined in TestValueFlow
      uses function valueFlowBeforeConditionMacro() defined in TestValueFlow
      uses function valueFlowBeforeConditionSizeof() defined in TestValueFlow
      uses function valueFlowBeforeConditionSwitch() defined in TestValueFlow
      uses function valueFlowBeforeConditionTernaryOp() defined in TestValueFlow
      uses function valueFlowAfterAssign() defined in TestValueFlow
      uses function valueFlowAfterCondition() defined in TestValueFlow
      uses function valueFlowSwitchVariable() defined in TestValueFlow
      uses function valueFlowForLoop() defined in TestValueFlow
      uses function valueFlowSubFunction() defined in TestValueFlow
      uses function valueFlowFunctionReturn() defined in TestValueFlow
      uses function valueFlowFunctionDefaultParameter() defined in TestValueFlow
      uses function knownValue() defined in TestValueFlow
   function testConditionalValueOfX(const char,unsigned int,int) in line 121
      18 lines of code
      3 parameters
      5 conditional paths
      uses variable settings defined in TestValueFlow
      uses variable code defined in extracttests.py
      uses function tokenize(std::istream &,const char,const std::string &,bool) defined in Tokenizer
      uses function tokens() defined in Tokenizer
      uses function next() defined in Token
      uses variable linenr defined in triage-report.py
   function testValueOfX(const char,unsigned int,int) in line 82
      18 lines of code
      3 parameters
      5 conditional paths
      uses variable settings defined in TestValueFlow
      uses variable code defined in extracttests.py
      uses function tokenize(std::istream &,const char,const std::string &,bool) defined in Tokenizer
      uses function tokens() defined in Tokenizer
      uses function next() defined in Token
      uses variable linenr defined in triage-report.py
   function testValueOfX(const char,unsigned int,const char) in line 102
      18 lines of code
      3 parameters
      5 conditional paths
      uses variable settings defined in TestValueFlow
      uses variable code defined in extracttests.py
      uses function tokenize(std::istream &,const char,const std::string &,bool) defined in Tokenizer
      uses function tokens() defined in Tokenizer
      uses function next() defined in Token
      uses variable linenr defined in triage-report.py
   function tokenValues(const char,const char) in line 152
      8 lines of code
      2 parameters
      1 conditional paths
      uses variable settings defined in TestValueFlow
      uses variable code defined in extracttests.py
      uses variable errout defined in redirect.h
      uses function tokenize(std::istream &,const char,const std::string &,bool) defined in Tokenizer
      uses function tokens() defined in Tokenizer
      uses variable values defined in Token
   function valueFlowAfterAssign() in line 725
      445 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function testValueOfX(const char,unsigned int,int) defined in TestValueFlow
      uses macro definition TODO_ASSERT_EQUALS defined in testsuite.h
   function valueFlowAfterCondition() in line 1171
      194 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function testValueOfX(const char,unsigned int,int) defined in TestValueFlow
      uses macro definition TODO_ASSERT_EQUALS defined in testsuite.h
   function valueFlowArrayElement() in line 221
      40 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function testValueOfX(const char,unsigned int,int) defined in TestValueFlow
      uses macro definition TODO_ASSERT_EQUALS defined in testsuite.h
      uses function valueOfTok(const char,const char) defined in TestValueFlow
   function valueFlowBeforeCondition() in line 383
      47 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function testValueOfX(const char,unsigned int,int) defined in TestValueFlow
   function valueFlowBeforeConditionAndAndOrOrGuard() in line 467
      25 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function testValueOfX(const char,unsigned int,int) defined in TestValueFlow
   function valueFlowBeforeConditionAssignIncDec() in line 431
      35 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function testValueOfX(const char,unsigned int,int) defined in TestValueFlow
      uses function bailout(const char) defined in TestValueFlow
      uses variable errout defined in redirect.h
   function valueFlowBeforeConditionFunctionCall() in line 493
      26 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function testValueOfX(const char,unsigned int,int) defined in TestValueFlow
   function valueFlowBeforeConditionGlobalVariables() in line 647
      19 lines of code
      0 parameters
      1 conditional paths
      uses function bailout(const char) defined in TestValueFlow
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
      uses variable code defined in extracttests.py
      uses function testValueOfX(const char,unsigned int,int) defined in TestValueFlow
   function valueFlowBeforeConditionGoto() in line 696
      28 lines of code
      0 parameters
      1 conditional paths
      uses function bailout(const char) defined in TestValueFlow
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function valueFlowBeforeConditionIfElse() in line 618
      28 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function testValueOfX(const char,unsigned int,int) defined in TestValueFlow
      uses function bailout(const char) defined in TestValueFlow
      uses variable errout defined in redirect.h
   function valueFlowBeforeConditionLoop() in line 520
      52 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function testValueOfX(const char,unsigned int,int) defined in TestValueFlow
   function valueFlowBeforeConditionMacro() in line 687
      8 lines of code
      0 parameters
      1 conditional paths
      uses function bailout(const char) defined in TestValueFlow
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function valueFlowBeforeConditionSizeof() in line 602
      15 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function testValueOfX(const char,unsigned int,int) defined in TestValueFlow
   function valueFlowBeforeConditionSwitch() in line 667
      19 lines of code
      0 parameters
      1 conditional paths
      uses function bailout(const char) defined in TestValueFlow
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function valueFlowBeforeConditionTernaryOp() in line 573
      28 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses function bailout(const char) defined in TestValueFlow
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
      uses function testValueOfX(const char,unsigned int,int) defined in TestValueFlow
   function valueFlowBitAnd() in line 1366
      24 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function testValueOfX(const char,unsigned int,int) defined in TestValueFlow
   function valueFlowCalculations() in line 262
      120 lines of code
      0 parameters
      2 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function valueOfTok(const char,const char) defined in TestValueFlow
      uses function tokenValues(const char,const char) defined in TestValueFlow
   function valueFlowForLoop() in line 1405
      184 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function testValueOfX(const char,unsigned int,int) defined in TestValueFlow
   function valueFlowFunctionDefaultParameter() in line 1695
      8 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses function testValueOfX(const char,unsigned int,int) defined in TestValueFlow
   function valueFlowFunctionReturn() in line 1675
      19 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function valueOfTok(const char,const char) defined in TestValueFlow
   function valueFlowNumber() in line 166
      7 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function valueOfTok(const char,const char) defined in TestValueFlow
   function valueFlowPointerAlias() in line 194
      26 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function testValueOfX(const char,unsigned int,int) defined in TestValueFlow
      uses function tokenValues(const char,const char) defined in TestValueFlow
   function valueFlowString() in line 174
      19 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function testValueOfX(const char,unsigned int,int) defined in TestValueFlow
   function valueFlowSubFunction() in line 1590
      84 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function testValueOfX(const char,unsigned int,int) defined in TestValueFlow
   function valueFlowSwitchVariable() in line 1391
      13 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function testConditionalValueOfX(const char,unsigned int,int) defined in TestValueFlow
   function valueOfTok(const char,const char) in line 161
      4 lines of code
      2 parameters
      1 conditional paths
      uses function tokenValues(const char,const char) defined in TestValueFlow
      uses variable code defined in extracttests.py
   function TestValueFlow() in line 31
      protection public
      2 lines of code
      0 parameters
      1 conditional paths
   variable settings in line 35
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/test/testvarid.cpp
module TestVarID
   inherits from TestFixture
   function run() in line 33
      138 lines of code
      0 parameters
      1 conditional paths
      uses macro definition TEST_CASE defined in testsuite.h
      uses function varid1() defined in TestVarID
      uses function varid2() defined in TestVarID
      uses function varid3() defined in TestVarID
      uses function varid4() defined in TestVarID
      uses function varid5() defined in TestVarID
      uses function varid6() defined in TestVarID
      uses function varid7() defined in TestVarID
      uses function varidReturn1() defined in TestVarID
      uses function varidReturn2() defined in TestVarID
      uses function varid8() defined in TestVarID
      uses function varid9() defined in TestVarID
      uses function varid10() defined in TestVarID
      uses function varid11() defined in TestVarID
      uses function varid12() defined in TestVarID
      uses function varid13() defined in TestVarID
      uses function varid14() defined in TestVarID
      uses function varid15() defined in TestVarID
      uses function varid16() defined in TestVarID
      uses function varid17() defined in TestVarID
      uses function varid18() defined in TestVarID
      uses function varid19() defined in TestVarID
      uses function varid20() defined in TestVarID
      uses function varid24() defined in TestVarID
      uses function varid25() defined in TestVarID
      uses function varid26() defined in TestVarID
      uses function varid27() defined in TestVarID
      uses function varid28() defined in TestVarID
      uses function varid29() defined in TestVarID
      uses function varid30() defined in TestVarID
      uses function varid31() defined in TestVarID
      uses function varid32() defined in TestVarID
      uses function varid33() defined in TestVarID
      uses function varid34() defined in TestVarID
      uses function varid35() defined in TestVarID
      uses function varid36() defined in TestVarID
      uses function varid37() defined in TestVarID
      uses function varid38() defined in TestVarID
      uses function varid39() defined in TestVarID
      uses function varid40() defined in TestVarID
      uses function varid41() defined in TestVarID
      uses function varid42() defined in TestVarID
      uses function varid43() defined in TestVarID
      uses function varid44() defined in TestVarID
      uses function varid45() defined in TestVarID
      uses function varid46() defined in TestVarID
      uses function varid47() defined in TestVarID
      uses function varid48() defined in TestVarID
      uses function varid49() defined in TestVarID
      uses function varid50() defined in TestVarID
      uses function varid51() defined in TestVarID
      uses function varid52() defined in TestVarID
      uses function varid53() defined in TestVarID
      uses function varid54() defined in TestVarID
      uses function varid55() defined in TestVarID
      uses function varid56() defined in TestVarID
      uses function varid57() defined in TestVarID
      uses function varid58() defined in TestVarID
      uses function varid59() defined in TestVarID
      uses function varid60() defined in TestVarID
      uses function varid_cpp_keywords_in_c_code() defined in TestVarID
      uses function varid_cpp_keywords_in_c_code2() defined in TestVarID
      uses function varidFunctionCall1() defined in TestVarID
      uses function varidFunctionCall2() defined in TestVarID
      uses function varidFunctionCall3() defined in TestVarID
      uses function varidFunctionCall4() defined in TestVarID
      uses function varidStl() defined in TestVarID
      uses function varid_newauto() defined in TestVarID
      uses function varid_delete() defined in TestVarID
      uses function varid_functions() defined in TestVarID
      uses function varid_sizeof() defined in TestVarID
      uses function varid_reference_to_containers() defined in TestVarID
      uses function varid_in_class1() defined in TestVarID
      uses function varid_in_class2() defined in TestVarID
      uses function varid_in_class3() defined in TestVarID
      uses function varid_in_class4() defined in TestVarID
      uses function varid_in_class5() defined in TestVarID
      uses function varid_in_class6() defined in TestVarID
      uses function varid_in_class7() defined in TestVarID
      uses function varid_in_class8() defined in TestVarID
      uses function varid_in_class9() defined in TestVarID
      uses function varid_in_class10() defined in TestVarID
      uses function varid_in_class11() defined in TestVarID
      uses function varid_in_class12() defined in TestVarID
      uses function varid_in_class13() defined in TestVarID
      uses function varid_in_class14() defined in TestVarID
      uses function varid_in_class15() defined in TestVarID
      uses function varid_in_class16() defined in TestVarID
      uses function varid_in_class17() defined in TestVarID
      uses function varid_in_class18() defined in TestVarID
      uses function varid_in_class19() defined in TestVarID
      uses function varid_initList() defined in TestVarID
      uses function varid_initListWithBaseTemplate() defined in TestVarID
      uses function varid_initListWithScope() defined in TestVarID
      uses function varid_operator() defined in TestVarID
      uses function varid_throw() defined in TestVarID
      uses function varid_unknown_macro() defined in TestVarID
      uses function varid_using() defined in TestVarID
      uses function varid_catch() defined in TestVarID
      uses function varid_functionPrototypeTemplate() defined in TestVarID
      uses function varid_templatePtr() defined in TestVarID
      uses function varid_templateNamespaceFuncPtr() defined in TestVarID
      uses function varid_templateArray() defined in TestVarID
      uses function varid_cppcast() defined in TestVarID
      uses function varid_variadicFunc() defined in TestVarID
      uses function varid_typename() defined in TestVarID
      uses function varid_rvalueref() defined in TestVarID
      uses function varid_arrayFuncPar() defined in TestVarID
      uses function varid_sizeofPassed() defined in TestVarID
      uses function varid_classInFunction() defined in TestVarID
      uses function varid_pointerToArray() defined in TestVarID
      uses function varid_cpp11initialization() defined in TestVarID
      uses function varid_inheritedMembers() defined in TestVarID
      uses function varid_header() defined in TestVarID
      uses function varid_rangeBasedFor() defined in TestVarID
      uses function varidclass1() defined in TestVarID
      uses function varidclass2() defined in TestVarID
      uses function varidclass3() defined in TestVarID
      uses function varidclass4() defined in TestVarID
      uses function varidclass5() defined in TestVarID
      uses function varidclass6() defined in TestVarID
      uses function varidclass7() defined in TestVarID
      uses function varidclass8() defined in TestVarID
      uses function varidclass9() defined in TestVarID
      uses function varidclass10() defined in TestVarID
      uses function varidclass11() defined in TestVarID
      uses function varidclass12() defined in TestVarID
      uses function varidclass13() defined in TestVarID
      uses function varidclass14() defined in TestVarID
      uses function varidclass15() defined in TestVarID
      uses function varidclass16() defined in TestVarID
      uses function varidclass17() defined in TestVarID
      uses function varidclass18() defined in TestVarID
      uses function varid_classnameshaddowsvariablename() defined in TestVarID
      uses function varidnamespace1() defined in TestVarID
   function tokenize(const char,bool,const char) in line 172
      16 lines of code
      3 parameters
      2 conditional paths
      uses variable errout defined in redirect.h
      uses variable settings defined in TestVarID
      uses variable standards defined in Settings
      uses variable c defined in Standards
      uses enumvalue C89 defined in Standards
      uses variable cpp defined in Standards
      uses enumvalue CPP11 defined in Standards
      uses variable code defined in extracttests.py
      uses function tokenize(std::istream &,const char,const std::string &,bool) defined in Tokenizer
      uses variable filename defined in extracttests.py
      uses function simplifyTokenList2() defined in Tokenizer
      uses function tokens() defined in Tokenizer
      uses function stringifyList(bool,bool,bool,bool,bool,const std::vector< std::string > *,const Token *) defined in Token
   function varid1() in line 189
      53 lines of code
      0 parameters
      1 conditional paths
      uses function tokenize(const char,bool,const char) defined in TestVarID
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function varid10() in line 417
      17 lines of code
      0 parameters
      1 conditional paths
      uses function tokenize(const char,bool,const char) defined in TestVarID
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function varid11() in line 435
      9 lines of code
      0 parameters
      1 conditional paths
      uses function tokenize(const char,bool,const char) defined in TestVarID
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function varid12() in line 445
      15 lines of code
      0 parameters
      1 conditional paths
      uses function tokenize(const char,bool,const char) defined in TestVarID
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function varid13() in line 461
      17 lines of code
      0 parameters
      1 conditional paths
      uses function tokenize(const char,bool,const char) defined in TestVarID
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function varid14() in line 479
      20 lines of code
      0 parameters
      1 conditional paths
      uses function tokenize(const char,bool,const char) defined in TestVarID
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function varid15() in line 500
      33 lines of code
      0 parameters
      1 conditional paths
      uses function tokenize(const char,bool,const char) defined in TestVarID
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function varid16() in line 534
      16 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenize(const char,bool,const char) defined in TestVarID
   function varid17() in line 551
      16 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenize(const char,bool,const char) defined in TestVarID
   function varid18() in line 568
      14 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenize(const char,bool,const char) defined in TestVarID
   function varid19() in line 583
      14 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenize(const char,bool,const char) defined in TestVarID
   function varid2() in line 243
      19 lines of code
      0 parameters
      1 conditional paths
      uses function tokenize(const char,bool,const char) defined in TestVarID
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function varid20() in line 598
      14 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenize(const char,bool,const char) defined in TestVarID
   function varid24() in line 613
      20 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenize(const char,bool,const char) defined in TestVarID
   function varid25() in line 634
      20 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenize(const char,bool,const char) defined in TestVarID
   function varid26() in line 655
      6 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenize(const char,bool,const char) defined in TestVarID
   function varid27() in line 662
      8 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenize(const char,bool,const char) defined in TestVarID
   function varid28() in line 671
      3 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_THROW defined in testsuite.h
      uses function tokenize(const char,bool,const char) defined in TestVarID
   function varid29() in line 675
      10 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenize(const char,bool,const char) defined in TestVarID
   function varid3() in line 263
      19 lines of code
      0 parameters
      1 conditional paths
      uses function tokenize(const char,bool,const char) defined in TestVarID
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function varid30() in line 686
      40 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenize(const char,bool,const char) defined in TestVarID
   function varid31() in line 727
      5 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses function tokenize(const char,bool,const char) defined in TestVarID
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function varid32() in line 733
      5 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses function tokenize(const char,bool,const char) defined in TestVarID
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function varid33() in line 739
      5 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses function tokenize(const char,bool,const char) defined in TestVarID
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function varid34() in line 745
      19 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenize(const char,bool,const char) defined in TestVarID
      uses variable errout defined in redirect.h
   function varid35() in line 765
      25 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenize(const char,bool,const char) defined in TestVarID
   function varid36() in line 791
      6 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses function tokenize(const char,bool,const char) defined in TestVarID
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses variable errout defined in redirect.h
   function varid37() in line 798
      18 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenize(const char,bool,const char) defined in TestVarID
   function varid38() in line 817
      6 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenize(const char,bool,const char) defined in TestVarID
   function varid39() in line 824
      15 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenize(const char,bool,const char) defined in TestVarID
   function varid4() in line 283
      15 lines of code
      0 parameters
      1 conditional paths
      uses function tokenize(const char,bool,const char) defined in TestVarID
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function varid40() in line 840
      6 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenize(const char,bool,const char) defined in TestVarID
   function varid41() in line 847
      11 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenize(const char,bool,const char) defined in TestVarID
   function varid42() in line 859
      14 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenize(const char,bool,const char) defined in TestVarID
   function varid43() in line 874
      6 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenize(const char,bool,const char) defined in TestVarID
   function varid44() in line 881
      6 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenize(const char,bool,const char) defined in TestVarID
   function varid45() in line 888
      6 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenize(const char,bool,const char) defined in TestVarID
   function varid46() in line 895
      6 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenize(const char,bool,const char) defined in TestVarID
   function varid47() in line 902
      21 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenize(const char,bool,const char) defined in TestVarID
   function varid48() in line 924
      6 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenize(const char,bool,const char) defined in TestVarID
   function varid49() in line 931
      6 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenize(const char,bool,const char) defined in TestVarID
   function varid5() in line 299
      15 lines of code
      0 parameters
      1 conditional paths
      uses function tokenize(const char,bool,const char) defined in TestVarID
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function varid50() in line 938
      6 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenize(const char,bool,const char) defined in TestVarID
   function varid51() in line 945
      6 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenize(const char,bool,const char) defined in TestVarID
   function varid52() in line 952
      10 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenize(const char,bool,const char) defined in TestVarID
   function varid53() in line 963
      5 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenize(const char,bool,const char) defined in TestVarID
   function varid54() in line 969
      4 lines of code
      0 parameters
      1 conditional paths
      uses function tokenize(const char,bool,const char) defined in TestVarID
   function varid55() in line 974
      17 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenize(const char,bool,const char) defined in TestVarID
   function varid56() in line 992
      36 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenize(const char,bool,const char) defined in TestVarID
   function varid57() in line 1029
      30 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenize(const char,bool,const char) defined in TestVarID
   function varid58() in line 1060
      18 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenize(const char,bool,const char) defined in TestVarID
   function varid59() in line 1079
      17 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition TODO_ASSERT_EQUALS defined in testsuite.h
      uses function tokenize(const char,bool,const char) defined in TestVarID
   function varid6() in line 316
      15 lines of code
      0 parameters
      1 conditional paths
      uses function tokenize(const char,bool,const char) defined in TestVarID
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function varid60() in line 1097
      5 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenize(const char,bool,const char) defined in TestVarID
   function varid7() in line 333
      19 lines of code
      0 parameters
      1 conditional paths
      uses function tokenize(const char,bool,const char) defined in TestVarID
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function varid8() in line 389
      17 lines of code
      0 parameters
      1 conditional paths
      uses function tokenize(const char,bool,const char) defined in TestVarID
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function varid9() in line 407
      9 lines of code
      0 parameters
      1 conditional paths
      uses function tokenize(const char,bool,const char) defined in TestVarID
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function varid_arrayFuncPar() in line 2145
      4 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenize(const char,bool,const char) defined in TestVarID
   function varid_catch() in line 2062
      12 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenize(const char,bool,const char) defined in TestVarID
   function varid_classInFunction() in line 2164
      15 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenize(const char,bool,const char) defined in TestVarID
   function varid_classnameshaddowsvariablename() in line 2807
      15 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenize(const char,bool,const char) defined in TestVarID
   function varid_cpp11initialization() in line 2206
      38 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenize(const char,bool,const char) defined in TestVarID
   function varid_cpp_keywords_in_c_code() in line 1103
      14 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenize(const char,bool,const char) defined in TestVarID
   function varid_cpp_keywords_in_c_code2() in line 1118
      12 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses function tokenize(const char,bool,const char) defined in TestVarID
   function varid_cppcast() in line 2096
      13 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenize(const char,bool,const char) defined in TestVarID
   function varid_delete() in line 1219
      17 lines of code
      0 parameters
      1 conditional paths
      uses function tokenize(const char,bool,const char) defined in TestVarID
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function varid_functionPrototypeTemplate() in line 2075
      4 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenize(const char,bool,const char) defined in TestVarID
   function varid_functions() in line 1237
      75 lines of code
      0 parameters
      1 conditional paths
      uses function tokenize(const char,bool,const char) defined in TestVarID
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function varid_header() in line 2325
      11 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenize(const char,bool,const char) defined in TestVarID
   function varid_in_class1() in line 1340
      55 lines of code
      0 parameters
      1 conditional paths
      uses function tokenize(const char,bool,const char) defined in TestVarID
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function varid_in_class10() in line 1555
      26 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition TODO_ASSERT_EQUALS defined in testsuite.h
      uses function tokenize(const char,bool,const char) defined in TestVarID
   function varid_in_class11() in line 1582
      46 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenize(const char,bool,const char) defined in TestVarID
   function varid_in_class12() in line 1629
      12 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenize(const char,bool,const char) defined in TestVarID
   function varid_in_class13() in line 1642
      17 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenize(const char,bool,const char) defined in TestVarID
   function varid_in_class14() in line 1660
      17 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenize(const char,bool,const char) defined in TestVarID
   function varid_in_class15() in line 1678
      11 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenize(const char,bool,const char) defined in TestVarID
   function varid_in_class16() in line 1690
      35 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenize(const char,bool,const char) defined in TestVarID
   function varid_in_class17() in line 1726
      39 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenize(const char,bool,const char) defined in TestVarID
   function varid_in_class18() in line 1766
      23 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenize(const char,bool,const char) defined in TestVarID
   function varid_in_class19() in line 1790
      17 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenize(const char,bool,const char) defined in TestVarID
   function varid_in_class2() in line 1396
      33 lines of code
      0 parameters
      1 conditional paths
      uses function tokenize(const char,bool,const char) defined in TestVarID
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function varid_in_class3() in line 1430
      15 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenize(const char,bool,const char) defined in TestVarID
   function varid_in_class4() in line 1446
      10 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenize(const char,bool,const char) defined in TestVarID
   function varid_in_class5() in line 1457
      10 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenize(const char,bool,const char) defined in TestVarID
   function varid_in_class6() in line 1468
      16 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenize(const char,bool,const char) defined in TestVarID
   function varid_in_class7() in line 1485
      16 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenize(const char,bool,const char) defined in TestVarID
   function varid_in_class8() in line 1502
      14 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenize(const char,bool,const char) defined in TestVarID
   function varid_in_class9() in line 1517
      37 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenize(const char,bool,const char) defined in TestVarID
   function varid_inheritedMembers() in line 2245
      79 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenize(const char,bool,const char) defined in TestVarID
   function varid_initList() in line 1808
      108 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenize(const char,bool,const char) defined in TestVarID
   function varid_initListWithBaseTemplate() in line 1917
      63 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenize(const char,bool,const char) defined in TestVarID
   function varid_initListWithScope() in line 1981
      12 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenize(const char,bool,const char) defined in TestVarID
   function varid_newauto() in line 1213
      5 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenize(const char,bool,const char) defined in TestVarID
   function varid_operator() in line 1994
      31 lines of code
      0 parameters
      1 conditional paths
      uses function tokenize(const char,bool,const char) defined in TestVarID
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function varid_pointerToArray() in line 2180
      25 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenize(const char,bool,const char) defined in TestVarID
   function varid_rangeBasedFor() in line 2337
      42 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenize(const char,bool,const char) defined in TestVarID
   function varid_reference_to_containers() in line 1320
      19 lines of code
      0 parameters
      1 conditional paths
      uses function tokenize(const char,bool,const char) defined in TestVarID
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function varid_rvalueref() in line 2126
      18 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenize(const char,bool,const char) defined in TestVarID
   function varid_sizeof() in line 1313
      6 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenize(const char,bool,const char) defined in TestVarID
   function varid_sizeofPassed() in line 2150
      13 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenize(const char,bool,const char) defined in TestVarID
   function varid_templateArray() in line 2090
      5 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenize(const char,bool,const char) defined in TestVarID
   function varid_templateNamespaceFuncPtr() in line 2085
      4 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenize(const char,bool,const char) defined in TestVarID
   function varid_templatePtr() in line 2080
      4 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenize(const char,bool,const char) defined in TestVarID
   function varid_throw() in line 2026
      11 lines of code
      0 parameters
      1 conditional paths
      uses function tokenize(const char,bool,const char) defined in TestVarID
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function varid_typename() in line 2115
      10 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenize(const char,bool,const char) defined in TestVarID
   function varid_unknown_macro() in line 2038
      15 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenize(const char,bool,const char) defined in TestVarID
   function varid_using() in line 2054
      7 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenize(const char,bool,const char) defined in TestVarID
   function varid_variadicFunc() in line 2110
      4 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenize(const char,bool,const char) defined in TestVarID
   function varidclass1() in line 2380
      39 lines of code
      0 parameters
      1 conditional paths
      uses function tokenize(const char,bool,const char) defined in TestVarID
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function varidclass10() in line 2627
      17 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenize(const char,bool,const char) defined in TestVarID
   function varidclass11() in line 2645
      26 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenize(const char,bool,const char) defined in TestVarID
   function varidclass12() in line 2672
      14 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenize(const char,bool,const char) defined in TestVarID
   function varidclass13() in line 2687
      14 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenize(const char,bool,const char) defined in TestVarID
   function varidclass14() in line 2702
      28 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenize(const char,bool,const char) defined in TestVarID
   function varidclass15() in line 2731
      16 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenize(const char,bool,const char) defined in TestVarID
   function varidclass16() in line 2748
      24 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenize(const char,bool,const char) defined in TestVarID
   function varidclass17() in line 2773
      16 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenize(const char,bool,const char) defined in TestVarID
   function varidclass18() in line 2790
      16 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenize(const char,bool,const char) defined in TestVarID
   function varidclass2() in line 2421
      31 lines of code
      0 parameters
      1 conditional paths
      uses function tokenize(const char,bool,const char) defined in TestVarID
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function varidclass3() in line 2454
      31 lines of code
      0 parameters
      1 conditional paths
      uses function tokenize(const char,bool,const char) defined in TestVarID
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function varidclass4() in line 2487
      23 lines of code
      0 parameters
      1 conditional paths
      uses function tokenize(const char,bool,const char) defined in TestVarID
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function varidclass5() in line 2511
      21 lines of code
      0 parameters
      1 conditional paths
      uses function tokenize(const char,bool,const char) defined in TestVarID
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function varidclass6() in line 2533
      29 lines of code
      0 parameters
      1 conditional paths
      uses function tokenize(const char,bool,const char) defined in TestVarID
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function varidclass7() in line 2563
      17 lines of code
      0 parameters
      1 conditional paths
      uses function tokenize(const char,bool,const char) defined in TestVarID
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function varidclass8() in line 2581
      20 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenize(const char,bool,const char) defined in TestVarID
   function varidclass9() in line 2602
      24 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenize(const char,bool,const char) defined in TestVarID
   function varidFunctionCall1() in line 1131
      12 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenize(const char,bool,const char) defined in TestVarID
   function varidFunctionCall2() in line 1144
      12 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenize(const char,bool,const char) defined in TestVarID
   function varidFunctionCall3() in line 1157
      15 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenize(const char,bool,const char) defined in TestVarID
   function varidFunctionCall4() in line 1173
      11 lines of code
      0 parameters
      1 conditional paths
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenize(const char,bool,const char) defined in TestVarID
   function varidnamespace1() in line 2823
      18 lines of code
      0 parameters
      1 conditional paths
      uses variable code defined in extracttests.py
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
      uses function tokenize(const char,bool,const char) defined in TestVarID
      uses macro definition REGISTER_TEST defined in testsuite.h
   function varidReturn1() in line 353
      17 lines of code
      0 parameters
      1 conditional paths
      uses function tokenize(const char,bool,const char) defined in TestVarID
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function varidReturn2() in line 371
      17 lines of code
      0 parameters
      1 conditional paths
      uses function tokenize(const char,bool,const char) defined in TestVarID
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function varidStl() in line 1186
      26 lines of code
      0 parameters
      1 conditional paths
      uses function tokenize(const char,bool,const char) defined in TestVarID
      uses variable expected defined in extracttests.py
      uses macro definition ASSERT_EQUALS defined in testsuite.h
   function TestVarID() in line 27
      protection public
      2 lines of code
      0 parameters
      1 conditional paths
   variable settings in line 31
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/tools/ci.py
module ci.py
   variable t0 in line 98
      protection public
   function upload((null),(null)) in line 17
      protection public
      20 lines of code
      2 parameters
      1 conditional paths
   function gitpush() in line 37
      protection public
      15 lines of code
      0 parameters
      1 conditional paths
   function iconv((null)) in line 52
      protection public
      10 lines of code
      1 parameters
      1 conditional paths
   function generate_webreport() in line 62
      protection public
      15 lines of code
      0 parameters
      1 conditional paths
      uses function iconv((null)) defined in ci.py
      uses function gitpush() defined in ci.py
      uses function upload((null),(null)) defined in ci.py
   function gitpull() in line 77
      protection public
      21 lines of code
      0 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/tools/daca2-addons.py
module daca2-addons.py
   variable DEBIAN in line 17
      protection public
   variable FOLDER in line 209
      protection public
   variable JOBS in line 210
      protection public
   variable REV in line 211
      protection public
   variable archives in line 224
      protection public
   variable workdir in line 232
      protection public
   variable results in line 240
      protection public
   function wget((null)) in line 21
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
   function getpackages((null)) in line 35
      protection public
      30 lines of code
      1 parameters
      1 conditional paths
      uses function wget((null)) defined in daca2-addons.py
   function handleRemoveReadonly((null),(null),(null)) in line 65
      protection public
      10 lines of code
      3 parameters
      1 conditional paths
   function removeAllExceptResults() in line 75
      protection public
      34 lines of code
      0 parameters
      1 conditional paths
   function removeLargeFiles((null)) in line 109
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
   function dumpfiles((null)) in line 123
      protection public
      13 lines of code
      1 parameters
      1 conditional paths
   function scanarchive((null),(null)) in line 136
      protection public
      73 lines of code
      2 parameters
      1 conditional paths
      uses function removeAllExceptResults() defined in daca2-addons.py
      uses function wget((null)) defined in daca2-addons.py
      uses function removeLargeFiles((null)) defined in daca2-addons.py
      uses function dumpfiles((null)) defined in daca2-addons.py
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/tools/daca2-download.py
module daca2-download.py
   variable DEBIAN in line 17
      protection public
   variable workdir in line 154
      protection public
   variable packages in line 159
      protection public
   function wget((null)) in line 22
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
   function getpackages() in line 36
      protection public
      30 lines of code
      0 parameters
      1 conditional paths
      uses function wget((null)) defined in daca2-download.py
   function handleRemoveReadonly((null),(null),(null)) in line 66
      protection public
      10 lines of code
      3 parameters
      1 conditional paths
   function removeAll() in line 76
      protection public
      34 lines of code
      0 parameters
      1 conditional paths
   function removeLargeFiles((null)) in line 110
      protection public
      19 lines of code
      1 parameters
      1 conditional paths
   function downloadpackage((null),(null)) in line 129
      protection public
      25 lines of code
      2 parameters
      1 conditional paths
      uses function removeAll() defined in daca2-download.py
      uses function wget((null)) defined in daca2-download.py
      uses function removeLargeFiles((null)) defined in daca2-download.py
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/tools/daca2-report.py
module daca2-report.py
   variable path in line 34
      protection public
   variable mainpage in line 38
      protection public
   variable lastupdate in line 64
      protection public
   variable recent in line 65
      protection public
   variable daca2 in line 67
      protection public
   variable a in line 71
      protection public
   variable f in line 73
      protection public
   variable data in line 74
      protection public
   variable datestr in line 77
      protection public
   variable f2 in line 80
      protection public
   variable data2 in line 81
      protection public
   variable datestr2 in line 84
      protection public
   variable allrecent in line 134
      protection public
   function readdate((null)) in line 6
      protection public
      28 lines of code
      1 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/tools/daca2.py
module daca2.py
   variable DEBIAN in line 17
      protection public
   variable FOLDER in line 186
      protection public
   variable JOBS in line 187
      protection public
   variable REV in line 188
      protection public
   variable archives in line 201
      protection public
   variable workdir in line 209
      protection public
   variable results in line 217
      protection public
   function wget((null)) in line 21
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
   function getpackages((null)) in line 35
      protection public
      30 lines of code
      1 parameters
      1 conditional paths
      uses function wget((null)) defined in daca2.py
   function handleRemoveReadonly((null),(null),(null)) in line 65
      protection public
      10 lines of code
      3 parameters
      1 conditional paths
   function removeAllExceptResults() in line 75
      protection public
      34 lines of code
      0 parameters
      1 conditional paths
   function removeLargeFiles((null)) in line 109
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
   function scanarchive((null),(null)) in line 123
      protection public
      63 lines of code
      2 parameters
      1 conditional paths
      uses function removeAllExceptResults() defined in daca2.py
      uses function wget((null)) defined in daca2.py
      uses function removeLargeFiles((null)) defined in daca2.py
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/tools/dmake.cpp
module dmake.cpp
   function builddir(std::string) in line 31
      protection public
      6 lines of code
      1 parameters
      2 conditional paths
      uses variable filename defined in extracttests.py
   function objfile(std::string) in line 38
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function builddir(std::string) defined in dmake.cpp
   function getDeps(const std::string &,std::vector< std::string > &) in line 44
      protection public
      33 lines of code
      2 parameters
      9 conditional paths
      uses variable filename defined in extracttests.py
      uses function f(char) defined in test.cxx
      uses variable path defined in daca2-report.py
      uses variable line defined in triage-report.py
   function compilefiles(std::ostream &,const std::vector< std::string > &,const std::string &) in line 78
      protection public
      12 lines of code
      3 parameters
      3 conditional paths
      uses variable fout defined in extracttests.py
      uses function objfile(std::string) defined in dmake.cpp
      uses function getDeps(const std::string &,std::vector< std::string > &) defined in dmake.cpp
      uses function builddir(std::string) defined in dmake.cpp
   function getCppFiles(std::vector< std::string > &,const std::string &,bool) in line 91
      protection public
      14 lines of code
      3 parameters
      3 conditional paths
      uses variable path defined in daca2-report.py
   function makeConditionalVariable(std::ostream &,const std::string &,const std::string &) in line 107
      protection public
      7 lines of code
      3 parameters
      1 conditional paths
   function getLibName(const std::string &) in line 115
      protection public
      9 lines of code
      1 parameters
      1 conditional paths
      uses variable path defined in daca2-report.py
   function makeExtObj(std::ostream &,const std::vector< std::string > &) in line 125
      protection public
      28 lines of code
      2 parameters
      4 conditional paths
      uses function getLibName(const std::string &) defined in dmake.cpp
      uses variable fout defined in extracttests.py
      uses function objfile(std::string) defined in dmake.cpp
   function main(int,char **) in line 154
      protection public
      295 lines of code
      2 parameters
      17 conditional paths
      uses function getCppFiles(std::vector< std::string > &,const std::string &,bool) defined in dmake.cpp
      uses variable filename defined in extracttests.py
      uses variable fout defined in extracttests.py
      uses function makeConditionalVariable(std::ostream &,const std::string &,const std::string &) defined in dmake.cpp
      uses function objfile(std::string) defined in dmake.cpp
      uses function makeExtObj(std::ostream &,const std::vector< std::string > &) defined in dmake.cpp
      uses function compilefiles(std::ostream &,const std::vector< std::string > &,const std::string &) defined in dmake.cpp
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/tools/extracttests.py
module extracttests.py
   variable xml in line 172
      protection public
   variable filename in line 173
      protection public
   variable htmldir in line 174
      protection public
   variable codedir in line 175
      protection public
   variable e in line 193
      protection public
   variable count in line 200
      protection public
   variable s in line 202
      protection public
   variable findex in line 214
      protection public
   variable functionNames in line 232
      protection public
   variable functionname in line 234
      protection public
   variable numall in line 243
      protection public
   variable numerr in line 244
      protection public
   variable testnum in line 276
      protection public
   variable errors in line 284
      protection public
   variable functionName in line 289
      protection public
   variable code in line 290
      protection public
   variable expected in line 293
      protection public
   variable fout in line 300
      protection public
   function strtoxml((null)) in line 99
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function replace(char *,char,char) defined in times.c
   function trimname((null)) in line 104
      protection public
      9 lines of code
      1 parameters
      1 conditional paths
   function writeHtmlFile((null),(null),(null),(null)) in line 113
      protection public
      52 lines of code
      4 parameters
      1 conditional paths
      uses function trimname((null)) defined in extracttests.py
      uses function strtoxml((null)) defined in extracttests.py
      uses function replace(char *,char,char) defined in times.c
module extracttests::Extract
   function parseFile((null),(null)) in line 39
      protection public
      60 lines of code
      2 parameters
      1 conditional paths
   variable nodes in line 37
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/tools/matchcompiler.py
module matchcompiler.py
   function main() in line 645
      protection public
      53 lines of code
      0 parameters
      1 conditional paths
module matchcompiler::MatchCompiler
   function _compileCmd((null),(null)) in line 83
      40 lines of code
      2 parameters
      1 conditional paths
      uses function _compilePattern((null),(null),(null),(null),(null),(null)) defined in matchcompiler::MatchCompiler
   function _compileFindPattern((null),(null),(null),(null),(null)) in line 209
      21 lines of code
      5 parameters
      1 conditional paths
      uses function _compilePattern((null),(null),(null),(null),(null),(null)) defined in matchcompiler::MatchCompiler
   function _compilePattern((null),(null),(null),(null),(null),(null)) in line 123
      85 lines of code
      6 parameters
      1 conditional paths
      uses function _compileCmd((null),(null)) defined in matchcompiler::MatchCompiler
   function _compileVerifyTokenFindMatch((null),(null),(null),(null),(null),(null),(null)) in line 426
      42 lines of code
      7 parameters
      1 conditional paths
      uses function _replaceSpecificFindTokenMatch((null),(null),(null),(null),(null),(null),(null),(null),(null)) defined in matchcompiler::MatchCompiler
   function _compileVerifyTokenMatch((null),(null),(null),(null),(null),(null)) in line 301
      41 lines of code
      6 parameters
      1 conditional paths
      uses function _replaceSpecificTokenMatch((null),(null),(null),(null),(null),(null),(null),(null)) defined in matchcompiler::MatchCompiler
   function _generateCacheSignature((null),(null),(null),(null),(null)) in line 37
      20 lines of code
      5 parameters
      1 conditional paths
      uses function _lookupMatchFunctionId((null),(null),(null),(null),(null)) defined in matchcompiler::MatchCompiler
   function _insertMatchFunctionId((null),(null),(null),(null),(null),(null)) in line 68
      14 lines of code
      6 parameters
      1 conditional paths
      uses function _generateCacheSignature((null),(null),(null),(null),(null)) defined in matchcompiler::MatchCompiler
      uses function _lookupMatchFunctionId((null),(null),(null),(null),(null)) defined in matchcompiler::MatchCompiler
      uses variable _matchFunctionCache defined in matchcompiler::MatchCompiler
   function _isInString((null),(null),(null)) in line 264
      17 lines of code
      3 parameters
      1 conditional paths
   function _lookupMatchFunctionId((null),(null),(null),(null),(null)) in line 58
      9 lines of code
      5 parameters
      1 conditional paths
      uses function _generateCacheSignature((null),(null),(null),(null),(null)) defined in matchcompiler::MatchCompiler
      uses variable _matchFunctionCache defined in matchcompiler::MatchCompiler
      uses function _insertMatchFunctionId((null),(null),(null),(null),(null),(null)) defined in matchcompiler::MatchCompiler
   function _parseStringComparison((null),(null),(null)) in line 281
      20 lines of code
      3 parameters
      1 conditional paths
      uses function _compileVerifyTokenMatch((null),(null),(null),(null),(null),(null)) defined in matchcompiler::MatchCompiler
   function _replaceCStrings((null),(null)) in line 583
      21 lines of code
      2 parameters
      1 conditional paths
      uses function _isInString((null),(null),(null)) defined in matchcompiler::MatchCompiler
      uses function _parseStringComparison((null),(null),(null)) defined in matchcompiler::MatchCompiler
   function _replaceSpecificFindTokenMatch((null),(null),(null),(null),(null),(null),(null),(null),(null)) in line 469
      47 lines of code
      9 parameters
      1 conditional paths
      uses function _lookupMatchFunctionId((null),(null),(null),(null),(null)) defined in matchcompiler::MatchCompiler
      uses variable _rawMatchFunctions defined in matchcompiler::MatchCompiler
      uses function _insertMatchFunctionId((null),(null),(null),(null),(null),(null)) defined in matchcompiler::MatchCompiler
      uses function _compileFindPattern((null),(null),(null),(null),(null)) defined in matchcompiler::MatchCompiler
      uses variable _verifyMode defined in matchcompiler::MatchCompiler
      uses function _compileVerifyTokenFindMatch((null),(null),(null),(null),(null),(null),(null)) defined in matchcompiler::MatchCompiler
   function _replaceSpecificTokenMatch((null),(null),(null),(null),(null),(null),(null),(null)) in line 343
      40 lines of code
      8 parameters
      1 conditional paths
      uses function _lookupMatchFunctionId((null),(null),(null),(null),(null)) defined in matchcompiler::MatchCompiler
      uses variable _rawMatchFunctions defined in matchcompiler::MatchCompiler
      uses function _insertMatchFunctionId((null),(null),(null),(null),(null),(null)) defined in matchcompiler::MatchCompiler
      uses function _compilePattern((null),(null),(null),(null),(null),(null)) defined in matchcompiler::MatchCompiler
      uses variable _verifyMode defined in matchcompiler::MatchCompiler
      uses function _compileVerifyTokenMatch((null),(null),(null),(null),(null),(null)) defined in matchcompiler::MatchCompiler
   function _replaceTokenFindMatch((null),(null)) in line 517
      66 lines of code
      2 parameters
      1 conditional paths
      uses function parseMatch((null),(null),(null)) defined in matchcompiler::MatchCompiler
      uses variable _showSkipped defined in matchcompiler::MatchCompiler
      uses function _replaceSpecificFindTokenMatch((null),(null),(null),(null),(null),(null),(null),(null),(null)) defined in matchcompiler::MatchCompiler
   function _replaceTokenMatch((null),(null)) in line 384
      42 lines of code
      2 parameters
      1 conditional paths
      uses function parseMatch((null),(null),(null)) defined in matchcompiler::MatchCompiler
      uses variable _showSkipped defined in matchcompiler::MatchCompiler
      uses function _replaceSpecificTokenMatch((null),(null),(null),(null),(null),(null),(null),(null)) defined in matchcompiler::MatchCompiler
      uses function _compileVerifyTokenFindMatch((null),(null),(null),(null),(null),(null),(null)) defined in matchcompiler::MatchCompiler
   function _reset((null)) in line 33
      4 lines of code
      1 parameters
      1 conditional paths
   function convertFile((null),(null),(null),(null)) in line 604
      protection public
      41 lines of code
      4 parameters
      1 conditional paths
      uses function _reset((null)) defined in matchcompiler::MatchCompiler
      uses function _replaceTokenMatch((null),(null)) defined in matchcompiler::MatchCompiler
      uses function _replaceTokenFindMatch((null),(null)) defined in matchcompiler::MatchCompiler
      uses function _replaceCStrings((null),(null)) defined in matchcompiler::MatchCompiler
      uses variable _rawMatchFunctions defined in matchcompiler::MatchCompiler
   function parseMatch((null),(null),(null)) in line 230
      protection public
      34 lines of code
      3 parameters
      1 conditional paths
   function __init__((null),(null),(null)) in line 28
      protection public
      5 lines of code
      3 parameters
      1 conditional paths
   variable _matchFunctionCache in line 35
   variable _rawMatchFunctions in line 34
   variable _showSkipped in line 30
   variable _verifyMode in line 29
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/tools/parse-glibc.py
module parse-glibc.py
   function checknonnull((null),(null),(null)) in line 6
      protection public
      28 lines of code
      3 parameters
      1 conditional paths
   function parseheader((null),(null)) in line 34
      protection public
      90 lines of code
      2 parameters
      1 conditional paths
      uses function checknonnull((null),(null),(null)) defined in parse-glibc.py
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/tools/reduce.cpp
module reduce.cpp
   function test(const ReduceSettings &,const std::vector< std::string > &,const std::size_t,const std::size_t) in line 85
      protection public
      17 lines of code
      4 parameters
      3 conditional paths
      uses variable path defined in daca2-report.py
      uses variable filename defined in ReduceSettings
      uses variable fout defined in extracttests.py
      uses function run(const char) defined in CppcheckExecutor
      uses variable maxtime defined in ReduceSettings
   function test(const ReduceSettings &,const std::vector< std::string > &,const std::size_t) in line 103
      protection public
      4 lines of code
      3 parameters
      2 conditional paths
      uses function test(const ReduceSettings &,const std::vector< std::string > &,const std::size_t,const std::size_t) defined in reduce.cpp
      uses variable line defined in triage-report.py
   function getEndChar(const std::string &) in line 117
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable line defined in triage-report.py
   function readfile(const std::string &) in line 123
      protection public
      118 lines of code
      1 parameters
      24 conditional paths
      uses variable fin defined in triage-report.py
      uses variable filename defined in ReduceSettings
      uses variable line defined in triage-report.py
      uses variable linenr defined in ReduceSettings
      uses function getEndChar(const std::string &) defined in reduce.cpp
      uses variable code defined in extracttests.py
   function removeMacrosInGlobalScope(const ReduceSettings &,std::vector< std::string > &) in line 242
      protection public
      53 lines of code
      2 parameters
      14 conditional paths
      uses variable line defined in triage-report.py
      uses variable s defined in extracttests.py
      uses function test(const ReduceSettings &,const std::vector< std::string > &,const std::size_t,const std::size_t) defined in reduce.cpp
   function removeBlocksOfCode(const ReduceSettings &,std::vector< std::string > &) in line 296
      protection public
      90 lines of code
      2 parameters
      22 conditional paths
      uses variable line defined in triage-report.py
      uses function test(const ReduceSettings &,const std::vector< std::string > &,const std::size_t,const std::size_t) defined in reduce.cpp
   function removeClassAndStructMembers(const ReduceSettings &,std::vector< std::string > &) in line 387
      protection public
      50 lines of code
      2 parameters
      14 conditional paths
      uses variable line defined in triage-report.py
      uses function test(const ReduceSettings &,const std::vector< std::string > &,const std::size_t,const std::size_t) defined in reduce.cpp
   function removeIfEndIf(const ReduceSettings &,std::vector< std::string > &) in line 438
      protection public
      77 lines of code
      2 parameters
      19 conditional paths
      uses function test(const ReduceSettings &,const std::vector< std::string > &,const std::size_t,const std::size_t) defined in reduce.cpp
   function removeUnusedDefines(const ReduceSettings &,std::vector< std::string > &) in line 516
      protection public
      20 lines of code
      2 parameters
      4 conditional paths
      uses function test(const ReduceSettings &,const std::vector< std::string > &,const std::size_t,const std::size_t) defined in reduce.cpp
   function removeSingleLines(const ReduceSettings &,std::vector< std::string > &) in line 537
      protection public
      25 lines of code
      2 parameters
      5 conditional paths
      uses variable line defined in triage-report.py
      uses function test(const ReduceSettings &,const std::vector< std::string > &,const std::size_t,const std::size_t) defined in reduce.cpp
   function cleanupStatements(const ReduceSettings &,std::vector< std::string > &) in line 564
      protection public
      72 lines of code
      2 parameters
      19 conditional paths
      uses variable line defined in triage-report.py
      uses function test(const ReduceSettings &,const std::vector< std::string > &,const std::size_t,const std::size_t) defined in reduce.cpp
   function main(int,char *) in line 638
      protection public
      202 lines of code
      2 parameters
      46 conditional paths
      uses variable maxtime defined in ReduceSettings
      uses variable hang defined in ReduceSettings
      uses variable userDefines defined in Settings
      uses variable path defined in daca2-report.py
      uses variable includePaths defined in Settings
      uses function platform(PlatformType) defined in Settings
      uses enumvalue Win32A defined in Settings
      uses enumvalue Win32W defined in Settings
      uses enumvalue Win64 defined in Settings
      uses enumvalue Unix32 defined in Settings
      uses enumvalue Unix64 defined in Settings
      uses variable debugwarnings defined in Settings
      uses variable force defined in Settings
      uses function addEnabled(const std::string &) defined in Settings
      uses function isEnabled(T &&) defined in Settings
      uses variable inconclusive defined in Settings
      uses variable maxConfigs defined in Settings
      uses variable filename defined in ReduceSettings
      uses variable linenr defined in ReduceSettings
      uses function run(const char) defined in CppcheckExecutor
      uses function readfile(const std::string &) defined in reduce.cpp
      uses function test(const ReduceSettings &,const std::vector< std::string > &,const std::size_t,const std::size_t) defined in reduce.cpp
      uses variable data defined in cert.py
      uses function removeMacrosInGlobalScope(const ReduceSettings &,std::vector< std::string > &) defined in reduce.cpp
      uses function removeBlocksOfCode(const ReduceSettings &,std::vector< std::string > &) defined in reduce.cpp
      uses function removeClassAndStructMembers(const ReduceSettings &,std::vector< std::string > &) defined in reduce.cpp
      uses function removeIfEndIf(const ReduceSettings &,std::vector< std::string > &) defined in reduce.cpp
      uses function removeUnusedDefines(const ReduceSettings &,std::vector< std::string > &) defined in reduce.cpp
      uses function removeSingleLines(const ReduceSettings &,std::vector< std::string > &) defined in reduce.cpp
      uses function cleanupStatements(const ReduceSettings &,std::vector< std::string > &) defined in reduce.cpp
      uses variable fout defined in extracttests.py
module ReduceSettings
   inherits from Settings
   function ReduceSettings() in line 31
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   variable filename in line 33
      protection public
   variable hang in line 35
      protection public
   variable linenr in line 34
      protection public
   variable maxtime in line 36
      protection public
module CppcheckExecutor
   inherits from ErrorLogger
   inherits from ErrorLogger
   function reportErr(const ErrorLogger::ErrorMessage &) in line 47
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses variable s defined in extracttests.py
      uses variable msg defined in findcasts.py
   function reportErr(const ErrorLogger::ErrorMessage &) in line 67
      protection public
      6 lines of code
      1 parameters
      2 conditional paths
      uses variable msg defined in findcasts.py
      uses function terminate() defined in CppCheck
   function reportOut(const std::string &) in line 46
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function reportOut(const std::string &) in line 66
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function reportProgress(const std::string &,const char,const unsigned int) in line 59
      protection public
      12 lines of code
      3 parameters
      2 conditional paths
      uses variable stoptime defined in CppcheckExecutor
      uses variable cppcheck defined in CppcheckExecutor
      uses function terminate() defined in CppCheck
   function reportProgress(const std::string &,const char,const std::size_t) in line 73
      protection public
      10 lines of code
      3 parameters
      3 conditional paths
      uses function terminate() defined in CppCheck
   function run(const char) in line 42
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
      uses variable cppcheck defined in CppcheckExecutor
      uses function check(const std::string &) defined in CppCheck
      uses variable code defined in extracttests.py
   function run(const char,unsigned int) in line 59
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
      uses variable maxtime defined in ReduceSettings
      uses function check(const std::string &) defined in CppCheck
      uses variable filename defined in ReduceSettings
   function CppcheckExecutor() in line 34
      protection public
      7 lines of code
      0 parameters
      1 conditional paths
      uses variable cppcheck defined in CppcheckExecutor
      uses function settings() defined in CppCheck
      uses function addEnabled(const std::string &) defined in Settings
      uses variable inconclusive defined in Settings
   function CppcheckExecutor(const ReduceSettings &) in line 47
      protection public
      11 lines of code
      1 parameters
      2 conditional paths
      uses variable hang defined in ReduceSettings
      uses variable linenr defined in ReduceSettings
      uses function settings() defined in CppCheck
   variable cppcheck in line 31
   variable foundLine in line 43
   variable pattern in line 42
   variable stoptime in line 30
   variable stopTime in line 44
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/tools/rundaca2.py
module rundaca2.py
   variable PASSWORD in line 10
      protection public
   variable foldernum in line 67
      protection public
   function upload((null),(null)) in line 15
      protection public
      18 lines of code
      2 parameters
      1 conditional paths
   function daca2((null)) in line 33
      protection public
      34 lines of code
      1 parameters
      1 conditional paths
      uses function upload((null),(null)) defined in rundaca2.py
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/tools/test_matchcompiler.py
module test_matchcompiler::MatchCompilerTest
   inherits from unittest::TestCase
   function setUp((null)) in line 25
      protection public
      3 lines of code
      1 parameters
      1 conditional paths
   function test_parseMatch((null)) in line 28
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
   function test_parseStringComparison((null)) in line 138
      protection public
      12 lines of code
      1 parameters
      1 conditional paths
   function test_replaceCStrings((null)) in line 150
      protection public
      16 lines of code
      1 parameters
      1 conditional paths
   function test_replaceTokenFindMatch((null)) in line 116
      protection public
      22 lines of code
      1 parameters
      1 conditional paths
   function test_replaceTokenFindSimpleMatch((null)) in line 101
      protection public
      15 lines of code
      1 parameters
      1 conditional paths
   function test_replaceTokenMatch((null)) in line 36
      protection public
      26 lines of code
      1 parameters
      1 conditional paths
   function test_replaceTokenMatchWithVarId((null)) in line 62
      protection public
      25 lines of code
      1 parameters
      1 conditional paths
   function test_replaceTokenSimpleMatch((null)) in line 87
      protection public
      14 lines of code
      1 parameters
      1 conditional paths
   variable mc in line 26
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/tools/times.c
module times.c
   function replace(char *,char,char) in line 5
      protection public
      6 lines of code
      3 parameters
      2 conditional paths
   function main() in line 12
      protection public
      37 lines of code
      0 parameters
      9 conditional paths
      uses function f(char) defined in test.cxx
      uses variable line defined in triage-report.py
      uses function replace(char *,char,char) defined in times.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/triage/linux-3.11/linux-3.11.h
module linux-3.11.h
   macro definition __alignof__ in line 2
      protection public
   macro definition offsetof in line 3
      protection public
   macro definition ARRAY_SIZE in line 4
      protection public
   macro definition BUG_ON in line 5
      protection public
   macro definition GOTO in line 6
      protection public
   macro definition RETURN in line 7
      protection public
   macro definition NVERSION in line 8
      protection public
   macro definition container_of in line 9
      protection public
   macro definition __get_user in line 13
      protection public
   function panic(const char *,...) in line 15
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/cppcheck/cppcheck-1.72/triage/triage-report.py
module triage-report.py
   variable project in line 10
      protection public
   variable resultfile in line 11
      protection public
   variable f in line 13
      protection public
   variable truepositives in line 14
      protection public
   variable falsepositives in line 18
      protection public
   variable fin in line 21
      protection public
   variable results in line 22
      protection public
   variable out in line 25
      protection public
   variable numberOfFalsePositives in line 31
      protection public
   variable numberOfTruePositives in line 32
      protection public
   variable numberOfFalseNegatives in line 33
      protection public
   variable result in line 36
      protection public
   variable res in line 38
      protection public
   variable filename in line 42
      protection public
   variable linenr in line 43
      protection public
   variable message in line 44
      protection public
   variable css in line 45
      protection public
   variable classification in line 46
      protection public
   variable href in line 55
      protection public
   variable html in line 57
      protection public
   variable line in line 73
      protection public
   variable project2 in line 103
      protection public
   variable fout in line 109
      protection public
