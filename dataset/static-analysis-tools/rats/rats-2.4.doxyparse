file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/rats/rats-2.4/c-tokens.h
module c-tokens.h
   macro definition TOKEN_AUTO in line 27
      protection public
   macro definition TOKEN_CASE in line 28
      protection public
   macro definition TOKEN_CHAR in line 29
      protection public
   macro definition TOKEN_CONST in line 30
      protection public
   macro definition TOKEN_DEFAULT in line 31
      protection public
   macro definition TOKEN_DO in line 32
      protection public
   macro definition TOKEN_DOUBLE in line 33
      protection public
   macro definition TOKEN_ENUM in line 34
      protection public
   macro definition TOKEN_EXTERN in line 35
      protection public
   macro definition TOKEN_FLOAT in line 36
      protection public
   macro definition TOKEN_GOTO in line 37
      protection public
   macro definition TOKEN_INT in line 38
      protection public
   macro definition TOKEN_LONG in line 39
      protection public
   macro definition TOKEN_REGISTER in line 40
      protection public
   macro definition TOKEN_SHORT in line 41
      protection public
   macro definition TOKEN_SIGNED in line 42
      protection public
   macro definition TOKEN_SIZEOF in line 43
      protection public
   macro definition TOKEN_STATIC in line 44
      protection public
   macro definition TOKEN_STRUCT in line 45
      protection public
   macro definition TOKEN_SWITCH in line 46
      protection public
   macro definition TOKEN_TYPEDEF in line 47
      protection public
   macro definition TOKEN_UNION in line 48
      protection public
   macro definition TOKEN_UNSIGNED in line 49
      protection public
   macro definition TOKEN_VOID in line 50
      protection public
   macro definition TOKEN_VOLATILE in line 51
      protection public
   macro definition TOKEN_CIN in line 52
      protection public
   macro definition TOKEN_DEC_OP in line 55
      protection public
   macro definition TOKEN_INC_OP in line 56
      protection public
   macro definition TOKEN_PTR_OP in line 57
      protection public
   macro definition TOKEN_AND_OP in line 58
      protection public
   macro definition TOKEN_OR_OP in line 59
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/rats/rats-2.4/engine.c
module engine.c
   variable ratslexer in line 55
      protection public
   variable database in line 56
      protection public
   variable defaultdb in line 57
      protection public
   variable current_file in line 58
      protection public
   variable current_frame in line 59
      protection public
   variable depths in line 61
      protection public
   variable ungotten_token in line 62
      protection public
   variable toctou_count in line 63
      protection public
   variable last_text_line in line 64
      protection public
   variable current_ignore in line 65
      protection public
   variable toctous in line 66
      protection public
   variable accumulators in line 67
      protection public
   function analyze_variable(int) in line 69
      protection public
      20 lines of code
      1 parameters
      3 conditional paths
      uses macro definition data defined in kazhash.c
      uses variable current_frame defined in engine.c
      uses variable _rats_stack_t::next defined in engine.h
      uses variable depths defined in engine.c
      uses macro definition DEPTH_PARENTHESIS defined in engine.h
      uses macro definition DEPTH_BRACKET defined in engine.h
      uses variable ratslexer defined in engine.c
      uses variable _lexer_t::lex_column defined in engine.h
      uses variable _lexer_t::lex_lineno defined in engine.h
      uses macro definition DEPTH_BRACE defined in engine.h
      uses function scan_tokens(processorfn_t,void *) defined in engine.c
      uses function check_buffer(int,void *) defined in engine.c
   function analyze_identifier(void) in line 70
      protection public
      142 lines of code
      1 parameters
      34 conditional paths
      uses macro definition data defined in kazhash.c
      uses variable ratslexer defined in engine.c
      uses variable _lexer_t::lex_lineno defined in engine.h
      uses variable _lexer_t::lex_column defined in engine.h
      uses variable _lexer_t::yytext defined in engine.h
      uses function push_identifier(char *,int,int) defined in engine.c
      uses macro definition TOKEN_RIGHT_ASSIGN defined in tokens.h
      uses function get_token(void) defined in engine.c
      uses variable _lexer_t::lang defined in engine.h
      uses macro definition LANG_RUBY defined in engine.h
      uses variable current_frame defined in engine.c
      uses variable flags defined in engine.h
      uses macro definition INCLUDE_ALL_REFERENCES defined in engine.h
      uses function log_vulnerability(type_t,Severity_t) defined in report.c
      uses enumvalue Reference defined in report.h
      uses enumvalue Medium defined in vuln_db.h
      uses function pop_identifier(void) defined in engine.c
      uses function unget_token(int) defined in engine.c
      uses function scan_arguments(void) defined in engine.c
      uses variable _rats_stack_t::data defined in engine.h
      uses enumvalue Info defined in report.h
      uses function get_argument(int) defined in engine.c
      uses variable _argument_t::is_constant defined in engine.h
      uses enumvalue FSProblem defined in report.h
      uses enumvalue BOProblem defined in report.h
      uses variable _argument_t::contains_ps defined in engine.h
      uses function check_scan_format_string(char *,int) defined in engine.c
      uses variable _argument_t::yytext defined in engine.h
      uses function check_format_string(char *,int) defined in engine.c
      uses enumvalue InputProblem defined in report.h
      uses function record_toctou(int,int,int,int) defined in engine.c
      uses macro definition INPUT_MODE defined in engine.h
      uses function record_input(void) defined in report.c
      uses enumvalue None defined in report.h
      uses enumvalue Default defined in vuln_db.h
   function analyze_comment(void) in line 71
      protection public
      38 lines of code
      1 parameters
      13 conditional paths
      uses variable yyclength defined in lex.yyc.c
      uses variable ratslexer defined in engine.c
      uses variable _lexer_t::yycomment defined in engine.h
      uses function new_ignore(int,char *) defined in report.c
      uses variable _lexer_t::lex_lineno defined in engine.h
      uses variable last_text_line defined in engine.c
      uses variable current_ignore defined in engine.c
   function analyze_backticks(void) in line 72
      protection public
      30 lines of code
      1 parameters
      6 conditional paths
      uses variable ratslexer defined in engine.c
      uses variable _lexer_t::lex_lineno defined in engine.h
      uses variable _lexer_t::lex_column defined in engine.h
      uses variable _lexer_t::lang defined in engine.h
      uses macro definition LANG_C defined in engine.h
      uses function scan_tokens(processorfn_t,void *) defined in engine.c
      uses function gobble_backtick(int,void *) defined in engine.c
      uses macro definition LANG_PYTHON defined in engine.h
      uses function log_pythonbacktick(int,int,Severity_t) defined in report.c
      uses enumvalue Medium defined in vuln_db.h
      uses macro definition LANG_PHP defined in engine.h
      uses function log_phpbacktick(int,int,Severity_t) defined in report.c
      uses macro definition LANG_PERL defined in engine.h
      uses function log_perlbacktick(int,int,Severity_t) defined in report.c
      uses macro definition LANG_RUBY defined in engine.h
      uses function log_rubybacktick(int,int,Severity_t) defined in report.c
   function get_argument(int) in line 73
      protection public
      10 lines of code
      1 parameters
      3 conditional paths
      uses variable current_frame defined in engine.c
      uses variable _rats_stack_t::argc defined in engine.h
      uses variable _rats_stack_t::argv defined in engine.h
      uses variable _argument_t::next defined in engine.h
   function accumulate_text(accumulator_t *,char *) in line 76
      protection public
      24 lines of code
      2 parameters
      3 conditional paths
      uses variable _accumulator_t::text defined in engine.h
      uses variable _accumulator_t::length defined in engine.h
   function push_accumulator(char **) in line 102
      protection public
      12 lines of code
      1 parameters
      1 conditional paths
      uses variable _accumulator_t::text defined in engine.h
      uses variable _accumulator_t::length defined in engine.h
      uses variable _accumulator_t::next defined in engine.h
      uses variable accumulators defined in engine.c
      uses function accumulate_text(accumulator_t *,char *) defined in engine.c
      uses variable ratslexer defined in engine.c
      uses variable _lexer_t::yytext defined in engine.h
   function pop_accumulator(void) in line 116
      protection public
      18 lines of code
      1 parameters
      3 conditional paths
      uses variable accumulators defined in engine.c
      uses variable _accumulator_t::next defined in engine.h
      uses variable _accumulator_t::text defined in engine.h
      uses variable _accumulator_t::length defined in engine.h
      uses function accumulate_text(accumulator_t *,char *) defined in engine.c
      uses variable ratslexer defined in engine.c
      uses variable _lexer_t::yytext defined in engine.h
   function unget_token(int) in line 136
      protection public
      13 lines of code
      1 parameters
      7 conditional paths
      uses variable ungotten_token defined in engine.c
      uses variable depths defined in engine.c
      uses macro definition DEPTH_PARENTHESIS defined in engine.h
      uses macro definition DEPTH_BRACKET defined in engine.h
      uses macro definition DEPTH_BRACE defined in engine.h
   function get_token(void) in line 151
      protection public
      30 lines of code
      1 parameters
      10 conditional paths
      uses variable ungotten_token defined in engine.c
      uses variable ratslexer defined in engine.c
      uses variable _lexer_t::yylex defined in engine.h
      uses variable accumulators defined in engine.c
      uses function accumulate_text(accumulator_t *,char *) defined in engine.c
      uses variable _lexer_t::yytext defined in engine.h
      uses variable depths defined in engine.c
      uses macro definition DEPTH_PARENTHESIS defined in engine.h
      uses macro definition DEPTH_BRACKET defined in engine.h
      uses macro definition DEPTH_BRACE defined in engine.h
   function scan_tokens(processorfn_t,void *) in line 183
      protection public
      49 lines of code
      2 parameters
      19 conditional paths
      uses function get_token(void) defined in engine.c
      uses macro definition TOKEN_COMMENT defined in tokens.h
      uses variable last_text_line defined in engine.c
      uses variable ratslexer defined in engine.c
      uses variable _lexer_t::lex_lineno defined in engine.h
      uses variable current_ignore defined in engine.c
      uses variable _ignore_t::lineno defined in report.h
      uses macro definition TOKEN_DOUBLE defined in c-tokens.h
      uses macro definition TOKEN_FLOAT defined in c-tokens.h
      uses macro definition TOKEN_INT defined in c-tokens.h
      uses macro definition TOKEN_LONG defined in c-tokens.h
      uses macro definition TOKEN_SHORT defined in c-tokens.h
      uses macro definition TOKEN_STRUCT defined in c-tokens.h
      uses macro definition TOKEN_VOID defined in c-tokens.h
      uses macro definition TOKEN_ENUM defined in c-tokens.h
      uses macro definition TOKEN_UNION defined in c-tokens.h
      uses macro definition TOKEN_CHAR defined in c-tokens.h
      uses function analyze_variable(int) defined in engine.c
      uses macro definition TOKEN_IDENTIFIER defined in tokens.h
      uses function analyze_identifier(void) defined in engine.c
      uses function analyze_comment(void) defined in engine.c
      uses function analyze_backticks(void) defined in engine.c
   function gobble_backtick(int,void *) in line 234
      protection public
      6 lines of code
      2 parameters
      2 conditional paths
   function check_buffer(int,void *) in line 274
      protection public
      31 lines of code
      2 parameters
      9 conditional paths
      uses macro definition data defined in kazhash.c
      uses macro definition TOKEN_IDENTIFIER defined in tokens.h
      uses variable depths defined in engine.c
      uses macro definition DEPTH_BRACE defined in engine.h
      uses macro definition TOKEN_CHAR defined in c-tokens.h
      uses variable flags defined in engine.h
      uses macro definition ALL_STATIC defined in engine.h
      uses function log_staticbuffer(type_t,int,int,Severity_t) defined in report.c
      uses enumvalue StaticLocalBuffer defined in report.h
      uses enumvalue High defined in vuln_db.h
      uses enumvalue StaticGlobalBuffer defined in report.h
      uses enumvalue Low defined in vuln_db.h
   function check_format_string(char *,int) in line 334
      protection public
      98 lines of code
      2 parameters
      43 conditional paths
      uses function get_argument(int) defined in engine.c
      uses variable _argument_t::is_constant defined in engine.h
   function check_scan_format_string(char *,int) in line 434
      protection public
      62 lines of code
      2 parameters
      32 conditional paths
      uses function get_argument(int) defined in engine.c
      uses variable _argument_t::is_constant defined in engine.h
   function check_argument(int,void *) in line 498
      protection public
      63 lines of code
      2 parameters
      13 conditional paths
      uses macro definition data defined in kazhash.c
      uses macro definition DEPTH_COUNT defined in engine.h
      uses variable depths defined in engine.c
      uses macro definition DEPTH_PARENTHESIS defined in engine.h
      uses function pop_accumulator(void) defined in engine.c
      uses variable current_frame defined in engine.c
      uses variable _rats_stack_t::argc defined in engine.h
      uses variable _rats_stack_t::argv defined in engine.h
      uses function push_accumulator(char **) defined in engine.c
      uses macro definition CONST_END defined in tokens.h
      uses macro definition TOKEN_STRING_CONST defined in tokens.h
      uses function check_format_string(char *,int) defined in engine.c
      uses variable ratslexer defined in engine.c
      uses variable _lexer_t::yytext defined in engine.h
   function scan_arguments(void) in line 563
      protection public
      12 lines of code
      1 parameters
      2 conditional paths
      uses macro definition data defined in kazhash.c
      uses macro definition DEPTH_COUNT defined in engine.h
      uses variable depths defined in engine.c
      uses function scan_tokens(processorfn_t,void *) defined in engine.c
      uses function check_argument(int,void *) defined in engine.c
   function locate_identifier(char *) in line 589
      protection public
      10 lines of code
      1 parameters
      3 conditional paths
      uses macro definition data defined in kazhash.c
      uses variable ratslexer defined in engine.c
      uses variable _lexer_t::langhash defined in engine.h
      uses function HashGet(Hash,char *) defined in hash.c
      uses variable defaultdb defined in engine.c
   function push_identifier(char *,int,int) in line 601
      protection public
      20 lines of code
      3 parameters
      2 conditional paths
      uses macro definition data defined in kazhash.c
      uses variable database defined in engine.c
      uses function locate_identifier(char *) defined in engine.c
      uses variable _rats_stack_t::identifier defined in engine.h
      uses variable _rats_stack_t::data defined in engine.h
      uses variable _rats_stack_t::lineno defined in engine.h
      uses variable _rats_stack_t::column defined in engine.h
      uses variable _rats_stack_t::argc defined in engine.h
      uses variable _rats_stack_t::argv defined in engine.h
      uses variable _rats_stack_t::next defined in engine.h
      uses variable current_frame defined in engine.c
   function pop_identifier(void) in line 623
      protection public
      19 lines of code
      1 parameters
      3 conditional paths
      uses macro definition next defined in kazhash.c
      uses variable current_frame defined in engine.c
      uses variable _rats_stack_t::next defined in engine.h
      uses variable _rats_stack_t::identifier defined in engine.h
      uses variable _rats_stack_t::argv defined in engine.h
      uses variable _argument_t::next defined in engine.h
      uses variable _argument_t::yytext defined in engine.h
   function record_toctou(int,int,int,int) in line 644
      protection public
      18 lines of code
      4 parameters
      2 conditional paths
      uses function get_argument(int) defined in engine.c
      uses variable _toctou_t::lineno defined in engine.h
      uses variable _toctou_t::data defined in engine.h
      uses variable current_frame defined in engine.c
      uses variable _rats_stack_t::data defined in engine.h
      uses variable _toctou_t::key defined in engine.h
      uses variable _argument_t::yytext defined in engine.h
      uses variable _toctou_t::use defined in engine.h
      uses variable _toctou_t::column defined in engine.h
      uses variable _toctou_t::next defined in engine.h
      uses variable toctous defined in engine.c
      uses variable toctou_count defined in engine.c
   function toctou_sort(const void *,const void *) in line 808
      protection public
      13 lines of code
      2 parameters
      4 conditional paths
      uses variable _toctou_t::key defined in engine.h
      uses variable _toctou_t::use defined in engine.h
      uses variable _toctou_t::lineno defined in engine.h
   function process_toctou(void) in line 823
      protection public
      44 lines of code
      1 parameters
      8 conditional paths
      uses macro definition table defined in kazhash.c
      uses variable toctou_count defined in engine.c
      uses variable toctous defined in engine.c
      uses variable _toctou_t::next defined in engine.h
      uses function toctou_sort(const void *,const void *) defined in engine.c
      uses macro definition key defined in kazhash.c
      uses function log_toctou(toctou_t **,int,int,int) defined in report.c
   function setup_perl(FILE *) in line 868
      protection public
      12 lines of code
      1 parameters
      1 conditional paths
      uses variable yyperlin defined in lex.yyperl.c
      uses variable ratslexer defined in engine.c
      uses variable _lexer_t::lex_column defined in engine.h
      uses variable perllex_column defined in lex.yyperl.c
      uses variable _lexer_t::yytext defined in engine.h
      uses variable yyperltext defined in lex.yyperl.c
      uses variable _lexer_t::yyin defined in engine.h
      uses variable _lexer_t::yylex defined in engine.h
      uses function yyperllex(void) defined in lex.yyperl.c
      uses variable _lexer_t::yycomment defined in engine.h
      uses variable yyperlcomment defined in lex.yyperl.c
      uses variable _lexer_t::lex_lineno defined in engine.h
      uses variable perllex_lineno defined in lex.yyperl.c
      uses variable _lexer_t::langhash defined in engine.h
      uses function HashGet(Hash,char *) defined in hash.c
      uses variable database defined in engine.c
      uses variable _lexer_t::lang defined in engine.h
      uses macro definition LANG_PERL defined in engine.h
   function setup_python(FILE *) in line 881
      protection public
      12 lines of code
      1 parameters
      1 conditional paths
      uses variable yypin defined in lex.yyp.c
      uses variable ratslexer defined in engine.c
      uses variable _lexer_t::yytext defined in engine.h
      uses variable yyptext defined in lex.yyp.c
      uses variable _lexer_t::yyin defined in engine.h
      uses variable _lexer_t::yylex defined in engine.h
      uses function yyplex(void) defined in lex.yyp.c
      uses variable _lexer_t::yycomment defined in engine.h
      uses variable yypcomment defined in lex.yyp.c
      uses variable _lexer_t::lex_lineno defined in engine.h
      uses variable plex_lineno defined in lex.yyp.c
      uses variable _lexer_t::langhash defined in engine.h
      uses function HashGet(Hash,char *) defined in hash.c
      uses variable database defined in engine.c
      uses variable _lexer_t::lex_column defined in engine.h
      uses variable plex_column defined in lex.yyp.c
      uses variable _lexer_t::lang defined in engine.h
      uses macro definition LANG_PYTHON defined in engine.h
   function setup_c(FILE *) in line 894
      protection public
      12 lines of code
      1 parameters
      1 conditional paths
      uses variable yycin defined in lex.yyc.c
      uses variable ratslexer defined in engine.c
      uses variable _lexer_t::yytext defined in engine.h
      uses variable yyctext defined in lex.yyc.c
      uses variable _lexer_t::yyin defined in engine.h
      uses variable _lexer_t::yylex defined in engine.h
      uses function yyclex(void) defined in lex.yyc.c
      uses variable _lexer_t::yycomment defined in engine.h
      uses variable yyccomment defined in lex.yyc.c
      uses variable _lexer_t::lex_lineno defined in engine.h
      uses variable clex_lineno defined in lex.yyc.c
      uses variable _lexer_t::langhash defined in engine.h
      uses function HashGet(Hash,char *) defined in hash.c
      uses variable database defined in engine.c
      uses variable _lexer_t::lex_column defined in engine.h
      uses variable clex_column defined in lex.yyc.c
      uses variable _lexer_t::lang defined in engine.h
      uses macro definition LANG_C defined in engine.h
   function setup_php(FILE *) in line 907
      protection public
      12 lines of code
      1 parameters
      1 conditional paths
      uses variable yyphpin defined in lex.yyphp.c
      uses variable ratslexer defined in engine.c
      uses variable _lexer_t::yytext defined in engine.h
      uses variable yyphptext defined in lex.yyphp.c
      uses variable _lexer_t::yyin defined in engine.h
      uses variable _lexer_t::yylex defined in engine.h
      uses function yyphplex(void) defined in lex.yyphp.c
      uses variable _lexer_t::yycomment defined in engine.h
      uses variable yyphpcomment defined in lex.yyphp.c
      uses variable _lexer_t::lex_lineno defined in engine.h
      uses variable phplex_lineno defined in lex.yyphp.c
      uses variable _lexer_t::langhash defined in engine.h
      uses function HashGet(Hash,char *) defined in hash.c
      uses variable database defined in engine.c
      uses variable _lexer_t::lex_column defined in engine.h
      uses variable phplex_column defined in lex.yyphp.c
      uses variable _lexer_t::lang defined in engine.h
      uses macro definition LANG_PHP defined in engine.h
   function setup_ruby(FILE *) in line 920
      protection public
      12 lines of code
      1 parameters
      1 conditional paths
      uses variable yyrubyin defined in lex.yyruby.c
      uses variable ratslexer defined in engine.c
      uses variable _lexer_t::yytext defined in engine.h
      uses variable yyrubytext defined in lex.yyruby.c
      uses variable _lexer_t::yyin defined in engine.h
      uses variable _lexer_t::yylex defined in engine.h
      uses function yyrubylex(void) defined in lex.yyruby.c
      uses variable _lexer_t::yycomment defined in engine.h
      uses variable yyrubycomment defined in lex.yyruby.c
      uses variable _lexer_t::lex_lineno defined in engine.h
      uses variable rubylex_lineno defined in lex.yyruby.c
      uses variable _lexer_t::langhash defined in engine.h
      uses function HashGet(Hash,char *) defined in hash.c
      uses variable database defined in engine.c
      uses variable _lexer_t::lex_column defined in engine.h
      uses variable rubylex_column defined in lex.yyruby.c
      uses variable _lexer_t::lang defined in engine.h
      uses macro definition LANG_RUBY defined in engine.h
   function determine_language(char *,FILE *,int) in line 935
      protection public
      55 lines of code
      3 parameters
      14 conditional paths
      uses variable forcelang defined in main.c
      uses macro definition LANG_PYTHON defined in engine.h
      uses function setup_python(FILE *) defined in engine.c
      uses macro definition LANG_C defined in engine.h
      uses function setup_c(FILE *) defined in engine.c
      uses macro definition LANG_PERL defined in engine.h
      uses function setup_perl(FILE *) defined in engine.c
      uses macro definition LANG_PHP defined in engine.h
      uses function setup_php(FILE *) defined in engine.c
      uses macro definition LANG_RUBY defined in engine.h
      uses function setup_ruby(FILE *) defined in engine.c
      uses variable flags defined in engine.h
      uses macro definition RECURSIVE_FILE_SCAN defined in engine.h
   function process_directory(char *,int) in line 992
      protection public
      71 lines of code
      2 parameters
      9 conditional paths
      uses function process_file(char *,int) defined in engine.c
      uses variable forcelang defined in main.c
   function process_file(char *,int) in line 1064
      protection public
      103 lines of code
      2 parameters
      1 conditional paths
      uses variable flags defined in engine.h
      uses macro definition FOLLOW_SYMLINK defined in engine.h
      uses function process_file(char *,int) defined in engine.c
      uses variable forcelang defined in main.c
      uses macro definition RECURSIVE_FILE_SCAN defined in engine.h
      uses function process_directory(char *,int) defined in engine.c
      uses function determine_language(char *,FILE *,int) defined in engine.c
      uses variable ratslexer defined in engine.c
      uses variable _lexer_t::lex_lineno defined in engine.h
      uses variable last_text_line defined in engine.c
      uses variable current_file defined in engine.c
      uses macro definition DEPTH_COUNT defined in engine.h
      uses variable depths defined in engine.c
      uses macro definition NO_STATUS defined in engine.h
      uses macro definition HTML_OUTPUT defined in engine.h
      uses macro definition XML_OUTPUT defined in engine.h
      uses function scan_tokens(processorfn_t,void *) defined in engine.c
      uses function process_toctou(void) defined in engine.c
      uses variable total_lines defined in report.c
      uses variable current_ignore defined in engine.c
      uses variable accumulators defined in engine.c
      uses variable _accumulator_t::text defined in engine.h
      uses function pop_accumulator(void) defined in engine.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/rats/rats-2.4/engine.h
module engine.h
   macro definition DEPTH_PARENTHESIS in line 25
      protection public
   macro definition DEPTH_BRACKET in line 26
      protection public
   macro definition DEPTH_BRACE in line 27
      protection public
   macro definition DEPTH_COUNT in line 28
      protection public
   macro definition INCLUDE_ALL_REFERENCES in line 30
      protection public
   macro definition INPUT_MODE in line 31
      protection public
   macro definition RECURSIVE_FILE_SCAN in line 32
      protection public
   macro definition XML_OUTPUT in line 33
      protection public
   macro definition HTML_OUTPUT in line 34
      protection public
   macro definition FOLLOW_SYMLINK in line 35
      protection public
   macro definition NO_HEADER in line 36
      protection public
   macro definition NO_STATUS in line 37
      protection public
   macro definition NO_FOOTER in line 38
      protection public
   macro definition SHOW_COLUMNS in line 39
      protection public
   macro definition SHOW_CONTEXT in line 40
      protection public
   macro definition ALL_STATIC in line 41
      protection public
   macro definition LANG_PYTHON in line 45
      protection public
   macro definition LANG_C in line 46
      protection public
   macro definition LANG_PERL in line 47
      protection public
   macro definition LANG_PHP in line 48
      protection public
   macro definition LANG_RUBY in line 49
      protection public
   typedef lexer_t in line 1169
      protection public
   typedef argument_t in line 1169
      protection public
   typedef rats_stack_t in line 1169
      protection public
   typedef argscan_t in line 1169
      protection public
   typedef charscan_t in line 1169
      protection public
   typedef accumulator_t in line 1169
      protection public
   typedef toctou_t in line 1169
      protection public
   typedef processorfn_t in line 125
      protection public
   variable flags in line 127
      protection public
   variable database in line 128
      protection public
   variable defaultdb in line 129
      protection public
   variable current_file in line 130
      protection public
   variable current_frame in line 131
      protection public
   function process_file(char *,int) in line 133
      protection public
      103 lines of code
      2 parameters
      17 conditional paths
      uses variable flags defined in engine.h
      uses macro definition FOLLOW_SYMLINK defined in engine.h
      uses function process_file(char *,int) defined in engine.c
      uses variable forcelang defined in main.c
      uses macro definition RECURSIVE_FILE_SCAN defined in engine.h
      uses function process_directory(char *,int) defined in engine.c
      uses function determine_language(char *,FILE *,int) defined in engine.c
      uses variable ratslexer defined in engine.c
      uses variable _lexer_t::lex_lineno defined in engine.h
      uses variable current_file defined in engine.c
      uses macro definition DEPTH_COUNT defined in engine.h
      uses macro definition NO_STATUS defined in engine.h
      uses macro definition HTML_OUTPUT defined in engine.h
      uses macro definition XML_OUTPUT defined in engine.h
      uses variable total_lines defined in report.c
      uses variable _accumulator_t::text defined in engine.h
   variable _lexer_t::lang in line 61
      protection public
   variable _lexer_t::langhash in line 60
      protection public
   variable _lexer_t::lex_column in line 62
      protection public
   variable _lexer_t::lex_lineno in line 59
      protection public
   variable _lexer_t::yycomment in line 58
      protection public
   variable _lexer_t::yyin in line 56
      protection public
   variable _lexer_t::yylex in line 57
      protection public
   variable _lexer_t::yytext in line 55
      protection public
   variable _argument_t::contains_ps in line 70
      protection public
   variable _argument_t::is_constant in line 69
      protection public
   variable _argument_t::next in line 72
      protection public
   variable _argument_t::yytext in line 71
      protection public
   variable _rats_stack_t::argc in line 82
      protection public
   variable _rats_stack_t::argv in line 83
      protection public
   variable _rats_stack_t::column in line 80
      protection public
   variable _rats_stack_t::data in line 79
      protection public
   variable _rats_stack_t::identifier in line 78
      protection public
   variable _rats_stack_t::lineno in line 81
      protection public
   variable _rats_stack_t::next in line 84
      protection public
   variable _argscan_t::current in line 91
      protection public
   variable _argscan_t::depths in line 92
      protection public
   variable _argscan_t::tail in line 90
      protection public
   variable _charscan_t::column in line 100
      protection public
   variable _charscan_t::depth in line 102
      protection public
   variable _charscan_t::initial_type in line 101
      protection public
   variable _charscan_t::last_token in line 99
      protection public
   variable _charscan_t::lineno in line 98
      protection public
   variable _charscan_t::skip in line 103
      protection public
   variable _accumulator_t::length in line 110
      protection public
   variable _accumulator_t::next in line 111
      protection public
   variable _accumulator_t::text in line 109
      protection public
   variable _toctou_t::column in line 117
      protection public
   variable _toctou_t::data in line 119
      protection public
   variable _toctou_t::key in line 120
      protection public
   variable _toctou_t::lineno in line 118
      protection public
   variable _toctou_t::next in line 122
      protection public
   variable _toctou_t::use in line 121
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/rats/rats-2.4/getopt.c
module getopt.c
   macro definition _NO_PROTO in line 30
      protection public
   macro definition const in line 41
      protection public
   macro definition GETOPT_INTERFACE_VERSION in line 55
      protection public
   macro definition _ in line 93
      protection public
   macro definition SWAP_FLAGS in line 297
      protection public
   macro definition NONOPTION_P in line 548
      protection public
   enumeration @0 in line 192
      protection public
   variable optarg in line 119
      protection public
   variable optind in line 134
      protection public
   variable __getopt_initialized in line 140
      protection public
   variable nextchar in line 149
      protection public
   variable opterr in line 154
      protection public
   variable optopt in line 160
      protection public
   variable ordering in line 194
      protection public
   variable posixly_correct in line 197
      protection public
   variable first_nonopt in line 257
      protection public
   variable last_nonopt in line 258
      protection public
   enumvalue REQUIRE_ORDER in line 193
      protection public
   enumvalue PERMUTE in line 193
      protection public
   enumvalue RETURN_IN_ORDER in line 194
      protection public
   function getenv() in line 220
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function my_index(char *,int) in line 224
      protection public
      12 lines of code
      2 parameters
      3 conditional paths
   function exchange(char **) in line 314
      protection public
      78 lines of code
      1 parameters
      7 conditional paths
      uses variable first_nonopt defined in getopt.c
      uses variable last_nonopt defined in getopt.c
      uses variable optind defined in getopt.c
      uses macro definition SWAP_FLAGS defined in getopt.c
      uses function _getopt_initialize(int,char *const *,const char *) defined in getopt.c
   function _getopt_initialize(int,char *const *,const char *) in line 399
      protection public
      64 lines of code
      3 parameters
      9 conditional paths
      uses variable first_nonopt defined in getopt.c
      uses variable last_nonopt defined in getopt.c
      uses variable optind defined in getopt.c
      uses variable nextchar defined in getopt.c
      uses variable posixly_correct defined in getopt.c
      uses function getenv() defined in getopt.c
      uses variable ordering defined in getopt.c
      uses enumvalue RETURN_IN_ORDER defined in getopt.c
      uses enumvalue REQUIRE_ORDER defined in getopt.c
      uses enumvalue PERMUTE defined in getopt.c
   function _getopt_internal(int,char *const *,const char *,const struct option *,int *,int) in line 521
      protection public
      454 lines of code
      6 parameters
      70 conditional paths
      uses variable optarg defined in getopt.c
      uses variable optind defined in getopt.c
      uses variable __getopt_initialized defined in getopt.c
      uses function _getopt_initialize(int,char *const *,const char *) defined in getopt.c
      uses variable nextchar defined in getopt.c
      uses variable last_nonopt defined in getopt.c
      uses variable first_nonopt defined in getopt.c
      uses variable ordering defined in getopt.c
      uses enumvalue PERMUTE defined in getopt.c
      uses function exchange(char **) defined in getopt.c
      uses macro definition NONOPTION_P defined in getopt.c
      uses enumvalue REQUIRE_ORDER defined in getopt.c
      uses function my_index(char *,int) defined in getopt.c
      uses variable option::name defined in getopt.h
      uses variable opterr defined in getopt.c
      uses macro definition _ defined in getopt.c
      uses variable optopt defined in getopt.c
      uses variable option::has_arg defined in getopt.h
      uses variable option::val defined in getopt.h
      uses variable option::flag defined in getopt.h
      uses variable posixly_correct defined in getopt.c
   function getopt(int,char *const *,const char *) in line 977
      protection public
      10 lines of code
      3 parameters
      1 conditional paths
      uses function _getopt_internal(int,char *const *,const char *,const struct option *,int *,int) defined in getopt.c
   function getopt_long(int,char *const *,const char *,const struct option *,int *) in line 990
      protection public
      9 lines of code
      5 parameters
      20 conditional paths
      uses function _getopt_internal(int,char *const *,const char *,const struct option *,int *,int) defined in getopt.c
      uses function main(int,char **) defined in main.c
      uses variable optind defined in getopt.c
      uses function getopt(int,char *const *,const char *) defined in getopt.c
      uses variable optarg defined in getopt.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/rats/rats-2.4/getopt.h
module getopt.h
   macro definition no_argument in line 97
      protection public
   macro definition required_argument in line 98
      protection public
   macro definition optional_argument in line 99
      protection public
   variable optarg in line 35
      protection public
   variable optind in line 49
      protection public
   variable opterr in line 54
      protection public
   variable optopt in line 58
      protection public
   function getopt() in line 122
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function getopt_long() in line 123
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function getopt_long_only() in line 124
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   function _getopt_internal() in line 126
      protection public
      1 lines of code
      0 parameters
      1 conditional paths
   variable option::flag in line 91
      protection public
   variable option::has_arg in line 90
      protection public
   variable option::name in line 86
      protection public
   variable option::val in line 92
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/rats/rats-2.4/hash.c
module hash.c
   function HashInit() in line 25
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function hash_create(hashcount_t,hash_comp_t,hash_fun_t) defined in kazhash.c
      uses function HashCompare(const void *,const void *) defined in hash.c
   function HashCompare(const void *,const void *) in line 30
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function HashInsert(Hash,void *,char *) in line 35
      protection public
      26 lines of code
      3 parameters
      1 conditional paths
      uses function hnode_create(void *) defined in kazhash.c
      uses function hash_lookup(hash_t *,const void *) defined in kazhash.c
      uses function hash_delete(hash_t *,hnode_t *) defined in kazhash.c
      uses function hash_insert(hash_t *,hnode_t *,const void *) defined in kazhash.c
   function HashGet(Hash,char *) in line 62
      protection public
      10 lines of code
      2 parameters
      1 conditional paths
      uses function hash_lookup(hash_t *,const void *) defined in kazhash.c
      uses macro definition hnode_get defined in kazhash.h
   function HashCount(Hash) in line 75
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses macro definition hash_count defined in kazhash.h
   function HashKeys(Hash) in line 83
      protection public
      19 lines of code
      1 parameters
      1 conditional paths
      uses function HashCount(Hash) defined in hash.c
      uses function hash_scan_begin(hscan_t *,hash_t *) defined in kazhash.c
      uses function hash_scan_next(hscan_t *) defined in kazhash.c
      uses macro definition hnode_getkey defined in kazhash.h
   function HashFreeKeys(Hash,char **) in line 104
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/rats/rats-2.4/hash.h
module hash.h
   typedef Hash in line 25
      protection public
   function HashMangle(const void *) in line 27
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function HashCompare(const void *,const void *) in line 28
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function HashInit() in line 30
      protection public
      4 lines of code
      0 parameters
      1 conditional paths
      uses function hash_create(hashcount_t,hash_comp_t,hash_fun_t) defined in kazhash.c
      uses function HashCompare(const void *,const void *) defined in hash.c
   function HashInsert(Hash,void *,char *) in line 31
      protection public
      26 lines of code
      3 parameters
      4 conditional paths
      uses function hnode_create(void *) defined in kazhash.c
      uses function hash_lookup(hash_t *,const void *) defined in kazhash.c
      uses function hash_delete(hash_t *,hnode_t *) defined in kazhash.c
      uses function hash_insert(hash_t *,hnode_t *,const void *) defined in kazhash.c
   function HashGet(Hash,char *) in line 32
      protection public
      10 lines of code
      2 parameters
      2 conditional paths
      uses function hash_lookup(hash_t *,const void *) defined in kazhash.c
      uses macro definition hnode_get defined in kazhash.h
   function HashDelete(Hash,char *) in line 33
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function HashCount(Hash) in line 34
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses macro definition hash_count defined in kazhash.h
   function HashKeys(Hash) in line 35
      protection public
      19 lines of code
      1 parameters
      2 conditional paths
      uses function HashCount(Hash) defined in hash.c
      uses function hash_scan_begin(hscan_t *,hash_t *) defined in kazhash.c
      uses function hash_scan_next(hscan_t *) defined in kazhash.c
      uses macro definition hnode_getkey defined in kazhash.h
   function HashFreeKeys(Hash,char **) in line 36
      protection public
      5 lines of code
      2 parameters
      2 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/rats/rats-2.4/kazhash.c
module kazhash.c
   macro definition HASH_IMPLEMENTATION in line 25
      protection public
   macro definition INIT_BITS in line 32
      protection public
   macro definition INIT_SIZE in line 33
      protection public
   macro definition INIT_MASK in line 34
      protection public
   macro definition next in line 36
      protection public
   macro definition key in line 37
      protection public
   macro definition data in line 38
      protection public
   macro definition hkey in line 39
      protection public
   macro definition table in line 41
      protection public
   macro definition nchains in line 42
      protection public
   macro definition nodecount in line 43
      protection public
   macro definition maxcount in line 44
      protection public
   macro definition highmark in line 45
      protection public
   macro definition lowmark in line 46
      protection public
   macro definition compare in line 47
      protection public
   macro definition function in line 48
      protection public
   macro definition allocnode in line 49
      protection public
   macro definition freenode in line 50
      protection public
   macro definition context in line 51
      protection public
   macro definition mask in line 52
      protection public
   macro definition dynamic in line 53
      protection public
   macro definition table in line 55
      protection public
   macro definition chain in line 56
      protection public
   variable hash_val_t_bit in line 63
      protection public
   function hnode_alloc(void *) in line 58
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function hnode_free(hnode_t *,void *) in line 59
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
   function hash_fun_default(const void *) in line 60
      protection public
      22 lines of code
      1 parameters
      2 conditional paths
      uses macro definition key defined in kazhash.c
   function hash_comp_default(const void *,const void *) in line 61
      protection public
      4 lines of code
      2 parameters
      34 conditional paths
      uses function main(int,char **) defined in main.c
      uses function hash_create(hashcount_t,hash_comp_t,hash_fun_t) defined in kazhash.c
      uses macro definition HASHCOUNT_T_MAX defined in kazhash.h
      uses macro definition key defined in kazhash.c
      uses variable hash_val_t_bit defined in kazhash.c
      uses function hash_alloc_insert(hash_t *,const void *,void *) defined in kazhash.c
      uses function hash_lookup(hash_t *,const void *) defined in kazhash.c
      uses function hnode_get(hnode_t *) defined in kazhash.c
      uses function hnode_getkey(hnode_t *) defined in kazhash.c
      uses function hash_scan_delfree(hash_t *,hnode_t *) defined in kazhash.c
      uses function hash_size(hash_t *) defined in kazhash.c
      uses function hash_count(hash_t *) defined in kazhash.c
      uses function hash_scan_begin(hscan_t *,hash_t *) defined in kazhash.c
      uses function hash_scan_next(hscan_t *) defined in kazhash.c
      uses function grow_table(hash_t *) defined in kazhash.c
      uses function shrink_table(hash_t *) defined in kazhash.c
      uses function hash_set_allocator(hash_t *,hnode_alloc_t,hnode_free_t,void *) defined in kazhash.c
   function compute_bits(void) in line 78
      protection public
      12 lines of code
      1 parameters
      2 conditional paths
      uses macro definition HASH_VAL_T_MAX defined in kazhash.h
      uses variable hash_val_t_bit defined in kazhash.c
   function is_power_of_two(hash_val_t) in line 95
      protection public
      8 lines of code
      1 parameters
      3 conditional paths
   function compute_mask(hashcount_t) in line 108
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses function is_power_of_two(hash_val_t) defined in kazhash.c
   function clear_table(hash_t *) in line 120
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
   function grow_table(hash_t *) in line 156
      protection public
      43 lines of code
      1 parameters
      5 conditional paths
      uses macro definition mask defined in kazhash.c
      uses macro definition chain defined in kazhash.c
      uses macro definition next defined in kazhash.c
      uses function hash_verify(hash_t *) defined in kazhash.c
   function shrink_table(hash_t *) in line 230
      protection public
      30 lines of code
      1 parameters
      6 conditional paths
      uses macro definition chain defined in kazhash.c
      uses macro definition nchains defined in kazhash.c
      uses function hash_verify(hash_t *) defined in kazhash.c
   function hash_create(hashcount_t,hash_comp_t,hash_fun_t) in line 291
      protection public
      34 lines of code
      3 parameters
      1 conditional paths
      uses variable hash_val_t_bit defined in kazhash.c
      uses function compute_bits(void) defined in kazhash.c
      uses macro definition INIT_SIZE defined in kazhash.c
      uses macro definition maxcount defined in kazhash.c
      uses function hash_comp_default(const void *,const void *) defined in kazhash.c
      uses function hash_fun_default(const void *) defined in kazhash.c
      uses function hnode_alloc(void *) defined in kazhash.c
      uses function hnode_free(hnode_t *,void *) defined in kazhash.c
      uses macro definition INIT_MASK defined in kazhash.c
      uses function clear_table(hash_t *) defined in kazhash.c
      uses function hash_verify(hash_t *) defined in kazhash.c
   function hash_set_allocator(hash_t *,hnode_alloc_t,hnode_free_t,void *) in line 330
      protection public
      10 lines of code
      4 parameters
      1 conditional paths
      uses function hash_count(hash_t *) defined in kazhash.c
      uses function hnode_alloc(void *) defined in kazhash.c
      uses function hnode_free(hnode_t *,void *) defined in kazhash.c
      uses macro definition context defined in kazhash.c
   function hash_free_nodes(hash_t *) in line 346
      protection public
      12 lines of code
      1 parameters
      1 conditional paths
      uses function hash_scan_begin(hscan_t *,hash_t *) defined in kazhash.c
      uses function hash_scan_next(hscan_t *) defined in kazhash.c
      uses function hash_scan_delete(hash_t *,hnode_t *) defined in kazhash.c
      uses function clear_table(hash_t *) defined in kazhash.c
   function hash_free(hash_t *) in line 364
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses function hash_free_nodes(hash_t *) defined in kazhash.c
      uses function hash_destroy(hash_t *) defined in kazhash.c
   function hash_destroy(hash_t *) in line 377
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses variable hash_val_t_bit defined in kazhash.c
      uses function hash_isempty(hash_t *) defined in kazhash.c
   function hash_init(hash_t *,hashcount_t,hash_comp_t,hash_fun_t,hnode_t **,hashcount_t) in line 398
      protection public
      23 lines of code
      6 parameters
      1 conditional paths
      uses variable hash_val_t_bit defined in kazhash.c
      uses function compute_bits(void) defined in kazhash.c
      uses function is_power_of_two(hash_val_t) defined in kazhash.c
      uses macro definition nchains defined in kazhash.c
      uses macro definition table defined in kazhash.c
      uses macro definition maxcount defined in kazhash.c
      uses function hash_comp_default(const void *,const void *) defined in kazhash.c
      uses function hash_fun_default(const void *) defined in kazhash.c
      uses function compute_mask(hashcount_t) defined in kazhash.c
      uses function clear_table(hash_t *) defined in kazhash.c
      uses function hash_verify(hash_t *) defined in kazhash.c
   function hash_scan_begin(hscan_t *,hash_t *) in line 433
      protection public
      19 lines of code
      2 parameters
      1 conditional paths
      uses macro definition nchains defined in kazhash.c
      uses macro definition chain defined in kazhash.c
   function hash_scan_next(hscan_t *) in line 479
      protection public
      25 lines of code
      1 parameters
      1 conditional paths
      uses macro definition next defined in kazhash.c
      uses macro definition chain defined in kazhash.c
      uses macro definition nchains defined in kazhash.c
      uses variable hash_val_t_bit defined in kazhash.c
      uses macro definition table defined in kazhash.c
   function hash_insert(hash_t *,hnode_t *,const void *) in line 518
      protection public
      23 lines of code
      3 parameters
      1 conditional paths
      uses macro definition hkey defined in kazhash.c
      uses macro definition chain defined in kazhash.c
      uses variable hash_val_t_bit defined in kazhash.c
      uses function hash_lookup(hash_t *,const void *) defined in kazhash.c
      uses macro definition key defined in kazhash.c
      uses function grow_table(hash_t *) defined in kazhash.c
      uses function hash_verify(hash_t *) defined in kazhash.c
   function hash_lookup(hash_t *,const void *) in line 556
      protection public
      15 lines of code
      2 parameters
      1 conditional paths
      uses macro definition hkey defined in kazhash.c
      uses macro definition chain defined in kazhash.c
      uses macro definition key defined in kazhash.c
   function hash_delete(hash_t *,hnode_t *) in line 590
      protection public
      32 lines of code
      2 parameters
      1 conditional paths
      uses macro definition chain defined in kazhash.c
      uses function hash_lookup(hash_t *,const void *) defined in kazhash.c
      uses variable hash_val_t_bit defined in kazhash.c
      uses macro definition INIT_SIZE defined in kazhash.c
      uses function shrink_table(hash_t *) defined in kazhash.c
      uses function hash_verify(hash_t *) defined in kazhash.c
   function hash_alloc_insert(hash_t *,const void *,void *) in line 623
      protection public
      11 lines of code
      3 parameters
      1 conditional paths
      uses function hnode_init(hnode_t *,void *) defined in kazhash.c
      uses macro definition data defined in kazhash.c
      uses function hash_insert(hash_t *,hnode_t *,const void *) defined in kazhash.c
      uses macro definition key defined in kazhash.c
   function hash_delete_free(hash_t *,hnode_t *) in line 635
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses function hash_delete(hash_t *,hnode_t *) defined in kazhash.c
   function hash_scan_delete(hash_t *,hnode_t *) in line 646
      protection public
      25 lines of code
      2 parameters
      1 conditional paths
      uses macro definition chain defined in kazhash.c
      uses function hash_lookup(hash_t *,const void *) defined in kazhash.c
      uses variable hash_val_t_bit defined in kazhash.c
      uses function hash_verify(hash_t *) defined in kazhash.c
   function hash_scan_delfree(hash_t *,hnode_t *) in line 676
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses function hash_scan_delete(hash_t *,hnode_t *) defined in kazhash.c
   function hash_verify(hash_t *) in line 691
      protection public
      28 lines of code
      1 parameters
      1 conditional paths
      uses macro definition chain defined in kazhash.c
      uses function is_power_of_two(hash_val_t) defined in kazhash.c
   function hash_isfull(hash_t *) in line 726
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function hash_isempty(hash_t *) in line 737
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function hnode_create(void *) in line 757
      protection public
      9 lines of code
      1 parameters
      1 conditional paths
      uses macro definition data defined in kazhash.c
   function hnode_init(hnode_t *,void *) in line 771
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
      uses macro definition data defined in kazhash.c
   function hnode_destroy(hnode_t *) in line 782
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function hnode_put(hnode_t *,void *) in line 788
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses macro definition data defined in kazhash.c
   function hnode_get(hnode_t *) in line 794
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function hnode_getkey(hnode_t *) in line 800
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function hash_count(hash_t *) in line 806
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function hash_size(hash_t *) in line 812
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/rats/rats-2.4/kazhash.h
module kazhash.h
   macro definition HASHCOUNT_T_MAX in line 38
      protection public
   macro definition HASH_VAL_T_MAX in line 41
      protection public
   macro definition HASH_VAL_T_BIT in line 46
      protection public
   macro definition hash_isfull in line 226
      protection public
   macro definition hash_isempty in line 228
      protection public
   macro definition hash_count in line 229
      protection public
   macro definition hash_size in line 230
      protection public
   macro definition hnode_get in line 231
      protection public
   macro definition hnode_getkey in line 232
      protection public
   macro definition hnode_put in line 233
      protection public
   typedef hashcount_t in line 37
      protection public
   typedef hash_val_t in line 40
      protection public
   typedef hnode_t in line 82
      protection public
   typedef hash_comp_t in line 91
      protection public
   typedef hash_fun_t in line 105
      protection public
   typedef hnode_alloc_t in line 111
      protection public
   typedef hnode_free_t in line 112
      protection public
   typedef hash_t in line 167
      protection public
   typedef hscan_t in line 187
      protection public
   variable hash_val_t_bit in line 43
      protection public
   function hash_create(hashcount_t,hash_comp_t,hash_fun_t) in line 189
      protection public
      34 lines of code
      3 parameters
      4 conditional paths
      uses variable hash_val_t_bit defined in kazhash.c
      uses macro definition INIT_SIZE defined in kazhash.c
      uses macro definition maxcount defined in kazhash.c
      uses macro definition INIT_MASK defined in kazhash.c
      uses function hash_verify(hash_t *) defined in kazhash.c
   function hash_set_allocator(hash_t *,hnode_alloc_t,hnode_free_t,void *) in line 190
      protection public
      10 lines of code
      4 parameters
      1 conditional paths
      uses function hash_count(hash_t *) defined in kazhash.c
      uses macro definition context defined in kazhash.c
   function hash_destroy(hash_t *) in line 191
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses variable hash_val_t_bit defined in kazhash.c
      uses function hash_isempty(hash_t *) defined in kazhash.c
   function hash_free_nodes(hash_t *) in line 192
      protection public
      12 lines of code
      1 parameters
      2 conditional paths
      uses function hash_scan_begin(hscan_t *,hash_t *) defined in kazhash.c
      uses function hash_scan_next(hscan_t *) defined in kazhash.c
      uses function hash_scan_delete(hash_t *,hnode_t *) defined in kazhash.c
   function hash_free(hash_t *) in line 193
      protection public
      8 lines of code
      1 parameters
      1 conditional paths
      uses function hash_free_nodes(hash_t *) defined in kazhash.c
      uses function hash_destroy(hash_t *) defined in kazhash.c
   function hash_init(hash_t *,hashcount_t,hash_comp_t,hash_fun_t,hnode_t **,hashcount_t) in line 194
      protection public
      23 lines of code
      6 parameters
      2 conditional paths
      uses variable hash_val_t_bit defined in kazhash.c
      uses macro definition nchains defined in kazhash.c
      uses macro definition table defined in kazhash.c
      uses macro definition maxcount defined in kazhash.c
      uses function hash_verify(hash_t *) defined in kazhash.c
   function hash_insert(hash_t *,hnode_t *,const void *) in line 196
      protection public
      23 lines of code
      3 parameters
      2 conditional paths
      uses macro definition hkey defined in kazhash.c
      uses macro definition chain defined in kazhash.c
      uses variable hash_val_t_bit defined in kazhash.c
      uses function hash_lookup(hash_t *,const void *) defined in kazhash.c
      uses macro definition key defined in kazhash.c
      uses function hash_verify(hash_t *) defined in kazhash.c
   function hash_lookup(hash_t *,const void *) in line 197
      protection public
      15 lines of code
      2 parameters
      3 conditional paths
      uses macro definition hkey defined in kazhash.c
      uses macro definition chain defined in kazhash.c
      uses macro definition key defined in kazhash.c
   function hash_delete(hash_t *,hnode_t *) in line 198
      protection public
      32 lines of code
      2 parameters
      4 conditional paths
      uses macro definition chain defined in kazhash.c
      uses function hash_lookup(hash_t *,const void *) defined in kazhash.c
      uses variable hash_val_t_bit defined in kazhash.c
      uses macro definition INIT_SIZE defined in kazhash.c
      uses function hash_verify(hash_t *) defined in kazhash.c
   function hash_alloc_insert(hash_t *,const void *,void *) in line 199
      protection public
      11 lines of code
      3 parameters
      2 conditional paths
      uses function hnode_init(hnode_t *,void *) defined in kazhash.c
      uses macro definition data defined in kazhash.c
      uses function hash_insert(hash_t *,hnode_t *,const void *) defined in kazhash.c
      uses macro definition key defined in kazhash.c
   function hash_delete_free(hash_t *,hnode_t *) in line 200
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses function hash_delete(hash_t *,hnode_t *) defined in kazhash.c
   function hnode_put(hnode_t *,void *) in line 202
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses macro definition data defined in kazhash.c
   function hnode_get(hnode_t *) in line 203
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function hnode_getkey(hnode_t *) in line 204
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function hash_count(hash_t *) in line 205
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function hash_size(hash_t *) in line 206
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function hash_isfull(hash_t *) in line 208
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function hash_isempty(hash_t *) in line 209
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function hash_scan_begin(hscan_t *,hash_t *) in line 211
      protection public
      19 lines of code
      2 parameters
      3 conditional paths
      uses macro definition nchains defined in kazhash.c
      uses macro definition chain defined in kazhash.c
   function hash_scan_next(hscan_t *) in line 212
      protection public
      25 lines of code
      1 parameters
      5 conditional paths
      uses macro definition next defined in kazhash.c
      uses macro definition chain defined in kazhash.c
      uses macro definition nchains defined in kazhash.c
      uses variable hash_val_t_bit defined in kazhash.c
      uses macro definition table defined in kazhash.c
   function hash_scan_delete(hash_t *,hnode_t *) in line 213
      protection public
      25 lines of code
      2 parameters
      3 conditional paths
      uses macro definition chain defined in kazhash.c
      uses function hash_lookup(hash_t *,const void *) defined in kazhash.c
      uses variable hash_val_t_bit defined in kazhash.c
      uses function hash_verify(hash_t *) defined in kazhash.c
   function hash_scan_delfree(hash_t *,hnode_t *) in line 214
      protection public
      5 lines of code
      2 parameters
      1 conditional paths
      uses function hash_scan_delete(hash_t *,hnode_t *) defined in kazhash.c
   function hash_verify(hash_t *) in line 216
      protection public
      28 lines of code
      1 parameters
      9 conditional paths
      uses macro definition chain defined in kazhash.c
   function hnode_create(void *) in line 218
      protection public
      9 lines of code
      1 parameters
      2 conditional paths
      uses macro definition data defined in kazhash.c
   function hnode_init(hnode_t *,void *) in line 219
      protection public
      6 lines of code
      2 parameters
      1 conditional paths
      uses macro definition data defined in kazhash.c
   function hnode_destroy(hnode_t *) in line 220
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   variable hnode_t::hash_data in line 77
      protection public
   variable hnode_t::hash_hkey in line 78
      protection public
   variable hnode_t::hash_key in line 76
      protection public
   variable hnode_t::hash_next in line 75
      protection public
   variable hash_t::hash_allocnode in line 159
      protection public
   variable hash_t::hash_compare in line 157
      protection public
   variable hash_t::hash_context in line 161
      protection public
   variable hash_t::hash_dynamic in line 163
      protection public
   variable hash_t::hash_freenode in line 160
      protection public
   variable hash_t::hash_function in line 158
      protection public
   variable hash_t::hash_highmark in line 155
      protection public
   variable hash_t::hash_lowmark in line 156
      protection public
   variable hash_t::hash_mask in line 162
      protection public
   variable hash_t::hash_maxcount in line 154
      protection public
   variable hash_t::hash_nchains in line 152
      protection public
   variable hash_t::hash_nodecount in line 153
      protection public
   variable hash_t::hash_table in line 151
      protection public
   variable hscan_t::hash_chain in line 182
      protection public
   variable hscan_t::hash_next in line 183
      protection public
   variable hscan_t::hash_table in line 181
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/rats/rats-2.4/lex.yyc.c
module lex.yyc.c
   macro definition YY_INT_ALIGNED in line 4
      protection public
   macro definition FLEX_SCANNER in line 8
      protection public
   macro definition YY_FLEX_MAJOR_VERSION in line 9
      protection public
   macro definition YY_FLEX_MINOR_VERSION in line 10
      protection public
   macro definition YY_FLEX_SUBMINOR_VERSION in line 11
      protection public
   macro definition FLEX_BETA in line 13
      protection public
   macro definition FLEXINT_H in line 29
      protection public
   macro definition INT8_MIN in line 60
      protection public
   macro definition INT16_MIN in line 63
      protection public
   macro definition INT32_MIN in line 66
      protection public
   macro definition INT8_MAX in line 69
      protection public
   macro definition INT16_MAX in line 72
      protection public
   macro definition INT32_MAX in line 75
      protection public
   macro definition UINT8_MAX in line 78
      protection public
   macro definition UINT16_MAX in line 81
      protection public
   macro definition UINT32_MAX in line 84
      protection public
   macro definition yyconst in line 106
      protection public
   macro definition YY_NULL in line 110
      protection public
   macro definition YY_SC_TO_UI in line 117
      protection public
   macro definition BEGIN in line 123
      protection public
   macro definition YY_START in line 129
      protection public
   macro definition YYSTATE in line 130
      protection public
   macro definition YY_STATE_EOF in line 133
      protection public
   macro definition YY_NEW_FILE in line 136
      protection public
   macro definition YY_END_OF_BUFFER_CHAR in line 138
      protection public
   macro definition YY_BUF_SIZE in line 142
      protection public
   macro definition YY_STATE_BUF_SIZE in line 147
      protection public
   macro definition YY_TYPEDEF_YY_BUFFER_STATE in line 150
      protection public
   macro definition EOB_ACT_CONTINUE_SCAN in line 158
      protection public
   macro definition EOB_ACT_END_OF_FILE in line 159
      protection public
   macro definition EOB_ACT_LAST_MATCH in line 160
      protection public
   macro definition YY_LESS_LINENO in line 162
      protection public
   macro definition yyless in line 165
      protection public
   macro definition unput in line 178
      protection public
   macro definition YY_TYPEDEF_YY_SIZE_T in line 186
      protection public
   macro definition YY_STRUCT_YY_BUFFER_STATE in line 191
      protection public
   macro definition YY_BUFFER_NEW in line 238
      protection public
   macro definition YY_BUFFER_NORMAL in line 239
      protection public
   macro definition YY_BUFFER_EOF_PENDING in line 250
      protection public
   macro definition YY_CURRENT_BUFFER in line 266
      protection public
   macro definition YY_CURRENT_BUFFER_LVALUE in line 273
      protection public
   macro definition YY_FLUSH_BUFFER in line 302
      protection public
   macro definition yy_new_buffer in line 312
      protection public
   macro definition yy_set_interactive in line 314
      protection public
   macro definition yy_set_bol in line 324
      protection public
   macro definition YY_AT_BOL in line 334
      protection public
   macro definition yytext_ptr in line 349
      protection public
   macro definition YY_DO_BEFORE_ACTION in line 359
      protection public
   macro definition YY_NUM_RULES in line 366
      protection public
   macro definition YY_END_OF_BUFFER in line 367
      protection public
   macro definition REJECT in line 5121
      protection public
   macro definition yymore in line 5122
      protection public
   macro definition YY_MORE_ADJ in line 5123
      protection public
   macro definition YY_RESTORE_YY_MORE_OFFSET in line 5124
      protection public
   macro definition YY_INPUT in line 5166
      protection public
   macro definition INITIAL in line 5190
      protection public
   macro definition YY_EXTRA_TYPE in line 5201
      protection public
   macro definition YY_READ_BUF_SIZE in line 5240
      protection public
   macro definition ECHO in line 5248
      protection public
   macro definition yyterminate in line 5276
      protection public
   macro definition YY_START_STACK_INCR in line 5281
      protection public
   macro definition YY_FATAL_ERROR in line 5286
      protection public
   macro definition YY_DECL_IS_OURS in line 5295
      protection public
   macro definition YY_DECL in line 5299
      protection public
   macro definition YY_USER_ACTION in line 5306
      protection public
   macro definition YY_BREAK in line 5311
      protection public
   macro definition YY_RULE_SETUP in line 5314
      protection public
   macro definition YY_EXIT_FAILURE in line 6652
      protection public
   macro definition yyless in line 6664
      protection public
   macro definition YYTABLES_NAME in line 6854
      protection public
   typedef flex_int8_t in line 50
      protection public
   typedef flex_int16_t in line 51
      protection public
   typedef flex_int32_t in line 52
      protection public
   typedef flex_uint8_t in line 53
      protection public
   typedef flex_uint16_t in line 54
      protection public
   typedef flex_uint32_t in line 55
      protection public
   typedef YY_BUFFER_STATE in line 151
      protection public
   typedef yy_size_t in line 187
      protection public
   typedef YY_CHAR in line 338
      protection public
   typedef yy_state_type in line 342
      protection public
   variable yycleng in line 154
      protection public
   variable yycin in line 156
      protection public
   variable yycout in line 156
      protection public
   variable yy_buffer_stack_top in line 256
      protection public
   variable yy_buffer_stack_max in line 257
      protection public
   variable yy_buffer_stack in line 258
      protection public
   variable yy_hold_char in line 276
      protection public
   variable yy_n_chars in line 277
      protection public
   variable yy_c_buf_p in line 281
      protection public
   variable yy_init in line 282
      protection public
   variable yy_start in line 283
      protection public
   variable yy_did_buffer_switch_on_eof in line 288
      protection public
   variable yyclineno in line 344
      protection public
   variable yyctext in line 348
      protection public
   variable yy_transition in line 373
      protection public
   variable yy_start_state_list in line 5104
      protection public
   variable yy_last_accepting_state in line 5112
      protection public
   variable yy_last_accepting_cpos in line 5113
      protection public
   variable yyc_flex_debug in line 5115
      protection public
   variable clexreal_column in line 5150
      protection public
   variable clex_column in line 5151
      protection public
   variable clex_lineno in line 5152
      protection public
   variable yyclength in line 5153
      protection public
   variable yycsize in line 5154
      protection public
   variable yyccomment in line 5155
      protection public
   variable YY_DECL in line 5319
      protection public
   variable yy_cp in line 5322
      protection public
   variable yy_bp in line 5322
      protection public
   variable yy_act in line 5323
      protection public
   function yycrestart(FILE *) in line 290
      protection public
      12 lines of code
      1 parameters
      2 conditional paths
      uses macro definition YY_CURRENT_BUFFER defined in lex.yyc.c
      uses function yycensure_buffer_stack(void) defined in lex.yyc.c
      uses macro definition YY_CURRENT_BUFFER_LVALUE defined in lex.yyc.c
      uses function yyc_create_buffer(FILE *,int) defined in lex.yyc.c
      uses variable yycin defined in lex.yyc.c
      uses macro definition YY_BUF_SIZE defined in lex.yyc.c
      uses function yyc_init_buffer(YY_BUFFER_STATE,FILE *) defined in lex.yyc.c
      uses function yyc_load_buffer_state(void) defined in lex.yyc.c
   function yyc_switch_to_buffer(YY_BUFFER_STATE) in line 291
      protection public
      30 lines of code
      1 parameters
      3 conditional paths
      uses function yycensure_buffer_stack(void) defined in lex.yyc.c
      uses macro definition YY_CURRENT_BUFFER defined in lex.yyc.c
      uses variable yy_c_buf_p defined in lex.yyc.c
      uses variable yy_hold_char defined in lex.yyc.c
      uses macro definition YY_CURRENT_BUFFER_LVALUE defined in lex.yyc.c
      uses variable yy_buffer_state::yy_n_chars defined in lex.yyruby.c
      uses function yyc_load_buffer_state(void) defined in lex.yyc.c
      uses variable yy_did_buffer_switch_on_eof defined in lex.yyc.c
   function yyc_create_buffer(FILE *,int) in line 292
      protection public
      23 lines of code
      2 parameters
      3 conditional paths
      uses function yycalloc(yy_size_t) defined in lex.yyc.c
      uses macro definition YY_FATAL_ERROR defined in lex.yyc.c
      uses variable yy_buffer_state::yy_buf_size defined in lex.yyruby.c
      uses variable yy_buffer_state::yy_ch_buf defined in lex.yyruby.c
      uses variable yy_buffer_state::yy_is_our_buffer defined in lex.yyruby.c
      uses function yyc_init_buffer(YY_BUFFER_STATE,FILE *) defined in lex.yyc.c
   function yyc_delete_buffer(YY_BUFFER_STATE) in line 293
      protection public
      14 lines of code
      1 parameters
      4 conditional paths
      uses macro definition YY_CURRENT_BUFFER defined in lex.yyc.c
      uses macro definition YY_CURRENT_BUFFER_LVALUE defined in lex.yyc.c
      uses variable yy_buffer_state::yy_is_our_buffer defined in lex.yyruby.c
      uses function yycfree(void *) defined in lex.yyc.c
      uses variable yy_buffer_state::yy_ch_buf defined in lex.yyruby.c
      uses function isatty(int) defined in lex.yyc.c
   function yyc_flush_buffer(YY_BUFFER_STATE) in line 294
      protection public
      22 lines of code
      1 parameters
      3 conditional paths
      uses variable yy_buffer_state::yy_n_chars defined in lex.yyruby.c
      uses variable yy_buffer_state::yy_ch_buf defined in lex.yyruby.c
      uses macro definition YY_END_OF_BUFFER_CHAR defined in lex.yyc.c
      uses variable yy_buffer_state::yy_buf_pos defined in lex.yyruby.c
      uses variable yy_buffer_state::yy_at_bol defined in lex.yyruby.c
      uses variable yy_buffer_state::yy_buffer_status defined in lex.yyruby.c
      uses macro definition YY_BUFFER_NEW defined in lex.yyc.c
      uses macro definition YY_CURRENT_BUFFER defined in lex.yyc.c
      uses function yyc_load_buffer_state(void) defined in lex.yyc.c
   function yycpush_buffer_state(YY_BUFFER_STATE) in line 295
      protection public
      25 lines of code
      1 parameters
      4 conditional paths
      uses function yycensure_buffer_stack(void) defined in lex.yyc.c
      uses macro definition YY_CURRENT_BUFFER defined in lex.yyc.c
      uses variable yy_c_buf_p defined in lex.yyc.c
      uses variable yy_hold_char defined in lex.yyc.c
      uses macro definition YY_CURRENT_BUFFER_LVALUE defined in lex.yyc.c
      uses variable yy_buffer_state::yy_n_chars defined in lex.yyruby.c
      uses variable yy_buffer_stack_top defined in lex.yyc.c
      uses function yyc_load_buffer_state(void) defined in lex.yyc.c
      uses variable yy_did_buffer_switch_on_eof defined in lex.yyc.c
   function yycpop_buffer_state(void) in line 296
      protection public
      15 lines of code
      1 parameters
      4 conditional paths
      uses macro definition YY_CURRENT_BUFFER defined in lex.yyc.c
      uses function yyc_delete_buffer(YY_BUFFER_STATE) defined in lex.yyc.c
      uses macro definition YY_CURRENT_BUFFER_LVALUE defined in lex.yyc.c
      uses variable yy_buffer_stack_top defined in lex.yyc.c
      uses function yyc_load_buffer_state(void) defined in lex.yyc.c
      uses variable yy_did_buffer_switch_on_eof defined in lex.yyc.c
   function yycensure_buffer_stack(void) in line 298
      protection public
      38 lines of code
      1 parameters
      3 conditional paths
      uses variable yy_buffer_stack defined in lex.yyc.c
      uses function yycalloc(yy_size_t) defined in lex.yyc.c
      uses variable yy_buffer_stack_max defined in lex.yyc.c
      uses variable yy_buffer_stack_top defined in lex.yyc.c
      uses function yycrealloc(void *,yy_size_t) defined in lex.yyc.c
   function yyc_load_buffer_state(void) in line 299
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses variable yy_buffer_state::yy_n_chars defined in lex.yyruby.c
      uses macro definition YY_CURRENT_BUFFER_LVALUE defined in lex.yyc.c
      uses macro definition yytext_ptr defined in lex.yyc.c
      uses variable yy_c_buf_p defined in lex.yyc.c
      uses variable yycin defined in lex.yyc.c
      uses variable yy_hold_char defined in lex.yyc.c
   function yyc_init_buffer(YY_BUFFER_STATE,FILE *) in line 300
      protection public
      23 lines of code
      2 parameters
      2 conditional paths
      uses function yyc_flush_buffer(YY_BUFFER_STATE) defined in lex.yyc.c
      uses variable yy_buffer_state::yy_input_file defined in lex.yyruby.c
      uses variable yy_buffer_state::yy_fill_buffer defined in lex.yyruby.c
      uses macro definition YY_CURRENT_BUFFER defined in lex.yyc.c
      uses variable yy_buffer_state::yy_bs_lineno defined in lex.yyruby.c
      uses variable yy_buffer_state::yy_bs_column defined in lex.yyruby.c
      uses variable yy_buffer_state::yy_is_interactive defined in lex.yyruby.c
      uses function isatty(int) defined in lex.yyc.c
   function yyc_scan_buffer(char *,yy_size_t) in line 304
      protection public
      28 lines of code
      2 parameters
      3 conditional paths
      uses macro definition YY_END_OF_BUFFER_CHAR defined in lex.yyc.c
      uses function yycalloc(yy_size_t) defined in lex.yyc.c
      uses macro definition YY_FATAL_ERROR defined in lex.yyc.c
      uses variable yy_buffer_state::yy_buf_size defined in lex.yyruby.c
      uses variable yy_buffer_state::yy_buf_pos defined in lex.yyruby.c
      uses variable yy_buffer_state::yy_ch_buf defined in lex.yyruby.c
      uses variable yy_buffer_state::yy_is_our_buffer defined in lex.yyruby.c
      uses variable yy_buffer_state::yy_input_file defined in lex.yyruby.c
      uses variable yy_buffer_state::yy_n_chars defined in lex.yyruby.c
      uses variable yy_buffer_state::yy_is_interactive defined in lex.yyruby.c
      uses variable yy_buffer_state::yy_at_bol defined in lex.yyruby.c
      uses variable yy_buffer_state::yy_fill_buffer defined in lex.yyruby.c
      uses variable yy_buffer_state::yy_buffer_status defined in lex.yyruby.c
      uses macro definition YY_BUFFER_NEW defined in lex.yyc.c
      uses function yyc_switch_to_buffer(YY_BUFFER_STATE) defined in lex.yyc.c
   function yyc_scan_string(yyconst char *) in line 305
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function yyc_scan_bytes(yyconst char *,int) defined in lex.yyc.c
   function yyc_scan_bytes(yyconst char *,int) in line 306
      protection public
      29 lines of code
      2 parameters
      4 conditional paths
      uses function yycalloc(yy_size_t) defined in lex.yyc.c
      uses macro definition YY_FATAL_ERROR defined in lex.yyc.c
      uses macro definition YY_END_OF_BUFFER_CHAR defined in lex.yyc.c
      uses function yyc_scan_buffer(char *,yy_size_t) defined in lex.yyc.c
      uses variable yy_buffer_state::yy_is_our_buffer defined in lex.yyruby.c
   function yycalloc(yy_size_t) in line 308
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function yycrealloc(void *,yy_size_t) in line 309
      protection public
      11 lines of code
      2 parameters
      1 conditional paths
   function yycfree(void *) in line 310
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function yy_get_previous_state(void) in line 351
      protection public
      19 lines of code
      1 parameters
      3 conditional paths
      uses variable yy_cp defined in lex.yyc.c
      uses variable yy_start_state_list defined in lex.yyc.c
      uses variable yy_start defined in lex.yyc.c
      uses macro definition yytext_ptr defined in lex.yyc.c
      uses macro definition YY_MORE_ADJ defined in lex.yyc.c
      uses variable yy_c_buf_p defined in lex.yyc.c
      uses macro definition YY_SC_TO_UI defined in lex.yyc.c
      uses variable yy_trans_info::yy_nxt defined in lex.yyruby.c
      uses variable yy_last_accepting_state defined in lex.yyc.c
      uses variable yy_last_accepting_cpos defined in lex.yyc.c
   function yy_try_NUL_trans(yy_state_type) in line 352
      protection public
      23 lines of code
      1 parameters
      3 conditional paths
      uses variable yy_cp defined in lex.yyc.c
      uses variable yy_c_buf_p defined in lex.yyc.c
      uses macro definition yyconst defined in lex.yyc.c
      uses variable yy_trans_info::yy_nxt defined in lex.yyruby.c
      uses variable yy_trans_info::yy_verify defined in lex.yyruby.c
      uses variable yy_last_accepting_state defined in lex.yyc.c
      uses variable yy_last_accepting_cpos defined in lex.yyc.c
   function yy_get_next_buffer(void) in line 353
      protection public
      123 lines of code
      1 parameters
      13 conditional paths
      uses macro definition YY_CURRENT_BUFFER_LVALUE defined in lex.yyc.c
      uses macro definition yytext_ptr defined in lex.yyc.c
      uses variable yy_c_buf_p defined in lex.yyc.c
      uses variable yy_buffer_state::yy_n_chars defined in lex.yyruby.c
      uses macro definition YY_FATAL_ERROR defined in lex.yyc.c
      uses macro definition YY_MORE_ADJ defined in lex.yyc.c
      uses macro definition EOB_ACT_END_OF_FILE defined in lex.yyc.c
      uses macro definition EOB_ACT_LAST_MATCH defined in lex.yyc.c
      uses macro definition YY_BUFFER_EOF_PENDING defined in lex.yyc.c
      uses macro definition YY_CURRENT_BUFFER defined in lex.yyc.c
      uses variable yy_buffer_state::yy_ch_buf defined in lex.yyruby.c
      uses variable yy_buffer_state::yy_is_our_buffer defined in lex.yyruby.c
      uses variable yy_buffer_state::yy_buf_size defined in lex.yyruby.c
      uses function yycrealloc(void *,yy_size_t) defined in lex.yyc.c
      uses macro definition YY_READ_BUF_SIZE defined in lex.yyc.c
      uses macro definition YY_INPUT defined in lex.yyc.c
      uses function yycrestart(FILE *) defined in lex.yyc.c
      uses variable yycin defined in lex.yyc.c
      uses macro definition EOB_ACT_CONTINUE_SCAN defined in lex.yyc.c
      uses macro definition YY_END_OF_BUFFER_CHAR defined in lex.yyc.c
   function yy_fatal_error(yyconst char) in line 354
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function identifier(void) in line 5157
      protection public
      13 lines of code
      1 parameters
      2 conditional paths
      uses variable yyctext defined in lex.yyc.c
      uses variable clexreal_column defined in lex.yyc.c
      uses variable clex_column defined in lex.yyc.c
      uses variable clex_lineno defined in lex.yyc.c
      uses macro definition TOKEN_IDENTIFIER defined in tokens.h
   function string_const(void) in line 5158
      protection public
      13 lines of code
      1 parameters
      2 conditional paths
      uses variable yyctext defined in lex.yyc.c
      uses variable clexreal_column defined in lex.yyc.c
      uses variable clex_column defined in lex.yyc.c
      uses variable clex_lineno defined in lex.yyc.c
      uses macro definition TOKEN_STRING_CONST defined in tokens.h
   function preprocessor(void) in line 5159
      protection public
      43 lines of code
      1 parameters
      8 conditional paths
      uses function input(void) defined in lex.yyc.c
      uses variable clexreal_column defined in lex.yyc.c
      uses variable clex_lineno defined in lex.yyc.c
      uses variable clex_column defined in lex.yyc.c
      uses function cstyle_comment(void) defined in lex.yyc.c
      uses macro definition TOKEN_COMMENT defined in tokens.h
      uses macro definition unput defined in lex.yyc.c
      uses macro definition TOKEN_JUNK defined in tokens.h
   function reset_comment(void) in line 5160
      protection public
      6 lines of code
      1 parameters
      2 conditional paths
      uses variable yyccomment defined in lex.yyc.c
      uses variable yyclength defined in lex.yyc.c
   function cstyle_comment(void) in line 5161
      protection public
      38 lines of code
      1 parameters
      7 conditional paths
      uses function reset_comment(void) defined in lex.yyc.c
      uses function input(void) defined in lex.yyc.c
      uses variable clexreal_column defined in lex.yyc.c
      uses function accumulate_comment(char *,int) defined in lex.yyc.c
      uses variable clex_column defined in lex.yyc.c
      uses variable clex_lineno defined in lex.yyc.c
      uses macro definition TOKEN_COMMENT defined in tokens.h
   function no_match(void) in line 5162
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable current_file defined in engine.c
      uses variable clex_lineno defined in lex.yyc.c
      uses variable yyctext defined in lex.yyc.c
   function accumulate_comment(char *,int) in line 5163
      protection public
      19 lines of code
      2 parameters
      3 conditional paths
      uses variable yyccomment defined in lex.yyc.c
      uses variable yyclength defined in lex.yyc.c
      uses variable yycsize defined in lex.yyc.c
      uses macro definition data defined in kazhash.c
   function count(void) in line 5164
      protection public
      21 lines of code
      1 parameters
      5 conditional paths
      uses variable clexreal_column defined in lex.yyc.c
      uses variable clex_column defined in lex.yyc.c
      uses variable yyctext defined in lex.yyc.c
   function yy_init_globals(void) in line 5204
      protection public
      27 lines of code
      1 parameters
      1 conditional paths
      uses variable yy_buffer_stack defined in lex.yyc.c
      uses variable yy_buffer_stack_top defined in lex.yyc.c
      uses variable yy_buffer_stack_max defined in lex.yyc.c
      uses variable yy_c_buf_p defined in lex.yyc.c
      uses variable yy_init defined in lex.yyc.c
      uses variable yy_start defined in lex.yyc.c
      uses variable yycin defined in lex.yyc.c
      uses variable yycout defined in lex.yyc.c
   function yycwrap(void) in line 5214
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function yyunput(int,char *) in line 5218
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function input(void) in line 5233
      protection public
      68 lines of code
      1 parameters
      8 conditional paths
      uses variable yy_c_buf_p defined in lex.yyc.c
      uses variable yy_hold_char defined in lex.yyc.c
      uses macro definition YY_END_OF_BUFFER_CHAR defined in lex.yyc.c
      uses macro definition YY_CURRENT_BUFFER_LVALUE defined in lex.yyc.c
      uses variable yy_buffer_state::yy_n_chars defined in lex.yyruby.c
      uses macro definition yytext_ptr defined in lex.yyc.c
      uses function yy_get_next_buffer(void) defined in lex.yyc.c
      uses macro definition EOB_ACT_LAST_MATCH defined in lex.yyc.c
      uses function yycrestart(FILE *) defined in lex.yyc.c
      uses variable yycin defined in lex.yyc.c
      uses macro definition EOB_ACT_END_OF_FILE defined in lex.yyc.c
      uses function yycwrap(void) defined in lex.yyc.c
      uses variable yy_did_buffer_switch_on_eof defined in lex.yyc.c
      uses macro definition YY_NEW_FILE defined in lex.yyc.c
      uses macro definition EOB_ACT_CONTINUE_SCAN defined in lex.yyc.c
   function yyclex(void) in line 5297
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function if(!) in line 5330
      protection public
      25 lines of code
      1 parameters
      6 conditional paths
      uses variable yy_init defined in lex.yyc.c
      uses variable yy_start defined in lex.yyc.c
      uses variable yycin defined in lex.yyc.c
      uses variable yycout defined in lex.yyc.c
      uses macro definition YY_CURRENT_BUFFER defined in lex.yyc.c
      uses function yycensure_buffer_stack(void) defined in lex.yyc.c
      uses macro definition YY_CURRENT_BUFFER_LVALUE defined in lex.yyc.c
      uses function yyc_create_buffer(FILE *,int) defined in lex.yyc.c
      uses macro definition YY_BUF_SIZE defined in lex.yyc.c
      uses function yyc_load_buffer_state(void) defined in lex.yyc.c
   function while(1) in line 5356
      protection public
      651 lines of code
      1 parameters
      114 conditional paths
      uses variable yy_cp defined in lex.yyc.c
      uses variable yy_c_buf_p defined in lex.yyc.c
      uses variable yy_hold_char defined in lex.yyc.c
      uses variable yy_bp defined in lex.yyc.c
      uses variable yy_start_state_list defined in lex.yyc.c
      uses variable yy_start defined in lex.yyc.c
      uses macro definition yyconst defined in lex.yyc.c
      uses macro definition YY_SC_TO_UI defined in lex.yyc.c
      uses variable yy_trans_info::yy_verify defined in lex.yyruby.c
      uses variable yy_trans_info::yy_nxt defined in lex.yyruby.c
      uses variable yy_last_accepting_state defined in lex.yyc.c
      uses variable yy_last_accepting_cpos defined in lex.yyc.c
      uses variable yy_act defined in lex.yyc.c
      uses macro definition YY_DO_BEFORE_ACTION defined in lex.yyc.c
      uses macro definition YY_RULE_SETUP defined in lex.yyc.c
      uses function count(void) defined in lex.yyc.c
      uses function preprocessor(void) defined in lex.yyc.c
      uses macro definition YY_BREAK defined in lex.yyc.c
      uses function cstyle_comment(void) defined in lex.yyc.c
      uses function reset_comment(void) defined in lex.yyc.c
      uses function accumulate_comment(char *,int) defined in lex.yyc.c
      uses variable yyctext defined in lex.yyc.c
      uses macro definition TOKEN_COMMENT defined in tokens.h
      uses macro definition TOKEN_AUTO defined in c-tokens.h
      uses macro definition TOKEN_BREAK defined in tokens.h
      uses macro definition TOKEN_CASE defined in c-tokens.h
      uses macro definition TOKEN_CHAR defined in c-tokens.h
      uses macro definition TOKEN_CONST defined in c-tokens.h
      uses macro definition TOKEN_CONTINUE defined in tokens.h
      uses macro definition TOKEN_DEFAULT defined in c-tokens.h
      uses macro definition TOKEN_DO defined in c-tokens.h
      uses macro definition TOKEN_DOUBLE defined in c-tokens.h
      uses macro definition TOKEN_ELSE defined in tokens.h
      uses macro definition TOKEN_ENUM defined in c-tokens.h
      uses macro definition TOKEN_EXTERN defined in c-tokens.h
      uses macro definition TOKEN_FLOAT defined in c-tokens.h
      uses macro definition TOKEN_FOR defined in tokens.h
      uses macro definition TOKEN_GOTO defined in c-tokens.h
      uses macro definition TOKEN_IF defined in tokens.h
      uses macro definition TOKEN_INT defined in c-tokens.h
      uses macro definition TOKEN_LONG defined in c-tokens.h
      uses macro definition TOKEN_REGISTER defined in c-tokens.h
      uses macro definition TOKEN_RETURN defined in tokens.h
      uses macro definition TOKEN_SHORT defined in c-tokens.h
      uses macro definition TOKEN_SIGNED defined in c-tokens.h
      uses macro definition TOKEN_SIZEOF defined in c-tokens.h
      uses macro definition TOKEN_STATIC defined in c-tokens.h
      uses macro definition TOKEN_STRUCT defined in c-tokens.h
      uses macro definition TOKEN_SWITCH defined in c-tokens.h
      uses macro definition TOKEN_TYPEDEF defined in c-tokens.h
      uses macro definition TOKEN_UNION defined in c-tokens.h
      uses macro definition TOKEN_UNSIGNED defined in c-tokens.h
      uses macro definition TOKEN_VOID defined in c-tokens.h
      uses macro definition TOKEN_VOLATILE defined in c-tokens.h
      uses macro definition TOKEN_WHILE defined in tokens.h
      uses function identifier(void) defined in lex.yyc.c
      uses macro definition TOKEN_HEX_CONST defined in tokens.h
      uses macro definition TOKEN_OCT_CONST defined in tokens.h
      uses macro definition TOKEN_DEC_CONST defined in tokens.h
      uses macro definition TOKEN_CHAR_CONST defined in tokens.h
      uses macro definition TOKEN_FLOAT_CONST defined in tokens.h
      uses function string_const(void) defined in lex.yyc.c
      uses macro definition TOKEN_RIGHT_ASSIGN defined in tokens.h
      uses macro definition TOKEN_LEFT_ASSIGN defined in tokens.h
      uses macro definition TOKEN_ADD_ASSIGN defined in tokens.h
      uses macro definition TOKEN_SUB_ASSIGN defined in tokens.h
      uses macro definition TOKEN_MUL_ASSIGN defined in tokens.h
      uses macro definition TOKEN_DIV_ASSIGN defined in tokens.h
      uses macro definition TOKEN_MOD_ASSIGN defined in tokens.h
      uses macro definition TOKEN_AND_ASSIGN defined in tokens.h
      uses macro definition TOKEN_XOR_ASSIGN defined in tokens.h
      uses macro definition TOKEN_OR_ASSIGN defined in tokens.h
      uses macro definition TOKEN_RIGHT_OP defined in tokens.h
      uses macro definition TOKEN_LEFT_OP defined in tokens.h
      uses macro definition TOKEN_INC_OP defined in c-tokens.h
      uses macro definition TOKEN_DEC_OP defined in c-tokens.h
      uses macro definition TOKEN_PTR_OP defined in c-tokens.h
      uses macro definition TOKEN_AND_OP defined in c-tokens.h
      uses macro definition TOKEN_OR_OP defined in c-tokens.h
      uses macro definition TOKEN_LE_OP defined in tokens.h
      uses macro definition TOKEN_GE_OP defined in tokens.h
      uses macro definition TOKEN_EQ_OP defined in tokens.h
      uses macro definition TOKEN_NE_OP defined in tokens.h
      uses variable clex_lineno defined in lex.yyc.c
      uses function no_match(void) defined in lex.yyc.c
      uses macro definition ECHO defined in lex.yyc.c
      uses macro definition YY_STATE_EOF defined in lex.yyc.c
      uses macro definition INITIAL defined in lex.yyc.c
      uses macro definition yyterminate defined in lex.yyc.c
      uses macro definition YY_END_OF_BUFFER defined in lex.yyc.c
      uses macro definition yytext_ptr defined in lex.yyc.c
      uses macro definition YY_RESTORE_YY_MORE_OFFSET defined in lex.yyc.c
      uses macro definition YY_CURRENT_BUFFER_LVALUE defined in lex.yyc.c
      uses macro definition YY_BUFFER_NEW defined in lex.yyc.c
      uses variable yy_buffer_state::yy_n_chars defined in lex.yyruby.c
      uses variable yycin defined in lex.yyc.c
      uses macro definition YY_BUFFER_NORMAL defined in lex.yyc.c
      uses function yy_get_previous_state(void) defined in lex.yyc.c
      uses function yy_try_NUL_trans(yy_state_type) defined in lex.yyc.c
      uses macro definition YY_MORE_ADJ defined in lex.yyc.c
      uses function yy_get_next_buffer(void) defined in lex.yyc.c
      uses macro definition EOB_ACT_END_OF_FILE defined in lex.yyc.c
      uses variable yy_did_buffer_switch_on_eof defined in lex.yyc.c
      uses function yycwrap(void) defined in lex.yyc.c
      uses macro definition YY_START defined in lex.yyc.c
      uses macro definition YY_NEW_FILE defined in lex.yyc.c
      uses macro definition EOB_ACT_CONTINUE_SCAN defined in lex.yyc.c
      uses macro definition EOB_ACT_LAST_MATCH defined in lex.yyc.c
      uses macro definition YY_FATAL_ERROR defined in lex.yyc.c
   function yyunput(int,register char *) in line 6191
      protection public
      36 lines of code
      2 parameters
      3 conditional paths
      uses variable yy_cp defined in lex.yyc.c
      uses variable yy_c_buf_p defined in lex.yyc.c
      uses variable yy_hold_char defined in lex.yyc.c
      uses variable yy_buffer_state::yy_ch_buf defined in lex.yyruby.c
      uses variable yy_buffer_state::yy_n_chars defined in lex.yyruby.c
      uses macro definition YY_CURRENT_BUFFER_LVALUE defined in lex.yyc.c
      uses variable yy_bp defined in lex.yyc.c
      uses function if(!) defined in lex.yyc.c
      uses macro definition YY_FATAL_ERROR defined in lex.yyc.c
      uses macro definition yytext_ptr defined in lex.yyc.c
   function isatty(int) in line 6413
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function yy_fatal_error(yyconst char *) in line 6655
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses macro definition YY_EXIT_FAILURE defined in lex.yyc.c
   function yycget_lineno(void) in line 6683
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable yyclineno defined in lex.yyc.c
   function yycget_in(void) in line 6692
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable yycin defined in lex.yyc.c
   function yycget_out(void) in line 6700
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable yycout defined in lex.yyc.c
   function yycget_leng(void) in line 6708
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable yycleng defined in lex.yyc.c
   function yycget_text(void) in line 6717
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable yyctext defined in lex.yyc.c
   function yycset_lineno(int) in line 6726
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable yyclineno defined in lex.yyc.c
   function yycset_in(FILE *) in line 6738
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable yycin defined in lex.yyc.c
   function yycset_out(FILE *) in line 6743
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable yycout defined in lex.yyc.c
   function yycget_debug(void) in line 6748
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable yyc_flex_debug defined in lex.yyc.c
   function yycset_debug(int) in line 6753
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable yyc_flex_debug defined in lex.yyc.c
   function yyclex_destroy(void) in line 6787
      protection public
      20 lines of code
      1 parameters
      4 conditional paths
      uses macro definition YY_CURRENT_BUFFER defined in lex.yyc.c
      uses function yyc_delete_buffer(YY_BUFFER_STATE) defined in lex.yyc.c
      uses macro definition YY_CURRENT_BUFFER_LVALUE defined in lex.yyc.c
      uses function yycpop_buffer_state(void) defined in lex.yyc.c
      uses function yycfree(void *) defined in lex.yyc.c
      uses variable yy_buffer_stack defined in lex.yyc.c
      uses function yy_init_globals(void) defined in lex.yyc.c
      uses macro definition yyconst defined in lex.yyc.c
   variable yy_buffer_state::yy_at_bol in line 226
      protection public
   variable yy_buffer_state::yy_bs_column in line 229
      protection public
   variable yy_buffer_state::yy_bs_lineno in line 228
      protection public
   variable yy_buffer_state::yy_buf_pos in line 197
      protection public
   variable yy_buffer_state::yy_buf_size in line 202
      protection public
   variable yy_buffer_state::yy_buffer_status in line 236
      protection public
   variable yy_buffer_state::yy_ch_buf in line 196
      protection public
   variable yy_buffer_state::yy_fill_buffer in line 234
      protection public
   variable yy_buffer_state::yy_input_file in line 194
      protection public
   variable yy_buffer_state::yy_is_interactive in line 220
      protection public
   variable yy_buffer_state::yy_is_our_buffer in line 213
      protection public
   variable yy_buffer_state::yy_n_chars in line 207
      protection public
   variable yy_trans_info::yy_nxt in line 371
      protection public
   variable yy_trans_info::yy_nxt in line 371
      protection public
   variable yy_trans_info::yy_verify in line 370
      protection public
   variable yy_trans_info::yy_verify in line 370
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/rats/rats-2.4/lex.yyp.c
module lex.yyp.c
   macro definition YY_INT_ALIGNED in line 4
      protection public
   macro definition FLEX_SCANNER in line 8
      protection public
   macro definition YY_FLEX_MAJOR_VERSION in line 9
      protection public
   macro definition YY_FLEX_MINOR_VERSION in line 10
      protection public
   macro definition YY_FLEX_SUBMINOR_VERSION in line 11
      protection public
   macro definition FLEX_BETA in line 13
      protection public
   macro definition FLEXINT_H in line 29
      protection public
   macro definition INT8_MIN in line 60
      protection public
   macro definition INT16_MIN in line 63
      protection public
   macro definition INT32_MIN in line 66
      protection public
   macro definition INT8_MAX in line 69
      protection public
   macro definition INT16_MAX in line 72
      protection public
   macro definition INT32_MAX in line 75
      protection public
   macro definition UINT8_MAX in line 78
      protection public
   macro definition UINT16_MAX in line 81
      protection public
   macro definition UINT32_MAX in line 84
      protection public
   macro definition yyconst in line 106
      protection public
   macro definition YY_NULL in line 110
      protection public
   macro definition YY_SC_TO_UI in line 117
      protection public
   macro definition BEGIN in line 123
      protection public
   macro definition YY_START in line 129
      protection public
   macro definition YYSTATE in line 130
      protection public
   macro definition YY_STATE_EOF in line 133
      protection public
   macro definition YY_NEW_FILE in line 136
      protection public
   macro definition YY_END_OF_BUFFER_CHAR in line 138
      protection public
   macro definition YY_BUF_SIZE in line 142
      protection public
   macro definition YY_STATE_BUF_SIZE in line 147
      protection public
   macro definition YY_TYPEDEF_YY_BUFFER_STATE in line 150
      protection public
   macro definition EOB_ACT_CONTINUE_SCAN in line 158
      protection public
   macro definition EOB_ACT_END_OF_FILE in line 159
      protection public
   macro definition EOB_ACT_LAST_MATCH in line 160
      protection public
   macro definition YY_LESS_LINENO in line 162
      protection public
   macro definition yyless in line 165
      protection public
   macro definition unput in line 178
      protection public
   macro definition YY_TYPEDEF_YY_SIZE_T in line 186
      protection public
   macro definition YY_STRUCT_YY_BUFFER_STATE in line 191
      protection public
   macro definition YY_BUFFER_NEW in line 238
      protection public
   macro definition YY_BUFFER_NORMAL in line 239
      protection public
   macro definition YY_BUFFER_EOF_PENDING in line 250
      protection public
   macro definition YY_CURRENT_BUFFER in line 266
      protection public
   macro definition YY_CURRENT_BUFFER_LVALUE in line 273
      protection public
   macro definition YY_FLUSH_BUFFER in line 302
      protection public
   macro definition yy_new_buffer in line 312
      protection public
   macro definition yy_set_interactive in line 314
      protection public
   macro definition yy_set_bol in line 324
      protection public
   macro definition YY_AT_BOL in line 334
      protection public
   macro definition yytext_ptr in line 349
      protection public
   macro definition YY_DO_BEFORE_ACTION in line 359
      protection public
   macro definition YY_NUM_RULES in line 366
      protection public
   macro definition YY_END_OF_BUFFER in line 367
      protection public
   macro definition REJECT in line 3993
      protection public
   macro definition yymore in line 3994
      protection public
   macro definition YY_MORE_ADJ in line 3995
      protection public
   macro definition YY_RESTORE_YY_MORE_OFFSET in line 3996
      protection public
   macro definition YY_INPUT in line 4035
      protection public
   macro definition INITIAL in line 4059
      protection public
   macro definition YY_EXTRA_TYPE in line 4070
      protection public
   macro definition YY_READ_BUF_SIZE in line 4109
      protection public
   macro definition ECHO in line 4117
      protection public
   macro definition yyterminate in line 4145
      protection public
   macro definition YY_START_STACK_INCR in line 4150
      protection public
   macro definition YY_FATAL_ERROR in line 4155
      protection public
   macro definition YY_DECL_IS_OURS in line 4164
      protection public
   macro definition YY_DECL in line 4168
      protection public
   macro definition YY_USER_ACTION in line 4175
      protection public
   macro definition YY_BREAK in line 4180
      protection public
   macro definition YY_RULE_SETUP in line 4183
      protection public
   macro definition YY_EXIT_FAILURE in line 5513
      protection public
   macro definition yyless in line 5525
      protection public
   macro definition YYTABLES_NAME in line 5715
      protection public
   typedef flex_int8_t in line 50
      protection public
   typedef flex_int16_t in line 51
      protection public
   typedef flex_int32_t in line 52
      protection public
   typedef flex_uint8_t in line 53
      protection public
   typedef flex_uint16_t in line 54
      protection public
   typedef flex_uint32_t in line 55
      protection public
   typedef YY_BUFFER_STATE in line 151
      protection public
   typedef yy_size_t in line 187
      protection public
   typedef YY_CHAR in line 338
      protection public
   typedef yy_state_type in line 342
      protection public
   variable yypleng in line 154
      protection public
   variable yypin in line 156
      protection public
   variable yypout in line 156
      protection public
   variable yy_buffer_stack_top in line 256
      protection public
   variable yy_buffer_stack_max in line 257
      protection public
   variable yy_buffer_stack in line 258
      protection public
   variable yy_hold_char in line 276
      protection public
   variable yy_n_chars in line 277
      protection public
   variable yy_c_buf_p in line 281
      protection public
   variable yy_init in line 282
      protection public
   variable yy_start in line 283
      protection public
   variable yy_did_buffer_switch_on_eof in line 288
      protection public
   variable yyplineno in line 344
      protection public
   variable yyptext in line 348
      protection public
   variable yy_transition in line 373
      protection public
   variable yy_start_state_list in line 3976
      protection public
   variable yy_last_accepting_state in line 3984
      protection public
   variable yy_last_accepting_cpos in line 3985
      protection public
   variable yyp_flex_debug in line 3987
      protection public
   variable plexreal_column in line 4022
      protection public
   variable plex_column in line 4023
      protection public
   variable plex_lineno in line 4024
      protection public
   variable pyyclength in line 4025
      protection public
   variable pyycsize in line 4026
      protection public
   variable yypcomment in line 4027
      protection public
   variable YY_DECL in line 4191
      protection public
   variable yy_cp in line 4194
      protection public
   variable yy_bp in line 4194
      protection public
   variable yy_act in line 4195
      protection public
   function yyprestart(FILE *) in line 290
      protection public
      12 lines of code
      1 parameters
      2 conditional paths
      uses macro definition YY_CURRENT_BUFFER defined in lex.yyp.c
      uses function yypensure_buffer_stack(void) defined in lex.yyp.c
      uses macro definition YY_CURRENT_BUFFER_LVALUE defined in lex.yyp.c
      uses function yyp_create_buffer(FILE *,int) defined in lex.yyp.c
      uses variable yypin defined in lex.yyp.c
      uses macro definition YY_BUF_SIZE defined in lex.yyp.c
      uses function yyp_init_buffer(YY_BUFFER_STATE,FILE *) defined in lex.yyp.c
      uses function yyp_load_buffer_state(void) defined in lex.yyp.c
   function yyp_switch_to_buffer(YY_BUFFER_STATE) in line 291
      protection public
      30 lines of code
      1 parameters
      3 conditional paths
      uses function yypensure_buffer_stack(void) defined in lex.yyp.c
      uses macro definition YY_CURRENT_BUFFER defined in lex.yyp.c
      uses variable yy_c_buf_p defined in lex.yyp.c
      uses variable yy_hold_char defined in lex.yyp.c
      uses macro definition YY_CURRENT_BUFFER_LVALUE defined in lex.yyp.c
      uses variable yy_buffer_state::yy_n_chars defined in lex.yyruby.c
      uses function yyp_load_buffer_state(void) defined in lex.yyp.c
      uses variable yy_did_buffer_switch_on_eof defined in lex.yyp.c
   function yyp_create_buffer(FILE *,int) in line 292
      protection public
      23 lines of code
      2 parameters
      3 conditional paths
      uses function yypalloc(yy_size_t) defined in lex.yyp.c
      uses macro definition YY_FATAL_ERROR defined in lex.yyp.c
      uses variable yy_buffer_state::yy_buf_size defined in lex.yyruby.c
      uses variable yy_buffer_state::yy_ch_buf defined in lex.yyruby.c
      uses variable yy_buffer_state::yy_is_our_buffer defined in lex.yyruby.c
      uses function yyp_init_buffer(YY_BUFFER_STATE,FILE *) defined in lex.yyp.c
   function yyp_delete_buffer(YY_BUFFER_STATE) in line 293
      protection public
      14 lines of code
      1 parameters
      4 conditional paths
      uses macro definition YY_CURRENT_BUFFER defined in lex.yyp.c
      uses macro definition YY_CURRENT_BUFFER_LVALUE defined in lex.yyp.c
      uses variable yy_buffer_state::yy_is_our_buffer defined in lex.yyruby.c
      uses function yypfree(void *) defined in lex.yyp.c
      uses variable yy_buffer_state::yy_ch_buf defined in lex.yyruby.c
      uses function isatty(int) defined in lex.yyp.c
   function yyp_flush_buffer(YY_BUFFER_STATE) in line 294
      protection public
      22 lines of code
      1 parameters
      3 conditional paths
      uses variable yy_buffer_state::yy_n_chars defined in lex.yyruby.c
      uses variable yy_buffer_state::yy_ch_buf defined in lex.yyruby.c
      uses macro definition YY_END_OF_BUFFER_CHAR defined in lex.yyp.c
      uses variable yy_buffer_state::yy_buf_pos defined in lex.yyruby.c
      uses variable yy_buffer_state::yy_at_bol defined in lex.yyruby.c
      uses variable yy_buffer_state::yy_buffer_status defined in lex.yyruby.c
      uses macro definition YY_BUFFER_NEW defined in lex.yyp.c
      uses macro definition YY_CURRENT_BUFFER defined in lex.yyp.c
      uses function yyp_load_buffer_state(void) defined in lex.yyp.c
   function yyppush_buffer_state(YY_BUFFER_STATE) in line 295
      protection public
      25 lines of code
      1 parameters
      4 conditional paths
      uses function yypensure_buffer_stack(void) defined in lex.yyp.c
      uses macro definition YY_CURRENT_BUFFER defined in lex.yyp.c
      uses variable yy_c_buf_p defined in lex.yyp.c
      uses variable yy_hold_char defined in lex.yyp.c
      uses macro definition YY_CURRENT_BUFFER_LVALUE defined in lex.yyp.c
      uses variable yy_buffer_state::yy_n_chars defined in lex.yyruby.c
      uses variable yy_buffer_stack_top defined in lex.yyp.c
      uses function yyp_load_buffer_state(void) defined in lex.yyp.c
      uses variable yy_did_buffer_switch_on_eof defined in lex.yyp.c
   function yyppop_buffer_state(void) in line 296
      protection public
      15 lines of code
      1 parameters
      4 conditional paths
      uses macro definition YY_CURRENT_BUFFER defined in lex.yyp.c
      uses function yyp_delete_buffer(YY_BUFFER_STATE) defined in lex.yyp.c
      uses macro definition YY_CURRENT_BUFFER_LVALUE defined in lex.yyp.c
      uses variable yy_buffer_stack_top defined in lex.yyp.c
      uses function yyp_load_buffer_state(void) defined in lex.yyp.c
      uses variable yy_did_buffer_switch_on_eof defined in lex.yyp.c
   function yypensure_buffer_stack(void) in line 298
      protection public
      38 lines of code
      1 parameters
      3 conditional paths
      uses variable yy_buffer_stack defined in lex.yyp.c
      uses function yypalloc(yy_size_t) defined in lex.yyp.c
      uses variable yy_buffer_stack_max defined in lex.yyp.c
      uses variable yy_buffer_stack_top defined in lex.yyp.c
      uses function yyprealloc(void *,yy_size_t) defined in lex.yyp.c
   function yyp_load_buffer_state(void) in line 299
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses variable yy_buffer_state::yy_n_chars defined in lex.yyruby.c
      uses macro definition YY_CURRENT_BUFFER_LVALUE defined in lex.yyp.c
      uses macro definition yytext_ptr defined in lex.yyp.c
      uses variable yy_c_buf_p defined in lex.yyp.c
      uses variable yypin defined in lex.yyp.c
      uses variable yy_hold_char defined in lex.yyp.c
   function yyp_init_buffer(YY_BUFFER_STATE,FILE *) in line 300
      protection public
      23 lines of code
      2 parameters
      2 conditional paths
      uses function yyp_flush_buffer(YY_BUFFER_STATE) defined in lex.yyp.c
      uses variable yy_buffer_state::yy_input_file defined in lex.yyruby.c
      uses variable yy_buffer_state::yy_fill_buffer defined in lex.yyruby.c
      uses macro definition YY_CURRENT_BUFFER defined in lex.yyp.c
      uses variable yy_buffer_state::yy_bs_lineno defined in lex.yyruby.c
      uses variable yy_buffer_state::yy_bs_column defined in lex.yyruby.c
      uses variable yy_buffer_state::yy_is_interactive defined in lex.yyruby.c
      uses function isatty(int) defined in lex.yyp.c
   function yyp_scan_buffer(char *,yy_size_t) in line 304
      protection public
      28 lines of code
      2 parameters
      3 conditional paths
      uses macro definition YY_END_OF_BUFFER_CHAR defined in lex.yyp.c
      uses function yypalloc(yy_size_t) defined in lex.yyp.c
      uses macro definition YY_FATAL_ERROR defined in lex.yyp.c
      uses variable yy_buffer_state::yy_buf_size defined in lex.yyruby.c
      uses variable yy_buffer_state::yy_buf_pos defined in lex.yyruby.c
      uses variable yy_buffer_state::yy_ch_buf defined in lex.yyruby.c
      uses variable yy_buffer_state::yy_is_our_buffer defined in lex.yyruby.c
      uses variable yy_buffer_state::yy_input_file defined in lex.yyruby.c
      uses variable yy_buffer_state::yy_n_chars defined in lex.yyruby.c
      uses variable yy_buffer_state::yy_is_interactive defined in lex.yyruby.c
      uses variable yy_buffer_state::yy_at_bol defined in lex.yyruby.c
      uses variable yy_buffer_state::yy_fill_buffer defined in lex.yyruby.c
      uses variable yy_buffer_state::yy_buffer_status defined in lex.yyruby.c
      uses macro definition YY_BUFFER_NEW defined in lex.yyp.c
      uses function yyp_switch_to_buffer(YY_BUFFER_STATE) defined in lex.yyp.c
   function yyp_scan_string(yyconst char *) in line 305
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function yyp_scan_bytes(yyconst char *,int) defined in lex.yyp.c
   function yyp_scan_bytes(yyconst char *,int) in line 306
      protection public
      29 lines of code
      2 parameters
      4 conditional paths
      uses function yypalloc(yy_size_t) defined in lex.yyp.c
      uses macro definition YY_FATAL_ERROR defined in lex.yyp.c
      uses macro definition YY_END_OF_BUFFER_CHAR defined in lex.yyp.c
      uses function yyp_scan_buffer(char *,yy_size_t) defined in lex.yyp.c
      uses variable yy_buffer_state::yy_is_our_buffer defined in lex.yyruby.c
   function yypalloc(yy_size_t) in line 308
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function yyprealloc(void *,yy_size_t) in line 309
      protection public
      11 lines of code
      2 parameters
      1 conditional paths
   function yypfree(void *) in line 310
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function yy_get_previous_state(void) in line 351
      protection public
      19 lines of code
      1 parameters
      3 conditional paths
      uses variable yy_cp defined in lex.yyp.c
      uses variable yy_start_state_list defined in lex.yyp.c
      uses variable yy_start defined in lex.yyp.c
      uses macro definition YY_AT_BOL defined in lex.yyp.c
      uses macro definition yytext_ptr defined in lex.yyp.c
      uses macro definition YY_MORE_ADJ defined in lex.yyp.c
      uses variable yy_c_buf_p defined in lex.yyp.c
      uses macro definition YY_SC_TO_UI defined in lex.yyp.c
      uses variable yy_trans_info::yy_nxt defined in lex.yyruby.c
      uses variable yy_last_accepting_state defined in lex.yyp.c
      uses variable yy_last_accepting_cpos defined in lex.yyp.c
   function yy_try_NUL_trans(yy_state_type) in line 352
      protection public
      23 lines of code
      1 parameters
      3 conditional paths
      uses variable yy_cp defined in lex.yyp.c
      uses variable yy_c_buf_p defined in lex.yyp.c
      uses macro definition yyconst defined in lex.yyp.c
      uses variable yy_trans_info::yy_nxt defined in lex.yyruby.c
      uses variable yy_trans_info::yy_verify defined in lex.yyruby.c
      uses variable yy_last_accepting_state defined in lex.yyp.c
      uses variable yy_last_accepting_cpos defined in lex.yyp.c
   function yy_get_next_buffer(void) in line 353
      protection public
      123 lines of code
      1 parameters
      13 conditional paths
      uses macro definition YY_CURRENT_BUFFER_LVALUE defined in lex.yyp.c
      uses macro definition yytext_ptr defined in lex.yyp.c
      uses variable yy_c_buf_p defined in lex.yyp.c
      uses variable yy_buffer_state::yy_n_chars defined in lex.yyruby.c
      uses macro definition YY_FATAL_ERROR defined in lex.yyp.c
      uses macro definition YY_MORE_ADJ defined in lex.yyp.c
      uses macro definition EOB_ACT_END_OF_FILE defined in lex.yyp.c
      uses macro definition EOB_ACT_LAST_MATCH defined in lex.yyp.c
      uses macro definition YY_BUFFER_EOF_PENDING defined in lex.yyp.c
      uses macro definition YY_CURRENT_BUFFER defined in lex.yyp.c
      uses variable yy_buffer_state::yy_ch_buf defined in lex.yyruby.c
      uses variable yy_buffer_state::yy_is_our_buffer defined in lex.yyruby.c
      uses variable yy_buffer_state::yy_buf_size defined in lex.yyruby.c
      uses function yyprealloc(void *,yy_size_t) defined in lex.yyp.c
      uses macro definition YY_READ_BUF_SIZE defined in lex.yyp.c
      uses macro definition YY_INPUT defined in lex.yyp.c
      uses function yyprestart(FILE *) defined in lex.yyp.c
      uses variable yypin defined in lex.yyp.c
      uses macro definition EOB_ACT_CONTINUE_SCAN defined in lex.yyp.c
      uses macro definition YY_END_OF_BUFFER_CHAR defined in lex.yyp.c
   function yy_fatal_error(yyconst char) in line 354
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function gobble_string(char) in line 4028
      protection public
      32 lines of code
      1 parameters
      6 conditional paths
      uses function input(void) defined in lex.yyp.c
      uses variable plexreal_column defined in lex.yyp.c
      uses variable plex_column defined in lex.yyp.c
      uses variable plex_lineno defined in lex.yyp.c
   function identifier(void) in line 4030
      protection public
      13 lines of code
      1 parameters
      2 conditional paths
      uses variable yyptext defined in lex.yyp.c
      uses variable plex_column defined in lex.yyp.c
      uses variable plexreal_column defined in lex.yyp.c
      uses variable plex_lineno defined in lex.yyp.c
      uses macro definition TOKEN_IDENTIFIER defined in tokens.h
   function no_match(void) in line 4031
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable current_file defined in engine.c
      uses variable plex_lineno defined in lex.yyp.c
      uses variable yyptext defined in lex.yyp.c
   function longstring(int) in line 4032
      protection public
      44 lines of code
      1 parameters
      8 conditional paths
      uses function input(void) defined in lex.yyp.c
      uses variable plexreal_column defined in lex.yyp.c
      uses macro definition TOKEN_LSTRING_LITERAL defined in python-tokens.h
      uses variable plex_column defined in lex.yyp.c
      uses variable plex_lineno defined in lex.yyp.c
   function count(void) in line 4033
      protection public
      21 lines of code
      1 parameters
      5 conditional paths
      uses variable plexreal_column defined in lex.yyp.c
      uses variable plex_column defined in lex.yyp.c
      uses variable yyptext defined in lex.yyp.c
   function yy_init_globals(void) in line 4073
      protection public
      27 lines of code
      1 parameters
      1 conditional paths
      uses variable yy_buffer_stack defined in lex.yyp.c
      uses variable yy_buffer_stack_top defined in lex.yyp.c
      uses variable yy_buffer_stack_max defined in lex.yyp.c
      uses variable yy_c_buf_p defined in lex.yyp.c
      uses variable yy_init defined in lex.yyp.c
      uses variable yy_start defined in lex.yyp.c
      uses variable yypin defined in lex.yyp.c
      uses variable yypout defined in lex.yyp.c
   function yypwrap(void) in line 4083
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function yyunput(int,char *) in line 4087
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function input(void) in line 4102
      protection public
      70 lines of code
      1 parameters
      8 conditional paths
      uses variable yy_c_buf_p defined in lex.yyp.c
      uses variable yy_hold_char defined in lex.yyp.c
      uses macro definition YY_END_OF_BUFFER_CHAR defined in lex.yyp.c
      uses macro definition YY_CURRENT_BUFFER_LVALUE defined in lex.yyp.c
      uses variable yy_buffer_state::yy_n_chars defined in lex.yyruby.c
      uses macro definition yytext_ptr defined in lex.yyp.c
      uses function yy_get_next_buffer(void) defined in lex.yyp.c
      uses macro definition EOB_ACT_LAST_MATCH defined in lex.yyp.c
      uses function yyprestart(FILE *) defined in lex.yyp.c
      uses variable yypin defined in lex.yyp.c
      uses macro definition EOB_ACT_END_OF_FILE defined in lex.yyp.c
      uses function yypwrap(void) defined in lex.yyp.c
      uses variable yy_did_buffer_switch_on_eof defined in lex.yyp.c
      uses macro definition YY_NEW_FILE defined in lex.yyp.c
      uses macro definition EOB_ACT_CONTINUE_SCAN defined in lex.yyp.c
   function yyplex(void) in line 4166
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function if(!) in line 4202
      protection public
      25 lines of code
      1 parameters
      6 conditional paths
      uses variable yy_init defined in lex.yyp.c
      uses variable yy_start defined in lex.yyp.c
      uses variable yypin defined in lex.yyp.c
      uses variable yypout defined in lex.yyp.c
      uses macro definition YY_CURRENT_BUFFER defined in lex.yyp.c
      uses function yypensure_buffer_stack(void) defined in lex.yyp.c
      uses macro definition YY_CURRENT_BUFFER_LVALUE defined in lex.yyp.c
      uses function yyp_create_buffer(FILE *,int) defined in lex.yyp.c
      uses macro definition YY_BUF_SIZE defined in lex.yyp.c
      uses function yyp_load_buffer_state(void) defined in lex.yyp.c
   function while(1) in line 4228
      protection public
      638 lines of code
      1 parameters
      112 conditional paths
      uses variable yy_cp defined in lex.yyp.c
      uses variable yy_c_buf_p defined in lex.yyp.c
      uses variable yy_hold_char defined in lex.yyp.c
      uses variable yy_bp defined in lex.yyp.c
      uses variable yy_start_state_list defined in lex.yyp.c
      uses variable yy_start defined in lex.yyp.c
      uses macro definition YY_AT_BOL defined in lex.yyp.c
      uses macro definition yyconst defined in lex.yyp.c
      uses macro definition YY_SC_TO_UI defined in lex.yyp.c
      uses variable yy_trans_info::yy_verify defined in lex.yyruby.c
      uses variable yy_trans_info::yy_nxt defined in lex.yyruby.c
      uses variable yy_last_accepting_state defined in lex.yyp.c
      uses variable yy_last_accepting_cpos defined in lex.yyp.c
      uses variable yy_act defined in lex.yyp.c
      uses macro definition YY_DO_BEFORE_ACTION defined in lex.yyp.c
      uses macro definition YY_RULE_SETUP defined in lex.yyp.c
      uses function count(void) defined in lex.yyp.c
      uses variable plex_lineno defined in lex.yyp.c
      uses macro definition TOKEN_NEWLINE defined in python-tokens.h
      uses macro definition YY_BREAK defined in lex.yyp.c
      uses macro definition TOKEN_AND defined in python-tokens.h
      uses macro definition TOKEN_ASSERT defined in python-tokens.h
      uses macro definition TOKEN_BREAK defined in tokens.h
      uses macro definition TOKEN_CLASS defined in python-tokens.h
      uses macro definition TOKEN_CONTINUE defined in tokens.h
      uses macro definition TOKEN_DEF defined in python-tokens.h
      uses macro definition TOKEN_DEL defined in python-tokens.h
      uses macro definition TOKEN_ELIF defined in python-tokens.h
      uses macro definition TOKEN_ELSE defined in tokens.h
      uses macro definition TOKEN_EXCEPT defined in python-tokens.h
      uses macro definition TOKEN_EXEC defined in python-tokens.h
      uses macro definition TOKEN_FINALLY defined in python-tokens.h
      uses macro definition TOKEN_FOR defined in tokens.h
      uses macro definition TOKEN_FROM defined in python-tokens.h
      uses macro definition TOKEN_GLOBAL defined in python-tokens.h
      uses macro definition TOKEN_IF defined in tokens.h
      uses macro definition TOKEN_IMPORT defined in python-tokens.h
      uses macro definition TOKEN_IN defined in python-tokens.h
      uses macro definition TOKEN_IS defined in python-tokens.h
      uses macro definition TOKEN_LAMBDA defined in python-tokens.h
      uses macro definition TOKEN_NOT defined in python-tokens.h
      uses macro definition TOKEN_OR defined in python-tokens.h
      uses macro definition TOKEN_PASS defined in python-tokens.h
      uses macro definition TOKEN_PRINT defined in python-tokens.h
      uses macro definition TOKEN_RAISE defined in python-tokens.h
      uses macro definition TOKEN_RETURN defined in tokens.h
      uses macro definition TOKEN_TRY defined in python-tokens.h
      uses macro definition TOKEN_WHILE defined in tokens.h
      uses function gobble_string(char) defined in lex.yyp.c
      uses macro definition TOKEN_SSTRING_LITERAL defined in python-tokens.h
      uses function longstring(int) defined in lex.yyp.c
      uses macro definition TOKEN_HEX_CONST defined in tokens.h
      uses macro definition TOKEN_OCT_CONST defined in tokens.h
      uses macro definition TOKEN_DEC_CONST defined in tokens.h
      uses macro definition TOKEN_FLOAT_CONST defined in tokens.h
      uses macro definition TOKEN_IMAG_CONST defined in tokens.h
      uses function identifier(void) defined in lex.yyp.c
      uses macro definition TOKEN_RIGHT_ASSIGN defined in tokens.h
      uses macro definition TOKEN_LEFT_ASSIGN defined in tokens.h
      uses macro definition TOKEN_EXP_ASSIGN defined in python-tokens.h
      uses macro definition TOKEN_ADD_ASSIGN defined in tokens.h
      uses macro definition TOKEN_SUB_ASSIGN defined in tokens.h
      uses macro definition TOKEN_MUL_ASSIGN defined in tokens.h
      uses macro definition TOKEN_DIV_ASSIGN defined in tokens.h
      uses macro definition TOKEN_MOD_ASSIGN defined in tokens.h
      uses macro definition TOKEN_AND_ASSIGN defined in tokens.h
      uses macro definition TOKEN_OR_ASSIGN defined in tokens.h
      uses macro definition TOKEN_XOR_ASSIGN defined in tokens.h
      uses macro definition TOKEN_RIGHT_OP defined in tokens.h
      uses macro definition TOKEN_LEFT_OP defined in tokens.h
      uses macro definition TOKEN_EXP_OP defined in python-tokens.h
      uses macro definition TOKEN_LE_OP defined in tokens.h
      uses macro definition TOKEN_GE_OP defined in tokens.h
      uses macro definition TOKEN_EQ_OP defined in tokens.h
      uses macro definition TOKEN_NE_OP defined in tokens.h
      uses function no_match(void) defined in lex.yyp.c
      uses macro definition ECHO defined in lex.yyp.c
      uses macro definition YY_STATE_EOF defined in lex.yyp.c
      uses macro definition INITIAL defined in lex.yyp.c
      uses macro definition yyterminate defined in lex.yyp.c
      uses macro definition YY_END_OF_BUFFER defined in lex.yyp.c
      uses macro definition yytext_ptr defined in lex.yyp.c
      uses macro definition YY_RESTORE_YY_MORE_OFFSET defined in lex.yyp.c
      uses macro definition YY_CURRENT_BUFFER_LVALUE defined in lex.yyp.c
      uses macro definition YY_BUFFER_NEW defined in lex.yyp.c
      uses variable yy_buffer_state::yy_n_chars defined in lex.yyruby.c
      uses variable yypin defined in lex.yyp.c
      uses macro definition YY_BUFFER_NORMAL defined in lex.yyp.c
      uses function yy_get_previous_state(void) defined in lex.yyp.c
      uses function yy_try_NUL_trans(yy_state_type) defined in lex.yyp.c
      uses macro definition YY_MORE_ADJ defined in lex.yyp.c
      uses function yy_get_next_buffer(void) defined in lex.yyp.c
      uses macro definition EOB_ACT_END_OF_FILE defined in lex.yyp.c
      uses variable yy_did_buffer_switch_on_eof defined in lex.yyp.c
      uses function yypwrap(void) defined in lex.yyp.c
      uses macro definition YY_START defined in lex.yyp.c
      uses macro definition YY_NEW_FILE defined in lex.yyp.c
      uses macro definition EOB_ACT_CONTINUE_SCAN defined in lex.yyp.c
      uses macro definition EOB_ACT_LAST_MATCH defined in lex.yyp.c
      uses macro definition YY_FATAL_ERROR defined in lex.yyp.c
   function yyunput(int,register char *) in line 5050
      protection public
      36 lines of code
      2 parameters
      3 conditional paths
      uses variable yy_cp defined in lex.yyp.c
      uses variable yy_c_buf_p defined in lex.yyp.c
      uses variable yy_hold_char defined in lex.yyp.c
      uses variable yy_buffer_state::yy_ch_buf defined in lex.yyruby.c
      uses variable yy_buffer_state::yy_n_chars defined in lex.yyruby.c
      uses macro definition YY_CURRENT_BUFFER_LVALUE defined in lex.yyp.c
      uses variable yy_bp defined in lex.yyp.c
      uses function if(!) defined in lex.yyp.c
      uses macro definition YY_FATAL_ERROR defined in lex.yyp.c
      uses macro definition yytext_ptr defined in lex.yyp.c
   function isatty(int) in line 5274
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function yy_fatal_error(yyconst char *) in line 5516
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses macro definition YY_EXIT_FAILURE defined in lex.yyp.c
   function yypget_lineno(void) in line 5544
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable yyplineno defined in lex.yyp.c
   function yypget_in(void) in line 5553
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable yypin defined in lex.yyp.c
   function yypget_out(void) in line 5561
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable yypout defined in lex.yyp.c
   function yypget_leng(void) in line 5569
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable yypleng defined in lex.yyp.c
   function yypget_text(void) in line 5578
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable yyptext defined in lex.yyp.c
   function yypset_lineno(int) in line 5587
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable yyplineno defined in lex.yyp.c
   function yypset_in(FILE *) in line 5599
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable yypin defined in lex.yyp.c
   function yypset_out(FILE *) in line 5604
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable yypout defined in lex.yyp.c
   function yypget_debug(void) in line 5609
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable yyp_flex_debug defined in lex.yyp.c
   function yypset_debug(int) in line 5614
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable yyp_flex_debug defined in lex.yyp.c
   function yyplex_destroy(void) in line 5648
      protection public
      20 lines of code
      1 parameters
      4 conditional paths
      uses macro definition YY_CURRENT_BUFFER defined in lex.yyp.c
      uses function yyp_delete_buffer(YY_BUFFER_STATE) defined in lex.yyp.c
      uses macro definition YY_CURRENT_BUFFER_LVALUE defined in lex.yyp.c
      uses function yyppop_buffer_state(void) defined in lex.yyp.c
      uses function yypfree(void *) defined in lex.yyp.c
      uses variable yy_buffer_stack defined in lex.yyp.c
      uses function yy_init_globals(void) defined in lex.yyp.c
      uses macro definition yyconst defined in lex.yyp.c
   variable yy_buffer_state::yy_at_bol in line 226
      protection public
   variable yy_buffer_state::yy_bs_column in line 229
      protection public
   variable yy_buffer_state::yy_bs_lineno in line 228
      protection public
   variable yy_buffer_state::yy_buf_pos in line 197
      protection public
   variable yy_buffer_state::yy_buf_size in line 202
      protection public
   variable yy_buffer_state::yy_buffer_status in line 236
      protection public
   variable yy_buffer_state::yy_ch_buf in line 196
      protection public
   variable yy_buffer_state::yy_fill_buffer in line 234
      protection public
   variable yy_buffer_state::yy_input_file in line 194
      protection public
   variable yy_buffer_state::yy_is_interactive in line 220
      protection public
   variable yy_buffer_state::yy_is_our_buffer in line 213
      protection public
   variable yy_buffer_state::yy_n_chars in line 207
      protection public
   variable yy_trans_info::yy_nxt in line 371
      protection public
   variable yy_trans_info::yy_nxt in line 371
      protection public
   variable yy_trans_info::yy_verify in line 370
      protection public
   variable yy_trans_info::yy_verify in line 370
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/rats/rats-2.4/lex.yyperl.c
module lex.yyperl.c
   macro definition YY_INT_ALIGNED in line 4
      protection public
   macro definition FLEX_SCANNER in line 8
      protection public
   macro definition YY_FLEX_MAJOR_VERSION in line 9
      protection public
   macro definition YY_FLEX_MINOR_VERSION in line 10
      protection public
   macro definition YY_FLEX_SUBMINOR_VERSION in line 11
      protection public
   macro definition FLEX_BETA in line 13
      protection public
   macro definition FLEXINT_H in line 29
      protection public
   macro definition INT8_MIN in line 60
      protection public
   macro definition INT16_MIN in line 63
      protection public
   macro definition INT32_MIN in line 66
      protection public
   macro definition INT8_MAX in line 69
      protection public
   macro definition INT16_MAX in line 72
      protection public
   macro definition INT32_MAX in line 75
      protection public
   macro definition UINT8_MAX in line 78
      protection public
   macro definition UINT16_MAX in line 81
      protection public
   macro definition UINT32_MAX in line 84
      protection public
   macro definition yyconst in line 106
      protection public
   macro definition YY_NULL in line 110
      protection public
   macro definition YY_SC_TO_UI in line 117
      protection public
   macro definition BEGIN in line 123
      protection public
   macro definition YY_START in line 129
      protection public
   macro definition YYSTATE in line 130
      protection public
   macro definition YY_STATE_EOF in line 133
      protection public
   macro definition YY_NEW_FILE in line 136
      protection public
   macro definition YY_END_OF_BUFFER_CHAR in line 138
      protection public
   macro definition YY_BUF_SIZE in line 142
      protection public
   macro definition YY_STATE_BUF_SIZE in line 147
      protection public
   macro definition YY_TYPEDEF_YY_BUFFER_STATE in line 150
      protection public
   macro definition EOB_ACT_CONTINUE_SCAN in line 158
      protection public
   macro definition EOB_ACT_END_OF_FILE in line 159
      protection public
   macro definition EOB_ACT_LAST_MATCH in line 160
      protection public
   macro definition YY_LESS_LINENO in line 162
      protection public
   macro definition yyless in line 165
      protection public
   macro definition unput in line 178
      protection public
   macro definition YY_TYPEDEF_YY_SIZE_T in line 186
      protection public
   macro definition YY_STRUCT_YY_BUFFER_STATE in line 191
      protection public
   macro definition YY_BUFFER_NEW in line 238
      protection public
   macro definition YY_BUFFER_NORMAL in line 239
      protection public
   macro definition YY_BUFFER_EOF_PENDING in line 250
      protection public
   macro definition YY_CURRENT_BUFFER in line 266
      protection public
   macro definition YY_CURRENT_BUFFER_LVALUE in line 273
      protection public
   macro definition YY_FLUSH_BUFFER in line 302
      protection public
   macro definition yy_new_buffer in line 312
      protection public
   macro definition yy_set_interactive in line 314
      protection public
   macro definition yy_set_bol in line 324
      protection public
   macro definition YY_AT_BOL in line 334
      protection public
   macro definition yytext_ptr in line 349
      protection public
   macro definition YY_DO_BEFORE_ACTION in line 359
      protection public
   macro definition YY_NUM_RULES in line 366
      protection public
   macro definition YY_END_OF_BUFFER in line 367
      protection public
   macro definition REJECT in line 2572
      protection public
   macro definition yymore in line 2573
      protection public
   macro definition YY_MORE_ADJ in line 2574
      protection public
   macro definition YY_RESTORE_YY_MORE_OFFSET in line 2575
      protection public
   macro definition YY_INPUT in line 2612
      protection public
   macro definition INITIAL in line 2636
      protection public
   macro definition YY_EXTRA_TYPE in line 2647
      protection public
   macro definition YY_READ_BUF_SIZE in line 2686
      protection public
   macro definition ECHO in line 2694
      protection public
   macro definition yyterminate in line 2722
      protection public
   macro definition YY_START_STACK_INCR in line 2727
      protection public
   macro definition YY_FATAL_ERROR in line 2732
      protection public
   macro definition YY_DECL_IS_OURS in line 2741
      protection public
   macro definition YY_DECL in line 2745
      protection public
   macro definition YY_USER_ACTION in line 2752
      protection public
   macro definition YY_BREAK in line 2757
      protection public
   macro definition YY_RULE_SETUP in line 2760
      protection public
   macro definition YY_EXIT_FAILURE in line 4295
      protection public
   macro definition yyless in line 4307
      protection public
   macro definition YYTABLES_NAME in line 4497
      protection public
   typedef flex_int8_t in line 50
      protection public
   typedef flex_int16_t in line 51
      protection public
   typedef flex_int32_t in line 52
      protection public
   typedef flex_uint8_t in line 53
      protection public
   typedef flex_uint16_t in line 54
      protection public
   typedef flex_uint32_t in line 55
      protection public
   typedef YY_BUFFER_STATE in line 151
      protection public
   typedef yy_size_t in line 187
      protection public
   typedef YY_CHAR in line 338
      protection public
   typedef yy_state_type in line 342
      protection public
   variable yyperlleng in line 154
      protection public
   variable yyperlin in line 156
      protection public
   variable yyperlout in line 156
      protection public
   variable yy_buffer_stack_top in line 256
      protection public
   variable yy_buffer_stack_max in line 257
      protection public
   variable yy_buffer_stack in line 258
      protection public
   variable yy_hold_char in line 276
      protection public
   variable yy_n_chars in line 277
      protection public
   variable yy_c_buf_p in line 281
      protection public
   variable yy_init in line 282
      protection public
   variable yy_start in line 283
      protection public
   variable yy_did_buffer_switch_on_eof in line 288
      protection public
   variable yyperllineno in line 344
      protection public
   variable yyperltext in line 348
      protection public
   variable yy_transition in line 373
      protection public
   variable yy_start_state_list in line 2555
      protection public
   variable yy_last_accepting_state in line 2563
      protection public
   variable yy_last_accepting_cpos in line 2564
      protection public
   variable yyperl_flex_debug in line 2566
      protection public
   variable perllexreal_column in line 2601
      protection public
   variable perllex_column in line 2602
      protection public
   variable perllex_lineno in line 2603
      protection public
   variable yyperlcomment in line 2605
      protection public
   variable YY_DECL in line 2768
      protection public
   variable yy_cp in line 2771
      protection public
   variable yy_bp in line 2771
      protection public
   variable yy_act in line 2772
      protection public
   function yyperlrestart(FILE *) in line 290
      protection public
      12 lines of code
      1 parameters
      2 conditional paths
      uses macro definition YY_CURRENT_BUFFER defined in lex.yyperl.c
      uses function yyperlensure_buffer_stack(void) defined in lex.yyperl.c
      uses macro definition YY_CURRENT_BUFFER_LVALUE defined in lex.yyperl.c
      uses function yyperl_create_buffer(FILE *,int) defined in lex.yyperl.c
      uses variable yyperlin defined in lex.yyperl.c
      uses macro definition YY_BUF_SIZE defined in lex.yyperl.c
      uses function yyperl_init_buffer(YY_BUFFER_STATE,FILE *) defined in lex.yyperl.c
      uses function yyperl_load_buffer_state(void) defined in lex.yyperl.c
   function yyperl_switch_to_buffer(YY_BUFFER_STATE) in line 291
      protection public
      30 lines of code
      1 parameters
      3 conditional paths
      uses function yyperlensure_buffer_stack(void) defined in lex.yyperl.c
      uses macro definition YY_CURRENT_BUFFER defined in lex.yyperl.c
      uses variable yy_c_buf_p defined in lex.yyperl.c
      uses variable yy_hold_char defined in lex.yyperl.c
      uses macro definition YY_CURRENT_BUFFER_LVALUE defined in lex.yyperl.c
      uses variable yy_buffer_state::yy_n_chars defined in lex.yyruby.c
      uses function yyperl_load_buffer_state(void) defined in lex.yyperl.c
      uses variable yy_did_buffer_switch_on_eof defined in lex.yyperl.c
   function yyperl_create_buffer(FILE *,int) in line 292
      protection public
      23 lines of code
      2 parameters
      3 conditional paths
      uses function yyperlalloc(yy_size_t) defined in lex.yyperl.c
      uses macro definition YY_FATAL_ERROR defined in lex.yyperl.c
      uses variable yy_buffer_state::yy_buf_size defined in lex.yyruby.c
      uses variable yy_buffer_state::yy_ch_buf defined in lex.yyruby.c
      uses variable yy_buffer_state::yy_is_our_buffer defined in lex.yyruby.c
      uses function yyperl_init_buffer(YY_BUFFER_STATE,FILE *) defined in lex.yyperl.c
   function yyperl_delete_buffer(YY_BUFFER_STATE) in line 293
      protection public
      14 lines of code
      1 parameters
      4 conditional paths
      uses macro definition YY_CURRENT_BUFFER defined in lex.yyperl.c
      uses macro definition YY_CURRENT_BUFFER_LVALUE defined in lex.yyperl.c
      uses variable yy_buffer_state::yy_is_our_buffer defined in lex.yyruby.c
      uses function yyperlfree(void *) defined in lex.yyperl.c
      uses variable yy_buffer_state::yy_ch_buf defined in lex.yyruby.c
      uses function isatty(int) defined in lex.yyperl.c
   function yyperl_flush_buffer(YY_BUFFER_STATE) in line 294
      protection public
      22 lines of code
      1 parameters
      3 conditional paths
      uses variable yy_buffer_state::yy_n_chars defined in lex.yyruby.c
      uses variable yy_buffer_state::yy_ch_buf defined in lex.yyruby.c
      uses macro definition YY_END_OF_BUFFER_CHAR defined in lex.yyperl.c
      uses variable yy_buffer_state::yy_buf_pos defined in lex.yyruby.c
      uses variable yy_buffer_state::yy_at_bol defined in lex.yyruby.c
      uses variable yy_buffer_state::yy_buffer_status defined in lex.yyruby.c
      uses macro definition YY_BUFFER_NEW defined in lex.yyperl.c
      uses macro definition YY_CURRENT_BUFFER defined in lex.yyperl.c
      uses function yyperl_load_buffer_state(void) defined in lex.yyperl.c
   function yyperlpush_buffer_state(YY_BUFFER_STATE) in line 295
      protection public
      25 lines of code
      1 parameters
      4 conditional paths
      uses function yyperlensure_buffer_stack(void) defined in lex.yyperl.c
      uses macro definition YY_CURRENT_BUFFER defined in lex.yyperl.c
      uses variable yy_c_buf_p defined in lex.yyperl.c
      uses variable yy_hold_char defined in lex.yyperl.c
      uses macro definition YY_CURRENT_BUFFER_LVALUE defined in lex.yyperl.c
      uses variable yy_buffer_state::yy_n_chars defined in lex.yyruby.c
      uses variable yy_buffer_stack_top defined in lex.yyperl.c
      uses function yyperl_load_buffer_state(void) defined in lex.yyperl.c
      uses variable yy_did_buffer_switch_on_eof defined in lex.yyperl.c
   function yyperlpop_buffer_state(void) in line 296
      protection public
      15 lines of code
      1 parameters
      4 conditional paths
      uses macro definition YY_CURRENT_BUFFER defined in lex.yyperl.c
      uses function yyperl_delete_buffer(YY_BUFFER_STATE) defined in lex.yyperl.c
      uses macro definition YY_CURRENT_BUFFER_LVALUE defined in lex.yyperl.c
      uses variable yy_buffer_stack_top defined in lex.yyperl.c
      uses function yyperl_load_buffer_state(void) defined in lex.yyperl.c
      uses variable yy_did_buffer_switch_on_eof defined in lex.yyperl.c
   function yyperlensure_buffer_stack(void) in line 298
      protection public
      38 lines of code
      1 parameters
      3 conditional paths
      uses variable yy_buffer_stack defined in lex.yyperl.c
      uses function yyperlalloc(yy_size_t) defined in lex.yyperl.c
      uses variable yy_buffer_stack_max defined in lex.yyperl.c
      uses variable yy_buffer_stack_top defined in lex.yyperl.c
      uses function yyperlrealloc(void *,yy_size_t) defined in lex.yyperl.c
   function yyperl_load_buffer_state(void) in line 299
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses variable yy_buffer_state::yy_n_chars defined in lex.yyruby.c
      uses macro definition YY_CURRENT_BUFFER_LVALUE defined in lex.yyperl.c
      uses macro definition yytext_ptr defined in lex.yyperl.c
      uses variable yy_c_buf_p defined in lex.yyperl.c
      uses variable yyperlin defined in lex.yyperl.c
      uses variable yy_hold_char defined in lex.yyperl.c
   function yyperl_init_buffer(YY_BUFFER_STATE,FILE *) in line 300
      protection public
      23 lines of code
      2 parameters
      2 conditional paths
      uses function yyperl_flush_buffer(YY_BUFFER_STATE) defined in lex.yyperl.c
      uses variable yy_buffer_state::yy_input_file defined in lex.yyruby.c
      uses variable yy_buffer_state::yy_fill_buffer defined in lex.yyruby.c
      uses macro definition YY_CURRENT_BUFFER defined in lex.yyperl.c
      uses variable yy_buffer_state::yy_bs_lineno defined in lex.yyruby.c
      uses variable yy_buffer_state::yy_bs_column defined in lex.yyruby.c
      uses variable yy_buffer_state::yy_is_interactive defined in lex.yyruby.c
      uses function isatty(int) defined in lex.yyperl.c
   function yyperl_scan_buffer(char *,yy_size_t) in line 304
      protection public
      28 lines of code
      2 parameters
      3 conditional paths
      uses macro definition YY_END_OF_BUFFER_CHAR defined in lex.yyperl.c
      uses function yyperlalloc(yy_size_t) defined in lex.yyperl.c
      uses macro definition YY_FATAL_ERROR defined in lex.yyperl.c
      uses variable yy_buffer_state::yy_buf_size defined in lex.yyruby.c
      uses variable yy_buffer_state::yy_buf_pos defined in lex.yyruby.c
      uses variable yy_buffer_state::yy_ch_buf defined in lex.yyruby.c
      uses variable yy_buffer_state::yy_is_our_buffer defined in lex.yyruby.c
      uses variable yy_buffer_state::yy_input_file defined in lex.yyruby.c
      uses variable yy_buffer_state::yy_n_chars defined in lex.yyruby.c
      uses variable yy_buffer_state::yy_is_interactive defined in lex.yyruby.c
      uses variable yy_buffer_state::yy_at_bol defined in lex.yyruby.c
      uses variable yy_buffer_state::yy_fill_buffer defined in lex.yyruby.c
      uses variable yy_buffer_state::yy_buffer_status defined in lex.yyruby.c
      uses macro definition YY_BUFFER_NEW defined in lex.yyperl.c
      uses function yyperl_switch_to_buffer(YY_BUFFER_STATE) defined in lex.yyperl.c
   function yyperl_scan_string(yyconst char *) in line 305
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function yyperl_scan_bytes(yyconst char *,int) defined in lex.yyperl.c
   function yyperl_scan_bytes(yyconst char *,int) in line 306
      protection public
      29 lines of code
      2 parameters
      4 conditional paths
      uses function yyperlalloc(yy_size_t) defined in lex.yyperl.c
      uses macro definition YY_FATAL_ERROR defined in lex.yyperl.c
      uses macro definition YY_END_OF_BUFFER_CHAR defined in lex.yyperl.c
      uses function yyperl_scan_buffer(char *,yy_size_t) defined in lex.yyperl.c
      uses variable yy_buffer_state::yy_is_our_buffer defined in lex.yyruby.c
   function yyperlalloc(yy_size_t) in line 308
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function yyperlrealloc(void *,yy_size_t) in line 309
      protection public
      11 lines of code
      2 parameters
      1 conditional paths
   function yyperlfree(void *) in line 310
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function yy_get_previous_state(void) in line 351
      protection public
      19 lines of code
      1 parameters
      3 conditional paths
      uses variable yy_cp defined in lex.yyperl.c
      uses variable yy_start_state_list defined in lex.yyperl.c
      uses variable yy_start defined in lex.yyperl.c
      uses macro definition YY_AT_BOL defined in lex.yyperl.c
      uses macro definition yytext_ptr defined in lex.yyperl.c
      uses macro definition YY_MORE_ADJ defined in lex.yyperl.c
      uses variable yy_c_buf_p defined in lex.yyperl.c
      uses macro definition YY_SC_TO_UI defined in lex.yyperl.c
      uses variable yy_trans_info::yy_nxt defined in lex.yyruby.c
      uses variable yy_last_accepting_state defined in lex.yyperl.c
      uses variable yy_last_accepting_cpos defined in lex.yyperl.c
   function yy_try_NUL_trans(yy_state_type) in line 352
      protection public
      23 lines of code
      1 parameters
      3 conditional paths
      uses variable yy_cp defined in lex.yyperl.c
      uses variable yy_c_buf_p defined in lex.yyperl.c
      uses macro definition yyconst defined in lex.yyperl.c
      uses variable yy_trans_info::yy_nxt defined in lex.yyruby.c
      uses variable yy_trans_info::yy_verify defined in lex.yyruby.c
      uses variable yy_last_accepting_state defined in lex.yyperl.c
      uses variable yy_last_accepting_cpos defined in lex.yyperl.c
   function yy_get_next_buffer(void) in line 353
      protection public
      123 lines of code
      1 parameters
      13 conditional paths
      uses macro definition YY_CURRENT_BUFFER_LVALUE defined in lex.yyperl.c
      uses macro definition yytext_ptr defined in lex.yyperl.c
      uses variable yy_c_buf_p defined in lex.yyperl.c
      uses variable yy_buffer_state::yy_n_chars defined in lex.yyruby.c
      uses macro definition YY_FATAL_ERROR defined in lex.yyperl.c
      uses macro definition YY_MORE_ADJ defined in lex.yyperl.c
      uses macro definition EOB_ACT_END_OF_FILE defined in lex.yyperl.c
      uses macro definition EOB_ACT_LAST_MATCH defined in lex.yyperl.c
      uses macro definition YY_BUFFER_EOF_PENDING defined in lex.yyperl.c
      uses macro definition YY_CURRENT_BUFFER defined in lex.yyperl.c
      uses variable yy_buffer_state::yy_ch_buf defined in lex.yyruby.c
      uses variable yy_buffer_state::yy_is_our_buffer defined in lex.yyruby.c
      uses variable yy_buffer_state::yy_buf_size defined in lex.yyruby.c
      uses function yyperlrealloc(void *,yy_size_t) defined in lex.yyperl.c
      uses macro definition YY_READ_BUF_SIZE defined in lex.yyperl.c
      uses macro definition YY_INPUT defined in lex.yyperl.c
      uses function yyperlrestart(FILE *) defined in lex.yyperl.c
      uses variable yyperlin defined in lex.yyperl.c
      uses macro definition EOB_ACT_CONTINUE_SCAN defined in lex.yyperl.c
      uses macro definition YY_END_OF_BUFFER_CHAR defined in lex.yyperl.c
   function yy_fatal_error(yyconst char) in line 354
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function no_match(void) in line 2607
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable current_file defined in engine.c
      uses variable perllex_lineno defined in lex.yyperl.c
      uses variable yyperltext defined in lex.yyperl.c
   function gobble_pod(void) in line 2608
      protection public
      46 lines of code
      1 parameters
      15 conditional paths
      uses function input(void) defined in lex.yyperl.c
      uses variable perllexreal_column defined in lex.yyperl.c
      uses variable perllex_column defined in lex.yyperl.c
      uses variable perllex_lineno defined in lex.yyperl.c
   function count(void) in line 2609
      protection public
      21 lines of code
      1 parameters
      5 conditional paths
      uses variable perllexreal_column defined in lex.yyperl.c
      uses variable perllex_column defined in lex.yyperl.c
      uses variable yyperltext defined in lex.yyperl.c
   function gobble_string(char) in line 2610
      protection public
      32 lines of code
      1 parameters
      6 conditional paths
      uses function input(void) defined in lex.yyperl.c
      uses variable perllexreal_column defined in lex.yyperl.c
      uses variable perllex_column defined in lex.yyperl.c
      uses variable perllex_lineno defined in lex.yyperl.c
   function yy_init_globals(void) in line 2650
      protection public
      27 lines of code
      1 parameters
      1 conditional paths
      uses variable yy_buffer_stack defined in lex.yyperl.c
      uses variable yy_buffer_stack_top defined in lex.yyperl.c
      uses variable yy_buffer_stack_max defined in lex.yyperl.c
      uses variable yy_c_buf_p defined in lex.yyperl.c
      uses variable yy_init defined in lex.yyperl.c
      uses variable yy_start defined in lex.yyperl.c
      uses variable yyperlin defined in lex.yyperl.c
      uses variable yyperlout defined in lex.yyperl.c
   function yyperlwrap(void) in line 2660
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function yyunput(int,char *) in line 2664
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function input(void) in line 2679
      protection public
      70 lines of code
      1 parameters
      8 conditional paths
      uses variable yy_c_buf_p defined in lex.yyperl.c
      uses variable yy_hold_char defined in lex.yyperl.c
      uses macro definition YY_END_OF_BUFFER_CHAR defined in lex.yyperl.c
      uses macro definition YY_CURRENT_BUFFER_LVALUE defined in lex.yyperl.c
      uses variable yy_buffer_state::yy_n_chars defined in lex.yyruby.c
      uses macro definition yytext_ptr defined in lex.yyperl.c
      uses function yy_get_next_buffer(void) defined in lex.yyperl.c
      uses macro definition EOB_ACT_LAST_MATCH defined in lex.yyperl.c
      uses function yyperlrestart(FILE *) defined in lex.yyperl.c
      uses variable yyperlin defined in lex.yyperl.c
      uses macro definition EOB_ACT_END_OF_FILE defined in lex.yyperl.c
      uses function yyperlwrap(void) defined in lex.yyperl.c
      uses variable yy_did_buffer_switch_on_eof defined in lex.yyperl.c
      uses macro definition YY_NEW_FILE defined in lex.yyperl.c
      uses macro definition EOB_ACT_CONTINUE_SCAN defined in lex.yyperl.c
   function yyperllex(void) in line 2743
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function if(!) in line 2779
      protection public
      25 lines of code
      1 parameters
      6 conditional paths
      uses variable yy_init defined in lex.yyperl.c
      uses variable yy_start defined in lex.yyperl.c
      uses variable yyperlin defined in lex.yyperl.c
      uses variable yyperlout defined in lex.yyperl.c
      uses macro definition YY_CURRENT_BUFFER defined in lex.yyperl.c
      uses function yyperlensure_buffer_stack(void) defined in lex.yyperl.c
      uses macro definition YY_CURRENT_BUFFER_LVALUE defined in lex.yyperl.c
      uses function yyperl_create_buffer(FILE *,int) defined in lex.yyperl.c
      uses macro definition YY_BUF_SIZE defined in lex.yyperl.c
      uses function yyperl_load_buffer_state(void) defined in lex.yyperl.c
   function while(1) in line 2805
      protection public
      843 lines of code
      1 parameters
      106 conditional paths
      uses variable yy_cp defined in lex.yyperl.c
      uses variable yy_c_buf_p defined in lex.yyperl.c
      uses variable yy_hold_char defined in lex.yyperl.c
      uses variable yy_bp defined in lex.yyperl.c
      uses variable yy_start_state_list defined in lex.yyperl.c
      uses variable yy_start defined in lex.yyperl.c
      uses macro definition YY_AT_BOL defined in lex.yyperl.c
      uses macro definition yyconst defined in lex.yyperl.c
      uses macro definition YY_SC_TO_UI defined in lex.yyperl.c
      uses variable yy_trans_info::yy_verify defined in lex.yyruby.c
      uses variable yy_trans_info::yy_nxt defined in lex.yyruby.c
      uses variable yy_last_accepting_state defined in lex.yyperl.c
      uses variable yy_last_accepting_cpos defined in lex.yyperl.c
      uses variable yy_act defined in lex.yyperl.c
      uses macro definition YY_DO_BEFORE_ACTION defined in lex.yyperl.c
      uses macro definition YY_RULE_SETUP defined in lex.yyperl.c
      uses function count(void) defined in lex.yyperl.c
      uses variable perllex_lineno defined in lex.yyperl.c
      uses macro definition TOKEN_NEWLINE defined in python-tokens.h
      uses macro definition YY_BREAK defined in lex.yyperl.c
      uses macro definition TOKEN_PACKAGE defined in perl-tokens.h
      uses macro definition TOKEN_LINE defined in perl-tokens.h
      uses macro definition TOKEN_FILE defined in perl-tokens.h
      uses macro definition TOKEN_END defined in tokens.h
      uses macro definition TOKEN_DATA defined in perl-tokens.h
      uses macro definition TOKEN_NULL defined in perl-tokens.h
      uses function gobble_pod(void) defined in lex.yyperl.c
      uses macro definition TOKEN_PERLPOD defined in perl-tokens.h
      uses function gobble_string(char) defined in lex.yyperl.c
      uses macro definition TOKEN_QSTRING_LITERAL defined in perl-tokens.h
      uses macro definition TOKEN_QQSTRING_LITERAL defined in perl-tokens.h
      uses macro definition TOKEN_BACKTICK_LITERAL defined in perl-tokens.h
      uses macro definition TOKEN_REGEXP defined in perl-tokens.h
      uses macro definition TOKEN_HEX_CONST defined in tokens.h
      uses macro definition TOKEN_OCT_CONST defined in tokens.h
      uses macro definition TOKEN_DEC_CONST defined in tokens.h
      uses macro definition TOKEN_FLOAT_CONST defined in tokens.h
      uses macro definition TOKEN_RIGHT_ASSIGN defined in tokens.h
      uses macro definition TOKEN_LEFT_ASSIGN defined in tokens.h
      uses macro definition TOKEN_EXP_ASSIGN defined in python-tokens.h
      uses macro definition TOKEN_ADD_ASSIGN defined in tokens.h
      uses macro definition TOKEN_SUB_ASSIGN defined in tokens.h
      uses macro definition TOKEN_MUL_ASSIGN defined in tokens.h
      uses macro definition TOKEN_DIV_ASSIGN defined in tokens.h
      uses macro definition TOKEN_MOD_ASSIGN defined in tokens.h
      uses macro definition TOKEN_CONCAT_ASSIGN defined in perl-tokens.h
      uses macro definition TOKEN_REPEAT_ASSIGN defined in perl-tokens.h
      uses macro definition TOKEN_AND_ASSIGN defined in tokens.h
      uses macro definition TOKEN_OR_ASSIGN defined in tokens.h
      uses macro definition TOKEN_XOR_ASSIGN defined in tokens.h
      uses macro definition TOKEN_RIGHT_OP defined in tokens.h
      uses macro definition TOKEN_LEFT_OP defined in tokens.h
      uses macro definition TOKEN_EXP_OP defined in python-tokens.h
      uses macro definition TOKEN_LE_OP defined in tokens.h
      uses macro definition TOKEN_GE_OP defined in tokens.h
      uses macro definition TOKEN_EQ_OP defined in tokens.h
      uses macro definition TOKEN_NE_OP defined in tokens.h
      uses macro definition TOKEN_ID_SCALAR defined in perl-tokens.h
      uses macro definition TOKEN_ID_ARRAY defined in perl-tokens.h
      uses macro definition TOKEN_ID_HASHT defined in perl-tokens.h
      uses macro definition TOKEN_ID_HANDLE defined in perl-tokens.h
      uses function no_match(void) defined in lex.yyperl.c
      uses macro definition ECHO defined in lex.yyperl.c
      uses macro definition YY_STATE_EOF defined in lex.yyperl.c
      uses macro definition INITIAL defined in lex.yyperl.c
      uses macro definition yyterminate defined in lex.yyperl.c
      uses macro definition YY_END_OF_BUFFER defined in lex.yyperl.c
      uses macro definition yytext_ptr defined in lex.yyperl.c
      uses macro definition YY_RESTORE_YY_MORE_OFFSET defined in lex.yyperl.c
      uses macro definition YY_CURRENT_BUFFER_LVALUE defined in lex.yyperl.c
      uses macro definition YY_BUFFER_NEW defined in lex.yyperl.c
      uses variable yy_buffer_state::yy_n_chars defined in lex.yyruby.c
      uses variable yyperlin defined in lex.yyperl.c
      uses macro definition YY_BUFFER_NORMAL defined in lex.yyperl.c
      uses function yy_get_previous_state(void) defined in lex.yyperl.c
      uses function yy_try_NUL_trans(yy_state_type) defined in lex.yyperl.c
      uses macro definition YY_MORE_ADJ defined in lex.yyperl.c
      uses function yy_get_next_buffer(void) defined in lex.yyperl.c
      uses macro definition EOB_ACT_END_OF_FILE defined in lex.yyperl.c
      uses variable yy_did_buffer_switch_on_eof defined in lex.yyperl.c
      uses function yyperlwrap(void) defined in lex.yyperl.c
      uses macro definition YY_START defined in lex.yyperl.c
      uses macro definition YY_NEW_FILE defined in lex.yyperl.c
      uses macro definition EOB_ACT_CONTINUE_SCAN defined in lex.yyperl.c
      uses macro definition EOB_ACT_LAST_MATCH defined in lex.yyperl.c
      uses macro definition YY_FATAL_ERROR defined in lex.yyperl.c
   function yyunput(int,register char *) in line 3832
      protection public
      36 lines of code
      2 parameters
      3 conditional paths
      uses variable yy_cp defined in lex.yyperl.c
      uses variable yy_c_buf_p defined in lex.yyperl.c
      uses variable yy_hold_char defined in lex.yyperl.c
      uses variable yy_buffer_state::yy_ch_buf defined in lex.yyruby.c
      uses variable yy_buffer_state::yy_n_chars defined in lex.yyruby.c
      uses macro definition YY_CURRENT_BUFFER_LVALUE defined in lex.yyperl.c
      uses variable yy_bp defined in lex.yyperl.c
      uses function if(!) defined in lex.yyperl.c
      uses macro definition YY_FATAL_ERROR defined in lex.yyperl.c
      uses macro definition yytext_ptr defined in lex.yyperl.c
   function isatty(int) in line 4056
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function yy_fatal_error(yyconst char *) in line 4298
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses macro definition YY_EXIT_FAILURE defined in lex.yyperl.c
   function yyperlget_lineno(void) in line 4326
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable yyperllineno defined in lex.yyperl.c
   function yyperlget_in(void) in line 4335
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable yyperlin defined in lex.yyperl.c
   function yyperlget_out(void) in line 4343
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable yyperlout defined in lex.yyperl.c
   function yyperlget_leng(void) in line 4351
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable yyperlleng defined in lex.yyperl.c
   function yyperlget_text(void) in line 4360
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable yyperltext defined in lex.yyperl.c
   function yyperlset_lineno(int) in line 4369
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable yyperllineno defined in lex.yyperl.c
   function yyperlset_in(FILE *) in line 4381
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable yyperlin defined in lex.yyperl.c
   function yyperlset_out(FILE *) in line 4386
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable yyperlout defined in lex.yyperl.c
   function yyperlget_debug(void) in line 4391
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable yyperl_flex_debug defined in lex.yyperl.c
   function yyperlset_debug(int) in line 4396
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable yyperl_flex_debug defined in lex.yyperl.c
   function yyperllex_destroy(void) in line 4430
      protection public
      20 lines of code
      1 parameters
      4 conditional paths
      uses macro definition YY_CURRENT_BUFFER defined in lex.yyperl.c
      uses function yyperl_delete_buffer(YY_BUFFER_STATE) defined in lex.yyperl.c
      uses macro definition YY_CURRENT_BUFFER_LVALUE defined in lex.yyperl.c
      uses function yyperlpop_buffer_state(void) defined in lex.yyperl.c
      uses function yyperlfree(void *) defined in lex.yyperl.c
      uses variable yy_buffer_stack defined in lex.yyperl.c
      uses function yy_init_globals(void) defined in lex.yyperl.c
      uses macro definition yyconst defined in lex.yyperl.c
   variable yy_buffer_state::yy_at_bol in line 226
      protection public
   variable yy_buffer_state::yy_bs_column in line 229
      protection public
   variable yy_buffer_state::yy_bs_lineno in line 228
      protection public
   variable yy_buffer_state::yy_buf_pos in line 197
      protection public
   variable yy_buffer_state::yy_buf_size in line 202
      protection public
   variable yy_buffer_state::yy_buffer_status in line 236
      protection public
   variable yy_buffer_state::yy_ch_buf in line 196
      protection public
   variable yy_buffer_state::yy_fill_buffer in line 234
      protection public
   variable yy_buffer_state::yy_input_file in line 194
      protection public
   variable yy_buffer_state::yy_is_interactive in line 220
      protection public
   variable yy_buffer_state::yy_is_our_buffer in line 213
      protection public
   variable yy_buffer_state::yy_n_chars in line 207
      protection public
   variable yy_trans_info::yy_nxt in line 371
      protection public
   variable yy_trans_info::yy_nxt in line 371
      protection public
   variable yy_trans_info::yy_verify in line 370
      protection public
   variable yy_trans_info::yy_verify in line 370
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/rats/rats-2.4/lex.yyphp.c
module lex.yyphp.c
   macro definition YY_INT_ALIGNED in line 4
      protection public
   macro definition FLEX_SCANNER in line 8
      protection public
   macro definition YY_FLEX_MAJOR_VERSION in line 9
      protection public
   macro definition YY_FLEX_MINOR_VERSION in line 10
      protection public
   macro definition YY_FLEX_SUBMINOR_VERSION in line 11
      protection public
   macro definition FLEX_BETA in line 13
      protection public
   macro definition FLEXINT_H in line 29
      protection public
   macro definition INT8_MIN in line 60
      protection public
   macro definition INT16_MIN in line 63
      protection public
   macro definition INT32_MIN in line 66
      protection public
   macro definition INT8_MAX in line 69
      protection public
   macro definition INT16_MAX in line 72
      protection public
   macro definition INT32_MAX in line 75
      protection public
   macro definition UINT8_MAX in line 78
      protection public
   macro definition UINT16_MAX in line 81
      protection public
   macro definition UINT32_MAX in line 84
      protection public
   macro definition yyconst in line 106
      protection public
   macro definition YY_NULL in line 110
      protection public
   macro definition YY_SC_TO_UI in line 117
      protection public
   macro definition BEGIN in line 123
      protection public
   macro definition YY_START in line 129
      protection public
   macro definition YYSTATE in line 130
      protection public
   macro definition YY_STATE_EOF in line 133
      protection public
   macro definition YY_NEW_FILE in line 136
      protection public
   macro definition YY_END_OF_BUFFER_CHAR in line 138
      protection public
   macro definition YY_BUF_SIZE in line 142
      protection public
   macro definition YY_STATE_BUF_SIZE in line 147
      protection public
   macro definition YY_TYPEDEF_YY_BUFFER_STATE in line 150
      protection public
   macro definition EOB_ACT_CONTINUE_SCAN in line 158
      protection public
   macro definition EOB_ACT_END_OF_FILE in line 159
      protection public
   macro definition EOB_ACT_LAST_MATCH in line 160
      protection public
   macro definition YY_LESS_LINENO in line 162
      protection public
   macro definition yyless in line 165
      protection public
   macro definition unput in line 178
      protection public
   macro definition YY_TYPEDEF_YY_SIZE_T in line 186
      protection public
   macro definition YY_STRUCT_YY_BUFFER_STATE in line 191
      protection public
   macro definition YY_BUFFER_NEW in line 238
      protection public
   macro definition YY_BUFFER_NORMAL in line 239
      protection public
   macro definition YY_BUFFER_EOF_PENDING in line 250
      protection public
   macro definition YY_CURRENT_BUFFER in line 266
      protection public
   macro definition YY_CURRENT_BUFFER_LVALUE in line 273
      protection public
   macro definition YY_FLUSH_BUFFER in line 302
      protection public
   macro definition yy_new_buffer in line 312
      protection public
   macro definition yy_set_interactive in line 314
      protection public
   macro definition yy_set_bol in line 324
      protection public
   macro definition YY_AT_BOL in line 334
      protection public
   macro definition yytext_ptr in line 349
      protection public
   macro definition YY_DO_BEFORE_ACTION in line 359
      protection public
   macro definition YY_NUM_RULES in line 366
      protection public
   macro definition YY_END_OF_BUFFER in line 367
      protection public
   macro definition REJECT in line 9143
      protection public
   macro definition yymore in line 9144
      protection public
   macro definition YY_MORE_ADJ in line 9145
      protection public
   macro definition YY_RESTORE_YY_MORE_OFFSET in line 9146
      protection public
   macro definition YY_INPUT in line 9189
      protection public
   macro definition INITIAL in line 9213
      protection public
   macro definition IN_PHP_SCRIPT in line 9214
      protection public
   macro definition IN_PHP_OCOMMENT in line 9215
      protection public
   macro definition YY_EXTRA_TYPE in line 9226
      protection public
   macro definition YY_READ_BUF_SIZE in line 9275
      protection public
   macro definition ECHO in line 9283
      protection public
   macro definition yyterminate in line 9311
      protection public
   macro definition YY_START_STACK_INCR in line 9316
      protection public
   macro definition YY_FATAL_ERROR in line 9321
      protection public
   macro definition YY_DECL_IS_OURS in line 9330
      protection public
   macro definition YY_DECL in line 9334
      protection public
   macro definition YY_USER_ACTION in line 9341
      protection public
   macro definition YY_BREAK in line 9346
      protection public
   macro definition YY_RULE_SETUP in line 9349
      protection public
   macro definition YY_EXIT_FAILURE in line 10813
      protection public
   macro definition yyless in line 10825
      protection public
   macro definition YYTABLES_NAME in line 11023
      protection public
   typedef flex_int8_t in line 50
      protection public
   typedef flex_int16_t in line 51
      protection public
   typedef flex_int32_t in line 52
      protection public
   typedef flex_uint8_t in line 53
      protection public
   typedef flex_uint16_t in line 54
      protection public
   typedef flex_uint32_t in line 55
      protection public
   typedef YY_BUFFER_STATE in line 151
      protection public
   typedef yy_size_t in line 187
      protection public
   typedef YY_CHAR in line 338
      protection public
   typedef yy_state_type in line 342
      protection public
   variable yyphpleng in line 154
      protection public
   variable yyphpin in line 156
      protection public
   variable yyphpout in line 156
      protection public
   variable yy_buffer_stack_top in line 256
      protection public
   variable yy_buffer_stack_max in line 257
      protection public
   variable yy_buffer_stack in line 258
      protection public
   variable yy_hold_char in line 276
      protection public
   variable yy_n_chars in line 277
      protection public
   variable yy_c_buf_p in line 281
      protection public
   variable yy_init in line 282
      protection public
   variable yy_start in line 283
      protection public
   variable yy_did_buffer_switch_on_eof in line 288
      protection public
   variable yyphplineno in line 344
      protection public
   variable yyphptext in line 348
      protection public
   variable yy_transition in line 373
      protection public
   variable yy_start_state_list in line 9122
      protection public
   variable yy_last_accepting_state in line 9134
      protection public
   variable yy_last_accepting_cpos in line 9135
      protection public
   variable yyphp_flex_debug in line 9137
      protection public
   variable phplexreal_column in line 9174
      protection public
   variable phplex_column in line 9175
      protection public
   variable phplex_lineno in line 9176
      protection public
   variable yyphplength in line 9177
      protection public
   variable yyphpsize in line 9178
      protection public
   variable yyphpcomment in line 9179
      protection public
   variable yy_start_stack_ptr in line 9263
      protection public
   variable yy_start_stack_depth in line 9264
      protection public
   variable yy_start_stack in line 9265
      protection public
   variable YY_DECL in line 9354
      protection public
   variable yy_cp in line 9357
      protection public
   variable yy_bp in line 9357
      protection public
   variable yy_act in line 9358
      protection public
   function yyphprestart(FILE *) in line 290
      protection public
      12 lines of code
      1 parameters
      2 conditional paths
      uses macro definition YY_CURRENT_BUFFER defined in lex.yyphp.c
      uses function yyphpensure_buffer_stack(void) defined in lex.yyphp.c
      uses macro definition YY_CURRENT_BUFFER_LVALUE defined in lex.yyphp.c
      uses function yyphp_create_buffer(FILE *,int) defined in lex.yyphp.c
      uses variable yyphpin defined in lex.yyphp.c
      uses macro definition YY_BUF_SIZE defined in lex.yyphp.c
      uses function yyphp_init_buffer(YY_BUFFER_STATE,FILE *) defined in lex.yyphp.c
      uses function yyphp_load_buffer_state(void) defined in lex.yyphp.c
   function yyphp_switch_to_buffer(YY_BUFFER_STATE) in line 291
      protection public
      30 lines of code
      1 parameters
      3 conditional paths
      uses function yyphpensure_buffer_stack(void) defined in lex.yyphp.c
      uses macro definition YY_CURRENT_BUFFER defined in lex.yyphp.c
      uses variable yy_c_buf_p defined in lex.yyphp.c
      uses variable yy_hold_char defined in lex.yyphp.c
      uses macro definition YY_CURRENT_BUFFER_LVALUE defined in lex.yyphp.c
      uses variable yy_buffer_state::yy_n_chars defined in lex.yyruby.c
      uses function yyphp_load_buffer_state(void) defined in lex.yyphp.c
      uses variable yy_did_buffer_switch_on_eof defined in lex.yyphp.c
   function yyphp_create_buffer(FILE *,int) in line 292
      protection public
      23 lines of code
      2 parameters
      3 conditional paths
      uses function yyphpalloc(yy_size_t) defined in lex.yyphp.c
      uses macro definition YY_FATAL_ERROR defined in lex.yyphp.c
      uses variable yy_buffer_state::yy_buf_size defined in lex.yyruby.c
      uses variable yy_buffer_state::yy_ch_buf defined in lex.yyruby.c
      uses variable yy_buffer_state::yy_is_our_buffer defined in lex.yyruby.c
      uses function yyphp_init_buffer(YY_BUFFER_STATE,FILE *) defined in lex.yyphp.c
   function yyphp_delete_buffer(YY_BUFFER_STATE) in line 293
      protection public
      14 lines of code
      1 parameters
      4 conditional paths
      uses macro definition YY_CURRENT_BUFFER defined in lex.yyphp.c
      uses macro definition YY_CURRENT_BUFFER_LVALUE defined in lex.yyphp.c
      uses variable yy_buffer_state::yy_is_our_buffer defined in lex.yyruby.c
      uses function yyphpfree(void *) defined in lex.yyphp.c
      uses variable yy_buffer_state::yy_ch_buf defined in lex.yyruby.c
      uses function isatty(int) defined in lex.yyphp.c
   function yyphp_flush_buffer(YY_BUFFER_STATE) in line 294
      protection public
      22 lines of code
      1 parameters
      3 conditional paths
      uses variable yy_buffer_state::yy_n_chars defined in lex.yyruby.c
      uses variable yy_buffer_state::yy_ch_buf defined in lex.yyruby.c
      uses macro definition YY_END_OF_BUFFER_CHAR defined in lex.yyphp.c
      uses variable yy_buffer_state::yy_buf_pos defined in lex.yyruby.c
      uses variable yy_buffer_state::yy_at_bol defined in lex.yyruby.c
      uses variable yy_buffer_state::yy_buffer_status defined in lex.yyruby.c
      uses macro definition YY_BUFFER_NEW defined in lex.yyphp.c
      uses macro definition YY_CURRENT_BUFFER defined in lex.yyphp.c
      uses function yyphp_load_buffer_state(void) defined in lex.yyphp.c
   function yyphppush_buffer_state(YY_BUFFER_STATE) in line 295
      protection public
      25 lines of code
      1 parameters
      4 conditional paths
      uses function yyphpensure_buffer_stack(void) defined in lex.yyphp.c
      uses macro definition YY_CURRENT_BUFFER defined in lex.yyphp.c
      uses variable yy_c_buf_p defined in lex.yyphp.c
      uses variable yy_hold_char defined in lex.yyphp.c
      uses macro definition YY_CURRENT_BUFFER_LVALUE defined in lex.yyphp.c
      uses variable yy_buffer_state::yy_n_chars defined in lex.yyruby.c
      uses variable yy_buffer_stack_top defined in lex.yyphp.c
      uses function yyphp_load_buffer_state(void) defined in lex.yyphp.c
      uses variable yy_did_buffer_switch_on_eof defined in lex.yyphp.c
   function yyphppop_buffer_state(void) in line 296
      protection public
      15 lines of code
      1 parameters
      4 conditional paths
      uses macro definition YY_CURRENT_BUFFER defined in lex.yyphp.c
      uses function yyphp_delete_buffer(YY_BUFFER_STATE) defined in lex.yyphp.c
      uses macro definition YY_CURRENT_BUFFER_LVALUE defined in lex.yyphp.c
      uses variable yy_buffer_stack_top defined in lex.yyphp.c
      uses function yyphp_load_buffer_state(void) defined in lex.yyphp.c
      uses variable yy_did_buffer_switch_on_eof defined in lex.yyphp.c
   function yyphpensure_buffer_stack(void) in line 298
      protection public
      38 lines of code
      1 parameters
      3 conditional paths
      uses variable yy_buffer_stack defined in lex.yyphp.c
      uses function yyphpalloc(yy_size_t) defined in lex.yyphp.c
      uses variable yy_buffer_stack_max defined in lex.yyphp.c
      uses variable yy_buffer_stack_top defined in lex.yyphp.c
      uses function yyphprealloc(void *,yy_size_t) defined in lex.yyphp.c
   function yyphp_load_buffer_state(void) in line 299
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses variable yy_buffer_state::yy_n_chars defined in lex.yyruby.c
      uses macro definition YY_CURRENT_BUFFER_LVALUE defined in lex.yyphp.c
      uses macro definition yytext_ptr defined in lex.yyphp.c
      uses variable yy_c_buf_p defined in lex.yyphp.c
      uses variable yyphpin defined in lex.yyphp.c
      uses variable yy_hold_char defined in lex.yyphp.c
   function yyphp_init_buffer(YY_BUFFER_STATE,FILE *) in line 300
      protection public
      23 lines of code
      2 parameters
      2 conditional paths
      uses function yyphp_flush_buffer(YY_BUFFER_STATE) defined in lex.yyphp.c
      uses variable yy_buffer_state::yy_input_file defined in lex.yyruby.c
      uses variable yy_buffer_state::yy_fill_buffer defined in lex.yyruby.c
      uses macro definition YY_CURRENT_BUFFER defined in lex.yyphp.c
      uses variable yy_buffer_state::yy_bs_lineno defined in lex.yyruby.c
      uses variable yy_buffer_state::yy_bs_column defined in lex.yyruby.c
      uses variable yy_buffer_state::yy_is_interactive defined in lex.yyruby.c
      uses function isatty(int) defined in lex.yyphp.c
   function yyphp_scan_buffer(char *,yy_size_t) in line 304
      protection public
      28 lines of code
      2 parameters
      3 conditional paths
      uses macro definition YY_END_OF_BUFFER_CHAR defined in lex.yyphp.c
      uses function yyphpalloc(yy_size_t) defined in lex.yyphp.c
      uses macro definition YY_FATAL_ERROR defined in lex.yyphp.c
      uses variable yy_buffer_state::yy_buf_size defined in lex.yyruby.c
      uses variable yy_buffer_state::yy_buf_pos defined in lex.yyruby.c
      uses variable yy_buffer_state::yy_ch_buf defined in lex.yyruby.c
      uses variable yy_buffer_state::yy_is_our_buffer defined in lex.yyruby.c
      uses variable yy_buffer_state::yy_input_file defined in lex.yyruby.c
      uses variable yy_buffer_state::yy_n_chars defined in lex.yyruby.c
      uses variable yy_buffer_state::yy_is_interactive defined in lex.yyruby.c
      uses variable yy_buffer_state::yy_at_bol defined in lex.yyruby.c
      uses variable yy_buffer_state::yy_fill_buffer defined in lex.yyruby.c
      uses variable yy_buffer_state::yy_buffer_status defined in lex.yyruby.c
      uses macro definition YY_BUFFER_NEW defined in lex.yyphp.c
      uses function yyphp_switch_to_buffer(YY_BUFFER_STATE) defined in lex.yyphp.c
   function yyphp_scan_string(yyconst char *) in line 305
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function yyphp_scan_bytes(yyconst char *,int) defined in lex.yyphp.c
   function yyphp_scan_bytes(yyconst char *,int) in line 306
      protection public
      29 lines of code
      2 parameters
      4 conditional paths
      uses function yyphpalloc(yy_size_t) defined in lex.yyphp.c
      uses macro definition YY_FATAL_ERROR defined in lex.yyphp.c
      uses macro definition YY_END_OF_BUFFER_CHAR defined in lex.yyphp.c
      uses function yyphp_scan_buffer(char *,yy_size_t) defined in lex.yyphp.c
      uses variable yy_buffer_state::yy_is_our_buffer defined in lex.yyruby.c
   function yyphpalloc(yy_size_t) in line 308
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function yyphprealloc(void *,yy_size_t) in line 309
      protection public
      11 lines of code
      2 parameters
      1 conditional paths
   function yyphpfree(void *) in line 310
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function yy_get_previous_state(void) in line 351
      protection public
      19 lines of code
      1 parameters
      3 conditional paths
      uses variable yy_cp defined in lex.yyphp.c
      uses variable yy_start_state_list defined in lex.yyphp.c
      uses variable yy_start defined in lex.yyphp.c
      uses macro definition yytext_ptr defined in lex.yyphp.c
      uses macro definition YY_MORE_ADJ defined in lex.yyphp.c
      uses variable yy_c_buf_p defined in lex.yyphp.c
      uses macro definition YY_SC_TO_UI defined in lex.yyphp.c
      uses variable yy_trans_info::yy_nxt defined in lex.yyruby.c
      uses variable yy_last_accepting_state defined in lex.yyphp.c
      uses variable yy_last_accepting_cpos defined in lex.yyphp.c
   function yy_try_NUL_trans(yy_state_type) in line 352
      protection public
      23 lines of code
      1 parameters
      3 conditional paths
      uses variable yy_cp defined in lex.yyphp.c
      uses variable yy_c_buf_p defined in lex.yyphp.c
      uses macro definition yyconst defined in lex.yyphp.c
      uses variable yy_trans_info::yy_nxt defined in lex.yyruby.c
      uses variable yy_trans_info::yy_verify defined in lex.yyruby.c
      uses variable yy_last_accepting_state defined in lex.yyphp.c
      uses variable yy_last_accepting_cpos defined in lex.yyphp.c
   function yy_get_next_buffer(void) in line 353
      protection public
      123 lines of code
      1 parameters
      13 conditional paths
      uses macro definition YY_CURRENT_BUFFER_LVALUE defined in lex.yyphp.c
      uses macro definition yytext_ptr defined in lex.yyphp.c
      uses variable yy_c_buf_p defined in lex.yyphp.c
      uses variable yy_buffer_state::yy_n_chars defined in lex.yyruby.c
      uses macro definition YY_FATAL_ERROR defined in lex.yyphp.c
      uses macro definition YY_MORE_ADJ defined in lex.yyphp.c
      uses macro definition EOB_ACT_END_OF_FILE defined in lex.yyphp.c
      uses macro definition EOB_ACT_LAST_MATCH defined in lex.yyphp.c
      uses macro definition YY_BUFFER_EOF_PENDING defined in lex.yyphp.c
      uses macro definition YY_CURRENT_BUFFER defined in lex.yyphp.c
      uses variable yy_buffer_state::yy_ch_buf defined in lex.yyruby.c
      uses variable yy_buffer_state::yy_is_our_buffer defined in lex.yyruby.c
      uses variable yy_buffer_state::yy_buf_size defined in lex.yyruby.c
      uses function yyphprealloc(void *,yy_size_t) defined in lex.yyphp.c
      uses macro definition YY_READ_BUF_SIZE defined in lex.yyphp.c
      uses macro definition YY_INPUT defined in lex.yyphp.c
      uses function yyphprestart(FILE *) defined in lex.yyphp.c
      uses variable yyphpin defined in lex.yyphp.c
      uses macro definition EOB_ACT_CONTINUE_SCAN defined in lex.yyphp.c
      uses macro definition YY_END_OF_BUFFER_CHAR defined in lex.yyphp.c
   function yy_fatal_error(yyconst char) in line 354
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function count(void) in line 9181
      protection public
      21 lines of code
      1 parameters
      5 conditional paths
      uses variable phplexreal_column defined in lex.yyphp.c
      uses variable phplex_column defined in lex.yyphp.c
      uses variable yyphptext defined in lex.yyphp.c
   function identifier(void) in line 9182
      protection public
      13 lines of code
      1 parameters
      2 conditional paths
      uses variable yyphptext defined in lex.yyphp.c
      uses variable phplexreal_column defined in lex.yyphp.c
      uses variable phplex_column defined in lex.yyphp.c
      uses variable phplex_lineno defined in lex.yyphp.c
      uses macro definition TOKEN_IDENTIFIER defined in tokens.h
   function reset_comment(void) in line 9183
      protection public
      6 lines of code
      1 parameters
      2 conditional paths
      uses variable yyphpcomment defined in lex.yyphp.c
      uses variable yyphplength defined in lex.yyphp.c
   function cstyle_comment(void) in line 9184
      protection public
      39 lines of code
      1 parameters
      7 conditional paths
      uses function reset_comment(void) defined in lex.yyphp.c
      uses function input(void) defined in lex.yyphp.c
      uses variable phplexreal_column defined in lex.yyphp.c
      uses function accumulate_comment(char *,int) defined in lex.yyphp.c
      uses variable phplex_column defined in lex.yyphp.c
      uses variable phplex_lineno defined in lex.yyphp.c
      uses macro definition TOKEN_COMMENT defined in tokens.h
   function no_match(void) in line 9185
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable current_file defined in engine.c
      uses variable phplex_lineno defined in lex.yyphp.c
      uses variable yyphptext defined in lex.yyphp.c
   function gobble_string(char) in line 9186
      protection public
      32 lines of code
      1 parameters
      6 conditional paths
      uses function input(void) defined in lex.yyphp.c
      uses variable phplexreal_column defined in lex.yyphp.c
      uses variable phplex_column defined in lex.yyphp.c
      uses variable phplex_lineno defined in lex.yyphp.c
   function scan_yytext(void) in line 9187
      protection public
      16 lines of code
      1 parameters
      3 conditional paths
      uses variable yyphptext defined in lex.yyphp.c
      uses variable phplexreal_column defined in lex.yyphp.c
      uses variable phplex_column defined in lex.yyphp.c
      uses variable phplex_lineno defined in lex.yyphp.c
   function yy_init_globals(void) in line 9229
      protection public
      31 lines of code
      1 parameters
      1 conditional paths
      uses variable yy_buffer_stack defined in lex.yyphp.c
      uses variable yy_buffer_stack_top defined in lex.yyphp.c
      uses variable yy_buffer_stack_max defined in lex.yyphp.c
      uses variable yy_c_buf_p defined in lex.yyphp.c
      uses variable yy_init defined in lex.yyphp.c
      uses variable yy_start defined in lex.yyphp.c
      uses variable yy_start_stack_ptr defined in lex.yyphp.c
      uses variable yy_start_stack_depth defined in lex.yyphp.c
      uses variable yy_start_stack defined in lex.yyphp.c
      uses variable yyphpin defined in lex.yyphp.c
      uses variable yyphpout defined in lex.yyphp.c
   function yyphpwrap(void) in line 9239
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function yyunput(int,char *) in line 9243
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function input(void) in line 9258
      protection public
      68 lines of code
      1 parameters
      8 conditional paths
      uses variable yy_c_buf_p defined in lex.yyphp.c
      uses variable yy_hold_char defined in lex.yyphp.c
      uses macro definition YY_END_OF_BUFFER_CHAR defined in lex.yyphp.c
      uses macro definition YY_CURRENT_BUFFER_LVALUE defined in lex.yyphp.c
      uses variable yy_buffer_state::yy_n_chars defined in lex.yyruby.c
      uses macro definition yytext_ptr defined in lex.yyphp.c
      uses function yy_get_next_buffer(void) defined in lex.yyphp.c
      uses macro definition EOB_ACT_LAST_MATCH defined in lex.yyphp.c
      uses function yyphprestart(FILE *) defined in lex.yyphp.c
      uses variable yyphpin defined in lex.yyphp.c
      uses macro definition EOB_ACT_END_OF_FILE defined in lex.yyphp.c
      uses function yyphpwrap(void) defined in lex.yyphp.c
      uses variable yy_did_buffer_switch_on_eof defined in lex.yyphp.c
      uses macro definition YY_NEW_FILE defined in lex.yyphp.c
      uses macro definition EOB_ACT_CONTINUE_SCAN defined in lex.yyphp.c
   function yy_push_state(int) in line 9267
      protection public
      24 lines of code
      1 parameters
      4 conditional paths
      uses variable yy_start_stack_ptr defined in lex.yyphp.c
      uses variable yy_start_stack_depth defined in lex.yyphp.c
      uses macro definition YY_START_STACK_INCR defined in lex.yyphp.c
      uses variable yy_start_stack defined in lex.yyphp.c
      uses function yyphpalloc(yy_size_t) defined in lex.yyphp.c
      uses function yyphprealloc(void *,yy_size_t) defined in lex.yyphp.c
      uses macro definition YY_FATAL_ERROR defined in lex.yyphp.c
      uses macro definition YY_START defined in lex.yyphp.c
      uses macro definition BEGIN defined in lex.yyphp.c
   function yy_pop_state(void) in line 9269
      protection public
      7 lines of code
      1 parameters
      2 conditional paths
      uses variable yy_start_stack_ptr defined in lex.yyphp.c
      uses macro definition YY_FATAL_ERROR defined in lex.yyphp.c
      uses macro definition BEGIN defined in lex.yyphp.c
      uses variable yy_start_stack defined in lex.yyphp.c
   function yy_top_state(void) in line 9271
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable yy_start_stack defined in lex.yyphp.c
      uses variable yy_start_stack_ptr defined in lex.yyphp.c
   function yyphplex(void) in line 9332
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function if(!) in line 9365
      protection public
      25 lines of code
      1 parameters
      6 conditional paths
      uses variable yy_init defined in lex.yyphp.c
      uses variable yy_start defined in lex.yyphp.c
      uses variable yyphpin defined in lex.yyphp.c
      uses variable yyphpout defined in lex.yyphp.c
      uses macro definition YY_CURRENT_BUFFER defined in lex.yyphp.c
      uses function yyphpensure_buffer_stack(void) defined in lex.yyphp.c
      uses macro definition YY_CURRENT_BUFFER_LVALUE defined in lex.yyphp.c
      uses function yyphp_create_buffer(FILE *,int) defined in lex.yyphp.c
      uses macro definition YY_BUF_SIZE defined in lex.yyphp.c
      uses function yyphp_load_buffer_state(void) defined in lex.yyphp.c
   function while(1) in line 9391
      protection public
      739 lines of code
      1 parameters
      126 conditional paths
      uses variable yy_cp defined in lex.yyphp.c
      uses variable yy_c_buf_p defined in lex.yyphp.c
      uses variable yy_hold_char defined in lex.yyphp.c
      uses variable yy_bp defined in lex.yyphp.c
      uses variable yy_start_state_list defined in lex.yyphp.c
      uses variable yy_start defined in lex.yyphp.c
      uses macro definition yyconst defined in lex.yyphp.c
      uses macro definition YY_SC_TO_UI defined in lex.yyphp.c
      uses variable yy_trans_info::yy_verify defined in lex.yyruby.c
      uses variable yy_trans_info::yy_nxt defined in lex.yyruby.c
      uses variable yy_last_accepting_state defined in lex.yyphp.c
      uses variable yy_last_accepting_cpos defined in lex.yyphp.c
      uses variable yy_act defined in lex.yyphp.c
      uses macro definition YY_DO_BEFORE_ACTION defined in lex.yyphp.c
      uses macro definition YY_RULE_SETUP defined in lex.yyphp.c
      uses macro definition BEGIN defined in lex.yyphp.c
      uses macro definition IN_PHP_SCRIPT defined in lex.yyphp.c
      uses function scan_yytext(void) defined in lex.yyphp.c
      uses function count(void) defined in lex.yyphp.c
      uses macro definition TOKEN_PHP_IN_SCRIPT defined in php-tokens.h
      uses macro definition YY_BREAK defined in lex.yyphp.c
      uses macro definition INITIAL defined in lex.yyphp.c
      uses macro definition IN_PHP_OCOMMENT defined in lex.yyphp.c
      uses macro definition TOKEN_COMMENT defined in tokens.h
      uses function cstyle_comment(void) defined in lex.yyphp.c
      uses macro definition TOKEN_FUNCTION defined in php-tokens.h
      uses macro definition TOKEN_CONST defined in c-tokens.h
      uses macro definition TOKEN_RETURN defined in tokens.h
      uses macro definition TOKEN_IF defined in tokens.h
      uses macro definition TOKEN_ELSEIF defined in php-tokens.h
      uses macro definition TOKEN_ELSE defined in tokens.h
      uses macro definition TOKEN_WHILE defined in tokens.h
      uses macro definition TOKEN_ENDWHILE defined in php-tokens.h
      uses macro definition TOKEN_DO defined in c-tokens.h
      uses macro definition TOKEN_FOR defined in tokens.h
      uses macro definition TOKEN_ENDFOR defined in php-tokens.h
      uses macro definition TOKEN_FOREACH defined in php-tokens.h
      uses macro definition TOKEN_ENDFOREACH defined in php-tokens.h
      uses macro definition TOKEN_DECLARE defined in php-tokens.h
      uses macro definition TOKEN_ENDDECLARE defined in php-tokens.h
      uses macro definition TOKEN_AS defined in php-tokens.h
      uses macro definition TOKEN_SWITCH defined in c-tokens.h
      uses macro definition TOKEN_ENDSWITCH defined in php-tokens.h
      uses macro definition TOKEN_CASE defined in c-tokens.h
      uses macro definition TOKEN_DEFAULT defined in c-tokens.h
      uses macro definition TOKEN_BREAK defined in tokens.h
      uses macro definition TOKEN_CONTINUE defined in tokens.h
      uses macro definition TOKEN_PRINT defined in python-tokens.h
      uses macro definition TOKEN_CLASS defined in python-tokens.h
      uses macro definition TOKEN_EXTENDS defined in php-tokens.h
      uses macro definition TOKEN_VAR defined in php-tokens.h
      uses macro definition TOKEN_DOUBLE_ARROW defined in php-tokens.h
      uses macro definition TOKEN_INC_OP defined in c-tokens.h
      uses macro definition TOKEN_DEC_OP defined in c-tokens.h
      uses macro definition TOKEN_T_EQUAL defined in php-tokens.h
      uses macro definition TOKEN_T_NOTEQUAL defined in php-tokens.h
      uses macro definition TOKEN_EQ_OP defined in tokens.h
      uses macro definition TOKEN_NE_OP defined in tokens.h
      uses macro definition TOKEN_LE_OP defined in tokens.h
      uses macro definition TOKEN_GE_OP defined in tokens.h
      uses macro definition TOKEN_ADD_ASSIGN defined in tokens.h
      uses macro definition TOKEN_SUB_ASSIGN defined in tokens.h
      uses macro definition TOKEN_MUL_ASSIGN defined in tokens.h
      uses macro definition TOKEN_DIV_ASSIGN defined in tokens.h
      uses macro definition TOKEN_CONCAT_ASSIGN defined in perl-tokens.h
      uses macro definition TOKEN_MOD_ASSIGN defined in tokens.h
      uses macro definition TOKEN_LEFT_ASSIGN defined in tokens.h
      uses macro definition TOKEN_RIGHT_ASSIGN defined in tokens.h
      uses macro definition TOKEN_AND_ASSIGN defined in tokens.h
      uses macro definition TOKEN_OR_ASSIGN defined in tokens.h
      uses macro definition TOKEN_XOR_ASSIGN defined in tokens.h
      uses macro definition TOKEN_OR_OP defined in c-tokens.h
      uses macro definition TOKEN_AND_OP defined in c-tokens.h
      uses macro definition TOKEN_XOR_OP defined in php-tokens.h
      uses macro definition TOKEN_LEFT_OP defined in tokens.h
      uses macro definition TOKEN_RIGHT_OP defined in tokens.h
      uses macro definition TOKEN_HEX_CONST defined in tokens.h
      uses macro definition TOKEN_DEC_CONST defined in tokens.h
      uses function identifier(void) defined in lex.yyphp.c
      uses function gobble_string(char) defined in lex.yyphp.c
      uses macro definition TOKEN_STRING_CONST defined in tokens.h
      uses variable phplex_lineno defined in lex.yyphp.c
      uses function no_match(void) defined in lex.yyphp.c
      uses macro definition ECHO defined in lex.yyphp.c
      uses macro definition YY_STATE_EOF defined in lex.yyphp.c
      uses macro definition yyterminate defined in lex.yyphp.c
      uses macro definition YY_END_OF_BUFFER defined in lex.yyphp.c
      uses macro definition yytext_ptr defined in lex.yyphp.c
      uses macro definition YY_RESTORE_YY_MORE_OFFSET defined in lex.yyphp.c
      uses macro definition YY_CURRENT_BUFFER_LVALUE defined in lex.yyphp.c
      uses macro definition YY_BUFFER_NEW defined in lex.yyphp.c
      uses variable yy_buffer_state::yy_n_chars defined in lex.yyruby.c
      uses variable yyphpin defined in lex.yyphp.c
      uses macro definition YY_BUFFER_NORMAL defined in lex.yyphp.c
      uses function yy_get_previous_state(void) defined in lex.yyphp.c
      uses function yy_try_NUL_trans(yy_state_type) defined in lex.yyphp.c
      uses macro definition YY_MORE_ADJ defined in lex.yyphp.c
      uses function yy_get_next_buffer(void) defined in lex.yyphp.c
      uses macro definition EOB_ACT_END_OF_FILE defined in lex.yyphp.c
      uses variable yy_did_buffer_switch_on_eof defined in lex.yyphp.c
      uses function yyphpwrap(void) defined in lex.yyphp.c
      uses macro definition YY_START defined in lex.yyphp.c
      uses macro definition YY_NEW_FILE defined in lex.yyphp.c
      uses macro definition EOB_ACT_CONTINUE_SCAN defined in lex.yyphp.c
      uses macro definition EOB_ACT_LAST_MATCH defined in lex.yyphp.c
      uses macro definition YY_FATAL_ERROR defined in lex.yyphp.c
   function yyunput(int,register char *) in line 10314
      protection public
      36 lines of code
      2 parameters
      3 conditional paths
      uses variable yy_cp defined in lex.yyphp.c
      uses variable yy_c_buf_p defined in lex.yyphp.c
      uses variable yy_hold_char defined in lex.yyphp.c
      uses variable yy_buffer_state::yy_ch_buf defined in lex.yyruby.c
      uses variable yy_buffer_state::yy_n_chars defined in lex.yyruby.c
      uses macro definition YY_CURRENT_BUFFER_LVALUE defined in lex.yyphp.c
      uses variable yy_bp defined in lex.yyphp.c
      uses function if(!) defined in lex.yyphp.c
      uses macro definition YY_FATAL_ERROR defined in lex.yyphp.c
      uses macro definition yytext_ptr defined in lex.yyphp.c
   function isatty(int) in line 10536
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function yy_fatal_error(yyconst char *) in line 10816
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses macro definition YY_EXIT_FAILURE defined in lex.yyphp.c
   function yyphpget_lineno(void) in line 10844
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable yyphplineno defined in lex.yyphp.c
   function yyphpget_in(void) in line 10853
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable yyphpin defined in lex.yyphp.c
   function yyphpget_out(void) in line 10861
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable yyphpout defined in lex.yyphp.c
   function yyphpget_leng(void) in line 10869
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable yyphpleng defined in lex.yyphp.c
   function yyphpget_text(void) in line 10878
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable yyphptext defined in lex.yyphp.c
   function yyphpset_lineno(int) in line 10887
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable yyphplineno defined in lex.yyphp.c
   function yyphpset_in(FILE *) in line 10899
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable yyphpin defined in lex.yyphp.c
   function yyphpset_out(FILE *) in line 10904
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable yyphpout defined in lex.yyphp.c
   function yyphpget_debug(void) in line 10909
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable yyphp_flex_debug defined in lex.yyphp.c
   function yyphpset_debug(int) in line 10914
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable yyphp_flex_debug defined in lex.yyphp.c
   function yyphplex_destroy(void) in line 10952
      protection public
      24 lines of code
      1 parameters
      4 conditional paths
      uses macro definition YY_CURRENT_BUFFER defined in lex.yyphp.c
      uses function yyphp_delete_buffer(YY_BUFFER_STATE) defined in lex.yyphp.c
      uses macro definition YY_CURRENT_BUFFER_LVALUE defined in lex.yyphp.c
      uses function yyphppop_buffer_state(void) defined in lex.yyphp.c
      uses function yyphpfree(void *) defined in lex.yyphp.c
      uses variable yy_buffer_stack defined in lex.yyphp.c
      uses variable yy_start_stack defined in lex.yyphp.c
      uses function yy_init_globals(void) defined in lex.yyphp.c
      uses macro definition yyconst defined in lex.yyphp.c
   function accumulate_comment(char *,int) in line 11135
      protection public
      19 lines of code
      2 parameters
      3 conditional paths
      uses variable yyphpcomment defined in lex.yyphp.c
      uses variable yyphplength defined in lex.yyphp.c
      uses variable yyphpsize defined in lex.yyphp.c
      uses macro definition data defined in kazhash.c
   variable yy_buffer_state::yy_at_bol in line 226
      protection public
   variable yy_buffer_state::yy_bs_column in line 229
      protection public
   variable yy_buffer_state::yy_bs_lineno in line 228
      protection public
   variable yy_buffer_state::yy_buf_pos in line 197
      protection public
   variable yy_buffer_state::yy_buf_size in line 202
      protection public
   variable yy_buffer_state::yy_buffer_status in line 236
      protection public
   variable yy_buffer_state::yy_ch_buf in line 196
      protection public
   variable yy_buffer_state::yy_fill_buffer in line 234
      protection public
   variable yy_buffer_state::yy_input_file in line 194
      protection public
   variable yy_buffer_state::yy_is_interactive in line 220
      protection public
   variable yy_buffer_state::yy_is_our_buffer in line 213
      protection public
   variable yy_buffer_state::yy_n_chars in line 207
      protection public
   variable yy_trans_info::yy_nxt in line 371
      protection public
   variable yy_trans_info::yy_nxt in line 371
      protection public
   variable yy_trans_info::yy_verify in line 370
      protection public
   variable yy_trans_info::yy_verify in line 370
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/rats/rats-2.4/lex.yyruby.c
module lex.yyruby.c
   macro definition YY_INT_ALIGNED in line 4
      protection public
   macro definition yy_create_buffer in line 8
      protection public
   macro definition yy_delete_buffer in line 9
      protection public
   macro definition yy_flex_debug in line 10
      protection public
   macro definition yy_init_buffer in line 11
      protection public
   macro definition yy_flush_buffer in line 12
      protection public
   macro definition yy_load_buffer_state in line 13
      protection public
   macro definition yy_switch_to_buffer in line 14
      protection public
   macro definition yyin in line 15
      protection public
   macro definition yyleng in line 16
      protection public
   macro definition yylex in line 17
      protection public
   macro definition yylineno in line 18
      protection public
   macro definition yyout in line 19
      protection public
   macro definition yyrestart in line 20
      protection public
   macro definition yytext in line 21
      protection public
   macro definition yywrap in line 22
      protection public
   macro definition yyalloc in line 23
      protection public
   macro definition yyrealloc in line 24
      protection public
   macro definition yyfree in line 25
      protection public
   macro definition FLEX_SCANNER in line 27
      protection public
   macro definition YY_FLEX_MAJOR_VERSION in line 28
      protection public
   macro definition YY_FLEX_MINOR_VERSION in line 29
      protection public
   macro definition YY_FLEX_SUBMINOR_VERSION in line 30
      protection public
   macro definition FLEX_BETA in line 32
      protection public
   macro definition FLEXINT_H in line 48
      protection public
   macro definition INT8_MIN in line 79
      protection public
   macro definition INT16_MIN in line 82
      protection public
   macro definition INT32_MIN in line 85
      protection public
   macro definition INT8_MAX in line 88
      protection public
   macro definition INT16_MAX in line 91
      protection public
   macro definition INT32_MAX in line 94
      protection public
   macro definition UINT8_MAX in line 97
      protection public
   macro definition UINT16_MAX in line 100
      protection public
   macro definition UINT32_MAX in line 103
      protection public
   macro definition yyconst in line 126
      protection public
   macro definition YY_NULL in line 130
      protection public
   macro definition YY_SC_TO_UI in line 137
      protection public
   macro definition BEGIN in line 143
      protection public
   macro definition YY_START in line 149
      protection public
   macro definition YYSTATE in line 150
      protection public
   macro definition YY_STATE_EOF in line 153
      protection public
   macro definition YY_NEW_FILE in line 156
      protection public
   macro definition YY_END_OF_BUFFER_CHAR in line 158
      protection public
   macro definition YY_BUF_SIZE in line 162
      protection public
   macro definition YY_STATE_BUF_SIZE in line 167
      protection public
   macro definition YY_TYPEDEF_YY_BUFFER_STATE in line 170
      protection public
   macro definition EOB_ACT_CONTINUE_SCAN in line 178
      protection public
   macro definition EOB_ACT_END_OF_FILE in line 179
      protection public
   macro definition EOB_ACT_LAST_MATCH in line 180
      protection public
   macro definition YY_LESS_LINENO in line 182
      protection public
   macro definition yyless in line 185
      protection public
   macro definition unput in line 198
      protection public
   macro definition YY_TYPEDEF_YY_SIZE_T in line 201
      protection public
   macro definition YY_STRUCT_YY_BUFFER_STATE in line 206
      protection public
   macro definition YY_BUFFER_NEW in line 253
      protection public
   macro definition YY_BUFFER_NORMAL in line 254
      protection public
   macro definition YY_BUFFER_EOF_PENDING in line 265
      protection public
   macro definition YY_CURRENT_BUFFER in line 281
      protection public
   macro definition YY_CURRENT_BUFFER_LVALUE in line 288
      protection public
   macro definition YY_FLUSH_BUFFER in line 317
      protection public
   macro definition yy_new_buffer in line 327
      protection public
   macro definition yy_set_interactive in line 329
      protection public
   macro definition yy_set_bol in line 339
      protection public
   macro definition YY_AT_BOL in line 349
      protection public
   macro definition yytext_ptr in line 364
      protection public
   macro definition YY_DO_BEFORE_ACTION in line 374
      protection public
   macro definition YY_NUM_RULES in line 381
      protection public
   macro definition YY_END_OF_BUFFER in line 382
      protection public
   macro definition REJECT in line 5083
      protection public
   macro definition yymore in line 5084
      protection public
   macro definition YY_MORE_ADJ in line 5085
      protection public
   macro definition YY_RESTORE_YY_MORE_OFFSET in line 5086
      protection public
   macro definition YY_INPUT in line 5114
      protection public
   macro definition INITIAL in line 5136
      protection public
   macro definition YY_EXTRA_TYPE in line 5147
      protection public
   macro definition YY_READ_BUF_SIZE in line 5215
      protection public
   macro definition ECHO in line 5223
      protection public
   macro definition yyterminate in line 5251
      protection public
   macro definition YY_START_STACK_INCR in line 5256
      protection public
   macro definition YY_FATAL_ERROR in line 5261
      protection public
   macro definition YY_DECL_IS_OURS in line 5270
      protection public
   macro definition YY_DECL in line 5274
      protection public
   macro definition YY_USER_ACTION in line 5281
      protection public
   macro definition YY_BREAK in line 5286
      protection public
   macro definition YY_RULE_SETUP in line 5289
      protection public
   macro definition YY_EXIT_FAILURE in line 6713
      protection public
   macro definition yyless in line 6725
      protection public
   macro definition YYTABLES_NAME in line 6915
      protection public
   typedef flex_int8_t in line 69
      protection public
   typedef flex_int16_t in line 70
      protection public
   typedef flex_int32_t in line 71
      protection public
   typedef flex_uint8_t in line 72
      protection public
   typedef flex_uint16_t in line 73
      protection public
   typedef flex_uint32_t in line 74
      protection public
   typedef YY_BUFFER_STATE in line 171
      protection public
   typedef yy_size_t in line 202
      protection public
   typedef YY_CHAR in line 353
      protection public
   typedef yy_state_type in line 357
      protection public
   variable yyrubyleng in line 174
      protection public
   variable yyrubyin in line 176
      protection public
   variable yyrubyout in line 176
      protection public
   variable yy_buffer_stack_top in line 271
      protection public
   variable yy_buffer_stack_max in line 272
      protection public
   variable yy_buffer_stack in line 273
      protection public
   variable yy_hold_char in line 291
      protection public
   variable yy_n_chars in line 292
      protection public
   variable yy_c_buf_p in line 296
      protection public
   variable yy_init in line 297
      protection public
   variable yy_start in line 298
      protection public
   variable yy_did_buffer_switch_on_eof in line 303
      protection public
   variable yyrubylineno in line 359
      protection public
   variable yyrubytext in line 363
      protection public
   variable yy_transition in line 388
      protection public
   variable yy_start_state_list in line 5067
      protection public
   variable yy_last_accepting_state in line 5074
      protection public
   variable yy_last_accepting_cpos in line 5075
      protection public
   variable yyruby_flex_debug in line 5077
      protection public
   variable rubylexreal_column in line 5097
      protection public
   variable rubylex_column in line 5098
      protection public
   variable rubylex_lineno in line 5099
      protection public
   variable yyrubysize in line 5101
      protection public
   variable yyrubycomment in line 5102
      protection public
   variable YY_DECL in line 5297
      protection public
   variable yy_cp in line 5300
      protection public
   variable yy_bp in line 5300
      protection public
   variable yy_act in line 5301
      protection public
   function yyrubyrestart(FILE *) in line 305
      protection public
      12 lines of code
      1 parameters
      2 conditional paths
      uses macro definition YY_CURRENT_BUFFER defined in lex.yyruby.c
      uses function yyrubyensure_buffer_stack(void) defined in lex.yyruby.c
      uses macro definition YY_CURRENT_BUFFER_LVALUE defined in lex.yyruby.c
      uses function yyruby_create_buffer(FILE *,int) defined in lex.yyruby.c
      uses variable yyrubyin defined in lex.yyruby.c
      uses macro definition YY_BUF_SIZE defined in lex.yyruby.c
      uses function yyruby_init_buffer(YY_BUFFER_STATE,FILE *) defined in lex.yyruby.c
      uses function yyruby_load_buffer_state(void) defined in lex.yyruby.c
   function yyruby_switch_to_buffer(YY_BUFFER_STATE) in line 306
      protection public
      30 lines of code
      1 parameters
      3 conditional paths
      uses function yyrubyensure_buffer_stack(void) defined in lex.yyruby.c
      uses macro definition YY_CURRENT_BUFFER defined in lex.yyruby.c
      uses variable yy_c_buf_p defined in lex.yyruby.c
      uses variable yy_hold_char defined in lex.yyruby.c
      uses macro definition YY_CURRENT_BUFFER_LVALUE defined in lex.yyruby.c
      uses variable yy_buffer_state::yy_n_chars defined in lex.yyruby.c
      uses function yyruby_load_buffer_state(void) defined in lex.yyruby.c
      uses variable yy_did_buffer_switch_on_eof defined in lex.yyruby.c
   function yyruby_create_buffer(FILE *,int) in line 307
      protection public
      23 lines of code
      2 parameters
      3 conditional paths
      uses function yyrubyalloc(yy_size_t) defined in lex.yyruby.c
      uses macro definition YY_FATAL_ERROR defined in lex.yyruby.c
      uses variable yy_buffer_state::yy_buf_size defined in lex.yyruby.c
      uses variable yy_buffer_state::yy_ch_buf defined in lex.yyruby.c
      uses variable yy_buffer_state::yy_is_our_buffer defined in lex.yyruby.c
      uses function yyruby_init_buffer(YY_BUFFER_STATE,FILE *) defined in lex.yyruby.c
   function yyruby_delete_buffer(YY_BUFFER_STATE) in line 308
      protection public
      14 lines of code
      1 parameters
      4 conditional paths
      uses macro definition YY_CURRENT_BUFFER defined in lex.yyruby.c
      uses macro definition YY_CURRENT_BUFFER_LVALUE defined in lex.yyruby.c
      uses variable yy_buffer_state::yy_is_our_buffer defined in lex.yyruby.c
      uses function yyrubyfree(void *) defined in lex.yyruby.c
      uses variable yy_buffer_state::yy_ch_buf defined in lex.yyruby.c
      uses function isatty(int) defined in lex.yyruby.c
   function yyruby_flush_buffer(YY_BUFFER_STATE) in line 309
      protection public
      22 lines of code
      1 parameters
      3 conditional paths
      uses variable yy_buffer_state::yy_n_chars defined in lex.yyruby.c
      uses variable yy_buffer_state::yy_ch_buf defined in lex.yyruby.c
      uses macro definition YY_END_OF_BUFFER_CHAR defined in lex.yyruby.c
      uses variable yy_buffer_state::yy_buf_pos defined in lex.yyruby.c
      uses variable yy_buffer_state::yy_at_bol defined in lex.yyruby.c
      uses variable yy_buffer_state::yy_buffer_status defined in lex.yyruby.c
      uses macro definition YY_BUFFER_NEW defined in lex.yyruby.c
      uses macro definition YY_CURRENT_BUFFER defined in lex.yyruby.c
      uses function yyruby_load_buffer_state(void) defined in lex.yyruby.c
   function yyrubypush_buffer_state(YY_BUFFER_STATE) in line 310
      protection public
      25 lines of code
      1 parameters
      4 conditional paths
      uses function yyrubyensure_buffer_stack(void) defined in lex.yyruby.c
      uses macro definition YY_CURRENT_BUFFER defined in lex.yyruby.c
      uses variable yy_c_buf_p defined in lex.yyruby.c
      uses variable yy_hold_char defined in lex.yyruby.c
      uses macro definition YY_CURRENT_BUFFER_LVALUE defined in lex.yyruby.c
      uses variable yy_buffer_state::yy_n_chars defined in lex.yyruby.c
      uses variable yy_buffer_stack_top defined in lex.yyruby.c
      uses function yyruby_load_buffer_state(void) defined in lex.yyruby.c
      uses variable yy_did_buffer_switch_on_eof defined in lex.yyruby.c
   function yyrubypop_buffer_state(void) in line 311
      protection public
      15 lines of code
      1 parameters
      4 conditional paths
      uses macro definition YY_CURRENT_BUFFER defined in lex.yyruby.c
      uses function yyruby_delete_buffer(YY_BUFFER_STATE) defined in lex.yyruby.c
      uses macro definition YY_CURRENT_BUFFER_LVALUE defined in lex.yyruby.c
      uses variable yy_buffer_stack_top defined in lex.yyruby.c
      uses function yyruby_load_buffer_state(void) defined in lex.yyruby.c
      uses variable yy_did_buffer_switch_on_eof defined in lex.yyruby.c
   function yyrubyensure_buffer_stack(void) in line 313
      protection public
      42 lines of code
      1 parameters
      5 conditional paths
      uses variable yy_buffer_stack defined in lex.yyruby.c
      uses function yyrubyalloc(yy_size_t) defined in lex.yyruby.c
      uses macro definition YY_FATAL_ERROR defined in lex.yyruby.c
      uses variable yy_buffer_stack_max defined in lex.yyruby.c
      uses variable yy_buffer_stack_top defined in lex.yyruby.c
      uses function yyrubyrealloc(void *,yy_size_t) defined in lex.yyruby.c
   function yyruby_load_buffer_state(void) in line 314
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses variable yy_buffer_state::yy_n_chars defined in lex.yyruby.c
      uses macro definition YY_CURRENT_BUFFER_LVALUE defined in lex.yyruby.c
      uses macro definition yytext_ptr defined in lex.yyruby.c
      uses variable yy_c_buf_p defined in lex.yyruby.c
      uses variable yyrubyin defined in lex.yyruby.c
      uses variable yy_hold_char defined in lex.yyruby.c
   function yyruby_init_buffer(YY_BUFFER_STATE,FILE *) in line 315
      protection public
      23 lines of code
      2 parameters
      2 conditional paths
      uses function yyruby_flush_buffer(YY_BUFFER_STATE) defined in lex.yyruby.c
      uses variable yy_buffer_state::yy_input_file defined in lex.yyruby.c
      uses variable yy_buffer_state::yy_fill_buffer defined in lex.yyruby.c
      uses macro definition YY_CURRENT_BUFFER defined in lex.yyruby.c
      uses variable yy_buffer_state::yy_bs_lineno defined in lex.yyruby.c
      uses variable yy_buffer_state::yy_bs_column defined in lex.yyruby.c
      uses variable yy_buffer_state::yy_is_interactive defined in lex.yyruby.c
      uses function isatty(int) defined in lex.yyruby.c
   function yyruby_scan_buffer(char *,yy_size_t) in line 319
      protection public
      28 lines of code
      2 parameters
      3 conditional paths
      uses macro definition YY_END_OF_BUFFER_CHAR defined in lex.yyruby.c
      uses function yyrubyalloc(yy_size_t) defined in lex.yyruby.c
      uses macro definition YY_FATAL_ERROR defined in lex.yyruby.c
      uses variable yy_buffer_state::yy_buf_size defined in lex.yyruby.c
      uses variable yy_buffer_state::yy_buf_pos defined in lex.yyruby.c
      uses variable yy_buffer_state::yy_ch_buf defined in lex.yyruby.c
      uses variable yy_buffer_state::yy_is_our_buffer defined in lex.yyruby.c
      uses variable yy_buffer_state::yy_input_file defined in lex.yyruby.c
      uses variable yy_buffer_state::yy_n_chars defined in lex.yyruby.c
      uses variable yy_buffer_state::yy_is_interactive defined in lex.yyruby.c
      uses variable yy_buffer_state::yy_at_bol defined in lex.yyruby.c
      uses variable yy_buffer_state::yy_fill_buffer defined in lex.yyruby.c
      uses variable yy_buffer_state::yy_buffer_status defined in lex.yyruby.c
      uses macro definition YY_BUFFER_NEW defined in lex.yyruby.c
      uses function yyruby_switch_to_buffer(YY_BUFFER_STATE) defined in lex.yyruby.c
   function yyruby_scan_string(yyconst char *) in line 320
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses function yyruby_scan_bytes(yyconst char *,int) defined in lex.yyruby.c
   function yyruby_scan_bytes(yyconst char *,int) in line 321
      protection public
      29 lines of code
      2 parameters
      4 conditional paths
      uses function yyrubyalloc(yy_size_t) defined in lex.yyruby.c
      uses macro definition YY_FATAL_ERROR defined in lex.yyruby.c
      uses macro definition YY_END_OF_BUFFER_CHAR defined in lex.yyruby.c
      uses function yyruby_scan_buffer(char *,yy_size_t) defined in lex.yyruby.c
      uses variable yy_buffer_state::yy_is_our_buffer defined in lex.yyruby.c
   function yyrubyalloc(yy_size_t) in line 323
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function yyrubyrealloc(void *,yy_size_t) in line 324
      protection public
      11 lines of code
      2 parameters
      1 conditional paths
   function yyrubyfree(void *) in line 325
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function yy_get_previous_state(void) in line 366
      protection public
      19 lines of code
      1 parameters
      3 conditional paths
      uses variable yy_cp defined in lex.yyruby.c
      uses variable yy_start_state_list defined in lex.yyruby.c
      uses variable yy_start defined in lex.yyruby.c
      uses macro definition YY_AT_BOL defined in lex.yyruby.c
      uses macro definition yytext_ptr defined in lex.yyruby.c
      uses macro definition YY_MORE_ADJ defined in lex.yyruby.c
      uses variable yy_c_buf_p defined in lex.yyruby.c
      uses macro definition YY_SC_TO_UI defined in lex.yyruby.c
      uses variable yy_trans_info::yy_nxt defined in lex.yyruby.c
      uses variable yy_last_accepting_state defined in lex.yyruby.c
      uses variable yy_last_accepting_cpos defined in lex.yyruby.c
   function yy_try_NUL_trans(yy_state_type) in line 367
      protection public
      23 lines of code
      1 parameters
      3 conditional paths
      uses variable yy_cp defined in lex.yyruby.c
      uses variable yy_c_buf_p defined in lex.yyruby.c
      uses macro definition yyconst defined in lex.yyruby.c
      uses variable yy_trans_info::yy_nxt defined in lex.yyruby.c
      uses variable yy_trans_info::yy_verify defined in lex.yyruby.c
      uses variable yy_last_accepting_state defined in lex.yyruby.c
      uses variable yy_last_accepting_cpos defined in lex.yyruby.c
   function yy_get_next_buffer(void) in line 368
      protection public
      131 lines of code
      1 parameters
      15 conditional paths
      uses macro definition YY_CURRENT_BUFFER_LVALUE defined in lex.yyruby.c
      uses macro definition yytext_ptr defined in lex.yyruby.c
      uses variable yy_c_buf_p defined in lex.yyruby.c
      uses variable yy_buffer_state::yy_n_chars defined in lex.yyruby.c
      uses macro definition YY_FATAL_ERROR defined in lex.yyruby.c
      uses macro definition YY_MORE_ADJ defined in lex.yyruby.c
      uses macro definition EOB_ACT_END_OF_FILE defined in lex.yyruby.c
      uses macro definition EOB_ACT_LAST_MATCH defined in lex.yyruby.c
      uses macro definition YY_BUFFER_EOF_PENDING defined in lex.yyruby.c
      uses macro definition YY_CURRENT_BUFFER defined in lex.yyruby.c
      uses variable yy_buffer_state::yy_ch_buf defined in lex.yyruby.c
      uses variable yy_buffer_state::yy_is_our_buffer defined in lex.yyruby.c
      uses variable yy_buffer_state::yy_buf_size defined in lex.yyruby.c
      uses function yyrubyrealloc(void *,yy_size_t) defined in lex.yyruby.c
      uses macro definition YY_READ_BUF_SIZE defined in lex.yyruby.c
      uses macro definition YY_INPUT defined in lex.yyruby.c
      uses function yyrubyrestart(FILE *) defined in lex.yyruby.c
      uses variable yyrubyin defined in lex.yyruby.c
      uses macro definition EOB_ACT_CONTINUE_SCAN defined in lex.yyruby.c
      uses macro definition YY_END_OF_BUFFER_CHAR defined in lex.yyruby.c
   function yy_fatal_error(yyconst char) in line 369
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function count(void) in line 5105
      protection public
      21 lines of code
      1 parameters
      5 conditional paths
      uses variable rubylexreal_column defined in lex.yyruby.c
      uses variable rubylex_column defined in lex.yyruby.c
      uses variable yyrubytext defined in lex.yyruby.c
   function identifier(void) in line 5106
      protection public
      13 lines of code
      1 parameters
      2 conditional paths
      uses variable yyrubytext defined in lex.yyruby.c
      uses variable rubylexreal_column defined in lex.yyruby.c
      uses variable rubylex_column defined in lex.yyruby.c
      uses variable rubylex_lineno defined in lex.yyruby.c
      uses macro definition TOKEN_IDENTIFIER defined in tokens.h
   function reset_comment(void) in line 5107
      protection public
      6 lines of code
      1 parameters
      2 conditional paths
      uses variable yyrubycomment defined in lex.yyruby.c
      uses variable yyclength defined in lex.yyc.c
   function rubystyle_comment(void) in line 5108
      protection public
      64 lines of code
      1 parameters
      10 conditional paths
      uses function reset_comment(void) defined in lex.yyruby.c
      uses function input(void) defined in lex.yyruby.c
      uses variable rubylexreal_column defined in lex.yyruby.c
      uses function ruby_accumulate_comment(char *,int) defined in lex.yyruby.c
      uses variable rubylex_column defined in lex.yyruby.c
      uses variable rubylex_lineno defined in lex.yyruby.c
      uses macro definition TOKEN_COMMENT defined in tokens.h
   function ruby_accumulate_comment(char *,int) in line 5109
      protection public
      19 lines of code
      2 parameters
      3 conditional paths
      uses variable yyrubycomment defined in lex.yyruby.c
      uses variable yyclength defined in lex.yyc.c
      uses variable yyrubysize defined in lex.yyruby.c
      uses macro definition data defined in kazhash.c
   function no_match(void) in line 5110
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable current_file defined in engine.c
      uses variable rubylex_lineno defined in lex.yyruby.c
      uses variable yyrubytext defined in lex.yyruby.c
   function gobble_string(char) in line 5111
      protection public
      32 lines of code
      1 parameters
      6 conditional paths
      uses function input(void) defined in lex.yyruby.c
      uses variable rubylexreal_column defined in lex.yyruby.c
      uses variable rubylex_column defined in lex.yyruby.c
      uses variable rubylex_lineno defined in lex.yyruby.c
   function scan_yytext(void) in line 5112
      protection public
      16 lines of code
      1 parameters
      3 conditional paths
      uses variable yyrubytext defined in lex.yyruby.c
      uses variable rubylexreal_column defined in lex.yyruby.c
      uses variable rubylex_column defined in lex.yyruby.c
      uses variable rubylex_lineno defined in lex.yyruby.c
   function yy_init_globals(void) in line 5150
      protection public
      27 lines of code
      1 parameters
      1 conditional paths
      uses variable yy_buffer_stack defined in lex.yyruby.c
      uses variable yy_buffer_stack_top defined in lex.yyruby.c
      uses variable yy_buffer_stack_max defined in lex.yyruby.c
      uses variable yy_c_buf_p defined in lex.yyruby.c
      uses variable yy_init defined in lex.yyruby.c
      uses variable yy_start defined in lex.yyruby.c
      uses variable yyrubyin defined in lex.yyruby.c
      uses variable yyrubyout defined in lex.yyruby.c
   function yyrubylex_destroy(void) in line 5155
      protection public
      20 lines of code
      1 parameters
      4 conditional paths
      uses macro definition YY_CURRENT_BUFFER defined in lex.yyruby.c
      uses function yyruby_delete_buffer(YY_BUFFER_STATE) defined in lex.yyruby.c
      uses macro definition YY_CURRENT_BUFFER_LVALUE defined in lex.yyruby.c
      uses function yyrubypop_buffer_state(void) defined in lex.yyruby.c
      uses function yyrubyfree(void *) defined in lex.yyruby.c
      uses variable yy_buffer_stack defined in lex.yyruby.c
      uses function yy_init_globals(void) defined in lex.yyruby.c
      uses macro definition yyconst defined in lex.yyruby.c
   function yyrubyget_debug(void) in line 5157
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable yyruby_flex_debug defined in lex.yyruby.c
   function yyrubyset_debug(int) in line 5159
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable yyruby_flex_debug defined in lex.yyruby.c
   function yyrubyget_extra(void) in line 5161
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function yyrubyset_extra(YY_EXTRA_TYPE) in line 5163
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function yyrubyget_in(void) in line 5165
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable yyrubyin defined in lex.yyruby.c
   function yyrubyset_in(FILE *) in line 5167
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable yyrubyin defined in lex.yyruby.c
   function yyrubyget_out(void) in line 5169
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable yyrubyout defined in lex.yyruby.c
   function yyrubyset_out(FILE *) in line 5171
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable yyrubyout defined in lex.yyruby.c
   function yyrubyget_leng(void) in line 5173
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable yyrubyleng defined in lex.yyruby.c
   function yyrubyget_text(void) in line 5175
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
      uses variable yyrubytext defined in lex.yyruby.c
   function yyrubyget_lineno(void) in line 5177
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable yyrubylineno defined in lex.yyruby.c
   function yyrubyset_lineno(int) in line 5179
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable yyrubylineno defined in lex.yyruby.c
   function yyrubywrap(void) in line 5189
      protection public
      4 lines of code
      1 parameters
      1 conditional paths
   function yyunput(int,char *) in line 5193
      protection public
      1 lines of code
      2 parameters
      1 conditional paths
   function input(void) in line 5208
      protection public
      70 lines of code
      1 parameters
      8 conditional paths
      uses variable yy_c_buf_p defined in lex.yyruby.c
      uses variable yy_hold_char defined in lex.yyruby.c
      uses macro definition YY_END_OF_BUFFER_CHAR defined in lex.yyruby.c
      uses macro definition YY_CURRENT_BUFFER_LVALUE defined in lex.yyruby.c
      uses variable yy_buffer_state::yy_n_chars defined in lex.yyruby.c
      uses macro definition yytext_ptr defined in lex.yyruby.c
      uses function yy_get_next_buffer(void) defined in lex.yyruby.c
      uses macro definition EOB_ACT_LAST_MATCH defined in lex.yyruby.c
      uses function yyrubyrestart(FILE *) defined in lex.yyruby.c
      uses variable yyrubyin defined in lex.yyruby.c
      uses macro definition EOB_ACT_END_OF_FILE defined in lex.yyruby.c
      uses function yyrubywrap(void) defined in lex.yyruby.c
      uses variable yy_did_buffer_switch_on_eof defined in lex.yyruby.c
      uses macro definition YY_NEW_FILE defined in lex.yyruby.c
      uses macro definition EOB_ACT_CONTINUE_SCAN defined in lex.yyruby.c
   function yyrubylex(void) in line 5272
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function if(!) in line 5308
      protection public
      25 lines of code
      1 parameters
      6 conditional paths
      uses variable yy_init defined in lex.yyruby.c
      uses variable yy_start defined in lex.yyruby.c
      uses variable yyrubyin defined in lex.yyruby.c
      uses variable yyrubyout defined in lex.yyruby.c
      uses macro definition YY_CURRENT_BUFFER defined in lex.yyruby.c
      uses function yyrubyensure_buffer_stack(void) defined in lex.yyruby.c
      uses macro definition YY_CURRENT_BUFFER_LVALUE defined in lex.yyruby.c
      uses function yyruby_create_buffer(FILE *,int) defined in lex.yyruby.c
      uses macro definition YY_BUF_SIZE defined in lex.yyruby.c
      uses function yyruby_load_buffer_state(void) defined in lex.yyruby.c
   function while(1) in line 5334
      protection public
      720 lines of code
      1 parameters
      128 conditional paths
      uses variable yy_cp defined in lex.yyruby.c
      uses variable yy_c_buf_p defined in lex.yyruby.c
      uses variable yy_hold_char defined in lex.yyruby.c
      uses variable yy_bp defined in lex.yyruby.c
      uses variable yy_start_state_list defined in lex.yyruby.c
      uses variable yy_start defined in lex.yyruby.c
      uses macro definition YY_AT_BOL defined in lex.yyruby.c
      uses macro definition yyconst defined in lex.yyruby.c
      uses macro definition YY_SC_TO_UI defined in lex.yyruby.c
      uses variable yy_trans_info::yy_verify defined in lex.yyruby.c
      uses variable yy_trans_info::yy_nxt defined in lex.yyruby.c
      uses variable yy_last_accepting_state defined in lex.yyruby.c
      uses variable yy_last_accepting_cpos defined in lex.yyruby.c
      uses variable yy_act defined in lex.yyruby.c
      uses macro definition YY_DO_BEFORE_ACTION defined in lex.yyruby.c
      uses macro definition YY_RULE_SETUP defined in lex.yyruby.c
      uses function count(void) defined in lex.yyruby.c
      uses function reset_comment(void) defined in lex.yyruby.c
      uses function ruby_accumulate_comment(char *,int) defined in lex.yyruby.c
      uses variable yyrubytext defined in lex.yyruby.c
      uses macro definition TOKEN_COMMENT defined in tokens.h
      uses macro definition YY_BREAK defined in lex.yyruby.c
      uses variable rubylex_lineno defined in lex.yyruby.c
      uses macro definition TOKEN_NEWLINE defined in python-tokens.h
      uses function rubystyle_comment(void) defined in lex.yyruby.c
      uses macro definition TOKEN_AND defined in python-tokens.h
      uses macro definition TOKEN_BREAK defined in tokens.h
      uses macro definition TOKEN_CASE defined in c-tokens.h
      uses macro definition TOKEN_CLASS defined in python-tokens.h
      uses macro definition TOKEN_DEF defined in python-tokens.h
      uses macro definition TOKEN_DO defined in c-tokens.h
      uses macro definition TOKEN_ELSE defined in tokens.h
      uses macro definition TOKEN_END defined in tokens.h
      uses macro definition TOKEN_FOR defined in tokens.h
      uses macro definition TOKEN_IF defined in tokens.h
      uses macro definition TOKEN_IN defined in python-tokens.h
      uses macro definition TOKEN_NOT defined in python-tokens.h
      uses macro definition TOKEN_OR defined in python-tokens.h
      uses macro definition TOKEN_RETURN defined in tokens.h
      uses macro definition TOKEN_WHILE defined in tokens.h
      uses function gobble_string(char) defined in lex.yyruby.c
      uses macro definition TOKEN_SSTRING_LITERAL defined in python-tokens.h
      uses macro definition TOKEN_HEX_CONST defined in tokens.h
      uses macro definition TOKEN_OCT_CONST defined in tokens.h
      uses macro definition TOKEN_DEC_CONST defined in tokens.h
      uses macro definition TOKEN_FLOAT_CONST defined in tokens.h
      uses macro definition TOKEN_IMAG_CONST defined in tokens.h
      uses macro definition TOKEN_REGEXP defined in perl-tokens.h
      uses function identifier(void) defined in lex.yyruby.c
      uses macro definition TOKEN_RIGHT_ASSIGN defined in tokens.h
      uses macro definition TOKEN_LEFT_ASSIGN defined in tokens.h
      uses macro definition TOKEN_EXP_ASSIGN defined in python-tokens.h
      uses macro definition TOKEN_ADD_ASSIGN defined in tokens.h
      uses macro definition TOKEN_SUB_ASSIGN defined in tokens.h
      uses macro definition TOKEN_MUL_ASSIGN defined in tokens.h
      uses macro definition TOKEN_DIV_ASSIGN defined in tokens.h
      uses macro definition TOKEN_MOD_ASSIGN defined in tokens.h
      uses macro definition TOKEN_AND_ASSIGN defined in tokens.h
      uses macro definition TOKEN_OR_ASSIGN defined in tokens.h
      uses macro definition TOKEN_XOR_ASSIGN defined in tokens.h
      uses macro definition TOKEN_RIGHT_OP defined in tokens.h
      uses macro definition TOKEN_LEFT_OP defined in tokens.h
      uses macro definition TOKEN_EXP_OP defined in python-tokens.h
      uses macro definition TOKEN_LE_OP defined in tokens.h
      uses macro definition TOKEN_GE_OP defined in tokens.h
      uses macro definition TOKEN_EQ_OP defined in tokens.h
      uses macro definition TOKEN_NE_OP defined in tokens.h
      uses function no_match(void) defined in lex.yyruby.c
      uses macro definition ECHO defined in lex.yyruby.c
      uses macro definition YY_STATE_EOF defined in lex.yyruby.c
      uses macro definition INITIAL defined in lex.yyruby.c
      uses macro definition yyterminate defined in lex.yyruby.c
      uses macro definition YY_END_OF_BUFFER defined in lex.yyruby.c
      uses macro definition yytext_ptr defined in lex.yyruby.c
      uses macro definition YY_RESTORE_YY_MORE_OFFSET defined in lex.yyruby.c
      uses macro definition YY_CURRENT_BUFFER_LVALUE defined in lex.yyruby.c
      uses macro definition YY_BUFFER_NEW defined in lex.yyruby.c
      uses variable yy_buffer_state::yy_n_chars defined in lex.yyruby.c
      uses variable yyrubyin defined in lex.yyruby.c
      uses macro definition YY_BUFFER_NORMAL defined in lex.yyruby.c
      uses function yy_get_previous_state(void) defined in lex.yyruby.c
      uses function yy_try_NUL_trans(yy_state_type) defined in lex.yyruby.c
      uses macro definition YY_MORE_ADJ defined in lex.yyruby.c
      uses function yy_get_next_buffer(void) defined in lex.yyruby.c
      uses macro definition EOB_ACT_END_OF_FILE defined in lex.yyruby.c
      uses variable yy_did_buffer_switch_on_eof defined in lex.yyruby.c
      uses function yyrubywrap(void) defined in lex.yyruby.c
      uses macro definition YY_START defined in lex.yyruby.c
      uses macro definition YY_NEW_FILE defined in lex.yyruby.c
      uses macro definition EOB_ACT_CONTINUE_SCAN defined in lex.yyruby.c
      uses macro definition EOB_ACT_LAST_MATCH defined in lex.yyruby.c
      uses macro definition YY_FATAL_ERROR defined in lex.yyruby.c
   function yyunput(int,register char *) in line 6246
      protection public
      36 lines of code
      2 parameters
      3 conditional paths
      uses variable yy_cp defined in lex.yyruby.c
      uses variable yy_c_buf_p defined in lex.yyruby.c
      uses variable yy_hold_char defined in lex.yyruby.c
      uses variable yy_buffer_state::yy_ch_buf defined in lex.yyruby.c
      uses variable yy_buffer_state::yy_n_chars defined in lex.yyruby.c
      uses macro definition YY_CURRENT_BUFFER_LVALUE defined in lex.yyruby.c
      uses variable yy_bp defined in lex.yyruby.c
      uses function if(!) defined in lex.yyruby.c
      uses macro definition YY_FATAL_ERROR defined in lex.yyruby.c
      uses macro definition yytext_ptr defined in lex.yyruby.c
   function isatty(int) in line 6470
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function yy_fatal_error(yyconst char *) in line 6716
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses macro definition YY_EXIT_FAILURE defined in lex.yyruby.c
   variable yy_buffer_state::yy_at_bol in line 226
      protection public
   variable yy_buffer_state::yy_bs_column in line 229
      protection public
   variable yy_buffer_state::yy_bs_lineno in line 228
      protection public
   variable yy_buffer_state::yy_buf_pos in line 197
      protection public
   variable yy_buffer_state::yy_buf_size in line 202
      protection public
   variable yy_buffer_state::yy_buffer_status in line 236
      protection public
   variable yy_buffer_state::yy_ch_buf in line 196
      protection public
   variable yy_buffer_state::yy_fill_buffer in line 234
      protection public
   variable yy_buffer_state::yy_input_file in line 194
      protection public
   variable yy_buffer_state::yy_is_interactive in line 220
      protection public
   variable yy_buffer_state::yy_is_our_buffer in line 213
      protection public
   variable yy_buffer_state::yy_n_chars in line 207
      protection public
   variable yy_trans_info::yy_nxt in line 371
      protection public
   variable yy_trans_info::yy_nxt in line 371
      protection public
   variable yy_trans_info::yy_verify in line 370
      protection public
   variable yy_trans_info::yy_verify in line 370
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/rats/rats-2.4/main.c
module main.c
   macro definition XML_DB_BASE in line 45
      protection public
   variable flags in line 40
      protection public
   variable forcelang in line 41
      protection public
   variable progname in line 42
      protection public
   variable default_files in line 50
      protection public
   function get_langcount(char *) in line 68
      protection public
      9 lines of code
      1 parameters
      2 conditional paths
      uses function HashGet(Hash,char *) defined in hash.c
      uses variable database defined in engine.c
      uses function HashCount(Hash) defined in hash.c
   function load_database(char *,int) in line 79
      protection public
      33 lines of code
      2 parameters
      4 conditional paths
      uses function ParseVulnDb(char *,Hash *) defined in vuln_db.c
      uses variable database defined in engine.c
      uses variable defaultdb defined in engine.c
      uses function HashGet(Hash,char *) defined in hash.c
   function force_language(char *) in line 113
      protection public
      15 lines of code
      1 parameters
      6 conditional paths
      uses variable forcelang defined in main.c
      uses macro definition LANG_PYTHON defined in engine.h
      uses macro definition LANG_C defined in engine.h
      uses macro definition LANG_PERL defined in engine.h
      uses macro definition LANG_PHP defined in engine.h
      uses macro definition LANG_RUBY defined in engine.h
   function usage(void) in line 130
      protection public
      40 lines of code
      1 parameters
      1 conditional paths
      uses macro definition VERSION_MAJOR defined in version.h
      uses macro definition VERSION_MINOR defined in version.h
      uses variable progname defined in main.c
      uses variable warning_level defined in report.c
   function output_header(int) in line 172
      protection public
      21 lines of code
      1 parameters
      3 conditional paths
      uses variable flags defined in main.c
      uses macro definition NO_HEADER defined in engine.h
      uses function HashKeys(Hash) defined in hash.c
      uses variable database defined in engine.c
      uses function get_langcount(char *) defined in main.c
      uses function HashFreeKeys(Hash,char **) defined in hash.c
   function output_xmlheader(int) in line 196
      protection public
      27 lines of code
      1 parameters
      3 conditional paths
      uses variable flags defined in main.c
      uses macro definition NO_HEADER defined in engine.h
      uses function HashKeys(Hash) defined in hash.c
      uses variable database defined in engine.c
      uses function get_langcount(char *) defined in main.c
      uses function HashFreeKeys(Hash,char **) defined in hash.c
   function output_htmlheader(int) in line 225
      protection public
      28 lines of code
      1 parameters
      3 conditional paths
      uses variable flags defined in main.c
      uses macro definition NO_HEADER defined in engine.h
      uses function HashKeys(Hash) defined in hash.c
      uses variable database defined in engine.c
      uses function get_langcount(char *) defined in main.c
      uses function HashFreeKeys(Hash,char **) defined in hash.c
   function main(int,char **) in line 254
      protection public
      312 lines of code
      2 parameters
      52 conditional paths
      uses macro definition required_argument defined in getopt.h
      uses variable progname defined in main.c
      uses variable flags defined in main.c
      uses macro definition RECURSIVE_FILE_SCAN defined in engine.h
      uses function getopt_long(int,char *const *,const char *,const struct option *,int *) defined in getopt.c
      uses variable option::name defined in getopt.h
      uses function usage(void) defined in main.c
      uses function load_database(char *,int) defined in main.c
      uses variable optarg defined in getopt.c
      uses macro definition INPUT_MODE defined in engine.h
      uses function force_language(char *) defined in main.c
      uses macro definition INCLUDE_ALL_REFERENCES defined in engine.h
      uses variable warning_level defined in report.c
      uses macro definition XML_OUTPUT defined in engine.h
      uses macro definition HTML_OUTPUT defined in engine.h
      uses macro definition FOLLOW_SYMLINK defined in engine.h
      uses macro definition NO_HEADER defined in engine.h
      uses macro definition NO_FOOTER defined in engine.h
      uses macro definition NO_STATUS defined in engine.h
      uses macro definition SHOW_COLUMNS defined in engine.h
      uses macro definition SHOW_CONTEXT defined in engine.h
      uses macro definition ALL_STATIC defined in engine.h
      uses variable database defined in engine.c
      uses function HashInit() defined in hash.c
      uses function HashGet(Hash,char *) defined in hash.c
      uses function HashInsert(Hash,void *,char *) defined in hash.c
      uses function InitVuln(Vuln_t *) defined in vuln_db.c
      uses variable Vuln_t::Name defined in vuln_db.h
      uses variable Vuln_t::Info defined in vuln_db.h
      uses function InitInfo(Info_t *) defined in vuln_db.c
      uses variable Info_t::Severity defined in vuln_db.h
      uses enumvalue Medium defined in vuln_db.h
      uses variable Info_t::Description defined in vuln_db.h
      uses variable defaultdb defined in engine.c
      uses variable default_files defined in main.c
      uses function output_xmlheader(int) defined in main.c
      uses function output_htmlheader(int) defined in main.c
      uses function output_header(int) defined in main.c
      uses variable time_started defined in report.c
      uses variable optind defined in getopt.c
      uses function process_file(char *,int) defined in engine.c
      uses variable forcelang defined in main.c
      uses variable time_finished defined in report.c
      uses function generate_xml(void) defined in report.c
      uses function generate_html(void) defined in report.c
      uses function generate_report(void) defined in report.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/rats/rats-2.4/perl-tokens.h
module perl-tokens.h
   macro definition TOKEN_ID_SCALAR in line 27
      protection public
   macro definition TOKEN_ID_ARRAY in line 28
      protection public
   macro definition TOKEN_ID_HASHT in line 29
      protection public
   macro definition TOKEN_ID_HANDLE in line 30
      protection public
   macro definition TOKEN_REPEAT_ASSIGN in line 31
      protection public
   macro definition TOKEN_CONCAT_ASSIGN in line 32
      protection public
   macro definition TOKEN_BACKTICK_LITERAL in line 33
      protection public
   macro definition TOKEN_QQSTRING_LITERAL in line 34
      protection public
   macro definition TOKEN_QSTRING_LITERAL in line 35
      protection public
   macro definition TOKEN_NULL in line 36
      protection public
   macro definition TOKEN_DATA in line 37
      protection public
   macro definition TOKEN_FILE in line 38
      protection public
   macro definition TOKEN_LINE in line 39
      protection public
   macro definition TOKEN_PACKAGE in line 40
      protection public
   macro definition TOKEN_REGEXP in line 41
      protection public
   macro definition TOKEN_PERLPOD in line 42
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/rats/rats-2.4/php-tokens.h
module php-tokens.h
   macro definition TOKEN_PHP_IN_SCRIPT in line 27
      protection public
   macro definition TOKEN_FUNCTION in line 28
      protection public
   macro definition TOKEN_ELSEIF in line 29
      protection public
   macro definition TOKEN_ENDWHILE in line 30
      protection public
   macro definition TOKEN_ENDFOR in line 31
      protection public
   macro definition TOKEN_FOREACH in line 32
      protection public
   macro definition TOKEN_ENDFOREACH in line 33
      protection public
   macro definition TOKEN_DECLARE in line 34
      protection public
   macro definition TOKEN_ENDDECLARE in line 35
      protection public
   macro definition TOKEN_AS in line 36
      protection public
   macro definition TOKEN_ENDSWITCH in line 37
      protection public
   macro definition TOKEN_EXTENDS in line 38
      protection public
   macro definition TOKEN_VAR in line 39
      protection public
   macro definition TOKEN_DOUBLE_ARROW in line 40
      protection public
   macro definition TOKEN_T_EQUAL in line 41
      protection public
   macro definition TOKEN_T_NOTEQUAL in line 42
      protection public
   macro definition TOKEN_XOR_OP in line 43
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/rats/rats-2.4/python-tokens.h
module python-tokens.h
   macro definition TOKEN_NEWLINE in line 27
      protection public
   macro definition TOKEN_AND in line 28
      protection public
   macro definition TOKEN_ASSERT in line 29
      protection public
   macro definition TOKEN_CLASS in line 30
      protection public
   macro definition TOKEN_DEF in line 31
      protection public
   macro definition TOKEN_DEL in line 32
      protection public
   macro definition TOKEN_ELIF in line 33
      protection public
   macro definition TOKEN_EXCEPT in line 34
      protection public
   macro definition TOKEN_EXEC in line 35
      protection public
   macro definition TOKEN_FINALLY in line 36
      protection public
   macro definition TOKEN_FROM in line 37
      protection public
   macro definition TOKEN_GLOBAL in line 38
      protection public
   macro definition TOKEN_IMPORT in line 39
      protection public
   macro definition TOKEN_IN in line 40
      protection public
   macro definition TOKEN_IS in line 41
      protection public
   macro definition TOKEN_LAMBDA in line 42
      protection public
   macro definition TOKEN_NOT in line 43
      protection public
   macro definition TOKEN_OR in line 44
      protection public
   macro definition TOKEN_PASS in line 45
      protection public
   macro definition TOKEN_PRINT in line 46
      protection public
   macro definition TOKEN_RAISE in line 47
      protection public
   macro definition TOKEN_TRY in line 48
      protection public
   macro definition TOKEN_SSTRING_LITERAL in line 50
      protection public
   macro definition TOKEN_LSTRING_LITERAL in line 51
      protection public
   macro definition TOKEN_EXP_ASSIGN in line 53
      protection public
   macro definition TOKEN_EXP_OP in line 54
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/rats/rats-2.4/report.c
module report.c
   variable warning_level in line 32
      protection public
   variable input_head in line 34
      protection public
   variable input_tail in line 35
      protection public
   variable ignore_list in line 36
      protection public
   variable list_head in line 37
      protection public
   variable list_tail in line 38
      protection public
   variable context_filename in line 40
      protection public
   variable context_fp in line 41
      protection public
   variable context_line in line 42
      protection public
   variable total_lines in line 47
      protection public
   variable time_started in line 47
      protection public
   variable time_finished in line 47
      protection public
   variable vuln_PerlBacktick in line 313
      protection public
   variable vuln_PhpBacktick in line 313
      protection public
   variable vuln_PythonBacktick in line 313
      protection public
   variable vuln_StaticLocalBuffer in line 313
      protection public
   variable vuln_StaticGlobalBuffer in line 313
      protection public
   variable severities in line 486
      protection public
   function lookup_ignore(char *,int,char *) in line 43
      protection public
      16 lines of code
      3 parameters
      5 conditional paths
      uses variable ignore_list defined in report.c
      uses variable _ignore_t::next defined in report.h
      uses variable _ignore_t::filename defined in report.h
      uses variable _ignore_t::lineno defined in report.h
      uses variable _ignore_t::token defined in report.h
   function determine_ignorance(vulnerability_t *) in line 44
      protection public
      57 lines of code
      1 parameters
      17 conditional paths
      uses variable _vulnerability_t::type defined in report.h
      uses enumvalue BOProblem defined in report.h
      uses enumvalue FSProblem defined in report.h
      uses enumvalue Info defined in report.h
      uses enumvalue InputProblem defined in report.h
      uses enumvalue RaceConditionCheck defined in report.h
      uses enumvalue RaceConditionUse defined in report.h
      uses variable _vulnerability_t::data defined in report.h
      uses variable Vuln_t::Name defined in vuln_db.h
      uses enumvalue StaticLocalBuffer defined in report.h
      uses enumvalue StaticGlobalBuffer defined in report.h
      uses enumvalue Reference defined in report.h
      uses enumvalue PythonBacktick defined in report.h
      uses enumvalue PhpBacktick defined in report.h
      uses enumvalue PerlBacktick defined in report.h
      uses enumvalue RubyBacktick defined in report.h
      uses enumvalue None defined in report.h
      uses function lookup_ignore(char *,int,char *) defined in report.c
      uses variable _vulnerability_t::filename defined in report.h
      uses variable _vulnerability_t::lineno defined in report.h
   function diff_times(const struct timeval *,const struct timeval *,struct timeval *) in line 45
      protection public
      23 lines of code
      3 parameters
      3 conditional paths
      uses function time_greater(const struct timeval *,const struct timeval *) defined in report.c
   function xml_escape(char *) in line 61
      protection public
      63 lines of code
      1 parameters
      9 conditional paths
   function debug_vuln_dump(vulnerability_t *) in line 128
      protection public
      7 lines of code
      1 parameters
      1 conditional paths
      uses variable _vulnerability_t::filename defined in report.h
   function replace_cfname(char *) in line 139
      protection public
      10 lines of code
      1 parameters
      2 conditional paths
      uses variable context_filename defined in report.c
   function getctx(char *,int) in line 151
      protection public
      52 lines of code
      2 parameters
      10 conditional paths
      uses variable context_filename defined in report.c
      uses function replace_cfname(char *) defined in report.c
      uses variable context_fp defined in report.c
      uses variable context_line defined in report.c
   function insert_vulnerability(vulnerability_t *) in line 207
      protection public
      41 lines of code
      1 parameters
      8 conditional paths
      uses variable list_head defined in report.c
      uses variable _vulnerability_t::next defined in report.h
      uses variable _vulnerability_t::severity defined in report.h
      uses variable _vulnerability_t::prev defined in report.h
      uses variable _vulnerability_t::type defined in report.h
      uses variable _vulnerability_t::data defined in report.h
      uses variable list_tail defined in report.c
      uses function if(!) defined in lex.yyc.c
   function log_toctou(toctou_t **,int,int,int) in line 249
      protection public
      63 lines of code
      4 parameters
      1 conditional paths
      uses macro definition table defined in kazhash.c
      uses variable _vulnerability_t::filename defined in report.h
      uses variable current_file defined in engine.c
      uses variable _vulnerability_t::lineno defined in report.h
      uses variable _vulnerability_t::column defined in report.h
      uses variable _vulnerability_t::data defined in report.h
      uses variable _vulnerability_t::type defined in report.h
      uses enumvalue RaceConditionCheck defined in report.h
      uses variable _vulnerability_t::severity defined in report.h
      uses enumvalue Medium defined in vuln_db.h
      uses variable _vulnerability_t::uses defined in report.h
      uses variable _toctou_use_t::name defined in report.h
      uses variable _toctou_use_t::lineno defined in report.h
      uses variable _toctou_use_t::column defined in report.h
      uses enumvalue Low defined in vuln_db.h
      uses function insert_vulnerability(vulnerability_t *) defined in report.c
      uses enumvalue RaceConditionUse defined in report.h
   function log_vulnerability(type_t,Severity_t) in line 313
      protection public
      15 lines of code
      2 parameters
      1 conditional paths
      uses variable _vulnerability_t::column defined in report.h
      uses variable current_frame defined in engine.c
      uses variable _rats_stack_t::column defined in engine.h
      uses variable _vulnerability_t::filename defined in report.h
      uses variable current_file defined in engine.c
      uses variable _vulnerability_t::lineno defined in report.h
      uses variable _rats_stack_t::lineno defined in engine.h
      uses variable _vulnerability_t::data defined in report.h
      uses variable _rats_stack_t::data defined in engine.h
      uses variable _vulnerability_t::type defined in report.h
      uses variable _vulnerability_t::severity defined in report.h
      uses variable _vulnerability_t::uses defined in report.h
      uses function insert_vulnerability(vulnerability_t *) defined in report.c
   function log_perlbacktick(int,int,Severity_t) in line 350
      protection public
      15 lines of code
      3 parameters
      1 conditional paths
      uses variable _vulnerability_t::filename defined in report.h
      uses variable current_file defined in engine.c
      uses variable _vulnerability_t::column defined in report.h
      uses variable _vulnerability_t::lineno defined in report.h
      uses variable _vulnerability_t::data defined in report.h
      uses variable vuln_PerlBacktick defined in report.c
      uses variable _vulnerability_t::type defined in report.h
      uses enumvalue PerlBacktick defined in report.h
      uses variable _vulnerability_t::severity defined in report.h
      uses variable _vulnerability_t::uses defined in report.h
      uses function insert_vulnerability(vulnerability_t *) defined in report.c
   function log_phpbacktick(int,int,Severity_t) in line 367
      protection public
      15 lines of code
      3 parameters
      1 conditional paths
      uses variable _vulnerability_t::filename defined in report.h
      uses variable current_file defined in engine.c
      uses variable _vulnerability_t::column defined in report.h
      uses variable _vulnerability_t::lineno defined in report.h
      uses variable _vulnerability_t::data defined in report.h
      uses variable vuln_PhpBacktick defined in report.c
      uses variable _vulnerability_t::type defined in report.h
      uses enumvalue PhpBacktick defined in report.h
      uses variable _vulnerability_t::severity defined in report.h
      uses variable _vulnerability_t::uses defined in report.h
      uses function insert_vulnerability(vulnerability_t *) defined in report.c
   function log_rubybacktick(int,int,Severity_t) in line 383
      protection public
      15 lines of code
      3 parameters
      1 conditional paths
      uses variable _vulnerability_t::filename defined in report.h
      uses variable current_file defined in engine.c
      uses variable _vulnerability_t::column defined in report.h
      uses variable _vulnerability_t::lineno defined in report.h
      uses variable _vulnerability_t::data defined in report.h
      uses variable _vulnerability_t::type defined in report.h
      uses enumvalue RubyBacktick defined in report.h
      uses variable _vulnerability_t::severity defined in report.h
      uses variable _vulnerability_t::uses defined in report.h
      uses function insert_vulnerability(vulnerability_t *) defined in report.c
   function log_pythonbacktick(int,int,Severity_t) in line 399
      protection public
      15 lines of code
      3 parameters
      1 conditional paths
      uses variable _vulnerability_t::filename defined in report.h
      uses variable current_file defined in engine.c
      uses variable _vulnerability_t::column defined in report.h
      uses variable _vulnerability_t::lineno defined in report.h
      uses variable _vulnerability_t::data defined in report.h
      uses variable vuln_PythonBacktick defined in report.c
      uses variable _vulnerability_t::type defined in report.h
      uses enumvalue PythonBacktick defined in report.h
      uses variable _vulnerability_t::severity defined in report.h
      uses variable _vulnerability_t::uses defined in report.h
      uses function insert_vulnerability(vulnerability_t *) defined in report.c
   function log_staticbuffer(type_t,int,int,Severity_t) in line 415
      protection public
      24 lines of code
      4 parameters
      1 conditional paths
      uses variable _vulnerability_t::filename defined in report.h
      uses variable current_file defined in engine.c
      uses variable _vulnerability_t::column defined in report.h
      uses variable _vulnerability_t::lineno defined in report.h
      uses enumvalue StaticLocalBuffer defined in report.h
      uses variable _vulnerability_t::data defined in report.h
      uses variable vuln_StaticLocalBuffer defined in report.c
      uses enumvalue StaticGlobalBuffer defined in report.h
      uses variable vuln_StaticGlobalBuffer defined in report.c
      uses variable _vulnerability_t::type defined in report.h
      uses variable _vulnerability_t::severity defined in report.h
      uses variable _vulnerability_t::uses defined in report.h
      uses function insert_vulnerability(vulnerability_t *) defined in report.c
   function record_input(void) in line 440
      protection public
      17 lines of code
      1 parameters
      1 conditional paths
      uses variable current_frame defined in engine.c
      uses variable _rats_stack_t::column defined in engine.h
      uses variable current_file defined in engine.c
      uses variable _rats_stack_t::lineno defined in engine.h
      uses variable _rats_stack_t::data defined in engine.h
      uses variable input_tail defined in report.c
      uses variable _input_t::next defined in report.h
      uses variable input_head defined in report.c
   function cleanup_string(char *) in line 459
      protection public
      26 lines of code
      1 parameters
      3 conditional paths
   function build_xml_vulnerability(vulnerability_t *) in line 488
      protection public
      162 lines of code
      1 parameters
      22 conditional paths
      uses variable _vulnerability_t::data defined in report.h
      uses function debug_vuln_dump(vulnerability_t *) defined in report.c
      uses variable severities defined in report.c
      uses variable _vulnerability_t::severity defined in report.h
      uses variable _vulnerability_t::type defined in report.h
      uses enumvalue BOProblem defined in report.h
      uses variable Vuln_t::BOProblem defined in vuln_db.h
      uses variable BOProblem_t::FormatArg defined in vuln_db.h
      uses variable Vuln_t::Name defined in vuln_db.h
      uses variable BOProblem_t::SrcBufArg defined in vuln_db.h
      uses enumvalue FSProblem defined in report.h
      uses variable Vuln_t::FSProblem defined in vuln_db.h
      uses variable FSProblem_t::Arg defined in vuln_db.h
      uses enumvalue InputProblem defined in report.h
      uses variable Vuln_t::InputProblem defined in vuln_db.h
      uses variable InputProblem_t::Arg defined in vuln_db.h
      uses enumvalue Info defined in report.h
      uses variable Vuln_t::Info defined in vuln_db.h
      uses variable Info_t::Description defined in vuln_db.h
      uses function cleanup_string(char *) defined in report.c
      uses variable Info_t::URL defined in vuln_db.h
      uses enumvalue RaceConditionCheck defined in report.h
      uses variable _vulnerability_t::uses defined in report.h
      uses variable _toctou_use_t::lineno defined in report.h
      uses variable _toctou_use_t::name defined in report.h
      uses enumvalue RaceConditionUse defined in report.h
      uses enumvalue StaticLocalBuffer defined in report.h
      uses enumvalue StaticGlobalBuffer defined in report.h
      uses enumvalue Reference defined in report.h
      uses enumvalue PythonBacktick defined in report.h
      uses enumvalue PhpBacktick defined in report.h
      uses enumvalue PerlBacktick defined in report.h
      uses enumvalue RubyBacktick defined in report.h
      uses enumvalue None defined in report.h
   function report_vulnerability(vulnerability_t *) in line 652
      protection public
      109 lines of code
      1 parameters
      22 conditional paths
      uses variable _vulnerability_t::data defined in report.h
      uses function debug_vuln_dump(vulnerability_t *) defined in report.c
      uses variable _vulnerability_t::type defined in report.h
      uses enumvalue BOProblem defined in report.h
      uses variable Vuln_t::BOProblem defined in vuln_db.h
      uses variable BOProblem_t::FormatArg defined in vuln_db.h
      uses variable BOProblem_t::SrcBufArg defined in vuln_db.h
      uses enumvalue FSProblem defined in report.h
      uses variable Vuln_t::FSProblem defined in vuln_db.h
      uses variable FSProblem_t::Arg defined in vuln_db.h
      uses enumvalue InputProblem defined in report.h
      uses variable Vuln_t::InputProblem defined in vuln_db.h
      uses variable InputProblem_t::Arg defined in vuln_db.h
      uses enumvalue Info defined in report.h
      uses variable Vuln_t::Info defined in vuln_db.h
      uses variable Info_t::Description defined in vuln_db.h
      uses function cleanup_string(char *) defined in report.c
      uses variable Info_t::URL defined in vuln_db.h
      uses enumvalue RaceConditionCheck defined in report.h
      uses variable _vulnerability_t::uses defined in report.h
      uses variable _toctou_use_t::lineno defined in report.h
      uses variable _toctou_use_t::name defined in report.h
      uses enumvalue RaceConditionUse defined in report.h
      uses enumvalue StaticLocalBuffer defined in report.h
      uses enumvalue StaticGlobalBuffer defined in report.h
      uses enumvalue Reference defined in report.h
      uses enumvalue PythonBacktick defined in report.h
      uses enumvalue PhpBacktick defined in report.h
      uses enumvalue PerlBacktick defined in report.h
      uses enumvalue RubyBacktick defined in report.h
      uses enumvalue None defined in report.h
   function html_report_inputs(void) in line 763
      protection public
      29 lines of code
      1 parameters
      5 conditional paths
      uses macro definition next defined in kazhash.c
      uses variable flags defined in engine.h
      uses macro definition INPUT_MODE defined in engine.h
      uses variable input_head defined in report.c
      uses variable _input_t::next defined in report.h
      uses function lookup_ignore(char *,int,char *) defined in report.c
      uses variable _input_t::filename defined in report.h
      uses variable _input_t::lineno defined in report.h
      uses variable _input_t::data defined in report.h
      uses variable Vuln_t::Name defined in vuln_db.h
      uses variable input_tail defined in report.c
   function xml_report_inputs(void) in line 794
      protection public
      28 lines of code
      1 parameters
      4 conditional paths
      uses macro definition next defined in kazhash.c
      uses variable flags defined in engine.h
      uses macro definition INPUT_MODE defined in engine.h
      uses variable input_head defined in report.c
      uses variable _input_t::next defined in report.h
      uses function lookup_ignore(char *,int,char *) defined in report.c
      uses variable _input_t::filename defined in report.h
      uses variable _input_t::lineno defined in report.h
      uses variable _input_t::data defined in report.h
      uses variable Vuln_t::Name defined in vuln_db.h
      uses variable input_tail defined in report.c
   function report_inputs(void) in line 825
      protection public
      29 lines of code
      1 parameters
      5 conditional paths
      uses macro definition next defined in kazhash.c
      uses variable flags defined in engine.h
      uses macro definition INPUT_MODE defined in engine.h
      uses variable input_head defined in report.c
      uses variable _input_t::next defined in report.h
      uses function lookup_ignore(char *,int,char *) defined in report.c
      uses variable _input_t::filename defined in report.h
      uses variable _input_t::lineno defined in report.h
      uses variable _input_t::data defined in report.h
      uses variable Vuln_t::Name defined in vuln_db.h
      uses variable input_tail defined in report.c
   function generate_xml(void) in line 855
      protection public
      96 lines of code
      1 parameters
      1 conditional paths
      uses variable list_head defined in report.c
      uses variable _vulnerability_t::next defined in report.h
      uses variable _vulnerability_t::severity defined in report.h
      uses enumvalue Default defined in vuln_db.h
      uses variable warning_level defined in report.c
      uses function determine_ignorance(vulnerability_t *) defined in report.c
      uses function build_xml_vulnerability(vulnerability_t *) defined in report.c
      uses variable _vulnerability_t::prev defined in report.h
      uses variable _vulnerability_t::filename defined in report.h
      uses variable _vulnerability_t::type defined in report.h
      uses enumvalue RaceConditionCheck defined in report.h
      uses variable _vulnerability_t::data defined in report.h
      uses variable _vulnerability_t::lineno defined in report.h
      uses variable flags defined in engine.h
      uses macro definition SHOW_COLUMNS defined in engine.h
      uses variable _vulnerability_t::column defined in report.h
      uses macro definition SHOW_CONTEXT defined in engine.h
      uses function getctx(char *,int) defined in report.c
      uses function xml_escape(char *) defined in report.c
      uses function xml_report_inputs(void) defined in report.c
      uses macro definition NO_FOOTER defined in engine.h
      uses variable time_finished defined in report.c
      uses variable time_started defined in report.c
      uses function diff_times(const struct timeval *,const struct timeval *,struct timeval *) defined in report.c
      uses variable total_lines defined in report.c
   function build_html_vulnerability(vulnerability_t *) in line 952
      protection public
      149 lines of code
      1 parameters
      22 conditional paths
      uses variable _vulnerability_t::data defined in report.h
      uses function debug_vuln_dump(vulnerability_t *) defined in report.c
      uses variable severities defined in report.c
      uses variable _vulnerability_t::severity defined in report.h
      uses variable _vulnerability_t::type defined in report.h
      uses enumvalue BOProblem defined in report.h
      uses variable Vuln_t::BOProblem defined in vuln_db.h
      uses variable BOProblem_t::FormatArg defined in vuln_db.h
      uses variable Vuln_t::Name defined in vuln_db.h
      uses variable BOProblem_t::SrcBufArg defined in vuln_db.h
      uses enumvalue FSProblem defined in report.h
      uses variable Vuln_t::FSProblem defined in vuln_db.h
      uses variable FSProblem_t::Arg defined in vuln_db.h
      uses enumvalue InputProblem defined in report.h
      uses variable Vuln_t::InputProblem defined in vuln_db.h
      uses variable InputProblem_t::Arg defined in vuln_db.h
      uses enumvalue Info defined in report.h
      uses variable Vuln_t::Info defined in vuln_db.h
      uses variable Info_t::Description defined in vuln_db.h
      uses function cleanup_string(char *) defined in report.c
      uses variable Info_t::URL defined in vuln_db.h
      uses enumvalue RaceConditionCheck defined in report.h
      uses variable _vulnerability_t::uses defined in report.h
      uses variable _toctou_use_t::lineno defined in report.h
      uses variable _toctou_use_t::name defined in report.h
      uses enumvalue RaceConditionUse defined in report.h
      uses enumvalue StaticLocalBuffer defined in report.h
      uses enumvalue StaticGlobalBuffer defined in report.h
      uses enumvalue Reference defined in report.h
      uses enumvalue PythonBacktick defined in report.h
      uses enumvalue PhpBacktick defined in report.h
      uses enumvalue PerlBacktick defined in report.h
      uses enumvalue RubyBacktick defined in report.h
      uses enumvalue None defined in report.h
   function generate_html(void) in line 1102
      protection public
      116 lines of code
      1 parameters
      1 conditional paths
      uses variable list_head defined in report.c
      uses variable _vulnerability_t::next defined in report.h
      uses variable _vulnerability_t::severity defined in report.h
      uses enumvalue Default defined in vuln_db.h
      uses variable warning_level defined in report.c
      uses function determine_ignorance(vulnerability_t *) defined in report.c
      uses function build_html_vulnerability(vulnerability_t *) defined in report.c
      uses variable _vulnerability_t::prev defined in report.h
      uses variable _vulnerability_t::filename defined in report.h
      uses variable _vulnerability_t::type defined in report.h
      uses enumvalue RaceConditionCheck defined in report.h
      uses variable _vulnerability_t::data defined in report.h
      uses variable flags defined in engine.h
      uses macro definition SHOW_CONTEXT defined in engine.h
      uses variable _vulnerability_t::lineno defined in report.h
      uses macro definition SHOW_COLUMNS defined in engine.h
      uses variable _vulnerability_t::column defined in report.h
      uses function getctx(char *,int) defined in report.c
      uses function html_report_inputs(void) defined in report.c
      uses macro definition NO_FOOTER defined in engine.h
      uses variable time_finished defined in report.c
      uses variable time_started defined in report.c
      uses function diff_times(const struct timeval *,const struct timeval *,struct timeval *) defined in report.c
      uses variable total_lines defined in report.c
   function time_greater(const struct timeval *,const struct timeval *) in line 1221
      protection public
      9 lines of code
      2 parameters
      2 conditional paths
   function generate_report(void) in line 1318
      protection public
      140 lines of code
      1 parameters
      1 conditional paths
      uses macro definition next defined in kazhash.c
      uses variable list_head defined in report.c
      uses variable _vulnerability_t::next defined in report.h
      uses variable _vulnerability_t::severity defined in report.h
      uses enumvalue Default defined in vuln_db.h
      uses variable warning_level defined in report.c
      uses variable _vulnerability_t::type defined in report.h
      uses enumvalue BOProblem defined in report.h
      uses enumvalue FSProblem defined in report.h
      uses enumvalue Info defined in report.h
      uses enumvalue InputProblem defined in report.h
      uses enumvalue RaceConditionCheck defined in report.h
      uses enumvalue RaceConditionUse defined in report.h
      uses variable _vulnerability_t::data defined in report.h
      uses variable Vuln_t::Name defined in vuln_db.h
      uses enumvalue StaticLocalBuffer defined in report.h
      uses enumvalue StaticGlobalBuffer defined in report.h
      uses enumvalue Reference defined in report.h
      uses enumvalue PythonBacktick defined in report.h
      uses enumvalue PhpBacktick defined in report.h
      uses enumvalue PerlBacktick defined in report.h
      uses enumvalue RubyBacktick defined in report.h
      uses enumvalue None defined in report.h
      uses function determine_ignorance(vulnerability_t *) defined in report.c
      uses variable _vulnerability_t::filename defined in report.h
      uses variable _vulnerability_t::lineno defined in report.h
      uses variable flags defined in engine.h
      uses macro definition SHOW_COLUMNS defined in engine.h
      uses variable _vulnerability_t::column defined in report.h
      uses variable severities defined in report.c
      uses macro definition SHOW_CONTEXT defined in engine.h
      uses function getctx(char *,int) defined in report.c
      uses function report_vulnerability(vulnerability_t *) defined in report.c
      uses function report_inputs(void) defined in report.c
      uses variable ignore_list defined in report.c
      uses variable _ignore_t::next defined in report.h
      uses variable _ignore_t::token defined in report.h
      uses variable list_tail defined in report.c
      uses macro definition NO_FOOTER defined in engine.h
      uses variable time_finished defined in report.c
      uses variable time_started defined in report.c
      uses function diff_times(const struct timeval *,const struct timeval *,struct timeval *) defined in report.c
      uses variable total_lines defined in report.c
   function new_ignore(int,char *) in line 1459
      protection public
      14 lines of code
      2 parameters
      1 conditional paths
      uses variable _ignore_t::filename defined in report.h
      uses variable current_file defined in engine.c
      uses variable _ignore_t::lineno defined in report.h
      uses variable _ignore_t::token defined in report.h
      uses variable _ignore_t::next defined in report.h
      uses variable ignore_list defined in report.c
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/rats/rats-2.4/report.h
module report.h
   enumeration _type_t in line 41
      protection public
   typedef type_t in line 30
      protection public
   typedef toctou_use_t in line 30
      protection public
   typedef vulnerability_t in line 30
      protection public
   typedef input_t in line 30
      protection public
   typedef ignore_t in line 30
      protection public
   variable total_lines in line 30
      protection public
   variable time_started in line 30
      protection public
   variable time_finished in line 30
      protection public
   variable warning_level in line 99
      protection public
   enumvalue BOProblem in line 42
      protection public
   enumvalue FSProblem in line 43
      protection public
   enumvalue InputProblem in line 44
      protection public
   enumvalue Info in line 45
      protection public
   enumvalue RaceConditionCheck in line 46
      protection public
   enumvalue RaceConditionUse in line 47
      protection public
   enumvalue StaticLocalBuffer in line 48
      protection public
   enumvalue StaticGlobalBuffer in line 49
      protection public
   enumvalue Reference in line 50
      protection public
   enumvalue PythonBacktick in line 51
      protection public
   enumvalue PhpBacktick in line 52
      protection public
   enumvalue PerlBacktick in line 53
      protection public
   enumvalue RubyBacktick in line 54
      protection public
   enumvalue None in line 56
      protection public
   function log_staticbuffer(type_t,int,int,Severity_t) in line 101
      protection public
      24 lines of code
      4 parameters
      3 conditional paths
      uses variable _vulnerability_t::filename defined in report.h
      uses variable current_file defined in engine.c
      uses variable _vulnerability_t::column defined in report.h
      uses variable _vulnerability_t::lineno defined in report.h
      uses enumvalue StaticLocalBuffer defined in report.h
      uses variable _vulnerability_t::data defined in report.h
      uses enumvalue StaticGlobalBuffer defined in report.h
      uses variable _vulnerability_t::type defined in report.h
      uses variable _vulnerability_t::severity defined in report.h
      uses variable _vulnerability_t::uses defined in report.h
   function log_toctou(toctou_t **,int,int,int) in line 102
      protection public
      63 lines of code
      4 parameters
      7 conditional paths
      uses macro definition table defined in kazhash.c
      uses variable _vulnerability_t::filename defined in report.h
      uses variable current_file defined in engine.c
      uses variable _vulnerability_t::lineno defined in report.h
      uses variable _vulnerability_t::column defined in report.h
      uses variable _vulnerability_t::data defined in report.h
      uses variable _vulnerability_t::type defined in report.h
      uses enumvalue RaceConditionCheck defined in report.h
      uses variable _vulnerability_t::severity defined in report.h
      uses enumvalue Medium defined in vuln_db.h
      uses variable _vulnerability_t::uses defined in report.h
      uses variable _toctou_use_t::name defined in report.h
      uses variable _toctou_use_t::lineno defined in report.h
      uses variable _toctou_use_t::column defined in report.h
      uses enumvalue Low defined in vuln_db.h
      uses enumvalue RaceConditionUse defined in report.h
   function log_pythonbacktick(int,int,Severity_t) in line 103
      protection public
      15 lines of code
      3 parameters
      1 conditional paths
      uses variable _vulnerability_t::filename defined in report.h
      uses variable current_file defined in engine.c
      uses variable _vulnerability_t::column defined in report.h
      uses variable _vulnerability_t::lineno defined in report.h
      uses variable _vulnerability_t::data defined in report.h
      uses variable _vulnerability_t::type defined in report.h
      uses enumvalue PythonBacktick defined in report.h
      uses variable _vulnerability_t::severity defined in report.h
      uses variable _vulnerability_t::uses defined in report.h
   function log_perlbacktick(int,int,Severity_t) in line 104
      protection public
      15 lines of code
      3 parameters
      1 conditional paths
      uses variable _vulnerability_t::filename defined in report.h
      uses variable current_file defined in engine.c
      uses variable _vulnerability_t::column defined in report.h
      uses variable _vulnerability_t::lineno defined in report.h
      uses variable _vulnerability_t::data defined in report.h
      uses variable _vulnerability_t::type defined in report.h
      uses enumvalue PerlBacktick defined in report.h
      uses variable _vulnerability_t::severity defined in report.h
      uses variable _vulnerability_t::uses defined in report.h
   function log_phpbacktick(int,int,Severity_t) in line 105
      protection public
      15 lines of code
      3 parameters
      1 conditional paths
      uses variable _vulnerability_t::filename defined in report.h
      uses variable current_file defined in engine.c
      uses variable _vulnerability_t::column defined in report.h
      uses variable _vulnerability_t::lineno defined in report.h
      uses variable _vulnerability_t::data defined in report.h
      uses variable _vulnerability_t::type defined in report.h
      uses enumvalue PhpBacktick defined in report.h
      uses variable _vulnerability_t::severity defined in report.h
      uses variable _vulnerability_t::uses defined in report.h
   function log_rubybacktick(int,int,Severity_t) in line 106
      protection public
      15 lines of code
      3 parameters
      1 conditional paths
      uses variable _vulnerability_t::filename defined in report.h
      uses variable current_file defined in engine.c
      uses variable _vulnerability_t::column defined in report.h
      uses variable _vulnerability_t::lineno defined in report.h
      uses variable _vulnerability_t::data defined in report.h
      uses variable _vulnerability_t::type defined in report.h
      uses enumvalue RubyBacktick defined in report.h
      uses variable _vulnerability_t::severity defined in report.h
      uses variable _vulnerability_t::uses defined in report.h
   function log_vulnerability(type_t,Severity_t) in line 107
      protection public
      15 lines of code
      2 parameters
      1 conditional paths
      uses variable _vulnerability_t::column defined in report.h
      uses variable current_frame defined in engine.c
      uses variable _rats_stack_t::column defined in engine.h
      uses variable _vulnerability_t::filename defined in report.h
      uses variable current_file defined in engine.c
      uses variable _vulnerability_t::lineno defined in report.h
      uses variable _rats_stack_t::lineno defined in engine.h
      uses variable _vulnerability_t::data defined in report.h
      uses variable _rats_stack_t::data defined in engine.h
      uses variable _vulnerability_t::type defined in report.h
      uses variable _vulnerability_t::severity defined in report.h
      uses variable _vulnerability_t::uses defined in report.h
   function record_input(void) in line 108
      protection public
      17 lines of code
      1 parameters
      2 conditional paths
      uses variable current_frame defined in engine.c
      uses variable _rats_stack_t::column defined in engine.h
      uses variable current_file defined in engine.c
      uses variable _rats_stack_t::lineno defined in engine.h
      uses variable _rats_stack_t::data defined in engine.h
      uses variable _input_t::next defined in report.h
   function generate_report(void) in line 109
      protection public
      140 lines of code
      1 parameters
      31 conditional paths
      uses macro definition next defined in kazhash.c
      uses variable _vulnerability_t::next defined in report.h
      uses variable _vulnerability_t::severity defined in report.h
      uses enumvalue Default defined in vuln_db.h
      uses variable warning_level defined in report.c
      uses variable _vulnerability_t::type defined in report.h
      uses enumvalue BOProblem defined in report.h
      uses enumvalue FSProblem defined in report.h
      uses enumvalue Info defined in report.h
      uses enumvalue InputProblem defined in report.h
      uses enumvalue RaceConditionCheck defined in report.h
      uses enumvalue RaceConditionUse defined in report.h
      uses variable _vulnerability_t::data defined in report.h
      uses variable Vuln_t::Name defined in vuln_db.h
      uses enumvalue StaticLocalBuffer defined in report.h
      uses enumvalue StaticGlobalBuffer defined in report.h
      uses enumvalue Reference defined in report.h
      uses enumvalue PythonBacktick defined in report.h
      uses enumvalue PhpBacktick defined in report.h
      uses enumvalue PerlBacktick defined in report.h
      uses enumvalue RubyBacktick defined in report.h
      uses enumvalue None defined in report.h
      uses variable _vulnerability_t::filename defined in report.h
      uses variable _vulnerability_t::lineno defined in report.h
      uses variable flags defined in engine.h
      uses macro definition SHOW_COLUMNS defined in engine.h
      uses variable _vulnerability_t::column defined in report.h
      uses macro definition SHOW_CONTEXT defined in engine.h
      uses variable _ignore_t::next defined in report.h
      uses variable _ignore_t::token defined in report.h
      uses macro definition NO_FOOTER defined in engine.h
      uses variable time_finished defined in report.c
      uses variable time_started defined in report.c
      uses variable total_lines defined in report.c
   function generate_xml(void) in line 110
      protection public
      96 lines of code
      1 parameters
      12 conditional paths
      uses variable _vulnerability_t::next defined in report.h
      uses variable _vulnerability_t::severity defined in report.h
      uses enumvalue Default defined in vuln_db.h
      uses variable warning_level defined in report.c
      uses variable _vulnerability_t::prev defined in report.h
      uses variable _vulnerability_t::filename defined in report.h
      uses variable _vulnerability_t::type defined in report.h
      uses enumvalue RaceConditionCheck defined in report.h
      uses variable _vulnerability_t::data defined in report.h
      uses variable _vulnerability_t::lineno defined in report.h
      uses variable flags defined in engine.h
      uses macro definition SHOW_COLUMNS defined in engine.h
      uses variable _vulnerability_t::column defined in report.h
      uses macro definition SHOW_CONTEXT defined in engine.h
      uses macro definition NO_FOOTER defined in engine.h
      uses variable time_finished defined in report.c
      uses variable time_started defined in report.c
      uses variable total_lines defined in report.c
   function generate_html(void) in line 111
      protection public
      116 lines of code
      1 parameters
      14 conditional paths
      uses variable _vulnerability_t::next defined in report.h
      uses variable _vulnerability_t::severity defined in report.h
      uses enumvalue Default defined in vuln_db.h
      uses variable warning_level defined in report.c
      uses variable _vulnerability_t::prev defined in report.h
      uses variable _vulnerability_t::filename defined in report.h
      uses variable _vulnerability_t::type defined in report.h
      uses enumvalue RaceConditionCheck defined in report.h
      uses variable _vulnerability_t::data defined in report.h
      uses variable flags defined in engine.h
      uses macro definition SHOW_CONTEXT defined in engine.h
      uses variable _vulnerability_t::lineno defined in report.h
      uses macro definition SHOW_COLUMNS defined in engine.h
      uses variable _vulnerability_t::column defined in report.h
      uses macro definition NO_FOOTER defined in engine.h
      uses variable time_finished defined in report.c
      uses variable time_started defined in report.c
      uses variable total_lines defined in report.c
   function new_ignore(int,char *) in line 112
      protection public
      14 lines of code
      2 parameters
      2 conditional paths
      uses variable _ignore_t::filename defined in report.h
      uses variable current_file defined in engine.c
      uses variable _ignore_t::lineno defined in report.h
      uses variable _ignore_t::token defined in report.h
      uses variable _ignore_t::next defined in report.h
   variable _toctou_use_t::column in line 63
      protection public
   variable _toctou_use_t::lineno in line 62
      protection public
   variable _toctou_use_t::name in line 61
      protection public
   variable _vulnerability_t::column in line 71
      protection public
   variable _vulnerability_t::data in line 72
      protection public
   variable _vulnerability_t::filename in line 69
      protection public
   variable _vulnerability_t::lineno in line 70
      protection public
   variable _vulnerability_t::next in line 76
      protection public
   variable _vulnerability_t::prev in line 77
      protection public
   variable _vulnerability_t::severity in line 74
      protection public
   variable _vulnerability_t::type in line 73
      protection public
   variable _vulnerability_t::uses in line 75
      protection public
   variable _input_t::column in line 85
      protection public
   variable _input_t::data in line 86
      protection public
   variable _input_t::filename in line 83
      protection public
   variable _input_t::lineno in line 84
      protection public
   variable _input_t::next in line 87
      protection public
   variable _ignore_t::filename in line 93
      protection public
   variable _ignore_t::lineno in line 94
      protection public
   variable _ignore_t::next in line 96
      protection public
   variable _ignore_t::token in line 95
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/rats/rats-2.4/ruby-tokens.h
module ruby-tokens.h
   variable TOKEN_ALIAS in line 50
      protection public
   variable TOKEN_BEGIN in line 51
      protection public
   variable TOKEN_DEFINED in line 52
      protection public
   variable TOKEN_ELSIF in line 53
      protection public
   variable TOKEN_ENSURE in line 54
      protection public
   variable TOKEN_FALSE in line 55
      protection public
   variable TOKEN_MODULE in line 56
      protection public
   variable TOKEN_NEXT in line 57
      protection public
   variable TOKEN_NIL in line 58
      protection public
   variable TOKEN_REDO in line 59
      protection public
   variable TOKEN_RESCUE in line 60
      protection public
   variable TOKEN_RETRY in line 61
      protection public
   variable TOKEN_SELF in line 62
      protection public
   variable TOKEN_SUPER in line 63
      protection public
   variable TOKEN_THEN in line 64
      protection public
   variable TOKEN_TRUE in line 65
      protection public
   variable TOKEN_UNDEF in line 66
      protection public
   variable TOKEN_UNLESS in line 67
      protection public
   variable TOKEN_UNTIL in line 68
      protection public
   variable TOKEN_WHEN in line 69
      protection public
   variable TOKEN_YIELD in line 70
      protection public
   variable TOKEN_INSTANCE_VARIABLE in line 71
      protection public
   variable TOKEN_CLASS_VARIABLE in line 72
      protection public
   variable TOKEN_GLOBAL_VARIABLE in line 73
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/rats/rats-2.4/tokens.h
module tokens.h
   macro definition TOKEN_START in line 24
      protection public
   macro definition TOKEN_END in line 25
      protection public
   macro definition CONST_START in line 27
      protection public
   macro definition CONST_END in line 28
      protection public
   macro definition TOKEN_C_START in line 30
      protection public
   macro definition TOKEN_C_END in line 31
      protection public
   macro definition TOKEN_PY_START in line 33
      protection public
   macro definition TOKEN_PY_END in line 34
      protection public
   macro definition TOKEN_PERL_START in line 36
      protection public
   macro definition TOKEN_PERL_END in line 37
      protection public
   macro definition TOKEN_PHP_START in line 39
      protection public
   macro definition TOKEN_PHP_END in line 40
      protection public
   macro definition TOKEN_RUBY_START in line 42
      protection public
   macro definition TOKEN_RUBY_END in line 43
      protection public
   macro definition TOKEN_HEX_CONST in line 47
      protection public
   macro definition TOKEN_OCT_CONST in line 48
      protection public
   macro definition TOKEN_DEC_CONST in line 49
      protection public
   macro definition TOKEN_FLOAT_CONST in line 50
      protection public
   macro definition TOKEN_IMAG_CONST in line 51
      protection public
   macro definition TOKEN_STRING_CONST in line 52
      protection public
   macro definition TOKEN_CHAR_CONST in line 53
      protection public
   macro definition TOKEN_BREAK in line 55
      protection public
   macro definition TOKEN_CONTINUE in line 56
      protection public
   macro definition TOKEN_ELSE in line 57
      protection public
   macro definition TOKEN_FOR in line 58
      protection public
   macro definition TOKEN_IF in line 59
      protection public
   macro definition TOKEN_RETURN in line 60
      protection public
   macro definition TOKEN_WHILE in line 61
      protection public
   macro definition TOKEN_IDENTIFIER in line 62
      protection public
   macro definition TOKEN_COMMENT in line 63
      protection public
   macro definition TOKEN_JUNK in line 64
      protection public
   macro definition TOKEN_RIGHT_ASSIGN in line 66
      protection public
   macro definition TOKEN_LEFT_ASSIGN in line 67
      protection public
   macro definition TOKEN_ADD_ASSIGN in line 68
      protection public
   macro definition TOKEN_SUB_ASSIGN in line 69
      protection public
   macro definition TOKEN_MUL_ASSIGN in line 70
      protection public
   macro definition TOKEN_DIV_ASSIGN in line 71
      protection public
   macro definition TOKEN_MOD_ASSIGN in line 72
      protection public
   macro definition TOKEN_AND_ASSIGN in line 73
      protection public
   macro definition TOKEN_XOR_ASSIGN in line 74
      protection public
   macro definition TOKEN_OR_ASSIGN in line 75
      protection public
   macro definition TOKEN_RIGHT_OP in line 77
      protection public
   macro definition TOKEN_LEFT_OP in line 78
      protection public
   macro definition TOKEN_LE_OP in line 79
      protection public
   macro definition TOKEN_GE_OP in line 80
      protection public
   macro definition TOKEN_EQ_OP in line 81
      protection public
   macro definition TOKEN_NE_OP in line 82
      protection public
   variable clex_column in line 92
      protection public
   variable clex_lineno in line 93
      protection public
   variable yycin in line 94
      protection public
   variable yyctext in line 95
      protection public
   variable yycleng in line 96
      protection public
   variable yyclength in line 97
      protection public
   variable yycsize in line 97
      protection public
   variable yyccomment in line 98
      protection public
   variable plex_column in line 103
      protection public
   variable plex_lineno in line 104
      protection public
   variable yypin in line 105
      protection public
   variable yyptext in line 106
      protection public
   variable yypleng in line 107
      protection public
   variable yypcomment in line 108
      protection public
   variable perllex_column in line 113
      protection public
   variable perllex_lineno in line 114
      protection public
   variable yyperlin in line 115
      protection public
   variable yyperltext in line 116
      protection public
   variable yyperlleng in line 117
      protection public
   variable yyperlcomment in line 118
      protection public
   variable phplex_column in line 122
      protection public
   variable phplex_lineno in line 123
      protection public
   variable yyphpin in line 124
      protection public
   variable yyphptext in line 125
      protection public
   variable yyphpleng in line 126
      protection public
   variable yyphpcomment in line 127
      protection public
   variable rubylex_column in line 131
      protection public
   variable rubylex_lineno in line 132
      protection public
   variable yyrubyin in line 133
      protection public
   variable yyrubytext in line 134
      protection public
   variable yyrubyleng in line 135
      protection public
   variable yyrubycomment in line 136
      protection public
   function yyclex(void) in line 100
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function yyplex(void) in line 110
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function yyperllex(void) in line 119
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function yyphplex(void) in line 128
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
   function yyrubylex(void) in line 137
      protection public
      1 lines of code
      1 parameters
      1 conditional paths
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/rats/rats-2.4/unistd.h
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/rats/rats-2.4/version.h
module version.h
   macro definition VERSION_MAJOR in line 1
      protection public
   macro definition VERSION_MINOR in line 2
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/rats/rats-2.4/vuln_db.c
module vuln_db.c
   typedef udata_t in line 60
      protection public
   function InitUdata(udata_t *,XML_Parser) in line 62
      protection public
      10 lines of code
      2 parameters
      1 conditional paths
      uses variable udata_t::failed defined in vuln_db.c
      uses variable udata_t::failedat defined in vuln_db.c
      uses variable udata_t::parser defined in vuln_db.c
      uses variable udata_t::depth defined in vuln_db.c
      uses variable udata_t::bufptr defined in vuln_db.c
      uses variable udata_t::vuln defined in vuln_db.c
      uses variable udata_t::myhash defined in vuln_db.c
   function FreeVuln(Vuln_t *) in line 73
      protection public
      18 lines of code
      1 parameters
      7 conditional paths
      uses variable udata_t::vuln defined in vuln_db.c
      uses variable Vuln_t::Name defined in vuln_db.h
      uses variable Vuln_t::FSProblem defined in vuln_db.h
      uses variable Vuln_t::BOProblem defined in vuln_db.h
      uses variable Vuln_t::InputProblem defined in vuln_db.h
      uses variable Vuln_t::Info defined in vuln_db.h
      uses function FreeInfo(Info_t *) defined in vuln_db.c
   function InitVuln(Vuln_t *) in line 92
      protection public
      11 lines of code
      1 parameters
      1 conditional paths
      uses variable udata_t::vuln defined in vuln_db.c
      uses variable Vuln_t::Name defined in vuln_db.h
      uses variable Vuln_t::FSProblem defined in vuln_db.h
      uses variable Vuln_t::BOProblem defined in vuln_db.h
      uses variable Vuln_t::RaceCheck defined in vuln_db.h
      uses variable Vuln_t::RaceUse defined in vuln_db.h
      uses variable Vuln_t::Input defined in vuln_db.h
      uses variable Vuln_t::Info defined in vuln_db.h
      uses variable Vuln_t::InputProblem defined in vuln_db.h
   function InitFSProblem(FSProblem_t *) in line 104
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable FSProblem_t::Arg defined in vuln_db.h
      uses variable FSProblem_t::Severity defined in vuln_db.h
      uses enumvalue Default defined in vuln_db.h
   function InitBOProblem(BOProblem_t *) in line 110
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses variable BOProblem_t::FormatArg defined in vuln_db.h
      uses variable BOProblem_t::SrcBufArg defined in vuln_db.h
      uses variable BOProblem_t::Severity defined in vuln_db.h
      uses enumvalue Default defined in vuln_db.h
   function InitInputProblem(InputProblem_t *) in line 117
      protection public
      5 lines of code
      1 parameters
      1 conditional paths
      uses variable InputProblem_t::Arg defined in vuln_db.h
      uses variable InputProblem_t::Severity defined in vuln_db.h
      uses enumvalue Default defined in vuln_db.h
   function FreeInfo(Info_t *) in line 123
      protection public
      9 lines of code
      1 parameters
      1 conditional paths
      uses variable Info_t::Description defined in vuln_db.h
      uses variable Info_t::URL defined in vuln_db.h
   function InitInfo(Info_t *) in line 133
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses variable Info_t::Description defined in vuln_db.h
      uses variable Info_t::URL defined in vuln_db.h
      uses variable Info_t::Severity defined in vuln_db.h
      uses enumvalue Default defined in vuln_db.h
   function SetFailed(udata_t *) in line 140
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses variable udata_t::failed defined in vuln_db.c
      uses variable udata_t::failedat defined in vuln_db.c
      uses variable udata_t::parser defined in vuln_db.c
   function StartElement(void *,const char *,const char **) in line 147
      protection public
      131 lines of code
      3 parameters
      27 conditional paths
      uses variable udata_t::failed defined in vuln_db.c
      uses variable udata_t::fname defined in vuln_db.c
      uses variable udata_t::depth defined in vuln_db.c
      uses variable udata_t::bufptr defined in vuln_db.c
      uses variable udata_t::databuf defined in vuln_db.c
      uses variable udata_t::myhash defined in vuln_db.c
      uses function HashGet(Hash,char *) defined in hash.c
      uses variable udata_t::parenthash defined in vuln_db.c
      uses function HashInit() defined in hash.c
      uses function HashInsert(Hash,void *,char *) defined in hash.c
      uses variable udata_t::vuln defined in vuln_db.c
      uses function SetFailed(udata_t *) defined in vuln_db.c
      uses function InitVuln(Vuln_t *) defined in vuln_db.c
      uses variable Vuln_t::FSProblem defined in vuln_db.h
      uses function InitFSProblem(FSProblem_t *) defined in vuln_db.c
      uses variable Vuln_t::BOProblem defined in vuln_db.h
      uses function InitBOProblem(BOProblem_t *) defined in vuln_db.c
      uses variable Vuln_t::InputProblem defined in vuln_db.h
      uses function InitInputProblem(InputProblem_t *) defined in vuln_db.c
      uses variable Vuln_t::Info defined in vuln_db.h
      uses function InitInfo(Info_t *) defined in vuln_db.c
   function FrameIsName(udata_t *,const char *) in line 279
      protection public
      4 lines of code
      2 parameters
      1 conditional paths
      uses variable udata_t::fname defined in vuln_db.c
      uses variable udata_t::depth defined in vuln_db.c
   function ConvertSeverity(const char *) in line 284
      protection public
      10 lines of code
      1 parameters
      4 conditional paths
      uses enumvalue High defined in vuln_db.h
      uses enumvalue Medium defined in vuln_db.h
      uses enumvalue Low defined in vuln_db.h
      uses enumvalue Default defined in vuln_db.h
   function EndElement(void *,const char *) in line 295
      protection public
      76 lines of code
      2 parameters
      22 conditional paths
      uses variable udata_t::failed defined in vuln_db.c
      uses variable udata_t::fname defined in vuln_db.c
      uses variable udata_t::depth defined in vuln_db.c
      uses variable udata_t::vuln defined in vuln_db.c
      uses function HashInsert(Hash,void *,char *) defined in hash.c
      uses variable udata_t::myhash defined in vuln_db.c
      uses variable Vuln_t::Name defined in vuln_db.h
      uses function FreeVuln(Vuln_t *) defined in vuln_db.c
      uses variable udata_t::databuf defined in vuln_db.c
      uses variable Vuln_t::BOProblem defined in vuln_db.h
      uses variable BOProblem_t::FormatArg defined in vuln_db.h
      uses variable BOProblem_t::SrcBufArg defined in vuln_db.h
      uses variable BOProblem_t::Scan defined in vuln_db.h
      uses variable Vuln_t::Info defined in vuln_db.h
      uses variable Info_t::Description defined in vuln_db.h
      uses variable Info_t::URL defined in vuln_db.h
      uses variable Vuln_t::RaceCheck defined in vuln_db.h
      uses variable Vuln_t::RaceUse defined in vuln_db.h
      uses variable Vuln_t::Input defined in vuln_db.h
      uses function FrameIsName(udata_t *,const char *) defined in vuln_db.c
      uses variable Vuln_t::FSProblem defined in vuln_db.h
      uses variable FSProblem_t::Arg defined in vuln_db.h
      uses variable Vuln_t::InputProblem defined in vuln_db.h
      uses variable InputProblem_t::Arg defined in vuln_db.h
      uses variable FSProblem_t::Severity defined in vuln_db.h
      uses function ConvertSeverity(const char *) defined in vuln_db.c
      uses variable BOProblem_t::Severity defined in vuln_db.h
      uses variable InputProblem_t::Severity defined in vuln_db.h
      uses variable Info_t::Severity defined in vuln_db.h
      uses variable udata_t::bufptr defined in vuln_db.c
   function CharData(void *,const XML_Char *,int) in line 372
      protection public
      16 lines of code
      3 parameters
      3 conditional paths
      uses variable udata_t::failed defined in vuln_db.c
      uses variable udata_t::bufptr defined in vuln_db.c
      uses variable udata_t::databuf defined in vuln_db.c
   function ParseVulnDb(char *,Hash *) in line 389
      protection public
      35 lines of code
      2 parameters
      1 conditional paths
      uses variable udata_t::parser defined in vuln_db.c
      uses function InitUdata(udata_t *,XML_Parser) defined in vuln_db.c
      uses function StartElement(void *,const char *,const char **) defined in vuln_db.c
      uses function EndElement(void *,const char *) defined in vuln_db.c
      uses function CharData(void *,const XML_Char *,int) defined in vuln_db.c
      uses function HashInit() defined in hash.c
      uses variable udata_t::parenthash defined in vuln_db.c
      uses variable udata_t::failed defined in vuln_db.c
   variable udata_t::bufptr in line 53
      protection public
   variable udata_t::databuf in line 52
      protection public
   variable udata_t::depth in line 51
      protection public
   variable udata_t::failed in line 55
      protection public
   variable udata_t::failedat in line 56
      protection public
   variable udata_t::fname in line 50
      protection public
   variable udata_t::myhash in line 58
      protection public
   variable udata_t::parenthash in line 59
      protection public
   variable udata_t::parser in line 57
      protection public
   variable udata_t::vuln in line 54
      protection public
file /home/joenio/src/dissertacao-ufba-2016/dataset/NIST/rats/rats-2.4/vuln_db.h
module vuln_db.h
   enumeration Severity_t in line 24
      protection public
   typedef Severity_t in line 30
      protection public
   typedef FSProblem_t in line 37
      protection public
   typedef BOProblem_t in line 45
      protection public
   typedef InputProblem_t in line 50
      protection public
   typedef Info_t in line 56
      protection public
   typedef Vuln_t in line 68
      protection public
   enumvalue Default in line 26
      protection public
   enumvalue Low in line 27
      protection public
   enumvalue Medium in line 28
      protection public
   enumvalue High in line 30
      protection public
   function ParseVulnDb(char *,Hash *) in line 73
      protection public
      35 lines of code
      2 parameters
      6 conditional paths
      uses variable udata_t::parser defined in vuln_db.c
      uses function InitUdata(udata_t *,XML_Parser) defined in vuln_db.c
      uses function StartElement(void *,const char *,const char **) defined in vuln_db.c
      uses function EndElement(void *,const char *) defined in vuln_db.c
      uses function CharData(void *,const XML_Char *,int) defined in vuln_db.c
      uses function HashInit() defined in hash.c
      uses variable udata_t::parenthash defined in vuln_db.c
      uses variable udata_t::failed defined in vuln_db.c
   function FreeInfo(Info_t *) in line 74
      protection public
      9 lines of code
      1 parameters
      4 conditional paths
      uses variable Info_t::Description defined in vuln_db.h
      uses variable Info_t::URL defined in vuln_db.h
   function InitVuln(Vuln_t *) in line 75
      protection public
      11 lines of code
      1 parameters
      1 conditional paths
      uses variable udata_t::vuln defined in vuln_db.c
      uses variable Vuln_t::Name defined in vuln_db.h
      uses variable Vuln_t::FSProblem defined in vuln_db.h
      uses variable Vuln_t::BOProblem defined in vuln_db.h
      uses variable Vuln_t::RaceCheck defined in vuln_db.h
      uses variable Vuln_t::RaceUse defined in vuln_db.h
      uses variable Vuln_t::Input defined in vuln_db.h
      uses variable Vuln_t::Info defined in vuln_db.h
      uses variable Vuln_t::InputProblem defined in vuln_db.h
   function InitInfo(Info_t *) in line 76
      protection public
      6 lines of code
      1 parameters
      1 conditional paths
      uses variable Info_t::Description defined in vuln_db.h
      uses variable Info_t::URL defined in vuln_db.h
      uses variable Info_t::Severity defined in vuln_db.h
      uses enumvalue Default defined in vuln_db.h
   variable FSProblem_t::Arg in line 35
      protection public
   variable FSProblem_t::Severity in line 36
      protection public
   variable BOProblem_t::FormatArg in line 41
      protection public
   variable BOProblem_t::Scan in line 44
      protection public
   variable BOProblem_t::Severity in line 43
      protection public
   variable BOProblem_t::SrcBufArg in line 42
      protection public
   variable InputProblem_t::Arg in line 48
      protection public
   variable InputProblem_t::Severity in line 49
      protection public
   variable Info_t::Description in line 53
      protection public
   variable Info_t::Severity in line 55
      protection public
   variable Info_t::URL in line 54
      protection public
   variable Vuln_t::BOProblem in line 62
      protection public
   variable Vuln_t::FSProblem in line 61
      protection public
   variable Vuln_t::Info in line 67
      protection public
   variable Vuln_t::Input in line 65
      protection public
   variable Vuln_t::InputProblem in line 66
      protection public
   variable Vuln_t::Name in line 60
      protection public
   variable Vuln_t::RaceCheck in line 63
      protection public
   variable Vuln_t::RaceUse in line 64
      protection public
